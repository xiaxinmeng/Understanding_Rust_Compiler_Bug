{"sha": "a4d9624242df6bfe6c0a298867dd2bd527263424", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZDk2MjQyNDJkZjZiZmU2YzBhMjk4ODY3ZGQyYmQ1MjcyNjM0MjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T11:21:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T11:21:46Z"}, "message": "Auto merge of #82967 - RalfJung:copy-nonoverlap, r=oli-obk\n\nfix copy_nonoverlapping\n\nFixes a bug introduced by https://github.com/rust-lang/rust/pull/77511\n\nr? `@oli-obk`\nFixes https://github.com/rust-lang/rust/issues/82961", "tree": {"sha": "7097e5f64af20e317dbf909cec82ab7388c13b4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7097e5f64af20e317dbf909cec82ab7388c13b4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4d9624242df6bfe6c0a298867dd2bd527263424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d9624242df6bfe6c0a298867dd2bd527263424", "html_url": "https://github.com/rust-lang/rust/commit/a4d9624242df6bfe6c0a298867dd2bd527263424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4d9624242df6bfe6c0a298867dd2bd527263424/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dff1edf919198aa4dea106e63b7d1899f1061fe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dff1edf919198aa4dea106e63b7d1899f1061fe0", "html_url": "https://github.com/rust-lang/rust/commit/dff1edf919198aa4dea106e63b7d1899f1061fe0"}, {"sha": "4d748624c09692c05528b7c166b2ccb9cdbdda61", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d748624c09692c05528b7c166b2ccb9cdbdda61", "html_url": "https://github.com/rust-lang/rust/commit/4d748624c09692c05528b7c166b2ccb9cdbdda61"}], "stats": {"total": 83, "additions": 76, "deletions": 7}, "files": [{"sha": "2bed3b2c3adc76e7720d35312ca3f369b281c6a3", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a4d9624242df6bfe6c0a298867dd2bd527263424/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d9624242df6bfe6c0a298867dd2bd527263424/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=a4d9624242df6bfe6c0a298867dd2bd527263424", "patch": "@@ -115,11 +115,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             // Call CopyNonOverlapping\n-            CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n-                let count = self.eval_operand(count, None)?;\n-\n+            CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { src, dst, count }) => {\n                 let src = self.eval_operand(src, None)?;\n                 let dst = self.eval_operand(dst, None)?;\n+                let count = self.eval_operand(count, None)?;\n                 self.copy(&src, &dst, &count, /* nonoverlapping */ true)?;\n             }\n \n@@ -160,16 +159,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n         let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n         let (size, align) = (layout.size, layout.align.abi);\n+        let size = size.checked_mul(count, self).ok_or_else(|| {\n+            err_ub_format!(\"overflow computing total size of `copy_nonoverlapping`\")\n+        })?;\n+\n+        // Make sure we check both pointers for an access of the total size and aligment,\n+        // *even if* the total size is 0.\n         let src =\n             self.memory.check_ptr_access(self.read_scalar(&src)?.check_init()?, size, align)?;\n \n         let dst =\n             self.memory.check_ptr_access(self.read_scalar(&dst)?.check_init()?, size, align)?;\n \n-        let size = size.checked_mul(count, self).ok_or_else(|| {\n-            err_ub_format!(\"overflow computing total size of `copy_nonoverlapping`\")\n-        })?;\n-\n         if let (Some(src), Some(dst)) = (src, dst) {\n             self.memory.copy(src, dst, size, nonoverlapping)?;\n         }"}, {"sha": "6b46b9317d0a1f4bc332f8c59419c84cf4da2307", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a4d9624242df6bfe6c0a298867dd2bd527263424/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d9624242df6bfe6c0a298867dd2bd527263424/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=a4d9624242df6bfe6c0a298867dd2bd527263424", "patch": "@@ -0,0 +1,31 @@\n+// ignore-tidy-linelength\n+#![feature(const_mut_refs, const_intrinsic_copy, const_ptr_offset)]\n+use std::ptr;\n+\n+const COPY_ZERO: () = unsafe {\n+    // Since we are not copying anything, this should be allowed.\n+    let src = ();\n+    let mut dst = ();\n+    ptr::copy_nonoverlapping(&src as *const _ as *const i32, &mut dst as *mut _ as *mut i32, 0);\n+};\n+\n+const COPY_OOB_1: () = unsafe {\n+    let mut x = 0i32;\n+    let dangle = (&mut x as *mut i32).wrapping_add(10);\n+    // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n+    ptr::copy_nonoverlapping(0x100 as *const i32, dangle, 0); //~ ERROR any use of this value will cause an error\n+    //~| memory access failed: pointer must be in-bounds\n+    //~| previously accepted\n+};\n+const COPY_OOB_2: () = unsafe {\n+    let x = 0i32;\n+    let dangle = (&x as *const i32).wrapping_add(10);\n+    // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n+    ptr::copy_nonoverlapping(dangle, 0x100 as *mut i32, 0); //~ ERROR any use of this value will cause an error\n+    //~| memory access failed: pointer must be in-bounds\n+    //~| previously accepted\n+};\n+\n+\n+fn main() {\n+}"}, {"sha": "9157ba50ddeeb62a5d1105428b4f1b10c3882a85", "filename": "src/test/ui/consts/copy-intrinsic.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a4d9624242df6bfe6c0a298867dd2bd527263424/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4d9624242df6bfe6c0a298867dd2bd527263424/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr?ref=a4d9624242df6bfe6c0a298867dd2bd527263424", "patch": "@@ -0,0 +1,37 @@\n+error: any use of this value will cause an error\n+  --> $DIR/copy-intrinsic.rs:16:5\n+   |\n+LL | / const COPY_OOB_1: () = unsafe {\n+LL | |     let mut x = 0i32;\n+LL | |     let dangle = (&mut x as *mut i32).wrapping_add(10);\n+LL | |     // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n+LL | |     ptr::copy_nonoverlapping(0x100 as *const i32, dangle, 0);\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc4 which has size 4\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/copy-intrinsic.rs:24:5\n+   |\n+LL | / const COPY_OOB_2: () = unsafe {\n+LL | |     let x = 0i32;\n+LL | |     let dangle = (&x as *const i32).wrapping_add(10);\n+LL | |     // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n+LL | |     ptr::copy_nonoverlapping(dangle, 0x100 as *mut i32, 0);\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc6 which has size 4\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 2 previous errors\n+"}]}