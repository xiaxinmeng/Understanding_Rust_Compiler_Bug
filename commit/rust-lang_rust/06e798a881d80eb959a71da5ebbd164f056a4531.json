{"sha": "06e798a881d80eb959a71da5ebbd164f056a4531", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZTc5OGE4ODFkODBlYjk1OWE3MWRhNWViYmQxNjRmMDU2YTQ1MzE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-11T18:52:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-11T18:54:23Z"}, "message": "Normalize the types of fields we project out of a struct or tuple struct.\nFixes #20954.", "tree": {"sha": "e296d4b7533e6f0f76c68bda8fce7517ecc342de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e296d4b7533e6f0f76c68bda8fce7517ecc342de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06e798a881d80eb959a71da5ebbd164f056a4531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06e798a881d80eb959a71da5ebbd164f056a4531", "html_url": "https://github.com/rust-lang/rust/commit/06e798a881d80eb959a71da5ebbd164f056a4531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06e798a881d80eb959a71da5ebbd164f056a4531/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2127e0d56d85ff48aafce90ab762650e46370b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/2127e0d56d85ff48aafce90ab762650e46370b63", "html_url": "https://github.com/rust-lang/rust/commit/2127e0d56d85ff48aafce90ab762650e46370b63"}], "stats": {"total": 139, "additions": 111, "deletions": 28}, "files": [{"sha": "a6c2c0942b852e0c68b70ac4c8cb2412c7f84c69", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/06e798a881d80eb959a71da5ebbd164f056a4531/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e798a881d80eb959a71da5ebbd164f056a4531/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=06e798a881d80eb959a71da5ebbd164f056a4531", "patch": "@@ -2239,6 +2239,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         obligations.map_move(|o| self.register_predicate(o));\n     }\n+\n+    // Only for fields! Returns <none> for methods>\n+    // Indifferent to privacy flags\n+    pub fn lookup_field_ty(&self,\n+                           span: Span,\n+                           class_id: ast::DefId,\n+                           items: &[ty::field_ty],\n+                           fieldname: ast::Name,\n+                           substs: &subst::Substs<'tcx>)\n+                           -> Option<Ty<'tcx>>\n+    {\n+        let o_field = items.iter().find(|f| f.name == fieldname);\n+        o_field.map(|f| ty::lookup_field_type(self.tcx(), class_id, f.id, substs))\n+               .map(|t| self.normalize_associated_types_in(span, &t))\n+    }\n+\n+    pub fn lookup_tup_field_ty(&self,\n+                               span: Span,\n+                               class_id: ast::DefId,\n+                               items: &[ty::field_ty],\n+                               idx: uint,\n+                               substs: &subst::Substs<'tcx>)\n+                               -> Option<Ty<'tcx>>\n+    {\n+        let o_field = if idx < items.len() { Some(&items[idx]) } else { None };\n+        o_field.map(|f| ty::lookup_field_type(self.tcx(), class_id, f.id, substs))\n+               .map(|t| self.normalize_associated_types_in(span, &t))\n+    }\n }\n \n impl<'a, 'tcx> RegionScope for FnCtxt<'a, 'tcx> {\n@@ -2953,30 +2981,6 @@ pub fn impl_self_ty<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     TypeAndSubsts { substs: substs, ty: substd_ty }\n }\n \n-// Only for fields! Returns <none> for methods>\n-// Indifferent to privacy flags\n-pub fn lookup_field_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                             class_id: ast::DefId,\n-                             items: &[ty::field_ty],\n-                             fieldname: ast::Name,\n-                             substs: &subst::Substs<'tcx>)\n-                             -> Option<Ty<'tcx>> {\n-\n-    let o_field = items.iter().find(|f| f.name == fieldname);\n-    o_field.map(|f| ty::lookup_field_type(tcx, class_id, f.id, substs))\n-}\n-\n-pub fn lookup_tup_field_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                 class_id: ast::DefId,\n-                                 items: &[ty::field_ty],\n-                                 idx: uint,\n-                                 substs: &subst::Substs<'tcx>)\n-                                 -> Option<Ty<'tcx>> {\n-\n-    let o_field = if idx < items.len() { Some(&items[idx]) } else { None };\n-    o_field.map(|f| ty::lookup_field_type(tcx, class_id, f.id, substs))\n-}\n-\n // Controls whether the arguments are automatically referenced. This is useful\n // for overloaded binary and unary operators.\n #[derive(Copy, PartialEq)]\n@@ -3398,8 +3402,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                     ty::ty_struct(base_id, substs) => {\n                         debug!(\"struct named {}\", ppaux::ty_to_string(tcx, base_t));\n                         let fields = ty::lookup_struct_fields(tcx, base_id);\n-                        lookup_field_ty(tcx, base_id, &fields[],\n-                                        field.node.name, &(*substs))\n+                        fcx.lookup_field_ty(expr.span, base_id, &fields[],\n+                                            field.node.name, &(*substs))\n                     }\n                     _ => None\n                 }\n@@ -3461,8 +3465,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                         if tuple_like {\n                             debug!(\"tuple struct named {}\", ppaux::ty_to_string(tcx, base_t));\n                             let fields = ty::lookup_struct_fields(tcx, base_id);\n-                            lookup_tup_field_ty(tcx, base_id, &fields[],\n-                                                idx.node, &(*substs))\n+                            fcx.lookup_tup_field_ty(expr.span, base_id, &fields[],\n+                                                    idx.node, &(*substs))\n                         } else {\n                             None\n                         }"}, {"sha": "1ded34ff3ffe3bb3d588145ddef48a971bece42c", "filename": "src/test/run-pass/associated-types-struct-field-named.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/06e798a881d80eb959a71da5ebbd164f056a4531/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e798a881d80eb959a71da5ebbd164f056a4531/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs?ref=06e798a881d80eb959a71da5ebbd164f056a4531", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we correctly normalize the type of a struct field\n+// which has an associated type.\n+\n+pub trait UnifyKey {\n+    type Value;\n+}\n+\n+pub struct Node<K:UnifyKey> {\n+    pub key: K,\n+    pub value: K::Value,\n+}\n+\n+fn foo<K : UnifyKey<Value=Option<V>>,V : Clone>(node: &Node<K>) -> Option<V> {\n+    node.value.clone()\n+}\n+\n+impl UnifyKey for i32 {\n+    type Value = Option<u32>;\n+}\n+\n+impl UnifyKey for u32 {\n+    type Value = Option<i32>;\n+}\n+\n+pub fn main() {\n+    let node: Node<i32> = Node { key: 1, value: Some(22) };\n+    assert_eq!(foo(&node), Some(22_u32));\n+\n+    let node: Node<u32> = Node { key: 1, value: Some(22) };\n+    assert_eq!(foo(&node), Some(22_i32));\n+}"}, {"sha": "3669dec4fbdd469c2dc6e472547576a4f14cea47", "filename": "src/test/run-pass/associated-types-struct-field-numbered.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/06e798a881d80eb959a71da5ebbd164f056a4531/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e798a881d80eb959a71da5ebbd164f056a4531/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs?ref=06e798a881d80eb959a71da5ebbd164f056a4531", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we correctly normalize the type of a struct field\n+// which has an associated type.\n+\n+pub trait UnifyKey {\n+    type Value;\n+}\n+\n+pub struct Node<K:UnifyKey>(K, K::Value);\n+\n+fn foo<K : UnifyKey<Value=Option<V>>,V : Clone>(node: &Node<K>) -> Option<V> {\n+    node.1.clone()\n+}\n+\n+impl UnifyKey for i32 {\n+    type Value = Option<u32>;\n+}\n+\n+impl UnifyKey for u32 {\n+    type Value = Option<i32>;\n+}\n+\n+pub fn main() {\n+    let node: Node<i32> = Node(1, Some(22));\n+    assert_eq!(foo(&node), Some(22_u32));\n+\n+    let node: Node<u32> = Node(1, Some(22));\n+    assert_eq!(foo(&node), Some(22_i32));\n+}"}]}