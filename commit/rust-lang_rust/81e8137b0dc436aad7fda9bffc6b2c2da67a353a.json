{"sha": "81e8137b0dc436aad7fda9bffc6b2c2da67a353a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZTgxMzdiMGRjNDM2YWFkN2ZkYTliZmZjNmIyYzJkYTY3YTM1M2E=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-01-02T20:05:42Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-01-04T18:38:10Z"}, "message": "Inline trans_switch to simplify code", "tree": {"sha": "7ddbbb265cac74b0950e1fbbd3b64ea95d087096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ddbbb265cac74b0950e1fbbd3b64ea95d087096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e8137b0dc436aad7fda9bffc6b2c2da67a353a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e8137b0dc436aad7fda9bffc6b2c2da67a353a", "html_url": "https://github.com/rust-lang/rust/commit/81e8137b0dc436aad7fda9bffc6b2c2da67a353a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e8137b0dc436aad7fda9bffc6b2c2da67a353a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "426c558c5a7d8c9c8b0382e64e64b2647ecdd057", "url": "https://api.github.com/repos/rust-lang/rust/commits/426c558c5a7d8c9c8b0382e64e64b2647ecdd057", "html_url": "https://github.com/rust-lang/rust/commit/426c558c5a7d8c9c8b0382e64e64b2647ecdd057"}], "stats": {"total": 46, "additions": 13, "deletions": 33}, "files": [{"sha": "c3b9a56ac9778569b4d1e4e835ff2571fbcae58d", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/81e8137b0dc436aad7fda9bffc6b2c2da67a353a/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e8137b0dc436aad7fda9bffc6b2c2da67a353a/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=81e8137b0dc436aad7fda9bffc6b2c2da67a353a", "patch": "@@ -56,12 +56,6 @@ use monomorphize;\n use type_::Type;\n use type_of;\n \n-#[derive(Copy, Clone, PartialEq)]\n-pub enum BranchKind {\n-    Switch,\n-    Single\n-}\n-\n /// Given an enum, struct, closure, or tuple, extracts fields.\n /// Treats closures as a struct with one variant.\n /// `empty_if_no_variants` is a switch to deal with empty enums.\n@@ -273,28 +267,6 @@ fn struct_llfields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, fields: &Vec<Ty<'tcx>>\n     }\n }\n \n-/// Obtain a representation of the discriminant sufficient to translate\n-/// destructuring; this may or may not involve the actual discriminant.\n-pub fn trans_switch<'a, 'tcx>(\n-    bcx: &Builder<'a, 'tcx>,\n-    t: Ty<'tcx>,\n-    scrutinee: ValueRef,\n-    range_assert: bool\n-) -> (BranchKind, Option<ValueRef>) {\n-    let l = bcx.ccx.layout_of(t);\n-    match *l {\n-        layout::CEnum { .. } | layout::General { .. } |\n-        layout::RawNullablePointer { .. } | layout::StructWrappedNullablePointer { .. } => {\n-            (BranchKind::Switch, Some(trans_get_discr(bcx, t, scrutinee, None, range_assert)))\n-        }\n-        layout::Univariant { .. } | layout::UntaggedUnion { .. } => {\n-            // N.B.: Univariant means <= 1 enum variants (*not* == 1 variants).\n-            (BranchKind::Single, None)\n-        },\n-        _ => bug!(\"{} is not an enum.\", t)\n-    }\n-}\n-\n pub fn is_discr_signed<'tcx>(l: &layout::Layout) -> bool {\n     match *l {\n         layout::CEnum { signed, .. }=> signed,"}, {"sha": "0c21573b9c43b4347fa22e5ba7709ffa508c5272", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81e8137b0dc436aad7fda9bffc6b2c2da67a353a/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e8137b0dc436aad7fda9bffc6b2c2da67a353a/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=81e8137b0dc436aad7fda9bffc6b2c2da67a353a", "patch": "@@ -20,7 +20,7 @@ use llvm::{ValueRef, get_param};\n use middle::lang_items::BoxFreeFnLangItem;\n use rustc::ty::subst::{Substs};\n use rustc::traits;\n-use rustc::ty::{self, AdtDef, AdtKind, Ty, TypeFoldable};\n+use rustc::ty::{self, layout, AdtDef, AdtKind, Ty, TypeFoldable};\n use rustc::ty::subst::Kind;\n use rustc::mir::tcx::LvalueTy;\n use mir::lvalue::LvalueRef;\n@@ -471,14 +471,22 @@ fn drop_structural_ty<'a, 'tcx>(cx: Builder<'a, 'tcx>, ptr: LvalueRef<'tcx>) ->\n                 // NB: we must hit the discriminant first so that structural\n                 // comparison know not to proceed when the discriminants differ.\n \n-                match adt::trans_switch(&cx, t, ptr.llval, false) {\n-                    (adt::BranchKind::Single, None) => {\n+                // Obtain a representation of the discriminant sufficient to translate\n+                // destructuring; this may or may not involve the actual discriminant.\n+                let l = cx.ccx.layout_of(t);\n+                match *l {\n+                    layout::Univariant { .. } |\n+                    layout::UntaggedUnion { .. } => {\n                         if n_variants != 0 {\n                             assert!(n_variants == 1);\n                             iter_variant(&cx, ptr, &adt, 0, substs);\n                         }\n                     }\n-                    (adt::BranchKind::Switch, Some(lldiscrim_a)) => {\n+                    layout::CEnum { .. } |\n+                    layout::General { .. } |\n+                    layout::RawNullablePointer { .. } |\n+                    layout::StructWrappedNullablePointer { .. } => {\n+                        let lldiscrim_a = adt::trans_get_discr(&cx, t, ptr.llval, None, false);\n                         let tcx = cx.tcx();\n                         drop_ty(&cx, LvalueRef::new_sized_ty(lldiscrim_a, tcx.types.isize));\n \n@@ -511,7 +519,7 @@ fn drop_structural_ty<'a, 'tcx>(cx: Builder<'a, 'tcx>, ptr: LvalueRef<'tcx>) ->\n                         }\n                         cx = next_cx;\n                     }\n-                    _ => cx.sess().unimpl(\"value from adt::trans_switch in drop_structural_ty\"),\n+                    _ => bug!(\"{} is not an enum.\", t),\n                 }\n             }\n         },"}]}