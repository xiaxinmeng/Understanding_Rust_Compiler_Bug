{"sha": "6282e5da674eaf00821a0d131327a7811e413a16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyODJlNWRhNjc0ZWFmMDA4MjFhMGQxMzEzMjdhNzgxMWU0MTNhMTY=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@mozilla.com", "date": "2013-02-19T08:14:56Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-02-21T02:45:50Z"}, "message": "librustc: tidy", "tree": {"sha": "6232c67a69753050e5f9065c81de8941a2098a09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6232c67a69753050e5f9065c81de8941a2098a09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6282e5da674eaf00821a0d131327a7811e413a16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6282e5da674eaf00821a0d131327a7811e413a16", "html_url": "https://github.com/rust-lang/rust/commit/6282e5da674eaf00821a0d131327a7811e413a16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6282e5da674eaf00821a0d131327a7811e413a16/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "601c2edb4d64a45c702ce56b7e8ec1d232dff099", "url": "https://api.github.com/repos/rust-lang/rust/commits/601c2edb4d64a45c702ce56b7e8ec1d232dff099", "html_url": "https://github.com/rust-lang/rust/commit/601c2edb4d64a45c702ce56b7e8ec1d232dff099"}], "stats": {"total": 76, "additions": 43, "deletions": 33}, "files": [{"sha": "b30f9fcb9dd830fc02271fe2709dfeaae6f9d613", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=6282e5da674eaf00821a0d131327a7811e413a16", "patch": "@@ -686,7 +686,9 @@ pub fn exported_name(sess: Session,\n             path_name(sess.ident_of(vers.to_owned()))));\n }\n \n-pub fn mangle_exported_name(ccx: @CrateContext, +path: path, t: ty::t) -> ~str {\n+pub fn mangle_exported_name(ccx: @CrateContext,\n+                            +path: path,\n+                            t: ty::t) -> ~str {\n     let hash = get_symbol_hash(ccx, t);\n     return exported_name(ccx.sess, path,\n                          hash,"}, {"sha": "5343b832de503d3fd0ce52f69a62a28a396423f7", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=6282e5da674eaf00821a0d131327a7811e413a16", "patch": "@@ -1071,7 +1071,8 @@ fn encode_attributes(ebml_w: writer::Encoder, attrs: &[attribute]) {\n // metadata that Rust cares about for linking crates. This attribute requires\n // 'name' and 'vers' items, so if the user didn't provide them we will throw\n // them in anyway with default values.\n-fn synthesize_crate_attrs(ecx: @EncodeContext, crate: &crate) -> ~[attribute] {\n+fn synthesize_crate_attrs(ecx: @EncodeContext,\n+                          crate: &crate) -> ~[attribute] {\n \n     fn synthesize_link_attr(ecx: @EncodeContext, +items: ~[@meta_item]) ->\n        attribute {"}, {"sha": "9440c951be5e910d2c03e32c03c4671d3febe432", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=6282e5da674eaf00821a0d131327a7811e413a16", "patch": "@@ -565,7 +565,8 @@ fn encode_method_map_entry(ecx: @e::EncodeContext,\n }\n \n impl read_method_map_entry_helper for reader::Decoder {\n-    fn read_method_map_entry(xcx: @ExtendedDecodeContext) -> method_map_entry {\n+    fn read_method_map_entry(xcx: @ExtendedDecodeContext)\n+        -> method_map_entry {\n         do self.read_rec {\n             method_map_entry {\n                 self_arg: self.read_field(~\"self_arg\", 0u, || {\n@@ -672,7 +673,8 @@ fn encode_vtable_origin(ecx: @e::EncodeContext,\n \n trait vtable_decoder_helpers {\n     fn read_vtable_res(xcx: @ExtendedDecodeContext) -> typeck::vtable_res;\n-    fn read_vtable_origin(xcx: @ExtendedDecodeContext) -> typeck::vtable_origin;\n+    fn read_vtable_origin(xcx: @ExtendedDecodeContext)\n+        -> typeck::vtable_origin;\n }\n \n impl vtable_decoder_helpers for reader::Decoder {"}, {"sha": "34665fe7b7d2744734cb51df4c62f7938ed67e7e", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=6282e5da674eaf00821a0d131327a7811e413a16", "patch": "@@ -45,7 +45,7 @@ pub fn check_crate(tcx: ty::ctxt, crate: @crate) {\n                                      }, v);\n               }\n               expr_fn_block(_, ref b) => {\n-                (v.visit_block)((*b), Context { \n+                (v.visit_block)((*b), Context {\n                                          in_loop: false,\n                                          can_ret: false\n                                       }, v);"}, {"sha": "f171c2c577acf140ae491fa236d21f3c5fbed05d", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=6282e5da674eaf00821a0d131327a7811e413a16", "patch": "@@ -130,142 +130,142 @@ pub fn get_lint_dict() -> LintDict {\n \n         (@~\"unused_imports\",\n          @LintSpec {\n-\t\t\tlint: unused_imports,\n+            lint: unused_imports,\n             desc: \"imports that are never used\",\n             default: allow\n          }),\n \n         (@~\"while_true\",\n          @LintSpec {\n-\t\t\tlint: while_true,\n+            lint: while_true,\n             desc: \"suggest using loop { } instead of while(true) { }\",\n             default: warn\n          }),\n \n         (@~\"path_statement\",\n          @LintSpec {\n-\t\t\tlint: path_statement,\n+            lint: path_statement,\n             desc: \"path statements with no effect\",\n             default: warn\n          }),\n \n         (@~\"unrecognized_lint\",\n          @LintSpec {\n-\t\t\tlint: unrecognized_lint,\n+            lint: unrecognized_lint,\n             desc: \"unrecognized lint attribute\",\n             default: warn\n          }),\n \n         (@~\"non_implicitly_copyable_typarams\",\n          @LintSpec {\n-\t\t\tlint: non_implicitly_copyable_typarams,\n+            lint: non_implicitly_copyable_typarams,\n             desc: \"passing non implicitly copyable types as copy type params\",\n             default: warn\n          }),\n \n         (@~\"vecs_implicitly_copyable\",\n          @LintSpec {\n-\t\t\tlint: vecs_implicitly_copyable,\n+            lint: vecs_implicitly_copyable,\n             desc: \"make vecs and strs not implicitly copyable \\\n                   (only checked at top level)\",\n             default: warn\n          }),\n \n         (@~\"implicit_copies\",\n          @LintSpec {\n-\t\t\tlint: implicit_copies,\n+            lint: implicit_copies,\n             desc: \"implicit copies of non implicitly copyable data\",\n             default: warn\n          }),\n \n         (@~\"deprecated_mode\",\n          @LintSpec {\n-\t\t\tlint: deprecated_mode,\n+            lint: deprecated_mode,\n             desc: \"warn about deprecated uses of modes\",\n             default: warn\n          }),\n \n         (@~\"deprecated_pattern\",\n          @LintSpec {\n-\t\t\tlint: deprecated_pattern,\n+            lint: deprecated_pattern,\n             desc: \"warn about deprecated uses of pattern bindings\",\n             default: allow\n          }),\n \n         (@~\"non_camel_case_types\",\n          @LintSpec {\n-\t\t\tlint: non_camel_case_types,\n+            lint: non_camel_case_types,\n             desc: \"types, variants and traits should have camel case names\",\n             default: allow\n          }),\n \n         (@~\"managed_heap_memory\",\n          @LintSpec {\n-\t\t\tlint: managed_heap_memory,\n+            lint: managed_heap_memory,\n             desc: \"use of managed (@ type) heap memory\",\n             default: allow\n          }),\n \n         (@~\"owned_heap_memory\",\n          @LintSpec {\n-\t\t\tlint: owned_heap_memory,\n+            lint: owned_heap_memory,\n             desc: \"use of owned (~ type) heap memory\",\n             default: allow\n          }),\n \n         (@~\"heap_memory\",\n          @LintSpec {\n-\t\t\tlint: heap_memory,\n+            lint: heap_memory,\n             desc: \"use of any (~ type or @ type) heap memory\",\n             default: allow\n          }),\n \n         (@~\"structural_records\",\n          @LintSpec {\n-\t\t\tlint: structural_records,\n+            lint: structural_records,\n             desc: \"use of any structural records\",\n             default: deny\n          }),\n \n         (@~\"legacy modes\",\n          @LintSpec {\n-\t\t\tlint: legacy_modes,\n+            lint: legacy_modes,\n             desc: \"allow legacy modes\",\n             default: forbid\n          }),\n \n         (@~\"type_limits\",\n          @LintSpec {\n-\t\t\tlint: type_limits,\n+            lint: type_limits,\n             desc: \"comparisons made useless by limits of the types involved\",\n             default: warn\n          }),\n \n         (@~\"default_methods\",\n          @LintSpec {\n-\t\t\tlint: default_methods,\n+            lint: default_methods,\n             desc: \"allow default methods\",\n             default: deny\n          }),\n \n         (@~\"deprecated_self\",\n          @LintSpec {\n-\t\t\tlint: deprecated_self,\n+            lint: deprecated_self,\n             desc: \"warn about deprecated uses of `self`\",\n             default: warn\n          }),\n \n         /* FIXME(#3266)--make liveness warnings lintable\n         (@~\"unused_variable\",\n          @LintSpec {\n-\t\t\tlint: unused_variable,\n+            lint: unused_variable,\n             desc: \"detect variables which are not used in any way\",\n             default: warn\n          }),\n \n         (@~\"dead_assignment\",\n          @LintSpec {\n-\t\t\tlint: dead_assignment,\n+            lint: dead_assignment,\n             desc: \"detect assignments that will never be read\",\n             default: warn\n          }),"}, {"sha": "87afe607a4fc8c79de80dd118d7c01dd9f63ecae", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=6282e5da674eaf00821a0d131327a7811e413a16", "patch": "@@ -854,7 +854,7 @@ pub fn extract_variant_args(bcx: block,\n         GEP_enum(bcx, blobptr, vdefs_tg, vdefs_var,\n                  /*bad*/copy enum_ty_substs, i)\n     };\n-    \n+\n     ExtractedBlock { vals: args, bcx: bcx }\n }\n "}, {"sha": "5b34cbdb32d616b0e28a52c645d7faac4a571c86", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6282e5da674eaf00821a0d131327a7811e413a16", "patch": "@@ -353,7 +353,7 @@ pub fn malloc_general_dyn(bcx: block, t: ty::t, heap: heap, size: ValueRef)\n     let Result {bcx: bcx, val: llbox} = malloc_raw_dyn(bcx, t, heap, size);\n     let non_gc_box = non_gc_box_cast(bcx, llbox);\n     let body = GEPi(bcx, non_gc_box, [0u, abi::box_field_body]);\n-    \n+\n     MallocResult { bcx: bcx, box: llbox, body: body }\n }\n \n@@ -479,7 +479,9 @@ pub fn get_res_dtor(ccx: @CrateContext, did: ast::def_id,\n             inline::maybe_instantiate_inline(ccx, did, true)\n         } else { did };\n         assert did.crate == ast::local_crate;\n-        let (val, _) = monomorphize::monomorphic_fn(ccx, did, substs, None, None, None);\n+        let (val, _) =\n+            monomorphize::monomorphic_fn(ccx, did, substs, None, None, None);\n+\n         val\n     } else if did.crate == ast::local_crate {\n         get_item_val(ccx, did.node)\n@@ -2206,7 +2208,8 @@ pub fn is_main_fn(sess: &Session, node_id: ast::node_id) -> bool {\n \n // Create a _rust_main(args: ~[str]) function which will be called from the\n // runtime rust_start function\n-pub fn create_main_wrapper(ccx: @CrateContext, _sp: span, main_llfn: ValueRef) {\n+pub fn create_main_wrapper(ccx: @CrateContext,\n+                           _sp: span, main_llfn: ValueRef) {\n \n     let llfn = create_main(ccx, main_llfn);\n     create_entry_fn(ccx, llfn);\n@@ -2911,7 +2914,8 @@ pub fn fill_crate_map(ccx: @CrateContext, map: ValueRef) {\n     }\n }\n \n-pub fn crate_ctxt_to_encode_parms(cx: @CrateContext) -> encoder::EncodeParams {\n+pub fn crate_ctxt_to_encode_parms(cx: @CrateContext)\n+    -> encoder::EncodeParams {\n     let encode_inlined_item: encoder::encode_inlined_item =\n         |ecx, ebml_w, path, ii|\n         astencode::encode_inlined_item(ecx, ebml_w, path, ii, cx.maps);"}, {"sha": "641c3e6b0a38d193d20df664ba71923e23d92a2d", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=6282e5da674eaf00821a0d131327a7811e413a16", "patch": "@@ -146,7 +146,7 @@ struct LocalVarMetadata {\n struct TyDescMetadata {\n     hash: uint\n }\n-struct BlockMetadata { \n+struct BlockMetadata {\n     start: codemap::Loc,\n     end: codemap::Loc\n }\n@@ -261,7 +261,8 @@ fn get_file_path_and_dir(work_dir: &str, full_path: &str) -> (~str, ~str) {\n     }, str::from_slice(work_dir))\n }\n \n-fn create_file(cx: @CrateContext, +full_path: ~str) -> @Metadata<FileMetadata> {\n+fn create_file(cx: @CrateContext, +full_path: ~str)\n+    -> @Metadata<FileMetadata> {\n     let cache = get_cache(cx);;\n     let tg = FileDescriptorTag;\n     match cached_metadata::<@Metadata<FileMetadata>>("}, {"sha": "a4e706db60e9c29e907a526dd7ddf9926e3c8106", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6282e5da674eaf00821a0d131327a7811e413a16/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=6282e5da674eaf00821a0d131327a7811e413a16", "patch": "@@ -223,7 +223,7 @@ pub impl ResolveState {\n             let bounds = nde.possible_types;\n \n             let t1 = match bounds {\n-              Bounds { ub:_, lb:Some(t) } if !type_is_bot(t) \n+              Bounds { ub:_, lb:Some(t) } if !type_is_bot(t)\n                 => self.resolve_type(t),\n               Bounds { ub:Some(t), lb:_ } => self.resolve_type(t),\n               Bounds { ub:_, lb:Some(t) } => self.resolve_type(t),"}]}