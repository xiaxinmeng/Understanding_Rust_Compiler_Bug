{"sha": "d2b13ba46694b73cf2cd64b3a18c3abd55983f2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYjEzYmE0NjY5NGI3M2NmMmNkNjRiM2ExOGMzYWJkNTU5ODNmMmI=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-02T03:11:05Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-02T03:17:15Z"}, "message": "Fix span used for structured tuple struct suggestion\n\n(And same for tuple variants.)\n\nPreviously, the span was just for the constructor name, which meant it\nwould result in syntactically-invalid code when applied. Now, the span\nis for the entire expression.", "tree": {"sha": "e7050d44a8df46580b0784af740eea05b6b3f5fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7050d44a8df46580b0784af740eea05b6b3f5fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b", "html_url": "https://github.com/rust-lang/rust/commit/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50171c310cd15e1b2d3723766ce64e2e4d6696fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/50171c310cd15e1b2d3723766ce64e2e4d6696fc", "html_url": "https://github.com/rust-lang/rust/commit/50171c310cd15e1b2d3723766ce64e2e4d6696fc"}], "stats": {"total": 145, "additions": 135, "deletions": 10}, "files": [{"sha": "1a4dfdcfcbfb4c9c4b8f6e1735ebc54338ae3f17", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=d2b13ba46694b73cf2cd64b3a18c3abd55983f2b", "patch": "@@ -1236,6 +1236,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             variant,\n             fields,\n             base_expr.is_none(),\n+            expr.span,\n         );\n         if let Some(base_expr) = base_expr {\n             // If check_expr_struct_fields hit an error, do not attempt to populate\n@@ -1283,6 +1284,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         variant: &'tcx ty::VariantDef,\n         ast_fields: &'tcx [hir::ExprField<'tcx>],\n         check_completeness: bool,\n+        expr_span: Span,\n     ) -> bool {\n         let tcx = self.tcx;\n \n@@ -1334,7 +1336,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ident,\n                     });\n                 } else {\n-                    self.report_unknown_field(adt_ty, variant, field, ast_fields, kind_name, span);\n+                    self.report_unknown_field(\n+                        adt_ty, variant, field, ast_fields, kind_name, expr_span,\n+                    );\n                 }\n \n                 tcx.ty_error()\n@@ -1467,7 +1471,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         field: &hir::ExprField<'_>,\n         skip_fields: &[hir::ExprField<'_>],\n         kind_name: &str,\n-        ty_span: Span,\n+        expr_span: Span,\n     ) {\n         if variant.is_recovered() {\n             self.set_tainted_by_errors();\n@@ -1511,7 +1515,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n                     err.span_label(field.ident.span, \"field does not exist\");\n                     err.span_suggestion(\n-                        ty_span,\n+                        expr_span,\n                         &format!(\n                             \"`{adt}::{variant}` is a tuple {kind_name}, use the appropriate syntax\",\n                             adt = ty,\n@@ -1529,7 +1533,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_label(variant.ident.span, format!(\"`{adt}` defined here\", adt = ty));\n                     err.span_label(field.ident.span, \"field does not exist\");\n                     err.span_suggestion(\n-                        ty_span,\n+                        expr_span,\n                         &format!(\n                             \"`{adt}` is a tuple {kind_name}, use the appropriate syntax\",\n                             adt = ty,"}, {"sha": "7df506b1981227136d94feae8f0d0a91fca90206", "filename": "src/test/ui/issues/issue-4736.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/src%2Ftest%2Fui%2Fissues%2Fissue-4736.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/src%2Ftest%2Fui%2Fissues%2Fissue-4736.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4736.stderr?ref=d2b13ba46694b73cf2cd64b3a18c3abd55983f2b", "patch": "@@ -5,8 +5,9 @@ LL | struct NonCopyable(());\n    |        ----------- `NonCopyable` defined here\n ...\n LL |     let z = NonCopyable{ p: () };\n-   |             -----------  ^ field does not exist\n-   |             |\n+   |             -------------^------\n+   |             |            |\n+   |             |            field does not exist\n    |             help: `NonCopyable` is a tuple struct, use the appropriate syntax: `NonCopyable(/* fields */)`\n \n error: aborting due to previous error"}, {"sha": "6172a7cc8aa08d356077d340a1ba83fbb13807d7", "filename": "src/test/ui/issues/issue-80607.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/src%2Ftest%2Fui%2Fissues%2Fissue-80607.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/src%2Ftest%2Fui%2Fissues%2Fissue-80607.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-80607.stderr?ref=d2b13ba46694b73cf2cd64b3a18c3abd55983f2b", "patch": "@@ -5,8 +5,9 @@ LL |     V1(i32),\n    |     -- `Enum::V1` defined here\n ...\n LL |     Enum::V1 { x }\n-   |     --------   ^ field does not exist\n-   |     |\n+   |     -----------^--\n+   |     |          |\n+   |     |          field does not exist\n    |     help: `Enum::V1` is a tuple variant, use the appropriate syntax: `Enum::V1(/* fields */)`\n \n error: aborting due to previous error"}, {"sha": "daf1cbb65bf16d004805c25f334578af918042f7", "filename": "src/test/ui/numeric/numeric-fields.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr?ref=d2b13ba46694b73cf2cd64b3a18c3abd55983f2b", "patch": "@@ -5,8 +5,9 @@ LL | struct S(u8, u16);\n    |        - `S` defined here\n ...\n LL |     let s = S{0b1: 10, 0: 11};\n-   |             - ^^^ field does not exist\n-   |             |\n+   |             --^^^------------\n+   |             | |\n+   |             | field does not exist\n    |             help: `S` is a tuple struct, use the appropriate syntax: `S(/* fields */)`\n \n error[E0026]: struct `S` does not have a field named `0x1`"}, {"sha": "308adcf01fe5d0935166e0e59f7b4f51f0c45896", "filename": "src/test/ui/suggestions/nested-non-tuple-tuple-struct.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/src%2Ftest%2Fui%2Fsuggestions%2Fnested-non-tuple-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/src%2Ftest%2Fui%2Fsuggestions%2Fnested-non-tuple-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnested-non-tuple-tuple-struct.rs?ref=d2b13ba46694b73cf2cd64b3a18c3abd55983f2b", "patch": "@@ -0,0 +1,18 @@\n+pub struct S(f32, f32);\n+\n+pub enum E {\n+    V(f32, f32),\n+}\n+\n+fn main() {\n+    let _x = (S { x: 1.0, y: 2.0 }, S { x: 3.0, y: 4.0 });\n+    //~^ ERROR struct `S` has no field named `x`\n+    //~| ERROR struct `S` has no field named `y`\n+    //~| ERROR struct `S` has no field named `x`\n+    //~| ERROR struct `S` has no field named `y`\n+    let _y = (E::V { x: 1.0, y: 2.0 }, E::V { x: 3.0, y: 4.0 });\n+    //~^ ERROR variant `E::V` has no field named `x`\n+    //~| ERROR variant `E::V` has no field named `y`\n+    //~| ERROR variant `E::V` has no field named `x`\n+    //~| ERROR variant `E::V` has no field named `y`\n+}"}, {"sha": "5a234e2a75fafa699536112fe0191628526ac40d", "filename": "src/test/ui/suggestions/nested-non-tuple-tuple-struct.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/src%2Ftest%2Fui%2Fsuggestions%2Fnested-non-tuple-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2b13ba46694b73cf2cd64b3a18c3abd55983f2b/src%2Ftest%2Fui%2Fsuggestions%2Fnested-non-tuple-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnested-non-tuple-tuple-struct.stderr?ref=d2b13ba46694b73cf2cd64b3a18c3abd55983f2b", "patch": "@@ -0,0 +1,100 @@\n+error[E0560]: struct `S` has no field named `x`\n+  --> $DIR/nested-non-tuple-tuple-struct.rs:8:19\n+   |\n+LL | pub struct S(f32, f32);\n+   |            - `S` defined here\n+...\n+LL |     let _x = (S { x: 1.0, y: 2.0 }, S { x: 3.0, y: 4.0 });\n+   |               ----^---------------\n+   |               |   |\n+   |               |   field does not exist\n+   |               help: `S` is a tuple struct, use the appropriate syntax: `S(/* fields */)`\n+\n+error[E0560]: struct `S` has no field named `y`\n+  --> $DIR/nested-non-tuple-tuple-struct.rs:8:27\n+   |\n+LL | pub struct S(f32, f32);\n+   |            - `S` defined here\n+...\n+LL |     let _x = (S { x: 1.0, y: 2.0 }, S { x: 3.0, y: 4.0 });\n+   |               ------------^-------\n+   |               |           |\n+   |               |           field does not exist\n+   |               help: `S` is a tuple struct, use the appropriate syntax: `S(/* fields */)`\n+\n+error[E0560]: struct `S` has no field named `x`\n+  --> $DIR/nested-non-tuple-tuple-struct.rs:8:41\n+   |\n+LL | pub struct S(f32, f32);\n+   |            - `S` defined here\n+...\n+LL |     let _x = (S { x: 1.0, y: 2.0 }, S { x: 3.0, y: 4.0 });\n+   |                                     ----^---------------\n+   |                                     |   |\n+   |                                     |   field does not exist\n+   |                                     help: `S` is a tuple struct, use the appropriate syntax: `S(/* fields */)`\n+\n+error[E0560]: struct `S` has no field named `y`\n+  --> $DIR/nested-non-tuple-tuple-struct.rs:8:49\n+   |\n+LL | pub struct S(f32, f32);\n+   |            - `S` defined here\n+...\n+LL |     let _x = (S { x: 1.0, y: 2.0 }, S { x: 3.0, y: 4.0 });\n+   |                                     ------------^-------\n+   |                                     |           |\n+   |                                     |           field does not exist\n+   |                                     help: `S` is a tuple struct, use the appropriate syntax: `S(/* fields */)`\n+\n+error[E0559]: variant `E::V` has no field named `x`\n+  --> $DIR/nested-non-tuple-tuple-struct.rs:13:22\n+   |\n+LL |     V(f32, f32),\n+   |     - `E::V` defined here\n+...\n+LL |     let _y = (E::V { x: 1.0, y: 2.0 }, E::V { x: 3.0, y: 4.0 });\n+   |               -------^---------------\n+   |               |      |\n+   |               |      field does not exist\n+   |               help: `E::V` is a tuple variant, use the appropriate syntax: `E::V(/* fields */)`\n+\n+error[E0559]: variant `E::V` has no field named `y`\n+  --> $DIR/nested-non-tuple-tuple-struct.rs:13:30\n+   |\n+LL |     V(f32, f32),\n+   |     - `E::V` defined here\n+...\n+LL |     let _y = (E::V { x: 1.0, y: 2.0 }, E::V { x: 3.0, y: 4.0 });\n+   |               ---------------^-------\n+   |               |              |\n+   |               |              field does not exist\n+   |               help: `E::V` is a tuple variant, use the appropriate syntax: `E::V(/* fields */)`\n+\n+error[E0559]: variant `E::V` has no field named `x`\n+  --> $DIR/nested-non-tuple-tuple-struct.rs:13:47\n+   |\n+LL |     V(f32, f32),\n+   |     - `E::V` defined here\n+...\n+LL |     let _y = (E::V { x: 1.0, y: 2.0 }, E::V { x: 3.0, y: 4.0 });\n+   |                                        -------^---------------\n+   |                                        |      |\n+   |                                        |      field does not exist\n+   |                                        help: `E::V` is a tuple variant, use the appropriate syntax: `E::V(/* fields */)`\n+\n+error[E0559]: variant `E::V` has no field named `y`\n+  --> $DIR/nested-non-tuple-tuple-struct.rs:13:55\n+   |\n+LL |     V(f32, f32),\n+   |     - `E::V` defined here\n+...\n+LL |     let _y = (E::V { x: 1.0, y: 2.0 }, E::V { x: 3.0, y: 4.0 });\n+   |                                        ---------------^-------\n+   |                                        |              |\n+   |                                        |              field does not exist\n+   |                                        help: `E::V` is a tuple variant, use the appropriate syntax: `E::V(/* fields */)`\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0559, E0560.\n+For more information about an error, try `rustc --explain E0559`."}]}