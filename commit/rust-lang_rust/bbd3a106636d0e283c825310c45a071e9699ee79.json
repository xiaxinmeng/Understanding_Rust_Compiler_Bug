{"sha": "bbd3a106636d0e283c825310c45a071e9699ee79", "node_id": "C_kwDOAAsO6NoAKGJiZDNhMTA2NjM2ZDBlMjgzYzgyNTMxMGM0NWEwNzFlOTY5OWVlNzk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-02T17:02:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-02T17:02:03Z"}, "message": "Rollup merge of #103774 - compiler-errors:dyn-trait-in-type-name, r=eholk\n\nFormat `dyn Trait` better in `type_name` intrinsic\n\nNoticed this in #103764 (though not related to that PR at all!)\n\n```rust\ntrait Foo {\n    type Bar;\n}\n\nfn main() {\n    println!(\n        \"`dyn Fn(i32, i32) -> i32` => `{}`\",\n        std::any::type_name::<dyn Fn(i32, i32) -> i32>()\n    );\n    println!(\n        \"`dyn Foo<Bar = i32> + Send + Sync` => `{}`\",\n        std::any::type_name::<dyn Foo<Bar = i32> + Send + Sync>()\n    );\n}\n```\n\n```\n`dyn Fn(i32, i32) -> i32` => `dyn core::ops::function::Fn<(i32, i32)>+Output = i32`\n`dyn Foo<Bar = i32> + Send + Sync` => `dyn playground::Foo+Bar = i32+core::marker::Sync+core::marker::Send`\n```\n\nJust reuse `pretty_print_dyn_existential` which already makes an attempt to make its output stable.", "tree": {"sha": "c299b98473e44e62c3feea8b9d2554127908a1a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c299b98473e44e62c3feea8b9d2554127908a1a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbd3a106636d0e283c825310c45a071e9699ee79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjYqKLCRBK7hj4Ov3rIwAAtLwIAD13liM0/lavZ3c6pa1frQ+q\nzCBiv8hpi2NObzVtg7+K1YzLQnLxLktdiDAdcgYs2D7ILI3hEpGIg0OoEN+JsnAA\nDai/aY8iXJI4zQg5d0CMguPuttDK9NE0hn6nMDeG+1a5DyzU79p+ajIncVuhX7+E\n7uK5JhrqX8v50+x7s36R48e64CAzofP+slNryf4JLo5+U++PGbvm/EPpD9s0901C\nHGp3luzrDFy557pbqXFoIXnLgoY1xw/X8UViMGzuiCPwZfL4fti2WE7uFlYlvfBS\nBaURo1PpHFC6HPblLYwILRnq5jzg7GBCQOJwb1Hbz9h+w68fkpGVdbvfu0jbyjw=\n=SbHl\n-----END PGP SIGNATURE-----\n", "payload": "tree c299b98473e44e62c3feea8b9d2554127908a1a5\nparent 109f887bf54718cea89b9b9c51ada1f06956b335\nparent e24df2778fb7a19dfe386ad563ea216a816db94a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667408523 +0530\ncommitter GitHub <noreply@github.com> 1667408523 +0530\n\nRollup merge of #103774 - compiler-errors:dyn-trait-in-type-name, r=eholk\n\nFormat `dyn Trait` better in `type_name` intrinsic\n\nNoticed this in #103764 (though not related to that PR at all!)\n\n```rust\ntrait Foo {\n    type Bar;\n}\n\nfn main() {\n    println!(\n        \"`dyn Fn(i32, i32) -> i32` => `{}`\",\n        std::any::type_name::<dyn Fn(i32, i32) -> i32>()\n    );\n    println!(\n        \"`dyn Foo<Bar = i32> + Send + Sync` => `{}`\",\n        std::any::type_name::<dyn Foo<Bar = i32> + Send + Sync>()\n    );\n}\n```\n\n```\n`dyn Fn(i32, i32) -> i32` => `dyn core::ops::function::Fn<(i32, i32)>+Output = i32`\n`dyn Foo<Bar = i32> + Send + Sync` => `dyn playground::Foo+Bar = i32+core::marker::Sync+core::marker::Send`\n```\n\nJust reuse `pretty_print_dyn_existential` which already makes an attempt to make its output stable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd3a106636d0e283c825310c45a071e9699ee79", "html_url": "https://github.com/rust-lang/rust/commit/bbd3a106636d0e283c825310c45a071e9699ee79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbd3a106636d0e283c825310c45a071e9699ee79/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "109f887bf54718cea89b9b9c51ada1f06956b335", "url": "https://api.github.com/repos/rust-lang/rust/commits/109f887bf54718cea89b9b9c51ada1f06956b335", "html_url": "https://github.com/rust-lang/rust/commit/109f887bf54718cea89b9b9c51ada1f06956b335"}, {"sha": "e24df2778fb7a19dfe386ad563ea216a816db94a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24df2778fb7a19dfe386ad563ea216a816db94a", "html_url": "https://github.com/rust-lang/rust/commit/e24df2778fb7a19dfe386ad563ea216a816db94a"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "08a6d69b8e40c28422fc6a8710606cdca7b65d37", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbd3a106636d0e283c825310c45a071e9699ee79/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd3a106636d0e283c825310c45a071e9699ee79/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=bbd3a106636d0e283c825310c45a071e9699ee79", "patch": "@@ -73,18 +73,10 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n     }\n \n     fn print_dyn_existential(\n-        mut self,\n+        self,\n         predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n-        let mut first = true;\n-        for p in predicates {\n-            if !first {\n-                write!(self, \"+\")?;\n-            }\n-            first = false;\n-            self = p.print(self)?;\n-        }\n-        Ok(self)\n+        self.pretty_print_dyn_existential(predicates)\n     }\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {"}, {"sha": "fab85c39d253594fb8bd1dc35044dd9a4de39137", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbd3a106636d0e283c825310c45a071e9699ee79/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd3a106636d0e283c825310c45a071e9699ee79/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=bbd3a106636d0e283c825310c45a071e9699ee79", "patch": "@@ -1137,7 +1137,7 @@ pub trait PrettyPrinter<'tcx>:\n         //\n         // To avoid causing instabilities in compiletest\n         // output, sort the auto-traits alphabetically.\n-        auto_traits.sort_by_cached_key(|did| self.tcx().def_path_str(*did));\n+        auto_traits.sort_by_cached_key(|did| with_no_trimmed_paths!(self.tcx().def_path_str(*did)));\n \n         for def_id in auto_traits {\n             if !first {"}, {"sha": "e98dac8d12ef449d6d54a8bb1a2e714d68cbea98", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbd3a106636d0e283c825310c45a071e9699ee79/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd3a106636d0e283c825310c45a071e9699ee79/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=bbd3a106636d0e283c825310c45a071e9699ee79", "patch": "@@ -131,6 +131,24 @@ fn distinct_type_names() {\n     assert_ne!(type_name_of_val(Velocity), type_name_of_val(Velocity(0.0, -9.8)),);\n }\n \n+#[cfg(not(bootstrap))]\n+#[test]\n+fn dyn_type_name() {\n+    trait Foo {\n+        type Bar;\n+    }\n+\n+    assert_eq!(\n+        \"dyn core::ops::function::Fn(i32, i32) -> i32\",\n+        std::any::type_name::<dyn Fn(i32, i32) -> i32>()\n+    );\n+    assert_eq!(\n+        \"dyn coretests::any::dyn_type_name::Foo<Bar = i32> \\\n+        + core::marker::Send + core::marker::Sync\",\n+        std::any::type_name::<dyn Foo<Bar = i32> + Send + Sync>()\n+    );\n+}\n+\n // Test the `Provider` API.\n \n struct SomeConcreteType {"}, {"sha": "3713a32eb1183c4597330cfe4882d52f3e26d634", "filename": "src/test/ui/type/issue-94187-verbose-type-name.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbd3a106636d0e283c825310c45a071e9699ee79/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd3a106636d0e283c825310c45a071e9699ee79/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs?ref=bbd3a106636d0e283c825310c45a071e9699ee79", "patch": "@@ -12,8 +12,5 @@ fn main() {\n     struct Wrapper<const VALUE: usize>;\n     assert_eq!(type_name::<Wrapper<0>>(), \"issue_94187_verbose_type_name::main::Wrapper<0>\");\n \n-    assert_eq!(\n-        type_name::<dyn Fn(u32) -> u32>(),\n-        \"dyn core::ops::function::Fn<(u32,)>+Output = u32\"\n-    );\n+    assert_eq!(type_name::<dyn Fn(u32) -> u32>(), \"dyn core::ops::function::Fn(u32) -> u32\");\n }"}]}