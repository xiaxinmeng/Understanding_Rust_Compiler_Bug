{"sha": "d39ea4774614f1db3366184f1e6ce30b7614d9ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOWVhNDc3NDYxNGYxZGIzMzY2MTg0ZjFlNmNlMzBiNzYxNGQ5ZmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-09T01:46:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-10T03:00:15Z"}, "message": "rt: Remove rust_task_user struct", "tree": {"sha": "1eefada3636e780d131d194eac8093c137705195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eefada3636e780d131d194eac8093c137705195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d39ea4774614f1db3366184f1e6ce30b7614d9ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d39ea4774614f1db3366184f1e6ce30b7614d9ff", "html_url": "https://github.com/rust-lang/rust/commit/d39ea4774614f1db3366184f1e6ce30b7614d9ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d39ea4774614f1db3366184f1e6ce30b7614d9ff/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dad32c015b3eecf4e8f5dc4518eec2fd019def2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dad32c015b3eecf4e8f5dc4518eec2fd019def2", "html_url": "https://github.com/rust-lang/rust/commit/1dad32c015b3eecf4e8f5dc4518eec2fd019def2"}], "stats": {"total": 61, "additions": 25, "deletions": 36}, "files": [{"sha": "a3101e7edc94ec827f4e3a8c426ef30072e140ff", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d39ea4774614f1db3366184f1e6ce30b7614d9ff/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d39ea4774614f1db3366184f1e6ce30b7614d9ff/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=d39ea4774614f1db3366184f1e6ce30b7614d9ff", "patch": "@@ -439,7 +439,7 @@ rust_new_sched(uintptr_t threads) {\n extern \"C\" CDECL rust_task_id\n get_task_id() {\n     rust_task *task = rust_task_thread::get_task();\n-    return task->user.id;\n+    return task->id;\n }\n \n static rust_task_id"}, {"sha": "9768fffaf0b08789970511a3c29a7cc1e8014a60", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d39ea4774614f1db3366184f1e6ce30b7614d9ff/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d39ea4774614f1db3366184f1e6ce30b7614d9ff/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=d39ea4774614f1db3366184f1e6ce30b7614d9ff", "patch": "@@ -161,12 +161,12 @@ rust_kernel::register_task(rust_task *task) {\n     uintptr_t new_live_tasks;\n     {\n         scoped_lock with(task_lock);\n-        task->user.id = max_task_id++;\n-        task_table.put(task->user.id, task);\n+        task->id = max_task_id++;\n+        task_table.put(task->id, task);\n         new_live_tasks = ++live_tasks;\n     }\n-    K(srv, task->user.id != INTPTR_MAX, \"Hit the maximum task id\");\n-    KLOG_(\"Registered task %\" PRIdPTR, task->user.id);\n+    K(srv, task->id != INTPTR_MAX, \"Hit the maximum task id\");\n+    KLOG_(\"Registered task %\" PRIdPTR, task->id);\n     KLOG_(\"Total outstanding tasks: %d\", new_live_tasks);\n }\n "}, {"sha": "d2ebac637932d5f2a9ce565c3ae3514be210c590", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d39ea4774614f1db3366184f1e6ce30b7614d9ff/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d39ea4774614f1db3366184f1e6ce30b7614d9ff/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=d39ea4774614f1db3366184f1e6ce30b7614d9ff", "patch": "@@ -190,6 +190,8 @@ rust_task::rust_task(rust_task_thread *thread, rust_task_list *state,\n                      rust_task *spawner, const char *name,\n                      size_t init_stack_sz) :\n     ref_count(1),\n+    id(0),\n+    notify_enabled(false),\n     stk(NULL),\n     runtime_sp(0),\n     sched(thread->sched),\n@@ -216,12 +218,8 @@ rust_task::rust_task(rust_task_thread *thread, rust_task_list *state,\n     LOGPTR(thread, \"new task\", (uintptr_t)this);\n     DLOG(thread, task, \"sizeof(task) = %d (0x%x)\", sizeof *this, sizeof *this);\n \n-    assert((void*)this == (void*)&user);\n-\n-    user.notify_enabled = 0;\n-\n     stk = new_stk(thread, this, init_stack_sz);\n-    user.rust_sp = stk->end;\n+    rust_sp = stk->end;\n     if (supervisor) {\n         supervisor->ref();\n     }\n@@ -338,7 +336,7 @@ rust_task::start(spawn_fn spawnee_fn,\n \n     I(thread, stk->data != NULL);\n \n-    char *sp = (char *)user.rust_sp;\n+    char *sp = (char *)rust_sp;\n \n     sp -= sizeof(spawn_args);\n \n@@ -614,14 +612,14 @@ rust_port *rust_task::get_port_by_id(rust_port_id id) {\n void\n rust_task::notify(bool success) {\n     // FIXME (1078) Do this in rust code\n-    if(user.notify_enabled) {\n-        rust_task *target_task = kernel->get_task_by_id(user.notify_chan.task);\n+    if(notify_enabled) {\n+        rust_task *target_task = kernel->get_task_by_id(notify_chan.task);\n         if (target_task) {\n             rust_port *target_port =\n-                target_task->get_port_by_id(user.notify_chan.port);\n+                target_task->get_port_by_id(notify_chan.port);\n             if(target_port) {\n                 task_notification msg;\n-                msg.id = user.id;\n+                msg.id = id;\n                 msg.result = !success ? tr_failure : tr_success;\n \n                 target_port->send(&msg);\n@@ -715,8 +713,8 @@ rust_task::check_stack_canary() {\n \n void\n rust_task::config_notify(chan_handle chan) {\n-    user.notify_enabled = true;\n-    user.notify_chan = chan;\n+    notify_enabled = true;\n+    notify_chan = chan;\n }\n \n //"}, {"sha": "61b6c98267682f38a916483e68a0367e0968d0ad", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d39ea4774614f1db3366184f1e6ce30b7614d9ff/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/d39ea4774614f1db3366184f1e6ce30b7614d9ff/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=d39ea4774614f1db3366184f1e6ce30b7614d9ff", "patch": "@@ -31,16 +31,6 @@ struct frame_glue_fns {\n     uintptr_t reloc_glue_off;\n };\n \n-// portions of the task structure that are accessible from the standard\n-// library. This struct must agree with the std::task::rust_task record.\n-struct rust_task_user {\n-    rust_task_id id;\n-    intptr_t notify_enabled;   // this is way more bits than necessary, but it\n-                               // simplifies the alignment.\n-    chan_handle notify_chan;\n-    uintptr_t rust_sp;         // Saved sp when not running.\n-};\n-\n // std::lib::task::task_result\n typedef unsigned long task_result;\n #define tr_success 0\n@@ -57,10 +47,14 @@ struct task_notification {\n struct\n rust_task : public kernel_owned<rust_task>, rust_cond\n {\n-    rust_task_user user;\n-\n     RUST_ATOMIC_REFCOUNT();\n \n+    rust_task_id id;\n+    bool notify_enabled;\n+    chan_handle notify_chan;\n+\n+    uintptr_t rust_sp;         // Saved sp when not running.\n+\n     context ctx;\n     stk_seg *stk;\n     uintptr_t runtime_sp;      // Runtime sp while task running."}, {"sha": "4830e1254d5bf49df0017f0119dafc5d770bf7f6", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d39ea4774614f1db3366184f1e6ce30b7614d9ff/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d39ea4774614f1db3366184f1e6ce30b7614d9ff/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=d39ea4774614f1db3366184f1e6ce30b7614d9ff", "patch": "@@ -137,7 +137,7 @@ rust_task_thread::reap_dead_tasks() {\n     for (size_t i = 0; i < dead_tasks_len; ++i) {\n         rust_task *task = dead_tasks_copy[i];\n         // Release the task from the kernel so nobody else can get at it\n-        kernel->release_task_id(task->user.id);\n+        kernel->release_task_id(task->id);\n         // Deref the task, which may cause it to request us to release it\n         task->deref();\n     }\n@@ -151,7 +151,7 @@ rust_task_thread::release_task(rust_task *task) {\n     // Nobody should have a ref to the task at this point\n     I(this, task->ref_count == 0);\n     // Kernel should not know about the task any more\n-    I(this, kernel->get_task_by_id(task->user.id) == NULL);\n+    I(this, kernel->get_task_by_id(task->id) == NULL);\n     // Now delete the task, which will require using this thread's\n     // memory region.\n     delete task;\n@@ -249,11 +249,9 @@ rust_task_thread::start_main_loop() {\n \n         DLOG(this, task,\n              \"activating task %s 0x%\" PRIxPTR\n-             \", sp=0x%\" PRIxPTR\n              \", state: %s\",\n              scheduled_task->name,\n              (uintptr_t)scheduled_task,\n-             scheduled_task->user.rust_sp,\n              scheduled_task->state->name);\n \n         place_task_in_tls(scheduled_task);\n@@ -265,11 +263,10 @@ rust_task_thread::start_main_loop() {\n \n         DLOG(this, task,\n              \"returned from task %s @0x%\" PRIxPTR\n-             \" in state '%s', sp=0x%x, worker id=%d\" PRIxPTR,\n+             \" in state '%s', worker id=%d\" PRIxPTR,\n              scheduled_task->name,\n              (uintptr_t)scheduled_task,\n              scheduled_task->state->name,\n-             scheduled_task->user.rust_sp,\n              id);\n \n         reap_dead_tasks();\n@@ -305,7 +302,7 @@ rust_task_thread::create_task(rust_task *spawner, const char *name,\n     }\n \n     kernel->register_task(task);\n-    return task->user.id;\n+    return task->id;\n }\n \n void rust_task_thread::run() {"}]}