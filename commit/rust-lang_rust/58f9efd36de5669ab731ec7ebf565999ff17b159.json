{"sha": "58f9efd36de5669ab731ec7ebf565999ff17b159", "node_id": "C_kwDOAAsO6NoAKDU4ZjllZmQzNmRlNTY2OWFiNzMxZWM3ZWJmNTY1OTk5ZmYxN2IxNTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-28T09:57:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-28T09:57:59Z"}, "message": "Auto merge of #91311 - matthiaskrgr:rollup-ju9xizl, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #90896 (Stabilize some `MaybeUninit` behavior as const)\n - #91254 (Only check for errors in predicate when skipping impl assembly)\n - #91303 (Miri: fix alignment check in array initialization)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "073f57da23c74c44c518b2a6f19f206888847aa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/073f57da23c74c44c518b2a6f19f206888847aa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58f9efd36de5669ab731ec7ebf565999ff17b159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58f9efd36de5669ab731ec7ebf565999ff17b159", "html_url": "https://github.com/rust-lang/rust/commit/58f9efd36de5669ab731ec7ebf565999ff17b159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58f9efd36de5669ab731ec7ebf565999ff17b159/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d5935df18d7035c9bd8dc5c1dfbbad6ac59793", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d5935df18d7035c9bd8dc5c1dfbbad6ac59793", "html_url": "https://github.com/rust-lang/rust/commit/27d5935df18d7035c9bd8dc5c1dfbbad6ac59793"}, {"sha": "7134ae0a8dbab6fbf9920b489a37093643e3aa0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7134ae0a8dbab6fbf9920b489a37093643e3aa0c", "html_url": "https://github.com/rust-lang/rust/commit/7134ae0a8dbab6fbf9920b489a37093643e3aa0c"}], "stats": {"total": 115, "additions": 74, "deletions": 41}, "files": [{"sha": "9299ae2b2b9f8f6708f9a1a1646e23818a96f260", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -242,11 +242,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     let elem_size = first.layout.size;\n                     let first_ptr = first.ptr;\n                     let rest_ptr = first_ptr.offset(elem_size, self)?;\n+                    // For the alignment of `rest_ptr`, we crucially do *not* use `first.align` as\n+                    // that place might be more aligned than its type mandates (a `u8` array could\n+                    // be 4-aligned if it sits at the right spot in a struct). Instead we use\n+                    // `first.layout.align`, i.e., the alignment given by the type.\n                     self.memory.copy_repeatedly(\n                         first_ptr,\n                         first.align,\n                         rest_ptr,\n-                        first.align,\n+                        first.layout.align.abi,\n                         elem_size,\n                         length - 1,\n                         /*nonoverlapping:*/ true,"}, {"sha": "6e3e3b9b14480d383fdad71dd9a6829647b5b61f", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -536,7 +536,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // This helps us avoid overflow: see issue #72839\n         // Since compilation is already guaranteed to fail, this is just\n         // to try to show the 'nicest' possible errors to the user.\n-        if obligation.references_error() {\n+        // We don't check for errors in the `ParamEnv` - in practice,\n+        // it seems to cause us to be overly aggressive in deciding\n+        // to give up searching for candidates, leading to spurious errors.\n+        if obligation.predicate.references_error() {\n             return;\n         }\n "}, {"sha": "23b28766d70ea78cae57724116f9f61de749f3c2", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -853,7 +853,7 @@ extern \"rust-intrinsic\" {\n     /// This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n-    #[rustc_const_unstable(feature = \"const_assert_type\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_assert_type\", since = \"1.59.0\")]\n     pub fn assert_inhabited<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` does not permit"}, {"sha": "102e6f89eb82a52db3d87322e1754db978433c61", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -101,7 +101,6 @@\n #![feature(const_align_of_val)]\n #![feature(const_alloc_layout)]\n #![feature(const_arguments_as_str)]\n-#![feature(const_assert_type)]\n #![feature(const_bigint_helper_methods)]\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n@@ -117,7 +116,7 @@\n #![feature(const_intrinsic_copy)]\n #![feature(const_intrinsic_forget)]\n #![feature(const_likely)]\n-#![feature(const_maybe_uninit_as_ptr)]\n+#![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_num_from_num)]\n #![feature(const_ops)]"}, {"sha": "a6e31452edcfcc04840919f325bb18cf1b33bce9", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -528,7 +528,7 @@ impl<T> MaybeUninit<T> {\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n     /// until they are, it is advisable to avoid them.)\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_as_ptr\", issue = \"75251\")]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit_as_ptr\", since = \"1.59.0\")]\n     #[inline(always)]\n     pub const fn as_ptr(&self) -> *const T {\n         // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.\n@@ -567,7 +567,7 @@ impl<T> MaybeUninit<T> {\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n     /// until they are, it is advisable to avoid them.)\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_as_ptr\", issue = \"75251\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_as_mut_ptr\", issue = \"75251\")]\n     #[inline(always)]\n     pub const fn as_mut_ptr(&mut self) -> *mut T {\n         // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.\n@@ -620,7 +620,7 @@ impl<T> MaybeUninit<T> {\n     /// // `x` had not been initialized yet, so this last line caused undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init\", since = \"1.59.0\")]\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"assume_init\"]\n     #[track_caller]\n@@ -788,7 +788,8 @@ impl<T> MaybeUninit<T> {\n     /// }\n     /// ```\n     #[stable(feature = \"maybe_uninit_ref\", since = \"1.55.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init\", since = \"1.59.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_raw_ptr_deref))]\n     #[inline(always)]\n     pub const unsafe fn assume_init_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n@@ -968,7 +969,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [`assume_init_ref`]: MaybeUninit::assume_init_ref\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub const unsafe fn slice_assume_init_ref(slice: &[Self]) -> &[T] {\n         // SAFETY: casting slice to a `*const [T]` is safe since the caller guarantees that"}, {"sha": "00d0259321d13da0b5158bec8f8de17600235ced", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -10,6 +10,7 @@\n #![feature(const_assume)]\n #![feature(const_cell_into_inner)]\n #![feature(const_convert)]\n+#![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]"}, {"sha": "3b13dc0832fa4963905bc842c8518376c4744ed6", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -269,3 +269,35 @@ fn uninit_const_assume_init_read() {\n     const FOO: u32 = unsafe { MaybeUninit::new(42).assume_init_read() };\n     assert_eq!(FOO, 42);\n }\n+\n+#[test]\n+fn const_maybe_uninit() {\n+    use std::ptr;\n+\n+    #[derive(Debug, PartialEq)]\n+    struct Foo {\n+        x: u8,\n+        y: u8,\n+    }\n+\n+    const FIELD_BY_FIELD: Foo = unsafe {\n+        let mut val = MaybeUninit::uninit();\n+        init_y(&mut val); // order shouldn't matter\n+        init_x(&mut val);\n+        val.assume_init()\n+    };\n+\n+    const fn init_x(foo: &mut MaybeUninit<Foo>) {\n+        unsafe {\n+            *ptr::addr_of_mut!((*foo.as_mut_ptr()).x) = 1;\n+        }\n+    }\n+\n+    const fn init_y(foo: &mut MaybeUninit<Foo>) {\n+        unsafe {\n+            *ptr::addr_of_mut!((*foo.as_mut_ptr()).y) = 2;\n+        }\n+    }\n+\n+    assert_eq!(FIELD_BY_FIELD, Foo { x: 1, y: 2 });\n+}"}, {"sha": "02dce4f7a97e829d1f886d0a8025a41a77d81e64", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:12:17\n+  --> $DIR/issue-72787.rs:11:17\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                 ^^^ cannot perform const operation using `LHS`\n@@ -8,7 +8,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:12:24\n+  --> $DIR/issue-72787.rs:11:24\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                        ^^^ cannot perform const operation using `RHS`\n@@ -17,7 +17,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:26:25\n+  --> $DIR/issue-72787.rs:25:25\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ cannot perform const operation using `I`\n@@ -26,7 +26,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:26:36\n+  --> $DIR/issue-72787.rs:25:36\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                    ^ cannot perform const operation using `J`\n@@ -35,29 +35,21 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72787.rs:10:38\n-   |\n-LL | impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n-   |                                      ^^^^ cannot infer type for struct `IsLessOrEqual<LHS, RHS>`\n-   |\n-   = note: cannot satisfy `IsLessOrEqual<LHS, RHS>: True`\n-\n-error[E0283]: type annotations needed\n-  --> $DIR/issue-72787.rs:22:26\n+  --> $DIR/issue-72787.rs:21:26\n    |\n LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72787.rs:22:26\n+  --> $DIR/issue-72787.rs:21:26\n    |\n LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0283`."}, {"sha": "77ad57f0640fa03260dec80aa3e95bc2f706493c", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -8,7 +8,6 @@ pub struct Condition<const CONDITION: bool>;\n pub trait True {}\n \n impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n-//[min]~^ ERROR type annotations needed\n     Condition<{ LHS <= RHS }>: True\n //[min]~^ Error generic parameters may not be used in const operations\n //[min]~| Error generic parameters may not be used in const operations"}, {"sha": "966d76d148af3f69d901198d4955d3b4654d769a", "filename": "src/test/ui/issues/issue-77919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -10,4 +10,4 @@ struct Multiply<N, M> {\n }\n impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n //~^ ERROR cannot find type `VAL` in this scope\n-//~| ERROR type annotations needed\n+//~| ERROR not all trait items implemented, missing: `VAL`"}, {"sha": "97bd5ab36b65d176d2e4ab0fb8580f0d2342dde0", "filename": "src/test/ui/issues/issue-77919.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -17,15 +17,16 @@ LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    |          |\n    |          help: you might be missing a type parameter: `, VAL`\n \n-error[E0283]: type annotations needed\n-  --> $DIR/issue-77919.rs:11:12\n+error[E0046]: not all trait items implemented, missing: `VAL`\n+  --> $DIR/issue-77919.rs:11:1\n    |\n+LL |     const VAL: T;\n+   |     ------------- `VAL` from trait\n+...\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n-   |            ^^^^^^^^^^^^^^ cannot infer type for struct `Multiply<N, M>`\n-   |\n-   = note: cannot satisfy `Multiply<N, M>: TypeVal<usize>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0283, E0412.\n-For more information about an error, try `rustc --explain E0283`.\n+Some errors have detailed explanations: E0046, E0412.\n+For more information about an error, try `rustc --explain E0046`."}, {"sha": "c8239897f3abb5b7032d8f574aeae103599b1e71", "filename": "src/tools/clippy/tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/58f9efd36de5669ab731ec7ebf565999ff17b159/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58f9efd36de5669ab731ec7ebf565999ff17b159/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=58f9efd36de5669ab731ec7ebf565999ff17b159", "patch": "@@ -21,15 +21,16 @@ LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    |          |\n    |          help: you might be missing a type parameter: `, VAL`\n \n-error[E0283]: type annotations needed\n-  --> $DIR/ice-6252.rs:10:12\n+error[E0046]: not all trait items implemented, missing: `VAL`\n+  --> $DIR/ice-6252.rs:10:1\n    |\n+LL |     const VAL: T;\n+   |     ------------- `VAL` from trait\n+...\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n-   |            ^^^^^^^^^^^^^^ cannot infer type for struct `Multiply<N, M>`\n-   |\n-   = note: cannot satisfy `Multiply<N, M>: TypeVal<usize>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0283, E0412.\n-For more information about an error, try `rustc --explain E0283`.\n+Some errors have detailed explanations: E0046, E0412.\n+For more information about an error, try `rustc --explain E0046`."}]}