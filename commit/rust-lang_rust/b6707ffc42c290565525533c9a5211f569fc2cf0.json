{"sha": "b6707ffc42c290565525533c9a5211f569fc2cf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NzA3ZmZjNDJjMjkwNTY1NTI1NTMzYzlhNTIxMWY1NjlmYzJjZjA=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-09-19T18:43:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-19T18:43:48Z"}, "message": "Merge pull request #3187 from flip1995/internal_fn\n\nNew internal lint: compiler_lint_functions", "tree": {"sha": "9a3b1918213d4a0b9ea7dfe7bfc3c71b5ebb268b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a3b1918213d4a0b9ea7dfe7bfc3c71b5ebb268b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6707ffc42c290565525533c9a5211f569fc2cf0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbopjkCRBK7hj4Ov3rIwAAdHIIAHGxk/OXXpyGVkWp6/jCaCLK\niEIicNjyxXEPh9AQraEqcx3soMEi/xI2Nr8zwl4zd3Io19bwf+ysL/sDl/sEVpN/\nW3sHjvLIxkjNA114PZ4LIOhx9/8Vb+cXzoQAZ8DMi3FmueDa1ik+5MVPuX++N/PV\nuHxyT/6SYxfcP1D9O9afXgeorAL/y3AdLruHvgX1VpsFh8i7NA6vm7Ai4WDWHutV\n7gu8A4NAu2zRq4zrHlRoCclDXslPuSEJWkY7XexBzSFJIu954hzUx+ZBeD8Y0Mk7\nVCQ0rqRQLNdmn1LCdLNAsGgmj4FQefx4zbLAV3rj+ZqhCqULBERpjp+Q7pQFH8E=\n=j75T\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a3b1918213d4a0b9ea7dfe7bfc3c71b5ebb268b\nparent 125907ad08853b92d35e86aecebcf0f784f348d5\nparent 144281c53751422e026bb4a1036491e405a5364e\nauthor Philipp Hansch <dev@phansch.net> 1537382628 +0100\ncommitter GitHub <noreply@github.com> 1537382628 +0100\n\nMerge pull request #3187 from flip1995/internal_fn\n\nNew internal lint: compiler_lint_functions"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6707ffc42c290565525533c9a5211f569fc2cf0", "html_url": "https://github.com/rust-lang/rust/commit/b6707ffc42c290565525533c9a5211f569fc2cf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6707ffc42c290565525533c9a5211f569fc2cf0/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "125907ad08853b92d35e86aecebcf0f784f348d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/125907ad08853b92d35e86aecebcf0f784f348d5", "html_url": "https://github.com/rust-lang/rust/commit/125907ad08853b92d35e86aecebcf0f784f348d5"}, {"sha": "144281c53751422e026bb4a1036491e405a5364e", "url": "https://api.github.com/repos/rust-lang/rust/commits/144281c53751422e026bb4a1036491e405a5364e", "html_url": "https://github.com/rust-lang/rust/commit/144281c53751422e026bb4a1036491e405a5364e"}], "stats": {"total": 121, "additions": 100, "deletions": 21}, "files": [{"sha": "702931c05327e6d30d8ae8c2005a39c107372135", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b6707ffc42c290565525533c9a5211f569fc2cf0/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6707ffc42c290565525533c9a5211f569fc2cf0/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=b6707ffc42c290565525533c9a5211f569fc2cf0", "patch": "@@ -1,6 +1,7 @@\n use crate::syntax::ast::*;\n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::utils::span_lint;\n \n /// **What it does:** Checks for unnecessary double parentheses.\n ///\n@@ -35,20 +36,20 @@ impl EarlyLintPass for DoubleParens {\n         match expr.node {\n             ExprKind::Paren(ref in_paren) => match in_paren.node {\n                 ExprKind::Paren(_) | ExprKind::Tup(_) => {\n-                    cx.span_lint(DOUBLE_PARENS, expr.span, \"Consider removing unnecessary double parentheses\");\n+                    span_lint(cx, DOUBLE_PARENS, expr.span, \"Consider removing unnecessary double parentheses\");\n                 },\n                 _ => {},\n             },\n             ExprKind::Call(_, ref params) => if params.len() == 1 {\n                 let param = &params[0];\n                 if let ExprKind::Paren(_) = param.node {\n-                    cx.span_lint(DOUBLE_PARENS, param.span, \"Consider removing unnecessary double parentheses\");\n+                    span_lint(cx, DOUBLE_PARENS, param.span, \"Consider removing unnecessary double parentheses\");\n                 }\n             },\n             ExprKind::MethodCall(_, ref params) => if params.len() == 2 {\n                 let param = &params[1];\n                 if let ExprKind::Paren(_) = param.node {\n-                    cx.span_lint(DOUBLE_PARENS, param.span, \"Consider removing unnecessary double parentheses\");\n+                    span_lint(cx, DOUBLE_PARENS, param.span, \"Consider removing unnecessary double parentheses\");\n                 }\n             },\n             _ => {},"}, {"sha": "ec00a13c0c67dcf7827b69d5337d3c7ce3dca511", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6707ffc42c290565525533c9a5211f569fc2cf0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6707ffc42c290565525533c9a5211f569fc2cf0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b6707ffc42c290565525533c9a5211f569fc2cf0", "patch": "@@ -293,8 +293,9 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n \n     reg.register_late_lint_pass(box serde_api::Serde);\n     reg.register_early_lint_pass(box utils::internal_lints::Clippy);\n-    reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n+    reg.register_late_lint_pass(box utils::internal_lints::CompilerLintFunctions::new());\n     reg.register_early_lint_pass(box utils::internal_lints::DefaultHashTypes::default());\n+    reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n     reg.register_late_lint_pass(box utils::inspector::Pass);\n     reg.register_late_lint_pass(box utils::author::Pass);\n     reg.register_late_lint_pass(box types::TypePass);\n@@ -494,8 +495,9 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n \n     reg.register_lint_group(\"clippy::internal\", Some(\"clippy_internal\"), vec![\n         utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n-        utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+        utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n         utils::internal_lints::DEFAULT_HASH_TYPES,\n+        utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n     ]);\n \n     reg.register_lint_group(\"clippy::all\", Some(\"clippy\"), vec!["}, {"sha": "058f7ee2fab2cf3cbda557b9751cfd4bec49edb3", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 89, "deletions": 15, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/b6707ffc42c290565525533c9a5211f569fc2cf0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6707ffc42c290565525533c9a5211f569fc2cf0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=b6707ffc42c290565525533c9a5211f569fc2cf0", "patch": "@@ -1,14 +1,16 @@\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, EarlyContext, EarlyLintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc::hir::*;\n+use crate::utils::{\n+    match_qpath, match_type, paths, span_help_and_lint, span_lint, span_lint_and_sugg, walk_ptrs_ty,\n+};\n+use if_chain::if_chain;\n use crate::rustc::hir;\n use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use crate::utils::{match_qpath, paths, span_lint, span_lint_and_sugg};\n-use crate::syntax::symbol::LocalInternedString;\n use crate::syntax::ast::{Crate as AstCrate, Ident, ItemKind, Name};\n use crate::syntax::source_map::Span;\n-\n+use crate::syntax::symbol::LocalInternedString;\n \n /// **What it does:** Checks for various things we like to keep tidy in clippy.\n ///\n@@ -23,7 +25,6 @@ declare_clippy_lint! {\n     \"various things that will negatively affect your clippy experience\"\n }\n \n-\n /// **What it does:** Ensures every lint is associated to a `LintPass`.\n ///\n /// **Why is this bad?** The compiler only knows lints via a `LintPass`. Without\n@@ -53,7 +54,6 @@ declare_clippy_lint! {\n     \"declaring a lint without associating it in a LintPass\"\n }\n \n-\n /// **What it does:** Checks for the presence of the default hash types \"HashMap\" or \"HashSet\"\n /// and recommends the FxHash* variants.\n ///\n@@ -65,6 +65,29 @@ declare_clippy_lint! {\n     \"forbid HashMap and HashSet and suggest the FxHash* variants\"\n }\n \n+/// **What it does:** Checks for calls to `cx.span_lint*` and suggests to use the `utils::*`\n+/// variant of the function.\n+///\n+/// **Why is this bad?** The `utils::*` variants also add a link to the Clippy documentation to the\n+/// warning/error messages.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// Bad:\n+/// ```rust\n+/// cx.span_lint(LINT_NAME, \"message\");\n+/// ```\n+///\n+/// Good:\n+/// ```rust\n+/// utils::span_lint(cx, LINT_NAME, \"message\");\n+/// ```\n+declare_clippy_lint! {\n+    pub COMPILER_LINT_FUNCTIONS,\n+    internal,\n+    \"usage of the lint functions of the compiler instead of the utils::* variant\"\n+}\n \n #[derive(Copy, Clone)]\n pub struct Clippy;\n@@ -119,7 +142,6 @@ pub struct LintWithoutLintPass {\n     registered_lints: FxHashSet<Name>,\n }\n \n-\n impl LintPass for LintWithoutLintPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(LINT_WITHOUT_LINT_PASS)\n@@ -171,7 +193,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     }\n }\n \n-\n fn is_lint_ref_type(ty: &Ty) -> bool {\n     if let TyKind::Rptr(\n         _,\n@@ -188,7 +209,6 @@ fn is_lint_ref_type(ty: &Ty) -> bool {\n     false\n }\n \n-\n fn is_lint_array_type(ty: &Ty) -> bool {\n     if let TyKind::Path(ref path) = ty.node {\n         match_qpath(path, &paths::LINT_ARRAY)\n@@ -224,8 +244,8 @@ pub struct DefaultHashTypes {\n impl DefaultHashTypes {\n     pub fn default() -> Self {\n         let mut map = FxHashMap::default();\n-        map.insert(\"HashMap\".to_owned(), \"FxHashMap\".to_owned());\n-        map.insert(\"HashSet\".to_owned(), \"FxHashSet\".to_owned());\n+        map.insert(\"HashMap\".to_string(), \"FxHashMap\".to_string());\n+        map.insert(\"HashSet\".to_string(), \"FxHashSet\".to_string());\n         Self { map }\n     }\n }\n@@ -240,8 +260,62 @@ impl EarlyLintPass for DefaultHashTypes {\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n         let ident_string = ident.to_string();\n         if let Some(replace) = self.map.get(&ident_string) {\n-            let msg = format!(\"Prefer {} over {}, it has better performance and we don't need any collision prevention in clippy\", replace, ident_string);\n-            span_lint_and_sugg(cx, DEFAULT_HASH_TYPES, ident.span, &msg, \"use\", replace.to_owned());\n+            let msg = format!(\"Prefer {} over {}, it has better performance \\\n+                              and we don't need any collision prevention in clippy\",\n+                              replace, ident_string);\n+            span_lint_and_sugg(\n+                cx,\n+                DEFAULT_HASH_TYPES,\n+                ident.span,\n+                &msg,\n+                \"use\",\n+                replace.to_string(),\n+            );\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Default)]\n+pub struct CompilerLintFunctions {\n+    map: FxHashMap<String, String>,\n+}\n+\n+impl CompilerLintFunctions {\n+    pub fn new() -> Self {\n+        let mut map = FxHashMap::default();\n+        map.insert(\"span_lint\".to_string(), \"utils::span_lint\".to_string());\n+        map.insert(\"struct_span_lint\".to_string(), \"utils::span_lint\".to_string());\n+        map.insert(\"lint\".to_string(), \"utils::span_lint\".to_string());\n+        map.insert(\"span_lint_note\".to_string(), \"utils::span_note_and_lint\".to_string());\n+        map.insert(\"span_lint_help\".to_string(), \"utils::span_help_and_lint\".to_string());\n+        Self { map }\n+    }\n+}\n+\n+impl LintPass for CompilerLintFunctions {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(COMPILER_LINT_FUNCTIONS)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(ref path, _, ref args) = expr.node;\n+            let fn_name = path.ident.as_str().to_string();\n+            if let Some(sugg) = self.map.get(&fn_name);\n+            let ty = walk_ptrs_ty(cx.tables.expr_ty(&args[0]));\n+            if match_type(cx, ty, &paths::EARLY_CONTEXT)\n+                || match_type(cx, ty, &paths::LATE_CONTEXT);\n+            then {\n+                span_help_and_lint(\n+                    cx,\n+                    COMPILER_LINT_FUNCTIONS,\n+                    path.ident.span,\n+                    \"usage of a compiler lint function\",\n+                    &format!(\"Please use the Clippy variant of this function: `{}`\", sugg),\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "30475da702348fd2083b0c4c87a247ff37d08c1a", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6707ffc42c290565525533c9a5211f569fc2cf0/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6707ffc42c290565525533c9a5211f569fc2cf0/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=b6707ffc42c290565525533c9a5211f569fc2cf0", "patch": "@@ -26,6 +26,7 @@ pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n+pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n pub const FMT_ARGUMENTS_NEWV1FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1_formatted\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n@@ -41,6 +42,7 @@ pub const INTO_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"IntoIterator\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const ITERATOR: [&str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n+pub const LATE_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n pub const LINT: [&str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n pub const LINT_ARRAY: [&str; 3] = [\"rustc\", \"lint\", \"LintArray\"];"}]}