{"sha": "68a92c5ed58e676d6aa224681080f921b9e069a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YTkyYzVlZDU4ZTY3NmQ2YWEyMjQ2ODEwODBmOTIxYjllMDY5YTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-27T05:16:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-27T05:16:36Z"}, "message": "auto merge of #12581 : alexcrichton/rust/older-llvm, r=brson\n\nIn doing so, revert travis to not using a 3.5 build because it seems to be changing enough that it's breaking our C++ glue frequently enough.", "tree": {"sha": "4fea0f13c3296a129ca06ff71b4046579c38b00c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fea0f13c3296a129ca06ff71b4046579c38b00c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68a92c5ed58e676d6aa224681080f921b9e069a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68a92c5ed58e676d6aa224681080f921b9e069a5", "html_url": "https://github.com/rust-lang/rust/commit/68a92c5ed58e676d6aa224681080f921b9e069a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68a92c5ed58e676d6aa224681080f921b9e069a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "780adfffc39bcb9d32685bd36e2f6b6e6a178dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/780adfffc39bcb9d32685bd36e2f6b6e6a178dee", "html_url": "https://github.com/rust-lang/rust/commit/780adfffc39bcb9d32685bd36e2f6b6e6a178dee"}, {"sha": "bbdaf01a5aa3ef55b693384465e61db1007a9a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbdaf01a5aa3ef55b693384465e61db1007a9a09", "html_url": "https://github.com/rust-lang/rust/commit/bbdaf01a5aa3ef55b693384465e61db1007a9a09"}], "stats": {"total": 113, "additions": 87, "deletions": 26}, "files": [{"sha": "310d3f4111fd36c17e7f2d861f6f65010f8bd1f1", "filename": ".travis.yml", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/68a92c5ed58e676d6aa224681080f921b9e069a5/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/68a92c5ed58e676d6aa224681080f921b9e069a5/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=68a92c5ed58e676d6aa224681080f921b9e069a5", "patch": "@@ -3,32 +3,23 @@\n # it treats unknown languages as ruby-like I believe.\n language: c\n \n-# Before we start doing anything, install the latest stock LLVM. These are\n-# maintained by LLVM, and more information can be found at llvm.org/apt.\n-#\n-# Right now, the highest version is 3.5, and our SVN version is roughly aligned\n-# with the 3.5 API (hurray!)\n+# Before we start doing anything, install a stock LLVM\n install:\n-  - sudo sh -c \"echo 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise main' >> /etc/apt/sources.list\"\n-  - sudo sh -c \"echo 'deb-src http://llvm.org/apt/precise/ llvm-toolchain-precise main' >> /etc/apt/sources.list\"\n-  - sudo sh -c \"echo 'deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu precise main' >> /etc/apt/sources.list\"\n-  - wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -\n-  - sudo apt-get update -qq\n-  - sudo apt-get install -y --force-yes -qq llvm-3.5 llvm-3.5-dev clang-3.5 lldb-3.5\n+  - sudo apt-get install llvm-3.3 llvm-3.3-dev clang-3.3 lldb-3.3\n \n-# All of the llvm tools are suffixed with \"-3.5\" which we don't want, so symlink\n+# All of the llvm tools are suffixed with \"-3.3\" which we don't want, so symlink\n # them all into a local directory and just use that\n #\n # FIXME: this shouldn't update the src/llvm sub-repo, that takes about a minute\n #        it's gotta download so much stuff.\n before_script:\n   - mkdir -p local-llvm/bin\n-  - ln -nsf /usr/bin/llvm-config-3.5 local-llvm/bin/llvm-config\n-  - ln -nsf /usr/bin/llvm-mc-3.5 local-llvm/bin/llvm-mc\n-  - ln -nsf /usr/bin/llvm-as-3.5 local-llvm/bin/llvm-as\n-  - ln -nsf /usr/bin/llvm-dis-3.5 local-llvm/bin/llvm-dis\n-  - ln -nsf /usr/bin/llc-3.5 local-llvm/bin/llc\n-  - ln -nsf /usr/include/llvm-3.5 local-llvm/include\n+  - ln -nsf /usr/bin/llvm-config-3.3 local-llvm/bin/llvm-config\n+  - ln -nsf /usr/bin/llvm-mc-3.3 local-llvm/bin/llvm-mc\n+  - ln -nsf /usr/bin/llvm-as-3.3 local-llvm/bin/llvm-as\n+  - ln -nsf /usr/bin/llvm-dis-3.3 local-llvm/bin/llvm-dis\n+  - ln -nsf /usr/bin/llc-3.3 local-llvm/bin/llc\n+  - ln -nsf /usr/include/llvm-3.3 local-llvm/include\n   - ./configure --disable-optimize-tests --llvm-root=`pwd`/local-llvm --enable-fast-make --enable-clang\n \n # Tidy everything up first, then build a few things, and then run a few tests."}, {"sha": "2be7c84ab03484f34c92f40cef5709af201379f3", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68a92c5ed58e676d6aa224681080f921b9e069a5/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68a92c5ed58e676d6aa224681080f921b9e069a5/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=68a92c5ed58e676d6aa224681080f921b9e069a5", "patch": "@@ -166,7 +166,11 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target,\n   PassManager *PM = unwrap<PassManager>(PMR);\n \n   std::string ErrorInfo;\n+#if LLVM_VERSION_MINOR >= 4\n   raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_None);\n+#else\n+  raw_fd_ostream OS(path, ErrorInfo, raw_fd_ostream::F_Binary);\n+#endif\n   if (ErrorInfo != \"\") {\n     LLVMRustError = ErrorInfo.c_str();\n     return false;\n@@ -184,9 +188,21 @@ LLVMRustPrintModule(LLVMPassManagerRef PMR,\n                     const char* path) {\n   PassManager *PM = unwrap<PassManager>(PMR);\n   std::string ErrorInfo;\n+\n+#if LLVM_VERSION_MINOR >= 4\n   raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_None);\n+#else\n+  raw_fd_ostream OS(path, ErrorInfo, raw_fd_ostream::F_Binary);\n+#endif\n+\n   formatted_raw_ostream FOS(OS);\n+\n+#if LLVM_VERSION_MINOR >= 5\n   PM->add(createPrintModulePass(FOS));\n+#else\n+  PM->add(createPrintModulePass(&FOS));\n+#endif\n+\n   PM->run(*unwrap(M));\n }\n "}, {"sha": "d8fc5b15850e127cef3f7eff618876ed2e484200", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/68a92c5ed58e676d6aa224681080f921b9e069a5/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68a92c5ed58e676d6aa224681080f921b9e069a5/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=68a92c5ed58e676d6aa224681080f921b9e069a5", "patch": "@@ -91,10 +91,14 @@ extern \"C\" void LLVMRemoveReturnAttribute(LLVMValueRef Fn, LLVMAttribute PA) {\n                       AttributeSet::get(A->getContext(), AttributeSet::ReturnIndex,  B));\n }\n \n+#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void LLVMAddColdAttribute(LLVMValueRef Fn) {\n   Function *A = unwrap<Function>(Fn);\n   A->addAttribute(AttributeSet::FunctionIndex, Attribute::Cold);\n }\n+#else\n+extern \"C\" void LLVMAddColdAttribute(LLVMValueRef Fn) {}\n+#endif\n \n extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,\n                                             LLVMValueRef source,\n@@ -156,7 +160,11 @@ DIT unwrapDI(LLVMValueRef ref) {\n     return DIT(ref ? unwrap<MDNode>(ref) : NULL);\n }\n \n+#if LLVM_VERSION_MINOR >= 5\n extern \"C\" const uint32_t LLVMRustDebugMetadataVersion = DEBUG_METADATA_VERSION;\n+#else\n+extern \"C\" const uint32_t LLVMRustDebugMetadataVersion = 1;\n+#endif\n \n extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M,\n                                       const char *name,\n@@ -278,8 +286,12 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateStructType(\n         unwrapDI<DIType>(DerivedFrom),\n         unwrapDI<DIArray>(Elements),\n         RunTimeLang,\n-        unwrapDI<DIType>(VTableHolder),\n-        UniqueId));\n+        unwrapDI<DIType>(VTableHolder)\n+#if LLVM_VERSION_MINOR >= 5\n+        ,UniqueId));\n+#else\n+        ));\n+#endif\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderCreateMemberType(\n@@ -440,8 +452,12 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateUnionType(\n         AlignInBits,\n         Flags,\n         unwrapDI<DIArray>(Elements),\n-        RunTimeLang,\n-        UniqueId));\n+        RunTimeLang\n+#if LLVM_VERSION_MINOR >= 5\n+        ,UniqueId));\n+#else\n+        ));\n+#endif\n }\n \n extern \"C\" void LLVMSetUnnamedAddr(LLVMValueRef Value, LLVMBool Unnamed) {\n@@ -541,6 +557,7 @@ extern \"C\" char *LLVMValueToString(LLVMValueRef Value) {\n     return strdup(os.str().data());\n }\n \n+#if LLVM_VERSION_MINOR >= 5\n extern \"C\" bool\n LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     Module *Dst = unwrap(dst);\n@@ -559,6 +576,26 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     }\n     return true;\n }\n+#else\n+extern \"C\" bool\n+LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n+    Module *Dst = unwrap(dst);\n+    MemoryBuffer* buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n+    std::string Err;\n+    Module *Src = llvm::getLazyBitcodeModule(buf, Dst->getContext(), &Err);\n+    if (!Src) {\n+        LLVMRustError = Err.c_str();\n+        delete buf;\n+        return false;\n+    }\n+\n+    if (Linker::LinkModules(Dst, Src, Linker::DestroySource, &Err)) {\n+        LLVMRustError = Err.c_str();\n+        return false;\n+    }\n+    return true;\n+}\n+#endif\n \n extern \"C\" void*\n LLVMRustOpenArchive(char *path) {\n@@ -578,9 +615,14 @@ LLVMRustOpenArchive(char *path) {\n \n extern \"C\" const char*\n LLVMRustArchiveReadSection(Archive *ar, char *name, size_t *size) {\n-    for (Archive::child_iterator child = ar->child_begin(),\n-                                   end = ar->child_end();\n-         child != end; ++child) {\n+#if LLVM_VERSION_MINOR >= 5\n+    Archive::child_iterator child = ar->child_begin(),\n+                              end = ar->child_end();\n+#else\n+    Archive::child_iterator child = ar->begin_children(),\n+                              end = ar->end_children();\n+#endif\n+    for (; child != end; ++child) {\n         StringRef sect_name;\n         error_code err = child->getName(sect_name);\n         if (err) continue;\n@@ -598,8 +640,15 @@ LLVMRustDestroyArchive(Archive *ar) {\n     delete ar;\n }\n \n+#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void\n LLVMRustSetDLLExportStorageClass(LLVMValueRef Value) {\n     GlobalValue *V = unwrap<GlobalValue>(Value);\n     V->setDLLStorageClass(GlobalValue::DLLExportStorageClass);\n }\n+#else\n+extern \"C\" void\n+LLVMRustSetDLLExportStorageClass(LLVMValueRef Value) {\n+    LLVMSetLinkage(Value, LLVMDLLExportLinkage);\n+}\n+#endif"}, {"sha": "f046587052a120f949d6d6e29dbfc06e5f811ccd", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68a92c5ed58e676d6aa224681080f921b9e069a5/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/68a92c5ed58e676d6aa224681080f921b9e069a5/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=68a92c5ed58e676d6aa224681080f921b9e069a5", "patch": "@@ -16,7 +16,6 @@\n #include \"llvm/PassManager.h\"\n #include \"llvm/IR/InlineAsm.h\"\n #include \"llvm/IR/LLVMContext.h\"\n-#include \"llvm/IR/IRPrintingPasses.h\"\n #include \"llvm/Analysis/Passes.h\"\n #include \"llvm/Analysis/Lint.h\"\n #include \"llvm/ADT/ArrayRef.h\"\n@@ -52,6 +51,12 @@\n #include \"llvm-c/ExecutionEngine.h\"\n #include \"llvm-c/Object.h\"\n \n+#if LLVM_VERSION_MINOR >= 5\n+#include \"llvm/IR/IRPrintingPasses.h\"\n+#else\n+#include \"llvm/Assembly/PrintModulePass.h\"\n+#endif\n+\n // Used by RustMCJITMemoryManager::getPointerToNamedFunction()\n // to get around glibc issues. See the function for more information.\n #ifdef __linux__"}]}