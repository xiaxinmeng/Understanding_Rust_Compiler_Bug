{"sha": "a40659ded3ae4dde742261ded4da69ecb1ca3c1c", "node_id": "C_kwDOAAsO6NoAKGE0MDY1OWRlZDNhZTRkZGU3NDIyNjFkZWQ0ZGE2OWVjYjFjYTNjMWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-22T11:06:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-22T11:06:39Z"}, "message": "Rollup merge of #104710 - RalfJung:doc-strict-provenance, r=thomcc\n\ndisable strict-provenance-violating doctests in Miri\n\nMost of these are on deprecated unstable functions anyway. This lets us run the remaining doctests with `-Zmiri-strict-provenance`, which I think is a win.\n\nr? `@thomcc`", "tree": {"sha": "eebf9ccbdec341914e7d2aeb8bc7f67964bf544b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eebf9ccbdec341914e7d2aeb8bc7f67964bf544b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40659ded3ae4dde742261ded4da69ecb1ca3c1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfK0/CRBK7hj4Ov3rIwAAFfcIAGYQqqnq4g0Gb8HRzWCMe76s\nukVcTleyDO7EK8nDMsfO57mC5rmBJZ1WLKbVyOX6XyKByZdcY/uGbs0tjqvh3xUb\nPnghhGBpCUqu4cFNeNHySUhxq6Jc297uED3Xf56QlykLUNRefFkKox6OsVS6P7Mq\nAoZam7PgABd2MWzrUQMRMyZKe/0tXBCLFnruCzBHEDy4X1W7wNB5X9tNlW56z4kF\nIzKYyASiF6nOiUpOxUGLOgsBPerHexg0SPMw1eiB3Zwxapc31xCrfBxkEpJuHaw2\nYUkW8E8kOkkEUXvabBL8kqkWflEoUIKqjxCButa9JLSwAZuAJZYvYTZU7+LmW14=\n=Cw1d\n-----END PGP SIGNATURE-----\n", "payload": "tree eebf9ccbdec341914e7d2aeb8bc7f67964bf544b\nparent b12d31f166510facfb16289629310b280b916106\nparent 3a95e12c9bbe978fc2e89ec50bb8aa82694003e8\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1669115199 +0530\ncommitter GitHub <noreply@github.com> 1669115199 +0530\n\nRollup merge of #104710 - RalfJung:doc-strict-provenance, r=thomcc\n\ndisable strict-provenance-violating doctests in Miri\n\nMost of these are on deprecated unstable functions anyway. This lets us run the remaining doctests with `-Zmiri-strict-provenance`, which I think is a win.\n\nr? `@thomcc`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40659ded3ae4dde742261ded4da69ecb1ca3c1c", "html_url": "https://github.com/rust-lang/rust/commit/a40659ded3ae4dde742261ded4da69ecb1ca3c1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40659ded3ae4dde742261ded4da69ecb1ca3c1c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12d31f166510facfb16289629310b280b916106", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12d31f166510facfb16289629310b280b916106", "html_url": "https://github.com/rust-lang/rust/commit/b12d31f166510facfb16289629310b280b916106"}, {"sha": "3a95e12c9bbe978fc2e89ec50bb8aa82694003e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8", "html_url": "https://github.com/rust-lang/rust/commit/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "d6e9da187e80a2f61bf2f3cbf16742610cfe580d", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a40659ded3ae4dde742261ded4da69ecb1ca3c1c/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40659ded3ae4dde742261ded4da69ecb1ca3c1c/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=a40659ded3ae4dde742261ded4da69ecb1ca3c1c", "patch": "@@ -1493,11 +1493,13 @@ mod prim_ref {}\n /// However, a direct cast back is not possible. You need to use `transmute`:\n ///\n /// ```rust\n+/// # #[cfg(not(miri))] { // FIXME: use strict provenance APIs once they are stable, then remove this `cfg`\n /// # let fnptr: fn(i32) -> i32 = |x| x+2;\n /// # let fnptr_addr = fnptr as usize;\n /// let fnptr = fnptr_addr as *const ();\n /// let fnptr: fn(i32) -> i32 = unsafe { std::mem::transmute(fnptr) };\n /// assert_eq!(fnptr(40), 42);\n+/// # }\n /// ```\n ///\n /// Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer."}, {"sha": "76603e1018d19409951e6603d8c8e12fff6ed591", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a40659ded3ae4dde742261ded4da69ecb1ca3c1c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40659ded3ae4dde742261ded4da69ecb1ca3c1c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=a40659ded3ae4dde742261ded4da69ecb1ca3c1c", "patch": "@@ -112,11 +112,13 @@ impl<T: ?Sized> *const T {\n     ///\n     /// ```\n     /// #![feature(ptr_to_from_bits)]\n+    /// # #[cfg(not(miri))] { // doctest does not work with strict provenance\n     /// let array = [13, 42];\n     /// let p0: *const i32 = &array[0];\n     /// assert_eq!(<*const _>::from_bits(p0.to_bits()), p0);\n     /// let p1: *const i32 = &array[1];\n     /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n+    /// # }\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n     #[deprecated(\n@@ -140,9 +142,11 @@ impl<T: ?Sized> *const T {\n     ///\n     /// ```\n     /// #![feature(ptr_to_from_bits)]\n+    /// # #[cfg(not(miri))] { // doctest does not work with strict provenance\n     /// use std::ptr::NonNull;\n     /// let dangling: *const u8 = NonNull::dangling().as_ptr();\n     /// assert_eq!(<*const u8>::from_bits(1), dangling);\n+    /// # }\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n     #[deprecated("}, {"sha": "b03cad18e4aedf81e89d19f8edd1329d0f5b4097", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a40659ded3ae4dde742261ded4da69ecb1ca3c1c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40659ded3ae4dde742261ded4da69ecb1ca3c1c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=a40659ded3ae4dde742261ded4da69ecb1ca3c1c", "patch": "@@ -117,12 +117,14 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// ```\n     /// #![feature(ptr_to_from_bits)]\n+    /// # #[cfg(not(miri))] { // doctest does not work with strict provenance\n     /// let mut array = [13, 42];\n     /// let mut it = array.iter_mut();\n     /// let p0: *mut i32 = it.next().unwrap();\n     /// assert_eq!(<*mut _>::from_bits(p0.to_bits()), p0);\n     /// let p1: *mut i32 = it.next().unwrap();\n     /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n+    /// }\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n     #[deprecated(\n@@ -146,9 +148,11 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// ```\n     /// #![feature(ptr_to_from_bits)]\n+    /// # #[cfg(not(miri))] { // doctest does not work with strict provenance\n     /// use std::ptr::NonNull;\n     /// let dangling: *mut u8 = NonNull::dangling().as_ptr();\n     /// assert_eq!(<*mut u8>::from_bits(1), dangling);\n+    /// }\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n     #[deprecated("}, {"sha": "d6e9da187e80a2f61bf2f3cbf16742610cfe580d", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a40659ded3ae4dde742261ded4da69ecb1ca3c1c/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40659ded3ae4dde742261ded4da69ecb1ca3c1c/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=a40659ded3ae4dde742261ded4da69ecb1ca3c1c", "patch": "@@ -1493,11 +1493,13 @@ mod prim_ref {}\n /// However, a direct cast back is not possible. You need to use `transmute`:\n ///\n /// ```rust\n+/// # #[cfg(not(miri))] { // FIXME: use strict provenance APIs once they are stable, then remove this `cfg`\n /// # let fnptr: fn(i32) -> i32 = |x| x+2;\n /// # let fnptr_addr = fnptr as usize;\n /// let fnptr = fnptr_addr as *const ();\n /// let fnptr: fn(i32) -> i32 = unsafe { std::mem::transmute(fnptr) };\n /// assert_eq!(fnptr(40), 42);\n+/// # }\n /// ```\n ///\n /// Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer."}]}