{"sha": "2ca0b58f60e55afdffc68a8aef24704ad2a2a2e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYTBiNThmNjBlNTVhZmRmZmM2OGE4YWVmMjQ3MDRhZDJhMmEyZTM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-26T13:24:10Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-26T13:29:02Z"}, "message": "std::hashmap: add an example to mangle.", "tree": {"sha": "fb022da879fe2939dca8e05677554bdf930c7ff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb022da879fe2939dca8e05677554bdf930c7ff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca0b58f60e55afdffc68a8aef24704ad2a2a2e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca0b58f60e55afdffc68a8aef24704ad2a2a2e3", "html_url": "https://github.com/rust-lang/rust/commit/2ca0b58f60e55afdffc68a8aef24704ad2a2a2e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca0b58f60e55afdffc68a8aef24704ad2a2a2e3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2277d78d33f1a110ba107064b4da5c2f5b7d941f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2277d78d33f1a110ba107064b4da5c2f5b7d941f", "html_url": "https://github.com/rust-lang/rust/commit/2277d78d33f1a110ba107064b4da5c2f5b7d941f"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "e93a76e5556ca1bb6b93f8eca4e7d0ad4ea0e38a", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2ca0b58f60e55afdffc68a8aef24704ad2a2a2e3/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca0b58f60e55afdffc68a8aef24704ad2a2a2e3/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=2ca0b58f60e55afdffc68a8aef24704ad2a2a2e3", "patch": "@@ -354,6 +354,43 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n \n     /// Modify and return the value corresponding to the key in the map, or\n     /// insert and return a new value if it doesn't exist.\n+    ///\n+    /// This method allows for all insertion behaviours of a hashmap,\n+    /// see methods like `insert`, `find_or_insert` and\n+    /// `insert_or_update_with` for less general and more friendly\n+    /// variations of this.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::hashmap::HashMap;\n+    ///\n+    /// // map some strings to vectors of strings\n+    /// let mut map = HashMap::<~str, ~[~str]>::new();\n+    /// map.insert(~\"a key\", ~[~\"value\"]);\n+    /// map.insert(~\"z key\", ~[~\"value\"]);\n+    ///\n+    /// let new = ~[~\"a key\", ~\"b key\", ~\"z key\"];\n+    /// for k in new.move_iter() {\n+    ///     map.mangle(k, ~\"new value\",\n+    ///                // if the key doesn't exist in the map yet, add it in\n+    ///                // the obvious way.\n+    ///                |_k, v| ~[v],\n+    ///                // if the key does exist either prepend or append this\n+    ///                // new value based on the first letter of the key.\n+    ///                |key, already, new| {\n+    ///                     if key.starts_with(\"z\") {\n+    ///                         already.unshift(new);\n+    ///                     } else {\n+    ///                         already.push(new);\n+    ///                     }\n+    ///                });\n+    /// }\n+    ///\n+    /// for (k, v) in map.iter() {\n+    ///    println!(\"{} -> {:?}\", *k, *v);\n+    /// }\n+    /// ```\n     pub fn mangle<'a,\n                   A>(\n                   &'a mut self,"}]}