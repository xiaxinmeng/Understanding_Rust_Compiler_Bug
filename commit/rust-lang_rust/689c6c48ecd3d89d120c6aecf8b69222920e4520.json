{"sha": "689c6c48ecd3d89d120c6aecf8b69222920e4520", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OWM2YzQ4ZWNkM2Q4OWQxMjBjNmFlY2Y4YjY5MjIyOTIwZTQ1MjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-02T10:01:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-02T10:01:48Z"}, "message": "Auto merge of #36024 - japaric:mips64, r=alexcrichton\n\nadd mips64-gnu and mips64el-gnu targets\n\nWith this commit one can build no_core (and probably no_std as well)\nRust programs for these targets. It's not yet possible to cross compile\nstd for these targets because rust-lang/libc doesn't know about the\nmips64 architecture.\n\nThese targets have been tested by cross compiling the \"smallest hello\"\nprogram (see code below) and then running it under QEMU.\n\n``` rust\n\nextern {\n    fn puts(_: *const u8);\n}\n\nfn start(_: isize, _: *const *const u8) -> isize {\n    unsafe {\n        let msg = b\"Hello, world!\\0\";\n        puts(msg as *const _ as *const u8);\n    }\n    0\n}\n\ntrait Copy {}\n\ntrait Sized {}\n```\n\ncc #36015\nr? @alexcrichton\ncc @brson\n\nThe cabi stuff is likely wrong. I just copied cabi_mips source and changed some `4`s to `8`s and `32`s to `64`s. It was enough to get libc's `puts` to work but I'd like someone familiar with this module to check it.", "tree": {"sha": "8bd8088e0fd7273a62b3123ebb9ea5ef1a72405d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bd8088e0fd7273a62b3123ebb9ea5ef1a72405d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689c6c48ecd3d89d120c6aecf8b69222920e4520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689c6c48ecd3d89d120c6aecf8b69222920e4520", "html_url": "https://github.com/rust-lang/rust/commit/689c6c48ecd3d89d120c6aecf8b69222920e4520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689c6c48ecd3d89d120c6aecf8b69222920e4520/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "022cb6d11d7d3529fc09283d058e66017dadeb8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/022cb6d11d7d3529fc09283d058e66017dadeb8c", "html_url": "https://github.com/rust-lang/rust/commit/022cb6d11d7d3529fc09283d058e66017dadeb8c"}, {"sha": "bbf2c3c31f3dd7703f4a13724bada979a921a65f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf2c3c31f3dd7703f4a13724bada979a921a65f", "html_url": "https://github.com/rust-lang/rust/commit/bbf2c3c31f3dd7703f4a13724bada979a921a65f"}], "stats": {"total": 273, "additions": 259, "deletions": 14}, "files": [{"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mips64-unknown-linux-gnuabi64.mk", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -0,0 +1 @@\n+# rustbuild-only target"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mips64el-unknown-linux-gnuabi64.mk", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -0,0 +1 @@\n+# rustbuild-only target"}, {"sha": "aae0528e42cc9aa82cfcf756a47948c81d18907c", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -77,7 +77,8 @@ const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86\",\n               target_arch = \"x86_64\",\n               target_arch = \"aarch64\",\n-              target_arch = \"powerpc64\")))]\n+              target_arch = \"powerpc64\",\n+              target_arch = \"mips64\")))]\n const MIN_ALIGN: usize = 16;\n \n // MALLOCX_ALIGN(a) macro"}, {"sha": "2c0c6d068caaeb6205a7bb738ac1f059ef3a0361", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -32,7 +32,8 @@\n               target_arch = \"asmjs\")))]\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n-              target_arch = \"aarch64\")))]\n+              target_arch = \"aarch64\",\n+              target_arch = \"mips64\")))]\n const MIN_ALIGN: usize = 16;\n \n #[no_mangle]"}, {"sha": "49d64cae0699ed9d9ed84810d737a26b0b519da8", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -1 +1 @@\n-Subproject commit 5066b7dcab7e700844b0e2ba71b8af9dc627a59b\n+Subproject commit 49d64cae0699ed9d9ed84810d737a26b0b519da8"}, {"sha": "c2e8eccbd22a43d041dfb258f6c6cc2d82e6bf7d", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -124,7 +124,7 @@ const UNWIND_DATA_REG: (i32, i32) = (0, 1); // RAX, RDX\n #[cfg(any(target_arch = \"arm\", target_arch = \"aarch64\"))]\n const UNWIND_DATA_REG: (i32, i32) = (0, 1); // R0, R1 / X0, X1\n \n-#[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n+#[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\", target_arch = \"mips64\"))]\n const UNWIND_DATA_REG: (i32, i32) = (4, 5); // A0, A1\n \n #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\"))]"}, {"sha": "837856344280f89c9fffb86a2b92eef2fdf8ed73", "filename": "src/librustc_back/target/mips64_unknown_linux_gnuabi64.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"mips64-unknown-linux-gnuabi64\".to_string(),\n+        target_endian: \"big\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        data_layout: \"E-m:m-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n+        arch: \"mips64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: TargetOptions {\n+            // NOTE(mips64r2) matches C toolchain\n+            cpu: \"mips64r2\".to_string(),\n+            features: \"+mips64r2\".to_string(),\n+            max_atomic_width: 64,\n+            ..super::linux_base::opts()\n+        },\n+    })\n+}"}, {"sha": "e1340e8e127b229ddb9baf69c14994843ef9242e", "filename": "src/librustc_back/target/mips64el_unknown_linux_gnuabi64.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"mips64el-unknown-linux-gnuabi64\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        data_layout: \"e-m:m-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n+        arch: \"mips64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: TargetOptions {\n+            // NOTE(mips64r2) matches C toolchain\n+            cpu: \"mips64r2\".to_string(),\n+            features: \"+mips64r2\".to_string(),\n+            max_atomic_width: 64,\n+            ..super::linux_base::opts()\n+        },\n+    })\n+}"}, {"sha": "d48370b23b69d6cb8479f9ea1ce348c78614907c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -128,6 +128,8 @@ supported_targets! {\n     (\"i686-unknown-linux-gnu\", i686_unknown_linux_gnu),\n     (\"i586-unknown-linux-gnu\", i586_unknown_linux_gnu),\n     (\"mips-unknown-linux-gnu\", mips_unknown_linux_gnu),\n+    (\"mips64-unknown-linux-gnuabi64\", mips64_unknown_linux_gnuabi64),\n+    (\"mips64el-unknown-linux-gnuabi64\", mips64el_unknown_linux_gnuabi64),\n     (\"mipsel-unknown-linux-gnu\", mipsel_unknown_linux_gnu),\n     (\"powerpc-unknown-linux-gnu\", powerpc_unknown_linux_gnu),\n     (\"powerpc64-unknown-linux-gnu\", powerpc64_unknown_linux_gnu),"}, {"sha": "c2b040c32f6a364e20e4d154e791375142b0ae9c", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -21,6 +21,7 @@ use cabi_aarch64;\n use cabi_powerpc;\n use cabi_powerpc64;\n use cabi_mips;\n+use cabi_mips64;\n use cabi_asmjs;\n use machine::{llalign_of_min, llsize_of, llsize_of_real, llsize_of_store};\n use type_::Type;\n@@ -501,6 +502,7 @@ impl FnType {\n                 cabi_arm::compute_abi_info(ccx, self, flavor);\n             },\n             \"mips\" => cabi_mips::compute_abi_info(ccx, self),\n+            \"mips64\" => cabi_mips64::compute_abi_info(ccx, self),\n             \"powerpc\" => cabi_powerpc::compute_abi_info(ccx, self),\n             \"powerpc64\" => cabi_powerpc64::compute_abi_info(ccx, self),\n             \"asmjs\" => cabi_asmjs::compute_abi_info(ccx, self),"}, {"sha": "e92ef1eaec8ec571ad74a4274afca8122ef2f6a7", "filename": "src/librustc_trans/cabi_mips64.rs", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_trans%2Fcabi_mips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_trans%2Fcabi_mips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_mips64.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -0,0 +1,168 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_upper_case_globals)]\n+\n+use libc::c_uint;\n+use std::cmp;\n+use llvm;\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n+use abi::{ArgType, FnType};\n+use context::CrateContext;\n+use type_::Type;\n+\n+fn align_up_to(off: usize, a: usize) -> usize {\n+    return (off + a - 1) / a * a;\n+}\n+\n+fn align(off: usize, ty: Type) -> usize {\n+    let a = ty_align(ty);\n+    return align_up_to(off, a);\n+}\n+\n+fn ty_align(ty: Type) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+          if ty.is_packed() {\n+            1\n+          } else {\n+            let str_tys = ty.field_types();\n+            str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n+          }\n+        }\n+        Array => {\n+            let elt = ty.element_type();\n+            ty_align(elt)\n+        }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            ty_align(elt) * len\n+        }\n+        _ => bug!(\"ty_align: unhandled type\")\n+    }\n+}\n+\n+fn ty_size(ty: Type) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n+            } else {\n+                let str_tys = ty.field_types();\n+                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n+                align(size, ty)\n+            }\n+        }\n+        Array => {\n+            let len = ty.array_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n+        _ => bug!(\"ty_size: unhandled type\")\n+    }\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n+    if is_reg_ty(ret.ty) {\n+        ret.extend_integer_width_to(64);\n+    } else {\n+        ret.make_indirect(ccx);\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, offset: &mut usize) {\n+    let orig_offset = *offset;\n+    let size = ty_size(arg.ty) * 8;\n+    let mut align = ty_align(arg.ty);\n+\n+    align = cmp::min(cmp::max(align, 4), 8);\n+    *offset = align_up_to(*offset, align);\n+    *offset += align_up_to(size, align * 8) / 8;\n+\n+    if !is_reg_ty(arg.ty) {\n+        arg.cast = Some(struct_ty(ccx, arg.ty));\n+        arg.pad = padding_ty(ccx, align, orig_offset);\n+    } else {\n+        arg.extend_integer_width_to(64);\n+    }\n+}\n+\n+fn is_reg_ty(ty: Type) -> bool {\n+    return match ty.kind() {\n+        Integer\n+        | Pointer\n+        | Float\n+        | Double\n+        | Vector => true,\n+        _ => false\n+    };\n+}\n+\n+fn padding_ty(ccx: &CrateContext, align: usize, offset: usize) -> Option<Type> {\n+    if ((align - 1 ) & offset) > 0 {\n+        Some(Type::i64(ccx))\n+    } else {\n+        None\n+    }\n+}\n+\n+fn coerce_to_int(ccx: &CrateContext, size: usize) -> Vec<Type> {\n+    let int_ty = Type::i64(ccx);\n+    let mut args = Vec::new();\n+\n+    let mut n = size / 64;\n+    while n > 0 {\n+        args.push(int_ty);\n+        n -= 1;\n+    }\n+\n+    let r = size % 64;\n+    if r > 0 {\n+        unsafe {\n+            args.push(Type::from_ref(llvm::LLVMIntTypeInContext(ccx.llcx(), r as c_uint)));\n+        }\n+    }\n+\n+    args\n+}\n+\n+fn struct_ty(ccx: &CrateContext, ty: Type) -> Type {\n+    let size = ty_size(ty) * 8;\n+    Type::struct_(ccx, &coerce_to_int(ccx, size), false)\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    let mut offset = if fty.ret.is_indirect() { 8 } else { 0 };\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() { continue; }\n+        classify_arg_ty(ccx, arg, &mut offset);\n+    }\n+}"}, {"sha": "e05c31b1d88cdce6d187d3cbfa132f1b27a86381", "filename": "src/librustc_trans/cabi_powerpc.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_trans%2Fcabi_powerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_trans%2Fcabi_powerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_powerpc.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -28,11 +28,7 @@ fn align(off: usize, ty: Type) -> usize {\n \n fn ty_align(ty: Type) -> usize {\n     match ty.kind() {\n-        Integer => {\n-            unsafe {\n-                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as usize) + 7) / 8\n-            }\n-        }\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n         Pointer => 4,\n         Float => 4,\n         Double => 8,\n@@ -54,11 +50,7 @@ fn ty_align(ty: Type) -> usize {\n \n fn ty_size(ty: Type) -> usize {\n     match ty.kind() {\n-        Integer => {\n-            unsafe {\n-                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as usize) + 7) / 8\n-            }\n-        }\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n         Pointer => 4,\n         Float => 4,\n         Double => 8,"}, {"sha": "6ede55d5ff49af1bccc8c917cb9812809ad476d9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -98,6 +98,7 @@ mod cabi_aarch64;\n mod cabi_arm;\n mod cabi_asmjs;\n mod cabi_mips;\n+mod cabi_mips64;\n mod cabi_powerpc;\n mod cabi_powerpc64;\n mod cabi_x86;"}, {"sha": "9fcc3a80b98b40a6f7350c2d6dec43d41d076dc9", "filename": "src/libstd/env.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -659,6 +659,7 @@ pub mod consts {\n     /// - arm\n     /// - aarch64\n     /// - mips\n+    /// - mips64\n     /// - powerpc\n     /// - powerpc64\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -926,6 +927,11 @@ mod arch {\n     pub const ARCH: &'static str = \"mips\";\n }\n \n+#[cfg(target_arch = \"mips64\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"mips64\";\n+}\n+\n #[cfg(target_arch = \"powerpc\")]\n mod arch {\n     pub const ARCH: &'static str = \"powerpc\";"}, {"sha": "0f62877500b2c0831bb1851da283233e82c4b5e7", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -155,6 +155,11 @@ mod arch {\n     }\n }\n \n+#[cfg(target_arch = \"mips64\")]\n+mod arch {\n+    pub use libc::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n+}\n+\n #[cfg(target_arch = \"aarch64\")]\n mod arch {\n     use os::raw::{c_long, c_int};"}, {"sha": "8292a68417810064b85b66ec32ded4bf89ac08d1", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689c6c48ecd3d89d120c6aecf8b69222920e4520/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=689c6c48ecd3d89d120c6aecf8b69222920e4520", "patch": "@@ -56,6 +56,9 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(target_arch = \"mips\")]\n pub const unwinder_private_data_size: usize = 2;\n \n+#[cfg(target_arch = \"mips64\")]\n+pub const unwinder_private_data_size: usize = 2;\n+\n #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\"))]\n pub const unwinder_private_data_size: usize = 2;\n "}]}