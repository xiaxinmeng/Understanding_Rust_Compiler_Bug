{"sha": "7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e", "node_id": "C_kwDOAAsO6NoAKDdlNGY0NjYwZWJiNDUzM2RlNjI5YjVkN2Q4YWMxMGVkNTcyZDBmMmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-24T17:14:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-24T17:14:26Z"}, "message": "Auto merge of #104977 - RalfJung:ptr-from-ref, r=dtolnay\n\nadd ptr::from_{ref,mut}\n\nWe have methods to avoid almost all `as` casts around raw pointer handling, except for the initial cast from reference to raw pointer. These new methods close that gap.\n\n(I also moved `null_mut` next to `null` to keep the file consistently organized.)\n\nr? libs-api\n\nTracking issue: https://github.com/rust-lang/rust/issues/106116", "tree": {"sha": "569d4852433db40daf93edd422fb69e65536874b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/569d4852433db40daf93edd422fb69e65536874b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e", "html_url": "https://github.com/rust-lang/rust/commit/7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "html_url": "https://github.com/rust-lang/rust/commit/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3"}, {"sha": "15f72dd29d083bfcade93ec2b57350c2b37feed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f72dd29d083bfcade93ec2b57350c2b37feed6", "html_url": "https://github.com/rust-lang/rust/commit/15f72dd29d083bfcade93ec2b57350c2b37feed6"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "5f30029eaa07d5c8d9be41bd6a6f221e13b0b43e", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=7e4f4660ebb4533de629b5d7d8ac10ed572d0f2e", "patch": "@@ -516,6 +516,27 @@ pub const fn null<T: ?Sized + Thin>() -> *const T {\n     from_raw_parts(invalid(0), ())\n }\n \n+/// Creates a null mutable raw pointer.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// let p: *mut i32 = ptr::null_mut();\n+/// assert!(p.is_null());\n+/// ```\n+#[inline(always)]\n+#[must_use]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_promotable]\n+#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n+#[rustc_allow_const_fn_unstable(ptr_metadata)]\n+#[rustc_diagnostic_item = \"ptr_null_mut\"]\n+pub const fn null_mut<T: ?Sized + Thin>() -> *mut T {\n+    from_raw_parts_mut(invalid_mut(0), ())\n+}\n+\n /// Creates an invalid pointer with the given address.\n ///\n /// This is different from `addr as *const T`, which creates a pointer that picks up a previously\n@@ -663,25 +684,26 @@ where\n     addr as *mut T\n }\n \n-/// Creates a null mutable raw pointer.\n+/// Convert a reference to a raw pointer.\n ///\n-/// # Examples\n-///\n-/// ```\n-/// use std::ptr;\n+/// This is equivalent to `r as *const T`, but is a bit safer since it will never silently change\n+/// type or mutability, in particular if the code is refactored.\n+#[inline(always)]\n+#[must_use]\n+#[unstable(feature = \"ptr_from_ref\", issue = \"106116\")]\n+pub fn from_ref<T: ?Sized>(r: &T) -> *const T {\n+    r\n+}\n+\n+/// Convert a mutable reference to a raw pointer.\n ///\n-/// let p: *mut i32 = ptr::null_mut();\n-/// assert!(p.is_null());\n-/// ```\n+/// This is equivalent to `r as *mut T`, but is a bit safer since it will never silently change\n+/// type or mutability, in particular if the code is refactored.\n #[inline(always)]\n #[must_use]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_promotable]\n-#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n-#[rustc_allow_const_fn_unstable(ptr_metadata)]\n-#[rustc_diagnostic_item = \"ptr_null_mut\"]\n-pub const fn null_mut<T: ?Sized + Thin>() -> *mut T {\n-    from_raw_parts_mut(invalid_mut(0), ())\n+#[unstable(feature = \"ptr_from_ref\", issue = \"106116\")]\n+pub fn from_mut<T: ?Sized>(r: &mut T) -> *mut T {\n+    r\n }\n \n /// Forms a raw slice from a pointer and a length."}]}