{"sha": "b250ae6c55c446f65f85914d98da2cd2c75871f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNTBhZTZjNTVjNDQ2ZjY1Zjg1OTE0ZDk4ZGEyY2QyYzc1ODcxZjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T13:01:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T13:01:18Z"}, "message": "Finalize TypeBound grammar", "tree": {"sha": "d264ec19b06a37e9565d42ed169bcd8d714d18b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d264ec19b06a37e9565d42ed169bcd8d714d18b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b250ae6c55c446f65f85914d98da2cd2c75871f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b250ae6c55c446f65f85914d98da2cd2c75871f7", "html_url": "https://github.com/rust-lang/rust/commit/b250ae6c55c446f65f85914d98da2cd2c75871f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b250ae6c55c446f65f85914d98da2cd2c75871f7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6527ed92cb7a1156b8a118f5790d8c5fd69ab41", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6527ed92cb7a1156b8a118f5790d8c5fd69ab41", "html_url": "https://github.com/rust-lang/rust/commit/a6527ed92cb7a1156b8a118f5790d8c5fd69ab41"}], "stats": {"total": 89, "additions": 35, "deletions": 54}, "files": [{"sha": "699ba9c923524f406596991c2d5e1b4b1f73b51d", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b250ae6c55c446f65f85914d98da2cd2c75871f7/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b250ae6c55c446f65f85914d98da2cd2c75871f7/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=b250ae6c55c446f65f85914d98da2cd2c75871f7", "patch": "@@ -270,7 +270,7 @@ impl GenericParams {\n         bound: ast::TypeBound,\n         type_ref: TypeRef,\n     ) {\n-        if bound.question_token().is_some() {\n+        if bound.question_mark_token().is_some() {\n             // FIXME: remove this bound\n             return;\n         }"}, {"sha": "9064398a908842b551542a1ea98c67ffafb091ac", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b250ae6c55c446f65f85914d98da2cd2c75871f7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b250ae6c55c446f65f85914d98da2cd2c75871f7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=b250ae6c55c446f65f85914d98da2cd2c75871f7", "patch": "@@ -639,6 +639,17 @@ impl DynTraitType {\n     pub fn type_bound_list(&self) -> Option<TypeBoundList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TypeBound {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl TypeBound {\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n+    pub fn question_mark_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![?]) }\n+    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TupleExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1168,17 +1179,6 @@ impl MacroStmts {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeBound {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl TypeBound {\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n-    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n-    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct WherePred {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -2045,6 +2045,17 @@ impl AstNode for DynTraitType {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for TypeBound {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for TupleExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2661,17 +2672,6 @@ impl AstNode for MacroStmts {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TypeBound {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for WherePred {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_PRED }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3746,6 +3746,11 @@ impl std::fmt::Display for DynTraitType {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for TypeBound {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for TupleExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4026,11 +4031,6 @@ impl std::fmt::Display for MacroStmts {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TypeBound {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for WherePred {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "69726fb93f13e872dbdd7f28d6f31f1222600e6e", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b250ae6c55c446f65f85914d98da2cd2c75871f7/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b250ae6c55c446f65f85914d98da2cd2c75871f7/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=b250ae6c55c446f65f85914d98da2cd2c75871f7", "patch": "@@ -362,26 +362,6 @@ impl ast::TypeBound {\n             unreachable!()\n         }\n     }\n-\n-    pub fn const_question_token(&self) -> Option<SyntaxToken> {\n-        self.syntax()\n-            .children_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .take_while(|it| it.kind() != T![const])\n-            .find(|it| it.kind() == T![?])\n-    }\n-\n-    pub fn question_token(&self) -> Option<SyntaxToken> {\n-        if self.const_token().is_some() {\n-            self.syntax()\n-                .children_with_tokens()\n-                .filter_map(|it| it.into_token())\n-                .skip_while(|it| it.kind() != T![const])\n-                .find(|it| it.kind() == T![?])\n-        } else {\n-            support::token(&self.syntax, T![?])\n-        }\n-    }\n }\n \n pub enum VisibilityKind {"}, {"sha": "32f2808ead3db77885d6f08d876a3da2cb106ee1", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b250ae6c55c446f65f85914d98da2cd2c75871f7/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/b250ae6c55c446f65f85914d98da2cd2c75871f7/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=b250ae6c55c446f65f85914d98da2cd2c75871f7", "patch": "@@ -242,6 +242,13 @@ ImplTraitType =\n DynTraitType =\n   'dyn' TypeBoundList\n \n+TypeBoundList =\n+   bounds:(TypeBound ('+' TypeBound)* '+'?)\n+\n+TypeBound =\n+  'lifetime'\n+| '?'? Type\n+\n TupleExpr =\n   Attr* '(' Expr* ')'\n \n@@ -443,12 +450,6 @@ MacroStmts =\n   statements:Stmt*\n   Expr?\n \n-TypeBound =\n-  'lifetime' | 'const'? Type\n-\n-TypeBoundList =\n-   bounds:TypeBound*\n-\n WherePred =\n   ('for' GenericParamList)?  ('lifetime' | Type) ':' TypeBoundList\n "}]}