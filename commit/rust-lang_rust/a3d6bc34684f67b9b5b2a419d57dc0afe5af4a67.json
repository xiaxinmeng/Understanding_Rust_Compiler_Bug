{"sha": "a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67", "node_id": "C_kwDOAAsO6NoAKGEzZDZiYzM0Njg0ZjY3YjliNWIyYTQxOWQ1N2RjMGFmZTVhZjRhNjc", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-07T16:33:05Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-12T00:15:32Z"}, "message": "Emit a single error for contiguous sequences of Unicode homoglyphs", "tree": {"sha": "a37ecaa904c0b21ddfa75c66d454191913630dde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a37ecaa904c0b21ddfa75c66d454191913630dde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67", "html_url": "https://github.com/rust-lang/rust/commit/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4046e4f3932991971cdb64915172899532aece", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4046e4f3932991971cdb64915172899532aece", "html_url": "https://github.com/rust-lang/rust/commit/ef4046e4f3932991971cdb64915172899532aece"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "8761c23625b210063b1cdfbddf08e7f712cfc395", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67", "patch": "@@ -79,7 +79,7 @@ impl<'a> StringReader<'a> {\n     /// preceded by whitespace.\n     fn next_token(&mut self) -> (Token, bool) {\n         let mut preceded_by_whitespace = false;\n-\n+        let mut swallow_next_invalid = 0;\n         // Skip trivial (whitespace & comments) tokens\n         loop {\n             let token = self.cursor.advance_token();\n@@ -232,19 +232,34 @@ impl<'a> StringReader<'a> {\n                 rustc_lexer::TokenKind::Percent => token::BinOp(token::Percent),\n \n                 rustc_lexer::TokenKind::Unknown | rustc_lexer::TokenKind::InvalidIdent => {\n-                    let c = self.str_from(start).chars().next().unwrap();\n+                    // Don't emit diagnostics for sequences of the same invalid token\n+                    if swallow_next_invalid > 0 {\n+                        swallow_next_invalid -= 1;\n+                        continue;\n+                    }\n+                    let mut it = self.str_from_to_end(start).chars();\n+                    let c = it.next().unwrap();\n+                    let repeats = it.take_while(|c1| *c1 == c).count();\n                     let mut err =\n-                        self.struct_err_span_char(start, self.pos, \"unknown start of token\", c);\n+                        self.struct_err_span_char(start, self.pos + Pos::from_usize(repeats * c.len_utf8()), \"unknown start of token\", c);\n                     // FIXME: the lexer could be used to turn the ASCII version of unicode\n                     // homoglyphs, instead of keeping a table in `check_for_substitution`into the\n                     // token. Ideally, this should be inside `rustc_lexer`. However, we should\n                     // first remove compound tokens like `<<` from `rustc_lexer`, and then add\n                     // fancier error recovery to it, as there will be less overall work to do this\n                     // way.\n-                    let token = unicode_chars::check_for_substitution(self, start, c, &mut err);\n+                    let token = unicode_chars::check_for_substitution(self, start, c, &mut err, repeats+1);\n                     if c == '\\x00' {\n                         err.help(\"source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used\");\n                     }\n+                    if repeats > 0 {\n+                        if repeats == 1 {\n+                            err.note(format!(\"character appears once more\"));\n+                        } else {\n+                            err.note(format!(\"character appears {repeats} more times\"));\n+                        }\n+                        swallow_next_invalid = repeats;\n+                    }\n                     err.emit();\n                     if let Some(token) = token {\n                         token\n@@ -486,6 +501,11 @@ impl<'a> StringReader<'a> {\n         &self.src[self.src_index(start)..self.src_index(end)]\n     }\n \n+    /// Slice of the source text spanning from `start` until the end\n+    fn str_from_to_end(&self, start: BytePos) -> &str {\n+        &self.src[self.src_index(start)..]\n+    }\n+\n     fn report_raw_str_error(&self, start: BytePos, prefix_len: u32) -> ! {\n         match rustc_lexer::validate_raw_str(self.str_from(start), prefix_len) {\n             Err(RawStrError::InvalidStarter { bad_char }) => {"}, {"sha": "65479b341d7a8f5c2687a97b3e4ecd768962ea34", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67", "patch": "@@ -337,10 +337,11 @@ pub(super) fn check_for_substitution<'a>(\n     pos: BytePos,\n     ch: char,\n     err: &mut Diagnostic,\n+    count: usize,\n ) -> Option<token::TokenKind> {\n     let &(_u_char, u_name, ascii_char) = UNICODE_ARRAY.iter().find(|&&(c, _, _)| c == ch)?;\n \n-    let span = Span::with_root_ctxt(pos, pos + Pos::from_usize(ch.len_utf8()));\n+    let span = Span::with_root_ctxt(pos, pos + Pos::from_usize(ch.len_utf8() * count));\n \n     let Some((_ascii_char, ascii_name, token)) = ASCII_ARRAY.iter().find(|&&(c, _, _)| c == ascii_char) else {\n         let msg = format!(\"substitution character not found for '{}'\", ch);\n@@ -369,7 +370,12 @@ pub(super) fn check_for_substitution<'a>(\n             \"Unicode character '{}' ({}) looks like '{}' ({}), but it is not\",\n             ch, u_name, ascii_char, ascii_name\n         );\n-        err.span_suggestion(span, &msg, ascii_char, Applicability::MaybeIncorrect);\n+        err.span_suggestion(\n+            span,\n+            &msg,\n+            ascii_char.to_string().repeat(count),\n+            Applicability::MaybeIncorrect,\n+        );\n     }\n     token.clone()\n }"}, {"sha": "6140a06c555f2c5641c68b9a40a911225b3a6be6", "filename": "tests/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67", "patch": "@@ -77,8 +77,6 @@ LL | ///     ```\n    |         ^^^\n    |\n    = note: error from rustc: unknown start of token: `\n-   = note: error from rustc: unknown start of token: `\n-   = note: error from rustc: unknown start of token: `\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:64:5"}, {"sha": "0e8b0a5da220569b607fe3512ae59ee94e3fcf1b", "filename": "tests/ui/parser/issues/issue-66473.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Fui%2Fparser%2Fissues%2Fissue-66473.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Fui%2Fparser%2Fissues%2Fissue-66473.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-66473.stderr?ref=a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67"}, {"sha": "43a903e6c4698e59840cdf18f73ed830c8b50c32", "filename": "tests/ui/parser/issues/issue-68629.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Fui%2Fparser%2Fissues%2Fissue-68629.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Fui%2Fparser%2Fissues%2Fissue-68629.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-68629.stderr?ref=a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67"}, {"sha": "5bca5bbebeacb44984c8679e4d2c4757be4ee742", "filename": "tests/ui/parser/issues/issue-68730.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Fui%2Fparser%2Fissues%2Fissue-68730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Fui%2Fparser%2Fissues%2Fissue-68730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-68730.stderr?ref=a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67"}, {"sha": "ba35e95c82a493f86da4b9bcaa89252879faca48", "filename": "tests/ui/parser/unicode-chars.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Fui%2Fparser%2Funicode-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Fui%2Fparser%2Funicode-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funicode-chars.rs?ref=a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67", "patch": "@@ -2,4 +2,8 @@ fn main() {\n     let y = 0\u037e\n     //~^ ERROR unknown start of token: \\u{37e}\n     //~^^ HELP Unicode character '\u037e' (Greek Question Mark) looks like ';' (Semicolon), but it is not\n+    \u00a0\u00a0\u00a0\u00a0let x = 0;\n+    //~^ ERROR unknown start of token: \\u{a0}\n+    //~^^ NOTE character appears 3 more times\n+    //~^^^ HELP Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n }"}, {"sha": "6a5b27872e73829de3012348d4f52cdd6daf1f2f", "filename": "tests/ui/parser/unicode-chars.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Fui%2Fparser%2Funicode-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67/tests%2Fui%2Fparser%2Funicode-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funicode-chars.stderr?ref=a3d6bc34684f67b9b5b2a419d57dc0afe5af4a67", "patch": "@@ -9,5 +9,17 @@ help: Unicode character '\u037e' (Greek Question Mark) looks like ';' (Semicolon), b\n LL |     let y = 0;\n    |              ~\n \n-error: aborting due to previous error\n+error: unknown start of token: \\u{a0}\n+  --> $DIR/unicode-chars.rs:5:5\n+   |\n+LL |     \u00a0\u00a0\u00a0\u00a0let x = 0;\n+   |     ^^^^\n+   |\n+   = note: character appears 3 more times\n+help: Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n+   |\n+LL |         let x = 0;\n+   |     ++++\n+\n+error: aborting due to 2 previous errors\n "}]}