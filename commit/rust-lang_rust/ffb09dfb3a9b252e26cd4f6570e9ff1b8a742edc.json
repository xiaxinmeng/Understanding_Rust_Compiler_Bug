{"sha": "ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYjA5ZGZiM2E5YjI1MmUyNmNkNGY2NTcwZTlmZjFiOGE3NDJlZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-08T08:37:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-08T08:37:56Z"}, "message": "Auto merge of #53053 - petrochenkov:custattr, r=alexcrichton\n\nresolve:  Support custom attributes when macro modularization is enabled\n\nBasically, if resolution of a single-segment attribute is a determined error, then we interpret it as a custom attribute.\n\nSince custom attributes are integrated into general macro resolution, `feature(custom_attribute)` now requires and implicitly enables macro modularization (`feature(use_extern_macros)`).\nActually, a few other \"advanced\" macro features now implicitly enable macro modularization too (and one bug was found and fixed in process of enabling it).\n\nThe first two commits are preliminary cleanups/refactorings.", "tree": {"sha": "493e66a5c73fd6e5d81f7afcee1186c0ed106655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/493e66a5c73fd6e5d81f7afcee1186c0ed106655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "html_url": "https://github.com/rust-lang/rust/commit/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c785bfc24e43c668c9022cc1e79edcd6dcfd7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c785bfc24e43c668c9022cc1e79edcd6dcfd7c", "html_url": "https://github.com/rust-lang/rust/commit/52c785bfc24e43c668c9022cc1e79edcd6dcfd7c"}, {"sha": "50886115d7a7eba43b025e608aa156ef0e8dd7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/50886115d7a7eba43b025e608aa156ef0e8dd7a8", "html_url": "https://github.com/rust-lang/rust/commit/50886115d7a7eba43b025e608aa156ef0e8dd7a8"}], "stats": {"total": 615, "additions": 295, "deletions": 320}, "files": [{"sha": "4a14223eb88f78b4b6b23f90e6c3e24270a471b2", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -28,6 +28,18 @@ pub enum CtorKind {\n     Fictive,\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum NonMacroAttrKind {\n+    /// Single-segment attribute defined by the language (`#[inline]`)\n+    Builtin,\n+    /// Multi-segment custom attribute living in a \"tool module\" (`#[rustfmt::skip]`).\n+    Tool,\n+    /// Single-segment custom attribute registered by a derive macro (`#[serde(default)]`).\n+    DeriveHelper,\n+    /// Single-segment custom attribute not registered in any way (`#[my_attr]`).\n+    Custom,\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Def {\n     // Type namespace\n@@ -68,7 +80,7 @@ pub enum Def {\n \n     // Macro namespace\n     Macro(DefId, MacroKind),\n-    NonMacroAttr, // e.g. `#[inline]` or `#[rustfmt::skip]`\n+    NonMacroAttr(NonMacroAttrKind), // e.g. `#[inline]` or `#[rustfmt::skip]`\n \n     // Both namespaces\n     Err,\n@@ -240,6 +252,17 @@ impl CtorKind {\n     }\n }\n \n+impl NonMacroAttrKind {\n+    fn descr(self) -> &'static str {\n+        match self {\n+            NonMacroAttrKind::Builtin => \"built-in attribute\",\n+            NonMacroAttrKind::Tool => \"tool attribute\",\n+            NonMacroAttrKind::DeriveHelper => \"derive helper attribute\",\n+            NonMacroAttrKind::Custom => \"custom attribute\",\n+        }\n+    }\n+}\n+\n impl Def {\n     pub fn def_id(&self) -> DefId {\n         match *self {\n@@ -259,7 +282,7 @@ impl Def {\n             Def::PrimTy(..) |\n             Def::SelfTy(..) |\n             Def::ToolMod |\n-            Def::NonMacroAttr |\n+            Def::NonMacroAttr(..) |\n             Def::Err => {\n                 bug!(\"attempted .def_id() on invalid def: {:?}\", self)\n             }\n@@ -300,7 +323,7 @@ impl Def {\n             Def::SelfTy(..) => \"self type\",\n             Def::Macro(.., macro_kind) => macro_kind.descr(),\n             Def::ToolMod => \"tool module\",\n-            Def::NonMacroAttr => \"non-macro attribute\",\n+            Def::NonMacroAttr(attr_kind) => attr_kind.descr(),\n             Def::Err => \"unresolved item\",\n         }\n     }"}, {"sha": "76e57558bfe072be3dac8cdf594a9b81fd33d00e", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -990,6 +990,13 @@ impl_stable_hash_for!(enum hir::def::CtorKind {\n     Fictive\n });\n \n+impl_stable_hash_for!(enum hir::def::NonMacroAttrKind {\n+    Builtin,\n+    Tool,\n+    DeriveHelper,\n+    Custom,\n+});\n+\n impl_stable_hash_for!(enum hir::def::Def {\n     Mod(def_id),\n     Struct(def_id),\n@@ -1018,7 +1025,7 @@ impl_stable_hash_for!(enum hir::def::Def {\n     Label(node_id),\n     Macro(def_id, macro_kind),\n     ToolMod,\n-    NonMacroAttr,\n+    NonMacroAttr(attr_kind),\n     Err\n });\n "}, {"sha": "0be1bf3011e78dcc21801915fce229c0b22fc322", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -630,8 +630,10 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n     pub fn get_macro(&mut self, def: Def) -> Lrc<SyntaxExtension> {\n         let def_id = match def {\n             Def::Macro(def_id, ..) => def_id,\n-            Def::NonMacroAttr => return Lrc::new(SyntaxExtension::NonMacroAttr),\n-            _ => panic!(\"Expected Def::Macro(..) or Def::NonMacroAttr\"),\n+            Def::NonMacroAttr(attr_kind) => return Lrc::new(SyntaxExtension::NonMacroAttr {\n+                mark_used: attr_kind == NonMacroAttrKind::Tool,\n+            }),\n+            _ => panic!(\"expected `Def::Macro` or `Def::NonMacroAttr`\"),\n         };\n         if let Some(ext) = self.macro_map.get(&def_id) {\n             return ext.clone();"}, {"sha": "d96967725f45ef82fee21afc34f04a5c40ff7bb7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -3485,8 +3485,9 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             let binding = if let Some(module) = module {\n                 self.resolve_ident_in_module(module, ident, ns, record_used, path_span)\n             } else if opt_ns == Some(MacroNS) {\n-                self.resolve_lexical_macro_path_segment(ident, ns, record_used, path_span)\n-                    .map(MacroBinding::binding)\n+                assert!(ns == TypeNS);\n+                self.resolve_lexical_macro_path_segment(ident, ns, record_used, record_used,\n+                                                        false, path_span).map(MacroBinding::binding)\n             } else {\n                 let record_used_id =\n                     if record_used { crate_lint.node_id().or(Some(CRATE_NODE_ID)) } else { None };\n@@ -3514,7 +3515,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     if let Some(next_module) = binding.module() {\n                         module = Some(next_module);\n                     } else if def == Def::ToolMod && i + 1 != path.len() {\n-                        return PathResult::NonModule(PathResolution::new(Def::NonMacroAttr))\n+                        let def = Def::NonMacroAttr(NonMacroAttrKind::Tool);\n+                        return PathResult::NonModule(PathResolution::new(def));\n                     } else if def == Def::Err {\n                         return PathResult::NonModule(err_path_resolution());\n                     } else if opt_ns.is_some() && (is_last || maybe_assoc) {\n@@ -4548,6 +4550,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             let result = self.resolve_lexical_macro_path_segment(ident,\n                                                                  MacroNS,\n                                                                  false,\n+                                                                 false,\n+                                                                 true,\n                                                                  attr.path.span);\n             if let Ok(binding) = result {\n                 if let SyntaxExtension::AttrProcMacro(..) = *binding.binding().get_macro(self) {"}, {"sha": "d680b2d9f7d745112bdaede946922cf5f4ae3aec", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 93, "deletions": 75, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -15,18 +15,17 @@ use build_reduced_graph::{BuildReducedGraphVisitor, IsMacroExport};\n use resolve_imports::ImportResolver;\n use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex,\n                          DefIndexAddressSpace};\n-use rustc::hir::def::{Def, Export};\n+use rustc::hir::def::{Def, Export, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint};\n use rustc::middle::cstore::CrateStore;\n use syntax::ast::{self, Name, Ident};\n-use syntax::attr::{self, HasAttrs};\n+use syntax::attr;\n use syntax::errors::DiagnosticBuilder;\n-use syntax::ext::base::{self, Annotatable, Determinacy, MultiModifier, MultiDecorator};\n+use syntax::ext::base::{self, Determinacy, MultiModifier, MultiDecorator};\n use syntax::ext::base::{MacroKind, SyntaxExtension, Resolver as SyntaxResolver};\n-use syntax::ext::expand::{self, AstFragment, AstFragmentKind, Invocation, InvocationKind};\n+use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n use syntax::ext::hygiene::{self, Mark};\n-use syntax::ext::placeholders::placeholder;\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{self, feature_err, emit_feature_err, is_builtin_attr_name, GateIssue};\n use syntax::fold::{self, Folder};\n@@ -320,7 +319,7 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         None\n     }\n \n-    fn resolve_invoc(&mut self, invoc: &mut Invocation, scope: Mark, force: bool)\n+    fn resolve_invoc(&mut self, invoc: &Invocation, scope: Mark, force: bool)\n                      -> Result<Option<Lrc<SyntaxExtension>>, Determinacy> {\n         let def = match invoc.kind {\n             InvocationKind::Attr { attr: None, .. } => return Ok(None),\n@@ -329,17 +328,37 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         if let Def::Macro(_, MacroKind::ProcMacroStub) = def {\n             self.report_proc_macro_stub(invoc.span());\n             return Err(Determinacy::Determined);\n-        } else if let Def::NonMacroAttr = def {\n-            if let InvocationKind::Attr { .. } = invoc.kind {\n-                if !self.session.features_untracked().tool_attributes {\n-                    feature_err(&self.session.parse_sess, \"tool_attributes\",\n-                                invoc.span(), GateIssue::Language,\n-                                \"tool attributes are unstable\").emit();\n+        } else if let Def::NonMacroAttr(attr_kind) = def {\n+            // Note that not only attributes, but anything in macro namespace can result in a\n+            // `Def::NonMacroAttr` definition (e.g. `inline!()`), so we must report the error\n+            // below for these cases.\n+            let is_attr_invoc =\n+                if let InvocationKind::Attr { .. } = invoc.kind { true } else { false };\n+            let path = invoc.path().expect(\"no path for non-macro attr\");\n+            match attr_kind {\n+                NonMacroAttrKind::Tool | NonMacroAttrKind::DeriveHelper |\n+                NonMacroAttrKind::Custom if is_attr_invoc => {\n+                    if attr_kind == NonMacroAttrKind::Tool &&\n+                       !self.session.features_untracked().tool_attributes {\n+                        feature_err(&self.session.parse_sess, \"tool_attributes\",\n+                                    invoc.span(), GateIssue::Language,\n+                                    \"tool attributes are unstable\").emit();\n+                    }\n+                    if attr_kind == NonMacroAttrKind::Custom &&\n+                       !self.session.features_untracked().custom_attribute {\n+                        let msg = format!(\"The attribute `{}` is currently unknown to the compiler \\\n+                                           and may have meaning added to it in the future\", path);\n+                        feature_err(&self.session.parse_sess, \"custom_attribute\", invoc.span(),\n+                                    GateIssue::Language, &msg).emit();\n+                    }\n+                    return Ok(Some(Lrc::new(SyntaxExtension::NonMacroAttr {\n+                        mark_used: attr_kind == NonMacroAttrKind::Tool,\n+                    })));\n+                }\n+                _ => {\n+                    self.report_non_macro_attr(path.span, def);\n+                    return Err(Determinacy::Determined);\n                 }\n-                return Ok(Some(Lrc::new(SyntaxExtension::NonMacroAttr)));\n-            } else {\n-                self.report_non_macro_attr(invoc.path_span());\n-                return Err(Determinacy::Determined);\n             }\n         }\n         let def_id = def.def_id();\n@@ -363,8 +382,8 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n             if let Def::Macro(_, MacroKind::ProcMacroStub) = def {\n                 self.report_proc_macro_stub(path.span);\n                 return Err(Determinacy::Determined);\n-            } else if let Def::NonMacroAttr = def {\n-                self.report_non_macro_attr(path.span);\n+            } else if let Def::NonMacroAttr(..) = def {\n+                self.report_non_macro_attr(path.span, def);\n                 return Err(Determinacy::Determined);\n             }\n             self.unused_macros.remove(&def.def_id());\n@@ -396,15 +415,14 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                               \"can't use a procedural macro from the same crate that defines it\");\n     }\n \n-    fn report_non_macro_attr(&self, span: Span) {\n-        self.session.span_err(span,\n-                              \"expected a macro, found non-macro attribute\");\n+    fn report_non_macro_attr(&self, span: Span, def: Def) {\n+        self.session.span_err(span, &format!(\"expected a macro, found {}\", def.kind_name()));\n     }\n \n-    fn resolve_invoc_to_def(&mut self, invoc: &mut Invocation, scope: Mark, force: bool)\n+    fn resolve_invoc_to_def(&mut self, invoc: &Invocation, scope: Mark, force: bool)\n                             -> Result<Def, Determinacy> {\n-        let (attr, traits, item) = match invoc.kind {\n-            InvocationKind::Attr { ref mut attr, ref traits, ref mut item } => (attr, traits, item),\n+        let (attr, traits) = match invoc.kind {\n+            InvocationKind::Attr { ref attr, ref traits, .. } => (attr, traits),\n             InvocationKind::Bang { ref mac, .. } => {\n                 return self.resolve_macro_to_def(scope, &mac.node.path, MacroKind::Bang, force);\n             }\n@@ -413,62 +431,43 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             }\n         };\n \n-\n         let path = attr.as_ref().unwrap().path.clone();\n-        let mut determinacy = Determinacy::Determined;\n-        match self.resolve_macro_to_def(scope, &path, MacroKind::Attr, force) {\n-            Ok(def) => return Ok(def),\n-            Err(Determinacy::Undetermined) => determinacy = Determinacy::Undetermined,\n-            Err(Determinacy::Determined) if force => return Err(Determinacy::Determined),\n-            Err(Determinacy::Determined) => {}\n+        let def = self.resolve_macro_to_def(scope, &path, MacroKind::Attr, force);\n+        if let Ok(Def::NonMacroAttr(NonMacroAttrKind::Custom)) = def {} else {\n+            return def;\n         }\n \n-        // Ok at this point we've determined that the `attr` above doesn't\n-        // actually resolve at this time, so we may want to report an error.\n-        // It could be the case, though, that `attr` won't ever resolve! If\n-        // there's a custom derive that could be used it might declare `attr` as\n-        // a custom attribute accepted by the derive. In this case we don't want\n-        // to report this particular invocation as unresolved, but rather we'd\n-        // want to move on to the next invocation.\n+        // At this point we've found that the `attr` is determinately unresolved and thus can be\n+        // interpreted as a custom attribute. Normally custom attributes are feature gated, but\n+        // it may be a custom attribute whitelisted by a derive macro and they do not require\n+        // a feature gate.\n         //\n-        // This loop here looks through all of the derive annotations in scope\n-        // and tries to resolve them. If they themselves successfully resolve\n-        // *and* the resolve mentions that this attribute's name is a registered\n-        // custom attribute then we flag this attribute as known and update\n-        // `invoc` above to point to the next invocation.\n-        //\n-        // By then returning `Undetermined` we should continue resolution to\n-        // resolve the next attribute.\n-        let attr_name = match path.segments.len() {\n-            1 => path.segments[0].ident.name,\n-            _ => return Err(determinacy),\n-        };\n+        // So here we look through all of the derive annotations in scope and try to resolve them.\n+        // If they themselves successfully resolve *and* one of the resolved derive macros\n+        // whitelists this attribute's name, then this is a registered attribute and we can convert\n+        // it from a \"generic custom attrite\" into a \"known derive helper attribute\".\n+        enum ConvertToDeriveHelper { Yes, No, DontKnow }\n+        let mut convert_to_derive_helper = ConvertToDeriveHelper::No;\n+        let attr_name = path.segments[0].ident.name;\n         for path in traits {\n             match self.resolve_macro(scope, path, MacroKind::Derive, force) {\n                 Ok(ext) => if let SyntaxExtension::ProcMacroDerive(_, ref inert_attrs, _) = *ext {\n                     if inert_attrs.contains(&attr_name) {\n-                        // FIXME(jseyfried) Avoid `mem::replace` here.\n-                        let dummy_item = placeholder(AstFragmentKind::Items, ast::DUMMY_NODE_ID)\n-                            .make_items().pop().unwrap();\n-                        let dummy_item = Annotatable::Item(dummy_item);\n-                        *item = mem::replace(item, dummy_item).map_attrs(|mut attrs| {\n-                            let inert_attr = attr.take().unwrap();\n-                            attr::mark_known(&inert_attr);\n-                            if self.use_extern_macros {\n-                                *attr = expand::find_attr_invoc(&mut attrs);\n-                            }\n-                            attrs.push(inert_attr);\n-                            attrs\n-                        });\n-                        return Err(Determinacy::Undetermined)\n+                        convert_to_derive_helper = ConvertToDeriveHelper::Yes;\n+                        break\n                     }\n                 },\n-                Err(Determinacy::Undetermined) => determinacy = Determinacy::Undetermined,\n+                Err(Determinacy::Undetermined) =>\n+                    convert_to_derive_helper = ConvertToDeriveHelper::DontKnow,\n                 Err(Determinacy::Determined) => {}\n             }\n         }\n \n-        Err(determinacy)\n+        match convert_to_derive_helper {\n+            ConvertToDeriveHelper::Yes => Ok(Def::NonMacroAttr(NonMacroAttrKind::DeriveHelper)),\n+            ConvertToDeriveHelper::No => def,\n+            ConvertToDeriveHelper::DontKnow => Err(Determinacy::determined(force)),\n+        }\n     }\n \n     fn resolve_macro_to_def(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n@@ -481,7 +480,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                                       \"generic arguments in macro path\");\n             });\n         }\n-        if kind != MacroKind::Bang && path.segments.len() > 1 && def != Ok(Def::NonMacroAttr) {\n+        if kind != MacroKind::Bang && path.segments.len() > 1 &&\n+           def != Ok(Def::NonMacroAttr(NonMacroAttrKind::Tool)) {\n             if !self.session.features_untracked().proc_macro_path_invoc {\n                 emit_feature_err(\n                     &self.session.parse_sess,\n@@ -550,10 +550,11 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         let result = if let Some(MacroBinding::Legacy(binding)) = legacy_resolution {\n             Ok(Def::Macro(binding.def_id, MacroKind::Bang))\n         } else {\n-            match self.resolve_lexical_macro_path_segment(path[0], MacroNS, false, span) {\n+            match self.resolve_lexical_macro_path_segment(path[0], MacroNS, false, force,\n+                                                          kind == MacroKind::Attr, span) {\n                 Ok(binding) => Ok(binding.binding().def_ignoring_ambiguity()),\n-                Err(Determinacy::Undetermined) if !force => return Err(Determinacy::Undetermined),\n-                Err(_) => {\n+                Err(Determinacy::Undetermined) => return Err(Determinacy::Undetermined),\n+                Err(Determinacy::Determined) => {\n                     self.found_unresolved_macro = true;\n                     Err(Determinacy::Determined)\n                 }\n@@ -574,6 +575,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                                               mut ident: Ident,\n                                               ns: Namespace,\n                                               record_used: bool,\n+                                              force: bool,\n+                                              is_attr: bool,\n                                               path_span: Span)\n                                               -> Result<MacroBinding<'a>, Determinacy> {\n         // General principles:\n@@ -604,6 +607,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         // 3. Builtin attributes (closed, controlled).\n \n         assert!(ns == TypeNS  || ns == MacroNS);\n+        assert!(force || !record_used); // `record_used` implies `force`\n         ident = ident.modern();\n \n         // Names from inner scope that can't shadow names from outer scopes, e.g.\n@@ -647,8 +651,9 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 }\n                 WhereToResolve::BuiltinAttrs => {\n                     if is_builtin_attr_name(ident.name) {\n-                        let binding = (Def::NonMacroAttr, ty::Visibility::Public,\n-                                       ident.span, Mark::root()).to_name_binding(self.arenas);\n+                        let binding = (Def::NonMacroAttr(NonMacroAttrKind::Builtin),\n+                                       ty::Visibility::Public, ident.span, Mark::root())\n+                                       .to_name_binding(self.arenas);\n                         Ok(MacroBinding::Global(binding))\n                     } else {\n                         Err(Determinacy::Determined)\n@@ -776,7 +781,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 Err(Determinacy::Determined) => {\n                     continue_search!();\n                 }\n-                Err(Determinacy::Undetermined) => return Err(Determinacy::Undetermined),\n+                Err(Determinacy::Undetermined) => return Err(Determinacy::determined(force)),\n             }\n         }\n \n@@ -785,7 +790,19 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             return Ok(previous_result);\n         }\n \n-        if record_used { Err(Determinacy::Determined) } else { Err(Determinacy::Undetermined) }\n+        let determinacy = Determinacy::determined(force);\n+        if determinacy == Determinacy::Determined && is_attr {\n+            // For single-segment attributes interpret determinate \"no resolution\" as a custom\n+            // attribute. (Lexical resolution implies the first segment and is_attr should imply\n+            // the last segment, so we are certainly working with a single-segment attribute here.)\n+            assert!(ns == MacroNS);\n+            let binding = (Def::NonMacroAttr(NonMacroAttrKind::Custom),\n+                           ty::Visibility::Public, ident.span, Mark::root())\n+                           .to_name_binding(self.arenas);\n+            Ok(MacroBinding::Global(binding))\n+        } else {\n+            Err(determinacy)\n+        }\n     }\n \n     pub fn resolve_legacy_scope(&mut self,\n@@ -869,7 +886,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             let span = ident.span;\n             let legacy_scope = &self.invocations[&mark].legacy_scope;\n             let legacy_resolution = self.resolve_legacy_scope(legacy_scope, ident, true);\n-            let resolution = self.resolve_lexical_macro_path_segment(ident, MacroNS, true, span);\n+            let resolution = self.resolve_lexical_macro_path_segment(ident, MacroNS, true, true,\n+                                                                     kind == MacroKind::Attr, span);\n \n             let check_consistency = |this: &Self, binding: MacroBinding| {\n                 if let Some(def) = def {"}, {"sha": "703489f56c1fdd5cc557281fe6320b60f437f679", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -811,7 +811,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             HirDef::Label(..) |\n             HirDef::Macro(..) |\n             HirDef::ToolMod |\n-            HirDef::NonMacroAttr |\n+            HirDef::NonMacroAttr(..) |\n             HirDef::Err => None,\n         }\n     }"}, {"sha": "de391ee4219a470b0a427abdf8aec917e4d435d7", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -589,7 +589,7 @@ impl MacroKind {\n /// An enum representing the different kinds of syntax extensions.\n pub enum SyntaxExtension {\n     /// A trivial \"extension\" that does nothing, only keeps the attribute and marks it as known.\n-    NonMacroAttr,\n+    NonMacroAttr { mark_used: bool },\n \n     /// A syntax extension that is attached to an item and creates new items\n     /// based upon it.\n@@ -670,7 +670,7 @@ impl SyntaxExtension {\n             SyntaxExtension::IdentTT(..) |\n             SyntaxExtension::ProcMacro { .. } =>\n                 MacroKind::Bang,\n-            SyntaxExtension::NonMacroAttr |\n+            SyntaxExtension::NonMacroAttr { .. } |\n             SyntaxExtension::MultiDecorator(..) |\n             SyntaxExtension::MultiModifier(..) |\n             SyntaxExtension::AttrProcMacro(..) =>\n@@ -700,7 +700,7 @@ impl SyntaxExtension {\n             SyntaxExtension::AttrProcMacro(.., edition) |\n             SyntaxExtension::ProcMacroDerive(.., edition) => edition,\n             // Unstable legacy stuff\n-            SyntaxExtension::NonMacroAttr |\n+            SyntaxExtension::NonMacroAttr { .. } |\n             SyntaxExtension::IdentTT(..) |\n             SyntaxExtension::MultiDecorator(..) |\n             SyntaxExtension::MultiModifier(..) |\n@@ -726,7 +726,7 @@ pub trait Resolver {\n     fn find_legacy_attr_invoc(&mut self, attrs: &mut Vec<Attribute>, allow_derive: bool)\n                               -> Option<Attribute>;\n \n-    fn resolve_invoc(&mut self, invoc: &mut Invocation, scope: Mark, force: bool)\n+    fn resolve_invoc(&mut self, invoc: &Invocation, scope: Mark, force: bool)\n                      -> Result<Option<Lrc<SyntaxExtension>>, Determinacy>;\n     fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n                      -> Result<Lrc<SyntaxExtension>, Determinacy>;\n@@ -739,6 +739,12 @@ pub enum Determinacy {\n     Undetermined,\n }\n \n+impl Determinacy {\n+    pub fn determined(determined: bool) -> Determinacy {\n+        if determined { Determinacy::Determined } else { Determinacy::Undetermined }\n+    }\n+}\n+\n pub struct DummyResolver;\n \n impl Resolver for DummyResolver {\n@@ -754,7 +760,7 @@ impl Resolver for DummyResolver {\n     fn resolve_imports(&mut self) {}\n     fn find_legacy_attr_invoc(&mut self, _attrs: &mut Vec<Attribute>, _allow_derive: bool)\n                               -> Option<Attribute> { None }\n-    fn resolve_invoc(&mut self, _invoc: &mut Invocation, _scope: Mark, _force: bool)\n+    fn resolve_invoc(&mut self, _invoc: &Invocation, _scope: Mark, _force: bool)\n                      -> Result<Option<Lrc<SyntaxExtension>>, Determinacy> {\n         Err(Determinacy::Determined)\n     }"}, {"sha": "12941a85669876c456c6595f774a9a502615ad14", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 24, "deletions": 47, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -244,19 +244,12 @@ impl Invocation {\n         }\n     }\n \n-    pub fn path_span(&self) -> Span {\n+    pub fn path(&self) -> Option<&Path> {\n         match self.kind {\n-            InvocationKind::Bang { ref mac, .. } => mac.node.path.span,\n-            InvocationKind::Attr { attr: Some(ref attr), .. } => attr.path.span,\n-            InvocationKind::Attr { attr: None, .. } => DUMMY_SP,\n-            InvocationKind::Derive { ref path, .. } => path.span,\n-        }\n-    }\n-\n-    pub fn attr_id(&self) -> Option<ast::AttrId> {\n-        match self.kind {\n-            InvocationKind::Attr { attr: Some(ref attr), .. } => Some(attr.id),\n-            _ => None,\n+            InvocationKind::Bang { ref mac, .. } => Some(&mac.node.path),\n+            InvocationKind::Attr { attr: Some(ref attr), .. } => Some(&attr.path),\n+            InvocationKind::Attr { attr: None, .. } => None,\n+            InvocationKind::Derive { ref path, .. } => Some(path),\n         }\n     }\n }\n@@ -338,7 +331,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let mut undetermined_invocations = Vec::new();\n         let (mut progress, mut force) = (false, !self.monotonic);\n         loop {\n-            let mut invoc = if let Some(invoc) = invocations.pop() {\n+            let invoc = if let Some(invoc) = invocations.pop() {\n                 invoc\n             } else {\n                 self.resolve_imports();\n@@ -350,20 +343,10 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n             let scope =\n                 if self.monotonic { invoc.expansion_data.mark } else { orig_expansion_data.mark };\n-            let attr_id_before = invoc.attr_id();\n-            let ext = match self.cx.resolver.resolve_invoc(&mut invoc, scope, force) {\n+            let ext = match self.cx.resolver.resolve_invoc(&invoc, scope, force) {\n                 Ok(ext) => Some(ext),\n                 Err(Determinacy::Determined) => None,\n                 Err(Determinacy::Undetermined) => {\n-                    // Sometimes attributes which we thought were invocations\n-                    // end up being custom attributes for custom derives. If\n-                    // that's the case our `invoc` will have changed out from\n-                    // under us. If this is the case we're making progress so we\n-                    // want to flag it as such, and we test this by looking if\n-                    // the `attr_id()` method has been changing over time.\n-                    if invoc.attr_id() != attr_id_before {\n-                        progress = true;\n-                    }\n                     undetermined_invocations.push(invoc);\n                     continue\n                 }\n@@ -533,6 +516,15 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     }\n \n     fn expand_invoc(&mut self, invoc: Invocation, ext: &SyntaxExtension) -> Option<AstFragment> {\n+        if invoc.fragment_kind == AstFragmentKind::ForeignItems &&\n+           !self.cx.ecfg.macros_in_extern_enabled() {\n+            if let SyntaxExtension::NonMacroAttr { .. } = *ext {} else {\n+                emit_feature_err(&self.cx.parse_sess, \"macros_in_extern\",\n+                                 invoc.span(), GateIssue::Language,\n+                                 \"macro invocations in `extern {}` blocks are experimental\");\n+            }\n+        }\n+\n         let result = match invoc.kind {\n             InvocationKind::Bang { .. } => self.expand_bang_invoc(invoc, ext)?,\n             InvocationKind::Attr { .. } => self.expand_attr_invoc(invoc, ext)?,\n@@ -565,7 +557,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             _ => unreachable!(),\n         };\n \n-        attr::mark_used(&attr);\n+        if let NonMacroAttr { mark_used: false } = *ext {} else {\n+            // Macro attrs are always used when expanded,\n+            // non-macro attrs are considered used when the field says so.\n+            attr::mark_used(&attr);\n+        }\n         invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n             call_site: attr.span,\n             def_site: None,\n@@ -577,7 +573,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         });\n \n         match *ext {\n-            NonMacroAttr => {\n+            NonMacroAttr { .. } => {\n                 attr::mark_known(&attr);\n                 let item = item.map_attrs(|mut attrs| { attrs.push(attr); attrs });\n                 Some(invoc.fragment_kind.expect_from_annotatables(iter::once(item)))\n@@ -827,7 +823,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             }\n \n             MultiDecorator(..) | MultiModifier(..) |\n-            AttrProcMacro(..) | SyntaxExtension::NonMacroAttr => {\n+            AttrProcMacro(..) | SyntaxExtension::NonMacroAttr { .. } => {\n                 self.cx.span_err(path.span,\n                                  &format!(\"`{}` can only be used in attributes\", path));\n                 self.cx.trace_macros_diag();\n@@ -1497,33 +1493,14 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                          foreign_item: ast::ForeignItem) -> SmallVector<ast::ForeignItem> {\n         let (attr, traits, foreign_item) = self.classify_item(foreign_item);\n \n-        let explain = if self.cx.ecfg.use_extern_macros_enabled() {\n-            feature_gate::EXPLAIN_PROC_MACROS_IN_EXTERN\n-        } else {\n-            feature_gate::EXPLAIN_MACROS_IN_EXTERN\n-        };\n-\n-        if attr.is_some() || !traits.is_empty()  {\n-            if !self.cx.ecfg.macros_in_extern_enabled() {\n-                if let Some(ref attr) = attr {\n-                    emit_feature_err(&self.cx.parse_sess, \"macros_in_extern\", attr.span,\n-                                     GateIssue::Language, explain);\n-                }\n-            }\n-\n+        if attr.is_some() || !traits.is_empty() {\n             let item = Annotatable::ForeignItem(P(foreign_item));\n             return self.collect_attr(attr, traits, item, AstFragmentKind::ForeignItems)\n                 .make_foreign_items();\n         }\n \n         if let ast::ForeignItemKind::Macro(mac) = foreign_item.node {\n             self.check_attributes(&foreign_item.attrs);\n-\n-            if !self.cx.ecfg.macros_in_extern_enabled() {\n-                emit_feature_err(&self.cx.parse_sess, \"macros_in_extern\", foreign_item.span,\n-                                 GateIssue::Language, explain);\n-            }\n-\n             return self.collect_bang(mac, foreign_item.span, AstFragmentKind::ForeignItems)\n                 .make_foreign_items();\n         }"}, {"sha": "65eeaff3f10783ec49bea70fb68f3866728063c0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 51, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -32,7 +32,7 @@ use attr;\n use codemap::Spanned;\n use edition::{ALL_EDITIONS, Edition};\n use syntax_pos::{Span, DUMMY_SP};\n-use errors::{DiagnosticBuilder, Handler, FatalError};\n+use errors::{DiagnosticBuilder, Handler};\n use visit::{self, FnKind, Visitor};\n use parse::ParseSess;\n use symbol::{keywords, Symbol};\n@@ -83,8 +83,14 @@ macro_rules! declare_features {\n             }\n \n             pub fn use_extern_macros(&self) -> bool {\n-                // The `decl_macro` and `tool_attributes` features imply `use_extern_macros`.\n-                self.use_extern_macros || self.decl_macro || self.tool_attributes\n+                // A number of \"advanced\" macro features enable\n+                // macro modularization (`use_extern_macros`) implicitly.\n+                self.use_extern_macros || self.decl_macro ||\n+                self.tool_attributes || self.custom_attribute ||\n+                self.macros_in_extern || self.proc_macro_path_invoc ||\n+                self.proc_macro_mod || self.proc_macro_expr ||\n+                self.proc_macro_non_items || self.proc_macro_gen ||\n+                self.stmt_expr_attributes\n             }\n         }\n     };\n@@ -714,7 +720,7 @@ pub fn is_builtin_attr_name(name: ast::Name) -> bool {\n }\n \n pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n-    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.check_name(builtin_name)) ||\n+    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.path == builtin_name) ||\n     attr.name().as_str().starts_with(\"rustc_\")\n }\n \n@@ -1364,13 +1370,6 @@ pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &'static str =\n pub const EXPLAIN_MACRO_AT_MOST_ONCE_REP: &'static str =\n     \"using the `?` macro Kleene operator for \\\"at most one\\\" repetition is unstable\";\n \n-pub const EXPLAIN_MACROS_IN_EXTERN: &'static str =\n-    \"macro invocations in `extern {}` blocks are experimental.\";\n-\n-// mention proc-macros when enabled\n-pub const EXPLAIN_PROC_MACROS_IN_EXTERN: &'static str =\n-    \"macro and proc-macro invocations in `extern {}` blocks are experimental.\";\n-\n struct PostExpansionVisitor<'a> {\n     context: &'a Context<'a>,\n }\n@@ -1914,9 +1913,6 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     }\n \n     let mut features = Features::new();\n-\n-    let mut feature_checker = FeatureChecker::default();\n-\n     let mut edition_enabled_features = FxHashMap();\n \n     for &(name, .., f_edition, set) in ACTIVE_FEATURES.iter() {\n@@ -1982,7 +1978,6 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                     ).emit();\n                 } else {\n                     set(&mut features, mi.span);\n-                    feature_checker.collect(&features, mi.span);\n                     features.declared_lang_features.push((name, mi.span, None));\n                 }\n                 continue\n@@ -2005,45 +2000,9 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n         }\n     }\n \n-    feature_checker.check(span_handler);\n-\n     features\n }\n \n-/// A collector for mutually exclusive and interdependent features and their flag spans.\n-#[derive(Default)]\n-struct FeatureChecker {\n-    use_extern_macros: Option<Span>,\n-    custom_attribute: Option<Span>,\n-}\n-\n-impl FeatureChecker {\n-    // If this method turns out to be a hotspot due to branching,\n-    // the branching can be eliminated by modifying `set!()` to set these spans\n-    // only for the features that need to be checked for mutual exclusion.\n-    fn collect(&mut self, features: &Features, span: Span) {\n-        if features.use_extern_macros() {\n-            // If self.use_extern_macros is None, set to Some(span)\n-            self.use_extern_macros = self.use_extern_macros.or(Some(span));\n-        }\n-\n-        if features.custom_attribute {\n-            self.custom_attribute = self.custom_attribute.or(Some(span));\n-        }\n-    }\n-\n-    fn check(self, handler: &Handler) {\n-        if let (Some(pm_span), Some(ca_span)) = (self.use_extern_macros, self.custom_attribute) {\n-            handler.struct_span_err(pm_span, \"Cannot use `#![feature(use_extern_macros)]` and \\\n-                                              `#![feature(custom_attribute)] at the same time\")\n-                .span_note(ca_span, \"`#![feature(custom_attribute)]` declared here\")\n-                .emit();\n-\n-            FatalError.raise();\n-        }\n-    }\n-}\n-\n pub fn check_crate(krate: &ast::Crate,\n                    sess: &ParseSess,\n                    features: &Features,"}, {"sha": "91b72510e3e540fb63738ee2b8e9c3325d0ecf98", "filename": "src/test/compile-fail-fulldeps/proc-macro/attr-invalid-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -13,7 +13,7 @@\n \n //! Attributes producing expressions in invalid locations\n \n-#![feature(use_extern_macros, stmt_expr_attributes, proc_macro_expr)]\n+#![feature(stmt_expr_attributes, proc_macro_expr)]\n \n extern crate attr_stmt_expr;\n use attr_stmt_expr::{duplicate, no_output};"}, {"sha": "52b2a473ecd75c277d18b5ce64c790e55056894f", "filename": "src/test/compile-fail-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // aux-build:attr-stmt-expr.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, proc_macro_expr)]\n+#![feature(proc_macro_expr)]\n \n extern crate attr_stmt_expr;\n use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};"}, {"sha": "f71d4b86f1e0147f40878fce5c509e519abdf654", "filename": "src/test/compile-fail-fulldeps/proc-macro/issue-41211.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -15,7 +15,7 @@\n \n #![feature(use_extern_macros)]\n #![emit_unchanged]\n-//~^ ERROR: cannot find attribute macro `emit_unchanged` in this scope\n+//~^ ERROR attribute `emit_unchanged` is currently unknown to the compiler\n extern crate issue_41211;\n use issue_41211::emit_unchanged;\n "}, {"sha": "eaa64c6ba3692a2cc4d71351a764c096e75fd5e4", "filename": "src/test/compile-fail-fulldeps/proc-macro/issue-50493.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-50493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-50493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-50493.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,8 +11,6 @@\n // aux-build:issue_50493.rs\n // ignore-stage1\n \n-#![feature(proc_macro)]\n-\n #[macro_use]\n extern crate issue_50493;\n "}, {"sha": "6e9d231ea99a4513468f702429d22510eac99489", "filename": "src/test/compile-fail-fulldeps/proc-macro/lints_in_proc_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // aux-build:bang_proc_macro2.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, proc_macro_non_items)]\n+#![feature(proc_macro_non_items)]\n #![allow(unused_macros)]\n \n extern crate bang_proc_macro2;"}, {"sha": "e418ecc114cc1112a16e7494773a9fce987df938", "filename": "src/test/compile-fail-fulldeps/proc-macro/macros-in-extern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -26,13 +26,13 @@ fn main() {\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     #[no_output]\n-    //~^ ERROR macro and proc-macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     fn some_definitely_unknown_symbol_which_should_be_removed();\n \n     #[nop_attr]\n-    //~^ ERROR macro and proc-macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     fn rust_get_test_int() -> isize;\n \n     emit_input!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n-    //~^ ERROR macro and proc-macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n }"}, {"sha": "9a0171c2ae5ea205296d129bfae6d8c965c104fc", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-gates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -16,7 +16,7 @@\n // gate-test-proc_macro_mod\n // gate-test-proc_macro_gen\n \n-#![feature(use_extern_macros, stmt_expr_attributes)]\n+#![feature(stmt_expr_attributes)]\n \n extern crate proc_macro_gates as foo;\n "}, {"sha": "dc182414a1ddcc196a6500d5d299f193c5d8c760", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-gates2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates2.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:proc-macro-gates.rs\n \n-#![feature(use_extern_macros, stmt_expr_attributes)]\n+#![feature(stmt_expr_attributes)]\n \n extern crate proc_macro_gates as foo;\n "}, {"sha": "1281adce5c58e694e8f55ef274433317c41961bd", "filename": "src/test/compile-fail/macro-with-seps-err-msg.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-with-seps-err-msg.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,10 +10,6 @@\n \n // gate-test-use_extern_macros\n \n-#![feature(proc_macro_path_invoc)]\n-\n fn main() {\n     globnar::brotz!(); //~ ERROR non-ident macro paths are experimental\n-    #[derive(foo::Bar)] struct T; //~ ERROR non-ident macro paths are experimental\n-    ::foo!(); //~ ERROR non-ident macro paths are experimental\n }"}, {"sha": "40053853b15a7e2802fba2c2b88ee41abb346b6a", "filename": "src/test/compile-fail/macros-in-extern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -34,9 +34,9 @@ fn main() {\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     returns_isize!(rust_get_test_int);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     emits_nothing!();\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n }"}, {"sha": "896817bb85832f11ffe35885afd41aeb9be2d07b", "filename": "src/test/compile-fail/stmt_expr_attrs_no_feature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail%2Fstmt_expr_attrs_no_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail%2Fstmt_expr_attrs_no_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstmt_expr_attrs_no_feature.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     #[attr]\n     fn a() {}\n \n-    #[attr]\n+    #[attr] //~ ERROR attributes on expressions are experimental\n     {\n \n     }"}, {"sha": "99c336c28cd29c6db14a37e3c37594cf9ad39635", "filename": "src/test/compile-fail/unknown-tool-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail%2Funknown-tool-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fcompile-fail%2Funknown-tool-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funknown-tool-name.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_extern_macros, proc_macro_path_invoc)]\n+#![feature(proc_macro_path_invoc)]\n \n #[foo::bar] //~ ERROR failed to resolve. Use of undeclared type or module `foo`\n fn main() {}"}, {"sha": "ce157e3632c70a5f67f07331e0f9ad23e43fc3a3", "filename": "src/test/pretty/attr-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fpretty%2Fattr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fpretty%2Fattr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-literals.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     #[align = 8]\n     fn f() { }\n \n-    #[vec(1, 2, 3)]\n+    #[vector(1, 2, 3)]\n     fn g() { }\n }"}, {"sha": "94c5b208a370799733b8416904bec1b8dcff0053", "filename": "src/test/run-pass-fulldeps/auxiliary/cond_plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro, proc_macro_non_items)]\n+#![feature(proc_macro_non_items)]\n \n extern crate proc_macro;\n "}, {"sha": "b54543c73fbd21147e053ff0ffeb31a22fdc21aa", "filename": "src/test/run-pass-fulldeps/auxiliary/hello_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fhello_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fhello_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fhello_macro.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(use_extern_macros, proc_macro_non_items, proc_macro_quote)]\n+#![feature(proc_macro_non_items, proc_macro_quote)]\n \n extern crate proc_macro;\n "}, {"sha": "9faa7366ec5f19fba069c5db92945726f8487a1d", "filename": "src/test/run-pass-fulldeps/auxiliary/proc_macro_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro, proc_macro_non_items)]\n+#![feature(proc_macro_non_items)]\n \n extern crate proc_macro;\n "}, {"sha": "3eb7e8cc9a46dfbb2ff6d4dc6ea38dfc91158ca4", "filename": "src/test/run-pass-fulldeps/macro-quote-cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-cond.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // aux-build:cond_plugin.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, proc_macro_non_items)]\n+#![feature(proc_macro_non_items)]\n \n extern crate cond_plugin;\n "}, {"sha": "1005a6bfc50c7fa00f29428bb52162bd25506df2", "filename": "src/test/run-pass-fulldeps/macro-quote-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-test.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -13,7 +13,7 @@\n // aux-build:hello_macro.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, proc_macro_non_items, proc_macro_gen)]\n+#![feature(proc_macro_non_items, proc_macro_gen)]\n \n extern crate hello_macro;\n "}, {"sha": "b5272e6608bbfd31d47d7ca7407d3ea94092f66c", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // aux-build:attr-stmt-expr.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, stmt_expr_attributes, proc_macro_expr)]\n+#![feature(stmt_expr_attributes, proc_macro_expr)]\n \n extern crate attr_stmt_expr;\n use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr,"}, {"sha": "a84e029f9d87d22dc56dd9ce2f46f6625c67633c", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/count_compound_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro_non_items, proc_macro_quote, use_extern_macros)]\n+#![feature(proc_macro_non_items, proc_macro_quote)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "43c1d5fcc8d4996a653e383322d17cde24771941", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/hygiene_example_codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(use_extern_macros, proc_macro_quote, proc_macro_non_items)]\n+#![feature(proc_macro_quote, proc_macro_non_items)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro as proc_macro_renamed; // This does not break `quote!`"}, {"sha": "955b6ab986d07b3575e819f1c6b7804f97a5af92", "filename": "src/test/run-pass-fulldeps/proc-macro/bang-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // aux-build:bang-macro.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, proc_macro_non_items)]\n+#![feature(proc_macro_non_items)]\n \n extern crate bang_macro;\n use bang_macro::rewrite;"}, {"sha": "dfe97eb587cfb9f1cb6c60406419b880014cd51d", "filename": "src/test/run-pass-fulldeps/proc-macro/call-site.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcall-site.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcall-site.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcall-site.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // aux-build:call-site.rs\n // ignore-stage1\n \n-#![feature(proc_macro_non_items, use_extern_macros)]\n+#![feature(proc_macro_non_items)]\n \n extern crate call_site;\n use call_site::*;"}, {"sha": "6601d66e586a3aa7e961ccdd47e0772dab59393e", "filename": "src/test/run-pass-fulldeps/proc-macro/count_compound_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcount_compound_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcount_compound_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcount_compound_ops.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // aux-build:count_compound_ops.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, proc_macro_non_items)]\n+#![feature(proc_macro_non_items)]\n \n extern crate count_compound_ops;\n use count_compound_ops::count_compound_ops;"}, {"sha": "4a7c8f3e8343baa79f95ecadde8255fe28df7233", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-b.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // aux-build:derive-b.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, proc_macro_path_invoc)]\n+#![feature(proc_macro_path_invoc)]\n \n extern crate derive_b;\n "}, {"sha": "579e8c337733af325147ecb3fbb7ff98e17de121", "filename": "src/test/run-pass-fulldeps/proc-macro/hygiene_example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fhygiene_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fhygiene_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fhygiene_example.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -12,7 +12,7 @@\n // aux-build:hygiene_example.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, proc_macro_non_items)]\n+#![feature(proc_macro_non_items)]\n \n extern crate hygiene_example;\n use hygiene_example::hello;"}, {"sha": "bd76cc380544fc06121fd0275097d53c7781d1ab", "filename": "src/test/run-pass-fulldeps/proc-macro/macros-in-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -12,7 +12,7 @@\n // ignore-stage1\n // ignore-wasm32\n \n-#![feature(use_extern_macros, macros_in_extern)]\n+#![feature(macros_in_extern)]\n \n extern crate test_macros;\n "}, {"sha": "c9d7b0423ec5929c643639a146809c2056066508", "filename": "src/test/run-pass-fulldeps/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Frun-pass-fulldeps%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc_macro.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -12,7 +12,7 @@\n // ignore-stage1\n // ignore-cross-compile\n \n-#![feature(use_extern_macros, proc_macro_non_items)]\n+#![feature(proc_macro_non_items)]\n \n extern crate proc_macro_def;\n "}, {"sha": "679cb7728680ddbf26eefe2887c77cd9f7191a09", "filename": "src/test/ui-fulldeps/auxiliary/attr_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr_proc_macro.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n // no-prefer-dynamic\n-#![feature(proc_macro)]\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "6484725814a10b75581b8fa23a92e263dc695954", "filename": "src/test/ui-fulldeps/auxiliary/bang_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fbang_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fbang_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fbang_proc_macro.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n // no-prefer-dynamic\n-#![feature(proc_macro)]\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "fc59a622bfab039898c83e4e901195cfc38e102e", "filename": "src/test/ui-fulldeps/auxiliary/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flifetimes.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,7 +10,6 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "6879848d269b0cb7d3e68e84102cb6e5b53fe716", "filename": "src/test/ui-fulldeps/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flifetimes.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:lifetimes.rs\n \n-#![feature(use_extern_macros, proc_macro_non_items)]\n+#![feature(proc_macro_non_items)]\n \n extern crate lifetimes;\n "}, {"sha": "1ed8ef520273593334d11e649e1ed765876f1440", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/generate-mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,6 @@\n // run-pass\n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "b0cccd8728bd1f3427d3acb7105237a025ed9ac6", "filename": "src/test/ui-fulldeps/proc-macro/generate-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -12,7 +12,7 @@\n \n // aux-build:generate-mod.rs\n \n-#![feature(use_extern_macros, proc_macro_gen, proc_macro_path_invoc)]\n+#![feature(proc_macro_gen, proc_macro_path_invoc)]\n \n extern crate generate_mod;\n "}, {"sha": "8b940a0f40585a835334f28916eebd6d3526247d", "filename": "src/test/ui-fulldeps/proc-macro/invalid-attributes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,6 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(proc_macro)]\n \n extern crate proc_macro;\n "}, {"sha": "5fd87362db23b2cf8ac39e99dbc996b387abcf6d", "filename": "src/test/ui-fulldeps/proc-macro/invalid-attributes.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.stderr?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -1,35 +1,35 @@\n error: `#[proc_macro]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:20:1\n+  --> $DIR/invalid-attributes.rs:19:1\n    |\n LL | #[proc_macro = \"test\"] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[proc_macro]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:23:1\n+  --> $DIR/invalid-attributes.rs:22:1\n    |\n LL | #[proc_macro()] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^\n \n error: `#[proc_macro]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:26:1\n+  --> $DIR/invalid-attributes.rs:25:1\n    |\n LL | #[proc_macro(x)] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^^\n \n error: `#[proc_macro_attribute]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:29:1\n+  --> $DIR/invalid-attributes.rs:28:1\n    |\n LL | #[proc_macro_attribute = \"test\"] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[proc_macro_attribute]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:32:1\n+  --> $DIR/invalid-attributes.rs:31:1\n    |\n LL | #[proc_macro_attribute()] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[proc_macro_attribute]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:35:1\n+  --> $DIR/invalid-attributes.rs:34:1\n    |\n LL | #[proc_macro_attribute(x)] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e7bb05de88c8a3f2f6f2f2538407851cec955400", "filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro, decl_macro)]\n+#![feature(decl_macro)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "2440488578814e89ce24021bf135fb85bd96afe7", "filename": "src/test/ui-fulldeps/proc-macro/non-root.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnon-root.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnon-root.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnon-root.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,7 +10,6 @@\n \n // no-prefer-dynamic\n \n-#![feature(proc_macro)]\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;"}, {"sha": "23222a2b85145dfa3d482e6c6142a1667bfdaece", "filename": "src/test/ui-fulldeps/proc-macro/non-root.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnon-root.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnon-root.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fnon-root.stderr?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -1,5 +1,5 @@\n error: functions tagged with `#[proc_macro]` must currently reside in the root of the crate\n-  --> $DIR/non-root.rs:21:5\n+  --> $DIR/non-root.rs:20:5\n    |\n LL |     pub fn foo(arg: TokenStream) -> TokenStream { arg }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f6b0e90da001440838c59f06db17b8f5fa8bbc15", "filename": "src/test/ui-fulldeps/proc-macro/three-equals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fthree-equals.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,7 +11,7 @@\n // aux-build:three-equals.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, proc_macro_non_items)]\n+#![feature(proc_macro_non_items)]\n \n extern crate three_equals;\n "}, {"sha": "1940151357c8f82a478b434f6943ce8e0394623f", "filename": "src/test/ui-fulldeps/resolve-error.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -13,7 +13,7 @@\n // aux-build:attr_proc_macro.rs\n // aux-build:bang_proc_macro.rs\n \n-#![feature(use_extern_macros)]\n+#![feature(custom_attribute)]\n \n #[macro_use]\n extern crate derive_foo;\n@@ -37,12 +37,10 @@ macro_rules! attr_proc_mac {\n //~^ ERROR cannot find\n struct Foo;\n \n-#[attr_proc_macra]\n-//~^ ERROR cannot find\n+#[attr_proc_macra] // OK, interpreted as a custom attribute\n struct Bar;\n \n-#[FooWithLongNan]\n-//~^ ERROR cannot find\n+#[FooWithLongNan]  // OK, interpreted as a custom attribute\n struct Asdf;\n \n #[derive(Dlone)]"}, {"sha": "278409c688ab9dcfa581b523f3578aa17ed13062", "filename": "src/test/ui-fulldeps/resolve-error.stderr", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -4,59 +4,47 @@ error: cannot find derive macro `FooWithLongNan` in this scope\n LL | #[derive(FooWithLongNan)]\n    |          ^^^^^^^^^^^^^^ help: try: `FooWithLongName`\n \n-error: cannot find attribute macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:40:3\n-   |\n-LL | #[attr_proc_macra]\n-   |   ^^^^^^^^^^^^^^^ help: try: `attr_proc_macro`\n-\n-error: cannot find attribute macro `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:44:3\n-   |\n-LL | #[FooWithLongNan]\n-   |   ^^^^^^^^^^^^^^\n-\n error: cannot find derive macro `Dlone` in this scope\n-  --> $DIR/resolve-error.rs:48:10\n+  --> $DIR/resolve-error.rs:46:10\n    |\n LL | #[derive(Dlone)]\n    |          ^^^^^ help: try: `Clone`\n \n error: cannot find derive macro `Dlona` in this scope\n-  --> $DIR/resolve-error.rs:52:10\n+  --> $DIR/resolve-error.rs:50:10\n    |\n LL | #[derive(Dlona)]\n    |          ^^^^^ help: try: `Clona`\n \n error: cannot find derive macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:56:10\n+  --> $DIR/resolve-error.rs:54:10\n    |\n LL | #[derive(attr_proc_macra)]\n    |          ^^^^^^^^^^^^^^^\n \n error: cannot find macro `FooWithLongNama!` in this scope\n-  --> $DIR/resolve-error.rs:61:5\n+  --> $DIR/resolve-error.rs:59:5\n    |\n LL |     FooWithLongNama!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `FooWithLongNam`\n \n error: cannot find macro `attr_proc_macra!` in this scope\n-  --> $DIR/resolve-error.rs:64:5\n+  --> $DIR/resolve-error.rs:62:5\n    |\n LL |     attr_proc_macra!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `attr_proc_mac`\n \n error: cannot find macro `Dlona!` in this scope\n-  --> $DIR/resolve-error.rs:67:5\n+  --> $DIR/resolve-error.rs:65:5\n    |\n LL |     Dlona!();\n    |     ^^^^^\n \n error: cannot find macro `bang_proc_macrp!` in this scope\n-  --> $DIR/resolve-error.rs:70:5\n+  --> $DIR/resolve-error.rs:68:5\n    |\n LL |     bang_proc_macrp!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "ad8e0e76e14137511b0b0599eb31eb1add49bbcd", "filename": "src/test/ui/custom-attribute-multisegment.rs", "status": "renamed", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,18 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:attr_proc_macro.rs\n-// ignore-tidy-linelength\n+// Unresolved multi-segment attributes are not treated as custom.\n \n-#![feature(use_extern_macros, custom_attribute)]\n-//~^ ERROR Cannot use `#![feature(use_extern_macros)]` and `#![feature(custom_attribute)] at the same time\n+#![feature(custom_attribute, proc_macro_path_invoc)]\n \n-extern crate attr_proc_macro;\n-use attr_proc_macro::attr_proc_macro;\n+mod existent {}\n \n-#[attr_proc_macro]\n-fn foo() {}\n-\n-fn main() {\n-    foo();\n-}\n+#[existent::nonexistent] //~ ERROR failed to resolve. Could not find `nonexistent` in `existent`\n+fn main() {}", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-custom-attr-mutex.rs"}, {"sha": "ff72d1c36d85244f2e93998d5330afea914043cd", "filename": "src/test/ui/custom-attribute-multisegment.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve. Could not find `nonexistent` in `existent`\n+  --> $DIR/custom-attribute-multisegment.rs:17:13\n+   |\n+LL | #[existent::nonexistent] //~ ERROR failed to resolve. Could not find `nonexistent` in `existent`\n+   |             ^^^^^^^^^^^ Could not find `nonexistent` in `existent`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "77080e3c348f99390781f48e54d0925a895311df", "filename": "src/test/ui/feature-gate-macros_in_extern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -27,9 +27,9 @@ macro_rules! emits_nothing(\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     returns_isize!(rust_get_test_int);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     emits_nothing!();\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n }"}, {"sha": "23b63078dbf8e7c0126e210b042b40dad5a7d949", "filename": "src/test/ui/feature-gate-macros_in_extern.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -1,20 +1,20 @@\n-error[E0658]: macro and proc-macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n   --> $DIR/feature-gate-macros_in_extern.rs:29:5\n    |\n LL |     returns_isize!(rust_get_test_int);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: macro and proc-macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n   --> $DIR/feature-gate-macros_in_extern.rs:31:5\n    |\n LL |     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: macro and proc-macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n   --> $DIR/feature-gate-macros_in_extern.rs:33:5\n    |\n LL |     emits_nothing!();"}, {"sha": "ed5907800e9de7367618d1f9d158e7c459aca6d4", "filename": "src/test/ui/imports/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:two_macros.rs\n \n-#![feature(item_like_imports, use_extern_macros)]\n+#![feature(use_extern_macros)]\n \n extern crate two_macros; // two identity macros `m` and `n`\n "}, {"sha": "50525e03acf50cebfe0db56e82262cbdf6ddc9c9", "filename": "src/test/ui/issue-11692-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fissue-11692-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fissue-11692-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11692-2.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     concat!(test!());\n-    //~^ ERROR expected a macro, found non-macro attribute\n+    //~^ ERROR expected a macro, found built-in attribute\n }"}, {"sha": "0c130943fd873e789d5d828bc21f1eb228f3791a", "filename": "src/test/ui/issue-11692-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fissue-11692-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fissue-11692-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11692-2.stderr?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -1,4 +1,4 @@\n-error: expected a macro, found non-macro attribute\n+error: expected a macro, found built-in attribute\n   --> $DIR/issue-11692-2.rs:12:13\n    |\n LL |     concat!(test!());"}, {"sha": "bdbc7bd660fcdaf0f9cdbbfd8adfd0f91834733f", "filename": "src/test/ui/macro-path-prelude-fail-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,9 +10,9 @@\n \n #![feature(use_extern_macros)]\n \n-#[derive(inline)] //~ ERROR expected a macro, found non-macro attribute\n+#[derive(inline)] //~ ERROR expected a macro, found built-in attribute\n struct S;\n \n fn main() {\n-    inline!(); //~ ERROR expected a macro, found non-macro attribute\n+    inline!(); //~ ERROR expected a macro, found built-in attribute\n }"}, {"sha": "396bba2408f32231b07f5630100810ff18167b63", "filename": "src/test/ui/macro-path-prelude-fail-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.stderr?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -1,13 +1,13 @@\n-error: expected a macro, found non-macro attribute\n+error: expected a macro, found built-in attribute\n   --> $DIR/macro-path-prelude-fail-3.rs:13:10\n    |\n-LL | #[derive(inline)] //~ ERROR expected a macro, found non-macro attribute\n+LL | #[derive(inline)] //~ ERROR expected a macro, found built-in attribute\n    |          ^^^^^^\n \n-error: expected a macro, found non-macro attribute\n+error: expected a macro, found built-in attribute\n   --> $DIR/macro-path-prelude-fail-3.rs:17:5\n    |\n-LL |     inline!(); //~ ERROR expected a macro, found non-macro attribute\n+LL |     inline!(); //~ ERROR expected a macro, found built-in attribute\n    |     ^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "2d97e160f49144a40080c8050082c284858d9c06", "filename": "src/test/ui/tool-attributes-disabled-2.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-disabled-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-disabled-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes-disabled-2.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -11,9 +11,5 @@\n // If macro modularization (`use_extern_macros`) is not enabled,\n // then tool attributes are treated as custom attributes.\n \n-// compile-pass\n-\n-#![feature(custom_attribute)]\n-\n-#[rustfmt::bar]\n+#[rustfmt::bar] //~ ERROR attribute `rustfmt::bar` is currently unknown to the compiler\n fn main() {}"}, {"sha": "b327773dd6adcf619bcd9313068325e2b1b5957a", "filename": "src/test/ui/tool-attributes-disabled-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-disabled-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-disabled-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes-disabled-2.stderr?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: The attribute `rustfmt::bar` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/tool-attributes-disabled-2.rs:14:1\n+   |\n+LL | #[rustfmt::bar] //~ ERROR attribute `rustfmt::bar` is currently unknown to the compiler\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7a6b9ae9943bc99c818d3d8cdf095c939e3e5981", "filename": "src/test/ui/tool-attributes-misplaced-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -8,21 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(tool_attributes)]\n+#![feature(tool_attributes, custom_attribute)]\n \n type A = rustfmt; //~ ERROR expected type, found tool module `rustfmt`\n-type B = rustfmt::skip; //~ ERROR expected type, found non-macro attribute `rustfmt::skip`\n+type B = rustfmt::skip; //~ ERROR expected type, found tool attribute `rustfmt::skip`\n \n #[derive(rustfmt)] //~ ERROR cannot find derive macro `rustfmt` in this scope\n struct S;\n \n-#[rustfmt] //~ ERROR cannot find attribute macro `rustfmt` in this scope\n+#[rustfmt] // OK, interpreted as a custom attribute\n fn check() {}\n \n #[rustfmt::skip] // OK\n fn main() {\n     rustfmt; //~ ERROR expected value, found tool module `rustfmt`\n     rustfmt!(); //~ ERROR cannot find macro `rustfmt!` in this scope\n \n-    rustfmt::skip; //~ ERROR expected value, found non-macro attribute `rustfmt::skip`\n+    rustfmt::skip; //~ ERROR expected value, found tool attribute `rustfmt::skip`\n }"}, {"sha": "60188aebce77cff6fb2cb84299b2d0ee6f8a6407", "filename": "src/test/ui/tool-attributes-misplaced-1.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.stderr?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -4,12 +4,6 @@ error: cannot find derive macro `rustfmt` in this scope\n LL | #[derive(rustfmt)] //~ ERROR cannot find derive macro `rustfmt` in this scope\n    |          ^^^^^^^\n \n-error: cannot find attribute macro `rustfmt` in this scope\n-  --> $DIR/tool-attributes-misplaced-1.rs:19:3\n-   |\n-LL | #[rustfmt] //~ ERROR cannot find attribute macro `rustfmt` in this scope\n-   |   ^^^^^^^\n-\n error: cannot find macro `rustfmt!` in this scope\n   --> $DIR/tool-attributes-misplaced-1.rs:25:5\n    |\n@@ -22,10 +16,10 @@ error[E0573]: expected type, found tool module `rustfmt`\n LL | type A = rustfmt; //~ ERROR expected type, found tool module `rustfmt`\n    |          ^^^^^^^ not a type\n \n-error[E0573]: expected type, found non-macro attribute `rustfmt::skip`\n+error[E0573]: expected type, found tool attribute `rustfmt::skip`\n   --> $DIR/tool-attributes-misplaced-1.rs:14:10\n    |\n-LL | type B = rustfmt::skip; //~ ERROR expected type, found non-macro attribute `rustfmt::skip`\n+LL | type B = rustfmt::skip; //~ ERROR expected type, found tool attribute `rustfmt::skip`\n    |          ^^^^^^^^^^^^^ not a type\n \n error[E0423]: expected value, found tool module `rustfmt`\n@@ -34,13 +28,13 @@ error[E0423]: expected value, found tool module `rustfmt`\n LL |     rustfmt; //~ ERROR expected value, found tool module `rustfmt`\n    |     ^^^^^^^ not a value\n \n-error[E0423]: expected value, found non-macro attribute `rustfmt::skip`\n+error[E0423]: expected value, found tool attribute `rustfmt::skip`\n   --> $DIR/tool-attributes-misplaced-1.rs:27:5\n    |\n-LL |     rustfmt::skip; //~ ERROR expected value, found non-macro attribute `rustfmt::skip`\n+LL |     rustfmt::skip; //~ ERROR expected value, found tool attribute `rustfmt::skip`\n    |     ^^^^^^^^^^^^^ not a value\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors occurred: E0423, E0573.\n For more information about an error, try `rustc --explain E0423`."}, {"sha": "102edf2813b213eaac89ebb7648eb95ab1849830", "filename": "src/test/ui/tool-attributes-misplaced-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.rs?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -10,9 +10,9 @@\n \n #![feature(tool_attributes)]\n \n-#[derive(rustfmt::skip)] //~ ERROR expected a macro, found non-macro attribute\n+#[derive(rustfmt::skip)] //~ ERROR expected a macro, found tool attribute\n struct S;\n \n fn main() {\n-    rustfmt::skip!(); //~ ERROR expected a macro, found non-macro attribute\n+    rustfmt::skip!(); //~ ERROR expected a macro, found tool attribute\n }"}, {"sha": "5b968cd6b8ecdd31268d54377f12001160a9a8c2", "filename": "src/test/ui/tool-attributes-misplaced-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.stderr?ref=ffb09dfb3a9b252e26cd4f6570e9ff1b8a742edc", "patch": "@@ -1,13 +1,13 @@\n-error: expected a macro, found non-macro attribute\n+error: expected a macro, found tool attribute\n   --> $DIR/tool-attributes-misplaced-2.rs:13:10\n    |\n-LL | #[derive(rustfmt::skip)] //~ ERROR expected a macro, found non-macro attribute\n+LL | #[derive(rustfmt::skip)] //~ ERROR expected a macro, found tool attribute\n    |          ^^^^^^^^^^^^^\n \n-error: expected a macro, found non-macro attribute\n+error: expected a macro, found tool attribute\n   --> $DIR/tool-attributes-misplaced-2.rs:17:5\n    |\n-LL |     rustfmt::skip!(); //~ ERROR expected a macro, found non-macro attribute\n+LL |     rustfmt::skip!(); //~ ERROR expected a macro, found tool attribute\n    |     ^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}]}