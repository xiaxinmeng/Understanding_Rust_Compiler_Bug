{"sha": "7317ef5c362bde766440f62e6c2ac8a210e6c22d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMTdlZjVjMzYyYmRlNzY2NDQwZjYyZTZjMmFjOGEyMTBlNmMyMmQ=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-10-21T19:59:21Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-10-24T21:15:50Z"}, "message": "Add as_unsafe_cell() for Cell and RefCell\n\nFixes #18131.", "tree": {"sha": "a87e4ddec35dfd079e4870fe9a0cc74e0b3b4827", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a87e4ddec35dfd079e4870fe9a0cc74e0b3b4827"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7317ef5c362bde766440f62e6c2ac8a210e6c22d", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7317ef5c362bde766440f62e6c2ac8a210e6c22d", "html_url": "https://github.com/rust-lang/rust/commit/7317ef5c362bde766440f62e6c2ac8a210e6c22d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7317ef5c362bde766440f62e6c2ac8a210e6c22d/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a10917a6a9b087d10ac4fd0186b719218627281e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a10917a6a9b087d10ac4fd0186b719218627281e", "html_url": "https://github.com/rust-lang/rust/commit/a10917a6a9b087d10ac4fd0186b719218627281e"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "8a4b9f6e51b60bef2cec0cf3714d826bbc540277", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7317ef5c362bde766440f62e6c2ac8a210e6c22d/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7317ef5c362bde766440f62e6c2ac8a210e6c22d/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=7317ef5c362bde766440f62e6c2ac8a210e6c22d", "patch": "@@ -191,6 +191,17 @@ impl<T:Copy> Cell<T> {\n             *self.value.get() = value;\n         }\n     }\n+\n+    /// Get a reference to the underlying `UnsafeCell`.\n+    ///\n+    /// This can be used to circumvent `Cell`'s safety checks.\n+    ///\n+    /// This function is `unsafe` because `UnsafeCell`'s field is public.\n+    #[inline]\n+    #[experimental]\n+    pub unsafe fn as_unsafe_cell<'a>(&'a self) -> &'a UnsafeCell<T> {\n+        &self.value\n+    }\n }\n \n #[unstable = \"waiting for `Clone` trait to become stable\"]\n@@ -306,6 +317,17 @@ impl<T> RefCell<T> {\n             None => fail!(\"RefCell<T> already borrowed\")\n         }\n     }\n+\n+    /// Get a reference to the underlying `UnsafeCell`.\n+    ///\n+    /// This can be used to circumvent `RefCell`'s safety checks.\n+    ///\n+    /// This function is `unsafe` because `UnsafeCell`'s field is public.\n+    #[inline]\n+    #[experimental]\n+    pub unsafe fn as_unsafe_cell<'a>(&'a self) -> &'a UnsafeCell<T> {\n+        &self.value\n+    }\n }\n \n #[unstable = \"waiting for `Clone` to become stable\"]"}, {"sha": "59365045f43807cfb027c02fe3df316e92cdf289", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7317ef5c362bde766440f62e6c2ac8a210e6c22d/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7317ef5c362bde766440f62e6c2ac8a210e6c22d/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=7317ef5c362bde766440f62e6c2ac8a210e6c22d", "patch": "@@ -127,3 +127,22 @@ fn clone_ref_updates_flag() {\n     }\n     assert!(x.try_borrow_mut().is_some());\n }\n+\n+#[test]\n+fn as_unsafe_cell() {\n+    let c1: Cell<uint> = Cell::new(0u);\n+    c1.set(1u);\n+    assert_eq!(1u, unsafe { *c1.as_unsafe_cell().get() });\n+\n+    let c2: Cell<uint> = Cell::new(0u);\n+    unsafe { *c2.as_unsafe_cell().get() = 1u; }\n+    assert_eq!(1u, c2.get());\n+\n+    let r1: RefCell<uint> = RefCell::new(0u);\n+    *r1.borrow_mut() = 1u;\n+    assert_eq!(1u, unsafe { *r1.as_unsafe_cell().get() });\n+\n+    let r2: RefCell<uint> = RefCell::new(0u);\n+    unsafe { *r2.as_unsafe_cell().get() = 1u; }\n+    assert_eq!(1u, *r2.borrow());\n+}"}]}