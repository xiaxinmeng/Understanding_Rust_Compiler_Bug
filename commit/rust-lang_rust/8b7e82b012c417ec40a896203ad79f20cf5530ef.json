{"sha": "8b7e82b012c417ec40a896203ad79f20cf5530ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiN2U4MmIwMTJjNDE3ZWM0MGE4OTYyMDNhZDc5ZjIwY2Y1NTMwZWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-08T18:52:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-08T18:52:08Z"}, "message": "Merge #7918\n\n7918: Generalize file ensuring infrastructure r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "85413766cc45708d77dfa9cb5a3a00767af8461a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85413766cc45708d77dfa9cb5a3a00767af8461a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b7e82b012c417ec40a896203ad79f20cf5530ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRnJYCRBK7hj4Ov3rIwAAdHIIAHNAaMo1bBX2QPFOYzBH44rU\nlZ0b4Wypx4uTeb4IYKukb8I080Or8euIUrt4IbXNb6uf44sa1WxwMQk60qgG+dV7\ndMgoyyZ3tdZ9EskRFGuBFK4Y5oi9wPGFSKe7ql9Mc7+rfMlUx+hQHuB7qnZd4pLX\nFaq4EyiI+EBcasVx17nFbQfWX39a6o/RXd5LoGcFKRrC8t6bS9D4iQht3V300Jvh\nu7k0VV4k9bs6tREp/QjcHm9sf9nwpTKKvCfr5lA06gxMHINguCuP33SrTVuWhuWF\nIX/7EaOQG5aY778MWQaN0XI8ET3Ty4JfexJ9/+QOR5yn+f60wmRsOkgU0hEGBwI=\n=GVaR\n-----END PGP SIGNATURE-----\n", "payload": "tree 85413766cc45708d77dfa9cb5a3a00767af8461a\nparent 071dde1c1da10e3580bded99dc2d529074356536\nparent d2bb2268d3a9cc0e2a6970c85c45724af5eb255c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615229528 +0000\ncommitter GitHub <noreply@github.com> 1615229528 +0000\n\nMerge #7918\n\n7918: Generalize file ensuring infrastructure r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7e82b012c417ec40a896203ad79f20cf5530ef", "html_url": "https://github.com/rust-lang/rust/commit/8b7e82b012c417ec40a896203ad79f20cf5530ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b7e82b012c417ec40a896203ad79f20cf5530ef/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "071dde1c1da10e3580bded99dc2d529074356536", "url": "https://api.github.com/repos/rust-lang/rust/commits/071dde1c1da10e3580bded99dc2d529074356536", "html_url": "https://github.com/rust-lang/rust/commit/071dde1c1da10e3580bded99dc2d529074356536"}, {"sha": "d2bb2268d3a9cc0e2a6970c85c45724af5eb255c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2bb2268d3a9cc0e2a6970c85c45724af5eb255c", "html_url": "https://github.com/rust-lang/rust/commit/d2bb2268d3a9cc0e2a6970c85c45724af5eb255c"}], "stats": {"total": 302, "additions": 158, "deletions": 144}, "files": [{"sha": "078c83f75cddc258dfae178b60ea295d0ccd668a", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -859,12 +859,12 @@ fn manual(fields: &[(&'static str, &'static str, &[&str], &str)]) -> String {\n mod tests {\n     use std::fs;\n \n-    use test_utils::project_dir;\n+    use test_utils::{ensure_file_contents, project_root};\n \n     use super::*;\n \n     #[test]\n-    fn schema_in_sync_with_package_json() {\n+    fn generate_package_json_config() {\n         let s = Config::json_schema();\n         let schema = format!(\"{:#}\", s);\n         let mut schema = schema\n@@ -877,27 +877,26 @@ mod tests {\n             .to_string();\n         schema.push_str(\",\\n\");\n \n-        let package_json_path = project_dir().join(\"editors/code/package.json\");\n+        let package_json_path = project_root().join(\"editors/code/package.json\");\n         let mut package_json = fs::read_to_string(&package_json_path).unwrap();\n \n         let start_marker = \"                \\\"$generated-start\\\": false,\\n\";\n         let end_marker = \"                \\\"$generated-end\\\": false\\n\";\n \n         let start = package_json.find(start_marker).unwrap() + start_marker.len();\n         let end = package_json.find(end_marker).unwrap();\n+\n         let p = remove_ws(&package_json[start..end]);\n         let s = remove_ws(&schema);\n-\n         if !p.contains(&s) {\n             package_json.replace_range(start..end, &schema);\n-            fs::write(&package_json_path, &mut package_json).unwrap();\n-            panic!(\"new config, updating package.json\")\n+            ensure_file_contents(&package_json_path, &package_json)\n         }\n     }\n \n     #[test]\n-    fn schema_in_sync_with_docs() {\n-        let docs_path = project_dir().join(\"docs/user/generated_config.adoc\");\n+    fn generate_config_documentation() {\n+        let docs_path = project_root().join(\"docs/user/generated_config.adoc\");\n         let current = fs::read_to_string(&docs_path).unwrap();\n         let expected = ConfigData::manual();\n "}, {"sha": "ba0ccfaed1daaa28f45ca53e4637aa692a66ec85", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -7,7 +7,7 @@ use std::{\n use ast::NameOwner;\n use expect_test::expect_file;\n use rayon::prelude::*;\n-use test_utils::{bench, bench_fixture, project_dir, skip_slow_tests};\n+use test_utils::{bench, bench_fixture, project_root, skip_slow_tests};\n \n use crate::{ast, fuzz, tokenize, AstNode, SourceFile, SyntaxError, TextRange, TextSize, Token};\n \n@@ -153,7 +153,7 @@ fn reparse_fuzz_tests() {\n /// Test that Rust-analyzer can parse and validate the rust-analyzer\n #[test]\n fn self_hosting_parsing() {\n-    let dir = project_dir().join(\"crates\");\n+    let dir = project_root().join(\"crates\");\n     let files = walkdir::WalkDir::new(dir)\n         .into_iter()\n         .filter_entry(|entry| {\n@@ -193,7 +193,7 @@ fn self_hosting_parsing() {\n }\n \n fn test_data_dir() -> PathBuf {\n-    project_dir().join(\"crates/syntax/test_data\")\n+    project_root().join(\"crates/syntax/test_data\")\n }\n \n fn assert_errors_are_present(errors: &[SyntaxError], path: &Path) {"}, {"sha": "3a37c4473cdb96533a8ae3496a4ea1c437b11bad", "filename": "crates/test_utils/src/bench_fixture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -4,7 +4,7 @@ use std::fs;\n \n use stdx::format_to;\n \n-use crate::project_dir;\n+use crate::project_root;\n \n pub fn big_struct() -> String {\n     let n = 1_000;\n@@ -32,11 +32,11 @@ struct S{} {{\n }\n \n pub fn glorious_old_parser() -> String {\n-    let path = project_dir().join(\"bench_data/glorious_old_parser\");\n+    let path = project_root().join(\"bench_data/glorious_old_parser\");\n     fs::read_to_string(&path).unwrap()\n }\n \n pub fn numerous_macro_rules() -> String {\n-    let path = project_dir().join(\"bench_data/numerous_macro_rules\");\n+    let path = project_root().join(\"bench_data/numerous_macro_rules\");\n     fs::read_to_string(&path).unwrap()\n }"}, {"sha": "6041ab5e4f9756fe368c05e5dc8450fed9d6f688", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -14,11 +14,11 @@ mod fixture;\n use std::{\n     convert::{TryFrom, TryInto},\n     env, fs,\n-    path::PathBuf,\n+    path::{Path, PathBuf},\n };\n \n use profile::StopWatch;\n-use stdx::lines_with_ends;\n+use stdx::{is_ci, lines_with_ends};\n use text_size::{TextRange, TextSize};\n \n pub use dissimilar::diff as __diff;\n@@ -288,14 +288,14 @@ pub fn skip_slow_tests() -> bool {\n     if should_skip {\n         eprintln!(\"ignoring slow test\")\n     } else {\n-        let path = project_dir().join(\"./target/.slow_tests_cookie\");\n+        let path = project_root().join(\"./target/.slow_tests_cookie\");\n         fs::write(&path, \".\").unwrap();\n     }\n     should_skip\n }\n \n /// Returns the path to the root directory of `rust-analyzer` project.\n-pub fn project_dir() -> PathBuf {\n+pub fn project_root() -> PathBuf {\n     let dir = env!(\"CARGO_MANIFEST_DIR\");\n     PathBuf::from(dir).parent().unwrap().parent().unwrap().to_owned()\n }\n@@ -353,3 +353,39 @@ pub fn bench(label: &'static str) -> impl Drop {\n \n     Bencher { sw: StopWatch::start(), label }\n }\n+\n+/// Checks that the `file` has the specified `contents`. If that is not the\n+/// case, updates the file and then fails the test.\n+pub fn ensure_file_contents(file: &Path, contents: &str) {\n+    if let Err(()) = try_ensure_file_contents(file, contents) {\n+        panic!(\"Some files were not up-to-date\");\n+    }\n+}\n+\n+/// Checks that the `file` has the specified `contents`. If that is not the\n+/// case, updates the file and return an Error.\n+pub fn try_ensure_file_contents(file: &Path, contents: &str) -> Result<(), ()> {\n+    match std::fs::read_to_string(file) {\n+        Ok(old_contents) if normalize_newlines(&old_contents) == normalize_newlines(contents) => {\n+            return Ok(())\n+        }\n+        _ => (),\n+    }\n+    let display_path = file.strip_prefix(&project_root()).unwrap_or(file);\n+    eprintln!(\n+        \"\\n\\x1b[31;1merror\\x1b[0m: {} was not up-to-date, updating\\n\",\n+        display_path.display()\n+    );\n+    if is_ci() {\n+        eprintln!(\"    NOTE: run `cargo test` locally and commit the updated files\\n\");\n+    }\n+    if let Some(parent) = file.parent() {\n+        let _ = std::fs::create_dir_all(parent);\n+    }\n+    std::fs::write(file, contents).unwrap();\n+    Err(())\n+}\n+\n+fn normalize_newlines(s: &str) -> String {\n+    s.replace(\"\\r\\n\", \"\\n\")\n+}"}, {"sha": "0a3fd428564bff9ee9148c98c4c6337612ebc3a0", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -308,9 +308,8 @@ This sections talks about the things which are everywhere and nowhere in particu\n ### Code generation\n \n Some of the components of this repository are generated through automatic processes.\n-`cargo xtask codegen` runs all generation tasks.\n+Generated code is updated automatically on `cargo test`.\n Generated code is generally committed to the git repository.\n-There are tests to check that the generated code is fresh.\n \n In particular, we generate:\n "}, {"sha": "2cf3c6fdc9a599a5f48298eafb143eb5f958755c", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 38, "deletions": 40, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -7,68 +7,66 @@\n \n mod gen_syntax;\n mod gen_parser_tests;\n+mod gen_lint_completions;\n mod gen_assists_docs;\n mod gen_feature_docs;\n-mod gen_lint_completions;\n mod gen_diagnostic_docs;\n \n use std::{\n     fmt, mem,\n     path::{Path, PathBuf},\n };\n-use xshell::{cmd, pushenv, read_file, write_file};\n+use xshell::{cmd, pushenv};\n \n-use crate::{ensure_rustfmt, flags, project_root, Result};\n+use crate::{ensure_rustfmt, project_root, Result};\n \n pub(crate) use self::{\n-    gen_assists_docs::{generate_assists_docs, generate_assists_tests},\n-    gen_diagnostic_docs::generate_diagnostic_docs,\n-    gen_feature_docs::generate_feature_docs,\n-    gen_lint_completions::generate_lint_completions,\n-    gen_parser_tests::generate_parser_tests,\n-    gen_syntax::generate_syntax,\n+    gen_assists_docs::generate_assists_tests, gen_lint_completions::generate_lint_completions,\n+    gen_parser_tests::generate_parser_tests, gen_syntax::generate_syntax,\n };\n \n-#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub(crate) enum Mode {\n-    Overwrite,\n-    Verify,\n+pub(crate) fn docs() -> Result<()> {\n+    // We don't commit docs to the repo, so we can just overwrite them.\n+    gen_assists_docs::generate_assists_docs()?;\n+    gen_feature_docs::generate_feature_docs()?;\n+    gen_diagnostic_docs::generate_diagnostic_docs()?;\n+    Ok(())\n }\n \n-impl flags::Codegen {\n-    pub(crate) fn run(self) -> Result<()> {\n-        if self.features {\n-            generate_lint_completions(Mode::Overwrite)?;\n-        }\n-        generate_syntax(Mode::Overwrite)?;\n-        generate_parser_tests(Mode::Overwrite)?;\n-        generate_assists_tests(Mode::Overwrite)?;\n-        generate_assists_docs(Mode::Overwrite)?;\n-        generate_feature_docs(Mode::Overwrite)?;\n-        generate_diagnostic_docs(Mode::Overwrite)?;\n-        Ok(())\n-    }\n+#[allow(unused)]\n+fn used() {\n+    generate_parser_tests();\n+    generate_assists_tests();\n+    generate_syntax();\n+    generate_lint_completions();\n }\n \n-/// A helper to update file on disk if it has changed.\n-/// With verify = false,\n-fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n-    match read_file(path) {\n-        Ok(old_contents) if normalize(&old_contents) == normalize(contents) => {\n-            return Ok(());\n+/// Checks that the `file` has the specified `contents`. If that is not the\n+/// case, updates the file and then fails the test.\n+pub(crate) fn ensure_file_contents(file: &Path, contents: &str) -> Result<()> {\n+    match std::fs::read_to_string(file) {\n+        Ok(old_contents) if normalize_newlines(&old_contents) == normalize_newlines(contents) => {\n+            return Ok(())\n         }\n         _ => (),\n     }\n-    if mode == Mode::Verify {\n-        anyhow::bail!(\"`{}` is not up-to-date\", path.display());\n+    let display_path = file.strip_prefix(&project_root()).unwrap_or(file);\n+    eprintln!(\n+        \"\\n\\x1b[31;1merror\\x1b[0m: {} was not up-to-date, updating\\n\",\n+        display_path.display()\n+    );\n+    if std::env::var(\"CI\").is_ok() {\n+        eprintln!(\"    NOTE: run `cargo test` locally and commit the updated files\\n\");\n     }\n-    eprintln!(\"updating {}\", path.display());\n-    write_file(path, contents)?;\n-    return Ok(());\n-\n-    fn normalize(s: &str) -> String {\n-        s.replace(\"\\r\\n\", \"\\n\")\n+    if let Some(parent) = file.parent() {\n+        let _ = std::fs::create_dir_all(parent);\n     }\n+    std::fs::write(file, contents).unwrap();\n+    anyhow::bail!(\"some file were not up to date\")\n+}\n+\n+fn normalize_newlines(s: &str) -> String {\n+    s.replace(\"\\r\\n\", \"\\n\")\n }\n \n const PREAMBLE: &str = \"Generated file, do not edit by hand, see `xtask/src/codegen`\";"}, {"sha": "158680993f2561cfbdd4b642b4ccd886a96c1bf4", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -2,22 +2,25 @@\n \n use std::{fmt, path::Path};\n \n+use xshell::write_file;\n+\n use crate::{\n-    codegen::{self, extract_comment_blocks_with_empty_lines, reformat, Location, Mode, PREAMBLE},\n+    codegen::{self, extract_comment_blocks_with_empty_lines, reformat, Location, PREAMBLE},\n     project_root, rust_files_in, Result,\n };\n \n-pub(crate) fn generate_assists_tests(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_assists_tests() -> Result<()> {\n     let assists = Assist::collect()?;\n-    generate_tests(&assists, mode)\n+    generate_tests(&assists)\n }\n \n-pub(crate) fn generate_assists_docs(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_assists_docs() -> Result<()> {\n     let assists = Assist::collect()?;\n     let contents = assists.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n     let contents = format!(\"//{}\\n{}\\n\", PREAMBLE, contents.trim());\n     let dst = project_root().join(\"docs/user/generated_assists.adoc\");\n-    codegen::update(&dst, &contents, mode)\n+    write_file(dst, &contents)?;\n+    Ok(())\n }\n \n #[derive(Debug)]\n@@ -111,7 +114,7 @@ impl fmt::Display for Assist {\n     }\n }\n \n-fn generate_tests(assists: &[Assist], mode: Mode) -> Result<()> {\n+fn generate_tests(assists: &[Assist]) -> Result<()> {\n     let mut buf = String::from(\"use super::check_doc_test;\\n\");\n \n     for assist in assists.iter() {\n@@ -135,7 +138,10 @@ r#####\"\n         buf.push_str(&test)\n     }\n     let buf = reformat(&buf)?;\n-    codegen::update(&project_root().join(\"crates/ide_assists/src/tests/generated.rs\"), &buf, mode)\n+    codegen::ensure_file_contents(\n+        &project_root().join(\"crates/ide_assists/src/tests/generated.rs\"),\n+        &buf,\n+    )\n }\n \n fn hide_hash_comments(text: &str) -> String {"}, {"sha": "9cf4d0a88a3e4d534bf93e4eecc81aa23d4f3f1b", "filename": "xtask/src/codegen/gen_diagnostic_docs.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -2,18 +2,20 @@\n \n use std::{fmt, path::PathBuf};\n \n+use xshell::write_file;\n+\n use crate::{\n-    codegen::{self, extract_comment_blocks_with_empty_lines, Location, Mode, PREAMBLE},\n+    codegen::{extract_comment_blocks_with_empty_lines, Location, PREAMBLE},\n     project_root, rust_files, Result,\n };\n \n-pub(crate) fn generate_diagnostic_docs(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_diagnostic_docs() -> Result<()> {\n     let diagnostics = Diagnostic::collect()?;\n     let contents =\n         diagnostics.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n     let contents = format!(\"//{}\\n{}\\n\", PREAMBLE, contents.trim());\n     let dst = project_root().join(\"docs/user/generated_diagnostic.adoc\");\n-    codegen::update(&dst, &contents, mode)?;\n+    write_file(&dst, &contents)?;\n     Ok(())\n }\n "}, {"sha": "c373d7d70f55745365058b49e87e219230750f99", "filename": "xtask/src/codegen/gen_feature_docs.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -2,17 +2,19 @@\n \n use std::{fmt, path::PathBuf};\n \n+use xshell::write_file;\n+\n use crate::{\n-    codegen::{self, extract_comment_blocks_with_empty_lines, Location, Mode, PREAMBLE},\n+    codegen::{extract_comment_blocks_with_empty_lines, Location, PREAMBLE},\n     project_root, rust_files, Result,\n };\n \n-pub(crate) fn generate_feature_docs(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_feature_docs() -> Result<()> {\n     let features = Feature::collect()?;\n     let contents = features.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n     let contents = format!(\"//{}\\n{}\\n\", PREAMBLE, contents.trim());\n     let dst = project_root().join(\"docs/user/generated_features.adoc\");\n-    codegen::update(&dst, &contents, mode)?;\n+    write_file(&dst, &contents)?;\n     Ok(())\n }\n "}, {"sha": "24dbc6a3959d5027a2a8bf3105ca0615d8aa0d7f", "filename": "xtask/src/codegen/gen_lint_completions.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -5,13 +5,10 @@ use std::path::{Path, PathBuf};\n use walkdir::WalkDir;\n use xshell::{cmd, read_file};\n \n-use crate::{\n-    codegen::{project_root, reformat, update, Mode, Result},\n-    run_rustfmt,\n-};\n+use crate::codegen::{ensure_file_contents, project_root, reformat, Result};\n \n-pub(crate) fn generate_lint_completions(mode: Mode) -> Result<()> {\n-    if !Path::new(\"./target/rust\").exists() {\n+pub(crate) fn generate_lint_completions() -> Result<()> {\n+    if !project_root().join(\"./target/rust\").exists() {\n         cmd!(\"git clone --depth=1 https://github.com/rust-lang/rust ./target/rust\").run()?;\n     }\n \n@@ -25,8 +22,7 @@ pub(crate) fn generate_lint_completions(mode: Mode) -> Result<()> {\n \n     let destination =\n         project_root().join(\"crates/ide_completion/src/generated_lint_completions.rs\");\n-    update(destination.as_path(), &contents, mode)?;\n-    run_rustfmt(mode)?;\n+    ensure_file_contents(destination.as_path(), &contents)?;\n \n     Ok(())\n }"}, {"sha": "096590653f96c39605c0c5ce858fe40199bae6b8", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -8,13 +8,13 @@ use std::{\n };\n \n use crate::{\n-    codegen::{extract_comment_blocks, update, Mode},\n+    codegen::{ensure_file_contents, extract_comment_blocks},\n     project_root, Result,\n };\n \n-pub(crate) fn generate_parser_tests(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_parser_tests() -> Result<()> {\n     let tests = tests_from_dir(&project_root().join(Path::new(\"crates/parser/src/grammar\")))?;\n-    fn install_tests(tests: &HashMap<String, Test>, into: &str, mode: Mode) -> Result<()> {\n+    fn install_tests(tests: &HashMap<String, Test>, into: &str) -> Result<()> {\n         let tests_dir = project_root().join(into);\n         if !tests_dir.is_dir() {\n             fs::create_dir_all(&tests_dir)?;\n@@ -35,12 +35,12 @@ pub(crate) fn generate_parser_tests(mode: Mode) -> Result<()> {\n                     tests_dir.join(file_name)\n                 }\n             };\n-            update(&path, &test.text, mode)?;\n+            ensure_file_contents(&path, &test.text)?;\n         }\n         Ok(())\n     }\n-    install_tests(&tests.ok, \"crates/syntax/test_data/parser/inline/ok\", mode)?;\n-    install_tests(&tests.err, \"crates/syntax/test_data/parser/inline/err\", mode)\n+    install_tests(&tests.ok, \"crates/syntax/test_data/parser/inline/ok\")?;\n+    install_tests(&tests.err, \"crates/syntax/test_data/parser/inline/err\")\n }\n \n #[derive(Debug)]"}, {"sha": "80f26e8f59c3947a22e5368494d4861344b1a5da", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -14,25 +14,25 @@ use ungrammar::{rust_grammar, Grammar, Rule};\n \n use crate::{\n     ast_src::{AstEnumSrc, AstNodeSrc, AstSrc, Cardinality, Field, KindsSrc, KINDS_SRC},\n-    codegen::{reformat, update, Mode},\n+    codegen::{ensure_file_contents, reformat},\n     project_root, Result,\n };\n \n-pub(crate) fn generate_syntax(mode: Mode) -> Result<()> {\n+pub(crate) fn generate_syntax() -> Result<()> {\n     let grammar = rust_grammar();\n     let ast = lower(&grammar);\n \n     let syntax_kinds_file = project_root().join(\"crates/parser/src/syntax_kind/generated.rs\");\n     let syntax_kinds = generate_syntax_kinds(KINDS_SRC)?;\n-    update(syntax_kinds_file.as_path(), &syntax_kinds, mode)?;\n+    ensure_file_contents(syntax_kinds_file.as_path(), &syntax_kinds)?;\n \n     let ast_tokens_file = project_root().join(\"crates/syntax/src/ast/generated/tokens.rs\");\n     let contents = generate_tokens(&ast)?;\n-    update(ast_tokens_file.as_path(), &contents, mode)?;\n+    ensure_file_contents(ast_tokens_file.as_path(), &contents)?;\n \n     let ast_nodes_file = project_root().join(\"crates/syntax/src/ast/generated/nodes.rs\");\n     let contents = generate_nodes(KINDS_SRC, &ast)?;\n-    update(ast_nodes_file.as_path(), &contents, mode)?;\n+    ensure_file_contents(ast_nodes_file.as_path(), &contents)?;\n \n     Ok(())\n }"}, {"sha": "48d1ad45e807a6cb0aa650e12c35f98d310c2b76", "filename": "xtask/src/flags.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fflags.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -27,10 +27,6 @@ xflags::xflags! {\n             optional --jemalloc\n         }\n \n-        cmd codegen {\n-            optional --features\n-        }\n-\n         cmd lint {}\n         cmd fuzz-tests {}\n         cmd pre-cache {}\n@@ -67,7 +63,6 @@ pub struct Xtask {\n pub enum XtaskCmd {\n     Help(Help),\n     Install(Install),\n-    Codegen(Codegen),\n     Lint(Lint),\n     FuzzTests(FuzzTests),\n     PreCache(PreCache),\n@@ -92,11 +87,6 @@ pub struct Install {\n     pub jemalloc: bool,\n }\n \n-#[derive(Debug)]\n-pub struct Codegen {\n-    pub features: bool,\n-}\n-\n #[derive(Debug)]\n pub struct Lint;\n "}, {"sha": "35cc7c10888e1a262f0efca121423b47b26ba9d0", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -28,7 +28,7 @@ use std::{\n use walkdir::{DirEntry, WalkDir};\n use xshell::{cmd, cp, pushd, pushenv};\n \n-use crate::{codegen::Mode, dist::DistCmd};\n+use crate::dist::DistCmd;\n \n fn main() -> Result<()> {\n     let _d = pushd(project_root())?;\n@@ -40,7 +40,6 @@ fn main() -> Result<()> {\n             return Ok(());\n         }\n         flags::XtaskCmd::Install(cmd) => cmd.run(),\n-        flags::XtaskCmd::Codegen(cmd) => cmd.run(),\n         flags::XtaskCmd::Lint(_) => run_clippy(),\n         flags::XtaskCmd::FuzzTests(_) => run_fuzzer(),\n         flags::XtaskCmd::PreCache(cmd) => cmd.run(),\n@@ -85,18 +84,6 @@ fn rust_files_in(path: &Path) -> impl Iterator<Item = PathBuf> {\n     files_in(path, \"rs\")\n }\n \n-fn run_rustfmt(mode: Mode) -> Result<()> {\n-    let _dir = pushd(project_root())?;\n-    let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"stable\");\n-    ensure_rustfmt()?;\n-    let check = match mode {\n-        Mode::Overwrite => &[][..],\n-        Mode::Verify => &[\"--\", \"--check\"],\n-    };\n-    cmd!(\"cargo fmt {check...}\").run()?;\n-    Ok(())\n-}\n-\n fn ensure_rustfmt() -> Result<()> {\n     let out = cmd!(\"rustfmt --version\").read()?;\n     if !out.contains(\"stable\") {"}, {"sha": "dde5d14ee548d963356a781576922223c6f6055e", "filename": "xtask/src/release.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Frelease.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Frelease.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -2,7 +2,7 @@ use std::fmt::Write;\n \n use xshell::{cmd, cp, pushd, read_dir, write_file};\n \n-use crate::{codegen, date_iso, flags, is_release_tag, project_root, Mode, Result};\n+use crate::{codegen, date_iso, flags, is_release_tag, project_root, Result};\n \n impl flags::Release {\n     pub(crate) fn run(self) -> Result<()> {\n@@ -12,8 +12,7 @@ impl flags::Release {\n             cmd!(\"git reset --hard tags/nightly\").run()?;\n             cmd!(\"git push\").run()?;\n         }\n-        codegen::generate_assists_docs(Mode::Overwrite)?;\n-        codegen::generate_feature_docs(Mode::Overwrite)?;\n+        codegen::docs()?;\n \n         let website_root = project_root().join(\"../rust-analyzer.github.io\");\n         let changelog_dir = website_root.join(\"./thisweek/_posts\");"}, {"sha": "1352d12189b63bd653970b91b2267ed11f525b28", "filename": "xtask/src/tidy.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e82b012c417ec40a896203ad79f20cf5530ef/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=8b7e82b012c417ec40a896203ad79f20cf5530ef", "patch": "@@ -3,48 +3,48 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use xshell::{cmd, read_file};\n+use xshell::{cmd, pushd, pushenv, read_file};\n \n-use crate::{\n-    cargo_files,\n-    codegen::{self, Mode},\n-    project_root, run_rustfmt, rust_files,\n-};\n+use crate::{cargo_files, codegen, project_root, rust_files};\n \n #[test]\n-fn generated_grammar_is_fresh() {\n-    if let Err(error) = codegen::generate_syntax(Mode::Verify) {\n-        panic!(\"{}. Please update it by running `cargo xtask codegen`\", error);\n-    }\n+fn generate_grammar() {\n+    codegen::generate_syntax().unwrap()\n }\n \n #[test]\n-fn generated_tests_are_fresh() {\n-    if let Err(error) = codegen::generate_parser_tests(Mode::Verify) {\n-        panic!(\"{}. Please update tests by running `cargo xtask codegen`\", error);\n-    }\n+fn generate_parser_tests() {\n+    codegen::generate_parser_tests().unwrap()\n }\n \n #[test]\n-fn generated_assists_are_fresh() {\n-    if let Err(error) = codegen::generate_assists_tests(Mode::Verify) {\n-        panic!(\"{}. Please update assists by running `cargo xtask codegen`\", error);\n-    }\n+fn generate_assists_tests() {\n+    codegen::generate_assists_tests().unwrap();\n+}\n+\n+/// This clones rustc repo, and so is not worth to keep up-to-date. We update\n+/// manually by un-ignoring the test from time to time.\n+#[test]\n+#[ignore]\n+fn generate_lint_completions() {\n+    codegen::generate_lint_completions().unwrap()\n }\n \n #[test]\n fn check_code_formatting() {\n-    if let Err(error) = run_rustfmt(Mode::Verify) {\n-        panic!(\"{}. Please format the code by running `cargo format`\", error);\n+    let _dir = pushd(project_root()).unwrap();\n+    let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"stable\");\n+    crate::ensure_rustfmt().unwrap();\n+    let res = cmd!(\"cargo fmt -- --check\").run();\n+    if !res.is_ok() {\n+        let _ = cmd!(\"cargo fmt\").run();\n     }\n+    res.unwrap()\n }\n \n #[test]\n-fn smoke_test_docs_generation() {\n-    // We don't commit docs to the repo, so we can just overwrite in tests.\n-    codegen::generate_assists_docs(Mode::Overwrite).unwrap();\n-    codegen::generate_feature_docs(Mode::Overwrite).unwrap();\n-    codegen::generate_diagnostic_docs(Mode::Overwrite).unwrap();\n+fn smoke_test_generate_documentation() {\n+    codegen::docs().unwrap()\n }\n \n #[test]"}]}