{"sha": "6387eda3ba51acfcd27aa46429dc94cb66ae73a3", "node_id": "C_kwDOAAsO6NoAKDYzODdlZGEzYmE1MWFjZmNkMjdhYTQ2NDI5ZGM5NGNiNjZhZTczYTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-04T06:09:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-04T06:09:05Z"}, "message": "Rollup merge of #111027 - clubby789:query-instability-builtin-macros, r=petrochenkov\n\nRemove `allow(rustc::potential_query_instability)` for `builtin_macros`\n\ncc #84447", "tree": {"sha": "e822219cca29cb25bef921803e561d53a4f6dce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e822219cca29cb25bef921803e561d53a4f6dce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6387eda3ba51acfcd27aa46429dc94cb66ae73a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkU0wBCRBK7hj4Ov3rIwAAJ6YIAHVsr0/vhRvmD91iP4kuDkle\nrju6aqBhGFijTXpN4fl7GfBMEh6+OJV1LMUn9iX7+t4TBGziFXheufnERIVkquYx\nNAMcwlc1TzZaNGPVEgbejpMGO/pP5C+gvw2b9alCR7LYsSgWfG/npIx/m9zO+8sT\nwPzc42W9s1UC/6P3fw1PLSU5YLWbFmBpMoN3+vRqXMyXhG8SALYrdEKYIT/yeJ87\nnth7dp/rr/Yx5LfaxHJ6T12jmOT0M+bEUwP8EWHw9/6RBlkSGSpoleL3KiUnfHIS\nZ9btk3vuzj1eeZ0cXqzWyThU6HQd8fAiOe1LSeMQw5e2lh6emKFD9QNCV7oycUE=\n=+wk3\n-----END PGP SIGNATURE-----\n", "payload": "tree e822219cca29cb25bef921803e561d53a4f6dce6\nparent 3ce6dd2a54a3045c03aab3e25837ed8914240a65\nparent e3e93f28679b58c28c02720d2281f1a79751394e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683180545 +0200\ncommitter GitHub <noreply@github.com> 1683180545 +0200\n\nRollup merge of #111027 - clubby789:query-instability-builtin-macros, r=petrochenkov\n\nRemove `allow(rustc::potential_query_instability)` for `builtin_macros`\n\ncc #84447\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6387eda3ba51acfcd27aa46429dc94cb66ae73a3", "html_url": "https://github.com/rust-lang/rust/commit/6387eda3ba51acfcd27aa46429dc94cb66ae73a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6387eda3ba51acfcd27aa46429dc94cb66ae73a3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ce6dd2a54a3045c03aab3e25837ed8914240a65", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce6dd2a54a3045c03aab3e25837ed8914240a65", "html_url": "https://github.com/rust-lang/rust/commit/3ce6dd2a54a3045c03aab3e25837ed8914240a65"}, {"sha": "e3e93f28679b58c28c02720d2281f1a79751394e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3e93f28679b58c28c02720d2281f1a79751394e", "html_url": "https://github.com/rust-lang/rust/commit/e3e93f28679b58c28c02720d2281f1a79751394e"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "c368b4a79d3fd4254d7ea0ad188294deb7505c24", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6387eda3ba51acfcd27aa46429dc94cb66ae73a3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6387eda3ba51acfcd27aa46429dc94cb66ae73a3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6387eda3ba51acfcd27aa46429dc94cb66ae73a3", "patch": "@@ -3165,6 +3165,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_fluent_macro\",\n+ \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_lint_defs\",\n  \"rustc_macros\","}, {"sha": "44012e802aa7bb472e8a864e756e2dd70621daaf", "filename": "compiler/rustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6387eda3ba51acfcd27aa46429dc94cb66ae73a3/compiler%2Frustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6387eda3ba51acfcd27aa46429dc94cb66ae73a3/compiler%2Frustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2FCargo.toml?ref=6387eda3ba51acfcd27aa46429dc94cb66ae73a3", "patch": "@@ -14,6 +14,7 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_expand = { path = \"../rustc_expand\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_index = { path = \"../rustc_index\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_macros = { path = \"../rustc_macros\" }"}, {"sha": "bb059a120df37bc0f242c46f70c1842b1c55c7a7", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6387eda3ba51acfcd27aa46429dc94cb66ae73a3/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6387eda3ba51acfcd27aa46429dc94cb66ae73a3/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=6387eda3ba51acfcd27aa46429dc94cb66ae73a3", "patch": "@@ -2,9 +2,10 @@ use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter};\n use rustc_ast::tokenstream::TokenStream;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n+use rustc_index::bit_set::GrowableBitSet;\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n use rustc_session::lint;\n@@ -20,8 +21,8 @@ use crate::errors;\n pub struct AsmArgs {\n     pub templates: Vec<P<ast::Expr>>,\n     pub operands: Vec<(ast::InlineAsmOperand, Span)>,\n-    named_args: FxHashMap<Symbol, usize>,\n-    reg_args: FxHashSet<usize>,\n+    named_args: FxIndexMap<Symbol, usize>,\n+    reg_args: GrowableBitSet<usize>,\n     pub clobber_abis: Vec<(Symbol, Span)>,\n     options: ast::InlineAsmOptions,\n     pub options_spans: Vec<Span>,\n@@ -56,8 +57,8 @@ pub fn parse_asm_args<'a>(\n     let mut args = AsmArgs {\n         templates: vec![first_template],\n         operands: vec![],\n-        named_args: FxHashMap::default(),\n-        reg_args: FxHashSet::default(),\n+        named_args: Default::default(),\n+        reg_args: Default::default(),\n         clobber_abis: Vec::new(),\n         options: ast::InlineAsmOptions::empty(),\n         options_spans: vec![],\n@@ -213,7 +214,7 @@ pub fn parse_asm_args<'a>(\n         } else {\n             if !args.named_args.is_empty() || !args.reg_args.is_empty() {\n                 let named = args.named_args.values().map(|p| args.operands[*p].1).collect();\n-                let explicit = args.reg_args.iter().map(|p| args.operands[*p].1).collect();\n+                let explicit = args.reg_args.iter().map(|p| args.operands[p].1).collect();\n \n                 diag.emit_err(errors::AsmPositionalAfter { span, named, explicit });\n             }\n@@ -446,8 +447,8 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n     // Register operands are implicitly used since they are not allowed to be\n     // referenced in the template string.\n     let mut used = vec![false; args.operands.len()];\n-    for pos in &args.reg_args {\n-        used[*pos] = true;\n+    for pos in args.reg_args.iter() {\n+        used[pos] = true;\n     }\n     let named_pos: FxHashMap<usize, Symbol> =\n         args.named_args.iter().map(|(&sym, &idx)| (idx, sym)).collect();\n@@ -581,7 +582,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                         parse::ArgumentIs(idx) | parse::ArgumentImplicitlyIs(idx) => {\n                             if idx >= args.operands.len()\n                                 || named_pos.contains_key(&idx)\n-                                || args.reg_args.contains(&idx)\n+                                || args.reg_args.contains(idx)\n                             {\n                                 let msg = format!(\"invalid reference to argument at index {}\", idx);\n                                 let mut err = ecx.struct_span_err(span, &msg);\n@@ -608,7 +609,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                                         args.operands[idx].1,\n                                         \"named arguments cannot be referenced by position\",\n                                     );\n-                                } else if args.reg_args.contains(&idx) {\n+                                } else if args.reg_args.contains(idx) {\n                                     err.span_label(\n                                         args.operands[idx].1,\n                                         \"explicit register argument\","}, {"sha": "c7da61d72b384456a69da66bf8c90dd73b4c561c", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6387eda3ba51acfcd27aa46429dc94cb66ae73a3/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6387eda3ba51acfcd27aa46429dc94cb66ae73a3/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=6387eda3ba51acfcd27aa46429dc94cb66ae73a3", "patch": "@@ -1,7 +1,6 @@\n //! This crate contains implementations of built-in macros and other code generating facilities\n //! injecting code into the crate before it is lowered to HIR.\n \n-#![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n #![feature(box_patterns)]"}]}