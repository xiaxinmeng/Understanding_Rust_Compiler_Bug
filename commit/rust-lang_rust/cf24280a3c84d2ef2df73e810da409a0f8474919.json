{"sha": "cf24280a3c84d2ef2df73e810da409a0f8474919", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMjQyODBhM2M4NGQyZWYyZGY3M2U4MTBkYTQwOWEwZjg0NzQ5MTk=", "commit": {"author": {"name": "Andrei Formiga", "email": "archimedes_siracusa@hotmail.com", "date": "2013-11-08T19:51:40Z"}, "committer": {"name": "Andrei Formiga", "email": "archimedes_siracusa@hotmail.com", "date": "2013-11-08T20:42:46Z"}, "message": "Added default value for package_id attribute when encoding metadata for lib crates", "tree": {"sha": "df6c51de1a248ed9edf7d1e4dc7e8a0ebbef9ddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df6c51de1a248ed9edf7d1e4dc7e8a0ebbef9ddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf24280a3c84d2ef2df73e810da409a0f8474919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf24280a3c84d2ef2df73e810da409a0f8474919", "html_url": "https://github.com/rust-lang/rust/commit/cf24280a3c84d2ef2df73e810da409a0f8474919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf24280a3c84d2ef2df73e810da409a0f8474919/comments", "author": {"login": "tautologico", "id": 62906, "node_id": "MDQ6VXNlcjYyOTA2", "avatar_url": "https://avatars.githubusercontent.com/u/62906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tautologico", "html_url": "https://github.com/tautologico", "followers_url": "https://api.github.com/users/tautologico/followers", "following_url": "https://api.github.com/users/tautologico/following{/other_user}", "gists_url": "https://api.github.com/users/tautologico/gists{/gist_id}", "starred_url": "https://api.github.com/users/tautologico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tautologico/subscriptions", "organizations_url": "https://api.github.com/users/tautologico/orgs", "repos_url": "https://api.github.com/users/tautologico/repos", "events_url": "https://api.github.com/users/tautologico/events{/privacy}", "received_events_url": "https://api.github.com/users/tautologico/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tautologico", "id": 62906, "node_id": "MDQ6VXNlcjYyOTA2", "avatar_url": "https://avatars.githubusercontent.com/u/62906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tautologico", "html_url": "https://github.com/tautologico", "followers_url": "https://api.github.com/users/tautologico/followers", "following_url": "https://api.github.com/users/tautologico/following{/other_user}", "gists_url": "https://api.github.com/users/tautologico/gists{/gist_id}", "starred_url": "https://api.github.com/users/tautologico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tautologico/subscriptions", "organizations_url": "https://api.github.com/users/tautologico/orgs", "repos_url": "https://api.github.com/users/tautologico/repos", "events_url": "https://api.github.com/users/tautologico/events{/privacy}", "received_events_url": "https://api.github.com/users/tautologico/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffcbd8d767bec1382e401120f01f94fce8851ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcbd8d767bec1382e401120f01f94fce8851ced", "html_url": "https://github.com/rust-lang/rust/commit/ffcbd8d767bec1382e401120f01f94fce8851ced"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "b88966c0ab29695438c0e34aff34716c7295d58b", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf24280a3c84d2ef2df73e810da409a0f8474919/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf24280a3c84d2ef2df73e810da409a0f8474919/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=cf24280a3c84d2ef2df73e810da409a0f8474919", "patch": "@@ -634,20 +634,12 @@ pub fn build_link_meta(sess: Session,\n         }\n     }\n \n-    fn crate_meta_pkgid(sess: Session, output: &Path, opt_pkg_id: Option<@str>)\n+    fn crate_meta_pkgid(sess: Session, name: @str, opt_pkg_id: Option<@str>)\n         -> @str {\n         match opt_pkg_id {\n             Some(v) if !v.is_empty() => v,\n             _ => {\n-                let pkg_id = session::expect(sess,\n-                                             output.filestem_str(),\n-                                             || format!(\"output file name `{}` doesn't\\\n-                                                      appear to have a stem\",\n-                                                     output.display())).to_managed();\n-                if pkg_id.is_empty() {\n-                    sess.fatal(\"missing crate link meta `package_id`, and the \\\n-                                inferred name is blank\");\n-                }\n+                let pkg_id = name.clone();\n                 warn_missing(sess, \"package_id\", pkg_id);\n                 pkg_id\n             }\n@@ -662,7 +654,7 @@ pub fn build_link_meta(sess: Session,\n     } = provided_link_metas(sess, c);\n     let name = crate_meta_name(sess, output, opt_name);\n     let vers = crate_meta_vers(sess, opt_vers);\n-    let pkg_id = crate_meta_pkgid(sess, output, opt_pkg_id);\n+    let pkg_id = crate_meta_pkgid(sess, name, opt_pkg_id);\n     let dep_hashes = cstore::get_dep_hashes(sess.cstore);\n     let extras_hash =\n         crate_meta_extras_hash(symbol_hasher, cmh_items,"}, {"sha": "0f328d337480d2caaae5c66b6cc44d9fa9eb732e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf24280a3c84d2ef2df73e810da409a0f8474919/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf24280a3c84d2ef2df73e810da409a0f8474919/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=cf24280a3c84d2ef2df73e810da409a0f8474919", "patch": "@@ -1487,8 +1487,8 @@ fn encode_attributes(ebml_w: &mut writer::Encoder, attrs: &[Attribute]) {\n \n // So there's a special crate attribute called 'link' which defines the\n // metadata that Rust cares about for linking crates. This attribute requires\n-// 'name' and 'vers' items, so if the user didn't provide them we will throw\n-// them in anyway with default values.\n+// 'name', 'vers' and 'package_id' items, so if the user didn't provide them we\n+// will throw them in anyway with default values.\n fn synthesize_crate_attrs(ecx: &EncodeContext,\n                           crate: &Crate) -> ~[Attribute] {\n \n@@ -1505,9 +1505,20 @@ fn synthesize_crate_attrs(ecx: &EncodeContext,\n             attr::mk_name_value_item_str(@\"vers\",\n                                          ecx.link_meta.vers);\n \n-        let mut meta_items = ~[name_item, vers_item];\n+        let pkgid_item = match ecx.link_meta.package_id {\n+                Some(pkg_id) =>  attr::mk_name_value_item_str(@\"package_id\",\n+                                                              pkg_id),\n+                // uses package_id equal to name;\n+                // this should never happen here but package_id is an Option\n+                // FIX: change package_id in LinkMeta to @str instead of Option<@str>\n+                _ => attr::mk_name_value_item_str(@\"package_id\",\n+                                                  ecx.link_meta.name)\n+        };\n+\n+        let mut meta_items = ~[name_item, vers_item, pkgid_item];\n \n-        for &mi in items.iter().filter(|mi| \"name\" != mi.name() && \"vers\" != mi.name()) {\n+        for &mi in items.iter().filter(|mi| \"name\" != mi.name() && \"vers\" != mi.name() &&\n+                                            \"package_id\" != mi.name()) {\n             meta_items.push(mi);\n         }\n         let link_item = attr::mk_list_item(@\"link\", meta_items);"}]}