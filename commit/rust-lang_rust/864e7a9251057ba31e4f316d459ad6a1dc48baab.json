{"sha": "864e7a9251057ba31e4f316d459ad6a1dc48baab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NGU3YTkyNTEwNTdiYTMxZTRmMzE2ZDQ1OWFkNmExZGM0OGJhYWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-20T21:03:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-20T21:03:06Z"}, "message": "Rollup merge of #60952 - dtolnay:heap, r=Amanieu\n\nDocument BinaryHeap time complexity\n\nI went into some detail on the time complexity of `push` because it is relevant for using BinaryHeap efficiently -- specifically that you should avoid pushing many elements in ascending order when possible.\n\nr? @Amanieu\nCloses #47976. Closes #59698.", "tree": {"sha": "7cf78c3370f78e5c8d4ecc7f8256d8ee02b7e4c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cf78c3370f78e5c8d4ecc7f8256d8ee02b7e4c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/864e7a9251057ba31e4f316d459ad6a1dc48baab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc4xYKCRBK7hj4Ov3rIwAAdHIIAFNW7vltvriV+MZle9oyf+ZY\npLRLC7btM+YehDqf9IMhBPhV8eiTKPliamAbuiGtnEy9sdJQHWpt+Hc41erhCFXL\nzxztHCcgz9tqs77wSL5XmEtlC47cZ1MrS7mRn3hpivE1Gc0AfUKzk8aqd1WN+0e0\nyX3VkevWdK+7vbhCwouCgBo+3LbaGfsfprUF5/BI6ER2qLS6rusoKjVx8Crx0Up2\n3/aVP5HyMOf+f2JlP04pT1erJt76ZpRkh+vXwj0sGWi7ciiBggBJnHWAybMNFY19\nXlPlToid6LVJ7cU2qlAgPavxqAlT0CsVL8RqddeuKrWqQiSdY4UpbC5+ItzH2oc=\n=rRQk\n-----END PGP SIGNATURE-----\n", "payload": "tree 7cf78c3370f78e5c8d4ecc7f8256d8ee02b7e4c6\nparent 65cec43ce10ce0ca33fcd34014bdb0812ddea02f\nparent ea7aa76911b6b896d503a812b26bfd6227fa90d9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558386186 +0200\ncommitter GitHub <noreply@github.com> 1558386186 +0200\n\nRollup merge of #60952 - dtolnay:heap, r=Amanieu\n\nDocument BinaryHeap time complexity\n\nI went into some detail on the time complexity of `push` because it is relevant for using BinaryHeap efficiently -- specifically that you should avoid pushing many elements in ascending order when possible.\n\nr? @Amanieu\nCloses #47976. Closes #59698.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/864e7a9251057ba31e4f316d459ad6a1dc48baab", "html_url": "https://github.com/rust-lang/rust/commit/864e7a9251057ba31e4f316d459ad6a1dc48baab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/864e7a9251057ba31e4f316d459ad6a1dc48baab/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65cec43ce10ce0ca33fcd34014bdb0812ddea02f", "url": "https://api.github.com/repos/rust-lang/rust/commits/65cec43ce10ce0ca33fcd34014bdb0812ddea02f", "html_url": "https://github.com/rust-lang/rust/commit/65cec43ce10ce0ca33fcd34014bdb0812ddea02f"}, {"sha": "ea7aa76911b6b896d503a812b26bfd6227fa90d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7aa76911b6b896d503a812b26bfd6227fa90d9", "html_url": "https://github.com/rust-lang/rust/commit/ea7aa76911b6b896d503a812b26bfd6227fa90d9"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "c5a0b6e877b65f124f61e925ab8989c5e02547e1", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/864e7a9251057ba31e4f316d459ad6a1dc48baab/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864e7a9251057ba31e4f316d459ad6a1dc48baab/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=864e7a9251057ba31e4f316d459ad6a1dc48baab", "patch": "@@ -231,6 +231,20 @@ use super::SpecExtend;\n /// assert_eq!(heap.pop(), Some(Reverse(5)));\n /// assert_eq!(heap.pop(), None);\n /// ```\n+///\n+/// # Time complexity\n+///\n+/// | [push] | [pop]    | [peek]/[peek\\_mut] |\n+/// |--------|----------|--------------------|\n+/// | O(1)~  | O(log n) | O(1)               |\n+///\n+/// The value for `push` is an expected cost; the method documentation gives a\n+/// more detailed analysis.\n+///\n+/// [push]: #method.push\n+/// [pop]: #method.pop\n+/// [peek]: #method.peek\n+/// [peek\\_mut]: #method.peek_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BinaryHeap<T> {\n     data: Vec<T>,\n@@ -384,6 +398,10 @@ impl<T: Ord> BinaryHeap<T> {\n     /// }\n     /// assert_eq!(heap.peek(), Some(&2));\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// Cost is O(1) in the worst case.\n     #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n     pub fn peek_mut(&mut self) -> Option<PeekMut<'_, T>> {\n         if self.is_empty() {\n@@ -411,6 +429,11 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert_eq!(heap.pop(), Some(1));\n     /// assert_eq!(heap.pop(), None);\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// The worst case cost of `pop` on a heap containing *n* elements is O(log\n+    /// n).\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pop(&mut self) -> Option<T> {\n         self.data.pop().map(|mut item| {\n@@ -438,6 +461,22 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert_eq!(heap.len(), 3);\n     /// assert_eq!(heap.peek(), Some(&5));\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// The expected cost of `push`, averaged over every possible ordering of\n+    /// the elements being pushed, and over a sufficiently large number of\n+    /// pushes, is O(1). This is the most meaningful cost metric when pushing\n+    /// elements that are *not* already in any sorted pattern.\n+    ///\n+    /// The time complexity degrades if elements are pushed in predominantly\n+    /// ascending order. In the worst case, elements are pushed in ascending\n+    /// sorted order and the amortized cost per push is O(log n) against a heap\n+    /// containing *n* elements.\n+    ///\n+    /// The worst case cost of a *single* call to `push` is O(n). The worst case\n+    /// occurs when capacity is exhausted and needs a resize. The resize cost\n+    /// has been amortized in the previous figures.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push(&mut self, item: T) {\n         let old_len = self.len();\n@@ -650,6 +689,10 @@ impl<T> BinaryHeap<T> {\n     /// assert_eq!(heap.peek(), Some(&5));\n     ///\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// Cost is O(1) in the worst case.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn peek(&self) -> Option<&T> {\n         self.data.get(0)"}]}