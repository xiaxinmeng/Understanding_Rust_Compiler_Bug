{"sha": "8124846b2c945f661a6bb85e66e22ca987891dc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMjQ4NDZiMmM5NDVmNjYxYTZiYjg1ZTY2ZTIyY2E5ODc4OTFkYzQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-20T09:56:45Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-20T12:22:17Z"}, "message": "Get rid of taskpointer-passing throughout the compiler\n\nOnly intrinsics still take a dummy taskptr. We'll have to do some\nmakefile stunts to snapshot a version without taskptrs-in-intrinsics.\n\nIssue #466", "tree": {"sha": "a299fea71192b2716e063a7098e5c6b6850967bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a299fea71192b2716e063a7098e5c6b6850967bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8124846b2c945f661a6bb85e66e22ca987891dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8124846b2c945f661a6bb85e66e22ca987891dc4", "html_url": "https://github.com/rust-lang/rust/commit/8124846b2c945f661a6bb85e66e22ca987891dc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8124846b2c945f661a6bb85e66e22ca987891dc4/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "457683c7feef42f07f3044ccfdc8ee7816176ab0", "url": "https://api.github.com/repos/rust-lang/rust/commits/457683c7feef42f07f3044ccfdc8ee7816176ab0", "html_url": "https://github.com/rust-lang/rust/commit/457683c7feef42f07f3044ccfdc8ee7816176ab0"}], "stats": {"total": 132, "additions": 52, "deletions": 80}, "files": [{"sha": "2589247e2cdad04bd609106e30636c64b0d51eb5", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=8124846b2c945f661a6bb85e66e22ca987891dc4", "patch": "@@ -31,7 +31,7 @@ type upcalls =\n      rust_personality: ValueRef};\n \n fn declare_upcalls(_tn: type_names, tydesc_type: TypeRef,\n-                   taskptr_type: TypeRef, llmod: ModuleRef) -> @upcalls {\n+                   llmod: ModuleRef) -> @upcalls {\n     fn decl(llmod: ModuleRef, name: str, tys: [TypeRef], rv: TypeRef) ->\n        ValueRef {\n         let arg_tys: [TypeRef] = [];\n@@ -63,7 +63,7 @@ fn declare_upcalls(_tn: type_names, tydesc_type: TypeRef,\n                   T_ptr(T_i8())]),\n           cmp_type:\n               dv(\"cmp_type\",\n-                 [T_ptr(T_i1()), taskptr_type, T_ptr(tydesc_type),\n+                 [T_ptr(T_i1()), T_ptr(tydesc_type),\n                   T_ptr(T_ptr(tydesc_type)), T_ptr(T_i8()), T_ptr(T_i8()),\n                   T_i8()]),\n           log_type:"}, {"sha": "83d1de8bfaf047e3a5524a6825e50bf305449c69", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 26, "deletions": 51, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=8124846b2c945f661a6bb85e66e22ca987891dc4", "patch": "@@ -92,10 +92,7 @@ fn type_of_fn(cx: @crate_ctxt, sp: span, proto: ast::proto,\n     let out_ty = T_ptr(type_of_inner(cx, sp, output));\n     atys += [ret_ref ? T_ptr(out_ty) : out_ty];\n \n-    // Arg 1: task pointer.\n-    atys += [T_taskptr(*cx)];\n-\n-    // Arg 2: Env (closure-bindings / self-obj)\n+    // Arg 1: Env (closure-bindings / self-obj)\n     if is_method {\n         atys += [T_ptr(cx.rust_object_type)];\n     } else {\n@@ -109,7 +106,7 @@ fn type_of_fn(cx: @crate_ctxt, sp: span, proto: ast::proto,\n         }\n     }\n \n-    // Args >3: ty params, if not acquired via capture...\n+    // Args >2: ty params, if not acquired via capture...\n     if !is_method {\n         let i = 0u;\n         while i < ty_param_count { atys += [T_ptr(cx.tydesc_type)]; i += 1u; }\n@@ -349,10 +346,6 @@ fn decl_internal_cdecl_fn(llmod: ModuleRef, name: str, llty: TypeRef) ->\n     ret llfn;\n }\n \n-fn decl_glue(llmod: ModuleRef, cx: crate_ctxt, s: str) -> ValueRef {\n-    ret decl_cdecl_fn(llmod, s, T_fn([T_taskptr(cx)], T_void()));\n-}\n-\n fn get_extern_fn(externs: hashmap<str, ValueRef>, llmod: ModuleRef, name: str,\n                  cc: uint, ty: TypeRef) -> ValueRef {\n     if externs.contains_key(name) { ret externs.get(name); }\n@@ -1217,7 +1210,7 @@ fn make_generic_glue_inner(cx: @local_ctxt, sp: span, t: ty::t,\n         } else { T_ptr(T_i8()) };\n \n     let ty_param_count = std::vec::len::<uint>(ty_params);\n-    let lltyparams = llvm::LLVMGetParam(llfn, 3u);\n+    let lltyparams = llvm::LLVMGetParam(llfn, 2u);\n     let load_env_bcx = new_raw_block_ctxt(fcx, fcx.llloadenv);\n     let lltydescs = [mutable];\n     let p = 0u;\n@@ -1235,12 +1228,12 @@ fn make_generic_glue_inner(cx: @local_ctxt, sp: span, t: ty::t,\n \n     let bcx = new_top_block_ctxt(fcx);\n     let lltop = bcx.llbb;\n-    let llrawptr0 = llvm::LLVMGetParam(llfn, 4u);\n+    let llrawptr0 = llvm::LLVMGetParam(llfn, 3u);\n     let llval0 = BitCast(bcx, llrawptr0, llty);\n     alt helper {\n       default_helper(helper) { helper(bcx, llval0, t); }\n       copy_helper(helper) {\n-        let llrawptr1 = llvm::LLVMGetParam(llfn, 5u);\n+        let llrawptr1 = llvm::LLVMGetParam(llfn, 4u);\n         let llval1 = BitCast(bcx, llrawptr1, llty);\n         helper(bcx, llval0, llval1, t);\n       }\n@@ -1463,7 +1456,7 @@ fn trans_res_drop(cx: @block_ctxt, rs: ValueRef, did: ast::def_id,\n     cx = val.bcx;\n     // Find and call the actual destructor.\n     let dtor_addr = trans_common::get_res_dtor(ccx, cx.sp, did, inner_t);\n-    let args = [cx.fcx.llretptr, cx.fcx.lltaskptr, null_env_ptr(cx)];\n+    let args = [cx.fcx.llretptr, null_env_ptr(cx)];\n     for tp: ty::t in tps {\n         let ti: option::t<@tydesc_info> = none;\n         let td = get_tydesc(cx, tp, false, tps_normal, ti).result;\n@@ -1888,9 +1881,8 @@ fn call_tydesc_glue_full(cx: @block_ctxt, v: ValueRef, tydesc: ValueRef,\n       some(sgf) { llfn = sgf; }\n     }\n \n-    Call(cx, llfn,\n-         [C_null(T_ptr(T_nil())), cx.fcx.lltaskptr, C_null(T_ptr(T_nil())),\n-          lltydescs, llrawptr]);\n+    Call(cx, llfn, [C_null(T_ptr(T_nil())), C_null(T_ptr(T_nil())),\n+                    lltydescs, llrawptr]);\n }\n \n fn call_tydesc_glue(cx: @block_ctxt, v: ValueRef, t: ty::t, field: int) ->\n@@ -1937,7 +1929,7 @@ fn call_cmp_glue(cx: @block_ctxt, lhs: ValueRef, rhs: ValueRef, t: ty::t,\n     }\n \n     let llcmpresultptr = alloca(bcx, T_i1());\n-    Call(bcx, llfn, [llcmpresultptr, bcx.fcx.lltaskptr, lltydesc, lltydescs,\n+    Call(bcx, llfn, [llcmpresultptr, lltydesc, lltydescs,\n                      llrawlhsptr, llrawrhsptr, llop]);\n     ret rslt(bcx, Load(bcx, llcmpresultptr));\n }\n@@ -2921,7 +2913,7 @@ fn trans_for_each(cx: @block_ctxt, local: @ast::local, seq: @ast::expr,\n     let bcx = new_top_block_ctxt(fcx);\n     // Add bindings for the loop variable alias.\n     bcx = trans_alt::bind_irrefutable_pat(bcx, local.node.pat,\n-                                          llvm::LLVMGetParam(fcx.llfn, 3u),\n+                                          llvm::LLVMGetParam(fcx.llfn, 2u),\n                                           false);\n     let lltop = bcx.llbb;\n     bcx = trans_block(bcx, body);\n@@ -3560,10 +3552,10 @@ fn trans_bind_thunk(cx: @local_ctxt, sp: span, incoming_fty: ty::t,\n     let llargs: [ValueRef] = alt ty::ty_fn_proto(ccx.tcx, outgoing_fty) {\n       ast::proto_bare. {\n         // Bare functions don't take an environment\n-        [llretptr, fcx.lltaskptr]\n+        [llretptr]\n       }\n       _ {\n-        [llretptr, fcx.lltaskptr, lltargetenv]\n+        [llretptr, lltargetenv]\n       }\n     };\n \n@@ -3583,7 +3575,7 @@ fn trans_bind_thunk(cx: @local_ctxt, sp: span, incoming_fty: ty::t,\n         i += 1u;\n     }\n \n-    let a: uint = 3u; // retptr, task ptr, env come first\n+    let a: uint = 2u; // retptr, env come first\n     let b: int = starting_idx;\n     let outgoing_arg_index: uint = 0u;\n     let llout_arg_tys: [TypeRef] =\n@@ -3847,18 +3839,15 @@ fn trans_args(cx: @block_ctxt, outer_cx: @block_ctxt, llenv: ValueRef,\n         llargs += [PointerCast(cx, llretslot, llretty)];\n     } else { llargs += [llretslot]; }\n \n-    // Arg 1: task pointer.\n-    llargs += [bcx.fcx.lltaskptr];\n-\n-    // Arg 2: Env (closure-bindings / self-obj)\n+    // Arg 1: Env (closure-bindings / self-obj)\n     alt ty::ty_fn_proto(tcx, fn_ty) {\n       ast::proto_bare. { }\n       _ {\n         llargs += [llenv];\n       }\n     }\n \n-    // Args >3: ty_params ...\n+    // Args >2: ty_params ...\n     llargs += lltydescs;\n \n     // ... then possibly an lliterbody argument.\n@@ -4639,7 +4628,7 @@ fn trans_put(in_cx: @block_ctxt, e: option::t<@ast::expr>) -> @block_ctxt {\n     }\n     let bcx = cx;\n     let dummy_retslot = alloca(bcx, T_nil());\n-    let llargs: [ValueRef] = [dummy_retslot, cx.fcx.lltaskptr, llenv];\n+    let llargs: [ValueRef] = [dummy_retslot, llenv];\n     alt e {\n       none. {\n         llargs += [C_null(T_ptr(T_nil()))];\n@@ -5110,8 +5099,7 @@ fn new_fn_ctxt_w_id(cx: @local_ctxt, sp: span, llfndecl: ValueRef,\n     let llbbs = mk_standard_basic_blocks(llfndecl);\n     // FIXME: llenv is not correct for bare functions\n     ret @{llfn: llfndecl,\n-          lltaskptr: llvm::LLVMGetParam(llfndecl, 1u),\n-          llenv: llvm::LLVMGetParam(llfndecl, 2u),\n+          llenv: llvm::LLVMGetParam(llfndecl, 1u),\n           llretptr: llvm::LLVMGetParam(llfndecl, 0u),\n           mutable llstaticallocas: llbbs.sa,\n           mutable llloadenv: llbbs.ca,\n@@ -5141,8 +5129,8 @@ fn new_fn_ctxt(cx: @local_ctxt, sp: span, llfndecl: ValueRef) -> @fn_ctxt {\n \n fn implicit_args_for_fn(proto: ast::proto) -> uint {\n     alt proto {\n-      ast::proto_bare. { 2u }\n-      _ { 3u }\n+      ast::proto_bare. { 1u }\n+      _ { 2u }\n     }\n }\n \n@@ -5666,10 +5654,9 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         let lltop = bcx.llbb;\n \n         let lloutputarg = llvm::LLVMGetParam(llfdecl, 0u);\n-        let lltaskarg = llvm::LLVMGetParam(llfdecl, 1u);\n-        let llenvarg = llvm::LLVMGetParam(llfdecl, 2u);\n-        let args = [lloutputarg, lltaskarg, llenvarg];\n-        if takes_argv { args += [llvm::LLVMGetParam(llfdecl, 3u)]; }\n+        let llenvarg = llvm::LLVMGetParam(llfdecl, 1u);\n+        let args = [lloutputarg, llenvarg];\n+        if takes_argv { args += [llvm::LLVMGetParam(llfdecl, 2u)]; }\n         Call(bcx, main_llfn, args);\n         build_return(bcx);\n \n@@ -5825,16 +5812,11 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, path: [str], name: str,\n     let rty = ty::ty_fn_ret(ccx.tcx, fn_type);\n     let rty_is_nil = ty::type_is_nil(ccx.tcx, rty);\n \n-    let lltaskptr;\n-    if cast_to_i32 {\n-        lltaskptr = vp2i(bcx, fcx.lltaskptr);\n-    } else { lltaskptr = fcx.lltaskptr; }\n-\n     let call_args: [ValueRef] = [];\n-    if pass_task { call_args += [lltaskptr]; }\n+    if pass_task { call_args += [C_null(T_ptr(ccx.task_type))]; }\n     if uses_retptr { call_args += [bcx.fcx.llretptr]; }\n \n-    let arg_n = 3u;\n+    let arg_n = 2u;\n     for each i: uint in uint::range(0u, num_ty_param) {\n         let llarg = llvm::LLVMGetParam(fcx.llfn, arg_n);\n         fcx.lltydescs += [llarg];\n@@ -6144,11 +6126,6 @@ fn trap(bcx: @block_ctxt) {\n     }\n }\n \n-fn decl_no_op_type_glue(llmod: ModuleRef, taskptr_type: TypeRef) -> ValueRef {\n-    let ty = T_fn([taskptr_type, T_ptr(T_i8())], T_void());\n-    ret decl_cdecl_fn(llmod, abi::no_op_type_glue_name(), ty);\n-}\n-\n fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n     let elttype = T_struct([T_int(), T_int()]);\n     let maptype = T_array(elttype, ccx.module_data.size() + 1u);\n@@ -6255,9 +6232,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     let tn = mk_type_names();\n     let intrinsics = declare_intrinsics(llmod);\n     let task_type = T_task();\n-    let taskptr_type = T_ptr(task_type);\n-    tn.associate(\"taskptr\", taskptr_type);\n-    let tydesc_type = T_tydesc(taskptr_type);\n+    let tydesc_type = T_tydesc();\n     tn.associate(\"tydesc\", tydesc_type);\n     let hasher = ty::hash_ty;\n     let eqer = ty::eq_ty;\n@@ -6302,7 +6277,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n                mutable n_real_glues: 0u,\n                fn_times: @mutable []},\n           upcalls:\n-              upcall::declare_upcalls(tn, tydesc_type, taskptr_type, llmod),\n+              upcall::declare_upcalls(tn, tydesc_type, llmod),\n           rust_object_type: T_rust_object(),\n           tydesc_type: tydesc_type,\n           task_type: task_type,"}, {"sha": "76e04bb9aab70c67e9722cf46535f08087282f91", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=8124846b2c945f661a6bb85e66e22ca987891dc4", "patch": "@@ -234,7 +234,6 @@ type fn_ctxt =\n \n     // This function's enclosing local context.\n     {llfn: ValueRef,\n-     lltaskptr: ValueRef,\n      llenv: ValueRef,\n      llretptr: ValueRef,\n      mutable llstaticallocas: BasicBlockRef,\n@@ -605,15 +604,15 @@ fn T_cmp_glue_fn(cx: crate_ctxt) -> TypeRef {\n     ret t;\n }\n \n-fn T_tydesc(taskptr_type: TypeRef) -> TypeRef {\n+fn T_tydesc() -> TypeRef {\n     let tydesc = T_named_struct(\"tydesc\");\n     let tydescpp = T_ptr(T_ptr(tydesc));\n     let pvoid = T_ptr(T_i8());\n     let glue_fn_ty =\n-        T_ptr(T_fn([T_ptr(T_nil()), taskptr_type, T_ptr(T_nil()), tydescpp,\n+        T_ptr(T_fn([T_ptr(T_nil()), T_ptr(T_nil()), tydescpp,\n                     pvoid], T_void()));\n     let cmp_glue_fn_ty =\n-        T_ptr(T_fn([T_ptr(T_i1()), taskptr_type, T_ptr(tydesc), tydescpp,\n+        T_ptr(T_fn([T_ptr(T_i1()), T_ptr(tydesc), tydescpp,\n                     pvoid, pvoid, T_i8()], T_void()));\n \n     let elems ="}, {"sha": "5883fe56c9488cf057a2aba79278070db89280e7", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=8124846b2c945f661a6bb85e66e22ca987891dc4", "patch": "@@ -680,13 +680,12 @@ fn process_bkwding_mthd(cx: @local_ctxt, sp: span, m: @ty::method,\n \n     // Set up the three implicit arguments to the outer method we'll need to\n     // call.\n-    let llouter_mthd_args: [ValueRef] = [llretptr, fcx.lltaskptr,\n-                                         llself_obj_ptr];\n+    let llouter_mthd_args: [ValueRef] = [llretptr, llself_obj_ptr];\n \n     // Copy the explicit arguments that are being passed into the forwarding\n     // function (they're in fcx.llargs) to llouter_mthd_args.\n \n-    let a: uint = 3u; // retptr, task ptr, env come first\n+    let a: uint = 2u; // retptr, env come first\n     for arg: ty::arg in m.inputs {\n         llouter_mthd_args += [llvm::LLVMGetParam(llbackwarding_fn, a)];\n         a += 1u;\n@@ -833,12 +832,12 @@ fn process_fwding_mthd(cx: @local_ctxt, sp: span, m: @ty::method,\n \n     // Set up the three implicit arguments to the original method we'll need\n     // to call.\n-    let llorig_mthd_args: [ValueRef] = [llretptr, fcx.lltaskptr, self_stack];\n+    let llorig_mthd_args: [ValueRef] = [llretptr, self_stack];\n \n     // Copy the explicit arguments that are being passed into the forwarding\n     // function (they're in fcx.llargs) to llorig_mthd_args.\n \n-    let a: uint = 3u; // retptr, task ptr, env come first\n+    let a: uint = 2u; // retptr, env come first\n     for arg: ty::arg in m.inputs {\n         llorig_mthd_args += [llvm::LLVMGetParam(llforwarding_fn, a)];\n         a += 1u;"}, {"sha": "681888d00b1d998d382569fc8c6dd0f2c8325994", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=8124846b2c945f661a6bb85e66e22ca987891dc4", "patch": "@@ -28,7 +28,7 @@ rust_intrinsic_cast(rust_task *task, void *retptr, type_desc *t1,\n                     type_desc *t2, void *src)\n {\n     if (t1->size != t2->size) {\n-        upcall_fail(task, \"attempt to cast values of differing sizes\",\n+        upcall_fail(\"attempt to cast values of differing sizes\",\n                     __FILE__, __LINE__);\n         return;\n     }\n@@ -45,6 +45,6 @@ rust_intrinsic_addr_of(rust_task *task, void **retptr, type_desc *ty,\n extern \"C\" void\n rust_intrinsic_recv(rust_task *task, void **retptr, type_desc *ty,\n                     rust_port *port) {\n-    port_recv(task, (uintptr_t*)retptr, port);\n+    port_recv((uintptr_t*)retptr, port);\n }\n "}, {"sha": "4fd510609cdf40500496fcd6b923e73ab0f37e9c", "filename": "src/rt/intrinsics/intrinsics.ll.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in?ref=8124846b2c945f661a6bb85e66e22ca987891dc4", "patch": "@@ -83,7 +83,7 @@ entry:\n   br i1 %cmp, label %if.end, label %if.then\n \n if.then:                                          ; preds = %entry\n-  tail call void @upcall_fail(%struct.rust_task* %task, i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str1, i32 0, i32 0), i32 45)\n+  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str1, i32 0, i32 0), i32 45)\n   br label %return\n \n if.end:                                           ; preds = %entry\n@@ -94,7 +94,7 @@ return:                                           ; preds = %if.end, %if.then\n   ret void\n }\n \n-declare void @upcall_fail(%struct.rust_task*, i8*, i8*, i32)\n+declare void @upcall_fail(i8*, i8*, i32)\n \n declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind\n \n@@ -107,11 +107,11 @@ entry:\n define linkonce_odr void @rust_intrinsic_recv(%struct.rust_task* %task, i8** %retptr, %struct.type_desc* nocapture %ty, %class.rust_port* %port) {\n entry:\n   %0 = bitcast i8** %retptr to i32*\n-  tail call void @port_recv(%struct.rust_task* %task, i32* %0, %class.rust_port* %port)\n+  tail call void @port_recv(i32* %0, %class.rust_port* %port)\n   ret void\n }\n \n-declare void @port_recv(%struct.rust_task*, i32*, %class.rust_port*)\n+declare void @port_recv(i32*, %class.rust_port*)\n \n !0 = metadata !{metadata !\"long\", metadata !1}\n !1 = metadata !{metadata !\"omnipotent char\", metadata !2}"}, {"sha": "8b179b92db88883f992222fef9ba067ff46ab762", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=8124846b2c945f661a6bb85e66e22ca987891dc4", "patch": "@@ -452,9 +452,9 @@ struct fn_env_pair {\n \n // FIXME This is probably not needed at all anymore. Have to rearrange some\n // argument passing to remove it.\n-void rust_spawn_wrapper(void* retptr, rust_task* taskptr, void* envptr,\n-                        void(*func)(void*, rust_task*, void*)) {\n-    func(retptr, taskptr, envptr);\n+void rust_spawn_wrapper(void* retptr, void* envptr,\n+                        void(*func)(void*, void*)) {\n+    func(retptr, envptr);\n }\n \n extern \"C\" CDECL void"}, {"sha": "a820262cc65626c497f722e5bc21b54bbe69f5e1", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=8124846b2c945f661a6bb85e66e22ca987891dc4", "patch": "@@ -245,9 +245,9 @@ struct rust_timer {\n \n #include \"rust_util.h\"\n \n-typedef void CDECL (glue_fn)(void *, rust_task *, void *,\n+typedef void CDECL (glue_fn)(void *, void *,\n                              const type_desc **, void *);\n-typedef void CDECL (cmp_glue_fn)(void *, rust_task *, void *,\n+typedef void CDECL (cmp_glue_fn)(void *, void *,\n                                  const type_desc **,\n                                  void *, void *, int8_t);\n "}, {"sha": "e52cd77cd40cd4830e6ba9f87e47f5c1420e2fc1", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=8124846b2c945f661a6bb85e66e22ca987891dc4", "patch": "@@ -530,9 +530,10 @@ log::walk_res(const rust_fn *dtor, unsigned n_params,\n } // end namespace shape\n \n extern \"C\" void\n-upcall_cmp_type(int8_t *result, rust_task *task, const type_desc *tydesc,\n+upcall_cmp_type(int8_t *result, const type_desc *tydesc,\n                 const type_desc **subtydescs, uint8_t *data_0,\n                 uint8_t *data_1, uint8_t cmp_type) {\n+    rust_task *task = rust_scheduler::get_task();\n     shape::arena arena;\n \n     // FIXME: This may well be broken when comparing two closures or objects"}, {"sha": "17faeec1a1c0c8c18facf95ee49ca3d30033f626", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=8124846b2c945f661a6bb85e66e22ca987891dc4", "patch": "@@ -130,8 +130,7 @@ struct spawn_args {\n     rust_task *task;\n     uintptr_t a3;\n     uintptr_t a4;\n-    void (*CDECL f)(int *, rust_task *,\n-                       uintptr_t, uintptr_t);\n+    void (*CDECL f)(int *, uintptr_t, uintptr_t);\n };\n \n struct rust_closure_env {\n@@ -147,7 +146,7 @@ void task_start_wrapper(spawn_args *a)\n \n     bool failed = false;\n     try {\n-        a->f(&rval, task, a->a3, a->a4);\n+        a->f(&rval, a->a3, a->a4);\n     } catch (rust_task *ex) {\n         A(task->sched, ex == task,\n           \"Expected this task to be thrown for unwinding\");"}, {"sha": "82d82323ae521742d80952b5cef3665ecab17b30", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8124846b2c945f661a6bb85e66e22ca987891dc4/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=8124846b2c945f661a6bb85e66e22ca987891dc4", "patch": "@@ -28,8 +28,7 @@ check_stack(rust_task *task) {\n // dealing with reference counts\n static inline void\n copy_elements(rust_task *task, type_desc *elem_t,\n-              void *pdst, void *psrc, size_t n)\n-{\n+              void *pdst, void *psrc, size_t n) {\n     char *dst = (char *)pdst, *src = (char *)psrc;\n     memmove(dst, src, n);\n \n@@ -39,7 +38,7 @@ copy_elements(rust_task *task, type_desc *elem_t,\n         size_t elem_size = elem_t->size;\n         const type_desc **tydescs = elem_t->first_param;\n         for (char *p = dst; p < dst+n; p += elem_size) {\n-            take_glue(NULL, task, NULL, tydescs, p);\n+            take_glue(NULL, NULL, tydescs, p);\n         }\n     }\n }"}]}