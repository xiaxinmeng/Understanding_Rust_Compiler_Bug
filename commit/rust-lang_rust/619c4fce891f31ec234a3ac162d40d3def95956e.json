{"sha": "619c4fce891f31ec234a3ac162d40d3def95956e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOWM0ZmNlODkxZjMxZWMyMzRhM2FjMTYyZDQwZDNkZWY5NTk1NmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-23T19:26:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-23T19:26:34Z"}, "message": "auto merge of #11022 : spaolacci/rust/0read, r=alexcrichton\n\nCould prevent callers from catching the situation and lead to e.g early\r\niterator terminations (cf. `Reader::read_byte`) since `None` is only to\r\nbe returned only on EOF.", "tree": {"sha": "3286bdd5fb47ea8af52a2c15f6b56476ec148298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3286bdd5fb47ea8af52a2c15f6b56476ec148298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/619c4fce891f31ec234a3ac162d40d3def95956e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/619c4fce891f31ec234a3ac162d40d3def95956e", "html_url": "https://github.com/rust-lang/rust/commit/619c4fce891f31ec234a3ac162d40d3def95956e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/619c4fce891f31ec234a3ac162d40d3def95956e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9c06586f2aa12f89c94a27a20f0d0b260da216e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c06586f2aa12f89c94a27a20f0d0b260da216e", "html_url": "https://github.com/rust-lang/rust/commit/d9c06586f2aa12f89c94a27a20f0d0b260da216e"}, {"sha": "ee887d70780bce4c89a8977d04f724064ee1ae8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee887d70780bce4c89a8977d04f724064ee1ae8f", "html_url": "https://github.com/rust-lang/rust/commit/ee887d70780bce4c89a8977d04f724064ee1ae8f"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "df52f036d46165c521fe0f59f312220b5fdd06c1", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/619c4fce891f31ec234a3ac162d40d3def95956e/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619c4fce891f31ec234a3ac162d40d3def95956e/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=619c4fce891f31ec234a3ac162d40d3def95956e", "patch": "@@ -118,14 +118,14 @@ impl<R: Reader> Reader for BufferedReader<R> {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n         let nread = {\n             let available = self.fill();\n-            if available.len() == 0 {\n-                return None;\n-            }\n             let nread = num::min(available.len(), buf.len());\n             vec::bytes::copy_memory(buf, available.slice_to(nread));\n             nread\n         };\n         self.pos += nread;\n+        if nread == 0 && self.inner.eof() && buf.len() != 0 {\n+                return None;\n+        }\n         Some(nread)\n     }\n \n@@ -322,6 +322,21 @@ mod test {\n         fn write(&mut self, _: &[u8]) { }\n     }\n \n+    /// A dummy reader intended at testing short-reads propagation.\n+    pub struct ShortReader {\n+        priv lengths: ~[uint],\n+    }\n+\n+    impl Reader for ShortReader {\n+        fn read(&mut self, _: &mut [u8]) -> Option<uint> {\n+            self.lengths.shift_opt()\n+        }\n+\n+        fn eof(&mut self) -> bool {\n+            self.lengths.len() == 0\n+        }\n+    }\n+\n     #[test]\n     fn test_buffered_reader() {\n         let inner = MemReader::new(~[0, 1, 2, 3, 4]);\n@@ -475,6 +490,19 @@ mod test {\n         assert_eq!(it.next(), None);\n     }\n \n+    #[test]\n+    fn test_short_reads() {\n+        let inner = ShortReader{lengths: ~[0, 1, 2, 0, 1, 0]};\n+        let mut reader = BufferedReader::new(inner);\n+        let mut buf = [0, 0];\n+        assert_eq!(reader.read(buf), Some(0));\n+        assert_eq!(reader.read(buf), Some(1));\n+        assert_eq!(reader.read(buf), Some(2));\n+        assert_eq!(reader.read(buf), Some(0));\n+        assert_eq!(reader.read(buf), Some(1));\n+        assert_eq!(reader.read(buf), None);\n+    }\n+\n \n     #[bench]\n     fn bench_buffered_reader(bh: &mut Harness) {"}]}