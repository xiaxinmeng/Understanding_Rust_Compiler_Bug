{"sha": "523490e94ad6aabcc53a30919889ce60b4f327ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMzQ5MGU5NGFkNmFhYmNjNTNhMzA5MTk4ODljZTYwYjRmMzI3ZWU=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-28T07:37:30Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-28T08:03:16Z"}, "message": "Allow `~const` bounds on trait assoc functions", "tree": {"sha": "e4dad6e4a3e6c35b7d9ba7dd195113059dc6f0ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4dad6e4a3e6c35b7d9ba7dd195113059dc6f0ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/523490e94ad6aabcc53a30919889ce60b4f327ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEp7cQACgkQAn35M4hi\nrd39vQ/+PMB+SpEJgW4v2pShr+an3AnRAw+9nK+sI6gy+39jsxuKflhas6JgZo6l\n1UVOiJa5bJYtaYlTKNY5GV6OPy8Iy3Lba/tjm66YVEiXZMWG6/EeEug5nqDsXCUO\nVeCdyFDe8EReh1aT6R6Il0aJS5EbIMWEVJfAjS6G85jvdXYr8hY82llCd0gp24yE\n4T+Ne5vQ09AUHtv0mEK9YwDtf/LOUlnx5Ek1ujysMQ9Sxqy7E0F9pqUz4li4ScYo\nRO7epVfz8THqiVo0eNmNOjakI75TOJjJJXyQT51cm5wEVNdqU2/LrJjHOD2u3br0\nwwwuf4xkEhDzomZc8c/KNOeJbg6aUzR3CHELYAbrxoQdJdExHxbfSBinN3OjY6b7\n6kT0nIGr7jlNCx19IQWm4nmg1JAxAMXqlB/ZmX0XPQwSfwDkki7LwlntsQiDIw9K\nibyeyrjTBgDWxrlNDfyA1b1Hv+HMHQL1bl3ROL5OC2CPrHtmkZO6aHBXS37VD5il\nsm3NO0/VQ/LrWWJdEAD5SYFEXVauLs86Nmgi92TyHeU8fyoZ/gTMlxYXw9uC/NQd\nddtI5MuA5Z6625FVUtnIGx1OYFyFwwX+GQdt09TyRMpVpp043wwCXarfNugungPS\nXuT2UwGIPbEundoRfym7BW35h7lyDbiB3MdIPHg+oPTNRSQWrXE=\n=H64F\n-----END PGP SIGNATURE-----", "payload": "tree e4dad6e4a3e6c35b7d9ba7dd195113059dc6f0ff\nparent ac50a53359328a5d7f2f558833e63d59d372e4f7\nauthor Deadbeef <ent3rm4n@gmail.com> 1630136250 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1630137796 +0000\n\nAllow `~const` bounds on trait assoc functions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/523490e94ad6aabcc53a30919889ce60b4f327ee", "html_url": "https://github.com/rust-lang/rust/commit/523490e94ad6aabcc53a30919889ce60b4f327ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/523490e94ad6aabcc53a30919889ce60b4f327ee/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac50a53359328a5d7f2f558833e63d59d372e4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac50a53359328a5d7f2f558833e63d59d372e4f7", "html_url": "https://github.com/rust-lang/rust/commit/ac50a53359328a5d7f2f558833e63d59d372e4f7"}], "stats": {"total": 84, "additions": 76, "deletions": 8}, "files": [{"sha": "5153f1861eaf1b1b575892f7dc76eaa378bb9d97", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/523490e94ad6aabcc53a30919889ce60b4f327ee/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523490e94ad6aabcc53a30919889ce60b4f327ee/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=523490e94ad6aabcc53a30919889ce60b4f327ee", "patch": "@@ -1442,7 +1442,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if !self.is_tilde_const_allowed {\n                     self.err_handler()\n                         .struct_span_err(bound.span(), \"`~const` is not allowed here\")\n-                        .note(\"only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\")\n+                        .note(\"only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\")\n                         .emit();\n                 }\n             }\n@@ -1616,7 +1616,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 walk_list!(self, visit_ty, ty);\n             }\n             AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, ref body))\n-                if self.in_const_trait_impl =>\n+                if self.in_const_trait_impl || ctxt == AssocCtxt::Trait =>\n             {\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);"}, {"sha": "033ec21ba8408defa7bc509cef0053531482df2c", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/523490e94ad6aabcc53a30919889ce60b4f327ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/523490e94ad6aabcc53a30919889ce60b4f327ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=523490e94ad6aabcc53a30919889ce60b4f327ee", "patch": "@@ -4,47 +4,47 @@ error: `~const` is not allowed here\n LL | fn rpit() -> impl ~const T { S }\n    |                   ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:11:17\n    |\n LL | fn apit(_: impl ~const T) {}\n    |                 ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:14:50\n    |\n LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n    |                                                  ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:17:48\n    |\n LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n    |                                                ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:20:15\n    |\n LL | fn generic<P: ~const T>() {}\n    |               ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` is not allowed here\n   --> $DIR/tilde-const-invalid-places.rs:23:31\n    |\n LL | fn where_clause<P>() where P: ~const T {}\n    |                               ^^^^^^^^\n    |\n-   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+   = note: only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\n \n error: `~const` and `?` are mutually exclusive\n   --> $DIR/tilde-const-invalid-places.rs:26:25"}, {"sha": "7fcd791e722d4d11edfa2bdf0d3baf596cfffc51", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/523490e94ad6aabcc53a30919889ce60b4f327ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523490e94ad6aabcc53a30919889ce60b4f327ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs?ref=523490e94ad6aabcc53a30919889ce60b4f327ee", "patch": "@@ -0,0 +1,33 @@\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_trait_impl)]\n+\n+trait Bar {}\n+\n+trait Foo {\n+    fn a();\n+    fn b() where Self: ~const Bar;\n+}\n+\n+const fn test1<T: ~const Foo + Bar>() {\n+    T::a();\n+    T::b();\n+    //~^ ERROR the trait bound\n+}\n+\n+const fn test2<T: ~const Foo + ~const Bar>() {\n+    T::a();\n+    T::b();\n+}\n+\n+fn test3<T: Foo>() {\n+    T::a();\n+    T::b();\n+    //~^ ERROR the trait bound\n+}\n+\n+fn test4<T: Foo + Bar>() {\n+    T::a();\n+    T::b();\n+}\n+\n+fn main() {}"}, {"sha": "f70792ba55a4b9fd5a602f46375eb715e595d467", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/523490e94ad6aabcc53a30919889ce60b4f327ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/523490e94ad6aabcc53a30919889ce60b4f327ee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=523490e94ad6aabcc53a30919889ce60b4f327ee", "patch": "@@ -0,0 +1,35 @@\n+error[E0277]: the trait bound `T: Bar` is not satisfied\n+  --> $DIR/trait-where-clause.rs:13:5\n+   |\n+LL |     T::b();\n+   |     ^^^^ the trait `Bar` is not implemented for `T`\n+   |\n+note: required by `Foo::b`\n+  --> $DIR/trait-where-clause.rs:8:5\n+   |\n+LL |     fn b() where Self: ~const Bar;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider further restricting this bound\n+   |\n+LL | const fn test1<T: ~const Foo + Bar + Bar>() {\n+   |                                    +++++\n+\n+error[E0277]: the trait bound `T: Bar` is not satisfied\n+  --> $DIR/trait-where-clause.rs:24:5\n+   |\n+LL |     T::b();\n+   |     ^^^^ the trait `Bar` is not implemented for `T`\n+   |\n+note: required by `Foo::b`\n+  --> $DIR/trait-where-clause.rs:8:5\n+   |\n+LL |     fn b() where Self: ~const Bar;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider further restricting this bound\n+   |\n+LL | fn test3<T: Foo + Bar>() {\n+   |                 +++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}