{"sha": "00859e3e653973120006aaf3227823062dde1ba7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwODU5ZTNlNjUzOTczMTIwMDA2YWFmMzIyNzgyMzA2MmRkZTFiYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-29T20:40:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-29T20:40:49Z"}, "message": "Auto merge of #60377 - Centril:rollup-42fxe9u, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #59946 (Fix equivalent string in escape_default docs)\n - #60256 (Option::flatten)\n - #60305 (hir: remove LoweredNodeId)\n - #60334 (Stabilized vectored IO)\n - #60353 (Add test not to forget resolved ICE)\n - #60356 (Stabilize str::as_mut_ptr)\n - #60358 (Clarify the short explanation of E0207)\n - #60359 (resolve: Consider erroneous imports used to avoid duplicate diagnostics)\n - #60360 (Add test case for labeled break in const assignment)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f00dc40e8a54b691e94491407d680404bab127e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f00dc40e8a54b691e94491407d680404bab127e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00859e3e653973120006aaf3227823062dde1ba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00859e3e653973120006aaf3227823062dde1ba7", "html_url": "https://github.com/rust-lang/rust/commit/00859e3e653973120006aaf3227823062dde1ba7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00859e3e653973120006aaf3227823062dde1ba7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a55c2eb325029960991508e64650a139b040d24f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a55c2eb325029960991508e64650a139b040d24f", "html_url": "https://github.com/rust-lang/rust/commit/a55c2eb325029960991508e64650a139b040d24f"}, {"sha": "04942105ef2385fcc000b8ffa1825a870c095ea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/04942105ef2385fcc000b8ffa1825a870c095ea9", "html_url": "https://github.com/rust-lang/rust/commit/04942105ef2385fcc000b8ffa1825a870c095ea9"}], "stats": {"total": 1005, "additions": 514, "deletions": 491}, "files": [{"sha": "6b7f491effb30cf616e7a758ecddb1ba1c692f87", "filename": "src/libcore/option.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -136,7 +136,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n-use crate::{hint, mem, ops::{self, Deref}};\n+use crate::{convert, hint, mem, ops::{self, Deref}};\n use crate::pin::Pin;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n@@ -1413,3 +1413,33 @@ impl<T> ops::Try for Option<T> {\n         None\n     }\n }\n+\n+impl<T> Option<Option<T>> {\n+    /// Converts from `Option<Option<T>>` to `Option<T>`\n+    ///\n+    /// # Examples\n+    /// Basic usage:\n+    /// ```\n+    /// #![feature(option_flattening)]\n+    /// let x: Option<Option<u32>> = Some(Some(6));\n+    /// assert_eq!(Some(6), x.flatten());\n+    ///\n+    /// let x: Option<Option<u32>> = Some(None);\n+    /// assert_eq!(None, x.flatten());\n+    ///\n+    /// let x: Option<Option<u32>> = None;\n+    /// assert_eq!(None, x.flatten());\n+    /// ```\n+    /// Flattening once only removes one level of nesting:\n+    /// ```\n+    /// #![feature(option_flattening)]\n+    /// let x: Option<Option<Option<u32>>> = Some(Some(Some(6)));\n+    /// assert_eq!(Some(Some(6)), x.flatten());\n+    /// assert_eq!(Some(6), x.flatten().flatten());\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_flattening\", issue = \"60258\")]\n+    pub fn flatten(self) -> Option<T> {\n+        self.and_then(convert::identity)\n+    }\n+}"}, {"sha": "45421848cec5db602f26a4b3cd4ecdf02290cd1f", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -2214,7 +2214,7 @@ impl str {\n     /// modified in a way that it remains valid UTF-8.\n     ///\n     /// [`u8`]: primitive.u8.html\n-    #[unstable(feature = \"str_as_mut_ptr\", issue = \"58215\")]\n+    #[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]\n     #[inline]\n     pub fn as_mut_ptr(&mut self) -> *mut u8 {\n         self as *mut str as *mut u8\n@@ -4061,7 +4061,7 @@ impl str {\n     /// Both are equivalent to:\n     ///\n     /// ```\n-    /// println!(\"\\\\u{{2764}}\\n!\");\n+    /// println!(\"\\\\u{{2764}}\\\\n!\");\n     /// ```\n     ///\n     /// Using `to_string`:"}, {"sha": "df455a725c5baa9acde46f5c72292c5b8a252344", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 107, "deletions": 202, "changes": 309, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -260,12 +260,6 @@ enum ParamMode {\n     Optional,\n }\n \n-#[derive(Debug)]\n-struct LoweredNodeId {\n-    node_id: NodeId,\n-    hir_id: hir::HirId,\n-}\n-\n enum ParenthesizedGenericArgs {\n     Ok,\n     Warn,\n@@ -429,7 +423,7 @@ impl<'a> LoweringContext<'a> {\n                     UseTreeKind::Glob => (),\n                     UseTreeKind::Nested(ref trees) => {\n                         for &(ref use_tree, id) in trees {\n-                            let hir_id = self.lctx.allocate_hir_id_counter(id).hir_id;\n+                            let hir_id = self.lctx.allocate_hir_id_counter(id);\n                             self.allocate_use_tree_hir_id_counters(use_tree, hir_id.owner);\n                         }\n                     }\n@@ -489,7 +483,7 @@ impl<'a> LoweringContext<'a> {\n             }\n \n             fn visit_item(&mut self, item: &'lcx Item) {\n-                let hir_id = self.lctx.allocate_hir_id_counter(item.id).hir_id;\n+                let hir_id = self.lctx.allocate_hir_id_counter(item.id);\n \n                 match item.node {\n                     ItemKind::Struct(_, ref generics)\n@@ -698,24 +692,21 @@ impl<'a> LoweringContext<'a> {\n         self.modules.get_mut(&self.current_module).unwrap().items.insert(id);\n     }\n \n-    fn allocate_hir_id_counter(&mut self, owner: NodeId) -> LoweredNodeId {\n+    fn allocate_hir_id_counter(&mut self, owner: NodeId) -> hir::HirId {\n         // Setup the counter if needed\n         self.item_local_id_counters.entry(owner).or_insert(0);\n         // Always allocate the first `HirId` for the owner itself.\n         let lowered = self.lower_node_id_with_owner(owner, owner);\n-        debug_assert_eq!(lowered.hir_id.local_id.as_u32(), 0);\n+        debug_assert_eq!(lowered.local_id.as_u32(), 0);\n         lowered\n     }\n \n-    fn lower_node_id_generic<F>(&mut self, ast_node_id: NodeId, alloc_hir_id: F) -> LoweredNodeId\n+    fn lower_node_id_generic<F>(&mut self, ast_node_id: NodeId, alloc_hir_id: F) -> hir::HirId\n     where\n         F: FnOnce(&mut Self) -> hir::HirId,\n     {\n         if ast_node_id == DUMMY_NODE_ID {\n-            return LoweredNodeId {\n-                node_id: DUMMY_NODE_ID,\n-                hir_id: hir::DUMMY_HIR_ID,\n-            };\n+            return hir::DUMMY_HIR_ID;\n         }\n \n         let min_size = ast_node_id.as_usize() + 1;\n@@ -730,15 +721,10 @@ impl<'a> LoweringContext<'a> {\n             // Generate a new `HirId`.\n             let hir_id = alloc_hir_id(self);\n             self.node_id_to_hir_id[ast_node_id] = hir_id;\n-            LoweredNodeId {\n-                node_id: ast_node_id,\n-                hir_id,\n-            }\n+\n+            hir_id\n         } else {\n-            LoweredNodeId {\n-                node_id: ast_node_id,\n-                hir_id: existing_hir_id,\n-            }\n+            existing_hir_id\n         }\n     }\n \n@@ -770,7 +756,7 @@ impl<'a> LoweringContext<'a> {\n     /// actually used in the HIR, as that would trigger an assertion in the\n     /// `HirIdValidator` later on, which makes sure that all `NodeId`s got mapped\n     /// properly. Calling the method twice with the same `NodeId` is fine though.\n-    fn lower_node_id(&mut self, ast_node_id: NodeId) -> LoweredNodeId {\n+    fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {\n         self.lower_node_id_generic(ast_node_id, |this| {\n             let &mut (def_index, ref mut local_id_counter) =\n                 this.current_hir_id_owner.last_mut().unwrap();\n@@ -783,7 +769,7 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n-    fn lower_node_id_with_owner(&mut self, ast_node_id: NodeId, owner: NodeId) -> LoweredNodeId {\n+    fn lower_node_id_with_owner(&mut self, ast_node_id: NodeId, owner: NodeId) -> hir::HirId {\n         self.lower_node_id_generic(ast_node_id, |this| {\n             let local_id_counter = this\n                 .item_local_id_counters\n@@ -822,15 +808,15 @@ impl<'a> LoweringContext<'a> {\n         id\n     }\n \n-    fn next_id(&mut self) -> LoweredNodeId {\n+    fn next_id(&mut self) -> hir::HirId {\n         self.lower_node_id(self.sess.next_node_id())\n     }\n \n     fn lower_def(&mut self, def: Def<NodeId>) -> Def {\n         def.map_id(|id| {\n             self.lower_node_id_generic(id, |_| {\n                 panic!(\"expected node_id to be lowered already for def {:#?}\", def)\n-            }).hir_id\n+            })\n         })\n     }\n \n@@ -942,7 +928,7 @@ impl<'a> LoweringContext<'a> {\n         hir_name: ParamName,\n         parent_index: DefIndex,\n     ) -> hir::GenericParam {\n-        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+        let node_id = self.sess.next_node_id();\n \n         // Get the name we'll use to make the def-path. Note\n         // that collisions are ok here and this shouldn't\n@@ -973,7 +959,7 @@ impl<'a> LoweringContext<'a> {\n         );\n \n         hir::GenericParam {\n-            hir_id,\n+            hir_id: self.lower_node_id(node_id),\n             name: hir_name,\n             attrs: hir_vec![],\n             bounds: hir_vec![],\n@@ -1158,10 +1144,9 @@ impl<'a> LoweringContext<'a> {\n         self.is_generator = prev_is_generator;\n \n         let capture_clause = self.lower_capture_clause(capture_clause);\n-        let closure_hir_id = self.lower_node_id(closure_node_id).hir_id;\n         let decl = self.lower_fn_decl(&decl, None, /* impl trait allowed */ false, None);\n         let generator = hir::Expr {\n-            hir_id: closure_hir_id,\n+            hir_id: self.lower_node_id(closure_node_id),\n             node: hir::ExprKind::Closure(capture_clause, decl, body_id, span,\n                 Some(hir::GeneratorMovability::Static)),\n             span,\n@@ -1267,7 +1252,7 @@ impl<'a> LoweringContext<'a> {\n         let target_id = match destination {\n             Some((id, _)) => {\n                 if let Def::Label(loop_id) = self.expect_full_def(id) {\n-                    Ok(self.lower_node_id(loop_id).hir_id)\n+                    Ok(self.lower_node_id(loop_id))\n                 } else {\n                     Err(hir::LoopIdError::UnresolvedLabel)\n                 }\n@@ -1276,7 +1261,7 @@ impl<'a> LoweringContext<'a> {\n                 self.loop_scopes\n                     .last()\n                     .cloned()\n-                    .map(|id| Ok(self.lower_node_id(id).hir_id))\n+                    .map(|id| Ok(self.lower_node_id(id)))\n                     .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n                     .into()\n             }\n@@ -1350,10 +1335,8 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_ty_binding(&mut self, b: &TypeBinding,\n                         itctx: ImplTraitContext<'_>) -> hir::TypeBinding {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(b.id);\n-\n         hir::TypeBinding {\n-            hir_id,\n+            hir_id: self.lower_node_id(b.id),\n             ident: b.ident,\n             ty: self.lower_ty(&b.ty, itctx),\n             span: b.span,\n@@ -1487,7 +1470,6 @@ impl<'a> LoweringContext<'a> {\n                         )\n                     }\n                     ImplTraitContext::Universal(in_band_ty_params) => {\n-                        let LoweredNodeId { node_id: _, hir_id } =  self.lower_node_id(def_node_id);\n                         // Add a definition for the in-band `Param`.\n                         let def_index = self\n                             .resolver\n@@ -1502,7 +1484,7 @@ impl<'a> LoweringContext<'a> {\n                         // Set the name to `impl Bound1 + Bound2`.\n                         let ident = Ident::from_str(&pprust::ty_to_string(t)).with_span_pos(span);\n                         in_band_ty_params.push(hir::GenericParam {\n-                            hir_id,\n+                            hir_id: self.lower_node_id(def_node_id),\n                             name: ParamName::Plain(ident),\n                             pure_wrt_drop: false,\n                             attrs: hir_vec![],\n@@ -1557,11 +1539,10 @@ impl<'a> LoweringContext<'a> {\n             },\n         };\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(t.id);\n         hir::Ty {\n             node: kind,\n             span: t.span,\n-            hir_id,\n+            hir_id: self.lower_node_id(t.id),\n         }\n     }\n \n@@ -1600,12 +1581,11 @@ impl<'a> LoweringContext<'a> {\n         );\n \n         self.with_hir_id_owner(exist_ty_node_id, |lctx| {\n-            let LoweredNodeId { node_id: _, hir_id } = lctx.next_id();\n             let exist_ty_item = hir::ExistTy {\n                 generics: hir::Generics {\n                     params: lifetime_defs,\n                     where_clause: hir::WhereClause {\n-                        hir_id,\n+                        hir_id: lctx.next_id(),\n                         predicates: hir_vec![],\n                     },\n                     span,\n@@ -1624,7 +1604,7 @@ impl<'a> LoweringContext<'a> {\n             );\n \n             // `impl Trait` now just becomes `Foo<'a, 'b, ..>`.\n-            hir::TyKind::Def(hir::ItemId { id: exist_ty_id.hir_id }, lifetimes)\n+            hir::TyKind::Def(hir::ItemId { id: exist_ty_id }, lifetimes)\n         })\n     }\n \n@@ -1636,13 +1616,13 @@ impl<'a> LoweringContext<'a> {\n         exist_ty_item: hir::ExistTy,\n         span: Span,\n         exist_ty_span: Span,\n-    ) -> LoweredNodeId {\n+    ) -> hir::HirId {\n         let exist_ty_item_kind = hir::ItemKind::Existential(exist_ty_item);\n         let exist_ty_id = self.lower_node_id(exist_ty_node_id);\n         // Generate an `existential type Foo: Trait;` declaration.\n         trace!(\"registering existential type with id {:#?}\", exist_ty_id);\n         let exist_ty_item = hir::Item {\n-            hir_id: exist_ty_id.hir_id,\n+            hir_id: exist_ty_id,\n             ident: keywords::Invalid.ident(),\n             attrs: Default::default(),\n             node: exist_ty_item_kind,\n@@ -1757,15 +1737,14 @@ impl<'a> LoweringContext<'a> {\n                     && !self.already_defined_lifetimes.contains(&name) {\n                     self.already_defined_lifetimes.insert(name);\n \n-                    let LoweredNodeId { node_id: _, hir_id } = self.context.next_id();\n                     self.output_lifetimes.push(hir::GenericArg::Lifetime(hir::Lifetime {\n-                        hir_id,\n+                        hir_id: self.context.next_id(),\n                         span: lifetime.span,\n                         name,\n                     }));\n \n                     let def_node_id = self.context.sess.next_node_id();\n-                    let LoweredNodeId { node_id: _, hir_id } =\n+                    let hir_id =\n                         self.context.lower_node_id_with_owner(def_node_id, self.exist_ty_id);\n                     self.context.resolver.definitions().create_def_with_parent(\n                         self.parent,\n@@ -1840,11 +1819,10 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(v.node.id);\n         Spanned {\n             node: hir::VariantKind {\n                 ident: v.node.ident,\n-                id: hir_id,\n+                id: self.lower_node_id(v.node.id),\n                 attrs: self.lower_attrs(&v.node.attrs),\n                 data: self.lower_variant_data(&v.node.data),\n                 disr_expr: v.node.disr_expr.as_ref().map(|e| self.lower_anon_const(e)),\n@@ -2157,7 +2135,7 @@ impl<'a> LoweringContext<'a> {\n \n         hir::PathSegment::new(\n             segment.ident,\n-            Some(id.hir_id),\n+            Some(id),\n             Some(self.lower_def(def)),\n             generic_args,\n             infer_types,\n@@ -2201,17 +2179,14 @@ impl<'a> LoweringContext<'a> {\n                     .map(|ty| this.lower_ty_direct(ty, ImplTraitContext::disallowed()))\n                     .collect();\n                 let mk_tup = |this: &mut Self, tys, span| {\n-                    let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n-                    hir::Ty { node: hir::TyKind::Tup(tys), hir_id, span }\n+                    hir::Ty { node: hir::TyKind::Tup(tys), hir_id: this.next_id(), span }\n                 };\n-                let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n-\n                 (\n                     hir::GenericArgs {\n                         args: hir_vec![GenericArg::Type(mk_tup(this, inputs, span))],\n                         bindings: hir_vec![\n                             hir::TypeBinding {\n-                                hir_id,\n+                                hir_id: this.next_id(),\n                                 ident: Ident::from_str(FN_OUTPUT_NAME),\n                                 ty: output\n                                     .as_ref()\n@@ -2229,7 +2204,6 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_local(&mut self, l: &Local) -> (hir::Local, SmallVec<[NodeId; 1]>) {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(l.id);\n         let mut ids = SmallVec::<[NodeId; 1]>::new();\n         if self.sess.features_untracked().impl_trait_in_bindings {\n             if let Some(ref ty) = l.ty {\n@@ -2239,7 +2213,7 @@ impl<'a> LoweringContext<'a> {\n         }\n         let parent_def_id = DefId::local(self.current_hir_id_owner.last().unwrap().0);\n         (hir::Local {\n-            hir_id,\n+            hir_id: self.lower_node_id(l.id),\n             ty: l.ty\n                 .as_ref()\n                 .map(|t| self.lower_ty(t,\n@@ -2276,9 +2250,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_arg(&mut self, arg: &Arg) -> hir::Arg {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(arg.id);\n         hir::Arg {\n-            hir_id,\n+            hir_id: self.lower_node_id(arg.id),\n             pat: self.lower_pat(&arg.pat),\n             source: self.lower_arg_source(&arg.source),\n         }\n@@ -2437,7 +2410,7 @@ impl<'a> LoweringContext<'a> {\n \n         self.allocate_hir_id_counter(exist_ty_node_id);\n \n-        let (exist_ty_node_id, lifetime_params) = self.with_hir_id_owner(exist_ty_node_id, |this| {\n+        let (exist_ty_id, lifetime_params) = self.with_hir_id_owner(exist_ty_node_id, |this| {\n             let future_bound = this.with_anonymous_lifetime_mode(\n                 AnonymousLifetimeMode::Replace(elided_lt_replacement),\n                 |this| this.lower_async_fn_output_type_to_future_bound(\n@@ -2468,12 +2441,11 @@ impl<'a> LoweringContext<'a> {\n                     })\n                     .collect();\n \n-            let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n             let exist_ty_item = hir::ExistTy {\n                 generics: hir::Generics {\n                     params: generic_params,\n                     where_clause: hir::WhereClause {\n-                        hir_id,\n+                        hir_id: this.next_id(),\n                         predicates: hir_vec![],\n                     },\n                     span,\n@@ -2491,30 +2463,27 @@ impl<'a> LoweringContext<'a> {\n                 exist_ty_span,\n             );\n \n-            (exist_ty_id.node_id, lifetime_params)\n+            (exist_ty_id, lifetime_params)\n         });\n \n         let generic_args =\n             lifetime_params\n                 .iter().cloned()\n                 .map(|(span, hir_name)| {\n-                    let LoweredNodeId { node_id: _, hir_id  } = self.next_id();\n                     GenericArg::Lifetime(hir::Lifetime {\n-                        hir_id,\n+                        hir_id: self.next_id(),\n                         span,\n                         name: hir::LifetimeName::Param(hir_name),\n                     })\n                 })\n                 .collect();\n \n-        let exist_ty_hir_id = self.lower_node_id(exist_ty_node_id).hir_id;\n-        let exist_ty_ref = hir::TyKind::Def(hir::ItemId { id: exist_ty_hir_id }, generic_args);\n+        let exist_ty_ref = hir::TyKind::Def(hir::ItemId { id: exist_ty_id }, generic_args);\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         hir::FunctionRetTy::Return(P(hir::Ty {\n             node: exist_ty_ref,\n             span,\n-            hir_id,\n+            hir_id: self.next_id(),\n         }))\n     }\n \n@@ -2531,23 +2500,21 @@ impl<'a> LoweringContext<'a> {\n                 self.lower_ty(ty, ImplTraitContext::Existential(Some(fn_def_id)))\n             }\n             FunctionRetTy::Default(ret_ty_span) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                 P(hir::Ty {\n-                    hir_id,\n+                    hir_id: self.next_id(),\n                     node: hir::TyKind::Tup(hir_vec![]),\n                     span: *ret_ty_span,\n                 })\n             }\n         };\n \n         // \"<Output = T>\"\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         let future_params = P(hir::GenericArgs {\n             args: hir_vec![],\n             bindings: hir_vec![hir::TypeBinding {\n                 ident: Ident::from_str(FN_OUTPUT_NAME),\n                 ty: output_ty,\n-                hir_id,\n+                hir_id: self.next_id(),\n                 span,\n             }],\n             parenthesized: false,\n@@ -2557,12 +2524,11 @@ impl<'a> LoweringContext<'a> {\n         let future_path =\n             self.std_path(span, &[\"future\", \"Future\"], Some(future_params), false);\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         hir::GenericBound::Trait(\n             hir::PolyTraitRef {\n                 trait_ref: hir::TraitRef {\n                     path: future_path,\n-                    hir_ref_id: hir_id,\n+                    hir_ref_id: self.next_id(),\n                 },\n                 bound_generic_params: hir_vec![],\n                 span,\n@@ -2608,7 +2574,7 @@ impl<'a> LoweringContext<'a> {\n                     AnonymousLifetimeMode::ReportError => self.new_error_lifetime(Some(l.id), span),\n \n                     AnonymousLifetimeMode::Replace(replacement) => {\n-                        let LoweredNodeId { node_id: _, hir_id  } = self.lower_node_id(l.id);\n+                        let hir_id = self.lower_node_id(l.id);\n                         self.replace_elided_lifetime(hir_id, span, replacement)\n                     }\n                 },\n@@ -2626,10 +2592,8 @@ impl<'a> LoweringContext<'a> {\n         span: Span,\n         name: hir::LifetimeName,\n     ) -> hir::Lifetime {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n-\n         hir::Lifetime {\n-            hir_id,\n+            hir_id: self.lower_node_id(id),\n             span,\n             name: name,\n         }\n@@ -2751,10 +2715,8 @@ impl<'a> LoweringContext<'a> {\n             }\n         };\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(param.id);\n-\n         hir::GenericParam {\n-            hir_id,\n+            hir_id: self.lower_node_id(param.id),\n             name,\n             span: param.ident.span,\n             pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n@@ -2834,10 +2796,8 @@ impl<'a> LoweringContext<'a> {\n         self.with_anonymous_lifetime_mode(\n             AnonymousLifetimeMode::ReportError,\n             |this| {\n-                let LoweredNodeId { node_id: _, hir_id } = this.lower_node_id(wc.id);\n-\n                 hir::WhereClause {\n-                    hir_id,\n+                    hir_id: this.lower_node_id(wc.id),\n                     predicates: wc.predicates\n                         .iter()\n                         .map(|predicate| this.lower_where_predicate(predicate))\n@@ -2897,10 +2857,8 @@ impl<'a> LoweringContext<'a> {\n                 ref rhs_ty,\n                 span,\n             }) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n-\n                 hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n-                    hir_id,\n+                    hir_id: self.lower_node_id(id),\n                     lhs_ty: self.lower_ty(lhs_ty, ImplTraitContext::disallowed()),\n                     rhs_ty: self.lower_ty(rhs_ty, ImplTraitContext::disallowed()),\n                     span,\n@@ -2916,20 +2874,17 @@ impl<'a> LoweringContext<'a> {\n                 recovered,\n             ),\n             VariantData::Tuple(ref fields, id) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n-\n                 hir::VariantData::Tuple(\n                     fields\n                         .iter()\n                         .enumerate()\n                         .map(|f| self.lower_struct_field(f))\n                         .collect(),\n-                    hir_id,\n+                    self.lower_node_id(id),\n                 )\n             },\n             VariantData::Unit(id) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n-                hir::VariantData::Unit(hir_id)\n+                hir::VariantData::Unit(self.lower_node_id(id))\n             },\n         }\n     }\n@@ -2939,10 +2894,9 @@ impl<'a> LoweringContext<'a> {\n             hir::QPath::Resolved(None, path) => path.and_then(|path| path),\n             qpath => bug!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n         };\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(p.ref_id);\n         hir::TraitRef {\n             path,\n-            hir_ref_id: hir_id,\n+            hir_ref_id: self.lower_node_id(p.ref_id),\n         }\n     }\n \n@@ -2969,11 +2923,9 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_struct_field(&mut self, (index, f): (usize, &StructField)) -> hir::StructField {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(f.id);\n-\n         hir::StructField {\n             span: f.span,\n-            hir_id,\n+            hir_id: self.lower_node_id(f.id),\n             ident: match f.ident {\n                 Some(ident) => ident,\n                 // FIXME(jseyfried): positional field hygiene\n@@ -2986,10 +2938,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_field(&mut self, f: &Field) -> hir::Field {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         hir::Field {\n-            hir_id,\n+            hir_id: self.next_id(),\n             ident: f.ident,\n             expr: P(self.lower_expr(&f.expr)),\n             span: f.span,\n@@ -3026,10 +2976,8 @@ impl<'a> LoweringContext<'a> {\n             }\n         }\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(b.id);\n-\n         P(hir::Block {\n-            hir_id,\n+            hir_id: self.lower_node_id(b.id),\n             stmts: stmts.into(),\n             expr,\n             rules: self.lower_block_check_mode(&b.rules),\n@@ -3220,7 +3168,7 @@ impl<'a> LoweringContext<'a> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n-                let lowered_trait_impl_id = self.lower_node_id(id).hir_id;\n+                let lowered_trait_impl_id = self.lower_node_id(id);\n                 let (generics, (trait_ref, lowered_ty)) = self.add_in_band_defs(\n                     ast_generics,\n                     def_id,\n@@ -3358,19 +3306,18 @@ impl<'a> LoweringContext<'a> {\n                             hir::VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n                             hir::VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n                             hir::VisibilityKind::Restricted { ref path, hir_id: _ } => {\n-                                let id = this.next_id();\n                                 let path = this.renumber_segment_ids(path);\n                                 hir::VisibilityKind::Restricted {\n                                     path,\n-                                    hir_id: id.hir_id,\n+                                    hir_id: this.next_id(),\n                                 }\n                             }\n                         };\n                         let vis = respan(vis.span, vis_kind);\n \n                         this.insert_item(\n                             hir::Item {\n-                                hir_id: new_id.hir_id,\n+                                hir_id: new_id,\n                                 ident,\n                                 attrs: attrs.clone(),\n                                 node: item,\n@@ -3428,10 +3375,7 @@ impl<'a> LoweringContext<'a> {\n \n                 // Add all the nested `PathListItem`s to the HIR.\n                 for &(ref use_tree, id) in trees {\n-                    let LoweredNodeId {\n-                        node_id: new_id,\n-                        hir_id: new_hir_id,\n-                    } = self.lower_node_id(id);\n+                    let new_hir_id = self.lower_node_id(id);\n \n                     let mut vis = vis.clone();\n                     let mut ident = ident.clone();\n@@ -3447,10 +3391,10 @@ impl<'a> LoweringContext<'a> {\n                     // the current owner, since we want each desugared import to\n                     // own its own names, we have to adjust the owner before\n                     // lowering the rest of the import.\n-                    self.with_hir_id_owner(new_id, |this| {\n+                    self.with_hir_id_owner(id, |this| {\n                         let item = this.lower_use_tree(use_tree,\n                                                        &prefix,\n-                                                       new_id,\n+                                                       id,\n                                                        &mut vis,\n                                                        &mut ident,\n                                                        attrs);\n@@ -3460,11 +3404,10 @@ impl<'a> LoweringContext<'a> {\n                             hir::VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n                             hir::VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n                             hir::VisibilityKind::Restricted { ref path, hir_id: _ } => {\n-                                let id = this.next_id();\n                                 let path = this.renumber_segment_ids(path);\n                                 hir::VisibilityKind::Restricted {\n                                     path: path,\n-                                    hir_id: id.hir_id,\n+                                    hir_id: this.next_id(),\n                                 }\n                             }\n                         };\n@@ -3520,15 +3463,14 @@ impl<'a> LoweringContext<'a> {\n         let mut path = path.clone();\n         for seg in path.segments.iter_mut() {\n             if seg.hir_id.is_some() {\n-                seg.hir_id = Some(self.next_id().hir_id);\n+                seg.hir_id = Some(self.next_id());\n             }\n         }\n         path\n     }\n \n     fn lower_trait_item(&mut self, i: &TraitItem) -> hir::TraitItem {\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(i.id);\n-        let trait_item_def_id = self.resolver.definitions().local_def_id(node_id);\n+        let trait_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, node) = match i.node {\n             TraitItemKind::Const(ref ty, ref default) => (\n@@ -3578,7 +3520,7 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         hir::TraitItem {\n-            hir_id,\n+            hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             generics,\n@@ -3604,7 +3546,7 @@ impl<'a> LoweringContext<'a> {\n             TraitItemKind::Macro(..) => unimplemented!(),\n         };\n         hir::TraitItemRef {\n-            id: hir::TraitItemId { hir_id: self.lower_node_id(i.id).hir_id },\n+            id: hir::TraitItemId { hir_id: self.lower_node_id(i.id) },\n             ident: i.ident,\n             span: i.span,\n             defaultness: self.lower_defaultness(Defaultness::Default, has_default),\n@@ -3613,8 +3555,7 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_impl_item(&mut self, i: &ImplItem) -> hir::ImplItem {\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(i.id);\n-        let impl_item_def_id = self.resolver.definitions().local_def_id(node_id);\n+        let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, node) = match i.node {\n             ImplItemKind::Const(ref ty, ref expr) => {\n@@ -3671,7 +3612,7 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         hir::ImplItem {\n-            hir_id,\n+            hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             generics,\n@@ -3686,7 +3627,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_impl_item_ref(&mut self, i: &ImplItem) -> hir::ImplItemRef {\n         hir::ImplItemRef {\n-            id: hir::ImplItemId { hir_id: self.lower_node_id(i.id).hir_id },\n+            id: hir::ImplItemId { hir_id: self.lower_node_id(i.id) },\n             ident: i.ident,\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n@@ -3742,7 +3683,7 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         node_ids.into_iter().map(|node_id| hir::ItemId {\n-            id: self.allocate_hir_id_counter(node_id).hir_id\n+            id: self.allocate_hir_id_counter(node_id)\n         }).collect()\n     }\n \n@@ -3776,7 +3717,7 @@ impl<'a> LoweringContext<'a> {\n             if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") ||\n                               attr::contains_name(&i.attrs, \"rustc_doc_only_macro\") {\n                 let body = self.lower_token_stream(def.stream());\n-                let hir_id = self.lower_node_id(i.id).hir_id;\n+                let hir_id = self.lower_node_id(i.id);\n                 self.exported_macros.push(hir::MacroDef {\n                     name: ident.name,\n                     vis,\n@@ -3792,10 +3733,8 @@ impl<'a> LoweringContext<'a> {\n \n         let node = self.lower_item_kind(i.id, &mut ident, &attrs, &mut vis, &i.node);\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(i.id);\n-\n         Some(hir::Item {\n-            hir_id,\n+            hir_id: self.lower_node_id(i.id),\n             ident,\n             attrs,\n             node,\n@@ -3805,10 +3744,9 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem {\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(i.id);\n-        let def_id = self.resolver.definitions().local_def_id(node_id);\n+        let def_id = self.resolver.definitions().local_def_id(i.id);\n         hir::ForeignItem {\n-            hir_id,\n+            hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             node: match i.node {\n@@ -3948,7 +3886,7 @@ impl<'a> LoweringContext<'a> {\n \n                         hir::PatKind::Binding(\n                             self.lower_binding_mode(binding_mode),\n-                            self.lower_node_id(canonical_id).hir_id,\n+                            self.lower_node_id(canonical_id),\n                             ident,\n                             sub.as_ref().map(|x| self.lower_pat(x)),\n                         )\n@@ -4000,12 +3938,10 @@ impl<'a> LoweringContext<'a> {\n                 let fs = fields\n                     .iter()\n                     .map(|f| {\n-                        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n                         Spanned {\n                             span: f.span,\n                             node: hir::FieldPat {\n-                                hir_id,\n+                                hir_id: self.next_id(),\n                                 ident: f.node.ident,\n                                 pat: self.lower_pat(&f.node.pat),\n                                 is_shorthand: f.node.is_shorthand,\n@@ -4036,9 +3972,8 @@ impl<'a> LoweringContext<'a> {\n             PatKind::Mac(_) => panic!(\"Shouldn't exist here\"),\n         };\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(p.id);\n         P(hir::Pat {\n-            hir_id,\n+            hir_id: self.lower_node_id(p.id),\n             node,\n             span: p.span,\n         })\n@@ -4053,9 +3988,8 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_anon_const(&mut self, c: &AnonConst) -> hir::AnonConst {\n         self.with_new_scopes(|this| {\n-            let LoweredNodeId { node_id: _, hir_id } = this.lower_node_id(c.id);\n             hir::AnonConst {\n-                hir_id,\n+                hir_id: this.lower_node_id(c.id),\n                 body: this.lower_body(None, |this| this.lower_expr(&c.value)),\n             }\n         })\n@@ -4130,11 +4064,10 @@ impl<'a> LoweringContext<'a> {\n                             // Wrap the `if let` expr in a block.\n                             let span = els.span;\n                             let els = P(self.lower_expr(els));\n-                            let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                             let blk = P(hir::Block {\n                                 stmts: hir_vec![],\n                                 expr: Some(els),\n-                                hir_id,\n+                                hir_id: self.next_id(),\n                                 rules: hir::DefaultBlock,\n                                 span,\n                                 targeted_by_break: false,\n@@ -4176,13 +4109,12 @@ impl<'a> LoweringContext<'a> {\n                     let mut block = this.lower_block(body, true).into_inner();\n                     let tail = block.expr.take().map_or_else(\n                         || {\n-                            let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n                             let span = this.sess.source_map().end_point(unstable_span);\n                             hir::Expr {\n                                 span,\n                                 node: hir::ExprKind::Tup(hir_vec![]),\n                                 attrs: ThinVec::new(),\n-                                hir_id,\n+                                hir_id: this.next_id(),\n                             }\n                         },\n                         |x: P<hir::Expr>| x.into_inner(),\n@@ -4363,10 +4295,8 @@ impl<'a> LoweringContext<'a> {\n                 let struct_path = self.std_path(e.span, &struct_path, None, is_unit);\n                 let struct_path = hir::QPath::Resolved(None, P(struct_path));\n \n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(e.id);\n-\n                 return hir::Expr {\n-                    hir_id,\n+                    hir_id: self.lower_node_id(e.id),\n                     node: if is_unit {\n                         hir::ExprKind::Path(struct_path)\n                     } else {\n@@ -4667,9 +4597,8 @@ impl<'a> LoweringContext<'a> {\n                         ThinVec::new(),\n                     ))\n                 };\n-                let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                 let match_stmt = hir::Stmt {\n-                    hir_id,\n+                    hir_id: self.next_id(),\n                     node: hir::StmtKind::Expr(match_expr),\n                     span: head_sp,\n                 };\n@@ -4695,9 +4624,8 @@ impl<'a> LoweringContext<'a> {\n \n                 let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n                 let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n-                let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                 let body_stmt = hir::Stmt {\n-                    hir_id,\n+                    hir_id: self.next_id(),\n                     node: hir::StmtKind::Expr(body_expr),\n                     span: body.span,\n                 };\n@@ -4714,9 +4642,8 @@ impl<'a> LoweringContext<'a> {\n                     self.lower_label(opt_label),\n                     hir::LoopSource::ForLoop,\n                 );\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(e.id);\n                 let loop_expr = P(hir::Expr {\n-                    hir_id,\n+                    hir_id: self.lower_node_id(e.id),\n                     node: loop_expr,\n                     span: e.span,\n                     attrs: ThinVec::new(),\n@@ -4834,7 +4761,7 @@ impl<'a> LoweringContext<'a> {\n                     let thin_attrs = ThinVec::from(attrs);\n                     let catch_scope = self.catch_scopes.last().map(|x| *x);\n                     let ret_expr = if let Some(catch_node) = catch_scope {\n-                        let target_id = Ok(self.lower_node_id(catch_node).hir_id);\n+                        let target_id = Ok(self.lower_node_id(catch_node));\n                         P(self.expr(\n                             try_span,\n                             hir::ExprKind::Break(\n@@ -4864,10 +4791,8 @@ impl<'a> LoweringContext<'a> {\n             ExprKind::Mac(_) => panic!(\"Shouldn't exist here\"),\n         };\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(e.id);\n-\n         hir::Expr {\n-            hir_id,\n+            hir_id: self.lower_node_id(e.id),\n             node: kind,\n             span: e.span,\n             attrs: e.attrs.clone(),\n@@ -4881,21 +4806,18 @@ impl<'a> LoweringContext<'a> {\n                 let mut ids: SmallVec<[hir::Stmt; 1]> = item_ids\n                     .into_iter()\n                     .map(|item_id| {\n-                        let item_id = hir::ItemId { id: self.lower_node_id(item_id).hir_id };\n-                        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n+                        let item_id = hir::ItemId { id: self.lower_node_id(item_id) };\n \n                         hir::Stmt {\n-                            hir_id,\n+                            hir_id: self.next_id(),\n                             node: hir::StmtKind::Item(item_id),\n                             span: s.span,\n                         }\n                     })\n                     .collect();\n                 ids.push({\n-                    let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(s.id);\n-\n                     hir::Stmt {\n-                        hir_id,\n+                        hir_id: self.lower_node_id(s.id),\n                         node: hir::StmtKind::Local(P(l)),\n                         span: s.span,\n                     }\n@@ -4908,7 +4830,7 @@ impl<'a> LoweringContext<'a> {\n                 return self.lower_item_id(it)\n                     .into_iter()\n                     .map(|item_id| {\n-                        let LoweredNodeId { node_id: _, hir_id } = id.take()\n+                        let hir_id = id.take()\n                           .map(|id| self.lower_node_id(id))\n                           .unwrap_or_else(|| self.next_id());\n \n@@ -4921,19 +4843,15 @@ impl<'a> LoweringContext<'a> {\n                     .collect();\n             }\n             StmtKind::Expr(ref e) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(s.id);\n-\n                 hir::Stmt {\n-                    hir_id,\n+                    hir_id: self.lower_node_id(s.id),\n                     node: hir::StmtKind::Expr(P(self.lower_expr(e))),\n                     span: s.span,\n                 }\n             },\n             StmtKind::Semi(ref e) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(s.id);\n-\n                 hir::Stmt {\n-                    hir_id,\n+                    hir_id: self.lower_node_id(s.id),\n                     node: hir::StmtKind::Semi(P(self.lower_expr(e))),\n                     span: s.span,\n                 }\n@@ -4978,7 +4896,7 @@ impl<'a> LoweringContext<'a> {\n                         ParamMode::Explicit,\n                         explicit_owner,\n                     )),\n-                    hir_id: lowered_id.hir_id,\n+                    hir_id: lowered_id,\n                 }\n             },\n             VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n@@ -5047,10 +4965,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn field(&mut self, ident: Ident, expr: P<hir::Expr>, span: Span) -> hir::Field {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         hir::Field {\n-            hir_id,\n+            hir_id: self.next_id(),\n             ident,\n             span,\n             expr,\n@@ -5144,9 +5060,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn expr(&mut self, span: Span, node: hir::ExprKind, attrs: ThinVec<Attribute>) -> hir::Expr {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         hir::Expr {\n-            hir_id,\n+            hir_id: self.next_id(),\n             node,\n             span,\n             attrs,\n@@ -5160,21 +5075,18 @@ impl<'a> LoweringContext<'a> {\n         pat: P<hir::Pat>,\n         source: hir::LocalSource,\n     ) -> hir::Stmt {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         let local = hir::Local {\n             pat,\n             ty: None,\n             init: ex,\n-            hir_id,\n+            hir_id: self.next_id(),\n             span: sp,\n             attrs: ThinVec::new(),\n             source,\n         };\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         hir::Stmt {\n-            hir_id,\n+            hir_id: self.next_id(),\n             node: hir::StmtKind::Local(P(local)),\n             span: sp\n         }\n@@ -5190,12 +5102,10 @@ impl<'a> LoweringContext<'a> {\n         stmts: hir::HirVec<hir::Stmt>,\n         expr: Option<P<hir::Expr>>,\n     ) -> hir::Block {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         hir::Block {\n             stmts,\n             expr,\n-            hir_id,\n+            hir_id: self.next_id(),\n             rules: hir::DefaultBlock,\n             span,\n             targeted_by_break: false,\n@@ -5244,7 +5154,7 @@ impl<'a> LoweringContext<'a> {\n         ident: Ident,\n         bm: hir::BindingAnnotation,\n     ) -> (P<hir::Pat>, hir::HirId) {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n+        let hir_id = self.next_id();\n \n         (\n             P(hir::Pat {\n@@ -5261,9 +5171,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn pat(&mut self, span: Span, pat: hir::PatKind) -> P<hir::Pat> {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         P(hir::Pat {\n-            hir_id,\n+            hir_id: self.next_id(),\n             node: pat,\n             span,\n         })\n@@ -5286,14 +5195,13 @@ impl<'a> LoweringContext<'a> {\n \n         for seg in path.segments.iter_mut() {\n             if seg.hir_id.is_some() {\n-                seg.hir_id = Some(self.next_id().hir_id);\n+                seg.hir_id = Some(self.next_id());\n             }\n         }\n         path\n     }\n \n-    fn ty_path(&mut self, id: LoweredNodeId, span: Span, qpath: hir::QPath) -> hir::Ty {\n-        let mut id = id;\n+    fn ty_path(&mut self, mut hir_id: hir::HirId, span: Span, qpath: hir::QPath) -> hir::Ty {\n         let node = match qpath {\n             hir::QPath::Resolved(None, path) => {\n                 // Turn trait object paths into `TyKind::TraitObject` instead.\n@@ -5303,14 +5211,14 @@ impl<'a> LoweringContext<'a> {\n                             bound_generic_params: hir::HirVec::new(),\n                             trait_ref: hir::TraitRef {\n                                 path: path.and_then(|path| path),\n-                                hir_ref_id: id.hir_id,\n+                                hir_ref_id: hir_id,\n                             },\n                             span,\n                         };\n \n                         // The original ID is taken by the `PolyTraitRef`,\n                         // so the `Ty` itself needs a different one.\n-                        id = self.next_id();\n+                        hir_id = self.next_id();\n                         hir::TyKind::TraitObject(hir_vec![principal], self.elided_dyn_bound(span))\n                     }\n                     _ => hir::TyKind::Path(hir::QPath::Resolved(None, path)),\n@@ -5319,7 +5227,7 @@ impl<'a> LoweringContext<'a> {\n             _ => hir::TyKind::Path(qpath),\n         };\n         hir::Ty {\n-            hir_id: id.hir_id,\n+            hir_id,\n             node,\n             span,\n         }\n@@ -5335,9 +5243,8 @@ impl<'a> LoweringContext<'a> {\n             // `'f`.\n             AnonymousLifetimeMode::CreateParameter => {\n                 let fresh_name = self.collect_fresh_in_band_lifetime(span);\n-                let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                 hir::Lifetime {\n-                    hir_id,\n+                    hir_id: self.next_id(),\n                     span,\n                     name: hir::LifetimeName::Param(fresh_name),\n                 }\n@@ -5360,7 +5267,7 @@ impl<'a> LoweringContext<'a> {\n             Some(id) => (id, \"`'_` cannot be used here\", \"`'_` is a reserved lifetime name\"),\n \n             None => (\n-                self.next_id().node_id,\n+                self.sess.next_node_id(),\n                 \"`&` without an explicit lifetime name cannot be used here\",\n                 \"explicit lifetime name needed here\",\n             ),\n@@ -5451,15 +5358,13 @@ impl<'a> LoweringContext<'a> {\n         replacement: LtReplacement,\n         span: Span,\n     ) -> hir::Lifetime {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n+        let hir_id = self.next_id();\n         self.replace_elided_lifetime(hir_id, span, replacement)\n     }\n \n     fn new_implicit_lifetime(&mut self, span: Span) -> hir::Lifetime {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         hir::Lifetime {\n-            hir_id,\n+            hir_id: self.next_id(),\n             span,\n             name: hir::LifetimeName::Implicit,\n         }"}, {"sha": "4dddf811c0523a5e54487bdc89c5111a342a0c1d", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -627,6 +627,8 @@ impl<'a> Resolver<'a> {\n             let dummy_binding = self.import(dummy_binding, directive);\n             self.per_ns(|this, ns| {\n                 let _ = this.try_define(directive.parent_scope.module, target, ns, dummy_binding);\n+                // Consider erroneous imports used to avoid duplicate diagnostics.\n+                this.record_use(target, ns, dummy_binding, false);\n             });\n         }\n     }"}, {"sha": "6dd3c0113cdcda97b48e906a35fb8731557726fe", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1942,9 +1942,11 @@ E0207: r##\"\n Any type parameter or lifetime parameter of an `impl` must meet at least one of\n the following criteria:\n \n- - it appears in the self type of the impl\n- - for a trait impl, it appears in the trait reference\n- - it is bound as an associated type\n+ - it appears in the _implementing type_ of the impl, e.g. `impl<T> Foo<T>`\n+ - for a trait impl, it appears in the _implemented trait_, e.g.\n+   `impl<T> SomeTrait<T> for Foo`\n+ - it is bound as an associated type, e.g. `impl<T, U> SomeTrait for T\n+   where T: AnotherTrait<AssocType=U>`\n \n ### Error example 1\n \n@@ -1963,9 +1965,9 @@ impl<T: Default> Foo {\n }\n ```\n \n-The problem is that the parameter `T` does not appear in the self type (`Foo`)\n-of the impl. In this case, we can fix the error by moving the type parameter\n-from the `impl` to the method `get`:\n+The problem is that the parameter `T` does not appear in the implementing type\n+(`Foo`) of the impl. In this case, we can fix the error by moving the type\n+parameter from the `impl` to the method `get`:\n \n \n ```"}, {"sha": "eaf5d619f5454b1a48a9728cc41b07f5a4072916", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -11,7 +11,7 @@\n \n use crate::fmt;\n use crate::ffi::OsString;\n-use crate::io::{self, SeekFrom, Seek, Read, Initializer, Write, IoVec, IoVecMut};\n+use crate::io::{self, SeekFrom, Seek, Read, Initializer, Write, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::fs as fs_imp;\n use crate::sys_common::{AsInnerMut, FromInner, AsInner, IntoInner};\n@@ -617,7 +617,7 @@ impl Read for File {\n         self.inner.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n@@ -632,7 +632,7 @@ impl Write for File {\n         self.inner.write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n \n@@ -650,7 +650,7 @@ impl Read for &File {\n         self.inner.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n@@ -665,7 +665,7 @@ impl Write for &File {\n         self.inner.write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n "}, {"sha": "5be2687d8f5ff3bb14af96ab9c413ec7d46d123e", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -5,7 +5,8 @@ use crate::io::prelude::*;\n use crate::cmp;\n use crate::error;\n use crate::fmt;\n-use crate::io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom, IoSlice,\n+        IoSliceMut};\n use crate::memchr;\n \n /// The `BufReader` struct adds buffering to any reader.\n@@ -249,7 +250,7 @@ impl<R: Read> Read for BufReader<R> {\n         Ok(nread)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let total_len = bufs.iter().map(|b| b.len()).sum::<usize>();\n         if self.pos == self.cap && total_len >= self.buf.len() {\n             self.discard_buffer();\n@@ -609,7 +610,7 @@ impl<W: Write> Write for BufWriter<W> {\n         }\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let total_len = bufs.iter().map(|b| b.len()).sum::<usize>();\n         if self.buf.len() + total_len > self.buf.capacity() {\n             self.flush_buf()?;"}, {"sha": "64f8659b8f8fe35ae27ccb86f55cf9b792aab5c4", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 44, "deletions": 31, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,7 +1,7 @@\n use crate::io::prelude::*;\n \n use crate::cmp;\n-use crate::io::{self, Initializer, SeekFrom, Error, ErrorKind, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, SeekFrom, Error, ErrorKind, IoSlice, IoSliceMut};\n \n use core::convert::TryInto;\n \n@@ -230,7 +230,7 @@ impl<T> Read for Cursor<T> where T: AsRef<[u8]> {\n         Ok(n)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let mut nread = 0;\n         for buf in bufs {\n             let n = self.read(buf)?;\n@@ -275,7 +275,7 @@ fn slice_write(pos_mut: &mut u64, slice: &mut [u8], buf: &[u8]) -> io::Result<us\n fn slice_write_vectored(\n     pos_mut: &mut u64,\n     slice: &mut [u8],\n-    bufs: &[IoVec<'_>],\n+    bufs: &[IoSlice<'_>],\n ) -> io::Result<usize>\n {\n     let mut nwritten = 0;\n@@ -319,7 +319,7 @@ fn vec_write(pos_mut: &mut u64, vec: &mut Vec<u8>, buf: &[u8]) -> io::Result<usi\n fn vec_write_vectored(\n     pos_mut: &mut u64,\n     vec: &mut Vec<u8>,\n-    bufs: &[IoVec<'_>],\n+    bufs: &[IoSlice<'_>],\n ) -> io::Result<usize>\n {\n     let mut nwritten = 0;\n@@ -337,7 +337,7 @@ impl Write for Cursor<&mut [u8]> {\n     }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         slice_write_vectored(&mut self.pos, self.inner, bufs)\n     }\n \n@@ -350,7 +350,7 @@ impl Write for Cursor<&mut Vec<u8>> {\n         vec_write(&mut self.pos, self.inner, buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         vec_write_vectored(&mut self.pos, self.inner, bufs)\n     }\n \n@@ -363,7 +363,7 @@ impl Write for Cursor<Vec<u8>> {\n         vec_write(&mut self.pos, &mut self.inner, buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         vec_write_vectored(&mut self.pos, &mut self.inner, bufs)\n     }\n \n@@ -378,7 +378,7 @@ impl Write for Cursor<Box<[u8]>> {\n     }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         slice_write_vectored(&mut self.pos, &mut self.inner, bufs)\n     }\n \n@@ -388,7 +388,7 @@ impl Write for Cursor<Box<[u8]>> {\n #[cfg(test)]\n mod tests {\n     use crate::io::prelude::*;\n-    use crate::io::{Cursor, SeekFrom, IoVec, IoVecMut};\n+    use crate::io::{Cursor, SeekFrom, IoSlice, IoSliceMut};\n \n     #[test]\n     fn test_vec_writer() {\n@@ -397,7 +397,7 @@ mod tests {\n         assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n         assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n         assert_eq!(writer.write_vectored(\n-            &[IoVec::new(&[]), IoVec::new(&[8, 9]), IoVec::new(&[10])],\n+            &[IoSlice::new(&[]), IoSlice::new(&[8, 9]), IoSlice::new(&[10])],\n         ).unwrap(), 3);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n         assert_eq!(writer, b);\n@@ -410,7 +410,7 @@ mod tests {\n         assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n         assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n         assert_eq!(writer.write_vectored(\n-            &[IoVec::new(&[]), IoVec::new(&[8, 9]), IoVec::new(&[10])],\n+            &[IoSlice::new(&[]), IoSlice::new(&[8, 9]), IoSlice::new(&[10])],\n         ).unwrap(), 3);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n         assert_eq!(&writer.get_ref()[..], b);\n@@ -424,7 +424,7 @@ mod tests {\n         assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n         assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n         assert_eq!(writer.write_vectored(\n-            &[IoVec::new(&[]), IoVec::new(&[8, 9]), IoVec::new(&[10])],\n+            &[IoSlice::new(&[]), IoSlice::new(&[8, 9]), IoSlice::new(&[10])],\n         ).unwrap(), 3);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n         assert_eq!(&writer.get_ref()[..], b);\n@@ -452,18 +452,21 @@ mod tests {\n     fn test_box_slice_writer_vectored() {\n         let mut writer = Cursor::new(vec![0u8; 9].into_boxed_slice());\n         assert_eq!(writer.position(), 0);\n-        assert_eq!(writer.write_vectored(&[IoVec::new(&[0])]).unwrap(), 1);\n+        assert_eq!(writer.write_vectored(&[IoSlice::new(&[0])]).unwrap(), 1);\n         assert_eq!(writer.position(), 1);\n         assert_eq!(\n-            writer.write_vectored(&[IoVec::new(&[1, 2, 3]), IoVec::new(&[4, 5, 6, 7])]).unwrap(),\n+            writer.write_vectored(&[\n+                IoSlice::new(&[1, 2, 3]),\n+                IoSlice::new(&[4, 5, 6, 7]),\n+            ]).unwrap(),\n             7,\n         );\n         assert_eq!(writer.position(), 8);\n         assert_eq!(writer.write_vectored(&[]).unwrap(), 0);\n         assert_eq!(writer.position(), 8);\n \n-        assert_eq!(writer.write_vectored(&[IoVec::new(&[8, 9])]).unwrap(), 1);\n-        assert_eq!(writer.write_vectored(&[IoVec::new(&[10])]).unwrap(), 0);\n+        assert_eq!(writer.write_vectored(&[IoSlice::new(&[8, 9])]).unwrap(), 1);\n+        assert_eq!(writer.write_vectored(&[IoSlice::new(&[10])]).unwrap(), 0);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];\n         assert_eq!(&**writer.get_ref(), b);\n     }\n@@ -495,20 +498,20 @@ mod tests {\n         {\n             let mut writer = Cursor::new(&mut buf[..]);\n             assert_eq!(writer.position(), 0);\n-            assert_eq!(writer.write_vectored(&[IoVec::new(&[0])]).unwrap(), 1);\n+            assert_eq!(writer.write_vectored(&[IoSlice::new(&[0])]).unwrap(), 1);\n             assert_eq!(writer.position(), 1);\n             assert_eq!(\n                 writer.write_vectored(\n-                    &[IoVec::new(&[1, 2, 3]), IoVec::new(&[4, 5, 6, 7])],\n+                    &[IoSlice::new(&[1, 2, 3]), IoSlice::new(&[4, 5, 6, 7])],\n                 ).unwrap(),\n                 7,\n             );\n             assert_eq!(writer.position(), 8);\n             assert_eq!(writer.write_vectored(&[]).unwrap(), 0);\n             assert_eq!(writer.position(), 8);\n \n-            assert_eq!(writer.write_vectored(&[IoVec::new(&[8, 9])]).unwrap(), 1);\n-            assert_eq!(writer.write_vectored(&[IoVec::new(&[10])]).unwrap(), 0);\n+            assert_eq!(writer.write_vectored(&[IoSlice::new(&[8, 9])]).unwrap(), 1);\n+            assert_eq!(writer.write_vectored(&[IoSlice::new(&[10])]).unwrap(), 0);\n         }\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];\n         assert_eq!(buf, b);\n@@ -578,11 +581,14 @@ mod tests {\n     fn test_mem_reader_vectored() {\n         let mut reader = Cursor::new(vec![0, 1, 2, 3, 4, 5, 6, 7]);\n         let mut buf = [];\n-        assert_eq!(reader.read_vectored(&mut [IoVecMut::new(&mut buf)]).unwrap(), 0);\n+        assert_eq!(reader.read_vectored(&mut [IoSliceMut::new(&mut buf)]).unwrap(), 0);\n         assert_eq!(reader.position(), 0);\n         let mut buf = [0];\n         assert_eq!(\n-            reader.read_vectored(&mut [IoVecMut::new(&mut []), IoVecMut::new(&mut buf)]).unwrap(),\n+            reader.read_vectored(&mut [\n+                IoSliceMut::new(&mut []),\n+                IoSliceMut::new(&mut buf),\n+            ]).unwrap(),\n             1,\n         );\n         assert_eq!(reader.position(), 1);\n@@ -591,9 +597,10 @@ mod tests {\n         let mut buf1 = [0; 4];\n         let mut buf2 = [0; 4];\n         assert_eq!(\n-            reader.read_vectored(\n-                &mut [IoVecMut::new(&mut buf1), IoVecMut::new(&mut buf2)],\n-            ).unwrap(),\n+            reader.read_vectored(&mut [\n+                IoSliceMut::new(&mut buf1),\n+                IoSliceMut::new(&mut buf2),\n+            ]).unwrap(),\n             7,\n         );\n         let b1: &[_] = &[1, 2, 3, 4];\n@@ -629,11 +636,14 @@ mod tests {\n     fn test_boxed_slice_reader_vectored() {\n         let mut reader = Cursor::new(vec![0, 1, 2, 3, 4, 5, 6, 7].into_boxed_slice());\n         let mut buf = [];\n-        assert_eq!(reader.read_vectored(&mut [IoVecMut::new(&mut buf)]).unwrap(), 0);\n+        assert_eq!(reader.read_vectored(&mut [IoSliceMut::new(&mut buf)]).unwrap(), 0);\n         assert_eq!(reader.position(), 0);\n         let mut buf = [0];\n         assert_eq!(\n-            reader.read_vectored(&mut [IoVecMut::new(&mut []), IoVecMut::new(&mut buf)]).unwrap(),\n+            reader.read_vectored(&mut [\n+                IoSliceMut::new(&mut []),\n+                IoSliceMut::new(&mut buf),\n+            ]).unwrap(),\n             1,\n         );\n         assert_eq!(reader.position(), 1);\n@@ -643,7 +653,7 @@ mod tests {\n         let mut buf2 = [0; 4];\n         assert_eq!(\n             reader.read_vectored(\n-                &mut [IoVecMut::new(&mut buf1), IoVecMut::new(&mut buf2)],\n+                &mut [IoSliceMut::new(&mut buf1), IoSliceMut::new(&mut buf2)],\n             ).unwrap(),\n             7,\n         );\n@@ -689,10 +699,13 @@ mod tests {\n         let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];\n         let reader = &mut &in_buf[..];\n         let mut buf = [];\n-        assert_eq!(reader.read_vectored(&mut [IoVecMut::new(&mut buf)]).unwrap(), 0);\n+        assert_eq!(reader.read_vectored(&mut [IoSliceMut::new(&mut buf)]).unwrap(), 0);\n         let mut buf = [0];\n         assert_eq!(\n-            reader.read_vectored(&mut [IoVecMut::new(&mut []), IoVecMut::new(&mut buf)]).unwrap(),\n+            reader.read_vectored(&mut [\n+                IoSliceMut::new(&mut []),\n+                IoSliceMut::new(&mut buf),\n+            ]).unwrap(),\n             1,\n         );\n         assert_eq!(reader.len(), 7);\n@@ -702,7 +715,7 @@ mod tests {\n         let mut buf2 = [0; 4];\n         assert_eq!(\n             reader.read_vectored(\n-                &mut [IoVecMut::new(&mut buf1), IoVecMut::new(&mut buf2)],\n+                &mut [IoSliceMut::new(&mut buf1), IoSliceMut::new(&mut buf2)],\n             ).unwrap(),\n             7,\n         );"}, {"sha": "c959f2d389b116aefcc970a816564569c421e50a", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,6 +1,6 @@\n use crate::cmp;\n-use crate::io::{self, SeekFrom, Read, Initializer, Write, Seek, BufRead, Error, ErrorKind, IoVecMut,\n-         IoVec};\n+use crate::io::{self, SeekFrom, Read, Initializer, Write, Seek, BufRead, Error, ErrorKind,\n+        IoSliceMut, IoSlice};\n use crate::fmt;\n use crate::mem;\n \n@@ -15,7 +15,7 @@ impl<R: Read + ?Sized> Read for &mut R {\n     }\n \n     #[inline]\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         (**self).read_vectored(bufs)\n     }\n \n@@ -45,7 +45,7 @@ impl<W: Write + ?Sized> Write for &mut W {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         (**self).write_vectored(bufs)\n     }\n \n@@ -94,7 +94,7 @@ impl<R: Read + ?Sized> Read for Box<R> {\n     }\n \n     #[inline]\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         (**self).read_vectored(bufs)\n     }\n \n@@ -124,7 +124,7 @@ impl<W: Write + ?Sized> Write for Box<W> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         (**self).write_vectored(bufs)\n     }\n \n@@ -207,7 +207,7 @@ impl Read for &[u8] {\n     }\n \n     #[inline]\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let mut nread = 0;\n         for buf in bufs {\n             nread += self.read(buf)?;\n@@ -280,7 +280,7 @@ impl Write for &mut [u8] {\n     }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let mut nwritten = 0;\n         for buf in bufs {\n             nwritten += self.write(buf)?;\n@@ -316,7 +316,7 @@ impl Write for Vec<u8> {\n     }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let len = bufs.iter().map(|b| b.len()).sum();\n         self.reserve(len);\n         for buf in bufs {"}, {"sha": "8fea6251e652a143a2ae29aab6f616692f543080", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -390,7 +390,7 @@ fn read_to_end_with_reservation<R: Read + ?Sized>(r: &mut R,\n     ret\n }\n \n-pub(crate) fn default_read_vectored<F>(read: F, bufs: &mut [IoVecMut<'_>]) -> Result<usize>\n+pub(crate) fn default_read_vectored<F>(read: F, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>\n where\n     F: FnOnce(&mut [u8]) -> Result<usize>\n {\n@@ -401,7 +401,7 @@ where\n     read(buf)\n }\n \n-pub(crate) fn default_write_vectored<F>(write: F, bufs: &[IoVec<'_>]) -> Result<usize>\n+pub(crate) fn default_write_vectored<F>(write: F, bufs: &[IoSlice<'_>]) -> Result<usize>\n where\n     F: FnOnce(&[u8]) -> Result<usize>\n {\n@@ -554,8 +554,8 @@ pub trait Read {\n     ///\n     /// The default implementation calls `read` with either the first nonempty\n     /// buffer provided, or an empty one if none exists.\n-    #[unstable(feature = \"iovec\", issue = \"58452\")]\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> Result<usize> {\n+    #[stable(feature = \"iovec\", since = \"1.36.0\")]\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize> {\n         default_read_vectored(|b| self.read(b), bufs)\n     }\n \n@@ -911,32 +911,32 @@ pub trait Read {\n /// It is semantically a wrapper around an `&mut [u8]`, but is guaranteed to be\n /// ABI compatible with the `iovec` type on Unix platforms and `WSABUF` on\n /// Windows.\n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n #[repr(transparent)]\n-pub struct IoVecMut<'a>(sys::io::IoVecMut<'a>);\n+pub struct IoSliceMut<'a>(sys::io::IoSliceMut<'a>);\n \n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n-impl<'a> fmt::Debug for IoVecMut<'a> {\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n+impl<'a> fmt::Debug for IoSliceMut<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.0.as_slice(), fmt)\n     }\n }\n \n-impl<'a> IoVecMut<'a> {\n-    /// Creates a new `IoVecMut` wrapping a byte slice.\n+impl<'a> IoSliceMut<'a> {\n+    /// Creates a new `IoSliceMut` wrapping a byte slice.\n     ///\n     /// # Panics\n     ///\n     /// Panics on Windows if the slice is larger than 4GB.\n-    #[unstable(feature = \"iovec\", issue = \"58452\")]\n+    #[stable(feature = \"iovec\", since = \"1.36.0\")]\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut(sys::io::IoVecMut::new(buf))\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut(sys::io::IoSliceMut::new(buf))\n     }\n }\n \n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n-impl<'a> Deref for IoVecMut<'a> {\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n+impl<'a> Deref for IoSliceMut<'a> {\n     type Target = [u8];\n \n     #[inline]\n@@ -945,8 +945,8 @@ impl<'a> Deref for IoVecMut<'a> {\n     }\n }\n \n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n-impl<'a> DerefMut for IoVecMut<'a> {\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n+impl<'a> DerefMut for IoSliceMut<'a> {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut [u8] {\n         self.0.as_mut_slice()\n@@ -958,32 +958,32 @@ impl<'a> DerefMut for IoVecMut<'a> {\n /// It is semantically a wrapper around an `&[u8]`, but is guaranteed to be\n /// ABI compatible with the `iovec` type on Unix platforms and `WSABUF` on\n /// Windows.\n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n #[repr(transparent)]\n-pub struct IoVec<'a>(sys::io::IoVec<'a>);\n+pub struct IoSlice<'a>(sys::io::IoSlice<'a>);\n \n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n-impl<'a> fmt::Debug for IoVec<'a> {\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n+impl<'a> fmt::Debug for IoSlice<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.0.as_slice(), fmt)\n     }\n }\n \n-impl<'a> IoVec<'a> {\n-    /// Creates a new `IoVec` wrapping a byte slice.\n+impl<'a> IoSlice<'a> {\n+    /// Creates a new `IoSlice` wrapping a byte slice.\n     ///\n     /// # Panics\n     ///\n     /// Panics on Windows if the slice is larger than 4GB.\n-    #[unstable(feature = \"iovec\", issue = \"58452\")]\n+    #[stable(feature = \"iovec\", since = \"1.36.0\")]\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec(sys::io::IoVec::new(buf))\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice(sys::io::IoSlice::new(buf))\n     }\n }\n \n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n-impl<'a> Deref for IoVec<'a> {\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n+impl<'a> Deref for IoSlice<'a> {\n     type Target = [u8];\n \n     #[inline]\n@@ -1141,8 +1141,8 @@ pub trait Write {\n     ///\n     /// The default implementation calls `write` with either the first nonempty\n     /// buffer provided, or an empty one if none exists.\n-    #[unstable(feature = \"iovec\", issue = \"58452\")]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> Result<usize> {\n+    #[stable(feature = \"iovec\", since = \"1.36.0\")]\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize> {\n         default_write_vectored(|b| self.write(b), bufs)\n     }\n \n@@ -1926,7 +1926,7 @@ impl<T: Read, U: Read> Read for Chain<T, U> {\n         self.second.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize> {\n         if !self.done_first {\n             match self.first.read_vectored(bufs)? {\n                 0 if bufs.iter().any(|b| !b.is_empty()) => self.done_first = true,"}, {"sha": "990c0eb8955e4280f1072c249cd211df8af77f32", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -5,7 +5,7 @@ use crate::io::prelude::*;\n use crate::cell::RefCell;\n use crate::fmt;\n use crate::io::lazy::Lazy;\n-use crate::io::{self, Initializer, BufReader, LineWriter, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, BufReader, LineWriter, IoSlice, IoSliceMut};\n use crate::sync::{Arc, Mutex, MutexGuard};\n use crate::sys::stdio;\n use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n@@ -75,7 +75,7 @@ fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }\n impl Read for StdinRaw {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -87,7 +87,7 @@ impl Read for StdinRaw {\n impl Write for StdoutRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n \n@@ -96,7 +96,7 @@ impl Write for StdoutRaw {\n impl Write for StderrRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n \n@@ -116,7 +116,7 @@ impl<W: io::Write> io::Write for Maybe<W> {\n         }\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let total = bufs.iter().map(|b| b.len()).sum();\n         match self {\n             Maybe::Real(w) => handle_ebadf(w.write_vectored(bufs), total),\n@@ -140,7 +140,7 @@ impl<R: io::Read> io::Read for Maybe<R> {\n         }\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self {\n             Maybe::Real(r) => handle_ebadf(r.read_vectored(bufs), 0),\n             Maybe::Fake => Ok(0)\n@@ -334,7 +334,7 @@ impl Read for Stdin {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.lock().read(buf)\n     }\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.lock().read_vectored(bufs)\n     }\n     #[inline]\n@@ -358,7 +358,7 @@ impl Read for StdinLock<'_> {\n         self.inner.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n@@ -520,7 +520,7 @@ impl Write for Stdout {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.lock().write(buf)\n     }\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.lock().write_vectored(bufs)\n     }\n     fn flush(&mut self) -> io::Result<()> {\n@@ -538,7 +538,7 @@ impl Write for StdoutLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.borrow_mut().write_vectored(bufs)\n     }\n     fn flush(&mut self) -> io::Result<()> {\n@@ -679,7 +679,7 @@ impl Write for Stderr {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.lock().write(buf)\n     }\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.lock().write_vectored(bufs)\n     }\n     fn flush(&mut self) -> io::Result<()> {\n@@ -697,7 +697,7 @@ impl Write for StderrLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.borrow_mut().write_vectored(bufs)\n     }\n     fn flush(&mut self) -> io::Result<()> {"}, {"sha": "7c4eae6512df4822a448efb3f65967de69eb868d", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,7 +1,7 @@\n #![allow(missing_copy_implementations)]\n \n use crate::fmt;\n-use crate::io::{self, Read, Initializer, Write, ErrorKind, BufRead, IoVec, IoVecMut};\n+use crate::io::{self, Read, Initializer, Write, ErrorKind, BufRead, IoSlice, IoSliceMut};\n use crate::mem;\n \n /// Copies the entire contents of a reader into a writer.\n@@ -153,7 +153,7 @@ impl Read for Repeat {\n     }\n \n     #[inline]\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let mut nwritten = 0;\n         for buf in bufs {\n             nwritten += self.read(buf)?;\n@@ -206,7 +206,7 @@ impl Write for Sink {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { Ok(buf.len()) }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let total_len = bufs.iter().map(|b| b.len()).sum();\n         Ok(total_len)\n     }"}, {"sha": "0460ac9d7535439b53d02d53692d6a17a5f62275", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,7 +1,7 @@\n use crate::io::prelude::*;\n \n use crate::fmt;\n-use crate::io::{self, Initializer, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, IoSlice, IoSliceMut};\n use crate::net::{ToSocketAddrs, SocketAddr, Shutdown};\n use crate::sys_common::net as net_imp;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n@@ -569,7 +569,7 @@ impl TcpStream {\n impl Read for TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -582,7 +582,7 @@ impl Read for TcpStream {\n impl Write for TcpStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n \n@@ -592,7 +592,7 @@ impl Write for TcpStream {\n impl Read for &TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -605,7 +605,7 @@ impl Read for &TcpStream {\n impl Write for &TcpStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n \n@@ -930,7 +930,7 @@ impl fmt::Debug for TcpListener {\n #[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\"))))]\n mod tests {\n     use crate::fmt;\n-    use crate::io::{ErrorKind, IoVec, IoVecMut};\n+    use crate::io::{ErrorKind, IoSlice, IoSliceMut};\n     use crate::io::prelude::*;\n     use crate::net::*;\n     use crate::net::test::{next_test_ip4, next_test_ip6};\n@@ -1216,7 +1216,7 @@ mod tests {\n             let mut b = [0];\n             let mut c = [0; 3];\n             let len = t!(s2.read_vectored(\n-                &mut [IoVecMut::new(&mut a), IoVecMut::new(&mut b), IoVecMut::new(&mut c)],\n+                &mut [IoSliceMut::new(&mut a), IoSliceMut::new(&mut b), IoSliceMut::new(&mut c)],\n             ));\n             assert!(len > 0);\n             assert_eq!(b, [10]);\n@@ -1235,7 +1235,7 @@ mod tests {\n             let a = [];\n             let b = [10];\n             let c = [11, 12];\n-            t!(s1.write_vectored(&[IoVec::new(&a), IoVec::new(&b), IoVec::new(&c)]));\n+            t!(s1.write_vectored(&[IoSlice::new(&a), IoSlice::new(&b), IoSlice::new(&c)]));\n \n             let mut buf = [0; 4];\n             let len = t!(s2.read(&mut buf));"}, {"sha": "c1addb46a0a230f8b121e0ec3638535dc6ce9bbd", "filename": "src/libstd/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -111,7 +111,7 @@ use crate::io::prelude::*;\n use crate::ffi::OsStr;\n use crate::fmt;\n use crate::fs;\n-use crate::io::{self, Initializer, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, IoSlice, IoSliceMut};\n use crate::path::Path;\n use crate::str;\n use crate::sys::pipe::{read2, AnonPipe};\n@@ -225,7 +225,7 @@ impl Write for ChildStdin {\n         self.inner.write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n \n@@ -276,7 +276,7 @@ impl Read for ChildStdout {\n         self.inner.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n@@ -328,7 +328,7 @@ impl Read for ChildStderr {\n         self.inner.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n "}, {"sha": "4b423a5cbc11a0e2f8d88372304928ae1df9ecbc", "filename": "src/libstd/sys/cloudabi/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,9 +1,9 @@\n-pub struct IoVec<'a>(&'a [u8]);\n+pub struct IoSlice<'a>(&'a [u8]);\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec(buf)\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice(buf)\n     }\n \n     #[inline]\n@@ -12,12 +12,12 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a>(&'a mut [u8]);\n+pub struct IoSliceMut<'a>(&'a mut [u8]);\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut(buf)\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut(buf)\n     }\n \n     #[inline]"}, {"sha": "05f91541011e6960a82afe307a9a121fb7011e86", "filename": "src/libstd/sys/cloudabi/shims/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, SeekFrom, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -198,15 +198,15 @@ impl File {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "8d609cdfad5dcbee7ae40a920e9474ff21eb770c", "filename": "src/libstd/sys/cloudabi/shims/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,5 +1,5 @@\n use crate::fmt;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n use crate::time::Duration;\n use crate::sys::{unsupported, Void};\n@@ -43,15 +43,15 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "fb14dc591018116ea405550f4697f60378b2d7e8", "filename": "src/libstd/sys/cloudabi/shims/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,15 +8,15 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "b80a1a349e3386835908176ae9e6ff1756befa6d", "filename": "src/libstd/sys/redox/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -2,7 +2,7 @@ use crate::os::unix::prelude::*;\n \n use crate::ffi::{OsString, OsStr};\n use crate::fmt;\n-use crate::io::{self, Error, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, Error, SeekFrom, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n use crate::sync::Arc;\n use crate::sys::fd::FileDesc;\n@@ -278,15 +278,15 @@ impl File {\n         self.0.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n     }\n "}, {"sha": "4b423a5cbc11a0e2f8d88372304928ae1df9ecbc", "filename": "src/libstd/sys/redox/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fredox%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fredox%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fio.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,9 +1,9 @@\n-pub struct IoVec<'a>(&'a [u8]);\n+pub struct IoSlice<'a>(&'a [u8]);\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec(buf)\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice(buf)\n     }\n \n     #[inline]\n@@ -12,12 +12,12 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a>(&'a mut [u8]);\n+pub struct IoSliceMut<'a>(&'a mut [u8]);\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut(buf)\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut(buf)\n     }\n \n     #[inline]"}, {"sha": "494f943c96b53f92ec30c484d9009148a34e0ffb", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,5 +1,5 @@\n use crate::cmp;\n-use crate::io::{self, Error, ErrorKind, Result, IoVec, IoVecMut};\n+use crate::io::{self, Error, ErrorKind, Result, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{SocketAddr, Shutdown};\n use crate::path::Path;\n@@ -34,15 +34,15 @@ impl TcpStream {\n         self.0.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         io::default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> Result<usize> {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         io::default_write_vectored(|b| self.write(b), bufs)\n     }\n "}, {"sha": "29cacb6d562f285e29f16aa61ac0209dd09f9c39", "filename": "src/libstd/sys/redox/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::{cvt, syscall};\n use crate::sys::fd::FileDesc;\n \n@@ -24,15 +24,15 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n     }\n "}, {"sha": "e9095b375fe5d52205bd886827290f84bb5f8069", "filename": "src/libstd/sys/sgx/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, SeekFrom, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -200,15 +200,15 @@ impl File {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "4b423a5cbc11a0e2f8d88372304928ae1df9ecbc", "filename": "src/libstd/sys/sgx/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,9 +1,9 @@\n-pub struct IoVec<'a>(&'a [u8]);\n+pub struct IoSlice<'a>(&'a [u8]);\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec(buf)\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice(buf)\n     }\n \n     #[inline]\n@@ -12,12 +12,12 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a>(&'a mut [u8]);\n+pub struct IoSliceMut<'a>(&'a mut [u8]);\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut(buf)\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut(buf)\n     }\n \n     #[inline]"}, {"sha": "76b0b81186aeb06c5bd82e4f99d4ddbdee8b7a7d", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,5 +1,5 @@\n use crate::fmt;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr, ToSocketAddrs};\n use crate::time::Duration;\n use crate::sys::{unsupported, Void, sgx_ineffective, AsInner, FromInner, IntoInner, TryIntoInner};\n@@ -136,15 +136,15 @@ impl TcpStream {\n         self.inner.inner.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         io::default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.inner.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         io::default_write_vectored(|b| self.write(b), bufs)\n     }\n "}, {"sha": "fb14dc591018116ea405550f4697f60378b2d7e8", "filename": "src/libstd/sys/sgx/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,15 +8,15 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "45a850aa4a85c61d40f522d4339993a46428acd8", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -18,7 +18,7 @@ mod libc {\n use crate::ascii;\n use crate::ffi::OsStr;\n use crate::fmt;\n-use crate::io::{self, Initializer, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{self, Shutdown};\n use crate::os::unix::ffi::OsStrExt;\n@@ -551,7 +551,7 @@ impl io::Read for UnixStream {\n         io::Read::read(&mut &*self, buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         io::Read::read_vectored(&mut &*self, bufs)\n     }\n \n@@ -567,7 +567,7 @@ impl<'a> io::Read for &'a UnixStream {\n         self.0.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -583,7 +583,7 @@ impl io::Write for UnixStream {\n         io::Write::write(&mut &*self, buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         io::Write::write_vectored(&mut &*self, bufs)\n     }\n \n@@ -598,7 +598,7 @@ impl<'a> io::Write for &'a UnixStream {\n         self.0.write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n \n@@ -1531,14 +1531,14 @@ mod test {\n         let (mut s1, mut s2) = or_panic!(UnixStream::pair());\n \n         let len = or_panic!(s1.write_vectored(\n-            &[IoVec::new(b\"hello\"), IoVec::new(b\" \"), IoVec::new(b\"world!\")],\n+            &[IoSlice::new(b\"hello\"), IoSlice::new(b\" \"), IoSlice::new(b\"world!\")],\n         ));\n         assert_eq!(len, 12);\n \n         let mut buf1 = [0; 6];\n         let mut buf2 = [0; 7];\n         let len = or_panic!(s2.read_vectored(\n-            &mut [IoVecMut::new(&mut buf1), IoVecMut::new(&mut buf2)],\n+            &mut [IoSliceMut::new(&mut buf1), IoSliceMut::new(&mut buf2)],\n         ));\n         assert_eq!(len, 12);\n         assert_eq!(&buf1, b\"hello \");"}, {"sha": "6d23963e141aa033e5bbda322a40622cdf5f1553", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,7 +1,7 @@\n #![unstable(reason = \"not public\", issue = \"0\", feature = \"fd\")]\n \n use crate::cmp;\n-use crate::io::{self, Read, Initializer, IoVec, IoVecMut};\n+use crate::io::{self, Read, Initializer, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::cvt;\n@@ -53,7 +53,7 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::readv(self.fd,\n                         bufs.as_ptr() as *const libc::iovec,\n@@ -115,7 +115,7 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::writev(self.fd,\n                          bufs.as_ptr() as *const libc::iovec,"}, {"sha": "e653f6721f06257fea23b7f05a238f196e57b612", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -2,7 +2,7 @@ use crate::os::unix::prelude::*;\n \n use crate::ffi::{CString, CStr, OsString, OsStr};\n use crate::fmt;\n-use crate::io::{self, Error, ErrorKind, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, Error, ErrorKind, SeekFrom, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n@@ -567,7 +567,7 @@ impl File {\n         self.0.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -579,7 +579,7 @@ impl File {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n "}, {"sha": "72954ff20ef95a230d162547de74d62c41c63957", "filename": "src/libstd/sys/unix/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fio.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -4,15 +4,15 @@ use crate::slice;\n use libc::{iovec, c_void};\n \n #[repr(transparent)]\n-pub struct IoVec<'a> {\n+pub struct IoSlice<'a> {\n     vec: iovec,\n     _p: PhantomData<&'a [u8]>,\n }\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec {\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice {\n             vec: iovec {\n                 iov_base: buf.as_ptr() as *mut u8 as *mut c_void,\n                 iov_len: buf.len()\n@@ -29,15 +29,15 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a> {\n+pub struct IoSliceMut<'a> {\n     vec: iovec,\n     _p: PhantomData<&'a mut [u8]>,\n }\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut {\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut {\n             vec: iovec {\n                 iov_base: buf.as_mut_ptr() as *mut c_void,\n                 iov_len: buf.len()"}, {"sha": "2c6f21aa21a3a5a9b1aea03a158837ffa9161f3b", "filename": "src/libstd/sys/unix/l4re.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -5,7 +5,7 @@ macro_rules! unimpl {\n pub mod net {\n     #![allow(warnings)]\n     use crate::fmt;\n-    use crate::io::{self, IoVec, IoVecMut};\n+    use crate::io::{self, IoSlice, IoSliceMut};\n     use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n     use crate::sys_common::{AsInner, FromInner, IntoInner};\n     use crate::sys::fd::FileDesc;\n@@ -46,7 +46,7 @@ pub mod net {\n             unimpl!();\n         }\n \n-        pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n             unimpl!();\n         }\n \n@@ -66,7 +66,7 @@ pub mod net {\n             unimpl!();\n         }\n \n-        pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n+        pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n             unimpl!();\n         }\n \n@@ -152,15 +152,15 @@ pub mod net {\n             unimpl!();\n         }\n \n-        pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n             unimpl!();\n         }\n \n         pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n             unimpl!();\n         }\n \n-        pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n+        pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n             unimpl!();\n         }\n "}, {"sha": "75750b5c4e588abd857e1f99bbe4f14d0623c910", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,5 +1,5 @@\n use crate::ffi::CStr;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{SocketAddr, Shutdown};\n use crate::str;\n@@ -244,7 +244,7 @@ impl Socket {\n         self.recv_with_flags(buf, MSG_PEEK)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -276,7 +276,7 @@ impl Socket {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n "}, {"sha": "d36e94df63f8c79396555df245a56ee5cd78dd5e", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::fd::FileDesc;\n@@ -60,15 +60,15 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n "}, {"sha": "f9b017df24088c32fec959a3eeffee673a9e036a", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::fd::FileDesc;\n use crate::mem::ManuallyDrop;\n \n@@ -15,7 +15,7 @@ impl io::Read for Stdin {\n         ManuallyDrop::new(FileDesc::new(libc::STDIN_FILENO)).read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(FileDesc::new(libc::STDIN_FILENO)).read_vectored(bufs)\n     }\n }\n@@ -29,7 +29,7 @@ impl io::Write for Stdout {\n         ManuallyDrop::new(FileDesc::new(libc::STDOUT_FILENO)).write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(FileDesc::new(libc::STDOUT_FILENO)).write_vectored(bufs)\n     }\n \n@@ -47,7 +47,7 @@ impl io::Write for Stderr {\n         ManuallyDrop::new(FileDesc::new(libc::STDERR_FILENO)).write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(FileDesc::new(libc::STDERR_FILENO)).write_vectored(bufs)\n     }\n "}, {"sha": "0ec4122f385daca6840abd59b6e9f09142f20cae", "filename": "src/libstd/sys/wasi/ext/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -3,7 +3,7 @@\n #![unstable(feature = \"wasi_ext\", issue = \"0\")]\n \n use crate::fs::{self, File, Metadata, OpenOptions};\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::os::wasi::ffi::OsStrExt;\n use crate::path::{Path, PathBuf};\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n@@ -25,7 +25,7 @@ pub trait FileExt {\n     /// return with a short read.\n     ///\n     /// [`File::read`]: ../../../../std/fs/struct.File.html#method.read_vectored\n-    fn read_at(&self, bufs: &mut [IoVecMut<'_>], offset: u64) -> io::Result<usize>;\n+    fn read_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize>;\n \n     /// Writes a number of bytes starting from a given offset.\n     ///\n@@ -43,7 +43,7 @@ pub trait FileExt {\n     /// short write.\n     ///\n     /// [`File::write`]: ../../../../std/fs/struct.File.html#method.write_vectored\n-    fn write_at(&self, bufs: &[IoVec<'_>], offset: u64) -> io::Result<usize>;\n+    fn write_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize>;\n \n     /// Returns the current position within the file.\n     ///\n@@ -105,11 +105,11 @@ pub trait FileExt {\n // FIXME: bind __wasi_random_get maybe? - on crates.io for unix\n \n impl FileExt for fs::File {\n-    fn read_at(&self, bufs: &mut [IoVecMut<'_>], offset: u64) -> io::Result<usize> {\n+    fn read_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n         self.as_inner().fd().pread(bufs, offset)\n     }\n \n-    fn write_at(&self, bufs: &[IoVec<'_>], offset: u64) -> io::Result<usize> {\n+    fn write_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n         self.as_inner().fd().pwrite(bufs, offset)\n     }\n "}, {"sha": "25692ec08680193a3c7daec07f10c3470f4b8d8a", "filename": "src/libstd/sys/wasi/fd.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,6 +1,6 @@\n #![allow(dead_code)]\n \n-use crate::io::{self, IoVec, IoVecMut, SeekFrom};\n+use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::mem;\n use crate::net::Shutdown;\n use crate::sys::cvt_wasi;\n@@ -24,25 +24,25 @@ pub type RiFlags = u16;\n pub type RoFlags = u16;\n pub type SiFlags = u16;\n \n-fn iovec(a: &mut [IoVecMut<'_>]) -> (*const libc::__wasi_iovec_t, usize) {\n+fn iovec(a: &mut [IoSliceMut<'_>]) -> (*const libc::__wasi_iovec_t, usize) {\n     assert_eq!(\n-        mem::size_of::<IoVecMut<'_>>(),\n+        mem::size_of::<IoSliceMut<'_>>(),\n         mem::size_of::<libc::__wasi_iovec_t>()\n     );\n     assert_eq!(\n-        mem::align_of::<IoVecMut<'_>>(),\n+        mem::align_of::<IoSliceMut<'_>>(),\n         mem::align_of::<libc::__wasi_iovec_t>()\n     );\n     (a.as_ptr() as *const libc::__wasi_iovec_t, a.len())\n }\n \n-fn ciovec(a: &[IoVec<'_>]) -> (*const libc::__wasi_ciovec_t, usize) {\n+fn ciovec(a: &[IoSlice<'_>]) -> (*const libc::__wasi_ciovec_t, usize) {\n     assert_eq!(\n-        mem::size_of::<IoVec<'_>>(),\n+        mem::size_of::<IoSlice<'_>>(),\n         mem::size_of::<libc::__wasi_ciovec_t>()\n     );\n     assert_eq!(\n-        mem::align_of::<IoVec<'_>>(),\n+        mem::align_of::<IoSlice<'_>>(),\n         mem::align_of::<libc::__wasi_ciovec_t>()\n     );\n     (a.as_ptr() as *const libc::__wasi_ciovec_t, a.len())\n@@ -67,28 +67,28 @@ impl WasiFd {\n         cvt_wasi(unsafe { libc::__wasi_fd_datasync(self.fd) })\n     }\n \n-    pub fn pread(&self, bufs: &mut [IoVecMut<'_>], offset: u64) -> io::Result<usize> {\n+    pub fn pread(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = iovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_pread(self.fd, ptr, len, offset, &mut read) })?;\n         Ok(read)\n     }\n \n-    pub fn pwrite(&self, bufs: &[IoVec<'_>], offset: u64) -> io::Result<usize> {\n+    pub fn pwrite(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = ciovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_pwrite(self.fd, ptr, len, offset, &mut read) })?;\n         Ok(read)\n     }\n \n-    pub fn read(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = iovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_read(self.fd, ptr, len, &mut read) })?;\n         Ok(read)\n     }\n \n-    pub fn write(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = ciovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_write(self.fd, ptr, len, &mut read) })?;\n@@ -309,7 +309,7 @@ impl WasiFd {\n \n     pub fn sock_recv(\n         &self,\n-        ri_data: &mut [IoVecMut<'_>],\n+        ri_data: &mut [IoSliceMut<'_>],\n         ri_flags: RiFlags,\n     ) -> io::Result<(usize, RoFlags)> {\n         let mut ro_datalen = 0;\n@@ -321,7 +321,7 @@ impl WasiFd {\n         Ok((ro_datalen, ro_flags))\n     }\n \n-    pub fn sock_send(&self, si_data: &[IoVec<'_>], si_flags: SiFlags) -> io::Result<usize> {\n+    pub fn sock_send(&self, si_data: &[IoSlice<'_>], si_flags: SiFlags) -> io::Result<usize> {\n         let mut so_datalen = 0;\n         let (ptr, len) = ciovec(si_data);\n         cvt_wasi(unsafe { libc::__wasi_sock_send(self.fd, ptr, len, si_flags, &mut so_datalen) })?;"}, {"sha": "172c60385b317af15c384e4735a3575458a06144", "filename": "src/libstd/sys/wasi/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,6 +1,6 @@\n use crate::ffi::{CStr, CString, OsStr, OsString};\n use crate::fmt;\n-use crate::io::{self, IoVec, IoVecMut, SeekFrom};\n+use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::iter;\n use crate::mem::{self, ManuallyDrop};\n use crate::os::wasi::ffi::{OsStrExt, OsStringExt};\n@@ -414,18 +414,18 @@ impl File {\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        self.read_vectored(&mut [IoVecMut::new(buf)])\n+        self.read_vectored(&mut [IoSliceMut::new(buf)])\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.fd.read(bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n-        self.write_vectored(&[IoVec::new(buf)])\n+        self.write_vectored(&[IoSlice::new(buf)])\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.fd.write(bufs)\n     }\n "}, {"sha": "cc8f1e16fa01dbe7b9bc790e830d77dd4a97daa9", "filename": "src/libstd/sys/wasi/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -4,15 +4,15 @@ use crate::slice;\n use libc::{__wasi_ciovec_t, __wasi_iovec_t, c_void};\n \n #[repr(transparent)]\n-pub struct IoVec<'a> {\n+pub struct IoSlice<'a> {\n     vec: __wasi_ciovec_t,\n     _p: PhantomData<&'a [u8]>,\n }\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec {\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice {\n             vec: __wasi_ciovec_t {\n                 buf: buf.as_ptr() as *const c_void,\n                 buf_len: buf.len(),\n@@ -29,15 +29,15 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a> {\n+pub struct IoSliceMut<'a> {\n     vec: __wasi_iovec_t,\n     _p: PhantomData<&'a mut [u8]>,\n }\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut {\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut {\n             vec: __wasi_iovec_t {\n                 buf: buf.as_mut_ptr() as *mut c_void,\n                 buf_len: buf.len()"}, {"sha": "80f633a8e1f2b84b3c26ea7daee6af896bda09e1", "filename": "src/libstd/sys/wasi/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,5 +1,5 @@\n use crate::fmt;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n use crate::time::Duration;\n use crate::sys::{unsupported, Void};\n@@ -44,15 +44,15 @@ impl TcpStream {\n         unsupported()\n     }\n \n-    pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         unsupported()\n     }\n \n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         unsupported()\n     }\n \n-    pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n         unsupported()\n     }\n "}, {"sha": "9f07f054362feb550124adaaf5f3951dae58ed3c", "filename": "src/libstd/sys/wasi/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,15 +8,15 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "2bf8d803c01bb2ae37f47a286d3936f493602127", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::libc;\n use crate::mem::ManuallyDrop;\n use crate::sys::fd::WasiFd;\n@@ -13,10 +13,10 @@ impl Stdin {\n     }\n \n     pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n-        self.read_vectored(&mut [IoVecMut::new(data)])\n+        self.read_vectored(&mut [IoSliceMut::new(data)])\n     }\n \n-    pub fn read_vectored(&self, data: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDIN_FILENO as u32) })\n             .read(data)\n     }\n@@ -28,10 +28,10 @@ impl Stdout {\n     }\n \n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        self.write_vectored(&[IoVec::new(data)])\n+        self.write_vectored(&[IoSlice::new(data)])\n     }\n \n-    pub fn write_vectored(&self, data: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDOUT_FILENO as u32) })\n             .write(data)\n     }\n@@ -47,10 +47,10 @@ impl Stderr {\n     }\n \n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        self.write_vectored(&[IoVec::new(data)])\n+        self.write_vectored(&[IoSlice::new(data)])\n     }\n \n-    pub fn write_vectored(&self, data: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDERR_FILENO as u32) })\n             .write(data)\n     }"}, {"sha": "e9095b375fe5d52205bd886827290f84bb5f8069", "filename": "src/libstd/sys/wasm/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, SeekFrom, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -200,15 +200,15 @@ impl File {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "4b423a5cbc11a0e2f8d88372304928ae1df9ecbc", "filename": "src/libstd/sys/wasm/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,9 +1,9 @@\n-pub struct IoVec<'a>(&'a [u8]);\n+pub struct IoSlice<'a>(&'a [u8]);\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec(buf)\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice(buf)\n     }\n \n     #[inline]\n@@ -12,12 +12,12 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a>(&'a mut [u8]);\n+pub struct IoSliceMut<'a>(&'a mut [u8]);\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut(buf)\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut(buf)\n     }\n \n     #[inline]"}, {"sha": "d50f989d2bb5f0cbf15779390b2289937ff8524a", "filename": "src/libstd/sys/wasm/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,5 +1,5 @@\n use crate::fmt;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n use crate::time::Duration;\n use crate::sys::{unsupported, Void};\n@@ -40,15 +40,15 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "9f07f054362feb550124adaaf5f3951dae58ed3c", "filename": "src/libstd/sys/wasm/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,15 +8,15 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "d5cb205c85f5214c99dbf47c15dc46b00f1a074d", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -2,7 +2,7 @@ use crate::os::windows::prelude::*;\n \n use crate::ffi::OsString;\n use crate::fmt;\n-use crate::io::{self, Error, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, Error, SeekFrom, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n@@ -314,7 +314,7 @@ impl File {\n         self.handle.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.handle.read_vectored(bufs)\n     }\n \n@@ -326,7 +326,7 @@ impl File {\n         self.handle.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.handle.write_vectored(bufs)\n     }\n "}, {"sha": "3e5aa69335461dfe608c42a81876b9733f4d4699", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,7 +1,7 @@\n #![unstable(issue = \"0\", feature = \"windows_handle\")]\n \n use crate::cmp;\n-use crate::io::{self, ErrorKind, Read, IoVec, IoVecMut};\n+use crate::io::{self, ErrorKind, Read, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::ops::Deref;\n use crate::ptr;\n@@ -89,7 +89,7 @@ impl RawHandle {\n         }\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }\n \n@@ -173,7 +173,7 @@ impl RawHandle {\n         Ok(amt as usize)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n     }\n \n@@ -208,7 +208,7 @@ impl<'a> Read for &'a RawHandle {\n         (**self).read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         (**self).read_vectored(bufs)\n     }\n }"}, {"sha": "c045a63e9118f7171d00931bdb289c214e0c44f4", "filename": "src/libstd/sys/windows/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -3,16 +3,16 @@ use crate::slice;\n use crate::sys::c;\n \n #[repr(transparent)]\n-pub struct IoVec<'a> {\n+pub struct IoSlice<'a> {\n     vec: c::WSABUF,\n     _p: PhantomData<&'a [u8]>,\n }\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n         assert!(buf.len() <= c::ULONG::max_value() as usize);\n-        IoVec {\n+        IoSlice {\n             vec: c::WSABUF {\n                 len: buf.len() as c::ULONG,\n                 buf: buf.as_ptr() as *mut u8 as *mut c::CHAR,\n@@ -29,16 +29,16 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a> {\n+pub struct IoSliceMut<'a> {\n     vec: c::WSABUF,\n     _p: PhantomData<&'a mut [u8]>,\n }\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n         assert!(buf.len() <= c::ULONG::max_value() as usize);\n-        IoVecMut {\n+        IoSliceMut {\n             vec: c::WSABUF {\n                 len: buf.len() as c::ULONG,\n                 buf: buf.as_mut_ptr() as *mut c::CHAR,"}, {"sha": "7dd1af5441bfb86352c81e4ea5984dd6bd8c8929", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,7 +1,7 @@\n #![unstable(issue = \"0\", feature = \"windows_net\")]\n \n use crate::cmp;\n-use crate::io::{self, Read, IoVec, IoVecMut};\n+use crate::io::{self, Read, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{SocketAddr, Shutdown};\n use crate::ptr;\n@@ -208,7 +208,7 @@ impl Socket {\n         self.recv_with_flags(buf, 0)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         // On unix when a socket is shut down all further reads return 0, so we\n         // do the same on windows to map a shut down socket to returning EOF.\n         let len = cmp::min(bufs.len(), c::DWORD::max_value() as usize) as c::DWORD;\n@@ -268,7 +268,7 @@ impl Socket {\n         self.recv_from_with_flags(buf, c::MSG_PEEK)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let len = cmp::min(bufs.len(), c::DWORD::max_value() as usize) as c::DWORD;\n         let mut nwritten = 0;\n         unsafe {"}, {"sha": "493ee8a9a2d7c72ccbd26ef90fc429addcb7eecb", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,7 +1,7 @@\n use crate::os::windows::prelude::*;\n \n use crate::ffi::OsStr;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::path::Path;\n use crate::ptr;\n@@ -166,15 +166,15 @@ impl AnonPipe {\n         self.inner.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n }"}, {"sha": "cf1dc20b52fc6c239cf7fdcac678c808e7eddada", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -1,7 +1,7 @@\n use crate::cmp;\n use crate::ffi::CString;\n use crate::fmt;\n-use crate::io::{self, Error, ErrorKind, IoVec, IoVecMut};\n+use crate::io::{self, Error, ErrorKind, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n use crate::ptr;\n@@ -256,7 +256,7 @@ impl TcpStream {\n         self.inner.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n@@ -271,7 +271,7 @@ impl TcpStream {\n         Ok(ret as usize)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n "}, {"sha": "9417159e6fb7825c111cbaefe968f1aa9137bef5", "filename": "src/test/run-pass/consts/const-labeled-break.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-labeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-labeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-labeled-break.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -0,0 +1,10 @@\n+// Using labeled break in a while loop has caused an illegal instruction being\n+// generated, and an ICE later.\n+//\n+// See https://github.com/rust-lang/rust/issues/51350 for more information.\n+\n+const CRASH: () = 'a: while break 'a {};\n+\n+fn main() {\n+    println!(\"{:?}\", CRASH);\n+}"}, {"sha": "856a778078a61c323141838f3bb1f0d777afead4", "filename": "src/test/ui/async-with-closure.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Ftest%2Fui%2Fasync-with-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Ftest%2Fui%2Fasync-with-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-with-closure.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -0,0 +1,26 @@\n+// compile-pass\n+// edition:2018\n+\n+#![feature(async_await, await_macro)]\n+\n+trait MyClosure {\n+    type Args;\n+}\n+\n+impl<R> MyClosure for dyn FnMut() -> R\n+where R: 'static {\n+    type Args = ();\n+}\n+\n+struct MyStream<C: ?Sized + MyClosure> {\n+    x: C::Args,\n+}\n+\n+async fn get_future<C: ?Sized + MyClosure>(_stream: MyStream<C>) {}\n+\n+async fn f() {\n+    let messages: MyStream<FnMut()> = unimplemented!();\n+    await!(get_future(messages));\n+}\n+\n+fn main() {}"}, {"sha": "d1461e7b041c5b27191503a46261753567af7a2b", "filename": "src/test/ui/imports/unresolved-imports-used.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -0,0 +1,12 @@\n+// There should be *no* unused import errors.\n+#![deny(unused_imports)]\n+\n+mod qux {\n+   fn quz() {}\n+}\n+\n+use qux::quz; //~ ERROR function `quz` is private\n+use qux::bar; //~ ERROR unresolved import `qux::bar`\n+use foo::bar; //~ ERROR unresolved import `foo`\n+\n+fn main() {}"}, {"sha": "f20db881c8628edfc54a5998f04ac2a83338f6cc", "filename": "src/test/ui/imports/unresolved-imports-used.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -0,0 +1,22 @@\n+error[E0432]: unresolved import `qux::bar`\n+  --> $DIR/unresolved-imports-used.rs:9:5\n+   |\n+LL | use qux::bar;\n+   |     ^^^^^^^^ no `bar` in `qux`\n+\n+error[E0432]: unresolved import `foo`\n+  --> $DIR/unresolved-imports-used.rs:10:5\n+   |\n+LL | use foo::bar;\n+   |     ^^^ maybe a missing `extern crate foo;`?\n+\n+error[E0603]: function `quz` is private\n+  --> $DIR/unresolved-imports-used.rs:8:10\n+   |\n+LL | use qux::quz;\n+   |          ^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0432, E0603.\n+For more information about an error, try `rustc --explain E0432`."}, {"sha": "e2bcd4d40af7f371bb5555e7266cf4874d68c348", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00859e3e653973120006aaf3227823062dde1ba7/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00859e3e653973120006aaf3227823062dde1ba7/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=00859e3e653973120006aaf3227823062dde1ba7", "patch": "@@ -135,8 +135,8 @@ fn check(cache: &mut Cache,\n        file.ends_with(\"ty/struct.Slice.html\") ||\n        file.ends_with(\"ty/enum.Attributes.html\") ||\n        file.ends_with(\"ty/struct.SymbolName.html\") ||\n-       file.ends_with(\"io/struct.IoVec.html\") ||\n-       file.ends_with(\"io/struct.IoVecMut.html\") {\n+       file.ends_with(\"io/struct.IoSlice.html\") ||\n+       file.ends_with(\"io/struct.IoSliceMut.html\") {\n         return None;\n     }\n     // FIXME(#32553)"}]}