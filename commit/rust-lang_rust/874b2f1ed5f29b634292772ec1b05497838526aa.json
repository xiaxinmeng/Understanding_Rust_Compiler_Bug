{"sha": "874b2f1ed5f29b634292772ec1b05497838526aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NGIyZjFlZDVmMjliNjM0MjkyNzcyZWMxYjA1NDk3ODM4NTI2YWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-23T19:02:10Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-23T19:02:10Z"}, "message": "Merge pull request #2884 from elliottslaughter/rust-upcalls\n\nMove fail upcall into rust", "tree": {"sha": "3bc06ae036f9ee9a9ccd9d55bebb1e450f511f50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bc06ae036f9ee9a9ccd9d55bebb1e450f511f50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/874b2f1ed5f29b634292772ec1b05497838526aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/874b2f1ed5f29b634292772ec1b05497838526aa", "html_url": "https://github.com/rust-lang/rust/commit/874b2f1ed5f29b634292772ec1b05497838526aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/874b2f1ed5f29b634292772ec1b05497838526aa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019a41bdb09c612e42717df2ae2148a29361842f", "url": "https://api.github.com/repos/rust-lang/rust/commits/019a41bdb09c612e42717df2ae2148a29361842f", "html_url": "https://github.com/rust-lang/rust/commit/019a41bdb09c612e42717df2ae2148a29361842f"}, {"sha": "d25738286314054b0a5556a060b405443d34e3e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d25738286314054b0a5556a060b405443d34e3e1", "html_url": "https://github.com/rust-lang/rust/commit/d25738286314054b0a5556a060b405443d34e3e1"}], "stats": {"total": 322, "additions": 264, "deletions": 58}, "files": [{"sha": "ef88258daec59a9ea30d0e098ff579d092801004", "filename": "src/libcore/core.rc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -41,6 +41,10 @@ export either, option, result, iter;\n export libc, os, io, run, rand, sys, unsafe, logging;\n export arc, comm, task, future, pipes;\n export extfmt;\n+// The test harness links against core, so don't include runtime in tests.\n+// FIXME (#2861): Uncomment this after snapshot gets updated.\n+//#[cfg(notest)]\n+export rt;\n export tuple;\n export to_str, to_bytes;\n export dvec, dvec_iter;\n@@ -206,6 +210,9 @@ mod unsafe;\n // Exported but not part of the public interface\n \n mod extfmt;\n+// The test harness links against core, so don't include runtime in tests.\n+#[cfg(notest)]\n+mod rt;\n \n \n // For internal use, not exported"}, {"sha": "356e81689f02f3bcb6e062f6bf134a43cda953ee", "filename": "src/libcore/rt.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -0,0 +1,61 @@\n+//! Runtime calls emitted by the compiler.\n+\n+import libc::c_char;\n+import libc::c_void;\n+import libc::size_t;\n+import libc::uintptr_t;\n+\n+type rust_task = c_void;\n+\n+extern mod rustrt {\n+    #[rust_stack]\n+    fn rust_upcall_fail(expr: *c_char, file: *c_char, line: size_t);\n+\n+    #[rust_stack]\n+    fn rust_upcall_exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char;\n+\n+    #[rust_stack]\n+    fn rust_upcall_exchange_free(ptr: *c_char);\n+\n+    #[rust_stack]\n+    fn rust_upcall_malloc(td: *c_char, size: uintptr_t) -> *c_char;\n+\n+    #[rust_stack]\n+    fn rust_upcall_free(ptr: *c_char);\n+}\n+\n+// FIXME (#2861): This needs both the attribute, and the name prefixed with\n+// 'rt_', otherwise the compiler won't find it. To fix this, see\n+// gather_rust_rtcalls.\n+#[rt(fail)]\n+fn rt_fail(expr: *c_char, file: *c_char, line: size_t) {\n+    rustrt::rust_upcall_fail(expr, file, line);\n+}\n+\n+#[rt(exchange_malloc)]\n+fn rt_exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n+    ret rustrt::rust_upcall_exchange_malloc(td, size);\n+}\n+\n+#[rt(exchange_free)]\n+fn rt_exchange_free(ptr: *c_char) {\n+    rustrt::rust_upcall_exchange_free(ptr);\n+}\n+\n+#[rt(malloc)]\n+fn rt_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n+    ret rustrt::rust_upcall_malloc(td, size);\n+}\n+\n+#[rt(free)]\n+fn rt_free(ptr: *c_char) {\n+    rustrt::rust_upcall_free(ptr);\n+}\n+\n+// Local Variables:\n+// mode: rust;\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:"}, {"sha": "8bab4b9e2d3d70b5c51407b0f02ba1e24c487ecf", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -98,6 +98,16 @@ upcall_fail(char const *expr,\n     UPCALL_SWITCH_STACK(task, &args, upcall_s_fail);\n }\n \n+// FIXME (#2861): Alias used by libcore/rt.rs to avoid naming conflicts with\n+// autogenerated wrappers for upcall_fail. Remove this when we fully move away\n+// away from the C upcall path.\n+extern \"C\" CDECL void\n+rust_upcall_fail(char const *expr,\n+                 char const *file,\n+                 size_t line) {\n+    upcall_fail(expr, file, line);\n+}\n+\n struct s_trace_args {\n     rust_task *task;\n     char const *msg;\n@@ -160,6 +170,14 @@ upcall_exchange_malloc(type_desc *td, uintptr_t size) {\n     return args.retval;\n }\n \n+// FIXME (#2861): Alias used by libcore/rt.rs to avoid naming conflicts with\n+// autogenerated wrappers for upcall_exchange_malloc. Remove this when we\n+// fully move away away from the C upcall path.\n+extern \"C\" CDECL uintptr_t\n+rust_upcall_exchange_malloc(type_desc *td, uintptr_t size) {\n+    return upcall_exchange_malloc(td, size);\n+}\n+\n struct s_exchange_free_args {\n     rust_task *task;\n     void *ptr;\n@@ -179,6 +197,14 @@ upcall_exchange_free(void *ptr) {\n     UPCALL_SWITCH_STACK(task, &args, upcall_s_exchange_free);\n }\n \n+// FIXME (#2861): Alias used by libcore/rt.rs to avoid naming conflicts with\n+// autogenerated wrappers for upcall_exchange_free. Remove this when we fully\n+// move away away from the C upcall path.\n+extern \"C\" CDECL void\n+rust_upcall_exchange_free(void *ptr) {\n+    return upcall_exchange_free(ptr);\n+}\n+\n /**********************************************************************\n  * Allocate an object in the task-local heap.\n  */\n@@ -220,6 +246,14 @@ upcall_malloc(type_desc *td, uintptr_t size) {\n     return args.retval;\n }\n \n+// FIXME (#2861): Alias used by libcore/rt.rs to avoid naming conflicts with\n+// autogenerated wrappers for upcall_malloc. Remove this when we fully move\n+// away away from the C upcall path.\n+extern \"C\" CDECL uintptr_t\n+rust_upcall_malloc(type_desc *td, uintptr_t size) {\n+    return upcall_malloc(td, size);\n+}\n+\n /**********************************************************************\n  * Called whenever an object in the task-local heap is freed.\n  */\n@@ -252,6 +286,14 @@ upcall_free(void* ptr) {\n     UPCALL_SWITCH_STACK(task, &args, upcall_s_free);\n }\n \n+// FIXME (#2861): Alias used by libcore/rt.rs to avoid naming conflicts with\n+// autogenerated wrappers for upcall_free. Remove this when we fully move away\n+// away from the C upcall path.\n+extern \"C\" CDECL void\n+rust_upcall_free(void* ptr) {\n+    upcall_free(ptr);\n+}\n+\n /**********************************************************************\n  * Sanity checks on boxes, insert when debugging possible\n  * use-after-free bugs.  See maybe_validate_box() in trans.rs."}, {"sha": "52aa88e6cb639b41f8a579a91032d166d7f4643a", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -69,10 +69,11 @@ fn build_configuration(sess: session, argv0: ~str, input: input) ->\n     // If the user wants a test runner, then add the test cfg\n     let gen_cfg =\n         {\n-            if sess.opts.test && !attr::contains_name(user_cfg, ~\"test\")\n-               {\n+            if sess.opts.test && !attr::contains_name(user_cfg, ~\"test\") {\n                 ~[attr::mk_word_item(@~\"test\")]\n-            } else { ~[] }\n+            } else {\n+                ~[attr::mk_word_item(@~\"notest\")]\n+            }\n         };\n     ret vec::append(vec::append(user_cfg, gen_cfg), default_cfg);\n }"}, {"sha": "05c432401657ab71f6a16c8edbdf3259ba3bc8e5", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 121, "deletions": 25, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -37,7 +37,7 @@ import link::{mangle_internal_name_by_type_only,\n               mangle_internal_name_by_path,\n               mangle_internal_name_by_path_and_seq,\n               mangle_exported_name};\n-import metadata::{csearch, cstore, encoder};\n+import metadata::{csearch, cstore, decoder, encoder};\n import metadata::common::link_meta;\n import util::ppaux;\n import util::ppaux::{ty_to_str, ty_to_short_str};\n@@ -244,15 +244,13 @@ fn trans_foreign_call(cx: block, externs: hashmap<~str, ValueRef>,\n \n fn trans_free(cx: block, v: ValueRef) -> block {\n     let _icx = cx.insn_ctxt(~\"trans_free\");\n-    Call(cx, cx.ccx().upcalls.free, ~[PointerCast(cx, v, T_ptr(T_i8()))]);\n-    cx\n+    trans_rtcall(cx, ~\"free\", ~[PointerCast(cx, v, T_ptr(T_i8()))], ignore)\n }\n \n fn trans_unique_free(cx: block, v: ValueRef) -> block {\n     let _icx = cx.insn_ctxt(~\"trans_unique_free\");\n-    Call(cx, cx.ccx().upcalls.exchange_free,\n-         ~[PointerCast(cx, v, T_ptr(T_i8()))]);\n-    ret cx;\n+    trans_rtcall(cx, ~\"exchange_free\", ~[PointerCast(cx, v, T_ptr(T_i8()))],\n+                 ignore)\n }\n \n fn umax(cx: block, a: ValueRef, b: ValueRef) -> ValueRef {\n@@ -356,15 +354,13 @@ fn opaque_box_body(bcx: block,\n // malloc_raw_dyn: allocates a box to contain a given type, but with a\n // potentially dynamic size.\n fn malloc_raw_dyn(bcx: block, t: ty::t, heap: heap,\n-                  size: ValueRef) -> ValueRef {\n+                  size: ValueRef) -> result {\n     let _icx = bcx.insn_ctxt(~\"malloc_raw\");\n     let ccx = bcx.ccx();\n \n-    let (mk_fn, upcall) = alt heap {\n-      heap_shared { (ty::mk_imm_box, ccx.upcalls.malloc) }\n-      heap_exchange {\n-        (ty::mk_imm_uniq, ccx.upcalls.exchange_malloc )\n-      }\n+    let (mk_fn, rtcall) = alt heap {\n+      heap_shared { (ty::mk_imm_box, ~\"malloc\") }\n+      heap_exchange { (ty::mk_imm_uniq, ~\"exchange_malloc\") }\n     };\n \n     // Grab the TypeRef type of box_ptr_ty.\n@@ -376,37 +372,42 @@ fn malloc_raw_dyn(bcx: block, t: ty::t, heap: heap,\n     lazily_emit_all_tydesc_glue(ccx, static_ti);\n \n     // Allocate space:\n-    let rval = Call(bcx, upcall, ~[static_ti.tydesc, size]);\n-    ret PointerCast(bcx, rval, llty);\n+    let tydesc = PointerCast(bcx, static_ti.tydesc, T_ptr(T_i8()));\n+    let rval = alloca_zeroed(bcx, T_ptr(T_i8()));\n+    let bcx = trans_rtcall(bcx, rtcall, ~[tydesc, size], save_in(rval));\n+    let retval = {bcx: bcx, val: PointerCast(bcx, Load(bcx, rval), llty)};\n+    ret retval;\n }\n \n // malloc_raw: expects an unboxed type and returns a pointer to\n // enough space for a box of that type.  This includes a rust_opaque_box\n // header.\n-fn malloc_raw(bcx: block, t: ty::t, heap: heap) -> ValueRef {\n+fn malloc_raw(bcx: block, t: ty::t, heap: heap) -> result {\n     malloc_raw_dyn(bcx, t, heap, llsize_of(bcx.ccx(), type_of(bcx.ccx(), t)))\n }\n \n // malloc_general_dyn: usefully wraps malloc_raw_dyn; allocates a box,\n // and pulls out the body\n-fn malloc_general_dyn(bcx: block, t: ty::t, heap: heap, size: ValueRef) ->\n-    {box: ValueRef, body: ValueRef} {\n+fn malloc_general_dyn(bcx: block, t: ty::t, heap: heap, size: ValueRef)\n+    -> {bcx: block, box: ValueRef, body: ValueRef} {\n     let _icx = bcx.insn_ctxt(~\"malloc_general\");\n-    let llbox = malloc_raw_dyn(bcx, t, heap, size);\n+    let {bcx: bcx, val: llbox} = malloc_raw_dyn(bcx, t, heap, size);\n     let non_gc_box = non_gc_box_cast(bcx, llbox);\n     let body = GEPi(bcx, non_gc_box, ~[0u, abi::box_field_body]);\n-    ret {box: llbox, body: body};\n+    ret {bcx: bcx, box: llbox, body: body};\n }\n \n-fn malloc_general(bcx: block, t: ty::t, heap: heap) ->\n-    {box: ValueRef, body: ValueRef} {\n+fn malloc_general(bcx: block, t: ty::t, heap: heap)\n+    -> {bcx: block, box: ValueRef, body: ValueRef} {\n     malloc_general_dyn(bcx, t, heap,\n                        llsize_of(bcx.ccx(), type_of(bcx.ccx(), t)))\n }\n-fn malloc_boxed(bcx: block, t: ty::t) -> {box: ValueRef, body: ValueRef} {\n+fn malloc_boxed(bcx: block, t: ty::t)\n+    -> {bcx: block, box: ValueRef, body: ValueRef} {\n     malloc_general(bcx, t, heap_shared)\n }\n-fn malloc_unique(bcx: block, t: ty::t) -> {box: ValueRef, body: ValueRef} {\n+fn malloc_unique(bcx: block, t: ty::t)\n+    -> {bcx: block, box: ValueRef, body: ValueRef} {\n     malloc_general(bcx, t, heap_exchange)\n }\n \n@@ -1464,7 +1465,7 @@ fn trans_boxed_expr(bcx: block, contents: @ast::expr,\n                     t: ty::t, heap: heap,\n                     dest: dest) -> block {\n     let _icx = bcx.insn_ctxt(~\"trans_boxed_expr\");\n-    let {box, body} = malloc_general(bcx, t, heap);\n+    let {bcx, box, body} = malloc_general(bcx, t, heap);\n     add_clean_free(bcx, box, heap);\n     let bcx = trans_expr_save_in(bcx, contents, body);\n     revoke_clean(bcx, box);\n@@ -3942,11 +3943,26 @@ fn trans_fail_value(bcx: block, sp_opt: option<span>,\n     let V_str = PointerCast(bcx, V_fail_str, T_ptr(T_i8()));\n     let V_filename = PointerCast(bcx, V_filename, T_ptr(T_i8()));\n     let args = ~[V_str, V_filename, C_int(ccx, V_line)];\n-    let bcx = invoke(bcx, bcx.ccx().upcalls._fail, args);\n+    let bcx = trans_rtcall(bcx, ~\"fail\", args, ignore);\n     Unreachable(bcx);\n     ret bcx;\n }\n \n+fn trans_rtcall(bcx: block, name: ~str, args: ~[ValueRef], dest: dest)\n+    -> block {\n+    let did = bcx.ccx().rtcalls[name];\n+    let fty = if did.crate == ast::local_crate {\n+        ty::node_id_to_type(bcx.ccx().tcx, did.node)\n+    } else {\n+        csearch::get_type(bcx.ccx().tcx, did).ty\n+    };\n+    let rty = ty::ty_fn_ret(fty);\n+    ret trans_call_inner(\n+        bcx, none, fty, rty,\n+        |bcx| lval_static_fn_inner(bcx, did, 0, ~[], none),\n+        arg_vals(args), dest);\n+}\n+\n fn trans_break_cont(bcx: block, to_end: bool)\n     -> block {\n     let _icx = bcx.insn_ctxt(~\"trans_break_cont\");\n@@ -5314,6 +5330,83 @@ fn trap(bcx: block) {\n     }\n }\n \n+fn push_rtcall(ccx: @crate_ctxt, name: ~str, did: ast::def_id) {\n+    if ccx.rtcalls.contains_key(name) {\n+        fail #fmt(\"multiple definitions for runtime call %s\", name);\n+    }\n+    ccx.rtcalls.insert(name, did);\n+}\n+\n+fn gather_local_rtcalls(ccx: @crate_ctxt, crate: @ast::crate) {\n+    visit::visit_crate(*crate, (), visit::mk_simple_visitor(@{\n+        visit_item: |item| alt item.node {\n+          ast::item_fn(decl, _, _) {\n+            let attr_metas = attr::attr_metas(\n+                attr::find_attrs_by_name(item.attrs, ~\"rt\"));\n+            do vec::iter(attr_metas) |attr_meta| {\n+                alt attr::get_meta_item_list(attr_meta) {\n+                  some(list) {\n+                    let name = *attr::get_meta_item_name(vec::head(list));\n+                    push_rtcall(ccx, name, {crate: ast::local_crate,\n+                                            node: item.id});\n+                  }\n+                  none {}\n+                }\n+            }\n+          }\n+          _ {}\n+        }\n+        with *visit::default_simple_visitor()\n+    }));\n+}\n+\n+fn gather_external_rtcalls(ccx: @crate_ctxt) {\n+    do cstore::iter_crate_data(ccx.sess.cstore) |_cnum, cmeta| {\n+        do decoder::each_path(cmeta) |path| {\n+            let pathname = path.path_string;\n+            alt path.def_like {\n+              decoder::dl_def(d) {\n+                alt d {\n+                  ast::def_fn(did, _) {\n+                    // FIXME (#2861): This should really iterate attributes\n+                    // like gather_local_rtcalls, but we'll need to\n+                    // export attributes in metadata/encoder before we can do\n+                    // that.\n+                    let sentinel = \"rt::rt_\";\n+                    let slen = str::len(sentinel);\n+                    if str::starts_with(pathname, sentinel) {\n+                        let name = str::substr(pathname,\n+                                               slen, str::len(pathname)-slen);\n+                        push_rtcall(ccx, name, did);\n+                    }\n+                  }\n+                  _ {}\n+                }\n+              }\n+              _ {}\n+            }\n+            true\n+        }\n+    }\n+}\n+\n+fn gather_rtcalls(ccx: @crate_ctxt, crate: @ast::crate) {\n+    gather_local_rtcalls(ccx, crate);\n+    gather_external_rtcalls(ccx);\n+\n+    // FIXME (#2861): Check for other rtcalls too, once they are\n+    // supported. Also probably want to check type signature so we don't crash\n+    // in some obscure place in LLVM if the user provides the wrong signature\n+    // for an rtcall.\n+    let expected_rtcalls =\n+        ~[~\"exchange_free\", ~\"exchange_malloc\", ~\"fail\", ~\"free\", ~\"malloc\"];\n+    for vec::each(expected_rtcalls) |name| {\n+        if !ccx.rtcalls.contains_key(name) {\n+            fail #fmt(\"no definition for runtime call %s\", name);\n+        }\n+    }\n+}\n+\n fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n     let elttype = T_struct(~[ccx.int_type, ccx.int_type]);\n     let maptype = T_array(elttype, ccx.module_data.size() + 1u);\n@@ -5544,6 +5637,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           upcalls:\n               upcall::declare_upcalls(targ_cfg, tn, tydesc_type,\n                                       llmod),\n+          rtcalls: str_hash::<ast::def_id>(),\n           tydesc_type: tydesc_type,\n           int_type: int_type,\n           float_type: float_type,\n@@ -5557,6 +5651,8 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           mut do_not_commit_warning_issued: false};\n \n \n+    gather_rtcalls(ccx, crate);\n+\n     {\n         let _icx = ccx.insn_ctxt(~\"data\");\n         trans_constants(ccx, crate);"}, {"sha": "c8d55ff09459ecbde4c0b16330952cbf4722ab94", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -138,7 +138,7 @@ fn mk_closure_tys(tcx: ty::ctxt,\n fn allocate_cbox(bcx: block,\n                  ck: ty::closure_kind,\n                  cdata_ty: ty::t)\n-    -> ValueRef {\n+    -> result {\n     let _icx = bcx.insn_ctxt(~\"closure::allocate_cbox\");\n     let ccx = bcx.ccx(), tcx = ccx.tcx;\n \n@@ -153,7 +153,7 @@ fn allocate_cbox(bcx: block,\n     }\n \n     // Allocate and initialize the box:\n-    let llbox = alt ck {\n+    let {bcx, val} = alt ck {\n       ty::ck_box {\n         malloc_raw(bcx, cdata_ty, heap_shared)\n       }\n@@ -164,11 +164,11 @@ fn allocate_cbox(bcx: block,\n         let cbox_ty = tuplify_box_ty(tcx, cdata_ty);\n         let llbox = base::alloc_ty(bcx, cbox_ty);\n         nuke_ref_count(bcx, llbox);\n-        llbox\n+        {bcx: bcx, val: llbox}\n       }\n     };\n \n-    ret llbox;\n+    ret {bcx: bcx, val: val};\n }\n \n type closure_result = {\n@@ -191,7 +191,7 @@ fn store_environment(bcx: block,\n     let cdata_ty = mk_closure_tys(tcx, bound_values);\n \n     // allocate closure in the heap\n-    let llbox = allocate_cbox(bcx, ck, cdata_ty);\n+    let {bcx: bcx, val: llbox} = allocate_cbox(bcx, ck, cdata_ty);\n     let mut temp_cleanups = ~[];\n \n     // cbox_ty has the form of a tuple: (a, b, c) we want a ptr to a\n@@ -362,14 +362,14 @@ fn trans_expr_fn(bcx: block,\n                  dest: dest) -> block {\n     let _icx = bcx.insn_ctxt(~\"closure::trans_expr_fn\");\n     if dest == ignore { ret bcx; }\n-    let ccx = bcx.ccx(), bcx = bcx;\n+    let ccx = bcx.ccx();\n     let fty = node_id_type(bcx, id);\n     let llfnty = type_of_fn_from_ty(ccx, fty);\n     let sub_path = vec::append_one(bcx.fcx.path, path_name(@~\"anon\"));\n     let s = mangle_internal_name_by_path(ccx, sub_path);\n     let llfn = decl_internal_cdecl_fn(ccx.llmod, s, llfnty);\n \n-    let trans_closure_env = fn@(ck: ty::closure_kind) -> ValueRef {\n+    let trans_closure_env = fn@(ck: ty::closure_kind) -> result {\n         let cap_vars = capture::compute_capture_vars(\n             ccx.tcx, id, proto, cap_clause);\n         let ret_handle = alt is_loop_body { some(x) { x } none { none } };\n@@ -384,20 +384,21 @@ fn trans_expr_fn(bcx: block,\n                 Store(bcx, C_bool(true), bcx.fcx.llretptr);\n             }\n         });\n-        llbox\n+        {bcx: bcx, val: llbox}\n     };\n \n-    let closure = alt proto {\n+    let {bcx: bcx, val: closure} = alt proto {\n       ast::proto_any | ast::proto_block { trans_closure_env(ty::ck_block) }\n       ast::proto_box { trans_closure_env(ty::ck_box) }\n       ast::proto_uniq { trans_closure_env(ty::ck_uniq) }\n       ast::proto_bare {\n         trans_closure(ccx, sub_path, decl, body, llfn, no_self, none,\n                       id, |_fcx| { }, |_bcx| { });\n-        C_null(T_opaque_box_ptr(ccx))\n+        {bcx: bcx, val: C_null(T_opaque_box_ptr(ccx))}\n       }\n     };\n     fill_fn_pair(bcx, get_dest_addr(dest), llfn, closure);\n+\n     ret bcx;\n }\n \n@@ -459,9 +460,12 @@ fn make_opaque_cbox_take_glue(\n         let sz = Add(bcx, sz, shape::llsize_of(ccx, T_box_header(ccx)));\n \n         // Allocate memory, update original ptr, and copy existing data\n-        let malloc = ccx.upcalls.exchange_malloc;\n-        let cbox_out = Call(bcx, malloc, ~[tydesc, sz]);\n-        let cbox_out = PointerCast(bcx, cbox_out, llopaquecboxty);\n+        let malloc = ~\"exchange_malloc\";\n+        let opaque_tydesc = PointerCast(bcx, tydesc, T_ptr(T_i8()));\n+        let rval = alloca_zeroed(bcx, T_ptr(T_i8()));\n+        let bcx = trans_rtcall(bcx, malloc, ~[opaque_tydesc, sz],\n+                               save_in(rval));\n+        let cbox_out = PointerCast(bcx, Load(bcx, rval), llopaquecboxty);\n         call_memmove(bcx, cbox_out, cbox_in, sz);\n         Store(bcx, cbox_out, cboxptr);\n "}, {"sha": "c002c5a2a43c991e24993204dce2b273d7c9cd16", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -118,6 +118,7 @@ type crate_ctxt = {\n      maps: astencode::maps,\n      stats: stats,\n      upcalls: @upcall::upcalls,\n+     rtcalls: hashmap<~str, ast::def_id>,\n      tydesc_type: TypeRef,\n      int_type: TypeRef,\n      float_type: TypeRef,"}, {"sha": "10c410b6ac22b5f4d7d2b8b134dfb60a019978f4", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -288,7 +288,7 @@ fn trans_cast(bcx: block, val: @ast::expr, id: ast::node_id, dest: dest)\n     if dest == ignore { ret trans_expr(bcx, val, ignore); }\n     let ccx = bcx.ccx();\n     let v_ty = expr_ty(bcx, val);\n-    let {box: llbox, body: body} = malloc_boxed(bcx, v_ty);\n+    let {bcx: bcx, box: llbox, body: body} = malloc_boxed(bcx, v_ty);\n     add_clean_free(bcx, llbox, heap_shared);\n     let bcx = trans_expr_save_in(bcx, val, body);\n     revoke_clean(bcx, llbox);"}, {"sha": "bc698e6e3d290d0bb312772e5bef22afc9de7ad6", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -68,7 +68,8 @@ fn alloc_raw(bcx: block, unit_ty: ty::t,\n     let vecbodyty = ty::mk_mut_unboxed_vec(bcx.tcx(), unit_ty);\n     let vecsize = Add(bcx, alloc, llsize_of(ccx, ccx.opaque_vec_type));\n \n-    let {box, body} = base::malloc_general_dyn(bcx, vecbodyty, heap, vecsize);\n+    let {bcx, box, body} =\n+        base::malloc_general_dyn(bcx, vecbodyty, heap, vecsize);\n     Store(bcx, fill, GEPi(bcx, body, ~[0u, abi::vec_elt_fill]));\n     Store(bcx, alloc, GEPi(bcx, body, ~[0u, abi::vec_elt_alloc]));\n     ret {bcx: bcx, val: box};"}, {"sha": "b1d7762ec7be23e6ad8d27b58a4619975c65e0e3", "filename": "src/rustc/middle/trans/uniq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -34,7 +34,8 @@ fn autoderef(bcx: block, v: ValueRef, t: ty::t) -> {v: ValueRef, t: ty::t} {\n fn duplicate(bcx: block, v: ValueRef, t: ty::t) -> result {\n     let _icx = bcx.insn_ctxt(~\"uniq::duplicate\");\n     let content_ty = content_ty(t);\n-    let {box: dst_box, body: dst_body} = malloc_unique(bcx, content_ty);\n+    let {bcx: bcx, box: dst_box, body: dst_body} =\n+        malloc_unique(bcx, content_ty);\n \n     let src_box = v;\n     let src_body = opaque_box_body(bcx, content_ty, src_box);"}, {"sha": "3f93608e53addf9d8474f678c4baca955287bc80", "filename": "src/test/run-pass/module-polymorphism.rc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -1,8 +1,5 @@\n-#[no_core];\n-\n-\n #[path = \"module-polymorphism-files\"]\n-mod float {\n+mod my_float {\n \n     // The type of the float\n     import inst::T;\n@@ -18,7 +15,7 @@ mod float {\n }\n \n #[path = \"module-polymorphism-files\"]\n-mod f64 {\n+mod my_f64 {\n \n     import inst::T;\n \n@@ -33,7 +30,7 @@ mod f64 {\n }\n \n #[path = \"module-polymorphism-files\"]\n-mod f32 {\n+mod my_f32 {\n     import inst::T;\n \n     #[path = \"inst_f32.rs\"]"}, {"sha": "26c3582d6a635b55b7b05d5b5454e5d25dfbc416", "filename": "src/test/run-pass/module-polymorphism.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rs?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -5,7 +5,7 @@\n fn main() {\n     // All of these functions are defined by a single module\n     // source file but instantiated for different types\n-    assert float::template::plus(1.0f, 2.0f) == 3.0f;\n-    assert f64::template::plus(1.0f64, 2.0f64) == 3.0f64;\n-    assert f32::template::plus(1.0f32, 2.0f32) == 3.0f32;\n+    assert my_float::template::plus(1.0f, 2.0f) == 3.0f;\n+    assert my_f64::template::plus(1.0f64, 2.0f64) == 3.0f64;\n+    assert my_f32::template::plus(1.0f32, 2.0f32) == 3.0f32;\n }\n\\ No newline at end of file"}, {"sha": "bc801bcb4a3f2ebdf4816af63524310dbcf11234", "filename": "src/test/run-pass/module-polymorphism2.rc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -1,6 +1,3 @@\n-#[no_core];\n-\n-\n #[path = \"module-polymorphism2-files\"]\n mod mystd {\n "}, {"sha": "3ed7be15ff5fa0f7b88e2c2a03e6dc137a199d31", "filename": "src/test/run-pass/module-polymorphism3.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc", "raw_url": "https://github.com/rust-lang/rust/raw/874b2f1ed5f29b634292772ec1b05497838526aa/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc?ref=874b2f1ed5f29b634292772ec1b05497838526aa", "patch": "@@ -1,5 +1,3 @@\n-#[no_core];\n-\n // Use one template module to specify in a single file the implementation\n // of functions for multiple types\n "}]}