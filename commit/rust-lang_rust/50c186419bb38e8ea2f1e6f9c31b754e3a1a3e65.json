{"sha": "50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYzE4NjQxOWJiMzhlOGVhMmYxZTZmOWMzMWI3NTRlM2ExYTNlNjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-06T20:15:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-06T20:15:17Z"}, "message": "Auto merge of #40863 - eddyb:coerce-only-once, r=arielb1\n\nAvoid type-checking addition and indexing twice.\n\nFixes #40610 by moving the common `check_expr_coercable_to_type` call before the error reporting logic for binops and removing the one from `check_str_addition`.\nFixes #40861 by removing an unnecessary `check_expr_coercable_to_type` call.", "tree": {"sha": "d23b41ecd6d74542d8cbc65b1b51e9c4e45208ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d23b41ecd6d74542d8cbc65b1b51e9c4e45208ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65", "html_url": "https://github.com/rust-lang/rust/commit/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44855a4cef3e83c76c386fdcf034447a8ee128e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/44855a4cef3e83c76c386fdcf034447a8ee128e4", "html_url": "https://github.com/rust-lang/rust/commit/44855a4cef3e83c76c386fdcf034447a8ee128e4"}, {"sha": "edc7f9abec051b3c388f3199c052a0f617a99423", "url": "https://api.github.com/repos/rust-lang/rust/commits/edc7f9abec051b3c388f3199c052a0f617a99423", "html_url": "https://github.com/rust-lang/rust/commit/edc7f9abec051b3c388f3199c052a0f617a99423"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "c995b7e92843dd1707b5639e77144e02fa8b1c60", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65", "patch": "@@ -3884,7 +3884,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           element_ty\n                       }\n                       None => {\n-                          self.check_expr_has_type(&idx, self.tcx.types.err);\n                           let mut err = self.type_error_struct(\n                               expr.span,\n                               |actual| {"}, {"sha": "cc33bd8754d9ed1c59caf83c37b1a4979a02b5c4", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65", "patch": "@@ -184,9 +184,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // particularly for things like `String + &String`.\n         let rhs_ty_var = self.next_ty_var(TypeVariableOrigin::MiscVariable(rhs_expr.span));\n \n-        let return_ty = match self.lookup_op_method(expr, lhs_ty, vec![rhs_ty_var],\n-                                                    Symbol::intern(name), trait_def_id,\n-                                                    lhs_expr) {\n+        let return_ty = self.lookup_op_method(expr, lhs_ty, vec![rhs_ty_var],\n+                                              Symbol::intern(name), trait_def_id,\n+                                              lhs_expr);\n+\n+        // see `NB` above\n+        let rhs_ty = self.check_expr_coercable_to_type(rhs_expr, rhs_ty_var);\n+\n+        let return_ty = match return_ty {\n             Ok(return_ty) => return_ty,\n             Err(()) => {\n                 // error types are considered \"builtin\"\n@@ -209,7 +214,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                         if let TypeVariants::TyRef(_, ref ty_mut) = lhs_ty.sty {\n                             if !self.infcx.type_moves_by_default(ty_mut.ty, lhs_expr.span) &&\n-                                self.lookup_op_method(expr, ty_mut.ty, vec![rhs_ty_var],\n+                                self.lookup_op_method(expr, ty_mut.ty, vec![rhs_ty],\n                                     Symbol::intern(name), trait_def_id,\n                                     lhs_expr).is_ok() {\n                                 err.note(\n@@ -240,7 +245,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         if let Some(missing_trait) = missing_trait {\n                             if missing_trait == \"std::ops::Add\" &&\n                                 self.check_str_addition(expr, lhs_expr, lhs_ty,\n-                                                         rhs_expr, rhs_ty_var, &mut err) {\n+                                                         rhs_expr, rhs_ty, &mut err) {\n                                 // This has nothing here because it means we did string\n                                 // concatenation (e.g. \"Hello \" + \"World!\"). This means\n                                 // we don't want the note in the else clause to be emitted\n@@ -257,9 +262,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        // see `NB` above\n-        self.check_expr_coercable_to_type(rhs_expr, rhs_ty_var);\n-\n         (rhs_ty_var, return_ty)\n     }\n \n@@ -268,12 +270,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           lhs_expr: &'gcx hir::Expr,\n                           lhs_ty: Ty<'tcx>,\n                           rhs_expr: &'gcx hir::Expr,\n-                          rhs_ty_var: Ty<'tcx>,\n+                          rhs_ty: Ty<'tcx>,\n                           mut err: &mut errors::DiagnosticBuilder) -> bool {\n         // If this function returns true it means a note was printed, so we don't need\n         // to print the normal \"implementation of `std::ops::Add` might be missing\" note\n         let mut is_string_addition = false;\n-        let rhs_ty = self.check_expr_coercable_to_type(rhs_expr, rhs_ty_var);\n         if let TyRef(_, l_ty) = lhs_ty.sty {\n             if let TyRef(_, r_ty) = rhs_ty.sty {\n                 if l_ty.ty.sty == TyStr && r_ty.ty.sty == TyStr {"}, {"sha": "aec20b4ad87b70ff77eef70a0dcf06c63757c1a4", "filename": "src/test/compile-fail/issue-40610.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65/src%2Ftest%2Fcompile-fail%2Fissue-40610.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65/src%2Ftest%2Fcompile-fail%2Fissue-40610.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-40610.rs?ref=50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f(_: &[f32]) {}\n+\n+fn main() {\n+    () + f(&[1.0]);\n+    //~^ ERROR binary operation `+` cannot be applied to type `()`\n+}"}, {"sha": "e525b3954f5edf8863f569b7f192f2acc17c0979", "filename": "src/test/compile-fail/issue-40861.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65/src%2Ftest%2Fcompile-fail%2Fissue-40861.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65/src%2Ftest%2Fcompile-fail%2Fissue-40861.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-40861.rs?ref=50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f(_: &[f32]) {}\n+\n+fn main() {\n+    ()[f(&[1.0])];\n+    //~^ ERROR cannot index a value of type `()`\n+}"}]}