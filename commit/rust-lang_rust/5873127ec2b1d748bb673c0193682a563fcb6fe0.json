{"sha": "5873127ec2b1d748bb673c0193682a563fcb6fe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NzMxMjdlYzJiMWQ3NDhiYjY3M2MwMTkzNjgyYTU2M2ZjYjZmZTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-16T19:21:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-18T16:31:38Z"}, "message": "Make debuginfo writing backend agnostic", "tree": {"sha": "ba2636ddd729a147fa92c98b098bace37754a3a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba2636ddd729a147fa92c98b098bace37754a3a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5873127ec2b1d748bb673c0193682a563fcb6fe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5873127ec2b1d748bb673c0193682a563fcb6fe0", "html_url": "https://github.com/rust-lang/rust/commit/5873127ec2b1d748bb673c0193682a563fcb6fe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5873127ec2b1d748bb673c0193682a563fcb6fe0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9ff604d966ff9fa180ac171b27ef5bd7db43eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1", "html_url": "https://github.com/rust-lang/rust/commit/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1"}], "stats": {"total": 173, "additions": 126, "deletions": 47}, "files": [{"sha": "429c48ba0e38917479f6152c5f7ff52b3c2ac61b", "filename": "src/backend.rs", "status": "modified", "additions": 104, "deletions": 3, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/5873127ec2b1d748bb673c0193682a563fcb6fe0/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873127ec2b1d748bb673c0193682a563fcb6fe0/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=5873127ec2b1d748bb673c0193682a563fcb6fe0", "patch": "@@ -1,8 +1,21 @@\n-pub trait Product {\n+use std::collections::HashMap;\n+\n+use cranelift_module::FuncId;\n+\n+use faerie::*;\n+use object::{SectionKind, RelocationKind, RelocationEncoding};\n+use object::write::*;\n+use cranelift_object::*;\n+\n+use gimli::SectionId;\n+\n+use crate::debuginfo::{DebugReloc, DebugRelocName};\n+\n+pub trait WriteMetadata {\n     fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, is_like_osx: bool);\n }\n \n-impl Product for faerie::Artifact {\n+impl WriteMetadata for faerie::Artifact {\n     fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, is_like_osx: bool) {\n         self\n             .declare(\".rustc\", faerie::Decl::section(faerie::SectionKind::Data))\n@@ -25,7 +38,7 @@ impl Product for faerie::Artifact {\n     }\n }\n \n-impl Product for object::write::Object {\n+impl WriteMetadata for object::write::Object {\n     fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, is_like_osx: bool) {\n         let segment = self.segment_name(object::write::StandardSegment::Data).to_vec();\n         let section_id = self.add_section(segment, b\".rustc\".to_vec(), object::SectionKind::Data);\n@@ -46,3 +59,91 @@ impl Product for object::write::Object {\n         }\n     }\n }\n+\n+pub trait WriteDebugInfo {\n+    type SectionId;\n+\n+    fn add_debug_section(&mut self, name: SectionId, data: Vec<u8>) -> Self::SectionId;\n+    fn add_debug_reloc(\n+        &mut self,\n+        section_map: &HashMap<SectionId, Self::SectionId>,\n+        symbol_map: &indexmap::IndexSet<(String, FuncId)>,\n+        from: &Self::SectionId,\n+        reloc: &DebugReloc,\n+    );\n+}\n+\n+impl WriteDebugInfo for Artifact {\n+    type SectionId = SectionId;\n+\n+    fn add_debug_section(&mut self, id: SectionId, data: Vec<u8>) -> SectionId {\n+        self.declare_with(id.name(), Decl::section(faerie::SectionKind::Debug), data).unwrap();\n+        id\n+    }\n+\n+    fn add_debug_reloc(\n+        &mut self,\n+        _section_map: &HashMap<SectionId, Self::SectionId>,\n+        symbol_map: &indexmap::IndexSet<(String, FuncId)>,\n+        from: &Self::SectionId,\n+        reloc: &DebugReloc,\n+    ) {\n+        self\n+            .link_with(\n+                faerie::Link {\n+                    from: from.name(),\n+                    to: match reloc.name {\n+                        DebugRelocName::Section(id) => id.name(),\n+                        DebugRelocName::Symbol(index) => &symbol_map.get_index(index).unwrap().0,\n+                    },\n+                    at: u64::from(reloc.offset),\n+                },\n+                faerie::Reloc::Debug {\n+                    size: reloc.size,\n+                    addend: reloc.addend as i32,\n+                },\n+            )\n+            .expect(\"faerie relocation error\");\n+    }\n+}\n+\n+impl WriteDebugInfo for ObjectProduct {\n+    type SectionId = (object::write::SectionId, object::write::SymbolId);\n+\n+    fn add_debug_section(\n+        &mut self,\n+        id: SectionId,\n+        data: Vec<u8>,\n+    ) -> (object::write::SectionId, object::write::SymbolId) {\n+        let segment = self.object.segment_name(StandardSegment::Debug).to_vec();\n+        let name = id.name().as_bytes().to_vec();\n+        let section_id = self.object.add_section(segment, name, SectionKind::Debug);\n+        self.object.section_mut(section_id).set_data(data, 1);\n+        let symbol_id = self.object.section_symbol(section_id);\n+        (section_id, symbol_id)\n+    }\n+\n+    fn add_debug_reloc(\n+        &mut self,\n+        section_map: &HashMap<SectionId, Self::SectionId>,\n+        symbol_map: &indexmap::IndexSet<(String, FuncId)>,\n+        from: &Self::SectionId,\n+        reloc: &DebugReloc,\n+    ) {\n+        let symbol = match reloc.name {\n+            DebugRelocName::Section(id) => section_map.get(&id).unwrap().1,\n+            DebugRelocName::Symbol(id) => {\n+                let (_func_name, func_id) = symbol_map.get_index(id).unwrap();\n+                self.function_symbol(*func_id)\n+            }\n+        };\n+        self.object.add_relocation(from.0, Relocation {\n+            offset: u64::from(reloc.offset),\n+            symbol,\n+            kind: RelocationKind::Absolute,\n+            encoding: RelocationEncoding::Generic,\n+            size: reloc.size * 8,\n+            addend: reloc.addend,\n+        }).unwrap();\n+    }\n+}"}, {"sha": "ef32dafb2efc5adfc73f1246ac65d5077757ea9a", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5873127ec2b1d748bb673c0193682a563fcb6fe0/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873127ec2b1d748bb673c0193682a563fcb6fe0/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=5873127ec2b1d748bb673c0193682a563fcb6fe0", "patch": "@@ -17,7 +17,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let mut debug_context = cx\n         .debug_context\n         .as_mut()\n-        .map(|debug_context| FunctionDebugContext::new(tcx, debug_context, mir, &name, &sig));\n+        .map(|debug_context| FunctionDebugContext::new(tcx, debug_context, mir, func_id, &name, &sig));\n \n     // Make FunctionBuilder\n     let mut func = Function::with_name_signature(ExternalName::user(0, 0), sig);"}, {"sha": "d2705c6a2c74c6397447c6111e492ec0048c8772", "filename": "src/debuginfo.rs", "status": "modified", "additions": 19, "deletions": 41, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5873127ec2b1d748bb673c0193682a563fcb6fe0/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873127ec2b1d748bb673c0193682a563fcb6fe0/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=5873127ec2b1d748bb673c0193682a563fcb6fe0", "patch": "@@ -1,5 +1,7 @@\n use crate::prelude::*;\n \n+use crate::backend::WriteDebugInfo;\n+\n use std::marker::PhantomData;\n \n use syntax::source_map::FileName;\n@@ -10,8 +12,6 @@ use gimli::write::{\n };\n use gimli::{Encoding, Format, LineEncoding, RunTimeEndian, SectionId};\n \n-use faerie::*;\n-\n fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n     use rustc::ty::layout::Endian;\n \n@@ -56,31 +56,22 @@ fn line_program_add_file(\n }\n \n #[derive(Clone)]\n-struct DebugReloc {\n-    offset: u32,\n-    size: u8,\n-    name: DebugRelocName,\n-    addend: i64,\n+pub struct DebugReloc {\n+    pub offset: u32,\n+    pub size: u8,\n+    pub name: DebugRelocName,\n+    pub addend: i64,\n }\n \n #[derive(Clone)]\n-enum DebugRelocName {\n+pub enum DebugRelocName {\n     Section(SectionId),\n     Symbol(usize),\n }\n \n-impl DebugReloc {\n-    fn name<'a>(&self, ctx: &'a DebugContext) -> &'a str {\n-        match self.name {\n-            DebugRelocName::Section(id) => id.name(),\n-            DebugRelocName::Symbol(index) => ctx.symbols.get_index(index).unwrap(),\n-        }\n-    }\n-}\n-\n pub struct DebugContext<'tcx> {\n     endian: RunTimeEndian,\n-    symbols: indexmap::IndexSet<String>,\n+    symbols: indexmap::IndexSet<(String, FuncId)>,\n \n     dwarf: DwarfUnit,\n     unit_range_list: RangeList,\n@@ -177,7 +168,7 @@ impl<'tcx> DebugContext<'tcx> {\n         );\n     }\n \n-    pub fn emit(&mut self, artifact: &mut Artifact) {\n+    pub fn emit<P: WriteDebugInfo>(&mut self, product: &mut P) {\n         let unit_range_list_id = self.dwarf.unit.ranges.add(self.unit_range_list.clone());\n         let root = self.dwarf.unit.root();\n         let root = self.dwarf.unit.get_mut(root);\n@@ -189,34 +180,20 @@ impl<'tcx> DebugContext<'tcx> {\n         let mut sections = Sections::new(WriterRelocate::new(self));\n         self.dwarf.write(&mut sections).unwrap();\n \n+        let mut section_map = HashMap::new();\n         let _: Result<()> = sections.for_each_mut(|id, section| {\n             if !section.writer.slice().is_empty() {\n-                artifact\n-                    .declare_with(\n-                        id.name(),\n-                        Decl::section(SectionKind::Debug),\n-                        section.writer.take(),\n-                    )\n-                    .unwrap();\n+                let section_id = product.add_debug_section(id, section.writer.take());\n+                section_map.insert(id, section_id);\n             }\n             Ok(())\n         });\n \n         let _: Result<()> = sections.for_each(|id, section| {\n-            for reloc in &section.relocs {\n-                artifact\n-                    .link_with(\n-                        faerie::Link {\n-                            from: id.name(),\n-                            to: reloc.name(self),\n-                            at: u64::from(reloc.offset),\n-                        },\n-                        faerie::Reloc::Debug {\n-                            size: reloc.size,\n-                            addend: reloc.addend as i32,\n-                        },\n-                    )\n-                    .expect(\"faerie relocation error\");\n+            if let Some(section_id) = section_map.get(&id) {\n+                for reloc in &section.relocs {\n+                    product.add_debug_reloc(&section_map, &self.symbols, section_id, reloc);\n+                }\n             }\n             Ok(())\n         });\n@@ -235,10 +212,11 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         debug_context: &'a mut DebugContext<'tcx>,\n         mir: &Body,\n+        func_id: FuncId,\n         name: &str,\n         _sig: &Signature,\n     ) -> Self {\n-        let (symbol, _) = debug_context.symbols.insert_full(name.to_string());\n+        let (symbol, _) = debug_context.symbols.insert_full((name.to_string(), func_id));\n \n         // FIXME: add to appropriate scope intead of root\n         let scope = debug_context.dwarf.unit.root();"}, {"sha": "f15e1682d13d35ee06c02795663eb6b76fb42257", "filename": "src/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5873127ec2b1d748bb673c0193682a563fcb6fe0/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873127ec2b1d748bb673c0193682a563fcb6fe0/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=5873127ec2b1d748bb673c0193682a563fcb6fe0", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::owning_ref::{self, OwningRef};\n use rustc_data_structures::rustc_erase_owner;\n use rustc_target::spec::Target;\n \n-use crate::backend::Product;\n+use crate::backend::WriteMetadata;\n \n pub struct CraneliftMetadataLoader;\n \n@@ -53,7 +53,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n }\n \n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n-pub fn write_metadata<P: Product>(tcx: TyCtxt<'_>, product: &mut P) -> EncodedMetadata {\n+pub fn write_metadata<P: WriteMetadata>(tcx: TyCtxt<'_>, product: &mut P) -> EncodedMetadata {\n     use flate2::write::DeflateEncoder;\n     use flate2::Compression;\n     use std::io::Write;"}]}