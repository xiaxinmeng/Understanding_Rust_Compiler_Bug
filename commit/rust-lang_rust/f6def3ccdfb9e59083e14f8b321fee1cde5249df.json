{"sha": "f6def3ccdfb9e59083e14f8b321fee1cde5249df", "node_id": "C_kwDOAAsO6NoAKGY2ZGVmM2NjZGZiOWU1OTA4M2UxNGY4YjMyMWZlZTFjZGU1MjQ5ZGY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-31T15:56:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-31T16:02:57Z"}, "message": "fix: Fix proc-macro server not using the supplied span in Ident::new", "tree": {"sha": "73a434b339b3906fcfa7214bb375fd1f682e5b2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a434b339b3906fcfa7214bb375fd1f682e5b2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6def3ccdfb9e59083e14f8b321fee1cde5249df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6def3ccdfb9e59083e14f8b321fee1cde5249df", "html_url": "https://github.com/rust-lang/rust/commit/f6def3ccdfb9e59083e14f8b321fee1cde5249df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6def3ccdfb9e59083e14f8b321fee1cde5249df/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45ff51ba2206c50be7b79ec2817bb8c5a66d9b5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ff51ba2206c50be7b79ec2817bb8c5a66d9b5c", "html_url": "https://github.com/rust-lang/rust/commit/45ff51ba2206c50be7b79ec2817bb8c5a66d9b5c"}], "stats": {"total": 56, "additions": 8, "deletions": 48}, "files": [{"sha": "c869db3b8b7d74f8a890ae1d8cca50d993f5a67f", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6def3ccdfb9e59083e14f8b321fee1cde5249df/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6def3ccdfb9e59083e14f8b321fee1cde5249df/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=f6def3ccdfb9e59083e14f8b321fee1cde5249df", "patch": "@@ -234,15 +234,6 @@ fn highlight_name_ref(\n         None if syntactic_name_ref_highlighting => {\n             return highlight_name_ref_by_syntax(name_ref, sema, krate)\n         }\n-        // FIXME: Workaround for https://github.com/rust-analyzer/rust-analyzer/issues/10708\n-        //\n-        // Some popular proc macros (namely async_trait) will rewrite `self` in such a way that it no\n-        // longer resolves via NameRefClass. If we can't be resolved, but we know we're a self token,\n-        // within a function with a self param, pretend to still be `self`, rather than\n-        // an unresolved reference.\n-        None if name_ref.self_token().is_some() && is_in_fn_with_self_param(&name_ref) => {\n-            return SymbolKind::SelfParam.into()\n-        }\n         // FIXME: This is required for helper attributes used by proc-macros, as those do not map down\n         // to anything when used.\n         // We can fix this for derive attributes since derive helpers are recorded, but not for\n@@ -712,14 +703,3 @@ fn parents_match(mut node: NodeOrToken<SyntaxNode, SyntaxToken>, mut kinds: &[Sy\n fn parent_matches<N: AstNode>(token: &SyntaxToken) -> bool {\n     token.parent().map_or(false, |it| N::can_cast(it.kind()))\n }\n-\n-fn is_in_fn_with_self_param(node: &ast::NameRef) -> bool {\n-    node.syntax()\n-        .ancestors()\n-        .find_map(ast::Item::cast)\n-        .and_then(|item| match item {\n-            ast::Item::Fn(fn_) => fn_.param_list()?.self_param(),\n-            _ => None,\n-        })\n-        .is_some()\n-}"}, {"sha": "1ef137029d19b3750015e0a09220ebe1253e54ef", "filename": "crates/proc_macro_srv/src/abis/abi_1_47/rustc_server.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6def3ccdfb9e59083e14f8b321fee1cde5249df/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6def3ccdfb9e59083e14f8b321fee1cde5249df/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs?ref=f6def3ccdfb9e59083e14f8b321fee1cde5249df", "patch": "@@ -463,13 +463,8 @@ impl server::Punct for Rustc {\n }\n \n impl server::Ident for Rustc {\n-    fn new(&mut self, string: &str, _span: Self::Span, _is_raw: bool) -> Self::Ident {\n-        IdentId(\n-            self.ident_interner.intern(&IdentData(tt::Ident {\n-                text: string.into(),\n-                id: tt::TokenId::unspecified(),\n-            })),\n-        )\n+    fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n+        IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n     }\n \n     fn span(&mut self, ident: Self::Ident) -> Self::Span {"}, {"sha": "3904cb8f3eae70f1d3952fd1e7cec7f4edea46d4", "filename": "crates/proc_macro_srv/src/abis/abi_1_54/rustc_server.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6def3ccdfb9e59083e14f8b321fee1cde5249df/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_54%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6def3ccdfb9e59083e14f8b321fee1cde5249df/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_54%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_54%2Frustc_server.rs?ref=f6def3ccdfb9e59083e14f8b321fee1cde5249df", "patch": "@@ -463,13 +463,8 @@ impl server::Punct for Rustc {\n }\n \n impl server::Ident for Rustc {\n-    fn new(&mut self, string: &str, _span: Self::Span, _is_raw: bool) -> Self::Ident {\n-        IdentId(\n-            self.ident_interner.intern(&IdentData(tt::Ident {\n-                text: string.into(),\n-                id: tt::TokenId::unspecified(),\n-            })),\n-        )\n+    fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n+        IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n     }\n \n     fn span(&mut self, ident: Self::Ident) -> Self::Span {"}, {"sha": "cf797752310d38716a6d5c8ca9a826b4e8896add", "filename": "crates/proc_macro_srv/src/abis/abi_1_56/rustc_server.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6def3ccdfb9e59083e14f8b321fee1cde5249df/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6def3ccdfb9e59083e14f8b321fee1cde5249df/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs?ref=f6def3ccdfb9e59083e14f8b321fee1cde5249df", "patch": "@@ -464,13 +464,8 @@ impl server::Punct for Rustc {\n }\n \n impl server::Ident for Rustc {\n-    fn new(&mut self, string: &str, _span: Self::Span, _is_raw: bool) -> Self::Ident {\n-        IdentId(\n-            self.ident_interner.intern(&IdentData(tt::Ident {\n-                text: string.into(),\n-                id: tt::TokenId::unspecified(),\n-            })),\n-        )\n+    fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n+        IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n     }\n \n     fn span(&mut self, ident: Self::Ident) -> Self::Span {"}, {"sha": "5c3f4da00145e48b87f6cd0815946ac2027fcaca", "filename": "crates/proc_macro_srv/src/abis/abi_1_58/rustc_server.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6def3ccdfb9e59083e14f8b321fee1cde5249df/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6def3ccdfb9e59083e14f8b321fee1cde5249df/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Frustc_server.rs?ref=f6def3ccdfb9e59083e14f8b321fee1cde5249df", "patch": "@@ -468,13 +468,8 @@ impl server::Punct for Rustc {\n }\n \n impl server::Ident for Rustc {\n-    fn new(&mut self, string: &str, _span: Self::Span, _is_raw: bool) -> Self::Ident {\n-        IdentId(\n-            self.ident_interner.intern(&IdentData(tt::Ident {\n-                text: string.into(),\n-                id: tt::TokenId::unspecified(),\n-            })),\n-        )\n+    fn new(&mut self, string: &str, span: Self::Span, _is_raw: bool) -> Self::Ident {\n+        IdentId(self.ident_interner.intern(&IdentData(tt::Ident { text: string.into(), id: span })))\n     }\n \n     fn span(&mut self, ident: Self::Ident) -> Self::Span {"}]}