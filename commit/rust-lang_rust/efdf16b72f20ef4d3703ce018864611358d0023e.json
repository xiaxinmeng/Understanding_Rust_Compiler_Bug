{"sha": "efdf16b72f20ef4d3703ce018864611358d0023e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZGYxNmI3MmYyMGVmNGQzNzAzY2UwMTg4NjQ2MTEzNThkMDAyM2U=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T00:06:48Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T10:51:05Z"}, "message": "Rollup merge of #21964 - semarie:openbsd-env, r=alexcrichton\n\n - add `_SC_GETPW_R_SIZE_MAX` constant\n- declare `struct passwd`\n- convert `load_self` to `current_exe`\n\nNote: OpenBSD don't provide system function to return a valuable Path\nfor `env::current_exe`. The implementation is currently based on the\nvalue of `argv[0]`, which couldn't be used when executable is called via\nPATH.", "tree": {"sha": "0ad3be936b2c591ae0f4fabc0cdc80489b42e533", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ad3be936b2c591ae0f4fabc0cdc80489b42e533"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efdf16b72f20ef4d3703ce018864611358d0023e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efdf16b72f20ef4d3703ce018864611358d0023e", "html_url": "https://github.com/rust-lang/rust/commit/efdf16b72f20ef4d3703ce018864611358d0023e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efdf16b72f20ef4d3703ce018864611358d0023e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c172ad03cee9274028ae8333338845002eeec9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c172ad03cee9274028ae8333338845002eeec9a", "html_url": "https://github.com/rust-lang/rust/commit/5c172ad03cee9274028ae8333338845002eeec9a"}, {"sha": "cb4965ef3a826af8150ef863e98709b4ffa83767", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4965ef3a826af8150ef863e98709b4ffa83767", "html_url": "https://github.com/rust-lang/rust/commit/cb4965ef3a826af8150ef863e98709b4ffa83767"}], "stats": {"total": 64, "additions": 49, "deletions": 15}, "files": [{"sha": "c3aacf6f6b0c4513ba33639a7d96df8aa8afa609", "filename": "src/libstd/env.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/efdf16b72f20ef4d3703ce018864611358d0023e/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdf16b72f20ef4d3703ce018864611358d0023e/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=efdf16b72f20ef4d3703ce018864611358d0023e", "patch": "@@ -562,6 +562,38 @@ pub mod consts {\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n+/// Constants associated with the current target\n+#[cfg(target_os = \"openbsd\")]\n+pub mod consts {\n+    pub use super::arch_consts::ARCH;\n+\n+    pub const FAMILY: &'static str = \"unix\";\n+\n+    /// A string describing the specific operating system in use: in this\n+    /// case, `dragonfly`.\n+    pub const OS: &'static str = \"openbsd\";\n+\n+    /// Specifies the filename prefix used for shared libraries on this\n+    /// platform: in this case, `lib`.\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+\n+    /// Specifies the filename suffix used for shared libraries on this\n+    /// platform: in this case, `.so`.\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+\n+    /// Specifies the file extension used for shared libraries on this\n+    /// platform that goes after the dot: in this case, `so`.\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+\n+    /// Specifies the filename suffix used for executable binaries on this\n+    /// platform: in this case, the empty string.\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+\n+    /// Specifies the file extension, if any, used for executable binaries\n+    /// on this platform: in this case, the empty string.\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n /// Constants associated with the current target\n #[cfg(target_os = \"android\")]\n pub mod consts {"}, {"sha": "bc7a0d821c566d9691bd9228d5403601d26ac2fa", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efdf16b72f20ef4d3703ce018864611358d0023e/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdf16b72f20ef4d3703ce018864611358d0023e/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=efdf16b72f20ef4d3703ce018864611358d0023e", "patch": "@@ -1289,6 +1289,8 @@ pub mod consts {\n }\n \n #[cfg(target_os = \"openbsd\")]\n+#[deprecated(since = \"1.0.0\", reason = \"renamed to env::consts\")]\n+#[unstable(feature = \"os\")]\n pub mod consts {\n     pub use os::arch_consts::ARCH;\n "}, {"sha": "22194145252ee6ac1641a1dc8e789dfedbaaf799", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efdf16b72f20ef4d3703ce018864611358d0023e/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdf16b72f20ef4d3703ce018864611358d0023e/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=efdf16b72f20ef4d3703ce018864611358d0023e", "patch": "@@ -74,6 +74,8 @@ pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 70;\n #[cfg(any(target_os = \"macos\",\n           target_os = \"freebsd\"))]\n pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 71;\n+#[cfg(target_os = \"openbsd\")]\n+pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 101;\n #[cfg(target_os = \"android\")]\n pub const _SC_GETPW_R_SIZE_MAX: libc::c_int = 0x0048;\n \n@@ -91,7 +93,8 @@ pub struct passwd {\n \n #[repr(C)]\n #[cfg(any(target_os = \"macos\",\n-          target_os = \"freebsd\"))]\n+          target_os = \"freebsd\",\n+          target_os = \"openbsd\"))]\n pub struct passwd {\n     pub pw_name: *mut libc::c_char,\n     pub pw_passwd: *mut libc::c_char,"}, {"sha": "b191eda583c9b82d4a57a3ea6da3f35d7d7b9fb0", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/efdf16b72f20ef4d3703ce018864611358d0023e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdf16b72f20ef4d3703ce018864611358d0023e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=efdf16b72f20ef4d3703ce018864611358d0023e", "patch": "@@ -47,13 +47,9 @@ pub fn errno() -> i32 {\n     }\n \n     #[cfg(target_os = \"openbsd\")]\n-    fn errno_location() -> *const c_int {\n-        extern {\n-            fn __errno() -> *const c_int;\n-        }\n-        unsafe {\n-            __errno()\n-        }\n+    unsafe fn errno_location() -> *const c_int {\n+        extern { fn __errno() -> *const c_int; }\n+        __errno()\n     }\n \n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n@@ -197,23 +193,23 @@ pub fn current_exe() -> IoResult<Path> {\n }\n \n #[cfg(target_os = \"openbsd\")]\n-pub fn load_self() -> Option<Vec<u8>> {\n+pub fn current_exe() -> IoResult<Path> {\n     use sync::{StaticMutex, MUTEX_INIT};\n \n     static LOCK: StaticMutex = MUTEX_INIT;\n \n     extern {\n-        fn rust_load_self() -> *const c_char;\n+        fn rust_current_exe() -> *const c_char;\n     }\n \n     let _guard = LOCK.lock();\n \n     unsafe {\n-        let v = rust_load_self();\n+        let v = rust_current_exe();\n         if v.is_null() {\n-            None\n+            Err(IoError::last_error())\n         } else {\n-            Some(ffi::c_str_to_bytes(&v).to_vec())\n+            Ok(Path::new(ffi::c_str_to_bytes(&v).to_vec()))\n         }\n     }\n }\n@@ -333,7 +329,8 @@ pub fn args() -> Args {\n #[cfg(any(target_os = \"linux\",\n           target_os = \"android\",\n           target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+          target_os = \"dragonfly\",\n+          target_os = \"openbsd\"))]\n pub fn args() -> Args {\n     use rt;\n     let bytes = rt::args::clone().unwrap_or(Vec::new());"}, {"sha": "b756602ead4f43286408ad769742f79e4fc32934", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efdf16b72f20ef4d3703ce018864611358d0023e/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/efdf16b72f20ef4d3703ce018864611358d0023e/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=efdf16b72f20ef4d3703ce018864611358d0023e", "patch": "@@ -205,7 +205,7 @@ int *__dfly_error(void) { return __error(); }\n #include <sys/sysctl.h>\n #include <limits.h>\n \n-const char * rust_load_self() {\n+const char * rust_current_exe() {\n     static char *self = NULL;\n \n     if (self == NULL) {"}]}