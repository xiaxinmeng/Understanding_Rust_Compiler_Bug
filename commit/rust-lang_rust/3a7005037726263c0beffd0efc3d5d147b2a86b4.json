{"sha": "3a7005037726263c0beffd0efc3d5d147b2a86b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNzAwNTAzNzcyNjI2M2MwYmVmZmQwZWZjM2Q1ZDE0N2IyYTg2YjQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-06T09:16:28Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-08T11:40:23Z"}, "message": "Address review comments for #53031 and fix some merge fallout.", "tree": {"sha": "04a46edf3164675a2bcaa21f1e11a5ff2ef8c3d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04a46edf3164675a2bcaa21f1e11a5ff2ef8c3d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a7005037726263c0beffd0efc3d5d147b2a86b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7005037726263c0beffd0efc3d5d147b2a86b4", "html_url": "https://github.com/rust-lang/rust/commit/3a7005037726263c0beffd0efc3d5d147b2a86b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a7005037726263c0beffd0efc3d5d147b2a86b4/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b27a161939620626ca5fdcb9f4dd486a6ed1e827", "url": "https://api.github.com/repos/rust-lang/rust/commits/b27a161939620626ca5fdcb9f4dd486a6ed1e827", "html_url": "https://github.com/rust-lang/rust/commit/b27a161939620626ca5fdcb9f4dd486a6ed1e827"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "9a3ce50fcbdce90afe83140e8a1d03e178b19b6a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=3a7005037726263c0beffd0efc3d5d147b2a86b4", "patch": "@@ -1202,6 +1202,13 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         sess.err(\"can't perform LTO when compiling incrementally\");\n     }\n \n+    // Since we don't know if code in an rlib will be linked to statically or\n+    // dynamically downstream, rustc generates `__imp_` symbols that help the\n+    // MSVC linker deal with this lack of knowledge (#27438). Unfortunately,\n+    // these manually generated symbols confuse LLD when it tries to merge\n+    // bitcode during ThinLTO. Therefore we disallow dynamic linking on MSVC\n+    // when compiling for LLD ThinLTO. This way we can validly just not generate\n+    // the `dllimport` attributes and `__imp_` symbols in that case.\n     if sess.opts.debugging_opts.cross_lang_lto.enabled() &&\n        sess.opts.cg.prefer_dynamic &&\n        sess.target.target.options.is_like_msvc {"}, {"sha": "50d41d76986fbc4c6c4e2918b37d7591fdebc469", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=3a7005037726263c0beffd0efc3d5d147b2a86b4", "patch": "@@ -563,7 +563,7 @@ fn link_staticlib(sess: &Session,\n         });\n         ab.add_rlib(path,\n                     &name.as_str(),\n-                    is_full_lto_enabled(sess) &&\n+                    are_upstream_rust_objects_already_included(sess) &&\n                         !ignored_for_lto(sess, &codegen_results.crate_info, cnum),\n                     skip_object_files).unwrap();\n \n@@ -1446,7 +1446,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n             lib.kind == NativeLibraryKind::NativeStatic && !relevant_lib(sess, lib)\n         });\n \n-        if (!is_full_lto_enabled(sess) ||\n+        if (!are_upstream_rust_objects_already_included(sess) ||\n             ignored_for_lto(sess, &codegen_results.crate_info, cnum)) &&\n            crate_type != config::CrateType::Dylib &&\n            !skip_native {\n@@ -1500,7 +1500,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n                 // file, then we don't need the object file as it's part of the\n                 // LTO module. Note that `#![no_builtins]` is excluded from LTO,\n                 // though, so we let that object file slide.\n-                let skip_because_lto = is_full_lto_enabled(sess) &&\n+                let skip_because_lto = are_upstream_rust_objects_already_included(sess) &&\n                     is_rust_object &&\n                     (sess.target.target.options.no_builtins ||\n                      !codegen_results.crate_info.is_no_builtins.contains(&cnum));\n@@ -1537,7 +1537,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n     fn add_dynamic_crate(cmd: &mut dyn Linker, sess: &Session, cratepath: &Path) {\n         // If we're performing LTO, then it should have been previously required\n         // that all upstream rust dependencies were available in an rlib format.\n-        assert!(!is_full_lto_enabled(sess));\n+        assert!(!are_upstream_rust_objects_already_included(sess));\n \n         // Just need to tell the linker about where the library lives and\n         // what its name is\n@@ -1623,7 +1623,7 @@ fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n     }\n }\n \n-fn is_full_lto_enabled(sess: &Session) -> bool {\n+fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n     match sess.lto() {\n         Lto::Yes |\n         Lto::Fat => true,"}, {"sha": "640e1c1f3d4f112cdb18158e3b9e73a4d5ecefab", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=3a7005037726263c0beffd0efc3d5d147b2a86b4", "patch": "@@ -2385,7 +2385,7 @@ fn msvc_imps_needed(tcx: TyCtxt) -> bool {\n               tcx.sess.opts.cg.prefer_dynamic));\n \n     tcx.sess.target.target.options.is_like_msvc &&\n-        tcx.sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateTypeRlib) &&\n+        tcx.sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateType::Rlib) &&\n     // ThinLTO can't handle this workaround in all cases, so we don't\n     // emit the `__imp_` symbols. Instead we make them unnecessary by disallowing\n     // dynamic linking when cross-language LTO is enabled."}, {"sha": "0d5d02206a6326ba35d2d158fb4eec967f26f1c5", "filename": "src/test/codegen/no-dllimport-w-cross-lang-lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Ftest%2Fcodegen%2Fno-dllimport-w-cross-lang-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Ftest%2Fcodegen%2Fno-dllimport-w-cross-lang-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-dllimport-w-cross-lang-lto.rs?ref=3a7005037726263c0beffd0efc3d5d147b2a86b4", "patch": "@@ -13,7 +13,7 @@\n \n // no-prefer-dynamic\n // only-msvc\n-// compile-flags: -C no-prepopulate-passes -Z cross-lang-lto\n+// compile-flags: -Z cross-lang-lto\n \n #![crate_type = \"rlib\"]\n "}, {"sha": "1a6ab22e5685d8d5d94ed6a4523d94023cd7f76e", "filename": "src/test/codegen/target-cpu-on-functions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs?ref=3a7005037726263c0beffd0efc3d5d147b2a86b4", "patch": "@@ -11,8 +11,10 @@\n // This test makes sure that functions get annotated with the proper\n // \"target-cpu\" attribute in LLVM.\n \n+// no-prefer-dynamic\n+// ignore-tidy-linelength\n // only-x86_64\n-// compile-flags: -C no-prepopulate-passes -C panic=abort\n+// compile-flags: -C no-prepopulate-passes -C panic=abort -Z cross-lang-lto -Cpasses=name-anon-globals\n \n #![crate_type = \"staticlib\"]\n "}, {"sha": "0a6f226a027f3cc0ef2804db4656287310e2154e", "filename": "src/test/run-make-fulldeps/cross-lang-lto-upstream-rlibs/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3a7005037726263c0beffd0efc3d5d147b2a86b4/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile?ref=3a7005037726263c0beffd0efc3d5d147b2a86b4", "patch": "@@ -11,7 +11,7 @@ all: staticlib.rs upstream.rs\n \t$(RUSTC) staticlib.rs -Z cross-lang-lto -Ccodegen-units=1 -L. -o $(TMPDIR)/staticlib.a\n \t(cd $(TMPDIR); llvm-ar x ./staticlib.a)\n \t# Make sure the upstream object file was included\n-\tls upstream.*.rcgu.o\n+\tls $(TMPDIR)/upstream.*.rcgu.o\n \n \t# Cleanup\n \trm $(TMPDIR)/*\n@@ -20,4 +20,4 @@ all: staticlib.rs upstream.rs\n \t$(RUSTC) upstream.rs -Z cross-lang-lto -Ccodegen-units=1 -Clto=thin\n \t$(RUSTC) staticlib.rs -Z cross-lang-lto -Ccodegen-units=1 -Clto=thin -L. -o $(TMPDIR)/staticlib.a\n \t(cd $(TMPDIR); llvm-ar x ./staticlib.a)\n-\tls upstream.*.rcgu.o\n+\tls $(TMPDIR)/upstream.*.rcgu.o"}]}