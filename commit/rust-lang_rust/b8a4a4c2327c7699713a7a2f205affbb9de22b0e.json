{"sha": "b8a4a4c2327c7699713a7a2f205affbb9de22b0e", "node_id": "C_kwDOAAsO6NoAKGI4YTRhNGMyMzI3Yzc2OTk3MTNhN2EyZjIwNWFmZmJiOWRlMjJiMGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-29T09:41:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-29T09:41:37Z"}, "message": "Rollup merge of #91336 - cjgillot:root_parent, r=matthewjasper\n\nRemove unused root_parent.", "tree": {"sha": "d57c55a0ad3a09f03e32acd8d5269ad6e569c84e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d57c55a0ad3a09f03e32acd8d5269ad6e569c84e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8a4a4c2327c7699713a7a2f205affbb9de22b0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhpKBRCRBK7hj4Ov3rIwAA1ekIAJxoFnTheVQLgUxwcBuVhUbE\nw+4MoP9DU1/WOxVWTM/cR1YFHuar2rgRlH9FF5lUXYsGmLFXhOOiY5srnmHOl4P2\nzbUuLu90Kp74axXVv49+dD2o+hl/X0OSVz9I06RiTVMbraY34tMYlvd1jpAgS912\notzZ/L5r4cdwNvNdeCNbd2SgFgQuwqMOYemqcrVgYuKkpuFN7+ngop0qT5wV6FsS\nn+zr243jT9mj4HDAlva0o/u8c9ZXIkwwPpojfFoWst2RP3KIn4QGlX9co6Aik8c7\nPXiaUmXrb1szjY64+uH3Qu0iroqDztaZv1+zwbky20aeWE/MZnNd/bcml/JQk7k=\n=Gccm\n-----END PGP SIGNATURE-----\n", "payload": "tree d57c55a0ad3a09f03e32acd8d5269ad6e569c84e\nparent 7df49eff100363a8cd1da17c1758c3b91a8d47fc\nparent 06b2e659d3b7784b041a332920ae8630eaf954fd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638178897 +0100\ncommitter GitHub <noreply@github.com> 1638178897 +0100\n\nRollup merge of #91336 - cjgillot:root_parent, r=matthewjasper\n\nRemove unused root_parent.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a4a4c2327c7699713a7a2f205affbb9de22b0e", "html_url": "https://github.com/rust-lang/rust/commit/b8a4a4c2327c7699713a7a2f205affbb9de22b0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8a4a4c2327c7699713a7a2f205affbb9de22b0e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7df49eff100363a8cd1da17c1758c3b91a8d47fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7df49eff100363a8cd1da17c1758c3b91a8d47fc", "html_url": "https://github.com/rust-lang/rust/commit/7df49eff100363a8cd1da17c1758c3b91a8d47fc"}, {"sha": "06b2e659d3b7784b041a332920ae8630eaf954fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b2e659d3b7784b041a332920ae8630eaf954fd", "html_url": "https://github.com/rust-lang/rust/commit/06b2e659d3b7784b041a332920ae8630eaf954fd"}], "stats": {"total": 30, "additions": 5, "deletions": 25}, "files": [{"sha": "39ca41c92ff7569f749f4371fef9696591020bb3", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8a4a4c2327c7699713a7a2f205affbb9de22b0e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a4a4c2327c7699713a7a2f205affbb9de22b0e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=b8a4a4c2327c7699713a7a2f205affbb9de22b0e", "patch": "@@ -7,13 +7,12 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/borrow_check.html\n \n use crate::ty::TyCtxt;\n-use rustc_hir as hir;\n-use rustc_hir::Node;\n-use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir as hir;\n+use rustc_hir::Node;\n use rustc_macros::HashStable;\n+use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_span::{Span, DUMMY_SP};\n \n use std::fmt;\n@@ -210,11 +209,6 @@ pub struct ScopeTree {\n     /// If not empty, this body is the root of this region hierarchy.\n     pub root_body: Option<hir::HirId>,\n \n-    /// The parent of the root body owner, if the latter is an\n-    /// an associated const or method, as impls/traits can also\n-    /// have lifetime parameters free in this body.\n-    pub root_parent: Option<hir::HirId>,\n-\n     /// Maps from a scope ID to the enclosing scope id;\n     /// this is usually corresponding to the lexical nesting, though\n     /// in the case of closures the parent scope is the innermost\n@@ -445,7 +439,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ScopeTree {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let ScopeTree {\n             root_body,\n-            root_parent,\n             ref body_expr_count,\n             ref parent_map,\n             ref var_map,\n@@ -455,8 +448,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ScopeTree {\n         } = *self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            root_body.hash_stable(hcx, hasher);\n-            root_parent.hash_stable(hcx, hasher);\n+            root_body.hash_stable(hcx, hasher)\n         });\n \n         body_expr_count.hash_stable(hcx, hasher);"}, {"sha": "ae423070392e1804d9a0baf249a976c5d20b4c58", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8a4a4c2327c7699713a7a2f205affbb9de22b0e/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a4a4c2327c7699713a7a2f205affbb9de22b0e/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=b8a4a4c2327c7699713a7a2f205affbb9de22b0e", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{Arm, Block, Expr, Local, Node, Pat, PatKind, Stmt};\n+use rustc_hir::{Arm, Block, Expr, Local, Pat, PatKind, Stmt};\n use rustc_index::vec::Idx;\n use rustc_middle::middle::region::*;\n use rustc_middle::ty::query::Providers;\n@@ -837,19 +837,7 @@ fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n \n         let body = tcx.hir().body(body_id);\n         visitor.scope_tree.root_body = Some(body.value.hir_id);\n-\n-        // If the item is an associated const or a method,\n-        // record its impl/trait parent, as it can also have\n-        // lifetime parameters free in this body.\n-        match tcx.hir().get(id) {\n-            Node::ImplItem(_) | Node::TraitItem(_) => {\n-                visitor.scope_tree.root_parent = Some(tcx.hir().get_parent_item(id));\n-            }\n-            _ => {}\n-        }\n-\n         visitor.visit_body(body);\n-\n         visitor.scope_tree\n     } else {\n         ScopeTree::default()"}]}