{"sha": "b48f4e03b3889301284fbb6c8605cfe697d91e25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OGY0ZTAzYjM4ODkzMDEyODRmYmI2Yzg2MDVjZmU2OTdkOTFlMjU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-04T04:52:35Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-04T05:32:13Z"}, "message": "Add tests for issues which can be closed on master", "tree": {"sha": "5136043f6739219b9cdb34b929b52897a7566c79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5136043f6739219b9cdb34b929b52897a7566c79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48f4e03b3889301284fbb6c8605cfe697d91e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48f4e03b3889301284fbb6c8605cfe697d91e25", "html_url": "https://github.com/rust-lang/rust/commit/b48f4e03b3889301284fbb6c8605cfe697d91e25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48f4e03b3889301284fbb6c8605cfe697d91e25/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7", "html_url": "https://github.com/rust-lang/rust/commit/8579c1db0e6fef523d5a86d9175fa5f1794fa5a7"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "b8d998f2e5975ecc0ae2fb3f0950e2410713432a", "filename": "tests/source/closure.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Fsource%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Fsource%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fclosure.rs?ref=b48f4e03b3889301284fbb6c8605cfe697d91e25", "patch": "@@ -104,3 +104,19 @@ fn issue1466() {\n         ctx.create_device_local_buffer(buffer)\n     });\n }\n+\n+fn issue470() {\n+    {{{\n+        let explicit_arg_decls =\n+            explicit_arguments.into_iter()\n+            .enumerate()\n+            .map(|(index, (ty, pattern))| {\n+                let lvalue = Lvalue::Arg(index as u32);\n+                block = this.pattern(block,\n+                                     argument_extent,\n+                                     hair::PatternRef::Hair(pattern),\n+                                     &lvalue);\n+                ArgDecl { ty: ty }\n+            });\n+    }}}\n+}"}, {"sha": "cf40e581b6eba872a06fee8d3a7cc2f52efe6dc6", "filename": "tests/source/comment.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Fsource%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Fsource%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcomment.rs?ref=b48f4e03b3889301284fbb6c8605cfe697d91e25", "patch": "@@ -33,6 +33,12 @@ fn test() {\n \n     funk(); //dontchangeme\n             // or me\n+\n+    // #1388\n+    const EXCEPTION_PATHS: &'static [&'static str] =\n+        &[// std crates\n+          \"src/libstd/sys/\", // Platform-specific code for std lives here.\n+          \"src/bootstrap\"];\n }\n \n   /// test123"}, {"sha": "1baa1985a7ea0d248d98935036602b62a2569f18", "filename": "tests/source/issue-1350.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Fsource%2Fissue-1350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Fsource%2Fissue-1350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1350.rs?ref=b48f4e03b3889301284fbb6c8605cfe697d91e25", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-max_width: 120\n+// rustfmt-comment_width: 110\n+\n+impl Struct {\n+    fn fun() {\n+        let result = match <R::RequestResult as serde::Deserialize>::deserialize(&json) {\n+            Ok(v) => v,\n+            Err(e) => {\n+                match <R::ErrorResult as serde::Deserialize>::deserialize(&json) {\n+                    Ok(v) => return Err(Error::with_json(v)),\n+                    Err(e2) => return Err(Error::with_json(e)),\n+                }\n+            }\n+        };\n+    }\n+}"}, {"sha": "5dd9087682cbe6ae79e74059012386f6499290f1", "filename": "tests/source/structs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=b48f4e03b3889301284fbb6c8605cfe697d91e25", "patch": "@@ -180,3 +180,11 @@ struct Deep {\n }\n \n struct Foo<C=()>(String);\n+\n+// #1364\n+fn foo() {\n+    convex_shape.set_point(0, &Vector2f { x: 400.0, y: 100.0 });\n+    convex_shape.set_point(1, &Vector2f { x: 500.0, y: 70.0 });\n+    convex_shape.set_point(2, &Vector2f { x: 450.0, y: 100.0 });\n+    convex_shape.set_point(3, &Vector2f { x: 580.0, y: 150.0 });\n+}"}, {"sha": "ed83ee9e101c99b89000d0bf5ea6efbe4c59a6b5", "filename": "tests/source/try-conversion.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Fsource%2Ftry-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Fsource%2Ftry-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftry-conversion.rs?ref=b48f4e03b3889301284fbb6c8605cfe697d91e25", "patch": "@@ -9,3 +9,10 @@ fn main() {\n fn test() {\n     a?\n }\n+\n+fn issue1291() {\n+    try!(fs::create_dir_all(&gitfiledir).chain_err(|| {\n+        format!(\"failed to create the {} submodule directory for the workarea\",\n+                name)\n+    }));\n+}"}, {"sha": "c94d98b3dda5d26d86d4590fce3541e7ab34cdc2", "filename": "tests/target/closure.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=b48f4e03b3889301284fbb6c8605cfe697d91e25", "patch": "@@ -119,3 +119,23 @@ fn issue1466() {\n         ctx.create_device_local_buffer(buffer)\n     });\n }\n+\n+fn issue470() {\n+    {\n+        {\n+            {\n+                let explicit_arg_decls = explicit_arguments\n+                    .into_iter()\n+                    .enumerate()\n+                    .map(|(index, (ty, pattern))| {\n+                             let lvalue = Lvalue::Arg(index as u32);\n+                             block = this.pattern(block,\n+                                                  argument_extent,\n+                                                  hair::PatternRef::Hair(pattern),\n+                                                  &lvalue);\n+                             ArgDecl { ty: ty }\n+                         });\n+            }\n+        }\n+    }\n+}"}, {"sha": "a2f8d6ba0b4e34096822bc9c7809a6a9484fc0c2", "filename": "tests/target/comment.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Ftarget%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Ftarget%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment.rs?ref=b48f4e03b3889301284fbb6c8605cfe697d91e25", "patch": "@@ -34,6 +34,12 @@ fn test() {\n \n     funk(); // dontchangeme\n     // or me\n+\n+    // #1388\n+    const EXCEPTION_PATHS: &'static [&'static str] =\n+        &[// std crates\n+          \"src/libstd/sys/\", // Platform-specific code for std lives here.\n+          \"src/bootstrap\"];\n }\n \n /// test123"}, {"sha": "1baa1985a7ea0d248d98935036602b62a2569f18", "filename": "tests/target/issue-1350.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Ftarget%2Fissue-1350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Ftarget%2Fissue-1350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1350.rs?ref=b48f4e03b3889301284fbb6c8605cfe697d91e25", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-max_width: 120\n+// rustfmt-comment_width: 110\n+\n+impl Struct {\n+    fn fun() {\n+        let result = match <R::RequestResult as serde::Deserialize>::deserialize(&json) {\n+            Ok(v) => v,\n+            Err(e) => {\n+                match <R::ErrorResult as serde::Deserialize>::deserialize(&json) {\n+                    Ok(v) => return Err(Error::with_json(v)),\n+                    Err(e2) => return Err(Error::with_json(e)),\n+                }\n+            }\n+        };\n+    }\n+}"}, {"sha": "a89df16376fc891986e9106b5b2a97617b3d32ef", "filename": "tests/target/structs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=b48f4e03b3889301284fbb6c8605cfe697d91e25", "patch": "@@ -184,3 +184,11 @@ struct Deep {\n }\n \n struct Foo<C = ()>(String);\n+\n+// #1364\n+fn foo() {\n+    convex_shape.set_point(0, &Vector2f { x: 400.0, y: 100.0 });\n+    convex_shape.set_point(1, &Vector2f { x: 500.0, y: 70.0 });\n+    convex_shape.set_point(2, &Vector2f { x: 450.0, y: 100.0 });\n+    convex_shape.set_point(3, &Vector2f { x: 580.0, y: 150.0 });\n+}"}, {"sha": "7198606d75b3b5aa1355ee131e59cde54c027c20", "filename": "tests/target/try-conversion.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Ftarget%2Ftry-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48f4e03b3889301284fbb6c8605cfe697d91e25/tests%2Ftarget%2Ftry-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftry-conversion.rs?ref=b48f4e03b3889301284fbb6c8605cfe697d91e25", "patch": "@@ -16,3 +16,11 @@ fn main() {\n fn test() {\n     a?\n }\n+\n+fn issue1291() {\n+    fs::create_dir_all(&gitfiledir)\n+        .chain_err(|| {\n+                       format!(\"failed to create the {} submodule directory for the workarea\",\n+                               name)\n+                   })?;\n+}"}]}