{"sha": "7f01893900cf01b48adcaa0146e139cc8083b399", "node_id": "C_kwDOAAsO6NoAKDdmMDE4OTM5MDBjZjAxYjQ4YWRjYWEwMTQ2ZTEzOWNjODA4M2IzOTk", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-05-16T11:37:46Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-05-16T16:50:26Z"}, "message": "Fix dependency tracking for debugger visualizers", "tree": {"sha": "aeeef3f38811c7cd3ec227c630cf0718e9ee0b3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeeef3f38811c7cd3ec227c630cf0718e9ee0b3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f01893900cf01b48adcaa0146e139cc8083b399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f01893900cf01b48adcaa0146e139cc8083b399", "html_url": "https://github.com/rust-lang/rust/commit/7f01893900cf01b48adcaa0146e139cc8083b399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f01893900cf01b48adcaa0146e139cc8083b399/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b271624623c3bce04ac6faf9b9fae4c89901b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b271624623c3bce04ac6faf9b9fae4c89901b0", "html_url": "https://github.com/rust-lang/rust/commit/72b271624623c3bce04ac6faf9b9fae4c89901b0"}], "stats": {"total": 250, "additions": 133, "deletions": 117}, "files": [{"sha": "66bdc9d2a3ed36ee77ae972a2cacb4d298462f9d", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -486,6 +486,11 @@ fn write_out_deps(tcx: TyCtxt<'_>, outputs: &OutputFilenames, out_filenames: &[P\n             files.push(normalize_path(profile_sample.as_path().to_path_buf()));\n         }\n \n+        // Debugger visualizer files\n+        for debugger_visualizer in tcx.debugger_visualizers(LOCAL_CRATE) {\n+            files.push(normalize_path(debugger_visualizer.path.clone().unwrap()));\n+        }\n+\n         if sess.binary_dep_depinfo() {\n             if let Some(ref backend) = sess.opts.unstable_opts.codegen_backend {\n                 if backend.contains('.') {\n@@ -567,6 +572,12 @@ fn resolver_for_lowering<'tcx>(\n     // Make sure we don't mutate the cstore from here on.\n     tcx.untracked().cstore.leak();\n \n+    {\n+        let debugger_visualizers = rustc_passes::debugger_visualizer::collect(tcx.sess, &krate);\n+        let feed = tcx.feed_local_crate();\n+        feed.debugger_visualizers(debugger_visualizers);\n+    }\n+\n     let ty::ResolverOutputs {\n         global_ctxt: untracked_resolutions,\n         ast_lowering: untracked_resolver_for_lowering,"}, {"sha": "7eab07031653bdeeb6218f42c89ea8914300ab9a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -1852,7 +1852,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_debugger_visualizers(&mut self) -> LazyArray<DebuggerVisualizerFile> {\n         empty_proc_macro!(self);\n-        self.lazy_array(self.tcx.debugger_visualizers(LOCAL_CRATE).iter())\n+        self.lazy_array(\n+            self.tcx\n+                .debugger_visualizers(LOCAL_CRATE)\n+                .iter()\n+                // Erase the path since it may contain privacy sensitive data\n+                // that we don't want to end up in crate metadata.\n+                // The path is only needed for the local crate because of\n+                // `--emit dep-info`.\n+                .map(DebuggerVisualizerFile::path_erased),\n+        )\n     }\n \n     fn encode_crate_deps(&mut self) -> LazyArray<CrateDep> {"}, {"sha": "effa38dc2dcbe3778915ebaf6edcf3170a7e9cab", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -15,7 +15,7 @@ use rustc_index::Idx;\n use rustc_middle::hir::nested_filter;\n use rustc_span::def_id::StableCrateId;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{DebuggerVisualizerFile, Span};\n use rustc_target::spec::abi::Abi;\n \n #[inline]\n@@ -1165,11 +1165,21 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, _: LocalCrate) -> Svh {\n \n     source_file_names.sort_unstable();\n \n+    let debugger_visualizers: Vec<_> = tcx\n+        .debugger_visualizers(LOCAL_CRATE)\n+        .iter()\n+        // We ignore the path to the visualizer file since it's not going to be\n+        // encoded in crate metadata and we already hash the full contents of\n+        // the file.\n+        .map(DebuggerVisualizerFile::path_erased)\n+        .collect();\n+\n     let crate_hash: Fingerprint = tcx.with_stable_hashing_context(|mut hcx| {\n         let mut stable_hasher = StableHasher::new();\n         hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);\n         upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);\n         source_file_names.hash_stable(&mut hcx, &mut stable_hasher);\n+        debugger_visualizers.hash_stable(&mut hcx, &mut stable_hasher);\n         if tcx.sess.opts.incremental_relative_spans() {\n             let definitions = tcx.definitions_untracked();\n             let mut owner_spans: Vec<_> = krate"}, {"sha": "3bf62db31355f8678160f939ecf03fda1ef59581", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -1795,6 +1795,7 @@ rustc_queries! {\n         arena_cache\n         desc { \"looking up the debugger visualizers for this crate\" }\n         separate_provide_extern\n+        feedable\n     }\n     query postorder_cnums(_: ()) -> &'tcx [CrateNum] {\n         eval_always"}, {"sha": "a148ae78630126bee0d1ce94d3cb5cd03d75f5f2", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 48, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -8,7 +8,6 @@ use crate::{errors, fluent_generated as fluent};\n use rustc_ast::{ast, AttrStyle, Attribute, LitKind, MetaItemKind, MetaItemLit, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, IntoDiagnosticArg, MultiSpan};\n-use rustc_expand::base::resolve_path;\n use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -1916,6 +1915,7 @@ impl CheckAttrVisitor<'_> {\n \n     /// Checks if the items on the `#[debugger_visualizer]` attribute are valid.\n     fn check_debugger_visualizer(&self, attr: &Attribute, target: Target) -> bool {\n+        // FIXME: mention that other checks are done in the query provider\n         match target {\n             Target::Mod => {}\n             _ => {\n@@ -1924,53 +1924,7 @@ impl CheckAttrVisitor<'_> {\n             }\n         }\n \n-        let Some(hints) = attr.meta_item_list() else {\n-            self.tcx.sess.emit_err(errors::DebugVisualizerInvalid { span: attr.span });\n-            return false;\n-        };\n-\n-        let hint = match hints.len() {\n-            1 => &hints[0],\n-            _ => {\n-                self.tcx.sess.emit_err(errors::DebugVisualizerInvalid { span: attr.span });\n-                return false;\n-            }\n-        };\n-\n-        let Some(meta_item) = hint.meta_item() else {\n-            self.tcx.sess.emit_err(errors::DebugVisualizerInvalid { span: attr.span });\n-            return false;\n-        };\n-\n-        let visualizer_path = match (meta_item.name_or_empty(), meta_item.value_str()) {\n-            (sym::natvis_file, Some(value)) => value,\n-            (sym::gdb_script_file, Some(value)) => value,\n-            (_, _) => {\n-                self.tcx.sess.emit_err(errors::DebugVisualizerInvalid { span: meta_item.span });\n-                return false;\n-            }\n-        };\n-\n-        let file =\n-            match resolve_path(&self.tcx.sess.parse_sess, visualizer_path.as_str(), attr.span) {\n-                Ok(file) => file,\n-                Err(mut err) => {\n-                    err.emit();\n-                    return false;\n-                }\n-            };\n-\n-        match std::fs::File::open(&file) {\n-            Ok(_) => true,\n-            Err(error) => {\n-                self.tcx.sess.emit_err(errors::DebugVisualizerUnreadable {\n-                    span: meta_item.span,\n-                    file: &file,\n-                    error,\n-                });\n-                false\n-            }\n-        }\n+        true\n     }\n \n     /// Outputs an error for `#[allow_internal_unstable]` which can only be applied to macros."}, {"sha": "d75258c0511ddd4d58627fc31a924c80cfa7cfe1", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "modified", "additions": 58, "deletions": 60, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -1,60 +1,64 @@\n //! Detecting usage of the `#[debugger_visualizer]` attribute.\n \n-use hir::CRATE_HIR_ID;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_ast::Attribute;\n use rustc_data_structures::sync::Lrc;\n use rustc_expand::base::resolve_path;\n-use rustc_hir as hir;\n-use rustc_hir::HirId;\n-use rustc_middle::query::{LocalCrate, Providers};\n-use rustc_middle::ty::TyCtxt;\n+use rustc_session::Session;\n use rustc_span::{sym, DebuggerVisualizerFile, DebuggerVisualizerType};\n \n-use crate::errors::DebugVisualizerUnreadable;\n+use crate::errors::{DebugVisualizerInvalid, DebugVisualizerUnreadable};\n \n-fn check_for_debugger_visualizer(\n-    tcx: TyCtxt<'_>,\n-    hir_id: HirId,\n-    debugger_visualizers: &mut FxHashSet<DebuggerVisualizerFile>,\n-) {\n-    let attrs = tcx.hir().attrs(hir_id);\n-    for attr in attrs {\n+impl DebuggerVisualizerCollector<'_> {\n+    fn check_for_debugger_visualizer(&mut self, attr: &Attribute) {\n         if attr.has_name(sym::debugger_visualizer) {\n-            let Some(list) = attr.meta_item_list() else {\n-                continue\n+            let Some(hints) = attr.meta_item_list() else {\n+            self.sess.emit_err(DebugVisualizerInvalid { span: attr.span });\n+                return;\n             };\n \n-            let meta_item = match list.len() {\n-                1 => match list[0].meta_item() {\n-                    Some(meta_item) => meta_item,\n-                    _ => continue,\n-                },\n-                _ => continue,\n+            let hint = if hints.len() == 1 {\n+                &hints[0]\n+            } else {\n+                self.sess.emit_err(DebugVisualizerInvalid { span: attr.span });\n+                return;\n             };\n \n-            let visualizer_type = match meta_item.name_or_empty() {\n-                sym::natvis_file => DebuggerVisualizerType::Natvis,\n-                sym::gdb_script_file => DebuggerVisualizerType::GdbPrettyPrinter,\n-                _ => continue,\n+            let Some(meta_item) = hint.meta_item() else {\n+                self.sess.emit_err(DebugVisualizerInvalid { span: attr.span });\n+                return;\n             };\n \n-            let file = match meta_item.value_str() {\n-                Some(value) => {\n-                    match resolve_path(&tcx.sess.parse_sess, value.as_str(), attr.span) {\n-                        Ok(file) => file,\n-                        _ => continue,\n+            let (visualizer_type, visualizer_path) =\n+                match (meta_item.name_or_empty(), meta_item.value_str()) {\n+                    (sym::natvis_file, Some(value)) => (DebuggerVisualizerType::Natvis, value),\n+                    (sym::gdb_script_file, Some(value)) => {\n+                        (DebuggerVisualizerType::GdbPrettyPrinter, value)\n                     }\n-                }\n-                None => continue,\n-            };\n+                    (_, _) => {\n+                        self.sess.emit_err(DebugVisualizerInvalid { span: meta_item.span });\n+                        return;\n+                    }\n+                };\n+\n+            let file =\n+                match resolve_path(&self.sess.parse_sess, visualizer_path.as_str(), attr.span) {\n+                    Ok(file) => file,\n+                    Err(mut err) => {\n+                        err.emit();\n+                        return;\n+                    }\n+                };\n \n             match std::fs::read(&file) {\n                 Ok(contents) => {\n-                    debugger_visualizers\n-                        .insert(DebuggerVisualizerFile::new(Lrc::from(contents), visualizer_type));\n+                    self.visualizers.push(DebuggerVisualizerFile::new(\n+                        Lrc::from(contents),\n+                        visualizer_type,\n+                        file,\n+                    ));\n                 }\n                 Err(error) => {\n-                    tcx.sess.emit_err(DebugVisualizerUnreadable {\n+                    self.sess.emit_err(DebugVisualizerUnreadable {\n                         span: meta_item.span,\n                         file: &file,\n                         error,\n@@ -65,31 +69,25 @@ fn check_for_debugger_visualizer(\n     }\n }\n \n-/// Traverses and collects the debugger visualizers for a specific crate.\n-fn debugger_visualizers(tcx: TyCtxt<'_>, _: LocalCrate) -> Vec<DebuggerVisualizerFile> {\n-    // Initialize the collector.\n-    let mut debugger_visualizers = FxHashSet::default();\n-\n-    // Collect debugger visualizers in this crate.\n-    tcx.hir().for_each_module(|id| {\n-        check_for_debugger_visualizer(\n-            tcx,\n-            tcx.hir().local_def_id_to_hir_id(id),\n-            &mut debugger_visualizers,\n-        )\n-    });\n+struct DebuggerVisualizerCollector<'a> {\n+    sess: &'a Session,\n+    visualizers: Vec<DebuggerVisualizerFile>,\n+}\n \n-    // Collect debugger visualizers on the crate attributes.\n-    check_for_debugger_visualizer(tcx, CRATE_HIR_ID, &mut debugger_visualizers);\n+impl<'ast> rustc_ast::visit::Visitor<'ast> for DebuggerVisualizerCollector<'_> {\n+    fn visit_attribute(&mut self, attr: &'ast Attribute) {\n+        self.check_for_debugger_visualizer(attr);\n+        rustc_ast::visit::walk_attribute(self, attr);\n+    }\n+}\n \n-    // Extract out the found debugger_visualizer items.\n-    let mut visualizers = debugger_visualizers.into_iter().collect::<Vec<_>>();\n+/// Traverses and collects the debugger visualizers for a specific crate.\n+pub fn collect(sess: &Session, krate: &rustc_ast::ast::Crate) -> Vec<DebuggerVisualizerFile> {\n+    // Initialize the collector.\n+    let mut visitor = DebuggerVisualizerCollector { sess, visualizers: Vec::new() };\n+    rustc_ast::visit::Visitor::visit_crate(&mut visitor, krate);\n \n     // Sort the visualizers so we always get a deterministic query result.\n-    visualizers.sort();\n-    visualizers\n-}\n-\n-pub fn provide(providers: &mut Providers) {\n-    providers.debugger_visualizers = debugger_visualizers;\n+    visitor.visualizers.sort_unstable();\n+    visitor.visualizers\n }"}, {"sha": "5b1ed7f3fa4e9483e0c9990d492e2c50c02e6a7a", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::query::Providers;\n mod check_attr;\n mod check_const;\n pub mod dead;\n-mod debugger_visualizer;\n+pub mod debugger_visualizer;\n mod diagnostic_items;\n pub mod entry;\n mod errors;\n@@ -50,7 +50,6 @@ pub fn provide(providers: &mut Providers) {\n     check_attr::provide(providers);\n     check_const::provide(providers);\n     dead::provide(providers);\n-    debugger_visualizer::provide(providers);\n     diagnostic_items::provide(providers);\n     entry::provide(providers);\n     lang_items::provide(providers);"}, {"sha": "9ded311d15d0810a9bd1a5f6a7444283b213902d", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -1272,11 +1272,21 @@ pub struct DebuggerVisualizerFile {\n     pub src: Lrc<[u8]>,\n     /// Indicates which visualizer type this targets.\n     pub visualizer_type: DebuggerVisualizerType,\n+    // FIXME: Docs\n+    pub path: Option<PathBuf>,\n }\n \n impl DebuggerVisualizerFile {\n-    pub fn new(src: Lrc<[u8]>, visualizer_type: DebuggerVisualizerType) -> Self {\n-        DebuggerVisualizerFile { src, visualizer_type }\n+    pub fn new(src: Lrc<[u8]>, visualizer_type: DebuggerVisualizerType, path: PathBuf) -> Self {\n+        DebuggerVisualizerFile { src, visualizer_type, path: Some(path) }\n+    }\n+\n+    pub fn path_erased(&self) -> Self {\n+        DebuggerVisualizerFile {\n+            src: self.src.clone(),\n+            visualizer_type: self.visualizer_type,\n+            path: None,\n+        }\n     }\n }\n "}, {"sha": "be3a5d3aa0f03abd3535efdee7debed079088229", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -35,6 +35,7 @@ const EXTENSION_EXCEPTION_PATHS: &[&str] = &[\n     \"tests/ui/macros/syntax-extension-source-utils-files/includeme.fragment\", // more include\n     \"tests/ui/unused-crate-deps/test.mk\", // why would you use make\n     \"tests/ui/proc-macro/auxiliary/included-file.txt\", // more include\n+    \"tests/ui/invalid/foo.natvis.xml\", // sample debugger visualizer\n ];\n \n fn check_entries(tests_path: &Path, bad: &mut bool) {"}, {"sha": "0a2493144ead4f498c60808ab55b726c0f870f66", "filename": "tests/run-make/debugger-visualizer-dep-info/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2FMakefile?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -0,0 +1,8 @@\n+# ignore-windows-gnu\n+\n+include ../tools.mk\n+\n+all:\n+\t$(RUSTC) --emit dep-info main.rs\n+\t$(CGREP) \"foo.py\" < $(TMPDIR)/main.d\n+\t$(CGREP) \"my_visualizers/bar.py\" < $(TMPDIR)/main.d"}, {"sha": "1bb8bf6d7fd4c8d09aea89b47de20fb8bbb61626", "filename": "tests/run-make/debugger-visualizer-dep-info/foo.py", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Ffoo.py", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Ffoo.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Ffoo.py?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -0,0 +1 @@\n+# empty"}, {"sha": "6caf2afe9a572c7183b96540abca8223d45a439a", "filename": "tests/run-make/debugger-visualizer-dep-info/main.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmain.rs?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -0,0 +1,12 @@\n+#![debugger_visualizer(gdb_script_file = \"foo.py\")]\n+\n+fn main() {\n+    const _UNUSED: u32 = {\n+        mod inner {\n+            #![debugger_visualizer(gdb_script_file = \"my_visualizers/bar.py\")]\n+            pub const XYZ: u32 = 123;\n+        }\n+\n+        inner::XYZ + 1\n+    };\n+}"}, {"sha": "1bb8bf6d7fd4c8d09aea89b47de20fb8bbb61626", "filename": "tests/run-make/debugger-visualizer-dep-info/my_visualizers/bar.py", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmy_visualizers%2Fbar.py", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmy_visualizers%2Fbar.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmy_visualizers%2Fbar.py?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -0,0 +1 @@\n+# empty"}, {"sha": "c341a403902b9c6eb2ccdd2cb62b9ba88ddaf37a", "filename": "tests/ui/invalid/foo.natvis.xml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Fui%2Finvalid%2Ffoo.natvis.xml", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Fui%2Finvalid%2Ffoo.natvis.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid%2Ffoo.natvis.xml?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -0,0 +1 @@\n+<!-- empty -->"}, {"sha": "1efb9555c242a5c5368e5b64ab3a704bf53bfd5c", "filename": "tests/ui/invalid/invalid-debugger-visualizer-target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -1,2 +1,2 @@\n-#[debugger_visualizer(natvis_file = \"../foo.natvis\")] //~ ERROR attribute should be applied to a module\n+#[debugger_visualizer(natvis_file = \"./foo.natvis.xml\")] //~ ERROR attribute should be applied to a module\n fn main() {}"}, {"sha": "c8a4d68137923ca44bda565b67b013bc9fa69eaf", "filename": "tests/ui/invalid/invalid-debugger-visualizer-target.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f01893900cf01b48adcaa0146e139cc8083b399/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr?ref=7f01893900cf01b48adcaa0146e139cc8083b399", "patch": "@@ -1,8 +1,8 @@\n error: attribute should be applied to a module\n   --> $DIR/invalid-debugger-visualizer-target.rs:1:1\n    |\n-LL | #[debugger_visualizer(natvis_file = \"../foo.natvis\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[debugger_visualizer(natvis_file = \"./foo.natvis.xml\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}