{"sha": "e80fc10af19b1c9c4507187ab1c059b445d8f057", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MGZjMTBhZjE5YjFjOWM0NTA3MTg3YWIxYzA1OWI0NDVkOGYwNTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-06T03:28:02Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-06T03:28:02Z"}, "message": "Rollup merge of #22862 - vhbit:broken-open, r=alexcrichton\n\n According to Apple's [arm64 calling convention](https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW1) varargs always are passed\nthrough stack. Since `open` is actually a vararg function on Darwin,\nit means that older declaration caused permissions to be taken from\nstack, while passed through register => it set file permissions\nto garbage and it was simply impossible to read/delete files after they\nwere created.\n\nThey way this commit handles it is to preserve compatibility with\nexisting code - it simply creates a shim unsafe function so all existing\ncallers continue work as nothing happened.", "tree": {"sha": "8a9cfbb4f4595610f08d3bc2f3248697dfc44ab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9cfbb4f4595610f08d3bc2f3248697dfc44ab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e80fc10af19b1c9c4507187ab1c059b445d8f057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e80fc10af19b1c9c4507187ab1c059b445d8f057", "html_url": "https://github.com/rust-lang/rust/commit/e80fc10af19b1c9c4507187ab1c059b445d8f057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e80fc10af19b1c9c4507187ab1c059b445d8f057/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0746ff19b3bc204215f04bbb5756159f9bc5c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0746ff19b3bc204215f04bbb5756159f9bc5c92", "html_url": "https://github.com/rust-lang/rust/commit/b0746ff19b3bc204215f04bbb5756159f9bc5c92"}, {"sha": "3f4181a6e5c41a8d9d8ee434e6b75e7bef315998", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4181a6e5c41a8d9d8ee434e6b75e7bef315998", "html_url": "https://github.com/rust-lang/rust/commit/3f4181a6e5c41a8d9d8ee434e6b75e7bef315998"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "f1a1f30161630a2c54cfaeff6a100807ceeb1234", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e80fc10af19b1c9c4507187ab1c059b445d8f057/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80fc10af19b1c9c4507187ab1c059b445d8f057/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=e80fc10af19b1c9c4507187ab1c059b445d8f057", "patch": "@@ -4999,9 +4999,36 @@ pub mod funcs {\n             use types::os::arch::c95::{c_char, c_int};\n             use types::os::arch::posix88::mode_t;\n \n+            mod open_shim {\n+                extern {\n+                    #[cfg(any(target_os = \"macos\",\n+                              target_os = \"ios\"))]\n+                    pub fn open(path: *const ::c_char, oflag: ::c_int, ...)\n+                                -> ::c_int;\n+\n+                    #[cfg(not(any(target_os = \"macos\",\n+                                  target_os = \"ios\")))]\n+                    pub fn open(path: *const ::c_char, oflag: ::c_int, mode: ::mode_t)\n+                                -> ::c_int;\n+                }\n+            }\n+\n+            #[cfg(any(target_os = \"macos\",\n+                      target_os = \"ios\"))]\n+            #[inline]\n+            pub unsafe extern fn open(path: *const c_char, oflag: c_int, mode: mode_t) -> c_int {\n+                use types::os::arch::c95::c_uint;\n+                open_shim::open(path, oflag, mode as c_uint)\n+            }\n+\n+            #[cfg(not(any(target_os = \"macos\",\n+                          target_os = \"ios\")))]\n+            #[inline]\n+            pub unsafe extern fn open(path: *const c_char, oflag: c_int, mode: mode_t) -> c_int {\n+                open_shim::open(path, oflag, mode)\n+            }\n+\n             extern {\n-                pub fn open(path: *const c_char, oflag: c_int, mode: mode_t)\n-                            -> c_int;\n                 pub fn creat(path: *const c_char, mode: mode_t) -> c_int;\n                 pub fn fcntl(fd: c_int, cmd: c_int, ...) -> c_int;\n             }"}]}