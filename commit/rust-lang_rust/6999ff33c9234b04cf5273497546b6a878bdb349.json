{"sha": "6999ff33c9234b04cf5273497546b6a878bdb349", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OTlmZjMzYzkyMzRiMDRjZjUyNzM0OTc1NDZiNmE4NzhiZGIzNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-16T09:58:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-16T09:58:45Z"}, "message": "Auto merge of #77809 - nasso:master, r=jyn514,guillaumegomez\n\nAdd settings to rustdoc to use the system theme\n\nThis PR adds new settings to `rustdoc` to use the operating system color scheme.\n\n![click](https://user-images.githubusercontent.com/11479594/95668052-bf604e80-0b6e-11eb-8a17-473aaae510c9.gif)\n\n`rustdoc` actually had [basic support for this](https://github.com/rust-lang/rust/blob/b1af43bc63bc7417938df056f7f25d456cc11b0e/src/librustdoc/html/static/storage.js#L121), but the setting wasn't visible and couldn't be set back once the theme was explicitly set by the user. It also didn't update if the operating system theme preference changed while viewing a page.\n\nI'm using [this method](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Testing_media_queries#Receiving_query_notifications) to query and listen to changes to the `(prefers-color-scheme: dark)` media query. I kept the old method (based on `getComputedStyle`) as a fallback in case the user-agent doesn't support `window.matchMedia` (so like... [pretty much nobody](https://caniuse.com/?search=matchMedia)).\n\nSince there's now more than one official \"\"dark\"\" theme in `rustdoc` (and also to support custom/third-party themes), the preferred dark and light themes can be configured in the settings page (the defaults are just \"dark\" and \"light\").\n\nThis is also my very first \"proper\" PR to Rust! Please let me know if I did anything wrong :).", "tree": {"sha": "ae1342bda95b2cb535812c4e955a121525e1bb3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae1342bda95b2cb535812c4e955a121525e1bb3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6999ff33c9234b04cf5273497546b6a878bdb349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6999ff33c9234b04cf5273497546b6a878bdb349", "html_url": "https://github.com/rust-lang/rust/commit/6999ff33c9234b04cf5273497546b6a878bdb349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6999ff33c9234b04cf5273497546b6a878bdb349/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95b4a4f0eee935f9e0c80b0ceef34866bcb72ca3", "url": "https://api.github.com/repos/rust-lang/rust/commits/95b4a4f0eee935f9e0c80b0ceef34866bcb72ca3", "html_url": "https://github.com/rust-lang/rust/commit/95b4a4f0eee935f9e0c80b0ceef34866bcb72ca3"}, {"sha": "59f9cf2ac1872866a9a2d4b83f56b96f131a6a5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f9cf2ac1872866a9a2d4b83f56b96f131a6a5e", "html_url": "https://github.com/rust-lang/rust/commit/59f9cf2ac1872866a9a2d4b83f56b96f131a6a5e"}], "stats": {"total": 282, "additions": 240, "deletions": 42}, "files": [{"sha": "0608c4e32e00b29d47c61be1a84435a7a88b3855", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 85, "deletions": 17, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/6999ff33c9234b04cf5273497546b6a878bdb349/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6999ff33c9234b04cf5273497546b6a878bdb349/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6999ff33c9234b04cf5273497546b6a878bdb349", "patch": "@@ -576,7 +576,8 @@ impl FormatRenderer for Context {\n             settings(\n                 self.shared.static_root_path.as_deref().unwrap_or(\"./\"),\n                 &self.shared.resource_suffix,\n-            ),\n+                &self.shared.style_files,\n+            )?,\n             &style_files,\n         );\n         self.shared.fs.write(&settings_file, v.as_bytes())?;\n@@ -811,6 +812,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n     but.textContent = item;\n     but.onclick = function(el) {{\n         switchTheme(currentTheme, mainTheme, item, true);\n+        useSystemTheme(false);\n     }};\n     but.onblur = handleThemeButtonsBlur;\n     themes.appendChild(but);\n@@ -1344,22 +1346,35 @@ impl AllTypes {\n \n #[derive(Debug)]\n enum Setting {\n-    Section { description: &'static str, sub_settings: Vec<Setting> },\n-    Entry { js_data_name: &'static str, description: &'static str, default_value: bool },\n+    Section {\n+        description: &'static str,\n+        sub_settings: Vec<Setting>,\n+    },\n+    Toggle {\n+        js_data_name: &'static str,\n+        description: &'static str,\n+        default_value: bool,\n+    },\n+    Select {\n+        js_data_name: &'static str,\n+        description: &'static str,\n+        default_value: &'static str,\n+        options: Vec<(String, String)>,\n+    },\n }\n \n impl Setting {\n-    fn display(&self) -> String {\n+    fn display(&self, root_path: &str, suffix: &str) -> String {\n         match *self {\n-            Setting::Section { ref description, ref sub_settings } => format!(\n+            Setting::Section { description, ref sub_settings } => format!(\n                 \"<div class='setting-line'>\\\n                      <div class='title'>{}</div>\\\n                      <div class='sub-settings'>{}</div>\n                  </div>\",\n                 description,\n-                sub_settings.iter().map(|s| s.display()).collect::<String>()\n+                sub_settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>()\n             ),\n-            Setting::Entry { ref js_data_name, ref description, ref default_value } => format!(\n+            Setting::Toggle { js_data_name, description, default_value } => format!(\n                 \"<div class='setting-line'>\\\n                      <label class='toggle'>\\\n                      <input type='checkbox' id='{}' {}>\\\n@@ -1368,16 +1383,38 @@ impl Setting {\n                      <div>{}</div>\\\n                  </div>\",\n                 js_data_name,\n-                if *default_value { \" checked\" } else { \"\" },\n+                if default_value { \" checked\" } else { \"\" },\n                 description,\n             ),\n+            Setting::Select { js_data_name, description, default_value, ref options } => format!(\n+                \"<div class=\\\"setting-line\\\">\\\n+                     <div>{}</div>\\\n+                     <label class=\\\"select-wrapper\\\">\\\n+                         <select id=\\\"{}\\\" autocomplete=\\\"off\\\">{}</select>\\\n+                         <img src=\\\"{}down-arrow{}.svg\\\" alt=\\\"Select item\\\">\\\n+                     </label>\\\n+                 </div>\",\n+                description,\n+                js_data_name,\n+                options\n+                    .iter()\n+                    .map(|opt| format!(\n+                        \"<option value=\\\"{}\\\" {}>{}</option>\",\n+                        opt.0,\n+                        if &opt.0 == default_value { \"selected\" } else { \"\" },\n+                        opt.1,\n+                    ))\n+                    .collect::<String>(),\n+                root_path,\n+                suffix,\n+            ),\n         }\n     }\n }\n \n impl From<(&'static str, &'static str, bool)> for Setting {\n     fn from(values: (&'static str, &'static str, bool)) -> Setting {\n-        Setting::Entry { js_data_name: values.0, description: values.1, default_value: values.2 }\n+        Setting::Toggle { js_data_name: values.0, description: values.1, default_value: values.2 }\n     }\n }\n \n@@ -1390,9 +1427,39 @@ impl<T: Into<Setting>> From<(&'static str, Vec<T>)> for Setting {\n     }\n }\n \n-fn settings(root_path: &str, suffix: &str) -> String {\n+fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<String, Error> {\n+    let theme_names: Vec<(String, String)> = themes\n+        .iter()\n+        .map(|entry| {\n+            let theme =\n+                try_none!(try_none!(entry.path.file_stem(), &entry.path).to_str(), &entry.path)\n+                    .to_string();\n+\n+            Ok((theme.clone(), theme))\n+        })\n+        .collect::<Result<_, Error>>()?;\n+\n     // (id, explanation, default value)\n     let settings: &[Setting] = &[\n+        (\n+            \"Theme preferences\",\n+            vec![\n+                Setting::from((\"use-system-theme\", \"Use system theme\", true)),\n+                Setting::Select {\n+                    js_data_name: \"preferred-dark-theme\",\n+                    description: \"Preferred dark theme\",\n+                    default_value: \"dark\",\n+                    options: theme_names.clone(),\n+                },\n+                Setting::Select {\n+                    js_data_name: \"preferred-light-theme\",\n+                    description: \"Preferred light theme\",\n+                    default_value: \"light\",\n+                    options: theme_names,\n+                },\n+            ],\n+        )\n+            .into(),\n         (\n             \"Auto-hide item declarations\",\n             vec![\n@@ -1414,16 +1481,17 @@ fn settings(root_path: &str, suffix: &str) -> String {\n         (\"line-numbers\", \"Show line numbers on code examples\", false).into(),\n         (\"disable-shortcuts\", \"Disable keyboard shortcuts\", false).into(),\n     ];\n-    format!(\n+\n+    Ok(format!(\n         \"<h1 class='fqn'>\\\n-    <span class='in-band'>Rustdoc settings</span>\\\n-</h1>\\\n-<div class='settings'>{}</div>\\\n-<script src='{}settings{}.js'></script>\",\n-        settings.iter().map(|s| s.display()).collect::<String>(),\n+            <span class='in-band'>Rustdoc settings</span>\\\n+        </h1>\\\n+        <div class='settings'>{}</div>\\\n+        <script src='{}settings{}.js'></script>\",\n+        settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>(),\n         root_path,\n         suffix\n-    )\n+    ))\n }\n \n impl Context {"}, {"sha": "4bacd7b245bbcee65e5dfdc9ddd4bd7308e53ede", "filename": "src/librustdoc/html/static/settings.css", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6999ff33c9234b04cf5273497546b6a878bdb349/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/6999ff33c9234b04cf5273497546b6a878bdb349/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.css?ref=6999ff33c9234b04cf5273497546b6a878bdb349", "patch": "@@ -4,7 +4,6 @@\n }\n \n .setting-line > div {\n-\tmax-width: calc(100% - 74px);\n \tdisplay: inline-block;\n \tvertical-align: top;\n \tfont-size: 17px;\n@@ -30,6 +29,38 @@\n \tdisplay: none;\n }\n \n+.select-wrapper {\n+\tfloat: right;\n+\tposition: relative;\n+\theight: 27px;\n+\tmin-width: 25%;\n+}\n+\n+.select-wrapper select {\n+\tappearance: none;\n+\t-moz-appearance: none;\n+\t-webkit-appearance: none;\n+\tbackground: none;\n+\tborder: 2px solid #ccc;\n+\tpadding-right: 28px;\n+\twidth: 100%;\n+}\n+\n+.select-wrapper img {\n+\tpointer-events: none;\n+\tposition: absolute;\n+\tright: 0;\n+\tbottom: 0;\n+\tbackground: #ccc;\n+\theight: 100%;\n+\twidth: 28px;\n+\tpadding: 0px 4px;\n+}\n+\n+.select-wrapper select option {\n+\tcolor: initial;\n+}\n+\n .slider {\n \tposition: absolute;\n \tcursor: pointer;"}, {"sha": "00a01ac30bcfa034c3a0ddd70819b4a37a115a51", "filename": "src/librustdoc/html/static/settings.js", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6999ff33c9234b04cf5273497546b6a878bdb349/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/6999ff33c9234b04cf5273497546b6a878bdb349/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js?ref=6999ff33c9234b04cf5273497546b6a878bdb349", "patch": "@@ -1,30 +1,56 @@\n // Local js definitions:\n-/* global getCurrentValue, updateLocalStorage */\n+/* global getCurrentValue, updateLocalStorage, updateSystemTheme */\n \n (function () {\n-    function changeSetting(settingName, isEnabled) {\n-        updateLocalStorage('rustdoc-' + settingName, isEnabled);\n+    function changeSetting(settingName, value) {\n+        updateLocalStorage(\"rustdoc-\" + settingName, value);\n+\n+        switch (settingName) {\n+            case \"preferred-dark-theme\":\n+            case \"preferred-light-theme\":\n+            case \"use-system-theme\":\n+                updateSystemTheme();\n+                break;\n+        }\n     }\n \n     function getSettingValue(settingName) {\n-        return getCurrentValue('rustdoc-' + settingName);\n+        return getCurrentValue(\"rustdoc-\" + settingName);\n     }\n \n     function setEvents() {\n-        var elems = document.getElementsByClassName(\"slider\");\n-        if (!elems || elems.length === 0) {\n-            return;\n+        var elems = {\n+            toggles: document.getElementsByClassName(\"slider\"),\n+            selects: document.getElementsByClassName(\"select-wrapper\")\n+        };\n+        var i;\n+\n+        if (elems.toggles && elems.toggles.length > 0) {\n+            for (i = 0; i < elems.toggles.length; ++i) {\n+                var toggle = elems.toggles[i].previousElementSibling;\n+                var settingId = toggle.id;\n+                var settingValue = getSettingValue(settingId);\n+                if (settingValue !== null) {\n+                    toggle.checked = settingValue === \"true\";\n+                }\n+                toggle.onchange = function() {\n+                    changeSetting(this.id, this.checked);\n+                };\n+            }\n         }\n-        for (var i = 0; i < elems.length; ++i) {\n-            var toggle = elems[i].previousElementSibling;\n-            var settingId = toggle.id;\n-            var settingValue = getSettingValue(settingId);\n-            if (settingValue !== null) {\n-                toggle.checked = settingValue === \"true\";\n+\n+        if (elems.selects && elems.selects.length > 0) {\n+            for (i = 0; i < elems.selects.length; ++i) {\n+                var select = elems.selects[i].getElementsByTagName(\"select\")[0];\n+                var settingId = select.id;\n+                var settingValue = getSettingValue(settingId);\n+                if (settingValue !== null) {\n+                    select.value = settingValue;\n+                }\n+                select.onchange = function() {\n+                    changeSetting(this.id, this.value);\n+                };\n             }\n-            toggle.onchange = function() {\n-                changeSetting(this.id, this.checked);\n-            };\n         }\n     }\n "}, {"sha": "a027d6845ea21d8b959c75d7732a0bb4ce33fb13", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 81, "deletions": 8, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/6999ff33c9234b04cf5273497546b6a878bdb349/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/6999ff33c9234b04cf5273497546b6a878bdb349/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=6999ff33c9234b04cf5273497546b6a878bdb349", "patch": "@@ -1,8 +1,10 @@\n // From rust:\n /* global resourcesSuffix */\n \n+var darkThemes = [\"dark\", \"ayu\"];\n var currentTheme = document.getElementById(\"themeStyle\");\n var mainTheme = document.getElementById(\"mainThemeStyle\");\n+var localStoredTheme = getCurrentValue(\"rustdoc-theme\");\n \n var savedHref = [];\n \n@@ -110,19 +112,90 @@ function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n     });\n     if (found === true) {\n         styleElem.href = newHref;\n-        // If this new value comes from a system setting or from the previously saved theme, no\n-        // need to save it.\n+        // If this new value comes from a system setting or from the previously\n+        // saved theme, no need to save it.\n         if (saveTheme === true) {\n             updateLocalStorage(\"rustdoc-theme\", newTheme);\n         }\n     }\n }\n \n-function getSystemValue() {\n-    var property = getComputedStyle(document.documentElement).getPropertyValue('content');\n-    return property.replace(/[\\\"\\']/g, \"\");\n+function useSystemTheme(value) {\n+    if (value === undefined) {\n+        value = true;\n+    }\n+\n+    updateLocalStorage(\"rustdoc-use-system-theme\", value);\n+\n+    // update the toggle if we're on the settings page\n+    var toggle = document.getElementById(\"use-system-theme\");\n+    if (toggle && toggle instanceof HTMLInputElement) {\n+        toggle.checked = value;\n+    }\n }\n \n-switchTheme(currentTheme, mainTheme,\n-            getCurrentValue(\"rustdoc-theme\") || getSystemValue() || \"light\",\n-            false);\n+var updateSystemTheme = (function() {\n+    if (!window.matchMedia) {\n+        // fallback to the CSS computed value\n+        return function() {\n+            let cssTheme = getComputedStyle(document.documentElement)\n+                .getPropertyValue('content');\n+\n+            switchTheme(\n+                currentTheme,\n+                mainTheme,\n+                JSON.parse(cssTheme) || light,\n+                true\n+            );\n+        };\n+    }\n+\n+    // only listen to (prefers-color-scheme: dark) because light is the default\n+    var mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n+\n+    function handlePreferenceChange(mql) {\n+        // maybe the user has disabled the setting in the meantime!\n+        if (getCurrentValue(\"rustdoc-use-system-theme\") !== \"false\") {\n+            var lightTheme = getCurrentValue(\"rustdoc-preferred-light-theme\") || \"light\";\n+            var darkTheme = getCurrentValue(\"rustdoc-preferred-dark-theme\") || \"dark\";\n+\n+            if (mql.matches) {\n+                // prefers a dark theme\n+                switchTheme(currentTheme, mainTheme, darkTheme, true);\n+            } else {\n+                // prefers a light theme, or has no preference\n+                switchTheme(currentTheme, mainTheme, lightTheme, true);\n+            }\n+\n+            // note: we save the theme so that it doesn't suddenly change when\n+            // the user disables \"use-system-theme\" and reloads the page or\n+            // navigates to another page\n+        }\n+    }\n+\n+    mql.addListener(handlePreferenceChange);\n+\n+    return function() {\n+        handlePreferenceChange(mql);\n+    };\n+})();\n+\n+if (getCurrentValue(\"rustdoc-use-system-theme\") !== \"false\" && window.matchMedia) {\n+    // update the preferred dark theme if the user is already using a dark theme\n+    // See https://github.com/rust-lang/rust/pull/77809#issuecomment-707875732\n+    if (getCurrentValue(\"rustdoc-use-system-theme\") === null\n+        && getCurrentValue(\"rustdoc-preferred-dark-theme\") === null\n+        && darkThemes.indexOf(localStoredTheme) >= 0) {\n+        updateLocalStorage(\"rustdoc-preferred-dark-theme\", localStoredTheme);\n+    }\n+\n+    // call the function to initialize the theme at least once!\n+    updateSystemTheme();\n+} else {\n+    switchTheme(\n+        currentTheme,\n+        mainTheme,\n+        getCurrentValue(\"rustdoc-theme\") || \"light\",\n+        false\n+    );\n+}"}]}