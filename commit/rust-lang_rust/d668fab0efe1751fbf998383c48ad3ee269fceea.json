{"sha": "d668fab0efe1751fbf998383c48ad3ee269fceea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NjhmYWIwZWZlMTc1MWZiZjk5ODM4M2M0OGFkM2VlMjY5ZmNlZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-10T19:15:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-10T19:15:08Z"}, "message": "Auto merge of #29714 - petrochenkov:strparse, r=nrc\n\nIn particular, attributes are now parsed on fields of tuple variants", "tree": {"sha": "9b12bc39af059bac479faf41badba15cff3b295b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b12bc39af059bac479faf41badba15cff3b295b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d668fab0efe1751fbf998383c48ad3ee269fceea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d668fab0efe1751fbf998383c48ad3ee269fceea", "html_url": "https://github.com/rust-lang/rust/commit/d668fab0efe1751fbf998383c48ad3ee269fceea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d668fab0efe1751fbf998383c48ad3ee269fceea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed", "html_url": "https://github.com/rust-lang/rust/commit/ea422eb4de1720d7bcfdc0fd850dc2d048da52ed"}, {"sha": "649fc3895cecb1e277a6703ad4a1a60b2d7a9f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98", "html_url": "https://github.com/rust-lang/rust/commit/649fc3895cecb1e277a6703ad4a1a60b2d7a9f98"}], "stats": {"total": 103, "additions": 51, "deletions": 52}, "files": [{"sha": "c579a2c9c0aee9825aaae00c3c8d912175f03703", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d668fab0efe1751fbf998383c48ad3ee269fceea/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d668fab0efe1751fbf998383c48ad3ee269fceea/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d668fab0efe1751fbf998383c48ad3ee269fceea", "patch": "@@ -867,6 +867,8 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 self.context.span_handler.span_err(span, \"empty tuple structs and enum variants \\\n                                                           are not allowed, use unit structs and \\\n                                                           enum variants instead\");\n+                self.context.span_handler.span_help(span, \"remove trailing `()` to make a unit \\\n+                                                           struct or unit enum variant\");\n             }\n         }\n         visit::walk_struct_def(self, s)"}, {"sha": "fde1058a785c0466147941e0a91eaba39729a675", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 35, "deletions": 46, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/d668fab0efe1751fbf998383c48ad3ee269fceea/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d668fab0efe1751fbf998383c48ad3ee269fceea/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d668fab0efe1751fbf998383c48ad3ee269fceea", "patch": "@@ -113,6 +113,13 @@ pub enum BoundParsingMode {\n     Modified,\n }\n \n+/// `pub` should be parsed in struct fields and not parsed in variant fields\n+#[derive(Clone, Copy, PartialEq)]\n+pub enum ParsePub {\n+    Yes,\n+    No,\n+}\n+\n /// Possibly accept an `token::Interpolated` expression (a pre-parsed expression\n /// dropped into the token stream, which happens while parsing the result of\n /// macro expansion). Placement of these is not as complex as I feared it would\n@@ -4686,18 +4693,23 @@ impl<'a> Parser<'a> {\n                 VariantData::Unit(ast::DUMMY_NODE_ID)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                VariantData::Struct(try!(self.parse_record_struct_body()), ast::DUMMY_NODE_ID)\n+                VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::Yes)),\n+                                    ast::DUMMY_NODE_ID)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if try!(self.eat(&token::Semi) ){\n             VariantData::Unit(ast::DUMMY_NODE_ID)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            VariantData::Struct(try!(self.parse_record_struct_body()), ast::DUMMY_NODE_ID)\n+            VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::Yes)),\n+                                ast::DUMMY_NODE_ID)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n-            VariantData::Tuple(try!(self.parse_tuple_struct_body(&mut generics)),\n-                               ast::DUMMY_NODE_ID)\n+            let body = VariantData::Tuple(try!(self.parse_tuple_struct_body(ParsePub::Yes)),\n+                                          ast::DUMMY_NODE_ID);\n+            generics.where_clause = try!(self.parse_where_clause());\n+            try!(self.expect(&token::Semi));\n+            body\n         } else {\n             let token_str = self.this_token_to_string();\n             return Err(self.fatal(&format!(\"expected `where`, `{{`, `(`, or `;` after struct \\\n@@ -4707,11 +4719,11 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemStruct(vdata, generics), None))\n     }\n \n-    pub fn parse_record_struct_body(&mut self) -> PResult<Vec<StructField>> {\n+    pub fn parse_record_struct_body(&mut self, parse_pub: ParsePub) -> PResult<Vec<StructField>> {\n         let mut fields = Vec::new();\n         if try!(self.eat(&token::OpenDelim(token::Brace)) ){\n             while self.token != token::CloseDelim(token::Brace) {\n-                fields.push(try!(self.parse_struct_decl_field(true)));\n+                fields.push(try!(self.parse_struct_decl_field(parse_pub)));\n             }\n \n             try!(self.bump());\n@@ -4725,9 +4737,7 @@ impl<'a> Parser<'a> {\n         Ok(fields)\n     }\n \n-    pub fn parse_tuple_struct_body(&mut self,\n-                                   generics: &mut ast::Generics)\n-                                   -> PResult<Vec<StructField>> {\n+    pub fn parse_tuple_struct_body(&mut self, parse_pub: ParsePub) -> PResult<Vec<StructField>> {\n         // This is the case where we find `struct Foo<T>(T) where T: Copy;`\n         // Unit like structs are handled in parse_item_struct function\n         let fields = try!(self.parse_unspanned_seq(\n@@ -4738,16 +4748,20 @@ impl<'a> Parser<'a> {\n                 let attrs = try!(p.parse_outer_attributes());\n                 let lo = p.span.lo;\n                 let struct_field_ = ast::StructField_ {\n-                    kind: UnnamedField(try!(p.parse_visibility())),\n+                    kind: UnnamedField (\n+                        if parse_pub == ParsePub::Yes {\n+                            try!(p.parse_visibility())\n+                        } else {\n+                            Inherited\n+                        }\n+                    ),\n                     id: ast::DUMMY_NODE_ID,\n                     ty: try!(p.parse_ty_sum()),\n                     attrs: attrs,\n                 };\n                 Ok(spanned(lo, p.span.hi, struct_field_))\n             }));\n \n-        generics.where_clause = try!(self.parse_where_clause());\n-        try!(self.expect(&token::Semi));\n         Ok(fields)\n     }\n \n@@ -4775,12 +4789,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse an element of a struct definition\n-    fn parse_struct_decl_field(&mut self, allow_pub: bool) -> PResult<StructField> {\n+    fn parse_struct_decl_field(&mut self, parse_pub: ParsePub) -> PResult<StructField> {\n \n         let attrs = try!(self.parse_outer_attributes());\n \n         if try!(self.eat_keyword(keywords::Pub) ){\n-            if !allow_pub {\n+            if parse_pub == ParsePub::No {\n                 let span = self.last_span;\n                 self.span_err(span, \"`pub` is not allowed here\");\n             }\n@@ -5133,18 +5147,6 @@ impl<'a> Parser<'a> {\n         Ok((ident, ItemTy(ty, tps), None))\n     }\n \n-    /// Parse a structure-like enum variant definition\n-    /// this should probably be renamed or refactored...\n-    fn parse_struct_def(&mut self) -> PResult<VariantData> {\n-        let mut fields: Vec<StructField> = Vec::new();\n-        while self.token != token::CloseDelim(token::Brace) {\n-            fields.push(try!(self.parse_struct_decl_field(false)));\n-        }\n-        try!(self.bump());\n-\n-        Ok(VariantData::Struct(fields, ast::DUMMY_NODE_ID))\n-    }\n-\n     /// Parse the part of an \"enum\" decl following the '{'\n     fn parse_enum_def(&mut self, _generics: &ast::Generics) -> PResult<EnumDef> {\n         let mut variants = Vec::new();\n@@ -5157,34 +5159,21 @@ impl<'a> Parser<'a> {\n             let struct_def;\n             let mut disr_expr = None;\n             let ident = try!(self.parse_ident());\n-            if try!(self.eat(&token::OpenDelim(token::Brace)) ){\n+            if self.check(&token::OpenDelim(token::Brace)) {\n                 // Parse a struct variant.\n                 all_nullary = false;\n-                struct_def = try!(self.parse_struct_def());\n+                struct_def = VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::No)),\n+                                                 ast::DUMMY_NODE_ID);\n             } else if self.check(&token::OpenDelim(token::Paren)) {\n                 all_nullary = false;\n-                let arg_tys = try!(self.parse_enum_variant_seq(\n-                    &token::OpenDelim(token::Paren),\n-                    &token::CloseDelim(token::Paren),\n-                    seq_sep_trailing_allowed(token::Comma),\n-                    |p| p.parse_ty_sum()\n-                ));\n-                let mut fields = Vec::new();\n-                for ty in arg_tys {\n-                    fields.push(Spanned { span: ty.span, node: ast::StructField_ {\n-                        ty: ty,\n-                        kind: ast::UnnamedField(ast::Inherited),\n-                        attrs: Vec::new(),\n-                        id: ast::DUMMY_NODE_ID,\n-                    }});\n-                }\n-                struct_def = ast::VariantData::Tuple(fields, ast::DUMMY_NODE_ID);\n+                struct_def = VariantData::Tuple(try!(self.parse_tuple_struct_body(ParsePub::No)),\n+                                                ast::DUMMY_NODE_ID);\n             } else if try!(self.eat(&token::Eq) ){\n                 disr_expr = Some(try!(self.parse_expr_nopanic()));\n                 any_disr = disr_expr.as_ref().map(|expr| expr.span);\n-                struct_def = ast::VariantData::Unit(ast::DUMMY_NODE_ID);\n+                struct_def = VariantData::Unit(ast::DUMMY_NODE_ID);\n             } else {\n-                struct_def = ast::VariantData::Unit(ast::DUMMY_NODE_ID);\n+                struct_def = VariantData::Unit(ast::DUMMY_NODE_ID);\n             }\n \n             let vr = ast::Variant_ {"}, {"sha": "e005de01649a53743da373fbf7689a71fc116014", "filename": "src/test/compile-fail/issue-12560-1.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d668fab0efe1751fbf998383c48ad3ee269fceea/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d668fab0efe1751fbf998383c48ad3ee269fceea/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12560-1.rs?ref=d668fab0efe1751fbf998383c48ad3ee269fceea", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n-\n // For style and consistency reasons, non-parametrized enum variants must\n // be used simply as `ident` instead of `ident ()`.\n // This test-case covers enum declaration.\n \n enum Foo {\n-    Bar(), //~ ERROR nullary enum variants are written with no trailing `( )`\n-    Baz(), //~ ERROR nullary enum variants are written with no trailing `( )`\n+    Bar(), //~ ERROR empty tuple structs and enum variants are not allowed\n+    //~^ HELP remove trailing `()` to make a unit struct or unit enum variant\n+    Baz(), //~ ERROR empty tuple structs and enum variants are not allowed\n+    //~^ HELP remove trailing `()` to make a unit struct or unit enum variant\n     Bazar\n }\n ", "previous_filename": "src/test/parse-fail/issue-12560-1.rs"}, {"sha": "b229b91c7cd14d353b2df8a42bff9b8c09793677", "filename": "src/test/compile-fail/issue-16819.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d668fab0efe1751fbf998383c48ad3ee269fceea/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d668fab0efe1751fbf998383c48ad3ee269fceea/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs?ref=d668fab0efe1751fbf998383c48ad3ee269fceea", "patch": "@@ -10,9 +10,17 @@\n \n struct TS ( //~ ERROR empty tuple structs and enum variants are not allowed\n     #[cfg(untrue)]\n-    int,\n+    i32,\n );\n \n+enum E {\n+    TV ( //~ ERROR empty tuple structs and enum variants are not allowed\n+        #[cfg(untrue)]\n+        i32,\n+    )\n+}\n+\n fn main() {\n-    let s = S;\n+    let s = TS;\n+    let tv = E::TV;\n }"}]}