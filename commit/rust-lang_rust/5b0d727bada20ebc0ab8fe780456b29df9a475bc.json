{"sha": "5b0d727bada20ebc0ab8fe780456b29df9a475bc", "node_id": "C_kwDOAAsO6NoAKDViMGQ3MjdiYWRhMjBlYmMwYWI4ZmU3ODA0NTZiMjlkZjlhNDc1YmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-15T06:09:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-15T06:09:10Z"}, "message": "Auto merge of #9570 - nfejzic:lint-unchecked-duration-subtraction, r=llogiq\n\nfeat: lint unchecked subtraction of a 'Duration' from an 'Instant'\n\nHello all, I tried to tackle the open issue #9371 and this is what I came up with.\n\nI have a difficulty currently - some tests are failing:\n\n```\nfailures:\n    [ui] ui/manual_instant_elapsed.rs\n```\n\nThe `manual_instant_elapsed` is failing because of `Instant::now() - duration` test, this now gets also picked by `unchecked_duration_subtraction` lint.\nWhat is the correct way to proceed in this case? Simply update the `.stderr` file for `manual_instant_elapsed` lint?\n\nchangelog: [`unchecked_duration_subtraction`]: Add lint for unchecked subtraction of a `Duration` from an `Instant`.\n\nfixes #9371", "tree": {"sha": "3c779f004bc0b27e58455863f3ea64a3a9c1d5e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c779f004bc0b27e58455863f3ea64a3a9c1d5e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0d727bada20ebc0ab8fe780456b29df9a475bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0d727bada20ebc0ab8fe780456b29df9a475bc", "html_url": "https://github.com/rust-lang/rust/commit/5b0d727bada20ebc0ab8fe780456b29df9a475bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0d727bada20ebc0ab8fe780456b29df9a475bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c7f74de0b6b6a23f9a057b9d27990b05a20929e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7f74de0b6b6a23f9a057b9d27990b05a20929e", "html_url": "https://github.com/rust-lang/rust/commit/3c7f74de0b6b6a23f9a057b9d27990b05a20929e"}, {"sha": "0dd6ce0b1931e3e5c274daf4bbf50e96a322befd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd6ce0b1931e3e5c274daf4bbf50e96a322befd", "html_url": "https://github.com/rust-lang/rust/commit/0dd6ce0b1931e3e5c274daf4bbf50e96a322befd"}], "stats": {"total": 331, "additions": 256, "deletions": 75}, "files": [{"sha": "6f1f73c1fd2fe385e06badeb46983a8860864c44", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d727bada20ebc0ab8fe780456b29df9a475bc/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d727bada20ebc0ab8fe780456b29df9a475bc/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5b0d727bada20ebc0ab8fe780456b29df9a475bc", "patch": "@@ -4428,6 +4428,7 @@ Released 2018-09-13\n [`try_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#try_err\n [`type_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n [`type_repetition_in_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds\n+[`unchecked_duration_subtraction`]: https://rust-lang.github.io/rust-clippy/master/index.html#unchecked_duration_subtraction\n [`undocumented_unsafe_blocks`]: https://rust-lang.github.io/rust-clippy/master/index.html#undocumented_unsafe_blocks\n [`undropped_manually_drops`]: https://rust-lang.github.io/rust-clippy/master/index.html#undropped_manually_drops\n [`unicode_not_nfc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unicode_not_nfc"}, {"sha": "0d3fc43a6443b69f23e38a42eb3569411aad39b1", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d727bada20ebc0ab8fe780456b29df9a475bc/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d727bada20ebc0ab8fe780456b29df9a475bc/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=5b0d727bada20ebc0ab8fe780456b29df9a475bc", "patch": "@@ -203,6 +203,8 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY_INFO,\n     crate::init_numbered_fields::INIT_NUMBERED_FIELDS_INFO,\n     crate::inline_fn_without_body::INLINE_FN_WITHOUT_BODY_INFO,\n+    crate::instant_subtraction::MANUAL_INSTANT_ELAPSED_INFO,\n+    crate::instant_subtraction::UNCHECKED_DURATION_SUBTRACTION_INFO,\n     crate::int_plus_one::INT_PLUS_ONE_INFO,\n     crate::invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS_INFO,\n     crate::invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED_INFO,\n@@ -251,7 +253,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::manual_async_fn::MANUAL_ASYNC_FN_INFO,\n     crate::manual_bits::MANUAL_BITS_INFO,\n     crate::manual_clamp::MANUAL_CLAMP_INFO,\n-    crate::manual_instant_elapsed::MANUAL_INSTANT_ELAPSED_INFO,\n     crate::manual_is_ascii_check::MANUAL_IS_ASCII_CHECK_INFO,\n     crate::manual_let_else::MANUAL_LET_ELSE_INFO,\n     crate::manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE_INFO,"}, {"sha": "60754b224fc840a8f21ff7b153f028f3b5f48ee0", "filename": "clippy_lints/src/instant_subtraction.rs", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d727bada20ebc0ab8fe780456b29df9a475bc/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d727bada20ebc0ab8fe780456b29df9a475bc/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finstant_subtraction.rs?ref=5b0d727bada20ebc0ab8fe780456b29df9a475bc", "patch": "@@ -0,0 +1,184 @@\n+use clippy_utils::{\n+    diagnostics::{self, span_lint_and_sugg},\n+    meets_msrv, msrvs, source,\n+    sugg::Sugg,\n+    ty,\n+};\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{source_map::Spanned, sym};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Lints subtraction between `Instant::now()` and another `Instant`.\n+    ///\n+    /// ### Why is this bad?\n+    /// It is easy to accidentally write `prev_instant - Instant::now()`, which will always be 0ns\n+    /// as `Instant` subtraction saturates.\n+    ///\n+    /// `prev_instant.elapsed()` also more clearly signals intention.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::time::Instant;\n+    /// let prev_instant = Instant::now();\n+    /// let duration = Instant::now() - prev_instant;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::time::Instant;\n+    /// let prev_instant = Instant::now();\n+    /// let duration = prev_instant.elapsed();\n+    /// ```\n+    #[clippy::version = \"1.65.0\"]\n+    pub MANUAL_INSTANT_ELAPSED,\n+    pedantic,\n+    \"subtraction between `Instant::now()` and previous `Instant`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Lints subtraction between an [`Instant`] and a [`Duration`].\n+    ///\n+    /// ### Why is this bad?\n+    /// Unchecked subtraction could cause underflow on certain platforms, leading to\n+    /// unintentional panics.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::time::{Instant, Duration};\n+    /// let time_passed = Instant::now() - Duration::from_secs(5);\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::time::{Instant, Duration};\n+    /// let time_passed = Instant::now().checked_sub(Duration::from_secs(5));\n+    /// ```\n+    ///\n+    /// [`Duration`]: std::time::Duration\n+    /// [`Instant::now()`]: std::time::Instant::now;\n+    #[clippy::version = \"1.65.0\"]\n+    pub UNCHECKED_DURATION_SUBTRACTION,\n+    suspicious,\n+    \"finds unchecked subtraction of a 'Duration' from an 'Instant'\"\n+}\n+\n+pub struct InstantSubtraction {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl InstantSubtraction {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(InstantSubtraction => [MANUAL_INSTANT_ELAPSED, UNCHECKED_DURATION_SUBTRACTION]);\n+\n+impl LateLintPass<'_> for InstantSubtraction {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Sub, ..\n+            },\n+            lhs,\n+            rhs,\n+        ) = expr.kind\n+        {\n+            if_chain! {\n+                if is_instant_now_call(cx, lhs);\n+\n+                if is_an_instant(cx, rhs);\n+                if let Some(sugg) = Sugg::hir_opt(cx, rhs);\n+\n+                then {\n+                    print_manual_instant_elapsed_sugg(cx, expr, sugg)\n+                } else {\n+                    if_chain! {\n+                        if !expr.span.from_expansion();\n+                        if meets_msrv(self.msrv, msrvs::TRY_FROM);\n+\n+                        if is_an_instant(cx, lhs);\n+                        if is_a_duration(cx, rhs);\n+\n+                        then {\n+                            print_unchecked_duration_subtraction_sugg(cx, lhs, rhs, expr)\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    extract_msrv_attr!(LateContext);\n+}\n+\n+fn is_instant_now_call(cx: &LateContext<'_>, expr_block: &'_ Expr<'_>) -> bool {\n+    if let ExprKind::Call(fn_expr, []) = expr_block.kind\n+        && let Some(fn_id) = clippy_utils::path_def_id(cx, fn_expr)\n+        && clippy_utils::match_def_path(cx, fn_id, &clippy_utils::paths::INSTANT_NOW)\n+    {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+fn is_an_instant(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    let expr_ty = cx.typeck_results().expr_ty(expr);\n+\n+    match expr_ty.kind() {\n+        rustc_middle::ty::Adt(def, _) => clippy_utils::match_def_path(cx, def.did(), &clippy_utils::paths::INSTANT),\n+        _ => false,\n+    }\n+}\n+\n+fn is_a_duration(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    let expr_ty = cx.typeck_results().expr_ty(expr);\n+    ty::is_type_diagnostic_item(cx, expr_ty, sym::Duration)\n+}\n+\n+fn print_manual_instant_elapsed_sugg(cx: &LateContext<'_>, expr: &Expr<'_>, sugg: Sugg<'_>) {\n+    span_lint_and_sugg(\n+        cx,\n+        MANUAL_INSTANT_ELAPSED,\n+        expr.span,\n+        \"manual implementation of `Instant::elapsed`\",\n+        \"try\",\n+        format!(\"{}.elapsed()\", sugg.maybe_par()),\n+        Applicability::MachineApplicable,\n+    );\n+}\n+\n+fn print_unchecked_duration_subtraction_sugg(\n+    cx: &LateContext<'_>,\n+    left_expr: &Expr<'_>,\n+    right_expr: &Expr<'_>,\n+    expr: &Expr<'_>,\n+) {\n+    let mut applicability = Applicability::MachineApplicable;\n+\n+    let left_expr =\n+        source::snippet_with_applicability(cx, left_expr.span, \"std::time::Instant::now()\", &mut applicability);\n+    let right_expr = source::snippet_with_applicability(\n+        cx,\n+        right_expr.span,\n+        \"std::time::Duration::from_secs(1)\",\n+        &mut applicability,\n+    );\n+\n+    diagnostics::span_lint_and_sugg(\n+        cx,\n+        UNCHECKED_DURATION_SUBTRACTION,\n+        expr.span,\n+        \"unchecked subtraction of a 'Duration' from an 'Instant'\",\n+        \"try\",\n+        format!(\"{left_expr}.checked_sub({right_expr}).unwrap()\"),\n+        applicability,\n+    );\n+}"}, {"sha": "4e640d7ebf6517817ed6ed54d7b6fda7a9959c62", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d727bada20ebc0ab8fe780456b29df9a475bc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d727bada20ebc0ab8fe780456b29df9a475bc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5b0d727bada20ebc0ab8fe780456b29df9a475bc", "patch": "@@ -151,6 +151,7 @@ mod inherent_impl;\n mod inherent_to_string;\n mod init_numbered_fields;\n mod inline_fn_without_body;\n+mod instant_subtraction;\n mod int_plus_one;\n mod invalid_upcast_comparisons;\n mod invalid_utf8_in_unchecked;\n@@ -172,7 +173,6 @@ mod manual_assert;\n mod manual_async_fn;\n mod manual_bits;\n mod manual_clamp;\n-mod manual_instant_elapsed;\n mod manual_is_ascii_check;\n mod manual_let_else;\n mod manual_non_exhaustive;\n@@ -907,7 +907,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move |_| Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n     store.register_late_pass(|_| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n     store.register_late_pass(|_| Box::<std_instead_of_core::StdReexports>::default());\n-    store.register_late_pass(|_| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n+    store.register_late_pass(move |_| Box::new(instant_subtraction::InstantSubtraction::new(msrv)));\n     store.register_late_pass(|_| Box::new(partialeq_to_none::PartialeqToNone));\n     store.register_late_pass(move |_| Box::new(manual_clamp::ManualClamp::new(msrv)));\n     store.register_late_pass(|_| Box::new(manual_string_new::ManualStringNew));"}, {"sha": "1e60aa02d3cad9e69c56b26c2f3f160b169a6a87", "filename": "clippy_lints/src/manual_instant_elapsed.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/3c7f74de0b6b6a23f9a057b9d27990b05a20929e/clippy_lints%2Fsrc%2Fmanual_instant_elapsed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7f74de0b6b6a23f9a057b9d27990b05a20929e/clippy_lints%2Fsrc%2Fmanual_instant_elapsed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_instant_elapsed.rs?ref=3c7f74de0b6b6a23f9a057b9d27990b05a20929e", "patch": "@@ -1,69 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Spanned;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Lints subtraction between `Instant::now()` and another `Instant`.\n-    ///\n-    /// ### Why is this bad?\n-    /// It is easy to accidentally write `prev_instant - Instant::now()`, which will always be 0ns\n-    /// as `Instant` subtraction saturates.\n-    ///\n-    /// `prev_instant.elapsed()` also more clearly signals intention.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// use std::time::Instant;\n-    /// let prev_instant = Instant::now();\n-    /// let duration = Instant::now() - prev_instant;\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// use std::time::Instant;\n-    /// let prev_instant = Instant::now();\n-    /// let duration = prev_instant.elapsed();\n-    /// ```\n-    #[clippy::version = \"1.65.0\"]\n-    pub MANUAL_INSTANT_ELAPSED,\n-    pedantic,\n-    \"subtraction between `Instant::now()` and previous `Instant`\"\n-}\n-\n-declare_lint_pass!(ManualInstantElapsed => [MANUAL_INSTANT_ELAPSED]);\n-\n-impl LateLintPass<'_> for ManualInstantElapsed {\n-    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n-        if let ExprKind::Binary(Spanned {node: BinOpKind::Sub, ..}, lhs, rhs) = expr.kind\n-            && check_instant_now_call(cx, lhs)\n-            && let ty_resolved = cx.typeck_results().expr_ty(rhs)\n-            && let rustc_middle::ty::Adt(def, _) = ty_resolved.kind()\n-            && clippy_utils::match_def_path(cx, def.did(), &clippy_utils::paths::INSTANT)\n-            && let Some(sugg) = clippy_utils::sugg::Sugg::hir_opt(cx, rhs)\n-        {\n-            span_lint_and_sugg(\n-                cx,\n-                MANUAL_INSTANT_ELAPSED,\n-                expr.span,\n-                \"manual implementation of `Instant::elapsed`\",\n-                \"try\",\n-                format!(\"{}.elapsed()\", sugg.maybe_par()),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n-    }\n-}\n-\n-fn check_instant_now_call(cx: &LateContext<'_>, expr_block: &'_ Expr<'_>) -> bool {\n-    if let ExprKind::Call(fn_expr, []) = expr_block.kind\n-        && let Some(fn_id) = clippy_utils::path_def_id(cx, fn_expr)\n-        && clippy_utils::match_def_path(cx, fn_id, &clippy_utils::paths::INSTANT_NOW)\n-    {\n-        true\n-    } else {\n-        false\n-    }\n-}"}, {"sha": "ab58e9b8b68d32ae334718d4afcf2bceab7cea31", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d727bada20ebc0ab8fe780456b29df9a475bc/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d727bada20ebc0ab8fe780456b29df9a475bc/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=5b0d727bada20ebc0ab8fe780456b29df9a475bc", "patch": "@@ -213,7 +213,7 @@ define_Conf! {\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),\n-    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, ERR_EXPECT, CAST_ABS_TO_UNSIGNED, UNINLINED_FORMAT_ARGS, MANUAL_CLAMP, MANUAL_LET_ELSE.\n+    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, ERR_EXPECT, CAST_ABS_TO_UNSIGNED, UNINLINED_FORMAT_ARGS, MANUAL_CLAMP, MANUAL_LET_ELSE, UNCHECKED_DURATION_SUBTRACTION.\n     ///\n     /// The minimum rust version that the project supports\n     (msrv: Option<String> = None),"}, {"sha": "85a91543c893ac1c91c4db6f07cd6b1533ade8d1", "filename": "tests/ui/manual_instant_elapsed.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Fmanual_instant_elapsed.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Fmanual_instant_elapsed.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_instant_elapsed.fixed?ref=5b0d727bada20ebc0ab8fe780456b29df9a475bc", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n #![warn(clippy::manual_instant_elapsed)]\n #![allow(clippy::unnecessary_operation)]\n+#![allow(clippy::unchecked_duration_subtraction)]\n #![allow(unused_variables)]\n #![allow(unused_must_use)]\n "}, {"sha": "c98cb15b91649dc9d0f4b3e00485fb7c3e63b79b", "filename": "tests/ui/manual_instant_elapsed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Fmanual_instant_elapsed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Fmanual_instant_elapsed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_instant_elapsed.rs?ref=5b0d727bada20ebc0ab8fe780456b29df9a475bc", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n #![warn(clippy::manual_instant_elapsed)]\n #![allow(clippy::unnecessary_operation)]\n+#![allow(clippy::unchecked_duration_subtraction)]\n #![allow(unused_variables)]\n #![allow(unused_must_use)]\n "}, {"sha": "4ce1f689107e961972ac9c749f04118d50d47bb3", "filename": "tests/ui/manual_instant_elapsed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Fmanual_instant_elapsed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Fmanual_instant_elapsed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_instant_elapsed.stderr?ref=5b0d727bada20ebc0ab8fe780456b29df9a475bc", "patch": "@@ -1,13 +1,13 @@\n error: manual implementation of `Instant::elapsed`\n-  --> $DIR/manual_instant_elapsed.rs:17:20\n+  --> $DIR/manual_instant_elapsed.rs:18:20\n    |\n LL |     let duration = Instant::now() - prev_instant;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `prev_instant.elapsed()`\n    |\n    = note: `-D clippy::manual-instant-elapsed` implied by `-D warnings`\n \n error: manual implementation of `Instant::elapsed`\n-  --> $DIR/manual_instant_elapsed.rs:26:5\n+  --> $DIR/manual_instant_elapsed.rs:27:5\n    |\n LL |     Instant::now() - *ref_to_instant; // to ensure parens are added correctly\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(*ref_to_instant).elapsed()`"}, {"sha": "a0e49a8beb1ede7fba56edf5405971721939ccdf", "filename": "tests/ui/unchecked_duration_subtraction.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Funchecked_duration_subtraction.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Funchecked_duration_subtraction.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funchecked_duration_subtraction.fixed?ref=5b0d727bada20ebc0ab8fe780456b29df9a475bc", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+#![warn(clippy::unchecked_duration_subtraction)]\n+\n+use std::time::{Duration, Instant};\n+\n+fn main() {\n+    let _first = Instant::now();\n+    let second = Duration::from_secs(3);\n+\n+    let _ = _first.checked_sub(second).unwrap();\n+\n+    let _ = Instant::now().checked_sub(Duration::from_secs(5)).unwrap();\n+\n+    let _ = _first.checked_sub(Duration::from_secs(5)).unwrap();\n+\n+    let _ = Instant::now().checked_sub(second).unwrap();\n+}"}, {"sha": "a14a7ea57cc5052766486d7fbe62a9c363054e5e", "filename": "tests/ui/unchecked_duration_subtraction.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Funchecked_duration_subtraction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Funchecked_duration_subtraction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funchecked_duration_subtraction.rs?ref=5b0d727bada20ebc0ab8fe780456b29df9a475bc", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+#![warn(clippy::unchecked_duration_subtraction)]\n+\n+use std::time::{Duration, Instant};\n+\n+fn main() {\n+    let _first = Instant::now();\n+    let second = Duration::from_secs(3);\n+\n+    let _ = _first - second;\n+\n+    let _ = Instant::now() - Duration::from_secs(5);\n+\n+    let _ = _first - Duration::from_secs(5);\n+\n+    let _ = Instant::now() - second;\n+}"}, {"sha": "a2e0aa1d7c0892142e7ace042167613343619873", "filename": "tests/ui/unchecked_duration_subtraction.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Funchecked_duration_subtraction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d727bada20ebc0ab8fe780456b29df9a475bc/tests%2Fui%2Funchecked_duration_subtraction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funchecked_duration_subtraction.stderr?ref=5b0d727bada20ebc0ab8fe780456b29df9a475bc", "patch": "@@ -0,0 +1,28 @@\n+error: unchecked subtraction of a 'Duration' from an 'Instant'\n+  --> $DIR/unchecked_duration_subtraction.rs:10:13\n+   |\n+LL |     let _ = _first - second;\n+   |             ^^^^^^^^^^^^^^^ help: try: `_first.checked_sub(second).unwrap()`\n+   |\n+   = note: `-D clippy::unchecked-duration-subtraction` implied by `-D warnings`\n+\n+error: unchecked subtraction of a 'Duration' from an 'Instant'\n+  --> $DIR/unchecked_duration_subtraction.rs:12:13\n+   |\n+LL |     let _ = Instant::now() - Duration::from_secs(5);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Instant::now().checked_sub(Duration::from_secs(5)).unwrap()`\n+\n+error: unchecked subtraction of a 'Duration' from an 'Instant'\n+  --> $DIR/unchecked_duration_subtraction.rs:14:13\n+   |\n+LL |     let _ = _first - Duration::from_secs(5);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `_first.checked_sub(Duration::from_secs(5)).unwrap()`\n+\n+error: unchecked subtraction of a 'Duration' from an 'Instant'\n+  --> $DIR/unchecked_duration_subtraction.rs:16:13\n+   |\n+LL |     let _ = Instant::now() - second;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Instant::now().checked_sub(second).unwrap()`\n+\n+error: aborting due to 4 previous errors\n+"}]}