{"sha": "a192e5d9c2e90798ffcd0bc79527cdc4ad52d949", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOTJlNWQ5YzJlOTA3OThmZmNkMGJjNzk1MjdjZGM0YWQ1MmQ5NDk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-02T20:21:43Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-24T19:10:18Z"}, "message": "Normalize `<X as Y>::T` for rustdoc\n\n- Only run for `QPath::Resolved` with `Some` self parameter (`<X as Y>::T`)\n- Fall back to the previous behavior if the path can't be resolved\n- Show what the behavior is if the type can't be normalized\n- Run `resolve_vars_if_possible`\n\n  It's not clear whether or not this is necessary. See\n  https://github.com/rust-lang/rust/pull/77616 for more context.\n\n- Add a test for cross-crate re-exports\n- Use the same code for both `hir::Ty` and `Ty`", "tree": {"sha": "ea073583d72feb030ed92291a7d5a9c033357788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea073583d72feb030ed92291a7d5a9c033357788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a192e5d9c2e90798ffcd0bc79527cdc4ad52d949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a192e5d9c2e90798ffcd0bc79527cdc4ad52d949", "html_url": "https://github.com/rust-lang/rust/commit/a192e5d9c2e90798ffcd0bc79527cdc4ad52d949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a192e5d9c2e90798ffcd0bc79527cdc4ad52d949/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f60ee0ccd90d41a978eb3c1c0cc83bceb330bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f60ee0ccd90d41a978eb3c1c0cc83bceb330bc8", "html_url": "https://github.com/rust-lang/rust/commit/7f60ee0ccd90d41a978eb3c1c0cc83bceb330bc8"}], "stats": {"total": 132, "additions": 120, "deletions": 12}, "files": [{"sha": "b89fa1f7a0187ee8fbdc8771dfbcbc472ac05704", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 45, "deletions": 12, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a192e5d9c2e90798ffcd0bc79527cdc4ad52d949/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a192e5d9c2e90798ffcd0bc79527cdc4ad52d949/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a192e5d9c2e90798ffcd0bc79527cdc4ad52d949", "patch": "@@ -1290,6 +1290,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &DocContext<'_>) -> Type {\n         hir::TyKind::Path(qpath) => qpath,\n         _ => unreachable!(),\n     };\n+\n     match qpath {\n         hir::QPath::Resolved(None, ref path) => {\n             if let Res::Def(DefKind::TyParam, did) = path.res {\n@@ -1393,6 +1394,12 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &DocContext<'_>) -> Type {\n             resolve_type(cx, path.clean(cx), hir_id)\n         }\n         hir::QPath::Resolved(Some(ref qself), ref p) => {\n+            // Try to normalize `<X as Y>::T` to a type\n+            let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n+            if let Some(normalized_value) = normalize(cx.tcx, ty) {\n+                return normalized_value.clean(cx);\n+            }\n+\n             let segments = if p.is_global() { &p.segments[1..] } else { &p.segments };\n             let trait_segments = &segments[..segments.len() - 1];\n             let trait_path = self::Path {\n@@ -1410,18 +1417,12 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &DocContext<'_>) -> Type {\n             }\n         }\n         hir::QPath::TypeRelative(ref qself, ref segment) => {\n-            let mut res = Res::Err;\n-            /*\n-            let hir_ty = hir::Ty {\n-                kind: hir::TyKind::Path((*qpath).clone()),\n-                hir_id,\n-                span,\n-            };\n-            */\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n-            if let ty::Projection(proj) = ty.kind() {\n-                res = Res::Def(DefKind::Trait, proj.trait_ref(cx.tcx).def_id);\n-            }\n+            let res = if let ty::Projection(proj) = ty.kind() {\n+                Res::Def(DefKind::Trait, proj.trait_ref(cx.tcx).def_id)\n+            } else {\n+                Res::Err\n+            };\n             let trait_path = hir::Path { span, res, segments: &[] };\n             Type::QPath {\n                 name: segment.ident.name.clean(cx),\n@@ -1496,10 +1497,42 @@ impl Clean<Type> for hir::Ty<'_> {\n     }\n }\n \n+/// Returns `None` if the type could not be normalized\n+fn normalize(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+    use crate::rustc_trait_selection::infer::TyCtxtInferExt;\n+    use crate::rustc_trait_selection::traits::query::normalize::AtExt;\n+    use rustc_middle::traits::ObligationCause;\n+    use rustc_middle::ty::ParamEnv;\n+\n+    // Try to normalize `<X as Y>::T` to a type\n+    // FIXME: rustdoc won't be able to perform 'partial' normalization\n+    // until this param env is actually correct\n+    // 'partial': `<Vec<T> as IntoIterator>::IntoIter>` -> `vec::IntoIter<T>`\n+    let param_env = ParamEnv::empty();\n+    let lifted = ty.lift_to_tcx(tcx).unwrap();\n+    let normalized = tcx.infer_ctxt().enter(|infcx| {\n+        infcx\n+            .at(&ObligationCause::dummy(), param_env)\n+            .normalize(lifted)\n+            .map(|resolved| infcx.resolve_vars_if_possible(resolved.value))\n+    });\n+    match normalized {\n+        Ok(normalized_value) => {\n+            debug!(\"resolved {:?} to {:?}\", ty, normalized_value);\n+            Some(normalized_value)\n+        }\n+        Err(err) => {\n+            debug!(\"failed to resolve {:?}: {:?}\", ty, err);\n+            None\n+        }\n+    }\n+}\n+\n impl<'tcx> Clean<Type> for Ty<'tcx> {\n     fn clean(&self, cx: &DocContext<'_>) -> Type {\n         debug!(\"cleaning type: {:?}\", self);\n-        match *self.kind() {\n+        let ty = normalize(cx.tcx, self.lift_to_tcx(cx.tcx).unwrap()).unwrap_or(self);\n+        match *ty.kind() {\n             ty::Never => Never,\n             ty::Bool => Primitive(PrimitiveType::Bool),\n             ty::Char => Primitive(PrimitiveType::Char),"}, {"sha": "fbd111c3035662e7894695b022c135bab7c30a50", "filename": "src/test/rustdoc/auxiliary/normalize-assoc-item.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a192e5d9c2e90798ffcd0bc79527cdc4ad52d949/src%2Ftest%2Frustdoc%2Fauxiliary%2Fnormalize-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a192e5d9c2e90798ffcd0bc79527cdc4ad52d949/src%2Ftest%2Frustdoc%2Fauxiliary%2Fnormalize-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fnormalize-assoc-item.rs?ref=a192e5d9c2e90798ffcd0bc79527cdc4ad52d949", "patch": "@@ -0,0 +1,12 @@\n+#![crate_name = \"inner\"]\n+pub trait MyTrait {\n+    type Y;\n+}\n+\n+impl MyTrait for u32 {\n+    type Y = i32;\n+}\n+\n+pub fn foo() -> <u32 as MyTrait>::Y {\n+    0\n+}"}, {"sha": "829f446b7cc6d4269bfd8a46b329e4b82f18013b", "filename": "src/test/rustdoc/normalize-assoc-item.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a192e5d9c2e90798ffcd0bc79527cdc4ad52d949/src%2Ftest%2Frustdoc%2Fnormalize-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a192e5d9c2e90798ffcd0bc79527cdc4ad52d949/src%2Ftest%2Frustdoc%2Fnormalize-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnormalize-assoc-item.rs?ref=a192e5d9c2e90798ffcd0bc79527cdc4ad52d949", "patch": "@@ -0,0 +1,63 @@\n+// ignore-tidy-linelength\n+// aux-build:normalize-assoc-item.rs\n+// build-aux-docs\n+\n+pub trait Trait {\n+    type X;\n+}\n+\n+impl Trait for usize {\n+    type X = isize;\n+}\n+\n+// @has 'normalize_assoc_item/fn.f.html' '//pre[@class=\"rust fn\"]' 'pub fn f() -> isize'\n+pub fn f() -> <usize as Trait>::X {\n+    0\n+}\n+\n+pub struct S {\n+    // @has 'normalize_assoc_item/struct.S.html' '//span[@id=\"structfield.box_me_up\"]' 'box_me_up: Box<S>'\n+    pub box_me_up: <S as Trait>::X,\n+    // @has 'normalize_assoc_item/struct.S.html' '//span[@id=\"structfield.generic\"]' 'generic: (usize, isize)'\n+    pub generic: <Generic<usize> as Trait>::X,\n+}\n+\n+impl Trait for S {\n+    type X = Box<S>;\n+}\n+\n+pub struct Generic<Inner>(Inner);\n+\n+impl<Inner: Trait> Trait for Generic<Inner> {\n+    type X = (Inner, Inner::X);\n+}\n+\n+// These can't be normalized because they depend on a generic parameter.\n+// However the user can choose whether the text should be displayed as `Inner::X` or `<Inner as Trait>::X`.\n+\n+// @has 'normalize_assoc_item/struct.Unknown.html' '//pre[@class=\"rust struct\"]' 'pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);'\n+pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);\n+\n+// @has 'normalize_assoc_item/struct.Unknown2.html' '//pre[@class=\"rust struct\"]' 'pub struct Unknown2<Inner: Trait>(pub Inner::X);'\n+pub struct Unknown2<Inner: Trait>(pub Inner::X);\n+\n+trait Lifetimes<'a> {\n+    type Y;\n+}\n+\n+impl<'a> Lifetimes<'a> for usize {\n+    type Y = &'a isize;\n+}\n+\n+// @has 'normalize_assoc_item/fn.g.html' '//pre[@class=\"rust fn\"]' \"pub fn g() -> &isize\"\n+pub fn g() -> <usize as Lifetimes<'static>>::Y {\n+    &0\n+}\n+\n+// @has 'normalize_assoc_item/constant.A.html' '//pre[@class=\"rust const\"]' \"pub const A: &isize\"\n+pub const A: <usize as Lifetimes<'static>>::Y = &0;\n+\n+// test cross-crate re-exports\n+extern crate inner;\n+// @has 'normalize_assoc_item/fn.foo.html' '//pre[@class=\"rust fn\"]' \"pub fn foo() -> i32\"\n+pub use inner::foo;"}]}