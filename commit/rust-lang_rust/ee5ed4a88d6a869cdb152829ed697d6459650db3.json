{"sha": "ee5ed4a88d6a869cdb152829ed697d6459650db3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNWVkNGE4OGQ2YTg2OWNkYjE1MjgyOWVkNjk3ZDY0NTk2NTBkYjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-14T12:49:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-14T12:49:45Z"}, "message": "Auto merge of #87118 - JohnTitor:rollup-8ltidsq, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #87085 (Search result colors)\n - #87090 (Make BTreeSet::split_off name elements like other set methods do)\n - #87098 (Unignore some pretty printing tests)\n - #87099 (Upgrade `cc` crate to 1.0.69)\n - #87101 (Suggest a path separator if a stray colon is found in a match arm)\n - #87102 (Add GUI test for \"go to first\" feature)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5b1b52d013354284696ad275e73a78d6152c917c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b1b52d013354284696ad275e73a78d6152c917c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee5ed4a88d6a869cdb152829ed697d6459650db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5ed4a88d6a869cdb152829ed697d6459650db3", "html_url": "https://github.com/rust-lang/rust/commit/ee5ed4a88d6a869cdb152829ed697d6459650db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee5ed4a88d6a869cdb152829ed697d6459650db3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a08f25a7ef2800af5525762e981c24d96c14febe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a08f25a7ef2800af5525762e981c24d96c14febe", "html_url": "https://github.com/rust-lang/rust/commit/a08f25a7ef2800af5525762e981c24d96c14febe"}, {"sha": "afaca5ba79adeef77fea8c037c7449cbd1e77faa", "url": "https://api.github.com/repos/rust-lang/rust/commits/afaca5ba79adeef77fea8c037c7449cbd1e77faa", "html_url": "https://github.com/rust-lang/rust/commit/afaca5ba79adeef77fea8c037c7449cbd1e77faa"}], "stats": {"total": 335, "additions": 296, "deletions": 39}, "files": [{"sha": "6885ac65ca919512ebd70a301287f0882c3c1996", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -435,9 +435,9 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.68\"\n+version = \"1.0.69\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4a72c244c1ff497a746a7e1fb3d14bd08420ecda70c8f25c7112f2781652d787\"\n+checksum = \"e70cc2f62c6ce1868963827bd677764c62d07c3d9a3e1fb1177ee1a9ab199eb2\"\n dependencies = [\n  \"jobserver\",\n ]"}, {"sha": "6a6f93d50d364b9a054da86e481dcbc9fb62537d", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -9,7 +9,7 @@ test = false\n \n [dependencies]\n bitflags = \"1.2.1\"\n-cc = \"1.0.68\"\n+cc = \"1.0.69\"\n itertools = \"0.9\"\n tracing = \"0.1\"\n libc = \"0.2.50\""}, {"sha": "1ab7e15019eff152d90ab91b79a8f159d3535cc8", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -22,7 +22,9 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, FatalError, PResult};\n use rustc_feature::Features;\n-use rustc_parse::parser::{AttemptLocalParseRecovery, ForceCollect, Parser, RecoverComma};\n+use rustc_parse::parser::{\n+    AttemptLocalParseRecovery, ForceCollect, Parser, RecoverColon, RecoverComma,\n+};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -930,9 +932,11 @@ pub fn parse_ast_fragment<'a>(\n             }\n         }\n         AstFragmentKind::Ty => AstFragment::Ty(this.parse_ty()?),\n-        AstFragmentKind::Pat => {\n-            AstFragment::Pat(this.parse_pat_allow_top_alt(None, RecoverComma::No)?)\n-        }\n+        AstFragmentKind::Pat => AstFragment::Pat(this.parse_pat_allow_top_alt(\n+            None,\n+            RecoverComma::No,\n+            RecoverColon::Yes,\n+        )?),\n         AstFragmentKind::Arms\n         | AstFragmentKind::Fields\n         | AstFragmentKind::FieldPats"}, {"sha": "1bfa489d39eeafc5e8d19d864c06ccbe44d7e5b3", "filename": "compiler/rustc_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2FCargo.toml?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -13,4 +13,4 @@ libc = \"0.2.73\"\n \n [build-dependencies]\n build_helper = { path = \"../../src/build_helper\" }\n-cc = \"1.0.68\"\n+cc = \"1.0.69\""}, {"sha": "47fdd852d90de0e503f1996a413902d015935e10", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -1,4 +1,4 @@\n-use super::pat::{RecoverComma, PARAM_EXPECTED};\n+use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, BlockMode, ForceCollect, Parser, PathStyle, Restrictions, TokenType};\n use super::{SemiColonMode, SeqSep, TokenExpectType, TrailingToken};\n@@ -1813,7 +1813,7 @@ impl<'a> Parser<'a> {\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_token.span;\n-        let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes)?;\n+        let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;\n         self.expect(&token::Eq)?;\n         let expr = self.with_res(self.restrictions | Restrictions::NO_STRUCT_LITERAL, |this| {\n             this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n@@ -1876,7 +1876,7 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes)?;\n+        let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;\n         if !self.eat_keyword(kw::In) {\n             self.error_missing_in_for_loop();\n         }\n@@ -2083,7 +2083,7 @@ impl<'a> Parser<'a> {\n         let attrs = self.parse_outer_attributes()?;\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n             let lo = this.token.span;\n-            let pat = this.parse_pat_allow_top_alt(None, RecoverComma::Yes)?;\n+            let pat = this.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;\n             let guard = if this.eat_keyword(kw::If) {\n                 let if_span = this.prev_token.span;\n                 let cond = this.parse_expr()?;"}, {"sha": "51d4e007b5984c21c7ec96e72d4740b80587a6e3", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -14,7 +14,7 @@ use crate::lexer::UnmatchedBrace;\n pub use attr_wrapper::AttrWrapper;\n pub use diagnostics::AttemptLocalParseRecovery;\n use diagnostics::Error;\n-pub use pat::RecoverComma;\n+pub use pat::{RecoverColon, RecoverComma};\n pub use path::PathStyle;\n \n use rustc_ast::ptr::P;"}, {"sha": "313d9db58fc3febec5eb8010f23fd02cdb2f589e", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -5,7 +5,7 @@ use rustc_ast_pretty::pprust;\n use rustc_errors::PResult;\n use rustc_span::symbol::{kw, Ident};\n \n-use crate::parser::pat::RecoverComma;\n+use crate::parser::pat::{RecoverColon, RecoverComma};\n use crate::parser::{FollowedByType, ForceCollect, Parser, PathStyle};\n \n impl<'a> Parser<'a> {\n@@ -125,7 +125,7 @@ impl<'a> Parser<'a> {\n                 token::NtPat(self.collect_tokens_no_attrs(|this| match kind {\n                     NonterminalKind::PatParam { .. } => this.parse_pat_no_top_alt(None),\n                     NonterminalKind::PatWithOr { .. } => {\n-                        this.parse_pat_allow_top_alt(None, RecoverComma::No)\n+                        this.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)\n                     }\n                     _ => unreachable!(),\n                 })?)"}, {"sha": "e047dae15973ec416cf1241ac7b9daa2ed644414", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 70, "deletions": 8, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -24,6 +24,13 @@ pub enum RecoverComma {\n     No,\n }\n \n+/// Whether or not to recover a `:` when parsing patterns that were meant to be paths.\n+#[derive(PartialEq, Copy, Clone)]\n+pub enum RecoverColon {\n+    Yes,\n+    No,\n+}\n+\n /// The result of `eat_or_separator`. We want to distinguish which case we are in to avoid\n /// emitting duplicate diagnostics.\n #[derive(Debug, Clone, Copy)]\n@@ -58,8 +65,9 @@ impl<'a> Parser<'a> {\n         &mut self,\n         expected: Expected,\n         rc: RecoverComma,\n+        ra: RecoverColon,\n     ) -> PResult<'a, P<Pat>> {\n-        self.parse_pat_allow_top_alt_inner(expected, rc).map(|(pat, _)| pat)\n+        self.parse_pat_allow_top_alt_inner(expected, rc, ra).map(|(pat, _)| pat)\n     }\n \n     /// Returns the pattern and a bool indicating whether we recovered from a trailing vert (true =\n@@ -68,6 +76,7 @@ impl<'a> Parser<'a> {\n         &mut self,\n         expected: Expected,\n         rc: RecoverComma,\n+        ra: RecoverColon,\n     ) -> PResult<'a, (P<Pat>, bool)> {\n         // Keep track of whether we recovered from a trailing vert so that we can avoid duplicated\n         // suggestions (which bothers rustfix).\n@@ -89,6 +98,56 @@ impl<'a> Parser<'a> {\n             // If we parsed a leading `|` which should be gated,\n             // then we should really gate the leading `|`.\n             // This complicated procedure is done purely for diagnostics UX.\n+            let mut first_pat = first_pat;\n+\n+            if let (RecoverColon::Yes, token::Colon) = (ra, &self.token.kind) {\n+                if matches!(\n+                    first_pat.kind,\n+                    PatKind::Ident(BindingMode::ByValue(Mutability::Not), _, None)\n+                        | PatKind::Path(..)\n+                ) && self.look_ahead(1, |token| token.is_ident() && !token.is_reserved_ident())\n+                {\n+                    // The pattern looks like it might be a path with a `::` -> `:` typo:\n+                    // `match foo { bar:baz => {} }`\n+                    let span = self.token.span;\n+                    // We only emit \"unexpected `:`\" error here if we can successfully parse the\n+                    // whole pattern correctly in that case.\n+                    let snapshot = self.clone();\n+\n+                    // Create error for \"unexpected `:`\".\n+                    match self.expected_one_of_not_found(&[], &[]) {\n+                        Err(mut err) => {\n+                            self.bump(); // Skip the `:`.\n+                            match self.parse_pat_no_top_alt(expected) {\n+                                Err(mut inner_err) => {\n+                                    // Carry on as if we had not done anything, callers will emit a\n+                                    // reasonable error.\n+                                    inner_err.cancel();\n+                                    err.cancel();\n+                                    *self = snapshot;\n+                                }\n+                                Ok(pat) => {\n+                                    // We've parsed the rest of the pattern.\n+                                    err.span_suggestion(\n+                                        span,\n+                                        \"maybe write a path separator here\",\n+                                        \"::\".to_string(),\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                    err.emit();\n+                                    first_pat =\n+                                        self.mk_pat(first_pat.span.to(pat.span), PatKind::Wild);\n+                                }\n+                            }\n+                        }\n+                        _ => {\n+                            // Carry on as if we had not done anything. This should be unreachable.\n+                            *self = snapshot;\n+                        }\n+                    };\n+                }\n+            }\n+\n             if let Some(leading_vert_span) = leading_vert_span {\n                 // If there was a leading vert, treat this as an or-pattern. This improves\n                 // diagnostics.\n@@ -140,7 +199,8 @@ impl<'a> Parser<'a> {\n         // We use `parse_pat_allow_top_alt` regardless of whether we actually want top-level\n         // or-patterns so that we can detect when a user tries to use it. This allows us to print a\n         // better error message.\n-        let (pat, trailing_vert) = self.parse_pat_allow_top_alt_inner(expected, rc)?;\n+        let (pat, trailing_vert) =\n+            self.parse_pat_allow_top_alt_inner(expected, rc, RecoverColon::No)?;\n         let colon = self.eat(&token::Colon);\n \n         if let PatKind::Or(pats) = &pat.kind {\n@@ -350,7 +410,7 @@ impl<'a> Parser<'a> {\n         } else if self.check(&token::OpenDelim(token::Bracket)) {\n             // Parse `[pat, pat,...]` as a slice pattern.\n             let (pats, _) = self.parse_delim_comma_seq(token::Bracket, |p| {\n-                p.parse_pat_allow_top_alt(None, RecoverComma::No)\n+                p.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)\n             })?;\n             PatKind::Slice(pats)\n         } else if self.check(&token::DotDot) && !self.is_pat_range_end_start(1) {\n@@ -563,8 +623,9 @@ impl<'a> Parser<'a> {\n \n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n-        let (fields, trailing_comma) =\n-            self.parse_paren_comma_seq(|p| p.parse_pat_allow_top_alt(None, RecoverComma::No))?;\n+        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n+            p.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)\n+        })?;\n \n         // Here, `(pat,)` is a tuple pattern.\n         // For backward compatibility, `(..)` is a tuple pattern as well.\n@@ -873,8 +934,9 @@ impl<'a> Parser<'a> {\n \n     /// Parse tuple struct or tuple variant pattern (e.g. `Foo(...)` or `Foo::Bar(...)`).\n     fn parse_pat_tuple_struct(&mut self, qself: Option<QSelf>, path: Path) -> PResult<'a, PatKind> {\n-        let (fields, _) =\n-            self.parse_paren_comma_seq(|p| p.parse_pat_allow_top_alt(None, RecoverComma::No))?;\n+        let (fields, _) = self.parse_paren_comma_seq(|p| {\n+            p.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)\n+        })?;\n         if qself.is_some() {\n             self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);\n         }\n@@ -1033,7 +1095,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form `fieldname: pat`.\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat_allow_top_alt(None, RecoverComma::No)?;\n+            let pat = self.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}, {"sha": "be740b05fb8ee78b96fce064f7337e63797c45bc", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -903,8 +903,8 @@ impl<T> BTreeSet<T> {\n         self.map.append(&mut other.map);\n     }\n \n-    /// Splits the collection into two at the given key. Returns everything after the given key,\n-    /// including the key.\n+    /// Splits the collection into two at the given value. Returns everything after the given value,\n+    /// including the value.\n     ///\n     /// # Examples\n     ///\n@@ -933,11 +933,11 @@ impl<T> BTreeSet<T> {\n     /// assert!(b.contains(&41));\n     /// ```\n     #[stable(feature = \"btree_split_off\", since = \"1.11.0\")]\n-    pub fn split_off<Q: ?Sized + Ord>(&mut self, key: &Q) -> Self\n+    pub fn split_off<Q: ?Sized + Ord>(&mut self, value: &Q) -> Self\n     where\n         T: Borrow<Q> + Ord,\n     {\n-        BTreeSet { map: self.map.split_off(key) }\n+        BTreeSet { map: self.map.split_off(value) }\n     }\n \n     /// Creates an iterator that visits all values in ascending order and uses a closure"}, {"sha": "b7ab4f19f0ad9ea8d828afa3a0f5f52ac4d7e0df", "filename": "library/profiler_builtins/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/library%2Fprofiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/library%2Fprofiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fprofiler_builtins%2FCargo.toml?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -14,4 +14,4 @@ core = { path = \"../core\" }\n compiler_builtins = { version = \"0.1.0\", features = ['rustc-dep-of-std'] }\n \n [build-dependencies]\n-cc = \"1.0.68\"\n+cc = \"1.0.69\""}, {"sha": "031d2942c51adf9a8287494ee9aa24bda33f3058", "filename": "library/unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/library%2Funwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/library%2Funwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2FCargo.toml?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -21,7 +21,7 @@ compiler_builtins = \"0.1.0\"\n cfg-if = \"0.1.8\"\n \n [build-dependencies]\n-cc = \"1.0.68\"\n+cc = \"1.0.69\"\n \n [features]\n "}, {"sha": "64f022b4e8daec7b00395b5475311658dd8c1418", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -40,7 +40,7 @@ cmake = \"0.1.38\"\n filetime = \"0.2\"\n num_cpus = \"1.0\"\n getopts = \"0.2.19\"\n-cc = \"1.0.68\"\n+cc = \"1.0.69\"\n libc = \"0.2\"\n serde = { version = \"1.0.8\", features = [\"derive\"] }\n serde_json = \"1.0.2\""}, {"sha": "9da3fe07adea0a0b4b6daeb227349f489985bfe2", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -161,7 +161,7 @@ pre, .rustdoc.source .example-wrap {\n .search-results a {\n \tcolor: #0096cf;\n }\n-.search-results a span.desc {\n+.search-results a div.desc {\n \tcolor: #c5c5c5;\n }\n \n@@ -286,7 +286,7 @@ details.undocumented > summary::before {\n \tcolor: grey;\n }\n \n-tr.result span.primitive::after, tr.result span.keyword::after {\n+.result-name .primitive > i, .result-name .keyword > i {\n \tcolor: #788797;\n }\n "}, {"sha": "599fb942dbe2a35c420e38d2939542c06718b581", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -247,7 +247,7 @@ details.undocumented > summary::before {\n \tcolor: grey;\n }\n \n-tr.result span.primitive::after, tr.result span.keyword::after {\n+.result-name .primitive > i, .result-name .keyword > i {\n \tcolor: #ddd;\n }\n "}, {"sha": "0c2799727f3e30d71243807c12ebfd40f9b3a92c", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -237,7 +237,7 @@ details.undocumented > summary::before {\n \tcolor: grey;\n }\n \n-tr.result span.primitive::after, tr.result span.keyword::after {\n+.result-name .primitive > i, .result-name .keyword > i {\n \tcolor: black;\n }\n "}, {"sha": "bb8ecb98fa3872bbfba2a9d6b99b8a58c4ea7334", "filename": "src/test/rustdoc-gui/search-result-color.goml", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -0,0 +1,41 @@\n+// The goal of this test is to ensure the color of the text is the one expected.\n+goto: file://|DOC_PATH|/test_docs/index.html?search=coo\n+\n+// This is needed so that the text color is computed.\n+show-text: true\n+\n+// Ayu theme\n+local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-preferred-dark-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-css: (\"//*[@class='desc']//*[text()='Just a normal struct.']\", {\"color\": \"rgb(197, 197, 197)\"})\n+assert-css: (\"//*[@class='result-name']/*[text()='test_docs::']\", {\"color\": \"rgb(0, 150, 207)\"})\n+\n+// Checking the color for \"keyword\".\n+assert-css: (\"//*[@class='result-name']//*[text()='(keyword)']\", {\"color\": \"rgb(120, 135, 151)\"})\n+\n+// Dark theme\n+local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-css: (\"//*[@class='desc']//*[text()='Just a normal struct.']\", {\"color\": \"rgb(221, 221, 221)\"})\n+assert-css: (\"//*[@class='result-name']/*[text()='test_docs::']\", {\"color\": \"rgb(221, 221, 221)\"})\n+\n+// Checking the color for \"keyword\".\n+assert-css: (\"//*[@class='result-name']//*[text()='(keyword)']\", {\"color\": \"rgb(221, 221, 221)\"})\n+\n+// Light theme\n+local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-css: (\"//*[@class='desc']//*[text()='Just a normal struct.']\", {\"color\": \"rgb(0, 0, 0)\"})\n+assert-css: (\"//*[@class='result-name']/*[text()='test_docs::']\", {\"color\": \"rgb(0, 0, 0)\"})\n+\n+// Checking the color for \"keyword\".\n+assert-css: (\"//*[@class='result-name']//*[text()='(keyword)']\", {\"color\": \"rgb(0, 0, 0)\"})"}, {"sha": "5d709f6588118690f94664cba083098d2262cbea", "filename": "src/test/rustdoc-gui/search-result-go-to-first.goml", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Frustdoc-gui%2Fsearch-result-go-to-first.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Frustdoc-gui%2Fsearch-result-go-to-first.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-go-to-first.goml?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -0,0 +1,20 @@\n+// This test ensures that the \"go_to_first\" feature is working as expected.\n+\n+// First, we check that the first page doesn't have the string we're looking for to ensure\n+// that the feature is changing page as expected.\n+goto: file://|DOC_PATH|/test_docs/index.html\n+assert-text-false: (\".fqn .in-band\", \"Struct test_docs::Foo\")\n+\n+// We now check that we land on the search result page if \"go_to_first\" isn't set.\n+goto: file://|DOC_PATH|/test_docs/index.html?search=struct%3AFoo\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-text-false: (\".fqn .in-band\", \"Struct test_docs::Foo\")\n+// Ensure that the search results are displayed, not the \"normal\" content.\n+assert-css: (\"#main\", {\"display\": \"none\"})\n+\n+// Now we can check that the feature is working as expected!\n+goto: file://|DOC_PATH|/test_docs/index.html?search=struct%3AFoo&go_to_first=true\n+// Waiting for the page to load...\n+wait-for: 500\n+assert-text: (\".fqn .in-band\", \"Struct test_docs::Foo\")"}, {"sha": "1b9f652120e9465edd16eb88c1766e5a783f6b44", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -101,6 +101,7 @@ pub enum AnEnum {\n }\n \n #[doc(keyword = \"CookieMonster\")]\n+/// Some keyword.\n pub mod keyword {}\n \n /// Just some type alias."}, {"sha": "cfd8b2191ac38ed8d66aeacb4e7f4b0f0a3496a1", "filename": "src/test/ui/issues/issue-20427.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fissues%2Fissue-20427.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fissues%2Fissue-20427.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20427.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -7,7 +7,6 @@\n #![allow(deprecated, deprecated_in_future)]\n \n // aux-build:i8.rs\n-// ignore-pretty issue #37201\n \n extern crate i8;\n use std::string as i16;"}, {"sha": "292a0ae298dcf17c4bca6c69a20107ada2a78cf3", "filename": "src/test/ui/issues/issue-22992.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fissues%2Fissue-22992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fissues%2Fissue-22992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22992.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37201\n \n struct X { val: i32 }\n impl std::ops::Deref for X {"}, {"sha": "a99f260dde3b260f871dcc2a1ee92c4ee5ce315d", "filename": "src/test/ui/issues/issue-23338-ensure-param-drop-order.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fissues%2Fissue-23338-ensure-param-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fissues%2Fissue-23338-ensure-param-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23338-ensure-param-drop-order.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n #![allow(non_upper_case_globals)]\n \n-// ignore-pretty issue #37201\n-\n // This test is ensuring that parameters are indeed dropped after\n // temporaries in a fn body.\n "}, {"sha": "ab54af29bd6b9bd23427342b1029e3f5db4576ae", "filename": "src/test/ui/issues/issue-27401-dropflag-reinit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fissues%2Fissue-27401-dropflag-reinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fissues%2Fissue-27401-dropflag-reinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27401-dropflag-reinit.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37201\n \n // Check that when a `let`-binding occurs in a loop, its associated\n // drop-flag is reinitialized (to indicate \"needs-drop\" at the end of"}, {"sha": "4ee0b2054ff772dcc3c92ca5bbc99a06dc5ffb04", "filename": "src/test/ui/parser/issue-87086-colon-path-sep.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fparser%2Fissue-87086-colon-path-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fparser%2Fissue-87086-colon-path-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87086-colon-path-sep.rs?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -0,0 +1,66 @@\n+// Tests that a suggestion is issued if the user wrote a colon instead of\n+// a path separator in a match arm.\n+\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+\n+fn f() -> Foo { Foo::Bar }\n+\n+fn g1() {\n+    match f() {\n+        Foo:Bar => {}\n+        //~^ ERROR: expected one of\n+        //~| HELP: maybe write a path separator here\n+        _ => {}\n+    }\n+    match f() {\n+        Foo::Bar:Baz => {}\n+        //~^ ERROR: expected one of\n+        //~| HELP: maybe write a path separator here\n+        _ => {}\n+    }\n+    match f() {\n+        Foo:Bar::Baz => {}\n+        //~^ ERROR: expected one of\n+        //~| HELP: maybe write a path separator here\n+        _ => {}\n+    }\n+    match f() {\n+        Foo: Bar::Baz if true => {}\n+        //~^ ERROR: expected one of\n+        //~| HELP: maybe write a path separator here\n+        _ => {}\n+    }\n+    if let Bar:Baz = f() {\n+    //~^ ERROR: expected one of\n+    //~| HELP: maybe write a path separator here\n+    }\n+}\n+\n+fn g1_neg() {\n+    match f() {\n+        ref Foo: Bar::Baz => {}\n+        //~^ ERROR: expected one of\n+        _ => {}\n+    }\n+}\n+\n+fn g2_neg() {\n+    match f() {\n+        mut Foo: Bar::Baz => {}\n+        //~^ ERROR: expected one of\n+        _ => {}\n+    }\n+}\n+\n+fn main() {\n+    let myfoo = Foo::Bar;\n+    match myfoo {\n+        Foo::Bar => {}\n+        Foo:Bar::Baz => {}\n+        //~^ ERROR: expected one of\n+        //~| HELP: maybe write a path separator here\n+    }\n+}"}, {"sha": "8f93661a626467f7e85ef154140fbbbf292b15be", "filename": "src/test/ui/parser/issue-87086-colon-path-sep.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fparser%2Fissue-87086-colon-path-sep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee5ed4a88d6a869cdb152829ed697d6459650db3/src%2Ftest%2Fui%2Fparser%2Fissue-87086-colon-path-sep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87086-colon-path-sep.stderr?ref=ee5ed4a88d6a869cdb152829ed697d6459650db3", "patch": "@@ -0,0 +1,68 @@\n+error: expected one of `@` or `|`, found `:`\n+  --> $DIR/issue-87086-colon-path-sep.rs:13:12\n+   |\n+LL |         Foo:Bar => {}\n+   |            ^\n+   |            |\n+   |            expected one of `@` or `|`\n+   |            help: maybe write a path separator here: `::`\n+\n+error: expected one of `!`, `(`, `...`, `..=`, `..`, `::`, `{`, or `|`, found `:`\n+  --> $DIR/issue-87086-colon-path-sep.rs:19:17\n+   |\n+LL |         Foo::Bar:Baz => {}\n+   |                 ^\n+   |                 |\n+   |                 expected one of 8 possible tokens\n+   |                 help: maybe write a path separator here: `::`\n+\n+error: expected one of `@` or `|`, found `:`\n+  --> $DIR/issue-87086-colon-path-sep.rs:25:12\n+   |\n+LL |         Foo:Bar::Baz => {}\n+   |            ^\n+   |            |\n+   |            expected one of `@` or `|`\n+   |            help: maybe write a path separator here: `::`\n+\n+error: expected one of `@` or `|`, found `:`\n+  --> $DIR/issue-87086-colon-path-sep.rs:31:12\n+   |\n+LL |         Foo: Bar::Baz if true => {}\n+   |            ^\n+   |            |\n+   |            expected one of `@` or `|`\n+   |            help: maybe write a path separator here: `::`\n+\n+error: expected one of `@` or `|`, found `:`\n+  --> $DIR/issue-87086-colon-path-sep.rs:36:15\n+   |\n+LL |     if let Bar:Baz = f() {\n+   |               ^\n+   |               |\n+   |               expected one of `@` or `|`\n+   |               help: maybe write a path separator here: `::`\n+\n+error: expected one of `=>`, `@`, `if`, or `|`, found `:`\n+  --> $DIR/issue-87086-colon-path-sep.rs:44:16\n+   |\n+LL |         ref Foo: Bar::Baz => {}\n+   |                ^ expected one of `=>`, `@`, `if`, or `|`\n+\n+error: expected one of `=>`, `@`, `if`, or `|`, found `:`\n+  --> $DIR/issue-87086-colon-path-sep.rs:52:16\n+   |\n+LL |         mut Foo: Bar::Baz => {}\n+   |                ^ expected one of `=>`, `@`, `if`, or `|`\n+\n+error: expected one of `@` or `|`, found `:`\n+  --> $DIR/issue-87086-colon-path-sep.rs:62:12\n+   |\n+LL |         Foo:Bar::Baz => {}\n+   |            ^\n+   |            |\n+   |            expected one of `@` or `|`\n+   |            help: maybe write a path separator here: `::`\n+\n+error: aborting due to 8 previous errors\n+"}]}