{"sha": "5f0aefda49581aae96882552592a4881d2c099df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMGFlZmRhNDk1ODFhYWU5Njg4MjU1MjU5MmE0ODgxZDJjMDk5ZGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T21:08:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-30T21:08:47Z"}, "message": "Rollup merge of #72650 - GuillaumeGomez:sort-sidebar-elements, r=kinnison\n\nSort sidebar elements\n\nr? @kinnison", "tree": {"sha": "b8f2d331361da0194047bcb6cffa1199ae62e017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8f2d331361da0194047bcb6cffa1199ae62e017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f0aefda49581aae96882552592a4881d2c099df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0stgCRBK7hj4Ov3rIwAAdHIIABRMI5cLFPxeFVHAMOp0hoR9\nPbxtR+ATstUsZJdzcKyb012R3enoOlNU23kN8Lq3L9W6hU/SAU0FNCfRE0bZ5+wx\nMQgIrf8wntvV5Mf2SNyMRVXN9coAM3l/6qy78dq/KYGKb0IAQhFjO0RKKq2bgzCq\nxm3vqpjLpKddiAhHiiy1k6EI1DFwzcLpukHk3/hAAQv4MHadLSZijSJ8dmN88wTl\nPRJRHKrMcbe0aLd6UgfufctedtT8cazhg7tR7rTv05FD93gLp7IVYPRlqhHvZfCn\nnN/B5Jvi/6SZksoAqP1OBid0BEVFIAsIItl67GfnRG7KR4lMaIkAU5BTS4eYwDQ=\n=8Lh6\n-----END PGP SIGNATURE-----\n", "payload": "tree b8f2d331361da0194047bcb6cffa1199ae62e017\nparent 40fb1913e79bc2507c2eca1a458a3338db585de2\nparent 5ba5b653673faff60f15ad875cd22da6d0afc2bb\nauthor Ralf Jung <post@ralfj.de> 1590872927 +0200\ncommitter GitHub <noreply@github.com> 1590872927 +0200\n\nRollup merge of #72650 - GuillaumeGomez:sort-sidebar-elements, r=kinnison\n\nSort sidebar elements\n\nr? @kinnison\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f0aefda49581aae96882552592a4881d2c099df", "html_url": "https://github.com/rust-lang/rust/commit/5f0aefda49581aae96882552592a4881d2c099df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f0aefda49581aae96882552592a4881d2c099df/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40fb1913e79bc2507c2eca1a458a3338db585de2", "url": "https://api.github.com/repos/rust-lang/rust/commits/40fb1913e79bc2507c2eca1a458a3338db585de2", "html_url": "https://github.com/rust-lang/rust/commit/40fb1913e79bc2507c2eca1a458a3338db585de2"}, {"sha": "5ba5b653673faff60f15ad875cd22da6d0afc2bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba5b653673faff60f15ad875cd22da6d0afc2bb", "html_url": "https://github.com/rust-lang/rust/commit/5ba5b653673faff60f15ad875cd22da6d0afc2bb"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "5b364ed95cf59f26b5c2e607b14b8a202954478c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5f0aefda49581aae96882552592a4881d2c099df/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0aefda49581aae96882552592a4881d2c099df/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5f0aefda49581aae96882552592a4881d2c099df", "patch": "@@ -4067,9 +4067,9 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                 .filter(|i| i.inner_impl().trait_.is_none())\n                 .flat_map(move |i| get_methods(i.inner_impl(), false, used_links_bor, false))\n                 .collect::<Vec<_>>();\n-            // We want links' order to be reproducible so we don't use unstable sort.\n-            ret.sort();\n             if !ret.is_empty() {\n+                // We want links' order to be reproducible so we don't use unstable sort.\n+                ret.sort();\n                 out.push_str(&format!(\n                     \"<a class=\\\"sidebar-title\\\" href=\\\"#implementations\\\">Methods</a>\\\n                      <div class=\\\"sidebar-links\\\">{}</div>\",\n@@ -4240,7 +4240,7 @@ fn is_negative_impl(i: &clean::Impl) -> bool {\n fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n     let mut sidebar = String::new();\n \n-    let types = t\n+    let mut types = t\n         .items\n         .iter()\n         .filter_map(|m| match m.name {\n@@ -4249,8 +4249,8 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n             }\n             _ => None,\n         })\n-        .collect::<String>();\n-    let consts = t\n+        .collect::<Vec<_>>();\n+    let mut consts = t\n         .items\n         .iter()\n         .filter_map(|m| match m.name {\n@@ -4259,7 +4259,7 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n             }\n             _ => None,\n         })\n-        .collect::<String>();\n+        .collect::<Vec<_>>();\n     let mut required = t\n         .items\n         .iter()\n@@ -4282,32 +4282,34 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n         .collect::<Vec<String>>();\n \n     if !types.is_empty() {\n+        types.sort();\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#associated-types\\\">\\\n-                                   Associated Types</a><div class=\\\"sidebar-links\\\">{}</div>\",\n-            types\n+                Associated Types</a><div class=\\\"sidebar-links\\\">{}</div>\",\n+            types.join(\"\")\n         ));\n     }\n     if !consts.is_empty() {\n+        consts.sort();\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#associated-const\\\">\\\n-                                   Associated Constants</a><div class=\\\"sidebar-links\\\">{}</div>\",\n-            consts\n+                Associated Constants</a><div class=\\\"sidebar-links\\\">{}</div>\",\n+            consts.join(\"\")\n         ));\n     }\n     if !required.is_empty() {\n         required.sort();\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#required-methods\\\">\\\n-                                   Required Methods</a><div class=\\\"sidebar-links\\\">{}</div>\",\n+                Required Methods</a><div class=\\\"sidebar-links\\\">{}</div>\",\n             required.join(\"\")\n         ));\n     }\n     if !provided.is_empty() {\n         provided.sort();\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#provided-methods\\\">\\\n-                                   Provided Methods</a><div class=\\\"sidebar-links\\\">{}</div>\",\n+                Provided Methods</a><div class=\\\"sidebar-links\\\">{}</div>\",\n             provided.join(\"\")\n         ));\n     }\n@@ -4325,8 +4327,8 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n             res.sort();\n             sidebar.push_str(&format!(\n                 \"<a class=\\\"sidebar-title\\\" href=\\\"#foreign-impls\\\">\\\n-                                       Implementations on Foreign Types</a><div \\\n-                                       class=\\\"sidebar-links\\\">{}</div>\",\n+                    Implementations on Foreign Types</a><div \\\n+                    class=\\\"sidebar-links\\\">{}</div>\",\n                 res.into_iter()\n                     .map(|(name, id)| format!(\"<a href=\\\"#{}\\\">{}</a>\", id, Escape(&name)))\n                     .collect::<Vec<_>>()\n@@ -4339,7 +4341,7 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n     if t.auto {\n         sidebar.push_str(\n             \"<a class=\\\"sidebar-title\\\" \\\n-                          href=\\\"#synthetic-implementors\\\">Auto Implementors</a>\",\n+                href=\\\"#synthetic-implementors\\\">Auto Implementors</a>\",\n         );\n     }\n \n@@ -4365,18 +4367,18 @@ fn sidebar_typedef(buf: &mut Buffer, it: &clean::Item) {\n }\n \n fn get_struct_fields_name(fields: &[clean::Item]) -> String {\n-    fields\n+    let mut fields = fields\n         .iter()\n         .filter(|f| if let clean::StructFieldItem(..) = f.inner { true } else { false })\n         .filter_map(|f| match f.name {\n-            Some(ref name) => Some(format!(\n-                \"<a href=\\\"#structfield.{name}\\\">\\\n-                                              {name}</a>\",\n-                name = name\n-            )),\n+            Some(ref name) => {\n+                Some(format!(\"<a href=\\\"#structfield.{name}\\\">{name}</a>\", name = name))\n+            }\n             _ => None,\n         })\n-        .collect()\n+        .collect::<Vec<_>>();\n+    fields.sort();\n+    fields.join(\"\")\n }\n \n fn sidebar_union(buf: &mut Buffer, it: &clean::Item, u: &clean::Union) {\n@@ -4386,7 +4388,7 @@ fn sidebar_union(buf: &mut Buffer, it: &clean::Item, u: &clean::Union) {\n     if !fields.is_empty() {\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#fields\\\">Fields</a>\\\n-                                   <div class=\\\"sidebar-links\\\">{}</div>\",\n+             <div class=\\\"sidebar-links\\\">{}</div>\",\n             fields\n         ));\n     }\n@@ -4401,23 +4403,20 @@ fn sidebar_union(buf: &mut Buffer, it: &clean::Item, u: &clean::Union) {\n fn sidebar_enum(buf: &mut Buffer, it: &clean::Item, e: &clean::Enum) {\n     let mut sidebar = String::new();\n \n-    let variants = e\n+    let mut variants = e\n         .variants\n         .iter()\n         .filter_map(|v| match v.name {\n-            Some(ref name) => Some(format!(\n-                \"<a href=\\\"#variant.{name}\\\">{name}\\\n-                                                                 </a>\",\n-                name = name\n-            )),\n+            Some(ref name) => Some(format!(\"<a href=\\\"#variant.{name}\\\">{name}</a>\", name = name)),\n             _ => None,\n         })\n-        .collect::<String>();\n+        .collect::<Vec<_>>();\n     if !variants.is_empty() {\n+        variants.sort_unstable();\n         sidebar.push_str(&format!(\n             \"<a class=\\\"sidebar-title\\\" href=\\\"#variants\\\">Variants</a>\\\n-                                   <div class=\\\"sidebar-links\\\">{}</div>\",\n-            variants\n+             <div class=\\\"sidebar-links\\\">{}</div>\",\n+            variants.join(\"\"),\n         ));\n     }\n "}]}