{"sha": "c2b61fbafe53d655ec010471d8f4a3bf34c724bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYjYxZmJhZmU1M2Q2NTVlYzAxMDQ3MWQ4ZjRhM2JmMzRjNzI0YmQ=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-08-19T20:04:04Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-08-19T20:04:09Z"}, "message": "move code to `InferCtxt` method", "tree": {"sha": "2aa18abea50d092d1c3fdc176d658f903a70d0d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aa18abea50d092d1c3fdc176d658f903a70d0d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2b61fbafe53d655ec010471d8f4a3bf34c724bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b61fbafe53d655ec010471d8f4a3bf34c724bd", "html_url": "https://github.com/rust-lang/rust/commit/c2b61fbafe53d655ec010471d8f4a3bf34c724bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2b61fbafe53d655ec010471d8f4a3bf34c724bd/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab61e722eeb6c37b19f6ad6f53fc8a05a79859f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab61e722eeb6c37b19f6ad6f53fc8a05a79859f5", "html_url": "https://github.com/rust-lang/rust/commit/ab61e722eeb6c37b19f6ad6f53fc8a05a79859f5"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "1bc20180f04b43c91fcb4bd7de357d64dba50cc3", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2b61fbafe53d655ec010471d8f4a3bf34c724bd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b61fbafe53d655ec010471d8f4a3bf34c724bd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=c2b61fbafe53d655ec010471d8f4a3bf34c724bd", "patch": "@@ -670,6 +670,22 @@ pub struct CombinedSnapshot<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+    /// calls `tcx.try_unify_abstract_consts` after\n+    /// canonicalizing the consts.\n+    pub fn try_unify_abstract_consts(\n+        &self,\n+        a: ty::Unevaluated<'tcx>,\n+        b: ty::Unevaluated<'tcx>,\n+    ) -> bool {\n+        let canonical = self.canonicalize_query(\n+            ((a.def, a.substs), (b.def, b.substs)),\n+            &mut OriginalQueryValues::default(),\n+        );\n+        debug!(\"canonical consts: {:?}\", &canonical.value);\n+\n+        self.tcx.try_unify_abstract_consts(canonical.value)\n+    }\n+\n     pub fn is_in_snapshot(&self) -> bool {\n         self.in_snapshot.get()\n     }"}, {"sha": "9cb074e8f54c59b1ba0b1965d00e851e9154233d", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2b61fbafe53d655ec010471d8f4a3bf34c724bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b61fbafe53d655ec010471d8f4a3bf34c724bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=c2b61fbafe53d655ec010471d8f4a3bf34c724bd", "patch": "@@ -4,7 +4,6 @@ use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome}\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n-use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -553,13 +552,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.val, c2.val)\n                         {\n-                            let canonical = infcx.canonicalize_query(\n-                                ((a.def, a.substs), (b.def, b.substs)),\n-                                &mut OriginalQueryValues::default(),\n-                            );\n-                            debug!(\"canonical consts: {:?}\", &canonical.value);\n-\n-                            if self.selcx.tcx().try_unify_abstract_consts(canonical.value) {\n+                            if infcx.try_unify_abstract_consts(a, b) {\n                                 return ProcessResult::Changed(vec![]);\n                             }\n                         }"}, {"sha": "c2e3cdee6623f5fe4f886bd8ac027a8ed7a1b329", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2b61fbafe53d655ec010471d8f4a3bf34c724bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b61fbafe53d655ec010471d8f4a3bf34c724bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c2b61fbafe53d655ec010471d8f4a3bf34c724bd", "patch": "@@ -33,7 +33,6 @@ use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Constness;\n-use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n@@ -609,13 +608,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.val, c2.val)\n                         {\n-                            let canonical = self.infcx.canonicalize_query(\n-                                ((a.def, a.substs), (b.def, b.substs)),\n-                                &mut OriginalQueryValues::default(),\n-                            );\n-                            debug!(\"canonical consts: {:?}\", &canonical.value);\n-\n-                            if self.tcx().try_unify_abstract_consts(canonical.value) {\n+                            if self.infcx.try_unify_abstract_consts(a, b) {\n                                 return Ok(EvaluatedToOk);\n                             }\n                         }"}]}