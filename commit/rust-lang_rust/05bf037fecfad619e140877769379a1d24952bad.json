{"sha": "05bf037fecfad619e140877769379a1d24952bad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YmYwMzdmZWNmYWQ2MTllMTQwODc3NzY5Mzc5YTFkMjQ5NTJiYWQ=", "commit": {"author": {"name": "katelyn a. martin", "email": "me+rustlang@katelyn.world", "date": "2020-10-23T22:49:34Z"}, "committer": {"name": "katelyn a. martin", "email": "me+rustlang@katelyn.world", "date": "2021-03-09T19:40:33Z"}, "message": "address pr review comments\n\n ### Add debug assertion to check `AbiDatas` ordering\n\n    This makes a small alteration to `Abi::index`, so that we include a\n    debug assertion to check that the index we are returning corresponds\n    with the same abi in our data array.\n\n    This will help prevent ordering bugs in the future, which can\n    manifest in rather strange errors.\n\n ### Using exhaustive ABI matches\n\n    This slightly modifies the changes from our previous commits,\n    favoring exhaustive matches in place of `_ => ...` fall-through\n    arms.\n\n    This should help with maintenance in the future, when additional\n    ABI's are added, or when existing ABI's are modified.\n\n ### List all `-unwind` ABI's in unstable book\n\n    This updates the `c-unwind` page in the unstable book to list _all_\n    of the other ABI strings that are introduced by this feature gate.\n\n    Now, all of the ABI's specified by RFC 2945 are shown.\n\nCo-authored-by: Amanieu d'Antras <amanieu@gmail.com>\nCo-authored-by: Niko Matsakis <niko@alum.mit.edu>", "tree": {"sha": "c109a2e7e2b610e1ca4809f83be00d8a51ccca25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c109a2e7e2b610e1ca4809f83be00d8a51ccca25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05bf037fecfad619e140877769379a1d24952bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05bf037fecfad619e140877769379a1d24952bad", "html_url": "https://github.com/rust-lang/rust/commit/05bf037fecfad619e140877769379a1d24952bad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05bf037fecfad619e140877769379a1d24952bad/comments", "author": null, "committer": null, "parents": [{"sha": "baf227ea0c1e07fc54395a51e4b3881d701180cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/baf227ea0c1e07fc54395a51e4b3881d701180cb", "html_url": "https://github.com/rust-lang/rust/commit/baf227ea0c1e07fc54395a51e4b3881d701180cb"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "814581a6cf171f4718590d0947ddb63719a7470f", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05bf037fecfad619e140877769379a1d24952bad/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05bf037fecfad619e140877769379a1d24952bad/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=05bf037fecfad619e140877769379a1d24952bad", "patch": "@@ -2595,7 +2595,25 @@ fn fn_can_unwind(\n                 C { unwind } | Stdcall { unwind } | System { unwind } | Thiscall { unwind } => {\n                     unwind\n                 }\n-                _ => false,\n+                Cdecl\n+                | Fastcall\n+                | Vectorcall\n+                | Aapcs\n+                | Win64\n+                | SysV64\n+                | PtxKernel\n+                | Msp430Interrupt\n+                | X86Interrupt\n+                | AmdGpuKernel\n+                | EfiApi\n+                | AvrInterrupt\n+                | AvrNonBlockingInterrupt\n+                | CCmseNonSecureCall\n+                | RustIntrinsic\n+                | PlatformIntrinsic\n+                | Unadjusted => false,\n+                // In the `if` above, we checked for functions with the Rust calling convention.\n+                Rust | RustCall => unreachable!(),\n             }\n         }\n     }"}, {"sha": "3ac9c631d031e91237470061e70c50bc2b4aa0d2", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05bf037fecfad619e140877769379a1d24952bad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05bf037fecfad619e140877769379a1d24952bad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=05bf037fecfad619e140877769379a1d24952bad", "patch": "@@ -575,7 +575,23 @@ fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: LocalDefId, abi: Abi) -> bo\n                 // Rust and `rust-call` functions are allowed to unwind, and should not abort.\n                 Rust | RustCall => false,\n                 // Other ABI's should abort.\n-                _ => true,\n+                Cdecl\n+                | Fastcall\n+                | Vectorcall\n+                | Aapcs\n+                | Win64\n+                | SysV64\n+                | PtxKernel\n+                | Msp430Interrupt\n+                | X86Interrupt\n+                | AmdGpuKernel\n+                | EfiApi\n+                | AvrInterrupt\n+                | AvrNonBlockingInterrupt\n+                | CCmseNonSecureCall\n+                | RustIntrinsic\n+                | PlatformIntrinsic\n+                | Unadjusted => true,\n             }\n         }\n     }"}, {"sha": "17eb33b8f2eaa77a3de4390aacf021518e973810", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05bf037fecfad619e140877769379a1d24952bad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05bf037fecfad619e140877769379a1d24952bad/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=05bf037fecfad619e140877769379a1d24952bad", "patch": "@@ -107,7 +107,7 @@ impl Abi {\n         // N.B., this ordering MUST match the AbiDatas array above.\n         // (This is ensured by the test indices_are_correct().)\n         use Abi::*;\n-        match self {\n+        let i = match self {\n             // Cross-platform ABIs\n             Rust => 0,\n             C { unwind: false } => 1,\n@@ -138,7 +138,18 @@ impl Abi {\n             RustCall => 24,\n             PlatformIntrinsic => 25,\n             Unadjusted => 26,\n-        }\n+        };\n+        debug_assert!(\n+            AbiDatas\n+                .iter()\n+                .enumerate()\n+                .find(|(_, AbiData { abi, .. })| *abi == self)\n+                .map(|(index, _)| index)\n+                .expect(\"abi variant has associated data\")\n+                == i,\n+            \"Abi index did not match `AbiDatas` ordering\"\n+        );\n+        i\n     }\n \n     #[inline]"}, {"sha": "2801d9b5e7778314a4e1c59a43d99053093ec84b", "filename": "src/doc/unstable-book/src/language-features/c-unwind.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05bf037fecfad619e140877769379a1d24952bad/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md", "raw_url": "https://github.com/rust-lang/rust/raw/05bf037fecfad619e140877769379a1d24952bad/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md?ref=05bf037fecfad619e140877769379a1d24952bad", "patch": "@@ -6,7 +6,8 @@ The tracking issue for this feature is: [#74990]\n \n ------------------------\n \n-Introduces a new ABI string, \"C-unwind\", to enable unwinding from other\n+Introduces four new ABI strings: \"C-unwind\", \"stdcall-unwind\",\n+\"thiscall-unwind\", and \"system-unwind\". These enable unwinding from other\n languages (such as C++) into Rust frames and from Rust into other languages.\n \n See [RFC 2945] for more information."}]}