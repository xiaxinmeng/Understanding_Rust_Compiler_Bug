{"sha": "badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZGNmMjY3ZGY2ZWNmYzYyYTc2NWVlYTBlMDNkMWNjZjBjZDNkMDI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-16T00:37:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-16T00:37:21Z"}, "message": "Rollup merge of #71948 - csmoe:issue-61076, r=oli-obk\n\nSuggest to await future before ? operator\n\nCloses https://github.com/rust-lang/rust/issues/71811\ncc #61076", "tree": {"sha": "6239f49a1e1dd92ddd949e985ac77313e8a3024c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6239f49a1e1dd92ddd949e985ac77313e8a3024c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevzXBCRBK7hj4Ov3rIwAAdHIIAB74YXjsqF8klto6vQX71DZj\nOPTOcwlzTHnqu8MW+TSFx/KZL+9BYhewW6U83j+klzYIa7Wyue5q3Go6237VsZND\nt7LJO47/7hif20pMaam3Ltvg9SC64vYPzJvRLmFdFe9aFahZyjZVC7yFINX93TTe\nZSPX8C+OLTDzNV/2EZl/3mB1WklopOK+VSZQJNzX3StywjUS+OOpUmjerQmyfgr1\nDacrNO+IIOvyxMKNoPUvTZ+52BxIt+2VI8lITIaFdDKZ40vBc52BC/al42nKTIHr\nfSDUTTIgYPohsXqvZGsvNVHSYQtVEFYNNIzeORVWtkBlnogdd6Z8vzqZ6pm1XY4=\n=3r/F\n-----END PGP SIGNATURE-----\n", "payload": "tree 6239f49a1e1dd92ddd949e985ac77313e8a3024c\nparent 154db50d86432e7ddc7f292b161f9a52237a129e\nparent 10d7da4e0b07f469c9d2b8215b563528adfc7e99\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589589441 +0200\ncommitter GitHub <noreply@github.com> 1589589441 +0200\n\nRollup merge of #71948 - csmoe:issue-61076, r=oli-obk\n\nSuggest to await future before ? operator\n\nCloses https://github.com/rust-lang/rust/issues/71811\ncc #61076\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "html_url": "https://github.com/rust-lang/rust/commit/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "154db50d86432e7ddc7f292b161f9a52237a129e", "url": "https://api.github.com/repos/rust-lang/rust/commits/154db50d86432e7ddc7f292b161f9a52237a129e", "html_url": "https://github.com/rust-lang/rust/commit/154db50d86432e7ddc7f292b161f9a52237a129e"}, {"sha": "10d7da4e0b07f469c9d2b8215b563528adfc7e99", "url": "https://api.github.com/repos/rust-lang/rust/commits/10d7da4e0b07f469c9d2b8215b563528adfc7e99", "html_url": "https://github.com/rust-lang/rust/commit/10d7da4e0b07f469c9d2b8215b563528adfc7e99"}], "stats": {"total": 283, "additions": 246, "deletions": 37}, "files": [{"sha": "b823516d64f3b76df30f9048204d0d02a7c5ac88", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -390,11 +390,7 @@ impl<'hir> Map<'hir> {\n     /// Given a `HirId`, returns the `BodyId` associated with it,\n     /// if the node is a body owner, otherwise returns `None`.\n     pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {\n-        if let Some(node) = self.find(hir_id) {\n-            associated_body(node)\n-        } else {\n-            bug!(\"no entry for id `{}`\", hir_id)\n-        }\n+        self.find(hir_id).map(associated_body).flatten()\n     }\n \n     /// Given a body owner's id, returns the `BodyId` associated with it."}, {"sha": "13cf9a934b72c78bdf3125d312a8e1f96c664e2f", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -1164,6 +1164,12 @@ rustc_queries! {\n             desc { \"evaluating trait selection obligation `{}`\", goal.value }\n         }\n \n+        query type_implements_trait(\n+            key: (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>, )\n+        ) -> bool {\n+            desc { \"evaluating `type_implements_trait` `{:?}`\", key }\n+        }\n+\n         /// Do not call this query directly: part of the `Eq` type-op\n         query type_op_ascribe_user_type(\n             goal: CanonicalTypeOpAscribeUserTypeGoal<'tcx>"}, {"sha": "4acf766f033d8360daa4af60d4d9b292bcd91080", "filename": "src/librustc_middle/ty/query/keys.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -295,3 +295,15 @@ impl Key for (Symbol, u32, u32) {\n         DUMMY_SP\n     }\n }\n+\n+impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+\n+    fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}"}, {"sha": "6bd4455e1e3fdbeb0c8a80a237d9eca59215e31a", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -402,6 +402,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n                         self.note_version_mismatch(&mut err, &trait_ref);\n+                        self.suggest_await_before_try(&mut err, &obligation, &trait_ref, span);\n                         if self.suggest_impl_trait(&mut err, span, &obligation, &trait_ref) {\n                             err.emit();\n                             return;"}, {"sha": "503daf56b49e461773e7cdccd751a6653b308373", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -1,14 +1,17 @@\n use super::{\n     EvaluationResult, Obligation, ObligationCause, ObligationCauseCode, PredicateObligation,\n+    SelectionContext,\n };\n \n use crate::infer::InferCtxt;\n+use crate::traits::normalize_projection_type;\n \n use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Style};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n+use rustc_hir::lang_items;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_middle::ty::TypeckTables;\n use rustc_middle::ty::{\n@@ -150,6 +153,15 @@ pub trait InferCtxtExt<'tcx> {\n         T: fmt::Display;\n \n     fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder<'_>);\n+\n+    /// Suggest to await before try: future? => future.await?\n+    fn suggest_await_before_try(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        obligation: &PredicateObligation<'tcx>,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+        span: Span,\n+    );\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n@@ -1822,6 +1834,95 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             suggested_limit, self.tcx.crate_name,\n         ));\n     }\n+\n+    fn suggest_await_before_try(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        obligation: &PredicateObligation<'tcx>,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+        span: Span,\n+    ) {\n+        debug!(\n+            \"suggest_await_befor_try: obligation={:?}, span={:?}, trait_ref={:?}, trait_ref_self_ty={:?}\",\n+            obligation,\n+            span,\n+            trait_ref,\n+            trait_ref.self_ty()\n+        );\n+        let body_hir_id = obligation.cause.body_id;\n+        let item_id = self.tcx.hir().get_parent_node(body_hir_id);\n+\n+        if let Some(body_id) = self.tcx.hir().maybe_body_owned_by(item_id) {\n+            let body = self.tcx.hir().body(body_id);\n+            if let Some(hir::GeneratorKind::Async(_)) = body.generator_kind {\n+                let future_trait =\n+                    self.tcx.require_lang_item(lang_items::FutureTraitLangItem, None);\n+\n+                let self_ty = self.resolve_vars_if_possible(&trait_ref.self_ty());\n+\n+                let impls_future = self.tcx.type_implements_trait((\n+                    future_trait,\n+                    self_ty,\n+                    ty::List::empty(),\n+                    obligation.param_env,\n+                ));\n+\n+                let item_def_id = self\n+                    .tcx\n+                    .associated_items(future_trait)\n+                    .in_definition_order()\n+                    .next()\n+                    .unwrap()\n+                    .def_id;\n+                // `<T as Future>::Output`\n+                let projection_ty = ty::ProjectionTy {\n+                    // `T`\n+                    substs: self.tcx.mk_substs_trait(\n+                        trait_ref.self_ty(),\n+                        self.fresh_substs_for_item(span, item_def_id),\n+                    ),\n+                    // `Future::Output`\n+                    item_def_id,\n+                };\n+\n+                let mut selcx = SelectionContext::new(self);\n+\n+                let mut obligations = vec![];\n+                let normalized_ty = normalize_projection_type(\n+                    &mut selcx,\n+                    obligation.param_env,\n+                    projection_ty,\n+                    obligation.cause.clone(),\n+                    0,\n+                    &mut obligations,\n+                );\n+\n+                debug!(\n+                    \"suggest_await_befor_try: normalized_projection_type {:?}\",\n+                    self.resolve_vars_if_possible(&normalized_ty)\n+                );\n+                let try_obligation = self.mk_obligation_for_def_id(\n+                    trait_ref.def_id(),\n+                    normalized_ty,\n+                    obligation.cause.clone(),\n+                    obligation.param_env,\n+                );\n+                debug!(\"suggest_await_befor_try: try_trait_obligation {:?}\", try_obligation);\n+                if self.predicate_may_hold(&try_obligation) && impls_future {\n+                    if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                        if snippet.ends_with('?') {\n+                            err.span_suggestion(\n+                                span,\n+                                \"consider using `.await` here\",\n+                                format!(\"{}.await?\", snippet.trim_end_matches('?')),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n /// Collect all the returned expressions within the input expression."}, {"sha": "9592f93ce2e7606c21bc540c4bb6c359fdfe28ff", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -31,7 +31,9 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::middle::region;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc_middle::ty::{self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, WithConstness};\n+use rustc_middle::ty::{\n+    self, GenericParamDefKind, ParamEnv, ToPredicate, Ty, TyCtxt, WithConstness,\n+};\n use rustc_span::Span;\n \n use std::fmt::Debug;\n@@ -523,6 +525,43 @@ fn vtable_methods<'tcx>(\n     }))\n }\n \n+/// Check whether a `ty` implements given trait(trait_def_id).\n+///\n+/// NOTE: Always return `false` for a type which needs inference.\n+fn type_implements_trait<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    key: (\n+        DefId,    // trait_def_id,\n+        Ty<'tcx>, // type\n+        SubstsRef<'tcx>,\n+        ParamEnv<'tcx>,\n+    ),\n+) -> bool {\n+    let (trait_def_id, ty, params, param_env) = key;\n+\n+    debug!(\n+        \"type_implements_trait: trait_def_id={:?}, type={:?}, params={:?}, param_env={:?}\",\n+        trait_def_id, ty, params, param_env\n+    );\n+\n+    // Do not check on infer_types to avoid panic in evaluate_obligation.\n+    if ty.has_infer_types() {\n+        return false;\n+    }\n+\n+    let ty = tcx.erase_regions(&ty);\n+\n+    let trait_ref = ty::TraitRef { def_id: trait_def_id, substs: tcx.mk_substs_trait(ty, params) };\n+\n+    let obligation = Obligation {\n+        cause: ObligationCause::dummy(),\n+        param_env,\n+        recursion_depth: 0,\n+        predicate: trait_ref.without_const().to_predicate(),\n+    };\n+    tcx.infer_ctxt().enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     object_safety::provide(providers);\n     *providers = ty::query::Providers {\n@@ -531,6 +570,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         codegen_fulfill_obligation: codegen::codegen_fulfill_obligation,\n         vtable_methods,\n         substitute_normalize_and_test_predicates,\n+        type_implements_trait,\n         ..*providers\n     };\n }"}, {"sha": "226c187e3cfdf911350e58dfa1ffba4980b69444", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -5282,6 +5282,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) {\n+        debug!(\"suggest_missing_await: expr={:?} expected={:?}, found={:?}\", expr, expected, found);\n         // `.await` is not permitted outside of `async` bodies, so don't bother to suggest if the\n         // body isn't `async`.\n         let item_id = self.tcx().hir().get_parent_node(self.body_id);\n@@ -5299,22 +5300,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .next()\n                     .unwrap()\n                     .def_id;\n+                // `<T as Future>::Output`\n+                let projection_ty = ty::ProjectionTy {\n+                    // `T`\n+                    substs: self\n+                        .tcx\n+                        .mk_substs_trait(found, self.fresh_substs_for_item(sp, item_def_id)),\n+                    // `Future::Output`\n+                    item_def_id,\n+                };\n+\n                 let predicate =\n                     ty::Predicate::Projection(ty::Binder::bind(ty::ProjectionPredicate {\n-                        // `<T as Future>::Output`\n-                        projection_ty: ty::ProjectionTy {\n-                            // `T`\n-                            substs: self.tcx.mk_substs_trait(\n-                                found,\n-                                self.fresh_substs_for_item(sp, item_def_id),\n-                            ),\n-                            // `Future::Output`\n-                            item_def_id,\n-                        },\n+                        projection_ty,\n                         ty: expected,\n                     }));\n                 let obligation = traits::Obligation::new(self.misc(sp), self.param_env, predicate);\n+\n                 debug!(\"suggest_missing_await: trying obligation {:?}\", obligation);\n+\n                 if self.infcx.predicate_may_hold(&obligation) {\n                     debug!(\"suggest_missing_await: obligation held: {:?}\", obligation);\n                     if let Ok(code) = self.sess().source_map().span_to_snippet(sp) {"}, {"sha": "96158fc0e0496c3d76567aa2bed84aa9530e311d", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -237,7 +237,10 @@ error[E0277]: the `?` operator can only be applied to values that implement `std\n   --> $DIR/incorrect-syntax-suggestions.rs:16:19\n    |\n LL |     let _ = await bar()?;\n-   |                   ^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future`\n+   |                   ^^^^^^\n+   |                   |\n+   |                   the `?` operator cannot be applied to type `impl std::future::Future`\n+   |                   help: consider using `.await` here: `bar().await?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n    = note: required by `std::ops::Try::into_result`"}, {"sha": "13b45df64eabeae90a487c58341c964c3207a067", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -0,0 +1,32 @@\n+// edition:2018\n+\n+use core::future::Future;\n+use core::pin::Pin;\n+use core::task::{Context, Poll};\n+\n+struct T;\n+\n+impl Future for T {\n+    type Output = Result<(), ()>;\n+\n+    fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {\n+        Poll::Pending\n+    }\n+}\n+\n+async fn foo() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+async fn bar() -> Result<(), ()> {\n+    foo()?; //~ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n+    Ok(())\n+}\n+\n+async fn baz() -> Result<(), ()> {\n+    let t = T;\n+    t?; //~ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n+    Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "e71f4e7136dad26f44fef9f604ffe14ec57c30de", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/issue-61076.rs:22:5\n+   |\n+LL |     foo()?;\n+   |     ^^^^^^\n+   |     |\n+   |     the `?` operator cannot be applied to type `impl std::future::Future`\n+   |     help: consider using `.await` here: `foo().await?`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/issue-61076.rs:28:5\n+   |\n+LL |     t?;\n+   |     ^^\n+   |     |\n+   |     the `?` operator cannot be applied to type `T`\n+   |     help: consider using `.await` here: `t.await?`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `T`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c520a07abc17267aed29eca5c119a3fb7c315d24", "filename": "src/test/ui/async-await/try-on-option-in-async.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.rs?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -7,7 +7,8 @@ async fn an_async_block() -> u32 {\n         let x: Option<u32> = None;\n         x?; //~ ERROR the `?` operator\n         22\n-    }.await\n+    }\n+    .await\n }\n \n async fn async_closure_containing_fn() -> u32 {"}, {"sha": "700296d6747841408f8312bccdada03b1a0f0cbe", "filename": "src/test/ui/async-await/try-on-option-in-async.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -7,14 +7,14 @@ LL | |         let x: Option<u32> = None;\n LL | |         x?;\n    | |         ^^ cannot use the `?` operator in an async block that returns `{integer}`\n LL | |         22\n-LL | |     }.await\n+LL | |     }\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `{integer}`\n    = note: required by `std::ops::Try::from_error`\n \n error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n-  --> $DIR/try-on-option-in-async.rs:16:9\n+  --> $DIR/try-on-option-in-async.rs:17:9\n    |\n LL |       let async_closure = async || {\n    |  __________________________________-\n@@ -29,7 +29,7 @@ LL | |     };\n    = note: required by `std::ops::Try::from_error`\n \n error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n-  --> $DIR/try-on-option-in-async.rs:25:5\n+  --> $DIR/try-on-option-in-async.rs:26:5\n    |\n LL |   async fn an_async_function() -> u32 {\n    |  _____________________________________-"}, {"sha": "438a9f42ccd239341327c88c57ef7ee9df6be779", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badcf267df6ecfc62a765eea0e03d1ccf0cd3d02/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=badcf267df6ecfc62a765eea0e03d1ccf0cd3d02", "patch": "@@ -40,15 +40,12 @@ use rustc_hir::{\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::traits;\n use rustc_middle::ty::{self, layout::IntegerExt, subst::GenericArg, Binder, Ty, TyCtxt, TypeFoldable};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::symbol::{self, kw, Symbol};\n use rustc_span::{BytePos, Pos, Span, DUMMY_SP};\n use rustc_target::abi::Integer;\n-use rustc_trait_selection::traits::predicate_for_trait_def;\n-use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use smallvec::SmallVec;\n \n@@ -326,19 +323,8 @@ pub fn implements_trait<'a, 'tcx>(\n     trait_id: DefId,\n     ty_params: &[GenericArg<'tcx>],\n ) -> bool {\n-    let ty = cx.tcx.erase_regions(&ty);\n-    let obligation = predicate_for_trait_def(\n-        cx.tcx,\n-        cx.param_env,\n-        traits::ObligationCause::dummy(),\n-        trait_id,\n-        0,\n-        ty,\n-        ty_params,\n-    );\n-    cx.tcx\n-        .infer_ctxt()\n-        .enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n+    let ty_params = cx.tcx.mk_substs(ty_params.iter());\n+    cx.tcx.type_implements_trait((trait_id, ty, ty_params, cx.param_env))\n }\n \n /// Gets the `hir::TraitRef` of the trait the given method is implemented for."}]}