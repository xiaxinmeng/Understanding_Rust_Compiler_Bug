{"sha": "9a746d5c1dad836c615e879b443dbf7ed73123e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNzQ2ZDVjMWRhZDgzNmM2MTVlODc5YjQ0M2RiZjdlZDczMTIzZTE=", "commit": {"author": {"name": "iancormac84", "email": "wilnathan@gmail.com", "date": "2018-05-08T11:58:33Z"}, "committer": {"name": "iancormac84", "email": "wilnathan@gmail.com", "date": "2018-05-17T20:41:26Z"}, "message": "Removed use of TypeIdHasher in symbol hash generation and replaced it with StableHasher.", "tree": {"sha": "d0d5409176cf99896eda31fe51b1c08f0209e001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0d5409176cf99896eda31fe51b1c08f0209e001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a746d5c1dad836c615e879b443dbf7ed73123e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a746d5c1dad836c615e879b443dbf7ed73123e1", "html_url": "https://github.com/rust-lang/rust/commit/9a746d5c1dad836c615e879b443dbf7ed73123e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a746d5c1dad836c615e879b443dbf7ed73123e1/comments", "author": {"login": "iancormac84", "id": 7167225, "node_id": "MDQ6VXNlcjcxNjcyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7167225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iancormac84", "html_url": "https://github.com/iancormac84", "followers_url": "https://api.github.com/users/iancormac84/followers", "following_url": "https://api.github.com/users/iancormac84/following{/other_user}", "gists_url": "https://api.github.com/users/iancormac84/gists{/gist_id}", "starred_url": "https://api.github.com/users/iancormac84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iancormac84/subscriptions", "organizations_url": "https://api.github.com/users/iancormac84/orgs", "repos_url": "https://api.github.com/users/iancormac84/repos", "events_url": "https://api.github.com/users/iancormac84/events{/privacy}", "received_events_url": "https://api.github.com/users/iancormac84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iancormac84", "id": 7167225, "node_id": "MDQ6VXNlcjcxNjcyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7167225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iancormac84", "html_url": "https://github.com/iancormac84", "followers_url": "https://api.github.com/users/iancormac84/followers", "following_url": "https://api.github.com/users/iancormac84/following{/other_user}", "gists_url": "https://api.github.com/users/iancormac84/gists{/gist_id}", "starred_url": "https://api.github.com/users/iancormac84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iancormac84/subscriptions", "organizations_url": "https://api.github.com/users/iancormac84/orgs", "repos_url": "https://api.github.com/users/iancormac84/repos", "events_url": "https://api.github.com/users/iancormac84/events{/privacy}", "received_events_url": "https://api.github.com/users/iancormac84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8c2332cc890ca73911ea0133457b10bf56aefdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c2332cc890ca73911ea0133457b10bf56aefdc", "html_url": "https://github.com/rust-lang/rust/commit/a8c2332cc890ca73911ea0133457b10bf56aefdc"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "0afb2f7e54b494379414e7f6ac05f5ec5213cd9c", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a746d5c1dad836c615e879b443dbf7ed73123e1/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a746d5c1dad836c615e879b443dbf7ed73123e1/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=9a746d5c1dad836c615e879b443dbf7ed73123e1", "patch": "@@ -98,12 +98,13 @@\n //! DefPaths which are much more robust in the face of changes to the code base.\n \n use rustc::middle::weak_lang_items;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_mir::monomorphize::Instance;\n use rustc_mir::monomorphize::item::{MonoItem, MonoItemExt, InstantiationMode};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::map as hir_map;\n+use rustc::ich::NodeIdHashingMode;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc::ty::fold::TypeVisitor;\n use rustc::ty::item_path::{self, ItemPathBuffer, RootMode};\n use rustc::ty::maps::Providers;\n use rustc::ty::subst::Substs;\n@@ -144,31 +145,29 @@ fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              -> u64 {\n     debug!(\"get_symbol_hash(def_id={:?}, parameters={:?})\", def_id, substs);\n \n-    let mut hasher = ty::util::TypeIdHasher::<u64>::new(tcx);\n+    let mut hasher = StableHasher::<u64>::new();\n+    let mut hcx = tcx.create_stable_hashing_context();\n \n     record_time(&tcx.sess.perf_stats.symbol_hash_time, || {\n         // the main symbol name is not necessarily unique; hash in the\n         // compiler's internal def-path, guaranteeing each symbol has a\n         // truly unique path\n-        hasher.hash(tcx.def_path_hash(def_id));\n+        tcx.def_path_hash(def_id).hash_stable(&mut hcx, &mut hasher);\n \n         // Include the main item-type. Note that, in this case, the\n         // assertions about `needs_subst` may not hold, but this item-type\n         // ought to be the same for every reference anyway.\n         assert!(!item_type.has_erasable_regions());\n-        hasher.visit_ty(item_type);\n-\n-        // If this is a function, we hash the signature as well.\n-        // This is not *strictly* needed, but it may help in some\n-        // situations, see the `run-make/a-b-a-linker-guard` test.\n-        if let ty::TyFnDef(..) = item_type.sty {\n-            item_type.fn_sig(tcx).visit_with(&mut hasher);\n-        }\n+        hcx.while_hashing_spans(false, |hcx| {\n+            hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+                item_type.hash_stable(hcx, &mut hasher);\n+            });\n+        });\n \n         // also include any type parameters (for generic items)\n         assert!(!substs.has_erasable_regions());\n         assert!(!substs.needs_subst());\n-        substs.visit_with(&mut hasher);\n+        substs.hash_stable(&mut hcx, &mut hasher);\n \n         let is_generic = substs.types().next().is_some();\n         let avoid_cross_crate_conflicts =\n@@ -207,8 +206,8 @@ fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 LOCAL_CRATE\n             };\n \n-            hasher.hash(&tcx.original_crate_name(instantiating_crate).as_str()[..]);\n-            hasher.hash(&tcx.crate_disambiguator(instantiating_crate));\n+            (&tcx.original_crate_name(instantiating_crate).as_str()[..]).hash_stable(&mut hcx, &mut hasher);\n+            (&tcx.crate_disambiguator(instantiating_crate)).hash_stable(&mut hcx, &mut hasher);\n         }\n     });\n "}]}