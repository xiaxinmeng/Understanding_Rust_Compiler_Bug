{"sha": "601f7144d842dca97440d34774b5ae4c839a43c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMWY3MTQ0ZDg0MmRjYTk3NDQwZDM0Nzc0YjVhZTRjODM5YTQzYzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-15T06:25:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-16T20:53:18Z"}, "message": "core: Add comm::select2\n\nReceives on two ports simultaneously", "tree": {"sha": "6899e7ada6b58c2ffd0e5c7e006adb82939ba5f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6899e7ada6b58c2ffd0e5c7e006adb82939ba5f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/601f7144d842dca97440d34774b5ae4c839a43c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/601f7144d842dca97440d34774b5ae4c839a43c4", "html_url": "https://github.com/rust-lang/rust/commit/601f7144d842dca97440d34774b5ae4c839a43c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/601f7144d842dca97440d34774b5ae4c839a43c4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "html_url": "https://github.com/rust-lang/rust/commit/b2cfb7ef8262ebe47514f016f59054ebcfe15d61"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "884e920fd95adbfb46a10c4a93545b19951c08a8", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 121, "deletions": 1, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/601f7144d842dca97440d34774b5ae4c839a43c4/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601f7144d842dca97440d34774b5ae4c839a43c4/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=601f7144d842dca97440d34774b5ae4c839a43c4", "patch": "@@ -27,6 +27,7 @@ import task;\n export send;\n export recv;\n export peek;\n+export select2;\n export chan::{};\n export port::{};\n \n@@ -46,10 +47,14 @@ native mod rustrt {\n     fn port_recv(dptr: *uint, po: *rust_port,\n                  yield: *ctypes::uintptr_t,\n                  killed: *ctypes::uintptr_t);\n+    fn rust_port_select(dptr: **rust_port, ports: **rust_port,\n+                        n_ports: ctypes::size_t,\n+                        yield: *ctypes::uintptr_t);\n }\n \n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n+    // FIXME: This should probably not take a boxed closure\n     fn call_with_retptr<T: send>(&&f: fn@(*uint)) -> T;\n }\n \n@@ -154,6 +159,45 @@ fn recv_<T: send>(p: *rust_port) -> T {\n     ret res;\n }\n \n+#[doc = \"Receive on one of two ports\"]\n+fn select2<A: send, B: send>(\n+    p_a: port<A>, p_b: port<B>\n+) -> either::t<A, B> unsafe {\n+\n+    fn select(dptr: **rust_port, ports: **rust_port,\n+              n_ports: ctypes::size_t, yield: *ctypes::uintptr_t) {\n+        rustrt::rust_port_select(dptr, ports, n_ports, yield)\n+    }\n+\n+    let ports = [];\n+    ports += [***p_a, ***p_b];\n+    let n_ports = 2 as ctypes::size_t;\n+    let yield = 0u;\n+    let yieldp = ptr::addr_of(yield);\n+\n+    let resport: *rust_port = vec::as_buf(ports) {|ports|\n+        rusti::call_with_retptr {|retptr|\n+            select(unsafe::reinterpret_cast(retptr), ports, n_ports, yieldp)\n+        }\n+    };\n+\n+    if yield != 0u {\n+        // Wait for data\n+        task::yield();\n+    }\n+\n+    // Now we know the port we're supposed to receive from\n+    assert resport != ptr::null();\n+\n+    if resport == ***p_a {\n+        either::left(recv(p_a))\n+    } else if resport == ***p_b {\n+        either::right(recv(p_b))\n+    } else {\n+        fail \"unexpected result from rust_port_select\";\n+    }\n+}\n+\n #[doc = \"Returns true if there are messages available\"]\n fn peek<T: send>(p: port<T>) -> bool {\n     rustrt::rust_port_size(***p) != 0u as ctypes::size_t\n@@ -218,4 +262,80 @@ fn test_peek() {\n     assert peek(po);\n     recv(po);\n     assert !peek(po);\n-}\n\\ No newline at end of file\n+}\n+\n+#[test]\n+fn test_select2_available() {\n+    let po_a = port();\n+    let po_b = port();\n+    let ch_a = chan(po_a);\n+    let ch_b = chan(po_b);\n+\n+    send(ch_a, \"a\");\n+\n+    assert select2(po_a, po_b) == either::left(\"a\");\n+\n+    send(ch_b, \"b\");\n+\n+    assert select2(po_a, po_b) == either::right(\"b\");\n+}\n+\n+#[test]\n+fn test_select2_rendezvous() {\n+    let po_a = port();\n+    let po_b = port();\n+    let ch_a = chan(po_a);\n+    let ch_b = chan(po_b);\n+\n+    iter::repeat(10u) {||\n+        task::spawn {||\n+            iter::repeat(10u) {|| task::yield() }\n+            send(ch_a, \"a\");\n+        };\n+\n+        assert select2(po_a, po_b) == either::left(\"a\");\n+\n+        task::spawn {||\n+            iter::repeat(10u) {|| task::yield() }\n+            send(ch_b, \"b\");\n+        };\n+\n+        assert select2(po_a, po_b) == either::right(\"b\");\n+    }\n+}\n+\n+#[test]\n+fn test_select2_stress() {\n+    let po_a = port();\n+    let po_b = port();\n+    let ch_a = chan(po_a);\n+    let ch_b = chan(po_b);\n+\n+    let msgs = 100u;\n+    let times = 4u;\n+\n+    iter::repeat(times) {||\n+        task::spawn {||\n+            iter::repeat(msgs) {||\n+                send(ch_a, \"a\")\n+            }\n+        };\n+        task::spawn {||\n+            iter::repeat(msgs) {||\n+                send(ch_b, \"b\")\n+            }\n+        };\n+    }\n+\n+    let as = 0;\n+    let bs = 0;\n+    iter::repeat(msgs * times * 2u) {||\n+        alt check select2(po_a, po_b) {\n+          either::left(\"a\") { as += 1 }\n+          either::right(\"b\") { bs += 1 }\n+        }\n+    }\n+\n+    assert as == 400;\n+    assert bs == 400;\n+}"}]}