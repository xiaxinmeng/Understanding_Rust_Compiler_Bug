{"sha": "0f37edb758e22021ea1a9e5b0c744bb05a57b202", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMzdlZGI3NThlMjIwMjFlYTFhOWU1YjBjNzQ0YmIwNWE1N2IyMDI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-05T08:02:04Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-06T21:51:11Z"}, "message": "Refactor away method `resolve_name_in_lexical_scope` of `ModuleS`", "tree": {"sha": "621bdfa923ece3cf0deb4c61d7031c4d79c7feac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/621bdfa923ece3cf0deb4c61d7031c4d79c7feac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f37edb758e22021ea1a9e5b0c744bb05a57b202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f37edb758e22021ea1a9e5b0c744bb05a57b202", "html_url": "https://github.com/rust-lang/rust/commit/0f37edb758e22021ea1a9e5b0c744bb05a57b202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f37edb758e22021ea1a9e5b0c744bb05a57b202/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8519139ab42f83115bb9f4eab1f5ce4a5a4bafe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8519139ab42f83115bb9f4eab1f5ce4a5a4bafe6", "html_url": "https://github.com/rust-lang/rust/commit/8519139ab42f83115bb9f4eab1f5ce4a5a4bafe6"}], "stats": {"total": 50, "additions": 19, "deletions": 31}, "files": [{"sha": "78aa0a75dcc90e791a3b965545ab141b045ac53f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0f37edb758e22021ea1a9e5b0c744bb05a57b202/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f37edb758e22021ea1a9e5b0c744bb05a57b202/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0f37edb758e22021ea1a9e5b0c744bb05a57b202", "patch": "@@ -126,7 +126,7 @@ enum ResolutionError<'a> {\n     /// error E0413: cannot be named the same as an enum variant or unit-like struct in scope\n     DeclarationShadowsEnumVariantOrUnitLikeStruct(Name),\n     /// error E0414: only irrefutable patterns allowed here\n-    ConstantForIrrefutableBinding(Name),\n+    ConstantForIrrefutableBinding(Name, &'a NameBinding<'a>),\n     /// error E0415: identifier is bound more than once in this parameter list\n     IdentifierBoundMoreThanOnceInParameterList(&'a str),\n     /// error E0416: identifier is bound more than once in the same pattern\n@@ -317,19 +317,15 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                 &format!(\"has same name as enum variant or unit-like struct\"));\n             err\n         }\n-        ResolutionError::ConstantForIrrefutableBinding(name) => {\n+        ResolutionError::ConstantForIrrefutableBinding(name, binding) => {\n             let mut err = struct_span_err!(resolver.session,\n                                            span,\n                                            E0414,\n                                        \"let variables cannot be named the same as const variables\");\n             err.span_label(span,\n                            &format!(\"cannot be named the same as a const variable\"));\n-            if let Some(binding) = resolver.current_module\n-                                           .resolve_name_in_lexical_scope(name, ValueNS) {\n-                let participle = if binding.is_import() { \"imported\" } else { \"defined\" };\n-                err.span_label(binding.span, &format!(\"a constant `{}` is {} here\",\n-                               name, participle));\n-            }\n+            let participle = if binding.is_import() { \"imported\" } else { \"defined\" };\n+            err.span_label(binding.span, &format!(\"a constant `{}` is {} here\", name, participle));\n             err\n         }\n         ResolutionError::IdentifierBoundMoreThanOnceInParameterList(identifier) => {\n@@ -714,9 +710,9 @@ enum AssocItemResolveResult {\n }\n \n #[derive(Copy, Clone)]\n-enum BareIdentifierPatternResolution {\n+enum BareIdentifierPatternResolution<'a> {\n     FoundStructOrEnumVariant(Def),\n-    FoundConst(Def, Name),\n+    FoundConst(&'a NameBinding<'a>, Name),\n     BareIdentifierPatternUnresolved,\n }\n \n@@ -1456,7 +1452,12 @@ impl<'a> Resolver<'a> {\n                 }\n \n                 // We can only see through anonymous modules\n-                if module.def.is_some() { return None; }\n+                if module.def.is_some() {\n+                    return module.prelude.borrow().and_then(|module| {\n+                        module.resolve_name(name, ns, false)\n+                              .success().map(LexicalScopeBinding::Item)\n+                    });\n+                }\n             }\n         }\n \n@@ -1543,11 +1544,7 @@ impl<'a> Resolver<'a> {\n         debug!(\"(resolving name in module) resolving `{}` in `{}`\", name, module_to_string(module));\n \n         self.populate_module_if_necessary(module);\n-        match use_lexical_scope {\n-            true => module.resolve_name_in_lexical_scope(name, namespace)\n-                          .map(Success).unwrap_or(Failed(None)),\n-            false => module.resolve_name(name, namespace, false),\n-        }.and_then(|binding| {\n+        module.resolve_name(name, namespace, use_lexical_scope).and_then(|binding| {\n             if record_used {\n                 if let NameBindingKind::Import { directive, .. } = binding.kind {\n                     self.used_imports.insert((directive.id, namespace));\n@@ -2289,21 +2286,21 @@ impl<'a> Resolver<'a> {\n                             );\n                             self.record_def(pattern.id, err_path_resolution());\n                         }\n-                        FoundConst(def, _) if const_ok => {\n+                        FoundConst(binding, _) if const_ok => {\n                             debug!(\"(resolving pattern) resolving `{}` to constant\", renamed);\n \n                             self.enforce_default_binding_mode(pattern, binding_mode, \"a constant\");\n                             self.record_def(pattern.id,\n                                             PathResolution {\n-                                                base_def: def,\n+                                                base_def: binding.def().unwrap(),\n                                                 depth: 0,\n                                             });\n                         }\n-                        FoundConst(_, name) => {\n+                        FoundConst(binding, name) => {\n                             resolve_error(\n                                 self,\n                                 pattern.span,\n-                                ResolutionError::ConstantForIrrefutableBinding(name)\n+                                ResolutionError::ConstantForIrrefutableBinding(name, binding)\n                             );\n                             self.record_def(pattern.id, err_path_resolution());\n                         }\n@@ -2526,7 +2523,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn resolve_bare_identifier_pattern(&mut self, ident: ast::Ident, span: Span)\n-                                       -> BareIdentifierPatternResolution {\n+                                       -> BareIdentifierPatternResolution<'a> {\n         let binding = match self.resolve_ident_in_lexical_scope(ident, ValueNS, true) {\n             Some(LexicalScopeBinding::Item(binding)) => binding,\n             _ => return BareIdentifierPatternUnresolved,\n@@ -2535,7 +2532,7 @@ impl<'a> Resolver<'a> {\n \n         match def {\n             Def::Variant(..) | Def::Struct(..) => FoundStructOrEnumVariant(def),\n-            Def::Const(..) | Def::AssociatedConst(..) => FoundConst(def, ident.name),\n+            Def::Const(..) | Def::AssociatedConst(..) => FoundConst(binding, ident.name),\n             Def::Static(..) => {\n                 let error = ResolutionError::StaticVariableReference(binding);\n                 resolve_error(self, span, error);"}, {"sha": "f4c38e761233a09140397207abd43d4f763c211c", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f37edb758e22021ea1a9e5b0c744bb05a57b202/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f37edb758e22021ea1a9e5b0c744bb05a57b202/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=0f37edb758e22021ea1a9e5b0c744bb05a57b202", "patch": "@@ -257,15 +257,6 @@ impl<'a> ::ModuleS<'a> {\n         Failed(None)\n     }\n \n-    // Invariant: this may not be called until import resolution is complete.\n-    pub fn resolve_name_in_lexical_scope(&self, name: Name, ns: Namespace)\n-                                         -> Option<&'a NameBinding<'a>> {\n-        self.resolution(name, ns).borrow().binding\n-            .or_else(|| self.prelude.borrow().and_then(|prelude| {\n-                prelude.resolve_name(name, ns, false).success()\n-            }))\n-    }\n-\n     // Define the name or return the existing binding if there is a collision.\n     pub fn try_define_child(&self, name: Name, ns: Namespace, binding: NameBinding<'a>)\n                             -> Result<(), &'a NameBinding<'a>> {"}]}