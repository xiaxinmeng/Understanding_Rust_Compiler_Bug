{"sha": "b2b676d886ded452125712a304c524c08360f916", "node_id": "C_kwDOAAsO6NoAKGIyYjY3NmQ4ODZkZWQ0NTIxMjU3MTJhMzA0YzUyNGMwODM2MGY5MTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T16:15:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T16:15:25Z"}, "message": "Auto merge of #108905 - ferrocene:pa-compiletest-ignore, r=ehuss\n\nValidate `ignore` and `only` compiletest directive, and add human-readable ignore reasons\n\nThis PR adds strict validation for the `ignore` and `only` compiletest directives, failing if an unknown value is provided to them. Doing so uncovered 79 tests in `tests/ui` that had invalid directives, so this PR also fixes them.\n\nFinally, this PR adds human-readable ignore reasons when tests are ignored due to `ignore` or `only` directives, like *\"only executed when the architecture is aarch64\"* or *\"ignored when the operative system is windows\"*. This was the original reason why I started working on this PR and #108659, as we need both of them for Ferrocene.\n\nThe PR is a draft because the code is extremely inefficient: it calls `rustc --print=cfg --target $target` for every rustc target (to gather the list of allowed ignore values), which on my system takes between 4s and 5s, and performs a lot of allocations of constant values. I'll fix both of them in the coming days.\n\nr? `@ehuss`", "tree": {"sha": "f5d8387c269019e423621c1b16b03b1c16e956d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5d8387c269019e423621c1b16b03b1c16e956d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b676d886ded452125712a304c524c08360f916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b676d886ded452125712a304c524c08360f916", "html_url": "https://github.com/rust-lang/rust/commit/b2b676d886ded452125712a304c524c08360f916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b676d886ded452125712a304c524c08360f916/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb92cc83ac6b24d83f8a30763b276cadb8dc41d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb92cc83ac6b24d83f8a30763b276cadb8dc41d", "html_url": "https://github.com/rust-lang/rust/commit/4cb92cc83ac6b24d83f8a30763b276cadb8dc41d"}, {"sha": "bbcbb6fccee0bc9edd7f4da96426d33a1742687d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcbb6fccee0bc9edd7f4da96426d33a1742687d", "html_url": "https://github.com/rust-lang/rust/commit/bbcbb6fccee0bc9edd7f4da96426d33a1742687d"}], "stats": {"total": 1226, "additions": 720, "deletions": 506}, "files": [{"sha": "730d41ab962f899838e9a974c364fa0aee832196", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -44,8 +44,10 @@ use rustc_session::{early_error, early_error_no_abort, early_warn};\n use rustc_span::source_map::{FileLoader, FileName};\n use rustc_span::symbol::sym;\n use rustc_target::json::ToJson;\n+use rustc_target::spec::{Target, TargetTriple};\n \n use std::cmp::max;\n+use std::collections::BTreeMap;\n use std::env;\n use std::ffi::OsString;\n use std::fs;\n@@ -648,6 +650,15 @@ fn print_crate_info(\n             TargetSpec => {\n                 println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n             }\n+            AllTargetSpecs => {\n+                let mut targets = BTreeMap::new();\n+                for name in rustc_target::spec::TARGETS {\n+                    let triple = TargetTriple::from_triple(name);\n+                    let target = Target::expect_builtin(&triple);\n+                    targets.insert(name, target.to_json());\n+                }\n+                println!(\"{}\", serde_json::to_string_pretty(&targets).unwrap());\n+            }\n             FileNames | CrateName => {\n                 let Some(attrs) = attrs.as_ref() else {\n                     // no crate attributes, print out an error and exit"}, {"sha": "de0ddb53fa402906a4e0288d650f46a587a09d70", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -582,6 +582,7 @@ pub enum PrintRequest {\n     CodeModels,\n     TlsModels,\n     TargetSpec,\n+    AllTargetSpecs,\n     NativeStaticLibs,\n     StackProtectorStrategies,\n     LinkArgs,\n@@ -1441,8 +1442,8 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n             \"Compiler information to print on stdout\",\n             \"[crate-name|file-names|sysroot|target-libdir|cfg|calling-conventions|\\\n              target-list|target-cpus|target-features|relocation-models|code-models|\\\n-             tls-models|target-spec-json|native-static-libs|stack-protector-strategies|\\\n-             link-args]\",\n+             tls-models|target-spec-json|all-target-specs-json|native-static-libs|\\\n+             stack-protector-strategies|link-args]\",\n         ),\n         opt::flagmulti_s(\"g\", \"\", \"Equivalent to -C debuginfo=2\"),\n         opt::flagmulti_s(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n@@ -1889,6 +1890,7 @@ fn collect_print_requests(\n         (\"native-static-libs\", PrintRequest::NativeStaticLibs),\n         (\"stack-protector-strategies\", PrintRequest::StackProtectorStrategies),\n         (\"target-spec-json\", PrintRequest::TargetSpec),\n+        (\"all-target-specs-json\", PrintRequest::AllTargetSpecs),\n         (\"link-args\", PrintRequest::LinkArgs),\n         (\"split-debuginfo\", PrintRequest::SplitDebuginfo),\n     ];\n@@ -1902,7 +1904,18 @@ fn collect_print_requests(\n                     early_error(\n                         error_format,\n                         \"the `-Z unstable-options` flag must also be passed to \\\n-                     enable the target-spec-json print option\",\n+                         enable the target-spec-json print option\",\n+                    );\n+                }\n+            }\n+            Some((_, PrintRequest::AllTargetSpecs)) => {\n+                if unstable_opts.unstable_options {\n+                    PrintRequest::AllTargetSpecs\n+                } else {\n+                    early_error(\n+                        error_format,\n+                        \"the `-Z unstable-options` flag must also be passed to \\\n+                         enable the all-target-specs-json print option\",\n                     );\n                 }\n             }"}, {"sha": "84afddbf97947126b3c4810a8aa74ceef416dacd", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -694,7 +694,7 @@ impl Step for CompiletestTest {\n     /// Runs `cargo test` for compiletest.\n     fn run(self, builder: &Builder<'_>) {\n         let host = self.host;\n-        let compiler = builder.compiler(0, host);\n+        let compiler = builder.compiler(1, host);\n \n         // We need `ToolStd` for the locally-built sysroot because\n         // compiletest uses unstable features of the `test` crate."}, {"sha": "98b27a5c6b60ad79a81750d2117f52e6c542a19f", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 229, "deletions": 215, "changes": 444, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -8,107 +8,84 @@ use std::process::Command;\n use std::str::FromStr;\n \n use crate::util::{add_dylib_path, PathBufExt};\n-use lazycell::LazyCell;\n+use lazycell::AtomicLazyCell;\n+use serde::de::{Deserialize, Deserializer, Error as _};\n+use std::collections::{HashMap, HashSet};\n use test::{ColorConfig, OutputFormat};\n \n-#[derive(Clone, Copy, PartialEq, Debug)]\n-pub enum Mode {\n-    RunPassValgrind,\n-    Pretty,\n-    DebugInfo,\n-    Codegen,\n-    Rustdoc,\n-    RustdocJson,\n-    CodegenUnits,\n-    Incremental,\n-    RunMake,\n-    Ui,\n-    JsDocTest,\n-    MirOpt,\n-    Assembly,\n-}\n+macro_rules! string_enum {\n+    ($(#[$meta:meta])* $vis:vis enum $name:ident { $($variant:ident => $repr:expr,)* }) => {\n+        $(#[$meta])*\n+        $vis enum $name {\n+            $($variant,)*\n+        }\n \n-impl Mode {\n-    pub fn disambiguator(self) -> &'static str {\n-        // Pretty-printing tests could run concurrently, and if they do,\n-        // they need to keep their output segregated.\n-        match self {\n-            Pretty => \".pretty\",\n-            _ => \"\",\n+        impl $name {\n+            $vis const VARIANTS: &'static [Self] = &[$(Self::$variant,)*];\n+            $vis const STR_VARIANTS: &'static [&'static str] = &[$(Self::$variant.to_str(),)*];\n+\n+            $vis const fn to_str(&self) -> &'static str {\n+                match self {\n+                    $(Self::$variant => $repr,)*\n+                }\n+            }\n         }\n-    }\n-}\n \n-impl FromStr for Mode {\n-    type Err = ();\n-    fn from_str(s: &str) -> Result<Mode, ()> {\n-        match s {\n-            \"run-pass-valgrind\" => Ok(RunPassValgrind),\n-            \"pretty\" => Ok(Pretty),\n-            \"debuginfo\" => Ok(DebugInfo),\n-            \"codegen\" => Ok(Codegen),\n-            \"rustdoc\" => Ok(Rustdoc),\n-            \"rustdoc-json\" => Ok(RustdocJson),\n-            \"codegen-units\" => Ok(CodegenUnits),\n-            \"incremental\" => Ok(Incremental),\n-            \"run-make\" => Ok(RunMake),\n-            \"ui\" => Ok(Ui),\n-            \"js-doc-test\" => Ok(JsDocTest),\n-            \"mir-opt\" => Ok(MirOpt),\n-            \"assembly\" => Ok(Assembly),\n-            _ => Err(()),\n+        impl fmt::Display for $name {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                fmt::Display::fmt(self.to_str(), f)\n+            }\n         }\n-    }\n-}\n \n-impl fmt::Display for Mode {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let s = match *self {\n-            RunPassValgrind => \"run-pass-valgrind\",\n-            Pretty => \"pretty\",\n-            DebugInfo => \"debuginfo\",\n-            Codegen => \"codegen\",\n-            Rustdoc => \"rustdoc\",\n-            RustdocJson => \"rustdoc-json\",\n-            CodegenUnits => \"codegen-units\",\n-            Incremental => \"incremental\",\n-            RunMake => \"run-make\",\n-            Ui => \"ui\",\n-            JsDocTest => \"js-doc-test\",\n-            MirOpt => \"mir-opt\",\n-            Assembly => \"assembly\",\n-        };\n-        fmt::Display::fmt(s, f)\n+        impl FromStr for $name {\n+            type Err = ();\n+\n+            fn from_str(s: &str) -> Result<Self, ()> {\n+                match s {\n+                    $($repr => Ok(Self::$variant),)*\n+                    _ => Err(()),\n+                }\n+            }\n+        }\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Debug, Hash)]\n-pub enum PassMode {\n-    Check,\n-    Build,\n-    Run,\n+string_enum! {\n+    #[derive(Clone, Copy, PartialEq, Debug)]\n+    pub enum Mode {\n+        RunPassValgrind => \"run-pass-valgrind\",\n+        Pretty => \"pretty\",\n+        DebugInfo => \"debuginfo\",\n+        Codegen => \"codegen\",\n+        Rustdoc => \"rustdoc\",\n+        RustdocJson => \"rustdoc-json\",\n+        CodegenUnits => \"codegen-units\",\n+        Incremental => \"incremental\",\n+        RunMake => \"run-make\",\n+        Ui => \"ui\",\n+        JsDocTest => \"js-doc-test\",\n+        MirOpt => \"mir-opt\",\n+        Assembly => \"assembly\",\n+    }\n }\n \n-impl FromStr for PassMode {\n-    type Err = ();\n-    fn from_str(s: &str) -> Result<Self, ()> {\n-        match s {\n-            \"check\" => Ok(PassMode::Check),\n-            \"build\" => Ok(PassMode::Build),\n-            \"run\" => Ok(PassMode::Run),\n-            _ => Err(()),\n+impl Mode {\n+    pub fn disambiguator(self) -> &'static str {\n+        // Pretty-printing tests could run concurrently, and if they do,\n+        // they need to keep their output segregated.\n+        match self {\n+            Pretty => \".pretty\",\n+            _ => \"\",\n         }\n     }\n }\n \n-impl fmt::Display for PassMode {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let s = match *self {\n-            PassMode::Check => \"check\",\n-            PassMode::Build => \"build\",\n-            PassMode::Run => \"run\",\n-        };\n-        fmt::Display::fmt(s, f)\n+string_enum! {\n+    #[derive(Clone, Copy, PartialEq, Debug, Hash)]\n+    pub enum PassMode {\n+        Check => \"check\",\n+        Build => \"build\",\n+        Run => \"run\",\n     }\n }\n \n@@ -119,63 +96,30 @@ pub enum FailMode {\n     Run,\n }\n \n-#[derive(Clone, Debug, PartialEq)]\n-pub enum CompareMode {\n-    Polonius,\n-    Chalk,\n-    NextSolver,\n-    SplitDwarf,\n-    SplitDwarfSingle,\n-}\n-\n-impl CompareMode {\n-    pub(crate) fn to_str(&self) -> &'static str {\n-        match *self {\n-            CompareMode::Polonius => \"polonius\",\n-            CompareMode::Chalk => \"chalk\",\n-            CompareMode::NextSolver => \"next-solver\",\n-            CompareMode::SplitDwarf => \"split-dwarf\",\n-            CompareMode::SplitDwarfSingle => \"split-dwarf-single\",\n-        }\n+string_enum! {\n+    #[derive(Clone, Debug, PartialEq)]\n+    pub enum CompareMode {\n+        Polonius => \"polonius\",\n+        Chalk => \"chalk\",\n+        NextSolver => \"next-solver\",\n+        SplitDwarf => \"split-dwarf\",\n+        SplitDwarfSingle => \"split-dwarf-single\",\n     }\n-\n-    pub fn parse(s: String) -> CompareMode {\n-        match s.as_str() {\n-            \"polonius\" => CompareMode::Polonius,\n-            \"chalk\" => CompareMode::Chalk,\n-            \"next-solver\" => CompareMode::NextSolver,\n-            \"split-dwarf\" => CompareMode::SplitDwarf,\n-            \"split-dwarf-single\" => CompareMode::SplitDwarfSingle,\n-            x => panic!(\"unknown --compare-mode option: {}\", x),\n-        }\n-    }\n-}\n-\n-#[derive(Clone, Copy, Debug, PartialEq)]\n-pub enum Debugger {\n-    Cdb,\n-    Gdb,\n-    Lldb,\n }\n \n-impl Debugger {\n-    fn to_str(&self) -> &'static str {\n-        match self {\n-            Debugger::Cdb => \"cdb\",\n-            Debugger::Gdb => \"gdb\",\n-            Debugger::Lldb => \"lldb\",\n-        }\n+string_enum! {\n+    #[derive(Clone, Copy, Debug, PartialEq)]\n+    pub enum Debugger {\n+        Cdb => \"cdb\",\n+        Gdb => \"gdb\",\n+        Lldb => \"lldb\",\n     }\n }\n \n-impl fmt::Display for Debugger {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self.to_str(), f)\n-    }\n-}\n-\n-#[derive(Clone, Copy, Debug, PartialEq)]\n+#[derive(Clone, Copy, Debug, PartialEq, Default, serde::Deserialize)]\n+#[serde(rename_all = \"kebab-case\")]\n pub enum PanicStrategy {\n+    #[default]\n     Unwind,\n     Abort,\n }\n@@ -383,7 +327,7 @@ pub struct Config {\n     /// Only rerun the tests that result has been modified accoring to Git status\n     pub only_modified: bool,\n \n-    pub target_cfg: LazyCell<TargetCfg>,\n+    pub target_cfgs: AtomicLazyCell<TargetCfgs>,\n \n     pub nocapture: bool,\n }\n@@ -396,8 +340,18 @@ impl Config {\n         })\n     }\n \n-    fn target_cfg(&self) -> &TargetCfg {\n-        self.target_cfg.borrow_with(|| TargetCfg::new(self))\n+    pub fn target_cfgs(&self) -> &TargetCfgs {\n+        match self.target_cfgs.borrow() {\n+            Some(cfgs) => cfgs,\n+            None => {\n+                let _ = self.target_cfgs.fill(TargetCfgs::new(self));\n+                self.target_cfgs.borrow().unwrap()\n+            }\n+        }\n+    }\n+\n+    pub fn target_cfg(&self) -> &TargetCfg {\n+        &self.target_cfgs().current\n     }\n \n     pub fn matches_arch(&self, arch: &str) -> bool {\n@@ -449,94 +403,154 @@ impl Config {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Debug, Clone)]\n+pub struct TargetCfgs {\n+    pub current: TargetCfg,\n+    pub all_targets: HashSet<String>,\n+    pub all_archs: HashSet<String>,\n+    pub all_oses: HashSet<String>,\n+    pub all_oses_and_envs: HashSet<String>,\n+    pub all_envs: HashSet<String>,\n+    pub all_abis: HashSet<String>,\n+    pub all_families: HashSet<String>,\n+    pub all_pointer_widths: HashSet<String>,\n+}\n+\n+impl TargetCfgs {\n+    fn new(config: &Config) -> TargetCfgs {\n+        let targets: HashMap<String, TargetCfg> = if config.stage_id.starts_with(\"stage0-\") {\n+            // #[cfg(bootstrap)]\n+            // Needed only for one cycle, remove during the bootstrap bump.\n+            Self::collect_all_slow(config)\n+        } else {\n+            serde_json::from_str(&rustc_output(\n+                config,\n+                &[\"--print=all-target-specs-json\", \"-Zunstable-options\"],\n+            ))\n+            .unwrap()\n+        };\n+\n+        let mut current = None;\n+        let mut all_targets = HashSet::new();\n+        let mut all_archs = HashSet::new();\n+        let mut all_oses = HashSet::new();\n+        let mut all_oses_and_envs = HashSet::new();\n+        let mut all_envs = HashSet::new();\n+        let mut all_abis = HashSet::new();\n+        let mut all_families = HashSet::new();\n+        let mut all_pointer_widths = HashSet::new();\n+\n+        for (target, cfg) in targets.into_iter() {\n+            all_archs.insert(cfg.arch.clone());\n+            all_oses.insert(cfg.os.clone());\n+            all_oses_and_envs.insert(cfg.os_and_env());\n+            all_envs.insert(cfg.env.clone());\n+            all_abis.insert(cfg.abi.clone());\n+            for family in &cfg.families {\n+                all_families.insert(family.clone());\n+            }\n+            all_pointer_widths.insert(format!(\"{}bit\", cfg.pointer_width));\n+\n+            if target == config.target {\n+                current = Some(cfg);\n+            }\n+            all_targets.insert(target.into());\n+        }\n+\n+        Self {\n+            current: current.expect(\"current target not found\"),\n+            all_targets,\n+            all_archs,\n+            all_oses,\n+            all_oses_and_envs,\n+            all_envs,\n+            all_abis,\n+            all_families,\n+            all_pointer_widths,\n+        }\n+    }\n+\n+    // #[cfg(bootstrap)]\n+    // Needed only for one cycle, remove during the bootstrap bump.\n+    fn collect_all_slow(config: &Config) -> HashMap<String, TargetCfg> {\n+        let mut result = HashMap::new();\n+        for target in rustc_output(config, &[\"--print=target-list\"]).trim().lines() {\n+            let json = rustc_output(\n+                config,\n+                &[\"--print=target-spec-json\", \"-Zunstable-options\", \"--target\", target],\n+            );\n+            match serde_json::from_str(&json) {\n+                Ok(res) => {\n+                    result.insert(target.into(), res);\n+                }\n+                Err(err) => panic!(\"failed to parse target spec for {target}: {err}\"),\n+            }\n+        }\n+        result\n+    }\n+}\n+\n+#[derive(Clone, Debug, serde::Deserialize)]\n+#[serde(rename_all = \"kebab-case\")]\n pub struct TargetCfg {\n-    arch: String,\n-    os: String,\n-    env: String,\n-    abi: String,\n-    families: Vec<String>,\n-    pointer_width: u32,\n+    pub(crate) arch: String,\n+    #[serde(default = \"default_os\")]\n+    pub(crate) os: String,\n+    #[serde(default)]\n+    pub(crate) env: String,\n+    #[serde(default)]\n+    pub(crate) abi: String,\n+    #[serde(rename = \"target-family\", default)]\n+    pub(crate) families: Vec<String>,\n+    #[serde(rename = \"target-pointer-width\", deserialize_with = \"serde_parse_u32\")]\n+    pub(crate) pointer_width: u32,\n+    #[serde(rename = \"target-endian\", default)]\n     endian: Endian,\n+    #[serde(rename = \"panic-strategy\", default)]\n     panic: PanicStrategy,\n }\n \n-#[derive(Eq, PartialEq, Clone, Debug)]\n+impl TargetCfg {\n+    pub(crate) fn os_and_env(&self) -> String {\n+        format!(\"{}-{}\", self.os, self.env)\n+    }\n+}\n+\n+fn default_os() -> String {\n+    \"none\".into()\n+}\n+\n+#[derive(Eq, PartialEq, Clone, Debug, Default, serde::Deserialize)]\n+#[serde(rename_all = \"kebab-case\")]\n pub enum Endian {\n+    #[default]\n     Little,\n     Big,\n }\n \n-impl TargetCfg {\n-    fn new(config: &Config) -> TargetCfg {\n-        let mut command = Command::new(&config.rustc_path);\n-        add_dylib_path(&mut command, iter::once(&config.compile_lib_path));\n-        let output = match command\n-            .arg(\"--print=cfg\")\n-            .arg(\"--target\")\n-            .arg(&config.target)\n-            .args(&config.target_rustcflags)\n-            .output()\n-        {\n-            Ok(output) => output,\n-            Err(e) => panic!(\"error: failed to get cfg info from {:?}: {e}\", config.rustc_path),\n-        };\n-        if !output.status.success() {\n-            panic!(\n-                \"error: failed to get cfg info from {:?}\\n--- stdout\\n{}\\n--- stderr\\n{}\",\n-                config.rustc_path,\n-                String::from_utf8(output.stdout).unwrap(),\n-                String::from_utf8(output.stderr).unwrap(),\n-            );\n-        }\n-        let print_cfg = String::from_utf8(output.stdout).unwrap();\n-        let mut arch = None;\n-        let mut os = None;\n-        let mut env = None;\n-        let mut abi = None;\n-        let mut families = Vec::new();\n-        let mut pointer_width = None;\n-        let mut endian = None;\n-        let mut panic = None;\n-        for line in print_cfg.lines() {\n-            if let Some((name, value)) = line.split_once('=') {\n-                let value = value.trim_matches('\"');\n-                match name {\n-                    \"target_arch\" => arch = Some(value),\n-                    \"target_os\" => os = Some(value),\n-                    \"target_env\" => env = Some(value),\n-                    \"target_abi\" => abi = Some(value),\n-                    \"target_family\" => families.push(value.to_string()),\n-                    \"target_pointer_width\" => pointer_width = Some(value.parse().unwrap()),\n-                    \"target_endian\" => {\n-                        endian = Some(match value {\n-                            \"little\" => Endian::Little,\n-                            \"big\" => Endian::Big,\n-                            s => panic!(\"unexpected {s}\"),\n-                        })\n-                    }\n-                    \"panic\" => {\n-                        panic = match value {\n-                            \"abort\" => Some(PanicStrategy::Abort),\n-                            \"unwind\" => Some(PanicStrategy::Unwind),\n-                            s => panic!(\"unexpected {s}\"),\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-            }\n-        }\n-        TargetCfg {\n-            arch: arch.unwrap().to_string(),\n-            os: os.unwrap().to_string(),\n-            env: env.unwrap().to_string(),\n-            abi: abi.unwrap().to_string(),\n-            families,\n-            pointer_width: pointer_width.unwrap(),\n-            endian: endian.unwrap(),\n-            panic: panic.unwrap(),\n-        }\n+fn rustc_output(config: &Config, args: &[&str]) -> String {\n+    let mut command = Command::new(&config.rustc_path);\n+    add_dylib_path(&mut command, iter::once(&config.compile_lib_path));\n+    command.args(&config.target_rustcflags).args(args);\n+    command.env(\"RUSTC_BOOTSTRAP\", \"1\");\n+\n+    let output = match command.output() {\n+        Ok(output) => output,\n+        Err(e) => panic!(\"error: failed to run {command:?}: {e}\"),\n+    };\n+    if !output.status.success() {\n+        panic!(\n+            \"error: failed to run {command:?}\\n--- stdout\\n{}\\n--- stderr\\n{}\",\n+            String::from_utf8(output.stdout).unwrap(),\n+            String::from_utf8(output.stderr).unwrap(),\n+        );\n     }\n+    String::from_utf8(output.stdout).unwrap()\n+}\n+\n+fn serde_parse_u32<'de, D: Deserializer<'de>>(deserializer: D) -> Result<u32, D::Error> {\n+    let string = String::deserialize(deserializer)?;\n+    string.parse().map_err(D::Error::custom)\n }\n \n #[derive(Debug, Clone)]"}, {"sha": "50b99b805729301c9b27c72b55e4b9234691a460", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 39, "deletions": 84, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -8,22 +8,16 @@ use std::process::Command;\n \n use tracing::*;\n \n-use crate::common::{CompareMode, Config, Debugger, FailMode, Mode, PassMode};\n+use crate::common::{Config, Debugger, FailMode, Mode, PassMode};\n+use crate::header::cfg::parse_cfg_name_directive;\n+use crate::header::cfg::MatchOutcome;\n use crate::util;\n use crate::{extract_cdb_version, extract_gdb_version};\n \n+mod cfg;\n #[cfg(test)]\n mod tests;\n \n-/// The result of parse_cfg_name_directive.\n-#[derive(Clone, Copy, PartialEq, Debug)]\n-enum ParsedNameDirective {\n-    /// No match.\n-    NoMatch,\n-    /// Match.\n-    Match,\n-}\n-\n /// Properties which must be known very early, before actually running\n /// the test.\n #[derive(Default)]\n@@ -647,7 +641,7 @@ impl Config {\n     }\n \n     fn parse_custom_normalization(&self, mut line: &str, prefix: &str) -> Option<(String, String)> {\n-        if self.parse_cfg_name_directive(line, prefix) == ParsedNameDirective::Match {\n+        if parse_cfg_name_directive(self, line, prefix).outcome == MatchOutcome::Match {\n             let from = parse_normalization_string(&mut line)?;\n             let to = parse_normalization_string(&mut line)?;\n             Some((from, to))\n@@ -664,68 +658,6 @@ impl Config {\n         self.parse_name_directive(line, \"needs-profiler-support\")\n     }\n \n-    /// Parses a name-value directive which contains config-specific information, e.g., `ignore-x86`\n-    /// or `normalize-stderr-32bit`.\n-    fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> ParsedNameDirective {\n-        if !line.as_bytes().starts_with(prefix.as_bytes()) {\n-            return ParsedNameDirective::NoMatch;\n-        }\n-        if line.as_bytes().get(prefix.len()) != Some(&b'-') {\n-            return ParsedNameDirective::NoMatch;\n-        }\n-\n-        let name = line[prefix.len() + 1..].split(&[':', ' '][..]).next().unwrap();\n-\n-        let matches_pointer_width = || {\n-            name.strip_suffix(\"bit\")\n-                .and_then(|width| width.parse::<u32>().ok())\n-                .map(|width| self.get_pointer_width() == width)\n-                .unwrap_or(false)\n-        };\n-\n-        // If something is ignored for emscripten, it likely also needs to be\n-        // ignored for wasm32-unknown-unknown.\n-        // `wasm32-bare` is an alias to refer to just wasm32-unknown-unknown\n-        // (in contrast to `wasm32` which also matches non-bare targets like\n-        // asmjs-unknown-emscripten).\n-        let matches_wasm32_alias = || {\n-            self.target == \"wasm32-unknown-unknown\" && matches!(name, \"emscripten\" | \"wasm32-bare\")\n-        };\n-\n-        let is_match = name == \"test\" ||\n-            self.target == name ||                              // triple\n-            self.matches_os(name) ||\n-            self.matches_env(name) ||\n-            self.matches_abi(name) ||\n-            self.matches_family(name) ||\n-            self.target.ends_with(name) ||                      // target and env\n-            self.matches_arch(name) ||\n-            matches_wasm32_alias() ||\n-            matches_pointer_width() ||\n-            name == self.stage_id.split('-').next().unwrap() || // stage\n-            name == self.channel ||                             // channel\n-            (self.target != self.host && name == \"cross-compile\") ||\n-            (name == \"endian-big\" && self.is_big_endian()) ||\n-            (self.remote_test_client.is_some() && name == \"remote\") ||\n-            match self.compare_mode {\n-                Some(CompareMode::Polonius) => name == \"compare-mode-polonius\",\n-                Some(CompareMode::Chalk) => name == \"compare-mode-chalk\",\n-                Some(CompareMode::NextSolver) => name == \"compare-mode-next-solver\",\n-                Some(CompareMode::SplitDwarf) => name == \"compare-mode-split-dwarf\",\n-                Some(CompareMode::SplitDwarfSingle) => name == \"compare-mode-split-dwarf-single\",\n-                None => false,\n-            } ||\n-            (cfg!(debug_assertions) && name == \"debug\") ||\n-            match self.debugger {\n-                Some(Debugger::Cdb) => name == \"cdb\",\n-                Some(Debugger::Gdb) => name == \"gdb\",\n-                Some(Debugger::Lldb) => name == \"lldb\",\n-                None => false,\n-            };\n-\n-        if is_match { ParsedNameDirective::Match } else { ParsedNameDirective::NoMatch }\n-    }\n-\n     fn has_cfg_prefix(&self, line: &str, prefix: &str) -> bool {\n         // returns whether this line contains this prefix or not. For prefix\n         // \"ignore\", returns true if line says \"ignore-x86_64\", \"ignore-arch\",\n@@ -992,21 +924,44 @@ pub fn make_test_description<R: Read>(\n                 }\n             };\n         }\n-        ignore = match config.parse_cfg_name_directive(ln, \"ignore\") {\n-            ParsedNameDirective::Match => {\n-                ignore_message = Some(\"cfg -> ignore => Match\");\n-                true\n-            }\n-            ParsedNameDirective::NoMatch => ignore,\n-        };\n+\n+        {\n+            let parsed = parse_cfg_name_directive(config, ln, \"ignore\");\n+            ignore = match parsed.outcome {\n+                MatchOutcome::Match => {\n+                    let reason = parsed.pretty_reason.unwrap();\n+                    // The ignore reason must be a &'static str, so we have to leak memory to\n+                    // create it. This is fine, as the header is parsed only at the start of\n+                    // compiletest so it won't grow indefinitely.\n+                    ignore_message = Some(Box::leak(Box::<str>::from(match parsed.comment {\n+                        Some(comment) => format!(\"ignored {reason} ({comment})\"),\n+                        None => format!(\"ignored {reason}\"),\n+                    })) as &str);\n+                    true\n+                }\n+                MatchOutcome::NoMatch => ignore,\n+                MatchOutcome::External => ignore,\n+                MatchOutcome::Invalid => panic!(\"invalid line in {}: {ln}\", path.display()),\n+            };\n+        }\n \n         if config.has_cfg_prefix(ln, \"only\") {\n-            ignore = match config.parse_cfg_name_directive(ln, \"only\") {\n-                ParsedNameDirective::Match => ignore,\n-                ParsedNameDirective::NoMatch => {\n-                    ignore_message = Some(\"cfg -> only => NoMatch\");\n+            let parsed = parse_cfg_name_directive(config, ln, \"only\");\n+            ignore = match parsed.outcome {\n+                MatchOutcome::Match => ignore,\n+                MatchOutcome::NoMatch => {\n+                    let reason = parsed.pretty_reason.unwrap();\n+                    // The ignore reason must be a &'static str, so we have to leak memory to\n+                    // create it. This is fine, as the header is parsed only at the start of\n+                    // compiletest so it won't grow indefinitely.\n+                    ignore_message = Some(Box::leak(Box::<str>::from(match parsed.comment {\n+                        Some(comment) => format!(\"only executed {reason} ({comment})\"),\n+                        None => format!(\"only executed {reason}\"),\n+                    })) as &str);\n                     true\n                 }\n+                MatchOutcome::External => ignore,\n+                MatchOutcome::Invalid => panic!(\"invalid line in {}: {ln}\", path.display()),\n             };\n         }\n "}, {"sha": "3b9333dfe7a0b100ea8918bc9af2c923eeb0fcef", "filename": "src/tools/compiletest/src/header/cfg.rs", "status": "added", "additions": 320, "deletions": 0, "changes": 320, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -0,0 +1,320 @@\n+use crate::common::{CompareMode, Config, Debugger};\n+use std::collections::HashSet;\n+\n+const EXTRA_ARCHS: &[&str] = &[\"spirv\"];\n+\n+/// Parses a name-value directive which contains config-specific information, e.g., `ignore-x86`\n+/// or `normalize-stderr-32bit`.\n+pub(super) fn parse_cfg_name_directive<'a>(\n+    config: &Config,\n+    line: &'a str,\n+    prefix: &str,\n+) -> ParsedNameDirective<'a> {\n+    if !line.as_bytes().starts_with(prefix.as_bytes()) {\n+        return ParsedNameDirective::invalid();\n+    }\n+    if line.as_bytes().get(prefix.len()) != Some(&b'-') {\n+        return ParsedNameDirective::invalid();\n+    }\n+    let line = &line[prefix.len() + 1..];\n+\n+    let (name, comment) =\n+        line.split_once(&[':', ' ']).map(|(l, c)| (l, Some(c))).unwrap_or((line, None));\n+\n+    // Some of the matchers might be \"\" depending on what the target information is. To avoid\n+    // problems we outright reject empty directives.\n+    if name == \"\" {\n+        return ParsedNameDirective::invalid();\n+    }\n+\n+    let mut outcome = MatchOutcome::Invalid;\n+    let mut message = None;\n+\n+    macro_rules! condition {\n+        (\n+            name: $name:expr,\n+            $(allowed_names: $allowed_names:expr,)?\n+            $(condition: $condition:expr,)?\n+            message: $($message:tt)*\n+        ) => {{\n+            // This is not inlined to avoid problems with macro repetitions.\n+            let format_message = || format!($($message)*);\n+\n+            if outcome != MatchOutcome::Invalid {\n+                // Ignore all other matches if we already found one\n+            } else if $name.custom_matches(name) {\n+                message = Some(format_message());\n+                if true $(&& $condition)? {\n+                    outcome = MatchOutcome::Match;\n+                } else {\n+                    outcome = MatchOutcome::NoMatch;\n+                }\n+            }\n+            $(else if $allowed_names.custom_contains(name) {\n+                message = Some(format_message());\n+                outcome = MatchOutcome::NoMatch;\n+            })?\n+        }};\n+    }\n+\n+    let target_cfgs = config.target_cfgs();\n+    let target_cfg = config.target_cfg();\n+\n+    condition! {\n+        name: \"test\",\n+        message: \"always\"\n+    }\n+    condition! {\n+        name: &config.target,\n+        allowed_names: &target_cfgs.all_targets,\n+        message: \"when the target is {name}\"\n+    }\n+    condition! {\n+        name: &[\n+            Some(&*target_cfg.os),\n+            // If something is ignored for emscripten, it likely also needs to be\n+            // ignored for wasm32-unknown-unknown.\n+            (config.target == \"wasm32-unknown-unknown\").then_some(\"emscripten\"),\n+        ],\n+        allowed_names: &target_cfgs.all_oses,\n+        message: \"when the operative system is {name}\"\n+    }\n+    condition! {\n+        name: &target_cfg.env,\n+        allowed_names: &target_cfgs.all_envs,\n+        message: \"when the target environment is {name}\"\n+    }\n+    condition! {\n+        name: &target_cfg.os_and_env(),\n+        allowed_names: &target_cfgs.all_oses_and_envs,\n+        message: \"when the operative system and target environment are {name}\"\n+    }\n+    condition! {\n+        name: &target_cfg.abi,\n+        allowed_names: &target_cfgs.all_abis,\n+        message: \"when the ABI is {name}\"\n+    }\n+    condition! {\n+        name: &target_cfg.arch,\n+        allowed_names: ContainsEither { a: &target_cfgs.all_archs, b: &EXTRA_ARCHS },\n+        message: \"when the architecture is {name}\"\n+    }\n+    condition! {\n+        name: format!(\"{}bit\", target_cfg.pointer_width),\n+        allowed_names: &target_cfgs.all_pointer_widths,\n+        message: \"when the pointer width is {name}\"\n+    }\n+    condition! {\n+        name: &*target_cfg.families,\n+        allowed_names: &target_cfgs.all_families,\n+        message: \"when the target family is {name}\"\n+    }\n+\n+    // `wasm32-bare` is an alias to refer to just wasm32-unknown-unknown\n+    // (in contrast to `wasm32` which also matches non-bare targets like\n+    // asmjs-unknown-emscripten).\n+    condition! {\n+        name: \"wasm32-bare\",\n+        condition: config.target == \"wasm32-unknown-unknown\",\n+        message: \"when the target is WASM\"\n+    }\n+\n+    condition! {\n+        name: \"asmjs\",\n+        condition: config.target.starts_with(\"asmjs\"),\n+        message: \"when the architecture is asm.js\",\n+    }\n+    condition! {\n+        name: \"thumb\",\n+        condition: config.target.starts_with(\"thumb\"),\n+        message: \"when the architecture is part of the Thumb family\"\n+    }\n+\n+    condition! {\n+        name: &config.channel,\n+        allowed_names: &[\"stable\", \"beta\", \"nightly\"],\n+        message: \"when the release channel is {name}\",\n+    }\n+    condition! {\n+        name: \"cross-compile\",\n+        condition: config.target != config.host,\n+        message: \"when cross-compiling\"\n+    }\n+    condition! {\n+        name: \"endian-big\",\n+        condition: config.is_big_endian(),\n+        message: \"on big-endian targets\",\n+    }\n+    condition! {\n+        name: config.stage_id.split('-').next().unwrap(),\n+        allowed_names: &[\"stage0\", \"stage1\", \"stage2\"],\n+        message: \"when the bootstrapping stage is {name}\",\n+    }\n+    condition! {\n+        name: \"remote\",\n+        condition: config.remote_test_client.is_some(),\n+        message: \"when running tests remotely\",\n+    }\n+    condition! {\n+        name: \"debug\",\n+        condition: cfg!(debug_assertions),\n+        message: \"when building with debug assertions\",\n+    }\n+    condition! {\n+        name: config.debugger.as_ref().map(|d| d.to_str()),\n+        allowed_names: &Debugger::STR_VARIANTS,\n+        message: \"when the debugger is {name}\",\n+    }\n+    condition! {\n+        name: config.compare_mode\n+            .as_ref()\n+            .map(|d| format!(\"compare-mode-{}\", d.to_str())),\n+        allowed_names: ContainsPrefixed {\n+            prefix: \"compare-mode-\",\n+            inner: CompareMode::STR_VARIANTS,\n+        },\n+        message: \"when comparing with {name}\",\n+    }\n+\n+    if prefix == \"ignore\" && outcome == MatchOutcome::Invalid {\n+        // Don't error out for ignore-tidy-* diretives, as those are not handled by compiletest.\n+        if name.starts_with(\"tidy-\") {\n+            outcome = MatchOutcome::External;\n+        }\n+\n+        // Don't error out for ignore-pass, as that is handled elsewhere.\n+        if name == \"pass\" {\n+            outcome = MatchOutcome::External;\n+        }\n+\n+        // Don't error out for ignore-llvm-version, that has a custom syntax and is handled\n+        // elsewhere.\n+        if name == \"llvm-version\" {\n+            outcome = MatchOutcome::External;\n+        }\n+\n+        // Don't error out for ignore-llvm-version, that has a custom syntax and is handled\n+        // elsewhere.\n+        if name == \"gdb-version\" {\n+            outcome = MatchOutcome::External;\n+        }\n+    }\n+\n+    ParsedNameDirective {\n+        name: Some(name),\n+        comment: comment.map(|c| c.trim().trim_start_matches('-').trim()),\n+        outcome,\n+        pretty_reason: message,\n+    }\n+}\n+\n+/// The result of parse_cfg_name_directive.\n+#[derive(Clone, PartialEq, Debug)]\n+pub(super) struct ParsedNameDirective<'a> {\n+    pub(super) name: Option<&'a str>,\n+    pub(super) pretty_reason: Option<String>,\n+    pub(super) comment: Option<&'a str>,\n+    pub(super) outcome: MatchOutcome,\n+}\n+\n+impl ParsedNameDirective<'_> {\n+    fn invalid() -> Self {\n+        Self { name: None, pretty_reason: None, comment: None, outcome: MatchOutcome::NoMatch }\n+    }\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Debug)]\n+pub(super) enum MatchOutcome {\n+    /// No match.\n+    NoMatch,\n+    /// Match.\n+    Match,\n+    /// The directive was invalid.\n+    Invalid,\n+    /// The directive is handled by other parts of our tooling.\n+    External,\n+}\n+\n+trait CustomContains {\n+    fn custom_contains(&self, item: &str) -> bool;\n+}\n+\n+impl CustomContains for HashSet<String> {\n+    fn custom_contains(&self, item: &str) -> bool {\n+        self.contains(item)\n+    }\n+}\n+\n+impl CustomContains for &[&str] {\n+    fn custom_contains(&self, item: &str) -> bool {\n+        self.contains(&item)\n+    }\n+}\n+\n+impl<const N: usize> CustomContains for [&str; N] {\n+    fn custom_contains(&self, item: &str) -> bool {\n+        self.contains(&item)\n+    }\n+}\n+\n+struct ContainsPrefixed<T: CustomContains> {\n+    prefix: &'static str,\n+    inner: T,\n+}\n+\n+impl<T: CustomContains> CustomContains for ContainsPrefixed<T> {\n+    fn custom_contains(&self, item: &str) -> bool {\n+        match item.strip_prefix(self.prefix) {\n+            Some(stripped) => self.inner.custom_contains(stripped),\n+            None => false,\n+        }\n+    }\n+}\n+\n+struct ContainsEither<'a, A: CustomContains, B: CustomContains> {\n+    a: &'a A,\n+    b: &'a B,\n+}\n+\n+impl<A: CustomContains, B: CustomContains> CustomContains for ContainsEither<'_, A, B> {\n+    fn custom_contains(&self, item: &str) -> bool {\n+        self.a.custom_contains(item) || self.b.custom_contains(item)\n+    }\n+}\n+\n+trait CustomMatches {\n+    fn custom_matches(&self, name: &str) -> bool;\n+}\n+\n+impl CustomMatches for &str {\n+    fn custom_matches(&self, name: &str) -> bool {\n+        name == *self\n+    }\n+}\n+\n+impl CustomMatches for String {\n+    fn custom_matches(&self, name: &str) -> bool {\n+        name == self\n+    }\n+}\n+\n+impl<T: CustomMatches> CustomMatches for &[T] {\n+    fn custom_matches(&self, name: &str) -> bool {\n+        self.iter().any(|m| m.custom_matches(name))\n+    }\n+}\n+\n+impl<const N: usize, T: CustomMatches> CustomMatches for [T; N] {\n+    fn custom_matches(&self, name: &str) -> bool {\n+        self.iter().any(|m| m.custom_matches(name))\n+    }\n+}\n+\n+impl<T: CustomMatches> CustomMatches for Option<T> {\n+    fn custom_matches(&self, name: &str) -> bool {\n+        match self {\n+            Some(inner) => inner.custom_matches(name),\n+            None => false,\n+        }\n+    }\n+}"}, {"sha": "acd588d7fee04d24f1ccbe44057d872a1e66083c", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -47,7 +47,7 @@ fn config() -> Config {\n         \"--src-base=\",\n         \"--build-base=\",\n         \"--sysroot-base=\",\n-        \"--stage-id=stage2\",\n+        \"--stage-id=stage2-x86_64-unknown-linux-gnu\",\n         \"--cc=c\",\n         \"--cxx=c++\",\n         \"--cflags=\",\n@@ -174,7 +174,7 @@ fn ignore_target() {\n     assert!(check_ignore(&config, \"// ignore-gnu\"));\n     assert!(check_ignore(&config, \"// ignore-64bit\"));\n \n-    assert!(!check_ignore(&config, \"// ignore-i686\"));\n+    assert!(!check_ignore(&config, \"// ignore-x86\"));\n     assert!(!check_ignore(&config, \"// ignore-windows\"));\n     assert!(!check_ignore(&config, \"// ignore-msvc\"));\n     assert!(!check_ignore(&config, \"// ignore-32bit\"));\n@@ -200,7 +200,7 @@ fn only_target() {\n #[test]\n fn stage() {\n     let mut config = config();\n-    config.stage_id = \"stage1\".to_owned();\n+    config.stage_id = \"stage1-x86_64-unknown-linux-gnu\".to_owned();\n \n     assert!(check_ignore(&config, \"// ignore-stage1\"));\n     assert!(!check_ignore(&config, \"// ignore-stage2\"));"}, {"sha": "cfb1ee34f679a5d37fef0fefc13a3b6abedd141f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 43, "deletions": 29, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -6,12 +6,12 @@\n extern crate test;\n \n use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n-use crate::common::{CompareMode, Config, Debugger, Mode, PassMode, TestPaths};\n+use crate::common::{Config, Debugger, Mode, PassMode, TestPaths};\n use crate::util::logv;\n use build_helper::git::{get_git_modified_files, get_git_untracked_files};\n use core::panic;\n use getopts::Options;\n-use lazycell::LazyCell;\n+use lazycell::AtomicLazyCell;\n use std::collections::BTreeSet;\n use std::ffi::OsString;\n use std::fs;\n@@ -25,6 +25,7 @@ use tracing::*;\n use walkdir::WalkDir;\n \n use self::header::{make_test_description, EarlyProps};\n+use std::sync::Arc;\n \n #[cfg(test)]\n mod tests;\n@@ -42,7 +43,7 @@ pub mod util;\n fn main() {\n     tracing_subscriber::fmt::init();\n \n-    let config = parse_config(env::args().collect());\n+    let config = Arc::new(parse_config(env::args().collect()));\n \n     if config.valgrind_path.is_none() && config.force_valgrind {\n         panic!(\"Can't find Valgrind to run Valgrind tests\");\n@@ -293,7 +294,9 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         only_modified: matches.opt_present(\"only-modified\"),\n         color,\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n-        compare_mode: matches.opt_str(\"compare-mode\").map(CompareMode::parse),\n+        compare_mode: matches\n+            .opt_str(\"compare-mode\")\n+            .map(|s| s.parse().expect(\"invalid --compare-mode provided\")),\n         rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n         has_tidy,\n         channel: matches.opt_str(\"channel\").unwrap(),\n@@ -311,7 +314,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n \n         force_rerun: matches.opt_present(\"force-rerun\"),\n \n-        target_cfg: LazyCell::new(),\n+        target_cfgs: AtomicLazyCell::new(),\n \n         nocapture: matches.opt_present(\"nocapture\"),\n     }\n@@ -367,7 +370,7 @@ pub fn opt_str2(maybestr: Option<String>) -> String {\n     }\n }\n \n-pub fn run_tests(config: Config) {\n+pub fn run_tests(config: Arc<Config>) {\n     // If we want to collect rustfix coverage information,\n     // we first make sure that the coverage file does not exist.\n     // It will be created later on.\n@@ -409,7 +412,7 @@ pub fn run_tests(config: Config) {\n     };\n \n     let mut tests = Vec::new();\n-    for c in &configs {\n+    for c in configs {\n         let mut found_paths = BTreeSet::new();\n         make_tests(c, &mut tests, &mut found_paths);\n         check_overlapping_tests(&found_paths);\n@@ -431,7 +434,11 @@ pub fn run_tests(config: Config) {\n             println!(\n                 \"Some tests failed in compiletest suite={}{} mode={} host={} target={}\",\n                 config.suite,\n-                config.compare_mode.map(|c| format!(\" compare_mode={:?}\", c)).unwrap_or_default(),\n+                config\n+                    .compare_mode\n+                    .as_ref()\n+                    .map(|c| format!(\" compare_mode={:?}\", c))\n+                    .unwrap_or_default(),\n                 config.mode,\n                 config.host,\n                 config.target\n@@ -451,13 +458,13 @@ pub fn run_tests(config: Config) {\n     }\n }\n \n-fn configure_cdb(config: &Config) -> Option<Config> {\n+fn configure_cdb(config: &Config) -> Option<Arc<Config>> {\n     config.cdb.as_ref()?;\n \n-    Some(Config { debugger: Some(Debugger::Cdb), ..config.clone() })\n+    Some(Arc::new(Config { debugger: Some(Debugger::Cdb), ..config.clone() }))\n }\n \n-fn configure_gdb(config: &Config) -> Option<Config> {\n+fn configure_gdb(config: &Config) -> Option<Arc<Config>> {\n     config.gdb_version?;\n \n     if config.matches_env(\"msvc\") {\n@@ -488,10 +495,10 @@ fn configure_gdb(config: &Config) -> Option<Config> {\n         env::set_var(\"RUST_TEST_THREADS\", \"1\");\n     }\n \n-    Some(Config { debugger: Some(Debugger::Gdb), ..config.clone() })\n+    Some(Arc::new(Config { debugger: Some(Debugger::Gdb), ..config.clone() }))\n }\n \n-fn configure_lldb(config: &Config) -> Option<Config> {\n+fn configure_lldb(config: &Config) -> Option<Arc<Config>> {\n     config.lldb_python_dir.as_ref()?;\n \n     if let Some(350) = config.lldb_version {\n@@ -504,7 +511,7 @@ fn configure_lldb(config: &Config) -> Option<Config> {\n         return None;\n     }\n \n-    Some(Config { debugger: Some(Debugger::Lldb), ..config.clone() })\n+    Some(Arc::new(Config { debugger: Some(Debugger::Lldb), ..config.clone() }))\n }\n \n pub fn test_opts(config: &Config) -> test::TestOpts {\n@@ -539,17 +546,17 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n }\n \n pub fn make_tests(\n-    config: &Config,\n+    config: Arc<Config>,\n     tests: &mut Vec<test::TestDescAndFn>,\n     found_paths: &mut BTreeSet<PathBuf>,\n ) {\n     debug!(\"making tests from {:?}\", config.src_base.display());\n-    let inputs = common_inputs_stamp(config);\n-    let modified_tests = modified_tests(config, &config.src_base).unwrap_or_else(|err| {\n+    let inputs = common_inputs_stamp(&config);\n+    let modified_tests = modified_tests(&config, &config.src_base).unwrap_or_else(|err| {\n         panic!(\"modified_tests got error from dir: {}, error: {}\", config.src_base.display(), err)\n     });\n     collect_tests_from_dir(\n-        config,\n+        config.clone(),\n         &config.src_base,\n         &PathBuf::new(),\n         &inputs,\n@@ -620,7 +627,7 @@ fn modified_tests(config: &Config, dir: &Path) -> Result<Vec<PathBuf>, String> {\n }\n \n fn collect_tests_from_dir(\n-    config: &Config,\n+    config: Arc<Config>,\n     dir: &Path,\n     relative_dir_path: &Path,\n     inputs: &Stamp,\n@@ -648,7 +655,7 @@ fn collect_tests_from_dir(\n     // sequential loop because otherwise, if we do it in the\n     // tests themselves, they race for the privilege of\n     // creating the directories and sometimes fail randomly.\n-    let build_dir = output_relative_path(config, relative_dir_path);\n+    let build_dir = output_relative_path(&config, relative_dir_path);\n     fs::create_dir_all(&build_dir).unwrap();\n \n     // Add each `.rs` file as a test, and recurse further on any\n@@ -664,13 +671,13 @@ fn collect_tests_from_dir(\n             let paths =\n                 TestPaths { file: file_path, relative_dir: relative_dir_path.to_path_buf() };\n \n-            tests.extend(make_test(config, &paths, inputs))\n+            tests.extend(make_test(config.clone(), &paths, inputs))\n         } else if file_path.is_dir() {\n             let relative_file_path = relative_dir_path.join(file.file_name());\n             if &file_name != \"auxiliary\" {\n                 debug!(\"found directory: {:?}\", file_path.display());\n                 collect_tests_from_dir(\n-                    config,\n+                    config.clone(),\n                     &file_path,\n                     &relative_file_path,\n                     inputs,\n@@ -699,14 +706,18 @@ pub fn is_test(file_name: &OsString) -> bool {\n     !invalid_prefixes.iter().any(|p| file_name.starts_with(p))\n }\n \n-fn make_test(config: &Config, testpaths: &TestPaths, inputs: &Stamp) -> Vec<test::TestDescAndFn> {\n+fn make_test(\n+    config: Arc<Config>,\n+    testpaths: &TestPaths,\n+    inputs: &Stamp,\n+) -> Vec<test::TestDescAndFn> {\n     let test_path = if config.mode == Mode::RunMake {\n         // Parse directives in the Makefile\n         testpaths.file.join(\"Makefile\")\n     } else {\n         PathBuf::from(&testpaths.file)\n     };\n-    let early_props = EarlyProps::from_file(config, &test_path);\n+    let early_props = EarlyProps::from_file(&config, &test_path);\n \n     // Incremental tests are special, they inherently cannot be run in parallel.\n     // `runtest::run` will be responsible for iterating over revisions.\n@@ -721,19 +732,22 @@ fn make_test(config: &Config, testpaths: &TestPaths, inputs: &Stamp) -> Vec<test\n             let src_file =\n                 std::fs::File::open(&test_path).expect(\"open test file to parse ignores\");\n             let cfg = revision.map(|v| &**v);\n-            let test_name = crate::make_test_name(config, testpaths, revision);\n-            let mut desc = make_test_description(config, test_name, &test_path, src_file, cfg);\n+            let test_name = crate::make_test_name(&config, testpaths, revision);\n+            let mut desc = make_test_description(&config, test_name, &test_path, src_file, cfg);\n             // Ignore tests that already run and are up to date with respect to inputs.\n             if !config.force_rerun {\n                 desc.ignore |= is_up_to_date(\n-                    config,\n+                    &config,\n                     testpaths,\n                     &early_props,\n                     revision.map(|s| s.as_str()),\n                     inputs,\n                 );\n             }\n-            test::TestDescAndFn { desc, testfn: make_test_closure(config, testpaths, revision) }\n+            test::TestDescAndFn {\n+                desc,\n+                testfn: make_test_closure(config.clone(), testpaths, revision),\n+            }\n         })\n         .collect()\n }\n@@ -867,7 +881,7 @@ fn make_test_name(\n }\n \n fn make_test_closure(\n-    config: &Config,\n+    config: Arc<Config>,\n     testpaths: &TestPaths,\n     revision: Option<&String>,\n ) -> test::TestFn {"}, {"sha": "794c845458b24a386dfab0f9f174a921afacd264", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -30,6 +30,7 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::{Child, Command, ExitStatus, Output, Stdio};\n use std::str;\n+use std::sync::Arc;\n \n use glob::glob;\n use once_cell::sync::Lazy;\n@@ -96,7 +97,7 @@ pub fn get_lib_name(lib: &str, dylib: bool) -> String {\n     }\n }\n \n-pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n+pub fn run(config: Arc<Config>, testpaths: &TestPaths, revision: Option<&str>) {\n     match &*config.target {\n         \"arm-linux-androideabi\"\n         | \"armv7-linux-androideabi\""}, {"sha": "3548cc06a5b633d9827a985804d2e27228e441cb", "filename": "tests/codegen/abi-main-signature-16bit-c-int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -17,7 +17,6 @@\n // ignore-wasm32\n // ignore-x86\n // ignore-x86_64\n-// ignore-xcore\n \n fn main() {\n }"}, {"sha": "9912b1e75bf5ad05b761d35b0aed9b679fe4d9d9", "filename": "tests/codegen/global_asm.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,39 +1,20 @@\n // ignore-aarch64\n-// ignore-aarch64_be\n // ignore-arm\n-// ignore-armeb\n // ignore-avr\n-// ignore-bpfel\n-// ignore-bpfeb\n+// ignore-bpf\n+// ignore-bpf\n // ignore-hexagon\n // ignore-mips\n // ignore-mips64\n // ignore-msp430\n // ignore-powerpc64\n-// ignore-powerpc64le\n // ignore-powerpc\n-// ignore-r600\n-// ignore-amdgcn\n // ignore-sparc\n-// ignore-sparcv9\n-// ignore-sparcel\n+// ignore-sparc64\n // ignore-s390x\n-// ignore-tce\n // ignore-thumb\n-// ignore-thumbeb\n-// ignore-xcore\n-// ignore-nvptx\n // ignore-nvptx64\n-// ignore-le32\n-// ignore-le64\n-// ignore-amdil\n-// ignore-amdil64\n-// ignore-hsail\n-// ignore-hsail64\n-// ignore-spir\n-// ignore-spir64\n-// ignore-kalimba\n-// ignore-shave\n+// ignore-spirv\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten"}, {"sha": "b68c5ad3b9dddcf01a99c62ed18872a30be20a65", "filename": "tests/codegen/global_asm_include.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Fglobal_asm_include.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Fglobal_asm_include.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm_include.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,39 +1,20 @@\n // ignore-aarch64\n-// ignore-aarch64_be\n // ignore-arm\n-// ignore-armeb\n // ignore-avr\n-// ignore-bpfel\n-// ignore-bpfeb\n+// ignore-bpf\n+// ignore-bpf\n // ignore-hexagon\n // ignore-mips\n // ignore-mips64\n // ignore-msp430\n // ignore-powerpc64\n-// ignore-powerpc64le\n // ignore-powerpc\n-// ignore-r600\n-// ignore-amdgcn\n // ignore-sparc\n-// ignore-sparcv9\n-// ignore-sparcel\n+// ignore-sparc64\n // ignore-s390x\n-// ignore-tce\n // ignore-thumb\n-// ignore-thumbeb\n-// ignore-xcore\n-// ignore-nvptx\n // ignore-nvptx64\n-// ignore-le32\n-// ignore-le64\n-// ignore-amdil\n-// ignore-amdil64\n-// ignore-hsail\n-// ignore-hsail64\n-// ignore-spir\n-// ignore-spir64\n-// ignore-kalimba\n-// ignore-shave\n+// ignore-spirv\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten"}, {"sha": "d87e02befb9bfa642aa8b87a9b287aafb2c8c19b", "filename": "tests/codegen/global_asm_x2.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Fglobal_asm_x2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Fglobal_asm_x2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm_x2.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,39 +1,20 @@\n // ignore-aarch64\n-// ignore-aarch64_be\n // ignore-arm\n-// ignore-armeb\n // ignore-avr\n-// ignore-bpfel\n-// ignore-bpfeb\n+// ignore-bpf\n+// ignore-bpf\n // ignore-hexagon\n // ignore-mips\n // ignore-mips64\n // ignore-msp430\n // ignore-powerpc64\n-// ignore-powerpc64le\n // ignore-powerpc\n-// ignore-r600\n-// ignore-amdgcn\n // ignore-sparc\n-// ignore-sparcv9\n-// ignore-sparcel\n+// ignore-sparc64\n // ignore-s390x\n-// ignore-tce\n // ignore-thumb\n-// ignore-thumbeb\n-// ignore-xcore\n-// ignore-nvptx\n // ignore-nvptx64\n-// ignore-le32\n-// ignore-le64\n-// ignore-amdil\n-// ignore-amdil64\n-// ignore-hsail\n-// ignore-hsail64\n-// ignore-spir\n-// ignore-spir64\n-// ignore-kalimba\n-// ignore-shave\n+// ignore-spirv\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten"}, {"sha": "4f386d335c7d92640e1186526a6947372a10cb8d", "filename": "tests/codegen/issues/issue-37945.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Fissues%2Fissue-37945.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Fissues%2Fissue-37945.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissues%2Fissue-37945.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,9 +1,5 @@\n // compile-flags: -O -Zmerge-functions=disabled\n-// ignore-x86\n-// ignore-arm\n-// ignore-emscripten\n-// ignore-gnux32\n-// ignore 32-bit platforms (LLVM has a bug with them)\n+// ignore-32bit LLVM has a bug with them\n // ignore-debug\n \n // Check that LLVM understands that `Iter` pointer is not null. Issue #37945."}, {"sha": "e9fa5143b1889258c3190896996573ae14cac1d0", "filename": "tests/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -6,7 +6,6 @@\n // ignore-mips64\n // ignore-powerpc\n // ignore-powerpc64\n-// ignore-powerpc64le\n // ignore-riscv64 see codegen/riscv-abi\n // ignore-s390x\n // ignore-sparc"}, {"sha": "8379730cc3df347ac43286b5e00312fc53e3a021", "filename": "tests/run-make/static-pie/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Frun-make%2Fstatic-pie%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Frun-make%2Fstatic-pie%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstatic-pie%2FMakefile?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -2,7 +2,7 @@ include ../tools.mk\n \n # only-x86_64\n # only-linux\n-# ignore-gnux32\n+# ignore-32bit\n \n # How to manually run this\n # $ ./x.py test --target x86_64-unknown-linux-[musl,gnu] tests/run-make/static-pie"}, {"sha": "b8ec7e8dcda90bb5011fa766f7a26ff7a741445b", "filename": "tests/run-make/use-extern-for-plugins/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Frun-make%2Fuse-extern-for-plugins%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Frun-make%2Fuse-extern-for-plugins%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fuse-extern-for-plugins%2FMakefile?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -2,7 +2,7 @@ include ../tools.mk\n \n # ignore-freebsd\n # ignore-openbsd\n-# ignore-sunos\n+# ignore-solaris\n \n HOST := $(shell $(RUSTC) -vV | grep 'host:' | sed 's/host: //')\n ifeq ($(findstring i686,$(HOST)),i686)"}, {"sha": "bea6ce067f6e870a5446340017db73f1f78cfcf1", "filename": "tests/run-make/valid-print-requests/valid-print-requests.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,2 +1,2 @@\n-error: unknown print request `uwu`. Valid print requests are: `crate-name`, `file-names`, `sysroot`, `target-libdir`, `cfg`, `calling-conventions`, `target-list`, `target-cpus`, `target-features`, `relocation-models`, `code-models`, `tls-models`, `native-static-libs`, `stack-protector-strategies`, `target-spec-json`, `link-args`, `split-debuginfo`\n+error: unknown print request `uwu`. Valid print requests are: `crate-name`, `file-names`, `sysroot`, `target-libdir`, `cfg`, `calling-conventions`, `target-list`, `target-cpus`, `target-features`, `relocation-models`, `code-models`, `tls-models`, `native-static-libs`, `stack-protector-strategies`, `target-spec-json`, `all-target-specs-json`, `link-args`, `split-debuginfo`\n "}, {"sha": "03dab2350402d8c9aac013041ebcb7564c6cb41f", "filename": "tests/ui-fulldeps/stable-mir/crate-info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // Test that users are able to use stable mir APIs to retrieve information of the current crate\n \n-// ignore-stage-1\n+// ignore-stage1\n // ignore-cross-compile\n // ignore-remote\n // edition: 2021"}, {"sha": "039507d51040ba2d5fbc9042498667a080d75bab", "filename": "tests/ui/abi/stack-probes-lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fabi%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fabi%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabi%2Fstack-probes-lto.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -9,7 +9,6 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-musl FIXME #31506\n-// ignore-pretty\n // ignore-fuchsia no exception handler registered for segfault\n // compile-flags: -C lto\n // no-prefer-dynamic"}, {"sha": "096ce97ab0481923dea12805d086a66ca35ed684", "filename": "tests/ui/attributes/issue-105594-invalid-attr-validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fattributes%2Fissue-105594-invalid-attr-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fattributes%2Fissue-105594-invalid-attr-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattributes%2Fissue-105594-invalid-attr-validation.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,7 +1,7 @@\n // This checks that the attribute validation ICE in issue #105594 doesn't\n // recur.\n //\n-// ignore-thumbv8m.base\n+// ignore-thumbv8m.base-none-eabi\n #![feature(cmse_nonsecure_entry)]\n \n fn main() {}"}, {"sha": "71e2f07bb6b0bf95f6b55df33566eb848c81b2af", "filename": "tests/ui/binding/optional_comma_in_match_arm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fbinding%2Foptional_comma_in_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fbinding%2Foptional_comma_in_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinding%2Foptional_comma_in_match_arm.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unused_unsafe)]\n-// ignore-pretty issue #37199\n #![allow(while_true)]\n \n fn main() {"}, {"sha": "6e51a2b2e0274853a80be137c8dac5ceb237bdbe", "filename": "tests/ui/borrowck/borrowck-pat-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fborrowck%2Fborrowck-pat-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fborrowck%2Fborrowck-pat-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-pat-enum.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-// ignore-pretty issue #37199\n \n fn match_ref(v: Option<isize>) -> isize {\n     match v {"}, {"sha": "edc33446d79b623aeffe9365107a0ae1782447fd", "filename": "tests/ui/command/command-exec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fcommand%2Fcommand-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fcommand%2Fcommand-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcommand%2Fcommand-exec.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(stable_features)]\n // ignore-windows - this is a unix-specific test\n-// ignore-pretty issue #37199\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-fuchsia no execvp syscall provided"}, {"sha": "ab58301d468b08102964c971f8d4db5b8ffac266", "filename": "tests/ui/hygiene/arguments.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Farguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Farguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Farguments.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty pretty-printing is unhygienic\n-\n #![feature(decl_macro)]\n \n macro m($t:ty, $e:expr) {"}, {"sha": "714178375f2d1ba436d4d915e6dfcc9eaf3e09c5", "filename": "tests/ui/hygiene/arguments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Farguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Farguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Farguments.stderr?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `S` in this scope\n-  --> $DIR/arguments.rs:16:8\n+  --> $DIR/arguments.rs:14:8\n    |\n LL |     m!(S, S);\n    |        ^ not found in this scope"}, {"sha": "f09f81a5d52d65c22e74608940030e6463c0248e", "filename": "tests/ui/hygiene/assoc_item_ctxt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fassoc_item_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fassoc_item_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fassoc_item_ctxt.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty pretty-printing is unhygienic\n-\n #![feature(decl_macro)]\n #![allow(unused)]\n "}, {"sha": "effa9e8d65592d8d9ef21ca7aff123bc7c73c2e2", "filename": "tests/ui/hygiene/assoc_item_ctxt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,5 @@\n error[E0407]: method `method` is not a member of trait `Tr`\n-  --> $DIR/assoc_item_ctxt.rs:35:13\n+  --> $DIR/assoc_item_ctxt.rs:33:13\n    |\n LL |             fn method() {}\n    |             ^^^------^^^^^\n@@ -13,7 +13,7 @@ LL |     mac_trait_impl!();\n    = note: this error originates in the macro `mac_trait_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0046]: not all trait items implemented, missing: `method`\n-  --> $DIR/assoc_item_ctxt.rs:34:9\n+  --> $DIR/assoc_item_ctxt.rs:32:9\n    |\n LL |         fn method();\n    |         ------------ `method` from trait"}, {"sha": "a786127493298a7eee2f951f7577ccd60bcc834d", "filename": "tests/ui/hygiene/assoc_ty_bindings.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-pretty pretty-printing is unhygienic\n \n #![feature(decl_macro, associated_type_defaults)]\n "}, {"sha": "3293e346dadee0f01af97e30696b991aa7c50e43", "filename": "tests/ui/hygiene/auxiliary/legacy_interaction.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fauxiliary%2Flegacy_interaction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fauxiliary%2Flegacy_interaction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fauxiliary%2Flegacy_interaction.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty pretty-printing is unhygienic\n-\n #[macro_export]\n macro_rules! m {\n     () => {"}, {"sha": "86b3d8151d04e61bc9aa90c73d7faf88519afd66", "filename": "tests/ui/hygiene/fields.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Ffields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Ffields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Ffields.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty pretty-printing is unhygienic\n-\n #![feature(decl_macro)]\n \n mod foo {"}, {"sha": "99252c4b752cce3a07947d48b936197450ab3c09", "filename": "tests/ui/hygiene/fields.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Ffields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Ffields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Ffields.stderr?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,5 @@\n error: type `foo::S` is private\n-  --> $DIR/fields.rs:15:17\n+  --> $DIR/fields.rs:13:17\n    |\n LL |         let s = S { x: 0 };\n    |                 ^^^^^^^^^^ private type\n@@ -10,7 +10,7 @@ LL |     let s = foo::m!(S, x);\n    = note: this error originates in the macro `foo::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `foo::S` is private\n-  --> $DIR/fields.rs:16:17\n+  --> $DIR/fields.rs:14:17\n    |\n LL |         let _ = s.x;\n    |                 ^ private type\n@@ -21,7 +21,7 @@ LL |     let s = foo::m!(S, x);\n    = note: this error originates in the macro `foo::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `T` is private\n-  --> $DIR/fields.rs:18:17\n+  --> $DIR/fields.rs:16:17\n    |\n LL |         let t = T(0);\n    |                 ^^^^ private type\n@@ -32,7 +32,7 @@ LL |     let s = foo::m!(S, x);\n    = note: this error originates in the macro `foo::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `T` is private\n-  --> $DIR/fields.rs:19:17\n+  --> $DIR/fields.rs:17:17\n    |\n LL |         let _ = t.0;\n    |                 ^ private type"}, {"sha": "b42152955f77bb8575b6bdcdf3d6d52af08fb0be", "filename": "tests/ui/hygiene/generic_params.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fgeneric_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fgeneric_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fgeneric_params.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,7 +1,6 @@\n // Ensure that generic parameters always have modern hygiene.\n \n // check-pass\n-// ignore-pretty pretty-printing is unhygienic\n \n #![feature(decl_macro, rustc_attrs)]\n "}, {"sha": "51088e3693d731f8dd181af0e48aec6cde224ca8", "filename": "tests/ui/hygiene/impl_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fimpl_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fimpl_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fimpl_items.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty pretty-printing is unhygienic\n-\n #![feature(decl_macro)]\n \n mod foo {"}, {"sha": "32ba3741a59e641ce7927cdd862b23c2d881c701", "filename": "tests/ui/hygiene/impl_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fimpl_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fimpl_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fimpl_items.stderr?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,5 @@\n error: type `for<'a> fn(&'a foo::S) {foo::S::f}` is private\n-  --> $DIR/impl_items.rs:12:23\n+  --> $DIR/impl_items.rs:10:23\n    |\n LL |         let _: () = S.f();\n    |                       ^ private type"}, {"sha": "2de62f6aff77f041236be88a0d2e967078bfd2fc", "filename": "tests/ui/hygiene/intercrate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fintercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fintercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fintercrate.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty pretty-printing is unhygienic\n-\n // aux-build:intercrate.rs\n \n #![feature(decl_macro)]"}, {"sha": "f108617fba61559343ff7fe03ef568a7bb5c04a6", "filename": "tests/ui/hygiene/intercrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fintercrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fintercrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fintercrate.stderr?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,5 @@\n error: type `fn() -> u32 {foo::bar::f}` is private\n-  --> $DIR/intercrate.rs:10:16\n+  --> $DIR/intercrate.rs:8:16\n    |\n LL |     assert_eq!(intercrate::foo::m!(), 1);\n    |                ^^^^^^^^^^^^^^^^^^^^^ private type"}, {"sha": "3f1b7397301c1c60f6fc8da77a37d4eeffb41888", "filename": "tests/ui/hygiene/issue-47311.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fissue-47311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fissue-47311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fissue-47311.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-pretty pretty-printing is unhygienic\n \n #![feature(decl_macro)]\n #![allow(unused)]"}, {"sha": "c8b5c36767cf60e22c33ce623e4b166b2764384a", "filename": "tests/ui/hygiene/issue-47312.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fissue-47312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fissue-47312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fissue-47312.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-pretty pretty-printing is unhygienic\n \n #![feature(decl_macro)]\n #![allow(unused)]"}, {"sha": "a7ed749f526eaa0db458dbbc3502aae4814bfa52", "filename": "tests/ui/hygiene/items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fitems.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-pretty pretty-printing is unhygienic\n \n #![feature(decl_macro)]\n "}, {"sha": "4d150baf5d491261ef20881ce060d92352604223", "filename": "tests/ui/hygiene/legacy_interaction.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Flegacy_interaction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Flegacy_interaction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Flegacy_interaction.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n #![allow(dead_code)]\n-// ignore-pretty pretty-printing is unhygienic\n \n // aux-build:legacy_interaction.rs\n "}, {"sha": "81de974c20355a0827d3071f1a686ce299d465d4", "filename": "tests/ui/hygiene/lexical.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Flexical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Flexical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Flexical.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-pretty pretty-printing is unhygienic\n \n #![feature(decl_macro)]\n "}, {"sha": "b8c4c1b0d587c8bfd7dc0537420fa4a0b71e0757", "filename": "tests/ui/hygiene/specialization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fspecialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fspecialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fspecialization.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty pretty-printing is unhygienic\n \n #![feature(decl_macro)]\n "}, {"sha": "cd9122656cd2d2ad9821ac4bab435b72a6e8a94d", "filename": "tests/ui/hygiene/trait_items-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Ftrait_items-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Ftrait_items-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Ftrait_items-2.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-pretty pretty-printing is unhygienic\n \n #![feature(decl_macro)]\n "}, {"sha": "f6b48156888cf82b2fc81ff22648f585db35310c", "filename": "tests/ui/hygiene/wrap_unhygienic_example.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fwrap_unhygienic_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fwrap_unhygienic_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fwrap_unhygienic_example.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-// ignore-pretty pretty-printing is unhygienic\n \n // aux-build:my_crate.rs\n // aux-build:unhygienic_example.rs"}, {"sha": "6366bebb52f3f3c9816af36d859917d8a8054e9c", "filename": "tests/ui/hygiene/xcrate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fhygiene%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fxcrate.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty pretty-printing is unhygienic\n \n // aux-build:xcrate.rs\n "}, {"sha": "d369f1e71d06f295df3869f726ec3b92340cd865", "filename": "tests/ui/imports/issue-26873-multifile/issue-26873-multifile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fimports%2Fissue-26873-multifile%2Fissue-26873-multifile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fimports%2Fissue-26873-multifile%2Fissue-26873-multifile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-26873-multifile%2Fissue-26873-multifile.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -3,7 +3,6 @@\n #![allow(unused_imports)]\n #![allow(non_snake_case)]\n \n-// ignore-pretty issue #37195\n \n #[path = \"issue-26873-multifile/mod.rs\"]\n mod multifile;"}, {"sha": "58424f9e4c58373213542ef451b6985f211a28e0", "filename": "tests/ui/issues/issue-11709.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fissues%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fissues%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-11709.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-// ignore-pretty issue #37199\n \n // Don't panic on blocks without results\n // There are several tests in this run-pass that raised"}, {"sha": "c086f412a2885ac747b6acf4cc0219f9d4e56b15", "filename": "tests/ui/issues/issue-28839.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fissues%2Fissue-28839.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fissues%2Fissue-28839.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-28839.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37199\n \n pub struct Foo;\n "}, {"sha": "3bb4c7b980cac510106676e65f718584ee18b74f", "filename": "tests/ui/issues/issue-38190.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fissues%2Fissue-38190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fissues%2Fissue-38190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-38190.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // aux-build:issue-38190.rs\n-// ignore-pretty issue #37195\n \n #[macro_use]\n extern crate issue_38190;"}, {"sha": "5d623ed540f76500ae1bfebb600a96756ee9eeaa", "filename": "tests/ui/issues/issue-9129.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fissues%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fissues%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-9129.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -2,7 +2,6 @@\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n-// ignore-pretty unreported\n \n pub trait bomb { fn boom(&self, _: Ident); }\n pub struct S;"}, {"sha": "9ba01540aaf23fd3ec4f703e57a0482c889249af", "filename": "tests/ui/lexer/lexer-crlf-line-endings-string-literal-doc-comment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Flexer%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Flexer%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flexer%2Flexer-crlf-line-endings-string-literal-doc-comment.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -6,7 +6,6 @@\n // N.B., this file needs CRLF line endings. The .gitattributes file in\r\n // this directory should enforce it.\r\n \r\n-// ignore-pretty issue #37195\r\n \r\n /// Doc comment that ends in CRLF\r\n pub fn foo() {}\r"}, {"sha": "9b22aaef289a5a1228cc1bc8d7bd51e68a29fb49", "filename": "tests/ui/macros/issue-40469.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmacros%2Fissue-40469.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmacros%2Fissue-40469.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-40469.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37195\n \n #![allow(dead_code)]\n "}, {"sha": "cb019792e656fe8e940fc3dd639fea13e1c52aa3", "filename": "tests/ui/macros/macro-comma-support-rpass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -8,7 +8,6 @@\n // implementations for some macro_rules! macros as an implementation\n // detail.\n \n-// ignore-pretty issue #37195\n \n // compile-flags: --test -C debug_assertions=yes\n // revisions: std core"}, {"sha": "ad6f04009b6c7a5c2756c0e041cdcfdf7ddd0dde", "filename": "tests/ui/macros/macro-include-items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmacros%2Fmacro-include-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmacros%2Fmacro-include-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-include-items.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(non_camel_case_types)]\n \n-// ignore-pretty issue #37195\n \n fn bar() {}\n "}, {"sha": "f41faddddf6cef360823166ed1ea348e6f681b83", "filename": "tests/ui/macros/syntax-extension-source-utils.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmacros%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmacros%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fsyntax-extension-source-utils.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(stable_features)]\n \n-// ignore-pretty issue #37195\n \n pub mod m1 {\n     pub mod m2 {\n@@ -14,9 +13,9 @@ pub mod m1 {\n macro_rules! indirect_line { () => ( line!() ) }\n \n pub fn main() {\n-    assert_eq!(line!(), 17);\n+    assert_eq!(line!(), 16);\n     assert_eq!(column!(), 16);\n-    assert_eq!(indirect_line!(), 19);\n+    assert_eq!(indirect_line!(), 18);\n     assert!((file!().ends_with(\"syntax-extension-source-utils.rs\")));\n     assert_eq!(stringify!((2*3) + 5).to_string(), \"(2 * 3) + 5\".to_string());\n     assert!(include!(\"syntax-extension-source-utils-files/includeme.\\\n@@ -33,5 +32,5 @@ pub fn main() {\n     // The Windows tests are wrapped in an extra module for some reason\n     assert!((m1::m2::where_am_i().ends_with(\"m1::m2\")));\n \n-    assert_eq!((36, \"(2 * 3) + 5\"), (line!(), stringify!((2*3) + 5)));\n+    assert_eq!((35, \"(2 * 3) + 5\"), (line!(), stringify!((2*3) + 5)));\n }"}, {"sha": "7eac90f4d9b639ce17df3c3be852f55761bcb191", "filename": "tests/ui/modules/mod_dir_implicit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_implicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_implicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodules%2Fmod_dir_implicit.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37195\n \n mod mod_dir_implicit_aux;\n "}, {"sha": "72db8e44be31d4a38c34c1307f50bb039aa6a212", "filename": "tests/ui/modules/mod_dir_path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodules%2Fmod_dir_path.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unused_macros)]\n-// ignore-pretty issue #37195\n \n mod mod_dir_simple {\n     #[path = \"test.rs\"]"}, {"sha": "b4f8f1c84547cc16f7ae83d5fd7700bda8101a4b", "filename": "tests/ui/modules/mod_dir_path2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodules%2Fmod_dir_path2.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37195\n \n #[path = \"mod_dir_simple\"]\n mod pancakes {"}, {"sha": "56980c01049b3fe4b7cf2829e3b0490f0a080c32", "filename": "tests/ui/modules/mod_dir_path3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_path3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_path3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodules%2Fmod_dir_path3.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37195\n \n #[path = \"mod_dir_simple\"]\n mod pancakes {"}, {"sha": "1c111294a337e736e1a2307d68339f50a174004d", "filename": "tests/ui/modules/mod_dir_path_multi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_path_multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_path_multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodules%2Fmod_dir_path_multi.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37195\n \n #[path = \"mod_dir_simple\"]\n mod biscuits {"}, {"sha": "56f26139828f581691b7db7d63b27ea7baad3c2f", "filename": "tests/ui/modules/mod_dir_recursive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodules%2Fmod_dir_recursive.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37195\n \n // Testing that the parser for each file tracks its modules\n // and paths independently. The load_another_mod module should"}, {"sha": "56f15b1d6105a4279e66bfa179ec8da2451e917c", "filename": "tests/ui/modules/mod_dir_simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_dir_simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodules%2Fmod_dir_simple.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37195\n \n mod mod_dir_simple {\n     pub mod test;"}, {"sha": "7b56b99eb3acefe1c1076d7167cc5386660407f6", "filename": "tests/ui/modules/mod_file.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodules%2Fmod_file.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37195\n \n // Testing that a plain .rs file can load modules from other source files\n "}, {"sha": "e739366954eb64f70567dcb2dc109d19a96df90e", "filename": "tests/ui/modules/mod_file_with_path_attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_file_with_path_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fmodules%2Fmod_file_with_path_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodules%2Fmod_file_with_path_attr.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty issue #37195\n \n // Testing that a plain .rs file can load modules from other source files\n "}, {"sha": "b3fa390087f5c56ab42c19acb8854575ea81d2da", "filename": "tests/ui/non_modrs_mods/non_modrs_mods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n //\n-// ignore-pretty issue #37195\n pub mod modrs_mod;\n pub mod foors_mod;\n #[path = \"some_crazy_attr_mod_dir/arbitrary_name.rs\"]"}, {"sha": "1e7db9df814b4b397488c6a689e295f442534a82", "filename": "tests/ui/parser/issues/issue-48508.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fparser%2Fissues%2Fissue-48508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fparser%2Fissues%2Fissue-48508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-48508.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -7,7 +7,6 @@\n // issue-48508-aux.rs\n \n // compile-flags:-g\n-// ignore-pretty issue #37195\n // ignore-asmjs wasm2js does not support source maps yet\n \n #![allow(uncommon_codepoints)]"}, {"sha": "7493f9cdb3de23421c9c333daa92c3238750581f", "filename": "tests/ui/proc-macro/span-api-tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fproc-macro%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fproc-macro%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fspan-api-tests.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty\n // aux-build:span-api-tests.rs\n // aux-build:span-test-macros.rs\n // compile-flags: -Ztranslate-remapped-path-to-local-path=yes"}, {"sha": "5d233b38dbe206db1b317a83458facb9f5adf660", "filename": "tests/ui/runtime/backtrace-debuginfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fruntime%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fruntime%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fruntime%2Fbacktrace-debuginfo.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -9,7 +9,6 @@\n // compile-flags:-g -Copt-level=0 -Cllvm-args=-enable-tail-merge=0\n // compile-flags:-Cforce-frame-pointers=yes\n // compile-flags:-Cstrip=none\n-// ignore-pretty issue #37195\n // ignore-emscripten spawning processes is not supported\n // ignore-sgx no processes\n // ignore-fuchsia Backtrace not symbolized, trace different line alignment"}, {"sha": "43c086dc6bc18e5444e840b784bb9bcc7a0008be", "filename": "tests/ui/symbol-names/x86-stdcall.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fsymbol-names%2Fx86-stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Fsymbol-names%2Fx86-stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fx86-stdcall.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,7 @@\n // build-pass\n-// only-x86-windows\n+// only-x86\n+// only-windows\n+// ignore-gnu - vectorcall is not supported by GCC: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89485\n #![crate_type = \"cdylib\"]\n #![feature(abi_vectorcall)]\n "}, {"sha": "2eea087c7059bfe92044c44ee82e8f79d17eb33c", "filename": "tests/ui/target-feature/gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Ftarget-feature%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Ftarget-feature%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Fgate.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -6,7 +6,6 @@\n // ignore-mips64\n // ignore-powerpc\n // ignore-powerpc64\n-// ignore-powerpc64le\n // ignore-riscv64\n // ignore-sparc\n // ignore-sparc64"}, {"sha": "2d6abcc0a0150d46aabe57d95d84834d1424f043", "filename": "tests/ui/target-feature/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Fgate.stderr?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/gate.rs:32:18\n+  --> $DIR/gate.rs:31:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}, {"sha": "b59ed076f936c0d5d45a90eded55a6bd9ee12ab5", "filename": "tests/ui/target-feature/invalid-attribute.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -6,7 +6,6 @@\n // ignore-mips64\n // ignore-powerpc\n // ignore-powerpc64\n-// ignore-powerpc64le\n // ignore-riscv64\n // ignore-s390x\n // ignore-sparc"}, {"sha": "c36392d430f730597a8c95683b501593bd898c8e", "filename": "tests/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,11 +1,11 @@\n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:32:1\n+  --> $DIR/invalid-attribute.rs:31:1\n    |\n LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:17:1\n+  --> $DIR/invalid-attribute.rs:16:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -14,7 +14,7 @@ LL | extern crate alloc;\n    | ------------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:22:1\n+  --> $DIR/invalid-attribute.rs:21:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL | use alloc::alloc::alloc;\n    | ------------------------ not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:27:1\n+  --> $DIR/invalid-attribute.rs:26:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL | extern \"Rust\" {}\n    | ---------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:49:1\n+  --> $DIR/invalid-attribute.rs:48:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL | mod another {}\n    | -------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:54:1\n+  --> $DIR/invalid-attribute.rs:53:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -50,7 +50,7 @@ LL | const FOO: usize = 7;\n    | --------------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:59:1\n+  --> $DIR/invalid-attribute.rs:58:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL | struct Foo;\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:64:1\n+  --> $DIR/invalid-attribute.rs:63:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -68,7 +68,7 @@ LL | enum Bar {}\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:69:1\n+  --> $DIR/invalid-attribute.rs:68:1\n    |\n LL |   #[target_feature(enable = \"sse2\")]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -81,7 +81,7 @@ LL | | }\n    | |_- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:77:1\n+  --> $DIR/invalid-attribute.rs:76:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL | type Uwu = ();\n    | -------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:82:1\n+  --> $DIR/invalid-attribute.rs:81:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -99,7 +99,7 @@ LL | trait Baz {}\n    | ------------ not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:92:1\n+  --> $DIR/invalid-attribute.rs:91:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -108,7 +108,7 @@ LL | static A: () = ();\n    | ------------------ not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:97:1\n+  --> $DIR/invalid-attribute.rs:96:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -117,7 +117,7 @@ LL | impl Quux for u8 {}\n    | ------------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:102:1\n+  --> $DIR/invalid-attribute.rs:101:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -126,7 +126,7 @@ LL | impl Foo {}\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:120:5\n+  --> $DIR/invalid-attribute.rs:119:5\n    |\n LL |       #[target_feature(enable = \"sse2\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,7 +138,7 @@ LL | |     }\n    | |_____- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:128:5\n+  --> $DIR/invalid-attribute.rs:127:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -147,25 +147,25 @@ LL |     || {};\n    |     ----- not a function definition\n \n error: the feature named `foo` is not valid for this target\n-  --> $DIR/invalid-attribute.rs:34:18\n+  --> $DIR/invalid-attribute.rs:33:18\n    |\n LL | #[target_feature(enable = \"foo\")]\n    |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:37:18\n+  --> $DIR/invalid-attribute.rs:36:18\n    |\n LL | #[target_feature(bar)]\n    |                  ^^^ help: must be of the form: `enable = \"..\"`\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:39:18\n+  --> $DIR/invalid-attribute.rs:38:18\n    |\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:43:1\n+  --> $DIR/invalid-attribute.rs:42:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -177,13 +177,13 @@ LL | fn bar() {}\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n error: cannot use `#[inline(always)]` with `#[target_feature]`\n-  --> $DIR/invalid-attribute.rs:87:1\n+  --> $DIR/invalid-attribute.rs:86:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:112:5\n+  --> $DIR/invalid-attribute.rs:111:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "10e69105cedaef08a9de1c2f8f8f7f5fa66ad4b0", "filename": "tests/ui/traits/dyn-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Ftraits%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b676d886ded452125712a304c524c08360f916/tests%2Fui%2Ftraits%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fdyn-trait.rs?ref=b2b676d886ded452125712a304c524c08360f916", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-pretty `dyn ::foo` parses differently in the current edition\n \n use std::fmt::Display;\n "}]}