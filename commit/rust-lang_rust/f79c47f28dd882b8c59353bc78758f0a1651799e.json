{"sha": "f79c47f28dd882b8c59353bc78758f0a1651799e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OWM0N2YyOGRkODgyYjhjNTkzNTNiYzc4NzU4ZjBhMTY1MTc5OWU=", "commit": {"author": {"name": "ThibsG", "email": "thebaek1@hotmail.com", "date": "2020-01-10T09:42:21Z"}, "committer": {"name": "ThibsG", "email": "thebaek1@hotmail.com", "date": "2020-01-13T15:25:35Z"}, "message": "Match underscore-prefixed variable also", "tree": {"sha": "fb7301eabd749f5a4b1612f2239474952af42335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb7301eabd749f5a4b1612f2239474952af42335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f79c47f28dd882b8c59353bc78758f0a1651799e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f79c47f28dd882b8c59353bc78758f0a1651799e", "html_url": "https://github.com/rust-lang/rust/commit/f79c47f28dd882b8c59353bc78758f0a1651799e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f79c47f28dd882b8c59353bc78758f0a1651799e/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920cdb59e1edf2c4cb2f266fa521f12c1b97a499", "url": "https://api.github.com/repos/rust-lang/rust/commits/920cdb59e1edf2c4cb2f266fa521f12c1b97a499", "html_url": "https://github.com/rust-lang/rust/commit/920cdb59e1edf2c4cb2f266fa521f12c1b97a499"}], "stats": {"total": 132, "additions": 113, "deletions": 19}, "files": [{"sha": "ce71b79e85a75ee912bb9b8c69645e0b1f4d97ad", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f79c47f28dd882b8c59353bc78758f0a1651799e/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79c47f28dd882b8c59353bc78758f0a1651799e/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=f79c47f28dd882b8c59353bc78758f0a1651799e", "patch": "@@ -2,22 +2,24 @@ use crate::consts::{constant, miri_to_const, Constant};\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    expr_block, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg, remove_blocks, snippet,\n+    expr_block, is_allowed, is_expn_of, match_qpath, match_type, match_var, multispan_sugg, remove_blocks, snippet,\n     snippet_with_applicability, span_help_and_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint,\n     walk_ptrs_ty,\n };\n use if_chain::if_chain;\n-use rustc::lint::in_external_macro;\n+use rustc::hir::map::Map;\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty::{self, Ty};\n use rustc_errors::Applicability;\n use rustc_hir::def::CtorKind;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use std::cmp::Ordering;\n use std::collections::Bound;\n-use syntax::ast::LitKind;\n+use syntax::ast::{self, LitKind};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for matches with a single arm where an `if let`\n@@ -468,6 +470,41 @@ fn is_wild<'tcx>(pat: &impl std::ops::Deref<Target = Pat<'tcx>>) -> bool {\n     }\n }\n \n+fn is_unused_underscored<'tcx>(patkind: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n+    match patkind {\n+        PatKind::Binding(.., ident, None) if ident.as_str().starts_with('_') => {\n+            let mut visitor = UsedVisitor {\n+                var: ident.name,\n+                used: false,\n+            };\n+            walk_expr(&mut visitor, body);\n+            !visitor.used\n+        },\n+        _ => false,\n+    }\n+}\n+\n+struct UsedVisitor {\n+    var: ast::Name, // var to look for\n+    used: bool,     // has the var been used otherwise?\n+}\n+\n+impl<'tcx> Visitor<'tcx> for UsedVisitor {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if match_var(expr, self.var) {\n+            self.used = true;\n+        } else {\n+            walk_expr(self, expr);\n+        }\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n     let ex_ty = walk_ptrs_ty(cx.tables.expr_ty(ex));\n     if match_type(cx, ex_ty, &paths::RESULT) {\n@@ -476,7 +513,7 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                 let path_str = print::to_string(print::NO_ANN, |s| s.print_qpath(path, false));\n                 if_chain! {\n                     if path_str == \"Err\";\n-                    if inner.iter().any(is_wild);\n+                    if inner.iter().any(is_wild) || inner.iter().any(|pat| is_unused_underscored(&pat.kind, arm.body));\n                     if let ExprKind::Block(ref block, _) = arm.body.kind;\n                     if is_panic_block(block);\n                     then {"}, {"sha": "2ce0b574929e3c924360dd6b9ab89fcc097c70a9", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f79c47f28dd882b8c59353bc78758f0a1651799e/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79c47f28dd882b8c59353bc78758f0a1651799e/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=f79c47f28dd882b8c59353bc78758f0a1651799e", "patch": "@@ -28,6 +28,19 @@ fn match_wild_err_arm() {\n         },\n     }\n \n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_e) => panic!(),\n+    }\n+\n+    // Allowed when used in `panic!`.\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_e) => panic!(\"{}\", _e),\n+    }\n+\n     // Allowed when not with `panic!` block.\n     match x {\n         Ok(3) => println!(\"ok\"),"}, {"sha": "4c723d709d01cf4dc09a961c0c4c1d3ada1b170b", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 59, "deletions": 15, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f79c47f28dd882b8c59353bc78758f0a1651799e/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f79c47f28dd882b8c59353bc78758f0a1651799e/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=f79c47f28dd882b8c59353bc78758f0a1651799e", "patch": "@@ -78,37 +78,45 @@ LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n+error: `Err(_)` will match all errors, maybe not a good idea\n+  --> $DIR/matches.rs:34:9\n+   |\n+LL |         Err(_e) => panic!(),\n+   |         ^^^^^^^\n+   |\n+   = note: to remove this warning, match each error separately or use `unreachable!` macro\n+\n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:34:18\n+  --> $DIR/matches.rs:33:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:33:18\n+  --> $DIR/matches.rs:32:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:33:9\n+  --> $DIR/matches.rs:32:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:41:18\n+  --> $DIR/matches.rs:40:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:40:18\n+  --> $DIR/matches.rs:39:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:40:9\n+  --> $DIR/matches.rs:39:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n@@ -133,58 +141,94 @@ LL |         Ok(3) => println!(\"ok\"),\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n+  --> $DIR/matches.rs:54:18\n+   |\n+LL |         Ok(_) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+note: same as this\n   --> $DIR/matches.rs:53:18\n    |\n+LL |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:53:9\n+   |\n+LL |         Ok(3) => println!(\"ok\"),\n+   |         ^^^^^\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/matches.rs:60:18\n+   |\n+LL |         Ok(_) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/matches.rs:59:18\n+   |\n+LL |         Ok(3) => println!(\"ok\"),\n+   |                  ^^^^^^^^^^^^^^\n+help: consider refactoring into `Ok(3) | Ok(_)`\n+  --> $DIR/matches.rs:59:9\n+   |\n+LL |         Ok(3) => println!(\"ok\"),\n+   |         ^^^^^\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/matches.rs:66:18\n+   |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:52:18\n+  --> $DIR/matches.rs:65:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:52:9\n+  --> $DIR/matches.rs:65:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:76:29\n+  --> $DIR/matches.rs:89:29\n    |\n LL |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n    |                             ^^^^^^^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:75:29\n+  --> $DIR/matches.rs:88:29\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n    |                             ^^^^^^^^^^^^^^^^^^^^\n help: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n-  --> $DIR/matches.rs:75:9\n+  --> $DIR/matches.rs:88:9\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:91:18\n+  --> $DIR/matches.rs:104:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:90:18\n+  --> $DIR/matches.rs:103:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:90:9\n+  --> $DIR/matches.rs:103:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 15 previous errors\n "}]}