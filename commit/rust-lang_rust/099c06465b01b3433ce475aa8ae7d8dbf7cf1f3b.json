{"sha": "099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5OWMwNjQ2NWIwMWIzNDMzY2U0NzVhYThhZTdkOGRiZjdjZjFmM2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-04T07:21:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-04T07:21:29Z"}, "message": "Rollup merge of #60517 - estebank:wording, r=davidtwco\n\nReword casting message\n\nr? @davidtwco", "tree": {"sha": "ac6bcdb578a9120b6335cbe48307302a81a795f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac6bcdb578a9120b6335cbe48307302a81a795f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJczT15CRBK7hj4Ov3rIwAAdHIIAFLBLXthi5Tub/t46+DJpfRu\n34pznuZ/R4AfLMw9GlwVDy9474tyRmBNUjSDZuZBfe/BK1NNP0Viy3JnKPHp4XxH\nzUi2yowyPog/UkjOORLUPnYZt+yfThiBdAdDJiRqTDA23E+X2uyfSUhDmoWznNL0\nKqIu8ZJyEEdgFMImVSkK0AYqaERxlSeiPov9Z+DHyRAO4NO/j6gpfvyR0xXyzKLc\nIn2wtWD9R7r8K4H7wT49whTLQHpSqYRHd/y0jx/OBuYXt6wwDHi+iFr6G86Y8+nT\nMqGzzwwFO0Lq9mWQ6CTg/BJuMVRNGQVK2qIPSVGnRERzdwf9fGgkL+NRG4WEuPg=\n=FkUe\n-----END PGP SIGNATURE-----\n", "payload": "tree ac6bcdb578a9120b6335cbe48307302a81a795f6\nparent 3cfd39bb2e8ee9b5c0579f4ef21b07d7589f8cb0\nparent 1e2af7d9353eef2115210bfe296744373e70e3a4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556954489 +0200\ncommitter GitHub <noreply@github.com> 1556954489 +0200\n\nRollup merge of #60517 - estebank:wording, r=davidtwco\n\nReword casting message\n\nr? @davidtwco\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "html_url": "https://github.com/rust-lang/rust/commit/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cfd39bb2e8ee9b5c0579f4ef21b07d7589f8cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cfd39bb2e8ee9b5c0579f4ef21b07d7589f8cb0", "html_url": "https://github.com/rust-lang/rust/commit/3cfd39bb2e8ee9b5c0579f4ef21b07d7589f8cb0"}, {"sha": "1e2af7d9353eef2115210bfe296744373e70e3a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2af7d9353eef2115210bfe296744373e70e3a4", "html_url": "https://github.com/rust-lang/rust/commit/1e2af7d9353eef2115210bfe296744373e70e3a4"}], "stats": {"total": 230, "additions": 115, "deletions": 115}, "files": [{"sha": "1699447886aef89a30cb792f5b9e77baad017e3d", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -522,7 +522,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let msg = format!(\"you can convert an `{}` to `{}`\", checked_ty, expected_ty);\n         let cast_msg = format!(\"you can cast an `{} to `{}`\", checked_ty, expected_ty);\n-        let try_msg = format!(\"{} or panic if it the converted value wouldn't fit\", msg);\n+        let try_msg = format!(\"{} and panic if the converted value wouldn't fit\", msg);\n         let lit_msg = format!(\n             \"change the type of the numeric literal from `{}` to `{}`\",\n             checked_ty,"}, {"sha": "1405cb1b4736cce98af69cf9f6a984f2d7cceb53", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -49,7 +49,7 @@ error[E0308]: mismatched types\n    |\n LL |     let _: i32 = f2(2i32);\n    |                  ^^^^^^^^ expected i32, found u32\n-help: you can convert an `u32` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3300db58d44c3385dfba77eed2cd58c602612d11", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n    |\n LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n    |                  ^ expected isize, found usize\n-help: you can convert an `usize` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "80b601dc4394b0de8bb8d5b41d4ddc34f02d32dc", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a16);\n    |           ^^^ expected i8, found i16\n-help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(a16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a32);\n    |           ^^^ expected i8, found i32\n-help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(a32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a64);\n    |           ^^^ expected i8, found i64\n-help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(a64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(a32);\n    |            ^^^ expected i16, found i32\n-help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(a32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -52,7 +52,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(a64);\n    |            ^^^ expected i16, found i64\n-help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i32(a64);\n    |            ^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     id_i32(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -117,7 +117,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c16);\n    |           ^^^ expected i8, found i16\n-help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(c16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -127,7 +127,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c32);\n    |           ^^^ expected i8, found i32\n-help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(c32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -137,7 +137,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c64);\n    |           ^^^ expected i8, found i64\n-help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(c64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -156,7 +156,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(c32);\n    |            ^^^ expected i16, found i32\n-help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(c32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -166,7 +166,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(c64);\n    |            ^^^ expected i16, found i64\n-help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -194,7 +194,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i32(c64);\n    |            ^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     id_i32(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -231,7 +231,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b16);\n    |           ^^^ expected u8, found u16\n-help: you can convert an `u16` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -241,7 +241,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b32);\n    |           ^^^ expected u8, found u32\n-help: you can convert an `u32` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -251,7 +251,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b64);\n    |           ^^^ expected u8, found u64\n-help: you can convert an `u64` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -270,7 +270,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u16(b32);\n    |            ^^^ expected u16, found u32\n-help: you can convert an `u32` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     id_u16(b32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -280,7 +280,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u16(b64);\n    |            ^^^ expected u16, found u64\n-help: you can convert an `u64` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     id_u16(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -308,7 +308,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u32(b64);\n    |            ^^^ expected u32, found u64\n-help: you can convert an `u64` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     id_u32(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7cfd754f72d8e808e08f554484211b26485e2a4d", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo(1*(1 as isize));\n    |         ^^^^^^^^^^^^^^ expected i16, found isize\n-help: you can convert an `isize` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo((1*(1 as isize)).try_into().unwrap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     bar(1*(1 as usize));\n    |         ^^^^^^^^^^^^^^ expected u32, found usize\n-help: you can convert an `usize` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     bar((1*(1 as usize)).try_into().unwrap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e7555b958a3d4473359c7d07afc74071df3f8321", "filename": "src/test/ui/issues/issue-31910.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     X = Trait::Number,\n    |         ^^^^^^^^^^^^^ expected isize, found i32\n-help: you can convert an `i32` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     X = Trait::Number.try_into().unwrap(),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "063a4865b1987db22a50bb319e0bd7c01b0823e7", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n    |\n LL |     let y: usize = x.foo();\n    |                    ^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     let y: usize = x.foo().try_into().unwrap();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "881d9fd32029eb885f2420a88780d62981f8ef6c", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -6,7 +6,7 @@ LL |                   $arr.len() * size_of($arr[0]));\n ...\n LL |     write!(hello);\n    |     -------------- in this macro invocation\n-help: you can convert an `usize` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3f69bcc7d4a2f3a2ced0320c804a25b09bcdc719", "filename": "src/test/ui/numeric/const-scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -37,7 +37,7 @@ error[E0308]: mismatched types\n    |\n LL |     let d: i8 = c;\n    |                 ^ expected i8, found i32\n-help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     let d: i8 = c.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c767bdd9bd5a5ca41fa1f5644ac4238c3451f317", "filename": "src/test/ui/numeric/len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     test(array.len());\n    |          ^^^^^^^^^^^ expected u32, found usize\n-help: you can convert an `usize` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     test(array.len().try_into().unwrap());\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f58389ce96c3b6e3fa7fcdfb131bd231f061f861", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     let x: u16 = foo();\n    |                  ^^^^^ expected u16, found i32\n-help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     let x: u16 = foo().try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     let y: i64 = x + x;\n    |                  ^^^^^ expected i64, found u16\n-help: you can convert an `u16` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     let y: i64 = (x + x).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n    |\n LL |     let z: i32 = x + x;\n    |                  ^^^^^ expected i32, found u16\n-help: you can convert an `u16` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     let z: i32 = (x + x).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e66b83f2b39f5c38a7d5fd26fe38788c98041872", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 78, "deletions": 78, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u64);\n    |                  ^^^^^ expected usize, found u64\n-help: you can convert an `u64` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u32);\n    |                  ^^^^^ expected usize, found u32\n-help: you can convert an `u32` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u16);\n    |                  ^^^^^ expected usize, found u16\n-help: you can convert an `u16` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u8);\n    |                  ^^^^ expected usize, found u8\n-help: you can convert an `u8` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -43,7 +43,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_isize);\n    |                  ^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_isize.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,7 +53,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i64);\n    |                  ^^^^^ expected usize, found i64\n-help: you can convert an `i64` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -63,7 +63,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i32);\n    |                  ^^^^^ expected usize, found i32\n-help: you can convert an `i32` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -73,7 +73,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i16);\n    |                  ^^^^^ expected usize, found i16\n-help: you can convert an `i16` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -83,7 +83,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i8);\n    |                  ^^^^ expected usize, found i8\n-help: you can convert an `i8` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -93,7 +93,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_usize);\n    |                  ^^^^^^^ expected isize, found usize\n-help: you can convert an `usize` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_usize.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -103,7 +103,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u64);\n    |                  ^^^^^ expected isize, found u64\n-help: you can convert an `u64` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -113,7 +113,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u32);\n    |                  ^^^^^ expected isize, found u32\n-help: you can convert an `u32` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -123,7 +123,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u16);\n    |                  ^^^^^ expected isize, found u16\n-help: you can convert an `u16` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -133,7 +133,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u8);\n    |                  ^^^^ expected isize, found u8\n-help: you can convert an `u8` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -143,7 +143,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i64);\n    |                  ^^^^^ expected isize, found i64\n-help: you can convert an `i64` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -153,7 +153,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i32);\n    |                  ^^^^^ expected isize, found i32\n-help: you can convert an `i32` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i16);\n    |                  ^^^^^ expected isize, found i16\n-help: you can convert an `i16` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -173,7 +173,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i8);\n    |                  ^^^^ expected isize, found i8\n-help: you can convert an `i8` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -183,7 +183,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_usize);\n    |                ^^^^^^^ expected u64, found usize\n-help: you can convert an `usize` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -220,7 +220,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_isize);\n    |                ^^^^^^^ expected u64, found isize\n-help: you can convert an `isize` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -230,7 +230,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i64);\n    |                ^^^^^ expected u64, found i64\n-help: you can convert an `i64` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -240,7 +240,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i32);\n    |                ^^^^^ expected u64, found i32\n-help: you can convert an `i32` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -250,7 +250,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i16);\n    |                ^^^^^ expected u64, found i16\n-help: you can convert an `i16` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -260,7 +260,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i8);\n    |                ^^^^ expected u64, found i8\n-help: you can convert an `i8` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -270,7 +270,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_usize);\n    |                ^^^^^^^ expected i64, found usize\n-help: you can convert an `usize` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -280,7 +280,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u64);\n    |                ^^^^^ expected i64, found u64\n-help: you can convert an `u64` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -290,7 +290,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u32);\n    |                ^^^^^ expected i64, found u32\n-help: you can convert an `u32` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -300,7 +300,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u16);\n    |                ^^^^^ expected i64, found u16\n-help: you can convert an `u16` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -310,7 +310,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u8);\n    |                ^^^^ expected i64, found u8\n-help: you can convert an `u8` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -320,7 +320,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_isize);\n    |                ^^^^^^^ expected i64, found isize\n-help: you can convert an `isize` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -357,7 +357,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_usize);\n    |                ^^^^^^^ expected u32, found usize\n-help: you can convert an `usize` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -367,7 +367,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_u64);\n    |                ^^^^^ expected u32, found u64\n-help: you can convert an `u64` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -395,7 +395,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_isize);\n    |                ^^^^^^^ expected u32, found isize\n-help: you can convert an `isize` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -405,7 +405,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i64);\n    |                ^^^^^ expected u32, found i64\n-help: you can convert an `i64` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -415,7 +415,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i32);\n    |                ^^^^^ expected u32, found i32\n-help: you can convert an `i32` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -425,7 +425,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i16);\n    |                ^^^^^ expected u32, found i16\n-help: you can convert an `i16` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -435,7 +435,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i8);\n    |                ^^^^ expected u32, found i8\n-help: you can convert an `i8` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -445,7 +445,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_usize);\n    |                ^^^^^^^ expected i32, found usize\n-help: you can convert an `usize` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -455,7 +455,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u64);\n    |                ^^^^^ expected i32, found u64\n-help: you can convert an `u64` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -465,7 +465,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u32);\n    |                ^^^^^ expected i32, found u32\n-help: you can convert an `u32` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -475,7 +475,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u16);\n    |                ^^^^^ expected i32, found u16\n-help: you can convert an `u16` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -485,7 +485,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u8);\n    |                ^^^^ expected i32, found u8\n-help: you can convert an `u8` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -495,7 +495,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_isize);\n    |                ^^^^^^^ expected i32, found isize\n-help: you can convert an `isize` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -505,7 +505,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_i64);\n    |                ^^^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -533,7 +533,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_usize);\n    |                ^^^^^^^ expected u16, found usize\n-help: you can convert an `usize` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -543,7 +543,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_u64);\n    |                ^^^^^ expected u16, found u64\n-help: you can convert an `u64` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -553,7 +553,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_u32);\n    |                ^^^^^ expected u16, found u32\n-help: you can convert an `u32` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -572,7 +572,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_isize);\n    |                ^^^^^^^ expected u16, found isize\n-help: you can convert an `isize` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -582,7 +582,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i64);\n    |                ^^^^^ expected u16, found i64\n-help: you can convert an `i64` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -592,7 +592,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i32);\n    |                ^^^^^ expected u16, found i32\n-help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -602,7 +602,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i16);\n    |                ^^^^^ expected u16, found i16\n-help: you can convert an `i16` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -612,7 +612,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i8);\n    |                ^^^^ expected u16, found i8\n-help: you can convert an `i8` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -622,7 +622,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_usize);\n    |                ^^^^^^^ expected i16, found usize\n-help: you can convert an `usize` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -632,7 +632,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u64);\n    |                ^^^^^ expected i16, found u64\n-help: you can convert an `u64` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -642,7 +642,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u32);\n    |                ^^^^^ expected i16, found u32\n-help: you can convert an `u32` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -652,7 +652,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u16);\n    |                ^^^^^ expected i16, found u16\n-help: you can convert an `u16` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -662,7 +662,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u8);\n    |                ^^^^ expected i16, found u8\n-help: you can convert an `u8` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -672,7 +672,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_isize);\n    |                ^^^^^^^ expected i16, found isize\n-help: you can convert an `isize` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -682,7 +682,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_i64);\n    |                ^^^^^ expected i16, found i64\n-help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -692,7 +692,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_i32);\n    |                ^^^^^ expected i16, found i32\n-help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -711,7 +711,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_usize);\n    |               ^^^^^^^ expected u8, found usize\n-help: you can convert an `usize` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -721,7 +721,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u64);\n    |               ^^^^^ expected u8, found u64\n-help: you can convert an `u64` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -731,7 +731,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u32);\n    |               ^^^^^ expected u8, found u32\n-help: you can convert an `u32` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -741,7 +741,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u16);\n    |               ^^^^^ expected u8, found u16\n-help: you can convert an `u16` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -751,7 +751,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_isize);\n    |               ^^^^^^^ expected u8, found isize\n-help: you can convert an `isize` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_isize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -761,7 +761,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i64);\n    |               ^^^^^ expected u8, found i64\n-help: you can convert an `i64` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -771,7 +771,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i32);\n    |               ^^^^^ expected u8, found i32\n-help: you can convert an `i32` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -781,7 +781,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i16);\n    |               ^^^^^ expected u8, found i16\n-help: you can convert an `i16` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -791,7 +791,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i8);\n    |               ^^^^ expected u8, found i8\n-help: you can convert an `i8` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i8.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -801,7 +801,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_usize);\n    |               ^^^^^^^ expected i8, found usize\n-help: you can convert an `usize` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -811,7 +811,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u64);\n    |               ^^^^^ expected i8, found u64\n-help: you can convert an `u64` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -821,7 +821,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u32);\n    |               ^^^^^ expected i8, found u32\n-help: you can convert an `u32` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -831,7 +831,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u16);\n    |               ^^^^^ expected i8, found u16\n-help: you can convert an `u16` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -841,7 +841,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u8);\n    |               ^^^^ expected i8, found u8\n-help: you can convert an `u8` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u8.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -851,7 +851,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_isize);\n    |               ^^^^^^^ expected i8, found isize\n-help: you can convert an `isize` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_isize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -861,7 +861,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i64);\n    |               ^^^^^ expected i8, found i64\n-help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -871,7 +871,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i32);\n    |               ^^^^^ expected i8, found i32\n-help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -881,7 +881,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i16);\n    |               ^^^^^ expected i8, found i16\n-help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "df73ac0b182f05d553a5e4ce056cd6fcc1ec9ea4", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0; -4_isize];\n    |                 ^^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     let f = [0; (-4_isize).try_into().unwrap()];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -52,7 +52,7 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0_usize; -1_isize];\n    |                       ^^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     let f = [0_usize; (-1_isize).try_into().unwrap()];\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "409fabb951adc644967bdd161f0d5c81a668a2ac", "filename": "src/test/ui/shift-various-bad-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -27,7 +27,7 @@ error[E0308]: mismatched types\n    |\n LL |     let _: i32 = 22_i64 >> 1_i32;\n    |                  ^^^^^^^^^^^^^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     let _: i32 = (22_i64 >> 1_i32).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e9c28248044f9ad0f5038319e9b6b8fbdf3470f7", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -6,7 +6,7 @@ LL | fn global_bound_is_hidden() -> u8\n ...\n LL |     B::get_x()\n    |     ^^^^^^^^^^ expected u8, found i32\n-help: you can convert an `i32` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     B::get_x().try_into().unwrap()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f3e1cc41cada2343b57511efced86172374a23eb", "filename": "src/test/ui/tutorial-suffix-inference-test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr?ref=099c06465b01b3433ce475aa8ae7d8dbf7cf1f3b", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n    |\n LL |     identity_u16(y);\n    |                  ^ expected u16, found i32\n-help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     identity_u16(y.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n    |\n LL |     identity_u16(a);\n    |                  ^ expected u16, found isize\n-help: you can convert an `isize` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     identity_u16(a.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}]}