{"sha": "3d3af078454bcd10980af28a04e172cc1f6bc9c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkM2FmMDc4NDU0YmNkMTA5ODBhZjI4YTA0ZTE3MmNjMWY2YmM5Yzg=", "commit": {"author": {"name": "mgr-inz-rafal", "email": "rchabowski@gmail.com", "date": "2020-03-23T20:00:02Z"}, "committer": {"name": "mgr-inz-rafal", "email": "rchabowski@gmail.com", "date": "2020-03-23T20:00:02Z"}, "message": "Provide appropriate suggestion", "tree": {"sha": "aedd70c29ae0a544bc9dbe8c1460c886bf0da0a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aedd70c29ae0a544bc9dbe8c1460c886bf0da0a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d3af078454bcd10980af28a04e172cc1f6bc9c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d3af078454bcd10980af28a04e172cc1f6bc9c8", "html_url": "https://github.com/rust-lang/rust/commit/3d3af078454bcd10980af28a04e172cc1f6bc9c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d3af078454bcd10980af28a04e172cc1f6bc9c8/comments", "author": {"login": "mgr-inz-rafal", "id": 22395284, "node_id": "MDQ6VXNlcjIyMzk1Mjg0", "avatar_url": "https://avatars.githubusercontent.com/u/22395284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgr-inz-rafal", "html_url": "https://github.com/mgr-inz-rafal", "followers_url": "https://api.github.com/users/mgr-inz-rafal/followers", "following_url": "https://api.github.com/users/mgr-inz-rafal/following{/other_user}", "gists_url": "https://api.github.com/users/mgr-inz-rafal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgr-inz-rafal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgr-inz-rafal/subscriptions", "organizations_url": "https://api.github.com/users/mgr-inz-rafal/orgs", "repos_url": "https://api.github.com/users/mgr-inz-rafal/repos", "events_url": "https://api.github.com/users/mgr-inz-rafal/events{/privacy}", "received_events_url": "https://api.github.com/users/mgr-inz-rafal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgr-inz-rafal", "id": 22395284, "node_id": "MDQ6VXNlcjIyMzk1Mjg0", "avatar_url": "https://avatars.githubusercontent.com/u/22395284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgr-inz-rafal", "html_url": "https://github.com/mgr-inz-rafal", "followers_url": "https://api.github.com/users/mgr-inz-rafal/followers", "following_url": "https://api.github.com/users/mgr-inz-rafal/following{/other_user}", "gists_url": "https://api.github.com/users/mgr-inz-rafal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgr-inz-rafal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgr-inz-rafal/subscriptions", "organizations_url": "https://api.github.com/users/mgr-inz-rafal/orgs", "repos_url": "https://api.github.com/users/mgr-inz-rafal/repos", "events_url": "https://api.github.com/users/mgr-inz-rafal/events{/privacy}", "received_events_url": "https://api.github.com/users/mgr-inz-rafal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12796cd6886989c449e62818fb8f0bb40b9ce41e", "url": "https://api.github.com/repos/rust-lang/rust/commits/12796cd6886989c449e62818fb8f0bb40b9ce41e", "html_url": "https://github.com/rust-lang/rust/commit/12796cd6886989c449e62818fb8f0bb40b9ce41e"}], "stats": {"total": 66, "additions": 42, "deletions": 24}, "files": [{"sha": "a93c55f2d59ad50a0ca4b813e2a8d96bf0027ad6", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3d3af078454bcd10980af28a04e172cc1f6bc9c8/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3af078454bcd10980af28a04e172cc1f6bc9c8/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=3d3af078454bcd10980af28a04e172cc1f6bc9c8", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{higher, parent_node_is_if_expr, span_lint, span_lint_and_help, span_lint_and_sugg};\n+use crate::utils::{higher, parent_node_is_if_expr, span_lint, span_lint_and_help, span_lint_and_sugg, snippet_with_applicability};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -189,19 +189,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     }\n }\n \n-fn is_unary_not<'tcx>(e: &'tcx Expr<'_>) -> bool {\n+fn is_unary_not<'tcx>(e: &'tcx Expr<'_>) -> (bool, rustc_span::Span) {\n     if_chain! {\n-        if let ExprKind::Unary(unop, _) = e.kind;\n+        if let ExprKind::Unary(unop, operand) = e.kind;\n         if let UnOp::UnNot = unop;\n         then {\n-            return true;\n+            return (true, operand.span);\n         }\n     };\n-    false\n+    (false, e.span)\n }\n \n-fn one_side_is_unary_not<'tcx>(left_side: &'tcx Expr<'_>, right_side: &'tcx Expr<'_>) -> bool {\n-    is_unary_not(left_side) ^ is_unary_not(right_side)\n+fn one_side_is_unary_not<'tcx>(left_side: &'tcx Expr<'_>, right_side: &'tcx Expr<'_>) -> (bool, rustc_span::Span, rustc_span::Span) {\n+    let left = is_unary_not(left_side);\n+    let right = is_unary_not(right_side);\n+\n+    let retval = left.0 ^ right.0;\n+    (retval, left.1, right.1)\n }\n \n fn check_comparison<'a, 'tcx>(\n@@ -218,14 +222,27 @@ fn check_comparison<'a, 'tcx>(\n     if let ExprKind::Binary(op, ref left_side, ref right_side) = e.kind {\n         let (l_ty, r_ty) = (cx.tables.expr_ty(left_side), cx.tables.expr_ty(right_side));\n         if l_ty.is_bool() && r_ty.is_bool() {\n-            if_chain! {\n-                if let BinOpKind::Eq = op.node;\n-                if one_side_is_unary_not(&left_side, &right_side);\n-                then {\n-                    span_lint_and_help(cx, BOOL_COMPARISON, e.span, \"Here comes\", \"the suggestion\");\n-                }\n-            };\n             let mut applicability = Applicability::MachineApplicable;\n+\n+            if let BinOpKind::Eq = op.node\n+            {\n+                let xxx = one_side_is_unary_not(&left_side, &right_side);\n+                if xxx.0\n+                {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        BOOL_COMPARISON,\n+                        e.span,\n+                        \"This comparison might be written more concisely\",\n+                        \"try simplifying it as shown\",\n+                        format!(\"{} != {}\",\n+                            snippet_with_applicability(cx, xxx.1, \"..\", &mut applicability),\n+                            snippet_with_applicability(cx, xxx.2, \"..\", &mut applicability)),\n+                        applicability,\n+                    )\n+                }\n+            }\n+\n             match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n                 (Bool(true), Other) => left_true.map_or((), |(h, m)| {\n                     suggest_bool_comparison(cx, e, right_side, applicability, m, h)"}, {"sha": "2081dea36a7dcf652fa2bbbdcb9f0fb46e0a65a7", "filename": "tests/ui/bool_comparison.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d3af078454bcd10980af28a04e172cc1f6bc9c8/tests%2Fui%2Fbool_comparison.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3d3af078454bcd10980af28a04e172cc1f6bc9c8/tests%2Fui%2Fbool_comparison.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.fixed?ref=3d3af078454bcd10980af28a04e172cc1f6bc9c8", "patch": "@@ -116,8 +116,8 @@ fn issue4983() {\n     let a = true;\n     let b = false;\n \n-    if a == !b {};\n-    if !a == b {};\n+    if a != b {};\n+    if a != b {};\n     if a == b {};\n     if !a == !b {};\n }"}, {"sha": "f463ac1c883fc8820a6e76da55569d0dc463c60c", "filename": "tests/ui/bool_comparison.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d3af078454bcd10980af28a04e172cc1f6bc9c8/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3af078454bcd10980af28a04e172cc1f6bc9c8/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=3d3af078454bcd10980af28a04e172cc1f6bc9c8", "patch": "@@ -120,4 +120,9 @@ fn issue4983() {\n     if !a == b {};\n     if a == b {};\n     if !a == !b {};\n+\n+    if b == !a {};\n+    if !b == a {};\n+    if b == a {};\n+    if !b == !a {};\n }"}, {"sha": "a2a89fc328744c21897155737d0b55efc1e56d81", "filename": "tests/ui/bool_comparison.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d3af078454bcd10980af28a04e172cc1f6bc9c8/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d3af078454bcd10980af28a04e172cc1f6bc9c8/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=3d3af078454bcd10980af28a04e172cc1f6bc9c8", "patch": "@@ -84,21 +84,17 @@ error: order comparisons between booleans can be simplified\n LL |     if x > y {\n    |        ^^^^^ help: try simplifying it as shown: `x & !y`\n \n-error: Here comes\n+error: This comparison might be written more concisely\n   --> $DIR/bool_comparison.rs:119:8\n    |\n LL |     if a == !b {};\n-   |        ^^^^^^^\n-   |\n-   = help: the suggestion\n+   |        ^^^^^^^ help: try simplifying it as shown: `a != b`\n \n-error: Here comes\n+error: This comparison might be written more concisely\n   --> $DIR/bool_comparison.rs:120:8\n    |\n LL |     if !a == b {};\n-   |        ^^^^^^^\n-   |\n-   = help: the suggestion\n+   |        ^^^^^^^ help: try simplifying it as shown: `a != b`\n \n error: aborting due to 16 previous errors\n "}]}