{"sha": "6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZjNhNGJjZDgzNmU0YjI5MTA4YmZiNmQ4ZDdiMDBkNDA1ZmQwM2U=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-08-01T13:14:22Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-08-01T13:14:22Z"}, "message": "rustc_metadata: track the simplified Self type for every trait impl.", "tree": {"sha": "3bf6856215108452899fe769389996d9d3c713f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bf6856215108452899fe769389996d9d3c713f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e", "html_url": "https://github.com/rust-lang/rust/commit/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "html_url": "https://github.com/rust-lang/rust/commit/dfe1e3b641abbede6230e3931d14f0d43e5b8e54"}], "stats": {"total": 91, "additions": 54, "deletions": 37}, "files": [{"sha": "c176b8c43591b491fb6baf2624d8248976be9ed2", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e", "patch": "@@ -78,7 +78,8 @@ crate struct CrateMetadata {\n     /// Trait impl data.\n     /// FIXME: Used only from queries and can use query cache,\n     /// so pre-decoding can probably be avoided.\n-    trait_impls: FxHashMap<(u32, DefIndex), Lazy<[DefIndex]>>,\n+    trait_impls:\n+        FxHashMap<(u32, DefIndex), Lazy<[(DefIndex, Option<ty::fast_reject::SimplifiedType>)]>>,\n     /// Proc macro descriptions for this crate, if it's a proc macro crate.\n     raw_proc_macros: Option<&'static [ProcMacro]>,\n     /// Source maps for code from the crate.\n@@ -1289,7 +1290,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         filter: Option<DefId>,\n-    ) -> &'tcx [DefId] {\n+    ) -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n         if self.root.is_proc_macro_crate() {\n             // proc-macro crates export no trait impls.\n             return &[];\n@@ -1305,16 +1306,20 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n         if let Some(filter) = filter {\n             if let Some(impls) = self.trait_impls.get(&filter) {\n-                tcx.arena.alloc_from_iter(impls.decode(self).map(|idx| self.local_def_id(idx)))\n+                tcx.arena.alloc_from_iter(\n+                    impls.decode(self).map(|(idx, simplified_self_ty)| {\n+                        (self.local_def_id(idx), simplified_self_ty)\n+                    }),\n+                )\n             } else {\n                 &[]\n             }\n         } else {\n-            tcx.arena.alloc_from_iter(\n-                self.trait_impls\n-                    .values()\n-                    .flat_map(|impls| impls.decode(self).map(|idx| self.local_def_id(idx))),\n-            )\n+            tcx.arena.alloc_from_iter(self.trait_impls.values().flat_map(|impls| {\n+                impls\n+                    .decode(self)\n+                    .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty))\n+            }))\n         }\n     }\n "}, {"sha": "d0ee90e70ba73e1adb2f649f819762e505576960", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e", "patch": "@@ -1607,7 +1607,7 @@ impl EncodeContext<'a, 'tcx> {\n             .into_iter()\n             .map(|(trait_def_id, mut impls)| {\n                 // Bring everything into deterministic order for hashing\n-                impls.sort_by_cached_key(|&index| {\n+                impls.sort_by_cached_key(|&(index, _)| {\n                     tcx.hir().definitions().def_path_hash(LocalDefId { local_def_index: index })\n                 });\n \n@@ -1849,15 +1849,21 @@ impl EncodeContext<'a, 'tcx> {\n \n struct ImplVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    impls: FxHashMap<DefId, Vec<DefIndex>>,\n+    impls: FxHashMap<DefId, Vec<(DefIndex, Option<ty::fast_reject::SimplifiedType>)>>,\n }\n \n impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         if let hir::ItemKind::Impl { .. } = item.kind {\n             let impl_id = self.tcx.hir().local_def_id(item.hir_id);\n             if let Some(trait_ref) = self.tcx.impl_trait_ref(impl_id.to_def_id()) {\n-                self.impls.entry(trait_ref.def_id).or_default().push(impl_id.local_def_index);\n+                let simplified_self_ty =\n+                    ty::fast_reject::simplify_type(self.tcx, trait_ref.self_ty(), false);\n+\n+                self.impls\n+                    .entry(trait_ref.def_id)\n+                    .or_default()\n+                    .push((impl_id.local_def_index, simplified_self_ty));\n             }\n         }\n     }"}, {"sha": "391803634cac293842786596082aecaf64c22177", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e", "patch": "@@ -233,7 +233,7 @@ crate struct CrateDep {\n #[derive(RustcEncodable, RustcDecodable)]\n crate struct TraitImpls {\n     trait_id: (u32, DefIndex),\n-    impls: Lazy<[DefIndex]>,\n+    impls: Lazy<[(DefIndex, Option<ty::fast_reject::SimplifiedType>)]>,\n }\n \n /// Define `LazyTables` and `TableBuilders` at the same time."}, {"sha": "1efb2b7b2fee60b3cefea1cdae5a47c57587a025", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e", "patch": "@@ -1125,11 +1125,11 @@ rustc_queries! {\n \n     TypeChecking {\n         query implementations_of_trait(_: (CrateNum, DefId))\n-            -> &'tcx [DefId] {\n+            -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n             desc { \"looking up implementations of a trait in a crate\" }\n         }\n         query all_trait_implementations(_: CrateNum)\n-            -> &'tcx [DefId] {\n+            -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n             desc { \"looking up all (?) trait implementations\" }\n         }\n     }"}, {"sha": "f93cce3f4da7f1b1f786f3d883a3a94fb2f12526", "filename": "src/librustc_middle/ty/trait_def.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs?ref=6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e", "patch": "@@ -187,32 +187,38 @@ pub(super) fn all_local_trait_impls<'tcx>(\n pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> TraitImpls {\n     let mut impls = TraitImpls::default();\n \n-    {\n-        let mut add_impl = |impl_def_id: DefId| {\n-            let impl_self_ty = tcx.type_of(impl_def_id);\n-            if impl_def_id.is_local() && impl_self_ty.references_error() {\n-                return;\n-            }\n-\n-            if let Some(simplified_self_ty) = fast_reject::simplify_type(tcx, impl_self_ty, false) {\n-                impls.non_blanket_impls.entry(simplified_self_ty).or_default().push(impl_def_id);\n-            } else {\n-                impls.blanket_impls.push(impl_def_id);\n-            }\n-        };\n-\n-        // Traits defined in the current crate can't have impls in upstream\n-        // crates, so we don't bother querying the cstore.\n-        if !trait_id.is_local() {\n-            for &cnum in tcx.crates().iter() {\n-                for &def_id in tcx.implementations_of_trait((cnum, trait_id)).iter() {\n-                    add_impl(def_id);\n+    // Traits defined in the current crate can't have impls in upstream\n+    // crates, so we don't bother querying the cstore.\n+    if !trait_id.is_local() {\n+        for &cnum in tcx.crates().iter() {\n+            for &(impl_def_id, simplified_self_ty) in\n+                tcx.implementations_of_trait((cnum, trait_id)).iter()\n+            {\n+                if let Some(simplified_self_ty) = simplified_self_ty {\n+                    impls\n+                        .non_blanket_impls\n+                        .entry(simplified_self_ty)\n+                        .or_default()\n+                        .push(impl_def_id);\n+                } else {\n+                    impls.blanket_impls.push(impl_def_id);\n                 }\n             }\n         }\n+    }\n+\n+    for &hir_id in tcx.hir().trait_impls(trait_id) {\n+        let impl_def_id = tcx.hir().local_def_id(hir_id).to_def_id();\n+\n+        let impl_self_ty = tcx.type_of(impl_def_id);\n+        if impl_self_ty.references_error() {\n+            continue;\n+        }\n \n-        for &hir_id in tcx.hir().trait_impls(trait_id) {\n-            add_impl(tcx.hir().local_def_id(hir_id).to_def_id());\n+        if let Some(simplified_self_ty) = fast_reject::simplify_type(tcx, impl_self_ty, false) {\n+            impls.non_blanket_impls.entry(simplified_self_ty).or_default().push(impl_def_id);\n+        } else {\n+            impls.blanket_impls.push(impl_def_id);\n         }\n     }\n "}, {"sha": "3000afde0c25d6172fd91d4ce669fd5657c9a538", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=6bf3a4bcd836e4b29108bfb6d8d7b00d405fd03e", "patch": "@@ -28,7 +28,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     let mut new_items = Vec::new();\n \n     for &cnum in cx.tcx.crates().iter() {\n-        for &did in cx.tcx.all_trait_implementations(cnum).iter() {\n+        for &(did, _) in cx.tcx.all_trait_implementations(cnum).iter() {\n             inline::build_impl(cx, did, None, &mut new_items);\n         }\n     }"}]}