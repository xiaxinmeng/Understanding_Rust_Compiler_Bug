{"sha": "896d8f5905f2d63393a048dff5aeb0c23b793e7e", "node_id": "C_kwDOAAsO6NoAKDg5NmQ4ZjU5MDVmMmQ2MzM5M2EwNDhkZmY1YWViMGMyM2I3OTNlN2U", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-05T02:12:15Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-05T07:19:38Z"}, "message": "Remove the lifetime from `TtParser` and `MatcherLoc`.\n\nIt's a slight performance loss for now, but that will be recouped by the\nnext commit.", "tree": {"sha": "4ccc53379d1b3b15039327b99d3989274abcd9e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ccc53379d1b3b15039327b99d3989274abcd9e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/896d8f5905f2d63393a048dff5aeb0c23b793e7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/896d8f5905f2d63393a048dff5aeb0c23b793e7e", "html_url": "https://github.com/rust-lang/rust/commit/896d8f5905f2d63393a048dff5aeb0c23b793e7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/896d8f5905f2d63393a048dff5aeb0c23b793e7e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a9080b25e73d26aae94c3f6a13b31de58e66b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9080b25e73d26aae94c3f6a13b31de58e66b5a", "html_url": "https://github.com/rust-lang/rust/commit/6a9080b25e73d26aae94c3f6a13b31de58e66b5a"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "eb1b0b440009609b407339e6291be97f9f679a02", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/896d8f5905f2d63393a048dff5aeb0c23b793e7e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/896d8f5905f2d63393a048dff5aeb0c23b793e7e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=896d8f5905f2d63393a048dff5aeb0c23b793e7e", "patch": "@@ -106,9 +106,9 @@ rustc_data_structures::static_assert_size!(NamedMatchVec, 48);\n ///\n /// This means a matcher can be represented by `&[MatcherLoc]`, and traversal mostly involves\n /// simply incrementing the current matcher position index by one.\n-enum MatcherLoc<'tt> {\n+enum MatcherLoc {\n     Token {\n-        token: &'tt Token,\n+        token: Token,\n     },\n     Delimited,\n     Sequence {\n@@ -123,7 +123,7 @@ enum MatcherLoc<'tt> {\n         idx_first: usize,\n     },\n     SequenceSep {\n-        separator: &'tt Token,\n+        separator: Token,\n     },\n     SequenceKleeneOpAfterSep {\n         idx_first: usize,\n@@ -298,11 +298,11 @@ fn token_name_eq(t1: &Token, t2: &Token) -> bool {\n \n // Note: the vectors could be created and dropped within `parse_tt`, but to avoid excess\n // allocations we have a single vector fo each kind that is cleared and reused repeatedly.\n-pub struct TtParser<'tt> {\n+pub struct TtParser {\n     macro_name: Ident,\n \n     /// The matcher of the current rule.\n-    locs: Vec<MatcherLoc<'tt>>,\n+    locs: Vec<MatcherLoc>,\n \n     /// The set of current mps to be processed. This should be empty by the end of a successful\n     /// execution of `parse_tt_inner`.\n@@ -320,8 +320,8 @@ pub struct TtParser<'tt> {\n     empty_matches: Lrc<NamedMatchVec>,\n }\n \n-impl<'tt> TtParser<'tt> {\n-    pub(super) fn new(macro_name: Ident) -> TtParser<'tt> {\n+impl TtParser {\n+    pub(super) fn new(macro_name: Ident) -> TtParser {\n         TtParser {\n             macro_name,\n             locs: vec![],\n@@ -340,19 +340,19 @@ impl<'tt> TtParser<'tt> {\n     fn compute_locs(\n         &mut self,\n         sess: &ParseSess,\n-        matcher: &'tt [TokenTree],\n+        matcher: &[TokenTree],\n     ) -> Result<usize, (Span, String)> {\n-        fn inner<'tt>(\n+        fn inner(\n             sess: &ParseSess,\n-            tts: &'tt [TokenTree],\n-            locs: &mut Vec<MatcherLoc<'tt>>,\n+            tts: &[TokenTree],\n+            locs: &mut Vec<MatcherLoc>,\n             next_metavar: &mut usize,\n             seq_depth: usize,\n         ) -> Result<(), (Span, String)> {\n             for tt in tts {\n                 match tt {\n                     TokenTree::Token(token) => {\n-                        locs.push(MatcherLoc::Token { token });\n+                        locs.push(MatcherLoc::Token { token: token.clone() });\n                     }\n                     TokenTree::Delimited(_, delimited) => {\n                         locs.push(MatcherLoc::Delimited);\n@@ -373,7 +373,7 @@ impl<'tt> TtParser<'tt> {\n                         inner(sess, &seq.tts, locs, next_metavar, seq_depth + 1)?;\n \n                         if let Some(separator) = &seq.separator {\n-                            locs.push(MatcherLoc::SequenceSep { separator });\n+                            locs.push(MatcherLoc::SequenceSep { separator: separator.clone() });\n                             locs.push(MatcherLoc::SequenceKleeneOpAfterSep { idx_first });\n                         } else {\n                             locs.push(MatcherLoc::SequenceKleeneOpNoSep { op, idx_first });\n@@ -586,7 +586,7 @@ impl<'tt> TtParser<'tt> {\n     pub(super) fn parse_tt(\n         &mut self,\n         parser: &mut Cow<'_, Parser<'_>>,\n-        matcher: &'tt [TokenTree],\n+        matcher: &[TokenTree],\n     ) -> NamedParseResult {\n         let num_metavar_decls = match self.compute_locs(parser.sess, matcher) {\n             Ok(num_metavar_decls) => num_metavar_decls,"}]}