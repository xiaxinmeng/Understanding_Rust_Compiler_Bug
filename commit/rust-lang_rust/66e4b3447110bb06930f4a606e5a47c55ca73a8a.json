{"sha": "66e4b3447110bb06930f4a606e5a47c55ca73a8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZTRiMzQ0NzExMGJiMDY5MzBmNGE2MDZlNWE0N2M1NWNhNzNhOGE=", "commit": {"author": {"name": "Arno Haase", "email": "arno.haase@haase-consulting.com", "date": "2019-09-10T12:04:52Z"}, "committer": {"name": "Arno Haase", "email": "arno.haase@haase-consulting.com", "date": "2019-09-10T12:04:52Z"}, "message": "typo fix", "tree": {"sha": "105c842b3ef9be53c0a4d32b1b521dbf3ad97507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/105c842b3ef9be53c0a4d32b1b521dbf3ad97507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66e4b3447110bb06930f4a606e5a47c55ca73a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66e4b3447110bb06930f4a606e5a47c55ca73a8a", "html_url": "https://github.com/rust-lang/rust/commit/66e4b3447110bb06930f4a606e5a47c55ca73a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66e4b3447110bb06930f4a606e5a47c55ca73a8a/comments", "author": null, "committer": null, "parents": [{"sha": "356b4c81a04d1db70621949b25c0cc80d5c94b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/356b4c81a04d1db70621949b25c0cc80d5c94b8e", "html_url": "https://github.com/rust-lang/rust/commit/356b4c81a04d1db70621949b25c0cc80d5c94b8e"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "861ad6b54201ed4f330fc2dd92867cd3f726fbbf", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e4b3447110bb06930f4a606e5a47c55ca73a8a/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e4b3447110bb06930f4a606e5a47c55ca73a8a/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=66e4b3447110bb06930f4a606e5a47c55ca73a8a", "patch": "@@ -64,7 +64,7 @@ pub unsafe fn unreachable_unchecked() -> ! {\n /// scheduler, no overhead for switching threads occurs. However, if the thread holding the\n /// contended lock is running on the same CPU or core, the spin-loop is likely to occupy an entire CPU slice\n /// before switching to the thread that holds the lock. If the contending lock is held by a thread\n-/// on the same CPU or thread or if the waiting times for acquiring the lock are longer, it is often better to\n+/// on the same CPU or core or if the waiting times for acquiring the lock are longer, it is often better to\n /// use [`std::thread::yield_now`].\n ///\n /// **Note**: On platforms that do not support receiving spin-loop hints this function does not"}]}