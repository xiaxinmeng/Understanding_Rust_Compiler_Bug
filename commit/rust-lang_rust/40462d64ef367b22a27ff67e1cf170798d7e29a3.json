{"sha": "40462d64ef367b22a27ff67e1cf170798d7e29a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNDYyZDY0ZWYzNjdiMjJhMjdmZjY3ZTFjZjE3MDc5OGQ3ZTI5YTM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T06:45:25Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T06:45:25Z"}, "message": "Implement the size_of intrinsic.", "tree": {"sha": "2e971206b7bc113e5417f52219414275e7e62553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e971206b7bc113e5417f52219414275e7e62553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40462d64ef367b22a27ff67e1cf170798d7e29a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40462d64ef367b22a27ff67e1cf170798d7e29a3", "html_url": "https://github.com/rust-lang/rust/commit/40462d64ef367b22a27ff67e1cf170798d7e29a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40462d64ef367b22a27ff67e1cf170798d7e29a3/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eddb4e92a71e3842cf8f5ca5edacd02e22bd1b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eddb4e92a71e3842cf8f5ca5edacd02e22bd1b1", "html_url": "https://github.com/rust-lang/rust/commit/7eddb4e92a71e3842cf8f5ca5edacd02e22bd1b1"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "21be40f696a1747d823a634465092ce2f585731e", "filename": "src/interpreter.rs", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/40462d64ef367b22a27ff67e1cf170798d7e29a3/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40462d64ef367b22a27ff67e1cf170798d7e29a3/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=40462d64ef367b22a27ff67e1cf170798d7e29a3", "patch": "@@ -1,6 +1,6 @@\n use rustc::middle::const_eval;\n use rustc::middle::def_id::DefId;\n-use rustc::middle::subst::{Subst, Substs};\n+use rustc::middle::subst::{self, Subst, Substs};\n use rustc::middle::ty::{self, TyCtxt};\n use rustc::mir::mir_map::MirMap;\n use rustc::mir::repr as mir;\n@@ -223,13 +223,38 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 let func_ty = self.current_frame().mir.operand_ty(self.tcx, func);\n \n                 match func_ty.sty {\n-                    ty::TyFnDef(def_id, substs, _) => {\n-                        let mir = self.load_mir(def_id);\n-                        let substs = self.tcx.mk_substs(\n-                            substs.subst(self.tcx, self.current_substs()));\n-                        self.substs_stack.push(substs);\n-                        try!(self.push_stack_frame(mir, args, return_ptr));\n-                        TerminatorTarget::Call\n+                    ty::TyFnDef(def_id, substs, bare_fn_ty) => {\n+                        use syntax::abi::Abi;\n+                        match bare_fn_ty.abi {\n+                            Abi::RustIntrinsic => match &self.tcx.item_name(def_id).as_str()[..] {\n+                                \"size_of\" => {\n+                                    let ty = *substs.types.get(subst::FnSpace, 0);\n+                                    let (dest, dest_repr) =\n+                                        try!(self.eval_lvalue(&mir::Lvalue::ReturnPointer));\n+                                    let size = PrimVal::from_usize(self.ty_to_repr(ty).size(),\n+                                                                   &dest_repr);\n+                                    try!(self.memory.write_primval(dest, size));\n+\n+                                    // Since we pushed no stack frame, the main loop will act as if\n+                                    // the call just completed and it's returning to the current\n+                                    // frame.\n+                                    TerminatorTarget::Call\n+                                },\n+\n+                                name => panic!(\"can't handle intrinsic named {}\", name),\n+                            },\n+\n+                            Abi::Rust => {\n+                                let mir = self.load_mir(def_id);\n+                                let substs = self.tcx.mk_substs(\n+                                    substs.subst(self.tcx, self.current_substs()));\n+                                self.substs_stack.push(substs);\n+                                try!(self.push_stack_frame(mir, args, return_ptr));\n+                                TerminatorTarget::Call\n+                            }\n+\n+                            abi => panic!(\"can't handle function with ABI {:?}\", abi),\n+                        }\n                     }\n \n                     _ => panic!(\"can't handle callee of type {:?}\", func_ty),\n@@ -404,14 +429,19 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 try!(self.memory.write_i64(ptr, n));\n                 Ok(ptr)\n             }\n-            Uint(_u)          => unimplemented!(),\n-            Str(ref _s)       => unimplemented!(),\n-            ByteStr(ref _bs)  => unimplemented!(),\n+            Uint(n) => {\n+                // TODO(tsion): Check int constant type.\n+                let ptr = self.memory.allocate(8);\n+                try!(self.memory.write_u64(ptr, n));\n+                Ok(ptr)\n+            }\n+            Str(ref _s) => unimplemented!(),\n+            ByteStr(ref _bs) => unimplemented!(),\n             Bool(b) => {\n                 let ptr = self.memory.allocate(Repr::Bool.size());\n                 try!(self.memory.write_bool(ptr, b));\n                 Ok(ptr)\n-            },\n+            }\n             Struct(_node_id)  => unimplemented!(),\n             Tuple(_node_id)   => unimplemented!(),\n             Function(_def_id) => unimplemented!(),"}, {"sha": "2cda1c3bddf1bd92a6c7255acc07d90fdeb95724", "filename": "test/calls.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40462d64ef367b22a27ff67e1cf170798d7e29a3/test%2Fcalls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40462d64ef367b22a27ff67e1cf170798d7e29a3/test%2Fcalls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fcalls.rs?ref=40462d64ef367b22a27ff67e1cf170798d7e29a3", "patch": "@@ -32,3 +32,9 @@ fn call_generic() -> (i16, bool) {\n fn cross_crate_fn_call() -> i64 {\n     if 1i32.is_positive() { 1 } else { 0 }\n }\n+\n+// Test one of the simplest intrinsics.\n+#[miri_run]\n+fn test_size_of() -> usize {\n+    ::std::mem::size_of::<Option<i32>>()\n+}"}]}