{"sha": "d3d0fb7b45ea88c7e97b63612347da067ee3b65d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZDBmYjdiNDVlYTg4YzdlOTdiNjM2MTIzNDdkYTA2N2VlM2I2NWQ=", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2021-02-03T15:53:25Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2021-02-03T15:53:25Z"}, "message": "add #[inline] to all the public IpAddr functions", "tree": {"sha": "e8d2ab8825aac59dafb4eb5b33ef3518aa79e61c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8d2ab8825aac59dafb4eb5b33ef3518aa79e61c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3d0fb7b45ea88c7e97b63612347da067ee3b65d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d0fb7b45ea88c7e97b63612347da067ee3b65d", "html_url": "https://github.com/rust-lang/rust/commit/d3d0fb7b45ea88c7e97b63612347da067ee3b65d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3d0fb7b45ea88c7e97b63612347da067ee3b65d/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2", "html_url": "https://github.com/rust-lang/rust/commit/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "2aa305d7f831eacc3d86e62587cc207ade95f6d8", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d3d0fb7b45ea88c7e97b63612347da067ee3b65d/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d0fb7b45ea88c7e97b63612347da067ee3b65d/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=d3d0fb7b45ea88c7e97b63612347da067ee3b65d", "patch": "@@ -150,6 +150,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_unspecified(),\n@@ -172,6 +173,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_loopback(),\n@@ -195,6 +197,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1)).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_global(),\n@@ -217,6 +220,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_multicast(),\n@@ -243,6 +247,7 @@ impl IpAddr {\n     /// );\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_documentation(),\n@@ -265,6 +270,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n+    #[inline]\n     pub const fn is_ipv4(&self) -> bool {\n         matches!(self, IpAddr::V4(_))\n     }\n@@ -284,6 +290,7 @@ impl IpAddr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n+    #[inline]\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(self, IpAddr::V6(_))\n     }\n@@ -303,6 +310,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         // `s_addr` is stored as BE on all machine and the array is in BE order.\n         // So the native endian conversion method is used so that it's never swapped.\n@@ -360,6 +368,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn octets(&self) -> [u8; 4] {\n         // This returns the order we want because s_addr is stored in big-endian.\n         self.inner.s_addr.to_ne_bytes()\n@@ -382,6 +391,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n     }\n@@ -402,6 +412,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         self.octets()[0] == 127\n     }\n@@ -431,6 +442,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_private(&self) -> bool {\n         match self.octets() {\n             [10, ..] => true,\n@@ -457,6 +469,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_link_local(&self) -> bool {\n         matches!(self.octets(), [169, 254, ..])\n     }\n@@ -531,6 +544,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_global(&self) -> bool {\n         // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two\n         // globally routable addresses in the 192.0.0.0/24 range.\n@@ -568,6 +582,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(100, 128, 0, 0).is_shared(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_shared(&self) -> bool {\n         self.octets()[0] == 100 && (self.octets()[1] & 0b1100_0000 == 0b0100_0000)\n     }\n@@ -600,6 +615,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(191, 255, 255, 255).is_ietf_protocol_assignment(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_ietf_protocol_assignment(&self) -> bool {\n         self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0\n     }\n@@ -623,6 +639,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(198, 20, 0, 0).is_benchmarking(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         self.octets()[0] == 198 && (self.octets()[1] & 0xfe) == 18\n     }\n@@ -655,6 +672,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_reserved(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_reserved(&self) -> bool {\n         self.octets()[0] & 240 == 240 && !self.is_broadcast()\n     }\n@@ -677,6 +695,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n     }\n@@ -697,6 +716,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_broadcast(&self) -> bool {\n         u32::from_be_bytes(self.octets()) == u32::from_be_bytes(Self::BROADCAST.octets())\n     }\n@@ -723,6 +743,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self.octets() {\n             [192, 0, 2, _] => true,\n@@ -753,6 +774,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn to_ipv6_compatible(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n         Ipv6Addr {\n@@ -776,6 +798,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn to_ipv6_mapped(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n         Ipv6Addr {\n@@ -817,6 +840,7 @@ impl From<Ipv4Addr> for IpAddr {\n     ///     IpAddr::from(addr)\n     /// )\n     /// ```\n+    #[inline]\n     fn from(ipv4: Ipv4Addr) -> IpAddr {\n         IpAddr::V4(ipv4)\n     }\n@@ -838,6 +862,7 @@ impl From<Ipv6Addr> for IpAddr {\n     ///     IpAddr::from(addr)\n     /// );\n     /// ```\n+    #[inline]\n     fn from(ipv6: Ipv6Addr) -> IpAddr {\n         IpAddr::V6(ipv6)\n     }\n@@ -875,20 +900,23 @@ impl fmt::Debug for Ipv4Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Clone for Ipv4Addr {\n+    #[inline]\n     fn clone(&self) -> Ipv4Addr {\n         *self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for Ipv4Addr {\n+    #[inline]\n     fn eq(&self, other: &Ipv4Addr) -> bool {\n         self.inner.s_addr == other.inner.s_addr\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<Ipv4Addr> for IpAddr {\n+    #[inline]\n     fn eq(&self, other: &Ipv4Addr) -> bool {\n         match self {\n             IpAddr::V4(v4) => v4 == other,\n@@ -899,6 +927,7 @@ impl PartialEq<Ipv4Addr> for IpAddr {\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<IpAddr> for Ipv4Addr {\n+    #[inline]\n     fn eq(&self, other: &IpAddr) -> bool {\n         match other {\n             IpAddr::V4(v4) => self == v4,\n@@ -912,6 +941,7 @@ impl Eq for Ipv4Addr {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl hash::Hash for Ipv4Addr {\n+    #[inline]\n     fn hash<H: hash::Hasher>(&self, s: &mut H) {\n         // NOTE:\n         // * hash in big endian order\n@@ -923,13 +953,15 @@ impl hash::Hash for Ipv4Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for Ipv4Addr {\n+    #[inline]\n     fn partial_cmp(&self, other: &Ipv4Addr) -> Option<Ordering> {\n         Some(self.cmp(other))\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<Ipv4Addr> for IpAddr {\n+    #[inline]\n     fn partial_cmp(&self, other: &Ipv4Addr) -> Option<Ordering> {\n         match self {\n             IpAddr::V4(v4) => v4.partial_cmp(other),\n@@ -940,6 +972,7 @@ impl PartialOrd<Ipv4Addr> for IpAddr {\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<IpAddr> for Ipv4Addr {\n+    #[inline]\n     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n         match other {\n             IpAddr::V4(v4) => self.partial_cmp(v4),\n@@ -950,6 +983,7 @@ impl PartialOrd<IpAddr> for Ipv4Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for Ipv4Addr {\n+    #[inline]\n     fn cmp(&self, other: &Ipv4Addr) -> Ordering {\n         // Compare as native endian\n         u32::from_be(self.inner.s_addr).cmp(&u32::from_be(other.inner.s_addr))\n@@ -974,6 +1008,7 @@ impl From<Ipv4Addr> for u32 {\n     /// let addr = Ipv4Addr::new(0xca, 0xfe, 0xba, 0xbe);\n     /// assert_eq!(0xcafebabe, u32::from(addr));\n     /// ```\n+    #[inline]\n     fn from(ip: Ipv4Addr) -> u32 {\n         let ip = ip.octets();\n         u32::from_be_bytes(ip)\n@@ -992,6 +1027,7 @@ impl From<u32> for Ipv4Addr {\n     /// let addr = Ipv4Addr::from(0xcafebabe);\n     /// assert_eq!(Ipv4Addr::new(0xca, 0xfe, 0xba, 0xbe), addr);\n     /// ```\n+    #[inline]\n     fn from(ip: u32) -> Ipv4Addr {\n         Ipv4Addr::from(ip.to_be_bytes())\n     }\n@@ -1009,6 +1045,7 @@ impl From<[u8; 4]> for Ipv4Addr {\n     /// let addr = Ipv4Addr::from([13u8, 12u8, 11u8, 10u8]);\n     /// assert_eq!(Ipv4Addr::new(13, 12, 11, 10), addr);\n     /// ```\n+    #[inline]\n     fn from(octets: [u8; 4]) -> Ipv4Addr {\n         Ipv4Addr::new(octets[0], octets[1], octets[2], octets[3])\n     }\n@@ -1026,6 +1063,7 @@ impl From<[u8; 4]> for IpAddr {\n     /// let addr = IpAddr::from([13u8, 12u8, 11u8, 10u8]);\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(13, 12, 11, 10)), addr);\n     /// ```\n+    #[inline]\n     fn from(octets: [u8; 4]) -> IpAddr {\n         IpAddr::V4(Ipv4Addr::from(octets))\n     }\n@@ -1046,6 +1084,7 @@ impl Ipv6Addr {\n     #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16, h: u16) -> Ipv6Addr {\n         let addr16 = [\n             a.to_be(),\n@@ -1107,6 +1146,7 @@ impl Ipv6Addr {\n     #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn segments(&self) -> [u16; 8] {\n         // All elements in `s6_addr` must be big endian.\n         // SAFETY: `[u8; 16]` is always safe to transmute to `[u16; 8]`.\n@@ -1142,6 +1182,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_unspecified(&self) -> bool {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::UNSPECIFIED.octets())\n     }\n@@ -1162,6 +1203,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_loopback(&self) -> bool {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::LOCALHOST.octets())\n     }\n@@ -1186,6 +1228,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self.multicast_scope() {\n             Some(Ipv6MulticastScope::Global) => true,\n@@ -1211,6 +1254,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0xfc02, 0, 0, 0, 0, 0, 0, 0).is_unique_local(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n     }\n@@ -1265,6 +1309,7 @@ impl Ipv6Addr {\n     /// [IETF RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_unicast_link_local_strict(&self) -> bool {\n         matches!(self.segments(), [0xfe80, 0, 0, 0, ..])\n     }\n@@ -1318,6 +1363,7 @@ impl Ipv6Addr {\n     /// [IETF RFC 4291 section 2.4]: https://tools.ietf.org/html/rfc4291#section-2.4\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }\n@@ -1357,6 +1403,7 @@ impl Ipv6Addr {\n     ///\n     /// [RFC 3879]: https://tools.ietf.org/html/rfc3879\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_unicast_site_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n     }\n@@ -1379,6 +1426,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_documentation(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n     }\n@@ -1414,6 +1462,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn is_unicast_global(&self) -> bool {\n         !self.is_multicast()\n             && !self.is_loopback()\n@@ -1439,6 +1488,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).multicast_scope(), None);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n         if self.is_multicast() {\n             match self.segments()[0] & 0x000f {\n@@ -1472,6 +1522,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n+    #[inline]\n     pub const fn is_multicast(&self) -> bool {\n         (self.segments()[0] & 0xff00) == 0xff00\n     }\n@@ -1498,6 +1549,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4_mapped(), None);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[inline]\n     pub const fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n         match self.octets() {\n             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, a, b, c, d] => {\n@@ -1527,6 +1579,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub const fn to_ipv4(&self) -> Option<Ipv4Addr> {\n         if let [0, 0, 0, 0, 0, 0 | 0xffff, ab, cd] = self.segments() {\n             let [a, b] = ab.to_be_bytes();\n@@ -1547,6 +1600,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     #[stable(feature = \"ipv6_to_octets\", since = \"1.12.0\")]\n+    #[inline]\n     pub const fn octets(&self) -> [u8; 16] {\n         self.inner.s6_addr\n     }\n@@ -1658,20 +1712,23 @@ impl fmt::Debug for Ipv6Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Clone for Ipv6Addr {\n+    #[inline]\n     fn clone(&self) -> Ipv6Addr {\n         *self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for Ipv6Addr {\n+    #[inline]\n     fn eq(&self, other: &Ipv6Addr) -> bool {\n         self.inner.s6_addr == other.inner.s6_addr\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<IpAddr> for Ipv6Addr {\n+    #[inline]\n     fn eq(&self, other: &IpAddr) -> bool {\n         match other {\n             IpAddr::V4(_) => false,\n@@ -1682,6 +1739,7 @@ impl PartialEq<IpAddr> for Ipv6Addr {\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<Ipv6Addr> for IpAddr {\n+    #[inline]\n     fn eq(&self, other: &Ipv6Addr) -> bool {\n         match self {\n             IpAddr::V4(_) => false,\n@@ -1695,20 +1753,23 @@ impl Eq for Ipv6Addr {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl hash::Hash for Ipv6Addr {\n+    #[inline]\n     fn hash<H: hash::Hasher>(&self, s: &mut H) {\n         self.inner.s6_addr.hash(s)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for Ipv6Addr {\n+    #[inline]\n     fn partial_cmp(&self, other: &Ipv6Addr) -> Option<Ordering> {\n         Some(self.cmp(other))\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<Ipv6Addr> for IpAddr {\n+    #[inline]\n     fn partial_cmp(&self, other: &Ipv6Addr) -> Option<Ordering> {\n         match self {\n             IpAddr::V4(_) => Some(Ordering::Less),\n@@ -1719,6 +1780,7 @@ impl PartialOrd<Ipv6Addr> for IpAddr {\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<IpAddr> for Ipv6Addr {\n+    #[inline]\n     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n         match other {\n             IpAddr::V4(_) => Some(Ordering::Greater),\n@@ -1729,6 +1791,7 @@ impl PartialOrd<IpAddr> for Ipv6Addr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for Ipv6Addr {\n+    #[inline]\n     fn cmp(&self, other: &Ipv6Addr) -> Ordering {\n         self.segments().cmp(&other.segments())\n     }\n@@ -1760,6 +1823,7 @@ impl From<Ipv6Addr> for u128 {\n     /// );\n     /// assert_eq!(0x102030405060708090A0B0C0D0E0F00D_u128, u128::from(addr));\n     /// ```\n+    #[inline]\n     fn from(ip: Ipv6Addr) -> u128 {\n         let ip = ip.octets();\n         u128::from_be_bytes(ip)\n@@ -1782,6 +1846,7 @@ impl From<u128> for Ipv6Addr {\n     ///     ),\n     ///     addr);\n     /// ```\n+    #[inline]\n     fn from(ip: u128) -> Ipv6Addr {\n         Ipv6Addr::from(ip.to_be_bytes())\n     }\n@@ -1810,6 +1875,7 @@ impl From<[u8; 16]> for Ipv6Addr {\n     ///     addr\n     /// );\n     /// ```\n+    #[inline]\n     fn from(octets: [u8; 16]) -> Ipv6Addr {\n         let inner = c::in6_addr { s6_addr: octets };\n         Ipv6Addr::from_inner(inner)\n@@ -1839,6 +1905,7 @@ impl From<[u16; 8]> for Ipv6Addr {\n     ///     addr\n     /// );\n     /// ```\n+    #[inline]\n     fn from(segments: [u16; 8]) -> Ipv6Addr {\n         let [a, b, c, d, e, f, g, h] = segments;\n         Ipv6Addr::new(a, b, c, d, e, f, g, h)\n@@ -1868,6 +1935,7 @@ impl From<[u8; 16]> for IpAddr {\n     ///     addr\n     /// );\n     /// ```\n+    #[inline]\n     fn from(octets: [u8; 16]) -> IpAddr {\n         IpAddr::V6(Ipv6Addr::from(octets))\n     }\n@@ -1896,6 +1964,7 @@ impl From<[u16; 8]> for IpAddr {\n     ///     addr\n     /// );\n     /// ```\n+    #[inline]\n     fn from(segments: [u16; 8]) -> IpAddr {\n         IpAddr::V6(Ipv6Addr::from(segments))\n     }"}]}