{"sha": "721af40dcbde949c7334295eccbbae2b120ab3e8", "node_id": "C_kwDOAAsO6NoAKDcyMWFmNDBkY2JkZTk0OWM3MzM0Mjk1ZWNjYmJhZTJiMTIwYWIzZTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-05T16:24:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-05T16:24:33Z"}, "message": "Rollup merge of #100155 - compiler-errors:issue-100154, r=jackh726\n\nUse `node_type_opt` to skip over generics that were not expected\n\nFixes #100154", "tree": {"sha": "41471155b39877bc14543ea6831a79df95c45867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41471155b39877bc14543ea6831a79df95c45867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/721af40dcbde949c7334295eccbbae2b120ab3e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi7URBCRBK7hj4Ov3rIwAA0PEIAFi90MYRfMu2VQ3d68PVP0Vd\nFzboANzL91MfAHXPnM5AOSfn0yEqD3BCpvRTJeT2ZxqUNWcj/if/8esGgU3SgFp1\nBCFZk/Gw75eHBtpBubyuUrGdIgrJlwMsbsiF6RvcVBzaMg6vvCQ43vBe9prFLKX+\nXVLQcbHOs162iwWNOSgrUktv/fC0IU94+wurlGao+mGTCH/K3iRUhVldchjHZ25u\noeWjIwdqRhyz/VzafzpsDWQRcsWbv3EdMWApkoGdB0+6QihbI9O8anwY7DCLeA2z\n69bdof4fhsrcEF5Tt0EbDlr2Wq4AoR318rXGfJkpUEReN2T+ODc2Eed0w1Y8SE0=\n=GcRp\n-----END PGP SIGNATURE-----\n", "payload": "tree 41471155b39877bc14543ea6831a79df95c45867\nparent 9e4feff46a92eedc61ee2d23a8b7bba7570a616e\nparent 5bb50ddc833f8fd298c48b9ddaa8570435919a88\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659716673 +0530\ncommitter GitHub <noreply@github.com> 1659716673 +0530\n\nRollup merge of #100155 - compiler-errors:issue-100154, r=jackh726\n\nUse `node_type_opt` to skip over generics that were not expected\n\nFixes #100154\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/721af40dcbde949c7334295eccbbae2b120ab3e8", "html_url": "https://github.com/rust-lang/rust/commit/721af40dcbde949c7334295eccbbae2b120ab3e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/721af40dcbde949c7334295eccbbae2b120ab3e8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "html_url": "https://github.com/rust-lang/rust/commit/9e4feff46a92eedc61ee2d23a8b7bba7570a616e"}, {"sha": "5bb50ddc833f8fd298c48b9ddaa8570435919a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb50ddc833f8fd298c48b9ddaa8570435919a88", "html_url": "https://github.com/rust-lang/rust/commit/5bb50ddc833f8fd298c48b9ddaa8570435919a88"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "660e7e4e399317ddddf540beb1256eed3cc84a88", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/721af40dcbde949c7334295eccbbae2b120ab3e8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721af40dcbde949c7334295eccbbae2b120ab3e8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=721af40dcbde949c7334295eccbbae2b120ab3e8", "patch": "@@ -1761,13 +1761,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .filter_map(|seg| seg.args.as_ref())\n                             .flat_map(|a| a.args.iter())\n                         {\n-                            if let hir::GenericArg::Type(hir_ty) = &arg {\n-                                let ty = self.resolve_vars_if_possible(\n-                                    self.typeck_results.borrow().node_type(hir_ty.hir_id),\n-                                );\n-                                if ty == predicate.self_ty() {\n-                                    error.obligation.cause.span = hir_ty.span;\n-                                }\n+                            if let hir::GenericArg::Type(hir_ty) = &arg\n+                                && let Some(ty) =\n+                                    self.typeck_results.borrow().node_type_opt(hir_ty.hir_id)\n+                                && self.resolve_vars_if_possible(ty) == predicate.self_ty()\n+                            {\n+                                error.obligation.cause.span = hir_ty.span;\n+                                break;\n                             }\n                         }\n                     }"}, {"sha": "4446b4bc2fcf341435ba0e13e78f0beea0a4c3e4", "filename": "src/test/ui/argument-suggestions/issue-100154.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/721af40dcbde949c7334295eccbbae2b120ab3e8/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721af40dcbde949c7334295eccbbae2b120ab3e8/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.rs?ref=721af40dcbde949c7334295eccbbae2b120ab3e8", "patch": "@@ -0,0 +1,7 @@\n+fn foo(i: impl std::fmt::Display) {}\n+\n+fn main() {\n+    foo::<()>(());\n+    //~^ ERROR this function takes 0 generic arguments but 1 generic argument was supplied\n+    //~| ERROR `()` doesn't implement `std::fmt::Display`\n+}"}, {"sha": "1499229c3ced26cd2a974fbe686073f2e23ccc4f", "filename": "src/test/ui/argument-suggestions/issue-100154.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/721af40dcbde949c7334295eccbbae2b120ab3e8/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/721af40dcbde949c7334295eccbbae2b120ab3e8/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.stderr?ref=721af40dcbde949c7334295eccbbae2b120ab3e8", "patch": "@@ -0,0 +1,35 @@\n+error[E0107]: this function takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-100154.rs:4:5\n+   |\n+LL |     foo::<()>(());\n+   |     ^^^------ help: remove these generics\n+   |     |\n+   |     expected 0 generic arguments\n+   |\n+note: function defined here, with 0 generic parameters\n+  --> $DIR/issue-100154.rs:1:4\n+   |\n+LL | fn foo(i: impl std::fmt::Display) {}\n+   |    ^^^\n+   = note: `impl Trait` cannot be explicitly specified as a generic argument\n+\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/issue-100154.rs:4:15\n+   |\n+LL |     foo::<()>(());\n+   |     --------- ^^ `()` cannot be formatted with the default formatter\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+note: required by a bound in `foo`\n+  --> $DIR/issue-100154.rs:1:16\n+   |\n+LL | fn foo(i: impl std::fmt::Display) {}\n+   |                ^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0107, E0277.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "b1359ea586583be07c55190e2a5efb0a2c946cfe", "filename": "src/test/ui/transmutability/references.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/721af40dcbde949c7334295eccbbae2b120ab3e8/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/721af40dcbde949c7334295eccbbae2b120ab3e8/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr?ref=721af40dcbde949c7334295eccbbae2b120ab3e8", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n-  --> $DIR/references.rs:19:52\n+  --> $DIR/references.rs:19:37\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+   |                                     ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, true, true, true, true>` is not implemented for `&'static Unit`\n note: required by a bound in `is_maybe_transmutable`"}]}