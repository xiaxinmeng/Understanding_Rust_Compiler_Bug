{"sha": "b90277e37b0ef43b8a3755f027ae29c991172fd0", "node_id": "C_kwDOAAsO6NoAKGI5MDI3N2UzN2IwZWY0M2I4YTM3NTVmMDI3YWUyOWM5OTExNzJmZDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-10T18:59:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-10T18:59:17Z"}, "message": "Rollup merge of #106921 - madsmtm:cell-memory-layout, r=dtolnay\n\nAdd documentation about the memory layout of `Cell`\n\nhttps://github.com/rust-lang/rust/pull/101717 guaranteed the memory layout of `UnsafeCell<T>`.\n\nThis property (a guaranteed memory layout) can be useful to have on `Cell<T>` as well.\n\n(Note that `Cell<u8>` [already doesn't trigger the `improper_ctypes` lint](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=34af59ef60b96d8a8bdaec1d52cb5420) since it is `#[repr(transparent)]`).\n\nThe concrete use-case is for the crate [`objc2`](https://github.com/madsmtm/objc2) to specify that `Cell<T>` is safe to use as an instance variable when `T` is.\n\nFixes https://github.com/rust-lang/rust/issues/79303.\n\n---\n\nI'm unsure if we should specify less, for example say that the `Cell` may have extra restrictions on when it may be accessed, or if that's implicit in the (deliberately minimal) way I've worded it here?", "tree": {"sha": "d992eb66a8fa9fa192a0e0bfd409cc37d234f784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d992eb66a8fa9fa192a0e0bfd409cc37d234f784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b90277e37b0ef43b8a3755f027ae29c991172fd0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkC34FCRBK7hj4Ov3rIwAAf5sIAKHslWFY78w5/x5i7oUh479h\nkJFHsT/R26cANzWMkT4uegsH43IuBe8cL2KdxLc9vjpe8SOxp2U0MtkelJc1uk+k\nUBGI2Vu92SAzicaBxZfolikfXki/IwotqzYz+H7uzjtizwZzH31j01gsC0/h8AZZ\nDRXJcq36hAfOJhoWyBIfe7wzJOSruIvxyt0GH3VAy6gloZBAwYxLNlajgY/clC0p\nzyv9JtLWqmYWwZr9XmJfUwK6sBs+rpH+WazQ4/vEoBV6AFc6Vg2wg2RgSuu6iAx1\nB53Y/uykrtqlt0fpcq4oz7vVCiQm+8gFjpP1a6xNVY2HqvDLbj1fEnQJNRzMsKk=\n=4cFT\n-----END PGP SIGNATURE-----\n", "payload": "tree d992eb66a8fa9fa192a0e0bfd409cc37d234f784\nparent 35a0961bbc8fba75bb863c7835b39d431ad9fc5d\nparent 660d985d12bd66dde21490fefb31c9b7fb22a67e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678474757 +0100\ncommitter GitHub <noreply@github.com> 1678474757 +0100\n\nRollup merge of #106921 - madsmtm:cell-memory-layout, r=dtolnay\n\nAdd documentation about the memory layout of `Cell`\n\nhttps://github.com/rust-lang/rust/pull/101717 guaranteed the memory layout of `UnsafeCell<T>`.\n\nThis property (a guaranteed memory layout) can be useful to have on `Cell<T>` as well.\n\n(Note that `Cell<u8>` [already doesn't trigger the `improper_ctypes` lint](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=34af59ef60b96d8a8bdaec1d52cb5420) since it is `#[repr(transparent)]`).\n\nThe concrete use-case is for the crate [`objc2`](https://github.com/madsmtm/objc2) to specify that `Cell<T>` is safe to use as an instance variable when `T` is.\n\nFixes https://github.com/rust-lang/rust/issues/79303.\n\n---\n\nI'm unsure if we should specify less, for example say that the `Cell` may have extra restrictions on when it may be accessed, or if that's implicit in the (deliberately minimal) way I've worded it here?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b90277e37b0ef43b8a3755f027ae29c991172fd0", "html_url": "https://github.com/rust-lang/rust/commit/b90277e37b0ef43b8a3755f027ae29c991172fd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b90277e37b0ef43b8a3755f027ae29c991172fd0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "html_url": "https://github.com/rust-lang/rust/commit/35a0961bbc8fba75bb863c7835b39d431ad9fc5d"}, {"sha": "660d985d12bd66dde21490fefb31c9b7fb22a67e", "url": "https://api.github.com/repos/rust-lang/rust/commits/660d985d12bd66dde21490fefb31c9b7fb22a67e", "html_url": "https://github.com/rust-lang/rust/commit/660d985d12bd66dde21490fefb31c9b7fb22a67e"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "9d1720acf36637f2651ff55d86a0e6b7db22a8be", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b90277e37b0ef43b8a3755f027ae29c991172fd0/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90277e37b0ef43b8a3755f027ae29c991172fd0/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=b90277e37b0ef43b8a3755f027ae29c991172fd0", "patch": "@@ -209,6 +209,12 @@ pub use once::OnceCell;\n \n /// A mutable memory location.\n ///\n+/// # Memory layout\n+///\n+/// `Cell<T>` has the same [memory layout and caveats as\n+/// `UnsafeCell<T>`](UnsafeCell#memory-layout). In particular, this means that\n+/// `Cell<T>` has the same in-memory representation as its inner type `T`.\n+///\n /// # Examples\n ///\n /// In this example, you can see that `Cell<T>` enables mutation inside an"}]}