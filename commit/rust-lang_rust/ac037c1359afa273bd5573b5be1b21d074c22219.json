{"sha": "ac037c1359afa273bd5573b5be1b21d074c22219", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMDM3YzEzNTlhZmEyNzNiZDU1NzNiNWJlMWIyMWQwNzRjMjIyMTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-11T01:07:52Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-11T01:07:52Z"}, "message": "Recover from missing semicolon based on the found token\n\nWhen encountering one of a few keywords when a semicolon was\nexpected, suggest the semicolon and recover:\n\n```\nerror: expected one of `.`, `;`, `?`, or an operator, found `let`\n  --> $DIR/recover-missing-semi.rs:4:5\n   |\nLL |     let _: usize = ()\n   |                      - help: missing semicolon here\nLL |\nLL |     let _ = 3;\n   |     ^^^\n\nerror[E0308]: mismatched types\n  --> $DIR/recover-missing-semi.rs:2:20\n   |\nLL |     let _: usize = ()\n   |                    ^^ expected usize, found ()\n   |\n   = note: expected type `usize`\n              found type `()`\n```", "tree": {"sha": "2cd4bb9f7a53c7319460120481965fcad43ef7bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd4bb9f7a53c7319460120481965fcad43ef7bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac037c1359afa273bd5573b5be1b21d074c22219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac037c1359afa273bd5573b5be1b21d074c22219", "html_url": "https://github.com/rust-lang/rust/commit/ac037c1359afa273bd5573b5be1b21d074c22219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac037c1359afa273bd5573b5be1b21d074c22219/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d700f1b7bc9c53fa0d11567adb1ed2c1c27e79", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d700f1b7bc9c53fa0d11567adb1ed2c1c27e79", "html_url": "https://github.com/rust-lang/rust/commit/96d700f1b7bc9c53fa0d11567adb1ed2c1c27e79"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "d2875a5f27551e35ebbf18b849de09e9c3e0dda9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ac037c1359afa273bd5573b5be1b21d074c22219/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac037c1359afa273bd5573b5be1b21d074c22219/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ac037c1359afa273bd5573b5be1b21d074c22219", "patch": "@@ -796,6 +796,10 @@ impl<'a> Parser<'a> {\n                 .chain(inedible.iter().map(|x| TokenType::Token(x.clone())))\n                 .chain(self.expected_tokens.iter().cloned())\n                 .collect::<Vec<_>>();\n+            let expects_semi = expected.iter().any(|t| match t {\n+                TokenType::Token(token::Semi) => true,\n+                _ => false,\n+            });\n             expected.sort_by_cached_key(|x| x.to_string());\n             expected.dedup();\n             let expect = tokens_to_string(&expected[..]);\n@@ -835,6 +839,17 @@ impl<'a> Parser<'a> {\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n+            let is_semi_suggestable = expects_semi && (\n+                self.token.is_keyword(keywords::Break) ||\n+                self.token.is_keyword(keywords::Continue) ||\n+                self.token.is_keyword(keywords::For) ||\n+                self.token.is_keyword(keywords::If) ||\n+                self.token.is_keyword(keywords::Let) ||\n+                self.token.is_keyword(keywords::Loop) ||\n+                self.token.is_keyword(keywords::Match) ||\n+                self.token.is_keyword(keywords::Return) ||\n+                self.token.is_keyword(keywords::While)\n+            );\n             let sp = if self.token == token::Token::Eof {\n                 // This is EOF, don't want to point at the following char, but rather the last token\n                 self.prev_span\n@@ -853,6 +868,18 @@ impl<'a> Parser<'a> {\n \n             let cm = self.sess.source_map();\n             match (cm.lookup_line(self.span.lo()), cm.lookup_line(sp.lo())) {\n+                (Ok(ref a), Ok(ref b)) if a.line != b.line && is_semi_suggestable => {\n+                    // The spans are in different lines, expected `;` and found `let` or `return`.\n+                    // High likelihood that it is only a missing `;`.\n+                    err.span_suggestion_short(\n+                        label_sp,\n+                        \"missing semicolon here\",\n+                        \";\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    err.emit();\n+                    return Ok(true);\n+                }\n                 (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n                     // When the spans are in the same line, it means that the only content between\n                     // them is whitespace, point at the found token in that case:"}, {"sha": "1893dc716bedc97116b15142663b65177193a5bb", "filename": "src/test/ui/parser/recover-missing-semi.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac037c1359afa273bd5573b5be1b21d074c22219/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac037c1359afa273bd5573b5be1b21d074c22219/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs?ref=ac037c1359afa273bd5573b5be1b21d074c22219", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    let _: usize = ()\n+    //~^ ERROR mismatched types\n+    let _ = 3;\n+    //~^ ERROR expected one of\n+}\n+\n+fn foo() -> usize {\n+    let _: usize = ()\n+    //~^ ERROR mismatched types\n+    return 3;\n+    //~^ ERROR expected one of\n+}"}, {"sha": "25ce408d8b25af15d690e577f98ab8719c3bc09b", "filename": "src/test/ui/parser/recover-missing-semi.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ac037c1359afa273bd5573b5be1b21d074c22219/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac037c1359afa273bd5573b5be1b21d074c22219/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr?ref=ac037c1359afa273bd5573b5be1b21d074c22219", "patch": "@@ -0,0 +1,39 @@\n+error: expected one of `.`, `;`, `?`, or an operator, found `let`\n+  --> $DIR/recover-missing-semi.rs:4:5\n+   |\n+LL |     let _: usize = ()\n+   |                      - help: missing semicolon here\n+LL |\n+LL |     let _ = 3;\n+   |     ^^^\n+\n+error: expected one of `.`, `;`, `?`, or an operator, found `return`\n+  --> $DIR/recover-missing-semi.rs:11:5\n+   |\n+LL |     let _: usize = ()\n+   |                      - help: missing semicolon here\n+LL |\n+LL |     return 3;\n+   |     ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-missing-semi.rs:2:20\n+   |\n+LL |     let _: usize = ()\n+   |                    ^^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-missing-semi.rs:9:20\n+   |\n+LL |     let _: usize = ()\n+   |                    ^^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}