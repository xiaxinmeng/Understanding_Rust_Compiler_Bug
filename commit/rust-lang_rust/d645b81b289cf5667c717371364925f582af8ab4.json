{"sha": "d645b81b289cf5667c717371364925f582af8ab4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NDViODFiMjg5Y2Y1NjY3YzcxNzM3MTM2NDkyNWY1ODJhZjhhYjQ=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-06T22:03:55Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-06T22:28:54Z"}, "message": "generate_function assist infer return type", "tree": {"sha": "5abde94e4711afadc45dcc0e6891e105c484f568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5abde94e4711afadc45dcc0e6891e105c484f568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d645b81b289cf5667c717371364925f582af8ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d645b81b289cf5667c717371364925f582af8ab4", "html_url": "https://github.com/rust-lang/rust/commit/d645b81b289cf5667c717371364925f582af8ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d645b81b289cf5667c717371364925f582af8ab4/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b8fb7c572eb658ee1136f086d6348aafba1e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b8fb7c572eb658ee1136f086d6348aafba1e1d", "html_url": "https://github.com/rust-lang/rust/commit/71b8fb7c572eb658ee1136f086d6348aafba1e1d"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "fd4f2fbed8f095c6d10611cecb88ffb575fa5232", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d645b81b289cf5667c717371364925f582af8ab4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d645b81b289cf5667c717371364925f582af8ab4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=d645b81b289cf5667c717371364925f582af8ab4", "patch": "@@ -104,6 +104,7 @@ struct FunctionBuilder {\n     fn_name: ast::Name,\n     type_params: Option<ast::GenericParamList>,\n     params: ast::ParamList,\n+    ret_type: Option<ast::RetType>,\n     file: FileId,\n     needs_pub: bool,\n }\n@@ -131,8 +132,9 @@ impl FunctionBuilder {\n         let target_module = target_module.or_else(|| ctx.sema.scope(target.syntax()).module())?;\n         let fn_name = fn_name(&path)?;\n         let (type_params, params) = fn_args(ctx, target_module, &call)?;\n+        let ret_type = fn_ret_type(ctx, target_module, &call);\n \n-        Some(Self { target, fn_name, type_params, params, file, needs_pub })\n+        Some(Self { target, fn_name, type_params, params, ret_type, file, needs_pub })\n     }\n \n     fn render(self) -> FunctionTemplate {\n@@ -145,7 +147,7 @@ impl FunctionBuilder {\n             self.type_params,\n             self.params,\n             fn_body,\n-            Some(make::ret_type(make::ty_unit())),\n+            Some(self.ret_type.unwrap_or_else(|| make::ret_type(make::ty_unit()))),\n         );\n         let leading_ws;\n         let trailing_ws;\n@@ -223,6 +225,23 @@ fn fn_args(\n     Some((None, make::param_list(None, params)))\n }\n \n+fn fn_ret_type(\n+    ctx: &AssistContext,\n+    target_module: hir::Module,\n+    call: &ast::CallExpr,\n+) -> Option<ast::RetType> {\n+    let ty = ctx.sema.type_of_expr(&ast::Expr::CallExpr(call.clone()))?;\n+    if ty.is_unknown() {\n+        return None;\n+    }\n+\n+    if let Ok(rendered) = ty.display_source_code(ctx.db(), target_module.into()) {\n+        Some(make::ret_type(make::ty(&rendered)))\n+    } else {\n+        None\n+    }\n+}\n+\n /// Makes duplicate argument names unique by appending incrementing numbers.\n ///\n /// ```\n@@ -546,7 +565,7 @@ impl Baz {\n     }\n }\n \n-fn bar(baz: Baz) ${0:-> ()} {\n+fn bar(baz: Baz) ${0:-> Baz} {\n     todo!()\n }\n \",\n@@ -1059,6 +1078,27 @@ pub(crate) fn bar() ${0:-> ()} {\n         )\n     }\n \n+    #[test]\n+    fn add_function_with_return_type() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+fn main() {\n+    let x: u32 = foo$0();\n+}\n+\",\n+            r\"\n+fn main() {\n+    let x: u32 = foo();\n+}\n+\n+fn foo() ${0:-> u32} {\n+    todo!()\n+}\n+\",\n+        )\n+    }\n+\n     #[test]\n     fn add_function_not_applicable_if_function_already_exists() {\n         check_assist_not_applicable("}]}