{"sha": "c6ad61a1bd2d82f4ac8f7e3c069caa1c2f52c1b4", "node_id": "C_kwDOAAsO6NoAKGM2YWQ2MWExYmQyZDgyZjRhYzhmN2UzYzA2OWNhYTFjMmY1MmMxYjQ", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-09T23:19:18Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-20T23:58:23Z"}, "message": "Delete Decoder::read_map", "tree": {"sha": "a72193ba41b71d55dba3f9ee6460b0ecb843098b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a72193ba41b71d55dba3f9ee6460b0ecb843098b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ad61a1bd2d82f4ac8f7e3c069caa1c2f52c1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ad61a1bd2d82f4ac8f7e3c069caa1c2f52c1b4", "html_url": "https://github.com/rust-lang/rust/commit/c6ad61a1bd2d82f4ac8f7e3c069caa1c2f52c1b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ad61a1bd2d82f4ac8f7e3c069caa1c2f52c1b4/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42904b02191a6ee34373d04cf439a89badfae508", "url": "https://api.github.com/repos/rust-lang/rust/commits/42904b02191a6ee34373d04cf439a89badfae508", "html_url": "https://github.com/rust-lang/rust/commit/42904b02191a6ee34373d04cf439a89badfae508"}], "stats": {"total": 63, "additions": 26, "deletions": 37}, "files": [{"sha": "dee6dc010feef8046769ec2f4b1b7fca54cf23cf", "filename": "compiler/rustc_serialize/src/collection_impls.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c6ad61a1bd2d82f4ac8f7e3c069caa1c2f52c1b4/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ad61a1bd2d82f4ac8f7e3c069caa1c2f52c1b4/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs?ref=c6ad61a1bd2d82f4ac8f7e3c069caa1c2f52c1b4", "patch": "@@ -81,15 +81,14 @@ where\n     V: Decodable<D>,\n {\n     fn decode(d: &mut D) -> BTreeMap<K, V> {\n-        d.read_map(|d, len| {\n-            let mut map = BTreeMap::new();\n-            for _ in 0..len {\n-                let key = Decodable::decode(d);\n-                let val = Decodable::decode(d);\n-                map.insert(key, val);\n-            }\n-            map\n-        })\n+        let len = d.read_usize();\n+        let mut map = BTreeMap::new();\n+        for _ in 0..len {\n+            let key = Decodable::decode(d);\n+            let val = Decodable::decode(d);\n+            map.insert(key, val);\n+        }\n+        map\n     }\n }\n \n@@ -145,16 +144,15 @@ where\n     S: BuildHasher + Default,\n {\n     fn decode(d: &mut D) -> HashMap<K, V, S> {\n-        d.read_map(|d, len| {\n-            let state = Default::default();\n-            let mut map = HashMap::with_capacity_and_hasher(len, state);\n-            for _ in 0..len {\n-                let key = Decodable::decode(d);\n-                let val = Decodable::decode(d);\n-                map.insert(key, val);\n-            }\n-            map\n-        })\n+        let len = d.read_usize();\n+        let state = Default::default();\n+        let mut map = HashMap::with_capacity_and_hasher(len, state);\n+        for _ in 0..len {\n+            let key = Decodable::decode(d);\n+            let val = Decodable::decode(d);\n+            map.insert(key, val);\n+        }\n+        map\n     }\n }\n \n@@ -223,16 +221,15 @@ where\n     S: BuildHasher + Default,\n {\n     fn decode(d: &mut D) -> indexmap::IndexMap<K, V, S> {\n-        d.read_map(|d, len| {\n-            let state = Default::default();\n-            let mut map = indexmap::IndexMap::with_capacity_and_hasher(len, state);\n-            for _ in 0..len {\n-                let key = Decodable::decode(d);\n-                let val = Decodable::decode(d);\n-                map.insert(key, val);\n-            }\n-            map\n-        })\n+        let len = d.read_usize();\n+        let state = Default::default();\n+        let mut map = indexmap::IndexMap::with_capacity_and_hasher(len, state);\n+        for _ in 0..len {\n+            let key = Decodable::decode(d);\n+            let val = Decodable::decode(d);\n+            map.insert(key, val);\n+        }\n+        map\n     }\n }\n "}, {"sha": "a012be2857e1eb802aa1a7e0d004617663c6df6b", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6ad61a1bd2d82f4ac8f7e3c069caa1c2f52c1b4/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ad61a1bd2d82f4ac8f7e3c069caa1c2f52c1b4/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=c6ad61a1bd2d82f4ac8f7e3c069caa1c2f52c1b4", "patch": "@@ -200,14 +200,6 @@ pub trait Decoder {\n     fn read_char(&mut self) -> char;\n     fn read_str(&mut self) -> Cow<'_, str>;\n     fn read_raw_bytes_into(&mut self, s: &mut [u8]);\n-\n-    fn read_map<T, F>(&mut self, f: F) -> T\n-    where\n-        F: FnOnce(&mut Self, usize) -> T,\n-    {\n-        let len = self.read_usize();\n-        f(self, len)\n-    }\n }\n \n /// Trait for types that can be serialized"}]}