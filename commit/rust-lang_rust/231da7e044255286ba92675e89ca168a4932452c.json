{"sha": "231da7e044255286ba92675e89ca168a4932452c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMWRhN2UwNDQyNTUyODZiYTkyNjc1ZTg5Y2ExNjhhNDkzMjQ1MmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T06:16:04Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T10:50:44Z"}, "message": "extract ban_pat_range_if_ambiguous", "tree": {"sha": "872c7b8802778c4235b29f9ff8c7eb738a25af9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/872c7b8802778c4235b29f9ff8c7eb738a25af9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/231da7e044255286ba92675e89ca168a4932452c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/231da7e044255286ba92675e89ca168a4932452c", "html_url": "https://github.com/rust-lang/rust/commit/231da7e044255286ba92675e89ca168a4932452c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/231da7e044255286ba92675e89ca168a4932452c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b651330e0ff4090f18fc834486a8f0a9aa62748", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b651330e0ff4090f18fc834486a8f0a9aa62748", "html_url": "https://github.com/rust-lang/rust/commit/3b651330e0ff4090f18fc834486a8f0a9aa62748"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "7c7dad1fd94b8023b9bd321627e0b53b83900e29", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/231da7e044255286ba92675e89ca168a4932452c/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231da7e044255286ba92675e89ca168a4932452c/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=231da7e044255286ba92675e89ca168a4932452c", "patch": "@@ -270,31 +270,36 @@ impl<'a> Parser<'a> {\n         let pat = self.maybe_recover_from_bad_qpath(pat, true)?;\n \n         if !allow_range_pat {\n-            match pat.node {\n-                PatKind::Range(\n-                    _, _, Spanned { node: RangeEnd::Included(RangeSyntax::DotDotDot), .. }\n-                ) => {},\n-                PatKind::Range(..) => {\n-                    let mut err = self.struct_span_err(\n-                        pat.span,\n-                        \"the range pattern here has ambiguous interpretation\",\n-                    );\n-                    err.span_suggestion(\n-                        pat.span,\n-                        \"add parentheses to clarify the precedence\",\n-                        format!(\"({})\", pprust::pat_to_string(&pat)),\n-                        // \"ambiguous interpretation\" implies that we have to be guessing\n-                        Applicability::MaybeIncorrect\n-                    );\n-                    return Err(err);\n-                }\n-                _ => {}\n-            }\n+            self.ban_pat_range_if_ambiguous(&pat)?\n         }\n \n         Ok(pat)\n     }\n \n+    /// Ban a range pattern if it has an ambiguous interpretation.\n+    fn ban_pat_range_if_ambiguous(&self, pat: &Pat) -> PResult<'a, ()> {\n+        match pat.node {\n+            PatKind::Range(\n+                .., Spanned { node: RangeEnd::Included(RangeSyntax::DotDotDot), .. }\n+            ) => return Ok(()),\n+            PatKind::Range(..) => {}\n+            _ => return Ok(()),\n+        }\n+\n+        let mut err = self.struct_span_err(\n+            pat.span,\n+            \"the range pattern here has ambiguous interpretation\",\n+        );\n+        err.span_suggestion(\n+            pat.span,\n+            \"add parentheses to clarify the precedence\",\n+            format!(\"({})\", pprust::pat_to_string(&pat)),\n+            // \"ambiguous interpretation\" implies that we have to be guessing\n+            Applicability::MaybeIncorrect\n+        );\n+        Err(err)\n+    }\n+\n     /// Parse `&pat` / `&mut pat`.\n     fn parse_pat_deref(&mut self, expected: Option<&'static str>) -> PResult<'a, PatKind> {\n         self.expect_and()?;"}]}