{"sha": "2cda75c48f48022690f142b63969660b12536cee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZGE3NWM0OGY0ODAyMjY5MGYxNDJiNjM5Njk2NjBiMTI1MzZjZWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-16T16:57:10Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-24T17:51:33Z"}, "message": "rustc_metadata: Remove unnecessary use of crate store in plugin loader", "tree": {"sha": "de941ef180ed8cb45e3670fc4dcb4dadb4c5ae4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de941ef180ed8cb45e3670fc4dcb4dadb4c5ae4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cda75c48f48022690f142b63969660b12536cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cda75c48f48022690f142b63969660b12536cee", "html_url": "https://github.com/rust-lang/rust/commit/2cda75c48f48022690f142b63969660b12536cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cda75c48f48022690f142b63969660b12536cee/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c16f8449090349c3907b15402d36ff190135c99", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c16f8449090349c3907b15402d36ff190135c99", "html_url": "https://github.com/rust-lang/rust/commit/2c16f8449090349c3907b15402d36ff190135c99"}], "stats": {"total": 124, "additions": 41, "deletions": 83}, "files": [{"sha": "77570bc0463036b4db3abfcd3a7b6accbeda13bb", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2cda75c48f48022690f142b63969660b12536cee/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cda75c48f48022690f142b63969660b12536cee/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=2cda75c48f48022690f142b63969660b12536cee", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::lowering::lower_crate;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::lint;\n use rustc::middle::{self, reachable, resolve_lifetime, stability};\n-use rustc::middle::cstore::CrateStore;\n+use rustc::middle::cstore::{CrateStore, MetadataLoader};\n use rustc::ty::{self, AllArenas, Resolutions, TyCtxt, GlobalCtxt};\n use rustc::ty::steal::Steal;\n use rustc::traits;\n@@ -226,7 +226,7 @@ pub struct PluginInfo {\n \n pub fn register_plugins<'a>(\n     sess: &'a Session,\n-    cstore: &'a CStore,\n+    metadata_loader: &'a dyn MetadataLoader,\n     register_lints: impl Fn(&Session, &mut lint::LintStore),\n     mut krate: ast::Crate,\n     crate_name: &str,\n@@ -274,9 +274,8 @@ pub fn register_plugins<'a>(\n     let registrars = time(sess, \"plugin loading\", || {\n         plugin::load::load_plugins(\n             sess,\n-            &cstore,\n+            metadata_loader,\n             &krate,\n-            crate_name,\n             Some(sess.opts.debugging_opts.extra_plugins.clone()),\n         )\n     });"}, {"sha": "847d21b051251b41ac655e39cafb9c536490a577", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cda75c48f48022690f142b63969660b12536cee/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cda75c48f48022690f142b63969660b12536cee/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=2cda75c48f48022690f142b63969660b12536cee", "patch": "@@ -118,7 +118,7 @@ impl Compiler {\n             let empty: &(dyn Fn(&Session, &mut lint::LintStore) + Sync + Send) = &|_, _| {};\n             let result = passes::register_plugins(\n                 self.session(),\n-                self.cstore(),\n+                &*self.codegen_backend().metadata_loader(),\n                 self.register_lints\n                     .as_ref()\n                     .map(|p| &**p)"}, {"sha": "fbd1877dc88acc185839aed6459a9f6adc569e29", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 31, "deletions": 63, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/2cda75c48f48022690f142b63969660b12536cee/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cda75c48f48022690f142b63969660b12536cee/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=2cda75c48f48022690f142b63969660b12536cee", "patch": "@@ -14,13 +14,12 @@ use rustc::session::{Session, CrateDisambiguator};\n use rustc::session::config::{Sanitizer, self};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc::session::search_paths::PathKind;\n-use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource};\n+use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoader};\n use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::map::Definitions;\n use rustc::hir::def_id::LOCAL_CRATE;\n \n-use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::{cmp, fs};\n \n@@ -58,29 +57,6 @@ fn dump_crates(cstore: &CStore) {\n     });\n }\n \n-// Extra info about a crate loaded for plugins or exported macros.\n-struct ExtensionCrate {\n-    metadata: PMDSource,\n-    dylib: Option<PathBuf>,\n-    target_only: bool,\n-}\n-\n-enum PMDSource {\n-    Registered(Lrc<cstore::CrateMetadata>),\n-    Owned(Library),\n-}\n-\n-impl Deref for PMDSource {\n-    type Target = MetadataBlob;\n-\n-    fn deref(&self) -> &MetadataBlob {\n-        match *self {\n-            PMDSource::Registered(ref cmd) => &cmd.blob,\n-            PMDSource::Owned(ref lib) => &lib.metadata\n-        }\n-    }\n-}\n-\n enum LoadResult {\n     Previous(CrateNum),\n     Loaded(Library),\n@@ -495,21 +471,27 @@ impl<'a> CrateLoader<'a> {\n             self.resolve_crate(dep.name, span, dep_kind, Some((root, &dep))).0\n         })).collect()\n     }\n+}\n \n-    fn read_extension_crate(&self, name: Symbol, span: Span) -> ExtensionCrate {\n+    fn read_extension_crate(\n+        sess: &Session,\n+        metadata_loader: &dyn MetadataLoader,\n+        name: Symbol,\n+        span: Span,\n+    ) -> (Library, bool) {\n         info!(\"read extension crate `{}`\", name);\n-        let target_triple = self.sess.opts.target_triple.clone();\n+        let target_triple = sess.opts.target_triple.clone();\n         let host_triple = TargetTriple::from_triple(config::host_triple());\n         let is_cross = target_triple != host_triple;\n         let mut target_only = false;\n         let mut locate_ctxt = locator::Context {\n-            sess: self.sess,\n+            sess,\n             span,\n             crate_name: name,\n             hash: None,\n             extra_filename: None,\n-            filesearch: self.sess.host_filesearch(PathKind::Crate),\n-            target: &self.sess.host,\n+            filesearch: sess.host_filesearch(PathKind::Crate),\n+            target: &sess.host,\n             triple: host_triple,\n             root: None,\n             rejected_via_hash: vec![],\n@@ -519,46 +501,32 @@ impl<'a> CrateLoader<'a> {\n             rejected_via_filename: vec![],\n             should_match_name: true,\n             is_proc_macro: None,\n-            metadata_loader: &*self.cstore.metadata_loader,\n+            metadata_loader,\n         };\n-        let library = self.load(&mut locate_ctxt).or_else(|| {\n+\n+        let library = locate_ctxt.maybe_load_library_crate().or_else(|| {\n             if !is_cross {\n                 return None\n             }\n             // Try loading from target crates. This will abort later if we\n             // try to load a plugin registrar function,\n             target_only = true;\n \n-            locate_ctxt.target = &self.sess.target.target;\n+            locate_ctxt.target = &sess.target.target;\n             locate_ctxt.triple = target_triple;\n-            locate_ctxt.filesearch = self.sess.target_filesearch(PathKind::Crate);\n+            locate_ctxt.filesearch = sess.target_filesearch(PathKind::Crate);\n \n-            self.load(&mut locate_ctxt)\n+            locate_ctxt.maybe_load_library_crate()\n         });\n         let library = match library {\n             Some(l) => l,\n             None => locate_ctxt.report_errs(),\n         };\n \n-        let (dylib, metadata) = match library {\n-            LoadResult::Previous(cnum) => {\n-                let data = self.cstore.get_crate_data(cnum);\n-                (data.source.dylib.clone(), PMDSource::Registered(data))\n-            }\n-            LoadResult::Loaded(library) => {\n-                let dylib = library.source.dylib.clone();\n-                let metadata = PMDSource::Owned(library);\n-                (dylib, metadata)\n-            }\n-        };\n-\n-        ExtensionCrate {\n-            metadata,\n-            dylib: dylib.map(|p| p.0),\n-            target_only,\n-        }\n+        (library, target_only)\n     }\n \n+impl<'a> CrateLoader<'a> {\n     fn dlsym_proc_macros(&self,\n                          path: &Path,\n                          disambiguator: CrateDisambiguator,\n@@ -589,32 +557,33 @@ impl<'a> CrateLoader<'a> {\n \n         decls\n     }\n+}\n \n     /// Look for a plugin registrar. Returns library path, crate\n     /// SVH and DefIndex of the registrar function.\n-    pub fn find_plugin_registrar(&self,\n+    pub fn find_plugin_registrar(sess: &Session,\n+                                 metadata_loader: &dyn MetadataLoader,\n                                  span: Span,\n                                  name: Symbol)\n                                  -> Option<(PathBuf, CrateDisambiguator)> {\n-        let ekrate = self.read_extension_crate(name, span);\n+        let (library, target_only) = read_extension_crate(sess, metadata_loader, name, span);\n \n-        if ekrate.target_only {\n+        if target_only {\n             // Need to abort before syntax expansion.\n             let message = format!(\"plugin `{}` is not available for triple `{}` \\\n                                    (only found {})\",\n                                   name,\n                                   config::host_triple(),\n-                                  self.sess.opts.target_triple);\n-            span_fatal!(self.sess, span, E0456, \"{}\", &message);\n+                                  sess.opts.target_triple);\n+            span_fatal!(sess, span, E0456, \"{}\", &message);\n         }\n \n-        let root = ekrate.metadata.get_root();\n-        match ekrate.dylib.as_ref() {\n+        match library.source.dylib {\n             Some(dylib) => {\n-                Some((dylib.to_path_buf(), root.disambiguator))\n+                Some((dylib.0, library.metadata.get_root().disambiguator))\n             }\n             None => {\n-                span_err!(self.sess, span, E0457,\n+                span_err!(sess, span, E0457,\n                           \"plugin `{}` only found in rlib format, but must be available \\\n                            in dylib format\",\n                           name);\n@@ -625,6 +594,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n+impl<'a> CrateLoader<'a> {\n     fn inject_panic_runtime(&self, krate: &ast::Crate) {\n         // If we're only compiling an rlib, then there's no need to select a\n         // panic runtime, so we just skip this section entirely.\n@@ -957,9 +927,7 @@ impl<'a> CrateLoader<'a> {\n             data.dependencies.borrow_mut().push(krate);\n         });\n     }\n-}\n \n-impl<'a> CrateLoader<'a> {\n     pub fn postprocess(&self, krate: &ast::Crate) {\n         self.inject_sanitizer_runtime();\n         self.inject_profiler_runtime();"}, {"sha": "dd0dbf62c7361cd22086cf0ecb52ee09a2e3d0b5", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2cda75c48f48022690f142b63969660b12536cee/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cda75c48f48022690f142b63969660b12536cee/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=2cda75c48f48022690f142b63969660b12536cee", "patch": "@@ -1,8 +1,8 @@\n //! Used by `rustc` when loading a plugin.\n \n+use rustc::middle::cstore::MetadataLoader;\n use rustc::session::Session;\n-use rustc_metadata::creader::CrateLoader;\n-use rustc_metadata::cstore::CStore;\n+use rustc_metadata::creader;\n use crate::registry::Registry;\n \n use std::borrow::ToOwned;\n@@ -25,7 +25,7 @@ pub struct PluginRegistrar {\n \n struct PluginLoader<'a> {\n     sess: &'a Session,\n-    reader: CrateLoader<'a>,\n+    metadata_loader: &'a dyn MetadataLoader,\n     plugins: Vec<PluginRegistrar>,\n }\n \n@@ -37,11 +37,10 @@ fn call_malformed_plugin_attribute(sess: &Session, span: Span) {\n \n /// Read plugin metadata and dynamically load registrar functions.\n pub fn load_plugins(sess: &Session,\n-                    cstore: &CStore,\n+                    metadata_loader: &dyn MetadataLoader,\n                     krate: &ast::Crate,\n-                    crate_name: &str,\n                     addl_plugins: Option<Vec<String>>) -> Vec<PluginRegistrar> {\n-    let mut loader = PluginLoader::new(sess, cstore, crate_name);\n+    let mut loader = PluginLoader { sess, metadata_loader, plugins: Vec::new() };\n \n     // do not report any error now. since crate attributes are\n     // not touched by expansion, every use of plugin without\n@@ -80,16 +79,8 @@ pub fn load_plugins(sess: &Session,\n }\n \n impl<'a> PluginLoader<'a> {\n-    fn new(sess: &'a Session, cstore: &'a CStore, crate_name: &str) -> Self {\n-        PluginLoader {\n-            sess,\n-            reader: CrateLoader::new(sess, cstore, crate_name),\n-            plugins: vec![],\n-        }\n-    }\n-\n     fn load_plugin(&mut self, span: Span, name: Symbol, args: Vec<ast::NestedMetaItem>) {\n-        let registrar = self.reader.find_plugin_registrar(span, name);\n+        let registrar = creader::find_plugin_registrar(self.sess, self.metadata_loader, span, name);\n \n         if let Some((lib, disambiguator)) = registrar {\n             let symbol = self.sess.generate_plugin_registrar_symbol(disambiguator);"}]}