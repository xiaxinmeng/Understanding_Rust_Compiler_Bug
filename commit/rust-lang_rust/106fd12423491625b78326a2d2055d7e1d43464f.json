{"sha": "106fd12423491625b78326a2d2055d7e1d43464f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNmZkMTI0MjM0OTE2MjViNzgzMjZhMmQyMDU1ZDdlMWQ0MzQ2NGY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-25T07:59:42Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-25T07:59:42Z"}, "message": "rt: pull upstream ISAAC code for consistency between 32/64 bit platforms\n\nThe \"unsigned 4 byte\" `ub4`s are actually 8 bytes on 64-bit platforms\nwhich mean that some bits > 2**32 were retained in calculations, these\nwould then \"reappear\" after a shift and so the stream of random numbers\nwould differ on 32 bit vs 64 bit platforms.", "tree": {"sha": "60c4d6fa97f8919df3fe18de9037f6f6bd5d3cc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60c4d6fa97f8919df3fe18de9037f6f6bd5d3cc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/106fd12423491625b78326a2d2055d7e1d43464f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/106fd12423491625b78326a2d2055d7e1d43464f", "html_url": "https://github.com/rust-lang/rust/commit/106fd12423491625b78326a2d2055d7e1d43464f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/106fd12423491625b78326a2d2055d7e1d43464f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a784997750927ee2bdde3abe0928047e6441283f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a784997750927ee2bdde3abe0928047e6441283f", "html_url": "https://github.com/rust-lang/rust/commit/a784997750927ee2bdde3abe0928047e6441283f"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "a2928a9b5d08e66998136f9d6a51f4808fa6b884", "filename": "src/rt/isaac/randport.cpp", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/106fd12423491625b78326a2d2055d7e1d43464f/src%2Frt%2Fisaac%2Frandport.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/106fd12423491625b78326a2d2055d7e1d43464f/src%2Frt%2Fisaac%2Frandport.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fisaac%2Frandport.cpp?ref=106fd12423491625b78326a2d2055d7e1d43464f", "patch": "@@ -6,6 +6,7 @@ rand.c: By Bob Jenkins.  My random number generator, ISAAC.  Public Domain\n   970719: use context, not global variables, for internal state\n   980324: make a portable version\n   010626: Note this is public domain\n+  100725: Mask on use of >32 bits, not on assignment: from Paul Eggert\n ------------------------------------------------------------------------------\n */\n #ifndef STANDARD\n@@ -27,37 +28,37 @@ rand.c: By Bob Jenkins.  My random number generator, ISAAC.  Public Domain\n \n void     isaac(randctx *ctx)\n {\n-   register ub4 a,b,x,y,*m,*mm,*m2,*r,*mend;\n+   ub4 a,b,x,y,*m,*mm,*m2,*r,*mend;\n    mm=ctx->randmem; r=ctx->randrsl;\n-   a = ctx->randa; b = (ctx->randb + (++ctx->randc)) & 0xffffffff;\n+   a = ctx->randa; b = ctx->randb + (++ctx->randc);\n    for (m = mm, mend = m2 = m+(RANDSIZ/2); m<mend; )\n    {\n       rngstep( a<<13, a, b, mm, m, m2, r, x);\n-      rngstep( a>>6 , a, b, mm, m, m2, r, x);\n+      rngstep( (a & 0xffffffff) >>6 , a, b, mm, m, m2, r, x);\n       rngstep( a<<2 , a, b, mm, m, m2, r, x);\n-      rngstep( a>>16, a, b, mm, m, m2, r, x);\n+      rngstep( (a & 0xffffffff) >>16, a, b, mm, m, m2, r, x);\n    }\n    for (m2 = mm; m2<mend; )\n    {\n       rngstep( a<<13, a, b, mm, m, m2, r, x);\n-      rngstep( a>>6 , a, b, mm, m, m2, r, x);\n+      rngstep( (a & 0xffffffff) >>6 , a, b, mm, m, m2, r, x);\n       rngstep( a<<2 , a, b, mm, m, m2, r, x);\n-      rngstep( a>>16, a, b, mm, m, m2, r, x);\n+      rngstep( (a & 0xffffffff) >>16, a, b, mm, m, m2, r, x);\n    }\n    ctx->randb = b; ctx->randa = a;\n }\n \n \n #define mix(a,b,c,d,e,f,g,h) \\\n { \\\n-   a^=b<<11; d+=a; b+=c; \\\n-   b^=c>>2;  e+=b; c+=d; \\\n-   c^=d<<8;  f+=c; d+=e; \\\n-   d^=e>>16; g+=d; e+=f; \\\n-   e^=f<<10; h+=e; f+=g; \\\n-   f^=g>>4;  a+=f; g+=h; \\\n-   g^=h<<8;  b+=g; h+=a; \\\n-   h^=a>>9;  c+=h; a+=b; \\\n+   a^=b<<11;              d+=a; b+=c; \\\n+   b^=(c&0xffffffff)>>2;  e+=b; c+=d; \\\n+   c^=d<<8;               f+=c; d+=e; \\\n+   d^=(e&0xffffffff)>>16; g+=d; e+=f; \\\n+   e^=f<<10;              h+=e; f+=g; \\\n+   f^=(g&0xffffffff)>>4;  a+=f; g+=h; \\\n+   g^=h<<8;               b+=g; h+=a; \\\n+   h^=(a&0xffffffff)>>9;  c+=h; a+=b; \\\n }\n \n /* if (flag==TRUE), then use the contents of randrsl[] to initialize mm[]. */\n@@ -81,17 +82,21 @@ void randinit(randctx *ctx, word flag)\n      /* initialize using the contents of r[] as the seed */\n      for (i=0; i<RANDSIZ; i+=8)\n      {\n-       a+=r[i  ]; b+=r[i+1]; c+=r[i+2]; d+=r[i+3];\n-       e+=r[i+4]; f+=r[i+5]; g+=r[i+6]; h+=r[i+7];\n+       a+=r[i  ]; b+=r[i+1];\n+       c+=r[i+2]; d+=r[i+3];\n+       e+=r[i+4]; f+=r[i+5];\n+       g+=r[i+6]; h+=r[i+7];\n        mix(a,b,c,d,e,f,g,h);\n        m[i  ]=a; m[i+1]=b; m[i+2]=c; m[i+3]=d;\n        m[i+4]=e; m[i+5]=f; m[i+6]=g; m[i+7]=h;\n      }\n      /* do a second pass to make all of the seed affect all of m */\n      for (i=0; i<RANDSIZ; i+=8)\n      {\n-       a+=m[i  ]; b+=m[i+1]; c+=m[i+2]; d+=m[i+3];\n-       e+=m[i+4]; f+=m[i+5]; g+=m[i+6]; h+=m[i+7];\n+       a+=m[i  ]; b+=m[i+1];\n+       c+=m[i+2]; d+=m[i+3];\n+       e+=m[i+4]; f+=m[i+5];\n+       g+=m[i+6]; h+=m[i+7];\n        mix(a,b,c,d,e,f,g,h);\n        m[i  ]=a; m[i+1]=b; m[i+2]=c; m[i+3]=d;\n        m[i+4]=e; m[i+5]=f; m[i+6]=g; m[i+7]=h;"}]}