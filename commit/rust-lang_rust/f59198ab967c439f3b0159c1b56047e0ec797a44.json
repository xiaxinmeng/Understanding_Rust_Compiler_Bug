{"sha": "f59198ab967c439f3b0159c1b56047e0ec797a44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OTE5OGFiOTY3YzQzOWYzYjAxNTljMWI1NjA0N2UwZWM3OTdhNDQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-31T15:02:36Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-02T10:25:27Z"}, "message": "Introduce CrateRejections struct", "tree": {"sha": "f5378ae3255a1066c6a72906a1b2c42b3e317432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5378ae3255a1066c6a72906a1b2c42b3e317432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f59198ab967c439f3b0159c1b56047e0ec797a44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f59198ab967c439f3b0159c1b56047e0ec797a44", "html_url": "https://github.com/rust-lang/rust/commit/f59198ab967c439f3b0159c1b56047e0ec797a44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f59198ab967c439f3b0159c1b56047e0ec797a44/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3f850a50c47e832c4eacb006b1ff878678d2c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f850a50c47e832c4eacb006b1ff878678d2c4c", "html_url": "https://github.com/rust-lang/rust/commit/b3f850a50c47e832c4eacb006b1ff878678d2c4c"}], "stats": {"total": 76, "additions": 36, "deletions": 40}, "files": [{"sha": "d3512b6cf579e18e1d0cd4d70914ae7c7d1f1231", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f59198ab967c439f3b0159c1b56047e0ec797a44/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59198ab967c439f3b0159c1b56047e0ec797a44/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=f59198ab967c439f3b0159c1b56047e0ec797a44", "patch": "@@ -255,11 +255,7 @@ crate struct CrateLocator<'a> {\n     pub is_proc_macro: bool,\n \n     // Mutable in-progress state or output.\n-    rejected_via_hash: Vec<CrateMismatch>,\n-    rejected_via_triple: Vec<CrateMismatch>,\n-    rejected_via_kind: Vec<CrateMismatch>,\n-    rejected_via_version: Vec<CrateMismatch>,\n-    rejected_via_filename: Vec<CrateMismatch>,\n+    crate_rejections: CrateRejections,\n }\n \n #[derive(Clone)]\n@@ -343,20 +339,16 @@ impl<'a> CrateLocator<'a> {\n                 sess.target_filesearch(path_kind)\n             },\n             is_proc_macro: false,\n-            rejected_via_hash: Vec::new(),\n-            rejected_via_triple: Vec::new(),\n-            rejected_via_kind: Vec::new(),\n-            rejected_via_version: Vec::new(),\n-            rejected_via_filename: Vec::new(),\n+            crate_rejections: CrateRejections::default(),\n         }\n     }\n \n     crate fn reset(&mut self) {\n-        self.rejected_via_hash.clear();\n-        self.rejected_via_triple.clear();\n-        self.rejected_via_kind.clear();\n-        self.rejected_via_version.clear();\n-        self.rejected_via_filename.clear();\n+        self.crate_rejections.via_hash.clear();\n+        self.crate_rejections.via_triple.clear();\n+        self.crate_rejections.via_kind.clear();\n+        self.crate_rejections.via_version.clear();\n+        self.crate_rejections.via_filename.clear();\n     }\n \n     crate fn maybe_load_library_crate(&mut self) -> Result<Option<Library>, CrateError> {\n@@ -439,7 +431,7 @@ impl<'a> CrateLocator<'a> {\n             };\n             FileMatches\n         });\n-        self.rejected_via_kind.extend(staticlibs);\n+        self.crate_rejections.via_kind.extend(staticlibs);\n \n         // We have now collected all known libraries into a set of candidates\n         // keyed of the filename hash listed. For each filename, we also have a\n@@ -610,7 +602,8 @@ impl<'a> CrateLocator<'a> {\n         let found_version = metadata.get_rustc_version();\n         if found_version != rustc_version {\n             info!(\"Rejecting via version: expected {} got {}\", rustc_version, found_version);\n-            self.rejected_via_version\n+            self.crate_rejections\n+                .via_version\n                 .push(CrateMismatch { path: libpath.to_path_buf(), got: found_version });\n             return None;\n         }\n@@ -632,7 +625,7 @@ impl<'a> CrateLocator<'a> {\n \n         if root.triple() != &self.triple {\n             info!(\"Rejecting via crate triple: expected {} got {}\", self.triple, root.triple());\n-            self.rejected_via_triple.push(CrateMismatch {\n+            self.crate_rejections.via_triple.push(CrateMismatch {\n                 path: libpath.to_path_buf(),\n                 got: root.triple().to_string(),\n             });\n@@ -643,7 +636,8 @@ impl<'a> CrateLocator<'a> {\n         if let Some(expected_hash) = self.hash {\n             if hash != expected_hash {\n                 info!(\"Rejecting via hash: expected {} got {}\", expected_hash, hash);\n-                self.rejected_via_hash\n+                self.crate_rejections\n+                    .via_hash\n                     .push(CrateMismatch { path: libpath.to_path_buf(), got: hash.to_string() });\n                 return None;\n             }\n@@ -697,7 +691,8 @@ impl<'a> CrateLocator<'a> {\n                     dylibs.insert(loc_canon, PathKind::ExternFlag);\n                 }\n             } else {\n-                self.rejected_via_filename\n+                self.crate_rejections\n+                    .via_filename\n                     .push(CrateMismatch { path: loc.original().clone(), got: String::new() });\n             }\n         }\n@@ -713,11 +708,7 @@ impl<'a> CrateLocator<'a> {\n             triple: self.triple,\n             dll_prefix: self.target.dll_prefix.clone(),\n             dll_suffix: self.target.dll_suffix.clone(),\n-            rejected_via_hash: self.rejected_via_hash,\n-            rejected_via_triple: self.rejected_via_triple,\n-            rejected_via_kind: self.rejected_via_kind,\n-            rejected_via_version: self.rejected_via_version,\n-            rejected_via_filename: self.rejected_via_filename,\n+            crate_rejections: self.crate_rejections,\n         })\n     }\n }\n@@ -844,6 +835,15 @@ struct CrateMismatch {\n     got: String,\n }\n \n+#[derive(Clone, Default)]\n+struct CrateRejections {\n+    via_hash: Vec<CrateMismatch>,\n+    via_triple: Vec<CrateMismatch>,\n+    via_kind: Vec<CrateMismatch>,\n+    via_version: Vec<CrateMismatch>,\n+    via_filename: Vec<CrateMismatch>,\n+}\n+\n /// Candidate rejection reasons collected during crate search.\n /// If no candidate is accepted, then these reasons are presented to the user,\n /// otherwise they are ignored.\n@@ -853,11 +853,7 @@ crate struct CombinedLocatorError {\n     triple: TargetTriple,\n     dll_prefix: String,\n     dll_suffix: String,\n-    rejected_via_hash: Vec<CrateMismatch>,\n-    rejected_via_triple: Vec<CrateMismatch>,\n-    rejected_via_kind: Vec<CrateMismatch>,\n-    rejected_via_version: Vec<CrateMismatch>,\n-    rejected_via_filename: Vec<CrateMismatch>,\n+    crate_rejections: CrateRejections,\n }\n \n crate enum CrateError {\n@@ -966,7 +962,7 @@ impl CrateError {\n                     Some(r) => format!(\" which `{}` depends on\", r.name),\n                 };\n                 let mut msg = \"the following crate versions were found:\".to_string();\n-                let mut err = if !locator.rejected_via_hash.is_empty() {\n+                let mut err = if !locator.crate_rejections.via_hash.is_empty() {\n                     let mut err = struct_span_err!(\n                         sess,\n                         span,\n@@ -976,7 +972,7 @@ impl CrateError {\n                         add,\n                     );\n                     err.note(\"perhaps that crate needs to be recompiled?\");\n-                    let mismatches = locator.rejected_via_hash.iter();\n+                    let mismatches = locator.crate_rejections.via_hash.iter();\n                     for CrateMismatch { path, .. } in mismatches {\n                         msg.push_str(&format!(\"\\ncrate `{}`: {}\", crate_name, path.display()));\n                     }\n@@ -987,7 +983,7 @@ impl CrateError {\n                     }\n                     err.note(&msg);\n                     err\n-                } else if !locator.rejected_via_triple.is_empty() {\n+                } else if !locator.crate_rejections.via_triple.is_empty() {\n                     let mut err = struct_span_err!(\n                         sess,\n                         span,\n@@ -997,7 +993,7 @@ impl CrateError {\n                         locator.triple,\n                         add,\n                     );\n-                    let mismatches = locator.rejected_via_triple.iter();\n+                    let mismatches = locator.crate_rejections.via_triple.iter();\n                     for CrateMismatch { path, got } in mismatches {\n                         msg.push_str(&format!(\n                             \"\\ncrate `{}`, target triple {}: {}\",\n@@ -1008,7 +1004,7 @@ impl CrateError {\n                     }\n                     err.note(&msg);\n                     err\n-                } else if !locator.rejected_via_kind.is_empty() {\n+                } else if !locator.crate_rejections.via_kind.is_empty() {\n                     let mut err = struct_span_err!(\n                         sess,\n                         span,\n@@ -1018,13 +1014,13 @@ impl CrateError {\n                         add,\n                     );\n                     err.help(\"please recompile that crate using --crate-type lib\");\n-                    let mismatches = locator.rejected_via_kind.iter();\n+                    let mismatches = locator.crate_rejections.via_kind.iter();\n                     for CrateMismatch { path, .. } in mismatches {\n                         msg.push_str(&format!(\"\\ncrate `{}`: {}\", crate_name, path.display()));\n                     }\n                     err.note(&msg);\n                     err\n-                } else if !locator.rejected_via_version.is_empty() {\n+                } else if !locator.crate_rejections.via_version.is_empty() {\n                     let mut err = struct_span_err!(\n                         sess,\n                         span,\n@@ -1037,7 +1033,7 @@ impl CrateError {\n                         \"please recompile that crate using this compiler ({})\",\n                         rustc_version(),\n                     ));\n-                    let mismatches = locator.rejected_via_version.iter();\n+                    let mismatches = locator.crate_rejections.via_version.iter();\n                     for CrateMismatch { path, got } in mismatches {\n                         msg.push_str(&format!(\n                             \"\\ncrate `{}` compiled by {}: {}\",\n@@ -1104,8 +1100,8 @@ impl CrateError {\n                     err\n                 };\n \n-                if !locator.rejected_via_filename.is_empty() {\n-                    let mismatches = locator.rejected_via_filename.iter();\n+                if !locator.crate_rejections.via_filename.is_empty() {\n+                    let mismatches = locator.crate_rejections.via_filename.iter();\n                     for CrateMismatch { path, .. } in mismatches {\n                         err.note(&format!(\n                             \"extern location for {} is of an unknown type: {}\","}]}