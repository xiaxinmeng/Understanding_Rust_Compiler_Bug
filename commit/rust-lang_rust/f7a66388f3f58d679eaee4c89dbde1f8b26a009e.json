{"sha": "f7a66388f3f58d679eaee4c89dbde1f8b26a009e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YTY2Mzg4ZjNmNThkNjc5ZWFlZTRjODlkYmRlMWY4YjI2YTAwOWU=", "commit": {"author": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-10T17:36:27Z"}, "committer": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-10T17:36:27Z"}, "message": "Document `for` keyword", "tree": {"sha": "5aee492810f9c17fcb3198c9c3b8eafcdff407a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aee492810f9c17fcb3198c9c3b8eafcdff407a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7a66388f3f58d679eaee4c89dbde1f8b26a009e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a66388f3f58d679eaee4c89dbde1f8b26a009e", "html_url": "https://github.com/rust-lang/rust/commit/f7a66388f3f58d679eaee4c89dbde1f8b26a009e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7a66388f3f58d679eaee4c89dbde1f8b26a009e/comments", "author": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c4a382b7f0f9bb6a98001a6e5ffd9ab8ff3d70", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c4a382b7f0f9bb6a98001a6e5ffd9ab8ff3d70", "html_url": "https://github.com/rust-lang/rust/commit/a5c4a382b7f0f9bb6a98001a6e5ffd9ab8ff3d70"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "74dcf665c03b3059cee8467f6bbca6f2fd5a631a", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/f7a66388f3f58d679eaee4c89dbde1f8b26a009e/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7a66388f3f58d679eaee4c89dbde1f8b26a009e/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=f7a66388f3f58d679eaee4c89dbde1f8b26a009e", "patch": "@@ -292,6 +292,77 @@ mod extern_keyword { }\n /// [Reference]: https://doc.rust-lang.org/reference/items/functions.html\n mod fn_keyword { }\n \n+#[doc(keyword = \"for\")]\n+//\n+/// The `for` keyword.\n+///\n+/// `for` is primarily used in for-in-loops, but it has a few other pieces of syntactic uses such as\n+/// `impl Trait for Type` (see [`impl`] for more info on that). for-in-loops, or to be more\n+/// precise, iterator loops, are a simple syntactic sugar over an exceedingly common practice\n+/// within Rust, which is to loop over an iterator until that iterator returns None (or [`break`]\n+/// is called).\n+///\n+/// ```rust\n+/// for i in 0..5 {\n+///     println!(\"{}\", i * 2);\n+/// }\n+///\n+/// for i in std::iter::repeat(5) {\n+///     println!(\"turns out {} never stops being 5\", i);\n+///     break; // would loop forever otherwise\n+/// }\n+///\n+/// 'outer: for x in 5..50 {\n+///     for y in 0..10 {\n+///         if x == y {\n+///             break 'outer;\n+///         }\n+///     }\n+/// }\n+/// ```\n+///\n+/// As shown in the example above, `for` loops (along with all other loops) can be tagged, using\n+/// similar syntax to lifetimes (only visually similar, entirely distinct in practice). Giving the\n+/// same tag to `break` breaks the tagged loop, which is useful for inner loops. It is definitely\n+/// not a goto.\n+///\n+/// A `for` loop expands as shown:\n+///\n+/// ```rust\n+/// # fn code() { }\n+/// # let iterator = 0..2;\n+/// for loop_variable in iterator {\n+///     code()\n+/// }\n+/// ```\n+///\n+/// ```rust\n+/// # fn code() { }\n+/// # let iterator = 0..2;\n+/// {\n+///     let mut _iter = std::iter::IntoIterator::into_iter(iterator);\n+///     loop {\n+///         match _iter.next() {\n+///             Some(loop_variable) => {\n+///                 code()\n+///             },\n+///             None => break,\n+///         }\n+///     }\n+/// }\n+/// ```\n+///\n+/// More details on the functionality shown can be seen at the [`IntoIterator`] docs.\n+///\n+/// For more information on for-loops, see the [Rust book] or the [Reference].\n+///\n+/// [`impl`]: keyword.impl.html\n+/// [`break`]: keyword.break.html\n+/// [`IntoIterator`]: iter/trait.IntoIterator.html\n+/// [Rust book]: https://doc.rust-lang.org/book/2018-edition/ch03-05-control-flow.html#looping-through-a-collection-with-for\n+/// [Reference]: https://doc.rust-lang.org/reference/expressions/loop-expr.html#iterator-loops\n+mod for_keyword { }\n+\n #[doc(keyword = \"let\")]\n //\n /// The `let` keyword."}]}