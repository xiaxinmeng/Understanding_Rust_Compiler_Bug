{"sha": "92f6b925a9df11d3f5d0090e91ad893b1932cda9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZjZiOTI1YTlkZjExZDNmNWQwMDkwZTkxYWQ4OTNiMTkzMmNkYTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-22T14:31:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-22T14:31:43Z"}, "message": "auto merge of #13657 : edwardw/rust/ppaux-ice, r=alexcrichton\n\nCloses #13599", "tree": {"sha": "a6e4029c5b5163ca24295ab88bb4ea9522598f96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6e4029c5b5163ca24295ab88bb4ea9522598f96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92f6b925a9df11d3f5d0090e91ad893b1932cda9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92f6b925a9df11d3f5d0090e91ad893b1932cda9", "html_url": "https://github.com/rust-lang/rust/commit/92f6b925a9df11d3f5d0090e91ad893b1932cda9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92f6b925a9df11d3f5d0090e91ad893b1932cda9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77303101bb7d18e48048fe6bdc7df6be2f315370", "url": "https://api.github.com/repos/rust-lang/rust/commits/77303101bb7d18e48048fe6bdc7df6be2f315370", "html_url": "https://github.com/rust-lang/rust/commit/77303101bb7d18e48048fe6bdc7df6be2f315370"}, {"sha": "741142e3faf2282bc6a87f5e83cb28274aa8205e", "url": "https://api.github.com/repos/rust-lang/rust/commits/741142e3faf2282bc6a87f5e83cb28274aa8205e", "html_url": "https://github.com/rust-lang/rust/commit/741142e3faf2282bc6a87f5e83cb28274aa8205e"}], "stats": {"total": 76, "additions": 54, "deletions": 22}, "files": [{"sha": "379ec57affc6c8869a07271a98c60c6250864171", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/92f6b925a9df11d3f5d0090e91ad893b1932cda9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f6b925a9df11d3f5d0090e91ad893b1932cda9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=92f6b925a9df11d3f5d0090e91ad893b1932cda9", "patch": "@@ -3331,6 +3331,13 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> ~str {\n         }\n     }\n \n+    fn tstore_to_closure(s: &TraitStore) -> ~str {\n+        match s {\n+            &UniqTraitStore => \"proc\".to_owned(),\n+            &RegionTraitStore(..) => \"closure\".to_owned()\n+        }\n+    }\n+\n     match *err {\n         terr_mismatch => \"types differ\".to_owned(),\n         terr_fn_style_mismatch(values) => {\n@@ -3346,9 +3353,9 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> ~str {\n                  values.expected.to_str(), values.found.to_str())\n         }\n         terr_sigil_mismatch(values) => {\n-            format!(\"expected {} closure, found {} closure\",\n-                 values.expected.to_str(),\n-                 values.found.to_str())\n+            format!(\"expected {}, found {}\",\n+                    tstore_to_closure(&values.expected),\n+                    tstore_to_closure(&values.found))\n         }\n         terr_mutability => \"values differ in mutability\".to_owned(),\n         terr_box_mutability => \"boxed values differ in mutability\".to_owned(),"}, {"sha": "bddd7f43d995034eb5784e43a260bd27d725163d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/92f6b925a9df11d3f5d0090e91ad893b1932cda9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f6b925a9df11d3f5d0090e91ad893b1932cda9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=92f6b925a9df11d3f5d0090e91ad893b1932cda9", "patch": "@@ -2182,7 +2182,6 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         let expected_sty = unpack_expected(fcx,\n                                            expected,\n                                            |x| Some((*x).clone()));\n-        let error_happened = false;\n         let (expected_sig,\n              expected_onceness,\n              expected_bounds) = {\n@@ -2192,7 +2191,24 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                         replace_late_bound_regions_in_fn_sig(\n                             tcx, &cenv.sig,\n                             |_| fcx.inh.infcx.fresh_bound_region(expr.id));\n-                    (Some(sig), cenv.onceness, cenv.bounds)\n+                    let onceness = match (&store, &cenv.store) {\n+                        // As the closure type and onceness go, only three\n+                        // combinations are legit:\n+                        //      once closure\n+                        //      many closure\n+                        //      once proc\n+                        // If the actual and expected closure type disagree with\n+                        // each other, set expected onceness to be always Once or\n+                        // Many according to the actual type. Otherwise, it will\n+                        // yield either an illegal \"many proc\" or a less known\n+                        // \"once closure\" in the error message.\n+                        (&ty::UniqTraitStore, &ty::UniqTraitStore) |\n+                        (&ty::RegionTraitStore(..), &ty::RegionTraitStore(..)) =>\n+                            cenv.onceness,\n+                        (&ty::UniqTraitStore, _) => ast::Once,\n+                        (&ty::RegionTraitStore(..), _) => ast::Many,\n+                    };\n+                    (Some(sig), onceness, cenv.bounds)\n                 }\n                 _ => {\n                     // Not an error! Means we're inferring the closure type\n@@ -2218,23 +2234,9 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                                            store,\n                                            decl,\n                                            expected_sig);\n-\n-        let fty_sig;\n-        let fty = if error_happened {\n-            fty_sig = FnSig {\n-                binder_id: ast::CRATE_NODE_ID,\n-                inputs: fn_ty.sig.inputs.iter().map(|_| ty::mk_err()).collect(),\n-                output: ty::mk_err(),\n-                variadic: false\n-            };\n-            ty::mk_err()\n-        } else {\n-            fty_sig = fn_ty.sig.clone();\n-            ty::mk_closure(tcx, fn_ty.clone())\n-        };\n-\n-        debug!(\"check_expr_fn_with_unifier fty={}\",\n-               fcx.infcx().ty_to_str(fty));\n+        let fty_sig = fn_ty.sig.clone();\n+        let fty = ty::mk_closure(tcx, fn_ty);\n+        debug!(\"check_expr_fn fty={}\", fcx.infcx().ty_to_str(fty));\n \n         fcx.write_ty(expr.id, fty);\n "}, {"sha": "de1a9e13f9e86da6cd04a63c41a93e07d157205f", "filename": "src/test/compile-fail/issue-13599.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/92f6b925a9df11d3f5d0090e91ad893b1932cda9/src%2Ftest%2Fcompile-fail%2Fissue-13599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f6b925a9df11d3f5d0090e91ad893b1932cda9/src%2Ftest%2Fcompile-fail%2Fissue-13599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13599.rs?ref=92f6b925a9df11d3f5d0090e91ad893b1932cda9", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a mismatched proc / closure type is correctly reported.\n+\n+fn expect_closure(_: ||) {}\n+\n+fn expect_proc(_: proc()) {}\n+\n+fn main() {\n+    expect_closure(proc() {});\n+    //~^ ERROR mismatched types: expected `||` but found `proc()` (expected closure, found proc)\n+\n+    expect_proc(|| {});\n+    //~^ ERROR mismatched types: expected `proc()` but found `||` (expected proc, found closure)\n+}"}]}