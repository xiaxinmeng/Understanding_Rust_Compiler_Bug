{"sha": "2fe926431bb198a052a5eae92ff820a4f572fd92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZTkyNjQzMWJiMTk4YTA1MmE1ZWFlOTJmZjgyMGE0ZjU3MmZkOTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-31T00:18:12Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-16T17:47:25Z"}, "message": "std: Support consuming a Process without waiting\n\nForking off a child which survives the parent is often a useful task, and is\ncurrently not possible because the Process type will invoke `wait()` in its\ndestructor in order to prevent leaking resources. This function adds a new safe\nmethod, `forget`, which can be used to consume an instance of `Process` which\nwill then not call `wait` in the destructor.\n\nThis new method is clearly documented as a leak of resources, but it must be\nforcibly opted in to.\n\nCloses #14467", "tree": {"sha": "ec39df7109eee720e694224a0929605443a46b96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec39df7109eee720e694224a0929605443a46b96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe926431bb198a052a5eae92ff820a4f572fd92", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe926431bb198a052a5eae92ff820a4f572fd92", "html_url": "https://github.com/rust-lang/rust/commit/2fe926431bb198a052a5eae92ff820a4f572fd92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe926431bb198a052a5eae92ff820a4f572fd92/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b32d42a5da84c1f23a2b50b9a6741eea69773c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b32d42a5da84c1f23a2b50b9a6741eea69773c4", "html_url": "https://github.com/rust-lang/rust/commit/0b32d42a5da84c1f23a2b50b9a6741eea69773c4"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "1dcf08b2322bbf802a03d79ae0f1a992a3327868", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2fe926431bb198a052a5eae92ff820a4f572fd92/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe926431bb198a052a5eae92ff820a4f572fd92/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=2fe926431bb198a052a5eae92ff820a4f572fd92", "patch": "@@ -59,6 +59,7 @@ use c_str::CString;\n /// ```\n pub struct Process {\n     handle: Box<RtioProcess + Send>,\n+    forget: bool,\n \n     /// Handle to the child's stdin, if the `stdin` field of this process's\n     /// `ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.\n@@ -262,6 +263,7 @@ impl Command {\n                 });\n                 Process {\n                     handle: p,\n+                    forget: false,\n                     stdin: io.next().unwrap(),\n                     stdout: io.next().unwrap(),\n                     stderr: io.next().unwrap(),\n@@ -540,10 +542,23 @@ impl Process {\n             error:  stderr.recv().ok().unwrap_or(Vec::new()),\n         })\n     }\n+\n+    /// Forgets this process, allowing it to outlive the parent\n+    ///\n+    /// This function will forcefully prevent calling `wait()` on the child\n+    /// process in the destructor, allowing the child to outlive the\n+    /// parent. Note that this operation can easily lead to leaking the\n+    /// resources of the child process, so care must be taken when\n+    /// invoking this method.\n+    pub fn forget(mut self) {\n+        self.forget = true;\n+    }\n }\n \n impl Drop for Process {\n     fn drop(&mut self) {\n+        if self.forget { return }\n+\n         // Close all I/O before exiting to ensure that the child doesn't wait\n         // forever to print some text or something similar.\n         drop(self.stdin.take());\n@@ -933,4 +948,12 @@ mod tests {\n         rx.recv();\n         rx.recv();\n     })\n+\n+    iotest!(fn forget() {\n+        let p = sleeper();\n+        let id = p.id();\n+        p.forget();\n+        assert!(Process::kill(id, 0).is_ok());\n+        assert!(Process::kill(id, PleaseExitSignal).is_ok());\n+    })\n }"}]}