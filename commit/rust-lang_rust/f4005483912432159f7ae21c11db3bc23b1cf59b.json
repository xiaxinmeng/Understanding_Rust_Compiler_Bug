{"sha": "f4005483912432159f7ae21c11db3bc23b1cf59b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MDA1NDgzOTEyNDMyMTU5ZjdhZTIxYzExZGIzYmMyM2IxY2Y1OWI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-17T09:36:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-17T09:36:41Z"}, "message": "Merge pull request #2770 from mati865/rustup\n\nRustup to 2018-05-16", "tree": {"sha": "c38703d6a8700bfe22f2f40909df749774ddc616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38703d6a8700bfe22f2f40909df749774ddc616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4005483912432159f7ae21c11db3bc23b1cf59b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa/U0pCRBK7hj4Ov3rIwAAdHIIAA/7f1c+GHmJL17SORBuyCEA\nGtszq0qSZSw/PzUuc9l/TZ8zrTEL+2twerICwc6OMF92ILOhk4xfqYOYMDxK5Day\nSPFhr60ns8k3q83d6feD1dwbYGqCzog5znV36Aof2tuutdiJEHUslABjJnxVwoFN\n13kkhSV0SawHSHd7u52NBxwJ/Ay9k4nP3fgS/0zC5fd/y0YrQb8hwTK2zOrj4rwV\naJNQmZXLBpWu39bVKIlIDJSacgdQHTA+PZgkEodiaq8kC7v+qHN02hXcLjIqxpkE\niDvuvEFiSlAjXyq+B4ncfwqK63ainhE3nNr+7cpSr+ucd0k3X25717M644DI7mY=\n=h42n\n-----END PGP SIGNATURE-----\n", "payload": "tree c38703d6a8700bfe22f2f40909df749774ddc616\nparent 1af2f20da64121a1e90a70ff635cba439bfea6e1\nparent f0c823a85ec85b6d52a41beb79497a413fae0d45\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1526549801 +0200\ncommitter GitHub <noreply@github.com> 1526549801 +0200\n\nMerge pull request #2770 from mati865/rustup\n\nRustup to 2018-05-16"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4005483912432159f7ae21c11db3bc23b1cf59b", "html_url": "https://github.com/rust-lang/rust/commit/f4005483912432159f7ae21c11db3bc23b1cf59b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4005483912432159f7ae21c11db3bc23b1cf59b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1af2f20da64121a1e90a70ff635cba439bfea6e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1af2f20da64121a1e90a70ff635cba439bfea6e1", "html_url": "https://github.com/rust-lang/rust/commit/1af2f20da64121a1e90a70ff635cba439bfea6e1"}, {"sha": "f0c823a85ec85b6d52a41beb79497a413fae0d45", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c823a85ec85b6d52a41beb79497a413fae0d45", "html_url": "https://github.com/rust-lang/rust/commit/f0c823a85ec85b6d52a41beb79497a413fae0d45"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "b1cd096bc13b6c419bc26afa3ef8a79b355e8939", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -243,7 +243,7 @@ fn is_relevant_block(tcx: TyCtxt, tables: &ty::TypeckTables, block: &Block) -> b\n \n fn is_relevant_expr(tcx: TyCtxt, tables: &ty::TypeckTables, expr: &Expr) -> bool {\n     match expr.node {\n-        ExprBlock(ref block) => is_relevant_block(tcx, tables, block),\n+        ExprBlock(ref block, _) => is_relevant_block(tcx, tables, block),\n         ExprRet(Some(ref e)) => is_relevant_expr(tcx, tables, e),\n         ExprRet(None) | ExprBreak(_, None) => false,\n         ExprCall(ref path_expr, _) => if let ExprPath(ref qpath) = path_expr.node {"}, {"sha": "5db217d8228a0f233cadead9c6b2f0e6de310ec8", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -59,7 +59,7 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n         if let ExprClosure(_, _, eid, _, _) = expr.node {\n             let body = self.cx.tcx.hir.body(eid);\n             let ex = &body.value;\n-            if matches!(ex.node, ExprBlock(_)) {\n+            if matches!(ex.node, ExprBlock(_, _)) {\n                 self.found_block = Some(ex);\n                 return;\n             }\n@@ -78,7 +78,7 @@ const COMPLEX_BLOCK_MESSAGE: &str = \"in an 'if' condition, avoid complex blocks\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprIf(ref check, ref then, _) = expr.node {\n-            if let ExprBlock(ref block) = check.node {\n+            if let ExprBlock(ref block, _) = check.node {\n                 if block.rules == DefaultBlock {\n                     if block.stmts.is_empty() {\n                         if let Some(ref ex) = block.expr {"}, {"sha": "0c024d2bd05f66b355b076e847a362d72e36b731", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -99,7 +99,7 @@ fn check_arg(name: Name, arg: Name, needle: &Expr) -> bool {\n fn get_path_name(expr: &Expr) -> Option<Name> {\n     match expr.node {\n         ExprBox(ref e) | ExprAddrOf(_, ref e) | ExprUnary(UnOp::UnDeref, ref e) => get_path_name(e),\n-        ExprBlock(ref b) => if b.stmts.is_empty() {\n+        ExprBlock(ref b, _) => if b.stmts.is_empty() {\n             b.expr.as_ref().and_then(|p| get_path_name(p))\n         } else {\n             None"}, {"sha": "240623475c8fa196f1baf00dd4b7e7e10eb64e48", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -101,7 +101,7 @@ fn check_if(cx: &EarlyContext, expr: &ast::Expr) {\n \n fn check_collapsible_maybe_if_let(cx: &EarlyContext, else_: &ast::Expr) {\n     if_chain! {\n-        if let ast::ExprKind::Block(ref block) = else_.node;\n+        if let ast::ExprKind::Block(ref block, _) = else_.node;\n         if let Some(else_) = expr_block(block);\n         if !in_macro(else_.span);\n         then {"}, {"sha": "3b178b025635c3657141ab738b7c22dc316dfd2b", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -202,7 +202,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     pub fn expr(&mut self, e: &Expr) -> Option<Constant> {\n         match e.node {\n             ExprPath(ref qpath) => self.fetch_path(qpath, e.hir_id),\n-            ExprBlock(ref block) => self.block(block),\n+            ExprBlock(ref block, _) => self.block(block),\n             ExprIf(ref cond, ref then, ref otherwise) => self.ifthenelse(cond, then, otherwise),\n             ExprLit(ref lit) => Some(lit_to_constant(&lit.node, self.tables.expr_ty(e))),\n             ExprArray(ref vec) => self.multi(vec).map(Constant::Vec),"}, {"sha": "35c87beecef8492ebc13bef33167b359bf9925f0", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -238,7 +238,7 @@ fn if_sequence(mut expr: &Expr) -> (SmallVector<&Expr>, SmallVector<&Block>) {\n \n     while let ExprIf(ref cond, ref then_expr, ref else_expr) = expr.node {\n         conds.push(&**cond);\n-        if let ExprBlock(ref block) = then_expr.node {\n+        if let ExprBlock(ref block, _) = then_expr.node {\n             blocks.push(block);\n         } else {\n             panic!(\"ExprIf node is not an ExprBlock\");\n@@ -253,7 +253,7 @@ fn if_sequence(mut expr: &Expr) -> (SmallVector<&Expr>, SmallVector<&Block>) {\n \n     // final `else {..}`\n     if !blocks.is_empty() {\n-        if let ExprBlock(ref block) = expr.node {\n+        if let ExprBlock(ref block, _) = expr.node {\n             blocks.push(&**block);\n         }\n     }"}, {"sha": "a85b26f7a6ac4107dfd9540fdf5d8fb93a2ed34c", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapLint {\n                     // in case of `if !m.contains_key(&k) { m.insert(k, v); }`\n                     // we can give a better error message\n                     let sole_expr = {\n-                        else_block.is_none() && if let ExprBlock(ref then_block) = then_block.node {\n+                        else_block.is_none() && if let ExprBlock(ref then_block, _) = then_block.node {\n                             (then_block.expr.is_some() as usize) + then_block.stmts.len() == 1\n                         } else {\n                             true"}, {"sha": "c1ae714b115a137357ad4a850a00011e19a14237", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -160,7 +160,7 @@ fn is_infinite(cx: &LateContext, expr: &Expr) -> Finiteness {\n             }\n             Finite\n         },\n-        ExprBlock(ref block) => block.expr.as_ref().map_or(Finite, |e| is_infinite(cx, e)),\n+        ExprBlock(ref block, _) => block.expr.as_ref().map_or(Finite, |e| is_infinite(cx, e)),\n         ExprBox(ref e) | ExprAddrOf(_, ref e) => is_infinite(cx, e),\n         ExprCall(ref path, _) => if let ExprPath(ref qpath) = path.node {\n             match_qpath(qpath, &paths::REPEAT).into()"}, {"sha": "df7a1f29637a557fdee826e9317681414b2f682b", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -71,14 +71,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                 if let hir::StmtExpr(ref if_, _) = expr.node;\n                 if let hir::ExprIf(ref cond, ref then, ref else_) = if_.node;\n                 if !used_in_expr(cx, canonical_id, cond);\n-                if let hir::ExprBlock(ref then) = then.node;\n+                if let hir::ExprBlock(ref then, _) = then.node;\n                 if let Some(value) = check_assign(cx, canonical_id, &*then);\n                 if !used_in_expr(cx, canonical_id, value);\n                 then {\n                     let span = stmt.span.to(if_.span);\n \n                     let (default_multi_stmts, default) = if let Some(ref else_) = *else_ {\n-                        if let hir::ExprBlock(ref else_) = else_.node {\n+                        if let hir::ExprBlock(ref else_, _) = else_.node {\n                             if let Some(default) = check_assign(cx, canonical_id, else_) {\n                                 (else_.stmts.len() > 1, default)\n                             } else if let Some(ref default) = decl.init {"}, {"sha": "01177c36be983a1f5487dddaf9d4221d732dce9f", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -296,13 +296,13 @@ impl<'v, 't> RefVisitor<'v, 't> {\n                 match self.cx.tables.qpath_def(qpath, hir_id) {\n                     Def::TyAlias(def_id) | Def::Struct(def_id) => {\n                         let generics = self.cx.tcx.generics_of(def_id);\n-                        for _ in generics.regions.as_slice() {\n+                        for _ in generics.params.as_slice() {\n                             self.record(&None);\n                         }\n                     },\n                     Def::Trait(def_id) => {\n                         let trait_def = self.cx.tcx.trait_def(def_id);\n-                        for _ in &self.cx.tcx.generics_of(trait_def.def_id).regions {\n+                        for _ in &self.cx.tcx.generics_of(trait_def.def_id).params {\n                             self.record(&None);\n                         }\n                     },"}, {"sha": "ea5ef3be478a6460e4a8ba3e97da64008b7f9885", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -638,10 +638,9 @@ fn never_loop_expr(expr: &Expr, main_loop_id: &NodeId) -> NeverLoopResult {\n                 combine_seq(e, arms)\n             }\n         },\n-        ExprBlock(ref b) => never_loop_block(b, main_loop_id),\n+        ExprBlock(ref b, _) => never_loop_block(b, main_loop_id),\n         ExprAgain(d) => {\n             let id = d.target_id\n-                .opt_id()\n                 .expect(\"target id can only be missing in the presence of compilation errors\");\n             if id == *main_loop_id {\n                 NeverLoopResult::MayContinueMainLoop\n@@ -849,7 +848,7 @@ fn get_indexed_assignments<'a, 'tcx>(\n         }\n     }\n \n-    if let Expr_::ExprBlock(ref b) = body.node {\n+    if let Expr_::ExprBlock(ref b, _) = body.node {\n         let Block {\n             ref stmts,\n             ref expr,\n@@ -1842,7 +1841,7 @@ fn extract_first_expr(block: &Block) -> Option<&Expr> {\n fn is_simple_break_expr(expr: &Expr) -> bool {\n     match expr.node {\n         ExprBreak(dest, ref passed_expr) if dest.label.is_none() && passed_expr.is_none() => true,\n-        ExprBlock(ref b) => match extract_first_expr(b) {\n+        ExprBlock(ref b, _) => match extract_first_expr(b) {\n             Some(subexpr) => is_simple_break_expr(subexpr),\n             None => false,\n         },"}, {"sha": "ca98d145b0c6ace1108b7be9e8c8bd0ec985113c", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -120,7 +120,7 @@ fn reduce_unit_expression<'a>(cx: &LateContext, expr: &'a hir::Expr) -> Option<S\n             // Calls can't be reduced any more\n             Some(expr.span)\n         },\n-        hir::ExprBlock(ref block) => {\n+        hir::ExprBlock(ref block, _) => {\n             match (&block.stmts[..], block.expr.as_ref()) {\n                 (&[], Some(inner_expr)) => {\n                     // If block only contains an expression,"}, {"sha": "be68e9b1a2f003a51a60d3fe86b631144638abbf", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -205,7 +205,7 @@ fn check_single_match(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n         let els = remove_blocks(&arms[1].body);\n         let els = if is_unit_expr(els) {\n             None\n-        } else if let ExprBlock(_) = els.node {\n+        } else if let ExprBlock(_, _) = els.node {\n             // matches with blocks that contain statements are prettier as `if let + else`\n             Some(els)\n         } else {\n@@ -365,7 +365,7 @@ fn check_wild_err_arm(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n                 if_chain! {\n                     if path_str == \"Err\";\n                     if inner.iter().any(|pat| pat.node == PatKind::Wild);\n-                    if let ExprBlock(ref block) = arm.body.node;\n+                    if let ExprBlock(ref block, _) = arm.body.node;\n                     if is_panic_block(block);\n                     then {\n                         // `Err(_)` arm with `panic!` found\n@@ -534,7 +534,7 @@ fn type_ranges(ranges: &[SpannedRange<Constant>]) -> TypedRanges {\n fn is_unit_expr(expr: &Expr) -> bool {\n     match expr.node {\n         ExprTup(ref v) if v.is_empty() => true,\n-        ExprBlock(ref b) if b.stmts.is_empty() && b.expr.is_none() => true,\n+        ExprBlock(ref b, _) if b.stmts.is_empty() && b.expr.is_none() => true,\n         _ => false,\n     }\n }"}, {"sha": "a15ec77eb28e14826aebafe08d2204f8a3a112bc", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n                     hint,\n                 );\n             };\n-            if let ExprBlock(ref then_block) = then_block.node {\n+            if let ExprBlock(ref then_block, _) = then_block.node {\n                 match (fetch_bool_block(then_block), fetch_bool_expr(else_expr)) {\n                     (RetBool(true), RetBool(true)) | (Bool(true), Bool(true)) => {\n                         span_lint(\n@@ -199,7 +199,7 @@ fn fetch_bool_block(block: &Block) -> Expression {\n \n fn fetch_bool_expr(expr: &Expr) -> Expression {\n     match expr.node {\n-        ExprBlock(ref block) => fetch_bool_block(block),\n+        ExprBlock(ref block, _) => fetch_bool_block(block),\n         ExprLit(ref lit_ptr) => if let LitKind::Bool(value) = lit_ptr.node {\n             Expression::Bool(value)\n         } else {"}, {"sha": "2e483411ec60f92998561f1117a56f3c735b26c5", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -173,7 +173,7 @@ impl EarlyLintPass for NeedlessContinue {\n ///\n fn needless_continue_in_else(else_expr: &ast::Expr) -> bool {\n     match else_expr.node {\n-        ast::ExprKind::Block(ref else_block) => is_first_block_stmt_continue(else_block),\n+        ast::ExprKind::Block(ref else_block, _) => is_first_block_stmt_continue(else_block),\n         ast::ExprKind::Continue(_) => true,\n         _ => false,\n     }"}, {"sha": "7b51b4772014738c61cb58eeacd94dc1ad4cf64e", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -75,7 +75,7 @@ fn has_no_effect(cx: &LateContext, expr: &Expr) -> bool {\n         } else {\n             false\n         },\n-        Expr_::ExprBlock(ref block) => {\n+        Expr_::ExprBlock(ref block, _) => {\n             block.stmts.is_empty() && if let Some(ref expr) = block.expr {\n                 has_no_effect(cx, expr)\n             } else {\n@@ -169,7 +169,7 @@ fn reduce_expression<'a>(cx: &LateContext, expr: &'a Expr) -> Option<Vec<&'a Exp\n         } else {\n             None\n         },\n-        Expr_::ExprBlock(ref block) => {\n+        Expr_::ExprBlock(ref block, _) => {\n             if block.stmts.is_empty() {\n                 block.expr.as_ref().and_then(|e| {\n                     match block.rules {"}, {"sha": "bd44b8d9b03302a89d5863fc1d8e456a038f5d1e", "filename": "clippy_lints/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -34,7 +34,7 @@ impl LintPass for Pass {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_chain! {\n-            if let ExprBlock(ref block) = expr.node;\n+            if let ExprBlock(ref block, _) = expr.node;\n             if let Some(ref ex) = block.expr;\n             if let ExprCall(ref fun, ref params) = ex.node;\n             if params.len() == 2;"}, {"sha": "fa6d2efd57238bf2dd9f3cb415379637da563520", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -87,7 +87,7 @@ impl QuestionMarkPass {\n \n     fn expression_returns_none(cx: &LateContext, expression: &Expr) -> bool {\n         match expression.node {\n-            ExprBlock(ref block) => {\n+            ExprBlock(ref block, _) => {\n                 if let Some(return_expression) = Self::return_expression(block) {\n                     return Self::expression_returns_none(cx, &return_expression);\n                 }"}, {"sha": "e91944382c5e96f3258dcf725ff985252ea243bf", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -69,7 +69,7 @@ impl ReturnPass {\n                 }\n             },\n             // a whole block? check it!\n-            ast::ExprKind::Block(ref block) => {\n+            ast::ExprKind::Block(ref block, _) => {\n                 self.check_block_return(cx, block);\n             },\n             // an if/if let expr, check both exprs"}, {"sha": "7bdeb0a666de83948cfd20b8fe7c10ec4e5f27a5", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -309,7 +309,7 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings:\n         ExprUnary(_, ref e) | ExprField(ref e, _) | ExprAddrOf(_, ref e) | ExprBox(ref e) => {\n             check_expr(cx, e, bindings)\n         },\n-        ExprBlock(ref block) | ExprLoop(ref block, _, _) => check_block(cx, block, bindings),\n+        ExprBlock(ref block, _) | ExprLoop(ref block, _, _) => check_block(cx, block, bindings),\n         // ExprCall\n         // ExprMethodCall\n         ExprArray(ref v) | ExprTup(ref v) => for e in v {\n@@ -364,7 +364,7 @@ fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut V\n fn is_self_shadow(name: Name, expr: &Expr) -> bool {\n     match expr.node {\n         ExprBox(ref inner) | ExprAddrOf(_, ref inner) => is_self_shadow(name, inner),\n-        ExprBlock(ref block) => {\n+        ExprBlock(ref block, _) => {\n             block.stmts.is_empty()\n                 && block\n                     .expr"}, {"sha": "1625346852e839d2d9749925603cd2992d97600a", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -123,7 +123,7 @@ fn is_string(cx: &LateContext, e: &Expr) -> bool {\n fn is_add(cx: &LateContext, src: &Expr, target: &Expr) -> bool {\n     match src.node {\n         ExprBinary(Spanned { node: BiAdd, .. }, ref left, _) => SpanlessEq::new(cx).eq_expr(target, left),\n-        ExprBlock(ref block) => {\n+        ExprBlock(ref block, _) => {\n             block.stmts.is_empty()\n                 && block\n                     .expr"}, {"sha": "d3a0d5b2c9e8b8613b8c9da87eeb6f7f91191114", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -356,7 +356,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = sub_pat;\n                 self.visit_expr(sub);\n             },\n-            Expr_::ExprBlock(ref block) => {\n+            Expr_::ExprBlock(ref block, _) => {\n                 let block_pat = self.next(\"block\");\n                 println!(\"Block(ref {}) = {};\", block_pat, current);\n                 self.current = block_pat;"}, {"sha": "63e7757b12eb9d87046741e396671ab0e052d8a1", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&ExprAssignOp(ref lo, ref ll, ref lr), &ExprAssignOp(ref ro, ref rl, ref rr)) => {\n                 lo.node == ro.node && self.eq_expr(ll, rl) && self.eq_expr(lr, rr)\n             },\n-            (&ExprBlock(ref l), &ExprBlock(ref r)) => self.eq_block(l, r),\n+            (&ExprBlock(ref l, _), &ExprBlock(ref r, _)) => self.eq_block(l, r),\n             (&ExprBinary(l_op, ref ll, ref lr), &ExprBinary(r_op, ref rl, ref rr)) => {\n                 l_op.node == r_op.node && self.eq_expr(ll, rl) && self.eq_expr(lr, rr)\n                     || swap_binop(l_op.node, ll, lr).map_or(false, |(l_op, ll, lr)| {\n@@ -353,8 +353,8 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(l);\n                 self.hash_expr(r);\n             },\n-            ExprBlock(ref b) => {\n-                let c: fn(_) -> _ = ExprBlock;\n+            ExprBlock(ref b, _) => {\n+                let c: fn(_, _) -> _ = ExprBlock;\n                 c.hash(&mut self.s);\n                 self.hash_block(b);\n             },"}, {"sha": "b5bb3fd2e21885a2b637051ebb80d3d601448dba", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -250,7 +250,7 @@ fn print_expr(cx: &LateContext, expr: &hir::Expr, indent: usize) {\n             println!(\"{}Yield\", ind);\n             print_expr(cx, sub, indent + 1);\n         },\n-        hir::ExprBlock(_) => {\n+        hir::ExprBlock(_, _) => {\n             println!(\"{}Block\", ind);\n         },\n         hir::ExprAssign(ref lhs, ref rhs) => {"}, {"sha": "e656ea5cba22502669ca0c26eeffc58bea54227b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4005483912432159f7ae21c11db3bc23b1cf59b/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f4005483912432159f7ae21c11db3bc23b1cf59b", "patch": "@@ -444,7 +444,7 @@ pub fn expr_block<'a, 'b, T: LintContext<'b>>(\n ) -> Cow<'a, str> {\n     let code = snippet_block(cx, expr.span, default);\n     let string = option.unwrap_or_default();\n-    if let ExprBlock(_) = expr.node {\n+    if let ExprBlock(_, _) = expr.node {\n         Cow::Owned(format!(\"{}{}\", code, string))\n     } else if string.is_empty() {\n         Cow::Owned(format!(\"{{ {} }}\", code))\n@@ -529,7 +529,7 @@ pub fn get_enclosing_block<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, node: NodeI\n                 node: ImplItemKind::Method(_, eid),\n                 ..\n             }) => match cx.tcx.hir.body(eid).value.node {\n-                ExprBlock(ref block) => Some(block),\n+                ExprBlock(ref block, _) => Some(block),\n                 _ => None,\n             },\n             _ => None,\n@@ -934,7 +934,7 @@ pub fn is_automatically_derived(attrs: &[ast::Attribute]) -> bool {\n /// Ie. `x`, `{ x }` and `{{{{ x }}}}` all give `x`. `{ x; y }` and `{}` return\n /// themselves.\n pub fn remove_blocks(expr: &Expr) -> &Expr {\n-    if let ExprBlock(ref block) = expr.node {\n+    if let ExprBlock(ref block, _) = expr.node {\n         if block.stmts.is_empty() {\n             if let Some(ref expr) = block.expr {\n                 remove_blocks(expr)"}]}