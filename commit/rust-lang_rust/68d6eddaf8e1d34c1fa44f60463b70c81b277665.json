{"sha": "68d6eddaf8e1d34c1fa44f60463b70c81b277665", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZDZlZGRhZjhlMWQzNGMxZmE0NGY2MDQ2M2I3MGM4MWIyNzc2NjU=", "commit": {"author": {"name": "Michal 'vorner' Vaner", "email": "vorner@vorner.cz", "date": "2018-02-18T17:01:33Z"}, "committer": {"name": "Michal 'vorner' Vaner", "email": "vorner@vorner.cz", "date": "2018-03-12T21:16:28Z"}, "message": "Some comments and documentation for name resolution crate", "tree": {"sha": "c137e0b0e828c2f0f29d64a5769290fb1b65f907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c137e0b0e828c2f0f29d64a5769290fb1b65f907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d6eddaf8e1d34c1fa44f60463b70c81b277665", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEQ8wy/3jh6tM0kr/e9wDQwBnkxm8FAlqm7iwACgkQ9wDQwBnk\nxm9kZBAAqbaWuTCbSKvj3ZbReeYpDXNU9E3KKkemH6VSx+Ox9+kZhXNMUEWB0abY\nf34IfaekAXHSVjFLyz9nFU5kmH2ES/8ZW6Qta3jBCLEMA134pE6cPkrOyabzArL8\ngi6/ksWRjiZu0WL8PujMFTPLCsiDGeBHj3G+VUrjRGBrUsvRpHdWEPibB/tbngne\nwNUjJiWw6emwvedil5thNAlDFTF7V0hNRgoX8u/cm+OHeaCs6NdnbuJKOKvxh2rF\n8g4l2bnnud6xEZ6bj25TvhlxxpThu2U1RH+lSfQiQESs5MTxaYwdsAMUIrpoMoym\nr5Z11/ZkhEkFnF9J7RLLX9thAgrVCCMUQ4wCPrmPC8l275zyaPZwVhuhi+98vyl+\nwCi3N5oTfcSSUsURXQdHQLKwzAuqvgJbXkt2aW1oUc7HEqrPAVtPWU+UsZok8lrg\nfCLs+yszhFqwRvkmH960/3U0wOQwPm+LrduFUZstiWgvJmDIu7HxpyzUxXYceJXD\nH0vrF/d72GjlEPSNE/V0o7QpBlLrqMv/w//XlIvgeS2t9QJmJSjaQxmPo3ULHwrc\nKie5RNQhvzt+8ZwLE3nOTxx/AwVU392pX1BJsBl21u424m5W3JYTlaliWJ6ENCf3\nF4TjKhO3GrdahjDymMVnxk4tj4jdSvrURIi/bLp8UKGaTdIBabY=\n=6W7y\n-----END PGP SIGNATURE-----", "payload": "tree c137e0b0e828c2f0f29d64a5769290fb1b65f907\nparent c9b86a91786ca54e898b54f30a6e11546b8e8026\nauthor Michal 'vorner' Vaner <vorner@vorner.cz> 1518973293 +0100\ncommitter Michal 'vorner' Vaner <vorner@vorner.cz> 1520889388 +0100\n\nSome comments and documentation for name resolution crate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d6eddaf8e1d34c1fa44f60463b70c81b277665", "html_url": "https://github.com/rust-lang/rust/commit/68d6eddaf8e1d34c1fa44f60463b70c81b277665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d6eddaf8e1d34c1fa44f60463b70c81b277665/comments", "author": {"login": "vorner", "id": 11783500, "node_id": "MDQ6VXNlcjExNzgzNTAw", "avatar_url": "https://avatars.githubusercontent.com/u/11783500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vorner", "html_url": "https://github.com/vorner", "followers_url": "https://api.github.com/users/vorner/followers", "following_url": "https://api.github.com/users/vorner/following{/other_user}", "gists_url": "https://api.github.com/users/vorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/vorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vorner/subscriptions", "organizations_url": "https://api.github.com/users/vorner/orgs", "repos_url": "https://api.github.com/users/vorner/repos", "events_url": "https://api.github.com/users/vorner/events{/privacy}", "received_events_url": "https://api.github.com/users/vorner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vorner", "id": 11783500, "node_id": "MDQ6VXNlcjExNzgzNTAw", "avatar_url": "https://avatars.githubusercontent.com/u/11783500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vorner", "html_url": "https://github.com/vorner", "followers_url": "https://api.github.com/users/vorner/followers", "following_url": "https://api.github.com/users/vorner/following{/other_user}", "gists_url": "https://api.github.com/users/vorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/vorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vorner/subscriptions", "organizations_url": "https://api.github.com/users/vorner/orgs", "repos_url": "https://api.github.com/users/vorner/repos", "events_url": "https://api.github.com/users/vorner/events{/privacy}", "received_events_url": "https://api.github.com/users/vorner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b86a91786ca54e898b54f30a6e11546b8e8026", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b86a91786ca54e898b54f30a6e11546b8e8026", "html_url": "https://github.com/rust-lang/rust/commit/c9b86a91786ca54e898b54f30a6e11546b8e8026"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "cb2c206c69b1688ef3901954186cf9cc3ebe7cb8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/68d6eddaf8e1d34c1fa44f60463b70c81b277665/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d6eddaf8e1d34c1fa44f60463b70c81b277665/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=68d6eddaf8e1d34c1fa44f60463b70c81b277665", "patch": "@@ -162,6 +162,10 @@ enum ResolutionError<'a> {\n     ForwardDeclaredTyParam,\n }\n \n+/// Combines an error with provided span and emits it\n+///\n+/// This takes the error provided, combines it with the span and any additional spans inside the\n+/// error and emits it.\n fn resolve_error<'sess, 'a>(resolver: &'sess Resolver,\n                             span: Span,\n                             resolution_error: ResolutionError<'a>) {\n@@ -364,7 +368,7 @@ struct BindingInfo {\n     binding_mode: BindingMode,\n }\n \n-// Map from the name in a pattern to its binding mode.\n+/// Map from the name in a pattern to its binding mode.\n type BindingMap = FxHashMap<Ident, BindingInfo>;\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n@@ -559,13 +563,17 @@ impl<'a> PathSource<'a> {\n     }\n }\n \n+/// Different kinds of symbols don't influence each other.\n+///\n+/// Therefore, they have a separate universe (namespace).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n pub enum Namespace {\n     TypeNS,\n     ValueNS,\n     MacroNS,\n }\n \n+/// Just a helper \u2012 separate structure for each namespace.\n #[derive(Clone, Default, Debug)]\n pub struct PerNS<T> {\n     value_ns: T,\n@@ -662,6 +670,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n     }\n }\n \n+/// This thing walks the whole crate in DFS manner, visiting each item, resolving names as it goes.\n impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n     fn visit_item(&mut self, item: &'tcx Item) {\n         self.resolve_item(item);\n@@ -788,7 +797,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n     fn visit_generics(&mut self, generics: &'tcx Generics) {\n         // For type parameter defaults, we have to ban access\n         // to following type parameters, as the Substs can only\n-        // provide previous type parameters as they're built.\n+        // provide previous type parameters as they're built. We\n+        // put all the parameters on the ban list and then remove\n+        // them one by one as they are processed and become available.\n         let mut default_ban_rib = Rib::new(ForwardTyParamBanRibKind);\n         default_ban_rib.bindings.extend(generics.params.iter()\n             .filter_map(|p| if let GenericParam::Type(ref tp) = *p { Some(tp) } else { None })\n@@ -864,6 +875,16 @@ enum RibKind<'a> {\n }\n \n /// One local scope.\n+///\n+/// A rib represents a scope names can live in. Note that these appear in many places, not just\n+/// around braces. At any place where the list of accessible names (of the given namespace)\n+/// changes, a new rib is put onto a stack. This may be, for example, a `let` statement (because it\n+/// introduces variables), a macro, etc.\n+///\n+/// Different [rib kinds](enum.RibKind) are transparent for different names.\n+///\n+/// The resolution keeps a separate stack of ribs as it traverses the AST for each namespace. When\n+/// resolving, the name is looked up from inside out.\n #[derive(Debug)]\n struct Rib<'a> {\n     bindings: FxHashMap<Ident, Def>,\n@@ -879,6 +900,11 @@ impl<'a> Rib<'a> {\n     }\n }\n \n+/// An intermediate resolution result.\n+///\n+/// This refers to the thing referred by a name. The difference between `Def` and `Item` is that\n+/// items are visible in their whole block, while defs only from the place they are defined\n+/// forward.\n enum LexicalScopeBinding<'a> {\n     Item(&'a NameBinding<'a>),\n     Def(Def),\n@@ -909,7 +935,11 @@ enum PathResult<'a> {\n }\n \n enum ModuleKind {\n+    /// Inline `mod something { ... }`.\n     Block(NodeId),\n+    /// Module from another file.\n+    ///\n+    /// Also called a normal module in the following code.\n     Def(Def, Name),\n }\n \n@@ -1194,6 +1224,9 @@ impl<'a> NameBinding<'a> {\n }\n \n /// Interns the names of the primitive types.\n+///\n+/// All other types are defined somewhere and possibly imported, but the primitive ones need\n+/// special handling, since they have no place of origin.\n struct PrimitiveTypeTable {\n     primitive_types: FxHashMap<Name, PrimTy>,\n }\n@@ -1228,6 +1261,8 @@ impl PrimitiveTypeTable {\n }\n \n /// The main resolver class.\n+///\n+/// This is the visitor that walks the whole crate.\n pub struct Resolver<'a> {\n     session: &'a Session,\n     cstore: &'a CrateStore,\n@@ -1359,6 +1394,7 @@ pub struct Resolver<'a> {\n     injected_crate: Option<Module<'a>>,\n }\n \n+/// Nothing really interesting here, it just provides memory for the rest of the crate.\n pub struct ResolverArenas<'a> {\n     modules: arena::TypedArena<ModuleData<'a>>,\n     local_modules: RefCell<Vec<Module<'a>>>,\n@@ -1404,10 +1440,12 @@ impl<'a, 'b: 'a> ty::DefIdTree for &'a Resolver<'b> {\n         match id.krate {\n             LOCAL_CRATE => self.definitions.def_key(id.index).parent,\n             _ => self.cstore.def_key(id).parent,\n-        }.map(|index| DefId { index: index, ..id })\n+        }.map(|index| DefId { index, ..id })\n     }\n }\n \n+/// This is the interface through which the rest of the compiler asks about name resolution after\n+/// the whole AST has been indexed.\n impl<'a> hir::lowering::Resolver for Resolver<'a> {\n     fn resolve_hir_path(&mut self, path: &mut hir::Path, is_value: bool) {\n         self.resolve_hir_path_cb(path, is_value,\n@@ -1630,6 +1668,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    /// Runs the function on each namespace.\n     fn per_ns<T, F: FnMut(&mut Self, Namespace) -> T>(&mut self, mut f: F) -> PerNS<T> {\n         PerNS {\n             type_ns: f(self, TypeNS),"}]}