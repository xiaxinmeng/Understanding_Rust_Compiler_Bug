{"sha": "c6bafa7322943643f37f8818bcb16dad28f53d26", "node_id": "C_kwDOAAsO6NoAKGM2YmFmYTczMjI5NDM2NDNmMzdmODgxOGJjYjE2ZGFkMjhmNTNkMjY", "commit": {"author": {"name": "Jeremy Fitzhardinge", "email": "jeremy@goop.org", "date": "2022-04-17T00:11:33Z"}, "committer": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2022-04-27T17:04:25Z"}, "message": "Add --json unused-externs-silent with original behaviour\n\nSince Cargo wants to do its own fatal error handling for unused\ndependencies, add the option `--json unused-externs-silent` which\nhas the original behaviour of not indicating non-zero exit status for\n`deny`/`forbid`-level unused dependencies.", "tree": {"sha": "f63e5f8cebd10d74580c65a758ca222076936efe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f63e5f8cebd10d74580c65a758ca222076936efe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6bafa7322943643f37f8818bcb16dad28f53d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bafa7322943643f37f8818bcb16dad28f53d26", "html_url": "https://github.com/rust-lang/rust/commit/c6bafa7322943643f37f8818bcb16dad28f53d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6bafa7322943643f37f8818bcb16dad28f53d26/comments", "author": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0529a13b5db43952a88504fb16fd561adbcdcc14", "url": "https://api.github.com/repos/rust-lang/rust/commits/0529a13b5db43952a88504fb16fd561adbcdcc14", "html_url": "https://github.com/rust-lang/rust/commit/0529a13b5db43952a88504fb16fd561adbcdcc14"}], "stats": {"total": 80, "additions": 65, "deletions": 15}, "files": [{"sha": "a64133bb7f4f9304bac99cbed5c1773ed82644fd", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6bafa7322943643f37f8818bcb16dad28f53d26/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bafa7322943643f37f8818bcb16dad28f53d26/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=c6bafa7322943643f37f8818bcb16dad28f53d26", "patch": "@@ -969,10 +969,15 @@ impl Handler {\n         self.inner.borrow_mut().emitter.emit_future_breakage_report(diags)\n     }\n \n-    pub fn emit_unused_externs(&self, lint_level: rustc_lint_defs::Level, unused_externs: &[&str]) {\n+    pub fn emit_unused_externs(\n+        &self,\n+        lint_level: rustc_lint_defs::Level,\n+        loud: bool,\n+        unused_externs: &[&str],\n+    ) {\n         let mut inner = self.inner.borrow_mut();\n \n-        if lint_level.is_error() {\n+        if loud && lint_level.is_error() {\n             inner.bump_err_count();\n         }\n "}, {"sha": "3c545e6a0d2404f040c0f405bdc05b265a731f07", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6bafa7322943643f37f8818bcb16dad28f53d26/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bafa7322943643f37f8818bcb16dad28f53d26/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=c6bafa7322943643f37f8818bcb16dad28f53d26", "patch": "@@ -195,10 +195,12 @@ impl CStore {\n     }\n \n     pub fn report_unused_deps(&self, tcx: TyCtxt<'_>) {\n+        let json_unused_externs = tcx.sess.opts.json_unused_externs;\n+\n         // We put the check for the option before the lint_level_at_node call\n         // because the call mutates internal state and introducing it\n         // leads to some ui tests failing.\n-        if !tcx.sess.opts.json_unused_externs {\n+        if !json_unused_externs.is_enabled() {\n             return;\n         }\n         let level = tcx\n@@ -208,7 +210,11 @@ impl CStore {\n             let unused_externs =\n                 self.unused_externs.iter().map(|ident| ident.to_ident_string()).collect::<Vec<_>>();\n             let unused_externs = unused_externs.iter().map(String::as_str).collect::<Vec<&str>>();\n-            tcx.sess.parse_sess.span_diagnostic.emit_unused_externs(level, &unused_externs);\n+            tcx.sess.parse_sess.span_diagnostic.emit_unused_externs(\n+                level,\n+                json_unused_externs.is_loud(),\n+                &unused_externs,\n+            );\n         }\n     }\n }\n@@ -914,7 +920,7 @@ impl<'a> CrateLoader<'a> {\n             }\n \n             // Got a real unused --extern\n-            if self.sess.opts.json_unused_externs {\n+            if self.sess.opts.json_unused_externs.is_enabled() {\n                 self.cstore.unused_externs.push(name_interned);\n                 continue;\n             }"}, {"sha": "5851ed43a0e71edb084307f9d84bdb41eab842fb", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c6bafa7322943643f37f8818bcb16dad28f53d26/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bafa7322943643f37f8818bcb16dad28f53d26/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=c6bafa7322943643f37f8818bcb16dad28f53d26", "patch": "@@ -757,7 +757,7 @@ impl Default for Options {\n             real_rust_source_base_dir: None,\n             edition: DEFAULT_EDITION,\n             json_artifact_notifications: false,\n-            json_unused_externs: false,\n+            json_unused_externs: JsonUnusedExterns::No,\n             json_future_incompat: false,\n             pretty: None,\n             working_dir: RealFileName::LocalPath(std::env::current_dir().unwrap()),\n@@ -1493,10 +1493,37 @@ pub fn parse_color(matches: &getopts::Matches) -> ColorConfig {\n pub struct JsonConfig {\n     pub json_rendered: HumanReadableErrorType,\n     pub json_artifact_notifications: bool,\n-    pub json_unused_externs: bool,\n+    pub json_unused_externs: JsonUnusedExterns,\n     pub json_future_incompat: bool,\n }\n \n+/// Report unused externs in event stream\n+#[derive(Copy, Clone)]\n+pub enum JsonUnusedExterns {\n+    /// Do not\n+    No,\n+    /// Report, but do not exit with failure status for deny/forbid\n+    Silent,\n+    /// Report, and also exit with failure status for deny/forbid\n+    Loud,\n+}\n+\n+impl JsonUnusedExterns {\n+    pub fn is_enabled(&self) -> bool {\n+        match self {\n+            JsonUnusedExterns::No => false,\n+            JsonUnusedExterns::Loud | JsonUnusedExterns::Silent => true,\n+        }\n+    }\n+\n+    pub fn is_loud(&self) -> bool {\n+        match self {\n+            JsonUnusedExterns::No | JsonUnusedExterns::Silent => false,\n+            JsonUnusedExterns::Loud => true,\n+        }\n+    }\n+}\n+\n /// Parse the `--json` flag.\n ///\n /// The first value returned is how to render JSON diagnostics, and the second\n@@ -1506,7 +1533,7 @@ pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n         HumanReadableErrorType::Default;\n     let mut json_color = ColorConfig::Never;\n     let mut json_artifact_notifications = false;\n-    let mut json_unused_externs = false;\n+    let mut json_unused_externs = JsonUnusedExterns::No;\n     let mut json_future_incompat = false;\n     for option in matches.opt_strs(\"json\") {\n         // For now conservatively forbid `--color` with `--json` since `--json`\n@@ -1524,7 +1551,8 @@ pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n                 \"diagnostic-short\" => json_rendered = HumanReadableErrorType::Short,\n                 \"diagnostic-rendered-ansi\" => json_color = ColorConfig::Always,\n                 \"artifacts\" => json_artifact_notifications = true,\n-                \"unused-externs\" => json_unused_externs = true,\n+                \"unused-externs\" => json_unused_externs = JsonUnusedExterns::Loud,\n+                \"unused-externs-silent\" => json_unused_externs = JsonUnusedExterns::Silent,\n                 \"future-incompat\" => json_future_incompat = true,\n                 s => early_error(\n                     ErrorOutputType::default(),\n@@ -2224,7 +2252,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     check_debug_option_stability(&debugging_opts, error_format, json_rendered);\n \n-    if !debugging_opts.unstable_options && json_unused_externs {\n+    if !debugging_opts.unstable_options && json_unused_externs.is_enabled() {\n         early_error(\n             error_format,\n             \"the `-Z unstable-options` flag must also be passed to enable \\"}, {"sha": "14e918660dd39f47341ef76851ab35e5993ddbe3", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6bafa7322943643f37f8818bcb16dad28f53d26/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bafa7322943643f37f8818bcb16dad28f53d26/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=c6bafa7322943643f37f8818bcb16dad28f53d26", "patch": "@@ -221,7 +221,7 @@ top_level_options!(\n         json_artifact_notifications: bool [TRACKED],\n \n         /// `true` if we're emitting a JSON blob containing the unused externs\n-        json_unused_externs: bool [UNTRACKED],\n+        json_unused_externs: JsonUnusedExterns [UNTRACKED],\n \n         /// `true` if we're emitting a JSON job containing a future-incompat report for lints\n         json_future_incompat: bool [TRACKED],"}, {"sha": "1ff2c8191e562ef3a79bbd2c3e5dbdaadfe307d1", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6bafa7322943643f37f8818bcb16dad28f53d26/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bafa7322943643f37f8818bcb16dad28f53d26/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=c6bafa7322943643f37f8818bcb16dad28f53d26", "patch": "@@ -10,7 +10,9 @@ use rustc_session::config::{\n     self, parse_crate_types_from_list, parse_externs, parse_target_triple, CrateType,\n };\n use rustc_session::config::{get_cmd_lint_options, nightly_options};\n-use rustc_session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n+use rustc_session::config::{\n+    CodegenOptions, DebuggingOptions, ErrorOutputType, Externs, JsonUnusedExterns,\n+};\n use rustc_session::getopts;\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n@@ -147,7 +149,7 @@ crate struct Options {\n     /// documentation.\n     crate run_check: bool,\n     /// Whether doctests should emit unused externs\n-    crate json_unused_externs: bool,\n+    crate json_unused_externs: JsonUnusedExterns,\n     /// Whether to skip capturing stdout and stderr of tests.\n     crate nocapture: bool,\n "}, {"sha": "82e367427ef6ff757d9a6838e3a03cb4c828bf1e", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6bafa7322943643f37f8818bcb16dad28f53d26/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bafa7322943643f37f8818bcb16dad28f53d26/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=c6bafa7322943643f37f8818bcb16dad28f53d26", "patch": "@@ -168,7 +168,7 @@ crate fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n \n     // Collect and warn about unused externs, but only if we've gotten\n     // reports for each doctest\n-    if json_unused_externs {\n+    if json_unused_externs.is_enabled() {\n         let unused_extern_reports: Vec<_> =\n             std::mem::take(&mut unused_extern_reports.lock().unwrap());\n         if unused_extern_reports.len() == compiling_test_count {\n@@ -337,7 +337,7 @@ fn run_test(\n     if lang_string.test_harness {\n         compiler.arg(\"--test\");\n     }\n-    if rustdoc_options.json_unused_externs && !lang_string.compile_fail {\n+    if rustdoc_options.json_unused_externs.is_enabled() && !lang_string.compile_fail {\n         compiler.arg(\"--error-format=json\");\n         compiler.arg(\"--json\").arg(\"unused-externs\");\n         compiler.arg(\"-Z\").arg(\"unstable-options\");"}, {"sha": "fd9a61d6caa25dae560f3921de8a0993b6ca535f", "filename": "src/test/ui/unused-crate-deps/deny-cmdline-json-silent.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6bafa7322943643f37f8818bcb16dad28f53d26/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bafa7322943643f37f8818bcb16dad28f53d26/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.rs?ref=c6bafa7322943643f37f8818bcb16dad28f53d26", "patch": "@@ -0,0 +1,8 @@\n+// Check for unused crate dep, json event, deny but we're not reporting that in exit status\n+\n+// edition:2018\n+// check-pass\n+// compile-flags: -Dunused-crate-dependencies -Zunstable-options --json unused-externs-silent --error-format=json\n+// aux-crate:bar=bar.rs\n+\n+fn main() {}"}, {"sha": "595619f3a8a4e728340efacf5b3a817dfa7e1199", "filename": "src/test/ui/unused-crate-deps/deny-cmdline-json-silent.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6bafa7322943643f37f8818bcb16dad28f53d26/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6bafa7322943643f37f8818bcb16dad28f53d26/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fdeny-cmdline-json-silent.stderr?ref=c6bafa7322943643f37f8818bcb16dad28f53d26", "patch": "@@ -0,0 +1 @@\n+{\"lint_level\":\"deny\",\"unused_extern_names\":[\"bar\"]}"}]}