{"sha": "1a61fe4280b476bb2131f76414c32676b91e163c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNjFmZTQyODBiNDc2YmIyMTMxZjc2NDE0YzMyNjc2YjkxZTE2M2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-09T18:26:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-09T18:26:04Z"}, "message": "Test fixes and rebase conflicts from the rollup", "tree": {"sha": "6c045a3ce5fe575f6e4e4663d4e748780e7416cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c045a3ce5fe575f6e4e4663d4e748780e7416cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a61fe4280b476bb2131f76414c32676b91e163c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a61fe4280b476bb2131f76414c32676b91e163c", "html_url": "https://github.com/rust-lang/rust/commit/1a61fe4280b476bb2131f76414c32676b91e163c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a61fe4280b476bb2131f76414c32676b91e163c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2457375534dc51bff5229a21f9966c60d5800c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/2457375534dc51bff5229a21f9966c60d5800c47", "html_url": "https://github.com/rust-lang/rust/commit/2457375534dc51bff5229a21f9966c60d5800c47"}], "stats": {"total": 122, "additions": 62, "deletions": 60}, "files": [{"sha": "b567c747d6ff94da0faf22e00fa7b2b4527ca96f", "filename": "src/doc/guide-crates.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fguide-crates.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fguide-crates.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-crates.md?ref=1a61fe4280b476bb2131f76414c32676b91e163c", "patch": "@@ -32,7 +32,7 @@ two languages for those phrases to be in. We'll use this module layout:\n               +---------+   |   +-----------+\n               |             +---| farewells |\n +---------+   |                 +-----------+\n-| phrases |---+ \n+| phrases |---+\n +---------+   |                  +-----------+\n               |              +---| greetings |\n               +----------+   |   +-----------+\n@@ -219,7 +219,7 @@ Put this in `src/english/greetings.rs`:\n \n fn hello() -> String {\n     \"Hello!\".to_string()\n-}  \n+}\n ```\n \n Put this in `src/english/farewells.rs`:\n@@ -229,7 +229,7 @@ Put this in `src/english/farewells.rs`:\n \n fn goodbye() -> String {\n     \"Goodbye.\".to_string()\n-} \n+}\n ```\n \n Put this in `src/japanese/greetings.rs`:\n@@ -239,7 +239,7 @@ Put this in `src/japanese/greetings.rs`:\n \n fn hello() -> String {\n     \"\u3053\u3093\u306b\u3061\u306f\".to_string()\n-}  \n+}\n ```\n \n Of course, you can copy and paste this from this web page, or just type\n@@ -253,7 +253,7 @@ Put this in `src/japanese/farewells.rs`:\n \n fn goodbye() -> String {\n     \"\u3055\u3088\u3046\u306a\u3089\".to_string()\n-} \n+}\n ```\n \n (This is \"Sayoonara\", if you're curious.)\n@@ -381,11 +381,11 @@ $ cargo run\n /home/you/projects/phrases/src/japanese/greetings.rs:1:1: 3:2 warning: code is never used: `hello`, #[warn(dead_code)] on by default\n /home/you/projects/phrases/src/japanese/greetings.rs:1 fn hello() -> String {\n /home/you/projects/phrases/src/japanese/greetings.rs:2     \"\u3053\u3093\u306b\u3061\u306f\".to_string()\n-/home/you/projects/phrases/src/japanese/greetings.rs:3 } \n+/home/you/projects/phrases/src/japanese/greetings.rs:3 }\n /home/you/projects/phrases/src/japanese/farewells.rs:1:1: 3:2 warning: code is never used: `goodbye`, #[warn(dead_code)] on by default\n /home/you/projects/phrases/src/japanese/farewells.rs:1 fn goodbye() -> String {\n /home/you/projects/phrases/src/japanese/farewells.rs:2     \"\u3055\u3088\u3046\u306a\u3089\".to_string()\n-/home/you/projects/phrases/src/japanese/farewells.rs:3 } \n+/home/you/projects/phrases/src/japanese/farewells.rs:3 }\n      Running `target/phrases`\n Hello in English: Hello!\n Goodbye in English: Goodbye.\n@@ -452,7 +452,7 @@ fn main() {\n \n Rust will give us a compile-time error:\n \n-```{ignore}\n+```{notrust}\n    Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n /home/you/projects/phrases/src/main.rs:4:5: 4:40 error: a value named `hello` has already been imported in this module\n /home/you/projects/phrases/src/main.rs:4 use phrases::japanese::greetings::hello;"}, {"sha": "71ca8913ab34b8443e5eb6de93002a5c82d7b711", "filename": "src/doc/guide-error-handling.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fguide-error-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fguide-error-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-error-handling.md?ref=1a61fe4280b476bb2131f76414c32676b91e163c", "patch": "@@ -2,7 +2,7 @@\n \n > The best-laid plans of mice and men\n > Often go awry\n-> \n+>\n > \"Tae a Moose\", Robert Burns\n \n Sometimes, things just go wrong. It's important to have a plan for when the\n@@ -76,7 +76,7 @@ fn main() {\n \n This will give us an error:\n \n-```{ignore}\n+```{notrust}\n error: non-exhaustive patterns: `_` not covered [E0004]\n ```\n \n@@ -189,7 +189,7 @@ panic!(\"boom\");\n \n gives\n \n-```{ignore}\n+```{notrust}\n task '<main>' panicked at 'boom', hello.rs:2\n ```\n "}, {"sha": "aebafebf98ed376e893084fac84f8e4f51a5597f", "filename": "src/doc/guide-ownership.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fguide-ownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fguide-ownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ownership.md?ref=1a61fe4280b476bb2131f76414c32676b91e163c", "patch": "@@ -130,7 +130,7 @@ fn add_one(mut num: Box<int>) {\n \n This does not compile, and gives us an error:\n \n-```{ignore}\n+```{notrust}\n error: use of moved value: `x`\n    println!(\"{}\", x);\n                   ^\n@@ -406,7 +406,7 @@ fn main() {\n We try to make four `Wheel`s, each with a `Car` that it's attached to. But the\n compiler knows that on the second iteration of the loop, there's a problem:\n \n-```{ignore}\n+```{notrust}\n error: use of moved value: `car`\n     Wheel { size: 360, owner: car };\n                               ^~~"}, {"sha": "206df711c1a53613e75971439d64f36575fd8d5a", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=1a61fe4280b476bb2131f76414c32676b91e163c", "patch": "@@ -84,7 +84,7 @@ println!(\"{}\", x + z);\n \n This gives us an error:\n \n-```{ignore}\n+```{notrust}\n hello.rs:6:24: 6:25 error: mismatched types: expected `int` but found `&int` (expected int but found &-ptr)\n hello.rs:6     println!(\"{}\", x + z);\n                                   ^\n@@ -398,7 +398,7 @@ fn main() {\n \n It gives this error:\n \n-```{ignore}\n+```{notrust}\n test.rs:5:8: 5:10 error: cannot assign to `*x` because it is borrowed\n test.rs:5         *x -= 1;\n                   ^~"}, {"sha": "21043cfef1480e6b41b97963f0f5ce44aade292e", "filename": "src/doc/guide.md", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=1a61fe4280b476bb2131f76414c32676b91e163c", "patch": "@@ -426,7 +426,7 @@ x = 10i;\n \n It will give you this error:\n \n-```{ignore}\n+```{notrust}\n error: re-assignment of immutable variable `x`\n      x = 10i;\n      ^~~~~~~\n@@ -486,7 +486,7 @@ fn main() {\n You can use `cargo build` on the command line to build it. You'll get a warning,\n but it will still print \"Hello, world!\":\n \n-```{ignore}\n+```{notrust}\n    Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)\n src/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variable)] on by default\n src/main.rs:2     let x: int;\n@@ -664,7 +664,7 @@ let y: int = if x == 5i { 10i; } else { 15i; };\n \n Note the semicolons after the 10 and 15. Rust will give us the following error:\n \n-```{ignore}\n+```{notrust}\n error: mismatched types: expected `int` but found `()` (expected int but found ())\n ```\n \n@@ -747,7 +747,7 @@ fn print_number(x, y) {\n \n You get this error:\n \n-```{ignore}\n+```{notrust}\n hello.rs:5:18: 5:19 error: expected `:` but found `,`\n hello.rs:5 fn print_number(x, y) {\n ```\n@@ -1246,7 +1246,7 @@ So what's the big advantage here? Well, there are a few. First of all, `match`\n enforces 'exhaustiveness checking.' Do you see that last arm, the one with the\n underscore (`_`)? If we remove that arm, Rust will give us an error:\n \n-```{ignore}\n+```{notrust}\n error: non-exhaustive patterns: `_` not covered\n ```\n \n@@ -1898,7 +1898,7 @@ Before we move on, let me show you one more Cargo command: `run`. `cargo run`\n is kind of like `cargo build`, but it also then runs the produced executable.\n Try it out:\n \n-```{ignore}\n+```{notrust}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -1996,7 +1996,7 @@ for this example, it is not important.\n \n Let's try to compile this using `cargo build`:\n \n-```{no_run}\n+```{notrust}\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:7:26: 7:34 error: the type of this value must be known in this context\n@@ -2044,7 +2044,7 @@ fn main() {\n \n Try running our new program a few times:\n \n-```{ignore}\n+```{notrust}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2097,7 +2097,7 @@ fn main() {\n \n And trying it out:\n \n-```{ignore}\n+```{notrust}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2152,7 +2152,7 @@ fn cmp(a: int, b: int) -> Ordering {\n \n If we try to compile, we'll get some errors:\n \n-```{ignore}\n+```{notrust}\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:20:15: 20:20 error: mismatched types: expected `int` but found `collections::string::String` (expected int but found struct collections::string::String)\n@@ -2206,7 +2206,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n And try compiling again:\n \n-```{ignore}\n+```{notrust}\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:20:15: 20:20 error: mismatched types: expected `uint` but found `collections::string::String` (expected uint but found struct collections::string::String)\n@@ -2219,7 +2219,7 @@ This error is similar to the last one: we expected to get a `uint`, but we got\n a `String` instead! That's because our `input` variable is coming from the\n standard input, and you can guess anything. Try it:\n \n-```{ignore}\n+```{notrust}\n $ ./target/guessing_game\n Guess the number!\n The secret number is: 73\n@@ -2303,7 +2303,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n Let's try it out!\n \n-```{ignore}\n+```{notrust}\n $ cargo build\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n src/main.rs:22:15: 22:24 error: mismatched types: expected `uint` but found `core::option::Option<uint>` (expected uint but found enum core::option::Option)\n@@ -2362,7 +2362,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n We use a `match` to either give us the `uint` inside of the `Option`, or we\n print an error message and return. Let's give this a shot:\n \n-```{ignore}\n+```{notrust}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2427,7 +2427,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n Let's try it!\n \n-```{ignore}\n+```{notrust}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2504,7 +2504,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n And try it out. But wait, didn't we just add an infinite loop? Yup. Remember\n that `return`? If we give a non-number answer, we'll `return` and quit. Observe:\n \n-```{ignore}\n+```{notrust}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2636,7 +2636,7 @@ fn cmp(a: uint, b: uint) -> Ordering {\n \n Now we should be good! Let's try:\n \n-```{ignore}\n+```{notrust}\n $ cargo run\n    Compiling guessing_game v0.0.1 (file:///home/you/projects/guessing_game)\n      Running `target/guessing_game`\n@@ -2814,7 +2814,7 @@ mod hello {\n \n It gives an error:\n \n-```{ignore}\n+```{notrust}\n    Compiling modules v0.0.1 (file:///home/you/projects/modules)\n src/main.rs:2:5: 2:23 error: function `print_hello` is private\n src/main.rs:2     hello::print_hello();\n@@ -2838,7 +2838,7 @@ mod hello {\n Usage of the `pub` keyword is sometimes called 'exporting', because\n we're making the function available for other modules. This will work:\n \n-```{ignore}\n+```{notrust}\n $ cargo run\n    Compiling modules v0.0.1 (file:///home/you/projects/modules)\n      Running `target/modules`\n@@ -2972,7 +2972,7 @@ $ cd testing\n \n And try it out:\n \n-```{ignore}\n+```{notrust}\n $ cargo run\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n      Running `target/testing`\n@@ -3004,7 +3004,7 @@ you give them descriptive names. You'll see why in a moment. We then use a\n macro, `assert!`, to assert that something is true. In this case, we're giving\n it `false`, so this test should fail. Let's try it!\n \n-```{ignore}\n+```{notrust}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n /home/you/projects/testing/src/main.rs:1:1: 3:2 warning: function is never used: `main`, #[warn(dead_code)] on by default\n@@ -3041,7 +3041,7 @@ $ cargo test\n You can run all of your tests with `cargo test`. This runs both your tests in\n `tests`, as well as the tests you put inside of your crate.\n \n-```{ignore}\n+```{notrust}\n /home/you/projects/testing/src/main.rs:1:1: 3:2 warning: function is never used: `main`, #[warn(dead_code)] on by default\n /home/you/projects/testing/src/main.rs:1 fn main() {\n /home/you/projects/testing/src/main.rs:2     println!(\"Hello, world!\")\n@@ -3067,7 +3067,7 @@ with good names? This is why. Here, it says 'test foo' because we called our\n test 'foo.' If we had given it a good name, it'd be more clear which test\n failed, especially as we accumulate more tests.\n \n-```{ignore}\n+```{notrust}\n failures:\n \n ---- foo stdout ----\n@@ -3169,7 +3169,7 @@ fn math_checks_out() {\n \n And try to run the test:\n \n-```{ignore}\n+```{notrust}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n /home/you/projects/testing/tests/lib.rs:3:18: 3:38 error: unresolved name `add_three_times_four`.\n@@ -3332,7 +3332,7 @@ fn test_add_three() {\n \n We'd get this error:\n \n-```{ignore}\n+```{notrust}\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n /home/you/projects/testing/tests/lib.rs:3:5: 3:24 error: function `add_three` is private\n /home/you/projects/testing/tests/lib.rs:3 use testing::add_three;\n@@ -3504,7 +3504,7 @@ let y = &mut x;\n \n Rust will complain:\n \n-```{ignore}\n+```{notrust}\n error: cannot borrow immutable local variable `x` as mutable\n  let y = &mut x;\n               ^\n@@ -3531,7 +3531,7 @@ let z = &mut x;\n \n It gives us this error:\n \n-```{ignore}\n+```{notrust}\n error: cannot borrow `x` as mutable more than once at a time\n      let z = &mut x;\n                   ^\n@@ -3677,7 +3677,7 @@ let z = &mut x;\n \n The error:\n \n-```{ignore}\n+```{notrust}\n error: cannot borrow `x` as mutable more than once at a time\n      let z = &mut x;\n                   ^\n@@ -3695,7 +3695,7 @@ note: previous borrow ends here\n \n This error comes in three parts. Let's go over each in turn.\n \n-```{ignore}\n+```{notrust}\n error: cannot borrow `x` as mutable more than once at a time\n      let z = &mut x;\n                   ^\n@@ -3704,7 +3704,7 @@ error: cannot borrow `x` as mutable more than once at a time\n This error states the restriction: you cannot lend out something mutable more\n than once at the same time. The borrow checker knows the rules!\n \n-```{ignore}\n+```{notrust}\n note: previous borrow of `x` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `x` until the borrow ends\n      let y = &mut x;\n                   ^\n@@ -3819,7 +3819,7 @@ let y = &mut x;\n \n This gives us this error:\n \n-```{ignore}\n+```{notrust}\n error: cannot use `*x` because it was mutably borrowed\n  *x;\n  ^~\n@@ -4887,7 +4887,7 @@ We can then use `T` inside the rest of the signature: `x` has type `T`, and half\n of the `Result` has type `T`. However, if we try to compile that example, we'll get\n an error:\n \n-```{ignore}\n+```{notrust}\n error: binary operation `==` cannot be applied to type `T`\n ```\n \n@@ -4943,7 +4943,7 @@ we use `impl Trait for Item`, rather than just `impl Item`.\n So what's the big deal? Remember the error we were getting with our generic\n `inverse` function?\n \n-```{ignore}\n+```{notrust}\n error: binary operation `==` cannot be applied to type `T`\n ```\n \n@@ -4958,7 +4958,7 @@ fn print_area<T>(shape: T) {\n \n Rust complains:\n \n-```{ignore}\n+```{notrust}\n error: type `T` does not implement any method in scope named `area`\n ```\n \n@@ -5115,7 +5115,7 @@ fn main() {\n Now that we've moved the structs and traits into their own module, we get an\n error:\n \n-```{ignore}\n+```{notrust}\n error: type `shapes::Circle` does not implement any method in scope named `area`\n ```\n "}, {"sha": "e2cccef5b4a1d13afadaf7546874bd4660df5c7d", "filename": "src/doc/intro.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=1a61fe4280b476bb2131f76414c32676b91e163c", "patch": "@@ -58,7 +58,7 @@ authors = [\"Your Name <you@example.com>\"]\n ```\n \n This is called a **manifest**, and it contains all of the metadata that Cargo\n-needs to compile your project. \n+needs to compile your project.\n \n Here's what's in `src/main.rs`:\n \n@@ -207,7 +207,7 @@ and two...\n \n ```{bash}\n $ g++ hello.cpp -Wall -Werror\n-$ ./a.out \n+$ ./a.out\n Segmentation fault (core dumped)\n ```\n \n@@ -313,7 +313,7 @@ print `\"Hello\"`, or does Rust crash?\n \n Neither. It refuses to compile:\n \n-```{ignore}\n+```{notrust}\n $ cargo run\n    Compiling hello_world v0.0.1 (file:///Users/you/src/hello_world)\n main.rs:8:5: 8:6 error: cannot borrow `v` as mutable because it is also borrowed as immutable\n@@ -428,7 +428,7 @@ fn main() {\n \n It gives us this error:\n \n-```{ignore}\n+```{notrust}\n 6:71 error: capture of moved value: `numbers`\n     for j in range(0, 3) { numbers[j] += 1 }\n                ^~~~~~~"}, {"sha": "4235531c199a2f09a917ba739a2d279925290687", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=1a61fe4280b476bb2131f76414c32676b91e163c", "patch": "@@ -44,7 +44,7 @@\n pub use self::Ordering::*;\n \n use kinds::{Copy, Sized};\n-use option::{Option, Some, None};\n+use option::Option::{mod, Some, None};\n \n /// Trait for values that can be compared for equality and inequality.\n ///"}, {"sha": "0697dfbb0f2e4bae53f8460de8fb84ca40a40c38", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=1a61fe4280b476bb2131f76414c32676b91e163c", "patch": "@@ -143,6 +143,9 @@\n \n #![stable]\n \n+#[cfg(stage0)]\n+pub use self::Option::*;\n+#[cfg(not(stage0))]\n use self::Option::*;\n \n use cmp::{Eq, Ord};"}, {"sha": "6c91010f4cb35730c82ff2dc5a804e06f134a0b1", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=1a61fe4280b476bb2131f76414c32676b91e163c", "patch": "@@ -1995,21 +1995,21 @@ mod tests {\n \n     #[test]\n     fn memory_map_file() {\n+        use libc;\n         use os::*;\n         use io::fs::{File, unlink};\n         use io::SeekStyle::SeekSet;\n         use io::FileMode::Open;\n         use io::FileAccess::ReadWrite;\n-        use libc::HANDLE;\n \n         #[cfg(not(windows))]\n-        fn get_fd(file: &File) -> c_int {\n+        fn get_fd(file: &File) -> libc::c_int {\n             use os::unix::AsRawFd;\n             file.as_raw_fd()\n         }\n \n         #[cfg(windows)]\n-        fn get_fd(file: &File) -> HANDLE {\n+        fn get_fd(file: &File) -> libc::HANDLE {\n             use os::windows::AsRawHandle;\n             file.as_raw_handle()\n         }"}, {"sha": "817582a877fa9e8fb2d48c0d7fb7e8feb989f0d8", "filename": "src/test/compile-fail/lifetime-elision-return-type-requires-explicit-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs?ref=1a61fe4280b476bb2131f76414c32676b91e163c", "patch": "@@ -33,7 +33,6 @@ fn h(_x: &Foo) -> &int { //~ ERROR missing lifetime specifier\n \n fn i(_x: int) -> &int { //~ ERROR missing lifetime specifier\n //~^ HELP this function's return type contains a borrowed value\n-//~^^ HELP consider giving it a 'static lifetime\n     panic!()\n }\n "}, {"sha": "ccd5a225222da2e29bcbde97da17aa5cba88b76a", "filename": "src/test/run-pass/ufcs-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Ftest%2Frun-pass%2Fufcs-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a61fe4280b476bb2131f76414c32676b91e163c/src%2Ftest%2Frun-pass%2Fufcs-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-type-params.rs?ref=1a61fe4280b476bb2131f76414c32676b91e163c", "patch": "@@ -18,5 +18,5 @@ impl Foo<i32> for i32 {\n \n fn main() {\n     let x: i32 = 1;\n-    Foo::<i32>::get(&x)\n+    Foo::<i32>::get(&x);\n }"}]}