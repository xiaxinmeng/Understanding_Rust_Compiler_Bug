{"sha": "3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "node_id": "C_kwDOAAsO6NoAKDM0NjJmNzllOTRmNDY2YTU2ZGRhY2NmY2RkM2EzZDQ0ZGQxZGRhOWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T13:34:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T13:34:31Z"}, "message": "Auto merge of #108118 - oli-obk:lazy_typeck, r=cjgillot\n\nRun various queries from other queries instead of explicitly in phases\n\nThese are just legacy leftovers from when rustc didn't have a query system. While there are more cleanups of this sort that can be done here, I want to land them in smaller steps.\n\nThis phased order of query invocations was already a lie, as any query that looks at types (e.g. the wf checks run before) can invoke e.g. const eval which invokes borrowck, which invokes typeck, ...", "tree": {"sha": "d9290e986ca70199a6b61e4324a8206fc994374c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9290e986ca70199a6b61e4324a8206fc994374c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "html_url": "https://github.com/rust-lang/rust/commit/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e540df7931a32ca286eb2e907afde78b718fd17", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e540df7931a32ca286eb2e907afde78b718fd17", "html_url": "https://github.com/rust-lang/rust/commit/9e540df7931a32ca286eb2e907afde78b718fd17"}, {"sha": "334423263a347b38ed0040be788feb3a4197c056", "url": "https://api.github.com/repos/rust-lang/rust/commits/334423263a347b38ed0040be788feb3a4197c056", "html_url": "https://github.com/rust-lang/rust/commit/334423263a347b38ed0040be788feb3a4197c056"}], "stats": {"total": 823, "additions": 400, "deletions": 423}, "files": [{"sha": "73ecd99c04a77eb0a77c6caebc51358ee4aa2d35", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -124,7 +124,7 @@ pub fn provide(providers: &mut Providers) {\n \n fn mir_borrowck(tcx: TyCtxt<'_>, def: LocalDefId) -> &BorrowCheckResult<'_> {\n     let (input_body, promoted) = tcx.mir_promoted(def);\n-    debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def.to_def_id()));\n+    debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def));\n \n     if input_body.borrow().should_skip() {\n         debug!(\"Skipping borrowck because of injected body\");"}, {"sha": "ad2624a5d2d7baced150077ec9a6b60c2a12cd3e", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -494,7 +494,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n     debug!(\n         \"check_item_type(it.def_id={:?}, it.name={})\",\n         id.owner_id,\n-        tcx.def_path_str(id.owner_id.to_def_id())\n+        tcx.def_path_str(id.owner_id)\n     );\n     let _indenter = indenter();\n     match tcx.def_kind(id.owner_id) {"}, {"sha": "b2ebbf993a1ccd5b60a0db1f2c27cf4b4d4f8890", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -155,7 +155,7 @@ fn check_item<'tcx>(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n \n     debug!(\n         ?item.owner_id,\n-        item.name = ? tcx.def_path_str(def_id.to_def_id())\n+        item.name = ? tcx.def_path_str(def_id)\n     );\n \n     match item.kind {\n@@ -251,7 +251,7 @@ fn check_foreign_item(tcx: TyCtxt<'_>, item: &hir::ForeignItem<'_>) {\n \n     debug!(\n         ?item.owner_id,\n-        item.name = ? tcx.def_path_str(def_id.to_def_id())\n+        item.name = ? tcx.def_path_str(def_id)\n     );\n \n     match item.kind {"}, {"sha": "ac393ee15a6842f3619fc8bc30c131693ab4f350", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -22,7 +22,7 @@ fn check_impl(tcx: TyCtxt<'_>, impl_def_id: LocalDefId, trait_ref: ty::TraitRef<\n     debug!(\n         \"(checking implementation) adding impl for trait '{:?}', item '{}'\",\n         trait_ref,\n-        tcx.def_path_str(impl_def_id.to_def_id())\n+        tcx.def_path_str(impl_def_id)\n     );\n \n     // Skip impls where one of the self type is an error type."}, {"sha": "a4b797f77f7fe59d7b63f10f8ecaf120fd59b6f1", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -496,8 +496,6 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorGuaranteed> {\n         tcx.hir().for_each_module(|module| tcx.ensure().check_mod_item_types(module))\n     });\n \n-    tcx.sess.time(\"item_bodies_checking\", || tcx.typeck_item_bodies(()));\n-\n     check_unused::check_crate(tcx);\n     check_for_entry_fn(tcx);\n "}, {"sha": "6f0afae1b4c683e96c572d405c0ae0c8b1c2133b", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n     fn build_constraints_for_item(&mut self, def_id: LocalDefId) {\n         let tcx = self.tcx();\n-        debug!(\"build_constraints_for_item({})\", tcx.def_path_str(def_id.to_def_id()));\n+        debug!(\"build_constraints_for_item({})\", tcx.def_path_str(def_id));\n \n         // Skip items with no generics - there's nothing to infer in them.\n         if tcx.generics_of(def_id).count() == 0 {"}, {"sha": "5ccac9a69252da9b32473d1ebbc4ff8ac3422fbe", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -152,10 +152,6 @@ fn used_trait_imports(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &UnordSet<LocalDef\n     &*tcx.typeck(def_id).used_trait_imports\n }\n \n-fn typeck_item_bodies(tcx: TyCtxt<'_>, (): ()) {\n-    tcx.hir().par_body_owners(|body_owner_def_id| tcx.ensure().typeck(body_owner_def_id));\n-}\n-\n fn typeck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &ty::TypeckResults<'tcx> {\n     let fallback = move || tcx.type_of(def_id.to_def_id()).subst_identity();\n     typeck_with_fallback(tcx, def_id, fallback)\n@@ -479,7 +475,6 @@ fn has_expected_num_generic_args(\n pub fn provide(providers: &mut Providers) {\n     method::provide(providers);\n     *providers = Providers {\n-        typeck_item_bodies,\n         typeck,\n         diagnostic_only_typeck,\n         has_typeck_results,"}, {"sha": "61923db9623baaeceecc8833f14b84c51f33027d", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -761,27 +761,6 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n     // passes are timed inside typeck\n     rustc_hir_analysis::check_crate(tcx)?;\n \n-    sess.time(\"misc_checking_2\", || {\n-        parallel!(\n-            {\n-                sess.time(\"match_checking\", || {\n-                    tcx.hir().par_body_owners(|def_id| tcx.ensure().check_match(def_id))\n-                });\n-            },\n-            {\n-                sess.time(\"liveness_checking\", || {\n-                    tcx.hir().par_body_owners(|def_id| {\n-                        // this must run before MIR dump, because\n-                        // \"not all control paths return a value\" is reported here.\n-                        //\n-                        // maybe move the check to a MIR pass?\n-                        tcx.ensure().check_liveness(def_id.to_def_id());\n-                    });\n-                });\n-            }\n-        );\n-    });\n-\n     sess.time(\"MIR_borrow_checking\", || {\n         tcx.hir().par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id));\n     });"}, {"sha": "2dc5b8969934f2cf4d7c3ae65c0411baec3446e2", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -364,7 +364,7 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for HirId {\n     #[inline(always)]\n     fn to_debug_str(&self, tcx: TyCtxt<'tcx>) -> String {\n         let HirId { owner, local_id } = *self;\n-        format!(\"{}.{}\", tcx.def_path_str(owner.to_def_id()), local_id.as_u32())\n+        format!(\"{}.{}\", tcx.def_path_str(owner), local_id.as_u32())\n     }\n \n     #[inline(always)]"}, {"sha": "5c01a6613263d796d52cff80617c57a1dcae592a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -1217,7 +1217,7 @@ fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {\n }\n \n fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n-    let path_str = |def_id: LocalDefId| map.tcx.def_path_str(def_id.to_def_id());\n+    let path_str = |def_id: LocalDefId| map.tcx.def_path_str(def_id);\n \n     let span_str = || map.tcx.sess.source_map().span_to_snippet(map.span(id)).unwrap_or_default();\n     let node_str = |prefix| format!(\"{id} ({prefix} `{}`)\", span_str());"}, {"sha": "4b7bc60926ebdfdc15dfcf2a33bca50173398d69", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 35, "deletions": 39, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -83,7 +83,7 @@ rustc_queries! {\n     /// Avoid calling this query directly.\n     query hir_module_items(key: LocalDefId) -> &'tcx rustc_middle::hir::ModuleItems {\n         arena_cache\n-        desc { |tcx| \"getting HIR module items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR module items in `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n \n@@ -92,14 +92,14 @@ rustc_queries! {\n     /// This can be conveniently accessed by methods on `tcx.hir()`.\n     /// Avoid calling this query directly.\n     query hir_owner(key: hir::OwnerId) -> Option<crate::hir::Owner<'tcx>> {\n-        desc { |tcx| \"getting HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR owner of `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Gives access to the HIR ID for the given `LocalDefId` owner `key` if any.\n     ///\n     /// Definitions that were generated with no HIR, would be fed to return `None`.\n     query opt_local_def_id_to_hir_id(key: LocalDefId) -> Option<hir::HirId>{\n-        desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key) }\n         feedable\n     }\n \n@@ -108,23 +108,23 @@ rustc_queries! {\n     /// This can be conveniently accessed by methods on `tcx.hir()`.\n     /// Avoid calling this query directly.\n     query hir_owner_parent(key: hir::OwnerId) -> hir::HirId {\n-        desc { |tcx| \"getting HIR parent of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR parent of `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Gives access to the HIR nodes and bodies inside the HIR owner `key`.\n     ///\n     /// This can be conveniently accessed by methods on `tcx.hir()`.\n     /// Avoid calling this query directly.\n     query hir_owner_nodes(key: hir::OwnerId) -> hir::MaybeOwner<&'tcx hir::OwnerNodes<'tcx>> {\n-        desc { |tcx| \"getting HIR owner items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR owner items in `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Gives access to the HIR attributes inside the HIR owner `key`.\n     ///\n     /// This can be conveniently accessed by methods on `tcx.hir()`.\n     /// Avoid calling this query directly.\n     query hir_attrs(key: hir::OwnerId) -> &'tcx hir::AttributeMap<'tcx> {\n-        desc { |tcx| \"getting HIR owner attributes in `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR owner attributes in `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Given the def_id of a const-generic parameter, computes the associated default const\n@@ -295,7 +295,7 @@ rustc_queries! {\n     query shallow_lint_levels_on(key: hir::OwnerId) -> &'tcx rustc_middle::lint::ShallowLintLevelMap {\n         eval_always // fetches `resolutions`\n         arena_cache\n-        desc { |tcx| \"looking up lint levels for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"looking up lint levels for `{}`\", tcx.def_path_str(key) }\n     }\n \n     query lint_expectations(_: ()) -> &'tcx Vec<(LintExpectationId, LintExpectation)> {\n@@ -305,7 +305,7 @@ rustc_queries! {\n \n     query parent_module_from_def_id(key: LocalDefId) -> LocalDefId {\n         eval_always\n-        desc { |tcx| \"getting the parent module of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting the parent module of `{}`\", tcx.def_path_str(key) }\n     }\n \n     query expn_that_defined(key: DefId) -> rustc_span::ExpnId {\n@@ -321,7 +321,7 @@ rustc_queries! {\n \n     /// Checks whether a type is representable or infinitely sized\n     query representability(_: LocalDefId) -> rustc_middle::ty::Representability {\n-        desc { \"checking if `{}` is representable\", tcx.def_path_str(key.to_def_id()) }\n+        desc { \"checking if `{}` is representable\", tcx.def_path_str(key) }\n         // infinitely sized types will cause a cycle\n         cycle_delay_bug\n         // we don't want recursive representability calls to be forced with\n@@ -349,21 +349,21 @@ rustc_queries! {\n     query thir_body(key: LocalDefId) -> Result<(&'tcx Steal<thir::Thir<'tcx>>, thir::ExprId), ErrorGuaranteed> {\n         // Perf tests revealed that hashing THIR is inefficient (see #85729).\n         no_hash\n-        desc { |tcx| \"building THIR for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"building THIR for `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Create a THIR tree for debugging.\n     query thir_tree(key: LocalDefId) -> &'tcx String {\n         no_hash\n         arena_cache\n-        desc { |tcx| \"constructing THIR tree for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"constructing THIR tree for `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Create a list-like THIR representation for debugging.\n     query thir_flat(key: LocalDefId) -> &'tcx String {\n         no_hash\n         arena_cache\n-        desc { |tcx| \"constructing flat THIR representation for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"constructing flat THIR representation for `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Set of all the `DefId`s in this crate that have MIR associated with\n@@ -386,15 +386,15 @@ rustc_queries! {\n     /// Fetch the MIR for a given `DefId` right after it's built - this includes\n     /// unreachable code.\n     query mir_built(key: LocalDefId) -> &'tcx Steal<mir::Body<'tcx>> {\n-        desc { |tcx| \"building MIR for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"building MIR for `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Fetch the MIR for a given `DefId` up till the point where it is\n     /// ready for const qualification.\n     ///\n     /// See the README for the `mir` module for details.\n     query mir_const(key: LocalDefId) -> &'tcx Steal<mir::Body<'tcx>> {\n-        desc { |tcx| \"preparing `{}` for borrow checking\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"preparing `{}` for borrow checking\", tcx.def_path_str(key) }\n         no_hash\n     }\n \n@@ -410,7 +410,7 @@ rustc_queries! {\n \n     query mir_drops_elaborated_and_const_checked(key: LocalDefId) -> &'tcx Steal<mir::Body<'tcx>> {\n         no_hash\n-        desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key) }\n     }\n \n     query mir_for_ctfe(\n@@ -426,13 +426,13 @@ rustc_queries! {\n         &'tcx Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n     ) {\n         no_hash\n-        desc { |tcx| \"promoting constants in MIR for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"promoting constants in MIR for `{}`\", tcx.def_path_str(key) }\n     }\n \n     query closure_typeinfo(key: LocalDefId) -> ty::ClosureTypeInfo<'tcx> {\n         desc {\n             |tcx| \"finding symbols for captures of closure `{}`\",\n-            tcx.def_path_str(key.to_def_id())\n+            tcx.def_path_str(key)\n         }\n     }\n \n@@ -444,7 +444,7 @@ rustc_queries! {\n     }\n \n     query check_generator_obligations(key: LocalDefId) {\n-        desc { |tcx| \"verify auto trait bounds for generator interior type `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"verify auto trait bounds for generator interior type `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// MIR after our optimization passes have run. This is MIR that is ready\n@@ -526,7 +526,7 @@ rustc_queries! {\n     /// `explicit_predicates_of` and `explicit_item_bounds` will then take\n     /// the appropriate subsets of the predicates here.\n     query trait_explicit_predicates_and_bounds(key: LocalDefId) -> ty::GenericPredicates<'tcx> {\n-        desc { |tcx| \"computing explicit predicates of trait `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"computing explicit predicates of trait `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Returns the predicates written explicitly by the user.\n@@ -769,14 +769,14 @@ rustc_queries! {\n \n     /// The result of unsafety-checking this `LocalDefId`.\n     query unsafety_check_result(key: LocalDefId) -> &'tcx mir::UnsafetyCheckResult {\n-        desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n \n     /// Unsafety-check this `LocalDefId` with THIR unsafeck. This should be\n     /// used with `-Zthir-unsafeck`.\n     query thir_check_unsafety(key: LocalDefId) {\n-        desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n \n@@ -833,7 +833,7 @@ rustc_queries! {\n         desc { |tcx| \"checking privacy in {}\", describe_as_module(key, tcx) }\n     }\n \n-    query check_liveness(key: DefId) {\n+    query check_liveness(key: LocalDefId) {\n         desc { |tcx| \"checking liveness of variables in `{}`\", tcx.def_path_str(key) }\n     }\n \n@@ -872,21 +872,17 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query typeck_item_bodies(_: ()) -> () {\n-        desc { \"type-checking all item bodies\" }\n-    }\n-\n     query typeck(key: LocalDefId) -> &'tcx ty::TypeckResults<'tcx> {\n-        desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n     query diagnostic_only_typeck(key: LocalDefId) -> &'tcx ty::TypeckResults<'tcx> {\n-        desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n \n     query used_trait_imports(key: LocalDefId) -> &'tcx UnordSet<LocalDefId> {\n-        desc { |tcx| \"finding used_trait_imports `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"finding used_trait_imports `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n \n@@ -901,7 +897,7 @@ rustc_queries! {\n     /// Borrow-checks the function body. If this is a closure, returns\n     /// additional requirements that the closure's creator must verify.\n     query mir_borrowck(key: LocalDefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n-        desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if(tcx) { tcx.is_typeck_child(key.to_def_id()) }\n     }\n \n@@ -923,7 +919,7 @@ rustc_queries! {\n     query orphan_check_impl(key: LocalDefId) -> Result<(), ErrorGuaranteed> {\n         desc { |tcx|\n             \"checking whether impl `{}` follows the orphan rules\",\n-            tcx.def_path_str(key.to_def_id()),\n+            tcx.def_path_str(key),\n         }\n     }\n \n@@ -935,7 +931,7 @@ rustc_queries! {\n         desc { |tcx|\n             \"computing if `{}` (transitively) calls `{}`\",\n             key.0,\n-            tcx.def_path_str(key.1.to_def_id()),\n+            tcx.def_path_str(key.1),\n         }\n     }\n \n@@ -1026,7 +1022,7 @@ rustc_queries! {\n     }\n \n     query check_match(key: LocalDefId) {\n-        desc { |tcx| \"match-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"match-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n \n@@ -1366,7 +1362,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n     query has_ffi_unwind_calls(key: LocalDefId) -> bool {\n-        desc { |tcx| \"checking if `{}` contains FFI-unwind calls\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"checking if `{}` contains FFI-unwind calls\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n     query required_panic_strategy(_: CrateNum) -> Option<PanicStrategy> {\n@@ -1412,7 +1408,7 @@ rustc_queries! {\n     }\n \n     query check_well_formed(key: hir::OwnerId) -> () {\n-        desc { |tcx| \"checking that `{}` is well-formed\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"checking that `{}` is well-formed\", tcx.def_path_str(key) }\n     }\n \n     // The `DefId`s of all non-generic functions and statics in the given crate\n@@ -1441,7 +1437,7 @@ rustc_queries! {\n     query is_unreachable_local_definition(def_id: LocalDefId) -> bool {\n         desc { |tcx|\n             \"checking whether `{}` is reachable from outside the crate\",\n-            tcx.def_path_str(def_id.to_def_id()),\n+            tcx.def_path_str(def_id),\n         }\n     }\n \n@@ -1635,7 +1631,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n     query extern_mod_stmt_cnum(def_id: LocalDefId) -> Option<CrateNum> {\n-        desc { |tcx| \"computing crate imported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n+        desc { |tcx| \"computing crate imported by `{}`\", tcx.def_path_str(def_id) }\n     }\n \n     query lib_features(_: ()) -> &'tcx LibFeatures {\n@@ -1735,7 +1731,7 @@ rustc_queries! {\n         desc { \"fetching potentially unused trait imports\" }\n     }\n     query names_imported_by_glob_use(def_id: LocalDefId) -> &'tcx UnordSet<Symbol> {\n-        desc { |tcx| \"finding names imported by glob use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n+        desc { |tcx| \"finding names imported by glob use for `{}`\", tcx.def_path_str(def_id) }\n     }\n \n     query stability_index(_: ()) -> &'tcx stability::Index {\n@@ -2058,7 +2054,7 @@ rustc_queries! {\n     query compare_impl_const(\n         key: (LocalDefId, DefId)\n     ) -> Result<(), ErrorGuaranteed> {\n-        desc { |tcx| \"checking assoc const `{}` has the same type as trait item\", tcx.def_path_str(key.0.to_def_id()) }\n+        desc { |tcx| \"checking assoc const `{}` has the same type as trait item\", tcx.def_path_str(key.0) }\n     }\n \n     query deduced_param_attrs(def_id: DefId) -> &'tcx [ty::DeducedParamAttrs] {"}, {"sha": "80d28b2e18832d5ff9ed204ea0a8072923845739", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -80,6 +80,8 @@ use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n \n+use super::query::IntoQueryParam;\n+\n const TINY_CONST_EVAL_LIMIT: Limit = Limit(20);\n \n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n@@ -824,7 +826,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.features_query(())\n     }\n \n-    pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {\n+    pub fn def_key(self, id: impl IntoQueryParam<DefId>) -> rustc_hir::definitions::DefKey {\n+        let id = id.into_query_param();\n         // Accessing the DefKey is ok, since it is part of DefPathHash.\n         if let Some(id) = id.as_local() {\n             self.definitions_untracked().def_key(id)"}, {"sha": "5ce32c7aaaa30e83fa2ed6c511337c027dc9c6f5", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -327,6 +327,6 @@ pub fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n     if def_id.is_top_level_module() {\n         \"top-level module\".to_string()\n     } else {\n-        format!(\"module `{}`\", tcx.def_path_str(def_id.to_def_id()))\n+        format!(\"module `{}`\", tcx.def_path_str(def_id))\n     }\n }"}, {"sha": "4c95d0f841514f04e10302a355b3bb15ccd3aed2", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -1,4 +1,5 @@\n use crate::mir::interpret::{AllocRange, GlobalAlloc, Pointer, Provenance, Scalar};\n+use crate::ty::query::IntoQueryParam;\n use crate::ty::{\n     self, ConstInt, ParamConst, ScalarInt, Term, TermKind, Ty, TyCtxt, TypeFoldable,\n     TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n@@ -1801,17 +1802,27 @@ fn guess_def_namespace(tcx: TyCtxt<'_>, def_id: DefId) -> Namespace {\n impl<'t> TyCtxt<'t> {\n     /// Returns a string identifying this `DefId`. This string is\n     /// suitable for user output.\n-    pub fn def_path_str(self, def_id: DefId) -> String {\n+    pub fn def_path_str(self, def_id: impl IntoQueryParam<DefId>) -> String {\n         self.def_path_str_with_substs(def_id, &[])\n     }\n \n-    pub fn def_path_str_with_substs(self, def_id: DefId, substs: &'t [GenericArg<'t>]) -> String {\n+    pub fn def_path_str_with_substs(\n+        self,\n+        def_id: impl IntoQueryParam<DefId>,\n+        substs: &'t [GenericArg<'t>],\n+    ) -> String {\n+        let def_id = def_id.into_query_param();\n         let ns = guess_def_namespace(self, def_id);\n         debug!(\"def_path_str: def_id={:?}, ns={:?}\", def_id, ns);\n         FmtPrinter::new(self, ns).print_def_path(def_id, substs).unwrap().into_buffer()\n     }\n \n-    pub fn value_path_str_with_substs(self, def_id: DefId, substs: &'t [GenericArg<'t>]) -> String {\n+    pub fn value_path_str_with_substs(\n+        self,\n+        def_id: impl IntoQueryParam<DefId>,\n+        substs: &'t [GenericArg<'t>],\n+    ) -> String {\n+        let def_id = def_id.into_query_param();\n         let ns = guess_def_namespace(self, def_id);\n         debug!(\"value_path_str: def_id={:?}, ns={:?}\", def_id, ns);\n         FmtPrinter::new(self, ns).print_value_path(def_id, substs).unwrap().into_buffer()"}, {"sha": "bd8a22473fb51262271f7e737b4fa8a518fad9a9", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -587,7 +587,7 @@ mod sealed {\n     }\n }\n \n-use sealed::IntoQueryParam;\n+pub use sealed::IntoQueryParam;\n \n impl<'tcx> TyCtxt<'tcx> {\n     pub fn def_kind(self, def_id: impl IntoQueryParam<DefId>) -> DefKind {"}, {"sha": "5c38c0acc7f86c220acf195a4036df5bc7e31d9b", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -158,8 +158,8 @@ pub fn recursive_type_error(\n     }\n     let items_list = {\n         let mut s = String::new();\n-        for (i, (item_id, _)) in item_and_field_ids.iter().enumerate() {\n-            let path = tcx.def_path_str(item_id.to_def_id());\n+        for (i, &(item_id, _)) in item_and_field_ids.iter().enumerate() {\n+            let path = tcx.def_path_str(item_id);\n             write!(&mut s, \"`{path}`\").unwrap();\n             if i == (ITEM_LIMIT - 1) && cycle_len > ITEM_LIMIT {\n                 write!(&mut s, \" and {} more\", cycle_len - 5).unwrap();"}, {"sha": "82274318dcf32f2828775013a8a32494a71e07e9", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -51,6 +51,13 @@ fn mir_build(tcx: TyCtxt<'_>, def: LocalDefId) -> Body<'_> {\n             // of `mir_build`, so now we can steal it\n             let thir = thir.steal();\n \n+            tcx.ensure().check_match(def);\n+            // this must run before MIR dump, because\n+            // \"not all control paths return a value\" is reported here.\n+            //\n+            // maybe move the check to a MIR pass?\n+            tcx.ensure().check_liveness(def);\n+\n             match thir.body_type {\n                 thir::BodyTy::Fn(fn_sig) => construct_fn(tcx, def, &thir, expr, fn_sig),\n                 thir::BodyTy::Const(ty) => construct_const(tcx, def, &thir, expr, ty),"}, {"sha": "098ce0391fcd26ad619544add39893e1d862a863", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn mir_callgraph_reachable<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (root, target): (ty::Instance<'tcx>, LocalDefId),\n ) -> bool {\n-    trace!(%root, target = %tcx.def_path_str(target.to_def_id()));\n+    trace!(%root, target = %tcx.def_path_str(target));\n     let param_env = tcx.param_env_reveal_all_normalized(target);\n     assert_ne!(\n         root.def_id().expect_local(),"}, {"sha": "5ac9c8e2073dd6cff9dd61f27c9bdc3f37aadc7e", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -1230,7 +1230,7 @@ impl<'v> RootCollector<'_, 'v> {\n             DefKind::GlobalAsm => {\n                 debug!(\n                     \"RootCollector: ItemKind::GlobalAsm({})\",\n-                    self.tcx.def_path_str(id.owner_id.to_def_id())\n+                    self.tcx.def_path_str(id.owner_id)\n                 );\n                 self.output.push(dummy_spanned(MonoItem::GlobalAsm(id)));\n             }"}, {"sha": "31cfbfa9720c603146c12499e7598d3f750f2613", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -90,14 +90,15 @@ use rustc_errors::Applicability;\n use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet};\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, RootVariableMinCaptureList, Ty, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::DUMMY_SP;\n use rustc_span::{BytePos, Span};\n \n use std::collections::VecDeque;\n@@ -137,27 +138,22 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n     }\n }\n \n-fn check_liveness(tcx: TyCtxt<'_>, def_id: DefId) {\n-    let local_def_id = match def_id.as_local() {\n-        None => return,\n-        Some(def_id) => def_id,\n-    };\n-\n+fn check_liveness(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     // Don't run unused pass for #[derive()]\n-    let parent = tcx.local_parent(local_def_id);\n+    let parent = tcx.local_parent(def_id);\n     if let DefKind::Impl { .. } = tcx.def_kind(parent)\n         && tcx.has_attr(parent, sym::automatically_derived)\n     {\n         return;\n     }\n \n     // Don't run unused pass for #[naked]\n-    if tcx.has_attr(def_id, sym::naked) {\n+    if tcx.has_attr(def_id.to_def_id(), sym::naked) {\n         return;\n     }\n \n     let mut maps = IrMaps::new(tcx);\n-    let body_id = tcx.hir().body_owned_by(local_def_id);\n+    let body_id = tcx.hir().body_owned_by(def_id);\n     let hir_id = tcx.hir().body_owner(body_id);\n     let body = tcx.hir().body(body_id);\n \n@@ -173,7 +169,7 @@ fn check_liveness(tcx: TyCtxt<'_>, def_id: DefId) {\n     maps.visit_body(body);\n \n     // compute liveness\n-    let mut lsets = Liveness::new(&mut maps, local_def_id);\n+    let mut lsets = Liveness::new(&mut maps, def_id);\n     let entry_ln = lsets.compute(&body, hir_id);\n     lsets.log_liveness(entry_ln, body_id.hir_id);\n \n@@ -592,8 +588,13 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn assigned_on_exit(&self, ln: LiveNode, var: Variable) -> bool {\n-        let successor = self.successors[ln].unwrap();\n-        self.assigned_on_entry(successor, var)\n+        match self.successors[ln] {\n+            Some(successor) => self.assigned_on_entry(successor, var),\n+            None => {\n+                self.ir.tcx.sess.delay_span_bug(DUMMY_SP, \"no successor\");\n+                true\n+            }\n+        }\n     }\n \n     fn write_vars<F>(&self, wr: &mut dyn Write, mut test: F) -> io::Result<()>"}, {"sha": "985b2210745f46b1d6aa698c533253dcd5dc446f", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -83,7 +83,7 @@ impl SymbolNamesTest<'_> {\n             tcx.sess.emit_err(TestOutput {\n                 span: attr.span,\n                 kind: Kind::DefPath,\n-                content: with_no_trimmed_paths!(tcx.def_path_str(def_id.to_def_id())),\n+                content: with_no_trimmed_paths!(tcx.def_path_str(def_id)),\n             });\n         }\n     }"}, {"sha": "46834a1d7f4e9b949f3c35f7f0897058b93fcbc8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -258,8 +258,6 @@ pub(crate) fn create_config(\n         override_queries: Some(|_sess, providers, _external_providers| {\n             // Most lints will require typechecking, so just don't run them.\n             providers.lint_mod = |_, _| {};\n-            // Prevent `rustc_hir_analysis::check_crate` from calling `typeck` on all bodies.\n-            providers.typeck_item_bodies = |_, _| {};\n             // hack so that `used_trait_imports` won't try to call typeck\n             providers.used_trait_imports = |_, _| {\n                 static EMPTY_SET: LazyLock<UnordSet<LocalDefId>> = LazyLock::new(UnordSet::default);"}, {"sha": "03b5a2d6d0829ac4fec38c49eae6adfc5a222a7c", "filename": "src/tools/clippy/clippy_lints/src/default_union_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_union_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_union_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_union_representation.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for DefaultUnionRepresentation {\n                 None,\n                 &format!(\n                     \"consider annotating `{}` with `#[repr(C)]` to explicitly specify memory layout\",\n-                    cx.tcx.def_path_str(item.owner_id.to_def_id())\n+                    cx.tcx.def_path_str(item.owner_id)\n                 ),\n             );\n         }"}, {"sha": "98f5b47f7a0e4f455dee27366d1d26c3a3cf04e3", "filename": "src/tools/clippy/clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for TrailingEmptyArray {\n                 None,\n                 &format!(\n                     \"consider annotating `{}` with `#[repr(C)]` or another `repr` attribute\",\n-                    cx.tcx.def_path_str(item.owner_id.to_def_id())\n+                    cx.tcx.def_path_str(item.owner_id)\n                 ),\n             );\n         }"}, {"sha": "41657b53fc12c261b293e302da1365d23fc3e952", "filename": "tests/mir-opt/const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -7,15 +7,15 @@ promoted[0] in FOO: &[&i32; 1] = {\n     let mut _3: *const i32;              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n \n     bb0: {\n-        _3 = const {alloc2: *const i32}; // scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n+        _3 = const {alloc3: *const i32}; // scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n                                          // mir::Constant\n                                          // + span: $DIR/const_promotion_extern_static.rs:13:42: 13:43\n-                                         // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n+                                         // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n         _2 = &(*_3);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:41: +0:43\n         _1 = [move _2];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n         _0 = &_1;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n         return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n     }\n }\n \n-alloc2 (extern static: X)\n+alloc3 (extern static: X)"}, {"sha": "25ba0face6bd8c3db615c85eb41a673d9c193ea0", "filename": "tests/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -18,11 +18,11 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n -         StorageLive(_4);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:45\n -         StorageLive(_5);                 // scope 1 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n--         _5 = const {alloc2: *const i32}; // scope 1 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n+-         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n +         _6 = const _;                    // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n                                            // mir::Constant\n -                                          // + span: $DIR/const_promotion_extern_static.rs:13:42: 13:43\n--                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n+-                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const_promotion_extern_static.rs:+0:41: +0:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n -         _2 = &_3;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n@@ -50,5 +50,5 @@\n       }\n   }\n - \n-- alloc2 (extern static: X)\n+- alloc3 (extern static: X)\n   "}, {"sha": "1648cfb266b5652fc23c0e125b92378215f854c8", "filename": "tests/ui/associated-inherent-types/bugs/ice-substitution.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Fice-substitution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Fice-substitution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Fice-substitution.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -2,5 +2,5 @@ error: the compiler unexpectedly panicked. this is a bug.\n \n query stack during panic:\n #0 [typeck] type-checking `weird`\n-#1 [typeck_item_bodies] type-checking all item bodies\n+#1 [used_trait_imports] finding used_trait_imports `weird`\n end of query stack"}, {"sha": "047175626e366c0e771df1c68b5730f36450c604", "filename": "tests/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -1,19 +1,3 @@\n-error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:36:9\n-   |\n-LL |         ref foo @ [.., ref mut bar] => (),\n-   |         ^^^^^^^        ----------- value is mutably borrowed by `bar` here\n-   |         |\n-   |         value is borrowed by `foo` here\n-\n-error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:120:9\n-   |\n-LL |         ref foo @ Some(box ref mut s) => (),\n-   |         ^^^^^^^            --------- value is mutably borrowed by `s` here\n-   |         |\n-   |         value is borrowed by `foo` here\n-\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:18:5\n    |\n@@ -43,6 +27,14 @@ LL |     &x;\n LL |     drop(r);\n    |          - mutable borrow later used here\n \n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:36:9\n+   |\n+LL |         ref foo @ [.., ref mut bar] => (),\n+   |         ^^^^^^^        ----------- value is mutably borrowed by `bar` here\n+   |         |\n+   |         value is borrowed by `foo` here\n+\n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:50:5\n    |\n@@ -120,6 +112,14 @@ LL |     &mut x;\n LL |     drop(r);\n    |          - immutable borrow later used here\n \n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:120:9\n+   |\n+LL |         ref foo @ Some(box ref mut s) => (),\n+   |         ^^^^^^^            --------- value is mutably borrowed by `s` here\n+   |         |\n+   |         value is borrowed by `foo` here\n+\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:134:5\n    |"}, {"sha": "8a32f0d99e7573f968c8b2bbd68d28ac9d6a407a", "filename": "tests/ui/closures/2229_closure_analysis/match/pattern-matching-should-fail.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -1,17 +1,3 @@\n-error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/pattern-matching-should-fail.rs:67:23\n-   |\n-LL |     let c1 = || match x { };\n-   |                       ^\n-   |\n-   = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n-   |\n-LL ~     let c1 = || match x {\n-LL +         _ => todo!(),\n-LL ~     };\n-   |\n-\n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:8:23\n    |\n@@ -69,6 +55,20 @@ LL |     let t: !;\n LL |             match t { };\n    |                   ^ `t` used here but it isn't initialized\n \n+error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n+  --> $DIR/pattern-matching-should-fail.rs:67:23\n+   |\n+LL |     let c1 = || match x { };\n+   |                       ^\n+   |\n+   = note: the matched value is of type `u8`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n+   |\n+LL ~     let c1 = || match x {\n+LL +         _ => todo!(),\n+LL ~     };\n+   |\n+\n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:67:23\n    |"}, {"sha": "9220828014fda27d2bdf734347059442b4f218eb", "filename": "tests/ui/lint/lint-uppercase-variables.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Flint%2Flint-uppercase-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Flint%2Flint-uppercase-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-uppercase-variables.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -12,12 +12,6 @@ error[E0170]: pattern binding `Foo` is named the same as one of the variants of\n LL |     let Foo = foo::Foo::Foo;\n    |         ^^^ help: to match on the variant, qualify the path: `foo::Foo::Foo`\n \n-error[E0170]: pattern binding `Foo` is named the same as one of the variants of the type `foo::Foo`\n-  --> $DIR/lint-uppercase-variables.rs:33:17\n-   |\n-LL |     fn in_param(Foo: foo::Foo) {}\n-   |                 ^^^ help: to match on the variant, qualify the path: `foo::Foo::Foo`\n-\n warning: unused variable: `Foo`\n   --> $DIR/lint-uppercase-variables.rs:22:9\n    |\n@@ -37,6 +31,12 @@ warning: unused variable: `Foo`\n LL |     let Foo = foo::Foo::Foo;\n    |         ^^^ help: if this is intentional, prefix it with an underscore: `_Foo`\n \n+error[E0170]: pattern binding `Foo` is named the same as one of the variants of the type `foo::Foo`\n+  --> $DIR/lint-uppercase-variables.rs:33:17\n+   |\n+LL |     fn in_param(Foo: foo::Foo) {}\n+   |                 ^^^ help: to match on the variant, qualify the path: `foo::Foo::Foo`\n+\n warning: unused variable: `Foo`\n   --> $DIR/lint-uppercase-variables.rs:33:17\n    |"}, {"sha": "4852c3313969e5f6cca670db343ed7b60e452588", "filename": "tests/ui/lint/rfc-2383-lint-reason/expect_nested_lint_levels.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -1,15 +1,3 @@\n-error: unused variable: `this_is_my_function`\n-  --> $DIR/expect_nested_lint_levels.rs:48:9\n-   |\n-LL |     let this_is_my_function = 3;\n-   |         ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_this_is_my_function`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/expect_nested_lint_levels.rs:45:10\n-   |\n-LL | #[forbid(unused_variables)]\n-   |          ^^^^^^^^^^^^^^^^\n-\n warning: variable does not need to be mutable\n   --> $DIR/expect_nested_lint_levels.rs:36:13\n    |\n@@ -25,6 +13,18 @@ note: the lint level is defined here\n LL |         unused_mut,\n    |         ^^^^^^^^^^\n \n+error: unused variable: `this_is_my_function`\n+  --> $DIR/expect_nested_lint_levels.rs:48:9\n+   |\n+LL |     let this_is_my_function = 3;\n+   |         ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_this_is_my_function`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/expect_nested_lint_levels.rs:45:10\n+   |\n+LL | #[forbid(unused_variables)]\n+   |          ^^^^^^^^^^^^^^^^\n+\n warning: this lint expectation is unfulfilled\n   --> $DIR/expect_nested_lint_levels.rs:7:5\n    |"}, {"sha": "169f03aed9417c80f294941876fe096a05d5b643", "filename": "tests/ui/lint/rfc-2383-lint-reason/force_warn_expected_lints_fulfilled.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -12,12 +12,6 @@ warning: unused variable: `fox_name`\n LL |     let fox_name = \"Sir Nibbles\";\n    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_fox_name`\n \n-warning: unused variable: `this_should_fulfill_the_expectation`\n-  --> $DIR/force_warn_expected_lints_fulfilled.rs:43:9\n-   |\n-LL |     let this_should_fulfill_the_expectation = \"The `#[allow]` has no power here\";\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_this_should_fulfill_the_expectation`\n-\n warning: variable does not need to be mutable\n   --> $DIR/force_warn_expected_lints_fulfilled.rs:32:9\n    |\n@@ -28,6 +22,12 @@ LL |     let mut what_does_the_fox_say = \"*ding* *deng* *dung*\";\n    |\n    = note: requested on the command line with `--force-warn unused-mut`\n \n+warning: unused variable: `this_should_fulfill_the_expectation`\n+  --> $DIR/force_warn_expected_lints_fulfilled.rs:43:9\n+   |\n+LL |     let this_should_fulfill_the_expectation = \"The `#[allow]` has no power here\";\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_this_should_fulfill_the_expectation`\n+\n warning: denote infinite loops with `loop { ... }`\n   --> $DIR/force_warn_expected_lints_fulfilled.rs:10:5\n    |"}, {"sha": "09729eeba7923fa24d7773f55d342365dfa0723c", "filename": "tests/ui/lint/unused/lint-unused-variables.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Flint%2Funused%2Flint-unused-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Flint%2Funused%2Flint-unused-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Flint-unused-variables.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -10,18 +10,18 @@ note: the lint level is defined here\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:14:5\n-   |\n-LL |     b: i32,\n-   |     ^ help: if this is intentional, prefix it with an underscore: `_b`\n-\n error: unused variable: `a`\n   --> $DIR/lint-unused-variables.rs:22:9\n    |\n LL |         a: i32,\n    |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n+error: unused variable: `b`\n+  --> $DIR/lint-unused-variables.rs:14:5\n+   |\n+LL |     b: i32,\n+   |     ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n error: unused variable: `b`\n   --> $DIR/lint-unused-variables.rs:29:9\n    |"}, {"sha": "016debdd396080581c1535172b3f285a3ed1e5fe", "filename": "tests/ui/liveness/liveness-consts.stderr", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fliveness%2Fliveness-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fliveness%2Fliveness-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-consts.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -1,32 +1,16 @@\n-warning: variable `a` is assigned to, but never used\n-  --> $DIR/liveness-consts.rs:7:13\n+warning: unused variable: `e`\n+  --> $DIR/liveness-consts.rs:24:13\n    |\n-LL |     let mut a = 0;\n-   |             ^\n+LL |         let e = 1;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_e`\n    |\n-   = note: consider using `_a` instead\n note: the lint level is defined here\n   --> $DIR/liveness-consts.rs:2:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n-warning: value assigned to `b` is never read\n-  --> $DIR/liveness-consts.rs:17:5\n-   |\n-LL |     b += 1;\n-   |     ^\n-   |\n-   = help: maybe it is overwritten before being read?\n-   = note: `#[warn(unused_assignments)]` implied by `#[warn(unused)]`\n-\n-warning: unused variable: `e`\n-  --> $DIR/liveness-consts.rs:24:13\n-   |\n-LL |         let e = 1;\n-   |             ^ help: if this is intentional, prefix it with an underscore: `_e`\n-\n warning: unused variable: `s`\n   --> $DIR/liveness-consts.rs:33:24\n    |\n@@ -39,6 +23,29 @@ warning: unused variable: `z`\n LL | pub fn f(x: [u8; { let s = 17; 100 }]) -> [u8;  { let z = 18; 100 }] {\n    |                                                       ^ help: if this is intentional, prefix it with an underscore: `_z`\n \n+warning: unused variable: `z`\n+  --> $DIR/liveness-consts.rs:60:13\n+   |\n+LL |         let z = 42;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_z`\n+\n+warning: variable `a` is assigned to, but never used\n+  --> $DIR/liveness-consts.rs:7:13\n+   |\n+LL |     let mut a = 0;\n+   |             ^\n+   |\n+   = note: consider using `_a` instead\n+\n+warning: value assigned to `b` is never read\n+  --> $DIR/liveness-consts.rs:17:5\n+   |\n+LL |     b += 1;\n+   |     ^\n+   |\n+   = help: maybe it is overwritten before being read?\n+   = note: `#[warn(unused_assignments)]` implied by `#[warn(unused)]`\n+\n warning: value assigned to `t` is never read\n   --> $DIR/liveness-consts.rs:42:9\n    |\n@@ -53,11 +60,5 @@ warning: unused variable: `w`\n LL |         let w = 10;\n    |             ^ help: if this is intentional, prefix it with an underscore: `_w`\n \n-warning: unused variable: `z`\n-  --> $DIR/liveness-consts.rs:60:13\n-   |\n-LL |         let z = 42;\n-   |             ^ help: if this is intentional, prefix it with an underscore: `_z`\n-\n warning: 8 warnings emitted\n "}, {"sha": "3ce48b1a72fca8d71353cda3702542ebf3859f44", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -54,14 +54,6 @@ LL |         ref mut a @ box ref b => {\n    |         |\n    |         value is mutably borrowed by `a` here\n \n-error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:54:11\n-   |\n-LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n-   |           ^^^^^^^^^       ----- value is borrowed by `b` here\n-   |           |\n-   |           value is mutably borrowed by `a` here\n-\n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-at-and-box.rs:31:9\n    |\n@@ -120,6 +112,14 @@ LL |         ref mut a @ box ref b => {\n LL |             drop(b);\n    |                  - immutable borrow later used here\n \n+error: cannot borrow value as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:54:11\n+   |\n+LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n+   |           ^^^^^^^^^       ----- value is borrowed by `b` here\n+   |           |\n+   |           value is mutably borrowed by `a` here\n+\n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:54:11\n    |"}, {"sha": "1ed019f0a69270a0c711435a6e3f951dcfb8977a", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -286,78 +286,6 @@ help: borrow this binding in the pattern to avoid moving the value\n LL |         ref mut a @ Some([ref b, ref mut c]) => {}\n    |         +++\n \n-error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:11:11\n-   |\n-LL |     fn f1(a @ ref b: U) {}\n-   |           ^   ----- value borrowed here after move\n-   |           |\n-   |           value moved into `a` here\n-   |           move occurs because `a` has type `U` which does not implement the `Copy` trait\n-   |\n-help: borrow this binding in the pattern to avoid moving the value\n-   |\n-LL |     fn f1(ref a @ ref b: U) {}\n-   |           +++\n-\n-error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n-   |\n-LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |           ^^^^^        -----          ----- value borrowed here after move\n-   |           |            |\n-   |           |            value borrowed here after move\n-   |           value moved into `a` here\n-   |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n-   |\n-help: borrow this binding in the pattern to avoid moving the value\n-   |\n-LL |     fn f2(ref mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |           +++\n-\n-error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:20\n-   |\n-LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |                    ^   ----- value borrowed here after move\n-   |                    |\n-   |                    value moved into `b` here\n-   |                    move occurs because `b` has type `U` which does not implement the `Copy` trait\n-   |\n-help: borrow this binding in the pattern to avoid moving the value\n-   |\n-LL |     fn f2(mut a @ (ref b @ ref c, mut d @ ref e): (U, U)) {}\n-   |                    +++\n-\n-error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:31\n-   |\n-LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |                               ^^^^^   ----- value borrowed here after move\n-   |                               |\n-   |                               value moved into `d` here\n-   |                               move occurs because `d` has type `U` which does not implement the `Copy` trait\n-   |\n-help: borrow this binding in the pattern to avoid moving the value\n-   |\n-LL |     fn f2(mut a @ (b @ ref c, ref mut d @ ref e): (U, U)) {}\n-   |                               +++\n-\n-error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:19:11\n-   |\n-LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n-   |           ^    ---------  ----- value borrowed here after move\n-   |           |    |\n-   |           |    value borrowed here after move\n-   |           value moved into `a` here\n-   |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n-   |\n-help: borrow this binding in the pattern to avoid moving the value\n-   |\n-LL |     fn f3(ref a @ [ref mut b, ref c]: [U; 2]) {}\n-   |           +++\n-\n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n    |\n@@ -447,6 +375,63 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         |\n    |         value moved here\n \n+error: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:11:11\n+   |\n+LL |     fn f1(a @ ref b: U) {}\n+   |           ^   ----- value borrowed here after move\n+   |           |\n+   |           value moved into `a` here\n+   |           move occurs because `a` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f1(ref a @ ref b: U) {}\n+   |           +++\n+\n+error: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |           ^^^^^        -----          ----- value borrowed here after move\n+   |           |            |\n+   |           |            value borrowed here after move\n+   |           value moved into `a` here\n+   |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(ref mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |           +++\n+\n+error: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:20\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                    ^   ----- value borrowed here after move\n+   |                    |\n+   |                    value moved into `b` here\n+   |                    move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(mut a @ (ref b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                    +++\n+\n+error: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:31\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                               ^^^^^   ----- value borrowed here after move\n+   |                               |\n+   |                               value moved into `d` here\n+   |                               move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, ref mut d @ ref e): (U, U)) {}\n+   |                               +++\n+\n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n    |\n@@ -457,6 +442,21 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n+error: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:19:11\n+   |\n+LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n+   |           ^    ---------  ----- value borrowed here after move\n+   |           |    |\n+   |           |    value borrowed here after move\n+   |           value moved into `a` here\n+   |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f3(ref a @ [ref mut b, ref c]: [U; 2]) {}\n+   |           +++\n+\n error: aborting due to 33 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "c8c4d9b8fdb13a5989529ae12ba5837cbd6f29a1", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -166,48 +166,6 @@ LL |         ref mut a @ Some([b, mut c]) => {}\n    |         |                 value is moved into `b` here\n    |         value is mutably borrowed by `a` here\n \n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n-   |\n-LL |     fn f1(ref a @ b: U) {}\n-   |           ^^^^^   - value is moved into `b` here\n-   |           |\n-   |           value is borrowed by `a` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:11\n-   |\n-LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-   |           ^^^^^            -----          - value is moved into `e` here\n-   |           |                |\n-   |           |                value is moved into `c` here\n-   |           value is borrowed by `a` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n-   |\n-LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-   |                    ^^^^^   ----- value is moved into `c` here\n-   |                    |\n-   |                    value is borrowed by `b` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:35\n-   |\n-LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-   |                                   ^^^^^   - value is moved into `e` here\n-   |                                   |\n-   |                                   value is borrowed by `d` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n-   |\n-LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n-   |           ^^^^^^^^^    -  ----- value is moved into `c` here\n-   |           |            |\n-   |           |            value is moved into `b` here\n-   |           value is mutably borrowed by `a` here\n-\n error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9\n    |\n@@ -306,6 +264,14 @@ help: borrow this binding in the pattern to avoid moving the value\n LL |         ref a @ Some((ref b @ mut c, ref d @ ref e)) => {}\n    |                                              +++\n \n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n+   |\n+LL |     fn f1(ref a @ b: U) {}\n+   |           ^^^^^   - value is moved into `b` here\n+   |           |\n+   |           value is borrowed by `a` here\n+\n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n    |\n@@ -315,6 +281,31 @@ LL |     fn f1(ref a @ b: U) {}\n    |           value borrowed here after move\n    |           move occurs because value has type `U`, which does not implement the `Copy` trait\n \n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:11\n+   |\n+LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+   |           ^^^^^            -----          - value is moved into `e` here\n+   |           |                |\n+   |           |                value is moved into `c` here\n+   |           value is borrowed by `a` here\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n+   |\n+LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+   |                    ^^^^^   ----- value is moved into `c` here\n+   |                    |\n+   |                    value is borrowed by `b` here\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:35\n+   |\n+LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+   |                                   ^^^^^   - value is moved into `e` here\n+   |                                   |\n+   |                                   value is borrowed by `d` here\n+\n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n    |\n@@ -335,6 +326,15 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n+   |\n+LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n+   |           ^^^^^^^^^    -  ----- value is moved into `c` here\n+   |           |            |\n+   |           |            value is moved into `b` here\n+   |           value is mutably borrowed by `a` here\n+\n error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n    |"}, {"sha": "c0a6558a1bf3b571065845dbca94f32272b2452b", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -221,47 +221,6 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         |            value is borrowed by `b` here\n    |         value is mutably borrowed by `a` here\n \n-error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:22:11\n-   |\n-LL |     fn f1(ref a @ ref mut b: U) {}\n-   |           ^^^^^   --------- value is mutably borrowed by `b` here\n-   |           |\n-   |           value is borrowed by `a` here\n-\n-error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n-   |\n-LL |     fn f2(ref mut a @ ref b: U) {}\n-   |           ^^^^^^^^^   ----- value is borrowed by `b` here\n-   |           |\n-   |           value is mutably borrowed by `a` here\n-\n-error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n-   |\n-LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n-   |           ^^^^^           ----------- value is mutably borrowed by `mid` here\n-   |           |\n-   |           value is borrowed by `a` here\n-\n-error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:22\n-   |\n-LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n-   |                      ^^^^^   ---------   - value is moved into `c` here\n-   |                      |       |\n-   |                      |       value is mutably borrowed by `b` here\n-   |                      value is borrowed by `a` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n-   |\n-LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n-   |                              ^^^^^^^^^   - value is moved into `c` here\n-   |                              |\n-   |                              value is mutably borrowed by `b` here\n-\n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:8:31\n    |\n@@ -398,6 +357,47 @@ LL |\n LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:22:11\n+   |\n+LL |     fn f1(ref a @ ref mut b: U) {}\n+   |           ^^^^^   --------- value is mutably borrowed by `b` here\n+   |           |\n+   |           value is borrowed by `a` here\n+\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n+   |\n+LL |     fn f2(ref mut a @ ref b: U) {}\n+   |           ^^^^^^^^^   ----- value is borrowed by `b` here\n+   |           |\n+   |           value is mutably borrowed by `a` here\n+\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n+   |\n+LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n+   |           ^^^^^           ----------- value is mutably borrowed by `mid` here\n+   |           |\n+   |           value is borrowed by `a` here\n+\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:22\n+   |\n+LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n+   |                      ^^^^^   ---------   - value is moved into `c` here\n+   |                      |       |\n+   |                      |       value is mutably borrowed by `b` here\n+   |                      value is borrowed by `a` here\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n+   |\n+LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n+   |                              ^^^^^^^^^   - value is moved into `c` here\n+   |                              |\n+   |                              value is mutably borrowed by `b` here\n+\n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n    |"}, {"sha": "c634ea470c5d5942a45e1cbcf348a074ec752821", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -194,50 +194,6 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     |\n    |                                     value is mutably borrowed by `a` here\n \n-error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:8:11\n-   |\n-LL |     fn f1(ref mut a @ ref mut b: U) {}\n-   |           ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n-   |           |\n-   |           value is mutably borrowed by `a` here\n-\n-error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n-   |\n-LL |     fn f2(ref mut a @ ref mut b: U) {}\n-   |           ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n-   |           |\n-   |           value is mutably borrowed by `a` here\n-\n-error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:9\n-   |\n-LL |         ref mut a @ [\n-   |         ^^^^^^^^^ value is mutably borrowed by `a` here\n-LL |\n-LL |             [ref b @ .., _],\n-   |              ----- value is borrowed by `b` here\n-LL |             [_, ref mut mid @ ..],\n-   |                 ----------- value is mutably borrowed by `mid` here\n-\n-error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:22\n-   |\n-LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n-   |                      ^^^^^^^^^   ---------   - value is moved into `c` here\n-   |                      |           |\n-   |                      |           value is mutably borrowed by `b` here\n-   |                      value is mutably borrowed by `a` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n-   |\n-LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n-   |                                  ^^^^^^^^^   - value is moved into `c` here\n-   |                                  |\n-   |                                  value is mutably borrowed by `b` here\n-\n error[E0499]: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n    |\n@@ -304,6 +260,50 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n LL |             drop(a);\n    |                  - first borrow later used here\n \n+error: cannot borrow value as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:8:11\n+   |\n+LL |     fn f1(ref mut a @ ref mut b: U) {}\n+   |           ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n+   |           |\n+   |           value is mutably borrowed by `a` here\n+\n+error: cannot borrow value as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n+   |\n+LL |     fn f2(ref mut a @ ref mut b: U) {}\n+   |           ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n+   |           |\n+   |           value is mutably borrowed by `a` here\n+\n+error: cannot borrow value as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:9\n+   |\n+LL |         ref mut a @ [\n+   |         ^^^^^^^^^ value is mutably borrowed by `a` here\n+LL |\n+LL |             [ref b @ .., _],\n+   |              ----- value is borrowed by `b` here\n+LL |             [_, ref mut mid @ ..],\n+   |                 ----------- value is mutably borrowed by `mid` here\n+\n+error: cannot borrow value as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:22\n+   |\n+LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n+   |                      ^^^^^^^^^   ---------   - value is moved into `c` here\n+   |                      |           |\n+   |                      |           value is mutably borrowed by `b` here\n+   |                      value is mutably borrowed by `a` here\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n+   |\n+LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n+   |                                  ^^^^^^^^^   - value is moved into `c` here\n+   |                                  |\n+   |                                  value is mutably borrowed by `b` here\n+\n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n    |"}, {"sha": "c2a33ce1f59b38549e5fd6196863f26ff25481ea", "filename": "tests/ui/privacy/privacy2.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fprivacy%2Fprivacy2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fprivacy%2Fprivacy2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivacy2.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -23,13 +23,7 @@ LL | pub fn foo() {}\n \n error: requires `sized` lang_item\n \n-error: requires `sized` lang_item\n-\n-error: requires `sized` lang_item\n-\n-error: requires `sized` lang_item\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0432, E0603.\n For more information about an error, try `rustc --explain E0432`."}, {"sha": "22c1e48b07d947391692d0596ed413658362a724", "filename": "tests/ui/privacy/privacy3.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fprivacy%2Fprivacy3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Fprivacy%2Fprivacy3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivacy3.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -6,12 +6,6 @@ LL |     use bar::gpriv;\n \n error: requires `sized` lang_item\n \n-error: requires `sized` lang_item\n-\n-error: requires `sized` lang_item\n-\n-error: requires `sized` lang_item\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0432`."}, {"sha": "16e1af46059a4c198d7c5ba739359598bea834da", "filename": "tests/ui/rfc-2565-param-attrs/param-attrs-cfg.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f/tests%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr?ref=3462f79e94f466a56ddaccfcdd3a3d44dd1dda9f", "patch": "@@ -10,6 +10,12 @@ note: the lint level is defined here\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n \n+error: unused variable: `a`\n+  --> $DIR/param-attrs-cfg.rs:41:27\n+   |\n+LL |         #[cfg(something)] a: i32,\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:30:23\n    |\n@@ -22,12 +28,6 @@ error: unused variable: `c`\n LL |     #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                        ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n-error: unused variable: `a`\n-  --> $DIR/param-attrs-cfg.rs:41:27\n-   |\n-LL |         #[cfg(something)] a: i32,\n-   |                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n-\n error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:48:27\n    |"}]}