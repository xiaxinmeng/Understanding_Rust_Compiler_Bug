{"sha": "ed0c6e833604364c8c7d454bdb66ed6a9c620ee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMGM2ZTgzMzYwNDM2NGM4YzdkNDU0YmRiNjZlZDZhOWM2MjBlZTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-28T17:01:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-28T17:01:43Z"}, "message": "miri build script: support building miri in debug mode", "tree": {"sha": "1d8f78077e4200b80b34ae4930d7264c99df3b40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d8f78077e4200b80b34ae4930d7264c99df3b40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed0c6e833604364c8c7d454bdb66ed6a9c620ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed0c6e833604364c8c7d454bdb66ed6a9c620ee6", "html_url": "https://github.com/rust-lang/rust/commit/ed0c6e833604364c8c7d454bdb66ed6a9c620ee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed0c6e833604364c8c7d454bdb66ed6a9c620ee6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c930e48e139767f16871e1a1e99316a04e0403d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c930e48e139767f16871e1a1e99316a04e0403d", "html_url": "https://github.com/rust-lang/rust/commit/3c930e48e139767f16871e1a1e99316a04e0403d"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "f12a49afe474008291031b65d11e86e3457cd3d0", "filename": "miri", "status": "modified", "additions": 64, "deletions": 11, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ed0c6e833604364c8c7d454bdb66ed6a9c620ee6/miri", "raw_url": "https://github.com/rust-lang/rust/raw/ed0c6e833604364c8c7d454bdb66ed6a9c620ee6/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=ed0c6e833604364c8c7d454bdb66ed6a9c620ee6", "patch": "@@ -1,4 +1,36 @@\n #!/bin/sh\n+## Usage\n+#\n+# COMMANDS\n+#\n+# ./miri install <flags>:\n+# Installs the miri driver and cargo-miri. <flags> are passed to `cargo\n+# install`.  Sets up the rpath such that the installed binary should work in any\n+# working directory.\n+#\n+# ./miri build <flags>:\n+# Just build miri.  <flags> are passed to `cargo build`.\n+#\n+# ./miri test <flags>:\n+# Build miri, set up a sysroot and then run the test suite. <flags> are passed\n+# to the final `cargo test` invocation.\n+#\n+# ./miri run <flags>:\n+# Build miri, set up a sysroot and then run the driver with the given <flags>.\n+#\n+# All commands also exist in a \"-debug\" variant (e.g. \"./miri run-debug\n+# <flags>\") which uses debug builds instead of release builds, for faster build\n+# times and slower execution times.\n+#\n+# ENVIRONMENT VARIABLES\n+#\n+# MIRI_SYSROOT:\n+# If already set, the \"sysroot setup\" step is skipped.\n+#\n+# CARGO_EXTRA_FLAGS:\n+# Pass extra flags to all cargo invocations.\n+\n+## Preparation\n set -e\n # I'd love to use `jq` for parsing the JSON properly, but macOS is totally underequipped for this kind of work.\n TARGET=$(rustc --print target-spec-json -Z unstable-options | grep llvm-target | cut -d '\"' -f 4)\n@@ -13,9 +45,9 @@ export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$SYSROOT/lib/rustlib/$TARGET/lib -C de\n # Build a sysroot and set MIRI_SYSROOT to use it.  Arguments are passed to `cargo miri setup`.\n build_sysroot() {\n     # Build once, for the user to see.\n-    cargo run --release --bin cargo-miri -- miri setup \"$@\"\n+    cargo run $CARGO_BUILD_FLAGS --bin cargo-miri -- miri setup \"$@\"\n     # Call again, to just set env var.\n-    eval $(cargo run --release -q --bin cargo-miri -- miri setup --env \"$@\")\n+    eval $(cargo run $CARGO_BUILD_FLAGS -q --bin cargo-miri -- miri setup --env \"$@\")\n     export MIRI_SYSROOT\n }\n \n@@ -48,23 +80,44 @@ find_sysroot() {\n \n ## Main\n \n+# Determine command.\n COMMAND=\"$1\"\n shift\n \n+# Determine flags passed to all cargo invocations.\n case \"$COMMAND\" in\n-install)\n+*-debug)\n+    CARGO_INSTALL_FLAGS=\"--debug $CARGO_EXTRA_FLAGS\"\n+    CARGO_BUILD_FLAGS=\"$CARGO_EXTRA_FLAGS\"\n+    ;;\n+*)\n+    CARGO_INSTALL_FLAGS=\"$CARGO_EXTRA_FLAGS\"\n+    CARGO_BUILD_FLAGS=\"--release $CARGO_EXTRA_FLAGS\"\n+    ;;\n+esac\n+\n+# Run command.\n+case \"$COMMAND\" in\n+install|install-debug)\n     # \"--locked\" to respect the Cargo.lock file if it exists,\n     # \"--offline\" to avoid querying the registry (for yanked packages).\n-    exec cargo \"$COMMAND\" --path \"$(dirname \"$0\")\" --force --locked --offline \"$@\"\n+    exec cargo install --path \"$(dirname \"$0\")\" --force --locked --offline \"$@\"\n     ;;\n-build)\n+build|build-debug)\n     # Build, and let caller control flags.\n-    exec cargo \"$COMMAND\" --release \"$@\"\n+    exec cargo build $CARGO_BUILD_FLAGS \"$@\"\n+    ;;\n+test|test-debug)\n+    # First build and get a sysroot.\n+    cargo build $CARGO_BUILD_FLAGS\n+    find_sysroot\n+    # Then test, and let caller control flags.\n+    exec cargo test $CARGO_BUILD_FLAGS \"$@\"\n     ;;\n-test|run)\n-    # In \"run\" mode, scan for \"--target\" to set the \"MIRI_TEST_TARGET\" env var so\n+run|run-debug)\n+    # Scan for \"--target\" to set the \"MIRI_TEST_TARGET\" env var so\n     # that we set the MIRI_SYSROOT up the right way.\n-    if [ \"$COMMAND\" = \"run\" ] && [ -z \"$MIRI_TEST_TARGET\" ]; then\n+    if [ -z \"$MIRI_TEST_TARGET\" ]; then\n         for ARG in \"$@\"; do\n             if [ \"$LAST_ARG\" = \"--target\" ]; then\n                 # Found it!\n@@ -75,9 +128,9 @@ test|run)\n         done\n     fi\n     # First build and get a sysroot.\n-    cargo build --release\n+    cargo build $CARGO_BUILD_FLAGS\n     find_sysroot\n     # Then run the actual command.\n-    exec cargo \"$COMMAND\" --release \"$@\"\n+    exec cargo run $CARGO_BUILD_FLAGS \"$@\"\n     ;;\n esac"}]}