{"sha": "a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNWM4NzM5YjlhNmRhMjIzZTFmM2E2ZmY2YWE4Njg5MTNjMGRiZjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-16T11:54:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-16T11:54:38Z"}, "message": "Merge #3162\n\n3162: Feature: vscode always downloads only the matching ra_lsp_server version r=matklad a=Veetaha\n\nI tried to separate logically connected changes into separate commits, so enjoy!\r\n\r\nNow TypeScript extension saves installed binary version in global state and always checks that the installed binary version equals the version of the TypeScript extension itself (to prevent version drifts).\r\nAlso, changed `fetchLatestArtifactReleaseInfo()` to `fetchArtifactReleaseInfo()` that takes an optional release tag (when not specified fetches the latest release). The version without a release tag will be useful in the future when adding auto-checking for updates.\r\n\r\nI decided not to do `Download latest language server` command (I have stated the rationale for this in #3073) and let the extension itself decide which version of the binary it wants. This way the users will be able to get the latest `ra_lsp_server` binary after the approaching 2020-02-17 release, without having to manually delete the outdated one from `~/.config/Code/User/globalStorage/matklad.rust-analyzer`!\r\n\r\nCloses #3073\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>", "tree": {"sha": "5694d395b08c416bf60d7206e0380a3859cfe1e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5694d395b08c416bf60d7206e0380a3859cfe1e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeSS1+CRBK7hj4Ov3rIwAAdHIIAGTdKK+YEzJe8usM9AwGcmIu\nMl5w4aUcTBk2kNBdEmi+DO68NXnYXJhVMtCFvpDD/80F0RQStd+O3sxndr0aPzaO\nQ5Ddt4GXKdjI7tXY6HYoFaMVGkazQAXSN8zlD5OsA3x53wsOfW3shfetF3dsYBs/\n8OnudZ2ld9FNTiZWtstCQ9zkcCewxNDujT4FGxOq4/JH8P5HQqllcuHh8CUlPlaT\nAPFgPMnxFm2v2aXNhPpPMJ5gMaPJYC1Dc/uH5gAJ5/vTeiXm8IwncnIeUE1U8KQI\nV8jsmm2BNyvoischesxckLBMqUyewEAFC1B+OiCYewuZSQuj6pMOceRUqeP+XOE=\n=CLWw\n-----END PGP SIGNATURE-----\n", "payload": "tree 5694d395b08c416bf60d7206e0380a3859cfe1e2\nparent 617b5b3b31cf0b461829810640e28a9090a5b957\nparent 325eba58a286c147f19dada5f205aa9e2ec6f391\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581854078 +0000\ncommitter GitHub <noreply@github.com> 1581854078 +0000\n\nMerge #3162\n\n3162: Feature: vscode always downloads only the matching ra_lsp_server version r=matklad a=Veetaha\n\nI tried to separate logically connected changes into separate commits, so enjoy!\r\n\r\nNow TypeScript extension saves installed binary version in global state and always checks that the installed binary version equals the version of the TypeScript extension itself (to prevent version drifts).\r\nAlso, changed `fetchLatestArtifactReleaseInfo()` to `fetchArtifactReleaseInfo()` that takes an optional release tag (when not specified fetches the latest release). The version without a release tag will be useful in the future when adding auto-checking for updates.\r\n\r\nI decided not to do `Download latest language server` command (I have stated the rationale for this in #3073) and let the extension itself decide which version of the binary it wants. This way the users will be able to get the latest `ra_lsp_server` binary after the approaching 2020-02-17 release, without having to manually delete the outdated one from `~/.config/Code/User/globalStorage/matklad.rust-analyzer`!\r\n\r\nCloses #3073\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "html_url": "https://github.com/rust-lang/rust/commit/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "617b5b3b31cf0b461829810640e28a9090a5b957", "url": "https://api.github.com/repos/rust-lang/rust/commits/617b5b3b31cf0b461829810640e28a9090a5b957", "html_url": "https://github.com/rust-lang/rust/commit/617b5b3b31cf0b461829810640e28a9090a5b957"}, {"sha": "325eba58a286c147f19dada5f205aa9e2ec6f391", "url": "https://api.github.com/repos/rust-lang/rust/commits/325eba58a286c147f19dada5f205aa9e2ec6f391", "html_url": "https://github.com/rust-lang/rust/commit/325eba58a286c147f19dada5f205aa9e2ec6f391"}], "stats": {"total": 287, "additions": 179, "deletions": 108}, "files": [{"sha": "553687e7899d65bd3c09bf18792cc92d8065b3f9", "filename": "docs/user/readme.adoc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/docs%2Fuser%2Freadme.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/docs%2Fuser%2Freadme.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Freadme.adoc?ref=a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "patch": "@@ -27,8 +27,9 @@ https://github.com/rust-analyzer/rust-analyzer/tree/master/editors/code[in tree]\n \n You can install the latest release of the plugin from\n https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer[the marketplace].\n-By default, the plugin will download the latest version of the server as well.\n+By default, the plugin will download the matching version of the server as well.\n \n+// FIXME: update the image (its text has changed)\n image::https://user-images.githubusercontent.com/36276403/74103174-a40df100-4b52-11ea-81f4-372c70797924.png[]\n \n The server binary is stored in `~/.config/Code/User/globalStorage/matklad.rust-analyzer`.\n@@ -37,9 +38,7 @@ Note that we only support the latest version of VS Code.\n \n ==== Updates\n \n-The extension will be updated automatically as new versions become available.\n-The server update functionality is in progress.\n-For the time being, the workaround is to remove the binary from `globalStorage` and to restart the extension.\n+The extension will be updated automatically as new versions become available. It will ask your permission to download the matching language server version binary if needed.\n \n ==== Building From Source\n "}, {"sha": "96b8e9eb06562a464f25830e7b3c362cc1d30353", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "patch": "@@ -6,7 +6,7 @@\n     \"private\": true,\n     \"icon\": \"icon.png\",\n     \"//\": \"The real version is in release.yaml, this one just needs to be bigger\",\n-    \"version\": \"0.2.0-dev\",\n+    \"version\": \"0.2.20200211-dev\",\n     \"publisher\": \"matklad\",\n     \"repository\": {\n         \"url\": \"https://github.com/rust-analyzer/rust-analyzer.git\","}, {"sha": "efef820abfaf609fd0497b5a7f804922d339e36b", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "patch": "@@ -11,7 +11,7 @@ export async function createClient(config: Config): Promise<null | lc.LanguageCl\n     // It might be a good idea to test if the uri points to a file.\n     const workspaceFolderPath = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n-    const serverPath = await ensureServerBinary(config.serverBinarySource);\n+    const serverPath = await ensureServerBinary(config.serverSource);\n     if (!serverPath) return null;\n \n     const run: lc.Executable = {"}, {"sha": "70cb0a612a07f917223fbbebf38faf494bffa88d", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "patch": "@@ -24,6 +24,19 @@ export class Config {\n     ]\n     .map(opt => `${Config.rootSection}.${opt}`);\n \n+    private static readonly extensionVersion: string = (() => {\n+        const packageJsonVersion = vscode\n+            .extensions\n+            .getExtension(\"matklad.rust-analyzer\")!\n+            .packageJSON\n+            .version as string; // n.n.YYYYMMDD\n+\n+        const realVersionRegexp = /^\\d+\\.\\d+\\.(\\d{4})(\\d{2})(\\d{2})/;\n+        const [, yyyy, mm, dd] = packageJsonVersion.match(realVersionRegexp)!;\n+\n+        return `${yyyy}-${mm}-${dd}`;\n+    })();\n+\n     private cfg!: vscode.WorkspaceConfiguration;\n \n     constructor(private readonly ctx: vscode.ExtensionContext) {\n@@ -98,7 +111,7 @@ export class Config {\n         }\n     }\n \n-    get serverBinarySource(): null | BinarySource {\n+    get serverSource(): null | BinarySource {\n         const serverPath = RA_LSP_DEBUG ?? this.cfg.get<null | string>(\"raLspServerPath\");\n \n         if (serverPath) {\n@@ -116,6 +129,8 @@ export class Config {\n             type: BinarySource.Type.GithubRelease,\n             dir:  this.ctx.globalStoragePath,\n             file: prebuiltBinaryName,\n+            storage: this.ctx.globalState,\n+            version: Config.extensionVersion,\n             repo: {\n                 name: \"rust-analyzer\",\n                 owner: \"rust-analyzer\","}, {"sha": "9fcf2ec3826eda09743c2fcdbb910a5d7c1487b4", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "patch": "@@ -60,6 +60,10 @@ export class Ctx {\n         this.pushCleanup(d);\n     }\n \n+    get globalState(): vscode.Memento {\n+        return this.extCtx.globalState;\n+    }\n+\n     get subscriptions(): Disposable[] {\n         return this.extCtx.subscriptions;\n     }"}, {"sha": "de655f8f4b798fa0cb05a89ba4ea81352d3f4b9d", "filename": "editors/code/src/installation/download_artifact.ts", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_artifact.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_artifact.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_artifact.ts?ref=a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "patch": "@@ -0,0 +1,58 @@\n+import * as vscode from \"vscode\";\n+import * as path from \"path\";\n+import { promises as fs } from \"fs\";\n+import { strict as assert } from \"assert\";\n+\n+import { ArtifactReleaseInfo } from \"./interfaces\";\n+import { downloadFile } from \"./download_file\";\n+import { throttle } from \"throttle-debounce\";\n+\n+/**\n+ * Downloads artifact from given `downloadUrl`.\n+ * Creates `installationDir` if it is not yet created and put the artifact under\n+ * `artifactFileName`.\n+ * Displays info about the download progress in an info message printing the name\n+ * of the artifact as `displayName`.\n+ */\n+export async function downloadArtifact(\n+    {downloadUrl, releaseName}: ArtifactReleaseInfo,\n+    artifactFileName: string,\n+    installationDir: string,\n+    displayName: string,\n+) {\n+    await fs.mkdir(installationDir).catch(err => assert.strictEqual(\n+        err?.code,\n+        \"EEXIST\",\n+        `Couldn't create directory \"${installationDir}\" to download `+\n+        `${artifactFileName} artifact: ${err.message}`\n+    ));\n+\n+    const installationPath = path.join(installationDir, artifactFileName);\n+\n+    console.time(`Downloading ${artifactFileName}`);\n+    await vscode.window.withProgress(\n+        {\n+            location: vscode.ProgressLocation.Notification,\n+            cancellable: false, // FIXME: add support for canceling download?\n+            title: `Downloading ${displayName} (${releaseName})`\n+        },\n+        async (progress, _cancellationToken) => {\n+            let lastPrecentage = 0;\n+            const filePermissions = 0o755; // (rwx, r_x, r_x)\n+            await downloadFile(downloadUrl, installationPath, filePermissions, throttle(\n+                200,\n+                /* noTrailing: */ true,\n+                (readBytes, totalBytes) => {\n+                    const newPercentage = (readBytes / totalBytes) * 100;\n+                    progress.report({\n+                        message: newPercentage.toFixed(0) + \"%\",\n+                        increment: newPercentage - lastPrecentage\n+                    });\n+\n+                    lastPrecentage = newPercentage;\n+                })\n+            );\n+        }\n+    );\n+    console.timeEnd(`Downloading ${artifactFileName}`);\n+}"}, {"sha": "7d497057aa4787ce05644e1f127e2ebfb2b4be76", "filename": "editors/code/src/installation/fetch_artifact_release_info.ts", "status": "renamed", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts?ref=a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "patch": "@@ -3,24 +3,30 @@ import { GithubRepo, ArtifactReleaseInfo } from \"./interfaces\";\n \n const GITHUB_API_ENDPOINT_URL = \"https://api.github.com\";\n \n+\n /**\n- * Fetches the latest release from GitHub `repo` and returns metadata about\n- * `artifactFileName` shipped with this release or `null` if no such artifact was published.\n+ * Fetches the release with `releaseTag` (or just latest release when not specified)\n+ * from GitHub `repo` and returns metadata about `artifactFileName` shipped with\n+ * this release or `null` if no such artifact was published.\n  */\n-export async function fetchLatestArtifactReleaseInfo(\n-    repo: GithubRepo, artifactFileName: string\n+export async function fetchArtifactReleaseInfo(\n+    repo: GithubRepo, artifactFileName: string, releaseTag?: string\n ): Promise<null | ArtifactReleaseInfo> {\n \n     const repoOwner = encodeURIComponent(repo.owner);\n     const repoName  = encodeURIComponent(repo.name);\n \n-    const apiEndpointPath = `/repos/${repoOwner}/${repoName}/releases/latest`;\n+    const apiEndpointPath = releaseTag\n+        ? `/repos/${repoOwner}/${repoName}/releases/tags/${releaseTag}`\n+        : `/repos/${repoOwner}/${repoName}/releases/latest`;\n+\n     const requestUrl = GITHUB_API_ENDPOINT_URL + apiEndpointPath;\n \n     // We skip runtime type checks for simplicity (here we cast from `any` to `GithubRelease`)\n \n     console.log(\"Issuing request for released artifacts metadata to\", requestUrl);\n \n+    // FIXME: handle non-ok response\n     const response: GithubRelease = await fetch(requestUrl, {\n             headers: { Accept: \"application/vnd.github.v3+json\" }\n         })", "previous_filename": "editors/code/src/installation/fetch_latest_artifact_release_info.ts"}, {"sha": "e40839e4b2ba4fc36cd74c73cc444f35483565d0", "filename": "editors/code/src/installation/interfaces.ts", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts?ref=a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "patch": "@@ -1,3 +1,5 @@\n+import * as vscode from \"vscode\";\n+\n export interface GithubRepo {\n     name: string;\n     owner: string;\n@@ -50,6 +52,17 @@ export namespace BinarySource {\n          * and in local `.dir`.\n          */\n         file: string;\n+\n+        /**\n+         * Tag of github release that denotes a version required by this extension.\n+         */\n+        version: string;\n+\n+        /**\n+         * Object that provides `get()/update()` operations to store metadata\n+         * about the actual binary, e.g. its actual version.\n+         */\n+        storage: vscode.Memento;\n     }\n \n }"}, {"sha": "80cb719e3674431ea78394fd8795d4282453b564", "filename": "editors/code/src/installation/server.ts", "status": "modified", "additions": 72, "deletions": 96, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts?ref=a15c8739b9a6da223e1f3a6ff6aa868913c0dbf4", "patch": "@@ -1,63 +1,15 @@\n import * as vscode from \"vscode\";\n import * as path from \"path\";\n import { strict as assert } from \"assert\";\n-import { promises as fs } from \"fs\";\n import { promises as dns } from \"dns\";\n import { spawnSync } from \"child_process\";\n-import { throttle } from \"throttle-debounce\";\n \n import { BinarySource } from \"./interfaces\";\n-import { fetchLatestArtifactReleaseInfo } from \"./fetch_latest_artifact_release_info\";\n-import { downloadFile } from \"./download_file\";\n-\n-export async function downloadLatestServer(\n-    {file: artifactFileName, dir: installationDir, repo}: BinarySource.GithubRelease\n-) {\n-    const { releaseName, downloadUrl } = (await fetchLatestArtifactReleaseInfo(\n-        repo, artifactFileName\n-    ))!;\n-\n-    await fs.mkdir(installationDir).catch(err => assert.strictEqual(\n-        err?.code,\n-        \"EEXIST\",\n-        `Couldn't create directory \"${installationDir}\" to download `+\n-        `language server binary: ${err.message}`\n-    ));\n-\n-    const installationPath = path.join(installationDir, artifactFileName);\n-\n-    console.time(\"Downloading ra_lsp_server\");\n-    await vscode.window.withProgress(\n-        {\n-            location: vscode.ProgressLocation.Notification,\n-            cancellable: false, // FIXME: add support for canceling download?\n-            title: `Downloading language server (${releaseName})`\n-        },\n-        async (progress, _cancellationToken) => {\n-            let lastPrecentage = 0;\n-            const filePermissions = 0o755; // (rwx, r_x, r_x)\n-            await downloadFile(downloadUrl, installationPath, filePermissions, throttle(\n-                200,\n-                /* noTrailing: */ true,\n-                (readBytes, totalBytes) => {\n-                    const newPercentage = (readBytes / totalBytes) * 100;\n-                    progress.report({\n-                        message: newPercentage.toFixed(0) + \"%\",\n-                        increment: newPercentage - lastPrecentage\n-                    });\n-\n-                    lastPrecentage = newPercentage;\n-                })\n-            );\n-        }\n-    );\n-    console.timeEnd(\"Downloading ra_lsp_server\");\n-}\n-export async function ensureServerBinary(\n-    serverSource: null | BinarySource\n-): Promise<null | string> {\n+import { fetchArtifactReleaseInfo } from \"./fetch_artifact_release_info\";\n+import { downloadArtifact } from \"./download_artifact\";\n \n-    if (!serverSource) {\n+export async function ensureServerBinary(source: null | BinarySource): Promise<null | string> {\n+    if (!source) {\n         vscode.window.showErrorMessage(\n             \"Unfortunately we don't ship binaries for your platform yet. \" +\n             \"You need to manually clone rust-analyzer repository and \" +\n@@ -69,80 +21,104 @@ export async function ensureServerBinary(\n         return null;\n     }\n \n-    switch (serverSource.type) {\n+    switch (source.type) {\n         case BinarySource.Type.ExplicitPath: {\n-            if (isBinaryAvailable(serverSource.path)) {\n-                return serverSource.path;\n+            if (isBinaryAvailable(source.path)) {\n+                return source.path;\n             }\n \n             vscode.window.showErrorMessage(\n-                `Unable to run ${serverSource.path} binary. ` +\n+                `Unable to run ${source.path} binary. ` +\n                 `To use the pre-built language server, set \"rust-analyzer.raLspServerPath\" ` +\n                 \"value to `null` or remove it from the settings to use it by default.\"\n             );\n             return null;\n         }\n         case BinarySource.Type.GithubRelease: {\n-            const prebuiltBinaryPath = path.join(serverSource.dir, serverSource.file);\n+            const prebuiltBinaryPath = path.join(source.dir, source.file);\n+\n+            const installedVersion: null | string = getServerVersion(source.storage);\n+            const requiredVersion: string = source.version;\n \n-            if (isBinaryAvailable(prebuiltBinaryPath)) {\n+            console.log(\"Installed version:\", installedVersion, \"required:\", requiredVersion);\n+\n+            if (isBinaryAvailable(prebuiltBinaryPath) && installedVersion == requiredVersion) {\n+                // FIXME: check for new releases and notify the user to update if possible\n                 return prebuiltBinaryPath;\n             }\n \n             const userResponse = await vscode.window.showInformationMessage(\n-                \"Language server binary for rust-analyzer was not found. \" +\n+                `Language server version ${source.version} for rust-analyzer is not installed. ` +\n                 \"Do you want to download it now?\",\n                 \"Download now\", \"Cancel\"\n             );\n             if (userResponse !== \"Download now\") return null;\n \n-            try {\n-                await downloadLatestServer(serverSource);\n-            } catch (err) {\n-                vscode.window.showErrorMessage(\n-                    `Failed to download language server from ${serverSource.repo.name} ` +\n-                    `GitHub repository: ${err.message}`\n-                );\n+            if (!await downloadServer(source)) return null;\n \n-                console.error(err);\n+            return prebuiltBinaryPath;\n+        }\n+    }\n+}\n \n-                dns.resolve('example.com').then(\n-                    addrs => console.log(\"DNS resolution for example.com was successful\", addrs),\n-                    err => {\n-                        console.error(\n-                            \"DNS resolution for example.com failed, \" +\n-                            \"there might be an issue with Internet availability\"\n-                        );\n-                        console.error(err);\n-                    }\n-                );\n+async function downloadServer(source: BinarySource.GithubRelease): Promise<boolean> {\n+    try {\n+        const releaseInfo = (await fetchArtifactReleaseInfo(source.repo, source.file, source.version))!;\n+\n+        await downloadArtifact(releaseInfo, source.file, source.dir, \"language server\");\n+        await setServerVersion(source.storage, releaseInfo.releaseName);\n+    } catch (err) {\n+        vscode.window.showErrorMessage(\n+            `Failed to download language server from ${source.repo.name} ` +\n+            `GitHub repository: ${err.message}`\n+        );\n+\n+        console.error(err);\n \n-                return null;\n+        dns.resolve('example.com').then(\n+            addrs => console.log(\"DNS resolution for example.com was successful\", addrs),\n+            err => {\n+                console.error(\n+                    \"DNS resolution for example.com failed, \" +\n+                    \"there might be an issue with Internet availability\"\n+                );\n+                console.error(err);\n             }\n+        );\n+        return false;\n+    }\n \n-            if (!isBinaryAvailable(prebuiltBinaryPath)) assert(false,\n-                `Downloaded language server binary is not functional.` +\n-                `Downloaded from: ${JSON.stringify(serverSource)}`\n-            );\n+    if (!isBinaryAvailable(path.join(source.dir, source.file))) assert(false,\n+        `Downloaded language server binary is not functional.` +\n+        `Downloaded from: ${JSON.stringify(source, null, 4)}`\n+    );\n \n+    vscode.window.showInformationMessage(\n+        \"Rust analyzer language server was successfully installed \ud83e\udd80\"\n+    );\n \n-            vscode.window.showInformationMessage(\n-                \"Rust analyzer language server was successfully installed \ud83e\udd80\"\n-            );\n+    return true;\n+}\n \n-            return prebuiltBinaryPath;\n-        }\n-    }\n+function isBinaryAvailable(binaryPath: string): boolean {\n+    const res = spawnSync(binaryPath, [\"--version\"]);\n \n-    function isBinaryAvailable(binaryPath: string) {\n-        const res = spawnSync(binaryPath, [\"--version\"]);\n+    // ACHTUNG! `res` type declaration is inherently wrong, see\n+    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/42221\n \n-        // ACHTUNG! `res` type declaration is inherently wrong, see\n-        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/42221\n+    console.log(\"Checked binary availablity via --version\", res);\n+    console.log(binaryPath, \"--version output:\", res.output?.map(String));\n \n-        console.log(\"Checked binary availablity via --version\", res);\n-        console.log(binaryPath, \"--version output:\", res.output?.map(String));\n+    return res.status === 0;\n+}\n \n-        return res.status === 0;\n-    }\n+function getServerVersion(storage: vscode.Memento): null | string {\n+    const version = storage.get<null | string>(\"server-version\", null);\n+    console.log(\"Get server-version:\", version);\n+    return version;\n+}\n+\n+async function setServerVersion(storage: vscode.Memento, version: string): Promise<void> {\n+    console.log(\"Set server-version:\", version);\n+    await storage.update(\"server-version\", version.toString());\n }"}]}