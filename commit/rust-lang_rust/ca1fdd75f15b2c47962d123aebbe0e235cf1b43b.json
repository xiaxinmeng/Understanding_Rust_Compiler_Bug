{"sha": "ca1fdd75f15b2c47962d123aebbe0e235cf1b43b", "node_id": "C_kwDOAAsO6NoAKGNhMWZkZDc1ZjE1YjJjNDc5NjJkMTIzYWViYmUwZTIzNWNmMWI0M2I", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-04T20:13:12Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-04T20:13:12Z"}, "message": "Regen docs", "tree": {"sha": "e7eb6b8193bc6d0dfd49090c6a20a6ac9d8a7ba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7eb6b8193bc6d0dfd49090c6a20a6ac9d8a7ba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b", "html_url": "https://github.com/rust-lang/rust/commit/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f7e14e78b26e34470ee5f1f1beae0720aa2b0fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7e14e78b26e34470ee5f1f1beae0720aa2b0fd", "html_url": "https://github.com/rust-lang/rust/commit/1f7e14e78b26e34470ee5f1f1beae0720aa2b0fd"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "9d6e18f1a7efc3b270cf1e54a31ae3c2d27ee6b6", "filename": "crates/ide_completion/src/snippet.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=ca1fdd75f15b2c47962d123aebbe0e235cf1b43b", "patch": "@@ -1,3 +1,6 @@\n+//! User (postfix)-snippet definitions.\n+//!\n+//! Actual logic is implemented in [`crate::completions::postfix`] and [`crate::completions::snippet`].\n use ide_db::helpers::{import_assets::LocatedImport, insert_use::ImportScope};\n use itertools::Itertools;\n use syntax::ast;"}, {"sha": "9fde9db8d66c47e40b1d3df208e44478da4140c3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=ca1fdd75f15b2c47962d123aebbe0e235cf1b43b", "patch": "@@ -282,9 +282,9 @@ config_data! {\n         rustfmt_enableRangeFormatting: bool = \"false\",\n \n         /// Workspace symbol search scope.\n-        workspace_symbol_search_scope: WorskpaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n+        workspace_symbol_search_scope: WorkspaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n         /// Workspace symbol search kind.\n-        workspace_symbol_search_kind: WorskpaceSymbolSearchKindDef = \"\\\"only_types\\\"\",\n+        workspace_symbol_search_kind: WorkspaceSymbolSearchKindDef = \"\\\"only_types\\\"\",\n     }\n }\n \n@@ -893,14 +893,14 @@ impl Config {\n     pub fn workspace_symbol(&self) -> WorkspaceSymbolConfig {\n         WorkspaceSymbolConfig {\n             search_scope: match self.data.workspace_symbol_search_scope {\n-                WorskpaceSymbolSearchScopeDef::Workspace => WorkspaceSymbolSearchScope::Workspace,\n-                WorskpaceSymbolSearchScopeDef::WorkspaceAndDependencies => {\n+                WorkspaceSymbolSearchScopeDef::Workspace => WorkspaceSymbolSearchScope::Workspace,\n+                WorkspaceSymbolSearchScopeDef::WorkspaceAndDependencies => {\n                     WorkspaceSymbolSearchScope::WorkspaceAndDependencies\n                 }\n             },\n             search_kind: match self.data.workspace_symbol_search_kind {\n-                WorskpaceSymbolSearchKindDef::OnlyTypes => WorkspaceSymbolSearchKind::OnlyTypes,\n-                WorskpaceSymbolSearchKindDef::AllSymbols => WorkspaceSymbolSearchKind::AllSymbols,\n+                WorkspaceSymbolSearchKindDef::OnlyTypes => WorkspaceSymbolSearchKind::OnlyTypes,\n+                WorkspaceSymbolSearchKindDef::AllSymbols => WorkspaceSymbolSearchKind::AllSymbols,\n             },\n         }\n     }\n@@ -1065,14 +1065,14 @@ enum ImportPrefixDef {\n \n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n-enum WorskpaceSymbolSearchScopeDef {\n+enum WorkspaceSymbolSearchScopeDef {\n     Workspace,\n     WorkspaceAndDependencies,\n }\n \n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n-enum WorskpaceSymbolSearchKindDef {\n+enum WorkspaceSymbolSearchKindDef {\n     OnlyTypes,\n     AllSymbols,\n }\n@@ -1203,6 +1203,12 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"items\": { \"type\": \"string\" },\n             \"uniqueItems\": true,\n         },\n+        \"FxHashMap<String, PostfixSnippetDef>\" => set! {\n+            \"type\": \"object\",\n+        },\n+        \"FxHashMap<String, SnippetDef>\" => set! {\n+            \"type\": \"object\",\n+        },\n         \"FxHashMap<String, String>\" => set! {\n             \"type\": \"object\",\n         },\n@@ -1259,15 +1265,15 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"type\": \"array\",\n             \"items\": { \"type\": [\"string\", \"object\"] },\n         },\n-        \"WorskpaceSymbolSearchScopeDef\" => set! {\n+        \"WorkspaceSymbolSearchScopeDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": [\"workspace\", \"workspace_and_dependencies\"],\n             \"enumDescriptions\": [\n                 \"Search in current workspace only\",\n                 \"Search in current workspace and dependencies\"\n             ],\n         },\n-        \"WorskpaceSymbolSearchKindDef\" => set! {\n+        \"WorkspaceSymbolSearchKindDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": [\"only_types\", \"all_symbols\"],\n             \"enumDescriptions\": ["}, {"sha": "9076b93d35fa200f96e9bcd1c65b954740666d47", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=ca1fdd75f15b2c47962d123aebbe0e235cf1b43b", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: ad52054176909945\n+lsp_ext.rs hash: c6568e4035333f3a\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}, {"sha": "fd6d03cb8ad7fcde4d448e8d46194356cc163ab7", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/ca1fdd75f15b2c47962d123aebbe0e235cf1b43b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=ca1fdd75f15b2c47962d123aebbe0e235cf1b43b", "patch": "@@ -585,11 +585,21 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.completion.snippets\": {\n+                    \"markdownDescription\": \"Custom completion snippets.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.completion.postfix.enable\": {\n                     \"markdownDescription\": \"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.completion.postfix.snippets\": {\n+                    \"markdownDescription\": \"Custom postfix completion snippets.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.completion.autoimport.enable\": {\n                     \"markdownDescription\": \"Toggles the additional completions that automatically add imports when completed.\\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\",\n                     \"default\": true,"}]}