{"sha": "125b729dddda053d022ae8db32d42fdf3d1ea48d", "node_id": "C_kwDOAAsO6NoAKDEyNWI3MjlkZGRkYTA1M2QwMjJhZThkYjMyZDQyZmRmM2QxZWE0OGQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-03T13:36:39Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-05T10:58:55Z"}, "message": "Allow arbitrary keys in feeding API", "tree": {"sha": "12d6439795c9fb35a724654eaae7ff7355a05013", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12d6439795c9fb35a724654eaae7ff7355a05013"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/125b729dddda053d022ae8db32d42fdf3d1ea48d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/125b729dddda053d022ae8db32d42fdf3d1ea48d", "html_url": "https://github.com/rust-lang/rust/commit/125b729dddda053d022ae8db32d42fdf3d1ea48d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/125b729dddda053d022ae8db32d42fdf3d1ea48d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38ff3b3853dabcd524ba0e3faf2521e2172af38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38ff3b3853dabcd524ba0e3faf2521e2172af38", "html_url": "https://github.com/rust-lang/rust/commit/c38ff3b3853dabcd524ba0e3faf2521e2172af38"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "40207c335a46de48eaa36da3c8f2009834c25d24", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/125b729dddda053d022ae8db32d42fdf3d1ea48d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125b729dddda053d022ae8db32d42fdf3d1ea48d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=125b729dddda053d022ae8db32d42fdf3d1ea48d", "patch": "@@ -1034,16 +1034,23 @@ pub struct FreeRegionInfo {\n \n /// This struct should only be created by `create_def`.\n #[derive(Copy, Clone)]\n-pub struct TyCtxtFeed<'tcx> {\n+pub struct TyCtxtFeed<'tcx, KEY: Copy> {\n     pub tcx: TyCtxt<'tcx>,\n     // Do not allow direct access, as downstream code must not mutate this field.\n-    def_id: LocalDefId,\n+    key: KEY,\n }\n \n-impl<'tcx> TyCtxtFeed<'tcx> {\n+impl<'tcx, KEY: Copy> TyCtxtFeed<'tcx, KEY> {\n+    #[inline(always)]\n+    pub fn key(&self) -> KEY {\n+        self.key\n+    }\n+}\n+\n+impl<'tcx> TyCtxtFeed<'tcx, LocalDefId> {\n     #[inline(always)]\n     pub fn def_id(&self) -> LocalDefId {\n-        self.def_id\n+        self.key\n     }\n }\n \n@@ -1515,7 +1522,7 @@ impl<'tcx> TyCtxtAt<'tcx> {\n         self,\n         parent: LocalDefId,\n         data: hir::definitions::DefPathData,\n-    ) -> TyCtxtFeed<'tcx> {\n+    ) -> TyCtxtFeed<'tcx, LocalDefId> {\n         // This function modifies `self.definitions` using a side-effect.\n         // We need to ensure that these side effects are re-run by the incr. comp. engine.\n         // Depending on the forever-red node will tell the graph that the calling query\n@@ -1536,9 +1543,9 @@ impl<'tcx> TyCtxtAt<'tcx> {\n         // This is fine because:\n         // - those queries are `eval_always` so we won't miss their result changing;\n         // - this write will have happened before these queries are called.\n-        let def_id = self.definitions.write().create_def(parent, data);\n+        let key = self.definitions.write().create_def(parent, data);\n \n-        let feed = TyCtxtFeed { tcx: self.tcx, def_id };\n+        let feed = TyCtxtFeed { tcx: self.tcx, key };\n         feed.def_span(self.span);\n         feed\n     }"}, {"sha": "e073fca92e78ec2a45f8d57e4e3c24dfc806c2b5", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/125b729dddda053d022ae8db32d42fdf3d1ea48d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125b729dddda053d022ae8db32d42fdf3d1ea48d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=125b729dddda053d022ae8db32d42fdf3d1ea48d", "patch": "@@ -330,11 +330,11 @@ macro_rules! define_callbacks {\n \n macro_rules! define_feedable {\n     ($($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n-        impl<'tcx> TyCtxtFeed<'tcx> {\n-            $($(#[$attr])*\n+        $(impl<'tcx, K: IntoQueryParam<$($K)*> + Copy> TyCtxtFeed<'tcx, K> {\n+            $(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, value: $V) -> query_stored::$name<'tcx> {\n-                let key = self.def_id().into_query_param();\n+                let key = self.key().into_query_param();\n                 opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 let tcx = self.tcx;\n@@ -361,8 +361,8 @@ macro_rules! define_feedable {\n                     dep_graph::hash_result,\n                 );\n                 cache.complete(key, value, dep_node_index)\n-            })*\n-        }\n+            }\n+        })*\n     }\n }\n "}]}