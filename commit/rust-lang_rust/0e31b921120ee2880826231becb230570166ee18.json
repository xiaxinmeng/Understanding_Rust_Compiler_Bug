{"sha": "0e31b921120ee2880826231becb230570166ee18", "node_id": "C_kwDOAAsO6NoAKDBlMzFiOTIxMTIwZWUyODgwODI2MjMxYmVjYjIzMDU3MDE2NmVlMTg", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-03-01T00:53:25Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-04-15T13:36:30Z"}, "message": "Add codegen for global_asm! sym operands", "tree": {"sha": "739daeae6f10067e3444ef5d03fac790eff0f1a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/739daeae6f10067e3444ef5d03fac790eff0f1a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e31b921120ee2880826231becb230570166ee18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e31b921120ee2880826231becb230570166ee18", "html_url": "https://github.com/rust-lang/rust/commit/0e31b921120ee2880826231becb230570166ee18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e31b921120ee2880826231becb230570166ee18/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "249d3e9dd943e68d80f5a0d779aa7ab75dd536ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/249d3e9dd943e68d80f5a0d779aa7ab75dd536ef", "html_url": "https://github.com/rust-lang/rust/commit/249d3e9dd943e68d80f5a0d779aa7ab75dd536ef"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "2af050f0c7533282bd965bf3628936e1a9e682f4", "filename": "src/asm.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0e31b921120ee2880826231becb230570166ee18/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e31b921120ee2880826231becb230570166ee18/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=0e31b921120ee2880826231becb230570166ee18", "patch": "@@ -258,9 +258,14 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                 }\n \n                 InlineAsmOperandRef::SymFn { instance } => {\n+                    // TODO(@Amanieu): Additional mangling is needed on\n+                    // some targets to add a leading underscore (Mach-O)\n+                    // or byte count suffixes (x86 Windows).\n                     constants_len += self.tcx.symbol_name(instance).name.len();\n                 }\n                 InlineAsmOperandRef::SymStatic { def_id } => {\n+                    // TODO(@Amanieu): Additional mangling is needed on\n+                    // some targets to add a leading underscore (Mach-O).\n                     constants_len += self.tcx.symbol_name(Instance::mono(self.tcx, def_id)).name.len();\n                 }\n             }\n@@ -412,13 +417,16 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                         }\n \n                         InlineAsmOperandRef::SymFn { instance } => {\n+                            // TODO(@Amanieu): Additional mangling is needed on\n+                            // some targets to add a leading underscore (Mach-O)\n+                            // or byte count suffixes (x86 Windows).\n                             let name = self.tcx.symbol_name(instance).name;\n                             template_str.push_str(name);\n                         }\n \n                         InlineAsmOperandRef::SymStatic { def_id } => {\n-                            // TODO(@Commeownist): This may not be sufficient for all kinds of statics.\n-                            // Some statics may need the `@plt` suffix, like thread-local vars.\n+                            // TODO(@Amanieu): Additional mangling is needed on\n+                            // some targets to add a leading underscore (Mach-O).\n                             let instance = Instance::mono(self.tcx, def_id);\n                             let name = self.tcx.symbol_name(instance).name;\n                             template_str.push_str(name);\n@@ -656,8 +664,8 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n     }\n }\n \n-impl<'gcc, 'tcx> AsmMethods for CodegenCx<'gcc, 'tcx> {\n-    fn codegen_global_asm(&self, template: &[InlineAsmTemplatePiece], operands: &[GlobalAsmOperandRef], options: InlineAsmOptions, _line_spans: &[Span]) {\n+impl<'gcc, 'tcx> AsmMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n+    fn codegen_global_asm(&self, template: &[InlineAsmTemplatePiece], operands: &[GlobalAsmOperandRef<'tcx>], options: InlineAsmOptions, _line_spans: &[Span]) {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n \n         // Default to Intel syntax on x86\n@@ -690,6 +698,22 @@ impl<'gcc, 'tcx> AsmMethods for CodegenCx<'gcc, 'tcx> {\n                             // here unlike normal inline assembly.\n                             template_str.push_str(string);\n                         }\n+\n+                        GlobalAsmOperandRef::SymFn { instance } => {\n+                            // TODO(@Amanieu): Additional mangling is needed on\n+                            // some targets to add a leading underscore (Mach-O)\n+                            // or byte count suffixes (x86 Windows).\n+                            let name = self.tcx.symbol_name(instance).name;\n+                            template_str.push_str(name);\n+                        }\n+\n+                        GlobalAsmOperandRef::SymStatic { def_id } => {\n+                            // TODO(@Amanieu): Additional mangling is needed on\n+                            // some targets to add a leading underscore (Mach-O).\n+                            let instance = Instance::mono(self.tcx, def_id);\n+                            let name = self.tcx.symbol_name(instance).name;\n+                            template_str.push_str(name);\n+                        }\n                     }\n                 }\n             }"}]}