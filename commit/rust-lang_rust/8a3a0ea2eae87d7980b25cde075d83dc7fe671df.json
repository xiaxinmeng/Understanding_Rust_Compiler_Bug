{"sha": "8a3a0ea2eae87d7980b25cde075d83dc7fe671df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhM2EwZWEyZWFlODdkNzk4MGIyNWNkZTA3NWQ4M2RjN2ZlNjcxZGY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-11T18:41:54Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-11T18:41:54Z"}, "message": "Rustup to rust-lang/rust#67000", "tree": {"sha": "e87593fa10626b0d9b62f1d4ec91e473dac6a044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e87593fa10626b0d9b62f1d4ec91e473dac6a044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a3a0ea2eae87d7980b25cde075d83dc7fe671df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3a0ea2eae87d7980b25cde075d83dc7fe671df", "html_url": "https://github.com/rust-lang/rust/commit/8a3a0ea2eae87d7980b25cde075d83dc7fe671df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a3a0ea2eae87d7980b25cde075d83dc7fe671df/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11fb749a9680fd79d35a658efd8a0438b6682820", "url": "https://api.github.com/repos/rust-lang/rust/commits/11fb749a9680fd79d35a658efd8a0438b6682820", "html_url": "https://github.com/rust-lang/rust/commit/11fb749a9680fd79d35a658efd8a0438b6682820"}], "stats": {"total": 91, "additions": 29, "deletions": 62}, "files": [{"sha": "e71775cf5768f6a9d050adba9c718eceb4a0098d", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a0ea2eae87d7980b25cde075d83dc7fe671df/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a0ea2eae87d7980b25cde075d83dc7fe671df/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=8a3a0ea2eae87d7980b25cde075d83dc7fe671df", "patch": "@@ -334,7 +334,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 let result = self\n                     .lcx\n                     .tcx\n-                    .const_eval_resolve(self.param_env, def_id, substs, None)\n+                    .const_eval_resolve(self.param_env, def_id, substs, None, None)\n                     .ok()?;\n                 let result = miri_to_const(&result);\n                 if result.is_some() {"}, {"sha": "1dcde250417a62f36d444dffc8bb4347a53d1c6f", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 28, "deletions": 61, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a0ea2eae87d7980b25cde075d83dc7fe671df/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a0ea2eae87d7980b25cde075d83dc7fe671df/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=8a3a0ea2eae87d7980b25cde075d83dc7fe671df", "patch": "@@ -157,7 +157,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 let pred_arg = if_chain! {\n                     if let Some((pred_fn_def_id, pred_arg, pred_arg_ty, Some(res))) =\n                         is_call_with_ref_arg(cx, mir, &pred_terminator.kind);\n-                    if res.base == mir::PlaceBase::Local(cloned);\n+                    if res.local == cloned;\n                     if match_def_path(cx, pred_fn_def_id, &paths::DEREF_TRAIT_METHOD);\n                     if match_type(cx, pred_arg_ty, &paths::PATH_BUF)\n                         || match_type(cx, pred_arg_ty, &paths::OS_STRING);\n@@ -264,7 +264,7 @@ fn is_call_with_ref_arg<'tcx>(\n     if_chain! {\n         if let mir::TerminatorKind::Call { func, args, destination, .. } = kind;\n         if args.len() == 1;\n-        if let mir::Operand::Move(mir::Place { base: mir::PlaceBase::Local(local), .. }) = &args[0];\n+        if let mir::Operand::Move(mir::Place { local, .. }) = &args[0];\n         if let ty::FnDef(def_id, _) = func.ty(&*mir, cx.tcx).kind;\n         if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(&*mir, cx.tcx));\n         if !is_copy(cx, inner_ty);\n@@ -288,14 +288,7 @@ fn find_stmt_assigns_to<'tcx>(\n     bb: mir::BasicBlock,\n ) -> Option<(mir::Local, CannotMoveOut)> {\n     let rvalue = mir.basic_blocks()[bb].statements.iter().rev().find_map(|stmt| {\n-        if let mir::StatementKind::Assign(box (\n-            mir::Place {\n-                base: mir::PlaceBase::Local(local),\n-                ..\n-            },\n-            v,\n-        )) = &stmt.kind\n-        {\n+        if let mir::StatementKind::Assign(box (mir::Place { local, .. }, v)) = &stmt.kind {\n             return if *local == to_local { Some(v) } else { None };\n         }\n \n@@ -333,25 +326,15 @@ fn base_local_and_movability<'tcx>(\n     // Accessing a field of an ADT that has `Drop`. Moving the field out will cause E0509.\n     let mut field = false;\n \n-    let PlaceRef {\n-        base: place_base,\n-        mut projection,\n-    } = place.as_ref();\n-    if let mir::PlaceBase::Local(local) = place_base {\n-        while let [base @ .., elem] = projection {\n-            projection = base;\n-            deref |= matches!(elem, mir::ProjectionElem::Deref);\n-            field |= matches!(elem, mir::ProjectionElem::Field(..))\n-                && has_drop(\n-                    cx,\n-                    mir::Place::ty_from(place_base, projection, &mir.local_decls, cx.tcx).ty,\n-                );\n-        }\n-\n-        Some((*local, deref || field))\n-    } else {\n-        None\n+    let PlaceRef { local, mut projection } = place.as_ref();\n+    while let [base @ .., elem] = projection {\n+        projection = base;\n+        deref |= matches!(elem, mir::ProjectionElem::Deref);\n+        field |= matches!(elem, mir::ProjectionElem::Field(..))\n+            && has_drop(cx, mir::Place::ty_from(local, projection, &mir.local_decls, cx.tcx).ty);\n     }\n+\n+    Some((*local, deref || field))\n }\n \n struct LocalUseVisitor {\n@@ -502,38 +485,28 @@ impl<'a, 'tcx> PossibleBorrowerVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n     fn visit_assign(&mut self, place: &mir::Place<'tcx>, rvalue: &mir::Rvalue<'_>, _location: mir::Location) {\n-        if let mir::PlaceBase::Local(lhs) = place.base {\n-            match rvalue {\n-                mir::Rvalue::Ref(_, _, borrowed) => {\n-                    if let mir::PlaceBase::Local(borrowed_local) = borrowed.base {\n-                        self.possible_borrower.add(borrowed_local, lhs);\n-                    }\n-                },\n-                other => {\n-                    if !ContainsRegion.visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty) {\n-                        return;\n+        let lhs = place.local;\n+        match rvalue {\n+            mir::Rvalue::Ref(_, _, borrowed) => {\n+                self.possible_borrower.add(borrowed.local, lhs);\n+            },\n+            other => {\n+                if !ContainsRegion.visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty) {\n+                    return;\n+                }\n+                rvalue_locals(other, |rhs| {\n+                    if lhs != rhs {\n+                        self.possible_borrower.add(rhs, lhs);\n                     }\n-                    rvalue_locals(other, |rhs| {\n-                        if lhs != rhs {\n-                            self.possible_borrower.add(rhs, lhs);\n-                        }\n-                    });\n-                },\n-            }\n+                });\n+            },\n         }\n     }\n \n     fn visit_terminator(&mut self, terminator: &mir::Terminator<'_>, _loc: mir::Location) {\n         if let mir::TerminatorKind::Call {\n             args,\n-            destination:\n-                Some((\n-                    mir::Place {\n-                        base: mir::PlaceBase::Local(dest),\n-                        ..\n-                    },\n-                    _,\n-                )),\n+            destination: Some((mir::Place { local: dest, .. }, _)),\n             ..\n         } = &terminator.kind\n         {\n@@ -547,9 +520,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n             for op in args {\n                 match op {\n                     mir::Operand::Copy(p) | mir::Operand::Move(p) => {\n-                        if let mir::PlaceBase::Local(arg) = p.base {\n-                            self.possible_borrower.add(arg, *dest);\n-                        }\n+                        self.possible_borrower.add(p.local, *dest);\n                     },\n                     _ => (),\n                 }\n@@ -570,11 +541,7 @@ fn rvalue_locals(rvalue: &mir::Rvalue<'_>, mut visit: impl FnMut(mir::Local)) {\n     use rustc::mir::Rvalue::*;\n \n     let mut visit_op = |op: &mir::Operand<'_>| match op {\n-        mir::Operand::Copy(p) | mir::Operand::Move(p) => {\n-            if let mir::PlaceBase::Local(l) = p.base {\n-                visit(l)\n-            }\n-        },\n+        mir::Operand::Copy(p) | mir::Operand::Move(p) => visit(p.local),\n         _ => (),\n     };\n "}]}