{"sha": "1acbf4b8028ae4eb86128c07945ac0cdc8f7d811", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhY2JmNGI4MDI4YWU0ZWI4NjEyOGMwNzk0NWFjMGNkYzhmN2Q4MTE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-22T19:39:35Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-26T21:50:18Z"}, "message": "Early abort instead of building up zero sized values", "tree": {"sha": "7e12af9a44f3faff3118bf97c23be902cd039671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e12af9a44f3faff3118bf97c23be902cd039671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1acbf4b8028ae4eb86128c07945ac0cdc8f7d811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1acbf4b8028ae4eb86128c07945ac0cdc8f7d811", "html_url": "https://github.com/rust-lang/rust/commit/1acbf4b8028ae4eb86128c07945ac0cdc8f7d811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1acbf4b8028ae4eb86128c07945ac0cdc8f7d811/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95205518dd255d3b71161baf35c1d3f5850ccb46", "url": "https://api.github.com/repos/rust-lang/rust/commits/95205518dd255d3b71161baf35c1d3f5850ccb46", "html_url": "https://github.com/rust-lang/rust/commit/95205518dd255d3b71161baf35c1d3f5850ccb46"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "67f1c8072d6800e235c153a0ff445f84d658687d", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1acbf4b8028ae4eb86128c07945ac0cdc8f7d811/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1acbf4b8028ae4eb86128c07945ac0cdc8f7d811/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=1acbf4b8028ae4eb86128c07945ac0cdc8f7d811", "patch": "@@ -127,10 +127,6 @@ impl<Tag> Allocation<Tag> {\n             extra: (),\n         }\n     }\n-\n-    pub fn zst(align: Align) -> Self {\n-        Self::undef(Size::ZERO, align)\n-    }\n }\n \n impl Allocation<(), ()> {"}, {"sha": "c6efbe883327910427f17c396b9f7dac24a7d392", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1acbf4b8028ae4eb86128c07945ac0cdc8f7d811/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1acbf4b8028ae4eb86128c07945ac0cdc8f7d811/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=1acbf4b8028ae4eb86128c07945ac0cdc8f7d811", "patch": "@@ -237,11 +237,11 @@ use super::{FieldPat, Pat, PatKind, PatRange};\n \n use rustc::hir::def_id::DefId;\n use rustc::hir::{HirId, RangeEnd};\n-use rustc::ty::layout::{Align, Integer, IntegerExt, Size, VariantIdx};\n+use rustc::ty::layout::{Integer, IntegerExt, Size, VariantIdx};\n use rustc::ty::{self, Const, Ty, TyCtxt, TypeFoldable, VariantDef};\n \n use rustc::lint;\n-use rustc::mir::interpret::{truncate, AllocId, Allocation, ConstValue, Pointer, Scalar};\n+use rustc::mir::interpret::{truncate, AllocId, ConstValue, Pointer, Scalar};\n use rustc::mir::Field;\n use rustc::util::captures::Captures;\n use rustc::util::common::ErrorReported;\n@@ -2366,17 +2366,19 @@ fn specialize_one_pattern<'p, 'tcx>(\n             let (alloc, offset, n, ty) = match value.ty.kind {\n                 ty::Array(t, n) => {\n                     let n = n.eval_usize(cx.tcx, cx.param_env);\n+                    // Shortcut for `n == 0` where no matter what `alloc` and `offset` we produce,\n+                    // the result would be exactly what we early return here.\n+                    if n == 0 {\n+                        if ctor_wild_subpatterns.len() as u64 == 0 {\n+                            return Some(PatStack::from_slice(&[]));\n+                        } else {\n+                            return None;\n+                        }\n+                    }\n                     match value.val {\n                         ty::ConstKind::Value(ConstValue::ByRef { offset, alloc, .. }) => {\n                             (Cow::Borrowed(alloc), offset, n, t)\n                         }\n-                        ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, .. }))\n-                            if n == 0 =>\n-                        {\n-                            let align = Align::from_bytes(data as u64).unwrap();\n-                            // empty array\n-                            (Cow::Owned(Allocation::zst(align)), Size::ZERO, 0, t)\n-                        }\n                         _ => span_bug!(pat.span, \"array pattern is {:?}\", value,),\n                     }\n                 }"}]}