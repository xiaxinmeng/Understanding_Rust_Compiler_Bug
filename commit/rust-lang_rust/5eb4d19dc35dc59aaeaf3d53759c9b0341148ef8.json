{"sha": "5eb4d19dc35dc59aaeaf3d53759c9b0341148ef8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYjRkMTlkYzM1ZGM1OWFhZWFmM2Q1Mzc1OWM5YjAzNDExNDhlZjg=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-06-09T00:10:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-10T00:46:27Z"}, "message": "Add a --color flag to test binaries\n\nIt uses the same behavior as rustc's.", "tree": {"sha": "42a3a23521bb590013b1c26a467d7cfd24978342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42a3a23521bb590013b1c26a467d7cfd24978342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eb4d19dc35dc59aaeaf3d53759c9b0341148ef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb4d19dc35dc59aaeaf3d53759c9b0341148ef8", "html_url": "https://github.com/rust-lang/rust/commit/5eb4d19dc35dc59aaeaf3d53759c9b0341148ef8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eb4d19dc35dc59aaeaf3d53759c9b0341148ef8/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9faf5a3483c4fc9a0d290c9dc6af006c6b76255c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9faf5a3483c4fc9a0d290c9dc6af006c6b76255c", "html_url": "https://github.com/rust-lang/rust/commit/9faf5a3483c4fc9a0d290c9dc6af006c6b76255c"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "977b7dc32c5658b7d01e9bd4c4b79137bd647bff", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5eb4d19dc35dc59aaeaf3d53759c9b0341148ef8/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb4d19dc35dc59aaeaf3d53759c9b0341148ef8/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=5eb4d19dc35dc59aaeaf3d53759c9b0341148ef8", "patch": "@@ -292,6 +292,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         save_metrics: config.save_metrics.clone(),\n         test_shard: config.test_shard.clone(),\n         nocapture: false,\n+        color: test::AutoColor,\n     }\n }\n "}, {"sha": "7d94e46a88a6e74b5769e57e1f5fc4e979422482", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5eb4d19dc35dc59aaeaf3d53759c9b0341148ef8/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb4d19dc35dc59aaeaf3d53759c9b0341148ef8/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=5eb4d19dc35dc59aaeaf3d53759c9b0341148ef8", "patch": "@@ -271,6 +271,12 @@ pub fn test_main_static_x(args: &[~str], tests: &[TestDescAndFn]) {\n                      tests)\n }\n \n+pub enum ColorConfig {\n+    AutoColor,\n+    AlwaysColor,\n+    NeverColor,\n+}\n+\n pub struct TestOpts {\n     pub filter: Option<Regex>,\n     pub run_ignored: bool,\n@@ -282,6 +288,7 @@ pub struct TestOpts {\n     pub test_shard: Option<(uint,uint)>,\n     pub logfile: Option<Path>,\n     pub nocapture: bool,\n+    pub color: ColorConfig,\n }\n \n impl TestOpts {\n@@ -298,6 +305,7 @@ impl TestOpts {\n             test_shard: None,\n             logfile: None,\n             nocapture: false,\n+            color: AutoColor,\n         }\n     }\n }\n@@ -324,7 +332,11 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n       getopts::optopt(\"\", \"test-shard\", \"run shard A, of B shards, worth of the testsuite\",\n                      \"A.B\"),\n       getopts::optflag(\"\", \"nocapture\", \"don't capture stdout/stderr of each \\\n-                                         task, allow printing directly\"))\n+                                         task, allow printing directly\"),\n+      getopts::optopt(\"\", \"color\", \"Configure coloring of output:\n+            auto   = colorize if stdout is a tty and tests are run on serially (default);\n+            always = always colorize output;\n+            never  = never colorize output;\", \"auto|always|never\"))\n }\n \n fn usage(binary: &str) {\n@@ -406,6 +418,16 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         nocapture = os::getenv(\"RUST_TEST_NOCAPTURE\").is_some();\n     }\n \n+    let color = match matches.opt_str(\"color\").as_ref().map(|s| s.as_slice()) {\n+        Some(\"auto\") | None => AutoColor,\n+        Some(\"always\") => AlwaysColor,\n+        Some(\"never\") => NeverColor,\n+\n+        Some(v) => return Some(Err(format!(\"argument for --color must be \\\n+                                            auto, always, or never (was {})\",\n+                                            v))),\n+    };\n+\n     let test_opts = TestOpts {\n         filter: filter,\n         run_ignored: run_ignored,\n@@ -417,6 +439,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         test_shard: test_shard,\n         logfile: logfile,\n         nocapture: nocapture,\n+        color: color,\n     };\n \n     Some(Ok(test_opts))\n@@ -492,7 +515,7 @@ impl<T: Writer> ConsoleTestState<T> {\n         Ok(ConsoleTestState {\n             out: out,\n             log_out: log_out,\n-            use_color: use_color(),\n+            use_color: use_color(opts),\n             total: 0u,\n             passed: 0u,\n             failed: 0u,\n@@ -867,8 +890,12 @@ fn should_sort_failures_before_printing_them() {\n     assert!(apos < bpos);\n }\n \n-fn use_color() -> bool {\n-    get_concurrency() == 1 && io::stdout().get_ref().isatty()\n+fn use_color(opts: &TestOpts) -> bool {\n+    match opts.color {\n+        AutoColor => get_concurrency() == 1 && io::stdout().get_ref().isatty(),\n+        AlwaysColor => true,\n+        NeverColor => false,\n+    }\n }\n \n #[deriving(Clone)]"}]}