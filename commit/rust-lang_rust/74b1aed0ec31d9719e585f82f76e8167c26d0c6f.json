{"sha": "74b1aed0ec31d9719e585f82f76e8167c26d0c6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YjFhZWQwZWMzMWQ5NzE5ZTU4NWY4MmY3NmU4MTY3YzI2ZDBjNmY=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-25T05:14:49Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-25T05:14:49Z"}, "message": "Add methods for obtaining iterators over the keys and values of a TrieMap", "tree": {"sha": "55c24717a926381275f53d23cd3fc10efe8aa7b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55c24717a926381275f53d23cd3fc10efe8aa7b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74b1aed0ec31d9719e585f82f76e8167c26d0c6f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74b1aed0ec31d9719e585f82f76e8167c26d0c6f", "html_url": "https://github.com/rust-lang/rust/commit/74b1aed0ec31d9719e585f82f76e8167c26d0c6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74b1aed0ec31d9719e585f82f76e8167c26d0c6f/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b339e09ab5e6b6eb47adef1d82944dc620ac7d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b339e09ab5e6b6eb47adef1d82944dc620ac7d3", "html_url": "https://github.com/rust-lang/rust/commit/0b339e09ab5e6b6eb47adef1d82944dc620ac7d3"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "14ab122f0a43afe415853c58f0e6930436eb6550", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/74b1aed0ec31d9719e585f82f76e8167c26d0c6f/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b1aed0ec31d9719e585f82f76e8167c26d0c6f/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=74b1aed0ec31d9719e585f82f76e8167c26d0c6f", "patch": "@@ -18,6 +18,7 @@ use core::default::Default;\n use core::mem::zeroed;\n use core::mem;\n use core::uint;\n+use core::iter;\n use std::hash::{Writer, Hash};\n \n use {Collection, Mutable, Map, MutableMap, Set, MutableSet};\n@@ -196,6 +197,18 @@ impl<T> TrieMap<T> {\n         self.root.each_reverse(f)\n     }\n \n+    /// Get an iterator visiting all keys in ascending order by the keys.\n+    /// Iterator element type is `uint`.\n+    pub fn keys<'r>(&'r self) -> Keys<'r, T> {\n+        self.iter().map(|(k, _v)| k)\n+    }\n+\n+    /// Get an iterator visiting all values in ascending order by the keys.\n+    /// Iterator element type is `&'r T`.\n+    pub fn values<'r>(&'r self) -> Values<'r, T> {\n+        self.iter().map(|(_k, v)| v)\n+    }\n+\n     /// Get an iterator over the key-value pairs in the map, ordered by keys.\n     ///\n     /// # Example\n@@ -783,6 +796,14 @@ pub struct MutEntries<'a, T> {\n     remaining_max: uint\n }\n \n+/// Forward iterator over the keys of a map\n+pub type Keys<'a, T> =\n+    iter::Map<'static, (uint, &'a T), uint, Entries<'a, T>>;\n+\n+/// Forward iterator over the values of a map\n+pub type Values<'a, T> =\n+    iter::Map<'static, (uint, &'a T), &'a T, Entries<'a, T>>;\n+\n // FIXME #5846: see `addr!` above.\n macro_rules! item { ($i:item) => {$i}}\n \n@@ -1070,6 +1091,28 @@ mod test_map {\n         }\n     }\n \n+    #[test]\n+    fn test_keys() {\n+        let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n+        let map = vec.move_iter().collect::<TrieMap<char>>();\n+        let keys = map.keys().collect::<Vec<uint>>();\n+        assert_eq!(keys.len(), 3);\n+        assert!(keys.contains(&1));\n+        assert!(keys.contains(&2));\n+        assert!(keys.contains(&3));\n+    }\n+\n+    #[test]\n+    fn test_values() {\n+        let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n+        let map = vec.move_iter().collect::<TrieMap<char>>();\n+        let values = map.values().map(|&v| v).collect::<Vec<char>>();\n+        assert_eq!(values.len(), 3);\n+        assert!(values.contains(&'a'));\n+        assert!(values.contains(&'b'));\n+        assert!(values.contains(&'c'));\n+    }\n+\n     #[test]\n     fn test_iteration() {\n         let empty_map : TrieMap<uint> = TrieMap::new();"}]}