{"sha": "c36b2092bbb88604fe5b467be56ccd870307be94", "node_id": "C_kwDOAAsO6NoAKGMzNmIyMDkyYmJiODg2MDRmZTViNDY3YmU1NmNjZDg3MDMwN2JlOTQ", "commit": {"author": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-05-20T11:40:11Z"}, "committer": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-05-20T11:40:11Z"}, "message": "create new tool rustdoc-gui-test", "tree": {"sha": "313e12d0b9bb4192858f8894ce82fcc6c60ed554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/313e12d0b9bb4192858f8894ce82fcc6c60ed554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c36b2092bbb88604fe5b467be56ccd870307be94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c36b2092bbb88604fe5b467be56ccd870307be94", "html_url": "https://github.com/rust-lang/rust/commit/c36b2092bbb88604fe5b467be56ccd870307be94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c36b2092bbb88604fe5b467be56ccd870307be94/comments", "author": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "548978f1d025e9b937cdedabe3a86da70789dbdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/548978f1d025e9b937cdedabe3a86da70789dbdc", "html_url": "https://github.com/rust-lang/rust/commit/548978f1d025e9b937cdedabe3a86da70789dbdc"}], "stats": {"total": 243, "additions": 243, "deletions": 0}, "files": [{"sha": "1da5a5ccb5fa88e6457dad5666a5686da8b6e624", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c36b2092bbb88604fe5b467be56ccd870307be94/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c36b2092bbb88604fe5b467be56ccd870307be94/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c36b2092bbb88604fe5b467be56ccd870307be94", "patch": "@@ -4324,6 +4324,15 @@ dependencies = [\n  \"tracing-tree\",\n ]\n \n+[[package]]\n+name = \"rustdoc-gui-test\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"compiletest\",\n+ \"getopts\",\n+ \"walkdir\",\n+]\n+\n [[package]]\n name = \"rustdoc-json-types\"\n version = \"0.1.0\""}, {"sha": "8eb378afe428a380b45bcfa09171ae3d692f0cb1", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c36b2092bbb88604fe5b467be56ccd870307be94/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c36b2092bbb88604fe5b467be56ccd870307be94/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c36b2092bbb88604fe5b467be56ccd870307be94", "patch": "@@ -40,6 +40,7 @@ members = [\n   \"src/tools/generate-copyright\",\n   \"src/tools/suggest-tests\",\n   \"src/tools/generate-windows-sys\",\n+  \"src/tools/rustdoc-gui-test\",\n ]\n \n exclude = ["}, {"sha": "f0c5b367117e1996f767ea5cbff3292e456b618f", "filename": "src/tools/rustdoc-gui-test/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c36b2092bbb88604fe5b467be56ccd870307be94/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c36b2092bbb88604fe5b467be56ccd870307be94/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui-test%2FCargo.toml?ref=c36b2092bbb88604fe5b467be56ccd870307be94", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"rustdoc-gui-test\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+[dependencies]\n+compiletest = { path = \"../compiletest\" }\n+getopts = \"0.2\"\n+walkdir = \"2\""}, {"sha": "dc4c56a5e7abd67f6d718ff2df9a7efa0cb9cd5c", "filename": "src/tools/rustdoc-gui-test/src/config.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c36b2092bbb88604fe5b467be56ccd870307be94/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36b2092bbb88604fe5b467be56ccd870307be94/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fconfig.rs?ref=c36b2092bbb88604fe5b467be56ccd870307be94", "patch": "@@ -0,0 +1,62 @@\n+use getopts::Options;\n+use std::{env, path::PathBuf};\n+\n+pub(crate) struct Config {\n+    pub(crate) nodejs: PathBuf,\n+    pub(crate) npm: PathBuf,\n+    pub(crate) rust_src: PathBuf,\n+    pub(crate) out_dir: PathBuf,\n+    pub(crate) initial_cargo: PathBuf,\n+    pub(crate) jobs: String,\n+    pub(crate) test_args: Vec<PathBuf>,\n+    pub(crate) goml_files: Vec<PathBuf>,\n+    pub(crate) rustc: PathBuf,\n+    pub(crate) rustdoc: PathBuf,\n+    pub(crate) verbose: bool,\n+}\n+\n+impl Config {\n+    pub(crate) fn from_args(args: Vec<String>) -> Self {\n+        let mut opts = Options::new();\n+        opts.reqopt(\"\", \"nodejs\", \"absolute path of nodejs\", \"PATH\")\n+            .reqopt(\"\", \"npm\", \"absolute path of npm\", \"PATH\")\n+            .reqopt(\"\", \"out-dir\", \"output path of doc compilation\", \"PATH\")\n+            .reqopt(\"\", \"rust-src\", \"root source of the rust source\", \"PATH\")\n+            .reqopt(\n+                \"\",\n+                \"initial-cargo\",\n+                \"path to cargo to use for compiling tests/rustdoc-gui/src/*\",\n+                \"PATH\",\n+            )\n+            .reqopt(\"\", \"jobs\", \"jobs arg of browser-ui-test\", \"JOBS\")\n+            .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n+            .optmulti(\"\", \"test-arg\", \"args for browser-ui-test\", \"FLAGS\")\n+            .optmulti(\"\", \"goml-file\", \"goml files for testing with browser-ui-test\", \"LIST\");\n+\n+        let (argv0, args_) = args.split_first().unwrap();\n+        if args.len() == 1 || args[1] == \"-h\" || args[1] == \"--help\" {\n+            let message = format!(\"Usage: {} [OPTIONS] [TESTNAME...]\", argv0);\n+            println!(\"{}\", opts.usage(&message));\n+            std::process::exit(1);\n+        }\n+\n+        let matches = &match opts.parse(args_) {\n+            Ok(m) => m,\n+            Err(f) => panic!(\"{:?}\", f),\n+        };\n+\n+        Self {\n+            nodejs: matches.opt_str(\"nodejs\").map(PathBuf::from).expect(\"nodejs isn't available\"),\n+            npm: matches.opt_str(\"npm\").map(PathBuf::from).expect(\"npm isn't available\"),\n+            rust_src: matches.opt_str(\"rust-src\").map(PathBuf::from).unwrap(),\n+            out_dir: matches.opt_str(\"out-dir\").map(PathBuf::from).unwrap(),\n+            initial_cargo: matches.opt_str(\"initial-cargo\").map(PathBuf::from).unwrap(),\n+            jobs: matches.opt_str(\"jobs\").unwrap(),\n+            goml_files: matches.opt_strs(\"goml-file\").iter().map(PathBuf::from).collect(),\n+            test_args: matches.opt_strs(\"test-arg\").iter().map(PathBuf::from).collect(),\n+            rustc: env::var(\"RUSTC\").map(PathBuf::from).unwrap(),\n+            rustdoc: env::var(\"RUSTDOC\").map(PathBuf::from).unwrap(),\n+            verbose: matches.opt_present(\"verbose\"),\n+        }\n+    }\n+}"}, {"sha": "8dc18dfaea2d6db5213fb99473ff0d6daed45e1b", "filename": "src/tools/rustdoc-gui-test/src/main.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/c36b2092bbb88604fe5b467be56ccd870307be94/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36b2092bbb88604fe5b467be56ccd870307be94/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui-test%2Fsrc%2Fmain.rs?ref=c36b2092bbb88604fe5b467be56ccd870307be94", "patch": "@@ -0,0 +1,162 @@\n+use compiletest::header::TestProps;\n+use config::Config;\n+use std::path::{Path, PathBuf};\n+use std::process::Command;\n+use std::sync::Arc;\n+use std::{env, fs};\n+\n+mod config;\n+\n+fn get_browser_ui_test_version_inner(npm: &Path, global: bool) -> Option<String> {\n+    let mut command = Command::new(&npm);\n+    command.arg(\"list\").arg(\"--parseable\").arg(\"--long\").arg(\"--depth=0\");\n+    if global {\n+        command.arg(\"--global\");\n+    }\n+    let lines = command\n+        .output()\n+        .map(|output| String::from_utf8_lossy(&output.stdout).into_owned())\n+        .unwrap_or(String::new());\n+    lines\n+        .lines()\n+        .find_map(|l| l.split(':').nth(1)?.strip_prefix(\"browser-ui-test@\"))\n+        .map(|v| v.to_owned())\n+}\n+\n+fn get_browser_ui_test_version(npm: &Path) -> Option<String> {\n+    get_browser_ui_test_version_inner(npm, false)\n+        .or_else(|| get_browser_ui_test_version_inner(npm, true))\n+}\n+\n+fn compare_browser_ui_test_version(installed_version: &str, src: &Path) {\n+    match fs::read_to_string(\n+        src.join(\"src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version\"),\n+    ) {\n+        Ok(v) => {\n+            if v.trim() != installed_version {\n+                eprintln!(\n+                    \"\u26a0\ufe0f Installed version of browser-ui-test (`{}`) is different than the \\\n+                     one used in the CI (`{}`)\",\n+                    installed_version, v\n+                );\n+                eprintln!(\n+                    \"You can install this version using `npm update browser-ui-test` or by using \\\n+                     `npm install browser-ui-test@{}`\",\n+                    v,\n+                );\n+            }\n+        }\n+        Err(e) => eprintln!(\"Couldn't find the CI browser-ui-test version: {:?}\", e),\n+    }\n+}\n+\n+fn find_librs<P: AsRef<Path>>(path: P) -> Option<PathBuf> {\n+    for entry in walkdir::WalkDir::new(path) {\n+        let entry = entry.ok()?;\n+        if entry.file_type().is_file() && entry.file_name() == \"lib.rs\" {\n+            return Some(entry.path().to_path_buf());\n+        }\n+    }\n+    None\n+}\n+\n+// FIXME: move `bootstrap::util::try_run` into `build_helper` crate\n+// and use that one instead of creating this function.\n+fn try_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n+    let status = match cmd.status() {\n+        Ok(status) => status,\n+        Err(e) => panic!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e),\n+    };\n+    if !status.success() && print_cmd_on_fail {\n+        println!(\n+            \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+             expected success, got: {}\\n\\n\",\n+            cmd, status\n+        );\n+    }\n+    status.success()\n+}\n+\n+fn main() {\n+    let config = Arc::new(Config::from_args(env::args().collect()));\n+\n+    // The goal here is to check if the necessary packages are installed, and if not, we\n+    // panic.\n+    match get_browser_ui_test_version(&config.npm) {\n+        Some(version) => {\n+            // We also check the version currently used in CI and emit a warning if it's not the\n+            // same one.\n+            compare_browser_ui_test_version(&version, &config.rust_src);\n+        }\n+        None => {\n+            eprintln!(\n+                r#\"\n+error: rustdoc-gui test suite cannot be run because npm `browser-ui-test` dependency is missing.\n+\n+If you want to install the `browser-ui-test` dependency, run `npm install browser-ui-test`\n+\"#,\n+            );\n+\n+            panic!(\"Cannot run rustdoc-gui tests\");\n+        }\n+    }\n+\n+    let src_path = config.rust_src.join(\"tests/rustdoc-gui/src\");\n+    for entry in src_path.read_dir().expect(\"read_dir call failed\") {\n+        if let Ok(entry) = entry {\n+            let path = entry.path();\n+\n+            if !path.is_dir() {\n+                continue;\n+            }\n+\n+            let mut cargo = Command::new(&config.initial_cargo);\n+            cargo\n+                .arg(\"doc\")\n+                .arg(\"--target-dir\")\n+                .arg(&config.out_dir)\n+                .env(\"RUSTC_BOOTSTRAP\", \"1\")\n+                .env(\"RUSTDOC\", &config.rustdoc)\n+                .env(\"RUSTC\", &config.rustc)\n+                .current_dir(path);\n+\n+            if let Some(librs) = find_librs(entry.path()) {\n+                let compiletest_c = compiletest::common::Config {\n+                    edition: None,\n+                    mode: compiletest::common::Mode::Rustdoc,\n+                    ..Default::default()\n+                };\n+\n+                let test_props = TestProps::from_file(&librs, None, &compiletest_c);\n+\n+                if !test_props.compile_flags.is_empty() {\n+                    cargo.env(\"RUSTDOCFLAGS\", test_props.compile_flags.join(\" \"));\n+                }\n+\n+                if let Some(flags) = &test_props.run_flags {\n+                    cargo.arg(flags);\n+                }\n+            }\n+\n+            try_run(&mut cargo, config.verbose);\n+        }\n+    }\n+\n+    let mut command = Command::new(&config.nodejs);\n+    command\n+        .arg(config.rust_src.join(\"src/tools/rustdoc-gui/tester.js\"))\n+        .arg(\"--jobs\")\n+        .arg(&config.jobs)\n+        .arg(\"--doc-folder\")\n+        .arg(config.out_dir.join(\"doc\"))\n+        .arg(\"--tests-folder\")\n+        .arg(config.rust_src.join(\"tests/rustdoc-gui\"));\n+\n+    for file in &config.goml_files {\n+        command.arg(\"--file\").arg(file);\n+    }\n+\n+    command.args(&config.test_args);\n+\n+    try_run(&mut command, config.verbose);\n+}"}]}