{"sha": "f18335edb2917a310b69a522e6f3fde30af3d419", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxODMzNWVkYjI5MTdhMzEwYjY5YTUyMmU2ZjNmZGUzMGFmM2Q0MTk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-07T10:49:22Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-23T18:35:22Z"}, "message": "bootstrap: convert rustc-src to use Tarball", "tree": {"sha": "d998c035fa9c223fee9333c0ae1c0a0c4e67da17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d998c035fa9c223fee9333c0ae1c0a0c4e67da17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f18335edb2917a310b69a522e6f3fde30af3d419", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/jjgIACgkQPgar6Auq\n8Zw5PhAAtKKiYeY2irzuh+Ud1Oh8eY06eGseZb9h/bzwvDJjpk4C7jxXNBoOp1X6\nOdbiGmTPDmaK8iXHSrKAh0SKTyFQEVMe9i3lpNaFfIAIGnU2Xnc5pa22bHucINjZ\nk41ffHSKA2r1Ry1OG9HhRyaiz22119Sbq/lU/Sk8qJX6+kf2BXQKhmYaOyR5TxES\nbfVcDsxhmLae1GxrFm/SMTF8mVQ1AoWVtZkuPOnhh69dMfoe+hESnzNRYrmJc5qR\n91t7FbiJxRDboJqpJumxi3oVAcl0kh6PzAzUfxPQDGNjDe7J5xrkGfGpghHMtbGh\nwsdzjiXO+guUyrkN8hkYmu7stMvguhUuvWxtqf2iHl9/ckZ5q1nYI41rG1mRCPiG\ntSnzJS5iladaeE8NlKDpfRLScxTZQ9Cv0auiNbB19Q7BiUm1iJGba4knqEvxtsQJ\niit+ZYe+ULiSqin2AufcbsiIvdtgpoWRmENAZJbiix24j4aMECvscnSbH7sa9rXy\nuAzWaLqMh6shCoaezpHbWG0VSREmT5XnLfzBtklf0kv8xA1xMOWGmuay86b8RIEP\nK22eTPxNmFFkIN3Eee+V4TgOcNhuB7nuuM8vS5lG7TBRJ98rgCVcFW9b75Qv+Tte\nU1ijnqy0LMaaWd1ilPsqcsstJ1tD9LSkCfM6S8rxqz8pPSfZY6s=\n=reTN\n-----END PGP SIGNATURE-----", "payload": "tree d998c035fa9c223fee9333c0ae1c0a0c4e67da17\nparent 48924ab7088802123a64af77e5201ddfc1f1a733\nauthor Pietro Albini <pietro@pietroalbini.org> 1607338162 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1608748522 +0100\n\nbootstrap: convert rustc-src to use Tarball\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f18335edb2917a310b69a522e6f3fde30af3d419", "html_url": "https://github.com/rust-lang/rust/commit/f18335edb2917a310b69a522e6f3fde30af3d419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f18335edb2917a310b69a522e6f3fde30af3d419/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48924ab7088802123a64af77e5201ddfc1f1a733", "url": "https://api.github.com/repos/rust-lang/rust/commits/48924ab7088802123a64af77e5201ddfc1f1a733", "html_url": "https://github.com/rust-lang/rust/commit/48924ab7088802123a64af77e5201ddfc1f1a733"}], "stats": {"total": 107, "additions": 45, "deletions": 62}, "files": [{"sha": "258483bf1345b5a42fd1ce3ce7ad0afd2c690ea4", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f18335edb2917a310b69a522e6f3fde30af3d419/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18335edb2917a310b69a522e6f3fde30af3d419/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=f18335edb2917a310b69a522e6f3fde30af3d419", "patch": "@@ -37,10 +37,6 @@ pub fn tmpdir(builder: &Builder<'_>) -> PathBuf {\n     builder.out.join(\"tmp/dist\")\n }\n \n-fn rust_installer(builder: &Builder<'_>) -> Command {\n-    builder.tool_cmd(Tool::RustInstaller)\n-}\n-\n fn missing_tool(tool_name: &str, skip: bool) {\n     if skip {\n         println!(\"Unable to build {}, skipping dist\", tool_name)\n@@ -867,11 +863,8 @@ impl Step for PlainSourceTarball {\n \n     /// Creates the plain source tarball\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        // Make sure that the root folder of tarball has the correct name\n-        let plain_name = format!(\"{}-src\", pkgname(builder, \"rustc\"));\n-        let plain_dst_src = tmpdir(builder).join(&plain_name);\n-        let _ = fs::remove_dir_all(&plain_dst_src);\n-        t!(fs::create_dir_all(&plain_dst_src));\n+        let tarball = Tarball::new(builder, \"rustc\", \"src\");\n+        let plain_dst_src = tarball.image_dir();\n \n         // This is the set of root paths which will become part of the source package\n         let src_files = [\n@@ -914,28 +907,7 @@ impl Step for PlainSourceTarball {\n             builder.run(&mut cmd);\n         }\n \n-        // Create plain source tarball\n-        let plain_name = format!(\"rustc-{}-src\", builder.rust_package_vers());\n-        let mut tarball = distdir(builder).join(&format!(\"{}.tar.gz\", plain_name));\n-        tarball.set_extension(\"\"); // strip .gz\n-        tarball.set_extension(\"\"); // strip .tar\n-        if let Some(dir) = tarball.parent() {\n-            builder.create_dir(&dir);\n-        }\n-        builder.info(\"running installer\");\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"tarball\")\n-            .arg(\"--input\")\n-            .arg(&plain_name)\n-            .arg(\"--output\")\n-            .arg(&tarball)\n-            .arg(\"--work-dir=.\")\n-            .current_dir(tmpdir(builder));\n-\n-        builder.info(\"Create plain source tarball\");\n-        let _time = timeit(builder);\n-        builder.run(&mut cmd);\n-        distdir(builder).join(&format!(\"{}.tar.gz\", plain_name))\n+        tarball.bare()\n     }\n }\n "}, {"sha": "5d73a655427b20fa3049080bf7339eb488fb6c0b", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 42, "deletions": 31, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f18335edb2917a310b69a522e6f3fde30af3d419/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18335edb2917a310b69a522e6f3fde30af3d419/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=f18335edb2917a310b69a522e6f3fde30af3d419", "patch": "@@ -94,7 +94,6 @@ pub(crate) struct Tarball<'a> {\n     temp_dir: PathBuf,\n     image_dir: PathBuf,\n     overlay_dir: PathBuf,\n-    work_dir: PathBuf,\n \n     include_target_in_component_name: bool,\n     is_preview: bool,\n@@ -113,12 +112,14 @@ impl<'a> Tarball<'a> {\n     fn new_inner(builder: &'a Builder<'a>, component: &str, target: Option<String>) -> Self {\n         let pkgname = crate::dist::pkgname(builder, component);\n \n-        let temp_dir = builder.out.join(\"tmp\").join(\"tarball\").join(component);\n+        let mut temp_dir = builder.out.join(\"tmp\").join(\"tarball\");\n+        if let Some(target) = &target {\n+            temp_dir = temp_dir.join(target);\n+        }\n         let _ = std::fs::remove_dir_all(&temp_dir);\n \n         let image_dir = temp_dir.join(\"image\");\n         let overlay_dir = temp_dir.join(\"overlay\");\n-        let work_dir = temp_dir.join(\"work\");\n \n         Self {\n             builder,\n@@ -132,7 +133,6 @@ impl<'a> Tarball<'a> {\n             temp_dir,\n             image_dir,\n             overlay_dir,\n-            work_dir,\n \n             include_target_in_component_name: false,\n             is_preview: false,\n@@ -200,7 +200,7 @@ impl<'a> Tarball<'a> {\n \n     pub(crate) fn persist_work_dir(&mut self) -> PathBuf {\n         self.delete_temp_dir = false;\n-        self.work_dir.clone()\n+        self.temp_dir.clone()\n     }\n \n     pub(crate) fn generate(self) -> PathBuf {\n@@ -222,9 +222,8 @@ impl<'a> Tarball<'a> {\n             cmd.arg(\"generate\")\n                 .arg(\"--image-dir\")\n                 .arg(&this.image_dir)\n-                .arg(\"--non-installed-overlay\")\n-                .arg(&this.overlay_dir)\n                 .arg(format!(\"--component-name={}\", &component_name));\n+            this.non_bare_args(cmd);\n         })\n     }\n \n@@ -236,14 +235,41 @@ impl<'a> Tarball<'a> {\n         }\n \n         self.run(|this, cmd| {\n-            cmd.arg(\"combine\")\n-                .arg(\"--input-tarballs\")\n-                .arg(input_tarballs)\n-                .arg(\"--non-installed-overlay\")\n-                .arg(&this.overlay_dir);\n+            cmd.arg(\"combine\").arg(\"--input-tarballs\").arg(input_tarballs);\n+            this.non_bare_args(cmd);\n         });\n     }\n \n+    pub(crate) fn bare(self) -> PathBuf {\n+        self.run(|this, cmd| {\n+            cmd.arg(\"tarball\")\n+                .arg(\"--input\")\n+                .arg(&this.image_dir)\n+                .arg(\"--output\")\n+                .arg(crate::dist::distdir(this.builder).join(this.package_name()));\n+        })\n+    }\n+\n+    fn package_name(&self) -> String {\n+        if let Some(target) = &self.target {\n+            format!(\"{}-{}\", self.pkgname, target)\n+        } else {\n+            self.pkgname.clone()\n+        }\n+    }\n+\n+    fn non_bare_args(&self, cmd: &mut Command) {\n+        cmd.arg(\"--rel-manifest-dir=rustlib\")\n+            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+            .arg(format!(\"--product-name={}\", self.product_name))\n+            .arg(format!(\"--success-message={} installed.\", self.component))\n+            .arg(format!(\"--package-name={}\", self.package_name()))\n+            .arg(\"--non-installed-overlay\")\n+            .arg(&self.overlay_dir)\n+            .arg(\"--output-dir\")\n+            .arg(crate::dist::distdir(self.builder));\n+    }\n+\n     fn run(self, build_cli: impl FnOnce(&Tarball<'a>, &mut Command)) -> PathBuf {\n         t!(std::fs::create_dir_all(&self.overlay_dir));\n         self.builder.create(&self.overlay_dir.join(\"version\"), &self.overlay.version(self.builder));\n@@ -256,32 +282,17 @@ impl<'a> Tarball<'a> {\n \n         let mut cmd = self.builder.tool_cmd(crate::tool::Tool::RustInstaller);\n \n-        let package_name = if let Some(target) = &self.target {\n-            self.builder.info(&format!(\"Dist {} ({})\", self.component, target));\n-            format!(\"{}-{}\", self.pkgname, target)\n-        } else {\n-            self.builder.info(&format!(\"Dist {}\", self.component));\n-            self.pkgname.clone()\n-        };\n-\n+        let package_name = self.package_name();\n+        self.builder.info(&format!(\"Dist {}\", package_name));\n         let _time = crate::util::timeit(self.builder);\n \n-        let distdir = crate::dist::distdir(self.builder);\n         build_cli(&self, &mut cmd);\n-        cmd.arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n-            .arg(format!(\"--product-name={}\", self.product_name))\n-            .arg(format!(\"--success-message={} installed.\", self.component))\n-            .arg(format!(\"--package-name={}\", package_name))\n-            .arg(\"--work-dir\")\n-            .arg(self.work_dir)\n-            .arg(\"--output-dir\")\n-            .arg(&distdir);\n+        cmd.arg(\"--work-dir\").arg(&self.temp_dir);\n         self.builder.run(&mut cmd);\n         if self.delete_temp_dir {\n             t!(std::fs::remove_dir_all(&self.temp_dir));\n         }\n \n-        distdir.join(format!(\"{}.tar.gz\", package_name))\n+        crate::dist::distdir(self.builder).join(format!(\"{}.tar.gz\", package_name))\n     }\n }"}]}