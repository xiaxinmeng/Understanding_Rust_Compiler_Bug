{"sha": "b66eb696af9ef1952f2582b2b8ec07156868b2f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NmViNjk2YWY5ZWYxOTUyZjI1ODJiMmI4ZWMwNzE1Njg2OGIyZjY=", "commit": {"author": {"name": "Yenlin Chen", "email": "3822365+hencrice@users.noreply.github.com", "date": "2020-12-13T04:14:08Z"}, "committer": {"name": "Yenlin Chen", "email": "3822365+hencrice@users.noreply.github.com", "date": "2020-12-13T04:49:22Z"}, "message": "Refactored verbose print into a function\n\nAlso handle Tuple and Array separately, which was not explicitly checked.\n\nFixes #79799.", "tree": {"sha": "6ef8bf5aff389dcd1390daff1f9b086a98b994df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef8bf5aff389dcd1390daff1f9b086a98b994df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b66eb696af9ef1952f2582b2b8ec07156868b2f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b66eb696af9ef1952f2582b2b8ec07156868b2f6", "html_url": "https://github.com/rust-lang/rust/commit/b66eb696af9ef1952f2582b2b8ec07156868b2f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b66eb696af9ef1952f2582b2b8ec07156868b2f6/comments", "author": {"login": "hencrice", "id": 3822365, "node_id": "MDQ6VXNlcjM4MjIzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3822365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hencrice", "html_url": "https://github.com/hencrice", "followers_url": "https://api.github.com/users/hencrice/followers", "following_url": "https://api.github.com/users/hencrice/following{/other_user}", "gists_url": "https://api.github.com/users/hencrice/gists{/gist_id}", "starred_url": "https://api.github.com/users/hencrice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hencrice/subscriptions", "organizations_url": "https://api.github.com/users/hencrice/orgs", "repos_url": "https://api.github.com/users/hencrice/repos", "events_url": "https://api.github.com/users/hencrice/events{/privacy}", "received_events_url": "https://api.github.com/users/hencrice/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hencrice", "id": 3822365, "node_id": "MDQ6VXNlcjM4MjIzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3822365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hencrice", "html_url": "https://github.com/hencrice", "followers_url": "https://api.github.com/users/hencrice/followers", "following_url": "https://api.github.com/users/hencrice/following{/other_user}", "gists_url": "https://api.github.com/users/hencrice/gists{/gist_id}", "starred_url": "https://api.github.com/users/hencrice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hencrice/subscriptions", "organizations_url": "https://api.github.com/users/hencrice/orgs", "repos_url": "https://api.github.com/users/hencrice/repos", "events_url": "https://api.github.com/users/hencrice/events{/privacy}", "received_events_url": "https://api.github.com/users/hencrice/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "602899cd012cf44165abf8f5e665ed93974f4ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/602899cd012cf44165abf8f5e665ed93974f4ad8", "html_url": "https://github.com/rust-lang/rust/commit/602899cd012cf44165abf8f5e665ed93974f4ad8"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "9b81629400a66253f81b370d12579a1df27f6c99", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b66eb696af9ef1952f2582b2b8ec07156868b2f6/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66eb696af9ef1952f2582b2b8ec07156868b2f6/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=b66eb696af9ef1952f2582b2b8ec07156868b2f6", "patch": "@@ -17,7 +17,8 @@ use rustc_middle::mir::interpret::{\n };\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::{self, TyCtxt, TyS, TypeFoldable, TypeVisitor};\n use rustc_target::abi::Size;\n use std::ops::ControlFlow;\n \n@@ -408,6 +409,33 @@ impl ExtraComments<'tcx> {\n     }\n }\n \n+fn use_verbose(ty: &&TyS<'tcx>) -> bool {\n+    match ty.kind() {\n+        ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_) => false,\n+        // Unit type\n+        ty::Tuple(g_args) if g_args.is_empty() => false,\n+        ty::Tuple(g_args) => {\n+            // could have used `try_fold` here but it seems a bit silly that\n+            // the accumulator is useless\n+            let mut should_be_verbose = false;\n+            for g_arg in g_args.iter() {\n+                if match g_arg.unpack() {\n+                    GenericArgKind::Type(ty) => use_verbose(&ty),\n+                    GenericArgKind::Const(ty::Const { ty, val: _ }) => use_verbose(ty),\n+                    _ => false,\n+                } {\n+                    should_be_verbose = true;\n+                    break;\n+                }\n+            }\n+            should_be_verbose\n+        }\n+        ty::Array(ty, _) => use_verbose(ty),\n+        ty::FnDef(..) => false,\n+        _ => true,\n+    }\n+}\n+\n impl Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n@@ -430,16 +458,10 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, _: Location) {\n         self.super_const(constant);\n         let ty::Const { ty, val, .. } = constant;\n-        match ty.kind() {\n-            ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_) => {}\n-            // Unit type\n-            ty::Tuple(tys) if tys.is_empty() => {}\n-            ty::FnDef(..) => {}\n-            _ => {\n-                self.push(\"ty::Const\");\n-                self.push(&format!(\"+ ty: {:?}\", ty));\n-                self.push(&format!(\"+ val: {:?}\", val));\n-            }\n+        if use_verbose(ty) {\n+            self.push(\"ty::Const\");\n+            self.push(&format!(\"+ ty: {:?}\", ty));\n+            self.push(&format!(\"+ val: {:?}\", val));\n         }\n     }\n "}]}