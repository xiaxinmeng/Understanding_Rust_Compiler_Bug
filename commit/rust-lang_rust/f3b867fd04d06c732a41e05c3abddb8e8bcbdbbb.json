{"sha": "f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYjg2N2ZkMDRkMDZjNzMyYTQxZTA1YzNhYmRkYjhlOGJjYmRiYmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-11T17:48:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-11T17:49:21Z"}, "message": "add section on spawn_connected to tutorial and pull test into file", "tree": {"sha": "29b0b24f07769e6ccefda5ab2d7a901e1c8b30ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29b0b24f07769e6ccefda5ab2d7a901e1c8b30ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb", "html_url": "https://github.com/rust-lang/rust/commit/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0cf550527fe1cd6934dd4e25ea03ecb17f76c6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0cf550527fe1cd6934dd4e25ea03ecb17f76c6f", "html_url": "https://github.com/rust-lang/rust/commit/e0cf550527fe1cd6934dd4e25ea03ecb17f76c6f"}], "stats": {"total": 86, "additions": 67, "deletions": 19}, "files": [{"sha": "1b8ba6769ca428424462f86f6f2d40763dc9940a", "filename": "doc/tutorial/task.md", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb/doc%2Ftutorial%2Ftask.md", "raw_url": "https://github.com/rust-lang/rust/raw/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb/doc%2Ftutorial%2Ftask.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Ftask.md?ref=f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb", "patch": "@@ -74,3 +74,52 @@ to arrive on the port:\n     some_other_expensive_computation();\n     let result = comm::recv(port);\n \n+## Creating a task with a bi-directional communication path\n+\n+A very common thing to do is to spawn a child task where the parent\n+and child both need to exchange messages with each other.  The\n+function `task::spawn_connected()` supports this pattern.  We'll look\n+briefly at how it is used.\n+\n+To see how `spawn_connected()` works, we will create a child task\n+which receives `uint` messages, converts them to a string, and sends\n+the string in response.  The child terminates when `0` is received.\n+Here is the function which implements the child task:\n+\n+    fn stringifier(from_par: comm::port<uint>,\n+                   to_par: comm::chan<str>) {\n+        let value: uint;\n+        do {\n+            value = comm::recv(from_par);\n+            comm::send(to_par, uint::to_str(value, 10u));\n+        } while value != 0u;\n+    }\n+    \n+You can see that the function takes two parameters.  The first is a\n+port used to receive messages from the parent, and the second is a\n+channel used to send messages to the parent.  The body itself simply\n+loops, reading from the `from_par` port and then sending its response\n+to the `to_par` channel.  The actual response itself is simply the\n+strified version of the received value, `uint::to_str(value)`.\n+\n+Here is the code for the parent task:\n+    \n+    fn main() {\n+        let t = task::spawn_connected(stringifier);\n+        comm::send(t.to_child, 22u);\n+        assert comm::recv(t.from_child) == \"22\";\n+        comm::send(t.to_child, 23u);\n+        assert comm::recv(t.from_child) == \"23\";\n+        comm::send(t.to_child, 0u);\n+        assert comm::recv(t.from_child) == \"0\";\n+    }\n+\n+The call to `spawn_connected()` on the first line will instantiate the\n+various ports and channels and startup the child task.  The returned\n+value, `t`, is a record of type `task::connected_task<uint,str>`.  In\n+addition to the task id of the child, this record defines two fields,\n+`from_child` and `to_child`, which contain the port and channel\n+respectively for communicating with the child.  Those fields are used\n+here to send and receive three messages from the child task.\n+\n+"}, {"sha": "053dab56a0558b14bc8471655370693d43f5549d", "filename": "src/test/run-pass/task-spawn-connected.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb/src%2Ftest%2Frun-pass%2Ftask-spawn-connected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb/src%2Ftest%2Frun-pass%2Ftask-spawn-connected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-connected.rs?ref=f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb", "patch": "@@ -0,0 +1,18 @@\n+fn stringifier(from_par: comm::port<uint>,\n+               to_par: comm::chan<str>) {\n+    let value: uint;\n+    do {\n+        value = comm::recv(from_par);\n+        comm::send(to_par, uint::to_str(value, 10u));\n+    } while value != 0u;\n+}\n+\n+fn main() {\n+    let t = task::spawn_connected(stringifier);\n+    comm::send(t.to_child, 22u);\n+    assert comm::recv(t.from_child) == \"22\";\n+    comm::send(t.to_child, 23u);\n+    assert comm::recv(t.from_child) == \"23\";\n+    comm::send(t.to_child, 0u);\n+    assert comm::recv(t.from_child) == \"0\";\n+}\n\\ No newline at end of file"}, {"sha": "d1408d183d525cb4254668dcc924d5a5fa274a57", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=f3b867fd04d06c732a41e05c3abddb8e8bcbdbbb", "patch": "@@ -57,22 +57,3 @@ fn spawn_polymorphic() {\n     task::spawn {|| foo(true);};\n     task::spawn {|| foo(42);};\n }\n-\n-#[test]\n-fn spawn_connected_stringifier() {\n-    fn stringifer(p: comm::port<uint>, ch: comm::chan<str>) {\n-        let u = 1u;\n-        while u != 0u {\n-            u = comm::recv(p);\n-            comm::send(ch, uint::to_str(u, 10u));\n-        }\n-    }\n-\n-    let ch = task::spawn_connected(stringifer);\n-    comm::send(ch.to_child, 22u);\n-    assert \"22\" == comm::recv(ch.from_child);\n-    comm::send(ch.to_child, 44u);\n-    assert \"44\" == comm::recv(ch.from_child);\n-    comm::send(ch.to_child, 0u);\n-    assert \"0\" == comm::recv(ch.from_child);\n-}\n\\ No newline at end of file"}]}