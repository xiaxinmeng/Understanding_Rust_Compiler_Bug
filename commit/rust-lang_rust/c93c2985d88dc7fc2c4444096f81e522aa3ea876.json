{"sha": "c93c2985d88dc7fc2c4444096f81e522aa3ea876", "node_id": "C_kwDOAAsO6NoAKGM5M2MyOTg1ZDg4ZGM3ZmMyYzQ0NDQwOTZmODFlNTIyYWEzZWE4NzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-15T15:12:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-15T15:12:44Z"}, "message": "Rollup merge of #110049 - SkiFire13:localkey-with-docs-fix, r=workingjubilee\n\nDon't claim `LocalKey::with` prevents a reference to be sent across threads\n\nThe documentation for `LocalKey` claims that `with` yields a reference that cannot be sent across threads, but this is false since you can easily do that with scoped threads. What it actually prevents is the reference from outliving the current thread.", "tree": {"sha": "943a181fd13d63c0cfe3de335b9cccb4b049d2d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943a181fd13d63c0cfe3de335b9cccb4b049d2d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c93c2985d88dc7fc2c4444096f81e522aa3ea876", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkYkvsCRBK7hj4Ov3rIwAATPEIADLd7XaqoJCR8pAIEs9dbjXN\nVKsj2agJdqcYVkfbEQXZ4ew/4KE2wyJ42OXogd8/Fj2E4t1STn/DTX2JfZYhi/qL\nYtEDe8ZSzX9XREsnTffVOr7kv6ZjiyoFDD4AE/5ooslQWhvl4HbVsU51Nq8seWAG\njHo9xMsPt06AxAdN2mhAFJMJAwOLWeFaWQQr6MQTnnR1PZKLyonUNKwC0hiMNp3Z\nKW/K73cvBvlgAOiZsq1HeL3nQRHFTf5TxqkAK7SdRtR/5w10gbIu3/Cg9+sSG/TN\nYg1OTEGq1ifEryWgMPekvVcyCuiKwZRhqp5n5271WIamO8XgBSzFnynlfeLWDOg=\n=Ym+K\n-----END PGP SIGNATURE-----\n", "payload": "tree 943a181fd13d63c0cfe3de335b9cccb4b049d2d3\nparent 1063548a1a2ff954087eeeb8b6598c28cafa1e22\nparent 2563fbeab31def56b66cbdebd7bb0b7e5efbecb8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684163564 +0200\ncommitter GitHub <noreply@github.com> 1684163564 +0200\n\nRollup merge of #110049 - SkiFire13:localkey-with-docs-fix, r=workingjubilee\n\nDon't claim `LocalKey::with` prevents a reference to be sent across threads\n\nThe documentation for `LocalKey` claims that `with` yields a reference that cannot be sent across threads, but this is false since you can easily do that with scoped threads. What it actually prevents is the reference from outliving the current thread.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c93c2985d88dc7fc2c4444096f81e522aa3ea876", "html_url": "https://github.com/rust-lang/rust/commit/c93c2985d88dc7fc2c4444096f81e522aa3ea876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c93c2985d88dc7fc2c4444096f81e522aa3ea876/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1063548a1a2ff954087eeeb8b6598c28cafa1e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/1063548a1a2ff954087eeeb8b6598c28cafa1e22", "html_url": "https://github.com/rust-lang/rust/commit/1063548a1a2ff954087eeeb8b6598c28cafa1e22"}, {"sha": "2563fbeab31def56b66cbdebd7bb0b7e5efbecb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2563fbeab31def56b66cbdebd7bb0b7e5efbecb8", "html_url": "https://github.com/rust-lang/rust/commit/2563fbeab31def56b66cbdebd7bb0b7e5efbecb8"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "1b86d898cc7a32ea1f904c8900e0565033929cc4", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c93c2985d88dc7fc2c4444096f81e522aa3ea876/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93c2985d88dc7fc2c4444096f81e522aa3ea876/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=c93c2985d88dc7fc2c4444096f81e522aa3ea876", "patch": "@@ -18,8 +18,8 @@ use crate::fmt;\n /// target platform. It is instantiated with the [`thread_local!`] macro and the\n /// primary method is the [`with`] method.\n ///\n-/// The [`with`] method yields a reference to the contained value which cannot be\n-/// sent across threads or escape the given closure.\n+/// The [`with`] method yields a reference to the contained value which cannot\n+/// outlive the current thread or escape the given closure.\n ///\n /// [`thread_local!`]: crate::thread_local\n ///"}]}