{"sha": "4118ff61ec71a2b9869422ef1762b21051ce5e40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMThmZjYxZWM3MWEyYjk4Njk0MjJlZjE3NjJiMjEwNTFjZTVlNDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T17:03:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-18T17:03:37Z"}, "message": "Rollup merge of #69837 - jonas-schievink:gen-discr-opt, r=tmandry\n\nUse smaller discriminants for generators\n\nCloses https://github.com/rust-lang/rust/issues/69815\n\nI'm not yet sure about the runtime performance impact of this, so I'll try running this on some benchmarks (if I can find any). (Update: No impact on the benchmarks I've measured on)\n\n* [x] Add test with a generator that has exactly 256 total states\n* [x] Add test with a generator that has more than 256 states so that it needs to use a u16 discriminant\n* [x] Add tests for the size of `Option<[generator]>`\n* [x] Add tests for the `discriminant_value` intrinsic in all cases", "tree": {"sha": "564aec910f03d9690d1d8c4ee557e6fa3bdf6363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/564aec910f03d9690d1d8c4ee557e6fa3bdf6363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4118ff61ec71a2b9869422ef1762b21051ce5e40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeclRpCRBK7hj4Ov3rIwAAdHIIAE+0vheF+jh5NyH1zsA+LLtm\n2j8SSfue8djA4lEWp+ahUBAHIFI2DFIi0qtxJbEhUEOsMOAgRBoYzc+tkdsWCSf0\nNb/Qpeo2iK+Z31y4g/kc2yhlFceBV/Y4/u7Fd+L7BObpIlnmiHWk2DEls9MWZaeG\nnsHP2ScaVjn5rzNrWi6c+LdvETyfQMlBApHvjN8v5i5FClg0BEzrrhApK86DAHre\nAII3tNVeC8ceZ1dpdAsLw0sRw5Ca5w1GAGnDVK5cQiofQ+ZLVDdeJUc00l6QnAfn\nZ69zAZnkPUL6kObp8mSZyzYHX+6KEbPTFoe/SbuOBLijtU9lqYuTvXmTtpaDMj4=\n=A0Xy\n-----END PGP SIGNATURE-----\n", "payload": "tree 564aec910f03d9690d1d8c4ee557e6fa3bdf6363\nparent 3f583fc27079fbc0983635f3fd40b47b89ed2f80\nparent 49aabd8a60c88d14de9a20c907396493ecc51f4f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584551017 +0100\ncommitter GitHub <noreply@github.com> 1584551017 +0100\n\nRollup merge of #69837 - jonas-schievink:gen-discr-opt, r=tmandry\n\nUse smaller discriminants for generators\n\nCloses https://github.com/rust-lang/rust/issues/69815\n\nI'm not yet sure about the runtime performance impact of this, so I'll try running this on some benchmarks (if I can find any). (Update: No impact on the benchmarks I've measured on)\n\n* [x] Add test with a generator that has exactly 256 total states\n* [x] Add test with a generator that has more than 256 states so that it needs to use a u16 discriminant\n* [x] Add tests for the size of `Option<[generator]>`\n* [x] Add tests for the `discriminant_value` intrinsic in all cases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4118ff61ec71a2b9869422ef1762b21051ce5e40", "html_url": "https://github.com/rust-lang/rust/commit/4118ff61ec71a2b9869422ef1762b21051ce5e40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4118ff61ec71a2b9869422ef1762b21051ce5e40/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f583fc27079fbc0983635f3fd40b47b89ed2f80", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f583fc27079fbc0983635f3fd40b47b89ed2f80", "html_url": "https://github.com/rust-lang/rust/commit/3f583fc27079fbc0983635f3fd40b47b89ed2f80"}, {"sha": "49aabd8a60c88d14de9a20c907396493ecc51f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/49aabd8a60c88d14de9a20c907396493ecc51f4f", "html_url": "https://github.com/rust-lang/rust/commit/49aabd8a60c88d14de9a20c907396493ecc51f4f"}], "stats": {"total": 197, "additions": 167, "deletions": 30}, "files": [{"sha": "f5ef9bda0eedabcefcbf03be9319c81cdda92dca", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=4118ff61ec71a2b9869422ef1762b21051ce5e40", "patch": "@@ -1409,12 +1409,15 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // locals as part of the prefix. We compute the layout of all of\n         // these fields at once to get optimal packing.\n         let discr_index = substs.as_generator().prefix_tys(def_id, tcx).count();\n-        // FIXME(eddyb) set the correct vaidity range for the discriminant.\n-        let discr_layout = self.layout_of(substs.as_generator().discr_ty(tcx))?;\n-        let discr = match &discr_layout.abi {\n-            Abi::Scalar(s) => s.clone(),\n-            _ => bug!(),\n-        };\n+\n+        // `info.variant_fields` already accounts for the reserved variants, so no need to add them.\n+        let max_discr = (info.variant_fields.len() - 1) as u128;\n+        let discr_int = Integer::fit_unsigned(max_discr);\n+        let discr_int_ty = discr_int.to_ty(tcx, false);\n+        let discr = Scalar { value: Primitive::Int(discr_int, false), valid_range: 0..=max_discr };\n+        let discr_layout = self.tcx.intern_layout(LayoutDetails::scalar(self, discr.clone()));\n+        let discr_layout = TyLayout { ty: discr_int_ty, details: discr_layout };\n+\n         let promoted_layouts = ineligible_locals\n             .iter()\n             .map(|local| subst_field(info.field_tys[local]))"}, {"sha": "636fafc2bc44a248731973987639c545c49daf4f", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=4118ff61ec71a2b9869422ef1762b21051ce5e40", "patch": "@@ -110,9 +110,9 @@ async fn mixed_sizes() {\n }\n \n fn main() {\n-    assert_eq!(1028, std::mem::size_of_val(&single()));\n-    assert_eq!(1032, std::mem::size_of_val(&single_with_noop()));\n-    assert_eq!(3084, std::mem::size_of_val(&joined()));\n-    assert_eq!(3084, std::mem::size_of_val(&joined_with_noop()));\n-    assert_eq!(7188, std::mem::size_of_val(&mixed_sizes()));\n+    assert_eq!(1025, std::mem::size_of_val(&single()));\n+    assert_eq!(1026, std::mem::size_of_val(&single_with_noop()));\n+    assert_eq!(3078, std::mem::size_of_val(&joined()));\n+    assert_eq!(3079, std::mem::size_of_val(&joined_with_noop()));\n+    assert_eq!(7181, std::mem::size_of_val(&mixed_sizes()));\n }"}, {"sha": "d5d7b3fc3f0bd10c7438002ba5f0a391f962c929", "filename": "src/test/ui/async-await/async-fn-size-uninit-locals.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs?ref=4118ff61ec71a2b9869422ef1762b21051ce5e40", "patch": "@@ -95,9 +95,9 @@ async fn join_retval() -> Joiner {\n }\n \n fn main() {\n-    assert_eq!(8, std::mem::size_of_val(&single()));\n-    assert_eq!(12, std::mem::size_of_val(&single_with_noop()));\n-    assert_eq!(3084, std::mem::size_of_val(&joined()));\n-    assert_eq!(3084, std::mem::size_of_val(&joined_with_noop()));\n-    assert_eq!(3080, std::mem::size_of_val(&join_retval()));\n+    assert_eq!(2, std::mem::size_of_val(&single()));\n+    assert_eq!(3, std::mem::size_of_val(&single_with_noop()));\n+    assert_eq!(3078, std::mem::size_of_val(&joined()));\n+    assert_eq!(3078, std::mem::size_of_val(&joined_with_noop()));\n+    assert_eq!(3074, std::mem::size_of_val(&join_retval()));\n }"}, {"sha": "0c1f3636446c9ee5b493df779d4d9a23021b6019", "filename": "src/test/ui/async-await/async-fn-size.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs?ref=4118ff61ec71a2b9869422ef1762b21051ce5e40", "patch": "@@ -86,13 +86,13 @@ async fn await3_level5() -> u8 {\n \n fn main() {\n     assert_eq!(2, std::mem::size_of_val(&base()));\n-    assert_eq!(8, std::mem::size_of_val(&await1_level1()));\n-    assert_eq!(12, std::mem::size_of_val(&await2_level1()));\n-    assert_eq!(12, std::mem::size_of_val(&await3_level1()));\n-    assert_eq!(24, std::mem::size_of_val(&await3_level2()));\n-    assert_eq!(36, std::mem::size_of_val(&await3_level3()));\n-    assert_eq!(48, std::mem::size_of_val(&await3_level4()));\n-    assert_eq!(60, std::mem::size_of_val(&await3_level5()));\n+    assert_eq!(3, std::mem::size_of_val(&await1_level1()));\n+    assert_eq!(4, std::mem::size_of_val(&await2_level1()));\n+    assert_eq!(5, std::mem::size_of_val(&await3_level1()));\n+    assert_eq!(8, std::mem::size_of_val(&await3_level2()));\n+    assert_eq!(11, std::mem::size_of_val(&await3_level3()));\n+    assert_eq!(14, std::mem::size_of_val(&await3_level4()));\n+    assert_eq!(17, std::mem::size_of_val(&await3_level5()));\n \n     assert_eq!(1,   wait(base()));\n     assert_eq!(1,   wait(await1_level1()));"}, {"sha": "8a0f8a380ab597e11627920386b7b84cbb17cea1", "filename": "src/test/ui/generator/discriminant.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs?ref=4118ff61ec71a2b9869422ef1762b21051ce5e40", "patch": "@@ -0,0 +1,134 @@\n+//! Tests that generator discriminant sizes and ranges are chosen optimally and that they are\n+//! reflected in the output of `mem::discriminant`.\n+\n+// run-pass\n+\n+#![feature(generators, generator_trait, core_intrinsics)]\n+\n+use std::intrinsics::discriminant_value;\n+use std::marker::Unpin;\n+use std::mem::size_of_val;\n+use std::{cmp, ops::*};\n+\n+macro_rules! yield25 {\n+    ($e:expr) => {\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+    };\n+}\n+\n+/// Yields 250 times.\n+macro_rules! yield250 {\n+    () => {\n+        yield250!(())\n+    };\n+\n+    ($e:expr) => {\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+    };\n+}\n+\n+fn cycle(gen: impl Generator<()> + Unpin, expected_max_discr: u64) {\n+    let mut gen = Box::pin(gen);\n+    let mut max_discr = 0;\n+    loop {\n+        max_discr = cmp::max(max_discr, discriminant_value(gen.as_mut().get_mut()));\n+        match gen.as_mut().resume(()) {\n+            GeneratorState::Yielded(_) => {}\n+            GeneratorState::Complete(_) => {\n+                assert_eq!(max_discr, expected_max_discr);\n+                return;\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    // Has only one invalid discr. value.\n+    let gen_u8_tiny_niche = || {\n+        || {\n+            // 3 reserved variants\n+\n+            yield250!(); // 253 variants\n+\n+            yield; // 254\n+            yield; // 255\n+        }\n+    };\n+\n+    // Uses all values in the u8 discriminant.\n+    let gen_u8_full = || {\n+        || {\n+            // 3 reserved variants\n+\n+            yield250!(); // 253 variants\n+\n+            yield; // 254\n+            yield; // 255\n+            yield; // 256\n+        }\n+    };\n+\n+    // Barely needs a u16 discriminant.\n+    let gen_u16 = || {\n+        || {\n+            // 3 reserved variants\n+\n+            yield250!(); // 253 variants\n+\n+            yield; // 254\n+            yield; // 255\n+            yield; // 256\n+            yield; // 257\n+        }\n+    };\n+\n+    assert_eq!(size_of_val(&gen_u8_tiny_niche()), 1);\n+    assert_eq!(size_of_val(&Some(gen_u8_tiny_niche())), 1); // uses niche\n+    assert_eq!(size_of_val(&Some(Some(gen_u8_tiny_niche()))), 2); // cannot use niche anymore\n+    assert_eq!(size_of_val(&gen_u8_full()), 1);\n+    assert_eq!(size_of_val(&Some(gen_u8_full())), 2); // cannot use niche\n+    assert_eq!(size_of_val(&gen_u16()), 2);\n+    assert_eq!(size_of_val(&Some(gen_u16())), 2); // uses niche\n+\n+    cycle(gen_u8_tiny_niche(), 254);\n+    cycle(gen_u8_full(), 255);\n+    cycle(gen_u16(), 256);\n+}"}, {"sha": "4f08ac0702bdb85a221067b48ea779e5d4b0a403", "filename": "src/test/ui/generator/resume-arg-size.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-size.rs?ref=4118ff61ec71a2b9869422ef1762b21051ce5e40", "patch": "@@ -23,6 +23,6 @@ fn main() {\n \n     // Neither of these generators have the resume arg live across the `yield`, so they should be\n     // 4 Bytes in size (only storing the discriminant)\n-    assert_eq!(size_of_val(&gen_copy), 4);\n-    assert_eq!(size_of_val(&gen_move), 4);\n+    assert_eq!(size_of_val(&gen_copy), 1);\n+    assert_eq!(size_of_val(&gen_move), 1);\n }"}, {"sha": "74c60d98154dd3da107bb7672c5d40afa5129c65", "filename": "src/test/ui/generator/size-moved-locals.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4118ff61ec71a2b9869422ef1762b21051ce5e40/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs?ref=4118ff61ec71a2b9869422ef1762b21051ce5e40", "patch": "@@ -58,7 +58,7 @@ fn overlap_move_points() -> impl Generator<Yield = (), Return = ()> {\n     }\n }\n \n-fn overlap_x_and_y() -> impl Generator<Yield = (), Return = ()>{\n+fn overlap_x_and_y() -> impl Generator<Yield = (), Return = ()> {\n     static || {\n         let x = Foo([0; FOO_SIZE]);\n         yield;\n@@ -70,8 +70,8 @@ fn overlap_x_and_y() -> impl Generator<Yield = (), Return = ()>{\n }\n \n fn main() {\n-    assert_eq!(1028, std::mem::size_of_val(&move_before_yield()));\n-    assert_eq!(1032, std::mem::size_of_val(&move_before_yield_with_noop()));\n-    assert_eq!(2056, std::mem::size_of_val(&overlap_move_points()));\n-    assert_eq!(1032, std::mem::size_of_val(&overlap_x_and_y()));\n+    assert_eq!(1025, std::mem::size_of_val(&move_before_yield()));\n+    assert_eq!(1026, std::mem::size_of_val(&move_before_yield_with_noop()));\n+    assert_eq!(2051, std::mem::size_of_val(&overlap_move_points()));\n+    assert_eq!(1026, std::mem::size_of_val(&overlap_x_and_y()));\n }"}]}