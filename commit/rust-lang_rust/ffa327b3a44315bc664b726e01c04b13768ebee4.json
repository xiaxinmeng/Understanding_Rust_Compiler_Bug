{"sha": "ffa327b3a44315bc664b726e01c04b13768ebee4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYTMyN2IzYTQ0MzE1YmM2NjRiNzI2ZTAxYzA0YjEzNzY4ZWJlZTQ=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-08-07T17:57:32Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-08-07T21:10:16Z"}, "message": "Revise `Index` and `IndexMut` docs.\n\nPart of #29365.\n* Shortened summary sentences, removing \"stuttering\"\n* Small copyediting\n* Changed method summary sentences to be in 3rd person singular\n* Removed extraneous explicit `fn main()` in example for `IndexMut`", "tree": {"sha": "702ffa3290d06854a106a2c9ecc8560039cab4bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/702ffa3290d06854a106a2c9ecc8560039cab4bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa327b3a44315bc664b726e01c04b13768ebee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa327b3a44315bc664b726e01c04b13768ebee4", "html_url": "https://github.com/rust-lang/rust/commit/ffa327b3a44315bc664b726e01c04b13768ebee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa327b3a44315bc664b726e01c04b13768ebee4/comments", "author": null, "committer": null, "parents": [{"sha": "4b945fd9fe9bc168e385532af1d2b7b30edef1cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b945fd9fe9bc168e385532af1d2b7b30edef1cb", "html_url": "https://github.com/rust-lang/rust/commit/4b945fd9fe9bc168e385532af1d2b7b30edef1cb"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "0652421511aaa8f25c99f4e3ab67aea7cd02f450", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ffa327b3a44315bc664b726e01c04b13768ebee4/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa327b3a44315bc664b726e01c04b13768ebee4/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=ffa327b3a44315bc664b726e01c04b13768ebee4", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// The `Index` trait is used to specify the functionality of indexing operations\n-/// like `container[index]` when used in an immutable context.\n+/// Used for indexing operations (`container[index]`) in immutable contexts.\n ///\n /// `container[index]` is actually syntactic sugar for `*container.index(index)`,\n /// but only when used as an immutable value. If a mutable value is requested,\n /// [`IndexMut`] is used instead. This allows nice things such as\n-/// `let value = v[index]` if `value` implements [`Copy`].\n+/// `let value = v[index]` if the type of `value` implements [`Copy`].\n ///\n /// [`IndexMut`]: ../../std/ops/trait.IndexMut.html\n /// [`Copy`]: ../../std/marker/trait.Copy.html\n@@ -64,22 +63,22 @@\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Index<Idx: ?Sized> {\n-    /// The returned type after indexing\n+    /// The returned type after indexing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output: ?Sized;\n \n-    /// The method for the indexing (`container[index]`) operation\n+    /// Performs the indexing (`container[index]`) operation.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn index(&self, index: Idx) -> &Self::Output;\n }\n \n-/// The `IndexMut` trait is used to specify the functionality of indexing\n-/// operations like `container[index]` when used in a mutable context.\n+/// Used for indexing operations (`container[index]`) in mutable contexts.\n ///\n /// `container[index]` is actually syntactic sugar for\n /// `*container.index_mut(index)`, but only when used as a mutable value. If\n /// an immutable value is requested, the [`Index`] trait is used instead. This\n-/// allows nice things such as `v[index] = value` if `value` implements [`Copy`].\n+/// allows nice things such as `v[index] = value` if the type of `value`\n+/// implements [`Copy`].\n ///\n /// [`Index`]: ../../std/ops/trait.Index.html\n /// [`Copy`]: ../../std/marker/trait.Copy.html\n@@ -106,7 +105,7 @@ pub trait Index<Idx: ?Sized> {\n ///\n /// struct Balance {\n ///     pub left: Weight,\n-///     pub right:Weight,\n+///     pub right: Weight,\n /// }\n ///\n /// impl Index<Side> for Balance {\n@@ -131,28 +130,26 @@ pub trait Index<Idx: ?Sized> {\n ///     }\n /// }\n ///\n-/// fn main() {\n-///     let mut balance = Balance {\n-///         right: Weight::Kilogram(2.5),\n-///         left: Weight::Pound(1.5),\n-///     };\n-///\n-///     // In this case balance[Side::Right] is sugar for\n-///     // *balance.index(Side::Right), since we are only reading\n-///     // balance[Side::Right], not writing it.\n-///     assert_eq!(balance[Side::Right],Weight::Kilogram(2.5));\n-///\n-///     // However in this case balance[Side::Left] is sugar for\n-///     // *balance.index_mut(Side::Left), since we are writing\n-///     // balance[Side::Left].\n-///     balance[Side::Left] = Weight::Kilogram(3.0);\n-/// }\n+/// let mut balance = Balance {\n+///     right: Weight::Kilogram(2.5),\n+///     left: Weight::Pound(1.5),\n+/// };\n+///\n+/// // In this case, `balance[Side::Right]` is sugar for\n+/// // `*balance.index(Side::Right)`, since we are only *reading*\n+/// // `balance[Side::Right]`, not writing it.\n+/// assert_eq!(balance[Side::Right], Weight::Kilogram(2.5));\n+///\n+/// // However, in this case `balance[Side::Left]` is sugar for\n+/// // `*balance.index_mut(Side::Left)`, since we are writing\n+/// // `balance[Side::Left]`.\n+/// balance[Side::Left] = Weight::Kilogram(3.0);\n /// ```\n #[lang = \"index_mut\"]\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n-    /// The method for the mutable indexing (`container[index]`) operation\n+    /// Performs the mutable indexing (`container[index]`) operation.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n }"}]}