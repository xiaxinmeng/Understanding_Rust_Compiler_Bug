{"sha": "cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMTEyZGM4Y2ZlMTA1YjllZWMyYTNlMWI1OWRkNjZlY2EzODZlZTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-11T19:28:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-13T22:22:45Z"}, "message": "add UI testing framework", "tree": {"sha": "475aef34a1b5ba5895a77cb10b151397f230e7d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/475aef34a1b5ba5895a77cb10b151397f230e7d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "html_url": "https://github.com/rust-lang/rust/commit/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a5c9dfd106e2f900aba7074f10b5e8e617be7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a5c9dfd106e2f900aba7074f10b5e8e617be7b", "html_url": "https://github.com/rust-lang/rust/commit/33a5c9dfd106e2f900aba7074f10b5e8e617be7b"}], "stats": {"total": 239, "additions": 236, "deletions": 3}, "files": [{"sha": "f9ab84e3f8ccf4f2c45624cb6f737c675bc45e26", "filename": "mk/tests.mk", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "patch": "@@ -274,6 +274,7 @@ check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-gdb-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-lldb-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-incremental-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-ui-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-doc-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-exec\n \n@@ -452,6 +453,9 @@ CODEGEN_CC := $(call rwildcard,$(S)src/test/codegen/,*.cc)\n CODEGEN_UNITS_RS := $(call rwildcard,$(S)src/test/codegen-units/,*.rs)\n INCREMENTAL_RS := $(call rwildcard,$(S)src/test/incremental/,*.rs)\n RMAKE_RS := $(wildcard $(S)src/test/run-make/*/Makefile)\n+UI_RS := $(call rwildcard,$(S)src/test/ui/,*.rs) \\\n+         $(call rwildcard,$(S)src/test/ui/,*.stdout) \\\n+         $(call rwildcard,$(S)src/test/ui/,*.stderr)\n RUSTDOCCK_RS := $(call rwildcard,$(S)src/test/rustdoc/,*.rs)\n \n RPASS_TESTS := $(RPASS_RS)\n@@ -469,6 +473,7 @@ CODEGEN_TESTS := $(CODEGEN_RS) $(CODEGEN_CC)\n CODEGEN_UNITS_TESTS := $(CODEGEN_UNITS_RS)\n INCREMENTAL_TESTS := $(INCREMENTAL_RS)\n RMAKE_TESTS := $(RMAKE_RS)\n+UI_TESTS := $(UI_RS)\n RUSTDOCCK_TESTS := $(RUSTDOCCK_RS)\n \n CTEST_SRC_BASE_rpass = run-pass\n@@ -541,6 +546,11 @@ CTEST_BUILD_BASE_rmake = run-make\n CTEST_MODE_rmake = run-make\n CTEST_RUNTOOL_rmake = $(CTEST_RUNTOOL)\n \n+CTEST_SRC_BASE_ui = ui\n+CTEST_BUILD_BASE_ui = ui\n+CTEST_MODE_ui = ui\n+CTEST_RUNTOOL_ui = $(CTEST_RUNTOOL)\n+\n CTEST_SRC_BASE_rustdocck = rustdoc\n CTEST_BUILD_BASE_rustdocck = rustdoc\n CTEST_MODE_rustdocck = rustdoc\n@@ -672,7 +682,7 @@ CTEST_DEPS_codegen-units_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_UNITS_TESTS)\n CTEST_DEPS_incremental_$(1)-T-$(2)-H-$(3) = $$(INCREMENTAL_TESTS)\n CTEST_DEPS_rmake_$(1)-T-$(2)-H-$(3) = $$(RMAKE_TESTS) \\\n \t$$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n-\n+CTEST_DEPS_ui_$(1)-T-$(2)-H-$(3) = $$(UI_TESTS)\n CTEST_DEPS_rustdocck_$(1)-T-$(2)-H-$(3) = $$(RUSTDOCCK_TESTS) \\\n \t\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n \t\t$(S)src/etc/htmldocck.py\n@@ -744,7 +754,7 @@ endef\n \n CTEST_NAMES = rpass rpass-valgrind rpass-full rfail-full cfail-full rfail cfail pfail \\\n \tdebuginfo-gdb debuginfo-lldb codegen codegen-units rustdocck incremental \\\n-\trmake\n+\trmake ui\n \n $(foreach host,$(CFG_HOST), \\\n  $(eval $(foreach target,$(CFG_TARGET), \\\n@@ -943,6 +953,7 @@ TEST_GROUPS = \\\n \tcodegen \\\n \tcodegen-units \\\n \tincremental \\\n+\tui \\\n \tdoc \\\n \t$(foreach docname,$(DOC_NAMES),doc-$(docname)) \\\n \tpretty \\"}, {"sha": "dcdeabd80322f6016f2009ba23a0c4f745e4964e", "filename": "src/test/ui/README.md", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FREADME.md?ref=cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "patch": "@@ -0,0 +1,31 @@\n+# Guide to the UI Tests\n+\n+The UI tests are intended to capture the compiler's complete output,\n+so that we can test all aspects of the presentation. They work by\n+compiling a file (e.g., `hello_world/main.rs`), capturing the output,\n+and then applying some normalization (see below). This normalized\n+result is then compared against reference files named\n+`hello_world/main.stderr` and `hello_world/main.stdout`. If either of\n+those files doesn't exist, the output must be empty. If the test run\n+fails, we will print out the current output, but it is also saved in\n+`build/<target-triple>/test/ui/hello_world/main.stdout` (this path is\n+printed as part of the test failure mesage), so you can run `diff` and\n+so forth.\n+\n+# Editing and updating the reference files\n+\n+If you have changed the compiler's output intentionally, or you are\n+making a new test, you can use the script `update-references.sh` to\n+update the references. When you run the test framework, it will report\n+various errors: in those errors is a command you can use to run the\n+`update-references.sh` script, which will then copy over the files\n+from the build directory and use them as the new reference. You can\n+also just run `update-all-references.sh`. In both cases, you can run\n+the script with `--help` to get a help message.\n+\n+# Normalization\n+\n+The normalization applied is aimed at filenames:\n+\n+- the test directory is replaced with `$DIR`\n+- all backslashes (\\) are converted to forward slashes (/) (for windows)"}, {"sha": "6118397557701ec1239805e12b416904b01ab108", "filename": "src/test/ui/hello_world/main.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2Fhello_world%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2Fhello_world%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhello_world%2Fmain.rs?ref=cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that compiling hello world succeeds with no output of any kind.\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "85d9fa53fcf00d98416b4cfdc374a8fbe2f7c9de", "filename": "src/test/ui/mismatched_types/main.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.rs?ref=cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rustc-env:RUST_NEW_ERROR_FORMAT\n+\n+fn main() {\n+    let x: u32 = (\n+    );\n+}\n+"}, {"sha": "98bc11752e0edaa7dc15c9fbb44caefad8047c95", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "patch": "@@ -0,0 +1,8 @@\n+error: mismatched types [--explain E0308]\n+  --> $DIR/main.rs:14:18\n+14 |>     let x: u32 = (\n+   |>                  ^ expected u32, found ()\n+note: expected type `u32`\n+note:    found type `()`\n+\n+error: aborting due to previous error"}, {"sha": "cae2a2dba4c579449b28f8b012960b131ebf0d69", "filename": "src/test/ui/update-all-references.sh", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fupdate-all-references.sh?ref=cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "patch": "@@ -0,0 +1,21 @@\n+#!/bin/bash\n+\n+# A script to update the references for all tests. The idea is that\n+# you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. You then\n+# run this script, which will copy those files over. If you find\n+# yourself manually editing a foo.stderr file, you're doing it wrong.\n+#\n+# See all `update-references.sh`, if you just want to update a single test.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" != \"\" ]]; then\n+    echo \"usage: $0 <build-directory>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui\"\n+fi\n+\n+BUILD_DIR=$PWD/$1\n+MY_DIR=$(dirname $0)\n+cd $MY_DIR\n+find . -name '*.rs' | xargs ./update-references.sh $BUILD_DIR"}, {"sha": "703f3f3342b188644e8c6aa93dae7486b0681511", "filename": "src/test/ui/update-references.sh", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftest%2Fui%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fupdate-references.sh?ref=cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "patch": "@@ -0,0 +1,41 @@\n+#!/bin/bash\n+\n+# A script to update the references for particular tests. The idea is\n+# that you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. This\n+# script will then copy that output and replace the \"expected output\"\n+# files. You can then commit the changes.\n+#\n+# If you find yourself manually editing a foo.stderr file, you're\n+# doing it wrong.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n+    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n+fi\n+\n+MYDIR=$(dirname $0)\n+\n+BUILD_DIR=\"$1\"\n+shift\n+\n+while [[ \"$1\" != \"\" ]]; do\n+    STDERR_NAME=\"${1/%.rs/.stderr}\"\n+    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n+    shift\n+    if [ -f $BUILD_DIR/$STDOUT_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME > /dev/null); then\n+        echo updating $MYDIR/$STDOUT_NAME\n+        cp $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME\n+    fi\n+    \n+    if [ -f $BUILD_DIR/$STDERR_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME > /dev/null); then\n+        echo updating $MYDIR/$STDERR_NAME\n+        cp $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME\n+    fi\n+done\n+\n+"}, {"sha": "5ec62e06e37aea6bee989fb95e15229cf1b42b6e", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "patch": "@@ -28,6 +28,7 @@ pub enum Mode {\n     CodegenUnits,\n     Incremental,\n     RunMake,\n+    Ui,\n }\n \n impl FromStr for Mode {\n@@ -47,6 +48,7 @@ impl FromStr for Mode {\n           \"codegen-units\" => Ok(CodegenUnits),\n           \"incremental\" => Ok(Incremental),\n           \"run-make\" => Ok(RunMake),\n+          \"ui\" => Ok(Ui),\n           _ => Err(()),\n         }\n     }\n@@ -68,6 +70,7 @@ impl fmt::Display for Mode {\n             CodegenUnits => \"codegen-units\",\n             Incremental => \"incremental\",\n             RunMake => \"run-make\",\n+            Ui => \"ui\",\n         }, f)\n     }\n }"}, {"sha": "9e4f331d16e473a420ace651a15f3fef0fc3321e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 87, "deletions": 1, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "patch": "@@ -11,7 +11,7 @@\n use common::Config;\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, DebugInfoLldb, DebugInfoGdb, Rustdoc, CodegenUnits};\n-use common::{Incremental, RunMake};\n+use common::{Incremental, RunMake, Ui};\n use errors::{self, ErrorKind, Error};\n use json;\n use header::TestProps;\n@@ -29,6 +29,7 @@ use std::io::prelude::*;\n use std::net::TcpStream;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Output, ExitStatus};\n+use std::str;\n \n pub fn run(config: Config, testpaths: &TestPaths) {\n     match &*config.target {\n@@ -118,6 +119,7 @@ impl<'test> TestCx<'test> {\n             CodegenUnits => self.run_codegen_units_test(),\n             Incremental => self.run_incremental_test(),\n             RunMake => self.run_rmake_test(),\n+            Ui => self.run_ui_test(),\n         }\n     }\n \n@@ -1314,6 +1316,7 @@ actual:\\n\\\n             Codegen |\n             Rustdoc |\n             RunMake |\n+            Ui |\n             CodegenUnits => {\n                 // do not use JSON output\n             }\n@@ -2096,6 +2099,89 @@ actual:\\n\\\n         }\n         fs::remove_dir(path)\n     }\n+\n+    fn run_ui_test(&self) {\n+        println!(\"ui: {}\", self.testpaths.file.display());\n+\n+        let proc_res = self.compile_test();\n+\n+        let expected_stderr_path = self.expected_output_path(\"stderr\");\n+        let expected_stderr = self.load_expected_output(&expected_stderr_path);\n+\n+        let expected_stdout_path = self.expected_output_path(\"stdout\");\n+        let expected_stdout = self.load_expected_output(&expected_stdout_path);\n+\n+        let normalized_stdout = self.normalize_output(&proc_res.stdout);\n+        let normalized_stderr = self.normalize_output(&proc_res.stderr);\n+\n+        let mut errors = 0;\n+        errors += self.compare_output(\"stdout\", normalized_stdout.as_bytes(), &expected_stdout);\n+        errors += self.compare_output(\"stderr\", normalized_stderr.as_bytes(), &expected_stderr);\n+\n+        if errors > 0 {\n+            println!(\"To update references, run this command from build directory:\");\n+            let relative_path_to_file =\n+                self.testpaths.relative_dir\n+                              .join(self.testpaths.file.file_name().unwrap());\n+            println!(\"{}/update-references.sh '{}' '{}'\",\n+                     self.config.src_base.display(),\n+                     self.config.build_base.display(),\n+                     relative_path_to_file.display());\n+            self.fatal(&format!(\"{} errors occurred comparing output.\", errors));\n+        }\n+    }\n+\n+    fn normalize_output(&self, output: &str) -> String {\n+        let parent_dir = self.testpaths.file.parent().unwrap();\n+        let parent_dir_str = parent_dir.display().to_string();\n+        output.replace(&parent_dir_str, \"$DIR\")\n+              .replace(\"\\\\\", \"/\") // windows, you know.\n+    }\n+\n+    fn expected_output_path(&self, kind: &str) -> PathBuf {\n+        let extension = match self.revision {\n+            Some(r) => format!(\"{}.{}\", r, kind),\n+            None => kind.to_string(),\n+        };\n+        self.testpaths.file.with_extension(extension)\n+    }\n+\n+    fn load_expected_output(&self, path: &Path) -> Vec<u8> {\n+        if !path.exists() {\n+            return vec![];\n+        }\n+\n+        let mut result = Vec::new();\n+        match File::open(path).and_then(|mut f| f.read_to_end(&mut result)) {\n+            Ok(_) => result,\n+            Err(e) => {\n+                self.fatal(&format!(\"failed to load expected output from `{}`: {}\", path.display(), e))\n+            }\n+        }\n+    }\n+\n+    fn compare_output(&self, kind: &str, actual: &[u8], expected: &[u8]) -> usize {\n+        if self.config.verbose {\n+            println!(\"normalized {}:\\n{}\\n\", kind, str::from_utf8(actual).unwrap_or(\"not utf8\"));\n+            println!(\"expected {}:\\n{}\\n\", kind, str::from_utf8(expected).unwrap_or(\"not utf8\"));\n+        }\n+        if actual == expected {\n+            return 0;\n+        }\n+\n+        let output_file = self.output_base_name().with_extension(kind);\n+        match File::create(&output_file).and_then(|mut f| f.write_all(actual)) {\n+            Ok(()) => { }\n+            Err(e) => {\n+                self.fatal(&format!(\"failed to write {} to `{}`: {}\",\n+                                    kind, output_file.display(), e))\n+            }\n+        }\n+\n+        println!(\"\\nThe actual {0} differed from the expected {0}.\", kind);\n+        println!(\"Actual {} saved to {}\", kind, output_file.display());\n+        1\n+    }\n }\n \n struct ProcArgs {"}]}