{"sha": "2584507ce2eb9a7fc4c00213d216fc57c794e141", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ODQ1MDdjZTJlYjlhN2ZjNGMwMDIxM2QyMTZmYzU3Yzc5NGUxNDE=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-04-23T17:12:48Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-04-23T17:12:48Z"}, "message": "Preserve consistent output whether or not CI is set", "tree": {"sha": "37344a31a1726c0bd07441d3a5dc140b467ed479", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37344a31a1726c0bd07441d3a5dc140b467ed479"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2584507ce2eb9a7fc4c00213d216fc57c794e141", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl6hzJAACgkQ+boUO5X/\nbYJr5Q/+LExmXjwUN1gS+BGPKVrt1BLuEpqvOSM7JCbDH9lskLMw/kMb4JBFfpBa\ntV3XlexsYtFOm5x8dHuu3ubYg8kgytN5LcYO9n2X56zk9fVMKLVhDDB73nA/WsO0\nEzYJ3kcGhKFWvFcBCkVv3EOtETPvvEIGibRh0S4z/fHX2WpCdcqORLXQiw/srwqs\nVxcDxfRnCWKJq4dksHHeLR5yF/UcIw6IVDFXq6SpcMCEZKgW9GaIHTbxZahHcBDW\njBQH8C1KXDNBGf4OhzWtCGU5UMVI6w1+f0oJV9/SSPQBZIKYlHM4l/lXtxoWU+08\nxdn0uBUFwOZr+nAcy7SMeXDNtDnqBUS/61QIf/y0IB1mXzMxAw+MlQBc7fhHvo1H\nLgUJ3Wi0QAWZHcXD5lO++nMvnhRPRTvSrUMC/R7wS0cg7KhWDcgVBb+uG7I7Bv9o\nHxlXEb1pSqEezORtcvFupdVp/VODSV60QdVfWVKNtM8MqRwBclaK0BmaUGk2oKT5\nIe4qfarUZyoSJgswETXhspu2vS0TkUC8IV3LU9D7oDCyz+YzICSj8R8LRJKewMx3\nbpNFZlpOPJJfw/LqM5pcGNtl1EAoRpTXp7qDraRJaXAVyHOqT4JLRmcRdqd3nDZt\n7p3xXJbpxajHVaNleJoMgfOjKqqf31MDqXUnV9lzk98fqiKTzlg=\n=M/Uf\n-----END PGP SIGNATURE-----", "payload": "tree 37344a31a1726c0bd07441d3a5dc140b467ed479\nparent 28f4f84303076e7f537ad847e61ec1166ea62fac\nauthor David Tolnay <dtolnay@gmail.com> 1587661968 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1587661968 -0700\n\nPreserve consistent output whether or not CI is set\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2584507ce2eb9a7fc4c00213d216fc57c794e141", "html_url": "https://github.com/rust-lang/rust/commit/2584507ce2eb9a7fc4c00213d216fc57c794e141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2584507ce2eb9a7fc4c00213d216fc57c794e141/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f4f84303076e7f537ad847e61ec1166ea62fac", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f4f84303076e7f537ad847e61ec1166ea62fac", "html_url": "https://github.com/rust-lang/rust/commit/28f4f84303076e7f537ad847e61ec1166ea62fac"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "0252f22e76683fef60739e5aec1a42d1a63720cb", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2584507ce2eb9a7fc4c00213d216fc57c794e141/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2584507ce2eb9a7fc4c00213d216fc57c794e141/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=2584507ce2eb9a7fc4c00213d216fc57c794e141", "patch": "@@ -247,7 +247,9 @@ fn xargo_version() -> Option<(u32, u32, u32)> {\n     Some((major, minor, patch))\n }\n \n-fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n+fn ask_to_run(mut cmd: Command, subcommand: MiriCommand, text: &str) {\n+    // Disable interactive prompts in CI (GitHub Actions, Travis, AppVeyor, etc).\n+    let ask = subcommand != MiriCommand::Setup && env::var_os(\"CI\").is_none();\n     if ask {\n         let mut buf = String::new();\n         print!(\"I will run `{:?}` to {}. Proceed? [Y/n] \", cmd, text);\n@@ -271,9 +273,9 @@ fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n /// Performs the setup required to make `cargo miri` work: Getting a custom-built libstd. Then sets\n /// `MIRI_SYSROOT`. Skipped if `MIRI_SYSROOT` is already set, in which case we expect the user has\n /// done all this already.\n-fn setup(ask_user: bool) {\n+fn setup(subcommand: MiriCommand) {\n     if std::env::var(\"MIRI_SYSROOT\").is_ok() {\n-        if !ask_user {\n+        if subcommand == MiriCommand::Setup {\n             println!(\"WARNING: MIRI_SYSROOT already set, not doing anything.\")\n         }\n         return;\n@@ -287,7 +289,7 @@ fn setup(ask_user: bool) {\n         }\n         let mut cmd = cargo();\n         cmd.args(&[\"install\", \"xargo\", \"-f\"]);\n-        ask_to_run(cmd, ask_user, \"install a recent enough xargo\");\n+        ask_to_run(cmd, subcommand, \"install a recent enough xargo\");\n     }\n \n     // Determine where the rust sources are located.  `XARGO_RUST_SRC` env var trumps everything.\n@@ -310,7 +312,7 @@ fn setup(ask_user: bool) {\n                 cmd.args(&[\"component\", \"add\", \"rust-src\"]);\n                 ask_to_run(\n                     cmd,\n-                    ask_user,\n+                    subcommand,\n                     \"install the rustc-src component for the selected toolchain\",\n                 );\n             }\n@@ -361,7 +363,8 @@ path = \"lib.rs\"\n     File::create(dir.join(\"lib.rs\")).unwrap();\n     // Prepare xargo invocation.\n     let target = get_arg_flag_value(\"--target\");\n-    let print_sysroot = !ask_user && has_arg_flag(\"--print-sysroot\"); // whether we just print the sysroot path\n+    let print_sysroot = subcommand == MiriCommand::Setup\n+        && has_arg_flag(\"--print-sysroot\"); // whether we just print the sysroot path\n     let mut command = xargo_check();\n     command.arg(\"build\").arg(\"-q\");\n     command.current_dir(&dir);\n@@ -389,7 +392,7 @@ path = \"lib.rs\"\n     if print_sysroot {\n         // Print just the sysroot and nothing else; this way we do not need any escaping.\n         println!(\"{}\", sysroot.display());\n-    } else if !ask_user {\n+    } else if subcommand == MiriCommand::Setup {\n         println!(\"A libstd for Miri is now available in `{}`.\", sysroot.display());\n     }\n }\n@@ -436,9 +439,7 @@ fn in_cargo_miri() {\n     test_sysroot_consistency();\n \n     // We always setup.\n-    // Disable interactive prompts in CI (GitHub Actions, Travis, AppVeyor, etc).\n-    let ask = subcommand != MiriCommand::Setup && env::var_os(\"CI\").is_none();\n-    setup(ask);\n+    setup(subcommand);\n     if subcommand == MiriCommand::Setup {\n         // Stop here.\n         return;"}]}