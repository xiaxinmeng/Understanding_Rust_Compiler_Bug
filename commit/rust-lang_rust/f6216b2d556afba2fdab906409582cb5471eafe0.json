{"sha": "f6216b2d556afba2fdab906409582cb5471eafe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MjE2YjJkNTU2YWZiYTJmZGFiOTA2NDA5NTgyY2I1NDcxZWFmZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-17T14:31:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-17T14:31:32Z"}, "message": "Auto merge of #48294 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\n- Successful merges: #48095, #48152, #48234, #48239, #48243, #48260, #48284, #48286\n- Failed merges:", "tree": {"sha": "e7e19978566964b0def4552fdcb0e8f454b48d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7e19978566964b0def4552fdcb0e8f454b48d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6216b2d556afba2fdab906409582cb5471eafe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6216b2d556afba2fdab906409582cb5471eafe0", "html_url": "https://github.com/rust-lang/rust/commit/f6216b2d556afba2fdab906409582cb5471eafe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6216b2d556afba2fdab906409582cb5471eafe0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b298607864b76ea6b7b7a4b8bb482472f1604c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b298607864b76ea6b7b7a4b8bb482472f1604c8d", "html_url": "https://github.com/rust-lang/rust/commit/b298607864b76ea6b7b7a4b8bb482472f1604c8d"}, {"sha": "47db61a3c39da4066cb0b5fa83ddb36e649df7f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/47db61a3c39da4066cb0b5fa83ddb36e649df7f5", "html_url": "https://github.com/rust-lang/rust/commit/47db61a3c39da4066cb0b5fa83ddb36e649df7f5"}], "stats": {"total": 3960, "additions": 2185, "deletions": 1775}, "files": [{"sha": "39a4d271bd6feb0481e95ee2472e5d52a9cc450b", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f6216b2d556afba2fdab906409582cb5471eafe0", "patch": "@@ -231,9 +231,9 @@ use Bound::{Excluded, Included, Unbounded};\n ///\n /// If a `Vec` *has* allocated memory, then the memory it points to is on the heap\n /// (as defined by the allocator Rust is configured to use by default), and its\n-/// pointer points to [`len`] initialized elements in order (what you would see\n-/// if you coerced it to a slice), followed by [`capacity`]` - `[`len`]\n-/// logically uninitialized elements.\n+/// pointer points to [`len`] initialized, contiguous elements in order (what\n+/// you would see if you coerced it to a slice), followed by [`capacity`]` -\n+/// `[`len`] logically uninitialized, contiguous elements.\n ///\n /// `Vec` will never perform a \"small optimization\" where elements are actually\n /// stored on the stack for two reasons:\n@@ -281,8 +281,8 @@ use Bound::{Excluded, Included, Unbounded};\n /// not break, however: using `unsafe` code to write to the excess capacity,\n /// and then increasing the length to match, is always valid.\n ///\n-/// `Vec` does not currently guarantee the order in which elements are dropped\n-/// (the order has changed in the past, and may change again).\n+/// `Vec` does not currently guarantee the order in which elements are dropped.\n+/// The order has changed in the past and may change again.\n ///\n /// [`vec!`]: ../../std/macro.vec.html\n /// [`Index`]: ../../std/ops/trait.Index.html"}, {"sha": "560dcf295b278154ad0b71b4ea8be21cf2a0319e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1948, "deletions": 1705, "changes": 3653, "blob_url": "https://github.com/rust-lang/rust/blob/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=f6216b2d556afba2fdab906409582cb5471eafe0"}, {"sha": "95bb8f18947ec842a5a92ff107e4fb63b550f9b5", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=f6216b2d556afba2fdab906409582cb5471eafe0", "patch": "@@ -324,7 +324,7 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n                 // the second byte when searching for the third.\n                 //\n                 // However, this is totally okay. While we have the invariant that\n-                // self.finger is on a UTF8 boundary, this invariant is not relid upon\n+                // self.finger is on a UTF8 boundary, this invariant is not relied upon\n                 // within this method (it is relied upon in CharSearcher::next()).\n                 //\n                 // We only exit this method when we reach the end of the string, or if we"}, {"sha": "25827edee7d9343c0719fc30c4ebad784c35992e", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=f6216b2d556afba2fdab906409582cb5471eafe0", "patch": "@@ -97,9 +97,10 @@ use fmt;\n /// Save power or switch hyperthreads in a busy-wait spin-loop.\n ///\n /// This function is deliberately more primitive than\n-/// `std::thread::yield_now` and does not directly yield to the\n-/// system's scheduler.  In some cases it might be useful to use a\n-/// combination of both functions.  Careful benchmarking is advised.\n+/// [`std::thread::yield_now`](../../../std/thread/fn.yield_now.html) and\n+/// does not directly yield to the system's scheduler.\n+/// In some cases it might be useful to use a combination of both functions.\n+/// Careful benchmarking is advised.\n ///\n /// On some platforms this function may not do anything at all.\n #[inline]"}, {"sha": "08258489a2ec22ad11bf787fb973725014423d0f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 217, "deletions": 3, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f6216b2d556afba2fdab906409582cb5471eafe0", "patch": "@@ -345,6 +345,7 @@ pub fn make_test(s: &str,\n                  opts: &TestOptions)\n                  -> (String, usize) {\n     let (crate_attrs, everything_else) = partition_source(s);\n+    let everything_else = everything_else.trim();\n     let mut line_offset = 0;\n     let mut prog = String::new();\n \n@@ -392,12 +393,11 @@ pub fn make_test(s: &str,\n         .any(|code| code.contains(\"fn main\"));\n \n     if dont_insert_main || already_has_main {\n-        prog.push_str(&everything_else);\n+        prog.push_str(everything_else);\n     } else {\n         prog.push_str(\"fn main() {\\n\");\n         line_offset += 1;\n-        prog.push_str(&everything_else);\n-        prog = prog.trim().into();\n+        prog.push_str(everything_else);\n         prog.push_str(\"\\n}\");\n     }\n \n@@ -753,3 +753,217 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n         self.visit_testable(macro_def.name.to_string(), &macro_def.attrs, |_| ());\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::{TestOptions, make_test};\n+\n+    #[test]\n+    fn make_test_basic() {\n+        //basic use: wraps with `fn main`, adds `#![allow(unused)]`\n+        let opts = TestOptions::default();\n+        let input =\n+\"assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected.clone(), 2));\n+    }\n+\n+    #[test]\n+    fn make_test_crate_name_no_use() {\n+        //if you give a crate name but *don't* use it within the test, it won't bother inserting\n+        //the `extern crate` statement\n+        let opts = TestOptions::default();\n+        let input =\n+\"assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_crate_name() {\n+        //if you give a crate name and use it within the test, it will insert an `extern crate`\n+        //statement before `fn main`\n+        let opts = TestOptions::default();\n+        let input =\n+\"use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+extern crate asdf;\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 3));\n+    }\n+\n+    #[test]\n+    fn make_test_no_crate_inject() {\n+        //even if you do use the crate within the test, setting `opts.no_crate_inject` will skip\n+        //adding it anyway\n+        let opts = TestOptions {\n+            no_crate_inject: true,\n+            attrs: vec![],\n+        };\n+        let input =\n+\"use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_ignore_std() {\n+        //even if you include a crate name, and use it in the doctest, we still won't include an\n+        //`extern crate` statement if the crate is \"std\" - that's included already by the compiler!\n+        let opts = TestOptions::default();\n+        let input =\n+\"use std::*;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+use std::*;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"std\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_manual_extern_crate() {\n+        //when you manually include an `extern crate` statement in your doctest, make_test assumes\n+        //you've included one for your own crate too\n+        let opts = TestOptions::default();\n+        let input =\n+\"extern crate asdf;\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+extern crate asdf;\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_opts_attrs() {\n+        //if you supplied some doctest attributes with #![doc(test(attr(...)))], it will use those\n+        //instead of the stock #![allow(unused)]\n+        let mut opts = TestOptions::default();\n+        opts.attrs.push(\"feature(sick_rad)\".to_string());\n+        let input =\n+\"use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![feature(sick_rad)]\n+extern crate asdf;\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 3));\n+\n+        //adding more will also bump the returned line offset\n+        opts.attrs.push(\"feature(hella_dope)\".to_string());\n+        let expected =\n+\"#![feature(sick_rad)]\n+#![feature(hella_dope)]\n+extern crate asdf;\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 4));\n+    }\n+\n+    #[test]\n+    fn make_test_crate_attrs() {\n+        //including inner attributes in your doctest will apply them to the whole \"crate\", pasting\n+        //them outside the generated main function\n+        let opts = TestOptions::default();\n+        let input =\n+\"#![feature(sick_rad)]\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+#![feature(sick_rad)]\n+fn main() {\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_with_main() {\n+        //including your own `fn main` wrapper lets the test use it verbatim\n+        let opts = TestOptions::default();\n+        let input =\n+\"fn main() {\n+    assert_eq!(2+2, 4);\n+}\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+    assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected, 1));\n+    }\n+\n+    #[test]\n+    fn make_test_fake_main() {\n+        //...but putting it in a comment will still provide a wrapper\n+        let opts = TestOptions::default();\n+        let input =\n+\"//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected.clone(), 2));\n+    }\n+\n+    #[test]\n+    fn make_test_dont_insert_main() {\n+        //even with that, if you set `dont_insert_main`, it won't create the `fn main` wrapper\n+        let opts = TestOptions::default();\n+        let input =\n+\"//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\".to_string();\n+        let output = make_test(input, None, true, &opts);\n+        assert_eq!(output, (expected.clone(), 1));\n+    }\n+}"}, {"sha": "aa07f64b678599595eae64326b90f7617d37f3ed", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=f6216b2d556afba2fdab906409582cb5471eafe0", "patch": "@@ -1437,8 +1437,6 @@ pub trait BufRead: Read {\n     ///\n     /// If successful, this function will return the total number of bytes read.\n     ///\n-    /// An empty buffer returned indicates that the stream has reached EOF.\n-    ///\n     /// # Errors\n     ///\n     /// This function will ignore all instances of [`ErrorKind::Interrupted`] and"}, {"sha": "358aa2c37dfb4cc855cb0c546ecefa7ab048c6e7", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=f6216b2d556afba2fdab906409582cb5471eafe0", "patch": "@@ -720,10 +720,6 @@ mod prim_f64 { }\n /// The 8-bit signed integer type.\n ///\n /// *[See also the `std::i8` module](i8/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `i64` in there.\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 { }\n \n@@ -732,10 +728,6 @@ mod prim_i8 { }\n /// The 16-bit signed integer type.\n ///\n /// *[See also the `std::i16` module](i16/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `i32` in there.\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 { }\n \n@@ -744,10 +736,6 @@ mod prim_i16 { }\n /// The 32-bit signed integer type.\n ///\n /// *[See also the `std::i32` module](i32/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `i16` in there.\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 { }\n \n@@ -756,10 +744,6 @@ mod prim_i32 { }\n /// The 64-bit signed integer type.\n ///\n /// *[See also the `std::i64` module](i64/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `i8` in there.\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 { }\n \n@@ -768,10 +752,6 @@ mod prim_i64 { }\n /// The 128-bit signed integer type.\n ///\n /// *[See also the `std::i128` module](i128/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `i8` in there.\n-///\n #[unstable(feature = \"i128\", issue=\"35118\")]\n mod prim_i128 { }\n \n@@ -780,10 +760,6 @@ mod prim_i128 { }\n /// The 8-bit unsigned integer type.\n ///\n /// *[See also the `std::u8` module](u8/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `u64` in there.\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 { }\n \n@@ -792,10 +768,6 @@ mod prim_u8 { }\n /// The 16-bit unsigned integer type.\n ///\n /// *[See also the `std::u16` module](u16/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `u32` in there.\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 { }\n \n@@ -804,10 +776,6 @@ mod prim_u16 { }\n /// The 32-bit unsigned integer type.\n ///\n /// *[See also the `std::u32` module](u32/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `u16` in there.\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 { }\n \n@@ -816,10 +784,6 @@ mod prim_u32 { }\n /// The 64-bit unsigned integer type.\n ///\n /// *[See also the `std::u64` module](u64/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `u8` in there.\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 { }\n \n@@ -828,10 +792,6 @@ mod prim_u64 { }\n /// The 128-bit unsigned integer type.\n ///\n /// *[See also the `std::u128` module](u128/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `u8` in there.\n-///\n #[unstable(feature = \"i128\", issue=\"35118\")]\n mod prim_u128 { }\n \n@@ -844,10 +804,6 @@ mod prim_u128 { }\n /// and on a 64 bit target, this is 8 bytes.\n ///\n /// *[See also the `std::isize` module](isize/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `usize` in there.\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize { }\n \n@@ -860,10 +816,6 @@ mod prim_isize { }\n /// and on a 64 bit target, this is 8 bytes.\n ///\n /// *[See also the `std::usize` module](usize/index.html).*\n-///\n-/// However, please note that examples are shared between primitive integer\n-/// types. So it's normal if you see usage of types like `isize` in there.\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize { }\n "}, {"sha": "54bb65136508b5eab83d75f0bfa455ba56f191dd", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=f6216b2d556afba2fdab906409582cb5471eafe0", "patch": "@@ -47,11 +47,13 @@ impl WaitTimeoutResult {\n     ///\n     /// thread::spawn(move|| {\n     ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///\n+    ///     // Let's wait 20 milliseconds before notifying the condvar.\n+    ///     thread::sleep(Duration::from_millis(20));\n+    ///\n     ///     let mut started = lock.lock().unwrap();\n     ///     // We update the boolean value.\n     ///     *started = true;\n-    ///     // Let's wait 20 milliseconds before notifying the condvar.\n-    ///     thread::sleep(Duration::from_millis(20));\n     ///     cvar.notify_one();\n     /// });\n     ///"}, {"sha": "df5845f6c217d5bfc2b82ca3c2135c0c5f34a415", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=f6216b2d556afba2fdab906409582cb5471eafe0", "patch": "@@ -317,10 +317,10 @@ impl CodeMap {\n \n     pub fn mk_substr_filename(&self, sp: Span) -> String {\n         let pos = self.lookup_char_pos(sp.lo());\n-        (format!(\"<{}:{}:{}>\",\n+        format!(\"<{}:{}:{}>\",\n                  pos.file.name,\n                  pos.line,\n-                 pos.col.to_usize() + 1)).to_string()\n+                 pos.col.to_usize() + 1)\n     }\n \n     // If there is a doctest_offset, apply it to the line\n@@ -462,12 +462,12 @@ impl CodeMap {\n \n         let lo = self.lookup_char_pos_adj(sp.lo());\n         let hi = self.lookup_char_pos_adj(sp.hi());\n-        return (format!(\"{}:{}:{}: {}:{}\",\n+        format!(\"{}:{}:{}: {}:{}\",\n                         lo.filename,\n                         lo.line,\n                         lo.col.to_usize() + 1,\n                         hi.line,\n-                        hi.col.to_usize() + 1)).to_string()\n+                        hi.col.to_usize() + 1)\n     }\n \n     pub fn span_to_filename(&self, sp: Span) -> FileName {"}, {"sha": "9e7c3aa49018024b74dd97548e2b01e0ec76e6ab", "filename": "src/test/rustdoc/playground.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Ftest%2Frustdoc%2Fplayground.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6216b2d556afba2fdab906409582cb5471eafe0/src%2Ftest%2Frustdoc%2Fplayground.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground.rs?ref=f6216b2d556afba2fdab906409582cb5471eafe0", "patch": "@@ -34,6 +34,6 @@\n //! }\n //! ```\n \n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D%0A\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D\"]' \"Run\"\n // @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Aprintln!(%22Hello%2C%20world!%22)%3B%0A%7D\"]' \"Run\"\n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(something)%5D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D%0A&version=nightly\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(something)%5D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D&version=nightly\"]' \"Run\""}]}