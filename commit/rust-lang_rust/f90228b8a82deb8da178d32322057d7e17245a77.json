{"sha": "f90228b8a82deb8da178d32322057d7e17245a77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MDIyOGI4YTgyZGViOGRhMTc4ZDMyMzIyMDU3ZDdlMTcyNDVhNzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-29T22:37:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-29T23:22:17Z"}, "message": "make all arguments modes immutable\n\nnote: you can still move from copy/move mode args", "tree": {"sha": "c3121277e2296d1e65d4ca405e376914d51acb7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3121277e2296d1e65d4ca405e376914d51acb7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f90228b8a82deb8da178d32322057d7e17245a77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f90228b8a82deb8da178d32322057d7e17245a77", "html_url": "https://github.com/rust-lang/rust/commit/f90228b8a82deb8da178d32322057d7e17245a77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f90228b8a82deb8da178d32322057d7e17245a77/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47375439ed3563f0ba8e37f5d7737011383ecbd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/47375439ed3563f0ba8e37f5d7737011383ecbd0", "html_url": "https://github.com/rust-lang/rust/commit/47375439ed3563f0ba8e37f5d7737011383ecbd0"}], "stats": {"total": 124, "additions": 109, "deletions": 15}, "files": [{"sha": "c7a31b39ad59c254224d71cd13ff1d4db0de070a", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f90228b8a82deb8da178d32322057d7e17245a77/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90228b8a82deb8da178d32322057d7e17245a77/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=f90228b8a82deb8da178d32322057d7e17245a77", "patch": "@@ -131,12 +131,15 @@ impl extensions<A> for dvec<A> {\n impl extensions<A:copy> for dvec<A> {\n     #[doc = \"Append a single item to the end of the list\"]\n     fn push(t: A) {\n-        self.swap { |v| v += [t]; v } // more efficient than v + [t]\n+        self.swap { |v|\n+            let mut v <- v; v += [t]; v // more efficient than v + [t]\n+        }\n     }\n \n     #[doc = \"Remove and return the last element\"]\n     fn pop() -> A {\n         self.borrow { |v|\n+            let mut v <- v;\n             let result = vec::pop(v);\n             self.return(v);\n             result\n@@ -157,6 +160,7 @@ impl extensions<A:copy> for dvec<A> {\n     \"]\n     fn push_slice(ts: [const A]/&, from_idx: uint, to_idx: uint) {\n         self.swap { |v|\n+            let mut v <- v;\n             let new_len = vec::len(v) + to_idx - from_idx;\n             vec::reserve(v, new_len);\n             let mut i = from_idx;\n@@ -232,6 +236,10 @@ impl extensions<A:copy> for dvec<A> {\n \n     #[doc = \"Overwrites the contents of the element at `idx` with `a`\"]\n     fn grow_set_elt(idx: uint, initval: A, val: A) {\n-        self.swap { |v| vec::grow_set(v, idx, initval, val); v }\n+        self.swap { |v|\n+            let mut v <- v;\n+            vec::grow_set(v, idx, initval, val);\n+            v\n+        }\n     }\n }\n\\ No newline at end of file"}, {"sha": "71a1e9d2d2179457b5810d2608113aa599471f1a", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f90228b8a82deb8da178d32322057d7e17245a77/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90228b8a82deb8da178d32322057d7e17245a77/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=f90228b8a82deb8da178d32322057d7e17245a77", "patch": "@@ -843,11 +843,8 @@ impl methods for check_loan_ctxt {\n                self.bccx.cmt_to_repr(cmt)];\n \n         alt cmt.cat {\n-          // Rvalues and locals can be moved:\n-          cat_rvalue | cat_local(_) { }\n-\n-          // Owned arguments can be moved:\n-          cat_arg(_) if cmt.mutbl == m_mutbl { }\n+          // Rvalues, locals, and arguments can be moved:\n+          cat_rvalue | cat_local(_) | cat_arg(_) { }\n \n           // We allow moving out of static items because the old code\n           // did.  This seems consistent with permitting moves out of\n@@ -1348,7 +1345,7 @@ impl categorize_methods for borrowck_ctxt {\n                  lp: none}\n               }\n               ast::by_move | ast::by_copy {\n-                {m: m_mutbl,\n+                {m: m_imm,\n                  lp: some(@lp_arg(vid))}\n               }\n               ast::by_ref {\n@@ -1506,7 +1503,7 @@ impl categorize_methods for borrowck_ctxt {\n           cat_special(sk_heap_upvar) { \"upvar\" }\n           cat_rvalue { \"non-lvalue\" }\n           cat_local(_) { mut_str + \" local variable\" }\n-          cat_arg(_) { mut_str + \" argument\" }\n+          cat_arg(_) { \"argument\" }\n           cat_deref(_, _, pk) { #fmt[\"dereference of %s %s pointer\",\n                                      mut_str, self.pk_to_sigil(pk)] }\n           cat_stack_upvar(_) { mut_str + \" upvar\" }"}, {"sha": "3f82e647ab6b9c9fcec01d9901cedaca62e2975b", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f90228b8a82deb8da178d32322057d7e17245a77/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90228b8a82deb8da178d32322057d7e17245a77/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=f90228b8a82deb8da178d32322057d7e17245a77", "patch": "@@ -1506,10 +1506,7 @@ impl check_methods for @liveness {\n             (*self.ir).add_spill(var);\n           }\n           some(lnk) {\n-            self.report_illegal_read(span, lnk, var, moved_variable);\n-            self.tcx.sess.span_note(\n-                span,\n-                \"move of variable occurred here\");\n+            self.report_illegal_move(span, lnk, var);\n           }\n         }\n     }\n@@ -1637,6 +1634,44 @@ impl check_methods for @liveness {\n         }\n     }\n \n+    fn report_illegal_move(move_span: span,\n+                           lnk: live_node_kind,\n+                           var: variable) {\n+\n+        // the only time that it is possible to have a moved variable\n+        // used by lnk_exit would be arguments or fields in a ctor.\n+        // we give a slightly different error message in those cases.\n+        if lnk == lnk_exit {\n+            let vk = self.ir.var_kinds[*var];\n+            alt vk {\n+              vk_arg(_, name, _) {\n+                self.tcx.sess.span_err(\n+                    move_span,\n+                    #fmt[\"illegal move from argument `%s`, which is not \\\n+                          copy or move mode\", name]);\n+                ret;\n+              }\n+              vk_field(name) {\n+                self.tcx.sess.span_err(\n+                    move_span,\n+                    #fmt[\"illegal move from field `%s`\", name]);\n+                ret;\n+              }\n+              vk_local(*) | vk_self | vk_implicit_ret {\n+                self.tcx.sess.span_bug(\n+                    move_span,\n+                    #fmt[\"illegal reader (%?) for `%?`\",\n+                         lnk, vk]);\n+              }\n+            }\n+        }\n+\n+        self.report_illegal_read(move_span, lnk, var, moved_variable);\n+        self.tcx.sess.span_note(\n+            move_span, \"move of variable occurred here\");\n+\n+    }\n+\n     fn report_illegal_read(chk_span: span,\n                            lnk: live_node_kind,\n                            var: variable,\n@@ -1658,7 +1693,8 @@ impl check_methods for @liveness {\n                 span,\n                 #fmt[\"use of %s: `%s`\", msg, name]);\n           }\n-          lnk_exit | lnk_vdef(_) {\n+          lnk_exit |\n+          lnk_vdef(_) {\n             self.tcx.sess.span_bug(\n                 chk_span,\n                 #fmt[\"illegal reader: %?\", lnk]);"}, {"sha": "0c3e594040bc16f94d033ae4ed077d4a7a0833ed", "filename": "src/test/compile-fail/liveness-move-from-args.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f90228b8a82deb8da178d32322057d7e17245a77/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90228b8a82deb8da178d32322057d7e17245a77/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs?ref=f90228b8a82deb8da178d32322057d7e17245a77", "patch": "@@ -0,0 +1,24 @@\n+fn take(-_x: int) { }\n+\n+fn from_by_value_arg(++x: int) {\n+    take(x);  //! ERROR illegal move from argument `x`, which is not copy or move mode\n+}\n+\n+fn from_by_mut_ref_arg(&x: int) {\n+    take(x);  //! ERROR illegal move from argument `x`, which is not copy or move mode\n+}\n+\n+fn from_by_ref_arg(&&x: int) {\n+    take(x);  //! ERROR illegal move from argument `x`, which is not copy or move mode\n+}\n+\n+fn from_copy_arg(+x: int) {\n+    take(x);\n+}\n+\n+fn from_move_arg(-x: int) {\n+    take(x);\n+}\n+\n+fn main() {\n+}"}, {"sha": "79e7f412163e63aafd2fe6ac2d145f1cbad04f29", "filename": "src/test/compile-fail/mutable-arguments.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f90228b8a82deb8da178d32322057d7e17245a77/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90228b8a82deb8da178d32322057d7e17245a77/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs?ref=f90228b8a82deb8da178d32322057d7e17245a77", "patch": "@@ -0,0 +1,30 @@\n+// Note: it would be nice to give fewer warnings in these cases.\n+\n+fn mutate_by_mut_ref(&x: uint) {\n+    x = 0u;\n+}\n+\n+fn mutate_by_ref(&&x: uint) {\n+    //!^ WARNING unused variable: `x`\n+    x = 0u; //! ERROR assigning to argument\n+}\n+\n+fn mutate_by_val(++x: uint) {\n+    //!^ WARNING unused variable: `x`\n+    x = 0u; //! ERROR assigning to argument\n+}\n+\n+fn mutate_by_copy(+x: uint) {\n+    //!^ WARNING unused variable: `x`\n+    x = 0u; //! ERROR assigning to argument\n+    //!^ WARNING value assigned to `x` is never read\n+}\n+\n+fn mutate_by_move(-x: uint) {\n+    //!^ WARNING unused variable: `x`\n+    x = 0u; //! ERROR assigning to argument\n+    //!^ WARNING value assigned to `x` is never read\n+}\n+\n+fn main() {\n+}"}, {"sha": "bd8f56eec0b523d992f31cbcc69103bced50a965", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f90228b8a82deb8da178d32322057d7e17245a77/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90228b8a82deb8da178d32322057d7e17245a77/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=f90228b8a82deb8da178d32322057d7e17245a77", "patch": "@@ -2,7 +2,6 @@ fn f1(a: {mut x: int}, &b: int, -c: int) -> int {\n     let r = a.x + b + c;\n     a.x = 0;\n     b = 10;\n-    c = 20;\n     ret r;\n }\n "}]}