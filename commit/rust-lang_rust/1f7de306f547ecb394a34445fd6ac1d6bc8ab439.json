{"sha": "1f7de306f547ecb394a34445fd6ac1d6bc8ab439", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmN2RlMzA2ZjU0N2VjYjM5NGEzNDQ0NWZkNmFjMWQ2YmM4YWI0Mzk=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-03T16:57:50Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-03T16:57:50Z"}, "message": "Add documentation", "tree": {"sha": "06dc3c2cdf9ff6908fbf39c3aa529ff7f2b2f74d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06dc3c2cdf9ff6908fbf39c3aa529ff7f2b2f74d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f7de306f547ecb394a34445fd6ac1d6bc8ab439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7de306f547ecb394a34445fd6ac1d6bc8ab439", "html_url": "https://github.com/rust-lang/rust/commit/1f7de306f547ecb394a34445fd6ac1d6bc8ab439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f7de306f547ecb394a34445fd6ac1d6bc8ab439/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7", "html_url": "https://github.com/rust-lang/rust/commit/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "7f7940d0b6af10ff12313d04145391c98f2db2d7", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f7de306f547ecb394a34445fd6ac1d6bc8ab439/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f7de306f547ecb394a34445fd6ac1d6bc8ab439/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=1f7de306f547ecb394a34445fd6ac1d6bc8ab439", "patch": "@@ -97,6 +97,30 @@ Invoking code action at this position will yield two code actions for importing\n * Is a fixed two-level structure enough?\n * Should we devise a general way to encode custom interaction protocols for GUI refactorings?\n \n+## Lazy assists with `ResolveCodeAction`\n+\n+**Issue:** https://github.com/microsoft/language-server-protocol/issues/787\n+\n+**Client Capability** `{ \"resolveCodeAction\": boolean }`\n+\n+If this capability is set, the assists will be computed lazily. Thus `CodeAction` returned from the server will only contain `id` but not `edit` or `command` fields. The only exclusion from the rule is the diagnostic edits.\n+\n+After the client got the id, it should then call `experimental/resolveCodeAction` command on the server and provide the following payload:\n+\n+```typescript\n+interface ResolveCodeActionParams {\n+    id: string;\n+    codeActionParams: lc.CodeActionParams;\n+}\n+```\n+\n+As a result of the command call the client will get the respective workspace edit (`lc.WorkspaceEdit`).\n+\n+### Unresolved Questions\n+\n+* Apply smarter filtering for ids?\n+* Upon `resolveCodeAction` command only call the assits which should be resolved and not all of them?\n+\n ## Parent Module\n \n **Issue:** https://github.com/microsoft/language-server-protocol/issues/1002"}]}