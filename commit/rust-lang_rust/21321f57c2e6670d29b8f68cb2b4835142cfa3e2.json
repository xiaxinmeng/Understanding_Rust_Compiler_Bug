{"sha": "21321f57c2e6670d29b8f68cb2b4835142cfa3e2", "node_id": "C_kwDOAAsO6NoAKDIxMzIxZjU3YzJlNjY3MGQyOWI4ZjY4Y2IyYjQ4MzUxNDJjZmEzZTI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-19T19:21:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-19T22:47:41Z"}, "message": "implement clock_gettime on macos", "tree": {"sha": "04ad58cb345f5d3368db96e74bf365e211d5af48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04ad58cb345f5d3368db96e74bf365e211d5af48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21321f57c2e6670d29b8f68cb2b4835142cfa3e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21321f57c2e6670d29b8f68cb2b4835142cfa3e2", "html_url": "https://github.com/rust-lang/rust/commit/21321f57c2e6670d29b8f68cb2b4835142cfa3e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21321f57c2e6670d29b8f68cb2b4835142cfa3e2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3", "html_url": "https://github.com/rust-lang/rust/commit/81ee8c13dc3e10cf4f028faf19a5585a73c5f3d3"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "bc0b71fbc2096438dce1d725341353ef06d516ad", "filename": "src/tools/miri/src/shims/time.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/21321f57c2e6670d29b8f68cb2b4835142cfa3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21321f57c2e6670d29b8f68cb2b4835142cfa3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs?ref=21321f57c2e6670d29b8f68cb2b4835142cfa3e2", "patch": "@@ -22,28 +22,52 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let this = self.eval_context_mut();\n \n-        this.assert_target_os(\"linux\", \"clock_gettime\");\n+        this.assert_target_os_is_unix(\"clock_gettime\");\n \n         let clk_id = this.read_scalar(clk_id_op)?.to_i32()?;\n \n-        // Linux has two main kinds of clocks. REALTIME clocks return the actual time since the\n-        // Unix epoch, including effects which may cause time to move backwards such as NTP.\n-        // Linux further distinguishes regular and \"coarse\" clocks, but the \"coarse\" version\n-        // is just specified to be \"faster and less precise\", so we implement both the same way.\n-        let absolute_clocks =\n-            [this.eval_libc_i32(\"CLOCK_REALTIME\")?, this.eval_libc_i32(\"CLOCK_REALTIME_COARSE\")?];\n-        // The second kind is MONOTONIC clocks for which 0 is an arbitrary time point, but they are\n-        // never allowed to go backwards. We don't need to do any additonal monotonicity\n-        // enforcement because std::time::Instant already guarantees that it is monotonic.\n-        let relative_clocks =\n-            [this.eval_libc_i32(\"CLOCK_MONOTONIC\")?, this.eval_libc_i32(\"CLOCK_MONOTONIC_COARSE\")?];\n+        let absolute_clocks;\n+        let mut relative_clocks;\n+\n+        match this.tcx.sess.target.os.as_ref() {\n+            \"linux\" => {\n+                // Linux has two main kinds of clocks. REALTIME clocks return the actual time since the\n+                // Unix epoch, including effects which may cause time to move backwards such as NTP.\n+                // Linux further distinguishes regular and \"coarse\" clocks, but the \"coarse\" version\n+                // is just specified to be \"faster and less precise\", so we implement both the same way.\n+                absolute_clocks = vec![\n+                    this.eval_libc_i32(\"CLOCK_REALTIME\")?,\n+                    this.eval_libc_i32(\"CLOCK_REALTIME_COARSE\")?,\n+                ];\n+                // The second kind is MONOTONIC clocks for which 0 is an arbitrary time point, but they are\n+                // never allowed to go backwards. We don't need to do any additonal monotonicity\n+                // enforcement because std::time::Instant already guarantees that it is monotonic.\n+                relative_clocks = vec![\n+                    this.eval_libc_i32(\"CLOCK_MONOTONIC\")?,\n+                    this.eval_libc_i32(\"CLOCK_MONOTONIC_COARSE\")?,\n+                ];\n+            }\n+            \"macos\" => {\n+                absolute_clocks = vec![this.eval_libc_i32(\"CLOCK_REALTIME\")?];\n+                relative_clocks = vec![this.eval_libc_i32(\"CLOCK_MONOTONIC\")?];\n+                // Some clocks only seem to exist in the aarch64 version of the target.\n+                if this.tcx.sess.target.arch == \"aarch64\" {\n+                    // `CLOCK_UPTIME_RAW` supposed to not increment while the system is asleep... but\n+                    // that's not really something a program running inside Miri can tell, anyway.\n+                    // We need to support it because std uses it.\n+                    relative_clocks.push(this.eval_libc_i32(\"CLOCK_UPTIME_RAW\")?);\n+                }\n+            }\n+            target => throw_unsup_format!(\"`clock_gettime` is not supported on target OS {target}\"),\n+        }\n \n         let duration = if absolute_clocks.contains(&clk_id) {\n             this.check_no_isolation(\"`clock_gettime` with `REALTIME` clocks\")?;\n             system_time_to_duration(&SystemTime::now())?\n         } else if relative_clocks.contains(&clk_id) {\n             this.machine.clock.now().duration_since(this.machine.clock.anchor())\n         } else {\n+            // Unsupported clock.\n             let einval = this.eval_libc(\"EINVAL\")?;\n             this.set_last_error(einval)?;\n             return Ok(Scalar::from_i32(-1));"}, {"sha": "d746f9df90ac300fdec3d0a33a4e0a4f50d525c2", "filename": "src/tools/miri/src/shims/unix/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21321f57c2e6670d29b8f68cb2b4835142cfa3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21321f57c2e6670d29b8f68cb2b4835142cfa3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs?ref=21321f57c2e6670d29b8f68cb2b4835142cfa3e2", "patch": "@@ -180,6 +180,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let result = this.gettimeofday(tv, tz)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"clock_gettime\" => {\n+                let [clk_id, tp] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.clock_gettime(clk_id, tp)?;\n+                this.write_scalar(result, dest)?;\n+            }\n \n             // Allocation\n             \"posix_memalign\" => {"}, {"sha": "34076e842d55b51226df6ddfcf1ce6f1dc3f450b", "filename": "src/tools/miri/src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21321f57c2e6670d29b8f68cb2b4835142cfa3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21321f57c2e6670d29b8f68cb2b4835142cfa3e2/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=21321f57c2e6670d29b8f68cb2b4835142cfa3e2", "patch": "@@ -43,15 +43,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 this.write_scalar(result, dest)?;\n             }\n \n-            // Time related shims\n-            \"clock_gettime\" => {\n-                // This is a POSIX function but it has only been tested on linux.\n-                let [clk_id, tp] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let result = this.clock_gettime(clk_id, tp)?;\n-                this.write_scalar(result, dest)?;\n-            }\n-\n             // Threading\n             \"pthread_condattr_setclock\" => {\n                 let [attr, clock_id] ="}, {"sha": "2a4300fcd049ec2d2669d77800b8631cc9e7d90c", "filename": "src/tools/miri/tests/pass-dep/shims/libc-misc.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21321f57c2e6670d29b8f68cb2b4835142cfa3e2/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21321f57c2e6670d29b8f68cb2b4835142cfa3e2/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs?ref=21321f57c2e6670d29b8f68cb2b4835142cfa3e2", "patch": "@@ -181,17 +181,25 @@ fn test_thread_local_errno() {\n }\n \n /// Tests whether clock support exists at all\n-#[cfg(target_os = \"linux\")]\n fn test_clocks() {\n     let mut tp = std::mem::MaybeUninit::<libc::timespec>::uninit();\n     let is_error = unsafe { libc::clock_gettime(libc::CLOCK_REALTIME, tp.as_mut_ptr()) };\n     assert_eq!(is_error, 0);\n-    let is_error = unsafe { libc::clock_gettime(libc::CLOCK_REALTIME_COARSE, tp.as_mut_ptr()) };\n-    assert_eq!(is_error, 0);\n     let is_error = unsafe { libc::clock_gettime(libc::CLOCK_MONOTONIC, tp.as_mut_ptr()) };\n     assert_eq!(is_error, 0);\n-    let is_error = unsafe { libc::clock_gettime(libc::CLOCK_MONOTONIC_COARSE, tp.as_mut_ptr()) };\n-    assert_eq!(is_error, 0);\n+    #[cfg(target_os = \"linux\")]\n+    {\n+        let is_error = unsafe { libc::clock_gettime(libc::CLOCK_REALTIME_COARSE, tp.as_mut_ptr()) };\n+        assert_eq!(is_error, 0);\n+        let is_error =\n+            unsafe { libc::clock_gettime(libc::CLOCK_MONOTONIC_COARSE, tp.as_mut_ptr()) };\n+        assert_eq!(is_error, 0);\n+    }\n+    #[cfg(all(target_os = \"macos\", target_arch = \"aarch64\"))]\n+    {\n+        let is_error = unsafe { libc::clock_gettime(libc::CLOCK_UPTIME_RAW, tp.as_mut_ptr()) };\n+        assert_eq!(is_error, 0);\n+    }\n }\n \n fn test_posix_gettimeofday() {\n@@ -293,11 +301,11 @@ fn main() {\n     test_thread_local_errno();\n \n     test_isatty();\n+    test_clocks();\n \n     #[cfg(target_os = \"linux\")]\n     {\n         test_posix_fadvise();\n         test_sync_file_range();\n-        test_clocks();\n     }\n }"}]}