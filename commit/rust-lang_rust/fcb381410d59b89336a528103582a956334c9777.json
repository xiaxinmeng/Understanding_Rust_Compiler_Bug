{"sha": "fcb381410d59b89336a528103582a956334c9777", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYjM4MTQxMGQ1OWI4OTMzNmE1MjgxMDM1ODJhOTU2MzM0Yzk3Nzc=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2012-01-28T16:50:26Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2012-01-28T16:50:26Z"}, "message": "Disable lexical block and function debug info caches to improve compilation time while #1694 is unfixed, and fix stack-exhaustion bug in block parent generation.", "tree": {"sha": "8e0b7ce5d2a5b01c80b9b170740b153ab06447a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e0b7ce5d2a5b01c80b9b170740b153ab06447a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcb381410d59b89336a528103582a956334c9777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb381410d59b89336a528103582a956334c9777", "html_url": "https://github.com/rust-lang/rust/commit/fcb381410d59b89336a528103582a956334c9777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcb381410d59b89336a528103582a956334c9777/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03e9dac09a737f47f1ce75b12826cebe320f2f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/03e9dac09a737f47f1ce75b12826cebe320f2f77", "html_url": "https://github.com/rust-lang/rust/commit/03e9dac09a737f47f1ce75b12826cebe320f2f77"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "05752acbcd4c39a863920e330f2197e58fa6d4a2", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fcb381410d59b89336a528103582a956334c9777/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb381410d59b89336a528103582a956334c9777/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=fcb381410d59b89336a528103582a956334c9777", "patch": "@@ -101,7 +101,7 @@ type metadata<T> = {node: ValueRef, data: T};\n \n type file_md = {path: str};\n type compile_unit_md = {path: str};\n-type subprogram_md = {path: str};\n+type subprogram_md = {id: ast::node_id};\n type local_var_md = {id: ast::node_id};\n type tydesc_md = {hash: uint};\n type block_md = {start: codemap::loc, end: codemap::loc};\n@@ -225,39 +225,39 @@ fn line_from_span(cm: codemap::codemap, sp: span) -> uint {\n }\n \n fn create_block(cx: @block_ctxt, sp: span) -> @metadata<block_md> {\n-    let cache = get_cache(bcx_ccx(cx));\n+    //let cache = get_cache(bcx_ccx(cx));\n     let start = codemap::lookup_char_pos(bcx_ccx(cx).sess.codemap,\n                                          sp.lo);\n     let fname = start.filename;\n     let end = codemap::lookup_char_pos(bcx_ccx(cx).sess.codemap,\n                                        sp.hi);\n     let tg = LexicalBlockTag;\n-    alt cached_metadata::<@metadata<block_md>>(\n+    /*alt cached_metadata::<@metadata<block_md>>(\n         cache, tg,\n         {|md| start == md.data.start && end == md.data.end}) {\n       option::some(md) { ret md; }\n       option::none {}\n-    }\n+    }*/\n \n     let parent = alt cx.parent {\n       parent_none { create_function(cx.fcx, sp).node }\n-      parent_some(bcx) { create_block(cx, sp).node }\n+      parent_some(bcx) { create_block(bcx, sp).node }\n     };\n     let file_node = create_file(bcx_ccx(cx), fname);\n-    let unique_id = alt cache.find(LexicalBlockTag) {\n+    /*let unique_id = alt cache.find(LexicalBlockTag) {\n       option::some(v) { vec::len(v) as int }\n       option::none { 0 }\n-    };\n+    };*/\n     let lldata = [lltag(tg),\n                   parent,\n                   lli32(start.line as int),\n                   lli32(start.col as int),\n-                  file_node.node,\n-                  lli32(unique_id)\n+                  file_node.node/*,\n+                  lli32(unique_id)*/\n                  ];\n       let val = llmdnode(lldata);\n       let mdval = @{node: val, data: {start: start, end: end}};\n-      update_cache(cache, tg, block_metadata(mdval));\n+      //update_cache(cache, tg, block_metadata(mdval));\n       ret mdval;\n }\n \n@@ -721,7 +721,7 @@ fn create_function(fcx: @fn_ctxt, sp: span) -> @metadata<subprogram_md> {\n     #debug(\"~~\");\n     log(debug, fcx.id);\n \n-    log(debug, codemap::span_to_str(sp, cx.sess.codemap));\n+    //log(debug, codemap::span_to_str(sp, cx.sess.codemap));\n \n     let (ident, ret_ty, id) = alt cx.ast_map.get(fcx.id) {\n       ast_map::node_item(item) {\n@@ -754,15 +754,14 @@ fn create_function(fcx: @fn_ctxt, sp: span) -> @metadata<subprogram_md> {\n     log(debug, ident);\n     log(debug, id);\n \n-    let path = str::connect(fcx.lcx.path + [ident], \"::\");\n-\n-    let cache = get_cache(cx);\n+    /*let cache = get_cache(cx);\n     alt cached_metadata::<@metadata<subprogram_md>>(\n-        cache, SubprogramTag, {|md| md.data.path == path &&\n-                                    /*md.data.path == ??*/ true}) {\n+        cache, SubprogramTag, {|md| md.data.id == id}) {\n       option::some(md) { ret md; }\n       option::none {}\n-    }\n+    }*/\n+\n+    let path = str::connect(fcx.lcx.path + [ident], \"::\");\n \n     let loc = codemap::lookup_char_pos(cx.sess.codemap,\n                                        sp.lo);\n@@ -805,7 +804,7 @@ fn create_function(fcx: @fn_ctxt, sp: span) -> @metadata<subprogram_md> {\n                       ];\n     let val = llmdnode(fn_metadata);\n     add_named_metadata(cx, \"llvm.dbg.sp\", val);\n-    let mdval = @{node: val, data: {path: path}};\n-    update_cache(cache, SubprogramTag, subprogram_metadata(mdval));\n+    let mdval = @{node: val, data: {id: id}};\n+    //update_cache(cache, SubprogramTag, subprogram_metadata(mdval));\n     ret mdval;\n }"}]}