{"sha": "bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "node_id": "C_kwDOAAsO6NoAKGJiZTlkMjdiOGZmMzZkYTU2NjM4YWE0M2Q2ZDBjZGZkZjg5YTRlNTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-05T22:42:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-05T22:42:04Z"}, "message": "Auto merge of #95702 - Dylan-DPC:rollup-793rz6v, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #88025 (ScmCredentials netbsd implementation.)\n - #95473 (track individual proc-macro expansions in the self-profiler)\n - #95547 (caution against ptr-to-int transmutes)\n - #95585 (Explain why `&T` is cloned when `T` is not `Clone`)\n - #95591 (Use revisions to track NLL test output (part 1))\n - #95663 (diagnostics: give a special note for unsafe fn / Fn/FnOnce/FnMut)\n - #95673 (:arrow_up: rust-analyzer)\n - #95681 (resolve: Fix resolution of empty paths passed from rustdoc)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b7b097853f762eb4b67e3cd4e4a7df5cb68cdcc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b097853f762eb4b67e3cd4e4a7df5cb68cdcc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "html_url": "https://github.com/rust-lang/rust/commit/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "306ba8357fb36212b7d30efb9eb9e41659ac1445", "url": "https://api.github.com/repos/rust-lang/rust/commits/306ba8357fb36212b7d30efb9eb9e41659ac1445", "html_url": "https://github.com/rust-lang/rust/commit/306ba8357fb36212b7d30efb9eb9e41659ac1445"}, {"sha": "728f2636ac882f8f31130d156278037e941349d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/728f2636ac882f8f31130d156278037e941349d7", "html_url": "https://github.com/rust-lang/rust/commit/728f2636ac882f8f31130d156278037e941349d7"}], "stats": {"total": 1246, "additions": 877, "deletions": 369}, "files": [{"sha": "06a90ab05ac820e3ea0b467bfb127e4d9fc43b7c", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1047,6 +1047,12 @@ impl<'a> ExtCtxt<'a> {\n         self.current_expansion.id.expn_data().call_site\n     }\n \n+    /// Returns the current expansion kind's description.\n+    pub(crate) fn expansion_descr(&self) -> String {\n+        let expn_data = self.current_expansion.id.expn_data();\n+        expn_data.kind.descr()\n+    }\n+\n     /// Equivalent of `Span::def_site` from the proc macro API,\n     /// except that the location is taken from the span passed as an argument.\n     pub fn with_def_site_ctxt(&self, span: Span) -> Span {"}, {"sha": "b4bae8ce5fbeb17fd03d57f3042d737c849e013d", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -24,6 +24,8 @@ impl base::ProcMacro for BangProcMacro {\n         span: Span,\n         input: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n+        let _timer =\n+            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace).map_err(|e| {\n@@ -48,6 +50,8 @@ impl base::AttrProcMacro for AttrProcMacro {\n         annotation: TokenStream,\n         annotated: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n+        let _timer =\n+            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client\n@@ -97,17 +101,21 @@ impl MultiItemModifier for ProcMacroDerive {\n             nt_to_tokenstream(&item, &ecx.sess.parse_sess, CanSynthesizeMissingTokens::No)\n         };\n \n-        let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n-        let server = proc_macro_server::Rustc::new(ecx);\n-        let stream = match self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace) {\n-            Ok(stream) => stream,\n-            Err(e) => {\n-                let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n-                if let Some(s) = e.as_str() {\n-                    err.help(&format!(\"message: {}\", s));\n+        let stream = {\n+            let _timer =\n+                ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n+            let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n+            let server = proc_macro_server::Rustc::new(ecx);\n+            match self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace) {\n+                Ok(stream) => stream,\n+                Err(e) => {\n+                    let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n+                    if let Some(s) = e.as_str() {\n+                        err.help(&format!(\"message: {}\", s));\n+                    }\n+                    err.emit();\n+                    return ExpandResult::Ready(vec![]);\n                 }\n-                err.emit();\n-                return ExpandResult::Ready(vec![]);\n             }\n         };\n "}, {"sha": "0c7d2f7b4e5edb4b48e348ec381d1b707d48f0ae", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -3298,7 +3298,9 @@ impl<'a> Resolver<'a> {\n             PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 => {\n                 Some(path_res.base_res())\n             }\n-            PathResult::NonModule(..) | PathResult::Failed { .. } => None,\n+            PathResult::Module(ModuleOrUniformRoot::ExternPrelude)\n+            | PathResult::NonModule(..)\n+            | PathResult::Failed { .. } => None,\n             PathResult::Module(..) | PathResult::Indeterminate => unreachable!(),\n         }\n     }"}, {"sha": "31b92d52bebc8d08a8690b60d7d283ecb516e6f4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -208,6 +208,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 flags.push((sym::_Self, Some(\"&[]\".to_owned())));\n             }\n \n+            if self_ty.is_fn() {\n+                let fn_sig = self_ty.fn_sig(self.tcx);\n+                let shortname = match fn_sig.unsafety() {\n+                    hir::Unsafety::Normal => \"fn\",\n+                    hir::Unsafety::Unsafe => \"unsafe fn\",\n+                };\n+                flags.push((sym::_Self, Some(shortname.to_owned())));\n+            }\n+\n             if let ty::Array(aty, len) = self_ty.kind() {\n                 flags.push((sym::_Self, Some(\"[]\".to_owned())));\n                 flags.push((sym::_Self, Some(format!(\"[{}]\", aty))));"}, {"sha": "83e535b3c32477f22d2523ecada2657c0cefa16c", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -40,6 +40,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_parentheses(err, expr);\n         self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected);\n+        self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n         self.report_closure_inferred_return_type(err, expected);\n@@ -630,7 +631,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     Applicability::MachineApplicable,\n                                     true,\n                                 ));\n-\n                     }\n                 }\n                 _ => {}"}, {"sha": "93a0900c7e80d93300c554ce9b3b9ecee62ba658", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -2,8 +2,6 @@ use super::FnCtxt;\n use crate::astconv::AstConv;\n \n use rustc_ast::util::parser::ExprPrecedence;\n-use rustc_span::{self, Span};\n-\n use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n@@ -13,12 +11,14 @@ use rustc_hir::{\n     WherePredicate,\n };\n use rustc_infer::infer::{self, TyCtxtInferExt};\n-\n+use rustc_infer::traits;\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Binder, Ty};\n+use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::{self, Binder, ToPredicate, Ty};\n use rustc_span::symbol::{kw, sym};\n+use rustc_span::Span;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n \n-use rustc_middle::ty::subst::GenericArgKind;\n use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -846,4 +846,53 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let node = self.tcx.hir().get(id);\n         matches!(node, Node::Stmt(Stmt { kind: StmtKind::Local(..), .. }))\n     }\n+\n+    /// Suggest that `&T` was cloned instead of `T` because `T` does not implement `Clone`,\n+    /// which is a side-effect of autoref.\n+    pub(crate) fn note_type_is_not_clone(\n+        &self,\n+        diag: &mut Diagnostic,\n+        expected_ty: Ty<'tcx>,\n+        found_ty: Ty<'tcx>,\n+        expr: &hir::Expr<'_>,\n+    ) {\n+        let hir::ExprKind::MethodCall(segment, &[ref callee_expr], _) = expr.kind else { return; };\n+        let Some(clone_trait_did) = self.tcx.lang_items().clone_trait() else { return; };\n+        let ty::Ref(_, pointee_ty, _) = found_ty.kind() else { return };\n+        let results = self.typeck_results.borrow();\n+        // First, look for a `Clone::clone` call\n+        if segment.ident.name == sym::clone\n+            && results.type_dependent_def_id(expr.hir_id).map_or(\n+                false,\n+                |did| {\n+                    self.tcx.associated_item(did).container\n+                        == ty::AssocItemContainer::TraitContainer(clone_trait_did)\n+                },\n+            )\n+            // If that clone call hasn't already dereferenced the self type (i.e. don't give this\n+            // diagnostic in cases where we have `(&&T).clone()` and we expect `T`).\n+            && !results.expr_adjustments(callee_expr).iter().any(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(..)))\n+            // Check that we're in fact trying to clone into the expected type\n+            && self.can_coerce(*pointee_ty, expected_ty)\n+            // And the expected type doesn't implement `Clone`\n+            && !self.predicate_must_hold_considering_regions(&traits::Obligation {\n+                cause: traits::ObligationCause::dummy(),\n+                param_env: self.param_env,\n+                recursion_depth: 0,\n+                predicate: ty::Binder::dummy(ty::TraitRef {\n+                    def_id: clone_trait_did,\n+                    substs: self.tcx.mk_substs([expected_ty.into()].iter()),\n+                })\n+                .without_const()\n+                .to_predicate(self.tcx),\n+            })\n+        {\n+            diag.span_note(\n+                callee_expr.span,\n+                &format!(\n+                    \"`{expected_ty}` does not implement `Clone`, so `{found_ty}` was cloned instead\"\n+                ),\n+            );\n+        }\n+    }\n }"}, {"sha": "27063952adbad4186204fb97b76f6388ab6f6d0d", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -991,6 +991,16 @@ extern \"rust-intrinsic\" {\n     /// let ptr_num_cast = ptr as *const i32 as usize;\n     /// ```\n     ///\n+    /// Note that using `transmute` to turn a pointer to a `usize` is (as noted above) [undefined\n+    /// behavior][ub] in `const` contexts. Also outside of consts, this operation might not behave\n+    /// as expected -- this is touching on many unspecified aspects of the Rust memory model.\n+    /// Depending on what the code is doing, the following alternatives are preferrable to\n+    /// pointer-to-integer transmutation:\n+    /// - If the code just wants to store data of arbitrary type in some buffer and needs to pick a\n+    ///   type for that buffer, it can use [`MaybeUninit`][mem::MaybeUninit].\n+    /// - If the code actually wants to work on the address the pointer points to, it can use `as`\n+    ///   casts or [`ptr.addr()`][pointer::addr].\n+    ///\n     /// Turning a `*mut T` into an `&mut T`:\n     ///\n     /// ```"}, {"sha": "c5a194b7d0a41ee9435837ac4c7bd39498157c14", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -60,6 +60,12 @@\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{Fn}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `Fn<{Args}>` closure, found `{Self}`\"\n )]\n@@ -141,6 +147,12 @@ pub trait Fn<Args>: FnMut<Args> {\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{FnMut}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnMut<{Args}>` closure, found `{Self}`\"\n )]\n@@ -214,6 +226,12 @@ pub trait FnMut<Args>: FnOnce<Args> {\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{FnOnce}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnOnce<{Args}>` closure, found `{Self}`\"\n )]"}, {"sha": "658c79896eb2e58747f20c5c165989dd86c98748", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 88, "deletions": 9, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -10,7 +10,7 @@ use crate::slice::from_raw_parts;\n use crate::sys::net::Socket;\n \n // FIXME(#43348): Make libc adapt #[doc(cfg(...))] so we don't need these fake definitions here?\n-#[cfg(all(doc, not(target_os = \"linux\"), not(target_os = \"android\")))]\n+#[cfg(all(doc, not(target_os = \"linux\"), not(target_os = \"android\"), not(target_os = \"netbsd\")))]\n #[allow(non_camel_case_types)]\n mod libc {\n     pub use libc::c_int;\n@@ -177,13 +177,24 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n     }\n }\n \n+#[cfg(all(doc, not(target_os = \"android\"), not(target_os = \"linux\"), not(target_os = \"netbsd\")))]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+#[derive(Clone)]\n+pub struct SocketCred(());\n+\n /// Unix credential.\n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n #[derive(Clone)]\n pub struct SocketCred(libc::ucred);\n \n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(target_os = \"netbsd\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+#[derive(Clone)]\n+pub struct SocketCred(libc::sockcred);\n+\n+#[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n impl SocketCred {\n     /// Create a Unix credential struct.\n     ///\n@@ -234,6 +245,61 @@ impl SocketCred {\n     }\n }\n \n+#[cfg(target_os = \"netbsd\")]\n+impl SocketCred {\n+    /// Create a Unix credential struct.\n+    ///\n+    /// PID, UID and GID is set to 0.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn new() -> SocketCred {\n+        SocketCred(libc::sockcred {\n+            sc_pid: 0,\n+            sc_uid: 0,\n+            sc_euid: 0,\n+            sc_gid: 0,\n+            sc_egid: 0,\n+            sc_ngroups: 0,\n+            sc_groups: [0u32; 1],\n+        })\n+    }\n+\n+    /// Set the PID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_pid(&mut self, pid: libc::pid_t) {\n+        self.0.sc_pid = pid;\n+    }\n+\n+    /// Get the current PID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_pid(&self) -> libc::pid_t {\n+        self.0.sc_pid\n+    }\n+\n+    /// Set the UID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_uid(&mut self, uid: libc::uid_t) {\n+        self.0.sc_uid = uid;\n+    }\n+\n+    /// Get the current UID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_uid(&self) -> libc::uid_t {\n+        self.0.sc_uid\n+    }\n+\n+    /// Set the GID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_gid(&mut self, gid: libc::gid_t) {\n+        self.0.sc_gid = gid;\n+    }\n+\n+    /// Get the current GID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_gid(&self) -> libc::gid_t {\n+        self.0.sc_gid\n+    }\n+}\n+\n /// This control message contains file descriptors.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_RIGHTS`.\n@@ -249,14 +315,22 @@ impl<'a> Iterator for ScmRights<'a> {\n     }\n }\n \n+#[cfg(all(doc, not(target_os = \"android\"), not(target_os = \"linux\"), not(target_os = \"netbsd\")))]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+pub struct ScmCredentials<'a>(AncillaryDataIter<'a, ()>);\n+\n /// This control message contains unix credentials.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_CREDENTIALS` or `SCM_CREDS`.\n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(target_os = \"netbsd\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::sockcred>);\n+\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n     type Item = SocketCred;\n@@ -278,7 +352,7 @@ pub enum AncillaryError {\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub enum AncillaryData<'a> {\n     ScmRights(ScmRights<'a>),\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     ScmCredentials(ScmCredentials<'a>),\n }\n \n@@ -300,8 +374,8 @@ impl<'a> AncillaryData<'a> {\n     /// # Safety\n     ///\n     /// `data` must contain a valid control message and the control message must be type of\n-    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDENTIALS`.\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDS`.\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     unsafe fn as_credentials(data: &'a [u8]) -> Self {\n         let ancillary_data_iter = AncillaryDataIter::new(data);\n         let scm_credentials = ScmCredentials(ancillary_data_iter);\n@@ -320,6 +394,8 @@ impl<'a> AncillaryData<'a> {\n                     libc::SCM_RIGHTS => Ok(AncillaryData::as_rights(data)),\n                     #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n                     libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n+                    #[cfg(target_os = \"netbsd\")]\n+                    libc::SCM_CREDS => Ok(AncillaryData::as_credentials(data)),\n                     cmsg_type => {\n                         Err(AncillaryError::Unknown { cmsg_level: libc::SOL_SOCKET, cmsg_type })\n                     }\n@@ -531,7 +607,7 @@ impl<'a> SocketAncillary<'a> {\n     /// Technically, that means this operation adds a control message with the level `SOL_SOCKET`\n     /// and type `SCM_CREDENTIALS` or `SCM_CREDS`.\n     ///\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {\n         self.truncated = false;\n@@ -540,7 +616,10 @@ impl<'a> SocketAncillary<'a> {\n             &mut self.length,\n             creds,\n             libc::SOL_SOCKET,\n+            #[cfg(not(target_os = \"netbsd\"))]\n             libc::SCM_CREDENTIALS,\n+            #[cfg(target_os = \"netbsd\")]\n+            libc::SCM_CREDS,\n         )\n     }\n "}, {"sha": "872058b36e62f198a4e2c5a0e63c4ed3c1f744e2", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -865,7 +865,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -877,7 +877,7 @@ impl UnixDatagram {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixDatagram::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "cd1aa01fa0f1986f7783ca34d11161f7b66920f7", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -415,7 +415,7 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -427,7 +427,7 @@ impl UnixStream {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixStream::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "9bf9607a63e4d1b35f5209a86154e8cd51681e7b", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -419,6 +419,17 @@ impl Socket {\n         Ok(passcred != 0)\n     }\n \n+    #[cfg(target_os = \"netbsd\")]\n+    pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n+        setsockopt(self, 0 as libc::c_int, libc::LOCAL_CREDS, passcred as libc::c_int)\n+    }\n+\n+    #[cfg(target_os = \"netbsd\")]\n+    pub fn passcred(&self) -> io::Result<bool> {\n+        let passcred: libc::c_int = getsockopt(self, 0 as libc::c_int, libc::LOCAL_CREDS)?;\n+        Ok(passcred != 0)\n+    }\n+\n     #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\")))]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         let mut nonblocking = nonblocking as libc::c_int;"}, {"sha": "cc7a5fa1c7372a32fd97f51c9c7093e805ae9352", "filename": "src/test/rustdoc-ui/intra-doc/global-path.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -0,0 +1,8 @@\n+// Doc link path with empty prefix that resolves to \"extern prelude\" instead of a module.\n+\n+// check-pass\n+// edition:2018\n+\n+/// [::Unresolved]\n+//~^ WARN unresolved link to `::Unresolved`\n+pub struct Item;"}, {"sha": "02379cd6cdf694a9cf7aedb4f8cea81a67ced39b", "filename": "src/test/rustdoc-ui/intra-doc/global-path.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -0,0 +1,10 @@\n+warning: unresolved link to `::Unresolved`\n+  --> $DIR/global-path.rs:6:6\n+   |\n+LL | /// [::Unresolved]\n+   |      ^^^^^^^^^^^^ no item named `` in scope\n+   |\n+   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "bd095c2d83d8a186cb49ed9e2a36514e251883df", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -2,11 +2,12 @@ error[E0277]: expected a `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-i\n   --> $DIR/coerce-unsafe-to-closure.rs:2:44\n    |\n LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n-   |                                        --- ^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   |                                        --- ^^^^^^^^^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |                                        |\n    |                                        required by a bound introduced by this call\n    |\n    = help: the trait `FnOnce<(&str,)>` is not implemented for `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |"}, {"sha": "0dcf06481427dda88b513a33a02acb568bde34d1", "filename": "src/test/ui/nll/issue-50716.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-50716.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-50716.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-50716.rs:14:9\n+  --> $DIR/issue-50716.rs:18:9\n    |\n LL |     let _x = *s;\n    |         ^^ lifetime mismatch\n    |\n    = note: expected type `<<&'a T as A>::X as Sized>`\n               found type `<<&'static T as A>::X as Sized>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/issue-50716.rs:9:8\n+  --> $DIR/issue-50716.rs:13:8\n    |\n LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n    |        ^^", "previous_filename": "src/test/ui/nll/issue-50716.stderr"}, {"sha": "a8f4d694ba7d1b882bb178ca29fca719773addfd", "filename": "src/test/ui/nll/issue-50716.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-50716.rs:14:14\n+  --> $DIR/issue-50716.rs:18:14\n    |\n LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n    |        -- lifetime `'a` defined here"}, {"sha": "bd44d3eff9fc89cb14727630ca99d3abc92c082e", "filename": "src/test/ui/nll/issue-50716.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -2,6 +2,10 @@\n // Regression test for the issue #50716: NLL ignores lifetimes bounds\n // derived from `Sized` requirements\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait A {\n     type X: ?Sized;\n }"}, {"sha": "259f378f70b5c825f03fe2e803122f3bee13509c", "filename": "src/test/ui/nll/issue-52742.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,16 +1,16 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/issue-52742.rs:12:18\n+  --> $DIR/issue-52742.rs:17:18\n    |\n LL |         self.y = b.z\n    |                  ^^^\n    |\n note: ...the reference is valid for the lifetime `'_` as defined here...\n-  --> $DIR/issue-52742.rs:10:10\n+  --> $DIR/issue-52742.rs:15:10\n    |\n LL | impl Foo<'_, '_> {\n    |          ^^\n note: ...but the borrowed content is only valid for the anonymous lifetime defined here\n-  --> $DIR/issue-52742.rs:11:31\n+  --> $DIR/issue-52742.rs:16:31\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n    |                               ^^^^^^^", "previous_filename": "src/test/ui/nll/issue-52742.stderr"}, {"sha": "6828418a78ec1afa0f719a2c7c1395d20d51c9e5", "filename": "src/test/ui/nll/issue-52742.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-52742.rs:12:9\n+  --> $DIR/issue-52742.rs:17:9\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n    |                 ---------         -- let's call this `'1`"}, {"sha": "5ec5770c5c206e46d35101c68628c367925f453e", "filename": "src/test/ui/nll/issue-52742.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,3 +1,8 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n+\n struct Foo<'a, 'b> {\n     x: &'a u32,\n     y: &'b u32,"}, {"sha": "cc87954732c4e5466ce037eadcada77c93061795", "filename": "src/test/ui/nll/issue-55394.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,26 +1,26 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n-  --> $DIR/issue-55394.rs:9:9\n+  --> $DIR/issue-55394.rs:13:9\n    |\n LL |         Foo { bar }\n    |         ^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/issue-55394.rs:8:17\n+  --> $DIR/issue-55394.rs:12:17\n    |\n LL |     fn new(bar: &mut Bar) -> Self {\n    |                 ^^^^^^^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/issue-55394.rs:9:15\n+  --> $DIR/issue-55394.rs:13:15\n    |\n LL |         Foo { bar }\n    |               ^^^\n note: but, the lifetime must be valid for the lifetime `'_` as defined here...\n-  --> $DIR/issue-55394.rs:7:10\n+  --> $DIR/issue-55394.rs:11:10\n    |\n LL | impl Foo<'_> {\n    |          ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-55394.rs:9:9\n+  --> $DIR/issue-55394.rs:13:9\n    |\n LL |         Foo { bar }\n    |         ^^^^^^^^^^^", "previous_filename": "src/test/ui/nll/issue-55394.stderr"}, {"sha": "c166c458c5013bd105fa2a6a5338368b9aaca35b", "filename": "src/test/ui/nll/issue-55394.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55394.rs:9:9\n+  --> $DIR/issue-55394.rs:13:9\n    |\n LL |     fn new(bar: &mut Bar) -> Self {\n    |                 -            ---- return type is Foo<'2>"}, {"sha": "9c4fcdf6419090876866d64b007e3e4381fff0c4", "filename": "src/test/ui/nll/issue-55394.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Bar;\n \n struct Foo<'s> {"}, {"sha": "d4e9f2b4154ef3614a4efb6974eaa2f499a24bad", "filename": "src/test/ui/nll/issue-55401.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55401.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55401.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/issue-55401.rs:3:5\n+  --> $DIR/issue-55401.rs:7:5\n    |\n LL |     *y\n    |     ^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/issue-55401.rs:1:47\n+  --> $DIR/issue-55401.rs:5:47\n    |\n LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n    |                                               ^^", "previous_filename": "src/test/ui/nll/issue-55401.stderr"}, {"sha": "1318dc676571490adf5a46d20f2108552880dc18", "filename": "src/test/ui/nll/issue-55401.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55401.rs:3:5\n+  --> $DIR/issue-55401.rs:7:5\n    |\n LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n    |                                               -- lifetime `'a` defined here"}, {"sha": "10f38c53dfdc74226db740ffcaebc14949499517", "filename": "src/test/ui/nll/issue-55401.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n     *y //~ ERROR"}, {"sha": "ea9f5d4b2b1aa15a20b619d6c6816f3dcb452d43", "filename": "src/test/ui/nll/lub-if.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-if.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-if.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,25 +1,25 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-if.rs:28:9\n+  --> $DIR/lub-if.rs:32:9\n    |\n LL |         s\n    |         ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-if.rs:23:17\n+  --> $DIR/lub-if.rs:27:17\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-if.rs:35:9\n+  --> $DIR/lub-if.rs:41:9\n    |\n LL |         s\n    |         ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-if.rs:32:17\n+  --> $DIR/lub-if.rs:38:17\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^", "previous_filename": "src/test/ui/nll/lub-if.stderr"}, {"sha": "2fd6e69628d472c95e9df998d9d536880c0bef55", "filename": "src/test/ui/nll/lub-if.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/lub-if.rs:28:9\n+  --> $DIR/lub-if.rs:32:9\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here\n@@ -8,7 +8,7 @@ LL |         s\n    |         ^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/lub-if.rs:35:9\n+  --> $DIR/lub-if.rs:41:9\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here"}, {"sha": "18561d63935e785947433fec10dd09afe250df05", "filename": "src/test/ui/nll/lub-if.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -2,6 +2,10 @@\n // of the various arms, particularly in the case where regions are\n // involved.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n pub fn opt_str0<'a>(maybestr: &'a Option<String>) -> &'a str {\n     if maybestr.is_none() {\n         \"(none)\"\n@@ -25,14 +29,18 @@ pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n         \"(none)\"\n     } else {\n         let s: &'a str = maybestr.as_ref().unwrap();\n-        s  //~ ERROR E0312\n+        s\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n \n pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n     if maybestr.is_some() {\n         let s: &'a str = maybestr.as_ref().unwrap();\n-        s  //~ ERROR E0312\n+        s\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     } else {\n         \"(none)\"\n     }"}, {"sha": "38952133160ed70ed77acedbea0a03930ecfbf75", "filename": "src/test/ui/nll/lub-match.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-match.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,25 +1,25 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-match.rs:30:13\n+  --> $DIR/lub-match.rs:34:13\n    |\n LL |             s\n    |             ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-match.rs:25:17\n+  --> $DIR/lub-match.rs:29:17\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-match.rs:39:13\n+  --> $DIR/lub-match.rs:45:13\n    |\n LL |             s\n    |             ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-match.rs:35:17\n+  --> $DIR/lub-match.rs:41:17\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^", "previous_filename": "src/test/ui/nll/lub-match.stderr"}, {"sha": "c78d0cb641dc8508bcd83c0a156869aa21ce7f9c", "filename": "src/test/ui/nll/lub-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-match.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/lub-match.rs:30:13\n+  --> $DIR/lub-match.rs:34:13\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here\n@@ -8,7 +8,7 @@ LL |             s\n    |             ^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/lub-match.rs:39:13\n+  --> $DIR/lub-match.rs:45:13\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here"}, {"sha": "084d8b95f5893d73824f18fdb9a240dd4887a732", "filename": "src/test/ui/nll/lub-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Flub-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-match.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -2,6 +2,10 @@\n // of the various arms, particularly in the case where regions are\n // involved.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n pub fn opt_str0<'a>(maybestr: &'a Option<String>) -> &'a str {\n     match *maybestr {\n         Some(ref s) => {\n@@ -27,7 +31,9 @@ pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n         None => \"(none)\",\n         Some(ref s) => {\n             let s: &'a str = s;\n-            s //~ ERROR E0312\n+            s\n+            //[base]~^ ERROR E0312\n+            //[nll]~^^ ERROR lifetime may not live long enough\n         }\n     }\n }\n@@ -36,7 +42,9 @@ pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n     match *maybestr {\n         Some(ref s) => {\n             let s: &'a str = s;\n-            s //~ ERROR E0312\n+            s\n+            //[base]~^ ERROR E0312\n+            //[nll]~^^ ERROR lifetime may not live long enough\n         }\n         None => \"(none)\",\n     }"}, {"sha": "010535fec6dd440b0e8de512948a1e5bc28ea327", "filename": "src/test/ui/nll/type-alias-free-regions.base.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,59 +1,59 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/type-alias-free-regions.rs:17:9\n+  --> $DIR/type-alias-free-regions.rs:21:9\n    |\n LL |         C { f: b }\n    |         ^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/type-alias-free-regions.rs:16:24\n+  --> $DIR/type-alias-free-regions.rs:20:24\n    |\n LL |     fn from_box(b: Box<B>) -> Self {\n    |                        ^\n note: ...so that the expression is assignable\n-  --> $DIR/type-alias-free-regions.rs:17:16\n+  --> $DIR/type-alias-free-regions.rs:21:16\n    |\n LL |         C { f: b }\n    |                ^\n    = note: expected `Box<Box<&isize>>`\n               found `Box<Box<&isize>>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/type-alias-free-regions.rs:15:6\n+  --> $DIR/type-alias-free-regions.rs:19:6\n    |\n LL | impl<'a> FromBox<'a> for C<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/type-alias-free-regions.rs:17:9\n+  --> $DIR/type-alias-free-regions.rs:21:9\n    |\n LL |         C { f: b }\n    |         ^^^^^^^^^^\n    = note: expected `C<'a>`\n               found `C<'_>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/type-alias-free-regions.rs:27:16\n+  --> $DIR/type-alias-free-regions.rs:31:16\n    |\n LL |         C { f: Box::new(b.0) }\n    |                ^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/type-alias-free-regions.rs:26:23\n+  --> $DIR/type-alias-free-regions.rs:30:23\n    |\n LL |     fn from_tuple(b: (B,)) -> Self {\n    |                       ^\n note: ...so that the expression is assignable\n-  --> $DIR/type-alias-free-regions.rs:27:25\n+  --> $DIR/type-alias-free-regions.rs:31:25\n    |\n LL |         C { f: Box::new(b.0) }\n    |                         ^^^\n    = note: expected `Box<&isize>`\n               found `Box<&isize>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/type-alias-free-regions.rs:25:6\n+  --> $DIR/type-alias-free-regions.rs:29:6\n    |\n LL | impl<'a> FromTuple<'a> for C<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/type-alias-free-regions.rs:27:9\n+  --> $DIR/type-alias-free-regions.rs:31:9\n    |\n LL |         C { f: Box::new(b.0) }\n    |         ^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/nll/type-alias-free-regions.stderr"}, {"sha": "6b746602d7ffd3b016fb851973a66db1a5d43fe2", "filename": "src/test/ui/nll/type-alias-free-regions.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/type-alias-free-regions.rs:17:9\n+  --> $DIR/type-alias-free-regions.rs:21:9\n    |\n LL | impl<'a> FromBox<'a> for C<'a> {\n    |      -- lifetime `'a` defined here\n@@ -9,7 +9,7 @@ LL |         C { f: b }\n    |         ^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-alias-free-regions.rs:27:9\n+  --> $DIR/type-alias-free-regions.rs:31:9\n    |\n LL | impl<'a> FromTuple<'a> for C<'a> {\n    |      -- lifetime `'a` defined here"}, {"sha": "59ef0344937704cb507d59b46e45f675d88d6ee6", "filename": "src/test/ui/nll/type-alias-free-regions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,6 +1,10 @@\n // Test that we don't assume that type aliases have the same type parameters\n // as the type they alias and then panic when we see this.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n type A<'a> = &'a isize;\n type B<'a> = Box<A<'a>>;\n "}, {"sha": "ba17994b437661494e39725b131adeba52fde2d5", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `fn` parameter has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/constant-in-expr-inherent-1.rs:8:5\n+  --> $DIR/constant-in-expr-inherent-1.rs:12:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |               ------- this data with lifetime `'a`...", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr"}, {"sha": "0399d5f893d85ef0779a8a794188b6d8c76fa85c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-inherent-1.rs:8:5\n+  --> $DIR/constant-in-expr-inherent-1.rs:12:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "0bd316aa84cfe19296dfd30a433b2be873ebabc8", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo<'a> { x: &'a u32 }\n \n impl<'a> Foo<'a> {"}, {"sha": "61efa879fc04be5e08f42868f22ba1db93daebb4", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/constant-in-expr-normalize.rs:18:5\n+  --> $DIR/constant-in-expr-normalize.rs:22:5\n    |\n LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/constant-in-expr-normalize.rs:17:8\n+  --> $DIR/constant-in-expr-normalize.rs:21:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        ^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.stderr"}, {"sha": "4c1e6bee2aa0d5143fa2716100381f1618301518", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-normalize.rs:18:5\n+  --> $DIR/constant-in-expr-normalize.rs:22:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "262f0ae318f8effba3583137d121a3ec56d4e1dd", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Mirror {\n     type Me;\n }"}, {"sha": "93f7156e55757aed90ce82c947c7897711a6ae7a", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/constant-in-expr-trait-item-1.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-1.rs:14:5\n    |\n LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/constant-in-expr-trait-item-1.rs:9:8\n+  --> $DIR/constant-in-expr-trait-item-1.rs:13:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        ^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.stderr"}, {"sha": "990d0ae385fc10804b73384bf0b4915c6b3cf384", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-1.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-1.rs:14:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "512edb501c4ea12a9aab2e5be57cf514d2010586", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "f43ade38937d342d165cb5445814d48cb271f74c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/constant-in-expr-trait-item-2.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-2.rs:14:5\n    |\n LL |     <T as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/constant-in-expr-trait-item-2.rs:9:8\n+  --> $DIR/constant-in-expr-trait-item-2.rs:13:8\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        ^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.stderr"}, {"sha": "8c0430f1e092cb2bf193b74fc185f37419ebc2a0", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-2.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-2.rs:14:5\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "b3dfbd984ebbf3f035772bb2f339a5847ad1cd88", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "e9393aa05ab39c5bea59da8ee68eb4dfa7d14422", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,24 +1,24 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL |     T::C\n    |     ^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/constant-in-expr-trait-item-3.rs:9:8\n+  --> $DIR/constant-in-expr-trait-item-3.rs:13:8\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        ^^\n note: ...so that the types are compatible\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL |     T::C\n    |     ^^^^\n    = note: expected `Foo<'_>`\n               found `Foo<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL |     T::C\n    |     ^^^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr"}, {"sha": "cbcaf042f053904078269375831738eb2e8b2873", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "6e78d94c2f63ac8c942008d36146f29a92a5b0c2", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "6d389a1317a9fa2f4efa45870520388a9cc4b80d", "filename": "src/test/ui/rfc1623.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Frfc1623.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Frfc1623.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:28:8\n+  --> $DIR/rfc1623.rs:36:8\n    |\n LL |     f: &id,\n    |        ^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/rfc1623.stderr"}, {"sha": "f85b6ff8ff75b2a0431d8e43e50ce0fe97a4bb55", "filename": "src/test/ui/rfc1623.nll.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,11 +1,12 @@\n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ one type is more general than the other\n@@ -14,13 +15,14 @@ LL | | };\n               found type `Fn<(&Foo<'_>,)>`\n \n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ one type is more general than the other\n@@ -29,13 +31,14 @@ LL | | };\n               found type `Fn<(&Foo<'_>,)>`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ implementation of `FnOnce` is not general enough\n@@ -44,13 +47,14 @@ LL | | };\n    = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ implementation of `FnOnce` is not general enough"}, {"sha": "0e9d2140324256dbdcccab92e0fb3c9837ba5335", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![allow(dead_code)]\n \n fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 {\n@@ -23,10 +27,14 @@ fn id<T>(t: T) -> T {\n }\n \n static SOME_STRUCT: &SomeStruct = &SomeStruct {\n+    //[nll]~^ ERROR mismatched types\n+    //[nll]~| ERROR mismatched types\n+    //[nll]~| ERROR implementation of `FnOnce` is not general enough\n+    //[nll]~| ERROR implementation of `FnOnce` is not general enough\n     foo: &Foo { bools: &[false, true] },\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n-    //~^ ERROR implementation of `FnOnce` is not general enough\n+    //[base]~^ ERROR implementation of `FnOnce` is not general enough\n };\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "94a90a568548988a4754644f771c8838c928d9a6", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -53,7 +53,7 @@ error[E0277]: expected a `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:28:10\n    |\n LL |     call(foo_unsafe);\n-   |     ---- ^^^^^^^^^^ expected an `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     ---- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -70,7 +70,7 @@ error[E0277]: expected a `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:30:14\n    |\n LL |     call_mut(foo_unsafe);\n-   |     -------- ^^^^^^^^^^ expected an `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     -------- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -87,7 +87,7 @@ error[E0277]: expected a `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:32:15\n    |\n LL |     call_once(foo_unsafe);\n-   |     --------- ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     --------- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "a3b410c2cfb8c4946c53b40be46e6e828b4bf979", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,23 +1,23 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:10:18\n    |\n LL |     let z: i32 = x;\n    |                  ^\n    |\n note: used non-generic type `&'static i32` for generic parameter\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:19\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:19\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                   ^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:14:5\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:18:5\n    |\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr"}, {"sha": "db771d211322c8f53776a358d3e67c210c140468", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,23 +1,23 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:10:18\n    |\n LL |     let z: i32 = x;\n    |                  ^\n    |\n note: used non-generic type `&'static i32` for generic parameter\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:19\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:19\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                   ^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:14:5\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:18:5\n    |\n LL |     t\n    |     ^"}, {"sha": "2ad7e615e19cc016b3ea8cab1e1b0a1a276f89c0", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,9 @@\n #![feature(type_alias_impl_trait)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn main() {\n     let y = 42;\n     let x = wrong_generic(&y);"}, {"sha": "be77b60ca8ff3ac82bfe8b92bb8bf4873a931bc9", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr"}, {"sha": "f5b91567ff53170c469f15b77bffbef65f3971ed", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,19 +1,19 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&X,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^ implementation of `FnOnce` is not general enough"}, {"sha": "e95ddab75bee407aae93febc78a5f2383159dc94", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,6 +1,11 @@\n // Regression test for issue #57611\n // Ensures that we don't ICE\n // FIXME: This should compile, but it currently doesn't\n+// known-bug\n+\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n #![feature(trait_alias)]\n #![feature(type_alias_impl_trait)]\n@@ -18,7 +23,6 @@ impl Foo for X {\n \n     fn bar(&self) -> Self::Bar {\n         |x| x\n-        //~^ ERROR implementation of `FnOnce` is not general enough\n     }\n }\n "}, {"sha": "9279e4c3901db303674d35d8ea5f23d980296d3d", "filename": "src/test/ui/typeck/explain_clone_autoref.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -0,0 +1,13 @@\n+struct NotClone;\n+\n+fn main() {\n+    clone_thing(&NotClone);\n+}\n+\n+fn clone_thing(nc: &NotClone) -> NotClone {\n+    //~^ NOTE expected `NotClone` because of return type\n+    nc.clone()\n+    //~^ ERROR mismatched type\n+    //~| NOTE `NotClone` does not implement `Clone`, so `&NotClone` was cloned instead\n+    //~| NOTE expected struct `NotClone`, found `&NotClone`\n+}"}, {"sha": "faac680ea19318f02e674ec0e5ddb67ad34cf9eb", "filename": "src/test/ui/typeck/explain_clone_autoref.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/explain_clone_autoref.rs:9:5\n+   |\n+LL | fn clone_thing(nc: &NotClone) -> NotClone {\n+   |                                  -------- expected `NotClone` because of return type\n+LL |\n+LL |     nc.clone()\n+   |     ^^^^^^^^^^ expected struct `NotClone`, found `&NotClone`\n+   |\n+note: `NotClone` does not implement `Clone`, so `&NotClone` was cloned instead\n+  --> $DIR/explain_clone_autoref.rs:9:5\n+   |\n+LL |     nc.clone()\n+   |     ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5d555a9c5e4506bba34d3cb694edef70582ff458", "filename": "src/test/ui/unboxed-closures/issue-30906.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-30906.rs:18:5\n+  --> $DIR/issue-30906.rs:22:5\n    |\n LL |     test(Compose(f, |_| {}));\n    |     ^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/unboxed-closures/issue-30906.stderr"}, {"sha": "333e8e178217f23b73483dd0092449382e316885", "filename": "src/test/ui/unboxed-closures/issue-30906.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-30906.rs:18:5\n+  --> $DIR/issue-30906.rs:22:5\n    |\n LL |     test(Compose(f, |_| {}));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough"}, {"sha": "1fd3a7f97dea3e88662e8d4b41a5fb0c88bbb634", "filename": "src/test/ui/unboxed-closures/issue-30906.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,9 @@\n #![feature(fn_traits, unboxed_closures)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n \n struct Compose<F, G>(F, G);"}, {"sha": "ebd14c64298202d8232f5a69f02cd159d64994da", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.base.stderr", "status": "renamed", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,23 +1,27 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:17:15\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:21:15\n    |\n LL |         x.set(y);\n    |               ^\n    |\n note: ...the reference is valid for the anonymous lifetime #2 defined here...\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:20:14\n    |\n LL |       doit(0, &|x, y| {\n    |  ______________^\n LL | |         x.set(y);\n+LL | |\n+LL | |\n LL | |     });\n    | |_____^\n note: ...but the borrowed content is only valid for the anonymous lifetime #3 defined here\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:20:14\n    |\n LL |       doit(0, &|x, y| {\n    |  ______________^\n LL | |         x.set(y);\n+LL | |\n+LL | |\n LL | |     });\n    | |_____^\n ", "previous_filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.stderr"}, {"sha": "aeeee6e5003e897799fae54845a0bd9e11f3d628", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:17:9\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:21:9\n    |\n LL |     doit(0, &|x, y| {\n    |               -  - has type `&'1 i32`"}, {"sha": "288349e44561e35d1e40e6abd540b6c768b6029d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -3,6 +3,10 @@\n // That a closure whose expected argument types include two distinct\n // bound regions.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::cell::Cell;\n \n fn doit<T,F>(val: T, f: &F)\n@@ -14,6 +18,8 @@ fn doit<T,F>(val: T, f: &F)\n \n pub fn main() {\n     doit(0, &|x, y| {\n-        x.set(y); //~ ERROR E0312\n+        x.set(y);\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ lifetime may not live long enough\n     });\n }"}, {"sha": "18e133957ba37fa5aebb201743715c2eb3b91caf", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -2,11 +2,12 @@ error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r i\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:20:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ------- ^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:9:15\n    |\n@@ -17,11 +18,12 @@ error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:25:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:19\n    |\n@@ -32,11 +34,12 @@ error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:30:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ------------ ^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:15:20\n    |"}, {"sha": "c826af3c4c38f0f263f775f1840ceadc377d81c0", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -2,11 +2,12 @@ error[E0277]: expected a `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isi\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:21:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ------- ^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:10:15\n    |\n@@ -17,11 +18,12 @@ error[E0277]: expected a `FnMut<(&isize,)>` closure, found `unsafe fn(isize) ->\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:26:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:19\n    |\n@@ -32,11 +34,12 @@ error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) ->\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:31:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ------------ ^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:16:20\n    |"}, {"sha": "07357795010b54f3d70cb49a4baa729a3694989d", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `items` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/dyn-trait-underscore.rs:8:20\n+  --> $DIR/dyn-trait-underscore.rs:12:20\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                ---- this data with an anonymous lifetime `'_`...\n@@ -10,7 +10,7 @@ LL |     Box::new(items.iter())\n    |              ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/dyn-trait-underscore.rs:6:29\n+  --> $DIR/dyn-trait-underscore.rs:10:29\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                             ^^^^^^^^^^^^^^^^^^^^^ `'static` requirement introduced here", "previous_filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr"}, {"sha": "53d45f6a8f22b98da018b6f2e3fee0278758a770", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/dyn-trait-underscore.rs:8:5\n+  --> $DIR/dyn-trait-underscore.rs:12:5\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                - let's call the lifetime of this reference `'1`"}, {"sha": "7110d43221082facd2507a71f3966f0b3fbfa7aa", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -3,9 +3,15 @@\n //\n // cc #48468\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n-    Box::new(items.iter()) //~ ERROR E0759\n+    Box::new(items.iter())\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn b<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {"}, {"sha": "2581911f5ce23bd157d52ff3110839b1d9d50837", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/underscore-lifetime-elison-mismatch.rs:1:49\n+  --> $DIR/underscore-lifetime-elison-mismatch.rs:5:49\n    |\n LL | fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n    |                    ------      ------           ^ ...but data from `y` flows into `x` here", "previous_filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.stderr"}, {"sha": "8e10242cb1331ae08dbb46b8cbff7f69b8d9351c", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/underscore-lifetime-elison-mismatch.rs:1:42\n+  --> $DIR/underscore-lifetime-elison-mismatch.rs:5:42\n    |\n LL | fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n    |                    -           -         ^^^^^^^^^ argument requires that `'1` must outlive `'2`"}, {"sha": "6d495138da9e3d24f745b2964562915cc5fef5d5", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,3 +1,9 @@\n-fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); } //~ ERROR lifetime mismatch\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n+fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n+//[base]~^ ERROR lifetime mismatch\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n fn main() {}"}, {"sha": "c8ace0848719ba737332b04bcb98ba95c21ee503", "filename": "src/test/ui/variance/variance-associated-types2.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-associated-types2.rs:13:42\n+  --> $DIR/variance-associated-types2.rs:17:42\n    |\n LL |     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n    |                                          ^^^^^^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Foo<Bar = &'a u32>`\n               found trait object `dyn Foo<Bar = &'static u32>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/variance-associated-types2.rs:12:9\n+  --> $DIR/variance-associated-types2.rs:16:9\n    |\n LL | fn take<'a>(_: &'a u32) {\n    |         ^^", "previous_filename": "src/test/ui/variance/variance-associated-types2.stderr"}, {"sha": "b74c400969237f570c1d9c95662af321f2284856", "filename": "src/test/ui/variance/variance-associated-types2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-associated-types2.rs:13:12\n+  --> $DIR/variance-associated-types2.rs:17:12\n    |\n LL | fn take<'a>(_: &'a u32) {\n    |         -- lifetime `'a` defined here"}, {"sha": "e3c8e6d7ca242bd6ca9b0ae96bf1d2d93a5c949e", "filename": "src/test/ui/variance/variance-associated-types2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,6 +1,10 @@\n // Test that dyn Foo<Bar = T> is invariant with respect to T.\n // Failure to enforce invariance here can be weaponized, see #71550 for details.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {\n     type Bar;\n }\n@@ -11,7 +15,8 @@ fn make() -> Box<dyn Foo<Bar = &'static u32>> {\n \n fn take<'a>(_: &'a u32) {\n     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n-    //~^ ERROR mismatched types [E0308]\n+    //[base]~^ ERROR mismatched types [E0308]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "5b78f4252b3ddc914ef46ec5714e050cdc0d7c60", "filename": "src/test/ui/variance/variance-btree-invariant-types.base.stderr", "status": "renamed", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,238 +1,238 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:4:5\n+  --> $DIR/variance-btree-invariant-types.rs:8:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, &'new (), _>`\n               found struct `std::collections::btree_map::IterMut<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:3:21\n+  --> $DIR/variance-btree-invariant-types.rs:7:21\n    |\n LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n    |                     ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:7:5\n+  --> $DIR/variance-btree-invariant-types.rs:13:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:6:21\n+  --> $DIR/variance-btree-invariant-types.rs:12:21\n    |\n LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n    |                     ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:10:5\n+  --> $DIR/variance-btree-invariant-types.rs:18:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, &'static (), _>`\n               found struct `std::collections::btree_map::IterMut<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:9:24\n+  --> $DIR/variance-btree-invariant-types.rs:17:24\n    |\n LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n    |                        ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:13:5\n+  --> $DIR/variance-btree-invariant-types.rs:23:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:12:24\n+  --> $DIR/variance-btree-invariant-types.rs:22:24\n    |\n LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n    |                        ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:17:5\n+  --> $DIR/variance-btree-invariant-types.rs:29:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, &'new (), _>`\n               found struct `RangeMut<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:16:22\n+  --> $DIR/variance-btree-invariant-types.rs:28:22\n    |\n LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n    |                      ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:20:5\n+  --> $DIR/variance-btree-invariant-types.rs:34:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, _, &'new ()>`\n               found struct `RangeMut<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:19:22\n+  --> $DIR/variance-btree-invariant-types.rs:33:22\n    |\n LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n    |                      ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:23:5\n+  --> $DIR/variance-btree-invariant-types.rs:39:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, &'static (), _>`\n               found struct `RangeMut<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:22:25\n+  --> $DIR/variance-btree-invariant-types.rs:38:25\n    |\n LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n    |                         ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:26:5\n+  --> $DIR/variance-btree-invariant-types.rs:44:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, _, &'static ()>`\n               found struct `RangeMut<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:25:25\n+  --> $DIR/variance-btree-invariant-types.rs:43:25\n    |\n LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n    |                         ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:31:5\n+  --> $DIR/variance-btree-invariant-types.rs:51:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:29:20\n+  --> $DIR/variance-btree-invariant-types.rs:49:20\n    |\n LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:35:5\n+  --> $DIR/variance-btree-invariant-types.rs:57:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:33:20\n+  --> $DIR/variance-btree-invariant-types.rs:55:20\n    |\n LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:39:5\n+  --> $DIR/variance-btree-invariant-types.rs:63:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:37:23\n+  --> $DIR/variance-btree-invariant-types.rs:61:23\n    |\n LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:43:5\n+  --> $DIR/variance-btree-invariant-types.rs:69:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:41:23\n+  --> $DIR/variance-btree-invariant-types.rs:67:23\n    |\n LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:48:5\n+  --> $DIR/variance-btree-invariant-types.rs:76:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n               found struct `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:46:20\n+  --> $DIR/variance-btree-invariant-types.rs:74:20\n    |\n LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:52:5\n+  --> $DIR/variance-btree-invariant-types.rs:82:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:50:20\n+  --> $DIR/variance-btree-invariant-types.rs:80:20\n    |\n LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:56:5\n+  --> $DIR/variance-btree-invariant-types.rs:88:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n               found struct `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:54:23\n+  --> $DIR/variance-btree-invariant-types.rs:86:23\n    |\n LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:60:5\n+  --> $DIR/variance-btree-invariant-types.rs:94:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:58:23\n+  --> $DIR/variance-btree-invariant-types.rs:92:23\n    |\n LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n    |                       ^^^^", "previous_filename": "src/test/ui/variance/variance-btree-invariant-types.stderr"}, {"sha": "991a7b0cdf078e43e312576dd8fbe59754e53536", "filename": "src/test/ui/variance/variance-btree-invariant-types.nll.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:4:5\n+  --> $DIR/variance-btree-invariant-types.rs:8:5\n    |\n LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n    |                     ---- lifetime `'new` defined here\n@@ -11,7 +11,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:7:5\n+  --> $DIR/variance-btree-invariant-types.rs:13:5\n    |\n LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n    |                     ---- lifetime `'new` defined here\n@@ -23,7 +23,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:10:5\n+  --> $DIR/variance-btree-invariant-types.rs:18:5\n    |\n LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n    |                        ---- lifetime `'new` defined here\n@@ -35,7 +35,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:13:5\n+  --> $DIR/variance-btree-invariant-types.rs:23:5\n    |\n LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n    |                        ---- lifetime `'new` defined here\n@@ -47,7 +47,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:17:5\n+  --> $DIR/variance-btree-invariant-types.rs:29:5\n    |\n LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n    |                      ---- lifetime `'new` defined here\n@@ -59,7 +59,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:20:5\n+  --> $DIR/variance-btree-invariant-types.rs:34:5\n    |\n LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n    |                      ---- lifetime `'new` defined here\n@@ -71,7 +71,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:23:5\n+  --> $DIR/variance-btree-invariant-types.rs:39:5\n    |\n LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n    |                         ---- lifetime `'new` defined here\n@@ -83,7 +83,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:26:5\n+  --> $DIR/variance-btree-invariant-types.rs:44:5\n    |\n LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n    |                         ---- lifetime `'new` defined here\n@@ -95,7 +95,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:31:5\n+  --> $DIR/variance-btree-invariant-types.rs:51:5\n    |\n LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -108,7 +108,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:35:5\n+  --> $DIR/variance-btree-invariant-types.rs:57:5\n    |\n LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -121,7 +121,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:39:5\n+  --> $DIR/variance-btree-invariant-types.rs:63:5\n    |\n LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -134,7 +134,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:43:5\n+  --> $DIR/variance-btree-invariant-types.rs:69:5\n    |\n LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -147,7 +147,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:48:5\n+  --> $DIR/variance-btree-invariant-types.rs:76:5\n    |\n LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -160,7 +160,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:52:5\n+  --> $DIR/variance-btree-invariant-types.rs:82:5\n    |\n LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -173,7 +173,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:56:5\n+  --> $DIR/variance-btree-invariant-types.rs:88:5\n    |\n LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -186,7 +186,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:60:5\n+  --> $DIR/variance-btree-invariant-types.rs:94:5\n    |\n LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n    |                       ---- lifetime `'new` defined here"}, {"sha": "7ddf6b294a5a19221c1c6f8d04f4b717ec677316", "filename": "src/test/ui/variance/variance-btree-invariant-types.rs", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,63 +1,99 @@\n use std::collections::btree_map::{IterMut, OccupiedEntry, RangeMut, VacantEntry};\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n                          -> OccupiedEntry<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n                          -> OccupiedEntry<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n                             -> OccupiedEntry<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n                             -> OccupiedEntry<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n                          -> VacantEntry<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n                          -> VacantEntry<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n                             -> VacantEntry<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n                             -> VacantEntry<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n "}, {"sha": "e3180b6d984765246735070b4a71b4fb7a58e05b", "filename": "src/test/ui/variance/variance-cell-is-invariant.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/variance-cell-is-invariant.rs:14:25\n+  --> $DIR/variance-cell-is-invariant.rs:18:25\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |                          ----------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/variance/variance-cell-is-invariant.stderr"}, {"sha": "c2e93d99c43f04a5509026dc679e4331a2bf4cfa", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-cell-is-invariant.rs:14:12\n+  --> $DIR/variance-cell-is-invariant.rs:18:12\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |         ------ ----- lifetime `'long` defined here"}, {"sha": "b8b73147d0eea58d5fa06e70b363acbbf75d01ae", "filename": "src/test/ui/variance/variance-cell-is-invariant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,6 +1,10 @@\n // Test that Cell is considered invariant with respect to its\n // type.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::cell::Cell;\n \n struct Foo<'a> {\n@@ -11,7 +15,9 @@ fn use_<'short,'long>(c: Foo<'short>,\n                       s: &'short isize,\n                       l: &'long isize,\n                       _where:Option<&'short &'long ()>) {\n-    let _: Foo<'long> = c; //~ ERROR E0623\n+    let _: Foo<'long> = c;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "19b8b9d5aa05cf586329f275587a90b170bfc6ea", "filename": "src/test/ui/variance/variance-contravariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-object.rs:14:5\n+  --> $DIR/variance-contravariant-arg-object.rs:18:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-object.rs:10:21\n+  --> $DIR/variance-contravariant-arg-object.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-object.rs:10:27\n+  --> $DIR/variance-contravariant-arg-object.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-object.rs:22:5\n+  --> $DIR/variance-contravariant-arg-object.rs:28:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-object.rs:17:21\n+  --> $DIR/variance-contravariant-arg-object.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-object.rs:17:27\n+  --> $DIR/variance-contravariant-arg-object.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-arg-object.stderr"}, {"sha": "4071a41703e2820f97a0f1ba0d3af33adbd2980c", "filename": "src/test/ui/variance/variance-contravariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-object.rs:14:5\n+  --> $DIR/variance-contravariant-arg-object.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-object.rs:22:5\n+  --> $DIR/variance-contravariant-arg-object.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "dab42c35218bf6168392d888261404620eb01e9f", "filename": "src/test/ui/variance/variance-contravariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self, t: T);\n }\n@@ -11,15 +15,19 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n                                 -> Box<dyn Get<&'min i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n     // Previously OK:\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "56cf84590107c60a876fc76146ae639002369d8b", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:17:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:10:21\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:10:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:21:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:27:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:16:21\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:22:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:16:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:22:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.stderr"}, {"sha": "6ca8f5ed4cce6581f2863e93628fa651fe8d9f80", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:17:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:21:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:27:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "11513d5411cfba8f8d269fe9ae16239725d33356", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -3,22 +3,30 @@\n // Test that even when `T` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self, t: T);\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n     // Previously OK, but now an error because traits are invariant:\n \n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "2ccab2ee5f089df76f129514d52b62b0e078ea33", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:17:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:10:21\n+  --> $DIR/variance-contravariant-self-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-self-trait-match.rs:10:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:22:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:28:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:16:21\n+  --> $DIR/variance-contravariant-self-trait-match.rs:22:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-self-trait-match.rs:16:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:22:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-self-trait-match.stderr"}, {"sha": "d2c549b1f715daa85c5c18657f188f32597836a7", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-self-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:17:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-self-trait-match.rs:22:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "f8d7c68fafe73a13d8418940b59abfce4c7d3807", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -3,14 +3,20 @@\n // Test that even when `Self` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get(&self);\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'max G : Get\n {\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n@@ -19,7 +25,9 @@ fn get_max_from_min<'min, 'max, G>()\n     // Previously OK, but now error because traits are invariant with\n     // respect to all inputs.\n \n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "3a97875fe0ec07433301a0256c40e69bc8bf0d31", "filename": "src/test/ui/variance/variance-covariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-object.rs:11:5\n+  --> $DIR/variance-covariant-arg-object.rs:19:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-object.rs:7:21\n+  --> $DIR/variance-covariant-arg-object.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-object.rs:7:27\n+  --> $DIR/variance-covariant-arg-object.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-object.rs:18:5\n+  --> $DIR/variance-covariant-arg-object.rs:28:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-object.rs:14:21\n+  --> $DIR/variance-covariant-arg-object.rs:24:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-object.rs:14:27\n+  --> $DIR/variance-covariant-arg-object.rs:24:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-arg-object.stderr"}, {"sha": "1b2ec61825f8f75001f799c946996464bd1d3c13", "filename": "src/test/ui/variance/variance-covariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-object.rs:15:5\n+  --> $DIR/variance-covariant-arg-object.rs:19:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-object.rs:22:5\n+  --> $DIR/variance-covariant-arg-object.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "20f74a3987e126c3ae36c22f66792f817367f532", "filename": "src/test/ui/variance/variance-covariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self) -> T;\n }\n@@ -12,14 +16,18 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n     where 'max : 'min\n {\n     // Previously OK, now an error as traits are invariant.\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "1749a871230cffca3e49b01e8f9883f3815d6b93", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:10:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:18:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:7:21\n+  --> $DIR/variance-covariant-arg-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-trait-match.rs:7:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:16:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:26:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:13:21\n+  --> $DIR/variance-covariant-arg-trait-match.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-trait-match.rs:13:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-arg-trait-match.stderr"}, {"sha": "870af48b3e92ac8961af73950d3ffb5b84ac4870", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-trait-match.rs:14:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-trait-match.rs:20:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:26:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "d3d66d3fc4ba13820d203628bcacd6ddf23f7102", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self) -> T;\n }\n@@ -11,13 +15,17 @@ fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n     // Previously OK, now an error as traits are invariant.\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "94afc010e2134d9fe1440726162866bbc5b361bb", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:14:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:18:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-self-trait-match.rs:10:21\n+  --> $DIR/variance-covariant-self-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-self-trait-match.rs:10:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:20:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:26:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-self-trait-match.rs:17:21\n+  --> $DIR/variance-covariant-self-trait-match.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-self-trait-match.rs:17:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-self-trait-match.stderr"}, {"sha": "14da2d2a552dbdce957cd08a21a5ca68f09d0d60", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-self-trait-match.rs:14:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-self-trait-match.rs:20:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:26:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "ece450173ca8d553750608cdf4171124db494ec8", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `Self` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get() -> Self;\n }\n@@ -11,13 +15,17 @@ fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'max G : Get\n {\n     // Previously OK, now an error as traits are invariant.\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'min G : Get\n {\n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "ec9271e902fed39a490aaba39673b230a5cbc531", "filename": "src/test/ui/variance/variance-invariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-object.rs:15:5\n+  --> $DIR/variance-invariant-arg-object.rs:15:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-object.rs:10:21\n+  --> $DIR/variance-invariant-arg-object.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-object.rs:10:27\n+  --> $DIR/variance-invariant-arg-object.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-object.rs:22:5\n+  --> $DIR/variance-invariant-arg-object.rs:24:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-object.rs:18:21\n+  --> $DIR/variance-invariant-arg-object.rs:20:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-object.rs:18:27\n+  --> $DIR/variance-invariant-arg-object.rs:20:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-arg-object.stderr"}, {"sha": "47364f426566346eac6e67feb313e83da291616d", "filename": "src/test/ui/variance/variance-invariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-object.rs:11:5\n+  --> $DIR/variance-invariant-arg-object.rs:15:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-object.rs:18:5\n+  --> $DIR/variance-invariant-arg-object.rs:24:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "cc8820fbac69e97b79edda9118611cb8e36a638f", "filename": "src/test/ui/variance/variance-invariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,9 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self, t: T) -> T;\n }\n@@ -8,14 +12,18 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n                                 -> Box<dyn Get<&'min i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "fe284682153992c19a35c7f2f82f52e288e62877", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:14:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:14:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:10:21\n+  --> $DIR/variance-invariant-arg-trait-match.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-trait-match.rs:10:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:20:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:22:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:17:21\n+  --> $DIR/variance-invariant-arg-trait-match.rs:19:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-trait-match.rs:17:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:19:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-arg-trait-match.stderr"}, {"sha": "74d2745cbbea8916179030ba2b67e77d57a0f311", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-trait-match.rs:10:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:14:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-trait-match.rs:16:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:22:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "498dd574bb38148374711d60a846440372fdac2e", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,19 +1,27 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self, t: T) -> T;\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "a2589f0ceee9b0b99ae1c9f5c2d139d8857bb7fa", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:10:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:14:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-self-trait-match.rs:7:21\n+  --> $DIR/variance-invariant-self-trait-match.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-self-trait-match.rs:7:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:16:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:22:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-self-trait-match.rs:13:21\n+  --> $DIR/variance-invariant-self-trait-match.rs:19:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-self-trait-match.rs:13:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:19:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-self-trait-match.stderr"}, {"sha": "9d16e89450d786ff7189e40e5f443ad9a8ded6c9", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-self-trait-match.rs:10:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:14:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-self-trait-match.rs:16:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:22:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "0f3176b14b44d1f3fae2cdf1ca4d84a859bbafef", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,19 +1,27 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get(&self) -> Self;\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, &'max G : Get, G : 'max\n {\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, &'min G : Get, G : 'min\n {\n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "8872620e38aef5eabca37363bce90ba13446c45c", "filename": "src/test/ui/variance/variance-trait-matching.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `get`\n-  --> $DIR/variance-trait-matching.rs:24:5\n+  --> $DIR/variance-trait-matching.rs:28:5\n    |\n LL | fn get<'a, G>(get: &G) -> i32\n    |                    -- help: add explicit lifetime `'a` to the type of `get`: `&'a G`", "previous_filename": "src/test/ui/variance/variance-trait-matching.stderr"}, {"sha": "52c5eed3167cd31aa46eb06f5bdec680700e9b4d", "filename": "src/test/ui/variance/variance-trait-matching.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `get`\n-  --> $DIR/variance-trait-matching.rs:24:5\n+  --> $DIR/variance-trait-matching.rs:28:5\n    |\n LL | fn get<'a, G>(get: &G) -> i32\n    |                    -- help: add explicit lifetime `'a` to the type of `get`: `&'a G`"}, {"sha": "993db93533e2746eefc83b41475b8b92703e6c27", "filename": "src/test/ui/variance/variance-trait-matching.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,9 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Get<T> is covariant in T\n trait Get<T> {\n     fn get(&self) -> T;"}, {"sha": "a354aa52b5c7e36786a31d1f45474f71f7226e60", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-contravariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-contravariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'min ()>`\n               found struct `SomeStruct<&'max ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-contravariant-struct-1.rs:8:8\n+  --> $DIR/variance-use-contravariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-contravariant-struct-1.rs:8:13\n+  --> $DIR/variance-use-contravariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-contravariant-struct-1.stderr"}, {"sha": "9549a8c08af615cac99b894268b123cb671d9dff", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-contravariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-contravariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "b55f5e76775ef4330c8ea8bec1ef4aaf8e193477", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,15 +1,19 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n struct SomeStruct<T>(fn(T));\n \n fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n                   -> SomeStruct<&'min ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "542d44c27093db4236f67d3bd960dc883a786820", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-covariant-struct-1.rs:10:5\n+  --> $DIR/variance-use-covariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'max ()>`\n               found struct `SomeStruct<&'min ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-covariant-struct-1.rs:6:8\n+  --> $DIR/variance-use-covariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-covariant-struct-1.rs:6:13\n+  --> $DIR/variance-use-covariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-covariant-struct-1.stderr"}, {"sha": "2fac827a0fb1f68ea00a52712dac982c989c1e97", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-covariant-struct-1.rs:10:5\n+  --> $DIR/variance-use-covariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "3e3e76d9792c29f88ab2ab06ff5d3134eba934a8", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,13 +1,19 @@\n // Test that a covariant struct does not permit the lifetime of a\n // reference to be enlarged.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct SomeStruct<T>(T);\n \n fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n                   -> SomeStruct<&'max ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "02b4e91f781e5cbf579e24e06cedbd4ed4eec8ab", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-invariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'min ()>`\n               found struct `SomeStruct<&'max ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-invariant-struct-1.rs:8:8\n+  --> $DIR/variance-use-invariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-invariant-struct-1.rs:8:13\n+  --> $DIR/variance-use-invariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |             ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-use-invariant-struct-1.rs:19:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:23:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'max ()>`\n               found struct `SomeStruct<&'min ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-invariant-struct-1.rs:15:8\n+  --> $DIR/variance-use-invariant-struct-1.rs:19:8\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-invariant-struct-1.rs:15:13\n+  --> $DIR/variance-use-invariant-struct-1.rs:19:13\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-invariant-struct-1.stderr"}, {"sha": "e8460a388fcabae0f4ab835c83a93f2b990a8296", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-invariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ---- ---- lifetime `'max` defined here\n@@ -15,7 +15,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-use-invariant-struct-1.rs:19:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:23:5\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "7be03514e01a9bbb20ae3dfb88bb476a7b3a0ba6", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,22 +1,28 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n struct SomeStruct<T>(*mut T);\n \n fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n                   -> SomeStruct<&'min ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n                   -> SomeStruct<&'max ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "186ab2790a3983a887390c1f251f67734ce426c1", "filename": "src/test/ui/wf/wf-static-method.base.stderr", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,131 +1,131 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/wf-static-method.rs:17:9\n+  --> $DIR/wf-static-method.rs:21:9\n    |\n LL |         u\n    |         ^\n    |\n note: ...the reference is valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:14:6\n+  --> $DIR/wf-static-method.rs:18:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      ^^\n note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:14:10\n+  --> $DIR/wf-static-method.rs:18:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |          ^^\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/wf-static-method.rs:26:18\n+  --> $DIR/wf-static-method.rs:32:18\n    |\n LL |         let me = Self::make_me();\n    |                  ^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:23:10\n+  --> $DIR/wf-static-method.rs:29:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |          ^^\n note: but lifetime parameter must outlive the lifetime `'a` as defined here\n-  --> $DIR/wf-static-method.rs:23:6\n+  --> $DIR/wf-static-method.rs:29:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |      ^^\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/wf-static-method.rs:33:9\n+  --> $DIR/wf-static-method.rs:41:9\n    |\n LL |         u\n    |         ^\n    |\n note: ...the reference is valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:31:6\n+  --> $DIR/wf-static-method.rs:39:6\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      ^^\n note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:31:10\n+  --> $DIR/wf-static-method.rs:39:10\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |          ^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL |     <()>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:40:13\n+  --> $DIR/wf-static-method.rs:50:13\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |             ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:41:23\n+  --> $DIR/wf-static-method.rs:51:23\n    |\n LL |     <()>::static_evil(b)\n    |                       ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:40:9\n+  --> $DIR/wf-static-method.rs:50:9\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |         ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL |     <()>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:44:22\n+  --> $DIR/wf-static-method.rs:56:22\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                      ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:45:33\n+  --> $DIR/wf-static-method.rs:57:33\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |                                 ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:44:18\n+  --> $DIR/wf-static-method.rs:56:18\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL |     <Evil>::inherent_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:49:22\n+  --> $DIR/wf-static-method.rs:62:22\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                      ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:50:27\n+  --> $DIR/wf-static-method.rs:63:27\n    |\n LL |     <Evil>::inherent_evil(b)\n    |                           ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:49:18\n+  --> $DIR/wf-static-method.rs:62:18\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL |     <Evil>::inherent_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/wf/wf-static-method.stderr"}, {"sha": "7556d8e694d5a26ae981bc86956dff4e32719e44", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:17:9\n+  --> $DIR/wf-static-method.rs:21:9\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |         u\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:26:18\n+  --> $DIR/wf-static-method.rs:32:18\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |      --  -- lifetime `'b` defined here\n@@ -25,7 +25,7 @@ LL |         let me = Self::make_me();\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:33:9\n+  --> $DIR/wf-static-method.rs:41:9\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      --  -- lifetime `'b` defined here\n@@ -38,7 +38,7 @@ LL |         u\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |         --  -- lifetime `'b` defined here\n@@ -50,7 +50,7 @@ LL |     <()>::static_evil(b)\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  --  -- lifetime `'b` defined here\n@@ -62,7 +62,7 @@ LL |     <IndirectEvil>::static_evil(b)\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  --  -- lifetime `'b` defined here"}, {"sha": "83557ce667bf6964bee0f7155d75700c107164af", "filename": "src/test/ui/wf/wf-static-method.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -4,6 +4,10 @@\n // static inherent methods isn't quite working - need to\n // fix that before removing the check.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a, 'b, T>: Sized {\n     fn make_me() -> Self { loop {} }\n     fn static_evil(u: &'b u32) -> &'a u32;\n@@ -14,7 +18,9 @@ struct Evil<'a, 'b: 'a>(Option<&'a &'b ()>);\n impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n     fn make_me() -> Self { }\n     fn static_evil(u: &'b u32) -> &'a u32 {\n-        u //~ ERROR E0312\n+        u\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n \n@@ -23,32 +29,40 @@ struct IndirectEvil<'a, 'b: 'a>(Option<&'a &'b ()>);\n impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n     fn make_me() -> Self { IndirectEvil(None) }\n     fn static_evil(u: &'b u32) -> &'a u32 {\n-        let me = Self::make_me(); //~ ERROR lifetime bound not satisfied\n+        let me = Self::make_me();\n+        //[base]~^ ERROR lifetime bound not satisfied\n+        //[nll]~^^ ERROR lifetime may not live long enough\n         loop {} // (`me` could be used for the lifetime transmute).\n     }\n }\n \n impl<'a, 'b> Evil<'a, 'b> {\n     fn inherent_evil(u: &'b u32) -> &'a u32 {\n-        u //~ ERROR E0312\n+        u\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n \n // while static methods don't get to *assume* this, we still\n // *check* that they hold.\n \n fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n-    <()>::static_evil(b) //~ ERROR cannot infer an appropriate lifetime\n+    <()>::static_evil(b)\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n     <IndirectEvil>::static_evil(b)\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n     <Evil>::inherent_evil(b)\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "c09610cd696828892fe77b282da75a457dab73e1", "filename": "src/test/ui/where-clauses/where-for-self-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Bar` is not general enough\n-  --> $DIR/where-for-self-2.rs:23:5\n+  --> $DIR/where-for-self-2.rs:27:5\n    |\n LL |     foo(&X);\n    |     ^^^ implementation of `Bar` is not general enough", "previous_filename": "src/test/ui/where-clauses/where-for-self-2.stderr"}, {"sha": "92d1b2121a6b254c90a535efdf8cecc269deaeed", "filename": "src/test/ui/where-clauses/where-for-self-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Bar` is not general enough\n-  --> $DIR/where-for-self-2.rs:23:5\n+  --> $DIR/where-for-self-2.rs:27:5\n    |\n LL |     foo(&X);\n    |     ^^^^^^^ implementation of `Bar` is not general enough"}, {"sha": "4e4e0ec912ea1f43f350011d97093c7a16daa58c", "filename": "src/test/ui/where-clauses/where-for-self-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -3,6 +3,10 @@\n // specific lifetime is not enough to satisfy the `for<'a> ...` constraint, which\n // should require *all* lifetimes.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n static X: &'static u32 = &42;\n \n trait Bar {"}, {"sha": "46d7ee68f26285db26b2640f2c07d6332380c756", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "patch": "@@ -1 +1 @@\n-Subproject commit bc08b8eff3f8e4da7c448d7b7f6461938c817a60\n+Subproject commit 46d7ee68f26285db26b2640f2c07d6332380c756"}]}