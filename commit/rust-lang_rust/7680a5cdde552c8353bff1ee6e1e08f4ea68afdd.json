{"sha": "7680a5cdde552c8353bff1ee6e1e08f4ea68afdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ODBhNWNkZGU1NTJjODM1M2JmZjFlZTZlMWUwOGY0ZWE2OGFmZGQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-17T17:10:00Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-17T17:10:06Z"}, "message": "Implement direct calls", "tree": {"sha": "2e1e0918e9794982007c2d9fb8f50b56f393078e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1e0918e9794982007c2d9fb8f50b56f393078e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7680a5cdde552c8353bff1ee6e1e08f4ea68afdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7680a5cdde552c8353bff1ee6e1e08f4ea68afdd", "html_url": "https://github.com/rust-lang/rust/commit/7680a5cdde552c8353bff1ee6e1e08f4ea68afdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7680a5cdde552c8353bff1ee6e1e08f4ea68afdd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "653c67cb6dc03478fad581ed7b55ea58ab2d13a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/653c67cb6dc03478fad581ed7b55ea58ab2d13a3", "html_url": "https://github.com/rust-lang/rust/commit/653c67cb6dc03478fad581ed7b55ea58ab2d13a3"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "484b97b6c186eab48ea2ead455186010c29ef60b", "filename": "example.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7680a5cdde552c8353bff1ee6e1e08f4ea68afdd/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7680a5cdde552c8353bff1ee6e1e08f4ea68afdd/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=7680a5cdde552c8353bff1ee6e1e08f4ea68afdd", "patch": "@@ -35,10 +35,14 @@ fn abc(a: u8) -> u8 {\n     a * 2\n }\n \n-fn bcd(b: bool, a: u8) -> u8 {\n+/*fn bcd(b: bool, a: u8) -> u8 {\n     if b {\n         a * 2\n     } else {\n         a * 3\n     }\n-}\n\\ No newline at end of file\n+}*/\n+\n+fn call() {\n+    abc(42);\n+}"}, {"sha": "03f900318cbfb643dffe2304de8417b3c9157680", "filename": "src/base.rs", "status": "modified", "additions": 62, "deletions": 5, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7680a5cdde552c8353bff1ee6e1e08f4ea68afdd/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7680a5cdde552c8353bff1ee6e1e08f4ea68afdd/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=7680a5cdde552c8353bff1ee6e1e08f4ea68afdd", "patch": "@@ -4,6 +4,7 @@ use rustc_mir::monomorphize::MonoItem;\n use cretonne::prelude::*;\n use cretonne::codegen::ir::{\n     ExternalName,\n+    FuncRef,\n     function::Function,\n };\n \n@@ -32,6 +33,7 @@ impl EntityRef for Variable {\n enum CValue {\n     ByRef(Value),\n     ByVal(Value),\n+    Func(FuncRef),\n }\n \n impl CValue {\n@@ -48,6 +50,10 @@ impl CValue {\n                 ccx.bcx.ins().stack_store(value, stack_slot, 0);\n                 ccx.bcx.ins().stack_addr(types::I64, stack_slot, 0)\n             }\n+            CValue::Func(func) => {\n+                let func = ccx.bcx.ins().func_addr(types::I64, func);\n+                CValue::ByVal(func).force_stack(ccx, ty)\n+            }\n         }\n     }\n \n@@ -58,6 +64,9 @@ impl CValue {\n                 ccx.bcx.ins().load(cton_ty, MemFlags::new(), value, 0)\n             }\n             CValue::ByVal(value) => value,\n+            CValue::Func(func) => {\n+                ccx.bcx.ins().func_addr(types::I64, func)\n+            }\n         }\n     }\n }\n@@ -189,7 +198,7 @@ fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id:\n             TerminatorKind::Return => {\n                 ccx.bcx.ins().return_(&[]);\n             }\n-            TerminatorKind::Assert { cond, expected, msg, target, cleanup } => {\n+            TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n                 let cond_ty = cond.ty(&ccx.mir.local_decls, ccx.tcx);\n                 let cond = trans_operand(ccx, cond).load_value(ccx, cond_ty);\n                 let target = ccx.get_ebb(*target);\n@@ -214,9 +223,41 @@ fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id:\n                 let otherwise_ebb = ccx.get_ebb(targets[targets.len() - 1]);\n                 ccx.bcx.ins().jump(otherwise_ebb, &[]);\n             }\n-            _ => {\n-                unimplemented!();\n+            TerminatorKind::Call { func, args, destination, cleanup: _ } => {\n+                let func = trans_operand(ccx, func);\n+                let return_place = if let Some((place, _)) = destination {\n+                    trans_place(ccx, place)\n+                } else {\n+                    ccx.bcx.ins().iconst(types::I64, 0)\n+                };\n+                let args = Some(return_place)\n+                    .into_iter()\n+                    .chain(\n+                        args\n+                            .into_iter()\n+                            .map(|arg| {\n+                                let ty = arg.ty(&ccx.mir.local_decls, ccx.tcx);\n+                                let arg = trans_operand(ccx, arg);\n+                                arg.force_stack(ccx, ty)\n+                            })\n+                    ).collect::<Vec<_>>();\n+                match func {\n+                    CValue::Func(func) => {\n+                        ccx.bcx.ins().call(func, &args);\n+                    }\n+                    _ => unimplemented!(\"indirect call\"),\n+                }\n+                if let Some((_, dest)) = *destination {\n+                    let ret_ebb = ccx.get_ebb(dest);\n+                    ccx.bcx.ins().jump(ret_ebb, &[]);\n+                } else {\n+                    ccx.bcx.ins().trap(TrapCode::User(!0));\n+                }\n             }\n+            TerminatorKind::Resume | TerminatorKind::Abort | TerminatorKind::Unreachable => {\n+                ccx.bcx.ins().trap(TrapCode::User(!0));\n+            }\n+            terminator => unimplemented!(\"terminator {:?}\", terminator),\n         }\n     }\n \n@@ -291,13 +332,29 @@ fn trans_operand<'a, 'tcx>(ccx: &mut CodegenCtxt<'a, 'tcx>, operand: &Operand<'t\n             match const_.literal {\n                 Literal::Value { value } => {\n                     let layout = ccx.tcx.layout_of(ParamEnv::empty().and(const_.ty)).unwrap();\n-                    let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n                     match const_.ty.sty {\n                         TypeVariants::TyUint(_) => {\n+                            let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n                             let iconst = ccx.bcx.ins().iconst(cton_type_from_ty(const_.ty).unwrap(), bits as u64 as i64);\n                             CValue::ByVal(iconst)\n                         }\n-                        _ => unimplemented!(),\n+                        TypeVariants::TyInt(_) => {\n+                            let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n+                            let iconst = ccx.bcx.ins().iconst(cton_type_from_ty(const_.ty).unwrap(), bits as i128 as i64);\n+                            CValue::ByVal(iconst)\n+                        }\n+                        TypeVariants::TyFnDef(def_id, substs) => {\n+                            let ext_name = ext_name_from_did(def_id);\n+                            let sig = ccx.tcx.fn_sig(def_id);\n+                            let sig = ccx.tcx.subst_and_normalize_erasing_regions(substs, ParamEnv::reveal_all(), &sig);\n+                            let sig = ccx.bcx.import_signature(cton_sig_from_fn_sig(sig.skip_binder()));\n+                            CValue::Func(ccx.bcx.import_function(ExtFuncData {\n+                                name: ext_name,\n+                                signature: sig,\n+                                colocated: false,\n+                            }))\n+                        }\n+                        _ => unimplemented!(\"value {:?} ty {:?}\", value, const_.ty),\n                     }\n                 }\n                 _ => unimplemented!()"}]}