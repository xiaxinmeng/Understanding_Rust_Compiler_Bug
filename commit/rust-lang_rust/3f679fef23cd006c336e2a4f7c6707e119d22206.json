{"sha": "3f679fef23cd006c336e2a4f7c6707e119d22206", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNjc5ZmVmMjNjZDAwNmMzMzZlMmE0ZjdjNjcwN2UxMTlkMjIyMDY=", "commit": {"author": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2020-11-21T04:11:54Z"}, "committer": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2021-01-28T03:27:23Z"}, "message": "Fix rustc sysroot in systems using CAS\n\nChange filesearch::get_or_default_sysroot() to check if sysroot is found\nusing env::args().next() if rustc in argv[0] is a symlink; otherwise, or\nif it is not found, use env::current_exe() to imply sysroot. This makes\nthe rustc binary able to locate Rust libraries in systems using\ncontent-addressable storage (CAS).", "tree": {"sha": "43f60f9b9b2a884e6aab8a53188f170a1d8b79ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43f60f9b9b2a884e6aab8a53188f170a1d8b79ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f679fef23cd006c336e2a4f7c6707e119d22206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f679fef23cd006c336e2a4f7c6707e119d22206", "html_url": "https://github.com/rust-lang/rust/commit/3f679fef23cd006c336e2a4f7c6707e119d22206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f679fef23cd006c336e2a4f7c6707e119d22206/comments", "author": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432d116a5c2565774bae4c42fcacab8b685608b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/432d116a5c2565774bae4c42fcacab8b685608b5", "html_url": "https://github.com/rust-lang/rust/commit/432d116a5c2565774bae4c42fcacab8b685608b5"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "13080c2bcd0def47341c8a220c6b822bf00cfcc6", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3f679fef23cd006c336e2a4f7c6707e119d22206/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f679fef23cd006c336e2a4f7c6707e119d22206/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=3f679fef23cd006c336e2a4f7c6707e119d22206", "patch": "@@ -113,6 +113,8 @@ pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n     sysroot.join(&relative_target_lib_path(sysroot, target_triple))\n }\n \n+// This function checks if sysroot is found using env::args().next(), and if it\n+// is not found, uses env::current_exe() to imply sysroot.\n pub fn get_or_default_sysroot() -> PathBuf {\n     // Follow symlinks.  If the resolved path is relative, make it absolute.\n     fn canonicalize(path: PathBuf) -> PathBuf {\n@@ -123,15 +125,51 @@ pub fn get_or_default_sysroot() -> PathBuf {\n         fix_windows_verbatim_for_gcc(&path)\n     }\n \n-    match env::current_exe() {\n-        Ok(exe) => {\n-            let mut p = canonicalize(exe);\n-            p.pop();\n-            p.pop();\n-            p\n+    // Use env::current_exe() to get the path of the executable following\n+    // symlinks/canonicalizing components.\n+    fn from_current_exe() -> PathBuf {\n+        match env::current_exe() {\n+            Ok(exe) => {\n+                let mut p = canonicalize(exe);\n+                p.pop();\n+                p.pop();\n+                p\n+            }\n+            Err(e) => panic!(\"failed to get current_exe: {}\", e),\n+        }\n+    }\n+\n+    // Use env::args().next() to get the path of the executable without\n+    // following symlinks/canonicalizing any component. This makes the rustc\n+    // binary able to locate Rust libraries in systems using content-addressable\n+    // storage (CAS).\n+    fn from_env_args_next() -> Option<PathBuf> {\n+        match env::args_os().next() {\n+            Some(first_arg) => {\n+                let mut p = PathBuf::from(first_arg);\n+\n+                // Check if sysroot is found using env::args().next() only if the rustc in argv[0]\n+                // is a symlink (see #79253). We might want to change/remove it to conform with\n+                // https://www.gnu.org/prep/standards/standards.html#Finding-Program-Files in the\n+                // future.\n+                if fs::read_link(&p).is_err() {\n+                    // Path is not a symbolic link or does not exist.\n+                    return None;\n+                }\n+\n+                p.pop();\n+                p.pop();\n+                let mut libdir = PathBuf::from(&p);\n+                libdir.push(find_libdir(&p).as_ref());\n+                if libdir.exists() { Some(p) } else { None }\n+            }\n+            None => None,\n         }\n-        Err(e) => panic!(\"failed to get current_exe: {}\", e),\n     }\n+\n+    // Check if sysroot is found using env::args().next(), and if is not found,\n+    // use env::current_exe() to imply sysroot.\n+    from_env_args_next().unwrap_or(from_current_exe())\n }\n \n // The name of the directory rustc expects libraries to be located."}]}