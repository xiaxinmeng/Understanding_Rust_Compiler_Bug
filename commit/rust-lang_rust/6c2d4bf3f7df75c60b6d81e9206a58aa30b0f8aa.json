{"sha": "6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "node_id": "C_kwDOAAsO6NoAKDZjMmQ0YmYzZjdkZjc1YzYwYjZkODFlOTIwNmE1OGFhMzBiMGY4YWE", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-08T03:26:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-08T03:26:09Z"}, "message": "Rollup merge of #87918 - mikebenfield:pr-afdo, r=nikic\n\nEnable AutoFDO.\n\nThis largely involves implementing the options debug-info-for-profiling\nand profile-sample-use and forwarding them on to LLVM.\n\nAutoFDO can be used on x86-64 Linux like this:\nrustc -O -Clink-arg='Wl,--no-rosegment' -Cdebug-info-for-profiling main.rs -o main\nperf record -b ./main\ncreate_llvm_prof --binary=main --out=code.prof\nrustc -O -Cprofile-sample-use=code.prof main.rs -o main2\n\nNow `main2` will have feedback directed optimization applied to it.\n\nThe create_llvm_prof tool can be obtained from this github repository:\nhttps://github.com/google/autofdo\n\nThe option -Clink-arg='Wl,--no-rosegment' is necessary to avoid lld\nputting an extra RO segment before the executable code, which would make\nthe binary silently incompatible with create_llvm_prof.", "tree": {"sha": "9122ce7a4688f24b3c81c09d51b4a49c3c1534f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9122ce7a4688f24b3c81c09d51b4a49c3c1534f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhX7pRCRBK7hj4Ov3rIwAACSAIADqUda55EXG7Fri0OJ6uCtpC\ngbIXNrWAmigxSNkTibYgB5LDZke4NXqmFhe49n5TBKSHHknNo2mj7Z+cLuuQvXa5\nWj192sGbSAgoCyiav5rWu0rLZkUp+N32gpPfthyDy/LVuWT6USWkRr3F3KJk/E2V\nusLgC03MDiC5rn8I0nDNuusB4AjaC3jpUBQaN5vaQZWUTAX1h73e3HJXeRR1dPkG\n4T9ixstYI4d8t+eDCczEThR1tRTfoKxi+TMO3nyi6KRwOfgt8ToFlz4vW9ZUg2t1\nupCvj7gHb4u6y+BLm6T4RBC1uXg+A2+sP9DM+dm5XwF7akoyJlRYFP77B3LJGx4=\n=aJGU\n-----END PGP SIGNATURE-----\n", "payload": "tree 9122ce7a4688f24b3c81c09d51b4a49c3c1534f8\nparent 2ee06e737208ce1bd1c18df5ea3aba733e6ac2a7\nparent a17193dbb931ea0c8b66d82f640385bce8b4929a\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633663569 -0700\ncommitter GitHub <noreply@github.com> 1633663569 -0700\n\nRollup merge of #87918 - mikebenfield:pr-afdo, r=nikic\n\nEnable AutoFDO.\n\nThis largely involves implementing the options debug-info-for-profiling\nand profile-sample-use and forwarding them on to LLVM.\n\nAutoFDO can be used on x86-64 Linux like this:\nrustc -O -Clink-arg='Wl,--no-rosegment' -Cdebug-info-for-profiling main.rs -o main\nperf record -b ./main\ncreate_llvm_prof --binary=main --out=code.prof\nrustc -O -Cprofile-sample-use=code.prof main.rs -o main2\n\nNow `main2` will have feedback directed optimization applied to it.\n\nThe create_llvm_prof tool can be obtained from this github repository:\nhttps://github.com/google/autofdo\n\nThe option -Clink-arg='Wl,--no-rosegment' is necessary to avoid lld\nputting an extra RO segment before the executable code, which would make\nthe binary silently incompatible with create_llvm_prof.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "html_url": "https://github.com/rust-lang/rust/commit/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ee06e737208ce1bd1c18df5ea3aba733e6ac2a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee06e737208ce1bd1c18df5ea3aba733e6ac2a7", "html_url": "https://github.com/rust-lang/rust/commit/2ee06e737208ce1bd1c18df5ea3aba733e6ac2a7"}, {"sha": "a17193dbb931ea0c8b66d82f640385bce8b4929a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17193dbb931ea0c8b66d82f640385bce8b4929a", "html_url": "https://github.com/rust-lang/rust/commit/a17193dbb931ea0c8b66d82f640385bce8b4929a"}], "stats": {"total": 129, "additions": 120, "deletions": 9}, "files": [{"sha": "659cf9ea070b1b6f5811852850e7d770a20c0ee5", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -263,6 +263,10 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n         attributes::emit_uwtable(llfn, true);\n     }\n \n+    if cx.sess().opts.debugging_opts.profile_sample_use.is_some() {\n+        llvm::AddFunctionAttrString(llfn, Function, cstr!(\"use-sample-profile\"));\n+    }\n+\n     // FIXME: none of these three functions interact with source level attributes.\n     set_frame_pointer_type(cx, llfn);\n     set_instrument_function(cx, llfn);"}, {"sha": "ca78254f0c84a3573a5c49d8eb71ae914cab1661", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -370,6 +370,13 @@ fn get_pgo_use_path(config: &ModuleConfig) -> Option<CString> {\n         .map(|path_buf| CString::new(path_buf.to_string_lossy().as_bytes()).unwrap())\n }\n \n+fn get_pgo_sample_use_path(config: &ModuleConfig) -> Option<CString> {\n+    config\n+        .pgo_sample_use\n+        .as_ref()\n+        .map(|path_buf| CString::new(path_buf.to_string_lossy().as_bytes()).unwrap())\n+}\n+\n pub(crate) fn should_use_new_llvm_pass_manager(config: &ModuleConfig) -> bool {\n     // The new pass manager is enabled by default for LLVM >= 13.\n     // This matches Clang, which also enables it since Clang 13.\n@@ -389,6 +396,7 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n     let using_thin_buffers = opt_stage == llvm::OptStage::PreLinkThinLTO || config.bitcode_needed();\n     let pgo_gen_path = get_pgo_gen_path(config);\n     let pgo_use_path = get_pgo_use_path(config);\n+    let pgo_sample_use_path = get_pgo_sample_use_path(config);\n     let is_lto = opt_stage == llvm::OptStage::ThinLTO || opt_stage == llvm::OptStage::FatLTO;\n     // Sanitizer instrumentation is only inserted during the pre-link optimization stage.\n     let sanitizer_options = if !is_lto {\n@@ -439,6 +447,8 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         pgo_use_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n         config.instrument_coverage,\n         config.instrument_gcov,\n+        pgo_sample_use_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n+        config.debug_info_for_profiling,\n         llvm_selfprofiler,\n         selfprofile_before_pass_callback,\n         selfprofile_after_pass_callback,\n@@ -544,6 +554,9 @@ pub(crate) unsafe fn optimize(\n             if config.instrument_coverage {\n                 llvm::LLVMRustAddPass(mpm, find_pass(\"instrprof\").unwrap());\n             }\n+            if config.debug_info_for_profiling {\n+                llvm::LLVMRustAddPass(mpm, find_pass(\"add-discriminators\").unwrap());\n+            }\n \n             add_sanitizer_passes(config, &mut extra_passes);\n \n@@ -1001,6 +1014,7 @@ pub unsafe fn with_llvm_pmb(\n     let inline_threshold = config.inline_threshold;\n     let pgo_gen_path = get_pgo_gen_path(config);\n     let pgo_use_path = get_pgo_use_path(config);\n+    let pgo_sample_use_path = get_pgo_sample_use_path(config);\n \n     llvm::LLVMRustConfigurePassManagerBuilder(\n         builder,\n@@ -1011,6 +1025,7 @@ pub unsafe fn with_llvm_pmb(\n         prepare_for_thin_lto,\n         pgo_gen_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n         pgo_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n+        pgo_sample_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n     );\n \n     llvm::LLVMPassManagerBuilderSetSizeLevel(builder, opt_size as u32);"}, {"sha": "5d437b2a068dfa6fa81b8bdb44fededcbe6b3530", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -2176,6 +2176,7 @@ extern \"C\" {\n         PrepareForThinLTO: bool,\n         PGOGenPath: *const c_char,\n         PGOUsePath: *const c_char,\n+        PGOSampleUsePath: *const c_char,\n     );\n     pub fn LLVMRustAddLibraryInfo(\n         PM: &PassManager<'a>,\n@@ -2210,6 +2211,8 @@ extern \"C\" {\n         PGOUsePath: *const c_char,\n         InstrumentCoverage: bool,\n         InstrumentGCOV: bool,\n+        PGOSampleUsePath: *const c_char,\n+        DebugInfoForProfiling: bool,\n         llvm_selfprofiler: *mut c_void,\n         begin_callback: SelfProfileBeforePassCallback,\n         end_callback: SelfProfileAfterPassCallback,"}, {"sha": "429dc45d6a4c40e4d971c961358506443076d692", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -286,6 +286,9 @@ impl<'a> GccLinker<'a> {\n             config::OptLevel::Aggressive => \"O3\",\n         };\n \n+        if let Some(path) = &self.sess.opts.debugging_opts.profile_sample_use {\n+            self.linker_arg(&format!(\"-plugin-opt=sample-profile={}\", path.display()));\n+        };\n         self.linker_arg(&format!(\"-plugin-opt={}\", opt_level));\n         self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", self.target_cpu));\n     }"}, {"sha": "da34612ce76acb274b996feb2538efb03e49eb92", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -83,6 +83,8 @@ pub struct ModuleConfig {\n \n     pub pgo_gen: SwitchWithOptPath,\n     pub pgo_use: Option<PathBuf>,\n+    pub pgo_sample_use: Option<PathBuf>,\n+    pub debug_info_for_profiling: bool,\n     pub instrument_coverage: bool,\n     pub instrument_gcov: bool,\n \n@@ -176,6 +178,8 @@ impl ModuleConfig {\n                 SwitchWithOptPath::Disabled\n             ),\n             pgo_use: if_regular!(sess.opts.cg.profile_use.clone(), None),\n+            pgo_sample_use: if_regular!(sess.opts.debugging_opts.profile_sample_use.clone(), None),\n+            debug_info_for_profiling: sess.opts.debugging_opts.debug_info_for_profiling,\n             instrument_coverage: if_regular!(sess.instrument_coverage(), false),\n             instrument_gcov: if_regular!(\n                 // compiler_builtins overrides the codegen-units settings,"}, {"sha": "844e5ab56a420e6bd30fe42caffa51d2d0252f81", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -715,6 +715,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(chalk, true);\n     tracked!(codegen_backend, Some(\"abc\".to_string()));\n     tracked!(crate_attr, vec![\"abc\".to_string()]);\n+    tracked!(debug_info_for_profiling, true);\n     tracked!(debug_macros, true);\n     tracked!(dep_info_omit_d_target, true);\n     tracked!(dual_proc_macros, true);\n@@ -752,6 +753,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(profile, true);\n     tracked!(profile_emit, Some(PathBuf::from(\"abc\")));\n     tracked!(profiler_runtime, \"abc\".to_string());\n+    tracked!(profile_sample_use, Some(PathBuf::from(\"abc\")));\n     tracked!(relax_elf_relocations, Some(true));\n     tracked!(relro_level, Some(RelroLevel::Full));\n     tracked!(remap_cwd_prefix, Some(PathBuf::from(\"abc\")));"}, {"sha": "87f423fb2d56eb0b51771bc519d0a6386716b821", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -25,6 +25,7 @@\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n #include \"llvm/Transforms/IPO/FunctionImport.h\"\n+#include \"llvm/Transforms/Utils/AddDiscriminators.h\"\n #include \"llvm/Transforms/Utils/FunctionImportUtils.h\"\n #include \"llvm/LTO/LTO.h\"\n #include \"llvm-c/Transforms/PassManagerBuilder.h\"\n@@ -39,6 +40,7 @@\n #include \"llvm/Transforms/Instrumentation/HWAddressSanitizer.h\"\n #include \"llvm/Transforms/Utils/CanonicalizeAliases.h\"\n #include \"llvm/Transforms/Utils/NameAnonGlobals.h\"\n+#include \"llvm/Transforms/Utils.h\"\n \n using namespace llvm;\n \n@@ -523,21 +525,22 @@ extern \"C\" void LLVMRustDisposeTargetMachine(LLVMTargetMachineRef TM) {\n extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n     bool MergeFunctions, bool SLPVectorize, bool LoopVectorize, bool PrepareForThinLTO,\n-    const char* PGOGenPath, const char* PGOUsePath) {\n+    const char* PGOGenPath, const char* PGOUsePath, const char* PGOSampleUsePath) {\n   unwrap(PMBR)->MergeFunctions = MergeFunctions;\n   unwrap(PMBR)->SLPVectorize = SLPVectorize;\n   unwrap(PMBR)->OptLevel = fromRust(OptLevel);\n   unwrap(PMBR)->LoopVectorize = LoopVectorize;\n   unwrap(PMBR)->PrepareForThinLTO = PrepareForThinLTO;\n \n   if (PGOGenPath) {\n-    assert(!PGOUsePath);\n+    assert(!PGOUsePath && !PGOSampleUsePath);\n     unwrap(PMBR)->EnablePGOInstrGen = true;\n     unwrap(PMBR)->PGOInstrGen = PGOGenPath;\n-  }\n-  if (PGOUsePath) {\n-    assert(!PGOGenPath);\n+  } else if (PGOUsePath) {\n+    assert(!PGOSampleUsePath);\n     unwrap(PMBR)->PGOInstrUse = PGOUsePath;\n+  } else if (PGOSampleUsePath) {\n+    unwrap(PMBR)->PGOSampleUse = PGOSampleUsePath;\n   }\n }\n \n@@ -759,6 +762,7 @@ LLVMRustOptimizeWithNewPassManager(\n     LLVMRustSanitizerOptions *SanitizerOptions,\n     const char *PGOGenPath, const char *PGOUsePath,\n     bool InstrumentCoverage, bool InstrumentGCOV,\n+    const char *PGOSampleUsePath, bool DebugInfoForProfiling,\n     void* LlvmSelfProfiler,\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n     LLVMRustSelfProfileAfterPassCallback AfterPassCallback,\n@@ -797,11 +801,19 @@ LLVMRustOptimizeWithNewPassManager(\n \n   Optional<PGOOptions> PGOOpt;\n   if (PGOGenPath) {\n-    assert(!PGOUsePath);\n-    PGOOpt = PGOOptions(PGOGenPath, \"\", \"\", PGOOptions::IRInstr);\n+    assert(!PGOUsePath && !PGOSampleUsePath);\n+    PGOOpt = PGOOptions(PGOGenPath, \"\", \"\", PGOOptions::IRInstr,\n+                        PGOOptions::NoCSAction, DebugInfoForProfiling);\n   } else if (PGOUsePath) {\n-    assert(!PGOGenPath);\n-    PGOOpt = PGOOptions(PGOUsePath, \"\", \"\", PGOOptions::IRUse);\n+    assert(!PGOSampleUsePath);\n+    PGOOpt = PGOOptions(PGOUsePath, \"\", \"\", PGOOptions::IRUse,\n+                        PGOOptions::NoCSAction, DebugInfoForProfiling);\n+  } else if (PGOSampleUsePath) {\n+    PGOOpt = PGOOptions(PGOSampleUsePath, \"\", \"\", PGOOptions::SampleUse,\n+                        PGOOptions::NoCSAction, DebugInfoForProfiling);\n+  } else if (DebugInfoForProfiling) {\n+    PGOOpt = PGOOptions(\"\", \"\", \"\", PGOOptions::NoAction,\n+                        PGOOptions::NoCSAction, DebugInfoForProfiling);\n   }\n \n #if LLVM_VERSION_GE(12, 0) && !LLVM_VERSION_GE(13,0)"}, {"sha": "ac4bce7350b9079c4530686d496e43bc77c0e4d1", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -2009,6 +2009,15 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n+    if debugging_opts.profile_sample_use.is_some()\n+        && (cg.profile_generate.enabled() || cg.profile_use.is_some())\n+    {\n+        early_error(\n+            error_format,\n+            \"option `-Z profile-sample-use` cannot be used with `-C profile-generate` or `-C profile-use`\",\n+        );\n+    }\n+\n     if debugging_opts.instrument_coverage.is_some()\n         && debugging_opts.instrument_coverage != Some(InstrumentCoverage::Off)\n     {"}, {"sha": "b3d36b396c51cafe80e657ec51e1202831b41af4", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -1040,6 +1040,8 @@ options! {\n         \"combine CGUs into a single one\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n+    debug_info_for_profiling: bool = (false, parse_bool, [TRACKED],\n+        \"emit discriminators and other data necessary for AutoFDO\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],\n         \"emit line numbers debug info inside macros (default: no)\"),\n     deduplicate_diagnostics: bool = (true, parse_bool, [UNTRACKED],\n@@ -1242,6 +1244,8 @@ options! {\n         (default based on relative source path)\"),\n     profiler_runtime: String = (String::from(\"profiler_builtins\"), parse_string, [TRACKED],\n         \"name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\"),\n+    profile_sample_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n+        \"use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"enable queries of the dependency graph for regression testing (default: no)\"),\n     query_stats: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "b6ba6cc1dd659861202d40b14ff8c75dd8fea001", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -1353,6 +1353,16 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         }\n     }\n \n+    // Do the same for sample profile data.\n+    if let Some(ref path) = sess.opts.debugging_opts.profile_sample_use {\n+        if !path.exists() {\n+            sess.err(&format!(\n+                \"File `{}` passed to `-C profile-sample-use` does not exist.\",\n+                path.display()\n+            ));\n+        }\n+    }\n+\n     // Unwind tables cannot be disabled if the target requires them.\n     if let Some(include_uwtables) = sess.opts.cg.force_unwind_tables {\n         if sess.target.requires_uwtable && !include_uwtables {"}, {"sha": "44bd3baeeedfcf0560fae9670d0124d2de7da850", "filename": "src/doc/unstable-book/src/compiler-flags/debug_info_for_profiling.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdebug_info_for_profiling.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdebug_info_for_profiling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdebug_info_for_profiling.md?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -0,0 +1,35 @@\n+# `debug-info-for-profiling\n+\n+---\n+\n+## Introduction\n+\n+Automatic Feedback Directed Optimization (AFDO) is a method for using sampling\n+based profiles to guide optimizations. This is contrasted with other methods of\n+FDO or profile-guided optimization (PGO) which use instrumented profiling.\n+\n+Unlike PGO (controlled by the `rustc` flags `-Cprofile-generate` and\n+`-Cprofile-use`), a binary being profiled does not perform significantly worse,\n+and thus it's possible to profile binaries used in real workflows and not\n+necessary to construct artificial workflows.\n+\n+## Use\n+\n+In order to use AFDO, the target platform must be Linux running on an `x86_64`\n+architecture with the performance profiler `perf` available. In addition, the\n+external tool `create_llvm_prof` from [this repository] must be used.\n+\n+Given a Rust file `main.rs`, we can produce an optimized binary as follows:\n+\n+```shell\n+rustc -O -Zdebug-info-for-profiling main.rs -o main\n+perf record -b ./main\n+create_llvm_prof --binary=main --out=code.prof\n+rustc -O -Zprofile-sample-use=code.prof main.rs -o main2\n+```\n+\n+The `perf` command produces a profile `perf.data`, which is then used by the\n+`create_llvm_prof` command to create `code.prof`. This final profile is then\n+used by `rustc` to guide optimizations in producing the binary `main2`.\n+\n+[this repository]: https://github.com/google/autofdo"}, {"sha": "ce894ce6ac7f1d48a55dea2e01b4da61d5155310", "filename": "src/doc/unstable-book/src/compiler-flags/profile_sample_use.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile_sample_use.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile_sample_use.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile_sample_use.md?ref=6c2d4bf3f7df75c60b6d81e9206a58aa30b0f8aa", "patch": "@@ -0,0 +1,10 @@\n+# `profile-sample-use\n+\n+---\n+\n+`-Zprofile-sample-use=code.prof` directs `rustc` to use the profile\n+`code.prof` as a source for Automatic Feedback Directed Optimization (AFDO).\n+See the documentation of [`-Zdebug-info-for-profiling`] for more information\n+on using AFDO.\n+\n+[`-Zdebug-info-for-profiling`]: debug_info_for_profiling.html"}]}