{"sha": "da0fe80137e59708ca809f1a7e0e89e62e3ffcda", "node_id": "C_kwDOAAsO6NoAKGRhMGZlODAxMzdlNTk3MDhjYTgwOWYxYTdlMGU4OWU2MmUzZmZjZGE", "commit": {"author": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-03-07T12:44:31Z"}, "committer": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-03-22T16:59:41Z"}, "message": "assertion for only collection nll region variable information for debug in non-canonicalization contexts", "tree": {"sha": "f8c84afd2c8afc1c2cb108429e4d5b18bb25f00a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8c84afd2c8afc1c2cb108429e4d5b18bb25f00a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da0fe80137e59708ca809f1a7e0e89e62e3ffcda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da0fe80137e59708ca809f1a7e0e89e62e3ffcda", "html_url": "https://github.com/rust-lang/rust/commit/da0fe80137e59708ca809f1a7e0e89e62e3ffcda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da0fe80137e59708ca809f1a7e0e89e62e3ffcda/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "439292bc7913399e406d9bb7e8da0f70c6317c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/439292bc7913399e406d9bb7e8da0f70c6317c6e", "html_url": "https://github.com/rust-lang/rust/commit/439292bc7913399e406d9bb7e8da0f70c6317c6e"}], "stats": {"total": 73, "additions": 49, "deletions": 24}, "files": [{"sha": "80c7bfaf3964b8c5de38981f025fc3e88b61a5ca", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da0fe80137e59708ca809f1a7e0e89e62e3ffcda/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0fe80137e59708ca809f1a7e0e89e62e3ffcda/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=da0fe80137e59708ca809f1a7e0e89e62e3ffcda", "patch": "@@ -511,16 +511,11 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n             .as_var()\n             .unwrap_or_else(|| bug!(\"expected RegionKind::RegionVar on {:?}\", next_region));\n \n-        if cfg!(debug_assertions) {\n+        if cfg!(debug_assertions) && !self.inside_canonicalization_ctxt() {\n             debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n             let ctxt = get_ctxt_fn();\n             let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n-            let prev = var_to_origin.insert(vid, ctxt);\n-\n-            // This only makes sense if not called in a canonicalization context. If this\n-            // ever changes we either want to get rid of `BorrowckInferContext::reg_var_to_origin`\n-            // or modify how we track nll region vars for that map.\n-            assert!(matches!(prev, None));\n+            var_to_origin.insert(vid, ctxt);\n         }\n \n         next_region\n@@ -540,16 +535,11 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n             .as_var()\n             .unwrap_or_else(|| bug!(\"expected RegionKind::RegionVar on {:?}\", next_region));\n \n-        if cfg!(debug_assertions) {\n+        if cfg!(debug_assertions) && !self.inside_canonicalization_ctxt() {\n             debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n             let ctxt = get_ctxt_fn();\n             let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n-            let prev = var_to_origin.insert(vid, ctxt);\n-\n-            // This only makes sense if not called in a canonicalization context. If this\n-            // ever changes we either want to get rid of `BorrowckInferContext::reg_var_to_origin`\n-            // or modify how we track nll region vars for that map.\n-            assert!(matches!(prev, None));\n+            var_to_origin.insert(vid, ctxt);\n         }\n \n         next_region"}, {"sha": "305e2c8fe8ebbcc539e7d24a00cc7ab414bda503", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da0fe80137e59708ca809f1a7e0e89e62e3ffcda/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0fe80137e59708ca809f1a7e0e89e62e3ffcda/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=da0fe80137e59708ca809f1a7e0e89e62e3ffcda", "patch": "@@ -132,9 +132,12 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n \n         let reg_var =\n             reg.as_var().unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n-        let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n-        let prev = var_to_origin.insert(reg_var, RegionCtxt::Placeholder(reg_info));\n-        assert!(matches!(prev, None));\n+\n+        if cfg!(debug_assertions) && !self.type_checker.infcx.inside_canonicalization_ctxt() {\n+            let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n+            debug!(?reg_var);\n+            var_to_origin.insert(reg_var, RegionCtxt::Placeholder(reg_info));\n+        }\n \n         reg\n     }\n@@ -149,14 +152,9 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         let reg_var =\n             reg.as_var().unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n \n-        if cfg!(debug_assertions) {\n+        if cfg!(debug_assertions) && !self.type_checker.infcx.inside_canonicalization_ctxt() {\n             let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n-            let prev = var_to_origin.insert(reg_var, RegionCtxt::Existential(None));\n-\n-            // It only makes sense to track region vars in non-canonicalization contexts. If this\n-            // ever changes we either want to get rid of `BorrowckInferContext::reg_var_to_origin`\n-            // or modify how we track nll region vars for that map.\n-            assert!(matches!(prev, None));\n+            var_to_origin.insert(reg_var, RegionCtxt::Existential(None));\n         }\n \n         reg"}, {"sha": "d240d8e491fafb3aa3f29920670e71782cb3a85b", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da0fe80137e59708ca809f1a7e0e89e62e3ffcda/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0fe80137e59708ca809f1a7e0e89e62e3ffcda/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=da0fe80137e59708ca809f1a7e0e89e62e3ffcda", "patch": "@@ -30,6 +30,8 @@ use super::*;\n use rustc_middle::ty::relate::{Relate, TypeRelation};\n use rustc_middle::ty::{Const, ImplSubject};\n \n+use std::cell::Cell;\n+\n /// Whether we should define opaque types or just treat them opaquely.\n ///\n /// Currently only used to prevent predicate matching from matching anything\n@@ -82,6 +84,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             in_snapshot: self.in_snapshot.clone(),\n             universe: self.universe.clone(),\n             intercrate: self.intercrate,\n+            inside_canonicalization_ctxt: Cell::new(self.inside_canonicalization_ctxt()),\n         }\n     }\n }"}, {"sha": "96a5f6532fecdadc0aa2a9f1dcbad2de4a60e305", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da0fe80137e59708ca809f1a7e0e89e62e3ffcda/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0fe80137e59708ca809f1a7e0e89e62e3ffcda/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=da0fe80137e59708ca809f1a7e0e89e62e3ffcda", "patch": "@@ -561,6 +561,8 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     where\n         V: TypeFoldable<TyCtxt<'tcx>>,\n     {\n+        let _inside_canonical_ctxt_guard = infcx.set_canonicalization_ctxt();\n+\n         let needs_canonical_flags = if canonicalize_region_mode.any() {\n             TypeFlags::NEEDS_INFER |\n             TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`"}, {"sha": "8f1a1579290a7f0efdee220560cada2856588714", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/da0fe80137e59708ca809f1a7e0e89e62e3ffcda/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da0fe80137e59708ca809f1a7e0e89e62e3ffcda/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=da0fe80137e59708ca809f1a7e0e89e62e3ffcda", "patch": "@@ -39,6 +39,7 @@ use rustc_span::Span;\n \n use std::cell::{Cell, RefCell};\n use std::fmt;\n+use std::ops::Drop;\n \n use self::combine::CombineFields;\n use self::error_reporting::TypeErrCtxt;\n@@ -342,6 +343,11 @@ pub struct InferCtxt<'tcx> {\n     /// there is no type that the user could *actually name* that\n     /// would satisfy it. This avoids crippling inference, basically.\n     pub intercrate: bool,\n+\n+    /// Flag that is set when we enter canonicalization. Used for debugging to ensure\n+    /// that we only collect region information for `BorrowckInferCtxt::reg_var_to_origin`\n+    /// inside non-canonicalization contexts.\n+    inside_canonicalization_ctxt: Cell<bool>,\n }\n \n /// See the `error_reporting` module for more details.\n@@ -633,6 +639,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             skip_leak_check: Cell::new(false),\n             universe: Cell::new(ty::UniverseIndex::ROOT),\n             intercrate,\n+            inside_canonicalization_ctxt: Cell::new(false),\n         }\n     }\n }\n@@ -1728,6 +1735,31 @@ impl<'tcx> InferCtxt<'tcx> {\n             }\n         }\n     }\n+\n+    pub fn inside_canonicalization_ctxt(&self) -> bool {\n+        self.inside_canonicalization_ctxt.get()\n+    }\n+\n+    pub fn set_canonicalization_ctxt(&self) -> CanonicalizationCtxtGuard<'_, 'tcx> {\n+        let prev_ctxt = self.inside_canonicalization_ctxt();\n+        self.inside_canonicalization_ctxt.set(true);\n+        CanonicalizationCtxtGuard { prev_ctxt, infcx: self }\n+    }\n+\n+    fn set_canonicalization_ctxt_to(&self, ctxt: bool) {\n+        self.inside_canonicalization_ctxt.set(ctxt);\n+    }\n+}\n+\n+pub struct CanonicalizationCtxtGuard<'cx, 'tcx> {\n+    prev_ctxt: bool,\n+    infcx: &'cx InferCtxt<'tcx>,\n+}\n+\n+impl<'cx, 'tcx> Drop for CanonicalizationCtxtGuard<'cx, 'tcx> {\n+    fn drop(&mut self) {\n+        self.infcx.set_canonicalization_ctxt_to(self.prev_ctxt)\n+    }\n }\n \n impl<'tcx> TypeErrCtxt<'_, 'tcx> {"}]}