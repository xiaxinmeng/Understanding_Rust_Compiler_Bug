{"sha": "5798fe6e130226cfe0b737bbc5ac8036e759887f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OThmZTZlMTMwMjI2Y2ZlMGI3MzdiYmM1YWM4MDM2ZTc1OTg4N2Y=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-10-13T13:59:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-13T13:59:13Z"}, "message": "Merge pull request #2045 from topecongiro/issue-2044\n\nSimplify multiline case in rewrite_struct_field()", "tree": {"sha": "9755bb76ec5f67d38f7bec0c938d36507859e9f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9755bb76ec5f67d38f7bec0c938d36507859e9f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5798fe6e130226cfe0b737bbc5ac8036e759887f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5798fe6e130226cfe0b737bbc5ac8036e759887f", "html_url": "https://github.com/rust-lang/rust/commit/5798fe6e130226cfe0b737bbc5ac8036e759887f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5798fe6e130226cfe0b737bbc5ac8036e759887f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0950502151c860fa5c305ab256e82d0a27334d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0950502151c860fa5c305ab256e82d0a27334d4c", "html_url": "https://github.com/rust-lang/rust/commit/0950502151c860fa5c305ab256e82d0a27334d4c"}, {"sha": "be9b1b53322aaa4152fd2c1294879a7372ab9424", "url": "https://api.github.com/repos/rust-lang/rust/commits/be9b1b53322aaa4152fd2c1294879a7372ab9424", "html_url": "https://github.com/rust-lang/rust/commit/be9b1b53322aaa4152fd2c1294879a7372ab9424"}], "stats": {"total": 82, "additions": 36, "deletions": 46}, "files": [{"sha": "be22db49fbf1e79a1c30576443262368fcc9793d", "filename": "src/items.rs", "status": "modified", "additions": 14, "deletions": 46, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5798fe6e130226cfe0b737bbc5ac8036e759887f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5798fe6e130226cfe0b737bbc5ac8036e759887f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5798fe6e130226cfe0b737bbc5ac8036e759887f", "patch": "@@ -1362,20 +1362,6 @@ pub fn rewrite_struct_field_prefix(\n     })\n }\n \n-fn rewrite_struct_field_type(\n-    context: &RewriteContext,\n-    last_line_width: usize,\n-    field: &ast::StructField,\n-    spacing: &str,\n-    shape: Shape,\n-) -> Option<String> {\n-    let ty_shape = shape.offset_left(last_line_width + spacing.len())?;\n-    field\n-        .ty\n-        .rewrite(context, ty_shape)\n-        .map(|ty| format!(\"{}{}\", spacing, ty))\n-}\n-\n impl Rewrite for ast::StructField {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         rewrite_struct_field(context, self, shape, 0)\n@@ -1427,44 +1413,26 @@ pub fn rewrite_struct_field(\n     if prefix.is_empty() && !attrs_str.is_empty() && attrs_extendable && spacing.is_empty() {\n         spacing.push(' ');\n     }\n-    let ty_rewritten = rewrite_struct_field_type(context, overhead, field, &spacing, shape);\n-    if let Some(ref ty) = ty_rewritten {\n+    let ty_shape = shape.offset_left(overhead + spacing.len())?;\n+    if let Some(ref ty) = field.ty.rewrite(context, ty_shape) {\n         if !ty.contains('\\n') {\n-            return Some(attr_prefix + ty);\n+            return Some(attr_prefix + &spacing + ty);\n         }\n     }\n \n     // We must use multiline.\n-    let last_line_width = last_line_width(&prefix);\n-    let ty_rewritten = rewrite_struct_field_type(context, last_line_width, field, &spacing, shape);\n-\n-    let type_offset = shape.indent.block_indent(context.config);\n-    let rewrite_type_in_next_line = || {\n-        field\n-            .ty\n-            .rewrite(context, Shape::indented(type_offset, context.config))\n-    };\n+    let new_shape = shape.with_max_width(context.config);\n+    let ty_rewritten = field.ty.rewrite(context, new_shape)?;\n \n-    let field_str = match ty_rewritten {\n-        // If we start from the next line and type fits in a single line, then do so.\n-        Some(ref ty) => match rewrite_type_in_next_line() {\n-            Some(ref new_ty) if !new_ty.contains('\\n') => format!(\n-                \"{}\\n{}{}\",\n-                prefix,\n-                type_offset.to_string(context.config),\n-                &new_ty\n-            ),\n-            _ => prefix + ty,\n-        },\n-        _ => {\n-            let ty = rewrite_type_in_next_line()?;\n-            format!(\n-                \"{}\\n{}{}\",\n-                prefix,\n-                type_offset.to_string(context.config),\n-                &ty\n-            )\n-        }\n+    let field_str = if prefix.is_empty() {\n+        ty_rewritten\n+    } else if prefix.len() + first_line_width(&ty_rewritten) + 1 <= shape.width {\n+        prefix + \" \" + &ty_rewritten\n+    } else {\n+        let type_offset = shape.indent.block_indent(context.config);\n+        let nested_shape = Shape::indented(type_offset, context.config);\n+        let nested_ty = field.ty.rewrite(context, nested_shape)?;\n+        prefix + \"\\n\" + &type_offset.to_string(context.config) + &nested_ty\n     };\n     combine_strs_with_missing_comments(\n         context,"}, {"sha": "b66ed1ed8f181cb117d76072ca207a358a67bf6c", "filename": "tests/source/struct-field-attributes.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5798fe6e130226cfe0b737bbc5ac8036e759887f/tests%2Fsource%2Fstruct-field-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5798fe6e130226cfe0b737bbc5ac8036e759887f/tests%2Fsource%2Fstruct-field-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct-field-attributes.rs?ref=5798fe6e130226cfe0b737bbc5ac8036e759887f", "patch": "@@ -35,3 +35,12 @@ fn new_foo() -> Foo {\n         bar: 0,\n     }\n }\n+\n+// #2044\n+pub enum State {\n+    Closure(#[cfg_attr(feature = \"serde_derive\", serde(state_with = \"::serialization::closure\"))] GcPtr<ClosureData>),\n+}\n+\n+struct Fields(\n+    #[cfg_attr(feature = \"serde_derive\", serde(state_with = \"::base::serialization::shared\"))] Arc<Vec<InternedStr>>,\n+);"}, {"sha": "d9d790c00af029dc4c391c9606fee37385ba10a5", "filename": "tests/target/struct-field-attributes.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5798fe6e130226cfe0b737bbc5ac8036e759887f/tests%2Ftarget%2Fstruct-field-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5798fe6e130226cfe0b737bbc5ac8036e759887f/tests%2Ftarget%2Fstruct-field-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct-field-attributes.rs?ref=5798fe6e130226cfe0b737bbc5ac8036e759887f", "patch": "@@ -33,3 +33,16 @@ fn new_foo() -> Foo {\n         bar: 0,\n     }\n }\n+\n+// #2044\n+pub enum State {\n+    Closure(\n+        #[cfg_attr(feature = \"serde_derive\", serde(state_with = \"::serialization::closure\"))]\n+        GcPtr<ClosureData>,\n+    ),\n+}\n+\n+struct Fields(\n+    #[cfg_attr(feature = \"serde_derive\", serde(state_with = \"::base::serialization::shared\"))]\n+    Arc<Vec<InternedStr>>,\n+);"}]}