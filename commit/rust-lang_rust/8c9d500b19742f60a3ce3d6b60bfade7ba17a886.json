{"sha": "8c9d500b19742f60a3ce3d6b60bfade7ba17a886", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOWQ1MDBiMTk3NDJmNjBhM2NlM2Q2YjYwYmZhZGU3YmExN2E4ODY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-13T09:09:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-13T09:09:47Z"}, "message": "Rollup merge of #45952 - zackmdavis:singular_projection, r=estebank\n\ndeduplicate projection error (E0271) messages\n\nThe `ErrorId` variant takes a u16 so that `DiagnosticMessageId` can retain\nits `Copy` status (the present author's first choice having been the \"EXXX\"\ncode as a string).\n\nThe duplicated \"type mismatch resolving `{}`\" literal is unfortunate, but\nthe `struct_span_err!` macro (which we want to mark that error code as\nused) is fussy about taking a literal, and the one-time-diagnostics set\nneeds an owned string.\n\nThis is concerning #33941 and probably #45805!\n\nr? @estebank", "tree": {"sha": "7fc790990f9290ca3a147073d960d669fe96e057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fc790990f9290ca3a147073d960d669fe96e057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c9d500b19742f60a3ce3d6b60bfade7ba17a886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c9d500b19742f60a3ce3d6b60bfade7ba17a886", "html_url": "https://github.com/rust-lang/rust/commit/8c9d500b19742f60a3ce3d6b60bfade7ba17a886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c9d500b19742f60a3ce3d6b60bfade7ba17a886/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3604737b95ec465a2b0257c13aa79a6e1486511f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3604737b95ec465a2b0257c13aa79a6e1486511f", "html_url": "https://github.com/rust-lang/rust/commit/3604737b95ec465a2b0257c13aa79a6e1486511f"}, {"sha": "5cc488d2500999ef4b934c90f155022b25dcdd19", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc488d2500999ef4b934c90f155022b25dcdd19", "html_url": "https://github.com/rust-lang/rust/commit/5cc488d2500999ef4b934c90f155022b25dcdd19"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "00a91eeb9c18e17b77dff1de17330814506c49e1", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c9d500b19742f60a3ce3d6b60bfade7ba17a886/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9d500b19742f60a3ce3d6b60bfade7ba17a886/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=8c9d500b19742f60a3ce3d6b60bfade7ba17a886", "patch": "@@ -164,11 +164,13 @@ enum DiagnosticBuilderMethod {\n     // add more variants as needed to support one-time diagnostics\n }\n \n-/// Diagnostic message id - used in order to avoid emitting the same message more than once\n+/// Diagnostic message ID\u2014used by `Session.one_time_diagnostics` to avoid\n+/// emitting the same message more than once\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum DiagnosticMessageId {\n+    ErrorId(u16), // EXXXX error code as integer\n     LintId(lint::LintId),\n-    StabilityId(u32)\n+    StabilityId(u32) // issue number\n }\n \n impl Session {"}, {"sha": "106b1b08656f2f40e85aa49b37fee9cb84f17bdf", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c9d500b19742f60a3ce3d6b60bfade7ba17a886/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9d500b19742f60a3ce3d6b60bfade7ba17a886/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8c9d500b19742f60a3ce3d6b60bfade7ba17a886", "patch": "@@ -36,6 +36,7 @@ use middle::const_val;\n use rustc::lint::builtin::EXTRA_REQUIREMENT_IN_IMPL;\n use std::fmt;\n use syntax::ast;\n+use session::DiagnosticMessageId;\n use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n use ty::error::ExpectedFound;\n use ty::fast_reject;\n@@ -219,13 +220,19 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            let mut diag = struct_span_err!(\n-                self.tcx.sess, obligation.cause.span, E0271,\n-                \"type mismatch resolving `{}`\", predicate\n-            );\n-            self.note_type_err(&mut diag, &obligation.cause, None, values, err);\n-            self.note_obligation_cause(&mut diag, obligation);\n-            diag.emit();\n+            let msg = format!(\"type mismatch resolving `{}`\", predicate);\n+            let error_id = (DiagnosticMessageId::ErrorId(271),\n+                            Some(obligation.cause.span), msg.clone());\n+            let fresh = self.tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n+            if fresh {\n+                let mut diag = struct_span_err!(\n+                    self.tcx.sess, obligation.cause.span, E0271,\n+                    \"type mismatch resolving `{}`\", predicate\n+                );\n+                self.note_type_err(&mut diag, &obligation.cause, None, values, err);\n+                self.note_obligation_cause(&mut diag, obligation);\n+                diag.emit();\n+            }\n         });\n     }\n "}, {"sha": "eb111d33b99c2a204fe168a81cabbac475422b68", "filename": "src/test/ui/issue-33941.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8c9d500b19742f60a3ce3d6b60bfade7ba17a886/src%2Ftest%2Fui%2Fissue-33941.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9d500b19742f60a3ce3d6b60bfade7ba17a886/src%2Ftest%2Fui%2Fissue-33941.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-33941.rs?ref=8c9d500b19742f60a3ce3d6b60bfade7ba17a886", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::collections::HashMap;\n+\n+fn main() {\n+    for _ in HashMap::new().iter().cloned() {}\n+}"}, {"sha": "5a8d1fab3f6590867794bc9cdbd0a31dfc7ffd2d", "filename": "src/test/ui/issue-33941.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c9d500b19742f60a3ce3d6b60bfade7ba17a886/src%2Ftest%2Fui%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c9d500b19742f60a3ce3d6b60bfade7ba17a886/src%2Ftest%2Fui%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-33941.stderr?ref=8c9d500b19742f60a3ce3d6b60bfade7ba17a886", "patch": "@@ -0,0 +1,21 @@\n+error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as std::iter::Iterator>::Item == &_`\n+  --> $DIR/issue-33941.rs:14:36\n+   |\n+14 |     for _ in HashMap::new().iter().cloned() {}\n+   |                                    ^^^^^^ expected tuple, found reference\n+   |\n+   = note: expected type `(&_, &_)`\n+              found type `&_`\n+\n+error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as std::iter::Iterator>::Item == &_`\n+  --> $DIR/issue-33941.rs:14:5\n+   |\n+14 |     for _ in HashMap::new().iter().cloned() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n+   |\n+   = note: expected type `(&_, &_)`\n+              found type `&_`\n+   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n+\n+error: aborting due to 2 previous errors\n+"}]}