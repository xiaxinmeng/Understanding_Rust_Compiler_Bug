{"sha": "2c94ad08d8cbd065a3673cee5d894963c33236c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOTRhZDA4ZDhjYmQwNjVhMzY3M2NlZTVkODk0OTYzYzMzMjM2YzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-24T17:20:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-24T17:20:44Z"}, "message": "use helper method to compute size of int type", "tree": {"sha": "85dc2b17e70e8a4bbe4c3a86fd092253f9dcb299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85dc2b17e70e8a4bbe4c3a86fd092253f9dcb299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c94ad08d8cbd065a3673cee5d894963c33236c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c94ad08d8cbd065a3673cee5d894963c33236c0", "html_url": "https://github.com/rust-lang/rust/commit/2c94ad08d8cbd065a3673cee5d894963c33236c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c94ad08d8cbd065a3673cee5d894963c33236c0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6c28f08458e15cead0e80f3b5b7009786bce4a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c28f08458e15cead0e80f3b5b7009786bce4a4", "html_url": "https://github.com/rust-lang/rust/commit/a6c28f08458e15cead0e80f3b5b7009786bce4a4"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "0ea0d57caccc0c169173b730439dc6060077b945", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c94ad08d8cbd065a3673cee5d894963c33236c0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c94ad08d8cbd065a3673cee5d894963c33236c0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2c94ad08d8cbd065a3673cee5d894963c33236c0", "patch": "@@ -10,6 +10,7 @@\n #![allow(incomplete_features)]\n #![feature(const_generics)]\n \n+extern crate rustc_attr;\n extern crate rustc_apfloat;\n extern crate rustc_ast;\n #[macro_use] extern crate rustc_middle;"}, {"sha": "1a8c9163211a8eb991437971ee3ef836bb12bc62", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c94ad08d8cbd065a3673cee5d894963c33236c0/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c94ad08d8cbd065a3673cee5d894963c33236c0/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=2c94ad08d8cbd065a3673cee5d894963c33236c0", "patch": "@@ -1,10 +1,12 @@\n use std::iter;\n use std::convert::TryFrom;\n \n+use rustc_attr as attr;\n use rustc_ast::ast::FloatTy;\n use rustc_middle::{mir, ty};\n+use rustc_middle::ty::layout::IntegerExt;\n use rustc_apfloat::{Float, Round};\n-use rustc_target::abi::{Align, LayoutOf, Size};\n+use rustc_target::abi::{Align, Integer, LayoutOf};\n \n use crate::*;\n use helpers::check_arg_count;\n@@ -563,11 +565,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(match dest_ty.kind {\n             // Unsigned\n             ty::Uint(t) => {\n-                let width = t.bit_width().unwrap_or_else(|| this.pointer_size().bits());\n-                let res = f.to_u128(usize::try_from(width).unwrap());\n+                let size = Integer::from_attr(this, attr::IntType::UnsignedInt(t)).size();\n+                let res = f.to_u128(size.bits_usize());\n                 if res.status.is_empty() {\n                     // No status flags means there was no further rounding or other loss of precision.\n-                    Scalar::from_uint(res.value, Size::from_bits(width))\n+                    Scalar::from_uint(res.value, size)\n                 } else {\n                     // `f` was not representable in this integer type.\n                     throw_ub_format!(\n@@ -578,11 +580,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             // Signed\n             ty::Int(t) => {\n-                let width = t.bit_width().unwrap_or_else(|| this.pointer_size().bits());\n-                let res = f.to_i128(usize::try_from(width).unwrap());\n+                let size = Integer::from_attr(this, attr::IntType::SignedInt(t)).size();\n+                let res = f.to_i128(size.bits_usize());\n                 if res.status.is_empty() {\n                     // No status flags means there was no further rounding or other loss of precision.\n-                    Scalar::from_int(res.value, Size::from_bits(width))\n+                    Scalar::from_int(res.value, size)\n                 } else {\n                     // `f` was not representable in this integer type.\n                     throw_ub_format!("}]}