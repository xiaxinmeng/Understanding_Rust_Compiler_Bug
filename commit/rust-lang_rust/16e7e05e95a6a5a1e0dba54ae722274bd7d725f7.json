{"sha": "16e7e05e95a6a5a1e0dba54ae722274bd7d725f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZTdlMDVlOTVhNmE1YTFlMGRiYTU0YWU3MjIyNzRiZDdkNzI1Zjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-15T11:00:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-15T11:00:13Z"}, "message": "Auto merge of #58575 - mati865:musl_toolchain, r=alexcrichton\n\nMusl host toolchain\n\nBased on https://github.com/rust-lang/rust/pull/55163 and https://github.com/rust-lang/rust/pull/57359\nDepends on https://github.com/rust-lang/rust/pull/55566\n\nCC https://github.com/rust-lang/rust/issues/57439\n\n### How it works\n\nTested compiler made by `dist` on glibc and musl based distributions and verified binaries it produces:\n* Ubuntu (glibc) - installed it as a target for host toolchain and observed no regressions for static (default) linking, dynamic linking apparently requires musl build libgcc so I didn't test it.\n* Alpine (musl) - installed as the host toolchain, by default it links statically (executables are portable and work on glibc distributions) but with `-C target-feature=-crt-static` Rust flag it links dynamically (executables require musl built libraries).\n\n### What's debatable\n\nIt should be decided whether this toolchain should link dynamically or statically when using it on musl distribution. I believe the distributions would prefer dynamic linking but it'd be misleading because `$ARCH-unknown-linux-musl` target links statically on the other hosts.\nAnother problem is using `RUSTFLAGS='-C target-feature=-crt-static'` for dynamic builds which is really uncomfortable.\n\nTo address both issues I suggest leaving `$ARCH-unknown-linux-musl` static for both host and cross target and introducing \"alias triple\" `$ARCH-unknown-linux-dynmusl`. It'd be the same as `$ARCH-unknown-linux-musl` (and use the same libraries to avoid duplication) but it'd link dynamically.\n\n<del>\n### Why it's still WIP (help wanted)\n\nI'm having a hard time getting all tests to pass and I'd appreciate help.\n\nNon-verbose error:\n<details>\n\n```\nTesting proc_macro stage1 (x86_64-unknown-linux-musl -> x86_64-unknown-linux-musl)\n   Compiling proc_macro v0.0.0 (/checkout/src/libproc_macro)\nerror[E0463]: can't find crate for `std`\n\nerror[E0463]: can't find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\n[RUSTC-TIMING] proc_macro test:true 0.529\n[RUSTC-TIMING] proc_macro test:false 0.530\nerror: Could not compile `proc_macro`.\nwarning: build failed, waiting for other jobs to finish...\nerror: Could not compile `proc_macro`.\n\nTo learn more, run the command again with --verbose.\n\ncommand did not execute successfully: \"/checkout/obj/build/x86_64-unknown-linux-gnu/stage0/bin/cargo\" \"test\" \"--target\" \"x86_64-unknown-linux-musl\" \"-j\" \"16\" \"--release\" \"--locked\" \"--manifest-path\" \"/checkout/src/libtest/Cargo.toml\" \"-p\" \"proc_macro\" \"--\"\nexpected success, got: exit code: 101\n\nfailed to run: /checkout/obj/build/bootstrap/debug/bootstrap test --host x86_64-unknown-linux-musl --target x86_64-unknown-linux-musl\n```\n</details>\n\nVerbose error:\n<details>\n\n```\nTesting proc_macro stage1 (x86_64-unknown-linux-musl -> x86_64-unknown-linux-musl)\n   Compiling proc_macro v0.0.0 (/checkout/src/libproc_macro)\n     Running `/checkout/obj/build/bootstrap/debug/rustc --edition=2018 --crate-name proc_macro src/libproc_macro/lib.rs --color never --crate-type lib --emit=dep-info,link -C opt-level=2 -C metadata=09ddd3ecc930ab63 -C extra-filename=-09ddd3ecc930ab63 --out-dir /checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/x86_64-unknown-linux-musl/release/deps --target x86_64-unknown-linux-musl -L dependency=/checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/x86_64-unknown-linux-musl/release/deps -L dependency=/checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/release/deps -C target-feature=-crt-static`\n     Running `/checkout/obj/build/bootstrap/debug/rustc --edition=2018 --crate-name proc_macro src/libproc_macro/lib.rs --color never --emit=dep-info,link -C opt-level=2 --test -C metadata=a564d363930469c8 -C extra-filename=-a564d363930469c8 --out-dir /checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/x86_64-unknown-linux-musl/release/deps --target x86_64-unknown-linux-musl -L dependency=/checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/x86_64-unknown-linux-musl/release/deps -L dependency=/checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/release/deps -C target-feature=-crt-static`\nerror[E0463]: can't find crate for `std`\nerror[E0463]: can't find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\n[RUSTC-TIMING] proc_macro test:false 0.248\nerror: Could not compile `proc_macro`.\n\nCaused by:\n  process didn't exit successfully: `/checkout/obj/build/bootstrap/debug/rustc --edition=2018 --crate-name proc_macro src/libproc_macro/lib.rs --color never --crate-type lib --emit=dep-info,link -C opt-level=2 -C metadata=09ddd3ecc930ab63 -C extra-filename=-09ddd3ecc930ab63 --out-dir /checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/x86_64-unknown-linux-musl/release/deps --target x86_64-unknown-linux-musl -L dependency=/checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/x86_64-unknown-linux-musl/release/deps -L dependency=/checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/release/deps -C target-feature=-crt-static` (exit code: 1)\nwarning: build failed, waiting for other jobs to finish...\n[RUSTC-TIMING] proc_macro test:true 0.248\nerror: Could not compile `proc_macro`.\n\nCaused by:\n  process didn't exit successfully: `/checkout/obj/build/bootstrap/debug/rustc --edition=2018 --crate-name proc_macro src/libproc_macro/lib.rs --color never --emit=dep-info,link -C opt-level=2 --test -C metadata=a564d363930469c8 -C extra-filename=-a564d363930469c8 --out-dir /checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/x86_64-unknown-linux-musl/release/deps --target x86_64-unknown-linux-musl -L dependency=/checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/x86_64-unknown-linux-musl/release/deps -L dependency=/checkout/obj/build/x86_64-unknown-linux-musl/stage1-test/release/deps -C target-feature=-crt-static` (exit code: 1)\n\ncommand did not execute successfully: \"/checkout/obj/build/x86_64-unknown-linux-gnu/stage0/bin/cargo\" \"test\" \"--target\" \"x86_64-unknown-linux-musl\" \"-j\" \"16\" \"--release\" \"--locked\" \"--manifest-path\" \"/checkout/src/libtest/Cargo.toml\" \"--verbose\" \"-p\" \"proc_macro\" \"--\"\nexpected success, got: exit code: 101\n\nfailed to run: /checkout/obj/build/bootstrap/debug/bootstrap test --host x86_64-unknown-linux-musl --target x86_64-unknown-linux-musl\n```\n\n</details>\n\nWhole tests non-verbose output: [rust-tests.log](https://github.com/rust-lang/rust/files/2879945/rust-tests.log)\n\nI think the error is because build system (correctly?) tries to use `obj/build/x86_64-unknown-linux-musl/stage1-test/x86_64-unknown-linux-musl/release/deps` which is empty but `obj/build/x86_64-unknown-linux-gnu/stage1-test/x86_64-unknown-linux-musl/release/deps` contains required libs.\n</del>", "tree": {"sha": "f887f0659c1c26bd04e20ab30c88fa959f1ec749", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f887f0659c1c26bd04e20ab30c88fa959f1ec749"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7", "html_url": "https://github.com/rust-lang/rust/commit/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70d1150478c3d4f9b959f558cffc1863f1527654", "url": "https://api.github.com/repos/rust-lang/rust/commits/70d1150478c3d4f9b959f558cffc1863f1527654", "html_url": "https://github.com/rust-lang/rust/commit/70d1150478c3d4f9b959f558cffc1863f1527654"}, {"sha": "451343e0f3d90904bdc2080cc8bc4eb00be0364e", "url": "https://api.github.com/repos/rust-lang/rust/commits/451343e0f3d90904bdc2080cc8bc4eb00be0364e", "html_url": "https://github.com/rust-lang/rust/commit/451343e0f3d90904bdc2080cc8bc4eb00be0364e"}], "stats": {"total": 110, "additions": 99, "deletions": 11}, "files": [{"sha": "560df2f3a5700b6d521aa27667150a929a8dfef5", "filename": "src/ci/docker/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile?ref=16e7e05e95a6a5a1e0dba54ae722274bd7d725f7", "patch": "@@ -4,6 +4,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++ \\\n   make \\\n   file \\\n+  wget \\\n   curl \\\n   ca-certificates \\\n   python2.7 \\\n@@ -18,19 +19,17 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n \n WORKDIR /build/\n \n-COPY scripts/musl.sh /build/\n+COPY scripts/musl-toolchain.sh /build/\n # We need to mitigate rust-lang/rust#34978 when compiling musl itself as well\n-RUN CC=gcc \\\n-    CFLAGS=\"-Wa,-mrelax-relocations=no\" \\\n-    CXX=g++ \\\n+RUN CFLAGS=\"-Wa,-mrelax-relocations=no\" \\\n     CXXFLAGS=\"-Wa,-mrelax-relocations=no\" \\\n-    bash musl.sh x86_64 && rm -rf /build\n+    bash musl-toolchain.sh x86_64 && rm -rf build\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --musl-root-x86_64=/musl-x86_64 \\\n+      --musl-root-x86_64=/usr/local/x86_64-linux-musl \\\n       --enable-extended \\\n       --disable-docs\n \n@@ -41,6 +40,12 @@ ENV RUST_CONFIGURE_ARGS \\\n # See: https://github.com/rust-lang/rust/issues/34978\n ENV CFLAGS_x86_64_unknown_linux_musl=-Wa,-mrelax-relocations=no\n \n-ENV SCRIPT \\\n-      python2.7 ../x.py test --target x86_64-unknown-linux-musl && \\\n-      python2.7 ../x.py dist --target x86_64-unknown-linux-musl\n+ENV HOSTS=x86_64-unknown-linux-musl \\\n+    CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc \\\n+    CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++\n+\n+# Musl defaults to static libs but we need them to be dynamic for host toolchain.\n+# The toolchain will produce static libs by default.\n+ENV RUSTFLAGS=\"-C target-feature=-crt-static\"\n+\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "95b7c2869c91f97906f2bc44fd70d543bf54fcf8", "filename": "src/ci/docker/scripts/musl-toolchain.sh", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh?ref=16e7e05e95a6a5a1e0dba54ae722274bd7d725f7", "patch": "@@ -0,0 +1,70 @@\n+# This script runs `musl-cross-make` to prepare C toolchain (Binutils, GCC, musl itself)\n+# and builds static libunwind that we distribute for static target.\n+#\n+# Versions of the toolchain components are configurable in `musl-cross-make/Makefile` and\n+# musl unlike GLIBC is forward compatible so upgrading it shouldn't break old distributions.\n+# Right now we have: Binutils 2.27, GCC 6.3.0, musl 1.1.18\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  rm /tmp/build.log\n+  set -x\n+}\n+\n+ARCH=$1\n+TARGET=$ARCH-linux-musl\n+\n+OUTPUT=/usr/local\n+shift\n+\n+git clone https://github.com/richfelker/musl-cross-make -b v0.9.7\n+cd musl-cross-make\n+\n+hide_output make -j$(nproc) TARGET=$TARGET\n+hide_output make install TARGET=$TARGET OUTPUT=$OUTPUT\n+\n+cd -\n+\n+# Install musl library to make binaries executable\n+ln -s $OUTPUT/$TARGET/lib/libc.so /lib/ld-musl-$ARCH.so.1\n+echo $OUTPUT/$TARGET/lib >> /etc/ld-musl-$ARCH.path\n+\n+\n+export CC=$TARGET-gcc\n+export CXX=$TARGET-g++\n+\n+LLVM=70\n+\n+# may have been downloaded in a previous run\n+if [ ! -d libunwind-release_$LLVM ]; then\n+  curl -L https://github.com/llvm-mirror/llvm/archive/release_$LLVM.tar.gz | tar xzf -\n+  curl -L https://github.com/llvm-mirror/libunwind/archive/release_$LLVM.tar.gz | tar xzf -\n+fi\n+\n+# fixme(mati865): Replace it with https://github.com/rust-lang/rust/pull/59089\n+mkdir libunwind-build\n+cd libunwind-build\n+cmake ../libunwind-release_$LLVM \\\n+          -DLLVM_PATH=/build/llvm-release_$LLVM \\\n+          -DLIBUNWIND_ENABLE_SHARED=0 \\\n+          -DCMAKE_C_COMPILER=$CC \\\n+          -DCMAKE_CXX_COMPILER=$CXX \\\n+          -DCMAKE_C_FLAGS=\"$CFLAGS\" \\\n+          -DCMAKE_CXX_FLAGS=\"$CXXFLAGS\"\n+\n+hide_output make -j$(nproc)\n+cp lib/libunwind.a $OUTPUT/$TARGET/lib\n+cd - && rm -rf libunwind-build\n+"}, {"sha": "60b431ad38641ffd44611d48afeb5b9289770866", "filename": "src/ci/docker/test-various/Dockerfile", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Ftest-various%2FDockerfile?ref=16e7e05e95a6a5a1e0dba54ae722274bd7d725f7", "patch": "@@ -11,7 +11,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  xz-utils\n+  xz-utils \\\n+  wget \\\n+  patch\n \n # FIXME: build the `ptx-linker` instead.\n RUN curl -sL https://github.com/denzp/rust-ptx-linker/releases/download/v0.9.0-alpha.2/rust-ptx-linker.linux64.tar.gz | \\\n@@ -20,10 +22,16 @@ RUN curl -sL https://github.com/denzp/rust-ptx-linker/releases/download/v0.9.0-a\n RUN curl -sL https://nodejs.org/dist/v9.2.0/node-v9.2.0-linux-x64.tar.xz | \\\n   tar -xJ\n \n+WORKDIR /build/\n+COPY scripts/musl-toolchain.sh /build/\n+RUN bash musl-toolchain.sh x86_64 && rm -rf build\n+WORKDIR /\n+\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS \\\n+  --musl-root-x86_64=/usr/local/x86_64-linux-musl \\\n   --set build.nodejs=/node-v9.2.0-linux-x64/bin/node \\\n   --set rust.lld\n \n@@ -47,4 +55,9 @@ ENV NVPTX_TARGETS=nvptx64-nvidia-cuda\n ENV NVPTX_SCRIPT python2.7 /checkout/x.py test --target $NVPTX_TARGETS \\\n   src/test/run-make\n \n-ENV SCRIPT $WASM_SCRIPT && $NVPTX_SCRIPT\n+ENV MUSL_TARGETS=x86_64-unknown-linux-musl \\\n+    CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc \\\n+    CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++\n+ENV MUSL_SCRIPT python2.7 /checkout/x.py test --target $MUSL_TARGETS\n+\n+ENV SCRIPT $WASM_SCRIPT && $NVPTX_SCRIPT && $MUSL_SCRIPT"}]}