{"sha": "3ad8c8858e93020416edef421d489c15e46a0365", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZDhjODg1OGU5MzAyMDQxNmVkZWY0MjFkNDg5YzE1ZTQ2YTAzNjU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-10T23:52:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-13T15:37:51Z"}, "message": "rustc_target: Make sure lld-link is treated as link.exe by default\n\nThe differences if they are discovered will need to be explicitly documented", "tree": {"sha": "1d37fc8284eafb7ee8ce2921757c6535e2967355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d37fc8284eafb7ee8ce2921757c6535e2967355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ad8c8858e93020416edef421d489c15e46a0365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad8c8858e93020416edef421d489c15e46a0365", "html_url": "https://github.com/rust-lang/rust/commit/3ad8c8858e93020416edef421d489c15e46a0365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ad8c8858e93020416edef421d489c15e46a0365/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d28a46444eacf066ea0e7fdf6eda066e315aaa4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d28a46444eacf066ea0e7fdf6eda066e315aaa4a", "html_url": "https://github.com/rust-lang/rust/commit/d28a46444eacf066ea0e7fdf6eda066e315aaa4a"}], "stats": {"total": 170, "additions": 106, "deletions": 64}, "files": [{"sha": "5f7a1938a33042ff85b88cdcedb78b43b2e9946b", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=3ad8c8858e93020416edef421d489c15e46a0365", "patch": "@@ -12,7 +12,7 @@ use rustc_session::search_paths::PathKind;\n /// need out of the shared crate context before we get rid of it.\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n-use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelroLevel};\n \n use super::archive::ArchiveBuilder;\n use super::command::Command;\n@@ -182,7 +182,9 @@ fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> Command {\n     // To comply with the Windows App Certification Kit,\n     // MSVC needs to link with the Store versions of the runtime libraries (vcruntime, msvcrt, etc).\n     let t = &sess.target.target;\n-    if flavor == LinkerFlavor::Msvc && t.target_vendor == \"uwp\" {\n+    if (flavor == LinkerFlavor::Msvc || flavor == LinkerFlavor::Lld(LldFlavor::Link))\n+        && t.target_vendor == \"uwp\"\n+    {\n         if let Some(ref tool) = msvc_tool {\n             let original_path = tool.path();\n             if let Some(ref root_lib_path) = original_path.ancestors().nth(4) {"}, {"sha": "9d0922b8ce5a957014bbc3fd02fd666c10a177ff", "filename": "src/librustc_target/spec/i686_pc_windows_msvc.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs?ref=3ad8c8858e93020416edef421d489c15e46a0365", "patch": "@@ -1,18 +1,24 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n \n-    // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n-    // space available to x86 Windows binaries on x86_64.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\"/LARGEADDRESSAWARE\".to_string());\n-\n-    // Ensure the linker will only produce an image if it can also produce a table of\n-    // the image's safe exception handlers.\n-    // https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\"/SAFESEH\".to_string());\n+    let pre_link_args_msvc = vec![\n+        // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n+        // space available to x86 Windows binaries on x86_64.\n+        \"/LARGEADDRESSAWARE\".to_string(),\n+        // Ensure the linker will only produce an image if it can also produce a table of\n+        // the image's safe exception handlers.\n+        // https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers\n+        \"/SAFESEH\".to_string(),\n+    ];\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .extend(pre_link_args_msvc);\n \n     Ok(Target {\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),"}, {"sha": "a1b997482608525f2cbd1281c57dcd198585dcdb", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=3ad8c8858e93020416edef421d489c15e46a0365", "patch": "@@ -322,6 +322,7 @@ macro_rules! supported_targets {\n                     // Target on this testing platform (i.e., checking the iOS targets\n                     // only on a Mac test platform).\n                     let _ = $module::target().map(|original| {\n+                        original.check_consistency();\n                         let as_json = original.to_json();\n                         let parsed = Target::from_json(as_json).unwrap();\n                         assert_eq!(original, parsed);\n@@ -538,7 +539,8 @@ pub struct Target {\n     pub arch: String,\n     /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n     pub data_layout: String,\n-    /// Linker flavor\n+    /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n+    /// on the command line.\n     pub linker_flavor: LinkerFlavor,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,\n@@ -566,7 +568,8 @@ pub struct TargetOptions {\n     /// Linker to invoke\n     pub linker: Option<String>,\n \n-    /// LLD flavor\n+    /// LLD flavor used if `lld` (or `rust-lld`) is specified as a linker\n+    /// without clarifying its flavor in any way.\n     pub lld_flavor: LldFlavor,\n \n     /// Linker arguments that are passed *before* any user-defined libraries.\n@@ -1286,6 +1289,34 @@ impl Target {\n             }\n         }\n     }\n+\n+    #[cfg(test)]\n+    fn check_consistency(&self) {\n+        // Check that LLD with the given flavor is treated identically to the linker it emulates.\n+        // If you target really needs to deviate from the rules below, whitelist it\n+        // and document the reasons.\n+        assert_eq!(\n+            self.linker_flavor == LinkerFlavor::Msvc\n+                || self.linker_flavor == LinkerFlavor::Lld(LldFlavor::Link),\n+            self.options.lld_flavor == LldFlavor::Link,\n+        );\n+        for args in &[\n+            &self.options.pre_link_args,\n+            &self.options.pre_link_args_crt,\n+            &self.options.late_link_args,\n+            &self.options.late_link_args_dynamic,\n+            &self.options.late_link_args_static,\n+            &self.options.post_link_args,\n+        ] {\n+            assert_eq!(\n+                args.get(&LinkerFlavor::Msvc),\n+                args.get(&LinkerFlavor::Lld(LldFlavor::Link)),\n+            );\n+            if args.contains_key(&LinkerFlavor::Msvc) {\n+                assert_eq!(self.options.lld_flavor, LldFlavor::Link);\n+            }\n+        }\n+    }\n }\n \n impl ToJson for Target {"}, {"sha": "21d62d252e09ad2d059d2757bfd30ed45acbdd9f", "filename": "src/librustc_target/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=3ad8c8858e93020416edef421d489c15e46a0365", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n@@ -10,7 +10,12 @@ pub fn target() -> TargetResult {\n     // should be smart enough to insert branch islands only\n     // where necessary, but this is not the observed behavior.\n     // Disabling the LBR optimization works around the issue.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\"/OPT:NOLBR\".to_string());\n+    let pre_link_args_msvc = \"/OPT:NOLBR\".to_string();\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(pre_link_args_msvc.clone());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .push(pre_link_args_msvc);\n \n     // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n     // implemented for windows/arm in LLVM"}, {"sha": "030eb12eb0ec533daa1e8af2b3d8b046132cce13", "filename": "src/librustc_target/spec/uefi_base.rs", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs?ref=3ad8c8858e93020416edef421d489c15e46a0365", "patch": "@@ -13,39 +13,37 @@ use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOption\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let pre_link_args_msvc = vec![\n+        // Suppress the verbose logo and authorship debugging output, which would needlessly\n+        // clog any log files.\n+        \"/NOLOGO\".to_string(),\n+        // UEFI is fully compatible to non-executable data pages. Tell the compiler that\n+        // non-code sections can be marked as non-executable, including stack pages. In fact,\n+        // firmware might enforce this, so we better let the linker know about this, so it\n+        // will fail if the compiler ever tries placing code on the stack (e.g., trampoline\n+        // constructs and alike).\n+        \"/NXCOMPAT\".to_string(),\n+        // There is no runtime for UEFI targets, prevent them from being linked. UEFI targets\n+        // must be freestanding.\n+        \"/nodefaultlib\".to_string(),\n+        // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n+        // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n+        // spec.\n+        \"/entry:efi_main\".to_string(),\n+        // COFF images have a \"Subsystem\" field in their header, which defines what kind of\n+        // program it is. UEFI has 3 fields reserved, which are EFI_APPLICATION,\n+        // EFI_BOOT_SERVICE_DRIVER, and EFI_RUNTIME_DRIVER. We default to EFI_APPLICATION,\n+        // which is very likely the most common option. Individual projects can override this\n+        // with custom linker flags.\n+        // The subsystem-type only has minor effects on the application. It defines the memory\n+        // regions the application is loaded into (runtime-drivers need to be put into\n+        // reserved areas), as well as whether a return from the entry-point is treated as\n+        // exit (default for applications).\n+        \"/subsystem:efi_application\".to_string(),\n+    ];\n     let mut pre_link_args = LinkArgs::new();\n-\n-    pre_link_args.insert(\n-        LinkerFlavor::Lld(LldFlavor::Link),\n-        vec![\n-            // Suppress the verbose logo and authorship debugging output, which would needlessly\n-            // clog any log files.\n-            \"/NOLOGO\".to_string(),\n-            // UEFI is fully compatible to non-executable data pages. Tell the compiler that\n-            // non-code sections can be marked as non-executable, including stack pages. In fact,\n-            // firmware might enforce this, so we better let the linker know about this, so it\n-            // will fail if the compiler ever tries placing code on the stack (e.g., trampoline\n-            // constructs and alike).\n-            \"/NXCOMPAT\".to_string(),\n-            // There is no runtime for UEFI targets, prevent them from being linked. UEFI targets\n-            // must be freestanding.\n-            \"/nodefaultlib\".to_string(),\n-            // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n-            // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n-            // spec.\n-            \"/entry:efi_main\".to_string(),\n-            // COFF images have a \"Subsystem\" field in their header, which defines what kind of\n-            // program it is. UEFI has 3 fields reserved, which are EFI_APPLICATION,\n-            // EFI_BOOT_SERVICE_DRIVER, and EFI_RUNTIME_DRIVER. We default to EFI_APPLICATION,\n-            // which is very likely the most common option. Individual projects can override this\n-            // with custom linker flags.\n-            // The subsystem-type only has minor effects on the application. It defines the memory\n-            // regions the application is loaded into (runtime-drivers need to be put into\n-            // reserved areas), as well as whether a return from the entry-point is treated as\n-            // exit (default for applications).\n-            \"/subsystem:efi_application\".to_string(),\n-        ],\n-    );\n+    pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());\n+    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_link_args_msvc);\n \n     TargetOptions {\n         dynamic_linking: false,"}, {"sha": "78567a4382bed5dc4d0705f2d0a695b96f8919db", "filename": "src/librustc_target/spec/windows_msvc_base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs?ref=3ad8c8858e93020416edef421d489c15e46a0365", "patch": "@@ -2,10 +2,10 @@ use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n-    let pre_args = vec![\"/NOLOGO\".to_string(), \"/NXCOMPAT\".to_string()];\n-    let mut args = LinkArgs::new();\n-    args.insert(LinkerFlavor::Msvc, pre_args.clone());\n-    args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_args);\n+    let pre_link_args_msvc = vec![\"/NOLOGO\".to_string(), \"/NXCOMPAT\".to_string()];\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());\n+    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_link_args_msvc);\n \n     TargetOptions {\n         function_sections: true,\n@@ -24,7 +24,7 @@ pub fn opts() -> TargetOptions {\n         // messages if a link error occurred.\n         link_env: vec![(\"VSLANG\".to_string(), \"1033\".to_string())],\n         lld_flavor: LldFlavor::Link,\n-        pre_link_args: args,\n+        pre_link_args,\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n         abi_return_struct_as_int: true,"}, {"sha": "9497e525dd97c64a526ae2a0b62ae36ebc19fbda", "filename": "src/librustc_target/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad8c8858e93020416edef421d489c15e46a0365/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=3ad8c8858e93020416edef421d489c15e46a0365", "patch": "@@ -1,17 +1,16 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Msvc,\n-        vec![\n-            \"/NOLOGO\".to_string(),\n-            \"/NXCOMPAT\".to_string(),\n-            \"/APPCONTAINER\".to_string(),\n-            \"mincore.lib\".to_string(),\n-        ],\n-    );\n+    let pre_link_args_msvc = vec![\n+        \"/NOLOGO\".to_string(),\n+        \"/NXCOMPAT\".to_string(),\n+        \"/APPCONTAINER\".to_string(),\n+        \"mincore.lib\".to_string(),\n+    ];\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());\n+    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_link_args_msvc);\n \n     TargetOptions {\n         function_sections: true,\n@@ -25,12 +24,13 @@ pub fn opts() -> TargetOptions {\n         target_family: Some(\"windows\".to_string()),\n         is_like_windows: true,\n         is_like_msvc: true,\n-        pre_link_args: args,\n+        pre_link_args,\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,\n         requires_uwtable: true,\n+        lld_flavor: LldFlavor::Link,\n \n         ..Default::default()\n     }"}]}