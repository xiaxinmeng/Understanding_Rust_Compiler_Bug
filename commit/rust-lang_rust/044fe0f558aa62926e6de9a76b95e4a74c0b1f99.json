{"sha": "044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NGZlMGY1NThhYTYyOTI2ZTZkZTlhNzZiOTVlNGE3NGMwYjFmOTk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-01-25T19:03:10Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-02T12:20:57Z"}, "message": "Add a resume type parameter to `Generator`", "tree": {"sha": "2c984dfd11ebb90b9881c8e4f9bc82663735f775", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c984dfd11ebb90b9881c8e4f9bc82663735f775"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "html_url": "https://github.com/rust-lang/rust/commit/044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cbcb17d3306d6e22eafc2c05ce885db97d0189c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cbcb17d3306d6e22eafc2c05ce885db97d0189c", "html_url": "https://github.com/rust-lang/rust/commit/0cbcb17d3306d6e22eafc2c05ce885db97d0189c"}], "stats": {"total": 307, "additions": 185, "deletions": 122}, "files": [{"sha": "8bc62418b3969c1e3c73d306571b81f10cf5f710", "filename": "src/doc/unstable-book/src/language-features/generators.md", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -37,11 +37,11 @@ fn main() {\n         return \"foo\"\n     };\n \n-    match Pin::new(&mut generator).resume() {\n+    match Pin::new(&mut generator).resume(()) {\n         GeneratorState::Yielded(1) => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n-    match Pin::new(&mut generator).resume() {\n+    match Pin::new(&mut generator).resume(()) {\n         GeneratorState::Complete(\"foo\") => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n@@ -71,9 +71,9 @@ fn main() {\n     };\n \n     println!(\"1\");\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n     println!(\"3\");\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n     println!(\"5\");\n }\n ```\n@@ -92,10 +92,10 @@ The `Generator` trait in `std::ops` currently looks like:\n # use std::ops::GeneratorState;\n # use std::pin::Pin;\n \n-pub trait Generator {\n+pub trait Generator<R = ()> {\n     type Yield;\n     type Return;\n-    fn resume(self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return>;\n+    fn resume(self: Pin<&mut Self>, resume: R) -> GeneratorState<Self::Yield, Self::Return>;\n }\n ```\n \n@@ -152,10 +152,6 @@ closure-like semantics. Namely:\n * Whenever a generator is dropped it will drop all captured environment\n   variables.\n \n-Note that unlike closures, generators at this time cannot take any arguments.\n-That is, generators must always look like `|| { ... }`. This restriction may be\n-lifted at a future date, the design is ongoing!\n-\n ### Generators as state machines\n \n In the compiler, generators are currently compiled as state machines. Each\n@@ -179,8 +175,8 @@ fn main() {\n         return ret\n     };\n \n-    Pin::new(&mut generator).resume();\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n+    Pin::new(&mut generator).resume(());\n }\n ```\n \n@@ -205,7 +201,7 @@ fn main() {\n             type Yield = i32;\n             type Return = &'static str;\n \n-            fn resume(mut self: Pin<&mut Self>) -> GeneratorState<i32, &'static str> {\n+            fn resume(mut self: Pin<&mut Self>, resume: ()) -> GeneratorState<i32, &'static str> {\n                 use std::mem;\n                 match mem::replace(&mut *self, __Generator::Done) {\n                     __Generator::Start(s) => {\n@@ -228,8 +224,8 @@ fn main() {\n         __Generator::Start(ret)\n     };\n \n-    Pin::new(&mut generator).resume();\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n+    Pin::new(&mut generator).resume(());\n }\n ```\n "}, {"sha": "04be86862ae9c490e2f0785fce15c0cbb2081595", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -1103,6 +1103,7 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Box<T> {}\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator + Unpin> Generator for Box<G> {\n     type Yield = G::Yield;\n@@ -1113,6 +1114,7 @@ impl<G: ?Sized + Generator + Unpin> Generator for Box<G> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator> Generator for Pin<Box<G>> {\n     type Yield = G::Yield;\n@@ -1123,6 +1125,28 @@ impl<G: ?Sized + Generator> Generator for Pin<Box<G>> {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R> + Unpin, R> Generator<R> for Box<G> {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume(Pin::new(&mut *self), arg)\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R>, R> Generator<R> for Pin<Box<G>> {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume((*self).as_mut(), arg)\n+    }\n+}\n+\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<F: ?Sized + Future + Unpin> Future for Box<F> {\n     type Output = F::Output;"}, {"sha": "4e43561996c370ee7c151ef6f632925c7ac35d1a", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -50,11 +50,11 @@ pub enum GeneratorState<Y, R> {\n ///         return \"foo\"\n ///     };\n ///\n-///     match Pin::new(&mut generator).resume() {\n+///     match Pin::new(&mut generator).resume(()) {\n ///         GeneratorState::Yielded(1) => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n-///     match Pin::new(&mut generator).resume() {\n+///     match Pin::new(&mut generator).resume(()) {\n ///         GeneratorState::Complete(\"foo\") => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n@@ -67,7 +67,7 @@ pub enum GeneratorState<Y, R> {\n #[lang = \"generator\"]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n #[fundamental]\n-pub trait Generator {\n+pub trait Generator<#[cfg(not(bootstrap))] R = ()> {\n     /// The type of value this generator yields.\n     ///\n     /// This associated type corresponds to the `yield` expression and the\n@@ -110,9 +110,13 @@ pub trait Generator {\n     /// been returned previously. While generator literals in the language are\n     /// guaranteed to panic on resuming after `Complete`, this is not guaranteed\n     /// for all implementations of the `Generator` trait.\n-    fn resume(self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return>;\n+    fn resume(\n+        self: Pin<&mut Self>,\n+        #[cfg(not(bootstrap))] arg: R,\n+    ) -> GeneratorState<Self::Yield, Self::Return>;\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator> Generator for Pin<&mut G> {\n     type Yield = G::Yield;\n@@ -123,6 +127,7 @@ impl<G: ?Sized + Generator> Generator for Pin<&mut G> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator + Unpin> Generator for &mut G {\n     type Yield = G::Yield;\n@@ -132,3 +137,25 @@ impl<G: ?Sized + Generator + Unpin> Generator for &mut G {\n         G::resume(Pin::new(&mut *self))\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R>, R> Generator<R> for Pin<&mut G> {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume((*self).as_mut(), arg)\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R> + Unpin, R> Generator<R> for &mut G {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume(Pin::new(&mut *self), arg)\n+    }\n+}"}, {"sha": "947d66e38b4342c6b1795624b8e0338de2074b21", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -643,8 +643,10 @@ pub fn generator_trait_ref_and_outputs(\n     self_ty: Ty<'tcx>,\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<(ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n-    let trait_ref =\n-        ty::TraitRef { def_id: fn_trait_def_id, substs: tcx.mk_substs_trait(self_ty, &[]) };\n+    let trait_ref = ty::TraitRef {\n+        def_id: fn_trait_def_id,\n+        substs: tcx.mk_substs_trait(self_ty, &[tcx.mk_unit().into()]),\n+    };\n     ty::Binder::bind((trait_ref, sig.skip_binder().yield_ty, sig.skip_binder().return_ty))\n }\n "}, {"sha": "966b60c6cfbc1d98b2d741a7541c217d2f863904", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -2350,8 +2350,8 @@ impl<'tcx> ty::Instance<'tcx> {\n                     ]);\n                     let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n-                    tcx.mk_fn_sig(iter::once(env_ty),\n-                        ret_ty,\n+                    tcx.mk_fn_sig([env_ty, tcx.mk_unit()].iter(),\n+                        &ret_ty,\n                         false,\n                         hir::Unsafety::Normal,\n                         rustc_target::spec::abi::Abi::Rust"}, {"sha": "cc6e03d1ca70f9ff0d56752faabb96899c349b57", "filename": "src/librustc_error_codes/error_codes/E0626.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc_error_codes%2Ferror_codes%2FE0626.md", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc_error_codes%2Ferror_codes%2FE0626.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0626.md?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -12,7 +12,7 @@ let mut b = || {\n     yield (); // ...is still in scope here, when the yield occurs.\n     println!(\"{}\", a);\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n At present, it is not permitted to have a yield that occurs while a\n@@ -31,7 +31,7 @@ let mut b = || {\n     yield ();\n     println!(\"{}\", a);\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n This is a very simple case, of course. In more complex cases, we may\n@@ -50,7 +50,7 @@ let mut b = || {\n     yield x; // ...when this yield occurs.\n   }\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n Such cases can sometimes be resolved by iterating \"by value\" (or using\n@@ -66,7 +66,7 @@ let mut b = || {\n     yield x; // <-- Now yield is OK.\n   }\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n If taking ownership is not an option, using indices can work too:\n@@ -83,7 +83,7 @@ let mut b = || {\n     yield x; // <-- Now yield is OK.\n   }\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n \n // (*) -- Unfortunately, these temporaries are currently required.\n // See <https://github.com/rust-lang/rust/issues/43122>."}, {"sha": "040c13e8210ea056bc8eb23219d8744740ecbd94", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -31,10 +31,12 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeStorageLive<'a, 'tcx> {\n         self.body.local_decls.len()\n     }\n \n-    fn start_block_effect(&self, _on_entry: &mut BitSet<Local>) {\n-        // Nothing is live on function entry (generators only have a self\n-        // argument, and we don't care about that)\n-        assert_eq!(1, self.body.arg_count);\n+    fn start_block_effect(&self, on_entry: &mut BitSet<Local>) {\n+        // The resume argument is live on function entry (we don't care about\n+        // the `self` argument)\n+        for arg in self.body.args_iter().skip(1) {\n+            on_entry.insert(arg);\n+        }\n     }\n \n     fn statement_effect(&self, trans: &mut GenKillSet<Local>, loc: Location) {\n@@ -100,10 +102,12 @@ impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n         self.body.local_decls.len()\n     }\n \n-    fn start_block_effect(&self, _sets: &mut BitSet<Local>) {\n-        // Nothing is live on function entry (generators only have a self\n-        // argument, and we don't care about that)\n-        assert_eq!(1, self.body.arg_count);\n+    fn start_block_effect(&self, on_entry: &mut BitSet<Local>) {\n+        // The resume argument is live on function entry (we don't care about\n+        // the `self` argument)\n+        for arg in self.body.args_iter().skip(1) {\n+            on_entry.insert(arg);\n+        }\n     }\n \n     fn before_statement_effect(&self, sets: &mut GenKillSet<Self::Idx>, loc: Location) {"}, {"sha": "a8defd03f7177fb27d714b862e328a66ff288f97", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -885,6 +885,7 @@ fn create_generator_drop_shim<'tcx>(\n     drop_clean: BasicBlock,\n ) -> BodyAndCache<'tcx> {\n     let mut body = body.clone();\n+    body.arg_count = 1; // make sure the resume argument is not included here\n \n     let source_info = source_info(&body);\n \n@@ -1164,7 +1165,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n \n         // Update our MIR struct to reflect the changed we've made\n         body.yield_ty = None;\n-        body.arg_count = 1;\n+        body.arg_count = 2; // self, resume arg\n         body.spread_arg = None;\n         body.generator_layout = Some(layout);\n "}, {"sha": "ab539e6179e3d46e4ededfa0f9937c19e0c82e23", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -75,13 +75,16 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n                     // HACK(eddyb) Avoid having RustCall on closures,\n                     // as it adds unnecessary (and wrong) auto-tupling.\n                     abi = Abi::Rust;\n-                    Some(ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None, None, None))\n+                    vec![ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None, None, None)]\n                 }\n                 ty::Generator(..) => {\n                     let gen_ty = tcx.body_tables(body_id).node_type(id);\n-                    Some(ArgInfo(gen_ty, None, None, None))\n+                    vec![\n+                        ArgInfo(gen_ty, None, None, None),\n+                        ArgInfo(tcx.mk_unit(), None, None, None),\n+                    ]\n                 }\n-                _ => None,\n+                _ => vec![],\n             };\n \n             let safety = match fn_sig.unsafety {"}, {"sha": "f74c84e6dfd4862f60362a73aeb756b7cd7539ab", "filename": "src/libstd/future.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -40,7 +40,10 @@ impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n         // Safe because we're !Unpin + !Drop mapping to a ?Unpin value\n         let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n         let _guard = unsafe { set_task_context(cx) };\n-        match gen.resume() {\n+        match gen.resume(\n+            #[cfg(not(bootstrap))]\n+            (),\n+        ) {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n         }"}, {"sha": "fd46c1a8b4db74d7ecae2db5f6119236096e1b00", "filename": "src/test/debuginfo/generator-locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fdebuginfo%2Fgenerator-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fdebuginfo%2Fgenerator-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-locals.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -78,9 +78,9 @@ fn main() {\n         _zzz(); // #break\n         a = c;\n     };\n-    Pin::new(&mut b).resume();\n-    Pin::new(&mut b).resume();\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n+    Pin::new(&mut b).resume(());\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n }\n "}, {"sha": "f19a3c71dd8d282f6b8603ce372c4efd5db686cf", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -57,11 +57,11 @@ fn main() {\n         println!(\"{} {} {}\", a, c, d);\n     };\n     _zzz(); // #break\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n }\n "}, {"sha": "4de88e9dae62bc5269f5ead15a56a39d301c4f86", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -45,7 +45,7 @@ fn main() {\n         yield;\n     };\n     let mut b = move || {\n-        Pin::new(&mut a).resume();\n+        Pin::new(&mut a).resume(());\n         yield;\n     };\n "}, {"sha": "1a7c2e80629012ecae140f87c54a24cbd6078304", "filename": "src/test/run-fail/generator-resume-after-panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -16,7 +16,7 @@ fn main() {\n         yield;\n     };\n     panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        let x = Pin::new(&mut g).resume();\n+        let x = Pin::new(&mut g).resume(());\n     }));\n-    Pin::new(&mut g).resume();\n+    Pin::new(&mut g).resume(());\n }"}, {"sha": "9fc5667d6847e01a42887b1607b48d8e724a7cf5", "filename": "src/test/ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-generator-resume-after-completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-generator-resume-after-completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-generator-resume-after-completion.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -19,7 +19,7 @@ fn main() {\n     let mut g = || {\n         yield;\n     };\n-    Pin::new(&mut g).resume(); // Yields once.\n-    Pin::new(&mut g).resume(); // Completes here.\n-    Pin::new(&mut g).resume(); // Panics here.\n+    Pin::new(&mut g).resume(()); // Yields once.\n+    Pin::new(&mut g).resume(()); // Completes here.\n+    Pin::new(&mut g).resume(()); // Panics here.\n }"}, {"sha": "659e520d4cd1289f71e6ec7c27edce4aadff1119", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -184,7 +184,7 @@ fn generator(a: &Allocator, run_count: usize) {\n          );\n     };\n     for _ in 0..run_count {\n-        Pin::new(&mut gen).resume();\n+        Pin::new(&mut gen).resume(());\n     }\n }\n "}, {"sha": "2dd5ea675233ccbeddf4c21e149355fe0e124b86", "filename": "src/test/ui/generator/auxiliary/xcrate-reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -6,7 +6,7 @@ fn msg() -> u32 {\n     0\n }\n \n-pub fn foo() -> impl Generator<Yield=(), Return=u32> {\n+pub fn foo() -> impl Generator<(), Yield=(), Return=u32> {\n     || {\n         yield;\n         return msg();"}, {"sha": "d07abd0918c7860dabe18800bd3421202b9c1c8d", "filename": "src/test/ui/generator/auxiliary/xcrate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -3,15 +3,15 @@\n use std::marker::Unpin;\n use std::ops::Generator;\n \n-pub fn foo() -> impl Generator<Yield = (), Return = ()> {\n+pub fn foo() -> impl Generator<(), Yield = (), Return = ()> {\n     || {\n         if false {\n             yield;\n         }\n     }\n }\n \n-pub fn bar<T: 'static>(t: T) -> Box<Generator<Yield = T, Return = ()> + Unpin> {\n+pub fn bar<T: 'static>(t: T) -> Box<Generator<(), Yield = T, Return = ()> + Unpin> {\n     Box::new(|| {\n         yield t;\n     })"}, {"sha": "d36592583cdc598c70fe0f87b6f9c149d5b5c881", "filename": "src/test/ui/generator/borrowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -6,7 +6,7 @@ use std::pin::Pin;\n fn main() {\n     let _b = {\n         let a = 3;\n-        Pin::new(&mut || yield &a).resume()\n+        Pin::new(&mut || yield &a).resume(())\n         //~^ ERROR: `a` does not live long enough\n     };\n "}, {"sha": "83987e19839ce81ca82b2d90c3303ece764af3fc", "filename": "src/test/ui/generator/borrowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:9:33\n    |\n-LL |         Pin::new(&mut || yield &a).resume()\n+LL |         Pin::new(&mut || yield &a).resume(())\n    |                       ----------^\n    |                       |         |\n    |                       |         borrowed value does not live long enough"}, {"sha": "990d94e6efc1bb5245bef77147675f7b34ab945d", "filename": "src/test/ui/generator/conditional-drop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fconditional-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fconditional-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fconditional-drop.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -35,9 +35,9 @@ fn t1() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n }\n \n@@ -51,8 +51,8 @@ fn t2() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n }"}, {"sha": "9d4c217b76ed783bae301916e4585f5d4f6077a2", "filename": "src/test/ui/generator/control-flow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fcontrol-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fcontrol-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fcontrol-flow.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -7,10 +7,10 @@ use std::ops::{GeneratorState, Generator};\n use std::pin::Pin;\n \n fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n-    where T: Generator<Yield = ()> + Unpin,\n+    where T: Generator<(), Yield = ()> + Unpin,\n {\n     loop {\n-        match Pin::new(&mut t).resume() {\n+        match Pin::new(&mut t).resume(()) {\n             GeneratorState::Yielded(()) => amt = amt.checked_sub(1).unwrap(),\n             GeneratorState::Complete(ret) => {\n                 assert_eq!(amt, 0);"}, {"sha": "a9a50a122a19cee290bbfed4eeaa1acc25f2f9ad", "filename": "src/test/ui/generator/drop-and-replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fdrop-and-replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fdrop-and-replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-and-replace.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -37,7 +37,7 @@ fn main() {\n     };\n \n     loop {\n-        match Pin::new(&mut a).resume() {\n+        match Pin::new(&mut a).resume(()) {\n             GeneratorState::Complete(()) => break,\n             _ => (),\n         }"}, {"sha": "7ba711881045dd25c521f67934e492fcdf3c97ea", "filename": "src/test/ui/generator/drop-env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-env.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -30,7 +30,7 @@ fn t1() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(Pin::new(&mut foo).resume());\n+    drop(Pin::new(&mut foo).resume(()));\n     assert_eq!(A.load(Ordering::SeqCst), n);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n@@ -43,7 +43,7 @@ fn t2() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(Pin::new(&mut foo).resume());\n+    drop(Pin::new(&mut foo).resume(()));\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);"}, {"sha": "da00b230d9fb73b54e7506187a4d9b967772fbfd", "filename": "src/test/ui/generator/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -15,6 +15,6 @@ fn main() {\n         let _d = ref_.take(); //~ ERROR `ref_` does not live long enough\n         yield;\n     };\n-    Pin::new(&mut gen).resume();\n+    Pin::new(&mut gen).resume(());\n     // drops the RefCell and then the Ref, leading to use-after-free\n }"}, {"sha": "5f0a6bb09b7843f452575ed051cb352cfbb95760", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -8,7 +8,7 @@ fn dangle(x: &mut i32) -> &'static mut i32 {\n         x\n     };\n     loop {\n-        match Pin::new(&mut g).resume() {\n+        match Pin::new(&mut g).resume(()) {\n             GeneratorState::Complete(c) => return c,\n             //~^ ERROR explicit lifetime required\n             GeneratorState::Yielded(_) => (),"}, {"sha": "389b9d139694195499a6f8be2657e50ad1890eaa", "filename": "src/test/ui/generator/issue-44197.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fissue-44197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fissue-44197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-44197.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -2,14 +2,14 @@\n \n #![feature(generators, generator_trait)]\n \n-use std::ops::{ Generator, GeneratorState };\n+use std::ops::{Generator, GeneratorState};\n use std::pin::Pin;\n \n fn foo(_: &str) -> String {\n     String::new()\n }\n \n-fn bar(baz: String) -> impl Generator<Yield = String, Return = ()> {\n+fn bar(baz: String) -> impl Generator<(), Yield = String, Return = ()> {\n     move || {\n         yield foo(&baz);\n     }\n@@ -19,7 +19,7 @@ fn foo2(_: &str) -> Result<String, ()> {\n     Err(())\n }\n \n-fn bar2(baz: String) -> impl Generator<Yield = String, Return = ()> {\n+fn bar2(baz: String) -> impl Generator<(), Yield = String, Return = ()> {\n     move || {\n         if let Ok(quux) = foo2(&baz) {\n             yield quux;\n@@ -28,6 +28,9 @@ fn bar2(baz: String) -> impl Generator<Yield = String, Return = ()> {\n }\n \n fn main() {\n-    assert_eq!(Pin::new(&mut bar(String::new())).resume(), GeneratorState::Yielded(String::new()));\n-    assert_eq!(Pin::new(&mut bar2(String::new())).resume(), GeneratorState::Complete(()));\n+    assert_eq!(\n+        Pin::new(&mut bar(String::new())).resume(()),\n+        GeneratorState::Yielded(String::new())\n+    );\n+    assert_eq!(Pin::new(&mut bar2(String::new())).resume(()), GeneratorState::Complete(()));\n }"}, {"sha": "187c374021dcac962c5bd4a8a919cc700e787b28", "filename": "src/test/ui/generator/issue-61442-stmt-expr-with-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -18,12 +18,12 @@ fn drop_and_yield() {\n         String::new();\n         yield;\n     };\n-    Box::pin(x).as_mut().resume();\n+    Box::pin(x).as_mut().resume(());\n     let y = static || {\n         String::new();\n         yield;\n     };\n-    Box::pin(y).as_mut().resume();\n+    Box::pin(y).as_mut().resume(());\n }\n \n fn main() {"}, {"sha": "90eefe02f664e46fa7bf8a4ee51e333c340751ef", "filename": "src/test/ui/generator/iterator-count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fiterator-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fiterator-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fiterator-count.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -10,18 +10,18 @@ struct W<T>(T);\n \n // This impl isn't safe in general, but the generator used in this test is movable\n // so it won't cause problems.\n-impl<T: Generator<Return = ()> + Unpin> Iterator for W<T> {\n+impl<T: Generator<(), Return = ()> + Unpin> Iterator for W<T> {\n     type Item = T::Yield;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        match Pin::new(&mut self.0).resume() {\n+        match Pin::new(&mut self.0).resume(()) {\n             GeneratorState::Complete(..) => None,\n             GeneratorState::Yielded(v) => Some(v),\n         }\n     }\n }\n \n-fn test() -> impl Generator<Return=(), Yield=u8> + Unpin {\n+fn test() -> impl Generator<(), Return=(), Yield=u8> + Unpin {\n     || {\n         for i in 1..6 {\n             yield i"}, {"sha": "6a2e42a5573a8486814f17145a15599fc805cb2c", "filename": "src/test/ui/generator/live-upvar-across-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Flive-upvar-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Flive-upvar-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flive-upvar-across-yield.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let mut a = || {\n         b(yield);\n     };\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n }"}, {"sha": "45519150eec2b560bd64d3e519cf39cd19add0b9", "filename": "src/test/ui/generator/nested_generators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fnested_generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fnested_generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnested_generators.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -11,7 +11,7 @@ fn main() {\n             yield 2;\n         };\n \n-        match Pin::new(&mut sub_generator).resume() {\n+        match Pin::new(&mut sub_generator).resume(()) {\n             GeneratorState::Yielded(x) => {\n                 yield x;\n             }"}, {"sha": "c9a201725aea2705240b99a9c6165992b53f1ff1", "filename": "src/test/ui/generator/panic-drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -35,7 +35,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 0);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        Pin::new(&mut foo).resume()\n+        Pin::new(&mut foo).resume(())\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);\n@@ -50,7 +50,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 1);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        Pin::new(&mut foo).resume()\n+        Pin::new(&mut foo).resume(())\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);"}, {"sha": "500a3c9c2950e6177c32b1d466d2b59616e9bbcb", "filename": "src/test/ui/generator/panic-safe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -17,13 +17,13 @@ fn main() {\n     };\n \n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        Pin::new(&mut foo).resume()\n+        Pin::new(&mut foo).resume(())\n     }));\n     assert!(res.is_err());\n \n     for _ in 0..10 {\n         let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-            Pin::new(&mut foo).resume()\n+            Pin::new(&mut foo).resume(())\n         }));\n         assert!(res.is_err());\n     }"}, {"sha": "efed08bd4708f2e803c142b2590caeecfc9848f5", "filename": "src/test/ui/generator/resume-after-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -16,12 +16,12 @@ fn main() {\n         yield;\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n \n-    match panic::catch_unwind(move || Pin::new(&mut foo).resume()) {\n+    match panic::catch_unwind(move || Pin::new(&mut foo).resume(())) {\n         Ok(_) => panic!(\"generator successfully resumed\"),\n         Err(_) => {}\n     }"}, {"sha": "c6dd738d6ac60d370c1857db6bf83153cb97da0e", "filename": "src/test/ui/generator/sized-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -9,6 +9,6 @@ fn main() {\n    //~^ ERROR the size for values of type\n        yield s[..];\n    };\n-   Pin::new(&mut gen).resume();\n+   Pin::new(&mut gen).resume(());\n    //~^ ERROR the size for values of type\n }"}, {"sha": "79aeec2ec02801df72fd2e4385cb06989b4de022", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -15,7 +15,7 @@ LL | |    };\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/sized-yield.rs:12:23\n    |\n-LL |    Pin::new(&mut gen).resume();\n+LL |    Pin::new(&mut gen).resume(());\n    |                       ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`"}, {"sha": "9289710b34bf980f58244e0459aad8794ae5b9dd", "filename": "src/test/ui/generator/smoke.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsmoke.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -17,7 +17,7 @@ fn simple() {\n         }\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -33,7 +33,7 @@ fn return_capture() {\n         a\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -45,11 +45,11 @@ fn simple_yield() {\n         yield;\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -62,11 +62,11 @@ fn yield_capture() {\n         yield b;\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -79,11 +79,11 @@ fn simple_yield_value() {\n         return String::from(\"foo\")\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(ref s) if *s == \"bar\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -97,11 +97,11 @@ fn return_after_yield() {\n         return a\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -149,11 +149,11 @@ fn send_and_sync() {\n fn send_over_threads() {\n     let mut foo = || { yield };\n     thread::spawn(move || {\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Yielded(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n@@ -162,11 +162,11 @@ fn send_over_threads() {\n     let a = String::from(\"a\");\n     let mut foo = || { yield a };\n     thread::spawn(move || {\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Yielded(ref s) if *s == \"a\" => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }"}, {"sha": "3980766c4287e73e7947d4af964e969fa4d39129", "filename": "src/test/ui/generator/static-generators.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fstatic-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fstatic-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-generators.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     // Safety: We shadow the original generator variable so have no safe API to\n     // move it after this point.\n     let mut generator = unsafe { Pin::new_unchecked(&mut generator) };\n-    assert_eq!(generator.as_mut().resume(), GeneratorState::Yielded(()));\n-    assert_eq!(generator.as_mut().resume(), GeneratorState::Complete(()));\n+    assert_eq!(generator.as_mut().resume(()), GeneratorState::Yielded(()));\n+    assert_eq!(generator.as_mut().resume(()), GeneratorState::Complete(()));\n }"}, {"sha": "1b1cff3387d9f7ea34388d4dd17f7c36b95acd75", "filename": "src/test/ui/generator/xcrate-reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fxcrate-reachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fxcrate-reachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fxcrate-reachable.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -10,5 +10,5 @@ use std::ops::Generator;\n use std::pin::Pin;\n \n fn main() {\n-    Pin::new(&mut foo::foo()).resume();\n+    Pin::new(&mut foo::foo()).resume(());\n }"}, {"sha": "40986bbeb6517243f3f487ce1f2dcafcb32b612d", "filename": "src/test/ui/generator/xcrate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fxcrate.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -12,18 +12,18 @@ use std::pin::Pin;\n fn main() {\n     let mut foo = xcrate::foo();\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n \n     let mut foo = xcrate::bar(3);\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(3) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }"}, {"sha": "985e5d8bdc83818e1466153e7e931c5e5602bc11", "filename": "src/test/ui/generator/yield-while-iterating.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -43,7 +43,7 @@ fn yield_during_iter_borrowed_slice_3() {\n             yield p;\n         }\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn yield_during_iter_borrowed_slice_4() {\n@@ -56,7 +56,7 @@ fn yield_during_iter_borrowed_slice_4() {\n         }\n     };\n     println!(\"{}\", x[0]); //~ ERROR\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn yield_during_range_iter() {\n@@ -69,7 +69,7 @@ fn yield_during_range_iter() {\n             yield x;\n         }\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn main() { }"}, {"sha": "b6563475235c244da583e9d335a13e8543b0b754", "filename": "src/test/ui/generator/yield-while-iterating.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -16,7 +16,7 @@ LL |         for p in &mut x {\n ...\n LL |     println!(\"{}\", x[0]);\n    |                    ^ immutable borrow occurs here\n-LL |     Pin::new(&mut b).resume();\n+LL |     Pin::new(&mut b).resume(());\n    |              ------ mutable borrow later used here\n \n error: aborting due to 2 previous errors"}, {"sha": "061a64dbc364d9143dbe310e31ba589fad76ef92", "filename": "src/test/ui/generator/yield-while-local-borrowed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -15,7 +15,7 @@ fn borrow_local_inline() {\n         yield();\n         println!(\"{}\", a);\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn borrow_local_inline_done() {\n@@ -26,7 +26,7 @@ fn borrow_local_inline_done() {\n         }\n         yield();\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn borrow_local() {\n@@ -43,7 +43,7 @@ fn borrow_local() {\n             println!(\"{}\", b);\n         }\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn main() { }"}, {"sha": "a03ef945dd231c2b6cf4929ae06332340e1a8dd3", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -12,7 +12,7 @@ fn reborrow_shared_ref(x: &i32) {\n         yield();\n         println!(\"{}\", a);\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn reborrow_mutable_ref(x: &mut i32) {\n@@ -23,7 +23,7 @@ fn reborrow_mutable_ref(x: &mut i32) {\n         yield();\n         println!(\"{}\", a);\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn reborrow_mutable_ref_2(x: &mut i32) {\n@@ -34,7 +34,7 @@ fn reborrow_mutable_ref_2(x: &mut i32) {\n         println!(\"{}\", a);\n     };\n     println!(\"{}\", x); //~ ERROR\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn main() { }"}, {"sha": "fd885660d092758f61ff23236596e98bbb5a8ec1", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -8,7 +8,7 @@ LL |         let a = &mut *x;\n ...\n LL |     println!(\"{}\", x);\n    |                    ^ second borrow occurs here\n-LL |     Pin::new(&mut b).resume();\n+LL |     Pin::new(&mut b).resume(());\n    |              ------ first borrow later used here\n \n error: aborting due to previous error"}, {"sha": "e6279bd028e01008a12dca339f8f2d9992d2bafc", "filename": "src/test/ui/nll/issue-55850.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044fe0f558aa62926e6de9a76b95e4a74c0b1f99/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs?ref=044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "patch": "@@ -15,7 +15,7 @@ where\n     type Item = G::Yield;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        match Pin::new(&mut self.0).resume() {\n+        match Pin::new(&mut self.0).resume(()) {\n             Yielded(y) => Some(y),\n             _ => None\n         }"}]}