{"sha": "fdd0f8a3b559411650cb5ab4040d68033fa60d52", "node_id": "C_kwDOAAsO6NoAKGZkZDBmOGEzYjU1OTQxMTY1MGNiNWFiNDA0MGQ2ODAzM2ZhNjBkNTI", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-18T14:33:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-18T14:33:31Z"}, "message": "Slightly reduce the amount of fx.module references", "tree": {"sha": "ce655042e050d6057ecd269ff9403c62be1f5268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce655042e050d6057ecd269ff9403c62be1f5268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdd0f8a3b559411650cb5ab4040d68033fa60d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd0f8a3b559411650cb5ab4040d68033fa60d52", "html_url": "https://github.com/rust-lang/rust/commit/fdd0f8a3b559411650cb5ab4040d68033fa60d52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdd0f8a3b559411650cb5ab4040d68033fa60d52/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f505157f2c9c2e27c839e4508e463ac380a06100", "url": "https://api.github.com/repos/rust-lang/rust/commits/f505157f2c9c2e27c839e4508e463ac380a06100", "html_url": "https://github.com/rust-lang/rust/commit/f505157f2c9c2e27c839e4508e463ac380a06100"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "fc2f04f146e9d3d52deec4049c41d85807c30604", "filename": "src/base.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdd0f8a3b559411650cb5ab4040d68033fa60d52/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd0f8a3b559411650cb5ab4040d68033fa60d52/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=fdd0f8a3b559411650cb5ab4040d68033fa60d52", "patch": "@@ -49,13 +49,15 @@ pub(crate) fn codegen_fn<'tcx>(\n         (0..mir.basic_blocks().len()).map(|_| bcx.create_block()).collect();\n \n     // Make FunctionCx\n-    let pointer_type = module.target_config().pointer_type();\n+    let target_config = module.target_config();\n+    let pointer_type = target_config.pointer_type();\n     let clif_comments = crate::pretty_clif::CommentWriter::new(tcx, instance);\n \n     let mut fx = FunctionCx {\n         cx,\n         module,\n         tcx,\n+        target_config,\n         pointer_type,\n         constants_cx: ConstantCx::new(),\n \n@@ -676,7 +678,7 @@ fn codegen_stmt<'tcx>(\n                         // FIXME use emit_small_memset where possible\n                         let addr = lval.to_ptr().get_addr(fx);\n                         let val = operand.load_scalar(fx);\n-                        fx.bcx.call_memset(fx.module.target_config(), addr, val, times);\n+                        fx.bcx.call_memset(fx.target_config, addr, val, times);\n                     } else {\n                         let loop_block = fx.bcx.create_block();\n                         let loop_block2 = fx.bcx.create_block();\n@@ -797,7 +799,7 @@ fn codegen_stmt<'tcx>(\n             let elem_size: u64 = pointee.size.bytes();\n             let bytes =\n                 if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n-            fx.bcx.call_memcpy(fx.module.target_config(), dst, src, bytes);\n+            fx.bcx.call_memcpy(fx.target_config, dst, src, bytes);\n         }\n     }\n }"}, {"sha": "1df531510028461e58f5a6356cd45087737998c5", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd0f8a3b559411650cb5ab4040d68033fa60d52/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd0f8a3b559411650cb5ab4040d68033fa60d52/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=fdd0f8a3b559411650cb5ab4040d68033fa60d52", "patch": "@@ -1,3 +1,4 @@\n+use cranelift_codegen::isa::TargetFrontendConfig;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::layout::{\n     FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOfHelpers,\n@@ -235,6 +236,7 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) cx: &'clif mut crate::CodegenCx<'tcx>,\n     pub(crate) module: &'m mut dyn Module,\n     pub(crate) tcx: TyCtxt<'tcx>,\n+    pub(crate) target_config: TargetFrontendConfig, // Cached from module\n     pub(crate) pointer_type: Type, // Cached from module\n     pub(crate) constants_cx: ConstantCx,\n "}, {"sha": "8eb07bffe9eb463141d260b1cc2f585c2dbdb1ac", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fdd0f8a3b559411650cb5ab4040d68033fa60d52/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd0f8a3b559411650cb5ab4040d68033fa60d52/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=fdd0f8a3b559411650cb5ab4040d68033fa60d52", "patch": "@@ -503,10 +503,10 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n \n             if intrinsic == sym::copy_nonoverlapping {\n                 // FIXME emit_small_memcpy\n-                fx.bcx.call_memcpy(fx.module.target_config(), dst, src, byte_amount);\n+                fx.bcx.call_memcpy(fx.target_config, dst, src, byte_amount);\n             } else {\n                 // FIXME emit_small_memmove\n-                fx.bcx.call_memmove(fx.module.target_config(), dst, src, byte_amount);\n+                fx.bcx.call_memmove(fx.target_config, dst, src, byte_amount);\n             }\n         };\n         // NOTE: the volatile variants have src and dst swapped\n@@ -522,10 +522,10 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             // FIXME make the copy actually volatile when using emit_small_mem{cpy,move}\n             if intrinsic == sym::volatile_copy_nonoverlapping_memory {\n                 // FIXME emit_small_memcpy\n-                fx.bcx.call_memcpy(fx.module.target_config(), dst, src, byte_amount);\n+                fx.bcx.call_memcpy(fx.target_config, dst, src, byte_amount);\n             } else {\n                 // FIXME emit_small_memmove\n-                fx.bcx.call_memmove(fx.module.target_config(), dst, src, byte_amount);\n+                fx.bcx.call_memmove(fx.target_config, dst, src, byte_amount);\n             }\n         };\n         size_of_val, <T> (c ptr) {\n@@ -673,7 +673,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             let dst_ptr = dst.load_scalar(fx);\n             // FIXME make the memset actually volatile when switching to emit_small_memset\n             // FIXME use emit_small_memset\n-            fx.bcx.call_memset(fx.module.target_config(), dst_ptr, val, count);\n+            fx.bcx.call_memset(fx.target_config, dst_ptr, val, count);\n         };\n         ctlz | ctlz_nonzero, <T> (v arg) {\n             // FIXME trap on `ctlz_nonzero` with zero arg."}, {"sha": "52541d5b4964015d866f6b456ea5216c8ff45549", "filename": "src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd0f8a3b559411650cb5ab4040d68033fa60d52/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd0f8a3b559411650cb5ab4040d68033fa60d52/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=fdd0f8a3b559411650cb5ab4040d68033fa60d52", "patch": "@@ -601,7 +601,7 @@ impl<'tcx> CPlace<'tcx> {\n                 let src_align = src_layout.align.abi.bytes() as u8;\n                 let dst_align = dst_layout.align.abi.bytes() as u8;\n                 fx.bcx.emit_small_memory_copy(\n-                    fx.module.target_config(),\n+                    fx.target_config,\n                     to_addr,\n                     from_addr,\n                     size,"}]}