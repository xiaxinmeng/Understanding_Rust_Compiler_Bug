{"sha": "06e785548b1367c581c0713fa66635e074b2425e", "node_id": "C_kwDOAAsO6NoAKDA2ZTc4NTU0OGIxMzY3YzU4MWMwNzEzZmE2NjYzNWUwNzRiMjQyNWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-28T01:05:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-28T01:05:29Z"}, "message": "Auto merge of #101692 - cjgillot:generator-lazy-witness, r=oli-obk\n\nCompute generator saved locals on MIR\n\nGenerators are currently type-checked by introducing a `witness` type variable, which is unified with a `GeneratorWitness(captured types)` whose purpose is to ensure that the auto traits correctly migrate from the captured types to the `witness` type.  This requires computing the captured types on HIR during type-checking, only to re-do it on MIR later.\n\nThis PR proposes to drop the HIR-based computation, and only keep the MIR one.  This is done in 3 steps.\n1. During type-checking, the `witness` type variable is never unified.  This allows to stall all the obligations that depend on it until the end of type-checking.  Then, the stalled obligations are marked as successful, and saved into the typeck results for later verification.\n2. At type-checking writeback, `witness` is replaced by `GeneratorWitnessMIR(def_id, substs)`.  From this point on, all trait selection involving `GeneratorWitnessMIR` will fetch the MIR-computed locals, similar to what opaque types do.  There is no lifetime to be preserved here: we consider all the lifetimes appearing in this witness type to be higher-ranked.\n3. After borrowck, the stashed obligations are verified against the actually computed types, in the `check_generator_obligations` query.  If any obligation was wrongly marked as fulfilled in step 1, it should be reported here.\n\nThere are still many issues:\n- ~I am not too happy having to filter out some locals from the checked bounds, I think this is MIR building that introduces raw pointers polluting the analysis;~ solved by a check specific to static variables.\n- the diagnostics for captured types don't show where they are used/dropped;\n- I do not attempt to support chalk.\n\ncc `@eholk` `@jyn514` for the drop-tracking work\nr? `@oli-obk` as you warned me of potential unsoundness", "tree": {"sha": "f06f3fa1fd8b4d87aeb72d10230c5a978f571efe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f06f3fa1fd8b4d87aeb72d10230c5a978f571efe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06e785548b1367c581c0713fa66635e074b2425e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06e785548b1367c581c0713fa66635e074b2425e", "html_url": "https://github.com/rust-lang/rust/commit/06e785548b1367c581c0713fa66635e074b2425e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06e785548b1367c581c0713fa66635e074b2425e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "997fe0d57e8cd5025011340c91f26dbc4a87a881", "url": "https://api.github.com/repos/rust-lang/rust/commits/997fe0d57e8cd5025011340c91f26dbc4a87a881", "html_url": "https://github.com/rust-lang/rust/commit/997fe0d57e8cd5025011340c91f26dbc4a87a881"}, {"sha": "ba6d3e7e9d0c2b2cad77d7da2f2d6b4158ab2ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6d3e7e9d0c2b2cad77d7da2f2d6b4158ab2ad0", "html_url": "https://github.com/rust-lang/rust/commit/ba6d3e7e9d0c2b2cad77d7da2f2d6b4158ab2ad0"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "8e921839e8b2fd48ac55a06530d3f33ee8a35390", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e785548b1367c581c0713fa66635e074b2425e/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e785548b1367c581c0713fa66635e074b2425e/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=06e785548b1367c581c0713fa66635e074b2425e", "patch": "@@ -1419,6 +1419,7 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n             | ty::FnDef(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Closure(..)\n             | ty::Never\n             | ty::Tuple(_)"}]}