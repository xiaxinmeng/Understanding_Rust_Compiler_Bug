{"sha": "72cab5e3263343502aeb1f21a8a17c7f7e917a50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyY2FiNWUzMjYzMzQzNTAyYWViMWYyMWE4YTE3YzdmN2U5MTdhNTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-13T20:36:49Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-13T20:36:49Z"}, "message": "Split out char searcher from MultiCharSearcher", "tree": {"sha": "526f3364ffbb5d33c284cf7cc7c77ffb83c490f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/526f3364ffbb5d33c284cf7cc7c77ffb83c490f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72cab5e3263343502aeb1f21a8a17c7f7e917a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72cab5e3263343502aeb1f21a8a17c7f7e917a50", "html_url": "https://github.com/rust-lang/rust/commit/72cab5e3263343502aeb1f21a8a17c7f7e917a50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72cab5e3263343502aeb1f21a8a17c7f7e917a50/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4550ea79f004215af1490e2c269a16d46b890b9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4550ea79f004215af1490e2c269a16d46b890b9f", "html_url": "https://github.com/rust-lang/rust/commit/4550ea79f004215af1490e2c269a16d46b890b9f"}], "stats": {"total": 87, "additions": 58, "deletions": 29}, "files": [{"sha": "9dc828518278edc14d4892239cf798c559f77e1c", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 58, "deletions": 29, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/72cab5e3263343502aeb1f21a8a17c7f7e917a50/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cab5e3263343502aeb1f21a8a17c7f7e917a50/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=72cab5e3263343502aeb1f21a8a17c7f7e917a50", "patch": "@@ -235,54 +235,49 @@ pub unsafe trait ReverseSearcher<'a>: Searcher<'a> {\n pub trait DoubleEndedSearcher<'a>: ReverseSearcher<'a> {}\n \n /////////////////////////////////////////////////////////////////////////////\n-// Impl for a CharEq wrapper\n+// Impl for a MultiCharEq wrapper\n /////////////////////////////////////////////////////////////////////////////\n \n #[doc(hidden)]\n-trait CharEq {\n+trait MultiCharEq {\n     fn matches(&mut self, c: char) -> bool;\n }\n \n-impl CharEq for char {\n-    #[inline]\n-    fn matches(&mut self, c: char) -> bool { *self == c }\n-}\n-\n-impl<F> CharEq for F where F: FnMut(char) -> bool {\n+impl<F> MultiCharEq for F where F: FnMut(char) -> bool {\n     #[inline]\n     fn matches(&mut self, c: char) -> bool { (*self)(c) }\n }\n \n-impl<'a> CharEq for &'a [char] {\n+impl<'a> MultiCharEq for &'a [char] {\n     #[inline]\n     fn matches(&mut self, c: char) -> bool {\n-        self.iter().any(|&m| { let mut m = m; m.matches(c) })\n+        self.iter().any(|&m| { m == c })\n     }\n }\n \n-struct CharEqPattern<C: CharEq>(C);\n+struct MultiCharEqPattern<C: MultiCharEq>(C);\n \n #[derive(Clone, Debug)]\n-struct CharEqSearcher<'a, C: CharEq> {\n+struct MultiCharEqSearcher<'a, C: MultiCharEq> {\n     char_eq: C,\n     haystack: &'a str,\n     char_indices: super::CharIndices<'a>,\n }\n \n-impl<'a, C: CharEq> Pattern<'a> for CharEqPattern<C> {\n-    type Searcher = CharEqSearcher<'a, C>;\n+impl<'a, C: MultiCharEq> Pattern<'a> for MultiCharEqPattern<C> {\n+    type Searcher = MultiCharEqSearcher<'a, C>;\n \n     #[inline]\n-    fn into_searcher(self, haystack: &'a str) -> CharEqSearcher<'a, C> {\n-        CharEqSearcher {\n+    fn into_searcher(self, haystack: &'a str) -> MultiCharEqSearcher<'a, C> {\n+        MultiCharEqSearcher {\n             haystack,\n             char_eq: self.0,\n             char_indices: haystack.char_indices(),\n         }\n     }\n }\n \n-unsafe impl<'a, C: CharEq> Searcher<'a> for CharEqSearcher<'a, C> {\n+unsafe impl<'a, C: MultiCharEq> Searcher<'a> for MultiCharEqSearcher<'a, C> {\n     #[inline]\n     fn haystack(&self) -> &'a str {\n         self.haystack\n@@ -307,7 +302,7 @@ unsafe impl<'a, C: CharEq> Searcher<'a> for CharEqSearcher<'a, C> {\n     }\n }\n \n-unsafe impl<'a, C: CharEq> ReverseSearcher<'a> for CharEqSearcher<'a, C> {\n+unsafe impl<'a, C: MultiCharEq> ReverseSearcher<'a> for MultiCharEqSearcher<'a, C> {\n     #[inline]\n     fn next_back(&mut self) -> SearchStep {\n         let s = &mut self.char_indices;\n@@ -327,7 +322,7 @@ unsafe impl<'a, C: CharEq> ReverseSearcher<'a> for CharEqSearcher<'a, C> {\n     }\n }\n \n-impl<'a, C: CharEq> DoubleEndedSearcher<'a> for CharEqSearcher<'a, C> {}\n+impl<'a, C: MultiCharEq> DoubleEndedSearcher<'a> for MultiCharEqSearcher<'a, C> {}\n \n /////////////////////////////////////////////////////////////////////////////\n \n@@ -400,14 +395,40 @@ macro_rules! searcher_methods {\n \n /// Associated type for `<char as Pattern<'a>>::Searcher`.\n #[derive(Clone, Debug)]\n-pub struct CharSearcher<'a>(<CharEqPattern<char> as Pattern<'a>>::Searcher);\n+pub struct CharSearcher<'a>(&'a str);\n \n unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n-    searcher_methods!(forward);\n+    #[inline]\n+    fn haystack(&self) -> &'a str {\n+        unimplemented!();\n+    }\n+    #[inline]\n+    fn next(&mut self) -> SearchStep {\n+        unimplemented!();\n+    }\n+    #[inline]\n+    fn next_match(&mut self) -> Option<(usize, usize)> {\n+        unimplemented!();\n+    }\n+    #[inline]\n+    fn next_reject(&mut self) -> Option<(usize, usize)> {\n+        unimplemented!();\n+    }\n }\n \n unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n-    searcher_methods!(reverse);\n+    #[inline]\n+    fn next_back(&mut self) -> SearchStep {\n+        unimplemented!();\n+    }\n+    #[inline]\n+    fn next_match_back(&mut self) -> Option<(usize, usize)> {\n+        unimplemented!();\n+    }\n+    #[inline]\n+    fn next_reject_back(&mut self) -> Option<(usize, usize)> {\n+        unimplemented!();\n+    }\n }\n \n impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n@@ -418,7 +439,7 @@ impl<'a> Pattern<'a> for char {\n \n     #[inline]\n     fn into_searcher(self, haystack: &'a str) -> Self::Searcher {\n-        CharSearcher(CharEqPattern(self).into_searcher(haystack))\n+        CharSearcher(haystack)\n     }\n \n     #[inline]\n@@ -433,13 +454,21 @@ impl<'a> Pattern<'a> for char {\n \n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n-        CharEqPattern(self).is_prefix_of(haystack)\n+        if let Some(ch) = haystack.chars().next() {\n+            self == ch\n+        } else {\n+            false\n+        }\n     }\n \n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool where Self::Searcher: ReverseSearcher<'a>\n     {\n-        CharEqPattern(self).is_suffix_of(haystack)\n+        if let Some(ch) = haystack.chars().next_back() {\n+            self == ch\n+        } else {\n+            false\n+        }\n     }\n }\n \n@@ -451,7 +480,7 @@ impl<'a> Pattern<'a> for char {\n \n /// Associated type for `<&[char] as Pattern<'a>>::Searcher`.\n #[derive(Clone, Debug)]\n-pub struct CharSliceSearcher<'a, 'b>(<CharEqPattern<&'b [char]> as Pattern<'a>>::Searcher);\n+pub struct CharSliceSearcher<'a, 'b>(<MultiCharEqPattern<&'b [char]> as Pattern<'a>>::Searcher);\n \n unsafe impl<'a, 'b> Searcher<'a> for CharSliceSearcher<'a, 'b> {\n     searcher_methods!(forward);\n@@ -465,7 +494,7 @@ impl<'a, 'b> DoubleEndedSearcher<'a> for CharSliceSearcher<'a, 'b> {}\n \n /// Searches for chars that are equal to any of the chars in the array\n impl<'a, 'b> Pattern<'a> for &'b [char] {\n-    pattern_methods!(CharSliceSearcher<'a, 'b>, CharEqPattern, CharSliceSearcher);\n+    pattern_methods!(CharSliceSearcher<'a, 'b>, MultiCharEqPattern, CharSliceSearcher);\n }\n \n /////////////////////////////////////////////////////////////////////////////\n@@ -474,7 +503,7 @@ impl<'a, 'b> Pattern<'a> for &'b [char] {\n \n /// Associated type for `<F as Pattern<'a>>::Searcher`.\n #[derive(Clone)]\n-pub struct CharPredicateSearcher<'a, F>(<CharEqPattern<F> as Pattern<'a>>::Searcher)\n+pub struct CharPredicateSearcher<'a, F>(<MultiCharEqPattern<F> as Pattern<'a>>::Searcher)\n     where F: FnMut(char) -> bool;\n \n impl<'a, F> fmt::Debug for CharPredicateSearcher<'a, F>\n@@ -504,7 +533,7 @@ impl<'a, F> DoubleEndedSearcher<'a> for CharPredicateSearcher<'a, F>\n \n /// Searches for chars that match the given predicate\n impl<'a, F> Pattern<'a> for F where F: FnMut(char) -> bool {\n-    pattern_methods!(CharPredicateSearcher<'a, F>, CharEqPattern, CharPredicateSearcher);\n+    pattern_methods!(CharPredicateSearcher<'a, F>, MultiCharEqPattern, CharPredicateSearcher);\n }\n \n /////////////////////////////////////////////////////////////////////////////"}]}