{"sha": "f212ba6d6d60963c8101bb24fc3e53fca80c046f", "node_id": "C_kwDOAAsO6NoAKGYyMTJiYTZkNmQ2MDk2M2M4MTAxYmIyNGZjM2U1M2ZjYTgwYzA0NmY", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-05-16T16:37:26Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-05-31T16:41:51Z"}, "message": "use c literals in library", "tree": {"sha": "2d8f46574dad267ef2c0817c46e871923e261236", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d8f46574dad267ef2c0817c46e871923e261236"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f212ba6d6d60963c8101bb24fc3e53fca80c046f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f212ba6d6d60963c8101bb24fc3e53fca80c046f", "html_url": "https://github.com/rust-lang/rust/commit/f212ba6d6d60963c8101bb24fc3e53fca80c046f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f212ba6d6d60963c8101bb24fc3e53fca80c046f/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17561ffc90c900cb7d0e96b00c6381244764ef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17561ffc90c900cb7d0e96b00c6381244764ef7", "html_url": "https://github.com/rust-lang/rust/commit/a17561ffc90c900cb7d0e96b00c6381244764ef7"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "d53f1a2b2fff17a89dfd7558121ef07988c69214", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=f212ba6d6d60963c8101bb24fc3e53fca80c046f", "patch": "@@ -240,6 +240,7 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n+#![feature(c_str_literals)]\n #![feature(c_unwind)]\n #![feature(cfg_target_thread_local)]\n #![feature(concat_idents)]"}, {"sha": "1e4c2445232db4840fe07b8645cb5adbc7cc0752", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=f212ba6d6d60963c8101bb24fc3e53fca80c046f", "patch": "@@ -242,13 +242,13 @@ mod imp {\n         let mut res = Vec::new();\n \n         unsafe {\n-            let process_info_sel = sel_registerName(\"processInfo\\0\".as_ptr());\n-            let arguments_sel = sel_registerName(\"arguments\\0\".as_ptr());\n-            let utf8_sel = sel_registerName(\"UTF8String\\0\".as_ptr());\n-            let count_sel = sel_registerName(\"count\\0\".as_ptr());\n-            let object_at_sel = sel_registerName(\"objectAtIndex:\\0\".as_ptr());\n+            let process_info_sel = sel_registerName(c\"processInfo\".as_ptr());\n+            let arguments_sel = sel_registerName(c\"arguments\".as_ptr());\n+            let utf8_sel = sel_registerName(c\"UTF8String\".as_ptr());\n+            let count_sel = sel_registerName(c\"count\".as_ptr());\n+            let object_at_sel = sel_registerName(c\"objectAtIndex:\".as_ptr());\n \n-            let klass = objc_getClass(\"NSProcessInfo\\0\".as_ptr());\n+            let klass = objc_getClass(c\"NSProcessInfo\".as_ptr());\n             let info = objc_msgSend(klass, process_info_sel);\n             let args = objc_msgSend(info, arguments_sel);\n "}, {"sha": "0e5691d40d176ec4b92a0fdde98a836ba855ef50", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=f212ba6d6d60963c8101bb24fc3e53fca80c046f", "patch": "@@ -1063,7 +1063,7 @@ impl File {\n         cfg_has_statx! {\n             if let Some(ret) = unsafe { try_statx(\n                 fd,\n-                b\"\\0\" as *const _ as *const c_char,\n+                c\"\".as_ptr() as *const c_char,\n                 libc::AT_EMPTY_PATH | libc::AT_STATX_SYNC_AS_STAT,\n                 libc::STATX_ALL,\n             ) } {"}, {"sha": "54e2f20b31703eab70fde0dd4be5f5f39d49193e", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=f212ba6d6d60963c8101bb24fc3e53fca80c046f", "patch": "@@ -1,6 +1,5 @@\n #![allow(missing_docs, nonstandard_style)]\n \n-use crate::ffi::CStr;\n use crate::io::ErrorKind;\n \n pub use self::rand::hashmap_random_keys;\n@@ -75,7 +74,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n     // thread-id for the main thread and so renaming the main thread will rename the\n     // process and we only want to enable this on platforms we've tested.\n     if cfg!(target_os = \"macos\") {\n-        thread::Thread::set_name(&CStr::from_bytes_with_nul_unchecked(b\"main\\0\"));\n+        thread::Thread::set_name(&c\"main\");\n     }\n \n     unsafe fn sanitize_standard_fds() {\n@@ -121,7 +120,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n                 if pfd.revents & libc::POLLNVAL == 0 {\n                     continue;\n                 }\n-                if open64(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n+                if open64(c\"/dev/null\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n                     // If the stream is closed but we failed to reopen it, abort the\n                     // process. Otherwise we wouldn't preserve the safety of\n                     // operations on the corresponding Rust object Stdin, Stdout, or\n@@ -151,7 +150,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n             use libc::open64;\n             for fd in 0..3 {\n                 if libc::fcntl(fd, libc::F_GETFD) == -1 && errno() == libc::EBADF {\n-                    if open64(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n+                    if open64(c\"/dev/null\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n                         // If the stream is closed but we failed to reopen it, abort the\n                         // process. Otherwise we wouldn't preserve the safety of\n                         // operations on the corresponding Rust object Stdin, Stdout, or"}, {"sha": "5f316b12b625d0389816d45f9f34415bbb05ac24", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=f212ba6d6d60963c8101bb24fc3e53fca80c046f", "patch": "@@ -24,11 +24,11 @@ cfg_if::cfg_if! {\n     if #[cfg(target_os = \"fuchsia\")] {\n         // fuchsia doesn't have /dev/null\n     } else if #[cfg(target_os = \"redox\")] {\n-        const DEV_NULL: &str = \"null:\\0\";\n+        const DEV_NULL: &CStr = c\"null:\";\n     } else if #[cfg(target_os = \"vxworks\")] {\n-        const DEV_NULL: &str = \"/null\\0\";\n+        const DEV_NULL: &CStr = c\"/null\";\n     } else {\n-        const DEV_NULL: &str = \"/dev/null\\0\";\n+        const DEV_NULL: &CStr = c\"/dev/null\";\n     }\n }\n \n@@ -474,8 +474,7 @@ impl Stdio {\n                 let mut opts = OpenOptions::new();\n                 opts.read(readable);\n                 opts.write(!readable);\n-                let path = unsafe { CStr::from_ptr(DEV_NULL.as_ptr() as *const _) };\n-                let fd = File::open_c(&path, &opts)?;\n+                let fd = File::open_c(DEV_NULL, &opts)?;\n                 Ok((ChildStdio::Owned(fd.into_inner()), None))\n             }\n "}, {"sha": "878af5088d9f49952c042fd44863edafd646b53f", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=f212ba6d6d60963c8101bb24fc3e53fca80c046f", "patch": "@@ -163,10 +163,9 @@ impl Thread {\n     #[cfg(target_os = \"netbsd\")]\n     pub fn set_name(name: &CStr) {\n         unsafe {\n-            let cname = CStr::from_bytes_with_nul_unchecked(b\"%s\\0\".as_slice());\n             let res = libc::pthread_setname_np(\n                 libc::pthread_self(),\n-                cname.as_ptr(),\n+                c\"%s\".as_ptr(),\n                 name.as_ptr() as *mut libc::c_void,\n             );\n             debug_assert_eq!(res, 0);"}, {"sha": "07b0610d463fa07c2b66aab21c92fcefff10e4ed", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=f212ba6d6d60963c8101bb24fc3e53fca80c046f", "patch": "@@ -317,7 +317,7 @@ pub unsafe fn NtWriteFile(\n // Functions that aren't available on every version of Windows that we support,\n // but we still use them and just provide some form of a fallback implementation.\n compat_fn_with_fallback! {\n-    pub static KERNEL32: &CStr = ansi_str!(\"kernel32\");\n+    pub static KERNEL32: &CStr = c\"kernel32\";\n \n     // >= Win10 1607\n     // https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreaddescription\n@@ -350,7 +350,7 @@ compat_fn_optional! {\n }\n \n compat_fn_with_fallback! {\n-    pub static NTDLL: &CStr = ansi_str!(\"ntdll\");\n+    pub static NTDLL: &CStr = c\"ntdll\";\n \n     pub fn NtCreateKeyedEvent(\n         KeyedEventHandle: LPHANDLE,"}, {"sha": "649cc4bfdbf1ad0a6a0875822702f50421db0023", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=f212ba6d6d60963c8101bb24fc3e53fca80c046f", "patch": "@@ -228,9 +228,9 @@ macro_rules! compat_fn_optional {\n /// Load all needed functions from \"api-ms-win-core-synch-l1-2-0\".\n pub(super) fn load_synch_functions() {\n     fn try_load() -> Option<()> {\n-        const MODULE_NAME: &CStr = ansi_str!(\"api-ms-win-core-synch-l1-2-0\");\n-        const WAIT_ON_ADDRESS: &CStr = ansi_str!(\"WaitOnAddress\");\n-        const WAKE_BY_ADDRESS_SINGLE: &CStr = ansi_str!(\"WakeByAddressSingle\");\n+        const MODULE_NAME: &CStr = c\"api-ms-win-core-synch-l1-2-0\";\n+        const WAIT_ON_ADDRESS: &CStr = c\"WaitOnAddress\";\n+        const WAKE_BY_ADDRESS_SINGLE: &CStr = c\"WakeByAddressSingle\";\n \n         // Try loading the library and all the required functions.\n         // If any step fails, then they all fail."}, {"sha": "b11c89622032eba7f8859d5844036b8c33b4596b", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f212ba6d6d60963c8101bb24fc3e53fca80c046f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=f212ba6d6d60963c8101bb24fc3e53fca80c046f", "patch": "@@ -1,6 +1,6 @@\n #![allow(missing_docs, nonstandard_style)]\n \n-use crate::ffi::{CStr, OsStr, OsString};\n+use crate::ffi::{OsStr, OsString};\n use crate::io::ErrorKind;\n use crate::mem::MaybeUninit;\n use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n@@ -51,7 +51,7 @@ pub unsafe fn init(_argc: isize, _argv: *const *const u8, _sigpipe: u8) {\n \n     // Normally, `thread::spawn` will call `Thread::set_name` but since this thread already\n     // exists, we have to call it ourselves.\n-    thread::Thread::set_name(&CStr::from_bytes_with_nul_unchecked(b\"main\\0\"));\n+    thread::Thread::set_name(&c\"main\");\n }\n \n // SAFETY: must be called only once during runtime cleanup."}, {"sha": "abaed95a084266322b854dc8d5d88c195dcd2827", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f212ba6d6d60963c8101bb24fc3e53fca80c046f/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f212ba6d6d60963c8101bb24fc3e53fca80c046f/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=f212ba6d6d60963c8101bb24fc3e53fca80c046f", "patch": "@@ -132,7 +132,6 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"crossbeam-epoch\",\n     \"crossbeam-utils\",\n     \"crypto-common\",\n-    \"cstr\",\n     \"datafrog\",\n     \"derive_more\",\n     \"digest\","}]}