{"sha": "dcb0c02e3afa8e163379b56a943f04e6e4879dd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYjBjMDJlM2FmYThlMTYzMzc5YjU2YTk0M2YwNGU2ZTQ4NzlkZDY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-14T17:40:19Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-15T06:49:55Z"}, "message": "Remove blacklist, instead mark `Sized` as non-enumerable\n\nThis seems to be enough to prevent hanging in rust-analyzer, Chalk and the rustc\nrepo.", "tree": {"sha": "d9d029c027f550318544b8bbaa4b31b05f7494f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9d029c027f550318544b8bbaa4b31b05f7494f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcb0c02e3afa8e163379b56a943f04e6e4879dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb0c02e3afa8e163379b56a943f04e6e4879dd6", "html_url": "https://github.com/rust-lang/rust/commit/dcb0c02e3afa8e163379b56a943f04e6e4879dd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcb0c02e3afa8e163379b56a943f04e6e4879dd6/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2bce9e7ebd1879825f74aa34329911a6d3efa79", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2bce9e7ebd1879825f74aa34329911a6d3efa79", "html_url": "https://github.com/rust-lang/rust/commit/e2bce9e7ebd1879825f74aa34329911a6d3efa79"}], "stats": {"total": 20, "additions": 3, "deletions": 17}, "files": [{"sha": "9e7ae07247aedbe08f269103eebbf72650a95564", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dcb0c02e3afa8e163379b56a943f04e6e4879dd6/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcb0c02e3afa8e163379b56a943f04e6e4879dd6/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=dcb0c02e3afa8e163379b56a943f04e6e4879dd6", "patch": "@@ -276,11 +276,6 @@ impl ToChalk for Arc<super::TraitEnvironment> {\n                 // for env, we just ignore errors\n                 continue;\n             }\n-            if let GenericPredicate::Implemented(trait_ref) = pred {\n-                if blacklisted_trait(db, trait_ref.trait_) {\n-                    continue;\n-                }\n-            }\n             clauses.push(pred.clone().to_chalk(db).cast());\n         }\n         chalk_ir::Environment::new().add_clauses(clauses)\n@@ -322,10 +317,10 @@ fn make_binders<T>(value: T, num_vars: usize) -> chalk_ir::Binders<T> {\n     }\n }\n \n-fn blacklisted_trait(db: &impl HirDatabase, trait_: Trait) -> bool {\n+fn is_non_enumerable_trait(db: &impl HirDatabase, trait_: Trait) -> bool {\n     let name = trait_.name(db).unwrap_or_else(crate::Name::missing).to_string();\n     match &*name {\n-        \"Send\" | \"Sync\" | \"Sized\" | \"Fn\" | \"FnMut\" | \"FnOnce\" => true,\n+        \"Sized\" => true,\n         _ => false,\n     }\n }\n@@ -343,11 +338,6 @@ fn convert_where_clauses(\n             // anyway), otherwise Chalk can easily get into slow situations\n             return vec![pred.clone().subst(substs).to_chalk(db)];\n         }\n-        if let GenericPredicate::Implemented(trait_ref) = pred {\n-            if blacklisted_trait(db, trait_ref.trait_) {\n-                continue;\n-            }\n-        }\n         result.push(pred.clone().subst(substs).to_chalk(db));\n     }\n     result\n@@ -375,10 +365,6 @@ where\n             return Vec::new();\n         }\n         let trait_: Trait = from_chalk(self.db, trait_id);\n-        let blacklisted = blacklisted_trait(self.db, trait_);\n-        if blacklisted {\n-            return Vec::new();\n-        }\n         let result: Vec<_> = self\n             .db\n             .impls_for_trait(self.krate, trait_)\n@@ -477,8 +463,8 @@ pub(crate) fn trait_datum_query(\n     let flags = chalk_rust_ir::TraitFlags {\n         auto: trait_.is_auto(db),\n         upstream: trait_.module(db).krate(db) != Some(krate),\n+        non_enumerable: is_non_enumerable_trait(db, trait_),\n         // FIXME set these flags correctly\n-        non_enumerable: false,\n         marker: false,\n         fundamental: false,\n     };"}]}