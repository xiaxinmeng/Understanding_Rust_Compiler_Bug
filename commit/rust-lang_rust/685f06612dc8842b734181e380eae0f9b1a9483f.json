{"sha": "685f06612dc8842b734181e380eae0f9b1a9483f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NWYwNjYxMmRjODg0MmI3MzQxODFlMzgwZWFlMGY5YjFhOTQ4M2Y=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-14T21:21:40Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-14T21:21:40Z"}, "message": "Add a new error type for the new method", "tree": {"sha": "39a4aac61fd7fca05a0e9fe5b97b1d8f614b2d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39a4aac61fd7fca05a0e9fe5b97b1d8f614b2d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/685f06612dc8842b734181e380eae0f9b1a9483f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/685f06612dc8842b734181e380eae0f9b1a9483f", "html_url": "https://github.com/rust-lang/rust/commit/685f06612dc8842b734181e380eae0f9b1a9483f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/685f06612dc8842b734181e380eae0f9b1a9483f/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f4eb27a0dc5d17e4a74f1a2d71a8f5a30916e3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4eb27a0dc5d17e4a74f1a2d71a8f5a30916e3a", "html_url": "https://github.com/rust-lang/rust/commit/5f4eb27a0dc5d17e4a74f1a2d71a8f5a30916e3a"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "956100bca6a55b50cc6e55a1db9ea085bf82366e", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/685f06612dc8842b734181e380eae0f9b1a9483f/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685f06612dc8842b734181e380eae0f9b1a9483f/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=685f06612dc8842b734181e380eae0f9b1a9483f", "patch": "@@ -260,6 +260,32 @@ pub struct FromBytesWithNulError {\n     kind: FromBytesWithNulErrorKind,\n }\n \n+/// An error indicating that a nul byte was not in the expected position.\n+///\n+/// The vector used to create a [`CString`] must have one and only one nul byte,\n+/// positioned at the end.\n+///\n+/// This error is created by the [`from_vec_with_nul`] method on [`CString`].\n+/// See its documentation for more.\n+///\n+/// [`CString`]: struct.CString.html\n+/// [`from_vec_with_nul`]: struct.CString.html#method.from_vec_with_nul\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cstring_from_vec_with_nul)]\n+/// use std::ffi::{CString, FromVecWithNulError};\n+///\n+/// let _: FromVecWithNulError = CString::from_vec_with_nul(b\"f\\0oo\".to_vec()).unwrap_err();\n+/// ```\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+pub struct FromVecWithNulError {\n+    error_kind: FromBytesWithNulErrorKind,\n+    bytes: Vec<u8>,\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug)]\n enum FromBytesWithNulErrorKind {\n     InteriorNul(usize),\n@@ -275,6 +301,59 @@ impl FromBytesWithNulError {\n     }\n }\n \n+#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+impl FromVecWithNulError {\n+    /// Returns a slice of [`u8`]s bytes that were attempted to convert to a [`CString`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(cstring_from_vec_with_nul)]\n+    /// use std::ffi::CString;\n+    ///\n+    /// // Some invalid bytes in a vector\n+    /// let bytes = b\"f\\0oo\".to_vec();\n+    ///\n+    /// let value = CString::from_vec_with_nul(bytes.clone());\n+    ///\n+    /// assert_eq!(&bytes[..], value.unwrap_err().as_bytes());\n+    /// ```\n+    ///\n+    /// [`CString`]: struct.CString.html\n+    pub fn as_bytes(&self) -> &[u8] {\n+        &self.bytes[..]\n+    }\n+\n+    /// Returns the bytes that were attempted to convert to a [`CString`].\n+    ///\n+    /// This method is carefully constructed to avoid allocation. It will\n+    /// consume the error, moving out the bytes, so that a copy of the bytes\n+    /// does not need to be made.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(cstring_from_vec_with_nul)]\n+    /// use std::ffi::CString;\n+    ///\n+    /// // Some invalid bytes in a vector\n+    /// let bytes = b\"f\\0oo\".to_vec();\n+    ///\n+    /// let value = CString::from_vec_with_nul(bytes.clone());\n+    ///\n+    /// assert_eq!(bytes, value.unwrap_err().into_bytes());\n+    /// ```\n+    ///\n+    /// [`CString`]: struct.CString.html\n+    pub fn into_bytes(self) -> Vec<u8> {\n+        self.bytes\n+    }\n+}\n+\n /// An error indicating invalid UTF-8 when converting a [`CString`] into a [`String`].\n ///\n /// `CString` is just a wrapper over a buffer of bytes with a nul\n@@ -1039,6 +1118,23 @@ impl fmt::Display for FromBytesWithNulError {\n     }\n }\n \n+#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+impl Error for FromVecWithNulError {}\n+\n+#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+impl fmt::Display for FromVecWithNulError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self.error_kind {\n+            FromBytesWithNulErrorKind::InteriorNul(pos) => {\n+                write!(f, \"data provided contains an interior nul byte at pos {}\", pos)\n+            }\n+            FromBytesWithNulErrorKind::NotNulTerminated => {\n+                write!(f, \"data provided is not nul terminated\")\n+            }\n+        }\n+    }\n+}\n+\n impl IntoStringError {\n     /// Consumes this error, returning original [`CString`] which generated the\n     /// error."}, {"sha": "f442d7fde1a5e9464fe0e6116e2dc204930cce39", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/685f06612dc8842b734181e380eae0f9b1a9483f/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685f06612dc8842b734181e380eae0f9b1a9483f/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=685f06612dc8842b734181e380eae0f9b1a9483f", "patch": "@@ -157,6 +157,8 @@\n \n #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n pub use self::c_str::FromBytesWithNulError;\n+#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+pub use self::c_str::FromVecWithNulError;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::c_str::{CStr, CString, IntoStringError, NulError};\n "}]}