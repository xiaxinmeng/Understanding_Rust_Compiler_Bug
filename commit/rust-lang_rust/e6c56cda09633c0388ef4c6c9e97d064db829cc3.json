{"sha": "e6c56cda09633c0388ef4c6c9e97d064db829cc3", "node_id": "C_kwDOAAsO6NoAKGU2YzU2Y2RhMDk2MzNjMDM4OGVmNGM2YzllOTdkMDY0ZGI4MjljYzM", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-03T23:41:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-03T23:41:39Z"}, "message": "review comments", "tree": {"sha": "9ddcc5d08ffd72ebab9df234fbb5e9313275ebf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ddcc5d08ffd72ebab9df234fbb5e9313275ebf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6c56cda09633c0388ef4c6c9e97d064db829cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c56cda09633c0388ef4c6c9e97d064db829cc3", "html_url": "https://github.com/rust-lang/rust/commit/e6c56cda09633c0388ef4c6c9e97d064db829cc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6c56cda09633c0388ef4c6c9e97d064db829cc3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da1360d981f272cc1c3aa81b1fa013fff5b2676d", "url": "https://api.github.com/repos/rust-lang/rust/commits/da1360d981f272cc1c3aa81b1fa013fff5b2676d", "html_url": "https://github.com/rust-lang/rust/commit/da1360d981f272cc1c3aa81b1fa013fff5b2676d"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "9f37b915b773a7e611f1aa6d0bc48bcd4a7a5d41", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e6c56cda09633c0388ef4c6c9e97d064db829cc3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c56cda09633c0388ef4c6c9e97d064db829cc3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=e6c56cda09633c0388ef4c6c9e97d064db829cc3", "patch": "@@ -606,12 +606,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                 }\n                             }\n                             Some((false, err_label_span, message)) => {\n-                                struct V {\n+                                struct BindingFinder {\n                                     span: Span,\n                                     hir_id: Option<hir::HirId>,\n                                 }\n \n-                                impl<'tcx> Visitor<'tcx> for V {\n+                                impl<'tcx> Visitor<'tcx> for BindingFinder {\n                                     fn visit_stmt(&mut self, s: &'tcx hir::Stmt<'tcx>) {\n                                         if let hir::StmtKind::Local(local) = s.kind {\n                                             if local.pat.span == self.span {\n@@ -622,20 +622,23 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                     }\n                                 }\n                                 let hir_map = self.infcx.tcx.hir();\n-                                let pat = loop {\n-                                    // Poor man's try block\n-                                    let def_id = self.body.source.def_id();\n-                                    let hir_id =\n-                                        hir_map.local_def_id_to_hir_id(def_id.as_local().unwrap());\n-                                    let node = hir_map.find(hir_id);\n-                                    let Some(hir::Node::Item(item)) = node else { break None; };\n-                                    let hir::ItemKind::Fn(.., body_id) = item.kind else { break None; };\n-                                    let body = self.infcx.tcx.hir().body(body_id);\n-                                    let mut v = V { span: err_label_span, hir_id: None };\n+                                let def_id = self.body.source.def_id();\n+                                let hir_id = hir_map.local_def_id_to_hir_id(def_id.expect_local());\n+                                let node = hir_map.find(hir_id);\n+                                let hir_id = if let Some(hir::Node::Item(item)) = node\n+                                    && let hir::ItemKind::Fn(.., body_id) = item.kind\n+                                {\n+                                    let body = hir_map.body(body_id);\n+                                    let mut v = BindingFinder {\n+                                        span: err_label_span,\n+                                        hir_id: None,\n+                                    };\n                                     v.visit_body(body);\n-                                    break v.hir_id;\n+                                    v.hir_id\n+                                } else {\n+                                    None\n                                 };\n-                                if let Some(hir_id) = pat\n+                                if let Some(hir_id) = hir_id\n                                     && let Some(hir::Node::Local(local)) = hir_map.find(hir_id)\n                                 {\n                                     let (changing, span, sugg) = match local.ty {"}]}