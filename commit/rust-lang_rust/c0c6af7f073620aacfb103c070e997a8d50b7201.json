{"sha": "c0c6af7f073620aacfb103c070e997a8d50b7201", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYzZhZjdmMDczNjIwYWFjZmIxMDNjMDcwZTk5N2E4ZDUwYjcyMDE=", "commit": {"author": {"name": "Garming Sam", "email": "garming_sam@outlook.com", "date": "2015-08-06T07:55:27Z"}, "committer": {"name": "Garming Sam", "email": "garming_sam@outlook.com", "date": "2015-08-09T09:16:21Z"}, "message": "Add operator precedence for pretty printer\n\nPreviously it just added parentheses in excess.\ne.g. ((1 + 2) + 3) + 4", "tree": {"sha": "83ad67bd244da073a54d5e6a46720d477a88c05f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83ad67bd244da073a54d5e6a46720d477a88c05f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0c6af7f073620aacfb103c070e997a8d50b7201", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c6af7f073620aacfb103c070e997a8d50b7201", "html_url": "https://github.com/rust-lang/rust/commit/c0c6af7f073620aacfb103c070e997a8d50b7201", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0c6af7f073620aacfb103c070e997a8d50b7201/comments", "author": {"login": "GSam", "id": 1924133, "node_id": "MDQ6VXNlcjE5MjQxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1924133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GSam", "html_url": "https://github.com/GSam", "followers_url": "https://api.github.com/users/GSam/followers", "following_url": "https://api.github.com/users/GSam/following{/other_user}", "gists_url": "https://api.github.com/users/GSam/gists{/gist_id}", "starred_url": "https://api.github.com/users/GSam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GSam/subscriptions", "organizations_url": "https://api.github.com/users/GSam/orgs", "repos_url": "https://api.github.com/users/GSam/repos", "events_url": "https://api.github.com/users/GSam/events{/privacy}", "received_events_url": "https://api.github.com/users/GSam/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GSam", "id": 1924133, "node_id": "MDQ6VXNlcjE5MjQxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1924133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GSam", "html_url": "https://github.com/GSam", "followers_url": "https://api.github.com/users/GSam/followers", "following_url": "https://api.github.com/users/GSam/following{/other_user}", "gists_url": "https://api.github.com/users/GSam/gists{/gist_id}", "starred_url": "https://api.github.com/users/GSam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GSam/subscriptions", "organizations_url": "https://api.github.com/users/GSam/orgs", "repos_url": "https://api.github.com/users/GSam/repos", "events_url": "https://api.github.com/users/GSam/events{/privacy}", "received_events_url": "https://api.github.com/users/GSam/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c67a34b9e509b76ff145526f28a20f9495c2ab61", "url": "https://api.github.com/repos/rust-lang/rust/commits/c67a34b9e509b76ff145526f28a20f9495c2ab61", "html_url": "https://github.com/rust-lang/rust/commit/c67a34b9e509b76ff145526f28a20f9495c2ab61"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "b3fd05325b17bc14433fad5fa3dcd06d01434b4d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c0c6af7f073620aacfb103c070e997a8d50b7201/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c6af7f073620aacfb103c070e997a8d50b7201/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c0c6af7f073620aacfb103c070e997a8d50b7201", "patch": "@@ -1555,6 +1555,21 @@ impl<'a> State<'a> {\n         self.pclose()\n     }\n \n+    pub fn check_expr_bin_needs_paren(&mut self, sub_expr: &ast::Expr,\n+                                      binop: ast::BinOp) -> bool {\n+        match sub_expr.node {\n+            ast::ExprBinary(ref sub_op, _, _) => {\n+                if ast_util::operator_prec(sub_op.node) <\n+                    ast_util::operator_prec(binop.node) {\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n+            _ => true\n+        }\n+    }\n+\n     pub fn print_expr_maybe_paren(&mut self, expr: &ast::Expr) -> io::Result<()> {\n         let needs_par = needs_parentheses(expr);\n         if needs_par {\n@@ -1670,10 +1685,18 @@ impl<'a> State<'a> {\n                          op: ast::BinOp,\n                          lhs: &ast::Expr,\n                          rhs: &ast::Expr) -> io::Result<()> {\n-        try!(self.print_expr_maybe_paren(lhs));\n+        if self.check_expr_bin_needs_paren(lhs, op) {\n+            try!(self.print_expr_maybe_paren(lhs));\n+        } else {\n+            try!(self.print_expr(lhs));\n+        }\n         try!(space(&mut self.s));\n         try!(self.word_space(ast_util::binop_to_string(op.node)));\n-        self.print_expr_maybe_paren(rhs)\n+        if self.check_expr_bin_needs_paren(rhs, op) {\n+            self.print_expr_maybe_paren(rhs)\n+        } else {\n+            self.print_expr(rhs)\n+        }\n     }\n \n     fn print_expr_unary(&mut self,"}]}