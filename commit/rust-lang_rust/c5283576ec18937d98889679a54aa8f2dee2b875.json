{"sha": "c5283576ec18937d98889679a54aa8f2dee2b875", "node_id": "C_kwDOAAsO6NoAKGM1MjgzNTc2ZWMxODkzN2Q5ODg4OTY3OWE1NGFhOGYyZGVlMmI4NzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-15T20:56:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-15T20:56:07Z"}, "message": "Auto merge of #108012 - compiler-errors:issue-107999, r=oli-obk\n\nDon't ICE in `might_permit_raw_init` if reference is polymorphic\n\nEmitting optimized MIR for a polymorphic function may require computing layout of a type that isn't (yet) known. This happens in the instcombine pass, for example. Let's fail gracefully in that condition.\n\ncc `@saethlin`\nfixes #107999", "tree": {"sha": "950ca5fd9d874fa9f7c990eee71df8a14e5ee58c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/950ca5fd9d874fa9f7c990eee71df8a14e5ee58c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5283576ec18937d98889679a54aa8f2dee2b875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5283576ec18937d98889679a54aa8f2dee2b875", "html_url": "https://github.com/rust-lang/rust/commit/c5283576ec18937d98889679a54aa8f2dee2b875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5283576ec18937d98889679a54aa8f2dee2b875/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d14db321b043ffc579a7461464c88d7e3f54f83", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d14db321b043ffc579a7461464c88d7e3f54f83", "html_url": "https://github.com/rust-lang/rust/commit/2d14db321b043ffc579a7461464c88d7e3f54f83"}, {"sha": "b096f0e0f01f9cc1f13d4d664fda93f9efe95485", "url": "https://api.github.com/repos/rust-lang/rust/commits/b096f0e0f01f9cc1f13d4d664fda93f9efe95485", "html_url": "https://github.com/rust-lang/rust/commit/b096f0e0f01f9cc1f13d4d664fda93f9efe95485"}], "stats": {"total": 172, "additions": 116, "deletions": 56}, "files": [{"sha": "0d2367c2f83d324e291a5830efe67e39c69479dd", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=c5283576ec18937d98889679a54aa8f2dee2b875", "patch": "@@ -640,7 +640,8 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         sym::assert_inhabited | sym::assert_zero_valid | sym::assert_mem_uninitialized_valid => {\n             intrinsic_args!(fx, args => (); intrinsic);\n \n-            let layout = fx.layout_of(substs.type_at(0));\n+            let ty = substs.type_at(0);\n+            let layout = fx.layout_of(ty);\n             if layout.abi.is_uninhabited() {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic_nounwind(\n@@ -653,7 +654,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             }\n \n             if intrinsic == sym::assert_zero_valid\n-                && !fx.tcx.permits_zero_init(fx.param_env().and(layout))\n+                && !fx\n+                    .tcx\n+                    .permits_zero_init(fx.param_env().and(ty))\n+                    .expect(\"expected to have layout during codegen\")\n             {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic_nounwind(\n@@ -669,7 +673,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             }\n \n             if intrinsic == sym::assert_mem_uninitialized_valid\n-                && !fx.tcx.permits_uninit_init(fx.param_env().and(layout))\n+                && !fx\n+                    .tcx\n+                    .permits_uninit_init(fx.param_env().and(ty))\n+                    .expect(\"expected to have layout during codegen\")\n             {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic_nounwind("}, {"sha": "9af408646ae031668b3d397c6019dfe4053ea2cc", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=c5283576ec18937d98889679a54aa8f2dee2b875", "patch": "@@ -674,8 +674,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let layout = bx.layout_of(ty);\n             let do_panic = match intrinsic {\n                 Inhabited => layout.abi.is_uninhabited(),\n-                ZeroValid => !bx.tcx().permits_zero_init(bx.param_env().and(layout)),\n-                MemUninitializedValid => !bx.tcx().permits_uninit_init(bx.param_env().and(layout)),\n+                ZeroValid => !bx\n+                    .tcx()\n+                    .permits_zero_init(bx.param_env().and(ty))\n+                    .expect(\"expected to have layout during codegen\"),\n+                MemUninitializedValid => !bx\n+                    .tcx()\n+                    .permits_uninit_init(bx.param_env().and(ty))\n+                    .expect(\"expected to have layout during codegen\"),\n             };\n             Some(if do_panic {\n                 let msg_str = with_no_visible_paths!({"}, {"sha": "14cb83eb709be296cd7789958cae91dec13f11da", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=c5283576ec18937d98889679a54aa8f2dee2b875", "patch": "@@ -448,7 +448,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n \n                 if intrinsic_name == sym::assert_zero_valid {\n-                    let should_panic = !self.tcx.permits_zero_init(self.param_env.and(layout));\n+                    let should_panic = !self\n+                        .tcx\n+                        .permits_zero_init(self.param_env.and(ty))\n+                        .map_err(|_| err_inval!(TooGeneric))?;\n \n                     if should_panic {\n                         M::abort(\n@@ -462,7 +465,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n \n                 if intrinsic_name == sym::assert_mem_uninitialized_valid {\n-                    let should_panic = !self.tcx.permits_uninit_init(self.param_env.and(layout));\n+                    let should_panic = !self\n+                        .tcx\n+                        .permits_uninit_init(self.param_env.and(ty))\n+                        .map_err(|_| err_inval!(TooGeneric))?;\n \n                     if should_panic {\n                         M::abort("}, {"sha": "964efcc9062dba56cb0bde2e09e7e41f64d81f5e", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=c5283576ec18937d98889679a54aa8f2dee2b875", "patch": "@@ -59,11 +59,8 @@ pub fn provide(providers: &mut Providers) {\n         const_eval::deref_mir_constant(tcx, param_env, value)\n     };\n     providers.permits_uninit_init = |tcx, param_env_and_ty| {\n-        let (param_env, ty) = param_env_and_ty.into_parts();\n-        util::might_permit_raw_init(tcx, param_env, ty, InitKind::UninitMitigated0x01Fill)\n-    };\n-    providers.permits_zero_init = |tcx, param_env_and_ty| {\n-        let (param_env, ty) = param_env_and_ty.into_parts();\n-        util::might_permit_raw_init(tcx, param_env, ty, InitKind::Zero)\n+        util::might_permit_raw_init(tcx, param_env_and_ty, InitKind::UninitMitigated0x01Fill)\n     };\n+    providers.permits_zero_init =\n+        |tcx, param_env_and_ty| util::might_permit_raw_init(tcx, param_env_and_ty, InitKind::Zero);\n }"}, {"sha": "2eba1e11466a45b6b4693e6d033b93dfebebf6d2", "filename": "compiler/rustc_const_eval/src/util/might_permit_raw_init.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs?ref=c5283576ec18937d98889679a54aa8f2dee2b875", "patch": "@@ -1,5 +1,5 @@\n-use rustc_middle::ty::layout::{LayoutCx, LayoutOf, TyAndLayout};\n-use rustc_middle::ty::{ParamEnv, TyCtxt};\n+use rustc_middle::ty::layout::{LayoutCx, LayoutError, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::{ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_session::Limit;\n use rustc_target::abi::{Abi, FieldsShape, InitKind, Scalar, Variants};\n \n@@ -20,15 +20,14 @@ use crate::interpret::{InterpCx, MemoryKind, OpTy};\n /// to the full uninit check).\n pub fn might_permit_raw_init<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    param_env: ParamEnv<'tcx>,\n-    ty: TyAndLayout<'tcx>,\n+    param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n     kind: InitKind,\n-) -> bool {\n+) -> Result<bool, LayoutError<'tcx>> {\n     if tcx.sess.opts.unstable_opts.strict_init_checks {\n-        might_permit_raw_init_strict(ty, tcx, kind)\n+        might_permit_raw_init_strict(tcx.layout_of(param_env_and_ty)?, tcx, kind)\n     } else {\n-        let layout_cx = LayoutCx { tcx, param_env };\n-        might_permit_raw_init_lax(ty, &layout_cx, kind)\n+        let layout_cx = LayoutCx { tcx, param_env: param_env_and_ty.param_env };\n+        might_permit_raw_init_lax(tcx.layout_of(param_env_and_ty)?, &layout_cx, kind)\n     }\n }\n \n@@ -38,7 +37,7 @@ fn might_permit_raw_init_strict<'tcx>(\n     ty: TyAndLayout<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     kind: InitKind,\n-) -> bool {\n+) -> Result<bool, LayoutError<'tcx>> {\n     let machine = CompileTimeInterpreter::new(\n         Limit::new(0),\n         /*can_access_statics:*/ false,\n@@ -65,7 +64,7 @@ fn might_permit_raw_init_strict<'tcx>(\n     // This does *not* actually check that references are dereferenceable, but since all types that\n     // require dereferenceability also require non-null, we don't actually get any false negatives\n     // due to this.\n-    cx.validate_operand(&ot).is_ok()\n+    Ok(cx.validate_operand(&ot).is_ok())\n }\n \n /// Implements the 'lax' (default) version of the `might_permit_raw_init` checks; see that function for\n@@ -74,7 +73,7 @@ fn might_permit_raw_init_lax<'tcx>(\n     this: TyAndLayout<'tcx>,\n     cx: &LayoutCx<'tcx, TyCtxt<'tcx>>,\n     init_kind: InitKind,\n-) -> bool {\n+) -> Result<bool, LayoutError<'tcx>> {\n     let scalar_allows_raw_init = move |s: Scalar| -> bool {\n         match init_kind {\n             InitKind::Zero => {\n@@ -103,20 +102,20 @@ fn might_permit_raw_init_lax<'tcx>(\n     };\n     if !valid {\n         // This is definitely not okay.\n-        return false;\n+        return Ok(false);\n     }\n \n     // Special magic check for references and boxes (i.e., special pointer types).\n     if let Some(pointee) = this.ty.builtin_deref(false) {\n-        let pointee = cx.layout_of(pointee.ty).expect(\"need to be able to compute layouts\");\n+        let pointee = cx.layout_of(pointee.ty)?;\n         // We need to ensure that the LLVM attributes `aligned` and `dereferenceable(size)` are satisfied.\n         if pointee.align.abi.bytes() > 1 {\n             // 0x01-filling is not aligned.\n-            return false;\n+            return Ok(false);\n         }\n         if pointee.size.bytes() > 0 {\n             // A 'fake' integer pointer is not sufficiently dereferenceable.\n-            return false;\n+            return Ok(false);\n         }\n     }\n \n@@ -129,9 +128,9 @@ fn might_permit_raw_init_lax<'tcx>(\n         }\n         FieldsShape::Arbitrary { offsets, .. } => {\n             for idx in 0..offsets.len() {\n-                if !might_permit_raw_init_lax(this.field(cx, idx), cx, init_kind) {\n+                if !might_permit_raw_init_lax(this.field(cx, idx), cx, init_kind)? {\n                     // We found a field that is unhappy with this kind of initialization.\n-                    return false;\n+                    return Ok(false);\n                 }\n             }\n         }\n@@ -148,5 +147,5 @@ fn might_permit_raw_init_lax<'tcx>(\n         }\n     }\n \n-    true\n+    Ok(true)\n }"}, {"sha": "4b34f6b4881bf7c00e3e9e318457bdd6c0b67240", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c5283576ec18937d98889679a54aa8f2dee2b875", "patch": "@@ -2143,12 +2143,12 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query permits_uninit_init(key: ty::ParamEnvAnd<'tcx, TyAndLayout<'tcx>>) -> bool {\n-        desc { \"checking to see if `{}` permits being left uninit\", key.value.ty }\n+    query permits_uninit_init(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n+        desc { \"checking to see if `{}` permits being left uninit\", key.value }\n     }\n \n-    query permits_zero_init(key: ty::ParamEnvAnd<'tcx, TyAndLayout<'tcx>>) -> bool {\n-        desc { \"checking to see if `{}` permits being left zeroed\", key.value.ty }\n+    query permits_zero_init(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n+        desc { \"checking to see if `{}` permits being left zeroed\", key.value }\n     }\n \n     query compare_impl_const("}, {"sha": "ed54aa96f5b8983380dc3179187b54d4fe9a5f3d", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=c5283576ec18937d98889679a54aa8f2dee2b875", "patch": "@@ -30,7 +30,6 @@ use crate::traits::specialization_graph;\n use crate::traits::{self, ImplSource};\n use crate::ty::context::TyCtxtFeed;\n use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::layout::TyAndLayout;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::GeneratorDiagnosticData;"}, {"sha": "1079377fbacd2f35b44dc008731a35d7642e7cc5", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5283576ec18937d98889679a54aa8f2dee2b875/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=c5283576ec18937d98889679a54aa8f2dee2b875", "patch": "@@ -6,7 +6,8 @@ use rustc_middle::mir::{\n     BinOp, Body, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem, Rvalue,\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n };\n-use rustc_middle::ty::{self, layout::TyAndLayout, ParamEnv, ParamEnvAnd, SubstsRef, Ty, TyCtxt};\n+use rustc_middle::ty::layout::LayoutError;\n+use rustc_middle::ty::{self, ParamEnv, ParamEnvAnd, SubstsRef, Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n \n pub struct InstCombine;\n@@ -230,38 +231,41 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n \n         // Check this is a foldable intrinsic before we query the layout of our generic parameter\n         let Some(assert_panics) = intrinsic_assert_panics(intrinsic_name) else { return; };\n-        let Ok(layout) = self.tcx.layout_of(self.param_env.and(ty)) else { return; };\n-        if assert_panics(self.tcx, self.param_env.and(layout)) {\n-            // If we know the assert panics, indicate to later opts that the call diverges\n-            *target = None;\n-        } else {\n-            // If we know the assert does not panic, turn the call into a Goto\n-            terminator.kind = TerminatorKind::Goto { target: *target_block };\n+        match assert_panics(self.tcx, self.param_env.and(ty)) {\n+            // We don't know the layout, don't touch the assertion\n+            Err(_) => {}\n+            Ok(true) => {\n+                // If we know the assert panics, indicate to later opts that the call diverges\n+                *target = None;\n+            }\n+            Ok(false) => {\n+                // If we know the assert does not panic, turn the call into a Goto\n+                terminator.kind = TerminatorKind::Goto { target: *target_block };\n+            }\n         }\n     }\n }\n \n fn intrinsic_assert_panics<'tcx>(\n     intrinsic_name: Symbol,\n-) -> Option<fn(TyCtxt<'tcx>, ParamEnvAnd<'tcx, TyAndLayout<'tcx>>) -> bool> {\n+) -> Option<fn(TyCtxt<'tcx>, ParamEnvAnd<'tcx, Ty<'tcx>>) -> Result<bool, LayoutError<'tcx>>> {\n     fn inhabited_predicate<'tcx>(\n-        _tcx: TyCtxt<'tcx>,\n-        param_env_and_layout: ParamEnvAnd<'tcx, TyAndLayout<'tcx>>,\n-    ) -> bool {\n-        let (_param_env, layout) = param_env_and_layout.into_parts();\n-        layout.abi.is_uninhabited()\n+        tcx: TyCtxt<'tcx>,\n+        param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n+    ) -> Result<bool, LayoutError<'tcx>> {\n+        Ok(tcx.layout_of(param_env_and_ty)?.abi.is_uninhabited())\n     }\n     fn zero_valid_predicate<'tcx>(\n         tcx: TyCtxt<'tcx>,\n-        param_env_and_layout: ParamEnvAnd<'tcx, TyAndLayout<'tcx>>,\n-    ) -> bool {\n-        !tcx.permits_zero_init(param_env_and_layout)\n+        param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n+    ) -> Result<bool, LayoutError<'tcx>> {\n+        Ok(!tcx.permits_zero_init(param_env_and_ty)?)\n     }\n     fn mem_uninitialized_valid_predicate<'tcx>(\n         tcx: TyCtxt<'tcx>,\n-        param_env_and_layout: ParamEnvAnd<'tcx, TyAndLayout<'tcx>>,\n-    ) -> bool {\n-        !tcx.permits_uninit_init(param_env_and_layout)\n+        param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n+    ) -> Result<bool, LayoutError<'tcx>> {\n+        Ok(!tcx.permits_uninit_init(param_env_and_ty)?)\n     }\n \n     match intrinsic_name {"}, {"sha": "c1a42a47ed218ceafc483acc7ead333e4e948b69", "filename": "tests/mir-opt/dont_yeet_assert.generic.InstCombine.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5283576ec18937d98889679a54aa8f2dee2b875/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c5283576ec18937d98889679a54aa8f2dee2b875/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff?ref=c5283576ec18937d98889679a54aa8f2dee2b875", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `generic` before InstCombine\n++ // MIR for `generic` after InstCombine\n+  \n+  fn generic() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dont_yeet_assert.rs:+0:21: +0:21\n+      let _1: ();                          // in scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n+          _1 = assert_mem_uninitialized_valid::<&T>() -> bb1; // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n+                                           // mir::Constant\n+                                           // + span: $DIR/dont_yeet_assert.rs:10:5: 10:59\n+                                           // + user_ty: UserType(0)\n+                                           // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_mem_uninitialized_valid::<&T>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/dont_yeet_assert.rs:+1:61: +1:62\n+          _0 = const ();                   // scope 0 at $DIR/dont_yeet_assert.rs:+0:21: +2:2\n+          return;                          // scope 0 at $DIR/dont_yeet_assert.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "7cec761eabac1d7c79ddd77b081f9c6ba9bb7738", "filename": "tests/mir-opt/dont_yeet_assert.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5283576ec18937d98889679a54aa8f2dee2b875/tests%2Fmir-opt%2Fdont_yeet_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5283576ec18937d98889679a54aa8f2dee2b875/tests%2Fmir-opt%2Fdont_yeet_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdont_yeet_assert.rs?ref=c5283576ec18937d98889679a54aa8f2dee2b875", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: --crate-type=lib\n+// unit-test: InstCombine\n+\n+#![feature(core_intrinsics)]\n+\n+// Want to make sure this assertion isn't compiled away in generic code.\n+\n+// EMIT_MIR dont_yeet_assert.generic.InstCombine.diff\n+pub fn generic<T>() {\n+    core::intrinsics::assert_mem_uninitialized_valid::<&T>();\n+}"}, {"sha": "055173e9842dd994dd69c4f49aad9f3bc489cdf5", "filename": "tests/ui/lint/invalid_value-polymorphic.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5283576ec18937d98889679a54aa8f2dee2b875/tests%2Fui%2Flint%2Finvalid_value-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5283576ec18937d98889679a54aa8f2dee2b875/tests%2Fui%2Flint%2Finvalid_value-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_value-polymorphic.rs?ref=c5283576ec18937d98889679a54aa8f2dee2b875", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: --crate-type=lib -Zmir-enable-passes=+InstCombine\n+// build-pass\n+\n+#![feature(core_intrinsics)]\n+\n+pub fn generic<T>() {\n+    core::intrinsics::assert_mem_uninitialized_valid::<&T>();\n+}"}]}