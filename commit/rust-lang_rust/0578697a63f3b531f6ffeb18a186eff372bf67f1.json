{"sha": "0578697a63f3b531f6ffeb18a186eff372bf67f1", "node_id": "C_kwDOAAsO6NoAKDA1Nzg2OTdhNjNmM2I1MzFmNmZmZWIxOGExODZlZmYzNzJiZjY3ZjE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-07T21:57:34Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-09T00:04:09Z"}, "message": "Minor updates based on review comments.", "tree": {"sha": "e2c2cb249b84504c4cfe0688844f61e546fbed4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2c2cb249b84504c4cfe0688844f61e546fbed4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0578697a63f3b531f6ffeb18a186eff372bf67f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0578697a63f3b531f6ffeb18a186eff372bf67f1", "html_url": "https://github.com/rust-lang/rust/commit/0578697a63f3b531f6ffeb18a186eff372bf67f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0578697a63f3b531f6ffeb18a186eff372bf67f1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16a286b003477fe07c06c5030f0ae8298c3e78ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/16a286b003477fe07c06c5030f0ae8298c3e78ec", "html_url": "https://github.com/rust-lang/rust/commit/16a286b003477fe07c06c5030f0ae8298c3e78ec"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "74e18bffc2ec982d13c15a30930dacccd889e260", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0578697a63f3b531f6ffeb18a186eff372bf67f1/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0578697a63f3b531f6ffeb18a186eff372bf67f1/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=0578697a63f3b531f6ffeb18a186eff372bf67f1", "patch": "@@ -245,7 +245,8 @@ pub struct MethodDef<'a> {\n pub struct Substructure<'a> {\n     /// ident of self\n     pub type_ident: Ident,\n-    /// verbatim access to any non-selflike arguments\n+    /// Verbatim access to any non-selflike arguments, i.e. arguments that\n+    /// don't have type `&Self`.\n     pub nonselflike_args: &'a [P<Expr>],\n     pub fields: &'a SubstructureFields<'a>,\n }\n@@ -934,10 +935,9 @@ impl<'a> MethodDef<'a> {\n \n             let arg_expr = cx.expr_ident(span, ident);\n \n-            match *ty {\n-                // for static methods, just treat any Self\n-                // arguments as a normal arg\n-                Ref(ref ty, _) if matches!(**ty, Self_) && !self.is_static() => {\n+            match ty {\n+                // Selflike (`&Self`) arguments only occur in non-static methods.\n+                Ref(box Self_, _) if !self.is_static() => {\n                     selflike_args.push(cx.expr_deref(span, arg_expr))\n                 }\n                 Self_ => cx.span_bug(span, \"`Self` in non-return position\"),\n@@ -1459,11 +1459,8 @@ impl<'a> TraitDef<'a> {\n         prefixes\n             .iter()\n             .map(|prefix| {\n-                let pieces: Vec<_> = struct_def\n-                    .fields()\n-                    .iter()\n-                    .enumerate()\n-                    .map(|(i, struct_field)| {\n+                let pieces_iter =\n+                    struct_def.fields().iter().enumerate().map(|(i, struct_field)| {\n                         let sp = struct_field.span.with_ctxt(self.span.ctxt());\n                         let binding_mode = if use_temporaries {\n                             ast::BindingMode::ByValue(ast::Mutability::Not)\n@@ -1477,14 +1474,12 @@ impl<'a> TraitDef<'a> {\n                             struct_field.ident,\n                             cx.pat(path.span, PatKind::Ident(binding_mode, path, None)),\n                         )\n-                    })\n-                    .collect();\n+                    });\n \n                 let struct_path = struct_path.clone();\n                 match *struct_def {\n                     VariantData::Struct(..) => {\n-                        let field_pats = pieces\n-                            .into_iter()\n+                        let field_pats = pieces_iter\n                             .map(|(sp, ident, pat)| {\n                                 if ident.is_none() {\n                                     cx.span_bug(\n@@ -1506,7 +1501,7 @@ impl<'a> TraitDef<'a> {\n                         cx.pat_struct(self.span, struct_path, field_pats)\n                     }\n                     VariantData::Tuple(..) => {\n-                        let subpats = pieces.into_iter().map(|(_, _, subpat)| subpat).collect();\n+                        let subpats = pieces_iter.map(|(_, _, subpat)| subpat).collect();\n                         cx.pat_tuple_struct(self.span, struct_path, subpats)\n                     }\n                     VariantData::Unit(..) => cx.pat_path(self.span, struct_path),"}]}