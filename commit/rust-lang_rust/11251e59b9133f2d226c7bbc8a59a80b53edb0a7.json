{"sha": "11251e59b9133f2d226c7bbc8a59a80b53edb0a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMjUxZTU5YjkxMzNmMmQyMjZjN2JiYzhhNTlhODBiNTNlZGIwYTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-05T00:44:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-05T17:51:04Z"}, "message": "Fix tests from the rollup", "tree": {"sha": "b4a46951a90158d2f4628e6a81954ab672f2d06b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4a46951a90158d2f4628e6a81954ab672f2d06b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11251e59b9133f2d226c7bbc8a59a80b53edb0a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11251e59b9133f2d226c7bbc8a59a80b53edb0a7", "html_url": "https://github.com/rust-lang/rust/commit/11251e59b9133f2d226c7bbc8a59a80b53edb0a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11251e59b9133f2d226c7bbc8a59a80b53edb0a7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e126f3c6c699d7ca58a1be94bb9af4292a83436d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e126f3c6c699d7ca58a1be94bb9af4292a83436d", "html_url": "https://github.com/rust-lang/rust/commit/e126f3c6c699d7ca58a1be94bb9af4292a83436d"}], "stats": {"total": 75, "additions": 67, "deletions": 8}, "files": [{"sha": "d8b840297b8103c1b670b61cf28c04583589f85f", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11251e59b9133f2d226c7bbc8a59a80b53edb0a7/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11251e59b9133f2d226c7bbc8a59a80b53edb0a7/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=11251e59b9133f2d226c7bbc8a59a80b53edb0a7", "patch": "@@ -16,6 +16,7 @@\n //! directory as we want that cached between builds.\n \n use std::fs;\n+use std::io::{self, ErrorKind};\n use std::path::Path;\n \n use Build;\n@@ -35,14 +36,47 @@ pub fn clean(build: &Build) {\n             if entry.file_name().to_str() == Some(\"llvm\") {\n                 continue\n             }\n-            t!(fs::remove_dir_all(&entry.path()));\n+            rm_rf(build, &entry.path());\n         }\n     }\n }\n \n fn rm_rf(build: &Build, path: &Path) {\n-    if path.exists() {\n-        build.verbose(&format!(\"removing `{}`\", path.display()));\n-        t!(fs::remove_dir_all(path));\n+    if !path.exists() {\n+        return\n+    }\n+\n+    for file in t!(fs::read_dir(path)) {\n+        let file = t!(file).path();\n+\n+        if file.is_dir() {\n+            rm_rf(build, &file);\n+        } else {\n+            // On windows we can't remove a readonly file, and git will\n+            // often clone files as readonly. As a result, we have some\n+            // special logic to remove readonly files on windows.\n+            do_op(&file, \"remove file\", |p| fs::remove_file(p));\n+        }\n+    }\n+    do_op(path, \"remove dir\", |p| fs::remove_dir(p));\n+}\n+\n+fn do_op<F>(path: &Path, desc: &str, mut f: F)\n+    where F: FnMut(&Path) -> io::Result<()>\n+{\n+    match f(path) {\n+        Ok(()) => {}\n+        Err(ref e) if cfg!(windows) &&\n+                      e.kind() == ErrorKind::PermissionDenied => {\n+            let mut p = t!(path.metadata()).permissions();\n+            p.set_readonly(false);\n+            t!(fs::set_permissions(path, p));\n+            f(path).unwrap_or_else(|e| {\n+                panic!(\"failed to {} {}: {}\", desc, path.display(), e);\n+            })\n+        }\n+        Err(e) => {\n+            panic!(\"failed to {} {}: {}\", desc, path.display(), e);\n+        }\n     }\n }"}, {"sha": "1cadb634dfcecd333045657988566a8bdf5dfef2", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11251e59b9133f2d226c7bbc8a59a80b53edb0a7/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11251e59b9133f2d226c7bbc8a59a80b53edb0a7/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=11251e59b9133f2d226c7bbc8a59a80b53edb0a7", "patch": "@@ -454,6 +454,30 @@ impl Config {\n     }\n }\n \n+#[cfg(not(windows))]\n+fn parse_configure_path(path: &str) -> PathBuf {\n+    path.into()\n+}\n+\n+#[cfg(windows)]\n+fn parse_configure_path(path: &str) -> PathBuf {\n+    // on windows, configure produces unix style paths e.g. /c/some/path but we\n+    // only want real windows paths\n+\n+    use std::process::Command;\n+    use build_helper;\n+\n+    // '/' is invalid in windows paths, so we can detect unix paths by the presence of it\n+    if !path.contains('/') {\n+        return path.into();\n+    }\n+\n+    let win_path = build_helper::output(Command::new(\"cygpath\").arg(\"-w\").arg(path));\n+    let win_path = win_path.trim();\n+\n+    win_path.into()\n+}\n+\n fn set<T>(field: &mut T, val: Option<T>) {\n     if let Some(v) = val {\n         *field = v;"}, {"sha": "ef6f9c526390c91efda9cc512a165fab31d50cf7", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11251e59b9133f2d226c7bbc8a59a80b53edb0a7/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11251e59b9133f2d226c7bbc8a59a80b53edb0a7/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=11251e59b9133f2d226c7bbc8a59a80b53edb0a7", "patch": "@@ -288,13 +288,13 @@ pub fn build_rules(build: &Build) -> Rules {\n                                None));\n     for (krate, path, _default) in krates(\"rustc-main\") {\n         rules.test(&krate.test_step, path)\n-             .dep(|s| s.name(\"libtest\"))\n+             .dep(|s| s.name(\"librustc\"))\n              .host(true)\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Librustc, Some(&krate.name)));\n     }\n     rules.test(\"check-rustc-all\", \"path/to/nowhere\")\n-         .dep(|s| s.name(\"libtest\"))\n+         .dep(|s| s.name(\"librustc\"))\n          .default(true)\n              .host(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target, Mode::Librustc,"}, {"sha": "ba16208715109e5dcc44a1e3159d1d1db991a5df", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11251e59b9133f2d226c7bbc8a59a80b53edb0a7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11251e59b9133f2d226c7bbc8a59a80b53edb0a7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=11251e59b9133f2d226c7bbc8a59a80b53edb0a7", "patch": "@@ -722,7 +722,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"windows_subsystem\", Whitelisted, Gated(Stability::Unstable,\n                                              \"windows_subsystem\",\n                                              \"the windows subsystem attribute \\\n-                                              id currently unstable\",\n+                                              is currently unstable\",\n                                              cfg_fn!(windows_subsystem))),\n \n     // Crate level attributes"}, {"sha": "e0003440719e62b2d3f1860e4c566299f26ad693", "filename": "src/test/compile-fail/windows-subsystem-invalid.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11251e59b9133f2d226c7bbc8a59a80b53edb0a7/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11251e59b9133f2d226c7bbc8a59a80b53edb0a7/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-invalid.rs?ref=11251e59b9133f2d226c7bbc8a59a80b53edb0a7", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern: invalid windows subsystem `wrong`, only `windows` and `console` are allowed\n+\n #![feature(windows_subsystem)]\n #![windows_subsystem = \"wrong\"]\n-//~^ ERROR: invalid subsystem `wrong`, only `windows` and `console` are allowed\n \n fn main() {}"}]}