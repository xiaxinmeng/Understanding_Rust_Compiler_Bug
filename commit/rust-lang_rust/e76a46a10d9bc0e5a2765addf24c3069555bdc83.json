{"sha": "e76a46a10d9bc0e5a2765addf24c3069555bdc83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NmE0NmExMGQ5YmMwZTVhMjc2NWFkZGYyNGMzMDY5NTU1YmRjODM=", "commit": {"author": {"name": "ggomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-21T14:07:08Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-22T19:47:38Z"}, "message": "Add new error codes in librustc_typeck", "tree": {"sha": "6fb3795f87419b1b2b3e29b0db29a18cb9e69db0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fb3795f87419b1b2b3e29b0db29a18cb9e69db0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e76a46a10d9bc0e5a2765addf24c3069555bdc83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e76a46a10d9bc0e5a2765addf24c3069555bdc83", "html_url": "https://github.com/rust-lang/rust/commit/e76a46a10d9bc0e5a2765addf24c3069555bdc83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e76a46a10d9bc0e5a2765addf24c3069555bdc83/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93a96835b09fda7aefb886c9c1c9daa5831bdac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/93a96835b09fda7aefb886c9c1c9daa5831bdac6", "html_url": "https://github.com/rust-lang/rust/commit/93a96835b09fda7aefb886c9c1c9daa5831bdac6"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "1df06e8a00736c471111b7592a7252a110174c1c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e76a46a10d9bc0e5a2765addf24c3069555bdc83/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76a46a10d9bc0e5a2765addf24c3069555bdc83/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=e76a46a10d9bc0e5a2765addf24c3069555bdc83", "patch": "@@ -1510,26 +1510,35 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.type_error_struct(sp, mk_msg, actual_ty).emit();\n     }\n \n+    // FIXME: this results in errors without an error code. Deprecate?\n     pub fn type_error_struct<M>(&self,\n                                 sp: Span,\n                                 mk_msg: M,\n                                 actual_ty: Ty<'tcx>)\n                                 -> DiagnosticBuilder<'tcx>\n         where M: FnOnce(String) -> String,\n     {\n-        debug!(\"type_error_struct({:?}, {:?})\", sp, actual_ty);\n+        self.type_error_struct_with_diag(sp, |actual_ty| {\n+            self.tcx.sess.struct_span_err(sp, &mk_msg(actual_ty))\n+        }, actual_ty)\n+    }\n \n+    pub fn type_error_struct_with_diag<M>(&self,\n+                                          sp: Span,\n+                                          mk_diag: M,\n+                                          actual_ty: Ty<'tcx>)\n+                                          -> DiagnosticBuilder<'tcx>\n+        where M: FnOnce(String) -> DiagnosticBuilder<'tcx>,\n+    {\n         let actual_ty = self.resolve_type_vars_if_possible(&actual_ty);\n+        debug!(\"type_error_struct_with_diag({:?}, {:?})\", sp, actual_ty);\n \n         // Don't report an error if actual type is TyError.\n         if actual_ty.references_error() {\n             return self.tcx.sess.diagnostic().struct_dummy();\n         }\n \n-        let msg = mk_msg(self.ty_to_string(actual_ty));\n-\n-        // FIXME: use an error code.\n-        self.tcx.sess.struct_span_err(sp, &msg)\n+        mk_diag(self.ty_to_string(actual_ty))\n     }\n \n     pub fn report_mismatched_types(&self,"}, {"sha": "6062bd048b3d27f8972edfbdce5efa766c448aab", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e76a46a10d9bc0e5a2765addf24c3069555bdc83/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76a46a10d9bc0e5a2765addf24c3069555bdc83/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e76a46a10d9bc0e5a2765addf24c3069555bdc83", "patch": "@@ -3028,14 +3028,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             variant: ty::VariantDef<'tcx>,\n                             field: &hir::Field,\n                             skip_fields: &[hir::Field]) {\n-        let mut err = self.type_error_struct(\n+        let mut err = self.type_error_struct_with_diag(\n             field.name.span,\n             |actual| if let ty::TyEnum(..) = ty.sty {\n-                format!(\"struct variant `{}::{}` has no field named `{}`\",\n-                        actual, variant.name.as_str(), field.name.node)\n+                struct_span_err!(self.tcx.sess, field.name.span, E0559,\n+                                 \"struct variant `{}::{}` has no field named `{}`\",\n+                                 actual, variant.name.as_str(), field.name.node)\n             } else {\n-                format!(\"structure `{}` has no field named `{}`\",\n-                        actual, field.name.node)\n+                struct_span_err!(self.tcx.sess, field.name.span, E0560,\n+                                 \"structure `{}` has no field named `{}`\",\n+                                 actual, field.name.node)\n             },\n             ty);\n         // prevent all specified fields from being suggested"}, {"sha": "6000ea71bff8ec9ec2f9e5b3af5289bca6e91872", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76a46a10d9bc0e5a2765addf24c3069555bdc83/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76a46a10d9bc0e5a2765addf24c3069555bdc83/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e76a46a10d9bc0e5a2765addf24c3069555bdc83", "patch": "@@ -4053,4 +4053,6 @@ register_diagnostics! {\n     E0528, // expected at least {} elements, found {}\n     E0529, // slice pattern expects array or slice, not `{}`\n     E0533, // `{}` does not name a unit variant, unit struct or a constant\n+    E0559,\n+    E0560,\n }"}]}