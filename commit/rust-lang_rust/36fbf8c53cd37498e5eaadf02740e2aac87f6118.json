{"sha": "36fbf8c53cd37498e5eaadf02740e2aac87f6118", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZmJmOGM1M2NkMzc0OThlNWVhYWRmMDI3NDBlMmFhYzg3ZjYxMTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-02T22:22:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-16T18:51:36Z"}, "message": "refactor Visitor into ItemLikeVisitor and intravisit::Visitor\n\nThere are now three patterns (shallow, deep, and nested visit).  These\nare described in detail on the docs in `itemlikevisit::ItemLikeVisitor`.", "tree": {"sha": "2fde2f2f4092536acd2976c2c0aec59da4466604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fde2f2f4092536acd2976c2c0aec59da4466604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36fbf8c53cd37498e5eaadf02740e2aac87f6118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36fbf8c53cd37498e5eaadf02740e2aac87f6118", "html_url": "https://github.com/rust-lang/rust/commit/36fbf8c53cd37498e5eaadf02740e2aac87f6118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36fbf8c53cd37498e5eaadf02740e2aac87f6118/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478c0d161498c9bd0ee89a7b205e7b2f2437f151", "url": "https://api.github.com/repos/rust-lang/rust/commits/478c0d161498c9bd0ee89a7b205e7b2f2437f151", "html_url": "https://github.com/rust-lang/rust/commit/478c0d161498c9bd0ee89a7b205e7b2f2437f151"}], "stats": {"total": 365, "additions": 239, "deletions": 126}, "files": [{"sha": "e365cea6d0e5ea8e553fbff25c72efff2bfb1333", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -25,5 +25,5 @@ pub use self::dep_node::WorkProductId;\n pub use self::graph::DepGraph;\n pub use self::graph::WorkProduct;\n pub use self::query::DepGraphQuery;\n-pub use self::visit::visit_all_items_in_krate;\n+pub use self::visit::visit_all_item_likes_in_krate;\n pub use self::raii::DepTask;"}, {"sha": "30de5e5288ab19a119402e3039730a447b56e3a6", "filename": "src/librustc/dep_graph/visit.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fvisit.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -10,31 +10,30 @@\n \n use hir;\n use hir::def_id::DefId;\n-use hir::intravisit::Visitor;\n+use hir::itemlikevisit::ItemLikeVisitor;\n use ty::TyCtxt;\n \n use super::dep_node::DepNode;\n \n-\n /// Visit all the items in the krate in some order. When visiting a\n /// particular item, first create a dep-node by calling `dep_node_fn`\n /// and push that onto the dep-graph stack of tasks, and also create a\n /// read edge from the corresponding AST node. This is used in\n /// compiler passes to automatically record the item that they are\n /// working on.\n-pub fn visit_all_items_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                mut dep_node_fn: F,\n-                                                visitor: &mut V)\n-    where F: FnMut(DefId) -> DepNode<DefId>, V: Visitor<'tcx>\n+pub fn visit_all_item_likes_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                                     mut dep_node_fn: F,\n+                                                     visitor: &mut V)\n+    where F: FnMut(DefId) -> DepNode<DefId>, V: ItemLikeVisitor<'tcx>\n {\n     struct TrackingVisitor<'visit, 'tcx: 'visit, F: 'visit, V: 'visit> {\n         tcx: TyCtxt<'visit, 'tcx, 'tcx>,\n         dep_node_fn: &'visit mut F,\n         visitor: &'visit mut V\n     }\n \n-    impl<'visit, 'tcx, F, V> Visitor<'tcx> for TrackingVisitor<'visit, 'tcx, F, V>\n-        where F: FnMut(DefId) -> DepNode<DefId>, V: Visitor<'tcx>\n+    impl<'visit, 'tcx, F, V> ItemLikeVisitor<'tcx> for TrackingVisitor<'visit, 'tcx, F, V>\n+        where F: FnMut(DefId) -> DepNode<DefId>, V: ItemLikeVisitor<'tcx>\n     {\n         fn visit_item(&mut self, i: &'tcx hir::Item) {\n             let item_def_id = self.tcx.map.local_def_id(i.id);\n@@ -54,5 +53,5 @@ pub fn visit_all_items_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         dep_node_fn: &mut dep_node_fn,\n         visitor: visitor\n     };\n-    krate.visit_all_items(&mut tracking_visitor)\n+    krate.visit_all_item_likes(&mut tracking_visitor)\n }"}, {"sha": "2fc27e0cea09436cfa25d959b3164c6f3c6f900c", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -8,7 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! HIR walker. Each overridden visit method has full control over what\n+//! HIR walker for walking the contents of nodes.\n+//!\n+//! **For an overview of the visitor strategy, see the docs on the\n+//! `super::itemlikevisit::ItemLikeVisitor` trait.**\n+//!\n+//! If you have decided to use this visitor, here are some general\n+//! notes on how to do it:\n+//!\n+//! Each overridden visit method has full control over what\n //! happens with its node, it can do its own traversal of the node's children,\n //! call `intravisit::walk_*` to apply the default traversal algorithm, or prevent\n //! deeper traversal by doing nothing.\n@@ -30,6 +38,7 @@ use syntax::ast::{NodeId, CRATE_NODE_ID, Name, Attribute};\n use syntax::codemap::Spanned;\n use syntax_pos::Span;\n use hir::*;\n+use super::itemlikevisit::DeepVisitor;\n \n use std::cmp;\n use std::u32;\n@@ -78,10 +87,9 @@ pub trait Visitor<'v> : Sized {\n \n     /// Invoked when a nested item is encountered. By default, does\n     /// nothing. If you want a deep walk, you need to override to\n-    /// fetch the item contents. But most of the time, it is easier\n-    /// (and better) to invoke `Crate::visit_all_items`, which visits\n-    /// all items in the crate in some order (but doesn't respect\n-    /// nesting).\n+    /// fetch the item contents. But most of the time, it is easier to\n+    /// use either the \"shallow\" or \"deep\" visit patterns described on\n+    /// `itemlikevisit::ItemLikeVisitor`.\n     #[allow(unused_variables)]\n     fn visit_nested_item(&mut self, id: ItemId) {\n     }\n@@ -92,6 +100,16 @@ pub trait Visitor<'v> : Sized {\n         walk_item(self, i)\n     }\n \n+    /// When invoking `visit_all_item_likes()`, you need to supply an\n+    /// item-like visitor.  This method converts a \"intra-visit\"\n+    /// visitor into an item-like visitor that walks the entire tree.\n+    /// If you use this, you probably don't want to process the\n+    /// contents of nested item-like things, since the outer loop will\n+    /// visit them as well.\n+    fn as_deep_visitor<'s>(&'s mut self) -> DeepVisitor<'s, Self> {\n+        DeepVisitor::new(self)\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////\n \n     fn visit_id(&mut self, _node_id: NodeId) {"}, {"sha": "6da47015d7dc824558b30d5abe5d0c42f07e96a3", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -0,0 +1,79 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use super::Item;\n+use super::intravisit::Visitor;\n+\n+/// The \"item-like visitor\" visitor defines only the top-level methods\n+/// that can be invoked by `Crate::visit_all_item_likes()`. Whether\n+/// this trait is the right one to implement will depend on the\n+/// overall pattern you need. Here are the three available patterns,\n+/// in roughly the order of desirability:\n+///\n+/// 1. **Shallow visit**: Get a simple callback for every item (or item-like thing) in the HIR.\n+///    - Example: find all items with a `#[foo]` attribute on them.\n+///    - How: Implement `ItemLikeVisitor` and call `tcx.visit_all_item_likes_in_krate()`.\n+///    - Pro: Efficient; just walks the lists of item-like things, not the nodes themselves.\n+///    - Pro: Integrates well into dependency tracking.\n+///    - Con: Don't get information about nesting\n+///    - Con: Don't have methods for specific bits of HIR, like \"on\n+///      every expr, do this\".\n+/// 2. **Deep visit**: Want to scan for specific kinds of HIR nodes within\n+///    an item, but don't care about how item-like things are nested\n+///    within one another.\n+///    - Example: Examine each expression to look for its type and do some check or other.\n+///    - How: Implement `intravisit::Visitor` and use\n+///      `tcx.visit_all_item_likes_in_krate(visitor.as_deep_visitor())`. Within\n+///      your `intravisit::Visitor` impl, implement methods like\n+///      `visit_expr()`; don't forget to invoke\n+///      `intravisit::walk_visit_expr()` to keep walking the subparts.\n+///    - Pro: Visitor methods for any kind of HIR node, not just item-like things.\n+///    - Pro: Integrates well into dependency tracking.\n+///    - Con: Don't get information about nesting between items\n+/// 3. **Nested visit**: Want to visit the whole HIR and you care about the nesting between\n+///    item-like things.\n+///    - Example: Lifetime resolution, which wants to bring lifetimes declared on the\n+///      impl into scope while visiting the impl-items, and then back out again.\n+///    - How: Implement `intravisit::Visitor` and override the `visit_nested_foo()` foo methods\n+///      as needed. Walk your crate with `intravisit::walk_crate()` invoked on `tcx.map.krate()`.\n+///    - Pro: Visitor methods for any kind of HIR node, not just item-like things.\n+///    - Pro: Preserves nesting information\n+///    - Con: Does not integrate well into dependency tracking.\n+///\n+/// Note: the methods of `ItemLikeVisitor` intentionally have no\n+/// defaults, so that as we expand the list of item-like things, we\n+/// revisit the various visitors to see if they need to change. This\n+/// is harder to do with `intravisit::Visitor`, so when you add a new\n+/// `visit_nested_foo()` method, it is recommended that you search for\n+/// existing `fn visit_nested` methods to see where changes are\n+/// needed.\n+pub trait ItemLikeVisitor<'hir> {\n+    fn visit_item(&mut self, item: &'hir Item);\n+}\n+\n+pub struct DeepVisitor<'v, V: 'v> {\n+    visitor: &'v mut V,\n+}\n+\n+impl<'v, 'hir, V> DeepVisitor<'v, V>\n+    where V: Visitor<'hir> + 'v\n+{\n+    pub fn new(base: &'v mut V) -> Self {\n+        DeepVisitor { visitor: base }\n+    }\n+}\n+\n+impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n+    where V: Visitor<'hir>\n+{\n+    fn visit_item(&mut self, item: &'hir Item) {\n+        self.visitor.visit_item(item);\n+    }\n+}"}, {"sha": "4716a09ad35a74ae5d49a059541ca180392eb4b6", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -68,6 +68,7 @@ pub mod check_attr;\n pub mod def;\n pub mod def_id;\n pub mod intravisit;\n+pub mod itemlikevisit;\n pub mod lowering;\n pub mod map;\n pub mod pat_util;\n@@ -438,8 +439,8 @@ impl Crate {\n     /// follows lexical scoping rules -- then you want a different\n     /// approach. You should override `visit_nested_item` in your\n     /// visitor and then call `intravisit::walk_crate` instead.\n-    pub fn visit_all_items<'hir, V>(&'hir self, visitor: &mut V)\n-        where V: intravisit::Visitor<'hir>\n+    pub fn visit_all_item_likes<'hir, V>(&'hir self, visitor: &mut V)\n+        where V: itemlikevisit::ItemLikeVisitor<'hir>\n     {\n         for (_, item) in &self.items {\n             visitor.visit_item(item);"}, {"sha": "2667943bea93308a741923796f1be096195faa7d", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -16,6 +16,7 @@ use dep_graph::DepNode;\n use hir::map as ast_map;\n use hir::{self, pat_util, PatKind};\n use hir::intravisit::{self, Visitor};\n+use hir::itemlikevisit::ItemLikeVisitor;\n \n use middle::privacy;\n use ty::{self, TyCtxt};\n@@ -333,7 +334,7 @@ struct LifeSeeder {\n     worklist: Vec<ast::NodeId>\n }\n \n-impl<'v> Visitor<'v> for LifeSeeder {\n+impl<'v> ItemLikeVisitor<'v> for LifeSeeder {\n     fn visit_item(&mut self, item: &hir::Item) {\n         let allow_dead_code = has_allow_dead_code_or_lang_attr(&item.attrs);\n         if allow_dead_code {\n@@ -388,7 +389,7 @@ fn create_and_seed_worklist<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut life_seeder = LifeSeeder {\n         worklist: worklist\n     };\n-    krate.visit_all_items(&mut life_seeder);\n+    krate.visit_all_item_likes(&mut life_seeder);\n \n     return life_seeder.worklist;\n }"}, {"sha": "25fe407271bc02c08e0ee9323faee8cfcc61a6f6", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -235,5 +235,5 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         unsafe_context: UnsafeContext::new(SafeContext),\n     };\n \n-    tcx.map.krate().visit_all_items(&mut visitor);\n+    tcx.map.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n }"}, {"sha": "e5112749c0ee5f7d39a4178d7bdf48761487afb9", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -18,7 +18,7 @@ use syntax::attr;\n use syntax::entry::EntryPointType;\n use syntax_pos::Span;\n use hir::{Item, ItemFn};\n-use hir::intravisit::Visitor;\n+use hir::itemlikevisit::ItemLikeVisitor;\n \n struct EntryContext<'a, 'tcx: 'a> {\n     session: &'a Session,\n@@ -39,7 +39,7 @@ struct EntryContext<'a, 'tcx: 'a> {\n     non_main_fns: Vec<(NodeId, Span)> ,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for EntryContext<'a, 'tcx> {\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx Item) {\n         let def_id = self.map.local_def_id(item.id);\n         let def_key = self.map.def_key(def_id);\n@@ -74,7 +74,7 @@ pub fn find_entry_point(session: &Session, ast_map: &ast_map::Map) {\n         non_main_fns: Vec::new(),\n     };\n \n-    ast_map.krate().visit_all_items(&mut ctxt);\n+    ast_map.krate().visit_all_item_likes(&mut ctxt);\n \n     configure_main(&mut ctxt);\n }"}, {"sha": "cf08b59312d50a55d38f8e8fc401a70334799b73", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -26,7 +26,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = ItemVisitor {\n         tcx: tcx\n     };\n-    tcx.visit_all_items_in_krate(DepNode::IntrinsicCheck, &mut visitor);\n+    tcx.visit_all_item_likes_in_krate(DepNode::IntrinsicCheck, &mut visitor.as_deep_visitor());\n }\n \n struct ItemVisitor<'a, 'tcx: 'a> {"}, {"sha": "6fe8442474a9815507343edc3f5f0e6e65ef64b6", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -31,7 +31,7 @@ use util::nodemap::FxHashMap;\n \n use syntax::ast;\n use syntax::parse::token::InternedString;\n-use hir::intravisit::Visitor;\n+use hir::itemlikevisit::ItemLikeVisitor;\n use hir;\n \n // The actual lang items defined come at the end of this file in one handy table.\n@@ -149,7 +149,7 @@ struct LanguageItemCollector<'a, 'tcx: 'a> {\n     item_refs: FxHashMap<&'static str, usize>,\n }\n \n-impl<'a, 'v, 'tcx> Visitor<'v> for LanguageItemCollector<'a, 'tcx> {\n+impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if let Some(value) = extract(&item.attrs) {\n             let item_index = self.item_refs.get(&value[..]).cloned();\n@@ -219,7 +219,7 @@ impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n     }\n \n     pub fn collect_local_language_items(&mut self, krate: &hir::Crate) {\n-        krate.visit_all_items(self);\n+        krate.visit_all_item_likes(self);\n     }\n \n     pub fn collect_external_language_items(&mut self) {"}, {"sha": "d381188d56b542de5cb8e146264623835b8cec28", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IrMaps<'a, 'tcx> {\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let _task = tcx.dep_graph.in_task(DepNode::Liveness);\n-    tcx.map.krate().visit_all_items(&mut IrMaps::new(tcx));\n+    tcx.map.krate().visit_all_item_likes(&mut IrMaps::new(tcx).as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "848f4218d8840d770bef34ce41fa284e5192901a", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -29,6 +29,7 @@ use syntax::ast;\n use syntax::attr;\n use hir;\n use hir::intravisit::Visitor;\n+use hir::itemlikevisit::ItemLikeVisitor;\n use hir::intravisit;\n \n // Returns true if the given set of generics implies that the item it's\n@@ -324,7 +325,7 @@ struct CollectPrivateImplItemsVisitor<'a> {\n     worklist: &'a mut Vec<ast::NodeId>,\n }\n \n-impl<'a, 'v> Visitor<'v> for CollectPrivateImplItemsVisitor<'a> {\n+impl<'a, 'v> ItemLikeVisitor<'v> for CollectPrivateImplItemsVisitor<'a> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         // We need only trait impls here, not inherent impls, and only non-exported ones\n         if let hir::ItemImpl(.., Some(_), _, ref impl_items) = item.node {\n@@ -364,7 +365,7 @@ pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             access_levels: access_levels,\n             worklist: &mut reachable_context.worklist,\n         };\n-        tcx.map.krate().visit_all_items(&mut collect_private_impl_items);\n+        tcx.map.krate().visit_all_item_likes(&mut collect_private_impl_items);\n     }\n \n     // Step 2: Mark all symbols that the symbols on the worklist touch."}, {"sha": "5f9a6b283c6a06c42c921b9d8afd951851dc752a", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -1235,7 +1235,7 @@ pub fn resolve_crate(sess: &Session, map: &ast_map::Map) -> RegionMaps {\n             },\n             terminating_scopes: NodeSet()\n         };\n-        krate.visit_all_items(&mut visitor);\n+        krate.visit_all_item_likes(&mut visitor.as_deep_visitor());\n     }\n     return maps;\n }"}, {"sha": "c342342d73b7a9db7dec7c0454d50d3c04219130", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -119,22 +119,31 @@ pub fn krate(sess: &Session,\n         late_bound: NodeMap(),\n     };\n     sess.track_errors(|| {\n-        krate.visit_all_items(&mut LifetimeContext {\n+        intravisit::walk_crate(&mut LifetimeContext {\n             sess: sess,\n             hir_map: hir_map,\n             map: &mut map,\n             scope: &ROOT_SCOPE,\n             def_map: def_map,\n             trait_ref_hack: false,\n             labels_in_fn: vec![],\n-        });\n+        }, krate);\n     })?;\n     Ok(map)\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for LifetimeContext<'a, 'tcx> {\n+    // Override the nested functions -- lifetimes follow lexical scope,\n+    // so it's convenient to walk the tree in lexical order.\n+\n+    fn visit_nested_item(&mut self, id: hir::ItemId) {\n+        let item = self.hir_map.expect_item(id.id);\n+        self.visit_item(item)\n+    }\n+\n     fn visit_item(&mut self, item: &hir::Item) {\n-        assert!(self.labels_in_fn.is_empty());\n+        // Save labels for nested items.\n+        let saved_labels_in_fn = replace(&mut self.labels_in_fn, vec![]);\n \n         // Items always introduce a new root scope\n         self.with(RootScope, |_, this| {\n@@ -175,7 +184,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for LifetimeContext<'a, 'tcx> {\n         });\n \n         // Done traversing the item; remove any labels it created\n-        self.labels_in_fn.truncate(0);\n+        self.labels_in_fn = saved_labels_in_fn;\n     }\n \n     fn visit_foreign_item(&mut self, item: &hir::ForeignItem) {"}, {"sha": "12d32bf31b13dee60224341e288a6652bd5c35f8", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -50,7 +50,7 @@ pub fn check_crate(krate: &hir::Crate,\n \n     {\n         let mut cx = Context { sess: sess, items: items };\n-        krate.visit_all_items(&mut cx);\n+        krate.visit_all_item_likes(&mut cx.as_deep_visitor());\n     }\n     verify(sess, items);\n }"}, {"sha": "c6fff94438fce20844c5bdc075fe1646a0ca07b3", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -50,7 +50,7 @@ use syntax_pos::{DUMMY_SP, Span};\n use rustc_const_math::ConstInt;\n \n use hir;\n-use hir::intravisit::Visitor;\n+use hir::itemlikevisit::ItemLikeVisitor;\n \n pub use self::sty::{Binder, DebruijnIndex};\n pub use self::sty::{BuiltinBound, BuiltinBounds};\n@@ -2695,12 +2695,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_region(ty::ReScope(self.region_maps.node_extent(id)))\n     }\n \n-    pub fn visit_all_items_in_krate<V,F>(self,\n-                                         dep_node_fn: F,\n-                                         visitor: &mut V)\n-        where F: FnMut(DefId) -> DepNode<DefId>, V: Visitor<'gcx>\n+    pub fn visit_all_item_likes_in_krate<V,F>(self,\n+                                              dep_node_fn: F,\n+                                              visitor: &mut V)\n+        where F: FnMut(DefId) -> DepNode<DefId>, V: ItemLikeVisitor<'gcx>\n     {\n-        dep_graph::visit_all_items_in_krate(self.global_tcx(), dep_node_fn, visitor);\n+        dep_graph::visit_all_item_likes_in_krate(self.global_tcx(), dep_node_fn, visitor);\n     }\n \n     /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`"}, {"sha": "5e54e333bb90ce469a431a8bf659388c6aa2a03a", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -110,7 +110,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         }\n     };\n \n-    tcx.visit_all_items_in_krate(DepNode::BorrowCheck, &mut bccx);\n+    tcx.visit_all_item_likes_in_krate(DepNode::BorrowCheck, &mut bccx.as_deep_visitor());\n \n     if tcx.sess.borrowck_stats() {\n         println!(\"--- borrowck stats ---\");"}, {"sha": "f63a27e0d7563fd5df3af52c4d8000f7de7c1c48", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -78,7 +78,8 @@ impl<'a, 'v, 'tcx> Visitor<'v> for OuterVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.visit_all_items_in_krate(DepNode::MatchCheck, &mut OuterVisitor { tcx: tcx });\n+    tcx.visit_all_item_likes_in_krate(DepNode::MatchCheck,\n+                                      &mut OuterVisitor { tcx: tcx }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "605193a0434bd98e58377b1b7f5ca866c4dcf924", "filename": "src/librustc_driver/derive_registrar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_driver%2Fderive_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_driver%2Fderive_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fderive_registrar.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::dep_graph::DepNode;\n-use rustc::hir::intravisit::Visitor;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::map::Map;\n use rustc::hir;\n use syntax::ast;\n@@ -20,15 +20,15 @@ pub fn find(hir_map: &Map) -> Option<ast::NodeId> {\n     let krate = hir_map.krate();\n \n     let mut finder = Finder { registrar: None };\n-    krate.visit_all_items(&mut finder);\n+    krate.visit_all_item_likes(&mut finder);\n     finder.registrar\n }\n \n struct Finder {\n     registrar: Option<ast::NodeId>,\n }\n \n-impl<'v> Visitor<'v> for Finder {\n+impl<'v> ItemLikeVisitor<'v> for Finder {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if attr::contains_name(&item.attrs, \"rustc_derive_registrar\") {\n             self.registrar = Some(item.id);"}, {"sha": "84489c2e8c67257e8f0d9f026c07334f93cfae4c", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -51,7 +51,7 @@ use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::{Direction, INCOMING, OUTGOING, NodeIndex};\n use rustc::hir;\n-use rustc::hir::intravisit::Visitor;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use graphviz::IntoCow;\n use std::env;\n use std::fs::File;\n@@ -81,7 +81,7 @@ pub fn assert_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n                                           if_this_changed: vec![],\n                                           then_this_would_need: vec![] };\n         visitor.process_attrs(ast::CRATE_NODE_ID, &tcx.map.krate().attrs);\n-        tcx.map.krate().visit_all_items(&mut visitor);\n+        tcx.map.krate().visit_all_item_likes(&mut visitor);\n         (visitor.if_this_changed, visitor.then_this_would_need)\n     };\n \n@@ -167,7 +167,7 @@ impl<'a, 'tcx> IfThisChanged<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for IfThisChanged<'a, 'tcx> {\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for IfThisChanged<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         self.process_attrs(item.id, &item.attrs);\n     }"}, {"sha": "5697441b6676464f84b3d3d1983bb882f64532c5", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -34,6 +34,7 @@ use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::intravisit as visit;\n+use rustc::hir::intravisit::Visitor;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc::util::common::record_time;\n@@ -107,7 +108,8 @@ pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     record_time(&tcx.sess.perf_stats.incr_comp_hashes_time, || {\n         visitor.calculate_def_id(DefId::local(CRATE_DEF_INDEX),\n                                  |v| visit::walk_crate(v, krate));\n-        krate.visit_all_items(&mut visitor);\n+        // FIXME(#37713) if foreign items were item likes, could use ItemLikeVisitor\n+        krate.visit_all_item_likes(&mut visitor.as_deep_visitor());\n     });\n \n     tcx.sess.perf_stats.incr_comp_hashes_count.set(visitor.hashes.len() as u64);\n@@ -199,7 +201,7 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n }\n \n \n-impl<'a, 'tcx> visit::Visitor<'tcx> for HashItemsVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for HashItemsVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         self.calculate_node_id(item.id, |v| v.visit_item(item));\n         visit::walk_item(self, item);"}, {"sha": "f6b7abd2ef125f237159fd21348aaa1f7c2d049c", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -45,7 +45,7 @@ use super::load::DirtyNodes;\n use rustc::dep_graph::{DepGraphQuery, DepNode};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::hir::intravisit::Visitor;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use syntax::ast::{self, Attribute, NestedMetaItem};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use syntax::parse::token::InternedString;\n@@ -74,7 +74,7 @@ pub fn check_dirty_clean_annotations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let query = tcx.dep_graph.query();\n     debug!(\"query-nodes: {:?}\", query.nodes());\n     let krate = tcx.map.krate();\n-    krate.visit_all_items(&mut DirtyCleanVisitor {\n+    krate.visit_all_item_likes(&mut DirtyCleanVisitor {\n         tcx: tcx,\n         query: &query,\n         dirty_inputs: dirty_inputs,\n@@ -169,7 +169,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for DirtyCleanVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let def_id = self.tcx.map.local_def_id(item.id);\n         for attr in self.tcx.get_attrs(def_id).iter() {\n@@ -195,7 +195,7 @@ pub fn check_dirty_clean_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     tcx.dep_graph.with_ignore(||{\n         let krate = tcx.map.krate();\n-        krate.visit_all_items(&mut DirtyCleanMetadataVisitor {\n+        krate.visit_all_item_likes(&mut DirtyCleanMetadataVisitor {\n             tcx: tcx,\n             prev_metadata_hashes: prev_metadata_hashes,\n             current_metadata_hashes: current_metadata_hashes,\n@@ -209,7 +209,7 @@ pub struct DirtyCleanMetadataVisitor<'a, 'tcx:'a, 'm> {\n     current_metadata_hashes: &'m FxHashMap<DefId, Fingerprint>,\n }\n \n-impl<'a, 'tcx, 'm> Visitor<'tcx> for DirtyCleanMetadataVisitor<'a, 'tcx, 'm> {\n+impl<'a, 'tcx, 'm> ItemLikeVisitor<'tcx> for DirtyCleanMetadataVisitor<'a, 'tcx, 'm> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let def_id = self.tcx.map.local_def_id(item.id);\n "}, {"sha": "bbffe88316b312c32386eb5e5bd76994c21354aa", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -38,6 +38,7 @@ use syntax;\n use syntax_pos;\n \n use rustc::hir::{self, PatKind};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::intravisit::Visitor;\n use rustc::hir::intravisit;\n \n@@ -1074,7 +1075,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                      EncodeContext::encode_info_for_mod,\n                      FromId(CRATE_NODE_ID, (&krate.module, &krate.attrs, &hir::Public)));\n         let mut visitor = EncodeVisitor { index: index };\n-        krate.visit_all_items(&mut visitor);\n+        krate.visit_all_item_likes(&mut visitor.as_deep_visitor());\n         for macro_def in &krate.exported_macros {\n             visitor.visit_macro_def(macro_def);\n         }\n@@ -1164,7 +1165,7 @@ struct ImplVisitor<'a, 'tcx: 'a> {\n     impls: FxHashMap<DefId, Vec<DefIndex>>,\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for ImplVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if let hir::ItemImpl(..) = item.node {\n             let impl_id = self.tcx.map.local_def_id(item.id);\n@@ -1185,7 +1186,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             tcx: self.tcx,\n             impls: FxHashMap(),\n         };\n-        self.tcx.map.krate().visit_all_items(&mut visitor);\n+        self.tcx.map.krate().visit_all_item_likes(&mut visitor);\n \n         let all_impls: Vec<_> = visitor.impls\n             .into_iter()"}, {"sha": "992c0e9b5fc85739931bfbfc4bf3d1959f0eed75", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -38,9 +38,9 @@ use syntax_pos::Span;\n use std::mem;\n \n pub fn build_mir_for_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.visit_all_items_in_krate(DepNode::Mir, &mut BuildMir {\n+    tcx.visit_all_item_likes_in_krate(DepNode::Mir, &mut BuildMir {\n         tcx: tcx\n-    });\n+    }.as_deep_visitor());\n }\n \n /// A pass to lift all the types and substitutions in a Mir"}, {"sha": "5df8accd8cef13d024cf039be3a2b176e578c785", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -644,13 +644,13 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.visit_all_items_in_krate(DepNode::CheckConst,\n-                                 &mut CheckCrateVisitor {\n-                                     tcx: tcx,\n-                                     mode: Mode::Var,\n-                                     qualif: ConstQualif::NOT_CONST,\n-                                     rvalue_borrows: NodeMap(),\n-                                 });\n+    tcx.visit_all_item_likes_in_krate(DepNode::CheckConst,\n+                                      &mut CheckCrateVisitor {\n+                                          tcx: tcx,\n+                                          mode: Mode::Var,\n+                                          qualif: ConstQualif::NOT_CONST,\n+                                          rvalue_borrows: NodeMap(),\n+                                      }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "adcb7842ee1ffa230e61fcaaf7cbbefa97064402", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -33,10 +33,10 @@ struct CheckLoopVisitor<'a> {\n pub fn check_crate(sess: &Session, map: &Map) {\n     let _task = map.dep_graph.in_task(DepNode::CheckLoops);\n     let krate = map.krate();\n-    krate.visit_all_items(&mut CheckLoopVisitor {\n+    krate.visit_all_item_likes(&mut CheckLoopVisitor {\n         sess: sess,\n         cx: Normal,\n-    });\n+    }.as_deep_visitor());\n }\n \n impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {"}, {"sha": "7386be2528c9b4524c2309454d76517bfd94cefc", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -18,20 +18,20 @@ use rustc::ty::{self, TyCtxt, ParameterEnvironment};\n use rustc::traits::Reveal;\n \n use rustc::hir;\n-use rustc::hir::intravisit;\n+use rustc::hir::intravisit::{self, Visitor};\n use syntax::ast;\n use syntax_pos::Span;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut rvcx = RvalueContext { tcx: tcx };\n-    tcx.visit_all_items_in_krate(DepNode::RvalueCheck, &mut rvcx);\n+    tcx.visit_all_item_likes_in_krate(DepNode::RvalueCheck, &mut rvcx.as_deep_visitor());\n }\n \n struct RvalueContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n-impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for RvalueContext<'a, 'tcx> {\n     fn visit_fn(&mut self,\n                 fk: intravisit::FnKind<'v>,\n                 fd: &'v hir::FnDecl,"}, {"sha": "5f76f865c4acaa9f42fcf042a0ca1ee414d8dcd1", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -100,7 +100,8 @@ pub fn check_crate<'ast>(sess: &Session,\n         discriminant_map: RefCell::new(NodeMap()),\n     };\n     sess.track_errors(|| {\n-        ast_map.krate().visit_all_items(&mut visitor);\n+        // FIXME(#37712) could use ItemLikeVisitor if trait items were item-like\n+        ast_map.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n     })\n }\n "}, {"sha": "0464a93ef717587a09138eae1c8f6daec7ebf252", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -16,14 +16,14 @@ use errors;\n use syntax_pos::Span;\n use rustc::dep_graph::DepNode;\n use rustc::hir::map::Map;\n-use rustc::hir::intravisit::Visitor;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n struct RegistrarFinder {\n     registrars: Vec<(ast::NodeId, Span)> ,\n }\n \n-impl<'v> Visitor<'v> for RegistrarFinder {\n+impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if let hir::ItemFn(..) = item.node {\n             if attr::contains_name(&item.attrs,\n@@ -42,7 +42,7 @@ pub fn find_plugin_registrar(diagnostic: &errors::Handler,\n     let krate = hir_map.krate();\n \n     let mut finder = RegistrarFinder { registrars: Vec::new() };\n-    krate.visit_all_items(&mut finder);\n+    krate.visit_all_item_likes(&mut finder);\n \n     match finder.registrars.len() {\n         0 => None,"}, {"sha": "d9c1cfd9fdbaf44ae51a090f502048941bcf0b3f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -31,6 +31,7 @@ use rustc::hir::{self, PatKind};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n@@ -1039,7 +1040,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         let min = |vis1: ty::Visibility, vis2| {\n             if vis1.is_at_least(vis2, &self.tcx.map) { vis2 } else { vis1 }\n@@ -1161,7 +1162,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             tcx: tcx,\n             old_error_set: &visitor.old_error_set,\n         };\n-        krate.visit_all_items(&mut visitor);\n+        krate.visit_all_item_likes(&mut visitor);\n     }\n \n     visitor.access_levels"}, {"sha": "d744d2a6db37d7561f1f62af3e313f37a549859d", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -189,7 +189,7 @@\n //! regardless of whether it is actually needed or not.\n \n use rustc::hir;\n-use rustc::hir::intravisit as hir_visit;\n+use rustc::hir::intravisit::{self, Visitor};\n \n use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n@@ -306,10 +306,9 @@ fn collect_roots<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n             scx: scx,\n             mode: mode,\n             output: &mut roots,\n-            enclosing_item: None,\n         };\n \n-        scx.tcx().map.krate().visit_all_items(&mut visitor);\n+        scx.tcx().map.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n     }\n \n     roots\n@@ -1030,14 +1029,10 @@ struct RootCollector<'b, 'a: 'b, 'tcx: 'a + 'b> {\n     scx: &'b SharedCrateContext<'a, 'tcx>,\n     mode: TransItemCollectionMode,\n     output: &'b mut Vec<TransItem<'tcx>>,\n-    enclosing_item: Option<&'tcx hir::Item>,\n }\n \n-impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n+impl<'b, 'a, 'v> Visitor<'v> for RootCollector<'b, 'a, 'v> {\n     fn visit_item(&mut self, item: &'v hir::Item) {\n-        let old_enclosing_item = self.enclosing_item;\n-        self.enclosing_item = Some(item);\n-\n         match item.node {\n             hir::ItemExternCrate(..) |\n             hir::ItemUse(..)         |\n@@ -1095,8 +1090,7 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n             }\n         }\n \n-        hir_visit::walk_item(self, item);\n-        self.enclosing_item = old_enclosing_item;\n+        intravisit::walk_item(self, item)\n     }\n \n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n@@ -1132,7 +1126,7 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n             _ => { /* Nothing to do here */ }\n         }\n \n-        hir_visit::walk_impl_item(self, ii)\n+        intravisit::walk_impl_item(self, ii)\n     }\n }\n "}, {"sha": "aa23a1817227657f8e71aad3d0051ca8ae4c8082", "filename": "src/librustc_trans/symbol_names_test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsymbol_names_test.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -35,7 +35,8 @@ pub fn report_symbol_names(scx: &SharedCrateContext) {\n \n     let _ignore = tcx.dep_graph.in_ignore();\n     let mut visitor = SymbolNamesTest { scx: scx };\n-    tcx.map.krate().visit_all_items(&mut visitor);\n+    // FIXME(#37712) could use ItemLikeVisitor if trait items were item-like\n+    tcx.map.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n }\n \n struct SymbolNamesTest<'a, 'tcx:'a> {"}, {"sha": "35f419bbf739d726b3bb2451dcb5c1bd8de05127", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -439,7 +439,7 @@ impl Ord for TraitInfo {\n /// Retrieve all traits in this crate and any dependent crates.\n pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n     if ccx.all_traits.borrow().is_none() {\n-        use rustc::hir::intravisit;\n+        use rustc::hir::itemlikevisit;\n \n         let mut traits = vec![];\n \n@@ -450,7 +450,7 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n             map: &'a hir_map::Map<'tcx>,\n             traits: &'a mut AllTraitsVec,\n         }\n-        impl<'v, 'a, 'tcx> intravisit::Visitor<'v> for Visitor<'a, 'tcx> {\n+        impl<'v, 'a, 'tcx> itemlikevisit::ItemLikeVisitor<'v> for Visitor<'a, 'tcx> {\n             fn visit_item(&mut self, i: &'v hir::Item) {\n                 match i.node {\n                     hir::ItemTrait(..) => {\n@@ -461,7 +461,7 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n                 }\n             }\n         }\n-        ccx.tcx.map.krate().visit_all_items(&mut Visitor {\n+        ccx.tcx.map.krate().visit_all_item_likes(&mut Visitor {\n             map: &ccx.tcx.map,\n             traits: &mut traits,\n         });"}, {"sha": "7cf773688e6d73c14e9bae52365eacc73742f301", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -121,6 +121,7 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{self, BytePos, Span};\n \n use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, PatKind};\n use rustc::hir::print as pprust;\n use rustc_back::slice;\n@@ -525,7 +526,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for CheckItemBodiesVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemBodiesVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &'tcx hir::Item) {\n         check_item_body(self.ccx, i);\n     }\n@@ -534,21 +535,22 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemBodiesVisitor<'a, 'tcx> {\n pub fn check_wf_new(ccx: &CrateCtxt) -> CompileResult {\n     ccx.tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(ccx);\n-        ccx.tcx.visit_all_items_in_krate(DepNode::WfCheck, &mut visit);\n+        ccx.tcx.visit_all_item_likes_in_krate(DepNode::WfCheck, &mut visit.as_deep_visitor());\n     })\n }\n \n pub fn check_item_types(ccx: &CrateCtxt) -> CompileResult {\n     ccx.tcx.sess.track_errors(|| {\n         let mut visit = CheckItemTypesVisitor { ccx: ccx };\n-        ccx.tcx.visit_all_items_in_krate(DepNode::TypeckItemType, &mut visit);\n+        ccx.tcx.visit_all_item_likes_in_krate(DepNode::TypeckItemType,\n+                                              &mut visit.as_deep_visitor());\n     })\n }\n \n pub fn check_item_bodies(ccx: &CrateCtxt) -> CompileResult {\n     ccx.tcx.sess.track_errors(|| {\n         let mut visit = CheckItemBodiesVisitor { ccx: ccx };\n-        ccx.tcx.visit_all_items_in_krate(DepNode::TypeckItemBody, &mut visit);\n+        ccx.tcx.visit_all_item_likes_in_krate(DepNode::TypeckItemBody, &mut visit);\n \n         // Process deferred obligations, now that all functions\n         // bodies have been fully inferred."}, {"sha": "d9411070e2e82de5d7c7baa561c9301b648aad40", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -16,7 +16,7 @@ use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n \n use rustc::hir;\n-use rustc::hir::intravisit::Visitor;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n struct UnusedTraitImportVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -40,7 +40,7 @@ impl<'a, 'tcx> UnusedTraitImportVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for UnusedTraitImportVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for UnusedTraitImportVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if item.vis == hir::Public || item.span == DUMMY_SP {\n             return;\n@@ -63,5 +63,5 @@ impl<'a, 'tcx, 'v> Visitor<'v> for UnusedTraitImportVisitor<'a, 'tcx> {\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let _task = tcx.dep_graph.in_task(DepNode::UnusedTraitCheck);\n     let mut visitor = UnusedTraitImportVisitor { tcx: tcx };\n-    tcx.map.krate().visit_all_items(&mut visitor);\n+    tcx.map.krate().visit_all_item_likes(&mut visitor);\n }"}, {"sha": "e8b0044ed20c60f666307ceac8f031917ab9719f", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -34,7 +34,7 @@ use rustc::infer::{self, InferCtxt, TypeOrigin};\n use syntax_pos::Span;\n use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n-use rustc::hir::intravisit;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{Item, ItemImpl};\n use rustc::hir;\n \n@@ -51,7 +51,7 @@ struct CoherenceCheckVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     cc: &'a CoherenceChecker<'a, 'gcx, 'tcx>,\n }\n \n-impl<'a, 'gcx, 'tcx, 'v> intravisit::Visitor<'v> for CoherenceCheckVisitor<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx, 'v> ItemLikeVisitor<'v> for CoherenceCheckVisitor<'a, 'gcx, 'tcx> {\n     fn visit_item(&mut self, item: &Item) {\n         if let ItemImpl(..) = item.node {\n             self.cc.check_implementation(item)\n@@ -87,8 +87,9 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n         // Check implementations and traits. This populates the tables\n         // containing the inherent methods and extension methods. It also\n         // builds up the trait inheritance table.\n-        self.crate_context.tcx.visit_all_items_in_krate(DepNode::CoherenceCheckImpl,\n-                                                        &mut CoherenceCheckVisitor { cc: self });\n+        self.crate_context.tcx.visit_all_item_likes_in_krate(\n+            DepNode::CoherenceCheckImpl,\n+            &mut CoherenceCheckVisitor { cc: self });\n \n         // Populate the table of destructors. It might seem a bit strange to\n         // do this here, but it's actually the most convenient place, since"}, {"sha": "d5a7726aa142b71b4c801262ce95f57d15346e2c", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -17,12 +17,12 @@ use rustc::ty::{self, TyCtxt};\n use syntax::ast;\n use syntax_pos::Span;\n use rustc::dep_graph::DepNode;\n-use rustc::hir::intravisit;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut orphan = OrphanChecker { tcx: tcx };\n-    tcx.visit_all_items_in_krate(DepNode::CoherenceOrphanCheck, &mut orphan);\n+    tcx.visit_all_item_likes_in_krate(DepNode::CoherenceOrphanCheck, &mut orphan);\n }\n \n struct OrphanChecker<'cx, 'tcx: 'cx> {\n@@ -380,7 +380,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n     }\n }\n \n-impl<'cx, 'tcx, 'v> intravisit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n+impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         self.check_item(item);\n     }"}, {"sha": "fb17255ccbc68daab195c41694106632ef334987", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::{self, TyCtxt};\n use syntax::ast;\n use rustc::dep_graph::DepNode;\n use rustc::hir;\n-use rustc::hir::intravisit;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use util::nodemap::DefIdMap;\n use lint;\n \n@@ -30,7 +30,7 @@ pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     // this secondary walk specifically checks for some other cases,\n     // like defaulted traits, for which additional overlap rules exist\n-    tcx.visit_all_items_in_krate(DepNode::CoherenceOverlapCheckSpecial, &mut overlap);\n+    tcx.visit_all_item_likes_in_krate(DepNode::CoherenceOverlapCheckSpecial, &mut overlap);\n }\n \n struct OverlapChecker<'cx, 'tcx: 'cx> {\n@@ -97,7 +97,7 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n     }\n }\n \n-impl<'cx, 'tcx, 'v> intravisit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n+impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OverlapChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item) {\n         match item.node {\n             hir::ItemEnum(..) |"}, {"sha": "dd9d3e0d5b7e6f6e1cd7fcf991933683ae7ba531", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -12,12 +12,12 @@\n //! crate or pertains to a type defined in this crate.\n \n use rustc::ty::TyCtxt;\n-use rustc::hir::intravisit;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, Unsafety};\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut orphan = UnsafetyChecker { tcx: tcx };\n-    tcx.map.krate().visit_all_items(&mut orphan);\n+    let mut unsafety = UnsafetyChecker { tcx: tcx };\n+    tcx.map.krate().visit_all_item_likes(&mut unsafety);\n }\n \n struct UnsafetyChecker<'cx, 'tcx: 'cx> {\n@@ -94,7 +94,7 @@ impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> {\n     }\n }\n \n-impl<'cx, 'tcx, 'v> intravisit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n+impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item) {\n         match item.node {\n             hir::ItemDefaultImpl(unsafety, _) => {"}, {"sha": "52669ccc842563ad11fc53ab7cd7b96a3b225ce0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -83,7 +83,8 @@ use syntax::{abi, ast, attr};\n use syntax::parse::token::{self, keywords};\n use syntax_pos::Span;\n \n-use rustc::hir::{self, intravisit, map as hir_map, print as pprust};\n+use rustc::hir::{self, map as hir_map, print as pprust};\n+use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n \n@@ -92,7 +93,7 @@ use rustc::hir::def_id::DefId;\n \n pub fn collect_item_types(ccx: &CrateCtxt) {\n     let mut visitor = CollectItemTypesVisitor { ccx: ccx };\n-    ccx.tcx.visit_all_items_in_krate(DepNode::CollectItem, &mut visitor);\n+    ccx.tcx.visit_all_item_likes_in_krate(DepNode::CollectItem, &mut visitor.as_deep_visitor());\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -128,7 +129,7 @@ struct CollectItemTypesVisitor<'a, 'tcx: 'a> {\n     ccx: &'a CrateCtxt<'a, 'tcx>\n }\n \n-impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for CollectItemTypesVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for CollectItemTypesVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         convert_item(self.ccx, item);\n         intravisit::walk_item(self, item);"}, {"sha": "2c045bc88a2611f39bb20a3ed6ee8433ab1ed60a", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -22,7 +22,7 @@ use rustc::ty::maps::ItemVariances;\n use rustc::hir::map as hir_map;\n use syntax::ast;\n use rustc::hir;\n-use rustc::hir::intravisit::Visitor;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n use super::terms::*;\n use super::terms::VarianceTerm::*;\n@@ -65,13 +65,13 @@ pub fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>)\n     };\n \n     // See README.md for a discussion on dep-graph management.\n-    tcx.visit_all_items_in_krate(|def_id| ItemVariances::to_dep_node(&def_id),\n-                                 &mut constraint_cx);\n+    tcx.visit_all_item_likes_in_krate(|def_id| ItemVariances::to_dep_node(&def_id),\n+                                      &mut constraint_cx);\n \n     constraint_cx\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         let tcx = self.terms_cx.tcx;\n         let did = tcx.map.local_def_id(item.id);"}, {"sha": "c40adb5f428e46149711fc4f076eaa935ac76517", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fbf8c53cd37498e5eaadf02740e2aac87f6118/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=36fbf8c53cd37498e5eaadf02740e2aac87f6118", "patch": "@@ -27,7 +27,7 @@ use std::fmt;\n use std::rc::Rc;\n use syntax::ast;\n use rustc::hir;\n-use rustc::hir::intravisit::Visitor;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use util::nodemap::NodeMap;\n \n use self::VarianceTerm::*;\n@@ -109,7 +109,7 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n     };\n \n     // See README.md for a discussion on dep-graph management.\n-    tcx.visit_all_items_in_krate(|def_id| ItemVariances::to_dep_node(&def_id), &mut terms_cx);\n+    tcx.visit_all_item_likes_in_krate(|def_id| ItemVariances::to_dep_node(&def_id), &mut terms_cx);\n \n     terms_cx\n }\n@@ -227,7 +227,7 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         debug!(\"add_inferreds for item {}\",\n                self.tcx.map.node_to_string(item.id));"}]}