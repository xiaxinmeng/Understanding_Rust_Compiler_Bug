{"sha": "24d2cd0ef4585743736aa86fb4b94d00ca40f3ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZDJjZDBlZjQ1ODU3NDM3MzZhYTg2ZmI0Yjk0ZDAwY2E0MGYzYWI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-10T03:16:07Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-10T14:33:21Z"}, "message": "std: Iterator.take_ -> .take", "tree": {"sha": "88a2b4c7e6b805a86806832e9cf318f2e0d1c6c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88a2b4c7e6b805a86806832e9cf318f2e0d1c6c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24d2cd0ef4585743736aa86fb4b94d00ca40f3ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24d2cd0ef4585743736aa86fb4b94d00ca40f3ab", "html_url": "https://github.com/rust-lang/rust/commit/24d2cd0ef4585743736aa86fb4b94d00ca40f3ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24d2cd0ef4585743736aa86fb4b94d00ca40f3ab/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f40d215eae0b0370807368ba58edd0befc8bcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f40d215eae0b0370807368ba58edd0befc8bcb", "html_url": "https://github.com/rust-lang/rust/commit/68f40d215eae0b0370807368ba58edd0befc8bcb"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "bb9ac74bc77ac3d51563e2a6b73ec8b32859e65a", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24d2cd0ef4585743736aa86fb4b94d00ca40f3ab/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24d2cd0ef4585743736aa86fb4b94d00ca40f3ab/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=24d2cd0ef4585743736aa86fb4b94d00ca40f3ab", "patch": "@@ -696,7 +696,7 @@ mod tests {\n         let u: ~[int] = deq.iter().map(|&x| x).collect();\n         assert_eq!(u, v);\n \n-        let mut seq = iterator::count(0u, 2).take_(256);\n+        let mut seq = iterator::count(0u, 2).take(256);\n         let deq: RingBuf<uint> = seq.collect();\n         for (i, &x) in deq.iter().enumerate() {\n             assert_eq!(2*i, x);"}, {"sha": "e72312156496974eb07635d128382817f1064f2d", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/24d2cd0ef4585743736aa86fb4b94d00ca40f3ab/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24d2cd0ef4585743736aa86fb4b94d00ca40f3ab/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=24d2cd0ef4585743736aa86fb4b94d00ca40f3ab", "patch": "@@ -210,22 +210,21 @@ pub trait Iterator<A> {\n         Skip{iter: self, n: n}\n     }\n \n-    // FIXME: #5898: should be called take\n     /// Creates an iterator which yields the first `n` elements of this\n     /// iterator, and then it will always return None.\n     ///\n     /// # Example\n     ///\n     /// ~~~ {.rust}\n     /// let a = [1, 2, 3, 4, 5];\n-    /// let mut it = a.iter().take_(3);\n+    /// let mut it = a.iter().take(3);\n     /// assert_eq!(it.next().get(), &1);\n     /// assert_eq!(it.next().get(), &2);\n     /// assert_eq!(it.next().get(), &3);\n     /// assert!(it.next().is_none());\n     /// ~~~\n     #[inline]\n-    fn take_(self, n: uint) -> Take<Self> {\n+    fn take(self, n: uint) -> Take<Self> {\n         Take{iter: self, n: n}\n     }\n \n@@ -263,7 +262,7 @@ pub trait Iterator<A> {\n     /// ~~~ {.rust}\n     /// let xs = [2u, 3];\n     /// let ys = [0u, 1, 0, 1, 2];\n-    /// let mut it = xs.iter().flat_map_(|&x| count(0u, 1).take_(x));\n+    /// let mut it = xs.iter().flat_map_(|&x| count(0u, 1).take(x));\n     /// // Check that `it` has the same elements as `ys`\n     /// let mut i = 0;\n     /// for x: uint in it {\n@@ -288,15 +287,14 @@ pub trait Iterator<A> {\n     ///let xs = [1u, 4, 2, 3, 8, 9, 6];\n     ///let sum = xs.iter()\n     ///            .map(|&x| x)\n-    ///            .peek_(|&x| debug!(\"filtering %u\", x))\n+    ///            .peek(|&x| debug!(\"filtering %u\", x))\n     ///            .filter(|&x| x % 2 == 0)\n-    ///            .peek_(|&x| debug!(\"%u made it through\", x))\n+    ///            .peek(|&x| debug!(\"%u made it through\", x))\n     ///            .sum();\n     ///println(sum.to_str());\n     /// ~~~\n-    // FIXME: #5898: should be called `peek`\n     #[inline]\n-    fn peek_<'r>(self, f: &'r fn(&A)) -> Peek<'r, A, Self> {\n+    fn peek<'r>(self, f: &'r fn(&A)) -> Peek<'r, A, Self> {\n         Peek{iter: self, f: f}\n     }\n \n@@ -700,7 +698,7 @@ pub trait ClonableIterator {\n     /// # Example\n     ///\n     /// ~~~ {.rust}\n-    /// let a = count(1,1).take_(1);\n+    /// let a = count(1,1).take(1);\n     /// let mut cy = a.cycle();\n     /// assert_eq!(cy.next(), Some(1));\n     /// assert_eq!(cy.next(), Some(1));\n@@ -1527,7 +1525,7 @@ mod tests {\n \n     #[test]\n     fn test_counter_from_iter() {\n-        let mut it = count(0, 5).take_(10);\n+        let mut it = count(0, 5).take(10);\n         let xs: ~[int] = FromIterator::from_iterator(&mut it);\n         assert_eq!(xs, ~[0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n     }\n@@ -1545,7 +1543,7 @@ mod tests {\n         }\n         assert_eq!(i, expected.len());\n \n-        let ys = count(30u, 10).take_(4);\n+        let ys = count(30u, 10).take(4);\n         let mut it = xs.iter().map(|&x| x).chain_(ys);\n         let mut i = 0;\n         for x in it {\n@@ -1557,7 +1555,7 @@ mod tests {\n \n     #[test]\n     fn test_filter_map() {\n-        let mut it = count(0u, 1u).take_(10)\n+        let mut it = count(0u, 1u).take(10)\n             .filter_map(|x| if x.is_even() { Some(x*x) } else { None });\n         assert_eq!(it.collect::<~[uint]>(), ~[0*0, 2*2, 4*4, 6*6, 8*8]);\n     }\n@@ -1614,7 +1612,7 @@ mod tests {\n     fn test_iterator_take() {\n         let xs = [0u, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n         let ys = [0u, 1, 2, 3, 5];\n-        let mut it = xs.iter().take_(5);\n+        let mut it = xs.iter().take(5);\n         let mut i = 0;\n         for &x in it {\n             assert_eq!(x, ys[i]);\n@@ -1646,7 +1644,7 @@ mod tests {\n     fn test_iterator_flat_map() {\n         let xs = [0u, 3, 6];\n         let ys = [0u, 1, 2, 3, 4, 5, 6, 7, 8];\n-        let mut it = xs.iter().flat_map_(|&x| count(x, 1).take_(3));\n+        let mut it = xs.iter().flat_map_(|&x| count(x, 1).take(3));\n         let mut i = 0;\n         for x in it {\n             assert_eq!(x, ys[i]);\n@@ -1662,7 +1660,7 @@ mod tests {\n \n         let ys = xs.iter()\n                    .map(|&x| x)\n-                   .peek_(|_| n += 1)\n+                   .peek(|_| n += 1)\n                    .collect::<~[uint]>();\n \n         assert_eq!(n, xs.len());\n@@ -1693,13 +1691,13 @@ mod tests {\n     #[test]\n     fn test_cycle() {\n         let cycle_len = 3;\n-        let it = count(0u, 1).take_(cycle_len).cycle();\n+        let it = count(0u, 1).take(cycle_len).cycle();\n         assert_eq!(it.size_hint(), (uint::max_value, None));\n-        for (i, x) in it.take_(100).enumerate() {\n+        for (i, x) in it.take(100).enumerate() {\n             assert_eq!(i % cycle_len, x);\n         }\n \n-        let mut it = count(0u, 1).take_(0).cycle();\n+        let mut it = count(0u, 1).take(0).cycle();\n         assert_eq!(it.size_hint(), (0, Some(0)));\n         assert_eq!(it.next(), None);\n     }\n@@ -1769,7 +1767,7 @@ mod tests {\n         assert_eq!(c.size_hint(), (uint::max_value, None));\n         assert_eq!(vi.size_hint(), (10, Some(10)));\n \n-        assert_eq!(c.take_(5).size_hint(), (5, Some(5)));\n+        assert_eq!(c.take(5).size_hint(), (5, Some(5)));\n         assert_eq!(c.skip(5).size_hint().second(), None);\n         assert_eq!(c.take_while(|_| false).size_hint(), (0, None));\n         assert_eq!(c.skip_while(|_| false).size_hint(), (0, None));\n@@ -1781,8 +1779,8 @@ mod tests {\n         assert_eq!(c.map(|_| 0).size_hint(), (uint::max_value, None));\n         assert_eq!(c.filter_map(|_| Some(0)).size_hint(), (0, None));\n \n-        assert_eq!(vi.take_(5).size_hint(), (5, Some(5)));\n-        assert_eq!(vi.take_(12).size_hint(), (10, Some(10)));\n+        assert_eq!(vi.take(5).size_hint(), (5, Some(5)));\n+        assert_eq!(vi.take(12).size_hint(), (10, Some(10)));\n         assert_eq!(vi.skip(3).size_hint(), (7, Some(7)));\n         assert_eq!(vi.skip(12).size_hint(), (0, Some(0)));\n         assert_eq!(vi.take_while(|_| false).size_hint(), (0, Some(10)));\n@@ -2001,10 +1999,10 @@ mod tests {\n     fn test_random_access_take() {\n         let xs = [1, 2, 3, 4, 5];\n         let empty: &[int] = [];\n-        check_randacc_iter(xs.iter().take_(3), 3);\n-        check_randacc_iter(xs.iter().take_(20), xs.len());\n-        check_randacc_iter(xs.iter().take_(0), 0);\n-        check_randacc_iter(empty.iter().take_(2), 0);\n+        check_randacc_iter(xs.iter().take(3), 3);\n+        check_randacc_iter(xs.iter().take(20), xs.len());\n+        check_randacc_iter(xs.iter().take(0), 0);\n+        check_randacc_iter(empty.iter().take(2), 0);\n     }\n \n     #[test]\n@@ -2019,8 +2017,8 @@ mod tests {\n     fn test_random_access_peek() {\n         let xs = [1, 2, 3, 4, 5];\n \n-        // test .map and .peek_ that don't implement Clone\n-        let it = xs.iter().peek_(|_| {});\n+        // test .map and .peek that don't implement Clone\n+        let it = xs.iter().peek(|_| {});\n         assert_eq!(xs.len(), it.indexable());\n         for (i, elt) in xs.iter().enumerate() {\n             assert_eq!(Some(elt), it.idx(i));\n@@ -2032,7 +2030,7 @@ mod tests {\n     fn test_random_access_map() {\n         let xs = [1, 2, 3, 4, 5];\n \n-        // test .map and .peek_ that don't implement Clone\n+        // test .map and .peek that don't implement Clone\n         let it = xs.iter().map(|x| *x);\n         assert_eq!(xs.len(), it.indexable());\n         for (i, elt) in xs.iter().enumerate() {\n@@ -2044,7 +2042,7 @@ mod tests {\n     fn test_random_access_cycle() {\n         let xs = [1, 2, 3, 4, 5];\n         let empty: &[int] = [];\n-        check_randacc_iter(xs.iter().cycle().take_(27), 27);\n+        check_randacc_iter(xs.iter().cycle().take(27), 27);\n         check_randacc_iter(empty.iter().cycle(), 0);\n     }\n "}]}