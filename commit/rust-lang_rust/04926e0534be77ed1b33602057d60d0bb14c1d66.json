{"sha": "04926e0534be77ed1b33602057d60d0bb14c1d66", "node_id": "C_kwDOAAsO6NoAKDA0OTI2ZTA1MzRiZTc3ZWQxYjMzNjAyMDU3ZDYwZDBiYjE0YzFkNjY", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-11-22T21:15:27Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-12-21T03:23:08Z"}, "message": "Switch `#[track_caller]` back to a no-op unless feature gate is enabled\n\nThis patch fixes a regression, in which `#[track_caller]`, which was\npreviously a no-op, was changed to actually turn on the behavior. This\nshould instead only happen behind the `closure_track_caller` feature\ngate.\n\nAlso, add a warning for the user to understand how their code will\ncompile depending on the feature gate being turned on or not.\n\nFixes #104588", "tree": {"sha": "dda4c4cc31b9ca45cd7c31beb7316b784731da9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda4c4cc31b9ca45cd7c31beb7316b784731da9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04926e0534be77ed1b33602057d60d0bb14c1d66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04926e0534be77ed1b33602057d60d0bb14c1d66", "html_url": "https://github.com/rust-lang/rust/commit/04926e0534be77ed1b33602057d60d0bb14c1d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04926e0534be77ed1b33602057d60d0bb14c1d66/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b", "html_url": "https://github.com/rust-lang/rust/commit/1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b"}], "stats": {"total": 158, "additions": 157, "deletions": 1}, "files": [{"sha": "3980f9a2a7a58831c45219ae743841f9917d0622", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04926e0534be77ed1b33602057d60d0bb14c1d66/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/04926e0534be77ed1b33602057d60d0bb14c1d66/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=04926e0534be77ed1b33602057d60d0bb14c1d66", "patch": "@@ -350,6 +350,8 @@ lint_builtin_mutable_transmutes =\n \n lint_builtin_unstable_features = unstable feature\n \n+lint_ungated_async_fn_track_caller = `#[track_caller]` on async functions is a no-op, unless the `closure_track_caller` feature is enabled\n+\n lint_builtin_unreachable_pub = unreachable `pub` {$what}\n     .suggestion = consider restricting its visibility\n     .help = or consider exporting it for use by other crates"}, {"sha": "d7d91a12e65849abccc6ef26d3d36e77741f227f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/04926e0534be77ed1b33602057d60d0bb14c1d66/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04926e0534be77ed1b33602057d60d0bb14c1d66/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=04926e0534be77ed1b33602057d60d0bb14c1d66", "patch": "@@ -25,6 +25,7 @@ use crate::{\n     types::{transparent_newtype_field, CItemKind},\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext,\n };\n+use hir::IsAsync;\n use rustc_ast::attr;\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::visit::{FnCtxt, FnKind};\n@@ -40,7 +41,10 @@ use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, Gate\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LocalDefIdSet, CRATE_DEF_ID};\n-use rustc_hir::{ForeignItemKind, GenericParamKind, HirId, Node, PatKind, PredicateOrigin};\n+use rustc_hir::intravisit::FnKind as HirFnKind;\n+use rustc_hir::{\n+    Body, FnDecl, ForeignItemKind, GenericParamKind, HirId, Node, PatKind, PredicateOrigin,\n+};\n use rustc_index::vec::Idx;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf};\n@@ -1370,6 +1374,45 @@ impl<'tcx> LateLintPass<'tcx> for UnstableFeatures {\n     }\n }\n \n+declare_lint! {\n+    /// `#[track_caller]` is a no-op without corresponding feature flag\n+    UNGATED_ASYNC_FN_TRACK_CALLER,\n+    Warn,\n+    \"enabling track_caller on an async fn is a no-op unless the closure_track_caller feature is enabled\"\n+}\n+\n+declare_lint_pass!(\n+    /// Explains corresponding feature flag must be enabled for the `#[track_caller] attribute to\n+    /// do anything\n+    UngatedAsyncFnTrackCaller => [UNGATED_ASYNC_FN_TRACK_CALLER]\n+);\n+\n+impl<'tcx> LateLintPass<'tcx> for UngatedAsyncFnTrackCaller {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'_>,\n+        fn_kind: HirFnKind<'_>,\n+        _: &'tcx FnDecl<'_>,\n+        _: &'tcx Body<'_>,\n+        span: Span,\n+        hir_id: HirId,\n+    ) {\n+        if let HirFnKind::ItemFn(_, _, _) = fn_kind && fn_kind.asyncness() == IsAsync::Async && !cx.tcx.features().closure_track_caller {\n+            // Now, check if the function has the `#[track_caller]` attribute\n+            let attrs = cx.tcx.hir().attrs(hir_id);\n+            let maybe_track_caller = attrs.iter().find(|attr| attr.has_name(sym::track_caller));\n+            if let Some(attr) = maybe_track_caller {\n+                cx.struct_span_lint(\n+                    UNGATED_ASYNC_FN_TRACK_CALLER,\n+                    span.with_hi(attr.span.hi()),\n+                    fluent::lint_ungated_async_fn_track_caller,\n+                    |lint| lint,\n+                    );\n+            }\n+        }\n+    }\n+}\n+\n declare_lint! {\n     /// The `unreachable_pub` lint triggers for `pub` items not reachable from\n     /// the crate root."}, {"sha": "5ef40408e2693c09df65d1659999ac3d7c3697f6", "filename": "src/test/ui/async-await/track-caller/issue-104588-no-op-panic-track-caller.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.rs?ref=04926e0534be77ed1b33602057d60d0bb14c1d66", "patch": "@@ -0,0 +1,78 @@\n+// run-pass\n+// edition:2021\n+// needs-unwind\n+\n+\n+use std::future::Future;\n+use std::panic;\n+use std::sync::{Arc, Mutex};\n+use std::task::{Context, Poll, Wake};\n+use std::thread::{self, Thread};\n+\n+/// A waker that wakes up the current thread when called.\n+struct ThreadWaker(Thread);\n+\n+impl Wake for ThreadWaker {\n+    fn wake(self: Arc<Self>) {\n+        self.0.unpark();\n+    }\n+}\n+\n+/// Run a future to completion on the current thread.\n+fn block_on<T>(fut: impl Future<Output = T>) -> T {\n+    // Pin the future so it can be polled.\n+    let mut fut = Box::pin(fut);\n+\n+    // Create a new context to be passed to the future.\n+    let t = thread::current();\n+    let waker = Arc::new(ThreadWaker(t)).into();\n+    let mut cx = Context::from_waker(&waker);\n+\n+    // Run the future to completion.\n+    loop {\n+        match fut.as_mut().poll(&mut cx) {\n+            Poll::Ready(res) => return res,\n+            Poll::Pending => thread::park(),\n+        }\n+    }\n+}\n+\n+async fn bar() {\n+    panic!()\n+}\n+\n+async fn foo() {\n+    bar().await\n+}\n+\n+#[track_caller] //~ WARN `#[track_caller]` on async functions is a no-op, unless the `closure_track_caller` feature is enabled [ungated_async_fn_track_caller]\n+async fn bar_track_caller() {\n+    panic!()\n+}\n+\n+async fn foo_track_caller() {\n+    bar_track_caller().await\n+}\n+\n+fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n+    let loc = Arc::new(Mutex::new(None));\n+\n+    let hook = panic::take_hook();\n+    {\n+        let loc = loc.clone();\n+        panic::set_hook(Box::new(move |info| {\n+            *loc.lock().unwrap() = info.location().map(|loc| loc.line())\n+        }));\n+    }\n+    panic::catch_unwind(f).unwrap_err();\n+    panic::set_hook(hook);\n+    let x = loc.lock().unwrap().unwrap();\n+    x\n+}\n+\n+fn main() {\n+    assert_eq!(panicked_at(|| block_on(foo())), 41);\n+    // Since the `closure_track_caller` feature is not enabled, the\n+    // `track_caller annotation does nothing.\n+    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 50);\n+}"}, {"sha": "5bfd9ed8490fd3d0dc39525c9f683c61f573803c", "filename": "src/test/ui/async-await/track-caller/issue-104588-no-op-panic-track-caller.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.stderr?ref=04926e0534be77ed1b33602057d60d0bb14c1d66", "patch": "@@ -0,0 +1,12 @@\n+warning: `#[track_caller]` on async functions is a no-op, unless the `closure_track_caller` feature is enabled\n+  --> $DIR/issue-104588-no-op-panic-track-caller.rs:48:16\n+   |\n+LL |   #[track_caller]\n+   |  ________________^\n+LL | | async fn bar_track_caller() {\n+   | |_\n+   |\n+   = note: `#[warn(ungated_async_fn_track_caller)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "146d3c9ec53dc2e4c39f520afa176fa0ac21e36c", "filename": "src/test/ui/async-await/track-caller/issue-104588-no-op-track-caller.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.rs?ref=04926e0534be77ed1b33602057d60d0bb14c1d66", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+// edition:2021\n+\n+#[track_caller] //~ WARN `#[track_caller]` on async functions is a no-op, unless the `closure_track_caller` feature is enabled\n+async fn foo() {}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "bf66cc9ea90fcbb19340fdac9eb8f60978ee8b26", "filename": "src/test/ui/async-await/track-caller/issue-104588-no-op-track-caller.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.stderr?ref=04926e0534be77ed1b33602057d60d0bb14c1d66", "patch": "@@ -0,0 +1,12 @@\n+warning: `#[track_caller]` on async functions is a no-op, unless the `closure_track_caller` feature is enabled\n+  --> $DIR/issue-104588-no-op-track-caller.rs:4:16\n+   |\n+LL |   #[track_caller]\n+   |  ________________^\n+LL | | async fn foo() {}\n+   | |_\n+   |\n+   = note: `#[warn(ungated_async_fn_track_caller)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}