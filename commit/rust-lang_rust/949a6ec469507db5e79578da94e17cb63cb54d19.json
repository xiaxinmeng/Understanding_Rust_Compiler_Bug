{"sha": "949a6ec469507db5e79578da94e17cb63cb54d19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OWE2ZWM0Njk1MDdkYjVlNzk1NzhkYTk0ZTE3Y2I2M2NiNTRkMTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T17:19:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T17:19:11Z"}, "message": "internal: refactor missing or or some diagnostic", "tree": {"sha": "5e4ec22d50715d9855e751ed3f296e90e5bfaa73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e4ec22d50715d9855e751ed3f296e90e5bfaa73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/949a6ec469507db5e79578da94e17cb63cb54d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/949a6ec469507db5e79578da94e17cb63cb54d19", "html_url": "https://github.com/rust-lang/rust/commit/949a6ec469507db5e79578da94e17cb63cb54d19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/949a6ec469507db5e79578da94e17cb63cb54d19/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f3cca85ab870614f314c6180e2fbb883ad4fe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f3cca85ab870614f314c6180e2fbb883ad4fe3", "html_url": "https://github.com/rust-lang/rust/commit/74f3cca85ab870614f314c6180e2fbb883ad4fe3"}], "stats": {"total": 102, "additions": 44, "deletions": 58}, "files": [{"sha": "9afee0b90acdeff5d6d29723932807f26025c337", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/949a6ec469507db5e79578da94e17cb63cb54d19/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949a6ec469507db5e79578da94e17cb63cb54d19/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=949a6ec469507db5e79578da94e17cb63cb54d19", "patch": "@@ -37,6 +37,7 @@ diagnostics![\n     MacroError,\n     MismatchedArgCount,\n     MissingFields,\n+    MissingOkOrSomeInTailExpr,\n     MissingUnsafe,\n     NoSuchField,\n     RemoveThisSemicolon,\n@@ -157,41 +158,13 @@ pub struct RemoveThisSemicolon {\n     pub expr: InFile<AstPtr<ast::Expr>>,\n }\n \n-// Diagnostic: missing-ok-or-some-in-tail-expr\n-//\n-// This diagnostic is triggered if a block that should return `Result` returns a value not wrapped in `Ok`,\n-// or if a block that should return `Option` returns a value not wrapped in `Some`.\n-//\n-// Example:\n-//\n-// ```rust\n-// fn foo() -> Result<u8, ()> {\n-//     10\n-// }\n-// ```\n #[derive(Debug)]\n pub struct MissingOkOrSomeInTailExpr {\n-    pub file: HirFileId,\n-    pub expr: AstPtr<ast::Expr>,\n+    pub expr: InFile<AstPtr<ast::Expr>>,\n     // `Some` or `Ok` depending on whether the return type is Result or Option\n     pub required: String,\n }\n \n-impl Diagnostic for MissingOkOrSomeInTailExpr {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"missing-ok-or-some-in-tail-expr\")\n-    }\n-    fn message(&self) -> String {\n-        format!(\"wrap return expression in {}\", self.required)\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.expr.clone().into() }\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-}\n-\n // Diagnostic: missing-match-arm\n //\n // This diagnostic is triggered if `match` block is missing one or more match arms."}, {"sha": "aaab5336a9f50bcaf970f8837ead8cfa77f61ff8", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/949a6ec469507db5e79578da94e17cb63cb54d19/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949a6ec469507db5e79578da94e17cb63cb54d19/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=949a6ec469507db5e79578da94e17cb63cb54d19", "patch": "@@ -1190,11 +1190,7 @@ impl Function {\n                 }\n                 BodyValidationDiagnostic::MissingOkOrSomeInTailExpr { expr, required } => {\n                     match source_map.expr_syntax(expr) {\n-                        Ok(source_ptr) => sink.push(MissingOkOrSomeInTailExpr {\n-                            file: source_ptr.file_id,\n-                            expr: source_ptr.value,\n-                            required,\n-                        }),\n+                        Ok(expr) => acc.push(MissingOkOrSomeInTailExpr { expr, required }.into()),\n                         Err(SyntheticSyntax) => (),\n                     }\n                 }"}, {"sha": "af282db0ccb24aa4182afd02bd65ea1f97bfc8a0", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/949a6ec469507db5e79578da94e17cb63cb54d19/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949a6ec469507db5e79578da94e17cb63cb54d19/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=949a6ec469507db5e79578da94e17cb63cb54d19", "patch": "@@ -9,6 +9,7 @@ mod inactive_code;\n mod macro_error;\n mod mismatched_arg_count;\n mod missing_fields;\n+mod missing_ok_or_some_in_tail_expr;\n mod missing_unsafe;\n mod no_such_field;\n mod remove_this_semicolon;\n@@ -163,9 +164,6 @@ pub(crate) fn diagnostics(\n     }\n     let res = RefCell::new(res);\n     let sink_builder = DiagnosticSinkBuilder::new()\n-        .on::<hir::diagnostics::MissingOkOrSomeInTailExpr, _>(|d| {\n-            res.borrow_mut().push(diagnostic_with_fix(d, &sema, resolve));\n-        })\n         .on::<hir::diagnostics::IncorrectCase, _>(|d| {\n             res.borrow_mut().push(warning_with_fix(d, &sema, resolve));\n         })\n@@ -223,6 +221,7 @@ pub(crate) fn diagnostics(\n             AnyDiagnostic::MacroError(d) => macro_error::macro_error(&ctx, &d),\n             AnyDiagnostic::MismatchedArgCount(d) => mismatched_arg_count::mismatched_arg_count(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n+            AnyDiagnostic::MissingOkOrSomeInTailExpr(d) => missing_ok_or_some_in_tail_expr::missing_ok_or_some_in_tail_expr(&ctx, &d),\n             AnyDiagnostic::MissingUnsafe(d) => missing_unsafe::missing_unsafe(&ctx, &d),\n             AnyDiagnostic::NoSuchField(d) => no_such_field::no_such_field(&ctx, &d),\n             AnyDiagnostic::RemoveThisSemicolon(d) => remove_this_semicolon::remove_this_semicolon(&ctx, &d),"}, {"sha": "350575b3a02640b1faa926efdcd73b80892651f1", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949a6ec469507db5e79578da94e17cb63cb54d19/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949a6ec469507db5e79578da94e17cb63cb54d19/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=949a6ec469507db5e79578da94e17cb63cb54d19", "patch": "@@ -2,7 +2,6 @@\n //! The same module also has all curret custom fixes for the diagnostics implemented.\n mod change_case;\n mod replace_with_find_map;\n-mod wrap_tail_expr;\n \n use hir::{diagnostics::Diagnostic, Semantics};\n use ide_assists::AssistResolveStrategy;"}, {"sha": "e27b54e661a71a96784e80d9884bebbf417e9642", "filename": "crates/ide/src/diagnostics/missing_ok_or_some_in_tail_expr.rs", "status": "renamed", "additions": 39, "deletions": 20, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/949a6ec469507db5e79578da94e17cb63cb54d19/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_ok_or_some_in_tail_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949a6ec469507db5e79578da94e17cb63cb54d19/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_ok_or_some_in_tail_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_ok_or_some_in_tail_expr.rs?ref=949a6ec469507db5e79578da94e17cb63cb54d19", "patch": "@@ -1,26 +1,45 @@\n-use hir::{db::AstDatabase, diagnostics::MissingOkOrSomeInTailExpr, Semantics};\n-use ide_assists::{Assist, AssistResolveStrategy};\n-use ide_db::{source_change::SourceChange, RootDatabase};\n+use hir::{db::AstDatabase, Semantics};\n+use ide_assists::Assist;\n+use ide_db::source_change::SourceChange;\n use syntax::AstNode;\n use text_edit::TextEdit;\n \n-use crate::diagnostics::{fix, DiagnosticWithFixes};\n-\n-impl DiagnosticWithFixes for MissingOkOrSomeInTailExpr {\n-    fn fixes(\n-        &self,\n-        sema: &Semantics<RootDatabase>,\n-        _resolve: &AssistResolveStrategy,\n-    ) -> Option<Vec<Assist>> {\n-        let root = sema.db.parse_or_expand(self.file)?;\n-        let tail_expr = self.expr.to_node(&root);\n-        let tail_expr_range = tail_expr.syntax().text_range();\n-        let replacement = format!(\"{}({})\", self.required, tail_expr.syntax());\n-        let edit = TextEdit::replace(tail_expr_range, replacement);\n-        let source_change = SourceChange::from_text_edit(self.file.original_file(sema.db), edit);\n-        let name = if self.required == \"Ok\" { \"Wrap with Ok\" } else { \"Wrap with Some\" };\n-        Some(vec![fix(\"wrap_tail_expr\", name, source_change, tail_expr_range)])\n-    }\n+use crate::diagnostics::{fix, Diagnostic, DiagnosticsContext};\n+\n+// Diagnostic: missing-ok-or-some-in-tail-expr\n+//\n+// This diagnostic is triggered if a block that should return `Result` returns a value not wrapped in `Ok`,\n+// or if a block that should return `Option` returns a value not wrapped in `Some`.\n+//\n+// Example:\n+//\n+// ```rust\n+// fn foo() -> Result<u8, ()> {\n+//     10\n+// }\n+// ```\n+pub(super) fn missing_ok_or_some_in_tail_expr(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::MissingOkOrSomeInTailExpr,\n+) -> Diagnostic {\n+    Diagnostic::new(\n+        \"missing-ok-or-some-in-tail-expr\",\n+        format!(\"wrap return expression in {}\", d.required),\n+        ctx.sema.diagnostics_display_range(d.expr.clone().map(|it| it.into())).range,\n+    )\n+    .with_fixes(fixes(ctx, d))\n+}\n+\n+fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingOkOrSomeInTailExpr) -> Option<Vec<Assist>> {\n+    let root = ctx.sema.db.parse_or_expand(d.expr.file_id)?;\n+    let tail_expr = d.expr.value.to_node(&root);\n+    let tail_expr_range = tail_expr.syntax().text_range();\n+    let replacement = format!(\"{}({})\", d.required, tail_expr.syntax());\n+    let edit = TextEdit::replace(tail_expr_range, replacement);\n+    let source_change =\n+        SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), edit);\n+    let name = if d.required == \"Ok\" { \"Wrap with Ok\" } else { \"Wrap with Some\" };\n+    Some(vec![fix(\"wrap_tail_expr\", name, source_change, tail_expr_range)])\n }\n \n #[cfg(test)]", "previous_filename": "crates/ide/src/diagnostics/fixes/wrap_tail_expr.rs"}]}