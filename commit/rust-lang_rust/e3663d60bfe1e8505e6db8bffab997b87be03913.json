{"sha": "e3663d60bfe1e8505e6db8bffab997b87be03913", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNjYzZDYwYmZlMWU4NTA1ZTZkYjhiZmZhYjk5N2I4N2JlMDM5MTM=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@users.noreply.github.com", "date": "2020-06-08T15:50:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-08T15:50:27Z"}, "message": "Dev docs nits", "tree": {"sha": "67246df3cdb75087d3ff0fde470eda15010297f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67246df3cdb75087d3ff0fde470eda15010297f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3663d60bfe1e8505e6db8bffab997b87be03913", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3l5DCRBK7hj4Ov3rIwAAdHIIAJOHcn59OVgAg866RMbvRBq0\nxN67HB8XBY+ne6/DCKqyFcHY7czuQJd6BKtYWyZDEI/Cl56+Y07pvNlCCCPxZyk1\nTaOBtyCKcdY34znlf6+156dUDPQHJHKSlCwAf8LDxsOr41F7Df4pON8mZYX+9+Si\nBgUmJifvkxYZG2s/M958/kut6Rbw+OWYc3+zz8pGVCA86z/rQVX26EoUT1eVFlco\npfdDw3wt+xzEB+DkqvIlMFyaIIhDXSDRtj8UWRJxXklfUkbKVe7vbTVc08xXk+IO\nK8G1E94ucLEnRHcJWpHmFMlamtSBqcizKDqmKaHYkFIANKJ9uh98lECa5Lu8hGE=\n=bs/7\n-----END PGP SIGNATURE-----\n", "payload": "tree 67246df3cdb75087d3ff0fde470eda15010297f3\nparent 5ed9818a7c855bf914e91324e305f24e4e743057\nauthor Lauren\u021biu Nicola <lnicola@users.noreply.github.com> 1591631427 +0300\ncommitter GitHub <noreply@github.com> 1591631427 +0300\n\nDev docs nits"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3663d60bfe1e8505e6db8bffab997b87be03913", "html_url": "https://github.com/rust-lang/rust/commit/e3663d60bfe1e8505e6db8bffab997b87be03913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3663d60bfe1e8505e6db8bffab997b87be03913/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed9818a7c855bf914e91324e305f24e4e743057", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed9818a7c855bf914e91324e305f24e4e743057", "html_url": "https://github.com/rust-lang/rust/commit/5ed9818a7c855bf914e91324e305f24e4e743057"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "0330939b6ef0384163794def5fb6b076de756f0a", "filename": "docs/dev/README.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3663d60bfe1e8505e6db8bffab997b87be03913/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3663d60bfe1e8505e6db8bffab997b87be03913/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=e3663d60bfe1e8505e6db8bffab997b87be03913", "patch": "@@ -55,7 +55,7 @@ You can run `cargo xtask install-pre-commit-hook` to install git-hook to run rus\n All Rust code lives in the `crates` top-level directory, and is organized as a\n single Cargo workspace. The `editors` top-level directory contains code for\n integrating with editors. Currently, it contains the plugin for VS Code (in\n-typescript). The `docs` top-level directory contains both developer and user\n+TypeScript). The `docs` top-level directory contains both developer and user\n documentation.\n \n We have some automation infra in Rust in the `xtask` package. It contains\n@@ -79,8 +79,8 @@ possible. There's **\"Run Extension (Debug Build)\"** launch configuration for thi\n In general, I use one of the following workflows for fixing bugs and\n implementing features.\n \n-If the problem concerns only internal parts of rust-analyzer (ie, I don't need\n-to touch `rust-analyzer` crate or typescript code), there is a unit-test for it.\n+If the problem concerns only internal parts of rust-analyzer (i.e. I don't need\n+to touch `rust-analyzer` crate or TypeScript code), there is a unit-test for it.\n So, I use **Rust Analyzer: Run** action in VS Code to run this single test, and\n then just do printf-driven development/debugging. As a sanity check after I'm\n done, I use `cargo xtask install --server` and **Reload Window** action in VS\n@@ -279,7 +279,7 @@ always obvious from the low-level code.\n Syntax trees are by design incomplete and do not enforce well-formedness.\n If ast method returns an `Option`, it *can* be `None` at runtime, even if this is forbidden by the grammar.\n \n-## LSP indenpendence\n+## LSP independence\n \n rust-analyzer is independent from LSP.\n It provides features for a hypothetical perfect Rust-specific IDE client.\n@@ -289,7 +289,7 @@ Internal representations are lowered to LSP in the `rust-analyzer` crate (the on\n \n There's a semi-hard split between \"compiler\" and \"IDE\", at the `ra_hir` crate.\n Compiler derives new facts about source code.\n-It explicitly acknowledges that not all info is available (ie, you can't look at types during name resolution).\n+It explicitly acknowledges that not all info is available (i.e. you can't look at types during name resolution).\n \n IDE assumes that all information is available at all times.\n \n@@ -345,8 +345,8 @@ There's also two VS Code commands which might be of interest:\n   rust code that it refers to and the rust editor will also highlight the proper\n   text range.\n \n-  If you press <kbd>Ctrl</kbd> (i.e. trigger goto definition) in the inspected\n-  Rust source file the syntax tree read-only editor should scroll to and select the\n+  If you trigger Go to Definition in the inspected Rust source file,\n+  the syntax tree read-only editor should scroll to and select the\n   appropriate syntax node token.\n \n   ![demo](https://user-images.githubusercontent.com/36276403/78225773-6636a480-74d3-11ea-9d9f-1c9d42da03b0.png)"}]}