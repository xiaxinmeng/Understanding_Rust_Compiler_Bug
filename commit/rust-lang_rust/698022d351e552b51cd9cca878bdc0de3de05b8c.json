{"sha": "698022d351e552b51cd9cca878bdc0de3de05b8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ODAyMmQzNTFlNTUyYjUxY2Q5Y2NhODc4YmRjMGRlM2RlMDViOGM=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-24T17:47:27Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-06-08T18:08:24Z"}, "message": "Update rust to build with newer llvm versions.", "tree": {"sha": "36f0cc07c4f2b66ad914c5022c01b3706c937973", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36f0cc07c4f2b66ad914c5022c01b3706c937973"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/698022d351e552b51cd9cca878bdc0de3de05b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/698022d351e552b51cd9cca878bdc0de3de05b8c", "html_url": "https://github.com/rust-lang/rust/commit/698022d351e552b51cd9cca878bdc0de3de05b8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/698022d351e552b51cd9cca878bdc0de3de05b8c/comments", "author": null, "committer": null, "parents": [{"sha": "d360c481e8bd6079eb92b155a7c5451fc8bd35f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d360c481e8bd6079eb92b155a7c5451fc8bd35f6", "html_url": "https://github.com/rust-lang/rust/commit/d360c481e8bd6079eb92b155a7c5451fc8bd35f6"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "b637b7e41b851cd9fb469270dabcffac1012e07f", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698022d351e552b51cd9cca878bdc0de3de05b8c/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698022d351e552b51cd9cca878bdc0de3de05b8c/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=698022d351e552b51cd9cca878bdc0de3de05b8c", "patch": "@@ -153,7 +153,6 @@ mod write {\n                                               True,  // unit-at-a-time\n                                               True,  // unroll loops\n                                               True,  // simplify lib calls\n-                                              True,  // have exceptions\n                                               threshold); // inline threshold\n         }\n "}, {"sha": "505e07e3f3fa0601a06d427d53f1828080a3cdb5", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698022d351e552b51cd9cca878bdc0de3de05b8c/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698022d351e552b51cd9cca878bdc0de3de05b8c/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=698022d351e552b51cd9cca878bdc0de3de05b8c", "patch": "@@ -88,6 +88,7 @@ const uint LLVMNoImplicitFloatAttribute = 8388608u;\n const uint LLVMNakedAttribute = 16777216u;\n const uint LLVMInlineHintAttribute = 33554432u;\n const uint LLVMStackAttribute = 469762048u;     // 7 << 26\n+const uint LLVMUWTableAttribute = 1073741824u; // 1 << 30\n \n \n // Consts for the LLVM IntPredicate type, pre-cast to uint.\n@@ -813,7 +814,6 @@ native mod llvm = llvm_lib {\n                                    Bool UnitAtATime,\n                                    Bool UnrollLoops,\n                                    Bool SimplifyLibCalls,\n-                                   Bool HaveExceptions,\n                                    uint InliningThreshold);\n \n     /** Destroys a memory buffer. */"}, {"sha": "f08d450e81d83eaa6b1d5c99db8fe19411298a87", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/698022d351e552b51cd9cca878bdc0de3de05b8c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698022d351e552b51cd9cca878bdc0de3de05b8c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=698022d351e552b51cd9cca878bdc0de3de05b8c", "patch": "@@ -1820,6 +1820,11 @@ fn set_no_inline(ValueRef f) {\n                               lib::llvm::llvm::Attribute);\n }\n \n+fn set_uwtable(ValueRef f) {\n+    llvm::LLVMAddFunctionAttr(f, lib::llvm::LLVMUWTableAttribute as\n+                              lib::llvm::llvm::Attribute);\n+}\n+\n fn set_always_inline(ValueRef f) {\n     llvm::LLVMAddFunctionAttr(f, lib::llvm::LLVMAlwaysInlineAttribute as\n                               lib::llvm::llvm::Attribute);\n@@ -6962,6 +6967,7 @@ fn trans_fn(@local_ctxt cx, &span sp, &ast::_fn f, ast::def_id fid,\n             option::t[ty_self_pair] ty_self,\n             &vec[ast::ty_param] ty_params, &ast::ann ann) {\n     auto llfndecl = cx.ccx.item_ids.get(fid);\n+    set_uwtable(llfndecl);\n \n     // Set up arguments to the function.\n     auto fcx = new_fn_ctxt(cx, sp, llfndecl);"}, {"sha": "dcc549b511f6bb7ffba338d9e055508d2d3f7e5c", "filename": "src/rustllvm/Passes2.cpp", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/698022d351e552b51cd9cca878bdc0de3de05b8c/src%2Frustllvm%2FPasses2.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/698022d351e552b51cd9cca878bdc0de3de05b8c/src%2Frustllvm%2FPasses2.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPasses2.cpp?ref=698022d351e552b51cd9cca878bdc0de3de05b8c", "patch": "@@ -1,5 +1,5 @@\n #include \"llvm/Analysis/Passes.h\"\n-#include \"llvm/Support/StandardPasses.h\"\n+#include \"llvm/Support/PassManagerBuilder.h\"\n #include \"llvm/PassManager.h\"\n #include \"llvm-c/Core.h\"\n #include <cstdlib>\n@@ -8,22 +8,29 @@ using namespace llvm;\n \n extern \"C\" void LLVMAddStandardFunctionPasses(LLVMPassManagerRef PM,\n     unsigned int OptimizationLevel) {\n-  createStandardFunctionPasses(unwrap(PM), OptimizationLevel);\n+  PassManagerBuilder PMBuilder;\n+  PMBuilder.OptLevel = OptimizationLevel;\n+  FunctionPassManager *FPM = (FunctionPassManager*) unwrap(PM);\n+  PMBuilder.populateFunctionPassManager(*FPM);\n }\n \n extern \"C\" void LLVMAddStandardModulePasses(LLVMPassManagerRef PM,\n     unsigned int OptimizationLevel, LLVMBool OptimizeSize,\n     LLVMBool UnitAtATime, LLVMBool UnrollLoops, LLVMBool SimplifyLibCalls,\n-    LLVMBool HaveExceptions, unsigned int InliningThreshold) {\n-  Pass *InliningPass;\n+    unsigned int InliningThreshold) {\n+\n+  PassManagerBuilder PMBuilder;\n+  PMBuilder.OptLevel = OptimizationLevel;\n+  PMBuilder.SizeLevel = OptimizeSize;\n+  PMBuilder.DisableUnitAtATime = !UnitAtATime;\n+  PMBuilder.DisableUnrollLoops = !UnrollLoops;\n+\n+  PMBuilder.DisableSimplifyLibCalls = !SimplifyLibCalls;\n+\n   if (InliningThreshold)\n-    InliningPass = createFunctionInliningPass(InliningThreshold);\n-  else\n-    InliningPass = NULL;\n+    PMBuilder.Inliner = createFunctionInliningPass(InliningThreshold);\n \n-  createStandardModulePasses(unwrap(PM), OptimizationLevel, OptimizeSize,\n-                             UnitAtATime, UnrollLoops, SimplifyLibCalls,\n-                             HaveExceptions, InliningPass);\n+  PassManager *MPM = (PassManager*) unwrap(PM);\n+  PMBuilder.populateModulePassManager(*MPM);\n }\n \n-"}, {"sha": "eb06398c48e642d2714a77af7ca4b22e63dfe3ed", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/698022d351e552b51cd9cca878bdc0de3de05b8c/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/698022d351e552b51cd9cca878bdc0de3de05b8c/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=698022d351e552b51cd9cca878bdc0de3de05b8c", "patch": "@@ -47,7 +47,7 @@ extern \"C\" const char *LLVMRustGetLastError(void) {\n extern \"C\" void LLVMAddBasicAliasAnalysisPass(LLVMPassManagerRef PM);\n extern \"C\" void LLVMAddStandardModulePasses(LLVMPassManagerRef PM,\n     unsigned int OptimizationLevel, bool OptimizeSize, bool UnitAtATime,\n-    bool UnrollLoops, bool SimplifyLibCalls, bool HaveExceptions,\n+    bool UnrollLoops, bool SimplifyLibCalls,\n     unsigned int InliningThreshold);\n \n int *RustHackToFetchPassesO = (int*)LLVMAddBasicAliasAnalysisPass;\n@@ -80,7 +80,6 @@ extern \"C\" void LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n                                         LLVMCodeGenFileType FileType) {\n \n   // Set compilation options.\n-  llvm::UnwindTablesMandatory = true;\n   llvm::NoFramePointerElim = true;\n \n   InitializeAllTargets();"}]}