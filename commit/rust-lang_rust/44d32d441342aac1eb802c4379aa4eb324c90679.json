{"sha": "44d32d441342aac1eb802c4379aa4eb324c90679", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZDMyZDQ0MTM0MmFhYzFlYjgwMmM0Mzc5YWE0ZWIzMjRjOTA2Nzk=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-27T11:20:13Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-08-07T08:24:27Z"}, "message": "Avoid unnecessary pattern matching against Option and Result", "tree": {"sha": "9b6ccae638327f9e4f875a08b19e30d1ff0df8a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b6ccae638327f9e4f875a08b19e30d1ff0df8a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44d32d441342aac1eb802c4379aa4eb324c90679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44d32d441342aac1eb802c4379aa4eb324c90679", "html_url": "https://github.com/rust-lang/rust/commit/44d32d441342aac1eb802c4379aa4eb324c90679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44d32d441342aac1eb802c4379aa4eb324c90679/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11a902431b8e66da8486b3b9a2d8527746c6ab1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a902431b8e66da8486b3b9a2d8527746c6ab1a", "html_url": "https://github.com/rust-lang/rust/commit/11a902431b8e66da8486b3b9a2d8527746c6ab1a"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "1ffe8157a0fb43a764ef0918940e325d36ffee6a", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -681,10 +681,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     }\n                 }\n                 &ty::Predicate::RegionOutlives(ref binder) => {\n-                    if let Err(_) = select\n-                        .infcx()\n-                        .region_outlives_predicate(&dummy_cause, binder)\n-                    {\n+                    if select.infcx().region_outlives_predicate(&dummy_cause, binder).is_err() {\n                         return false;\n                     }\n                 }"}, {"sha": "a02b63755dc129cee8fe0bf8aae8cbe19df3067e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -143,7 +143,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // Eventually I'll need to implement param-env-aware\n                 // `\u0393\u2081 \u22a6 \u03c6\u2081 => \u0393\u2082 \u22a6 \u03c6\u2082` logic.\n                 let param_env = ty::ParamEnv::empty();\n-                if let Ok(_) = self.can_sub(param_env, error, implication) {\n+                if self.can_sub(param_env, error, implication).is_ok() {\n                     debug!(\"error_implies: {:?} -> {:?} -> {:?}\", cond, error, implication);\n                     return true\n                 }"}, {"sha": "0127ae423da54fcba742953751d8894feb9901b9", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -137,7 +137,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // variables. Process these constraints.\n         let mut fulfill_cx = FulfillmentContext::new();\n         fulfill_cx.register_predicate_obligations(self, result.obligations);\n-        if let Err(_) = fulfill_cx.select_all_or_error(self) {\n+        if fulfill_cx.select_all_or_error(self).is_err() {\n             self.tcx.sess.delay_span_bug(\n                 span,\n                 \"implied_outlives_bounds failed to solve obligations from instantiation\""}, {"sha": "1e3fe70535bcc591e4206a1c7d678d317a91aaec", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -1587,8 +1587,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                         -> bool\n     {\n         assert!(!skol_trait_ref.has_escaping_regions());\n-        if let Err(_) = self.infcx.at(&obligation.cause, obligation.param_env)\n-                                  .sup(ty::Binder::dummy(skol_trait_ref), trait_bound) {\n+        if self.infcx.at(&obligation.cause, obligation.param_env)\n+                     .sup(ty::Binder::dummy(skol_trait_ref), trait_bound).is_err() {\n             return false;\n         }\n "}, {"sha": "7329f4832f2e27022ce4fd8d57bc3bb5d5db22f9", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -294,7 +294,7 @@ fn resolve_associated_item<'a, 'tcx>(\n             })\n         }\n         traits::VtableBuiltin(..) => {\n-            if let Some(_) = tcx.lang_items().clone_trait() {\n+            if tcx.lang_items().clone_trait().is_some() {\n                 Some(Instance {\n                     def: ty::InstanceDef::CloneShim(def_id, trait_ref.self_ty()),\n                     substs: rcvr_substs"}, {"sha": "6b1298750fba0533fd44735d8dc0688a3972e32f", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -1295,7 +1295,7 @@ impl EmitterWriter {\n                 }\n \n                 // if we elided some lines, add an ellipsis\n-                if let Some(_) = lines.next() {\n+                if lines.next().is_some() {\n                     buffer.puts(row_num, max_line_num_len - 1, \"...\", Style::LineNumber);\n                 } else if !show_underline {\n                     draw_col_separator_no_space(&mut buffer, row_num, max_line_num_len + 1);"}, {"sha": "67b92d92a343d4264c685bdddfac0b9875231ca5", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -138,7 +138,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         let tables = self.tcx.typeck_tables_of(id);\n                         let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n                         let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n-                        if let Some(_) = tables.closure_kind_origins().get(hir_id) {\n+                        if tables.closure_kind_origins().get(hir_id).is_some() {\n                             false\n                         } else {\n                             true\n@@ -735,7 +735,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             &including_downcast,\n                         )?;\n                         buf.push_str(\"[\");\n-                        if let Err(_) = self.append_local_to_string(index, buf) {\n+                        if self.append_local_to_string(index, buf).is_err() {\n                             buf.push_str(\"..\");\n                         }\n                         buf.push_str(\"]\");"}, {"sha": "5d57390dd05af2179e4abf20e87b11c7ff1497b7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -2698,7 +2698,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             self.label_ribs.pop();\n         }\n         self.ribs[ValueNS].pop();\n-        if let Some(_) = anonymous_module {\n+        if anonymous_module.is_some() {\n             self.ribs[TypeNS].pop();\n         }\n         debug!(\"(resolving block) leaving block\");\n@@ -4254,7 +4254,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         while let Some((in_module, path_segments)) = worklist.pop() {\n             // abort if the module is already found\n-            if let Some(_) = result { break; }\n+            if result.is_some() { break; }\n \n             self.populate_module_if_necessary(in_module);\n "}, {"sha": "d2e52f98238dd99012e429bbce818df934744e78", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -39,7 +39,7 @@ pub struct WriteOutput<'b, W: Write + 'b> {\n \n impl<'b, W: Write> DumpOutput for WriteOutput<'b, W> {\n     fn dump(&mut self, result: &Analysis) {\n-        if let Err(_) = write!(self.output, \"{}\", as_json(&result)) {\n+        if write!(self.output, \"{}\", as_json(&result)).is_err() {\n             error!(\"Error writing output\");\n         }\n     }"}, {"sha": "68e851446dc964014f96de7c533abef8e0659c4a", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -758,8 +758,9 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                         self.span, infer::FnCall, &fty);\n \n                     if let Some(self_ty) = self_ty {\n-                        if let Err(_) = self.at(&ObligationCause::dummy(), self.param_env)\n-                            .sup(fty.inputs()[0], self_ty)\n+                        if self.at(&ObligationCause::dummy(), self.param_env)\n+                               .sup(fty.inputs()[0], self_ty)\n+                               .is_err()\n                         {\n                             return false\n                         }"}, {"sha": "9b6772e2dbb21b21ac0b2a7e5fc7695c9d3439c2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -3915,7 +3915,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             }\n             hir::ExprKind::Continue(destination) => {\n-                if let Ok(_) = destination.target_id {\n+                if destination.target_id.is_ok() {\n                     tcx.types.never\n                 } else {\n                     // There was an error, make typecheck fail"}, {"sha": "68e4618328077cc6030e309c031703c4ed14186b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -486,7 +486,7 @@ pub fn run_core(search_paths: SearchPaths,\n                                                         &name,\n                                                         &output_filenames,\n                                                         |tcx, analysis, _, result| {\n-            if let Err(_) = result {\n+            if result.is_err() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n "}, {"sha": "ff2cc35fce807622012c1ddac4ef177d24704b62", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -44,7 +44,7 @@ pub fn render_with_highlighting(src: &str, class: Option<&str>,\n     write_header(class, &mut out).unwrap();\n \n     let mut classifier = Classifier::new(lexer::StringReader::new(&sess, fm, None), sess.codemap());\n-    if let Err(_) = classifier.write_source(&mut out) {\n+    if classifier.write_source(&mut out).is_err() {\n         return format!(\"<pre>{}</pre>\", src);\n     }\n "}, {"sha": "c104b883340615d88948f4d1b48f464c42cd0abc", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -625,7 +625,7 @@ impl LangString {\n                     data.no_run = true;\n                 }\n                 x if allow_error_code_check && x.starts_with(\"E\") && x.len() == 5 => {\n-                    if let Ok(_) = x[1..].parse::<u32>() {\n+                    if x[1..].parse::<u32>().is_ok() {\n                         data.error_codes.push(x.to_owned());\n                         seen_rust_tags = !seen_other_tags || seen_rust_tags;\n                     } else {"}, {"sha": "62dd00387d3abbef747cef214d35793e5b1a52f4", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -631,7 +631,7 @@ fn path_name_i(idents: &[Ident]) -> String {\n     let mut idents_iter = idents.iter().peekable();\n     while let Some(ident) = idents_iter.next() {\n         path_name.push_str(&ident.as_str());\n-        if let Some(_) = idents_iter.peek() {\n+        if idents_iter.peek().is_some() {\n             path_name.push_str(\"::\")\n         }\n     }"}, {"sha": "8f26b2402aadfce024d8e2067767414d47a5dbd7", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d32d441342aac1eb802c4379aa4eb324c90679/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=44d32d441342aac1eb802c4379aa4eb324c90679", "patch": "@@ -81,7 +81,7 @@ pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt,\n         }\n     };\n \n-    if let Some(_) = exprs.next() {\n+    if exprs.next().is_some() {\n         cx.span_err(sp, \"env! takes 1 or 2 arguments\");\n         return DummyResult::expr(sp);\n     }"}]}