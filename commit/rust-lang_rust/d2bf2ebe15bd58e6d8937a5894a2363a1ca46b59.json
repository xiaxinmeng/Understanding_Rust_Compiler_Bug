{"sha": "d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYmYyZWJlMTViZDU4ZTZkODkzN2E1ODk0YTIzNjNhMWNhNDZiNTk=", "commit": {"author": {"name": "Charles Pierce", "email": "cpierce.grad@gmail.com", "date": "2020-11-04T18:26:58Z"}, "committer": {"name": "Charles Pierce", "email": "cpierce.grad@gmail.com", "date": "2020-11-04T18:26:58Z"}, "message": "Restore semantic token flickering workaround removed in #5697", "tree": {"sha": "a709268fe2f30267f5bd75181e576df8ef1497f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a709268fe2f30267f5bd75181e576df8ef1497f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59", "html_url": "https://github.com/rust-lang/rust/commit/d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59/comments", "author": {"login": "charlespierce", "id": 18537342, "node_id": "MDQ6VXNlcjE4NTM3MzQy", "avatar_url": "https://avatars.githubusercontent.com/u/18537342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlespierce", "html_url": "https://github.com/charlespierce", "followers_url": "https://api.github.com/users/charlespierce/followers", "following_url": "https://api.github.com/users/charlespierce/following{/other_user}", "gists_url": "https://api.github.com/users/charlespierce/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlespierce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlespierce/subscriptions", "organizations_url": "https://api.github.com/users/charlespierce/orgs", "repos_url": "https://api.github.com/users/charlespierce/repos", "events_url": "https://api.github.com/users/charlespierce/events{/privacy}", "received_events_url": "https://api.github.com/users/charlespierce/received_events", "type": "User", "site_admin": false}, "committer": {"login": "charlespierce", "id": 18537342, "node_id": "MDQ6VXNlcjE4NTM3MzQy", "avatar_url": "https://avatars.githubusercontent.com/u/18537342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlespierce", "html_url": "https://github.com/charlespierce", "followers_url": "https://api.github.com/users/charlespierce/followers", "following_url": "https://api.github.com/users/charlespierce/following{/other_user}", "gists_url": "https://api.github.com/users/charlespierce/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlespierce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlespierce/subscriptions", "organizations_url": "https://api.github.com/users/charlespierce/orgs", "repos_url": "https://api.github.com/users/charlespierce/repos", "events_url": "https://api.github.com/users/charlespierce/events{/privacy}", "received_events_url": "https://api.github.com/users/charlespierce/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e8401af4128ee533f82fe52cf4afb1ebc91603a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8401af4128ee533f82fe52cf4afb1ebc91603a", "html_url": "https://github.com/rust-lang/rust/commit/4e8401af4128ee533f82fe52cf4afb1ebc91603a"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "d032b45b71ae4c93e502d8043f105fd19eaa971e", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59", "patch": "@@ -2,6 +2,7 @@ import * as lc from 'vscode-languageclient/node';\n import * as vscode from 'vscode';\n import * as ra from '../src/lsp_ext';\n import * as Is from 'vscode-languageclient/lib/common/utils/is';\n+import { DocumentSemanticsTokensSignature, DocumentSemanticsTokensEditsSignature, DocumentRangeSemanticTokensSignature } from 'vscode-languageclient/lib/common/semanticTokens';\n import { assert } from './util';\n \n function renderCommand(cmd: ra.CommandLink) {\n@@ -18,6 +19,13 @@ function renderHoverActions(actions: ra.CommandLinkGroup[]): vscode.MarkdownStri\n     return result;\n }\n \n+// Workaround for https://github.com/microsoft/vscode-languageserver-node/issues/576\n+async function semanticHighlightingWorkaround<R, F extends (...args: any[]) => vscode.ProviderResult<R>>(next: F, ...args: Parameters<F>): Promise<R> {\n+    const res = await next(...args);\n+    if (res == null) throw new Error('busy');\n+    return res;\n+}\n+\n export function createClient(serverPath: string, cwd: string): lc.LanguageClient {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n@@ -41,6 +49,15 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n         diagnosticCollectionName: \"rustc\",\n         traceOutputChannel,\n         middleware: {\n+            provideDocumentSemanticTokens(document: vscode.TextDocument, token: vscode.CancellationToken, next: DocumentSemanticsTokensSignature): vscode.ProviderResult<vscode.SemanticTokens> {\n+                return semanticHighlightingWorkaround(next, document, token);\n+            },\n+            provideDocumentSemanticTokensEdits(document: vscode.TextDocument, previousResultId: string, token: vscode.CancellationToken, next: DocumentSemanticsTokensEditsSignature): vscode.ProviderResult<vscode.SemanticTokensEdits | vscode.SemanticTokens> {\n+                return semanticHighlightingWorkaround(next, document, previousResultId, token);\n+            },\n+            provideDocumentRangeSemanticTokens(document: vscode.TextDocument, range: vscode.Range, token: vscode.CancellationToken, next: DocumentRangeSemanticTokensSignature): vscode.ProviderResult<vscode.SemanticTokens> {\n+                return semanticHighlightingWorkaround(next, document, range, token);\n+            },\n             async provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, _next: lc.ProvideHoverSignature) {\n                 return client.sendRequest(lc.HoverRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(\n                     (result) => {"}]}