{"sha": "688aaf3bbb62cb331d2b40beb632281e27ef40cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OGFhZjNiYmI2MmNiMzMxZDJiNDBiZWI2MzIyODFlMjdlZjQwY2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-19T16:11:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "lexical_region_resolve: rustfmt", "tree": {"sha": "0bd4a1f0a74a6445855ecce73b792366951d5f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bd4a1f0a74a6445855ecce73b792366951d5f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/688aaf3bbb62cb331d2b40beb632281e27ef40cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/688aaf3bbb62cb331d2b40beb632281e27ef40cd", "html_url": "https://github.com/rust-lang/rust/commit/688aaf3bbb62cb331d2b40beb632281e27ef40cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/688aaf3bbb62cb331d2b40beb632281e27ef40cd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "582a369bc336b1eb3aab0cfaabf4fb4359b68492", "url": "https://api.github.com/repos/rust-lang/rust/commits/582a369bc336b1eb3aab0cfaabf4fb4359b68492", "html_url": "https://github.com/rust-lang/rust/commit/582a369bc336b1eb3aab0cfaabf4fb4359b68492"}], "stats": {"total": 74, "additions": 30, "deletions": 44}, "files": [{"sha": "c7ead1cf66de3827ac935e0654c20ab19813b4a8", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 30, "deletions": 44, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/688aaf3bbb62cb331d2b40beb632281e27ef40cd/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688aaf3bbb62cb331d2b40beb632281e27ef40cd/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=688aaf3bbb62cb331d2b40beb632281e27ef40cd", "patch": "@@ -10,23 +10,25 @@\n \n //! The code to do lexical region resolution.\n \n-use infer::SubregionOrigin;\n-use infer::RegionVariableOrigin;\n use infer::region_constraints::Constraint;\n use infer::region_constraints::GenericKind;\n use infer::region_constraints::RegionConstraintData;\n use infer::region_constraints::VarInfos;\n use infer::region_constraints::VerifyBound;\n+use infer::RegionVariableOrigin;\n+use infer::SubregionOrigin;\n use middle::free_region::RegionRelations;\n-use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::graph::implementation::{Graph, Direction, NodeIndex, INCOMING, OUTGOING};\n+use rustc_data_structures::graph::implementation::{\n+    Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n+};\n+use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use std::fmt;\n use std::u32;\n use ty::{self, TyCtxt};\n-use ty::{Region, RegionVid};\n use ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};\n use ty::{ReLateBound, ReScope, ReSkolemized, ReVar};\n+use ty::{Region, RegionVid};\n \n mod graphviz;\n \n@@ -239,9 +241,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n \n                 debug!(\n                     \"Expanding value of {:?} from {:?} to {:?}\",\n-                    b_vid,\n-                    cur_region,\n-                    lub\n+                    b_vid, cur_region, lub\n                 );\n \n                 *b_data = VarValue::Value(lub);\n@@ -254,18 +254,17 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-\n     fn lub_concrete_regions(&self, a: Region<'tcx>, b: Region<'tcx>) -> Region<'tcx> {\n         let tcx = self.region_rels.tcx;\n         match (a, b) {\n-            (&ty::ReCanonical(..), _) |\n-            (_, &ty::ReCanonical(..)) |\n-            (&ty::ReClosureBound(..), _) |\n-            (_, &ty::ReClosureBound(..)) |\n-            (&ReLateBound(..), _) |\n-            (_, &ReLateBound(..)) |\n-            (&ReErased, _) |\n-            (_, &ReErased) => {\n+            (&ty::ReCanonical(..), _)\n+            | (_, &ty::ReCanonical(..))\n+            | (&ty::ReClosureBound(..), _)\n+            | (_, &ty::ReClosureBound(..))\n+            | (&ReLateBound(..), _)\n+            | (_, &ReLateBound(..))\n+            | (&ReErased, _)\n+            | (_, &ReErased) => {\n                 bug!(\"cannot relate region: LUB({:?}, {:?})\", a, b);\n             }\n \n@@ -287,10 +286,10 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n                 );\n             }\n \n-            (&ReEarlyBound(_), &ReScope(s_id)) |\n-            (&ReScope(s_id), &ReEarlyBound(_)) |\n-            (&ReFree(_), &ReScope(s_id)) |\n-            (&ReScope(s_id), &ReFree(_)) => {\n+            (&ReEarlyBound(_), &ReScope(s_id))\n+            | (&ReScope(s_id), &ReEarlyBound(_))\n+            | (&ReFree(_), &ReScope(s_id))\n+            | (&ReScope(s_id), &ReFree(_)) => {\n                 // A \"free\" region can be interpreted as \"some region\n                 // at least as big as fr.scope\".  So, we can\n                 // reasonably compare free regions and scopes:\n@@ -332,10 +331,10 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n                 tcx.mk_region(ReScope(lub))\n             }\n \n-            (&ReEarlyBound(_), &ReEarlyBound(_)) |\n-            (&ReFree(_), &ReEarlyBound(_)) |\n-            (&ReEarlyBound(_), &ReFree(_)) |\n-            (&ReFree(_), &ReFree(_)) => self.region_rels.lub_free_regions(a, b),\n+            (&ReEarlyBound(_), &ReEarlyBound(_))\n+            | (&ReFree(_), &ReEarlyBound(_))\n+            | (&ReEarlyBound(_), &ReFree(_))\n+            | (&ReFree(_), &ReFree(_)) => self.region_rels.lub_free_regions(a, b),\n \n             // For these types, we cannot define any additional\n             // relationship:\n@@ -358,8 +357,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n         for (constraint, origin) in &self.data.constraints {\n             debug!(\n                 \"collect_errors: constraint={:?} origin={:?}\",\n-                constraint,\n-                origin\n+                constraint, origin\n             );\n             match *constraint {\n                 Constraint::RegSubVar(..) | Constraint::VarSubVar(..) => {\n@@ -374,9 +372,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n                     debug!(\n                         \"collect_errors: region error at {:?}: \\\n                          cannot verify that {:?} <= {:?}\",\n-                        origin,\n-                        sub,\n-                        sup\n+                        origin, sub, sup\n                     );\n \n                     errors.push(RegionResolutionError::ConcreteFailure(\n@@ -402,10 +398,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n                         debug!(\n                             \"collect_errors: region error at {:?}: \\\n                              cannot verify that {:?}={:?} <= {:?}\",\n-                            origin,\n-                            a_vid,\n-                            a_region,\n-                            b_region\n+                            origin, a_vid, a_region, b_region\n                         );\n                         *a_data = VarValue::ErrorValue;\n                     }\n@@ -430,9 +423,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n             debug!(\n                 \"collect_errors: region error at {:?}: \\\n                  cannot verify that {:?} <= {:?}\",\n-                verify.origin,\n-                verify.region,\n-                verify.bound\n+                verify.origin, verify.region, verify.bound\n             );\n \n             errors.push(RegionResolutionError::GenericBoundFailure(\n@@ -580,10 +571,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n                     debug!(\n                         \"region inference error at {:?} for {:?}: SubSupConflict sub: {:?} \\\n                          sup: {:?}\",\n-                        origin,\n-                        node_idx,\n-                        lower_bound.region,\n-                        upper_bound.region\n+                        origin, node_idx, lower_bound.region, upper_bound.region\n                     );\n                     errors.push(RegionResolutionError::SubSupConflict(\n                         origin,\n@@ -645,8 +633,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n \n             debug!(\n                 \"collect_concrete_regions(orig_node_idx={:?}, node_idx={:?})\",\n-                orig_node_idx,\n-                node_idx\n+                orig_node_idx, node_idx\n             );\n \n             process_edges(&self.data, &mut state, graph, node_idx, dir);\n@@ -745,7 +732,6 @@ impl<'tcx> fmt::Debug for RegionAndOrigin<'tcx> {\n     }\n }\n \n-\n impl<'tcx> LexicalRegionResolutions<'tcx> {\n     fn normalize(&self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {"}]}