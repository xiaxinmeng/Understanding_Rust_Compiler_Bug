{"sha": "31b83d0895d37dc8a37e195f75bb9fe7de2c5e37", "node_id": "C_kwDOAAsO6NoAKDMxYjgzZDA4OTVkMzdkYzhhMzdlMTk1Zjc1YmI5ZmU3ZGUyYzVlMzc", "commit": {"author": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-11-01T17:39:36Z"}, "committer": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-11-20T12:45:11Z"}, "message": "Add missnamed_getters lint", "tree": {"sha": "c3803911b93d6c63ff78da42cd45fbdf70df66e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3803911b93d6c63ff78da42cd45fbdf70df66e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37", "html_url": "https://github.com/rust-lang/rust/commit/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/comments", "author": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f60186f35d5f6d77101b21e7c574531d2f366561", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60186f35d5f6d77101b21e7c574531d2f366561", "html_url": "https://github.com/rust-lang/rust/commit/f60186f35d5f6d77101b21e7c574531d2f366561"}], "stats": {"total": 191, "additions": 191, "deletions": 0}, "files": [{"sha": "180e7d8bedcd55feab85643ae27ab761c5f790eb", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=31b83d0895d37dc8a37e195f75bb9fe7de2c5e37", "patch": "@@ -4198,6 +4198,7 @@ Released 2018-09-13\n [`missing_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n [`missing_spin_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_spin_loop\n [`missing_trait_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods\n+[`missnamed_getters`]: https://rust-lang.github.io/rust-clippy/master/index.html#missnamed_getters\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes\n [`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals\n [`mixed_read_write_in_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_read_write_in_expression"}, {"sha": "0c9ae6380d874f4d31c1fe5fb4c8a8ef74149751", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=31b83d0895d37dc8a37e195f75bb9fe7de2c5e37", "patch": "@@ -184,6 +184,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::functions::RESULT_UNIT_ERR_INFO,\n     crate::functions::TOO_MANY_ARGUMENTS_INFO,\n     crate::functions::TOO_MANY_LINES_INFO,\n+    crate::functions::MISSNAMED_GETTERS_INFO,\n     crate::future_not_send::FUTURE_NOT_SEND_INFO,\n     crate::if_let_mutex::IF_LET_MUTEX_INFO,\n     crate::if_not_else::IF_NOT_ELSE_INFO,"}, {"sha": "c522bb780b3dbf3a07a96e3995e191e357585df7", "filename": "clippy_lints/src/functions/missnamed_getters.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/clippy_lints%2Fsrc%2Ffunctions%2Fmissnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/clippy_lints%2Fsrc%2Ffunctions%2Fmissnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmissnamed_getters.rs?ref=31b83d0895d37dc8a37e195f75bb9fe7de2c5e37", "patch": "@@ -0,0 +1,123 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use rustc_errors::Applicability;\n+use rustc_hir::{intravisit::FnKind, Body, ExprKind, FnDecl, HirId, ImplicitSelfKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::Span;\n+\n+use super::MISSNAMED_GETTERS;\n+\n+pub fn check_fn(\n+    cx: &LateContext<'_>,\n+    kind: FnKind<'_>,\n+    decl: &FnDecl<'_>,\n+    body: &Body<'_>,\n+    _span: Span,\n+    _hir_id: HirId,\n+) {\n+    let FnKind::Method(ref ident, sig) = kind else {\n+            return;\n+        };\n+\n+    // Takes only &(mut) self\n+    if decl.inputs.len() != 1 {\n+        return;\n+    }\n+\n+    let name = ident.name.as_str();\n+\n+    let name = match sig.decl.implicit_self {\n+        ImplicitSelfKind::ImmRef => name,\n+        ImplicitSelfKind::MutRef => {\n+            let Some(name) = name.strip_suffix(\"_mut\") else {\n+                    return;\n+                };\n+            name\n+        },\n+        _ => return,\n+    };\n+\n+    // Body must be &(mut) <self_data>.name\n+    // self_data is not neccessarilly self\n+    let (self_data, used_ident, span) = if_chain! {\n+        if let ExprKind::Block(block,_) = body.value.kind;\n+        if block.stmts.is_empty();\n+        if let Some(block_expr) = block.expr;\n+        // replace with while for as many addrof needed\n+        if let ExprKind::AddrOf(_,_, expr) = block_expr.kind;\n+        if let ExprKind::Field(self_data, ident) = expr.kind;\n+        if ident.name.as_str() != name;\n+        then {\n+            (self_data,ident,block_expr.span)\n+        } else {\n+            return;\n+        }\n+    };\n+\n+    let ty = cx.typeck_results().expr_ty(self_data);\n+\n+    let def = {\n+        let mut kind = ty.kind();\n+        loop {\n+            match kind {\n+                ty::Adt(def, _) => break def,\n+                ty::Ref(_, ty, _) => kind = ty.kind(),\n+                // We don't do tuples because the function name cannot be a number\n+                _ => return,\n+            }\n+        }\n+    };\n+\n+    let variants = def.variants();\n+\n+    // We're accessing a field, so it should be an union or a struct and have one and only one variant\n+    if variants.len() != 1 {\n+        if cfg!(debug_assertions) {\n+            panic!(\"Struct or union expected to have only one variant\");\n+        } else {\n+            // Don't ICE when possible\n+            return;\n+        }\n+    }\n+\n+    let first = variants.last().unwrap();\n+    let fields = &variants[first];\n+\n+    let mut used_field = None;\n+    let mut correct_field = None;\n+    for f in &fields.fields {\n+        if f.name.as_str() == name {\n+            correct_field = Some(f);\n+        }\n+        if f.name == used_ident.name {\n+            used_field = Some(f);\n+        }\n+    }\n+\n+    let Some(used_field) = used_field else {\n+            if cfg!(debug_assertions) {\n+                panic!(\"Struct doesn't contain the correct field\");\n+            } else {\n+                // Don't ICE when possible\n+                return;\n+            }\n+        };\n+    let Some(correct_field) = correct_field else {\n+            return;\n+        };\n+\n+    if cx.tcx.type_of(used_field.did) == cx.tcx.type_of(correct_field.did) {\n+        let snippet = snippet(cx, span, \"..\");\n+        let sugg = format!(\"{}{name}\", snippet.strip_suffix(used_field.name.as_str()).unwrap());\n+        span_lint_and_sugg(\n+            cx,\n+            MISSNAMED_GETTERS,\n+            span,\n+            \"getter function appears to return the wrong field\",\n+            \"consider using\",\n+            sugg,\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+}"}, {"sha": "726df02444fc81b6b262e5d6e815d1c648251e94", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=31b83d0895d37dc8a37e195f75bb9fe7de2c5e37", "patch": "@@ -1,3 +1,4 @@\n+mod missnamed_getters;\n mod must_use;\n mod not_unsafe_ptr_arg_deref;\n mod result;\n@@ -260,6 +261,25 @@ declare_clippy_lint! {\n     \"function returning `Result` with large `Err` type\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // example code where clippy issues a warning\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // example code which does not raise clippy warning\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub MISSNAMED_GETTERS,\n+    suspicious,\n+    \"default lint description\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Functions {\n     too_many_arguments_threshold: u64,\n@@ -286,6 +306,7 @@ impl_lint_pass!(Functions => [\n     MUST_USE_CANDIDATE,\n     RESULT_UNIT_ERR,\n     RESULT_LARGE_ERR,\n+    MISSNAMED_GETTERS,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Functions {\n@@ -301,6 +322,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         too_many_arguments::check_fn(cx, kind, decl, span, hir_id, self.too_many_arguments_threshold);\n         too_many_lines::check_fn(cx, kind, span, body, self.too_many_lines_threshold);\n         not_unsafe_ptr_arg_deref::check_fn(cx, kind, decl, body, hir_id);\n+        missnamed_getters::check_fn(cx, kind, decl, body, span, hir_id);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {"}, {"sha": "b47f6edc5ba10fbbf064ba7ebaa04fa3be5bbacb", "filename": "tests/ui/missnamed_getters.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/tests%2Fui%2Fmissnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/tests%2Fui%2Fmissnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissnamed_getters.rs?ref=31b83d0895d37dc8a37e195f75bb9fe7de2c5e37", "patch": "@@ -0,0 +1,28 @@\n+#![allow(unused)]\n+#![warn(clippy::missnamed_getters)]\n+\n+struct A {\n+    a: u8,\n+    b: u8,\n+}\n+\n+impl A {\n+    fn a(&self) -> &u8 {\n+        &self.b\n+    }\n+}\n+\n+union B {\n+    a: u8,\n+    b: u8,\n+}\n+\n+impl B {\n+    unsafe fn a(&self) -> &u8 {\n+        &self.b\n+    }\n+}\n+\n+fn main() {\n+    // test code goes here\n+}"}, {"sha": "8e31a42b97c1a597b860a103380cf340e1f5d632", "filename": "tests/ui/missnamed_getters.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/tests%2Fui%2Fmissnamed_getters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31b83d0895d37dc8a37e195f75bb9fe7de2c5e37/tests%2Fui%2Fmissnamed_getters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissnamed_getters.stderr?ref=31b83d0895d37dc8a37e195f75bb9fe7de2c5e37", "patch": "@@ -0,0 +1,16 @@\n+error: getter function appears to return the wrong field\n+  --> $DIR/missnamed_getters.rs:11:9\n+   |\n+LL |         &self.b\n+   |         ^^^^^^^ help: consider using: `&self.a`\n+   |\n+   = note: `-D clippy::missnamed-getters` implied by `-D warnings`\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/missnamed_getters.rs:22:9\n+   |\n+LL |         &self.b\n+   |         ^^^^^^^ help: consider using: `&self.a`\n+\n+error: aborting due to 2 previous errors\n+"}]}