{"sha": "e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "node_id": "C_kwDOAAsO6NoAKGUwZTZmMWQxY2JiMWIzZGQ1YjU0M2I3MTE0ZDMzMWRhM2JlOWYwOGQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-15T10:23:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-15T10:23:37Z"}, "message": "Rollup merge of #98869 - compiler-errors:stop_guessing_head_span, r=cjgillot\n\nRemove some usages of `guess_head_span`\n\nNo need to pass things through `guess_head_span` if they already point to the head span.\n\nOnly major change is that we point to the head span of `enum`s on some errors now, which I prefer.\n\nr? `@cjgillot`", "tree": {"sha": "ce046fa974acf8e54ce6aba479ff6f5d927df6f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce046fa974acf8e54ce6aba479ff6f5d927df6f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi0UApCRBK7hj4Ov3rIwAAVkgIAALWy0mO9mJWDDtimHrGueNy\nrcGcfeTN3H8uzhtOeIP4Qbe2dWPFYy6gLGAivdXNrqOt4j94lDquZrESfFwQasy4\nMZlcicu0wHtsmjz40Bb5P4UmCYmhAdFpoxPqgzgSlYW47rC/K02Ze5JpUMx1oqyH\nRZnXPux+npb6PPuGa9wnwIpsDyV3+eucnH6EcY5Op85LGy60xQRL4cSlbXa+RVDe\nfbD3FHg0Cs91motI2BLYAtn068sr0W8/jjJKZ+xAgQsOL0NSEhmtrP5/8zzTD2iA\njDxCDWeFmqm5sLG8UlUee59Ma/VexssyAlGDDJYJjxD+M984UmQveJhRv+NNB9o=\n=+xmW\n-----END PGP SIGNATURE-----\n", "payload": "tree ce046fa974acf8e54ce6aba479ff6f5d927df6f2\nparent a6d3ee32478eeabdc92708c82cc8d08570c53fbe\nparent fcfb3e92a016283516d6472eda0a2485453fcbdf\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657880617 +0530\ncommitter GitHub <noreply@github.com> 1657880617 +0530\n\nRollup merge of #98869 - compiler-errors:stop_guessing_head_span, r=cjgillot\n\nRemove some usages of `guess_head_span`\n\nNo need to pass things through `guess_head_span` if they already point to the head span.\n\nOnly major change is that we point to the head span of `enum`s on some errors now, which I prefer.\n\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "html_url": "https://github.com/rust-lang/rust/commit/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d3ee32478eeabdc92708c82cc8d08570c53fbe", "html_url": "https://github.com/rust-lang/rust/commit/a6d3ee32478eeabdc92708c82cc8d08570c53fbe"}, {"sha": "fcfb3e92a016283516d6472eda0a2485453fcbdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcfb3e92a016283516d6472eda0a2485453fcbdf", "html_url": "https://github.com/rust-lang/rust/commit/fcfb3e92a016283516d6472eda0a2485453fcbdf"}], "stats": {"total": 385, "additions": 162, "deletions": 223}, "files": [{"sha": "1e8b212276f2f310a4ef48d7e29d7c96a8e8fcc7", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -714,10 +714,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n     }\n \n     fn const_equate(&mut self, _a: Const<'tcx>, _b: Const<'tcx>) {\n-        span_bug!(\n-            self.cause.span(self.infcx.tcx),\n-            \"generic_const_exprs: unreachable `const_equate`\"\n-        );\n+        span_bug!(self.cause.span(), \"generic_const_exprs: unreachable `const_equate`\");\n     }\n \n     fn normalization() -> NormalizationStrategy {"}, {"sha": "4f59215c70b9216d6d585c8683ac034937839dae", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1435,7 +1435,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         swap_secondary_and_primary: bool,\n         force_label: bool,\n     ) {\n-        let span = cause.span(self.tcx);\n+        let span = cause.span();\n \n         // For some types of errors, expected-found does not make\n         // sense, so just ignore the values we were given.\n@@ -2085,7 +2085,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         debug!(\"report_and_explain_type_error(trace={:?}, terr={:?})\", trace, terr);\n \n-        let span = trace.cause.span(self.tcx);\n+        let span = trace.cause.span();\n         let failure_code = trace.cause.as_failure_code(terr);\n         let mut diag = match failure_code {\n             FailureCode::Error0038(did) => {"}, {"sha": "998699158ff484d57c8154ae99c3793fd2748ed4", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -204,7 +204,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         expected_substs: SubstsRef<'tcx>,\n         actual_substs: SubstsRef<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let span = cause.span(self.tcx());\n+        let span = cause.span();\n         let msg = format!(\n             \"implementation of `{}` is not general enough\",\n             self.tcx().def_path_str(trait_def_id),"}, {"sha": "95b6c4ce1f296085a59944675847c18be9f897e5", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -18,20 +18,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         trait_item_def_id: DefId,\n         requirement: &dyn fmt::Display,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let msg = \"impl has stricter requirements than trait\";\n-        let sp = self.tcx.sess.source_map().guess_head_span(error_span);\n+        let mut err = struct_span_err!(\n+            self.tcx.sess,\n+            error_span,\n+            E0276,\n+            \"impl has stricter requirements than trait\"\n+        );\n \n-        let mut err = struct_span_err!(self.tcx.sess, sp, E0276, \"{}\", msg);\n-\n-        if trait_item_def_id.is_local() {\n+        if let Some(span) = self.tcx.hir().span_if_local(trait_item_def_id) {\n             let item_name = self.tcx.item_name(impl_item_def_id.to_def_id());\n-            err.span_label(\n-                self.tcx.def_span(trait_item_def_id),\n-                format!(\"definition of `{}` from trait\", item_name),\n-            );\n+            err.span_label(span, format!(\"definition of `{}` from trait\", item_name));\n         }\n \n-        err.span_label(sp, format!(\"impl has extra requirement {}\", requirement));\n+        err.span_label(error_span, format!(\"impl has extra requirement {}\", requirement));\n \n         err\n     }\n@@ -48,7 +47,6 @@ pub fn report_object_safety_error<'tcx>(\n         hir::Node::Item(item) => Some(item.ident.span),\n         _ => None,\n     });\n-    let span = tcx.sess.source_map().guess_head_span(span);\n     let mut err = struct_span_err!(\n         tcx.sess,\n         span,"}, {"sha": "50e9383cacc12519dc4b6198b3f446b1901fc267", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -694,9 +694,8 @@ pub trait LintContext: Sized {\n                     }\n \n                     if let Some(span) = in_test_module {\n-                        let def_span = self.sess().source_map().guess_head_span(span);\n                         db.span_help(\n-                            span.shrink_to_lo().to(def_span),\n+                            self.sess().source_map().guess_head_span(span),\n                             \"consider adding a `#[cfg(test)]` to the containing module\",\n                         );\n                     }"}, {"sha": "d8cc7d3feb0d0df5a519e73348d60c5fce1e39e9", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -139,13 +139,8 @@ impl<'tcx> ObligationCause<'tcx> {\n         ObligationCause { span, body_id: hir::CRATE_HIR_ID, code: Default::default() }\n     }\n \n-    pub fn span(&self, tcx: TyCtxt<'tcx>) -> Span {\n+    pub fn span(&self) -> Span {\n         match *self.code() {\n-            ObligationCauseCode::CompareImplMethodObligation { .. }\n-            | ObligationCauseCode::MainFunctionType\n-            | ObligationCauseCode::StartFunctionType => {\n-                tcx.sess.source_map().guess_head_span(self.span)\n-            }\n             ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                 arm_span,\n                 .."}, {"sha": "5b21c0466477437ad543054e5b265ea477080e59", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1759,8 +1759,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                 || self.tcx.resolutions(()).has_pub_restricted\n             {\n                 let descr = descr.to_string();\n-                let vis_span =\n-                    self.tcx.sess.source_map().guess_head_span(self.tcx.def_span(def_id));\n+                let vis_span = self.tcx.def_span(def_id);\n                 if kind == \"trait\" {\n                     self.tcx.sess.emit_err(InPublicInterfaceTraits {\n                         span,"}, {"sha": "39fce3cf76935a31315c8d5f55382dd42a700337", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -823,10 +823,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                     ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n                         let found_kind = self.closure_kind(closure_substs).unwrap();\n-                        let closure_span =\n-                            self.tcx.sess.source_map().guess_head_span(\n-                                self.tcx.hir().span_if_local(closure_def_id).unwrap(),\n-                            );\n+                        let closure_span = self.tcx.def_span(closure_def_id);\n                         let mut err = struct_span_err!(\n                             self.tcx.sess,\n                             closure_span,\n@@ -951,9 +948,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     _ => None,\n                 };\n \n-                let found_span = found_did\n-                    .and_then(|did| self.tcx.hir().span_if_local(did))\n-                    .map(|sp| self.tcx.sess.source_map().guess_head_span(sp)); // the sp could be an fn def\n+                let found_span = found_did.and_then(|did| self.tcx.hir().span_if_local(did));\n \n                 if self.reported_closure_mismatch.borrow().contains(&(span, found_span)) {\n                     // We check closures twice, with obligations flowing in different directions,\n@@ -1089,7 +1084,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 kind: hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }),\n                 ..\n             }) => (\n-                sm.guess_head_span(fn_decl_span),\n+                fn_decl_span,\n                 hir.body(body)\n                     .params\n                     .iter()"}, {"sha": "57d5e5436a691d1f1e12b675c1e09450014776e5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1543,7 +1543,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ty::Generator(..) => \"generator\",\n             _ => \"function\",\n         };\n-        let span = self.tcx.sess.source_map().guess_head_span(span);\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n             span,"}, {"sha": "81f5dcc45b93eab49dbbfba27c747d1b5bae2d04", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -603,7 +603,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         ),\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n-                                obligation.cause.span(self.selcx.tcx()),\n+                                obligation.cause.span(),\n                                 \"ConstEquate: const_eval_resolve returned an unexpected error\"\n                             )\n                         }"}, {"sha": "32669e23db96b7674b220146cd3434bbd3005b20", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -84,7 +84,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         // Run canonical query. If overflow occurs, rerun from scratch but this time\n         // in standard trait query mode so that overflow is handled appropriately\n         // within `SelectionContext`.\n-        self.tcx.at(obligation.cause.span(self.tcx)).evaluate_obligation(c_pred)\n+        self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n     }\n \n     // Helper function that canonicalizes and runs the query. If an"}, {"sha": "fa2d2c751d929660c52526b21ebc960a176b8b07", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -742,7 +742,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         | (_, Err(ErrorHandled::Reported(_))) => Ok(EvaluatedToErr),\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n-                                obligation.cause.span(self.tcx()),\n+                                obligation.cause.span(),\n                                 \"ConstEquate: const_eval_resolve returned an unexpected error\"\n                             )\n                         }"}, {"sha": "c3205aeb07477b395358b655545f986db8378121", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1958,11 +1958,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         );\n                     }\n \n-                    if adt_def.did().is_local() {\n-                        err.span_label(\n-                            tcx.def_span(adt_def.did()),\n-                            format!(\"variant `{assoc_ident}` not found for this enum\"),\n-                        );\n+                    if let Some(sp) = tcx.hir().span_if_local(adt_def.did()) {\n+                        err.span_label(sp, format!(\"variant `{}` not found here\", assoc_ident));\n                     }\n \n                     err.emit()"}, {"sha": "7795e65132f5094cbd9d76e240849d9f3924f1da", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1,6 +1,6 @@\n use crate::check::coercion::{AsCoercionSite, CoerceMany};\n use crate::check::{Diverges, Expectation, FnCtxt, Needs};\n-use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n+use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir::{self as hir, ExprKind};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::traits::Obligation;\n@@ -127,7 +127,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 &cause,\n                 Some(&arm.body),\n                 arm_ty,\n-                Some(&mut |err: &mut Diagnostic| {\n+                Some(&mut |err| {\n                     let Some(ret) = self.ret_type_span else {\n                         return;\n                     };"}, {"sha": "bd2e89a4dc541dcb9821880129717cd2e713c505", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -375,8 +375,9 @@ fn check_alloc_error_fn(\n     }\n }\n \n-fn check_struct(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n+fn check_struct(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let def = tcx.adt_def(def_id);\n+    let span = tcx.def_span(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n     check_representable(tcx, span, def_id);\n \n@@ -388,8 +389,9 @@ fn check_struct(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n     check_packed(tcx, span, def);\n }\n \n-fn check_union(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n+fn check_union(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let def = tcx.adt_def(def_id);\n+    let span = tcx.def_span(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n     check_representable(tcx, span, def_id);\n     check_transparent(tcx, span, def);\n@@ -471,13 +473,14 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n }\n \n /// Check that a `static` is inhabited.\n-fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n+fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n     // Make sure statics are inhabited.\n     // Other parts of the compiler assume that there are no uninhabited places. In principle it\n     // would be enough to check this for `extern` statics, as statics with an initializer will\n     // have UB during initialization if they are uninhabited, but there also seems to be no good\n     // reason to allow any statics to be uninhabited.\n     let ty = tcx.type_of(def_id);\n+    let span = tcx.def_span(def_id);\n     let layout = match tcx.layout_of(ParamEnv::reveal_all().and(ty)) {\n         Ok(l) => l,\n         // Foreign statics that overflow their allowed size should emit an error\n@@ -524,9 +527,9 @@ pub(super) fn check_opaque<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n     substs: SubstsRef<'tcx>,\n-    span: Span,\n     origin: &hir::OpaqueTyOrigin,\n ) {\n+    let span = tcx.def_span(def_id);\n     check_opaque_for_inheriting_lifetimes(tcx, def_id, span);\n     if tcx.type_of(def_id).references_error() {\n         return;\n@@ -785,8 +788,8 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n     match tcx.def_kind(id.def_id) {\n         DefKind::Static(..) => {\n             tcx.ensure().typeck(id.def_id);\n-            maybe_check_static_with_link_section(tcx, id.def_id, tcx.def_span(id.def_id));\n-            check_static_inhabited(tcx, id.def_id, tcx.def_span(id.def_id));\n+            maybe_check_static_with_link_section(tcx, id.def_id);\n+            check_static_inhabited(tcx, id.def_id);\n         }\n         DefKind::Const => {\n             tcx.ensure().typeck(id.def_id);\n@@ -796,7 +799,7 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n             let hir::ItemKind::Enum(ref enum_definition, _) = item.kind else {\n                 return;\n             };\n-            check_enum(tcx, item.span, &enum_definition.variants, item.def_id);\n+            check_enum(tcx, &enum_definition.variants, item.def_id);\n         }\n         DefKind::Fn => {} // entirely within check_item_body\n         DefKind::Impl => {\n@@ -847,10 +850,10 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n             }\n         }\n         DefKind::Struct => {\n-            check_struct(tcx, id.def_id, tcx.def_span(id.def_id));\n+            check_struct(tcx, id.def_id);\n         }\n         DefKind::Union => {\n-            check_union(tcx, id.def_id, tcx.def_span(id.def_id));\n+            check_union(tcx, id.def_id);\n         }\n         DefKind::OpaqueTy => {\n             let item = tcx.hir().item(id);\n@@ -863,7 +866,7 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n             // See https://github.com/rust-lang/rust/issues/75100\n             if !tcx.sess.opts.actually_rustdoc {\n                 let substs = InternalSubsts::identity_for_item(tcx, item.def_id.to_def_id());\n-                check_opaque(tcx, item.def_id, substs, item.span, &origin);\n+                check_opaque(tcx, item.def_id, substs, &origin);\n             }\n         }\n         DefKind::TyAlias => {\n@@ -927,7 +930,7 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n                             require_c_abi_if_c_variadic(tcx, fn_decl, abi, item.span);\n                         }\n                         hir::ForeignItemKind::Static(..) => {\n-                            check_static_inhabited(tcx, def_id, item.span);\n+                            check_static_inhabited(tcx, def_id);\n                         }\n                         _ => {}\n                     }\n@@ -1328,7 +1331,6 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: ty::AdtD\n     if !adt.repr().transparent() {\n         return;\n     }\n-    let sp = tcx.sess.source_map().guess_head_span(sp);\n \n     if adt.is_union() && !tcx.features().transparent_unions {\n         feature_err(\n@@ -1442,13 +1444,9 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: ty::AdtD\n }\n \n #[allow(trivial_numeric_casts)]\n-fn check_enum<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    sp: Span,\n-    vs: &'tcx [hir::Variant<'tcx>],\n-    def_id: LocalDefId,\n-) {\n+fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, vs: &'tcx [hir::Variant<'tcx>], def_id: LocalDefId) {\n     let def = tcx.adt_def(def_id);\n+    let sp = tcx.def_span(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n \n     if vs.is_empty() {"}, {"sha": "3a31df32298d76a753fce6a811c74fce2572e304", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -171,14 +171,7 @@ fn compare_predicate_entailment<'tcx>(\n     let trait_m_predicates = tcx.predicates_of(trait_m.def_id);\n \n     // Check region bounds.\n-    check_region_bounds_on_impl_item(\n-        tcx,\n-        impl_m_span,\n-        impl_m,\n-        trait_m,\n-        &trait_m_generics,\n-        &impl_m_generics,\n-    )?;\n+    check_region_bounds_on_impl_item(tcx, impl_m, trait_m, &trait_m_generics, &impl_m_generics)?;\n \n     // Create obligations for each predicate declared by the impl\n     // definition in the context of the trait's parameter\n@@ -298,7 +291,7 @@ fn compare_predicate_entailment<'tcx>(\n \n             let mut diag = struct_span_err!(\n                 tcx.sess,\n-                cause.span(tcx),\n+                cause.span(),\n                 E0053,\n                 \"method `{}` has an incompatible type for trait\",\n                 trait_m.name\n@@ -410,7 +403,6 @@ fn compare_predicate_entailment<'tcx>(\n \n fn check_region_bounds_on_impl_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    span: Span,\n     impl_m: &ty::AssocItem,\n     trait_m: &ty::AssocItem,\n     trait_generics: &ty::Generics,\n@@ -436,21 +428,25 @@ fn check_region_bounds_on_impl_item<'tcx>(\n     // are zero. Since I don't quite know how to phrase things at\n     // the moment, give a kind of vague error message.\n     if trait_params != impl_params {\n-        let item_kind = assoc_item_kind_str(impl_m);\n-        let def_span = tcx.sess.source_map().guess_head_span(span);\n-        let span = impl_m\n-            .def_id\n-            .as_local()\n-            .and_then(|did| tcx.hir().get_generics(did))\n-            .map_or(def_span, |g| g.span);\n-        let generics_span = trait_m.def_id.as_local().map(|did| {\n-            let def_sp = tcx.def_span(did);\n-            tcx.hir().get_generics(did).map_or(def_sp, |g| g.span)\n-        });\n+        let span = tcx\n+            .hir()\n+            .get_generics(impl_m.def_id.expect_local())\n+            .expect(\"expected impl item to have generics or else we can't compare them\")\n+            .span;\n+        let generics_span = if let Some(local_def_id) = trait_m.def_id.as_local() {\n+            Some(\n+                tcx.hir()\n+                    .get_generics(local_def_id)\n+                    .expect(\"expected trait item to have generics or else we can't compare them\")\n+                    .span,\n+            )\n+        } else {\n+            None\n+        };\n \n         let reported = tcx.sess.emit_err(LifetimesOrBoundsMismatchOnTrait {\n             span,\n-            item_kind,\n+            item_kind: assoc_item_kind_str(impl_m),\n             ident: impl_m.ident(tcx),\n             generics_span,\n         });\n@@ -490,7 +486,7 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n         TypeError::ArgumentSorts(ExpectedFound { .. }, i) => {\n             (impl_args.nth(i).unwrap(), trait_args.and_then(|mut args| args.nth(i)))\n         }\n-        _ => (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id)),\n+        _ => (cause.span(), tcx.hir().span_if_local(trait_m.def_id)),\n     }\n }\n \n@@ -1199,7 +1195,6 @@ fn compare_type_predicate_entailment<'tcx>(\n \n     check_region_bounds_on_impl_item(\n         tcx,\n-        impl_ty_span,\n         impl_ty,\n         trait_ty,\n         &trait_ty_generics,"}, {"sha": "ddbc16139734ac5376af3b66cfbbd8307038b935", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -183,8 +183,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if let (ty::FnDef(def_id, ..), true) =\n             (&found.kind(), self.suggest_fn_call(err, expr, expected, found))\n         {\n-            if def_id.is_local() {\n-                err.span_label(self.tcx.def_span(def_id), &format!(\"{} defined here\", found));\n+            if let Some(sp) = self.tcx.hir().span_if_local(*def_id) {\n+                err.span_label(sp, format!(\"{found} defined here\"));\n             }\n         } else if !self.check_for_cast(err, expr, found, expected, expected_ty_expr) {\n             let is_struct_pat_shorthand_field ="}, {"sha": "d6160266dd7d9f4fbff298dfec38195a6f45fe80", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -534,7 +534,7 @@ fn fn_maybe_err(tcx: TyCtxt<'_>, sp: Span, abi: Abi) {\n     }\n }\n \n-fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: LocalDefId, span: Span) {\n+fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: LocalDefId) {\n     // Only restricted on wasm target for now\n     if !tcx.sess.target.is_like_wasm {\n         return;\n@@ -560,7 +560,7 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: LocalDefId, span: S\n         let msg = \"statics with a custom `#[link_section]` must be a \\\n                         simple list of bytes on the wasm target with no \\\n                         extra levels of indirection such as references\";\n-        tcx.sess.span_err(span, msg);\n+        tcx.sess.span_err(tcx.def_span(id), msg);\n     }\n }\n \n@@ -621,9 +621,8 @@ fn missing_items_err(\n     // adding the associated item at the end of its body.\n     let sugg_sp = full_impl_span.with_lo(hi).with_hi(hi);\n     // Obtain the level of indentation ending in `sugg_sp`.\n-    let indentation = tcx.sess.source_map().span_to_margin(sugg_sp).unwrap_or(0);\n-    // Make the whitespace that will make the suggestion have the right indentation.\n-    let padding: String = \" \".repeat(indentation);\n+    let padding =\n+        tcx.sess.source_map().indentation_before(sugg_sp).unwrap_or_else(|| String::new());\n \n     for trait_item in missing_items {\n         let snippet = suggestion_signature(trait_item, tcx);"}, {"sha": "e205eba44571f128a66d00a721d288efb3e77569", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1838,7 +1838,7 @@ fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, mut span: Span, id: hir::HirI\n             if let Some(hir::Generics { predicates, .. }) =\n                 hir_node.and_then(|node| node.generics())\n             {\n-                let obligation_span = obligation.cause.span(fcx.tcx);\n+                let obligation_span = obligation.cause.span();\n \n                 span = predicates\n                     .iter()"}, {"sha": "03e076bf5ec894ab5c2c7984bb50721b279f7786", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -76,17 +76,17 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n                 let name = item1.ident(self.tcx).normalize_to_macros_2_0();\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n-                    self.tcx.span_of_impl(item1.def_id).unwrap(),\n+                    self.tcx.def_span(item1.def_id),\n                     E0592,\n                     \"duplicate definitions with name `{}`\",\n                     name\n                 );\n                 err.span_label(\n-                    self.tcx.span_of_impl(item1.def_id).unwrap(),\n+                    self.tcx.def_span(item1.def_id),\n                     format!(\"duplicate definitions for `{}`\", name),\n                 );\n                 err.span_label(\n-                    self.tcx.span_of_impl(item2.def_id).unwrap(),\n+                    self.tcx.def_span(item2.def_id),\n                     format!(\"other definition for `{}`\", name),\n                 );\n "}, {"sha": "803bb06fcc2185486687d2b671877705f4dc7f15", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant-no-repr.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1,13 +1,8 @@\n error[E0732]: `#[repr(inttype)]` must be specified\n   --> $DIR/arbitrary_enum_discriminant-no-repr.rs:4:1\n    |\n-LL | / enum Enum {\n-LL | |\n-LL | |   Unit = 1,\n-LL | |   Tuple() = 2,\n-LL | |   Struct{} = 3,\n-LL | | }\n-   | |_^\n+LL | enum Enum {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "eacea86d67e5523cd3c2e93b7caf1b0ed28d7d69", "filename": "src/test/ui/enum/enum-discrim-autosizing.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1,16 +1,14 @@\n error[E0081]: discriminant value `0` assigned more than once\n   --> $DIR/enum-discrim-autosizing.rs:6:1\n    |\n-LL | / enum Eu64 {\n-LL | |\n-LL | |     Au64 = 0,\n-   | |            - first assignment of `0`\n-LL | |\n-LL | |     Bu64 = 0x8000_0000_0000_0000\n-   | |            --------------------- second assignment of `0` (overflowed from `9223372036854775808`)\n-LL | |\n-LL | | }\n-   | |_^\n+LL | enum Eu64 {\n+   | ^^^^^^^^^\n+LL |\n+LL |     Au64 = 0,\n+   |            - first assignment of `0`\n+LL |\n+LL |     Bu64 = 0x8000_0000_0000_0000\n+   |            --------------------- second assignment of `0` (overflowed from `9223372036854775808`)\n \n error: aborting due to previous error\n "}, {"sha": "ff6113646bb8afbf211328a8d056ca4de7f4aa71", "filename": "src/test/ui/error-codes/E0081.stderr", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1,48 +1,41 @@\n error[E0081]: discriminant value `3` assigned more than once\n   --> $DIR/E0081.rs:1:1\n    |\n-LL | / enum Enum {\n-LL | |\n-LL | |     P = 3,\n-   | |         - first assignment of `3`\n-LL | |\n-LL | |     X = 3,\n-   | |         - second assignment of `3`\n-LL | |\n-LL | |     Y = 5\n-LL | | }\n-   | |_^\n+LL | enum Enum {\n+   | ^^^^^^^^^\n+LL |\n+LL |     P = 3,\n+   |         - first assignment of `3`\n+LL |\n+LL |     X = 3,\n+   |         - second assignment of `3`\n \n error[E0081]: discriminant value `1` assigned more than once\n   --> $DIR/E0081.rs:11:1\n    |\n-LL | / enum EnumOverflowRepr {\n-LL | |\n-LL | |     P = 257,\n-   | |         --- first assignment of `1` (overflowed from `257`)\n-LL | |\n-LL | |     X = 513,\n-   | |         --- second assignment of `1` (overflowed from `513`)\n-LL | |\n-LL | | }\n-   | |_^\n+LL | enum EnumOverflowRepr {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL |     P = 257,\n+   |         --- first assignment of `1` (overflowed from `257`)\n+LL |\n+LL |     X = 513,\n+   |         --- second assignment of `1` (overflowed from `513`)\n \n error[E0081]: discriminant value `-1` assigned more than once\n   --> $DIR/E0081.rs:20:1\n    |\n-LL | / enum NegDisEnum {\n-LL | |\n-LL | |     First = -1,\n-   | |             -- first assignment of `-1`\n-LL | |\n-LL | |     Second = -2,\n-   | |     ----------- assigned discriminant for `Last` was incremented from this discriminant\n-LL | |\n-LL | |     Last,\n-   | |     ---- second assignment of `-1`\n-LL | |\n-LL | | }\n-   | |_^\n+LL | enum NegDisEnum {\n+   | ^^^^^^^^^^^^^^^\n+LL |\n+LL |     First = -1,\n+   |             -- first assignment of `-1`\n+LL |\n+LL |     Second = -2,\n+   |     ----------- assigned discriminant for `Last` was incremented from this discriminant\n+LL |\n+LL |     Last,\n+   |     ---- second assignment of `-1`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e1bda22b8d19a9dde582623b792fcf1b3b7bbe49", "filename": "src/test/ui/error-codes/E0084.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Ferror-codes%2FE0084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Ferror-codes%2FE0084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0084.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -4,7 +4,7 @@ error[E0084]: unsupported representation for zero-variant enum\n LL | #[repr(i32)]\n    | ^^^^^^^^^^^^\n LL | enum Foo {}\n-   | ----------- zero-variant enum\n+   | -------- zero-variant enum\n \n error: aborting due to previous error\n "}, {"sha": "8d423484528a189e3f3e0a202f7f716e82776071", "filename": "src/test/ui/error-codes/E0658.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1,10 +1,8 @@\n error[E0658]: repr with 128-bit type is unstable\n   --> $DIR/E0658.rs:2:1\n    |\n-LL | / enum Foo {\n-LL | |     Bar(u64),\n-LL | | }\n-   | |_^\n+LL | enum Foo {\n+   | ^^^^^^^^\n    |\n    = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n    = help: add `#![feature(repr128)]` to the crate attributes to enable"}, {"sha": "1c926399591c232db31f6dec9326bad44501ead4", "filename": "src/test/ui/extern/extern-static-size-overflow.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -2,19 +2,19 @@ error: extern static is too large for the current architecture\n   --> $DIR/extern-static-size-overflow.rs:38:5\n    |\n LL |     static BAZ: [u8; max_size()];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: extern static is too large for the current architecture\n   --> $DIR/extern-static-size-overflow.rs:39:5\n    |\n LL |     static UWU: [usize; usize::MAX];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: extern static is too large for the current architecture\n   --> $DIR/extern-static-size-overflow.rs:40:5\n    |\n LL |     static A: ReallyBig;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3999a6d2d2f896d836b2548f6bee54e7adcef3e7", "filename": "src/test/ui/feature-gates/feature-gate-repr128.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1,10 +1,8 @@\n error[E0658]: repr with 128-bit type is unstable\n   --> $DIR/feature-gate-repr128.rs:2:1\n    |\n-LL | / enum A {\n-LL | |     A(u64)\n-LL | | }\n-   | |_^\n+LL | enum A {\n+   | ^^^^^^\n    |\n    = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n    = help: add `#![feature(repr128)]` to the crate attributes to enable"}, {"sha": "1195e0a346ddff0df37508d52559911c16a44426", "filename": "src/test/ui/issues/issue-15524.stderr", "status": "modified", "additions": 25, "deletions": 39, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fissues%2Fissue-15524.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fissues%2Fissue-15524.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15524.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1,53 +1,39 @@\n error[E0081]: discriminant value `1` assigned more than once\n   --> $DIR/issue-15524.rs:3:1\n    |\n-LL | / enum Foo {\n-LL | |\n-LL | |\n-LL | |\n-LL | |     A = 1,\n-   | |         - first assignment of `1`\n-LL | |     B = 1,\n-   | |         - second assignment of `1`\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | enum Foo {\n+   | ^^^^^^^^\n+...\n+LL |     A = 1,\n+   |         - first assignment of `1`\n+LL |     B = 1,\n+   |         - second assignment of `1`\n \n error[E0081]: discriminant value `1` assigned more than once\n   --> $DIR/issue-15524.rs:3:1\n    |\n-LL | / enum Foo {\n-LL | |\n-LL | |\n-LL | |\n-LL | |     A = 1,\n-   | |         - first assignment of `1`\n-LL | |     B = 1,\n-LL | |     C = 0,\n-   | |     ----- assigned discriminant for `D` was incremented from this discriminant\n-LL | |     D,\n-   | |     - second assignment of `1`\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | enum Foo {\n+   | ^^^^^^^^\n+...\n+LL |     A = 1,\n+   |         - first assignment of `1`\n+LL |     B = 1,\n+LL |     C = 0,\n+   |     ----- assigned discriminant for `D` was incremented from this discriminant\n+LL |     D,\n+   |     - second assignment of `1`\n \n error[E0081]: discriminant value `1` assigned more than once\n   --> $DIR/issue-15524.rs:3:1\n    |\n-LL | / enum Foo {\n-LL | |\n-LL | |\n-LL | |\n-LL | |     A = 1,\n-   | |         - first assignment of `1`\n-...  |\n-LL | |     E = N,\n-   | |         - second assignment of `1`\n-LL | |\n-LL | | }\n-   | |_^\n+LL | enum Foo {\n+   | ^^^^^^^^\n+...\n+LL |     A = 1,\n+   |         - first assignment of `1`\n+...\n+LL |     E = N,\n+   |         - second assignment of `1`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f9a25b69ff6210120212f96d52df10a2982e6ef5", "filename": "src/test/ui/issues/issue-34209.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no variant named `B` found for enum `S`\n   --> $DIR/issue-34209.rs:7:12\n    |\n LL | enum S {\n-   | ------ variant `B` not found for this enum\n+   | ------ variant `B` not found here\n ...\n LL |         S::B {} => {},\n    |            ^ help: there is a variant with a similar name: `A`"}, {"sha": "df99baaf52293f81611fb6da475e6aae3edb7f63", "filename": "src/test/ui/repr/issue-83505-repr-simd.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Frepr%2Fissue-83505-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Frepr%2Fissue-83505-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83505-repr-simd.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -22,7 +22,7 @@ LL | #[repr(simd)]\n    | ^^^^^^^^^^^^^\n ...\n LL | enum Es {}\n-   | ---------- zero-variant enum\n+   | ------- zero-variant enum\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f1c570b952356e1217b303138f9429789974d05c", "filename": "src/test/ui/repr/repr-transparent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -34,7 +34,7 @@ error[E0084]: unsupported representation for zero-variant enum\n LL | #[repr(transparent)]\n    | ^^^^^^^^^^^^^^^^^^^^\n LL | enum Void {}\n-   | ------------ zero-variant enum\n+   | --------- zero-variant enum\n \n error[E0731]: transparent enum needs exactly one variant, but has 0\n   --> $DIR/repr-transparent.rs:45:1"}, {"sha": "88ee4cbdc2efcd66d8d8597f1db913e7de83db3c", "filename": "src/test/ui/statics/uninhabited-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -2,7 +2,7 @@ error: static of uninhabited type\n   --> $DIR/uninhabited-static.rs:6:5\n    |\n LL |     static VOID: Void;\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/uninhabited-static.rs:2:9\n@@ -17,7 +17,7 @@ error: static of uninhabited type\n   --> $DIR/uninhabited-static.rs:8:5\n    |\n LL |     static NEVER: !;\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #74840 <https://github.com/rust-lang/rust/issues/74840>"}, {"sha": "a422bc65635418d5cb03faeb049fbde185c8e229", "filename": "src/test/ui/suggestions/suggest-variants.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -2,7 +2,7 @@ error[E0599]: no variant named `Squareee` found for enum `Shape`\n   --> $DIR/suggest-variants.rs:12:41\n    |\n LL | enum Shape {\n-   | ---------- variant `Squareee` not found for this enum\n+   | ---------- variant `Squareee` not found here\n ...\n LL |     println!(\"My shape is {:?}\", Shape::Squareee { size: 5});\n    |                                         ^^^^^^^^ help: there is a variant with a similar name: `Square`\n@@ -11,7 +11,7 @@ error[E0599]: no variant named `Circl` found for enum `Shape`\n   --> $DIR/suggest-variants.rs:13:41\n    |\n LL | enum Shape {\n-   | ---------- variant `Circl` not found for this enum\n+   | ---------- variant `Circl` not found here\n ...\n LL |     println!(\"My shape is {:?}\", Shape::Circl { size: 5});\n    |                                         ^^^^^ help: there is a variant with a similar name: `Circle`\n@@ -20,7 +20,7 @@ error[E0599]: no variant named `Rombus` found for enum `Shape`\n   --> $DIR/suggest-variants.rs:14:41\n    |\n LL | enum Shape {\n-   | ---------- variant `Rombus` not found for this enum\n+   | ---------- variant `Rombus` not found here\n ...\n LL |     println!(\"My shape is {:?}\", Shape::Rombus{ size: 5});\n    |                                         ^^^^^^ variant not found in `Shape`"}, {"sha": "6b1ba43d2ba6e79c89051577d75200d5511c62c0", "filename": "src/test/ui/tag-variant-disr-dup.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -1,17 +1,13 @@\n error[E0081]: discriminant value `0` assigned more than once\n   --> $DIR/tag-variant-disr-dup.rs:3:1\n    |\n-LL | / enum Color {\n-LL | |\n-LL | |     Red = 0xff0000,\n-LL | |     Green = 0x00ff00,\n-LL | |     Blue = 0x0000ff,\n-LL | |     Black = 0x000000,\n-   | |             -------- first assignment of `0`\n-LL | |     White = 0x000000,\n-   | |             -------- second assignment of `0`\n-LL | | }\n-   | |_^\n+LL | enum Color {\n+   | ^^^^^^^^^^\n+...\n+LL |     Black = 0x000000,\n+   |             -------- first assignment of `0`\n+LL |     White = 0x000000,\n+   |             -------- second assignment of `0`\n \n error: aborting due to previous error\n "}, {"sha": "6d141a58ef953651f814fc6af964afcaf758c583", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=e0e6f1d1cbb1b3dd5b543b7114d331da3be9f08d", "patch": "@@ -31,8 +31,12 @@ LL | trait Trait: Sized {}\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:25:25\n    |\n-LL |     let t: &dyn Trait = match opt() {\n-   |                         ^^^^^^^^^^^ `Trait` cannot be made into an object\n+LL |       let t: &dyn Trait = match opt() {\n+   |  _________________________^\n+LL | |         Some(()) => &S,\n+LL | |         None => &R,\n+LL | |     };\n+   | |_____^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-unsafe-trait-obj-match.rs:6:14"}]}