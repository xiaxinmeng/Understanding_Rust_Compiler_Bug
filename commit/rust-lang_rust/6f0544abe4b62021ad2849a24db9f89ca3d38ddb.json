{"sha": "6f0544abe4b62021ad2849a24db9f89ca3d38ddb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMDU0NGFiZTRiNjIwMjFhZDI4NDlhMjRkYjlmODljYTNkMzhkZGI=", "commit": {"author": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-10-06T18:48:01Z"}, "committer": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-10-07T20:54:12Z"}, "message": "Simplify doc-cfg rendering based on the current context\n\nFor sub-items on a page don't show cfg that has already been rendered on\na parent item. At its simplest this means not showing anything that is\nshown in the portability message at the top of the page, but also for\nthings like fields of an enum variant if that variant itself is\ncfg-gated then don't repeat those cfg on each field of the variant.\n\nThis does not touch trait implementation rendering, as that is more\ncomplex and there are existing issues around how it deals with doc-cfg\nthat need to be fixed first.", "tree": {"sha": "5d1096f605f3eaa7b1a2cb7fc283232ea36e4602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1096f605f3eaa7b1a2cb7fc283232ea36e4602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f0544abe4b62021ad2849a24db9f89ca3d38ddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0544abe4b62021ad2849a24db9f89ca3d38ddb", "html_url": "https://github.com/rust-lang/rust/commit/6f0544abe4b62021ad2849a24db9f89ca3d38ddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f0544abe4b62021ad2849a24db9f89ca3d38ddb/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d890e64dff3fd2c28635c60cc9315648dd46c8f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d890e64dff3fd2c28635c60cc9315648dd46c8f7", "html_url": "https://github.com/rust-lang/rust/commit/d890e64dff3fd2c28635c60cc9315648dd46c8f7"}], "stats": {"total": 348, "additions": 296, "deletions": 52}, "files": [{"sha": "4d8168dd8ef7443d625d910746b981751e643cbb", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6f0544abe4b62021ad2849a24db9f89ca3d38ddb/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0544abe4b62021ad2849a24db9f89ca3d38ddb/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=6f0544abe4b62021ad2849a24db9f89ca3d38ddb", "patch": "@@ -201,6 +201,35 @@ impl Cfg {\n             _ => false,\n         }\n     }\n+\n+    /// Attempt to simplify this cfg by assuming that `assume` is already known to be true, will\n+    /// return `None` if simplification managed to completely eliminate any requirements from this\n+    /// `Cfg`.\n+    pub(crate) fn simplify_with(&self, assume: &Cfg) -> Option<Cfg> {\n+        if self == assume {\n+            return None;\n+        }\n+\n+        if let Cfg::All(a) = self {\n+            let mut sub_cfgs: Vec<Cfg> = if let Cfg::All(b) = assume {\n+                a.iter().filter(|a| !b.contains(a)).cloned().collect()\n+            } else {\n+                a.iter().filter(|&a| a != assume).cloned().collect()\n+            };\n+            let len = sub_cfgs.len();\n+            return match len {\n+                0 => None,\n+                1 => sub_cfgs.pop(),\n+                _ => Some(Cfg::All(sub_cfgs)),\n+            };\n+        } else if let Cfg::All(b) = assume {\n+            if b.contains(self) {\n+                return None;\n+            }\n+        }\n+\n+        Some(self.clone())\n+    }\n }\n \n impl ops::Not for Cfg {"}, {"sha": "e71df4b45c33991aa5a998ff9bf34d9efaf6469a", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 71, "deletions": 33, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/6f0544abe4b62021ad2849a24db9f89ca3d38ddb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0544abe4b62021ad2849a24db9f89ca3d38ddb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6f0544abe4b62021ad2849a24db9f89ca3d38ddb", "patch": "@@ -1762,11 +1762,11 @@ crate fn shorten(s: String) -> String {\n     }\n }\n \n-fn document(w: &mut Buffer, cx: &Context, item: &clean::Item) {\n+fn document(w: &mut Buffer, cx: &Context, item: &clean::Item, parent: Option<&clean::Item>) {\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);\n     }\n-    document_stability(w, cx, item, false);\n+    document_stability(w, cx, item, false, parent);\n     document_full(w, item, cx, \"\", false);\n }\n \n@@ -1850,8 +1850,14 @@ fn document_full(w: &mut Buffer, item: &clean::Item, cx: &Context, prefix: &str,\n     }\n }\n \n-fn document_stability(w: &mut Buffer, cx: &Context, item: &clean::Item, is_hidden: bool) {\n-    let stabilities = short_stability(item, cx);\n+fn document_stability(\n+    w: &mut Buffer,\n+    cx: &Context,\n+    item: &clean::Item,\n+    is_hidden: bool,\n+    parent: Option<&clean::Item>,\n+) {\n+    let stabilities = short_stability(item, cx, parent);\n     if !stabilities.is_empty() {\n         write!(w, \"<div class='stability{}'>\", if is_hidden { \" hidden\" } else { \"\" });\n         for stability in stabilities {\n@@ -1951,7 +1957,7 @@ pub fn compare_names(mut lhs: &str, mut rhs: &str) -> Ordering {\n }\n \n fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean::Item]) {\n-    document(w, cx, item);\n+    document(w, cx, item, None);\n \n     let mut indices = (0..items.len()).filter(|i| !items[*i].is_stripped()).collect::<Vec<usize>>();\n \n@@ -2108,7 +2114,7 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                          <td class='docblock-short'>{stab_tags}{docs}</td>\\\n                      </tr>\",\n                     name = *myitem.name.as_ref().unwrap(),\n-                    stab_tags = stability_tags(myitem),\n+                    stab_tags = stability_tags(myitem, item),\n                     docs = MarkdownSummaryLine(doc_value, &myitem.links()).into_string(),\n                     class = myitem.type_(),\n                     add = add,\n@@ -2132,7 +2138,7 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n \n /// Render the stability and deprecation tags that are displayed in the item's summary at the\n /// module level.\n-fn stability_tags(item: &clean::Item) -> String {\n+fn stability_tags(item: &clean::Item, parent: &clean::Item) -> String {\n     let mut tags = String::new();\n \n     fn tag_html(class: &str, title: &str, contents: &str) -> String {\n@@ -2159,7 +2165,13 @@ fn stability_tags(item: &clean::Item) -> String {\n         tags += &tag_html(\"unstable\", \"\", \"Experimental\");\n     }\n \n-    if let Some(ref cfg) = item.attrs.cfg {\n+    let cfg = match (&item.attrs.cfg, parent.attrs.cfg.as_ref()) {\n+        (Some(cfg), Some(parent_cfg)) => cfg.simplify_with(parent_cfg),\n+        (cfg, _) => cfg.as_deref().cloned(),\n+    };\n+\n+    info!(\"Portability {:?} - {:?} = {:?}\", item.attrs.cfg, parent.attrs.cfg, cfg);\n+    if let Some(ref cfg) = cfg {\n         tags += &tag_html(\"portability\", &cfg.render_long_plain(), &cfg.render_short_html());\n     }\n \n@@ -2168,7 +2180,7 @@ fn stability_tags(item: &clean::Item) -> String {\n \n /// Render the stability and/or deprecation warning that is displayed at the top of the item's\n /// documentation.\n-fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n+fn short_stability(item: &clean::Item, cx: &Context, parent: Option<&clean::Item>) -> Vec<String> {\n     let mut stability = vec![];\n     let error_codes = cx.shared.codes;\n \n@@ -2242,7 +2254,18 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n         stability.push(format!(\"<div class='stab unstable'>{}</div>\", message));\n     }\n \n-    if let Some(ref cfg) = item.attrs.cfg {\n+    let cfg = match (&item.attrs.cfg, parent.and_then(|p| p.attrs.cfg.as_ref())) {\n+        (Some(cfg), Some(parent_cfg)) => cfg.simplify_with(parent_cfg),\n+        (cfg, _) => cfg.as_deref().cloned(),\n+    };\n+\n+    info!(\n+        \"Portability {:?} - {:?} = {:?}\",\n+        item.attrs.cfg,\n+        parent.and_then(|p| p.attrs.cfg.as_ref()),\n+        cfg\n+    );\n+    if let Some(cfg) = cfg {\n         stability.push(format!(\"<div class='stab portability'>{}</div>\", cfg.render_long_html()));\n     }\n \n@@ -2281,7 +2304,7 @@ fn item_constant(w: &mut Buffer, cx: &Context, it: &clean::Item, c: &clean::Cons\n     }\n \n     write!(w, \"</pre>\");\n-    document(w, cx, it)\n+    document(w, cx, it, None)\n }\n \n fn item_static(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Static) {\n@@ -2295,7 +2318,7 @@ fn item_static(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Static\n         name = it.name.as_ref().unwrap(),\n         typ = s.type_.print()\n     );\n-    document(w, cx, it)\n+    document(w, cx, it, None)\n }\n \n fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Function) {\n@@ -2328,7 +2351,7 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n             .print(),\n         spotlight = spotlight_decl(&f.decl),\n     );\n-    document(w, cx, it)\n+    document(w, cx, it, None)\n }\n \n fn render_implementor(\n@@ -2353,6 +2376,7 @@ fn render_implementor(\n         w,\n         cx,\n         implementor,\n+        None,\n         AssocItemLink::Anchor(None),\n         RenderMode::Normal,\n         implementor.impl_item.stable_since(),\n@@ -2382,6 +2406,7 @@ fn render_impls(\n                 &mut buffer,\n                 cx,\n                 i,\n+                Some(containing_item),\n                 assoc_link,\n                 RenderMode::Normal,\n                 containing_item.stable_since(),\n@@ -2501,7 +2526,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n     });\n \n     // Trait documentation\n-    document(w, cx, it);\n+    document(w, cx, it, None);\n \n     fn write_small_section_header(w: &mut Buffer, id: &str, title: &str, extra_content: &str) {\n         write!(\n@@ -2519,14 +2544,15 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n \n     fn trait_item(w: &mut Buffer, cx: &Context, m: &clean::Item, t: &clean::Item) {\n         let name = m.name.as_ref().unwrap();\n+        info!(\"Documenting {} on {}\", name, t.name.as_deref().unwrap_or_default());\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n         write!(w, \"<h3 id='{id}' class='method'><code>\", id = id,);\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n         render_stability_since(w, m, t);\n         write!(w, \"</h3>\");\n-        document(w, cx, m);\n+        document(w, cx, m, Some(t));\n     }\n \n     if !types.is_empty() {\n@@ -2627,6 +2653,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                     w,\n                     cx,\n                     &implementor,\n+                    None,\n                     assoc_link,\n                     RenderMode::Normal,\n                     implementor.impl_item.stable_since(),\n@@ -2885,7 +2912,7 @@ fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct\n         write!(w, \"</pre>\")\n     });\n \n-    document(w, cx, it);\n+    document(w, cx, it, None);\n     let mut fields = s\n         .fields\n         .iter()\n@@ -2920,7 +2947,7 @@ fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct\n                     name = field.name.as_ref().unwrap(),\n                     ty = ty.print()\n                 );\n-                document(w, cx, field);\n+                document(w, cx, field, Some(it));\n             }\n         }\n     }\n@@ -2935,7 +2962,7 @@ fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union,\n         write!(w, \"</pre>\")\n     });\n \n-    document(w, cx, it);\n+    document(w, cx, it, None);\n     let mut fields = s\n         .fields\n         .iter()\n@@ -2967,7 +2994,7 @@ fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union,\n             if let Some(stability_class) = field.stability_class() {\n                 write!(w, \"<span class='stab {stab}'></span>\", stab = stability_class);\n             }\n-            document(w, cx, field);\n+            document(w, cx, field, Some(it));\n         }\n     }\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All, cache)\n@@ -3022,7 +3049,7 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum, ca\n         write!(w, \"</pre>\")\n     });\n \n-    document(w, cx, it);\n+    document(w, cx, it, None);\n     if !e.variants.is_empty() {\n         write!(\n             w,\n@@ -3055,7 +3082,7 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum, ca\n                 }\n             }\n             write!(w, \"</code></div>\");\n-            document(w, cx, variant);\n+            document(w, cx, variant, Some(it));\n             document_non_exhaustive(w, variant);\n \n             use crate::clean::{Variant, VariantKind};\n@@ -3090,7 +3117,7 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum, ca\n                             f = field.name.as_ref().unwrap(),\n                             t = ty.print()\n                         );\n-                        document(w, cx, field);\n+                        document(w, cx, field, Some(variant));\n                     }\n                 }\n                 write!(w, \"</div></div>\");\n@@ -3288,6 +3315,10 @@ fn render_assoc_items(\n     what: AssocItemRender<'_>,\n     cache: &Cache,\n ) {\n+    info!(\n+        \"Documenting associated items of {}\",\n+        containing_item.name.as_deref().unwrap_or_default()\n+    );\n     let v = match cache.impls.get(&it) {\n         Some(v) => v,\n         None => return,\n@@ -3322,6 +3353,7 @@ fn render_assoc_items(\n                 w,\n                 cx,\n                 i,\n+                Some(containing_item),\n                 AssocItemLink::Anchor(None),\n                 render_mode,\n                 containing_item.stable_since(),\n@@ -3513,6 +3545,7 @@ fn render_impl(\n     w: &mut Buffer,\n     cx: &Context,\n     i: &Impl,\n+    parent: Option<&clean::Item>,\n     link: AssocItemLink<'_>,\n     render_mode: RenderMode,\n     outer_version: Option<&str>,\n@@ -3592,6 +3625,7 @@ fn render_impl(\n         w: &mut Buffer,\n         cx: &Context,\n         item: &clean::Item,\n+        parent: Option<&clean::Item>,\n         link: AssocItemLink<'_>,\n         render_mode: RenderMode,\n         is_default_item: bool,\n@@ -3676,7 +3710,7 @@ fn render_impl(\n                     if let Some(it) = t.items.iter().find(|i| i.name == item.name) {\n                         // We need the stability of the item from the trait\n                         // because impls can't have a stability.\n-                        document_stability(w, cx, it, is_hidden);\n+                        document_stability(w, cx, it, is_hidden, parent);\n                         if item.doc_value().is_some() {\n                             document_full(w, item, cx, \"\", is_hidden);\n                         } else if show_def_docs {\n@@ -3686,13 +3720,13 @@ fn render_impl(\n                         }\n                     }\n                 } else {\n-                    document_stability(w, cx, item, is_hidden);\n+                    document_stability(w, cx, item, is_hidden, parent);\n                     if show_def_docs {\n                         document_full(w, item, cx, \"\", is_hidden);\n                     }\n                 }\n             } else {\n-                document_stability(w, cx, item, is_hidden);\n+                document_stability(w, cx, item, is_hidden, parent);\n                 if show_def_docs {\n                     document_short(w, item, link, \"\", is_hidden);\n                 }\n@@ -3709,6 +3743,7 @@ fn render_impl(\n             w,\n             cx,\n             trait_item,\n+            parent,\n             link,\n             render_mode,\n             false,\n@@ -3724,6 +3759,7 @@ fn render_impl(\n         cx: &Context,\n         t: &clean::Trait,\n         i: &clean::Impl,\n+        parent: Option<&clean::Item>,\n         render_mode: RenderMode,\n         outer_version: Option<&str>,\n         show_def_docs: bool,\n@@ -3741,6 +3777,7 @@ fn render_impl(\n                 w,\n                 cx,\n                 trait_item,\n+                parent,\n                 assoc_link,\n                 render_mode,\n                 true,\n@@ -3763,6 +3800,7 @@ fn render_impl(\n                 cx,\n                 t,\n                 &i.inner_impl(),\n+                parent,\n                 render_mode,\n                 outer_version,\n                 show_def_docs,\n@@ -3791,7 +3829,7 @@ fn item_opaque_ty(\n         bounds = bounds(&t.bounds, false)\n     );\n \n-    document(w, cx, it);\n+    document(w, cx, it, None);\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n@@ -3818,7 +3856,7 @@ fn item_trait_alias(\n         bounds(&t.bounds, true)\n     );\n \n-    document(w, cx, it);\n+    document(w, cx, it, None);\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n@@ -3839,7 +3877,7 @@ fn item_typedef(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Typed\n         type_ = t.type_.print()\n     );\n \n-    document(w, cx, it);\n+    document(w, cx, it, None);\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n@@ -3858,7 +3896,7 @@ fn item_foreign_type(w: &mut Buffer, cx: &Context, it: &clean::Item, cache: &Cac\n         it.name.as_ref().unwrap(),\n     );\n \n-    document(w, cx, it);\n+    document(w, cx, it, None);\n \n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All, cache)\n }\n@@ -4502,7 +4540,7 @@ fn item_macro(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Macro)\n             None,\n         ))\n     });\n-    document(w, cx, it)\n+    document(w, cx, it, None)\n }\n \n fn item_proc_macro(w: &mut Buffer, cx: &Context, it: &clean::Item, m: &clean::ProcMacro) {\n@@ -4532,16 +4570,16 @@ fn item_proc_macro(w: &mut Buffer, cx: &Context, it: &clean::Item, m: &clean::Pr\n             write!(w, \"</pre>\");\n         }\n     }\n-    document(w, cx, it)\n+    document(w, cx, it, None)\n }\n \n fn item_primitive(w: &mut Buffer, cx: &Context, it: &clean::Item, cache: &Cache) {\n-    document(w, cx, it);\n+    document(w, cx, it, None);\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All, cache)\n }\n \n fn item_keyword(w: &mut Buffer, cx: &Context, it: &clean::Item) {\n-    document(w, cx, it)\n+    document(w, cx, it, None)\n }\n \n crate const BASIC_KEYWORDS: &str = \"rust, rustlang, rust-lang\";"}, {"sha": "633df661be02642182a8de54e0f9e76e3d3c3b8d", "filename": "src/test/rustdoc/doc-cfg-simplification.rs", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/6f0544abe4b62021ad2849a24db9f89ca3d38ddb/src%2Ftest%2Frustdoc%2Fdoc-cfg-simplification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0544abe4b62021ad2849a24db9f89ca3d38ddb/src%2Ftest%2Frustdoc%2Fdoc-cfg-simplification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg-simplification.rs?ref=6f0544abe4b62021ad2849a24db9f89ca3d38ddb", "patch": "@@ -0,0 +1,182 @@\n+#![crate_name = \"globuliferous\"]\n+#![feature(doc_cfg)]\n+\n+// @has 'globuliferous/index.html'\n+// @count   - '//*[@class=\"stab portability\"]' 1\n+// @matches - '//*[@class=\"stab portability\"]' '^ratel$'\n+\n+// @has 'globuliferous/ratel/index.html'\n+// @count   - '//*[@class=\"stab portability\"]' 8\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature ratel'\n+// @matches - '//*[@class=\"stab portability\"]' '^zoonosology$'\n+// @matches - '//*[@class=\"stab portability\"]' '^yusho$'\n+// @matches - '//*[@class=\"stab portability\"]' '^nunciative$'\n+// @matches - '//*[@class=\"stab portability\"]' '^thionic$'\n+// @matches - '//*[@class=\"stab portability\"]' '^zincic$'\n+// @matches - '//*[@class=\"stab portability\"]' '^cosmotellurian$'\n+// @matches - '//*[@class=\"stab portability\"]' '^aposiopesis$'\n+#[doc(cfg(feature = \"ratel\"))]\n+pub mod ratel {\n+    // @has 'globuliferous/ratel/fn.ovicide.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 1\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature ratel'\n+    pub fn ovicide() {}\n+\n+    // @has 'globuliferous/ratel/fn.zoonosology.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 1\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate features ratel and zoonosology'\n+    #[doc(cfg(feature = \"zoonosology\"))]\n+    pub fn zoonosology() {}\n+\n+    // @has 'globuliferous/ratel/constant.DIAGRAPHICS.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 1\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature ratel'\n+    pub const DIAGRAPHICS: () = ();\n+\n+    // @has 'globuliferous/ratel/constant.YUSHO.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 1\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate features ratel and yusho'\n+    #[doc(cfg(feature = \"yusho\"))]\n+    pub const YUSHO: () = ();\n+\n+    // @has 'globuliferous/ratel/static.KEYBUGLE.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 1\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature ratel'\n+    pub static KEYBUGLE: () = ();\n+\n+    // @has 'globuliferous/ratel/static.NUNCIATIVE.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 1\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate features ratel and nunciative'\n+    #[doc(cfg(feature = \"nunciative\"))]\n+    pub static NUNCIATIVE: () = ();\n+\n+    // @has 'globuliferous/ratel/type.Wrick.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 1\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature ratel'\n+    pub type Wrick = ();\n+\n+    // @has 'globuliferous/ratel/type.Thionic.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 1\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate features ratel and thionic'\n+    #[doc(cfg(feature = \"thionic\"))]\n+    pub type Thionic = ();\n+\n+    // @has 'globuliferous/ratel/struct.Eventration.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 1\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature ratel'\n+    pub struct Eventration;\n+\n+    // @has 'globuliferous/ratel/struct.Zincic.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 2\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate features ratel and zincic'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature rutherford'\n+    #[doc(cfg(feature = \"zincic\"))]\n+    pub struct Zincic {\n+        pub rectigrade: (),\n+\n+        #[doc(cfg(feature = \"rutherford\"))]\n+        pub rutherford: (),\n+    }\n+\n+    // @has 'globuliferous/ratel/enum.Cosmotellurian.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 10\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate features ratel and cosmotellurian'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature biotaxy'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature xiphopagus'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature juxtapositive'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature fuero'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature palaeophile'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature broadcloth'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate features broadcloth and xanthocomic'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature broadcloth'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate features broadcloth and whosoever'\n+    #[doc(cfg(feature = \"cosmotellurian\"))]\n+    pub enum Cosmotellurian {\n+        Groundsel {\n+            jagger: (),\n+\n+            #[doc(cfg(feature = \"xiphopagus\"))]\n+            xiphopagus: (),\n+        },\n+\n+        #[doc(cfg(feature = \"biotaxy\"))]\n+        Biotaxy {\n+            glossography: (),\n+\n+            #[doc(cfg(feature = \"juxtapositive\"))]\n+            juxtapositive: (),\n+        },\n+    }\n+\n+    impl Cosmotellurian {\n+        pub fn uxoricide() {}\n+\n+        #[doc(cfg(feature = \"fuero\"))]\n+        pub fn fuero() {}\n+\n+        pub const MAMELLE: () = ();\n+\n+        #[doc(cfg(feature = \"palaeophile\"))]\n+        pub const PALAEOPHILE: () = ();\n+    }\n+\n+    #[doc(cfg(feature = \"broadcloth\"))]\n+    impl Cosmotellurian {\n+        pub fn trabeculated() {}\n+\n+        #[doc(cfg(feature = \"xanthocomic\"))]\n+        pub fn xanthocomic() {}\n+\n+        pub const BRACHIFEROUS: () = ();\n+\n+        #[doc(cfg(feature = \"whosoever\"))]\n+        pub const WHOSOEVER: () = ();\n+    }\n+\n+    // @has 'globuliferous/ratel/trait.Gnotobiology.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 4\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature ratel'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature unzymotic'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature summate'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature unctuous'\n+    pub trait Gnotobiology {\n+        const XYLOTHERAPY: ();\n+\n+        #[doc(cfg(feature = \"unzymotic\"))]\n+        const UNZYMOTIC: ();\n+\n+        type Lepadoid;\n+\n+        #[doc(cfg(feature = \"summate\"))]\n+        type Summate;\n+\n+        fn decalcomania();\n+\n+        #[doc(cfg(feature = \"unctuous\"))]\n+        fn unctuous();\n+    }\n+\n+    // @has 'globuliferous/ratel/trait.Aposiopesis.html'\n+    // @count   - '//*[@class=\"stab portability\"]' 4\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate features ratel and aposiopesis'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature umbracious'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature uakari'\n+    // @matches - '//*[@class=\"stab portability\"]' 'crate feature rotograph'\n+    #[doc(cfg(feature = \"aposiopesis\"))]\n+    pub trait Aposiopesis {\n+        const REDHIBITION: ();\n+\n+        #[doc(cfg(feature = \"umbracious\"))]\n+        const UMBRACIOUS: ();\n+\n+        type Ophthalmoscope;\n+\n+        #[doc(cfg(feature = \"uakari\"))]\n+        type Uakari;\n+\n+        fn meseems();\n+\n+        #[doc(cfg(feature = \"rotograph\"))]\n+        fn rotograph();\n+    }\n+}"}, {"sha": "d7041ee2f1af82de5d990fd67e75306e17100fb3", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f0544abe4b62021ad2849a24db9f89ca3d38ddb/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0544abe4b62021ad2849a24db9f89ca3d38ddb/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=6f0544abe4b62021ad2849a24db9f89ca3d38ddb", "patch": "@@ -10,9 +10,8 @@ pub struct Portable;\n // @has doc_cfg/unix_only/index.html \\\n //  '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n //  'This is supported on Unix only.'\n-// @matches - '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '\\AUnix\\Z'\n-// @matches - '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '\\AUnix and ARM\\Z'\n-// @count - '//*[@class=\"stab portability\"]' 3\n+// @matches - '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '\\AARM\\Z'\n+// @count - '//*[@class=\"stab portability\"]' 2\n #[doc(cfg(unix))]\n pub mod unix_only {\n     // @has doc_cfg/unix_only/fn.unix_only_function.html \\\n@@ -26,7 +25,7 @@ pub mod unix_only {\n     // @has doc_cfg/unix_only/trait.ArmOnly.html \\\n     //  '//*[@id=\"main\"]/*[@class=\"stability\"]/*[@class=\"stab portability\"]' \\\n     //  'This is supported on Unix and ARM only.'\n-    // @count - '//*[@class=\"stab portability\"]' 3\n+    // @count - '//*[@class=\"stab portability\"]' 2\n     #[doc(cfg(target_arch = \"arm\"))]\n     pub trait ArmOnly {\n         fn unix_and_arm_only_function();"}, {"sha": "7b938af3c7d5017f94c2ef464932eb5e497eb63f", "filename": "src/test/rustdoc/duplicate-cfg.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6f0544abe4b62021ad2849a24db9f89ca3d38ddb/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0544abe4b62021ad2849a24db9f89ca3d38ddb/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs?ref=6f0544abe4b62021ad2849a24db9f89ca3d38ddb", "patch": "@@ -14,45 +14,41 @@\n pub struct Foo;\n \n // @has 'foo/bar/index.html'\n-// @matches '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '^sync$'\n-// @has '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate feature `sync` only'\n-\n-// @has 'foo/bar/struct.Bar.html'\n // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod bar {\n+    // @has 'foo/bar/struct.Bar.html'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync only.'\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Bar;\n }\n \n // @has 'foo/baz/index.html'\n-// @matches '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '^sync and send$'\n-// @has '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate features `sync` and `send` only'\n-\n-// @has 'foo/baz/struct.Baz.html'\n // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n pub mod baz {\n+    // @has 'foo/baz/struct.Baz.html'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Baz;\n }\n \n-// @has 'foo/qux/struct.Qux.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n+// @has 'foo/qux/index.html'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod qux {\n+    // @has 'foo/qux/struct.Qux.html'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n     #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n     pub struct Qux;\n }\n \n // @has 'foo/quux/index.html'\n-// @matches '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '^sync and send and foo and bar$'\n-// @has '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate feature `sync` and crate feature `send` and `foo` and `bar` only'\n-\n-// @has 'foo/quux/struct.Quux.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync and crate feature send and foo and bar only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync and crate feature send and foo only.'\n #[doc(cfg(all(feature = \"sync\", feature = \"send\", foo)))]\n pub mod quux {\n+    // @has 'foo/quux/struct.Quux.html'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync and crate feature send and foo and bar only.'\n     #[doc(cfg(all(feature = \"send\", feature = \"sync\", bar)))]\n     pub struct Quux;\n }"}]}