{"sha": "58d7e1bf70b58affdcd0b8baa678ce69f1a2eefd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZDdlMWJmNzBiNThhZmZkY2QwYjhiYWE2NzhjZTY5ZjFhMmVlZmQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-28T20:08:10Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-01T18:51:35Z"}, "message": "Remove redundant `check_for_macros` AST pass.", "tree": {"sha": "3698fbb5c6656e3064e1d13af1a00e1c7a95f023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3698fbb5c6656e3064e1d13af1a00e1c7a95f023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d7e1bf70b58affdcd0b8baa678ce69f1a2eefd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d7e1bf70b58affdcd0b8baa678ce69f1a2eefd", "html_url": "https://github.com/rust-lang/rust/commit/58d7e1bf70b58affdcd0b8baa678ce69f1a2eefd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d7e1bf70b58affdcd0b8baa678ce69f1a2eefd/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2cab1fd58d6373582da189bd2c20ed3f6a7042a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2cab1fd58d6373582da189bd2c20ed3f6a7042a", "html_url": "https://github.com/rust-lang/rust/commit/c2cab1fd58d6373582da189bd2c20ed3f6a7042a"}], "stats": {"total": 23, "additions": 0, "deletions": 23}, "files": [{"sha": "85762e54c798a0cf9e6e09f9fa585ccd6e9b2dca", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d7e1bf70b58affdcd0b8baa678ce69f1a2eefd/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d7e1bf70b58affdcd0b8baa678ce69f1a2eefd/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=58d7e1bf70b58affdcd0b8baa678ce69f1a2eefd", "patch": "@@ -747,10 +747,6 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                  \"prelude injection\",\n                  || syntax::std_inject::maybe_inject_prelude(&sess.parse_sess, krate));\n \n-    time(time_passes,\n-         \"checking that all macro invocations are gone\",\n-         || syntax::ext::expand::check_for_macros(&sess.parse_sess, &krate));\n-\n     time(time_passes,\n          \"checking for inline asm in case the target doesn't support it\",\n          || no_asm::check_crate(sess, &krate));"}, {"sha": "d3f5a573218fdd8f11fa4398e4263f52103f254f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58d7e1bf70b58affdcd0b8baa678ce69f1a2eefd/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d7e1bf70b58affdcd0b8baa678ce69f1a2eefd/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=58d7e1bf70b58affdcd0b8baa678ce69f1a2eefd", "patch": "@@ -25,7 +25,6 @@ use feature_gate::{self, Features};\n use fold;\n use fold::*;\n use util::move_map::MoveMap;\n-use parse;\n use parse::token::{fresh_mark, fresh_name, intern, keywords};\n use ptr::P;\n use util::small_vector::SmallVector;\n@@ -1212,24 +1211,6 @@ fn mark_tts(tts: &[TokenTree], m: Mrk) -> Vec<TokenTree> {\n     noop_fold_tts(tts, &mut Marker{mark:m, expn_id: None})\n }\n \n-/// Check that there are no macro invocations left in the AST:\n-pub fn check_for_macros(sess: &parse::ParseSess, krate: &ast::Crate) {\n-    visit::walk_crate(&mut MacroExterminator{sess:sess}, krate);\n-}\n-\n-/// A visitor that ensures that no macro invocations remain in an AST.\n-struct MacroExterminator<'a>{\n-    sess: &'a parse::ParseSess\n-}\n-\n-impl<'a, 'v> Visitor<'v> for MacroExterminator<'a> {\n-    fn visit_mac(&mut self, mac: &ast::Mac) {\n-        self.sess.span_diagnostic.span_bug(mac.span,\n-                                           \"macro exterminator: expected AST \\\n-                                           with no macro invocations\");\n-    }\n-}\n-\n \n #[cfg(test)]\n mod tests {"}]}