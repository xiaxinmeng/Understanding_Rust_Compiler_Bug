{"sha": "98af1bfeccf1ec1f9e896ecc912b5cc808408378", "node_id": "C_kwDOAAsO6NoAKDk4YWYxYmZlY2NmMWVjMWY5ZTg5NmVjYzkxMmI1Y2M4MDg0MDgzNzg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-23T04:43:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-28T22:41:56Z"}, "message": "Migrate some rustc_borrowck diagnostics to SessionDiagnostic", "tree": {"sha": "dc12944b99ac5f1365c7eb058224c971c36afffb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc12944b99ac5f1365c7eb058224c971c36afffb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98af1bfeccf1ec1f9e896ecc912b5cc808408378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98af1bfeccf1ec1f9e896ecc912b5cc808408378", "html_url": "https://github.com/rust-lang/rust/commit/98af1bfeccf1ec1f9e896ecc912b5cc808408378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98af1bfeccf1ec1f9e896ecc912b5cc808408378/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "830880640304ba8699c5f9a0c4665c38a3271963", "url": "https://api.github.com/repos/rust-lang/rust/commits/830880640304ba8699c5f9a0c4665c38a3271963", "html_url": "https://github.com/rust-lang/rust/commit/830880640304ba8699c5f9a0c4665c38a3271963"}], "stats": {"total": 165, "additions": 122, "deletions": 43}, "files": [{"sha": "f51712e8e2cc2f14fd7890fc9a68795119ec3bea", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -3595,6 +3595,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_infer\",\n  \"rustc_lexer\",\n+ \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_mir_dataflow\",\n  \"rustc_serialize\","}, {"sha": "8a35921d745cf33a4d6dc4deb702f6a57caad827", "filename": "compiler/rustc_borrowck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2FCargo.toml?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -19,6 +19,7 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_const_eval = { path = \"../rustc_const_eval\" }\n rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }"}, {"sha": "1ef2b0ae98843b3edd575b71783fd86a7f0e8b14", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -19,6 +19,9 @@ use std::fmt;\n use std::rc::Rc;\n \n use crate::region_infer::values::RegionElement;\n+use crate::session_diagnostics::HigherRankedErrorCause;\n+use crate::session_diagnostics::HigherRankedLifetimeError;\n+use crate::session_diagnostics::HigherRankedSubtypeError;\n use crate::MirBorrowckCtxt;\n \n #[derive(Clone)]\n@@ -69,7 +72,7 @@ impl<'tcx> UniverseInfo<'tcx> {\n                 // up in the existing UI tests. Consider investigating this\n                 // some more.\n                 mbcx.buffer_error(\n-                    mbcx.infcx.tcx.sess.struct_span_err(cause.span, \"higher-ranked subtype error\"),\n+                    mbcx.infcx.tcx.sess.create_err(HigherRankedSubtypeError { span: cause.span }),\n                 );\n             }\n         }\n@@ -216,9 +219,12 @@ impl<'tcx> TypeOpInfo<'tcx> for PredicateQuery<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\");\n-        err.note(&format!(\"could not prove {}\", self.canonical_query.value.value.predicate));\n-        err\n+        tcx.sess.create_err(HigherRankedLifetimeError {\n+            cause: Some(HigherRankedErrorCause::CouldNotProve {\n+                predicate: self.canonical_query.value.value.predicate.to_string(),\n+            }),\n+            span,\n+        })\n     }\n \n     fn base_universe(&self) -> ty::UniverseIndex {\n@@ -263,9 +269,12 @@ where\n         tcx: TyCtxt<'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\");\n-        err.note(&format!(\"could not normalize `{}`\", self.canonical_query.value.value.value));\n-        err\n+        tcx.sess.create_err(HigherRankedLifetimeError {\n+            cause: Some(HigherRankedErrorCause::CouldNotNormalize {\n+                value: self.canonical_query.value.value.value.to_string(),\n+            }),\n+            span,\n+        })\n     }\n \n     fn base_universe(&self) -> ty::UniverseIndex {\n@@ -326,7 +335,7 @@ impl<'tcx> TypeOpInfo<'tcx> for AscribeUserTypeQuery<'tcx> {\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         // FIXME: This error message isn't great, but it doesn't show up in the existing UI tests,\n         // and is only the fallback when the nice error fails. Consider improving this some more.\n-        tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\")\n+        tcx.sess.create_err(HigherRankedLifetimeError { cause: None, span })\n     }\n \n     fn base_universe(&self) -> ty::UniverseIndex {\n@@ -366,7 +375,7 @@ impl<'tcx> TypeOpInfo<'tcx> for crate::type_check::InstantiateOpaqueType<'tcx> {\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         // FIXME: This error message isn't great, but it doesn't show up in the existing UI tests,\n         // and is only the fallback when the nice error fails. Consider improving this some more.\n-        tcx.sess.struct_span_err(span, \"higher-ranked lifetime error for opaque type!\")\n+        tcx.sess.create_err(HigherRankedLifetimeError { cause: None, span })\n     }\n \n     fn base_universe(&self) -> ty::UniverseIndex {"}, {"sha": "5d3997289bb333ec6f7b8b55b0f42e45eb6ca68f", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -24,6 +24,7 @@ use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use crate::borrowck_errors;\n+use crate::session_diagnostics::GenericDoesNotLiveLongEnough;\n \n use super::{OutlivesSuggestionBuilder, RegionName};\n use crate::region_infer::BlameConstraint;\n@@ -196,9 +197,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         // to report it; we could probably handle it by\n                         // iterating over the universal regions and reporting\n                         // an error that multiple bounds are required.\n-                        self.buffer_error(self.infcx.tcx.sess.struct_span_err(\n-                            type_test_span,\n-                            &format!(\"`{}` does not live long enough\", type_test.generic_kind),\n+                        self.buffer_error(self.infcx.tcx.sess.create_err(\n+                            GenericDoesNotLiveLongEnough {\n+                                kind: type_test.generic_kind.to_string(),\n+                                span: type_test_span,\n+                            },\n                         ));\n                     }\n                 }"}, {"sha": "7d6f37340c2bb06218aa855cb451ddc3998bda5e", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -76,6 +76,7 @@ mod places_conflict;\n mod prefixes;\n mod region_infer;\n mod renumber;\n+mod session_diagnostics;\n mod type_check;\n mod universal_regions;\n mod used_muts;"}, {"sha": "895723d44ff1b474b88468b9d4b365e8abafaf5b", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -0,0 +1,44 @@\n+use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_middle::ty::Ty;\n+use rustc_span::Span;\n+\n+#[derive(SessionDiagnostic)]\n+#[error(borrowck::move_unsized, code = \"E0161\")]\n+pub(crate) struct MoveUnsized<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(borrowck::higher_ranked_lifetime_error)]\n+pub(crate) struct HigherRankedLifetimeError {\n+    #[subdiagnostic]\n+    pub cause: Option<HigherRankedErrorCause>,\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub(crate) enum HigherRankedErrorCause {\n+    #[note(borrowck::could_not_prove)]\n+    CouldNotProve { predicate: String },\n+    #[note(borrowck::could_not_normalize)]\n+    CouldNotNormalize { value: String },\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(borrowck::higher_ranked_subtype_error)]\n+pub(crate) struct HigherRankedSubtypeError {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(borrowck::generic_does_not_live_long_enough)]\n+pub(crate) struct GenericDoesNotLiveLongEnough {\n+    pub kind: String,\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "5ee1f5a8e8e37f414e05a2d5dde65febdbcc21ee", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -9,7 +9,6 @@ use hir::OpaqueTyOrigin;\n use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::vec_map::VecMap;\n-use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n@@ -48,6 +47,7 @@ use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n use rustc_mir_dataflow::move_paths::MoveData;\n use rustc_mir_dataflow::ResultsCursor;\n \n+use crate::session_diagnostics::MoveUnsized;\n use crate::{\n     borrow_set::BorrowSet,\n     constraints::{OutlivesConstraint, OutlivesConstraintSet},\n@@ -1780,19 +1780,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // slot or local, so to find all unsized rvalues it is enough\n             // to check all temps, return slots and locals.\n             if self.reported_errors.replace((ty, span)).is_none() {\n-                let mut diag = struct_span_err!(\n-                    self.tcx().sess,\n-                    span,\n-                    E0161,\n-                    \"cannot move a value of type {0}: the size of {0} \\\n-                     cannot be statically determined\",\n-                    ty\n-                );\n-\n                 // While this is located in `nll::typeck` this error is not\n                 // an NLL error, it's a required check to prevent creation\n                 // of unsized rvalues in a call expression.\n-                diag.emit();\n+                self.tcx().sess.emit_err(MoveUnsized { ty, span });\n             }\n         }\n     }"}, {"sha": "645673ef47aeb618faf16c7a4a4abce055170575", "filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -0,0 +1,18 @@\n+borrowck-move-unsized =\n+    cannot move a value of type `{$ty}`\n+    .label = the size of `{$ty}` cannot be statically determined\n+\n+borrowck-higher-ranked-lifetime-error =\n+    higher-ranked lifetime error\n+\n+borrowck-could-not-prove =\n+    could not prove `{$predicate}`\n+\n+borrowck-could-not-normalize =\n+    could not normalize `{$value}`\n+\n+borrowck-higher-ranked-subtype-error =\n+    higher-ranked subtype error\n+  \n+generic-does-not-live-long-enough =\n+    `{$kind}` does not live long enough\n\\ No newline at end of file"}, {"sha": "d52b94b78dfac035f1d227d3c385364bb4bc32cd", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -35,6 +35,7 @@ fluent_messages! {\n     privacy => \"../locales/en-US/privacy.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\",\n     builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n+    borrowck => \"../locales/en-US/borrowck.ftl\",\n }\n \n pub use fluent_generated::{self as fluent, DEFAULT_LOCALE_RESOURCES};"}, {"sha": "6d74e9a9f2b9e5dd20ab8c134b8d21d05934142e", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -281,9 +281,19 @@ pub trait Emitter {\n         let message = bundle.get_message(&identifier).expect(\"missing diagnostic in fluent bundle\");\n         let value = match attr {\n             Some(attr) => {\n-                message.get_attribute(attr).expect(\"missing attribute in fluent message\").value()\n+                if let Some(attr) = message.get_attribute(attr) {\n+                    attr.value()\n+                } else {\n+                    panic!(\"missing attribute `{attr}` in fluent message `{identifier}`\")\n+                }\n+            }\n+            None => {\n+                if let Some(value) = message.value() {\n+                    value\n+                } else {\n+                    panic!(\"missing value in fluent message `{identifier}`\")\n+                }\n             }\n-            None => message.value().expect(\"missing value in fluent message\"),\n         };\n \n         let mut err = vec![];"}, {"sha": "d38af3f89c21b84d8d400375ad8e8b1dd3234ed0", "filename": "src/test/ui/dst/dst-index.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fdst%2Fdst-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fdst%2Fdst-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-index.stderr?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -1,14 +1,14 @@\n-error[E0161]: cannot move a value of type str: the size of str cannot be statically determined\n+error[E0161]: cannot move a value of type `str`\n   --> $DIR/dst-index.rs:31:5\n    |\n LL |     S[0];\n-   |     ^^^^\n+   |     ^^^^ the size of `str` cannot be statically determined\n \n-error[E0161]: cannot move a value of type dyn Debug: the size of dyn Debug cannot be statically determined\n+error[E0161]: cannot move a value of type `dyn Debug`\n   --> $DIR/dst-index.rs:34:5\n    |\n LL |     T[0];\n-   |     ^^^^\n+   |     ^^^^ the size of `dyn Debug` cannot be statically determined\n \n error[E0507]: cannot move out of index of `S`\n   --> $DIR/dst-index.rs:31:5"}, {"sha": "15d98b657a262a01a79937fba825a375d16cc57d", "filename": "src/test/ui/error-codes/E0161.base.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Ferror-codes%2FE0161.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Ferror-codes%2FE0161.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.base.stderr?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -1,8 +1,8 @@\n-error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n+error[E0161]: cannot move a value of type `dyn Bar`\n   --> $DIR/E0161.rs:16:5\n    |\n LL |     x.f();\n-   |     ^^^^^\n+   |     ^^^^^ the size of `dyn Bar` cannot be statically determined\n \n error: aborting due to previous error\n "}, {"sha": "43e609cc59efb0eddd9b52e21acf8621ad23573e", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -4,15 +4,15 @@ error: higher-ranked lifetime error\n LL |     v.t(|| {});\n    |     ^^^^^^^^^^\n    |\n-   = note: could not prove [closure@$DIR/issue-59311.rs:17:9: 17:14] well-formed\n+   = note: could not prove `[closure@$DIR/issue-59311.rs:17:9: 17:14] well-formed`\n \n error: higher-ranked lifetime error\n   --> $DIR/issue-59311.rs:17:9\n    |\n LL |     v.t(|| {});\n    |         ^^^^^\n    |\n-   = note: could not prove for<'a> &'a V: 'static\n+   = note: could not prove `for<'a> &'a V: 'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "72bb0782f4b4f2170b0532f1fde4e24ec4e6200b", "filename": "src/test/ui/lifetimes/re-empty-in-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -4,7 +4,7 @@ error: higher-ranked lifetime error\n LL |     foo(&10);\n    |     ^^^^^^^^\n    |\n-   = note: could not prove for<'b, 'r> &'b (): 'r\n+   = note: could not prove `for<'b, 'r> &'b (): 'r`\n \n error: aborting due to previous error\n "}, {"sha": "f73d38f80426f551b39c177b1503345795b1b98b", "filename": "src/test/ui/mir/issue-67947.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fmir%2Fissue-67947.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fmir%2Fissue-67947.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-67947.rs?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -1,6 +1,6 @@\n struct Bug {\n     A: [(); { *\"\" }.len()],\n-    //~^ ERROR: cannot move a value of type str\n+    //~^ ERROR: cannot move a value of type `str`\n     //~| ERROR: cannot move out of a shared reference\n }\n "}, {"sha": "7697a411eb481975c78efa65e13d42a844fe6226", "filename": "src/test/ui/mir/issue-67947.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fmir%2Fissue-67947.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fmir%2Fissue-67947.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-67947.stderr?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -1,8 +1,8 @@\n-error[E0161]: cannot move a value of type str: the size of str cannot be statically determined\n+error[E0161]: cannot move a value of type `str`\n   --> $DIR/issue-67947.rs:2:13\n    |\n LL |     A: [(); { *\"\" }.len()],\n-   |             ^^^^^^^\n+   |             ^^^^^^^ the size of `str` cannot be statically determined\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/issue-67947.rs:2:15"}, {"sha": "8e93c538217bbd2e4ec90cabd41e0b03d192fbc1", "filename": "src/test/ui/object-safety/object-safety-by-value-self-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.rs?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -12,7 +12,7 @@ trait Baz {\n }\n \n fn use_bar(t: Box<dyn Bar>) {\n-    t.bar() //~ ERROR cannot move a value of type dyn Bar\n+    t.bar() //~ ERROR cannot move a value of type `dyn Bar`\n }\n \n fn main() { }"}, {"sha": "94fdcdf263ae08843249df4f7d229f8c2181b64a", "filename": "src/test/ui/object-safety/object-safety-by-value-self-use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.stderr?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -1,8 +1,8 @@\n-error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be statically determined\n+error[E0161]: cannot move a value of type `dyn Bar`\n   --> $DIR/object-safety-by-value-self-use.rs:15:5\n    |\n LL |     t.bar()\n-   |     ^^^^^^^\n+   |     ^^^^^^^ the size of `dyn Bar` cannot be statically determined\n \n error: aborting due to previous error\n "}, {"sha": "f053f4b0af89c0de9b720c382ea1c910a4341fba", "filename": "src/test/ui/unsized/return-unsized-from-trait-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Funsized%2Freturn-unsized-from-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Funsized%2Freturn-unsized-from-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Freturn-unsized-from-trait-method.rs?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -7,7 +7,7 @@ trait Foo {\n fn foo(f: Option<&dyn Foo>) {\n     if let Some(f) = f {\n         let _ = f.foo();\n-        //~^ ERROR cannot move a value of type [u8]: the size of [u8] cannot be statically determined\n+        //~^ ERROR cannot move a value of type `[u8]`\n     }\n }\n "}, {"sha": "671d409937cac0083eeab0c727455905bb38af81", "filename": "src/test/ui/unsized/return-unsized-from-trait-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Funsized%2Freturn-unsized-from-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98af1bfeccf1ec1f9e896ecc912b5cc808408378/src%2Ftest%2Fui%2Funsized%2Freturn-unsized-from-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Freturn-unsized-from-trait-method.stderr?ref=98af1bfeccf1ec1f9e896ecc912b5cc808408378", "patch": "@@ -1,8 +1,8 @@\n-error[E0161]: cannot move a value of type [u8]: the size of [u8] cannot be statically determined\n+error[E0161]: cannot move a value of type `[u8]`\n   --> $DIR/return-unsized-from-trait-method.rs:9:17\n    |\n LL |         let _ = f.foo();\n-   |                 ^^^^^^^\n+   |                 ^^^^^^^ the size of `[u8]` cannot be statically determined\n \n error: aborting due to previous error\n "}]}