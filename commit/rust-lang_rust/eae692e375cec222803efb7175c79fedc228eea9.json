{"sha": "eae692e375cec222803efb7175c79fedc228eea9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZTY5MmUzNzVjZWMyMjI4MDNlZmI3MTc1Yzc5ZmVkYzIyOGVlYTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-05T18:18:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-05T18:18:27Z"}, "message": "Auto merge of #25009 - alexcrichton:less-buffered-stream, r=aturon\n\nAs pointed out in #17136 the semantics of a `BufStream` aren't always what one\r\nexpects, and it looks like other [languages like C#][c-sharp] implement a\r\nbuffered stream with only one underlying buffer. For now this commit\r\ndestabilizes the primitive in the `std::io` module to give us some more time in\r\nfiguring out what to do with it.\r\n\r\n[c-sharp]: https://msdn.microsoft.com/en-us/library/system.io.bufferedstream%28v=vs.110%29.aspx\r\n\r\n[breaking-change]", "tree": {"sha": "c881bba599dfafc7abf56ad76aa442593454da6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c881bba599dfafc7abf56ad76aa442593454da6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eae692e375cec222803efb7175c79fedc228eea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eae692e375cec222803efb7175c79fedc228eea9", "html_url": "https://github.com/rust-lang/rust/commit/eae692e375cec222803efb7175c79fedc228eea9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eae692e375cec222803efb7175c79fedc228eea9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cd748611346dec3181f81ca3aa551cce0529343", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd748611346dec3181f81ca3aa551cce0529343", "html_url": "https://github.com/rust-lang/rust/commit/6cd748611346dec3181f81ca3aa551cce0529343"}, {"sha": "db477eef72924c7b34e9617627eaae37c71bdc1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/db477eef72924c7b34e9617627eaae37c71bdc1c", "html_url": "https://github.com/rust-lang/rust/commit/db477eef72924c7b34e9617627eaae37c71bdc1c"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "43a2629261882fafecd531f7e242331c0bc2c809", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eae692e375cec222803efb7175c79fedc228eea9/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae692e375cec222803efb7175c79fedc228eea9/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=eae692e375cec222803efb7175c79fedc228eea9", "patch": "@@ -433,15 +433,19 @@ impl<W: Read + Write> Read for InternalBufWriter<W> {\n /// infrequent calls to `read` and `write` on the underlying `Read+Write`.\n ///\n /// The output buffer will be written out when this stream is dropped.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"buf_stream\",\n+           reason = \"unsure about semantics of buffering two directions, \\\n+                     leading to issues like #17136\")]\n pub struct BufStream<S: Write> {\n     inner: BufReader<InternalBufWriter<S>>\n }\n \n+#[unstable(feature = \"buf_stream\",\n+           reason = \"unsure about semantics of buffering two directions, \\\n+                     leading to issues like #17136\")]\n impl<S: Read + Write> BufStream<S> {\n     /// Creates a new buffered stream with explicitly listed capacities for the\n     /// reader/writer buffer.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacities(reader_cap: usize, writer_cap: usize, inner: S)\n                            -> BufStream<S> {\n         let writer = BufWriter::with_capacity(writer_cap, inner);\n@@ -452,13 +456,11 @@ impl<S: Read + Write> BufStream<S> {\n \n     /// Creates a new buffered stream with the default reader/writer buffer\n     /// capacities.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(inner: S) -> BufStream<S> {\n         BufStream::with_capacities(DEFAULT_BUF_SIZE, DEFAULT_BUF_SIZE, inner)\n     }\n \n     /// Gets a reference to the underlying stream.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_ref(&self) -> &S {\n         let InternalBufWriter(ref w) = self.inner.inner;\n         w.get_ref()\n@@ -470,7 +472,6 @@ impl<S: Read + Write> BufStream<S> {\n     ///\n     /// It is inadvisable to read directly from or write directly to the\n     /// underlying stream.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut S {\n         let InternalBufWriter(ref mut w) = self.inner.inner;\n         w.get_mut()\n@@ -480,7 +481,6 @@ impl<S: Read + Write> BufStream<S> {\n     ///\n     /// The internal write buffer is written out before returning the stream.\n     /// Any leftover data in the read buffer is lost.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> Result<S, IntoInnerError<BufStream<S>>> {\n         let BufReader { inner: InternalBufWriter(w), buf, pos, cap } = self.inner;\n         w.into_inner().map_err(|IntoInnerError(w, e)| {\n@@ -491,20 +491,26 @@ impl<S: Read + Write> BufStream<S> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"buf_stream\",\n+           reason = \"unsure about semantics of buffering two directions, \\\n+                     leading to issues like #17136\")]\n impl<S: Read + Write> BufRead for BufStream<S> {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { self.inner.fill_buf() }\n     fn consume(&mut self, amt: usize) { self.inner.consume(amt) }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"buf_stream\",\n+           reason = \"unsure about semantics of buffering two directions, \\\n+                     leading to issues like #17136\")]\n impl<S: Read + Write> Read for BufStream<S> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"buf_stream\",\n+           reason = \"unsure about semantics of buffering two directions, \\\n+                     leading to issues like #17136\")]\n impl<S: Read + Write> Write for BufStream<S> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.inner.get_mut().write(buf)\n@@ -514,7 +520,9 @@ impl<S: Read + Write> Write for BufStream<S> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"buf_stream\",\n+           reason = \"unsure about semantics of buffering two directions, \\\n+                     leading to issues like #17136\")]\n impl<S: Write> fmt::Debug for BufStream<S> where S: fmt::Debug {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let reader = &self.inner;"}]}