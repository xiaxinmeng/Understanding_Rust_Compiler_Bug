{"sha": "fb927968cc3dd76353dcc9627dd5eca6ac07bf31", "node_id": "C_kwDOAAsO6NoAKGZiOTI3OTY4Y2MzZGQ3NjM1M2RjYzk2MjdkZDVlY2E2YWMwN2JmMzE", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-04-09T19:56:58Z"}, "committer": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-04-09T20:19:21Z"}, "message": "Separate out a `rustc_llvm_env` function", "tree": {"sha": "82c913ed3dd6f578b53a04b9e964d9a667794643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c913ed3dd6f578b53a04b9e964d9a667794643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb927968cc3dd76353dcc9627dd5eca6ac07bf31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb927968cc3dd76353dcc9627dd5eca6ac07bf31", "html_url": "https://github.com/rust-lang/rust/commit/fb927968cc3dd76353dcc9627dd5eca6ac07bf31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb927968cc3dd76353dcc9627dd5eca6ac07bf31/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2d9a3d0771504f1ae776226a5799dcb4408a91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d9a3d0771504f1ae776226a5799dcb4408a91a", "html_url": "https://github.com/rust-lang/rust/commit/f2d9a3d0771504f1ae776226a5799dcb4408a91a"}], "stats": {"total": 128, "additions": 67, "deletions": 61}, "files": [{"sha": "8fb5c1460d8e34cb22a824ef43daf53485d1301c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 67, "deletions": 61, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/fb927968cc3dd76353dcc9627dd5eca6ac07bf31/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb927968cc3dd76353dcc9627dd5eca6ac07bf31/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=fb927968cc3dd76353dcc9627dd5eca6ac07bf31", "patch": "@@ -867,8 +867,6 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n         cargo.env(\"RUSTC_VERIFY_LLVM_IR\", \"1\");\n     }\n \n-    // Pass down configuration from the LLVM build into the build of\n-    // rustc_llvm and rustc_codegen_llvm.\n     //\n     // Note that this is disabled if LLVM itself is disabled or we're in a check\n     // build. If we are in a check build we still go ahead here presuming we've\n@@ -878,72 +876,80 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n         && (builder.kind != Kind::Check\n             || crate::llvm::prebuilt_llvm_config(builder, target).is_ok())\n     {\n-        if builder.is_rust_llvm(target) {\n-            cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n-        }\n-        let llvm::LlvmResult { llvm_config, .. } = builder.ensure(llvm::Llvm { target });\n-        cargo.env(\"LLVM_CONFIG\", &llvm_config);\n-        if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n-            cargo.env(\"CFG_LLVM_ROOT\", s);\n-        }\n+        rustc_llvm_env(builder, cargo, target)\n+    }\n+}\n \n-        // Some LLVM linker flags (-L and -l) may be needed to link `rustc_llvm`. Its build script\n-        // expects these to be passed via the `LLVM_LINKER_FLAGS` env variable, separated by\n-        // whitespace.\n-        //\n-        // For example:\n-        // - on windows, when `clang-cl` is used with instrumentation, we need to manually add\n-        // clang's runtime library resource directory so that the profiler runtime library can be\n-        // found. This is to avoid the linker errors about undefined references to\n-        // `__llvm_profile_instrument_memop` when linking `rustc_driver`.\n-        let mut llvm_linker_flags = String::new();\n-        if builder.config.llvm_profile_generate && target.contains(\"msvc\") {\n-            if let Some(ref clang_cl_path) = builder.config.llvm_clang_cl {\n-                // Add clang's runtime library directory to the search path\n-                let clang_rt_dir = get_clang_cl_resource_dir(clang_cl_path);\n-                llvm_linker_flags.push_str(&format!(\"-L{}\", clang_rt_dir.display()));\n-            }\n-        }\n+/// Pass down configuration from the LLVM build into the build of\n+/// rustc_llvm and rustc_codegen_llvm.\n+fn rustc_llvm_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelection) {\n+    let target_config = builder.config.target_config.get(&target);\n \n-        // The config can also specify its own llvm linker flags.\n-        if let Some(ref s) = builder.config.llvm_ldflags {\n-            if !llvm_linker_flags.is_empty() {\n-                llvm_linker_flags.push_str(\" \");\n-            }\n-            llvm_linker_flags.push_str(s);\n+    if builder.is_rust_llvm(target) {\n+        cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n+    }\n+    let llvm::LlvmResult { llvm_config, .. } = builder.ensure(llvm::Llvm { target });\n+    cargo.env(\"LLVM_CONFIG\", &llvm_config);\n+    if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+        cargo.env(\"CFG_LLVM_ROOT\", s);\n+    }\n+\n+    // Some LLVM linker flags (-L and -l) may be needed to link `rustc_llvm`. Its build script\n+    // expects these to be passed via the `LLVM_LINKER_FLAGS` env variable, separated by\n+    // whitespace.\n+    //\n+    // For example:\n+    // - on windows, when `clang-cl` is used with instrumentation, we need to manually add\n+    // clang's runtime library resource directory so that the profiler runtime library can be\n+    // found. This is to avoid the linker errors about undefined references to\n+    // `__llvm_profile_instrument_memop` when linking `rustc_driver`.\n+    let mut llvm_linker_flags = String::new();\n+    if builder.config.llvm_profile_generate && target.contains(\"msvc\") {\n+        if let Some(ref clang_cl_path) = builder.config.llvm_clang_cl {\n+            // Add clang's runtime library directory to the search path\n+            let clang_rt_dir = get_clang_cl_resource_dir(clang_cl_path);\n+            llvm_linker_flags.push_str(&format!(\"-L{}\", clang_rt_dir.display()));\n         }\n+    }\n \n-        // Set the linker flags via the env var that `rustc_llvm`'s build script will read.\n+    // The config can also specify its own llvm linker flags.\n+    if let Some(ref s) = builder.config.llvm_ldflags {\n         if !llvm_linker_flags.is_empty() {\n-            cargo.env(\"LLVM_LINKER_FLAGS\", llvm_linker_flags);\n+            llvm_linker_flags.push_str(\" \");\n         }\n+        llvm_linker_flags.push_str(s);\n+    }\n \n-        // Building with a static libstdc++ is only supported on linux right now,\n-        // not for MSVC or macOS\n-        if builder.config.llvm_static_stdcpp\n-            && !target.contains(\"freebsd\")\n-            && !target.contains(\"msvc\")\n-            && !target.contains(\"apple\")\n-            && !target.contains(\"solaris\")\n-        {\n-            let file = compiler_file(\n-                builder,\n-                builder.cxx(target).unwrap(),\n-                target,\n-                CLang::Cxx,\n-                \"libstdc++.a\",\n-            );\n-            cargo.env(\"LLVM_STATIC_STDCPP\", file);\n-        }\n-        if builder.llvm_link_shared() {\n-            cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n-        }\n-        if builder.config.llvm_use_libcxx {\n-            cargo.env(\"LLVM_USE_LIBCXX\", \"1\");\n-        }\n-        if builder.config.llvm_optimize && !builder.config.llvm_release_debuginfo {\n-            cargo.env(\"LLVM_NDEBUG\", \"1\");\n-        }\n+    // Set the linker flags via the env var that `rustc_llvm`'s build script will read.\n+    if !llvm_linker_flags.is_empty() {\n+        cargo.env(\"LLVM_LINKER_FLAGS\", llvm_linker_flags);\n+    }\n+\n+    // Building with a static libstdc++ is only supported on linux right now,\n+    // not for MSVC or macOS\n+    if builder.config.llvm_static_stdcpp\n+        && !target.contains(\"freebsd\")\n+        && !target.contains(\"msvc\")\n+        && !target.contains(\"apple\")\n+        && !target.contains(\"solaris\")\n+    {\n+        let file = compiler_file(\n+            builder,\n+            builder.cxx(target).unwrap(),\n+            target,\n+            CLang::Cxx,\n+            \"libstdc++.a\",\n+        );\n+        cargo.env(\"LLVM_STATIC_STDCPP\", file);\n+    }\n+    if builder.llvm_link_shared() {\n+        cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n+    }\n+    if builder.config.llvm_use_libcxx {\n+        cargo.env(\"LLVM_USE_LIBCXX\", \"1\");\n+    }\n+    if builder.config.llvm_optimize && !builder.config.llvm_release_debuginfo {\n+        cargo.env(\"LLVM_NDEBUG\", \"1\");\n     }\n }\n "}]}