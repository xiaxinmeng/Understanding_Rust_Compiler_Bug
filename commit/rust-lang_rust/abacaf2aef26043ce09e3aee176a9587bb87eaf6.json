{"sha": "abacaf2aef26043ce09e3aee176a9587bb87eaf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYWNhZjJhZWYyNjA0M2NlMDllM2FlZTE3NmE5NTg3YmI4N2VhZjY=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-04T13:41:58Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-04T13:41:58Z"}, "message": "`u128` truncation and sign extension are not just interpreter related", "tree": {"sha": "71dd864eabe7c9078a135beddbdf8853090f021e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71dd864eabe7c9078a135beddbdf8853090f021e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abacaf2aef26043ce09e3aee176a9587bb87eaf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abacaf2aef26043ce09e3aee176a9587bb87eaf6", "html_url": "https://github.com/rust-lang/rust/commit/abacaf2aef26043ce09e3aee176a9587bb87eaf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abacaf2aef26043ce09e3aee176a9587bb87eaf6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e67c768110f2cd55d6823defcbfca5651fe1f9f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67c768110f2cd55d6823defcbfca5651fe1f9f5", "html_url": "https://github.com/rust-lang/rust/commit/e67c768110f2cd55d6823defcbfca5651fe1f9f5"}], "stats": {"total": 162, "additions": 73, "deletions": 89}, "files": [{"sha": "bfe5514b6d3eab4a096f4007c00cbbc269c89166", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -585,10 +585,7 @@ fn codegen_stmt<'tcx>(\n                                     .discriminant_for_variant(fx.tcx, *index)\n                                     .unwrap();\n                                 let discr = if discr.ty.is_signed() {\n-                                    rustc_middle::mir::interpret::sign_extend(\n-                                        discr.val,\n-                                        fx.layout_of(discr.ty).size,\n-                                    )\n+                                    fx.layout_of(discr.ty).size.sign_extend(discr.val)\n                                 } else {\n                                     discr.val\n                                 };"}, {"sha": "454d43fd4e7dcf22dffbe84bbc7358e9b0cd8cb2", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -29,7 +29,6 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ich::NodeIdHashingMode;\n-use rustc_middle::mir::interpret::truncate;\n use rustc_middle::mir::{self, Field, GeneratorLayout};\n use rustc_middle::ty::layout::{self, IntegerExt, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -1693,7 +1692,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                 let value = (i.as_u32() as u128)\n                                     .wrapping_sub(niche_variants.start().as_u32() as u128)\n                                     .wrapping_add(niche_start);\n-                                let value = truncate(value, tag.value.size(cx));\n+                                let value = tag.value.size(cx).truncate(value);\n                                 // NOTE(eddyb) do *NOT* remove this assert, until\n                                 // we pass the full 128-bit value to LLVM, otherwise\n                                 // truncation will be silent and remain undetected."}, {"sha": "467a3a425906f96165c06199db241b955252f813", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, ExprKind, Node};\n use rustc_index::vec::Idx;\n-use rustc_middle::mir::interpret::{sign_extend, truncate};\n use rustc_middle::ty::layout::{IntegerExt, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, Ty, TyCtxt, TypeFoldable};\n@@ -218,11 +217,11 @@ fn report_bin_hex_error(\n     cx.struct_span_lint(OVERFLOWING_LITERALS, expr.span, |lint| {\n         let (t, actually) = match ty {\n             attr::IntType::SignedInt(t) => {\n-                let actually = sign_extend(val, size) as i128;\n+                let actually = size.sign_extend(val) as i128;\n                 (t.name_str(), actually.to_string())\n             }\n             attr::IntType::UnsignedInt(t) => {\n-                let actually = truncate(val, size);\n+                let actually = size.truncate(val);\n                 (t.name_str(), actually.to_string())\n             }\n         };"}, {"sha": "bcf85797313f265d7c0645487866e7c5ef936240", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -110,7 +110,7 @@ use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_serialize::{Decodable, Encodable};\n-use rustc_target::abi::{Endian, Size};\n+use rustc_target::abi::Endian;\n \n use crate::mir;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n@@ -590,39 +590,6 @@ pub fn read_target_uint(endianness: Endian, mut source: &[u8]) -> Result<u128, i\n     uint\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n-// Methods to facilitate working with signed integers stored in a u128\n-////////////////////////////////////////////////////////////////////////////////\n-\n-/// Truncates `value` to `size` bits and then sign-extend it to 128 bits\n-/// (i.e., if it is negative, fill with 1's on the left).\n-#[inline]\n-pub fn sign_extend(value: u128, size: Size) -> u128 {\n-    let size = size.bits();\n-    if size == 0 {\n-        // Truncated until nothing is left.\n-        return 0;\n-    }\n-    // Sign-extend it.\n-    let shift = 128 - size;\n-    // Shift the unsigned value to the left, then shift back to the right as signed\n-    // (essentially fills with FF on the left).\n-    (((value << shift) as i128) >> shift) as u128\n-}\n-\n-/// Truncates `value` to `size` bits.\n-#[inline]\n-pub fn truncate(value: u128, size: Size) -> u128 {\n-    let size = size.bits();\n-    if size == 0 {\n-        // Truncated until nothing is left.\n-        return 0;\n-    }\n-    let shift = 128 - size;\n-    // Truncate (shift left to drop out leftover values, shift right to fill with zeroes).\n-    (value << shift) >> shift\n-}\n-\n /// Computes the unsigned absolute value without wrapping or panicking.\n #[inline]\n pub fn uabs(value: i64) -> u64 {"}, {"sha": "5e97862ecf2b6be734b8f49bdbdfaa11c3b8a212", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -10,7 +10,7 @@ use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};\n \n use crate::ty::{ParamEnv, ScalarInt, Ty, TyCtxt};\n \n-use super::{sign_extend, AllocId, Allocation, InterpResult, Pointer, PointerArithmetic};\n+use super::{AllocId, Allocation, InterpResult, Pointer, PointerArithmetic};\n \n /// Represents the result of const evaluation via the `eval_to_allocation` query.\n #[derive(Clone, HashStable, TyEncodable, TyDecodable)]\n@@ -448,7 +448,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n     fn to_signed_with_bit_width(self, bits: u64) -> InterpResult<'static, i128> {\n         let sz = Size::from_bits(bits);\n         let b = self.to_bits(sz)?;\n-        Ok(sign_extend(b, sz) as i128)\n+        Ok(sz.sign_extend(b) as i128)\n     }\n \n     /// Converts the scalar to produce an `i8`. Fails if the scalar is a pointer.\n@@ -479,7 +479,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n     pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'static, i64> {\n         let sz = cx.data_layout().pointer_size;\n         let b = self.to_bits(sz)?;\n-        let b = sign_extend(b, sz) as i128;\n+        let b = sz.sign_extend(b) as i128;\n         Ok(i64::try_from(b).unwrap())\n     }\n "}, {"sha": "4ff88d1adaf8e47eeb9824f4fbcc541a06ead1eb", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -1,4 +1,4 @@\n-use crate::mir::interpret::{sign_extend, truncate, InterpResult};\n+use crate::mir::interpret::InterpResult;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n@@ -75,7 +75,7 @@ impl std::fmt::Debug for ConstInt {\n                 Ok(())\n             }\n         } else {\n-            let max = truncate(u128::MAX, Size::from_bytes(size));\n+            let max = Size::from_bytes(size).truncate(u128::MAX);\n             if raw == max {\n                 match (size, is_ptr_sized_integral) {\n                     (_, true) => write!(fmt, \"usize::MAX\"),\n@@ -174,7 +174,7 @@ impl ScalarInt {\n         // is a packed struct, that would create a possibly unaligned reference, which\n         // is UB.\n         debug_assert_eq!(\n-            truncate(self.data, self.size()),\n+            self.size().truncate(self.data),\n             { self.data },\n             \"Scalar value {:#x} exceeds size of {} bytes\",\n             { self.data },\n@@ -204,7 +204,7 @@ impl ScalarInt {\n     #[inline]\n     pub fn try_from_uint(i: impl Into<u128>, size: Size) -> Option<Self> {\n         let data = i.into();\n-        if truncate(data, size) == data {\n+        if size.truncate(data) == data {\n             Some(Self { data, size: size.bytes() as u8 })\n         } else {\n             None\n@@ -215,8 +215,8 @@ impl ScalarInt {\n     pub fn try_from_int(i: impl Into<i128>, size: Size) -> Option<Self> {\n         let i = i.into();\n         // `into` performed sign extension, we have to truncate\n-        let truncated = truncate(i as u128, size);\n-        if sign_extend(truncated, size) as i128 == i {\n+        let truncated = size.truncate(i as u128);\n+        if size.sign_extend(truncated) as i128 == i {\n             Some(Self { data: truncated, size: size.bytes() as u8 })\n         } else {\n             None"}, {"sha": "5f117e19eca2788e43354e63311a439afefd875a", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -2,7 +2,6 @@\n \n use crate::ich::NodeIdHashingMode;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use crate::mir::interpret::{sign_extend, truncate};\n use crate::ty::fold::TypeFolder;\n use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n@@ -38,7 +37,7 @@ impl<'tcx> fmt::Display for Discr<'tcx> {\n                 let size = ty::tls::with(|tcx| Integer::from_attr(&tcx, SignedInt(ity)).size());\n                 let x = self.val;\n                 // sign extend the raw representation to be an i128\n-                let x = sign_extend(x, size) as i128;\n+                let x = size.sign_extend(x) as i128;\n                 write!(fmt, \"{}\", x)\n             }\n             _ => write!(fmt, \"{}\", self.val),\n@@ -47,7 +46,7 @@ impl<'tcx> fmt::Display for Discr<'tcx> {\n }\n \n fn signed_min(size: Size) -> i128 {\n-    sign_extend(1_u128 << (size.bits() - 1), size) as i128\n+    size.sign_extend(1_u128 << (size.bits() - 1)) as i128\n }\n \n fn signed_max(size: Size) -> i128 {\n@@ -77,14 +76,14 @@ impl<'tcx> Discr<'tcx> {\n         let (val, oflo) = if signed {\n             let min = signed_min(size);\n             let max = signed_max(size);\n-            let val = sign_extend(self.val, size) as i128;\n+            let val = size.sign_extend(self.val) as i128;\n             assert!(n < (i128::MAX as u128));\n             let n = n as i128;\n             let oflo = val > max - n;\n             let val = if oflo { min + (n - (max - val) - 1) } else { val + n };\n             // zero the upper bits\n             let val = val as u128;\n-            let val = truncate(val, size);\n+            let val = size.truncate(val);\n             (val, oflo)\n         } else {\n             let max = unsigned_max(size);\n@@ -650,7 +649,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         let val = match self.kind() {\n             ty::Int(_) | ty::Uint(_) => {\n                 let (size, signed) = int_size_and_signed(tcx, self);\n-                let val = if signed { truncate(signed_min(size) as u128, size) } else { 0 };\n+                let val = if signed { size.truncate(signed_min(size) as u128) } else { 0 };\n                 Some(val)\n             }\n             ty::Char => Some(0),"}, {"sha": "6d224bcc50b0ffaf223d77f28310bcc231e65c0a", "filename": "compiler/rustc_mir/src/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -13,8 +13,7 @@ use rustc_span::symbol::sym;\n use rustc_target::abi::{Integer, LayoutOf, Variants};\n \n use super::{\n-    truncate, util::ensure_monomorphic_enough, FnVal, ImmTy, Immediate, InterpCx, Machine, OpTy,\n-    PlaceTy,\n+    util::ensure_monomorphic_enough, FnVal, ImmTy, Immediate, InterpCx, Machine, OpTy, PlaceTy,\n };\n \n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n@@ -209,7 +208,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     RawPtr(_) => self.pointer_size(),\n                     _ => bug!(),\n                 };\n-                let v = truncate(v, size);\n+                let v = size.truncate(v);\n                 Scalar::from_uint(v, size)\n             }\n "}, {"sha": "08d8904ae1a5af711b2c1072f8dd787e01b1f03c", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -9,9 +9,7 @@ use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_middle::ich::StableHashingContext;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::{\n-    sign_extend, truncate, GlobalId, InterpResult, Pointer, Scalar,\n-};\n+use rustc_middle::mir::interpret::{GlobalId, InterpResult, Pointer, Scalar};\n use rustc_middle::ty::layout::{self, TyAndLayout};\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n@@ -443,12 +441,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     #[inline(always)]\n     pub fn sign_extend(&self, value: u128, ty: TyAndLayout<'_>) -> u128 {\n         assert!(ty.abi.is_signed());\n-        sign_extend(value, ty.size)\n+        ty.size.sign_extend(value)\n     }\n \n     #[inline(always)]\n     pub fn truncate(&self, value: u128, ty: TyAndLayout<'_>) -> u128 {\n-        truncate(value, ty.size)\n+        ty.size.truncate(value)\n     }\n \n     #[inline]"}, {"sha": "a003380dda7e8a3d4be9f36bbe883c2b326711dd", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -14,9 +14,9 @@ use rustc_target::abi::{Abi, Align, FieldsShape, TagEncoding};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, VariantIdx, Variants};\n \n use super::{\n-    mir_assign_valid_types, truncate, AllocId, AllocMap, Allocation, AllocationExtra, ConstAlloc,\n-    ImmTy, Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand,\n-    Pointer, PointerArithmetic, Scalar, ScalarMaybeUninit,\n+    mir_assign_valid_types, AllocId, AllocMap, Allocation, AllocationExtra, ConstAlloc, ImmTy,\n+    Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer,\n+    PointerArithmetic, Scalar, ScalarMaybeUninit,\n };\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n@@ -1073,7 +1073,7 @@ where\n                 // their computation, but the in-memory tag is the smallest possible\n                 // representation\n                 let size = tag_layout.value.size(self);\n-                let tag_val = truncate(discr_val, size);\n+                let tag_val = size.truncate(discr_val);\n \n                 let tag_dest = self.place_field(dest, tag_field)?;\n                 self.write_scalar(Scalar::from_uint(tag_val, size), tag_dest)?;"}, {"sha": "aeb9920c0e321c36c8f804c32211c992f0b0203b", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -29,10 +29,9 @@ use rustc_trait_selection::traits;\n \n use crate::const_eval::ConstEvalErr;\n use crate::interpret::{\n-    self, compile_time_machine, truncate, AllocId, Allocation, ConstValue, CtfeValidationMode,\n-    Frame, ImmTy, Immediate, InterpCx, InterpResult, LocalState, LocalValue, MemPlace, Memory,\n-    MemoryKind, OpTy, Operand as InterpOperand, PlaceTy, Pointer, Scalar, ScalarMaybeUninit,\n-    StackPopCleanup,\n+    self, compile_time_machine, AllocId, Allocation, ConstValue, CtfeValidationMode, Frame, ImmTy,\n+    Immediate, InterpCx, InterpResult, LocalState, LocalValue, MemPlace, Memory, MemoryKind, OpTy,\n+    Operand as InterpOperand, PlaceTy, Pointer, Scalar, ScalarMaybeUninit, StackPopCleanup,\n };\n use crate::transform::MirPass;\n \n@@ -746,7 +745,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                             }\n                         }\n                         BinOp::BitOr => {\n-                            if arg_value == truncate(u128::MAX, const_arg.layout.size)\n+                            if arg_value == const_arg.layout.size.truncate(u128::MAX)\n                                 || (const_arg.layout.ty.is_bool() && arg_value == 1)\n                             {\n                                 this.ecx.write_immediate(*const_arg, dest)?;"}, {"sha": "375f19f87559fe6f9cd3d267a9a338408f7160f9", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -17,7 +17,6 @@ use crate::build::Builder;\n use crate::thir::{self, *};\n use rustc_attr::{SignedInt, UnsignedInt};\n use rustc_hir::RangeEnd;\n-use rustc_middle::mir::interpret::truncate;\n use rustc_middle::mir::Place;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::IntegerExt;\n@@ -161,13 +160,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     }\n                     ty::Int(ity) => {\n                         let size = Integer::from_attr(&tcx, SignedInt(ity)).size();\n-                        let max = truncate(u128::MAX, size);\n+                        let max = size.truncate(u128::MAX);\n                         let bias = 1u128 << (size.bits() - 1);\n                         (Some((0, max, size)), bias)\n                     }\n                     ty::Uint(uty) => {\n                         let size = Integer::from_attr(&tcx, UnsignedInt(uty)).size();\n-                        let max = truncate(u128::MAX, size);\n+                        let max = size.truncate(u128::MAX);\n                         (Some((0, max, size)), 0)\n                     }\n                     _ => (None, 0),"}, {"sha": "dfe82317f48c6f81b9932dbcf4449b06128b4351", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast as ast;\n use rustc_middle::mir::interpret::{\n-    truncate, Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n+    Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n };\n use rustc_middle::ty::{self, ParamEnv, TyCtxt};\n use rustc_span::symbol::Symbol;\n@@ -16,7 +16,7 @@ crate fn lit_to_const<'tcx>(\n         let param_ty = ParamEnv::reveal_all().and(ty);\n         let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n         trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n-        let result = truncate(n, width);\n+        let result = width.truncate(n);\n         trace!(\"trunc result: {}\", result);\n         Ok(ConstValue::Scalar(Scalar::from_uint(result, width)))\n     };"}, {"sha": "9e096f9ad68475913a84f246c2a70fd406447b0c", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -304,7 +304,7 @@ use rustc_arena::TypedArena;\n use rustc_attr::{SignedInt, UnsignedInt};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{HirId, RangeEnd};\n-use rustc_middle::mir::interpret::{truncate, ConstValue};\n+use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::mir::Field;\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n@@ -1608,7 +1608,7 @@ fn all_constructors<'p, 'tcx>(pcx: PatCtxt<'_, 'p, 'tcx>) -> Vec<Constructor<'tc\n         }\n         &ty::Uint(uty) => {\n             let size = Integer::from_attr(&cx.tcx, UnsignedInt(uty)).size();\n-            let max = truncate(u128::MAX, size);\n+            let max = size.truncate(u128::MAX);\n             vec![make_range(0, max)]\n         }\n         _ if cx.is_uninhabited(pcx.ty) => vec![],"}, {"sha": "db0ecd701bca4d3846cd5dbbda6ff7369615d630", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -15,7 +15,7 @@ use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n use rustc_hir::RangeEnd;\n use rustc_index::vec::Idx;\n-use rustc_middle::mir::interpret::{get_slice_bytes, sign_extend, ConstValue};\n+use rustc_middle::mir::interpret::{get_slice_bytes, ConstValue};\n use rustc_middle::mir::interpret::{ErrorHandled, LitToConstError, LitToConstInput};\n use rustc_middle::mir::UserTypeProjection;\n use rustc_middle::mir::{BorrowKind, Field, Mutability};\n@@ -1082,8 +1082,8 @@ crate fn compare_const_vals<'tcx>(\n                 use rustc_attr::SignedInt;\n                 use rustc_middle::ty::layout::IntegerExt;\n                 let size = rustc_target::abi::Integer::from_attr(&tcx, SignedInt(ity)).size();\n-                let a = sign_extend(a, size);\n-                let b = sign_extend(b, size);\n+                let a = size.sign_extend(a);\n+                let b = size.sign_extend(b);\n                 Some((a as i128).cmp(&(b as i128)))\n             }\n             _ => Some(a.cmp(&b)),"}, {"sha": "c28c2fecfbb434c46862e7c005d6c6badd9583b0", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -4,7 +4,6 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n-use rustc_middle::mir::interpret::sign_extend;\n use rustc_middle::ty::print::{Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n@@ -527,7 +526,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n                 let param_env = ty::ParamEnv::reveal_all();\n                 ct.try_eval_bits(self.tcx, param_env, ct.ty).and_then(|b| {\n                     let sz = self.tcx.layout_of(param_env.and(ct.ty)).ok()?.size;\n-                    let val = sign_extend(b, sz) as i128;\n+                    let val = sz.sign_extend(b) as i128;\n                     if val < 0 {\n                         neg = true;\n                     }"}, {"sha": "12cdd5c169acd4d9b86a21187b6ba939597733db", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -306,6 +306,35 @@ impl Size {\n         let bytes = self.bytes().checked_mul(count)?;\n         if bytes < dl.obj_size_bound() { Some(Size::from_bytes(bytes)) } else { None }\n     }\n+\n+    /// Truncates `value` to `self` bits and then sign-extend it to 128 bits\n+    /// (i.e., if it is negative, fill with 1's on the left).\n+    #[inline]\n+    pub fn sign_extend(self, value: u128) -> u128 {\n+        let size = self.bits();\n+        if size == 0 {\n+            // Truncated until nothing is left.\n+            return 0;\n+        }\n+        // Sign-extend it.\n+        let shift = 128 - size;\n+        // Shift the unsigned value to the left, then shift back to the right as signed\n+        // (essentially fills with FF on the left).\n+        (((value << shift) as i128) >> shift) as u128\n+    }\n+\n+    /// Truncates `value` to `self` bits.\n+    #[inline]\n+    pub fn truncate(self, value: u128) -> u128 {\n+        let size = self.bits();\n+        if size == 0 {\n+            // Truncated until nothing is left.\n+            return 0;\n+        }\n+        let shift = 128 - size;\n+        // Truncate (shift left to drop out leftover values, shift right to fill with zeroes).\n+        (value << shift) >> shift\n+    }\n }\n \n // Panicking addition, subtraction and multiplication for convenience."}, {"sha": "f6258221e322d578a4a419a2e64b97010481ba57", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abacaf2aef26043ce09e3aee176a9587bb87eaf6/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abacaf2aef26043ce09e3aee176a9587bb87eaf6/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=abacaf2aef26043ce09e3aee176a9587bb87eaf6", "patch": "@@ -14,7 +14,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_middle::mir::interpret::{sign_extend, ConstValue};\n+use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, DefIdTree, Ty};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -506,7 +506,7 @@ fn print_const_with_custom_print_scalar(cx: &DocContext<'_>, ct: &'tcx ty::Const\n             let ty = cx.tcx.lift(ct.ty).unwrap();\n             let size = cx.tcx.layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size;\n             let data = int.assert_bits(size);\n-            let sign_extended_data = sign_extend(data, size) as i128;\n+            let sign_extended_data = size.sign_extend(data) as i128;\n \n             format!(\n                 \"{}{}\","}]}