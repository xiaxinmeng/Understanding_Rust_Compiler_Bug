{"sha": "65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "node_id": "C_kwDOAAsO6NoAKDY1YmM2Y2I4YmYxZjEwMDVhZTAyYTAwNDRmMGYzMDI3YzcwMmE4MDc", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-28T19:54:28Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:48:26Z"}, "message": "Lint `explicit_auto_deref` without a leading borrow", "tree": {"sha": "442bc6147a40052fb95b4f5d78dc5e244da60a39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/442bc6147a40052fb95b4f5d78dc5e244da60a39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "html_url": "https://github.com/rust-lang/rust/commit/65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442a68c64b177480da34fd7ee5349987ffd7f3d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/442a68c64b177480da34fd7ee5349987ffd7f3d7", "html_url": "https://github.com/rust-lang/rust/commit/442a68c64b177480da34fd7ee5349987ffd7f3d7"}], "stats": {"total": 83, "additions": 72, "deletions": 11}, "files": [{"sha": "32d1e26b74cf6c3b747ab8e6db5da5f773a7f35e", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "patch": "@@ -246,6 +246,8 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n             (None, kind) => {\n                 let expr_ty = typeck.expr_ty(expr);\n                 let (position, parent_ctxt) = get_expr_position(cx, expr);\n+                let (stability, adjustments) = walk_parents(cx, expr);\n+\n                 match kind {\n                     RefOp::Deref => {\n                         if let Position::FieldAccess(name) = position\n@@ -255,6 +257,11 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                                 State::ExplicitDerefField { name },\n                                 StateData { span: expr.span, hir_id: expr.hir_id },\n                             ));\n+                        } else if stability.is_deref_stable() {\n+                            self.state = Some((\n+                                State::ExplicitDeref { deref_span: expr.span, deref_hir_id: expr.hir_id },\n+                                StateData { span: expr.span, hir_id: expr.hir_id },\n+                            ));\n                         }\n                     }\n                     RefOp::Method(target_mut)\n@@ -278,7 +285,6 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                         ));\n                     },\n                     RefOp::AddrOf => {\n-                        let (stability, adjustments) = walk_parents(cx, expr);\n                         // Find the number of times the borrow is auto-derefed.\n                         let mut iter = adjustments.iter();\n                         let mut deref_count = 0usize;\n@@ -632,6 +638,7 @@ impl AutoDerefStability {\n /// Walks up the parent expressions attempting to determine both how stable the auto-deref result\n /// is, and which adjustments will be applied to it. Note this will not consider auto-borrow\n /// locations as those follow different rules.\n+#[allow(clippy::too_many_lines)]\n fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (AutoDerefStability, &'tcx [Adjustment<'tcx>]) {\n     let mut adjustments = [].as_slice();\n     let stability = walk_to_expr_usage(cx, e, &mut |node, child_id| {\n@@ -643,16 +650,26 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (AutoDerefSt\n             Node::Local(Local { ty: Some(ty), .. }) => Some(binding_ty_auto_deref_stability(ty)),\n             Node::Item(&Item {\n                 kind: ItemKind::Static(..) | ItemKind::Const(..),\n+                def_id,\n                 ..\n             })\n             | Node::TraitItem(&TraitItem {\n                 kind: TraitItemKind::Const(..),\n+                def_id,\n                 ..\n             })\n             | Node::ImplItem(&ImplItem {\n                 kind: ImplItemKind::Const(..),\n+                def_id,\n                 ..\n-            }) => Some(AutoDerefStability::Deref),\n+            }) => {\n+                let ty = cx.tcx.type_of(def_id);\n+                Some(if ty.is_ref() {\n+                    AutoDerefStability::None\n+                } else {\n+                    AutoDerefStability::Deref\n+                })\n+            },\n \n             Node::Item(&Item {\n                 kind: ItemKind::Fn(..),\n@@ -670,7 +687,9 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (AutoDerefSt\n                 ..\n             }) => {\n                 let output = cx.tcx.fn_sig(def_id.to_def_id()).skip_binder().output();\n-                Some(if output.has_placeholders() || output.has_opaque_types() {\n+                Some(if !output.is_ref() {\n+                    AutoDerefStability::None\n+                } else if output.has_placeholders() || output.has_opaque_types() {\n                     AutoDerefStability::Reborrow\n                 } else {\n                     AutoDerefStability::Deref\n@@ -684,7 +703,9 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (AutoDerefSt\n                         .fn_sig(cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()))\n                         .skip_binder()\n                         .output();\n-                    Some(if output.has_placeholders() || output.has_opaque_types() {\n+                    Some(if !output.is_ref() {\n+                        AutoDerefStability::None\n+                    } else if output.has_placeholders() || output.has_opaque_types() {\n                         AutoDerefStability::Reborrow\n                     } else {\n                         AutoDerefStability::Deref"}, {"sha": "d20a58e53bd1259ba0b397e4184b977600d7509e", "filename": "tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.fixed?ref=65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "patch": "@@ -6,6 +6,7 @@\n     unused_braces,\n     clippy::borrowed_box,\n     clippy::needless_borrow,\n+    clippy::needless_return,\n     clippy::ptr_arg,\n     clippy::redundant_field_names,\n     clippy::too_many_arguments,\n@@ -184,4 +185,17 @@ fn main() {\n     }\n     let s6 = S6 { foo: S5 { foo: 5 } };\n     let _ = (*s6).foo; // Don't lint. `S6` also has a field named `foo`\n+\n+    let ref_str = &\"foo\";\n+    let _ = f_str(ref_str);\n+    let ref_ref_str = &ref_str;\n+    let _ = f_str(ref_ref_str);\n+\n+    fn _f5(x: &u32) -> u32 {\n+        if true {\n+            *x\n+        } else {\n+            return *x;\n+        }\n+    }\n }"}, {"sha": "f49bc8bb9f0120307a9c4de899a54de620d61b23", "filename": "tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.rs?ref=65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "patch": "@@ -6,6 +6,7 @@\n     unused_braces,\n     clippy::borrowed_box,\n     clippy::needless_borrow,\n+    clippy::needless_return,\n     clippy::ptr_arg,\n     clippy::redundant_field_names,\n     clippy::too_many_arguments,\n@@ -184,4 +185,17 @@ fn main() {\n     }\n     let s6 = S6 { foo: S5 { foo: 5 } };\n     let _ = (*s6).foo; // Don't lint. `S6` also has a field named `foo`\n+\n+    let ref_str = &\"foo\";\n+    let _ = f_str(*ref_str);\n+    let ref_ref_str = &ref_str;\n+    let _ = f_str(**ref_ref_str);\n+\n+    fn _f5(x: &u32) -> u32 {\n+        if true {\n+            *x\n+        } else {\n+            return *x;\n+        }\n+    }\n }"}, {"sha": "de8c40ce5be1d4fe71b29a1f4bbdd2edd19eaef7", "filename": "tests/ui/explicit_auto_deref.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fexplicit_auto_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fexplicit_auto_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.stderr?ref=65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "patch": "@@ -168,5 +168,17 @@ error: deref which would be done by auto-deref\n LL |     let _ = (**b).foo;\n    |             ^^^^^ help: try this: `b`\n \n-error: aborting due to 28 previous errors\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:189:19\n+   |\n+LL |     let _ = f_str(*ref_str);\n+   |                   ^^^^^^^^ help: try this: `ref_str`\n+\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:191:19\n+   |\n+LL |     let _ = f_str(**ref_ref_str);\n+   |                   ^^^^^^^^^^^^^ help: try this: `ref_ref_str`\n+\n+error: aborting due to 30 previous errors\n "}, {"sha": "222e8e617995d7943e4d0d6cd1e7ea7da452364e", "filename": "tests/ui/needless_borrow_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fneedless_borrow_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fneedless_borrow_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow_pat.rs?ref=65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "patch": "@@ -1,7 +1,7 @@\n // FIXME: run-rustfix waiting on multi-span suggestions\n \n #![warn(clippy::needless_borrow)]\n-#![allow(clippy::needless_borrowed_reference)]\n+#![allow(clippy::needless_borrowed_reference, clippy::explicit_auto_deref)]\n \n fn f1(_: &str) {}\n macro_rules! m1 {"}, {"sha": "c8d0e56b197f4e939022ac07eddbdb8018176d84", "filename": "tests/ui/ref_binding_to_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fref_binding_to_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fref_binding_to_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_binding_to_reference.rs?ref=65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(lint_reasons)]\n #![warn(clippy::ref_binding_to_reference)]\n-#![allow(clippy::needless_borrowed_reference)]\n+#![allow(clippy::needless_borrowed_reference, clippy::explicit_auto_deref)]\n \n fn f1(_: &str) {}\n macro_rules! m2 {"}, {"sha": "5190c5304c75d127f0c03deff0c424e049fb580d", "filename": "tests/ui/search_is_some_fixable_none.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.fixed?ref=65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::explicit_auto_deref)]\n #![warn(clippy::search_is_some)]\n \n fn main() {"}, {"sha": "310d87333a93c4270f8becf2466705c70208a6bf", "filename": "tests/ui/search_is_some_fixable_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.rs?ref=65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::explicit_auto_deref)]\n #![warn(clippy::search_is_some)]\n \n fn main() {"}, {"sha": "5a2aee465d1bdee6d95cd79f1763aef9b73e4300", "filename": "tests/ui/search_is_some_fixable_some.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.fixed?ref=65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::explicit_auto_deref)]\n #![warn(clippy::search_is_some)]\n \n fn main() {"}, {"sha": "0e98ae18a217cb840dad5c974c1b221488c64b14", "filename": "tests/ui/search_is_some_fixable_some.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc6cb8bf1f1005ae02a0044f0f3027c702a807/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.rs?ref=65bc6cb8bf1f1005ae02a0044f0f3027c702a807", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::explicit_auto_deref)]\n #![warn(clippy::search_is_some)]\n \n fn main() {"}]}