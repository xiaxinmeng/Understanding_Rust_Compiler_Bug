{"sha": "a7db5051d14994474c641328333884aeba70ca25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZGI1MDUxZDE0OTk0NDc0YzY0MTMyODMzMzg4NGFlYmE3MGNhMjU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-09T14:08:31Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-15T16:50:11Z"}, "message": "Treat NodeIs as pure values for incremental compilation", "tree": {"sha": "2a7dfe8c540b58bcc1b2bd5fbc4f3a74b33feca2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a7dfe8c540b58bcc1b2bd5fbc4f3a74b33feca2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7db5051d14994474c641328333884aeba70ca25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7db5051d14994474c641328333884aeba70ca25", "html_url": "https://github.com/rust-lang/rust/commit/a7db5051d14994474c641328333884aeba70ca25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7db5051d14994474c641328333884aeba70ca25/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "html_url": "https://github.com/rust-lang/rust/commit/dbef35309d10bed2f09cd55b3e9ea980a58c62aa"}], "stats": {"total": 49, "additions": 6, "deletions": 43}, "files": [{"sha": "e0e8470fe4730f7b240802d50bedf2891959e724", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7db5051d14994474c641328333884aeba70ca25/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7db5051d14994474c641328333884aeba70ca25/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=a7db5051d14994474c641328333884aeba70ca25", "patch": "@@ -219,28 +219,12 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::HirId {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for ast::NodeId {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        match hcx.node_id_hashing_mode {\n-            NodeIdHashingMode::Ignore => {\n-                // Don't do anything.\n-            }\n-            NodeIdHashingMode::HashDefPath => {\n-                hcx.definitions.node_to_hir_id(*self).hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n impl<'a> ToStableHashKey<StableHashingContext<'a>> for ast::NodeId {\n-    type KeyType = (DefPathHash, hir::ItemLocalId);\n+    type KeyType = Self;\n \n     #[inline]\n-    fn to_stable_hash_key(\n-        &self,\n-        hcx: &StableHashingContext<'a>,\n-    ) -> (DefPathHash, hir::ItemLocalId) {\n-        hcx.definitions.node_to_hir_id(*self).to_stable_hash_key(hcx)\n+    fn to_stable_hash_key(&self, _: &StableHashingContext<'a>) -> Self {\n+        *self\n     }\n }\n "}, {"sha": "45d95e97a9cf06480eae036686e205f6e871a5c2", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a7db5051d14994474c641328333884aeba70ca25/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7db5051d14994474c641328333884aeba70ca25/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=a7db5051d14994474c641328333884aeba70ca25", "patch": "@@ -22,7 +22,7 @@ use rustc_span::hygiene::{ExpnId, SyntaxContext};\n use rustc_span::source_map::{SourceMap, StableSourceFileId};\n use rustc_span::{BytePos, SourceFile, Span, DUMMY_SP};\n use std::mem;\n-use syntax::ast::{Ident, NodeId};\n+use syntax::ast::Ident;\n \n const TAG_FILE_FOOTER: u128 = 0xC0FFEE_C0FFEE_C0FFEE_C0FFEE_C0FFEE;\n \n@@ -680,16 +680,6 @@ impl<'a, 'tcx> SpecializedDecoder<hir::HirId> for CacheDecoder<'a, 'tcx> {\n     }\n }\n \n-// `NodeId`s are not stable across compilation sessions, so we store them in their\n-// `HirId` representation. This allows use to map them to the current `NodeId`.\n-impl<'a, 'tcx> SpecializedDecoder<NodeId> for CacheDecoder<'a, 'tcx> {\n-    #[inline]\n-    fn specialized_decode(&mut self) -> Result<NodeId, Self::Error> {\n-        let hir_id = hir::HirId::decode(self)?;\n-        Ok(self.tcx().hir().hir_to_node_id(hir_id))\n-    }\n-}\n-\n impl<'a, 'tcx> SpecializedDecoder<Fingerprint> for CacheDecoder<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Fingerprint, Self::Error> {\n         Fingerprint::decode_opaque(&mut self.opaque)\n@@ -928,19 +918,6 @@ where\n     }\n }\n \n-// `NodeId`s are not stable across compilation sessions, so we store them in their\n-// `HirId` representation. This allows use to map them to the current `NodeId`.\n-impl<'a, 'tcx, E> SpecializedEncoder<NodeId> for CacheEncoder<'a, 'tcx, E>\n-where\n-    E: 'a + TyEncoder,\n-{\n-    #[inline]\n-    fn specialized_encode(&mut self, node_id: &NodeId) -> Result<(), Self::Error> {\n-        let hir_id = self.tcx.hir().node_to_hir_id(*node_id);\n-        hir_id.encode(self)\n-    }\n-}\n-\n impl<'a, 'tcx> SpecializedEncoder<Fingerprint> for CacheEncoder<'a, 'tcx, opaque::Encoder> {\n     fn specialized_encode(&mut self, f: &Fingerprint) -> Result<(), Self::Error> {\n         f.encode_opaque(&mut self.encoder)"}, {"sha": "430d8f30421ef2bb8128873878a3b374c45b9658", "filename": "src/libsyntax/node_id.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7db5051d14994474c641328333884aeba70ca25/src%2Flibsyntax%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7db5051d14994474c641328333884aeba70ca25/src%2Flibsyntax%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fnode_id.rs?ref=a7db5051d14994474c641328333884aeba70ca25", "patch": "@@ -1,8 +1,10 @@\n+use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decoder, Encoder};\n use rustc_span::ExpnId;\n use std::fmt;\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable_Generic)]\n     pub struct NodeId {\n         ENCODABLE = custom\n         DEBUG_FORMAT = \"NodeId({})\""}]}