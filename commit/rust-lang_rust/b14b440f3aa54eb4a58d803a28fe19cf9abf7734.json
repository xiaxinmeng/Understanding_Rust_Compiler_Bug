{"sha": "b14b440f3aa54eb4a58d803a28fe19cf9abf7734", "node_id": "C_kwDOAAsO6NoAKGIxNGI0NDBmM2FhNTRlYjRhNThkODAzYTI4ZmUxOWNmOWFiZjc3MzQ", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-06-30T21:19:01Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-07-06T19:24:53Z"}, "message": "Format", "tree": {"sha": "df44699d6c326134d8929812e06d5b495f656b30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df44699d6c326134d8929812e06d5b495f656b30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b14b440f3aa54eb4a58d803a28fe19cf9abf7734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b14b440f3aa54eb4a58d803a28fe19cf9abf7734", "html_url": "https://github.com/rust-lang/rust/commit/b14b440f3aa54eb4a58d803a28fe19cf9abf7734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b14b440f3aa54eb4a58d803a28fe19cf9abf7734/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fea51f391ed91c487dda81d50389474b768441c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fea51f391ed91c487dda81d50389474b768441c7", "html_url": "https://github.com/rust-lang/rust/commit/fea51f391ed91c487dda81d50389474b768441c7"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "4937e475944cd427efbeb718023fd59825ccd577", "filename": "src/attributes.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b14b440f3aa54eb4a58d803a28fe19cf9abf7734/src%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b440f3aa54eb4a58d803a28fe19cf9abf7734/src%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattributes.rs?ref=b14b440f3aa54eb4a58d803a28fe19cf9abf7734", "patch": "@@ -13,15 +13,12 @@ use crate::context::CodegenCx;\n \n // Given a map from target_features to whether they are enabled or disabled,\n // ensure only valid combinations are allowed.\n-pub fn check_tied_features(\n-    sess: &Session,\n-    features: &FxHashMap<&str, bool>,\n-) -> Option<&'static [&'static str]> {\n+pub fn check_tied_features(sess: &Session, features: &FxHashMap<&str, bool>) -> Option<&'static [&'static str]> {\n     for tied in tied_target_features(sess) {\n         // Tied features must be set to the same value, or not set at all\n         let mut tied_iter = tied.iter();\n         let enabled = features.get(tied_iter.next().unwrap());\n-        if tied_iter.any(|f| enabled != features.get(f)) {\n+        if tied_iter.any(|feature| enabled != features.get(feature)) {\n             return Some(tied);\n         }\n     }\n@@ -81,16 +78,13 @@ pub fn from_fn_attrs<'gcc, 'tcx>(\n     let codegen_fn_attrs = cx.tcx.codegen_fn_attrs(instance.def_id());\n \n     let function_features =\n-        codegen_fn_attrs.target_features.iter().map(|f| f.as_str()).collect::<Vec<&str>>();\n+        codegen_fn_attrs.target_features.iter().map(|features| features.as_str()).collect::<Vec<&str>>();\n \n-    if let Some(f) = check_tied_features(cx.tcx.sess, &function_features.iter().map(|f| (*f, true)).collect()) {\n+    if let Some(features) = check_tied_features(cx.tcx.sess, &function_features.iter().map(|features| (*features, true)).collect()) {\n         let span = cx.tcx\n             .get_attr(instance.def_id(), sym::target_feature)\n             .map_or_else(|| cx.tcx.def_span(instance.def_id()), |a| a.span);\n-        let msg = format!(\n-            \"the target features {} must all be either enabled or disabled together\",\n-            f.join(\", \")\n-        );\n+        let msg = format!(\"the target features {} must all be either enabled or disabled together\", features.join(\", \"));\n         let mut err = cx.tcx.sess.struct_span_err(span, &msg);\n         err.help(\"add the missing features in a `target_feature` attribute\");\n         err.emit();"}]}