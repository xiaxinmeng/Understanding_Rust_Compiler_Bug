{"sha": "58e0889bf58672da36673982de510045557de2c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZTA4ODliZjU4NjcyZGEzNjY3Mzk4MmRlNTEwMDQ1NTU3ZGUyYzk=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-08T16:09:29Z"}, "committer": {"name": "Mara Bos", "email": "mara@uhura.edef.eu", "date": "2021-06-08T16:31:50Z"}, "message": "Simplify proc_macro code using Bound::cloned().", "tree": {"sha": "b3785fa96e004e41433ca44207fde462083c17a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3785fa96e004e41433ca44207fde462083c17a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e0889bf58672da36673982de510045557de2c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e0889bf58672da36673982de510045557de2c9", "html_url": "https://github.com/rust-lang/rust/commit/58e0889bf58672da36673982de510045557de2c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e0889bf58672da36673982de510045557de2c9/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc9610bf5af1d5c54968db0dd899595ca12307a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9610bf5af1d5c54968db0dd899595ca12307a0", "html_url": "https://github.com/rust-lang/rust/commit/cc9610bf5af1d5c54968db0dd899595ca12307a0"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "26fbf50e2dfdf903f940495dc28a30d3adddc774", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/58e0889bf58672da36673982de510045557de2c9/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e0889bf58672da36673982de510045557de2c9/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=58e0889bf58672da36673982de510045557de2c9", "patch": "@@ -31,6 +31,7 @@\n #![feature(restricted_std)]\n #![feature(rustc_attrs)]\n #![feature(min_specialization)]\n+#![feature(bound_cloned)]\n #![recursion_limit = \"256\"]\n \n #[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n@@ -43,7 +44,7 @@ mod diagnostic;\n pub use diagnostic::{Diagnostic, Level, MultiSpan};\n \n use std::cmp::Ordering;\n-use std::ops::{Bound, RangeBounds};\n+use std::ops::RangeBounds;\n use std::path::PathBuf;\n use std::str::FromStr;\n use std::{error, fmt, iter, mem};\n@@ -1162,16 +1163,7 @@ impl Literal {\n     // was 'c' or whether it was '\\u{63}'.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn subspan<R: RangeBounds<usize>>(&self, range: R) -> Option<Span> {\n-        // HACK(eddyb) something akin to `Option::cloned`, but for `Bound<&T>`.\n-        fn cloned_bound<T: Clone>(bound: Bound<&T>) -> Bound<T> {\n-            match bound {\n-                Bound::Included(x) => Bound::Included(x.clone()),\n-                Bound::Excluded(x) => Bound::Excluded(x.clone()),\n-                Bound::Unbounded => Bound::Unbounded,\n-            }\n-        }\n-\n-        self.0.subspan(cloned_bound(range.start_bound()), cloned_bound(range.end_bound())).map(Span)\n+        self.0.subspan(range.start_bound().cloned(), range.end_bound().cloned()).map(Span)\n     }\n }\n "}]}