{"sha": "e041c20eed3eecc1f29468c19877d7a05ac576bc", "node_id": "C_kwDOAAsO6NoAKGUwNDFjMjBlZWQzZWVjYzFmMjk0NjhjMTk4NzdkN2EwNWFjNTc2YmM", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-08-07T01:51:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-07T01:51:58Z"}, "message": "Merge pull request #5487 from calebcartwright/subtree-sync-2022-08-06\n\nSync subtree", "tree": {"sha": "cc2fd5becc27560fd3460bbec8abcd2e88c88191", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc2fd5becc27560fd3460bbec8abcd2e88c88191"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e041c20eed3eecc1f29468c19877d7a05ac576bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi7xq+CRBK7hj4Ov3rIwAAHRkIAGqydzKbDo36GNurUf8zDmsL\nfjXUwG9Nje4dPLs02exk2rcBmpYM9kqLJXJCH8Lb0gG1CSU0FjaUab6Z+rmc7Pxh\nXK0UiTRQ/GJUshzgsOf42NlxxWwD1yLdzqpvjQUC/Vv+0LAYQ/UDXgGNn1NPD4FK\nOyrxVbeLMcJJvK36DSvfRvzRhXNEB0pM+M0GQcWDKaUptpdVnp4i9ueM3UNcVmM6\n5wFtq/V/sas3BMmccZPF1VryWlTRN/d/ze5Jf6IjnomluAMMyfcZLVWZvxeDUfuA\n/YCejvy3Amed4Mjy+eI9mDk4gfrnwqKIG3X2R8Qvrl+ynLafqOeq8k+E2susF/8=\n=DcMz\n-----END PGP SIGNATURE-----\n", "payload": "tree cc2fd5becc27560fd3460bbec8abcd2e88c88191\nparent 662702eb54b12f16729d6559ce0478b00ef153a8\nparent c78ef92add17c545c387bee12428d3dd51d90003\nauthor Caleb Cartwright <calebcartwright@users.noreply.github.com> 1659837118 -0500\ncommitter GitHub <noreply@github.com> 1659837118 -0500\n\nMerge pull request #5487 from calebcartwright/subtree-sync-2022-08-06\n\nSync subtree"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e041c20eed3eecc1f29468c19877d7a05ac576bc", "html_url": "https://github.com/rust-lang/rust/commit/e041c20eed3eecc1f29468c19877d7a05ac576bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e041c20eed3eecc1f29468c19877d7a05ac576bc/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "662702eb54b12f16729d6559ce0478b00ef153a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/662702eb54b12f16729d6559ce0478b00ef153a8", "html_url": "https://github.com/rust-lang/rust/commit/662702eb54b12f16729d6559ce0478b00ef153a8"}, {"sha": "c78ef92add17c545c387bee12428d3dd51d90003", "url": "https://api.github.com/repos/rust-lang/rust/commits/c78ef92add17c545c387bee12428d3dd51d90003", "html_url": "https://github.com/rust-lang/rust/commit/c78ef92add17c545c387bee12428d3dd51d90003"}], "stats": {"total": 179, "additions": 124, "deletions": 55}, "files": [{"sha": "f8ed76d2e6f9edac645141113e7e50d135282b9b", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e041c20eed3eecc1f29468c19877d7a05ac576bc/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/e041c20eed3eecc1f29468c19877d7a05ac576bc/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=e041c20eed3eecc1f29468c19877d7a05ac576bc", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-21\"\n+channel = \"nightly-2022-08-06\"\n components = [\"rustc-dev\"]"}, {"sha": "88a6bebb68c84157ecd08400e7b116483bae8518", "filename": "src/closures.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=e041c20eed3eecc1f29468c19877d7a05ac576bc", "patch": "@@ -11,6 +11,7 @@ use crate::overflow::OverflowableItem;\n use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::Shape;\n use crate::source_map::SpanUtils;\n+use crate::types::rewrite_lifetime_param;\n use crate::utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n \n // This module is pretty messy because of the rules around closures and blocks:\n@@ -24,6 +25,7 @@ use crate::utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n //     can change whether it is treated as an expression or statement.\n \n pub(crate) fn rewrite_closure(\n+    binder: &ast::ClosureBinder,\n     capture: ast::CaptureBy,\n     is_async: &ast::Async,\n     movability: ast::Movability,\n@@ -36,7 +38,7 @@ pub(crate) fn rewrite_closure(\n     debug!(\"rewrite_closure {:?}\", body);\n \n     let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-        capture, is_async, movability, fn_decl, body, span, context, shape,\n+        binder, capture, is_async, movability, fn_decl, body, span, context, shape,\n     )?;\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n@@ -227,6 +229,7 @@ fn rewrite_closure_block(\n \n // Return type is (prefix, extra_offset)\n fn rewrite_closure_fn_decl(\n+    binder: &ast::ClosureBinder,\n     capture: ast::CaptureBy,\n     asyncness: &ast::Async,\n     movability: ast::Movability,\n@@ -236,6 +239,17 @@ fn rewrite_closure_fn_decl(\n     context: &RewriteContext<'_>,\n     shape: Shape,\n ) -> Option<(String, usize)> {\n+    let binder = match binder {\n+        ast::ClosureBinder::For { generic_params, .. } if generic_params.is_empty() => {\n+            \"for<> \".to_owned()\n+        }\n+        ast::ClosureBinder::For { generic_params, .. } => {\n+            let lifetime_str = rewrite_lifetime_param(context, shape, generic_params)?;\n+            format!(\"for<{lifetime_str}> \")\n+        }\n+        ast::ClosureBinder::NotPresent => \"\".to_owned(),\n+    };\n+\n     let immovable = if movability == ast::Movability::Static {\n         \"static \"\n     } else {\n@@ -250,7 +264,7 @@ fn rewrite_closure_fn_decl(\n     // 4 = \"|| {\".len(), which is overconservative when the closure consists of\n     // a single expression.\n     let nested_shape = shape\n-        .shrink_left(immovable.len() + is_async.len() + mover.len())?\n+        .shrink_left(binder.len() + immovable.len() + is_async.len() + mover.len())?\n         .sub_width(4)?;\n \n     // 1 = |\n@@ -288,7 +302,7 @@ fn rewrite_closure_fn_decl(\n         .tactic(tactic)\n         .preserve_newline(true);\n     let list_str = write_list(&item_vec, &fmt)?;\n-    let mut prefix = format!(\"{}{}{}|{}|\", immovable, is_async, mover, list_str);\n+    let mut prefix = format!(\"{}{}{}{}|{}|\", binder, immovable, is_async, mover, list_str);\n \n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n@@ -312,8 +326,15 @@ pub(crate) fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(capture, ref is_async, movability, ref fn_decl, ref body, _) =\n-        expr.kind\n+    if let ast::ExprKind::Closure(\n+        ref binder,\n+        capture,\n+        ref is_async,\n+        movability,\n+        ref fn_decl,\n+        ref body,\n+        _,\n+    ) = expr.kind\n     {\n         let body = match body.kind {\n             ast::ExprKind::Block(ref block, _)\n@@ -326,7 +347,7 @@ pub(crate) fn rewrite_last_closure(\n             _ => body,\n         };\n         let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-            capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n         )?;\n         // If the closure goes multi line before its body, do not overflow the closure.\n         if prefix.contains('\\n') {"}, {"sha": "14f27f3f8b692ba14c47c5be138880a625ae5009", "filename": "src/config/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=e041c20eed3eecc1f29468c19877d7a05ac576bc", "patch": "@@ -20,9 +20,11 @@ pub use crate::config::options::*;\n #[macro_use]\n pub(crate) mod config_type;\n #[macro_use]\n+#[allow(unreachable_pub)]\n pub(crate) mod options;\n \n pub(crate) mod file_lines;\n+#[allow(unreachable_pub)]\n pub(crate) mod lists;\n pub(crate) mod macro_names;\n \n@@ -420,7 +422,7 @@ mod test {\n         use rustfmt_config_proc_macro::config_type;\n \n         #[config_type]\n-        pub enum PartiallyUnstableOption {\n+        pub(crate) enum PartiallyUnstableOption {\n             V1,\n             V2,\n             #[unstable_variant]"}, {"sha": "c9d704765c2e961768edec783ec2075f33c8b1b6", "filename": "src/expr.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=e041c20eed3eecc1f29468c19877d7a05ac576bc", "patch": "@@ -203,11 +203,17 @@ pub(crate) fn format_expr(\n                 Some(\"yield\".to_string())\n             }\n         }\n-        ast::ExprKind::Closure(capture, ref is_async, movability, ref fn_decl, ref body, _) => {\n-            closures::rewrite_closure(\n-                capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n-            )\n-        }\n+        ast::ExprKind::Closure(\n+            ref binder,\n+            capture,\n+            ref is_async,\n+            movability,\n+            ref fn_decl,\n+            ref body,\n+            _,\n+        ) => closures::rewrite_closure(\n+            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+        ),\n         ast::ExprKind::Try(..)\n         | ast::ExprKind::Field(..)\n         | ast::ExprKind::MethodCall(..)"}, {"sha": "755a41f6bf0cdbbaf5c7640c90bbf449bbce09b9", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=e041c20eed3eecc1f29468c19877d7a05ac576bc", "patch": "@@ -148,7 +148,7 @@ impl<'a> Item<'a> {\n         Item {\n             unsafety: fm.unsafety,\n             abi: format_extern(\n-                ast::Extern::from_abi(fm.abi),\n+                ast::Extern::from_abi(fm.abi, DUMMY_SP),\n                 config.force_explicit_abi(),\n                 true,\n             ),"}, {"sha": "1bcb7774c9456d5242f9fef807ba208033bae803", "filename": "src/macros.rs", "status": "modified", "additions": 61, "deletions": 37, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=e041c20eed3eecc1f29468c19877d7a05ac576bc", "patch": "@@ -13,7 +13,7 @@ use std::collections::HashMap;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n use rustc_ast::token::{BinOpToken, Delimiter, Token, TokenKind};\n-use rustc_ast::tokenstream::{Cursor, Spacing, TokenStream, TokenTree};\n+use rustc_ast::tokenstream::{Cursor, TokenStream, TokenTree};\n use rustc_ast::{ast, ptr};\n use rustc_ast_pretty::pprust;\n use rustc_span::{\n@@ -683,7 +683,7 @@ struct MacroArgParser {\n \n fn last_tok(tt: &TokenTree) -> Token {\n     match *tt {\n-        TokenTree::Token(ref t) => t.clone(),\n+        TokenTree::Token(ref t, _) => t.clone(),\n         TokenTree::Delimited(delim_span, delim, _) => Token {\n             kind: TokenKind::CloseDelim(delim),\n             span: delim_span.close,\n@@ -738,10 +738,13 @@ impl MacroArgParser {\n \n     fn add_meta_variable(&mut self, iter: &mut Cursor) -> Option<()> {\n         match iter.next() {\n-            Some(TokenTree::Token(Token {\n-                kind: TokenKind::Ident(name, _),\n-                ..\n-            })) => {\n+            Some(TokenTree::Token(\n+                Token {\n+                    kind: TokenKind::Ident(name, _),\n+                    ..\n+                },\n+                _,\n+            )) => {\n                 self.result.push(ParsedMacroArg {\n                     kind: MacroArgKind::MetaVariable(name, self.buf.clone()),\n                 });\n@@ -778,21 +781,30 @@ impl MacroArgParser {\n             }\n \n             match tok {\n-                TokenTree::Token(Token {\n-                    kind: TokenKind::BinOp(BinOpToken::Plus),\n-                    ..\n-                })\n-                | TokenTree::Token(Token {\n-                    kind: TokenKind::Question,\n-                    ..\n-                })\n-                | TokenTree::Token(Token {\n-                    kind: TokenKind::BinOp(BinOpToken::Star),\n-                    ..\n-                }) => {\n+                TokenTree::Token(\n+                    Token {\n+                        kind: TokenKind::BinOp(BinOpToken::Plus),\n+                        ..\n+                    },\n+                    _,\n+                )\n+                | TokenTree::Token(\n+                    Token {\n+                        kind: TokenKind::Question,\n+                        ..\n+                    },\n+                    _,\n+                )\n+                | TokenTree::Token(\n+                    Token {\n+                        kind: TokenKind::BinOp(BinOpToken::Star),\n+                        ..\n+                    },\n+                    _,\n+                ) => {\n                     break;\n                 }\n-                TokenTree::Token(ref t) => {\n+                TokenTree::Token(ref t, _) => {\n                     buffer.push_str(&pprust::token_to_string(t));\n                 }\n                 _ => return None,\n@@ -860,10 +872,13 @@ impl MacroArgParser {\n \n         while let Some(tok) = iter.next() {\n             match tok {\n-                TokenTree::Token(Token {\n-                    kind: TokenKind::Dollar,\n-                    span,\n-                }) => {\n+                TokenTree::Token(\n+                    Token {\n+                        kind: TokenKind::Dollar,\n+                        span,\n+                    },\n+                    _,\n+                ) => {\n                     // We always want to add a separator before meta variables.\n                     if !self.buf.is_empty() {\n                         self.add_separator();\n@@ -876,13 +891,16 @@ impl MacroArgParser {\n                         span,\n                     };\n                 }\n-                TokenTree::Token(Token {\n-                    kind: TokenKind::Colon,\n-                    ..\n-                }) if self.is_meta_var => {\n+                TokenTree::Token(\n+                    Token {\n+                        kind: TokenKind::Colon,\n+                        ..\n+                    },\n+                    _,\n+                ) if self.is_meta_var => {\n                     self.add_meta_variable(&mut iter)?;\n                 }\n-                TokenTree::Token(ref t) => self.update_buffer(t),\n+                TokenTree::Token(ref t, _) => self.update_buffer(t),\n                 TokenTree::Delimited(_delimited_span, delimited, ref tts) => {\n                     if !self.buf.is_empty() {\n                         if next_space(&self.last_tok.kind) == SpaceState::Always {\n@@ -1124,12 +1142,15 @@ impl MacroParser {\n             TokenTree::Token(..) => return None,\n             TokenTree::Delimited(delimited_span, d, _) => (delimited_span.open.lo(), d),\n         };\n-        let args = TokenStream::new(vec![(tok, Spacing::Joint)]);\n+        let args = TokenStream::new(vec![tok]);\n         match self.toks.next()? {\n-            TokenTree::Token(Token {\n-                kind: TokenKind::FatArrow,\n-                ..\n-            }) => {}\n+            TokenTree::Token(\n+                Token {\n+                    kind: TokenKind::FatArrow,\n+                    ..\n+                },\n+                _,\n+            ) => {}\n             _ => return None,\n         }\n         let (mut hi, body, whole_body) = match self.toks.next()? {\n@@ -1148,10 +1169,13 @@ impl MacroParser {\n                 )\n             }\n         };\n-        if let Some(TokenTree::Token(Token {\n-            kind: TokenKind::Semi,\n-            span,\n-        })) = self.toks.look_ahead(0)\n+        if let Some(TokenTree::Token(\n+            Token {\n+                kind: TokenKind::Semi,\n+                span,\n+            },\n+            _,\n+        )) = self.toks.look_ahead(0)\n         {\n             hi = span.hi();\n             self.toks.next();"}, {"sha": "2627886db109d7fc5aa0547f394a6b5f2d9c0a8b", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=e041c20eed3eecc1f29468c19877d7a05ac576bc", "patch": "@@ -1067,7 +1067,7 @@ pub(crate) fn can_be_overflowed_type(\n }\n \n /// Returns `None` if there is no `LifetimeDef` in the given generic parameters.\n-fn rewrite_lifetime_param(\n+pub(crate) fn rewrite_lifetime_param(\n     context: &RewriteContext<'_>,\n     shape: Shape,\n     generic_params: &[ast::GenericParam],"}, {"sha": "a97bcba0bd2a6bce8d429dca7be5f3361fe3196a", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e041c20eed3eecc1f29468c19877d7a05ac576bc/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=e041c20eed3eecc1f29468c19877d7a05ac576bc", "patch": "@@ -138,8 +138,8 @@ pub(crate) fn format_extern(\n ) -> Cow<'static, str> {\n     let abi = match ext {\n         ast::Extern::None => \"Rust\".to_owned(),\n-        ast::Extern::Implicit => \"C\".to_owned(),\n-        ast::Extern::Explicit(abi) => abi.symbol_unescaped.to_string(),\n+        ast::Extern::Implicit(_) => \"C\".to_owned(),\n+        ast::Extern::Explicit(abi, _) => abi.symbol_unescaped.to_string(),\n     };\n \n     if abi == \"Rust\" && !is_mod {\n@@ -480,7 +480,7 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Binary(_, _, ref expr)\n         | ast::ExprKind::Index(_, ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n-        | ast::ExprKind::Closure(_, _, _, _, ref expr, _)\n+        | ast::ExprKind::Closure(_, _, _, _, _, ref expr, _)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Yield(Some(ref expr)) => is_block_expr(context, expr, repr),\n         // This can only be a string lit"}, {"sha": "b2d28b305d0ade1791099fcd95b3c6ff4938c8b1", "filename": "tests/source/closure.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e041c20eed3eecc1f29468c19877d7a05ac576bc/tests%2Fsource%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e041c20eed3eecc1f29468c19877d7a05ac576bc/tests%2Fsource%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fclosure.rs?ref=e041c20eed3eecc1f29468c19877d7a05ac576bc", "patch": "@@ -51,6 +51,16 @@ fn main() {\n                 \"--emit=dep-info\"\n             } else { a }\n         });\n+\n+    for<>          || -> () {};\n+    for<         >|| -> () {};\n+    for<\n+>   || -> () {};\n+\n+for<   'a\n+   ,'b,\n+'c  >   |_: &'a (), _: &'b (), _: &'c ()| -> () {};\n+\n }\n \n fn issue311() {"}, {"sha": "e8b4ff7a96bb8c004bd7011c663a0051041f87dc", "filename": "tests/target/closure.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e041c20eed3eecc1f29468c19877d7a05ac576bc/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e041c20eed3eecc1f29468c19877d7a05ac576bc/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=e041c20eed3eecc1f29468c19877d7a05ac576bc", "patch": "@@ -71,6 +71,12 @@ fn main() {\n             a\n         }\n     });\n+\n+    for<> || -> () {};\n+    for<> || -> () {};\n+    for<> || -> () {};\n+\n+    for<'a, 'b, 'c> |_: &'a (), _: &'b (), _: &'c ()| -> () {};\n }\n \n fn issue311() {"}]}