{"sha": "f2352f406221914396de0894e1d94a395cfd583d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMzUyZjQwNjIyMTkxNDM5NmRlMDg5NGUxZDk0YTM5NWNmZDU4M2Q=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-11T16:11:56Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-11T16:12:11Z"}, "message": "Fix regression in resolving of external impls", "tree": {"sha": "db268b058f45f38174a90b61c4eca1c69c2e051a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db268b058f45f38174a90b61c4eca1c69c2e051a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2352f406221914396de0894e1d94a395cfd583d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2352f406221914396de0894e1d94a395cfd583d", "html_url": "https://github.com/rust-lang/rust/commit/f2352f406221914396de0894e1d94a395cfd583d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2352f406221914396de0894e1d94a395cfd583d/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87253cf3a91994aac5a9e679ae17cfcad1ed0fcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf", "html_url": "https://github.com/rust-lang/rust/commit/87253cf3a91994aac5a9e679ae17cfcad1ed0fcf"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "37dd5f4965ff88d8fa313c9c4adb109a5f198958", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2352f406221914396de0894e1d94a395cfd583d/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2352f406221914396de0894e1d94a395cfd583d/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=f2352f406221914396de0894e1d94a395cfd583d", "patch": "@@ -273,13 +273,13 @@ fn get_tag_variants(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     ret infos;\n }\n \n-fn item_impl_methods(data: @[u8], item: ebml::doc, base_tps: uint)\n+fn item_impl_methods(cdata: cmd, item: ebml::doc, base_tps: uint)\n     -> [@middle::resolve::method_info] {\n     let rslt = [];\n     ebml::tagged_docs(item, tag_item_method) {|doc|\n         let m_did = parse_def_id(ebml::doc_data(doc));\n-        let mth_item = lookup_item(m_did.node, data);\n-        rslt += [@{did: m_did,\n+        let mth_item = lookup_item(m_did.node, cdata.data);\n+        rslt += [@{did: translate_def_id(cdata, m_did),\n                    n_tps: item_ty_param_count(mth_item) - base_tps,\n                    ident: item_name(mth_item)}];\n     }\n@@ -298,7 +298,7 @@ fn get_impls_for_mod(cdata: cmd, m_id: ast::node_id,\n             let base_tps = item_ty_param_count(doc);\n             let i_did = item_impl_iface_did(item, cdata);\n             result += [@{did: did, iface_did: i_did, ident: nm,\n-                         methods: item_impl_methods(data, doc, base_tps)}];\n+                         methods: item_impl_methods(cdata, item, base_tps)}];\n         }\n     }\n     @result"}, {"sha": "12329264995199308714c14d89c63d7bcd500ed8", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2352f406221914396de0894e1d94a395cfd583d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2352f406221914396de0894e1d94a395cfd583d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=f2352f406221914396de0894e1d94a395cfd583d", "patch": "@@ -1922,19 +1922,22 @@ fn find_impls_in_mod(e: env, m: def, &impls: [@_impl],\n             cached = if defid.crate == ast::local_crate {\n                 let tmp = [];\n                 for i in option::get(e.mod_map.get(defid.node).m).items {\n-                    find_impls_in_item(e, i, tmp, name, none);\n+                    find_impls_in_item(e, i, tmp, none, none);\n                 }\n                 @tmp\n             } else {\n-                csearch::get_impls_for_mod(e.sess.get_cstore(), defid, name)\n+                csearch::get_impls_for_mod(e.sess.get_cstore(), defid, none)\n             };\n             e.impl_cache.insert(defid, cached);\n           }\n         }\n-        for im in *cached {\n-            if alt name { some(n) { n == im.ident } _ { true } } {\n-                impls += [im];\n+        alt name {\n+          some(n) {\n+            for im in *cached {\n+                if n == im.ident { impls += [im]; }\n             }\n+          }\n+          _ { impls += *cached; }\n         }\n       }\n       _ {}"}]}