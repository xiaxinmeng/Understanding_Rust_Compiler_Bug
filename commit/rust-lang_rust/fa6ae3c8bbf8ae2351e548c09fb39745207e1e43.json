{"sha": "fa6ae3c8bbf8ae2351e548c09fb39745207e1e43", "node_id": "C_kwDOAAsO6NoAKGZhNmFlM2M4YmJmOGFlMjM1MWU1NDhjMDlmYjM5NzQ1MjA3ZTFlNDM", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-01-23T01:22:09Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-01-26T18:53:36Z"}, "message": "Cleanup", "tree": {"sha": "6675578d8690efdb5e15d81ad725332f5e145570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6675578d8690efdb5e15d81ad725332f5e145570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43", "html_url": "https://github.com/rust-lang/rust/commit/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5ced68a6688016e06464cf6dc942e5bf8f4620b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5ced68a6688016e06464cf6dc942e5bf8f4620b", "html_url": "https://github.com/rust-lang/rust/commit/f5ced68a6688016e06464cf6dc942e5bf8f4620b"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "b473f79a526b83335eaffd226b97202fd66c8a8e", "filename": "Readme.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=fa6ae3c8bbf8ae2351e548c09fb39745207e1e43", "patch": "@@ -172,15 +172,15 @@ debug_gimple_stmt(gimple_struct)\n \n To get the `rustc` command to run in `gdb`, add the `--verbose` flag to `cargo build`.\n \n-To have the correct file paths in `gdb` instead of `/usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_personality.cc`, TODO\n+To have the correct file paths in `gdb` instead of `/usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_personality.cc`:\n \n Maybe by calling the following at the beginning of gdb:\n \n ```\n set substitute-path /usr/src/debug/gcc /path/to/gcc-repo/gcc\n ```\n \n-TODO: but that's not what I remember I was doing.\n+TODO(antoyo): but that's not what I remember I was doing.\n \n ### How to use a custom-build rustc\n "}, {"sha": "a51a7f1428e36ef1a76e94ff6e5e1a17b19b1c73", "filename": "failing-ui-tests.txt", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/failing-ui-tests.txt", "raw_url": "https://github.com/rust-lang/rust/raw/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/failing-ui-tests.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests.txt?ref=fa6ae3c8bbf8ae2351e548c09fb39745207e1e43", "patch": "@@ -13,7 +13,6 @@ src/test/ui/debuginfo/debuginfo-emit-llvm-ir-and-split-debuginfo.rs\n src/test/ui/functions-closures/parallel-codegen-closures.rs\n src/test/ui/linkage-attr/linkage1.rs\n src/test/ui/lto/dylib-works.rs\n-src/test/ui/macros/rfc-2011-nicer-assert-messages/assert-without-captures-does-not-create-unnecessary-code.rs\n src/test/ui/numbers-arithmetic/saturating-float-casts.rs\n src/test/ui/polymorphization/promoted-function.rs\n src/test/ui/process/nofile-limit.rs\n@@ -47,6 +46,18 @@ src/test/ui/oom_unwind.rs\n src/test/ui/panic-runtime/abort-link-to-unwinding-crates.rs\n src/test/ui/panic-runtime/abort.rs\n src/test/ui/panic-runtime/link-to-abort.rs\n+src/test/ui/unwind-no-uwtable.rs\n+src/test/ui/issues/issue-14875.rs\n+src/test/ui/issues/issue-29948.rs\n+src/test/ui/issues/issue-40883.rs\n+src/test/ui/issues/issue-43853.rs\n+src/test/ui/issues/issue-47364.rs\n+src/test/ui/simd/issue-17170.rs\n+src/test/ui/simd/issue-39720.rs\n+src/test/ui/simd/issue-85915-simd-ptrs.rs\n+src/test/ui/simd/issue-89193.rs\n+src/test/ui/statics/issue-91050-1.rs\n+src/test/ui/statics/issue-91050-2.rs\n+src/test/ui/macros/rfc-2011-nicer-assert-messages/assert-without-captures-does-not-create-unnecessary-code.rs\n src/test/ui/rfc-2091-track-caller/std-panic-locations.rs\n src/test/ui/rfcs/rfc1857-drop-order.rs\n-src/test/ui/unwind-no-uwtable.rs"}, {"sha": "22441efeee9f25b8bf542d35788e6b4cb2820b43", "filename": "failing-ui-tests12.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/failing-ui-tests12.txt", "raw_url": "https://github.com/rust-lang/rust/raw/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/failing-ui-tests12.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests12.txt?ref=fa6ae3c8bbf8ae2351e548c09fb39745207e1e43", "patch": "@@ -37,4 +37,3 @@ src/test/ui/cfg/cfg-panic.rs\n src/test/ui/generator/size-moved-locals.rs\n src/test/ui/macros/rfc-2011-nicer-assert-messages/all-not-available-cases.rs\n src/test/ui/runtime/rt-explody-panic-payloads.rs\n-src/test/ui/simd/issue-17170.rs"}, {"sha": "6ac1daeca5d9ff21901f5fb3cd3b20a79121517c", "filename": "src/builder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=fa6ae3c8bbf8ae2351e548c09fb39745207e1e43", "patch": "@@ -375,8 +375,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for Builder<'_, '_, 'tcx> {\n impl<'a, 'gcc, 'tcx> Deref for Builder<'a, 'gcc, 'tcx> {\n     type Target = CodegenCx<'gcc, 'tcx>;\n \n-    fn deref<'b>(&'b self) -> &'a Self::Target\n-    {\n+    fn deref<'b>(&'b self) -> &'a Self::Target {\n         self.cx\n     }\n }\n@@ -1216,7 +1215,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         let value = self.current_func().new_local(None, struct_type.as_type(), \"landing_pad\");\n         let ptr = self.cx.context.new_cast(None, ptr, field1_type);\n         self.block.add_assignment(None, value.access_field(None, field1), ptr);\n-        self.block.add_assignment(None, value.access_field(None, field2), zero); // TODO: set the proper value here (the type of exception?).\n+        self.block.add_assignment(None, value.access_field(None, field2), zero); // TODO(antoyo): set the proper value here (the type of exception?).\n \n         value.to_rvalue()\n     }\n@@ -1232,7 +1231,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n \n     #[cfg(feature=\"master\")]\n     fn resume(&mut self, exn: RValue<'gcc>) {\n-        // TODO: check if this is normal that we need to dereference the value.\n+        // TODO(antoyo): check if this is normal that we need to dereference the value.\n         // NOTE: the type is wrong, so in order to get a pointer for parameter, cast it to a\n         // pointer of pointer that is later dereferenced.\n         let exn_type = exn.get_type().make_pointer();"}, {"sha": "bc68340e7a072d69b8423b81e59cbfcea3a6c5db", "filename": "src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/src%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/src%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcallee.rs?ref=fa6ae3c8bbf8ae2351e548c09fb39745207e1e43", "patch": "@@ -30,7 +30,7 @@ pub fn get_fn<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, instance: Instance<'tcx>)\n \n     let func =\n         if let Some(_func) = cx.get_declared_value(&sym) {\n-            // FIXME: we never reach this because get_declared_value only returns global variables\n+            // FIXME(antoyo): we never reach this because get_declared_value only returns global variables\n             // and here we try to get a function.\n             unreachable!();\n             /*"}, {"sha": "07222c534401fec06a2b409acd22539d1e9fed00", "filename": "src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=fa6ae3c8bbf8ae2351e548c09fb39745207e1e43", "patch": "@@ -258,7 +258,6 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n \n     pub fn rvalue_as_function(&self, value: RValue<'gcc>) -> Function<'gcc> {\n         let function: Function<'gcc> = unsafe { std::mem::transmute(value) };\n-        // FIXME: seems like self.functions get overwritten for rust_eh_personality.\n         debug_assert!(self.functions.borrow().values().find(|value| **value == function).is_some(),\n             \"{:?} is not a function\", function);\n         function\n@@ -334,6 +333,7 @@ impl<'gcc, 'tcx> MiscMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     fn get_fn(&self, instance: Instance<'tcx>) -> RValue<'gcc> {\n         let func = get_fn(self, instance);\n         *self.current_func.borrow_mut() = Some(func);\n+        // FIXME(antoyo): this is a wrong cast. That requires changing the compiler API.\n         unsafe { std::mem::transmute(func) }\n     }\n "}, {"sha": "6ca171801159db3a53ad9c9745a8331ab17d36c5", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6ae3c8bbf8ae2351e548c09fb39745207e1e43/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=fa6ae3c8bbf8ae2351e548c09fb39745207e1e43", "patch": "@@ -1158,8 +1158,6 @@ fn try_intrinsic<'a, 'b, 'gcc, 'tcx>(bx: &'b mut Builder<'a, 'gcc, 'tcx>, try_fu\n // the right personality function.\n #[cfg(feature=\"master\")]\n fn codegen_gnu_try<'gcc>(bx: &mut Builder<'_, 'gcc, '_>, try_func: RValue<'gcc>, data: RValue<'gcc>, catch_func: RValue<'gcc>, dest: RValue<'gcc>) {\n-    //use std::ops::Deref;\n-    //let cx: &CodegenCx<'gcc, '_> = bx.deref();\n     let cx: &CodegenCx<'gcc, '_> = bx.cx;\n     let (llty, func) = get_rust_try_fn(cx, &mut |mut bx| {\n         // Codegens the shims described above:\n@@ -1204,7 +1202,7 @@ fn codegen_gnu_try<'gcc>(bx: &mut Builder<'_, 'gcc, '_>, try_func: RValue<'gcc>,\n \n         // NOTE: the blocks must be filled before adding the try/catch, otherwise gcc will not\n         // generate a try/catch.\n-        // FIXME: add a check in the libgccjit API to prevent this.\n+        // FIXME(antoyo): add a check in the libgccjit API to prevent this.\n         bx.switch_to_block(current_block);\n         bx.invoke(try_func_ty, try_func, &[data], then, catch, None);\n     });"}]}