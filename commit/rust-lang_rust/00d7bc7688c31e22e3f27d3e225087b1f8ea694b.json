{"sha": "00d7bc7688c31e22e3f27d3e225087b1f8ea694b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZDdiYzc2ODhjMzFlMjJlM2YyN2QzZTIyNTA4N2IxZjhlYTY5NGI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T17:44:23Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-11T14:36:46Z"}, "message": "Remove crate_name from DocContext\n\ntcx.crate_name is the appropriate way to retrieve the crate name.", "tree": {"sha": "12607fd2941e709feae4da6be7c790bd53e0440e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12607fd2941e709feae4da6be7c790bd53e0440e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00d7bc7688c31e22e3f27d3e225087b1f8ea694b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00d7bc7688c31e22e3f27d3e225087b1f8ea694b", "html_url": "https://github.com/rust-lang/rust/commit/00d7bc7688c31e22e3f27d3e225087b1f8ea694b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00d7bc7688c31e22e3f27d3e225087b1f8ea694b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55", "html_url": "https://github.com/rust-lang/rust/commit/19c85a8f8a3f82bfbc92f3ecd23167c0dbd66b55"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "884cdef3c771f8dabb1539940d777d2406ac72dd", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00d7bc7688c31e22e3f27d3e225087b1f8ea694b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d7bc7688c31e22e3f27d3e225087b1f8ea694b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=00d7bc7688c31e22e3f27d3e225087b1f8ea694b", "patch": "@@ -163,10 +163,7 @@ pub fn load_attrs<'hir>(cx: &DocContext<'hir>, did: DefId) -> Attrs<'hir> {\n /// These names are used later on by HTML rendering to generate things like\n /// source links back to the original item.\n pub fn record_extern_fqn(cx: &DocContext<'_>, did: DefId, kind: clean::TypeKind) {\n-    let mut crate_name = cx.tcx.crate_name(did.krate).to_string();\n-    if did.is_local() {\n-        crate_name = cx.crate_name.clone().unwrap_or(crate_name);\n-    }\n+    let crate_name = cx.tcx.crate_name(did.krate).to_string();\n \n     let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n         // extern blocks have an empty name"}, {"sha": "869bec6cb88a57f3bdd1dade44f7dbfc2eb3bd01", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00d7bc7688c31e22e3f27d3e225087b1f8ea694b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d7bc7688c31e22e3f27d3e225087b1f8ea694b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=00d7bc7688c31e22e3f27d3e225087b1f8ea694b", "patch": "@@ -46,8 +46,6 @@ pub struct DocContext<'tcx> {\n \n     pub tcx: TyCtxt<'tcx>,\n     pub resolver: Rc<RefCell<interface::BoxedResolver>>,\n-    /// The stack of module NodeIds up till this point\n-    pub crate_name: Option<String>,\n     pub cstore: Lrc<CStore>,\n     /// Later on moved into `html::render::CACHE_KEY`\n     pub renderinfo: RefCell<RenderInfo>,\n@@ -332,7 +330,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         file_loader: None,\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,\n-        crate_name: crate_name.clone(),\n+        crate_name,\n         lint_caps,\n     };\n \n@@ -372,7 +370,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             let ctxt = DocContext {\n                 tcx,\n                 resolver,\n-                crate_name,\n                 cstore: compiler.cstore().clone(),\n                 external_traits: Default::default(),\n                 active_extern_traits: Default::default(),"}, {"sha": "5fad9038104deb9d6dc9f96757949aa2b371e3b0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00d7bc7688c31e22e3f27d3e225087b1f8ea694b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d7bc7688c31e22e3f27d3e225087b1f8ea694b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=00d7bc7688c31e22e3f27d3e225087b1f8ea694b", "patch": "@@ -6,6 +6,7 @@ use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::privacy::AccessLevel;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n+use rustc::ty::TyCtxt;\n use syntax::ast;\n use syntax::ext::base::MacroKind;\n use syntax::source_map::Spanned;\n@@ -18,13 +19,13 @@ use crate::core;\n use crate::clean::{self, AttributesExt, NestedAttributesExt};\n use crate::doctree::*;\n \n+// FIXME: Should this be replaced with tcx.def_path_str?\n fn def_id_to_path(\n-    cx: &core::DocContext<'_>,\n+    tcx: TyCtxt<'_>,\n     did: DefId,\n-    name: Option<String>\n ) -> Vec<String> {\n-    let crate_name = name.unwrap_or_else(|| cx.tcx.crate_name(did.krate).to_string());\n-    let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n+    let crate_name = tcx.crate_name(did.krate).to_string();\n+    let relative = tcx.def_path(did).data.into_iter().filter_map(|elem| {\n         // extern blocks have an empty name\n         let s = elem.data.to_string();\n         if !s.is_empty() {\n@@ -68,7 +69,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // We can't use the entry API, as that keeps the mutable borrow of `self` active\n         // when we try to use `cx`.\n         if self.exact_paths.get(&did).is_none() {\n-            let path = def_id_to_path(self.cx, did, self.cx.crate_name.clone());\n+            let path = def_id_to_path(self.cx.tcx, did);\n             self.exact_paths.insert(did, path);\n         }\n     }"}]}