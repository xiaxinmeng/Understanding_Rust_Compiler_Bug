{"sha": "2224edcfe16ff798fcfa6f21a339822cb8b0f7ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjRlZGNmZTE2ZmY3OThmY2ZhNmYyMWEzMzk4MjJjYjhiMGY3YmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-24T00:26:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-24T00:26:14Z"}, "message": "auto merge of #15407 : sneves/rust/master, r=aturon\n\nAt the moment, writing generic functions for integer types that involve shifting is rather verbose. For example, a function at shifts an integer left by 1 currently requires \r\n\r\n    use std::num::One;\r\n    fn f<T: Int>(x : T) -> T {\r\n        x << One::one()\r\n    }\r\n\r\nIf the shift amount is not 1, it's even worse:\r\n\r\n    use std::num::FromPrimitive;\r\n    fn f<T: Int + FromPrimitive>(x: T) -> T {\r\n        x << FromPrimitive::from_int(2).unwrap()\r\n    }\r\n\r\nThis patch allows the much simpler implementation\r\n\r\n    fn f<T: Int>(x: T) -> T { \r\n        x << 2\r\n    }\r\n\r\nIt accomplishes this by changing the built-in integer types (and the `Int` trait) to implement `Shl<uint, T>` instead of `Shl<T, T>` as it currently is defined. Note that the internal implementations of `shl` already cast the right-hand side to `uint`. `BigInt` also implements `Shl<uint, BigInt>`, so this increases consistency.\r\n\r\nAll of the above applies similarly to right shifts, i.e., `Shr<uint, T>`.", "tree": {"sha": "d4c2f6033218e8ab3c9bc20fb018aabadc7274a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4c2f6033218e8ab3c9bc20fb018aabadc7274a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba", "html_url": "https://github.com/rust-lang/rust/commit/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb72c4767fa423649feeb197b50385c1fa0a6fd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb72c4767fa423649feeb197b50385c1fa0a6fd5", "html_url": "https://github.com/rust-lang/rust/commit/fb72c4767fa423649feeb197b50385c1fa0a6fd5"}, {"sha": "7b7d23cc3d53ae46442367a69966bf2cebccc515", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b7d23cc3d53ae46442367a69966bf2cebccc515", "html_url": "https://github.com/rust-lang/rust/commit/7b7d23cc3d53ae46442367a69966bf2cebccc515"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "df90d81c57abca06ff9690d73feedc5b09cf7c7d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2224edcfe16ff798fcfa6f21a339822cb8b0f7ba", "patch": "@@ -391,8 +391,8 @@ pub trait Int: Primitive\n              + BitAnd<Self,Self>\n              + BitOr<Self,Self>\n              + BitXor<Self,Self>\n-             + Shl<Self,Self>\n-             + Shr<Self,Self> {\n+             + Shl<uint,Self>\n+             + Shr<uint,Self> {\n     /// Returns the number of ones in the binary representation of the integer.\n     ///\n     /// # Example\n@@ -658,12 +658,12 @@ int_cast_impl!(i64, u64)\n /// Returns the smallest power of 2 greater than or equal to `n`.\n #[inline]\n pub fn next_power_of_two<T: Unsigned + Int>(n: T) -> T {\n-    let halfbits: T = cast(size_of::<T>() * 4).unwrap();\n+    let halfbits = size_of::<T>() * 4;\n     let mut tmp: T = n - one();\n-    let mut shift: T = one();\n+    let mut shift = 1u;\n     while shift <= halfbits {\n         tmp = tmp | (tmp >> shift);\n-        shift = shift << one();\n+        shift = shift << 1u;\n     }\n     tmp + one()\n }\n@@ -679,12 +679,12 @@ pub fn is_power_of_two<T: Unsigned + Int>(n: T) -> bool {\n /// otherwise the power of 2 is wrapped in `Some`.\n #[inline]\n pub fn checked_next_power_of_two<T: Unsigned + Int>(n: T) -> Option<T> {\n-    let halfbits: T = cast(size_of::<T>() * 4).unwrap();\n+    let halfbits = size_of::<T>() * 4;\n     let mut tmp: T = n - one();\n-    let mut shift: T = one();\n+    let mut shift = 1u;\n     while shift <= halfbits {\n         tmp = tmp | (tmp >> shift);\n-        shift = shift << one();\n+        shift = shift << 1u;\n     }\n     tmp.checked_add(&one())\n }"}, {"sha": "0ebb6e94b9a0eb975f91c810b4592c6bcef70372", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=2224edcfe16ff798fcfa6f21a339822cb8b0f7ba", "patch": "@@ -558,10 +558,10 @@ pub trait Shl<RHS,Result> {\n \n macro_rules! shl_impl(\n     ($($t:ty)*) => ($(\n-        impl Shl<$t, $t> for $t {\n+        impl Shl<uint, $t> for $t {\n             #[inline]\n-            fn shl(&self, other: &$t) -> $t {\n-                (*self) << (*other as uint)\n+            fn shl(&self, other: &uint) -> $t {\n+                (*self) << (*other)\n             }\n         }\n     )*)\n@@ -601,9 +601,9 @@ pub trait Shr<RHS,Result> {\n \n macro_rules! shr_impl(\n     ($($t:ty)*) => ($(\n-        impl Shr<$t, $t> for $t {\n+        impl Shr<uint, $t> for $t {\n             #[inline]\n-            fn shr(&self, other: &$t) -> $t { (*self) >> (*other as uint) }\n+            fn shr(&self, other: &uint) -> $t { (*self) >> (*other) }\n         }\n     )*)\n )"}, {"sha": "a2a9a05e868abfa21b864648ec6f851b04c0e054", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=2224edcfe16ff798fcfa6f21a339822cb8b0f7ba", "patch": "@@ -74,8 +74,8 @@ mod tests {\n         assert!(0b1110 as $T == (0b1100 as $T).bitor(&(0b1010 as $T)));\n         assert!(0b1000 as $T == (0b1100 as $T).bitand(&(0b1010 as $T)));\n         assert!(0b0110 as $T == (0b1100 as $T).bitxor(&(0b1010 as $T)));\n-        assert!(0b1110 as $T == (0b0111 as $T).shl(&(1 as $T)));\n-        assert!(0b0111 as $T == (0b1110 as $T).shr(&(1 as $T)));\n+        assert!(0b1110 as $T == (0b0111 as $T).shl(&1));\n+        assert!(0b0111 as $T == (0b1110 as $T).shr(&1));\n         assert!(-(0b11 as $T) - (1 as $T) == (0b11 as $T).not());\n     }\n "}, {"sha": "a823e8d3f5754e3b129a7a3bc50f5944510daa8c", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2224edcfe16ff798fcfa6f21a339822cb8b0f7ba/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=2224edcfe16ff798fcfa6f21a339822cb8b0f7ba", "patch": "@@ -34,8 +34,8 @@ mod tests {\n         assert!(0b1110 as $T == (0b1100 as $T).bitor(&(0b1010 as $T)));\n         assert!(0b1000 as $T == (0b1100 as $T).bitand(&(0b1010 as $T)));\n         assert!(0b0110 as $T == (0b1100 as $T).bitxor(&(0b1010 as $T)));\n-        assert!(0b1110 as $T == (0b0111 as $T).shl(&(1 as $T)));\n-        assert!(0b0111 as $T == (0b1110 as $T).shr(&(1 as $T)));\n+        assert!(0b1110 as $T == (0b0111 as $T).shl(&1u));\n+        assert!(0b0111 as $T == (0b1110 as $T).shr(&1u));\n         assert!(MAX - (0b1011 as $T) == (0b1011 as $T).not());\n     }\n "}]}