{"sha": "20a795e6c6be5b27e16df257f104f5f26ab730e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYTc5NWU2YzZiZTViMjdlMTZkZjI1N2YxMDRmNWYyNmFiNzMwZTk=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2018-04-15T21:07:39Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2018-04-15T21:43:20Z"}, "message": "Mention Result<!, E> in never docs.", "tree": {"sha": "6dfc681fce1e277a860aa51e8e95b41c7760bb10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dfc681fce1e277a860aa51e8e95b41c7760bb10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20a795e6c6be5b27e16df257f104f5f26ab730e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20a795e6c6be5b27e16df257f104f5f26ab730e9", "html_url": "https://github.com/rust-lang/rust/commit/20a795e6c6be5b27e16df257f104f5f26ab730e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20a795e6c6be5b27e16df257f104f5f26ab730e9/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7360d6dd678d186d9c9b46311b75ba6840e61aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7360d6dd678d186d9c9b46311b75ba6840e61aa2", "html_url": "https://github.com/rust-lang/rust/commit/7360d6dd678d186d9c9b46311b75ba6840e61aa2"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "8905f7c9e160512e288db09be2247c8b4b9bb034", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/20a795e6c6be5b27e16df257f104f5f26ab730e9/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a795e6c6be5b27e16df257f104f5f26ab730e9/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=20a795e6c6be5b27e16df257f104f5f26ab730e9", "patch": "@@ -112,6 +112,8 @@ mod prim_bool { }\n ///\n /// # `!` and generics\n ///\n+/// ## Infalliable errors\n+///\n /// The main place you'll see `!` used explicitly is in generic code. Consider the [`FromStr`]\n /// trait:\n ///\n@@ -140,9 +142,59 @@ mod prim_bool { }\n /// [`Ok`] variant. This illustrates another behaviour of `!` - it can be used to \"delete\" certain\n /// enum variants from generic types like `Result`.\n ///\n+/// ## Infinite loops\n+///\n+/// While [`Result<T, !>`] is very useful for removing errors, `!` can also be used to removed\n+/// successes as well. If we think of [`Result<T, !>`] as \"if this function returns, it has not\n+/// errored,\" we get a very intuitive idea of [`Result<!, E>`] as well: if the function returns, it\n+/// *has* errored.\n+///\n+/// For example, consider the case of a simple web server, which can be simplified to:\n+///\n+/// ```ignore (hypothetical-example)\n+/// loop {\n+///     let (client, request) = get_request().expect(\"disconnected\");\n+///     let response = request.process();\n+///     response.send(client);\n+/// }\n+/// ```\n+///\n+/// Currently, this isn't ideal, because we simply panic whenever we fail to get a new connection.\n+/// Instead, we'd like to keep track of this error, like this:\n+///\n+/// ```ignore (hypothetical-example)\n+/// loop {\n+///     match get_request() {\n+///         Err(err) => break err,\n+///         Ok((client, request)) => {\n+///             let response = request.process();\n+///             response.send(client);\n+///         },\n+///     }\n+/// }\n+/// ```\n+///\n+/// Now, when the server disconnects, we exit the loop with an error instead of panicking. While it\n+/// might be intuitive to simply return the error, we might want to wrap it in a [`Result<!, E>`] \n+/// instead:\n+///\n+/// ```ignore (hypothetical-example)\n+/// fn server_loop() -> Result<!, ConnectionError> {\n+///     Ok(loop {\n+///         let (client, request) = get_request()?;\n+///         let response = request.process();\n+///         response.send(client);\n+///     })\n+/// }\n+/// ```\n+///\n+/// Now, we can use `?` instead of `match`, and the return type makes a lot more sense: if the loop\n+/// ever stops, it means that an error occurred.\n+///\n /// [`String::from_str`]: str/trait.FromStr.html#tymethod.from_str\n /// [`Result<String, !>`]: result/enum.Result.html\n /// [`Result<T, !>`]: result/enum.Result.html\n+/// [`Result<!, E>`]: result/enum.Result.html\n /// [`Ok`]: result/enum.Result.html#variant.Ok\n /// [`String`]: string/struct.String.html\n /// [`Err`]: result/enum.Result.html#variant.Err"}]}