{"sha": "5de67f9cc9674752bb6b9db6c2db790a19ec4e9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZTY3ZjljYzk2NzQ3NTJiYjZiOWRiNmMyZGI3OTBhMTllYzRlOWM=", "commit": {"author": {"name": "Steven Stewart-Gallus", "email": "sstewartgallus00@mylangara.bc.ca", "date": "2013-06-15T07:43:19Z"}, "committer": {"name": "Steven Stewart-Gallus", "email": "sstewartgallus00@mylangara.bc.ca", "date": "2013-06-15T07:43:19Z"}, "message": "Cleaned up driver.rs", "tree": {"sha": "ffb20f67cbcd6e489afa5106938e58a131586d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffb20f67cbcd6e489afa5106938e58a131586d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5de67f9cc9674752bb6b9db6c2db790a19ec4e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5de67f9cc9674752bb6b9db6c2db790a19ec4e9c", "html_url": "https://github.com/rust-lang/rust/commit/5de67f9cc9674752bb6b9db6c2db790a19ec4e9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5de67f9cc9674752bb6b9db6c2db790a19ec4e9c/comments", "author": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ba6fa477743bf6b8340b6d83987f1e243a509ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba6fa477743bf6b8340b6d83987f1e243a509ae", "html_url": "https://github.com/rust-lang/rust/commit/1ba6fa477743bf6b8340b6d83987f1e243a509ae"}], "stats": {"total": 85, "additions": 38, "deletions": 47}, "files": [{"sha": "f4e2a2dd2b88d54afba04c54fcd37cf979c5a067", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 38, "deletions": 47, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5de67f9cc9674752bb6b9db6c2db790a19ec4e9c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de67f9cc9674752bb6b9db6c2db790a19ec4e9c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=5de67f9cc9674752bb6b9db6c2db790a19ec4e9c", "patch": "@@ -65,34 +65,24 @@ pub fn source_name(input: &input) -> @str {\n \n pub fn default_configuration(sess: Session, argv0: @str, input: &input) ->\n    ast::crate_cfg {\n-    let libc = match sess.targ_cfg.os {\n-      session::os_win32 => @\"msvcrt.dll\",\n-      session::os_macos => @\"libc.dylib\",\n-      session::os_linux => @\"libc.so.6\",\n-      session::os_android => @\"libc.so\",\n-      session::os_freebsd => @\"libc.so.7\"\n-      // _ { \"libc.so\" }\n+    let (libc, tos) = match sess.targ_cfg.os {\n+        session::os_win32 =>   (@\"msvcrt.dll\", @\"win32\"),\n+        session::os_macos =>   (@\"libc.dylib\", @\"macos\"),\n+        session::os_linux =>   (@\"libc.so.6\",  @\"linux\"),\n+        session::os_android => (@\"libc.so\",    @\"android\"),\n+        session::os_freebsd => (@\"libc.so.7\",  @\"freebsd\")\n     };\n-    let tos = match sess.targ_cfg.os {\n-      session::os_win32 => @\"win32\",\n-      session::os_macos => @\"macos\",\n-      session::os_linux => @\"linux\",\n-      session::os_android => @\"android\",\n-      session::os_freebsd => @\"freebsd\"\n-      // _ { \"libc.so\" }\n-    };\n-\n-    let mk = attr::mk_name_value_item_str;\n \n     // ARM is bi-endian, however using NDK seems to default\n     // to little-endian unless a flag is provided.\n     let (end,arch,wordsz) = match sess.targ_cfg.arch {\n-        abi::X86 => (@\"little\",@\"x86\",@\"32\"),\n-        abi::X86_64 => (@\"little\",@\"x86_64\",@\"64\"),\n-        abi::Arm => (@\"little\",@\"arm\",@\"32\"),\n-        abi::Mips => (@\"big\",@\"mips\",@\"32\")\n+        abi::X86 =>    (@\"little\", @\"x86\",    @\"32\"),\n+        abi::X86_64 => (@\"little\", @\"x86_64\", @\"64\"),\n+        abi::Arm =>    (@\"little\", @\"arm\",    @\"32\"),\n+        abi::Mips =>   (@\"big\",    @\"mips\",   @\"32\")\n     };\n \n+    let mk = attr::mk_name_value_item_str;\n     return ~[ // Target bindings.\n          attr::mk_word_item(os::FAMILY.to_managed()),\n          mk(@\"target_os\", tos),\n@@ -463,36 +453,37 @@ pub fn pretty_print_input(sess: Session, cfg: ast::crate_cfg, input: &input,\n }\n \n pub fn get_os(triple: &str) -> Option<session::os> {\n-    if triple.contains(\"win32\") ||\n-               triple.contains(\"mingw32\") {\n-            Some(session::os_win32)\n-        } else if triple.contains(\"darwin\") {\n-            Some(session::os_macos)\n-        } else if triple.contains(\"android\") {\n-            Some(session::os_android)\n-        } else if triple.contains(\"linux\") {\n-            Some(session::os_linux)\n-        } else if triple.contains(\"freebsd\") {\n-            Some(session::os_freebsd)\n-        } else { None }\n+    for os_names.each |&(name, os)| {\n+        if triple.contains(name) { return Some(os) }\n+    }\n+    None\n }\n+static os_names : &'static [(&'static str, session::os)] = &'static [\n+    (\"win32\",   session::os_win32),\n+    (\"darwin\",  session::os_macos),\n+    (\"android\", session::os_android),\n+    (\"linux\",   session::os_linux),\n+    (\"freebsd\", session::os_freebsd)];\n \n pub fn get_arch(triple: &str) -> Option<abi::Architecture> {\n-    if triple.contains(\"i386\") ||\n-        triple.contains(\"i486\") ||\n-               triple.contains(\"i586\") ||\n-               triple.contains(\"i686\") ||\n-               triple.contains(\"i786\") {\n-            Some(abi::X86)\n-        } else if triple.contains(\"x86_64\") {\n-            Some(abi::X86_64)\n-        } else if triple.contains(\"arm\") ||\n-                      triple.contains(\"xscale\") {\n-            Some(abi::Arm)\n-        } else if triple.contains(\"mips\") {\n-            Some(abi::Mips)\n-        } else { None }\n+    for architecture_abis.each |&(arch, abi)| {\n+        if triple.contains(arch) { return Some(abi) }\n+    }\n+    None\n }\n+static architecture_abis : &'static [(&'static str, abi::Architecture)] = &'static [\n+    (\"i386\",   abi::X86),\n+    (\"i486\",   abi::X86),\n+    (\"i586\",   abi::X86),\n+    (\"i686\",   abi::X86),\n+    (\"i786\",   abi::X86),\n+\n+    (\"x86_64\", abi::X86_64),\n+\n+    (\"arm\",    abi::Arm),\n+    (\"xscale\", abi::Arm),\n+\n+    (\"mips\",   abi::Mips)];\n \n pub fn build_target_config(sopts: @session::options,\n                            demitter: diagnostic::Emitter)"}]}