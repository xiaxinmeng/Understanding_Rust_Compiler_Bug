{"sha": "7e70fc22a79ad2eb4deeb6465799f03e7580fee1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNzBmYzIyYTc5YWQyZWI0ZGVlYjY0NjU3OTlmMDNlNzU4MGZlZTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-14T16:11:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T15:52:28Z"}, "message": "Flip generics", "tree": {"sha": "056d889e35be08028f919307f6d9e35e644b9ca6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/056d889e35be08028f919307f6d9e35e644b9ca6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e70fc22a79ad2eb4deeb6465799f03e7580fee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e70fc22a79ad2eb4deeb6465799f03e7580fee1", "html_url": "https://github.com/rust-lang/rust/commit/7e70fc22a79ad2eb4deeb6465799f03e7580fee1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e70fc22a79ad2eb4deeb6465799f03e7580fee1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a71bb70f0a933ca5e78ca02a205fd4cb94ece48e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a71bb70f0a933ca5e78ca02a205fd4cb94ece48e", "html_url": "https://github.com/rust-lang/rust/commit/a71bb70f0a933ca5e78ca02a205fd4cb94ece48e"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "ca003576ae544b1a3de8638cb718409e128b3dd7", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e70fc22a79ad2eb4deeb6465799f03e7580fee1/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e70fc22a79ad2eb4deeb6465799f03e7580fee1/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=7e70fc22a79ad2eb4deeb6465799f03e7580fee1", "patch": "@@ -52,16 +52,16 @@ impl<DB: HirDatabase> SourceBinder<'_, DB> {\n         SourceAnalyzer::new_for_resolver(resolver, src)\n     }\n \n-    pub fn to_def<D, ID>(&mut self, src: InFile<ID::Ast>) -> Option<D>\n+    pub fn to_def<D, T>(&mut self, src: InFile<T>) -> Option<D>\n     where\n-        D: From<ID>,\n-        ID: ToId,\n+        D: From<T::ID>,\n+        T: ToId,\n     {\n-        let id: ID = self.to_id(src)?;\n+        let id: T::ID = self.to_id(src)?;\n         Some(id.into())\n     }\n \n-    fn to_id<D: ToId>(&mut self, src: InFile<D::Ast>) -> Option<D> {\n+    fn to_id<T: ToId>(&mut self, src: InFile<T>) -> Option<T::ID> {\n         let container = self.find_container(src.as_ref().map(|it| it.syntax()))?;\n         let db = self.db;\n         let dyn_map =\n@@ -73,7 +73,7 @@ impl<DB: HirDatabase> SourceBinder<'_, DB> {\n                 ChildContainer::EnumId(it) => it.child_by_source(db),\n                 ChildContainer::VariantId(it) => it.child_by_source(db),\n             });\n-        dyn_map[D::KEY].get(&src).copied()\n+        dyn_map[T::KEY].get(&src).copied()\n     }\n \n     fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {\n@@ -144,16 +144,16 @@ impl_froms! {\n     VariantId,\n }\n \n-pub trait ToId: Sized + Copy + 'static {\n-    type Ast: AstNode + 'static;\n-    const KEY: Key<Self::Ast, Self>;\n+pub trait ToId: Sized + AstNode + 'static {\n+    type ID: Sized + Copy + 'static;\n+    const KEY: Key<Self, Self::ID>;\n }\n \n macro_rules! to_id_impls {\n     ($(($id:ident, $ast:path, $key:path)),* ,) => {$(\n-        impl ToId for $id {\n-            type Ast = $ast;\n-            const KEY: Key<Self::Ast, Self> = $key;\n+        impl ToId for $ast {\n+            type ID = $id;\n+            const KEY: Key<Self, Self::ID> = $key;\n         }\n     )*}\n }"}]}