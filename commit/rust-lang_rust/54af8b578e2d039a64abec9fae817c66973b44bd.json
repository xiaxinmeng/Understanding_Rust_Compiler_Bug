{"sha": "54af8b578e2d039a64abec9fae817c66973b44bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YWY4YjU3OGUyZDAzOWE2NGFiZWM5ZmFlODE3YzY2OTczYjQ0YmQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-07-01T01:49:05Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-07-01T01:49:05Z"}, "message": "Factor out block_can_be_flattened", "tree": {"sha": "cc4e421569a36941238587021325de37727e148a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc4e421569a36941238587021325de37727e148a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54af8b578e2d039a64abec9fae817c66973b44bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54af8b578e2d039a64abec9fae817c66973b44bd", "html_url": "https://github.com/rust-lang/rust/commit/54af8b578e2d039a64abec9fae817c66973b44bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54af8b578e2d039a64abec9fae817c66973b44bd/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c6c295620d64db44a1a76235095364af57c96a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c6c295620d64db44a1a76235095364af57c96a", "html_url": "https://github.com/rust-lang/rust/commit/e7c6c295620d64db44a1a76235095364af57c96a"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "b01dc69a5284b865e60861eadef6b005128a1a54", "filename": "src/matches.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/54af8b578e2d039a64abec9fae817c66973b44bd/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54af8b578e2d039a64abec9fae817c66973b44bd/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=54af8b578e2d039a64abec9fae817c66973b44bd", "patch": "@@ -300,28 +300,38 @@ fn rewrite_match_pattern(\n     Some(format!(\"{}{}\", pats_str, guard_str))\n }\n \n+fn block_can_be_flattened<'a>(\n+    context: &RewriteContext,\n+    expr: &'a ast::Expr,\n+) -> Option<&'a ast::Block> {\n+    match expr.node {\n+        ast::ExprKind::Block(ref block, _)\n+            if !is_unsafe_block(block)\n+                && is_simple_block(block, Some(&expr.attrs), context.codemap) =>\n+        {\n+            Some(&*block)\n+        }\n+        _ => None,\n+    }\n+}\n+\n // (extend, body)\n // @extend: true if the arm body can be put next to `=>`\n // @body: flattened body, if the body is block with a single expression\n fn flatten_arm_body<'a>(context: &'a RewriteContext, body: &'a ast::Expr) -> (bool, &'a ast::Expr) {\n-    match body.node {\n-        ast::ExprKind::Block(ref block, _)\n-            if !is_unsafe_block(block)\n-                && is_simple_block(block, Some(&body.attrs), context.codemap) =>\n-        {\n-            if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n-                (\n-                    !context.config.force_multiline_blocks() && can_flatten_block_around_this(expr),\n-                    &*expr,\n-                )\n-            } else {\n-                (false, &*body)\n-            }\n+    if let Some(ref block) = block_can_be_flattened(context, body) {\n+        if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n+            let can_extend_expr =\n+                !context.config.force_multiline_blocks() && can_flatten_block_around_this(expr);\n+            (can_extend_expr, &*expr)\n+        } else {\n+            (false, &*body)\n         }\n-        _ => (\n+    } else {\n+        (\n             !context.config.force_multiline_blocks() && body.can_be_overflowed(context, 1),\n             &*body,\n-        ),\n+        )\n     }\n }\n "}]}