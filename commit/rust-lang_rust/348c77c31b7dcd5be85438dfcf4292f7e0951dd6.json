{"sha": "348c77c31b7dcd5be85438dfcf4292f7e0951dd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0OGM3N2MzMWI3ZGNkNWJlODU0MzhkZmNmNDI5MmY3ZTA5NTFkZDY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-01T23:57:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-01T23:57:55Z"}, "message": "Populate default compilation environment as in rustboot.", "tree": {"sha": "aae201cf042a02a7c3dba3fa9dfc508ac881c6c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aae201cf042a02a7c3dba3fa9dfc508ac881c6c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/348c77c31b7dcd5be85438dfcf4292f7e0951dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/348c77c31b7dcd5be85438dfcf4292f7e0951dd6", "html_url": "https://github.com/rust-lang/rust/commit/348c77c31b7dcd5be85438dfcf4292f7e0951dd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/348c77c31b7dcd5be85438dfcf4292f7e0951dd6/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0761c5f4626153eba8478c66f93ba27e021f4dc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0761c5f4626153eba8478c66f93ba27e021f4dc2", "html_url": "https://github.com/rust-lang/rust/commit/0761c5f4626153eba8478c66f93ba27e021f4dc2"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "69e61aa0494547335cea332406162e42d13d8f93", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/348c77c31b7dcd5be85438dfcf4292f7e0951dd6/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348c77c31b7dcd5be85438dfcf4292f7e0951dd6/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=348c77c31b7dcd5be85438dfcf4292f7e0951dd6", "patch": "@@ -2,6 +2,7 @@\n \n import front.parser;\n import front.token;\n+import front.eval;\n import middle.trans;\n import middle.resolve;\n import middle.typeck;\n@@ -13,6 +14,30 @@ import std.option.none;\n import std._str;\n import std._vec;\n \n+fn default_environment(session.session sess,\n+                       str argv0,\n+                       str input) -> eval.env {\n+\n+    auto libc = \"libc.so\";\n+    alt (sess.get_targ_cfg().os) {\n+        case (session.os_win32) { libc = \"msvcrt.dll\"; }\n+        case (session.os_macos) { libc = \"libc.dylib\"; }\n+        case (session.os_linux) { libc = \"libc.so.6\"; }\n+    }\n+\n+    ret\n+        vec(\n+            // Target bindings.\n+            tup(\"target_os\", eval.val_str(std.os.target_os())),\n+            tup(\"target_arch\", eval.val_str(\"x86\")),\n+            tup(\"target_libc\", eval.val_str(libc)),\n+\n+            // Build bindings.\n+            tup(\"build_compiler\", eval.val_str(argv0)),\n+            tup(\"build_input\", eval.val_str(input))\n+            );\n+}\n+\n impure fn parse_input(session.session sess,\n                       parser.parser p,\n                       str input) -> @front.ast.crate {\n@@ -25,9 +50,11 @@ impure fn parse_input(session.session sess,\n     fail;\n }\n \n-impure fn compile_input(session.session sess, str input, str output,\n+impure fn compile_input(session.session sess,\n+                        eval.env env,\n+                        str input, str output,\n                         bool shared) {\n-    auto p = parser.new_parser(sess, 0, input);\n+    auto p = parser.new_parser(sess, env, 0, input);\n     auto crate = parse_input(sess, p, input);\n     crate = resolve.resolve_crate(sess, crate);\n     crate = typeck.check_crate(sess, crate);\n@@ -131,16 +158,19 @@ impure fn main(vec[str] args) {\n             sess.err(\"no input filename\");\n         }\n         case (some[str](?ifile)) {\n+\n+            auto env = default_environment(sess, args.(0), ifile);\n+\n             alt (output_file) {\n                 case (none[str]) {\n                     let vec[str] parts = _str.split(ifile, '.' as u8);\n                     parts = _vec.pop[str](parts);\n                     parts += \".bc\";\n                     auto ofile = _str.concat(parts);\n-                    compile_input(sess, ifile, ofile, shared);\n+                    compile_input(sess, env, ifile, ofile, shared);\n                 }\n                 case (some[str](?ofile)) {\n-                    compile_input(sess, ifile, ofile, shared);\n+                    compile_input(sess, env, ifile, ofile, shared);\n                 }\n             }\n         }"}, {"sha": "cae72b1e817db7125222673ea2d3fb58e2adccd6", "filename": "src/comp/front/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/348c77c31b7dcd5be85438dfcf4292f7e0951dd6/src%2Fcomp%2Ffront%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348c77c31b7dcd5be85438dfcf4292f7e0951dd6/src%2Fcomp%2Ffront%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Feval.rs?ref=348c77c31b7dcd5be85438dfcf4292f7e0951dd6", "patch": "@@ -393,7 +393,7 @@ impure fn eval_crate_directive(parser p,\n \n             auto full_path = prefix + std.os.path_sep() + file_path;\n \n-            auto p0 = new_parser(p.get_session(), 0, full_path);\n+            auto p0 = new_parser(p.get_session(), e, 0, full_path);\n             auto m0 = parse_mod_items(p0, token.EOF);\n             auto im = ast.item_mod(id, m0, p.next_def_id());\n             auto i = @spanned(cdir.span, cdir.span, im);"}, {"sha": "4ffa6f92346c224269e977ea694a450ef3c6dd17", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/348c77c31b7dcd5be85438dfcf4292f7e0951dd6/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348c77c31b7dcd5be85438dfcf4292f7e0951dd6/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=348c77c31b7dcd5be85438dfcf4292f7e0951dd6", "patch": "@@ -31,15 +31,18 @@ state type parser =\n           impure fn restrict(restriction r);\n           fn get_restriction() -> restriction;\n           fn get_file_type() -> file_type;\n+          fn get_env() -> eval.env;\n           fn get_session() -> session.session;\n           fn get_span() -> common.span;\n           fn next_def_id() -> ast.def_id;\n     };\n \n impure fn new_parser(session.session sess,\n+                     eval.env env,\n                      ast.crate_num crate,\n                      str path) -> parser {\n     state obj stdio_parser(session.session sess,\n+                           eval.env env,\n                            file_type ftype,\n                            mutable token.token tok,\n                            mutable common.pos lo,\n@@ -93,6 +96,10 @@ impure fn new_parser(session.session sess,\n                 ret ftype;\n             }\n \n+            fn get_env() -> eval.env {\n+                ret env;\n+            }\n+\n         }\n     auto ftype = SOURCE_FILE;\n     if (_str.ends_with(path, \".rc\")) {\n@@ -101,7 +108,7 @@ impure fn new_parser(session.session sess,\n     auto srdr = io.new_stdio_reader(path);\n     auto rdr = lexer.new_reader(srdr, path);\n     auto npos = rdr.get_curr_pos();\n-    ret stdio_parser(sess, ftype, lexer.next_token(rdr),\n+    ret stdio_parser(sess, env, ftype, lexer.next_token(rdr),\n                      npos, npos, 0, UNRESTRICTED, crate, rdr);\n }\n \n@@ -2279,7 +2286,7 @@ impure fn parse_crate_from_crate_file(parser p) -> @ast.crate {\n     auto hi = lo;\n     auto prefix = std.path.dirname(lo.filename);\n     auto cdirs = parse_crate_directives(p, token.EOF);\n-    auto m = eval.eval_crate_directives_to_mod(p, eval.mk_env(),\n+    auto m = eval.eval_crate_directives_to_mod(p, p.get_env(),\n                                                cdirs, prefix);\n     hi = p.get_span();\n     expect(p, token.EOF);"}]}