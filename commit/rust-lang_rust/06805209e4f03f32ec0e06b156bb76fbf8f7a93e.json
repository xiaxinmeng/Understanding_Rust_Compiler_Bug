{"sha": "06805209e4f03f32ec0e06b156bb76fbf8f7a93e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ODA1MjA5ZTRmMDNmMzJlYzBlMDZiMTU2YmI3NmZiZjhmN2E5M2U=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T01:49:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:24Z"}, "message": "librustc: De-`@mut` `lltypes`.", "tree": {"sha": "b890ff389e740780f1fd6ca1348fcc108a244044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b890ff389e740780f1fd6ca1348fcc108a244044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06805209e4f03f32ec0e06b156bb76fbf8f7a93e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06805209e4f03f32ec0e06b156bb76fbf8f7a93e", "html_url": "https://github.com/rust-lang/rust/commit/06805209e4f03f32ec0e06b156bb76fbf8f7a93e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06805209e4f03f32ec0e06b156bb76fbf8f7a93e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c194a013651869ae44440e319b28dabfaa08f50", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c194a013651869ae44440e319b28dabfaa08f50", "html_url": "https://github.com/rust-lang/rust/commit/8c194a013651869ae44440e319b28dabfaa08f50"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "eaf94568d9340fb9fc0a31231848a3562aae8dec", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06805209e4f03f32ec0e06b156bb76fbf8f7a93e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06805209e4f03f32ec0e06b156bb76fbf8f7a93e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=06805209e4f03f32ec0e06b156bb76fbf8f7a93e", "patch": "@@ -92,7 +92,7 @@ pub struct CrateContext {\n      impl_method_cache: RefCell<HashMap<(ast::DefId, ast::Name), ast::DefId>>,\n \n      module_data: RefCell<HashMap<~str, ValueRef>>,\n-     lltypes: HashMap<ty::t, Type>,\n+     lltypes: RefCell<HashMap<ty::t, Type>>,\n      llsizingtypes: HashMap<ty::t, Type>,\n      adt_reprs: HashMap<ty::t, @adt::Repr>,\n      symbol_hasher: Sha256,\n@@ -203,7 +203,7 @@ impl CrateContext {\n                   extern_const_values: RefCell::new(HashMap::new()),\n                   impl_method_cache: RefCell::new(HashMap::new()),\n                   module_data: RefCell::new(HashMap::new()),\n-                  lltypes: HashMap::new(),\n+                  lltypes: RefCell::new(HashMap::new()),\n                   llsizingtypes: HashMap::new(),\n                   adt_reprs: HashMap::new(),\n                   symbol_hasher: symbol_hasher,"}, {"sha": "7f3cee7c402427fb509d4b6c3813dae7a6631a33", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/06805209e4f03f32ec0e06b156bb76fbf8f7a93e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06805209e4f03f32ec0e06b156bb76fbf8f7a93e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=06805209e4f03f32ec0e06b156bb76fbf8f7a93e", "patch": "@@ -173,11 +173,12 @@ pub fn sizing_type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n // NB: If you update this, be sure to update `sizing_type_of()` as well.\n pub fn type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n     // Check the cache.\n-    match cx.lltypes.find(&t) {\n-        Some(&llty) => {\n-            return llty;\n+    {\n+        let lltypes = cx.lltypes.borrow();\n+        match lltypes.get().find(&t) {\n+            Some(&llty) => return llty,\n+            None => ()\n         }\n-        None => ()\n     }\n \n     debug!(\"type_of {} {:?}\", t.repr(cx.tcx), t);\n@@ -197,7 +198,8 @@ pub fn type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n                 t_norm.repr(cx.tcx),\n                 t_norm,\n                 cx.tn.type_to_str(llty));\n-        cx.lltypes.insert(t, llty);\n+        let mut lltypes = cx.lltypes.borrow_mut();\n+        lltypes.get().insert(t, llty);\n         return llty;\n     }\n \n@@ -316,7 +318,10 @@ pub fn type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n             t.repr(cx.tcx),\n             t,\n             cx.tn.type_to_str(llty));\n-    cx.lltypes.insert(t, llty);\n+    {\n+        let mut lltypes = cx.lltypes.borrow_mut();\n+        lltypes.get().insert(t, llty);\n+    }\n \n     // If this was an enum or struct, fill in the type now.\n     match ty::get(t).sty {"}]}