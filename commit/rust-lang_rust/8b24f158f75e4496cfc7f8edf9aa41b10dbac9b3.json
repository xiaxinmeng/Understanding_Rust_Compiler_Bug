{"sha": "8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMjRmMTU4Zjc1ZTQ0OTZjZmM3ZjhlZGY5YWE0MWIxMGRiYWM5YjM=", "commit": {"author": {"name": "Aleksander Vognild Burkow", "email": "aleksanderburkow@gmail.com", "date": "2018-12-29T19:09:42Z"}, "committer": {"name": "Aleksander Vognild Burkow", "email": "aleksanderburkow@gmail.com", "date": "2018-12-29T20:57:46Z"}, "message": "Add support for formatting entire document with rustfmt\n\nAttempting to format a document when rustfmt isn't installed will result\nin an error being returned to the frontend. An alternative\nimplementation would be returning zero replacements.", "tree": {"sha": "add7a233ed590a2f66d0e702e968a4011c9d859e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add7a233ed590a2f66d0e702e968a4011c9d859e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3", "html_url": "https://github.com/rust-lang/rust/commit/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/comments", "author": {"login": "aleksanb", "id": 1413365, "node_id": "MDQ6VXNlcjE0MTMzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1413365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksanb", "html_url": "https://github.com/aleksanb", "followers_url": "https://api.github.com/users/aleksanb/followers", "following_url": "https://api.github.com/users/aleksanb/following{/other_user}", "gists_url": "https://api.github.com/users/aleksanb/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksanb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksanb/subscriptions", "organizations_url": "https://api.github.com/users/aleksanb/orgs", "repos_url": "https://api.github.com/users/aleksanb/repos", "events_url": "https://api.github.com/users/aleksanb/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksanb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aleksanb", "id": 1413365, "node_id": "MDQ6VXNlcjE0MTMzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1413365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksanb", "html_url": "https://github.com/aleksanb", "followers_url": "https://api.github.com/users/aleksanb/followers", "following_url": "https://api.github.com/users/aleksanb/following{/other_user}", "gists_url": "https://api.github.com/users/aleksanb/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksanb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksanb/subscriptions", "organizations_url": "https://api.github.com/users/aleksanb/orgs", "repos_url": "https://api.github.com/users/aleksanb/repos", "events_url": "https://api.github.com/users/aleksanb/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksanb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aac6b0e34ad22374c87435cf125ed4833e9f6fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aac6b0e34ad22374c87435cf125ed4833e9f6fc", "html_url": "https://github.com/rust-lang/rust/commit/2aac6b0e34ad22374c87435cf125ed4833e9f6fc"}], "stats": {"total": 98, "additions": 95, "deletions": 3}, "files": [{"sha": "bff2e00c9b317fa85fbe6b1b5ada65f87e6fc75a", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3", "patch": "@@ -140,6 +140,9 @@ impl fmt::Debug for AnalysisImpl {\n }\n \n impl AnalysisImpl {\n+    pub fn file_text(&self, file_id: FileId) -> Arc<String> {\n+        self.db.file_text(file_id)\n+    }\n     pub fn file_syntax(&self, file_id: FileId) -> SourceFileNode {\n         self.db.source_file(file_id)\n     }"}, {"sha": "9f5e9f358b95be15143a2b2b8a4c771fef79def0", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3", "patch": "@@ -274,6 +274,9 @@ pub struct Analysis {\n }\n \n impl Analysis {\n+    pub fn file_text(&self, file_id: FileId) -> Arc<String> {\n+        self.imp.file_text(file_id)\n+    }\n     pub fn file_syntax(&self, file_id: FileId) -> SourceFileNode {\n         self.imp.file_syntax(file_id).clone()\n     }"}, {"sha": "8d508a3ba5316ab11a2ccda63da1312ab1717080", "filename": "crates/ra_lsp_server/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs?ref=8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3", "patch": "@@ -33,7 +33,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         workspace_symbol_provider: Some(true),\n         code_action_provider: Some(CodeActionProviderCapability::Simple(true)),\n         code_lens_provider: None,\n-        document_formatting_provider: None,\n+        document_formatting_provider: Some(true),\n         document_range_formatting_provider: None,\n         document_on_type_formatting_provider: Some(DocumentOnTypeFormattingOptions {\n             first_trigger_character: \"=\".to_string(),"}, {"sha": "97c1be7788fe971c83dabeee3c6415108aef4459", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3", "patch": "@@ -295,6 +295,7 @@ fn on_request(\n         .on::<req::PrepareRenameRequest>(handlers::handle_prepare_rename)?\n         .on::<req::Rename>(handlers::handle_rename)?\n         .on::<req::References>(handlers::handle_references)?\n+        .on::<req::Formatting>(handlers::handle_formatting)?\n         .finish();\n     match req {\n         Ok(id) => {"}, {"sha": "07579be1297a272eff1eddad2f5d8a7f0f5d02e7", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3", "patch": "@@ -6,13 +6,16 @@ use languageserver_types::{\n     DiagnosticSeverity, DocumentSymbol, Documentation, FoldingRange, FoldingRangeKind,\n     FoldingRangeParams, Location, MarkupContent, MarkupKind, MarkedString, Position,\n     PrepareRenameResponse, RenameParams, SymbolInformation, TextDocumentIdentifier, TextEdit,\n+    Range,\n     WorkspaceEdit, ParameterInformation, ParameterLabel, SignatureInformation, Hover, HoverContents,\n+    DocumentFormattingParams,\n };\n use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FileRange, FilePosition, Severity};\n use ra_syntax::{TextUnit, text_utils::intersect};\n use ra_text_edit::text_utils::contains_offset_nonstrict;\n use rustc_hash::FxHashMap;\n use serde_json::to_value;\n+use std::io::Write;\n \n use crate::{\n     conv::{to_location, Conv, ConvWith, MapConvWith, TryConvWith},\n@@ -601,6 +604,36 @@ pub fn handle_references(\n     ))\n }\n \n+pub fn handle_formatting(\n+    world: ServerWorld,\n+    params: DocumentFormattingParams,\n+) -> Result<Option<Vec<TextEdit>>> {\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let file = world.analysis().file_text(file_id);\n+\n+    let file_line_index = world.analysis().file_line_index(file_id);\n+    let end_position = TextUnit::of_str(&file).conv_with(&file_line_index);\n+\n+    use std::process;\n+    let mut rustfmt = process::Command::new(\"rustfmt\")\n+        .stdin(process::Stdio::piped())\n+        .stdout(process::Stdio::piped())\n+        .spawn()?;\n+\n+    rustfmt.stdin.as_mut().unwrap().write_all(file.as_bytes())?;\n+\n+    let output = rustfmt.wait_with_output()?;\n+    let captured_stdout = String::from_utf8(output.stdout)?;\n+    if !output.status.success() {\n+        return Err(failure::err_msg(captured_stdout));\n+    }\n+\n+    Ok(Some(vec![TextEdit {\n+        range: Range::new(Position::new(0, 0), end_position),\n+        new_text: captured_stdout,\n+    }]))\n+}\n+\n pub fn handle_code_action(\n     world: ServerWorld,\n     params: req::CodeActionParams,"}, {"sha": "e9f02a6e4ea8bb963c7a89696980364f2a4264b4", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=8b24f158f75e4496cfc7f8edf9aa41b10dbac9b3", "patch": "@@ -1,8 +1,8 @@\n mod support;\n \n use serde_json::json;\n-use ra_lsp_server::req::{Runnables, RunnablesParams, CodeActionRequest, CodeActionParams};\n-use languageserver_types::{Position, Range, CodeActionContext};\n+use ra_lsp_server::req::{Runnables, RunnablesParams, CodeActionRequest, CodeActionParams, Formatting};\n+use languageserver_types::{Position, Range, CodeActionContext, DocumentFormattingParams, FormattingOptions};\n \n use crate::support::project;\n \n@@ -118,6 +118,58 @@ fn test_eggs() {}\n     );\n }\n \n+use std::collections::HashMap;\n+#[test]\n+fn test_format_document() {\n+    let server = project(\n+        r#\"\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- src/lib.rs\n+mod bar;\n+\n+fn main() {\n+}\n+\n+pub use std::collections::HashMap;\n+\"#,\n+    );\n+    server.wait_for_feedback(\"workspace loaded\");\n+\n+    server.request::<Formatting>(\n+        DocumentFormattingParams {\n+            text_document: server.doc_id(\"src/lib.rs\"),\n+            options: FormattingOptions {\n+                tab_size: 4,\n+                insert_spaces: false,\n+                properties: HashMap::new(),\n+            },\n+        },\n+        json!([\n+            {\n+                \"newText\": r#\"mod bar;\n+\n+fn main() {}\n+\n+pub use std::collections::HashMap;\n+\"#,\n+                \"range\": {\n+                    \"end\": {\n+                        \"character\": 0,\n+                        \"line\": 6\n+                    },\n+                    \"start\": {\n+                        \"character\": 0,\n+                        \"line\": 0\n+                    }\n+                }\n+            }\n+        ]),\n+    );\n+}\n+\n #[test]\n fn test_missing_module_code_action() {\n     let server = project("}]}