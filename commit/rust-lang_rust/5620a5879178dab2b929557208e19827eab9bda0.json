{"sha": "5620a5879178dab2b929557208e19827eab9bda0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MjBhNTg3OTE3OGRhYjJiOTI5NTU3MjA4ZTE5ODI3ZWFiOWJkYTA=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-07-02T10:33:01Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-07-04T03:21:00Z"}, "message": "rustc_lint: use traits::select for methods in unconditional_recursion.", "tree": {"sha": "8aa16016b9163f03148b6e629b3b60ecbfe790eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aa16016b9163f03148b6e629b3b60ecbfe790eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5620a5879178dab2b929557208e19827eab9bda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5620a5879178dab2b929557208e19827eab9bda0", "html_url": "https://github.com/rust-lang/rust/commit/5620a5879178dab2b929557208e19827eab9bda0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5620a5879178dab2b929557208e19827eab9bda0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2fe59afd66f032bea04f55fdb8beb00b53b65d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fe59afd66f032bea04f55fdb8beb00b53b65d7", "html_url": "https://github.com/rust-lang/rust/commit/a2fe59afd66f032bea04f55fdb8beb00b53b65d7"}], "stats": {"total": 236, "additions": 92, "deletions": 144}, "files": [{"sha": "fa06d502728850b785a13ca62916a5babf8e97a0", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 64, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=5620a5879178dab2b929557208e19827eab9bda0", "patch": "@@ -617,7 +617,7 @@ fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n             Ok(rbml_w.emit_def_id(method.def_id))\n         });\n         rbml_w.emit_struct_field(\"origin\", 2, |rbml_w| {\n-            Ok(rbml_w.emit_method_origin(method.origin))\n+            method.origin.encode(rbml_w)\n         });\n         rbml_w.emit_struct_field(\"ty\", 3, |rbml_w| {\n             Ok(rbml_w.emit_ty(ecx, method.ty))\n@@ -633,16 +633,14 @@ impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> {\n                                   -> (u32, ty::MethodCallee<'tcx>) {\n \n         self.read_struct(\"MethodCallee\", 5, |this| {\n-            let autoderef = this.read_struct_field(\"autoderef\", 0, |this| {\n-                Decodable::decode(this)\n-            }).unwrap();\n+            let autoderef = this.read_struct_field(\"autoderef\", 0,\n+                                                   Decodable::decode).unwrap();\n             Ok((autoderef, ty::MethodCallee {\n                 def_id: this.read_struct_field(\"def_id\", 1, |this| {\n                     Ok(this.read_def_id(dcx))\n                 }).unwrap(),\n-                origin: this.read_struct_field(\"origin\", 2, |this| {\n-                    Ok(this.read_method_origin(dcx))\n-                }).unwrap(),\n+                origin: this.read_struct_field(\"origin\", 2,\n+                                               Decodable::decode).unwrap(),\n                 ty: this.read_struct_field(\"ty\", 3, |this| {\n                     Ok(this.read_ty(dcx))\n                 }).unwrap(),\n@@ -713,7 +711,6 @@ impl<'a, 'tcx> get_ty_str_ctxt<'tcx> for e::EncodeContext<'a, 'tcx> {\n trait rbml_writer_helpers<'tcx> {\n     fn emit_closure_type<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,\n                              closure_type: &ty::ClosureTy<'tcx>);\n-    fn emit_method_origin(&mut self, method_origin: ty::MethodOrigin);\n     fn emit_ty<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, ty: Ty<'tcx>);\n     fn emit_tys<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, tys: &[Ty<'tcx>]);\n     fn emit_type_param_def<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,\n@@ -745,37 +742,6 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n         });\n     }\n \n-    fn emit_method_origin(&mut self, method_origin: ty::MethodOrigin) {\n-        use serialize::Encoder;\n-\n-        self.emit_enum(\"MethodOrigin\", |this| {\n-            match method_origin {\n-                ty::MethodOrigin::Inherent => {\n-                    this.emit_enum_variant(\"Inherent\", 0, 0, |_| Ok(()))\n-                }\n-\n-                ty::MethodOrigin::Trait(impl_def_id) => {\n-                    this.emit_enum_variant(\"Trait\", 1, 1, |this| {\n-                        this.emit_option(|this| {\n-                            match impl_def_id {\n-                                None => this.emit_option_none(),\n-                                Some(did) => this.emit_option_some(|this| {\n-                                    Ok(this.emit_def_id(did))\n-                                })\n-                            }\n-                        })\n-                    })\n-                }\n-\n-                ty::MethodOrigin::Object(vtable_index) => {\n-                    this.emit_enum_variant(\"Object\", 2, 1, |this| {\n-                        this.emit_uint(vtable_index)\n-                    })\n-                }\n-            }\n-        });\n-    }\n-\n     fn emit_ty<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>, ty: Ty<'tcx>) {\n         self.emit_opaque(|this| Ok(e::write_type(ecx, this, ty)));\n     }\n@@ -1118,7 +1084,6 @@ impl<'a> doc_decoder_helpers for rbml::Doc<'a> {\n }\n \n trait rbml_decoder_decoder_helpers<'tcx> {\n-    fn read_method_origin(&mut self, dcx: &DecodeContext) -> ty::MethodOrigin;\n     fn read_ty<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Ty<'tcx>;\n     fn read_tys<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Vec<Ty<'tcx>>;\n     fn read_trait_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n@@ -1202,30 +1167,6 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n         }).unwrap()\n     }\n \n-    fn read_method_origin(&mut self, dcx: &DecodeContext) -> ty::MethodOrigin {\n-        self.read_enum(\"MethodOrigin\", |this| {\n-            let variants = &[\"Inherent\", \"Trait\", \"Object\"];\n-            this.read_enum_variant(variants, |this, i| {\n-                match i {\n-                    0 => Ok(ty::MethodOrigin::Inherent),\n-\n-                    1 => this.read_option(|this, b| {\n-                        Ok(ty::MethodOrigin::Trait(if b {\n-                            Some(this.read_def_id(dcx))\n-                        } else {\n-                            None\n-                        }))\n-                    }),\n-\n-                    2 => this.read_uint().map(|idx| ty::MethodOrigin::Object(idx)),\n-\n-                    _ => panic!(\"..\")\n-                }\n-            })\n-        }).unwrap()\n-    }\n-\n-\n     fn read_ty<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>) -> Ty<'tcx> {\n         // Note: regions types embed local node ids.  In principle, we\n         // should translate these node ids into the new decode"}, {"sha": "29ab8de5e658ea7b0d688b402ddea5ab847ad538", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5620a5879178dab2b929557208e19827eab9bda0", "patch": "@@ -625,17 +625,13 @@ pub enum CustomCoerceUnsized {\n     Struct(usize)\n }\n \n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub enum MethodOrigin {\n     /// Inherent impl method call.\n     Inherent,\n \n     /// Statically dispatched trait method call.\n-    /// The DefId is the impl for the trait from which the method comes.\n-    /// This should only be used for certain linting/heuristic purposes\n-    /// since there is no guarantee that this is Some in every situation\n-    /// that it could/should be.\n-    Trait(Option<ast::DefId>),\n+    Trait,\n \n     /// Dynamically dispatched trait method call.\n     /// The usize is the index into the actual runtime vtable."}, {"sha": "d92a5c9c76eda8a236bc169d61a2d05cac81912a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 78, "deletions": 66, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5620a5879178dab2b929557208e19827eab9bda0", "patch": "@@ -33,8 +33,10 @@\n \n use metadata::{csearch, decoder};\n use middle::def::*;\n+use middle::infer;\n use middle::subst::Substs;\n use middle::ty::{self, Ty};\n+use middle::traits;\n use middle::{def, pat_util, stability};\n use middle::const_eval::{eval_const_expr_partial, ConstVal};\n use middle::cfg;\n@@ -1863,24 +1865,18 @@ impl LintPass for UnconditionalRecursion {\n \n     fn check_fn(&mut self, cx: &Context, fn_kind: visit::FnKind, _: &ast::FnDecl,\n                 blk: &ast::Block, sp: Span, id: ast::NodeId) {\n-        // FIXME(#23542) Replace with type ascription.\n-        #![allow(trivial_casts)]\n-\n         type F = for<'tcx> fn(&ty::ctxt<'tcx>,\n                               ast::NodeId, ast::NodeId, ast::Ident, ast::NodeId) -> bool;\n \n-        let (name, checker) = match fn_kind {\n-            visit::FkItemFn(name, _, _, _, _, _) => (name, id_refers_to_this_fn as F),\n-            visit::FkMethod(name, _, _) => (name, id_refers_to_this_method as F),\n+        let method = match fn_kind {\n+            visit::FkItemFn(..) => None,\n+            visit::FkMethod(..) => {\n+                cx.tcx.impl_or_trait_item(local_def(id)).as_opt_method()\n+            }\n             // closures can't recur, so they don't matter.\n             visit::FkFnBlock => return\n         };\n \n-        let impl_def_id = cx.tcx.impl_of_method(local_def(id))\n-            .unwrap_or(local_def(ast::DUMMY_NODE_ID));\n-        assert!(ast_util::is_local(impl_def_id));\n-        let impl_node_id = impl_def_id.node;\n-\n         // Walk through this function (say `f`) looking to see if\n         // every possible path references itself, i.e. the function is\n         // called recursively unconditionally. This is done by trying\n@@ -1931,7 +1927,17 @@ impl LintPass for UnconditionalRecursion {\n             let node_id = cfg.graph.node_data(idx).id();\n \n             // is this a recursive call?\n-            if node_id != ast::DUMMY_NODE_ID && checker(cx.tcx, impl_node_id, id, name, node_id) {\n+            let self_recursive = if node_id != ast::DUMMY_NODE_ID {\n+                match method {\n+                    Some(ref method) => {\n+                        expr_refers_to_this_method(cx.tcx, method, node_id)\n+                    }\n+                    None => expr_refers_to_this_fn(cx.tcx, id, node_id)\n+                }\n+            } else {\n+                false\n+            };\n+            if self_recursive {\n                 self_call_spans.push(cx.tcx.map.span(node_id));\n                 // this is a self call, so we shouldn't explore past\n                 // this node in the CFG.\n@@ -1970,15 +1976,12 @@ impl LintPass for UnconditionalRecursion {\n         // all done\n         return;\n \n-        // Functions for identifying if the given NodeId `id`\n-        // represents a call to the function `fn_id`/method\n-        // `method_id`.\n+        // Functions for identifying if the given Expr NodeId `id`\n+        // represents a call to the function `fn_id`/method `method`.\n \n-        fn id_refers_to_this_fn<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                      _: ast::NodeId,\n-                                      fn_id: ast::NodeId,\n-                                      _: ast::Ident,\n-                                      id: ast::NodeId) -> bool {\n+        fn expr_refers_to_this_fn(tcx: &ty::ctxt,\n+                                  fn_id: ast::NodeId,\n+                                  id: ast::NodeId) -> bool {\n             match tcx.map.get(id) {\n                 ast_map::NodeExpr(&ast::Expr { node: ast::ExprCall(ref callee, _), .. }) => {\n                     tcx.def_map.borrow().get(&callee.id)\n@@ -1988,59 +1991,68 @@ impl LintPass for UnconditionalRecursion {\n             }\n         }\n \n-        // check if the method call `id` refers to method `method_id`\n-        // (with name `method_name` contained in impl `impl_id`).\n-        fn id_refers_to_this_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                          impl_id: ast::NodeId,\n-                                          method_id: ast::NodeId,\n-                                          method_name: ast::Ident,\n-                                          id: ast::NodeId) -> bool {\n-            let did = match tcx.tables.borrow().method_map.get(&ty::MethodCall::expr(id)) {\n-                None => return false,\n-                Some(m) => match m.origin {\n-                    // There's no way to know if a method call via a\n-                    // vtable is recursion, so we assume it's not.\n-                    ty::MethodOrigin::Object(_) => return false,\n-\n-                    // This `did` refers directly to the method definition.\n-                    ty::MethodOrigin::Inherent => m.def_id,\n-\n-                    // The `impl ... for ...` of this method call\n-                    // isn't known, e.g. it might be a default method\n-                    // in a trait, so we get the def-id of the trait\n-                    // method instead.\n-                    ty::MethodOrigin::Trait(None) => {\n-                        let on_self = m.substs.self_ty().map_or(false, |t| t.is_self());\n-                        if !on_self {\n-                            // we can only be recurring in a default\n+        // Check if the method call `id` refers to method `method`.\n+        fn expr_refers_to_this_method(tcx: &ty::ctxt,\n+                                      method: &ty::Method,\n+                                      id: ast::NodeId) -> bool {\n+            let tables = tcx.tables.borrow();\n+            let callee = match tables.method_map.get(&ty::MethodCall::expr(id)) {\n+                Some(m) => m,\n+                None => return false\n+            };\n+            let callee_item = tcx.impl_or_trait_item(callee.def_id);\n+\n+            match callee_item.container() {\n+                // This is an inherent method, so the `def_id` refers\n+                // directly to the method definition.\n+                ty::ImplContainer(_) => {\n+                    callee.def_id == method.def_id\n+                }\n+\n+                // A trait method, from any number of possible sources.\n+                // Attempt to select a concrete impl before checking.\n+                ty::TraitContainer(trait_def_id) => {\n+                    let trait_substs = callee.substs.clone().method_to_trait();\n+                    let trait_substs = tcx.mk_substs(trait_substs);\n+                    let trait_ref = ty::TraitRef::new(trait_def_id, trait_substs);\n+                    let trait_ref = ty::Binder(trait_ref);\n+                    let span = tcx.map.span(id);\n+                    let obligation =\n+                        traits::Obligation::new(traits::ObligationCause::misc(span, id),\n+                                                trait_ref.to_poly_trait_predicate());\n+\n+                    let param_env = ty::ParameterEnvironment::for_item(tcx, method.def_id.node);\n+                    let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(param_env), false);\n+                    let mut selcx = traits::SelectionContext::new(&infcx);\n+                    match selcx.select(&obligation) {\n+                        // The method comes from a `T: Trait` bound.\n+                        // If `T` is `Self`, then this call is inside\n+                        // a default method definition.\n+                        Ok(Some(traits::VtableParam(_))) => {\n+                            let self_ty = callee.substs.self_ty();\n+                            let on_self = self_ty.map_or(false, |t| t.is_self());\n+                            // We can only be recurring in a default\n                             // method if we're being called literally\n                             // on the `Self` type.\n-                            return false\n+                            on_self && callee.def_id == method.def_id\n                         }\n-                        m.def_id\n-                    }\n-\n \n-                    // The `impl` is known, so we check that with a\n-                    // special case:\n-                    ty::MethodOrigin::Trait(Some(impl_def_id)) => {\n+                        // The `impl` is known, so we check that with a\n+                        // special case:\n+                        Ok(Some(traits::VtableImpl(vtable_impl))) => {\n+                            let container = ty::ImplContainer(vtable_impl.impl_def_id);\n+                            // It matches if it comes from the same impl,\n+                            // and has the same method name.\n+                            container == method.container\n+                                && callee_item.name() == method.name\n+                        }\n \n-                        let name = match tcx.map.expect_expr(id).node {\n-                            ast::ExprMethodCall(ref sp_ident, _, _) => sp_ident.node,\n-                            _ => tcx.sess.span_bug(\n-                                tcx.map.span(id),\n-                                \"non-method call expr behaving like a method call?\")\n-                        };\n-                        // It matches if it comes from the same impl,\n-                        // and has the same method name.\n-                        return ast_util::is_local(impl_def_id)\n-                            && impl_def_id.node == impl_id\n-                            && method_name.name == name.name\n+                        // There's no way to know if this call is\n+                        // recursive, so we assume it's not.\n+                        _ => return false\n                     }\n                 }\n-            };\n-\n-            ast_util::is_local(did) && did.node == method_id\n+            }\n         }\n     }\n }"}, {"sha": "dcbe4c35113d05fadbcdc0b7ec0a298ae3749dcb", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=5620a5879178dab2b929557208e19827eab9bda0", "patch": "@@ -852,7 +852,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             }\n             // Trait methods are always all public. The only controlling factor\n             // is whether the trait itself is accessible or not.\n-            ty::MethodOrigin::Trait(_) | ty::MethodOrigin::Object(_) => {\n+            ty::MethodOrigin::Trait | ty::MethodOrigin::Object(_) => {\n                 let method = self.tcx.impl_or_trait_item(callee.def_id);\n                 self.report_error(self.ensure_public(span, method.container().id(),\n                                                      None, \"source trait\"));"}, {"sha": "bac5ea494df99ad64c46bb9b53870968f5f9388c", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=5620a5879178dab2b929557208e19827eab9bda0", "patch": "@@ -892,8 +892,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             ty::MethodOrigin::Inherent => {\n                 (Some(method_callee.def_id), None)\n             }\n-            ty::MethodOrigin::Trait(_) |\n-            ty::MethodOrigin::Object(_) => {\n+            ty::MethodOrigin::Trait | ty::MethodOrigin::Object(_) => {\n                 (None, Some(method_callee.def_id))\n             }\n         };"}, {"sha": "2f415fcf7fd40c07b51670e6f6df5a8c504f6ebf", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=5620a5879178dab2b929557208e19827eab9bda0", "patch": "@@ -128,7 +128,7 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             }\n         }\n \n-        ty::MethodOrigin::Trait(_) => {\n+        ty::MethodOrigin::Trait => {\n             let method_item = bcx.tcx().impl_or_trait_item(method_id);\n             let trait_def_id = method_item.container().id();\n "}, {"sha": "26868c16bd85f3452938488c95103a27a8b4c692", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=5620a5879178dab2b929557208e19827eab9bda0", "patch": "@@ -255,7 +255,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                         &impl_polytype.substs,\n                         &self.tcx().impl_trait_ref(impl_def_id).unwrap());\n                 let substs = impl_trait_ref.substs.clone();\n-                (substs, ty::MethodOrigin::Trait(Some(impl_def_id)))\n+                (substs, ty::MethodOrigin::Trait)\n             }\n \n             probe::TraitPick => {\n@@ -271,15 +271,15 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                                                                  &trait_def.generics,\n                                                                  self.infcx().next_ty_var());\n \n-                (substs, ty::MethodOrigin::Trait(None))\n+                (substs, ty::MethodOrigin::Trait)\n             }\n \n             probe::WhereClausePick(ref poly_trait_ref) => {\n                 // Where clauses can have bound regions in them. We need to instantiate\n                 // those to convert from a poly-trait-ref to a trait-ref.\n                 let trait_ref = self.replace_late_bound_regions_with_fresh_var(&*poly_trait_ref);\n                 let substs = trait_ref.substs.clone();\n-                (substs, ty::MethodOrigin::Trait(None))\n+                (substs, ty::MethodOrigin::Trait)\n             }\n         }\n     }"}, {"sha": "0ba0903172440df92d0467b87c957b90030affa7", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5620a5879178dab2b929557208e19827eab9bda0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=5620a5879178dab2b929557208e19827eab9bda0", "patch": "@@ -307,7 +307,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     let callee = ty::MethodCallee {\n         def_id: method_item.def_id(),\n-        origin: ty::MethodOrigin::Trait(None),\n+        origin: ty::MethodOrigin::Trait,\n         ty: fty,\n         substs: trait_ref.substs\n     };"}]}