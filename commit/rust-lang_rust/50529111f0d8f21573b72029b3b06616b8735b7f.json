{"sha": "50529111f0d8f21573b72029b3b06616b8735b7f", "node_id": "C_kwDOAAsO6NoAKDUwNTI5MTExZjBkOGYyMTU3M2I3MjAyOWIzYjA2NjE2Yjg3MzViN2Y", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-11T17:35:36Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-11T17:35:36Z"}, "message": "Stop using string equality to check if ADT is a union", "tree": {"sha": "9271efe45ce22e19f9bff45a0a2c78c594d4b4a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9271efe45ce22e19f9bff45a0a2c78c594d4b4a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50529111f0d8f21573b72029b3b06616b8735b7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50529111f0d8f21573b72029b3b06616b8735b7f", "html_url": "https://github.com/rust-lang/rust/commit/50529111f0d8f21573b72029b3b06616b8735b7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50529111f0d8f21573b72029b3b06616b8735b7f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9ddaf0d6f6f069ff0c4e90076b35031f2a15d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ddaf0d6f6f069ff0c4e90076b35031f2a15d40", "html_url": "https://github.com/rust-lang/rust/commit/d9ddaf0d6f6f069ff0c4e90076b35031f2a15d40"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "bf5bd744f629869d3fc6abe4864c405408c91231", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/50529111f0d8f21573b72029b3b06616b8735b7f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50529111f0d8f21573b72029b3b06616b8735b7f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=50529111f0d8f21573b72029b3b06616b8735b7f", "patch": "@@ -1479,10 +1479,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // re-link the regions that EIfEO can erase.\n         self.demand_eqtype(span, adt_ty_hint, adt_ty);\n \n-        let (substs, adt_kind, kind_name) = match adt_ty.kind() {\n-            ty::Adt(adt, substs) => (substs, adt.adt_kind(), adt.variant_descr()),\n-            _ => span_bug!(span, \"non-ADT passed to check_expr_struct_fields\"),\n+        let ty::Adt(adt, substs) = adt_ty.kind() else {\n+            span_bug!(span, \"non-ADT passed to check_expr_struct_fields\");\n         };\n+        let adt_kind = adt.adt_kind();\n \n         let mut remaining_fields = variant\n             .fields\n@@ -1520,7 +1520,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     });\n                 } else {\n                     self.report_unknown_field(\n-                        adt_ty, variant, field, ast_fields, kind_name, expr_span,\n+                        adt_ty,\n+                        variant,\n+                        field,\n+                        ast_fields,\n+                        adt.variant_descr(),\n+                        expr_span,\n                     );\n                 }\n \n@@ -1533,7 +1538,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         // Make sure the programmer specified correct number of fields.\n-        if kind_name == \"union\" {\n+        if adt_kind == AdtKind::Union {\n             if ast_fields.len() != 1 {\n                 struct_span_err!(\n                     tcx.sess,\n@@ -1666,7 +1671,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             };\n             self.typeck_results.borrow_mut().fru_field_types_mut().insert(expr_id, fru_tys);\n-        } else if kind_name != \"union\" && !remaining_fields.is_empty() {\n+        } else if adt_kind != AdtKind::Union && !remaining_fields.is_empty() {\n             let inaccessible_remaining_fields = remaining_fields.iter().any(|(_, (_, field))| {\n                 !field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n             });"}]}