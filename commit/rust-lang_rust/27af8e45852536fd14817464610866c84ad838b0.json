{"sha": "27af8e45852536fd14817464610866c84ad838b0", "node_id": "C_kwDOAAsO6NoAKDI3YWY4ZTQ1ODUyNTM2ZmQxNDgxNzQ2NDYxMDg2NmM4NGFkODM4YjA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-03T20:14:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-03T20:14:23Z"}, "message": "Normalize consts' tys when relating with adt_const_params", "tree": {"sha": "401d3199ebc575d2df7e0e400af2a7c954a87ca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/401d3199ebc575d2df7e0e400af2a7c954a87ca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27af8e45852536fd14817464610866c84ad838b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27af8e45852536fd14817464610866c84ad838b0", "html_url": "https://github.com/rust-lang/rust/commit/27af8e45852536fd14817464610866c84ad838b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27af8e45852536fd14817464610866c84ad838b0/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40d5e83dc133d093c22c7ff016b10daa4f40dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40d5e83dc133d093c22c7ff016b10daa4f40dcf", "html_url": "https://github.com/rust-lang/rust/commit/e40d5e83dc133d093c22c7ff016b10daa4f40dcf"}], "stats": {"total": 101, "additions": 97, "deletions": 4}, "files": [{"sha": "9712d66b30a22c8f7dfe98f41dde785b95d0ae7e", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27af8e45852536fd14817464610866c84ad838b0/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27af8e45852536fd14817464610866c84ad838b0/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=27af8e45852536fd14817464610866c84ad838b0", "patch": "@@ -579,10 +579,15 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n     debug!(\"{}.super_relate_consts(a = {:?}, b = {:?})\", relation.tag(), a, b);\n     let tcx = relation.tcx();\n \n-    // FIXME(oli-obk): once const generics can have generic types, this assertion\n-    // will likely get triggered. Move to `normalize_erasing_regions` at that point.\n-    let a_ty = tcx.erase_regions(a.ty());\n-    let b_ty = tcx.erase_regions(b.ty());\n+    let a_ty;\n+    let b_ty;\n+    if relation.tcx().features().adt_const_params {\n+        a_ty = tcx.normalize_erasing_regions(relation.param_env(), a.ty());\n+        b_ty = tcx.normalize_erasing_regions(relation.param_env(), b.ty());\n+    } else {\n+        a_ty = tcx.erase_regions(a.ty());\n+        b_ty = tcx.erase_regions(b.ty());\n+    }\n     if a_ty != b_ty {\n         relation.tcx().sess.delay_span_bug(\n             DUMMY_SP,"}, {"sha": "7036834c4b1190ff97c1e6bd114a1391990655f0", "filename": "src/test/ui/const-generics/issue-97007.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/27af8e45852536fd14817464610866c84ad838b0/src%2Ftest%2Fui%2Fconst-generics%2Fissue-97007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27af8e45852536fd14817464610866c84ad838b0/src%2Ftest%2Fui%2Fconst-generics%2Fissue-97007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-97007.rs?ref=27af8e45852536fd14817464610866c84ad838b0", "patch": "@@ -0,0 +1,88 @@\n+// check-pass\n+\n+#![feature(adt_const_params, generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+mod lib {\n+    const N_ISLANDS: usize = 4;\n+    const N_BRIDGES: usize = 7;\n+    const BRIDGES: [(usize, usize); 7] = [(0, 1), (0, 1), (0, 2), (0, 3), (0, 3), (1, 2), (2, 3)];\n+\n+    pub type Matrix = [[usize; N_ISLANDS]; N_ISLANDS];\n+\n+    const EMPTY_MATRIX: Matrix = [[0; N_ISLANDS]; N_ISLANDS];\n+\n+    const fn build(mut matrix: Matrix, (to, from): (usize, usize)) -> Matrix {\n+        matrix[to][from] += 1;\n+        matrix[from][to] += 1;\n+        matrix\n+    }\n+\n+    pub const fn walk(mut matrix: Matrix, from: usize, to: usize) -> Matrix {\n+        matrix[from][to] -= 1;\n+        matrix[to][from] -= 1;\n+        matrix\n+    }\n+\n+    const fn to_matrix(bridges: [(usize, usize); N_BRIDGES]) -> Matrix {\n+        let matrix = EMPTY_MATRIX;\n+\n+        let matrix = build(matrix, bridges[0]);\n+        let matrix = build(matrix, bridges[1]);\n+        let matrix = build(matrix, bridges[2]);\n+        let matrix = build(matrix, bridges[3]);\n+        let matrix = build(matrix, bridges[4]);\n+        let matrix = build(matrix, bridges[5]);\n+        let matrix = build(matrix, bridges[6]);\n+\n+        matrix\n+    }\n+\n+    const BRIDGE_MATRIX: [[usize; N_ISLANDS]; N_ISLANDS] = to_matrix(BRIDGES);\n+\n+    pub struct Walk<const CURRENT: usize, const REMAINING: Matrix> {\n+        _p: (),\n+    }\n+\n+    impl Walk<0, BRIDGE_MATRIX> {\n+        pub const fn new() -> Self {\n+            Self { _p: () }\n+        }\n+    }\n+\n+    impl<const CURRENT: usize, const REMAINING: Matrix> Walk<CURRENT, REMAINING> {\n+        pub fn proceed_to<const NEXT: usize>(\n+            self,\n+        ) -> Walk<NEXT, { walk(REMAINING, CURRENT, NEXT) }> {\n+            Walk { _p: () }\n+        }\n+    }\n+\n+    pub struct Trophy {\n+        _p: (),\n+    }\n+\n+    impl<const CURRENT: usize> Walk<CURRENT, EMPTY_MATRIX> {\n+        pub fn collect_prize(self) -> Trophy {\n+            Trophy { _p: () }\n+        }\n+    }\n+}\n+\n+pub use lib::{Trophy, Walk};\n+\n+fn main() {\n+    // Example, taking the first step\n+    let _ = Walk::new().proceed_to::<1>();\n+\n+    // Don't be so eager to collect the trophy\n+    // let trophy = Walk::new()\n+    //     .proceed_to::<1>()\n+    //     .proceed_to::<0>()\n+    //     .collect_prize();\n+\n+    // Can't just make a Trophy out of thin air, you must earn it\n+    // let trophy: Trophy = Trophy { _p: () };\n+\n+    // Can you collect the Trophy?\n+}"}]}