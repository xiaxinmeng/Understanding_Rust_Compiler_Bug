{"sha": "e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZTNkNTcwM2IxYTRlYzRmYzU0MmUyOTNmYTcyNjFlM2FkNzllMjk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-02-25T00:01:05Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:20:19Z"}, "message": "Rename ty::GenericParameterDef to GenericParam", "tree": {"sha": "e95f73f2490134698b5edbc1e1d72fbdf3393650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e95f73f2490134698b5edbc1e1d72fbdf3393650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29", "html_url": "https://github.com/rust-lang/rust/commit/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63553547e588d7a44f42ccc41efa338129898a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/63553547e588d7a44f42ccc41efa338129898a6c", "html_url": "https://github.com/rust-lang/rust/commit/63553547e588d7a44f42ccc41efa338129898a6c"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "dd09af10bd93452fb237d1d6253884ad026f9942", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29", "patch": "@@ -753,7 +753,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n     }\n }\n \n-impl_stable_hash_for!(enum ty::GenericParameterDef {\n+impl_stable_hash_for!(enum ty::GenericParam {\n     Lifetime(lt),\n     Type(ty)\n });"}, {"sha": "81e188649b8c30e3dcf04a13fc7a2466b0e6bd43", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29", "patch": "@@ -758,16 +758,16 @@ impl ty::EarlyBoundRegion {\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub enum GenericParameterDef {\n+pub enum GenericParam {\n     Lifetime(RegionParameterDef),\n     Type(TypeParameterDef),\n }\n \n-impl GenericParameterDef {\n+impl GenericParam {\n     pub fn index(&self) -> u32 {\n         match self {\n-            GenericParameterDef::Lifetime(lt) => lt.index,\n-            GenericParameterDef::Type(ty)     => ty.index,\n+            GenericParam::Lifetime(lt) => lt.index,\n+            GenericParam::Type(ty)     => ty.index,\n         }\n     }\n }\n@@ -785,7 +785,7 @@ impl GenericParameterDef {\n pub struct Generics {\n     pub parent: Option<DefId>,\n     pub parent_count: usize,\n-    pub params: Vec<GenericParameterDef>,\n+    pub params: Vec<GenericParam>,\n \n     /// Reverse map to each `TypeParameterDef`'s `index` field\n     pub type_param_to_index: FxHashMap<DefId, u32>,\n@@ -805,7 +805,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n \n     pub fn lifetimes(&self) -> Vec<&RegionParameterDef> {\n         self.params.iter().filter_map(|p| {\n-            if let GenericParameterDef::Lifetime(lt) = p {\n+            if let GenericParam::Lifetime(lt) = p {\n                 Some(lt)\n             } else {\n                 None\n@@ -815,7 +815,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n \n     pub fn types(&self) -> Vec<&TypeParameterDef> {\n         self.params.iter().filter_map(|p| {\n-            if let GenericParameterDef::Type(ty) = p {\n+            if let GenericParam::Type(ty) = p {\n                 Some(ty)\n             } else {\n                 None\n@@ -843,7 +843,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n         if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n             // We're currently assuming that lifetimes precede other generic parameters.\n             match self.params[index as usize - self.has_self as usize] {\n-                ty::GenericParameterDef::Lifetime(ref lt) => lt,\n+                ty::GenericParam::Lifetime(ref lt) => lt,\n                 _ => bug!(\"expected region parameter, but found another generic parameter\")\n             }\n         } else {\n@@ -893,13 +893,13 @@ impl<'a, 'gcx, 'tcx> Generics {\n             if let Some(_) = (idx as usize).checked_sub(type_param_offset) {\n                 assert!(!is_separated_self, \"found a Self after type_param_offset\");\n                 match self.params[idx as usize] {\n-                    ty::GenericParameterDef::Type(ref ty) => ty,\n+                    ty::GenericParam::Type(ref ty) => ty,\n                     _ => bug!(\"expected type parameter, but found another generic parameter\")\n                 }\n             } else {\n                 assert!(is_separated_self, \"non-Self param before type_param_offset\");\n                 match self.params[type_param_offset] {\n-                    ty::GenericParameterDef::Type(ref ty) => ty,\n+                    ty::GenericParam::Type(ref ty) => ty,\n                     _ => bug!(\"expected type parameter, but found another generic parameter\")\n                 }\n             }"}, {"sha": "67cb2d829ff3159e2cb83675155f94578bcfe38c", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29", "patch": "@@ -254,10 +254,10 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n \n         for def in &defs.params {\n             let param = match def {\n-                ty::GenericParameterDef::Lifetime(ref lt) => {\n+                ty::GenericParam::Lifetime(ref lt) => {\n                     UnpackedKind::Lifetime(mk_region(lt, substs))\n                 }\n-                ty::GenericParameterDef::Type(ref ty) => {\n+                ty::GenericParam::Type(ref ty) => {\n                     if skip_self {\n                         skip_self = false;\n                         continue"}, {"sha": "0fc47b93f8f99e50f3983714e08604705ad30ef8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e9e3d5703b1a4ec4fc542e293fa7261e3ad79e29", "patch": "@@ -970,10 +970,10 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    .map(|param| (param.def_id, param.index))\n                                    .collect();\n \n-    let lifetimes: Vec<ty::GenericParameterDef> =\n-        regions.into_iter().map(|lt| ty::GenericParameterDef::Lifetime(lt)).collect();\n-    let types: Vec<ty::GenericParameterDef> =\n-        types.into_iter().map(|ty| ty::GenericParameterDef::Type(ty)).collect();\n+    let lifetimes: Vec<ty::GenericParam> =\n+        regions.into_iter().map(|lt| ty::GenericParam::Lifetime(lt)).collect();\n+    let types: Vec<ty::GenericParam> =\n+        types.into_iter().map(|ty| ty::GenericParam::Type(ty)).collect();\n     let params = lifetimes.into_iter().chain(types.into_iter()).collect();\n \n     tcx.alloc_generics(ty::Generics {"}]}