{"sha": "dfc548dddafbf4e58a568329ebbe29f1eb36a0e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYzU0OGRkZGFmYmY0ZTU4YTU2ODMyOWViYmUyOWYxZWIzNmEwZTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-13T16:19:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-13T19:41:37Z"}, "message": "add option exec-env to set env variables during test execution", "tree": {"sha": "2a5556c9569230186275df690e96c1f5318f5128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a5556c9569230186275df690e96c1f5318f5128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8", "html_url": "https://github.com/rust-lang/rust/commit/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2482fd7631d05b1888e3beac0df3f25d33867b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2482fd7631d05b1888e3beac0df3f25d33867b8", "html_url": "https://github.com/rust-lang/rust/commit/d2482fd7631d05b1888e3beac0df3f25d33867b8"}], "stats": {"total": 103, "additions": 69, "deletions": 34}, "files": [{"sha": "0db9672f50dd61a216fef07731e95897b9fe356d", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=dfc548dddafbf4e58a568329ebbe29f1eb36a0e8", "patch": "@@ -17,13 +17,16 @@ type test_props = {\n     // pretty-printed\n     pp_exact: option<str>,\n     // Modules from aux directory that should be compiled\n-    aux_builds: [str]\n+    aux_builds: [str],\n+    // Environment settings to use during execution\n+    exec_env: [(str,str)]\n };\n \n // Load any test directives embedded in the file\n fn load_props(testfile: str) -> test_props {\n     let mut error_patterns = [];\n     let mut aux_builds = [];\n+    let mut exec_env = [];\n     let mut compile_flags = option::none;\n     let mut pp_exact = option::none;\n     iter_header(testfile) {|ln|\n@@ -43,12 +46,17 @@ fn load_props(testfile: str) -> test_props {\n         option::iter(parse_aux_build(ln)) {|ab|\n             aux_builds += [ab];\n         }\n+\n+        option::iter(parse_exec_env(ln)) {|ee|\n+            exec_env += [ee];\n+        }\n     };\n     ret {\n         error_patterns: error_patterns,\n         compile_flags: compile_flags,\n         pp_exact: pp_exact,\n-        aux_builds: aux_builds\n+        aux_builds: aux_builds,\n+        exec_env: exec_env\n     };\n }\n \n@@ -97,6 +105,18 @@ fn parse_compile_flags(line: str) -> option<str> {\n     parse_name_value_directive(line, \"compile-flags\")\n }\n \n+fn parse_exec_env(line: str) -> option<(str, str)> {\n+    parse_name_value_directive(line, \"exec-env\").map {|nv|\n+        // nv is either FOO or FOO=BAR\n+        let strs = str::splitn_char(nv, '=', 1u);\n+        alt strs.len() {\n+          1u { (strs[0], \"\") }\n+          2u { (strs[0], strs[1]) }\n+          n { fail #fmt[\"Expected 1 or 2 strings, not %u\", n]; }\n+        }\n+    }\n+}\n+\n fn parse_pp_exact(line: str, testfile: str) -> option<str> {\n     alt parse_name_value_directive(line, \"pp-exact\") {\n       option::some(s) { option::some(s) }"}, {"sha": "dc7a3f384ccc825cb1feb4bc659e4d2d5e9037e0", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=dfc548dddafbf4e58a568329ebbe29f1eb36a0e8", "patch": "@@ -5,7 +5,7 @@ import libc::{c_int, pid_t};\n export run;\n \n #[cfg(target_os = \"win32\")]\n-fn target_env(lib_path: str, prog: str) -> option<[(str,str)]> {\n+fn target_env(lib_path: str, prog: str) -> [(str,str)] {\n \n     let env = os::env();\n \n@@ -17,25 +17,29 @@ fn target_env(lib_path: str, prog: str) -> option<[(str,str)]> {\n     if str::ends_with(prog, \"rustc.exe\") {\n         env += [(\"RUST_THREADS\", \"1\")]\n     }\n-    ret some(env);\n+    ret env;\n }\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n-fn target_env(_lib_path: str, _prog: str) -> option<[(str,str)]> {\n-    none\n+fn target_env(_lib_path: str, _prog: str) -> [(str,str)] {\n+    []\n }\n \n \n-fn run(lib_path: str, prog: str, args: [str],\n+fn run(lib_path: str,\n+       prog: str,\n+       args: [str],\n+       env: [(str, str)],\n        input: option<str>) -> {status: int, out: str, err: str} {\n \n     let pipe_in = os::pipe();\n     let pipe_out = os::pipe();\n     let pipe_err = os::pipe();\n-    let pid = spawn_process(prog, args, target_env(lib_path, prog), none,\n-                            pipe_in.in, pipe_out.out, pipe_err.out);\n+    let pid = spawn_process(prog, args,\n+                            some(env + target_env(lib_path, prog)),\n+                            none, pipe_in.in, pipe_out.out, pipe_err.out);\n \n     os::close(pipe_in.in);\n     os::close(pipe_out.out);"}, {"sha": "b86cd334c7983499e2dbdca860134e1d6d4d45ee", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=dfc548dddafbf4e58a568329ebbe29f1eb36a0e8", "patch": "@@ -81,7 +81,6 @@ fn run_rpass_test(config: config, props: test_props, testfile: str) {\n \n     procres = exec_compiled_test(config, props, testfile);\n \n-\n     if procres.status != 0 { fatal_procres(\"test run failed!\", procres); }\n }\n \n@@ -139,8 +138,8 @@ fn run_pretty_test(config: config, props: test_props, testfile: str) {\n     ret;\n \n     fn print_source(config: config, testfile: str, src: str) -> procres {\n-        compose_and_run(config, testfile, make_pp_args,\n-                        config.compile_lib_path, option::some(src))\n+        compose_and_run(config, testfile, make_pp_args(config, testfile),\n+                        [], config.compile_lib_path, option::some(src))\n     }\n \n     fn make_pp_args(config: config, _testfile: str) -> procargs {\n@@ -172,7 +171,9 @@ actual:\\n\\\n     fn typecheck_source(config: config, props: test_props,\n                         testfile: str, src: str) -> procres {\n         compose_and_run_compiler(\n-            config, props, testfile, make_typecheck_args, option::some(src))\n+            config, props, testfile,\n+            make_typecheck_args(config, testfile),\n+            option::some(src))\n     }\n \n     fn make_typecheck_args(config: config, testfile: str) -> procargs {\n@@ -292,24 +293,26 @@ type procres = {status: int, stdout: str, stderr: str, cmdline: str};\n fn compile_test(config: config, props: test_props,\n                 testfile: str) -> procres {\n     let link_args = [\"-L\", aux_output_dir_name(config, testfile)];\n-    compose_and_run_compiler(config, props, testfile,\n-                             make_compile_args(_, props, link_args,\n-                                               make_exe_name, _),\n-                             none)\n+    compose_and_run_compiler(\n+        config, props, testfile,\n+        make_compile_args(config, props, link_args,\n+                          make_exe_name, testfile),\n+        none)\n }\n \n fn exec_compiled_test(config: config, props: test_props,\n                       testfile: str) -> procres {\n     compose_and_run(config, testfile,\n-                             bind make_run_args(_, props, _),\n-                             config.run_lib_path, option::none)\n+                    make_run_args(config, props, testfile),\n+                    props.exec_env,\n+                    config.run_lib_path, option::none)\n }\n \n fn compose_and_run_compiler(\n     config: config,\n     props: test_props,\n     testfile: str,\n-    mk_args: fn(config: config, _testfile: str) -> procargs,\n+    args: procargs,\n     input: option<str>) -> procres {\n \n     if props.aux_builds.is_not_empty() {\n@@ -320,10 +323,10 @@ fn compose_and_run_compiler(\n \n     vec::iter(props.aux_builds) {|rel_ab|\n         let abs_ab = path::connect(config.aux_base, rel_ab);\n-        let mk_compile_args =\n-            make_compile_args(_, props, [\"--lib\"] + extra_link_args,\n-                              bind make_lib_name(_, _, testfile), _);\n-        let auxres = compose_and_run(config, abs_ab, mk_compile_args,\n+        let aux_args =\n+            make_compile_args(config, props, [\"--lib\"] + extra_link_args,\n+                              bind make_lib_name(_, _, testfile), abs_ab);\n+        let auxres = compose_and_run(config, abs_ab, aux_args, [],\n                                      config.compile_lib_path, option::none);\n         if auxres.status != 0 {\n             fatal_procres(\n@@ -332,7 +335,7 @@ fn compose_and_run_compiler(\n         }\n     }\n \n-    compose_and_run(config, testfile, mk_args,\n+    compose_and_run(config, testfile, args, [],\n                     config.compile_lib_path, input)\n }\n \n@@ -344,11 +347,12 @@ fn ensure_dir(path: path) {\n }\n \n fn compose_and_run(config: config, testfile: str,\n-                   make_args: fn(config, str) -> procargs, lib_path: str,\n+                   procargs: procargs,\n+                   procenv: [(str, str)],\n+                   lib_path: str,\n                    input: option<str>) -> procres {\n-    let procargs = make_args(config, testfile);\n     ret program_output(config, testfile, lib_path,\n-                       procargs.prog, procargs.args, input);\n+                       procargs.prog, procargs.args, procenv, input);\n }\n \n fn make_compile_args(config: config, props: test_props, extras: [str],\n@@ -405,14 +409,15 @@ fn split_maybe_args(argstr: option<str>) -> [str] {\n }\n \n fn program_output(config: config, testfile: str, lib_path: str, prog: str,\n-                  args: [str], input: option<str>) -> procres {\n+                  args: [str], env: [(str, str)],\n+                  input: option<str>) -> procres {\n     let cmdline =\n         {\n             let cmdline = make_cmdline(lib_path, prog, args);\n             logv(config, #fmt[\"executing %s\", cmdline]);\n             cmdline\n         };\n-    let res = procsrv::run(lib_path, prog, args, input);\n+    let res = procsrv::run(lib_path, prog, args, env, input);\n     dump_output(config, testfile, res.out, res.err);\n     ret {status: res.status,\n          stdout: res.out,"}, {"sha": "34ba16844d8b9ee4c351b2e3bb4cc33eab9abb9a", "filename": "src/libcore/run.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=dfc548dddafbf4e58a568329ebbe29f1eb36a0e8", "patch": "@@ -98,7 +98,7 @@ fn with_envp<T>(env: option<[(str,str)]>,\n     // On posixy systems we can pass a char** for envp, which is\n     // a null-terminated array of \"k=v\\n\" strings.\n     alt env {\n-      some (es) {\n+      some(es) if !vec::is_empty(es) {\n         let mut tmps = [];\n         let mut ptrs = [];\n \n@@ -111,7 +111,7 @@ fn with_envp<T>(env: option<[(str,str)]>,\n         ptrs += [ptr::null()];\n         vec::as_buf(ptrs) { |p| cb(::unsafe::reinterpret_cast(p)) }\n       }\n-      none {\n+      _ {\n         cb(ptr::null())\n       }\n     }\n@@ -124,7 +124,7 @@ fn with_envp<T>(env: option<[(str,str)]>,\n     // rather a concatenation of null-terminated k=v\\0 sequences, with a final\n     // \\0 to terminate.\n     alt env {\n-      some (es) {\n+      some(es) if !vec::is_empty(es) {\n         let mut blk : [u8] = [];\n         for vec::each(es) {|e|\n             let (k,v) = e;\n@@ -136,7 +136,7 @@ fn with_envp<T>(env: option<[(str,str)]>,\n         blk += [0_u8];\n         vec::as_buf(blk) {|p| cb(::unsafe::reinterpret_cast(p)) }\n       }\n-      none {\n+      _ {\n         cb(ptr::null())\n       }\n     }"}, {"sha": "cddcd4987e5f5972704bd395b47d2213e067d0c8", "filename": "src/test/run-pass/exec-env.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8/src%2Ftest%2Frun-pass%2Fexec-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc548dddafbf4e58a568329ebbe29f1eb36a0e8/src%2Ftest%2Frun-pass%2Fexec-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexec-env.rs?ref=dfc548dddafbf4e58a568329ebbe29f1eb36a0e8", "patch": "@@ -0,0 +1,6 @@\n+// xfail-fast (exec-env not supported in fast mode)\n+// exec-env:TEST_EXEC_ENV=22\n+\n+fn main() {\n+    assert os::getenv(\"TEST_EXEC_ENV\") == some(\"22\");\n+}"}]}