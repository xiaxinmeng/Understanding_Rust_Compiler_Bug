{"sha": "9ffbe69234317859ca910fe5c419cacf4089d60b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZmJlNjkyMzQzMTc4NTljYTkxMGZlNWM0MTljYWNmNDA4OWQ2MGI=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-17T14:00:48Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-17T14:00:48Z"}, "message": "libcore: Add `IteratorUtil::filter_map` method", "tree": {"sha": "631e87d5fe60d2a711157c250d41c8b4906d6633", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631e87d5fe60d2a711157c250d41c8b4906d6633"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ffbe69234317859ca910fe5c419cacf4089d60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ffbe69234317859ca910fe5c419cacf4089d60b", "html_url": "https://github.com/rust-lang/rust/commit/9ffbe69234317859ca910fe5c419cacf4089d60b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ffbe69234317859ca910fe5c419cacf4089d60b/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7e58ebe84513ed65b1694311f8c4f35e53e8c0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7e58ebe84513ed65b1694311f8c4f35e53e8c0e", "html_url": "https://github.com/rust-lang/rust/commit/f7e58ebe84513ed65b1694311f8c4f35e53e8c0e"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "685b4fcac7fc3fb62c1b0d87e408efa5c4608a25", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9ffbe69234317859ca910fe5c419cacf4089d60b/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ffbe69234317859ca910fe5c419cacf4089d60b/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=9ffbe69234317859ca910fe5c419cacf4089d60b", "patch": "@@ -34,6 +34,7 @@ pub trait IteratorUtil<A> {\n     // FIXME: #5898: should be called map\n     fn transform<'r, B>(self, f: &'r fn(A) -> B) -> MapIterator<'r, A, B, Self>;\n     fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> FilterIterator<'r, A, Self>;\n+    fn filter_map<'r,  B>(self, f: &'r fn(A) -> Option<B>) -> FilterMapIterator<'r, A, B, Self>;\n     fn enumerate(self) -> EnumerateIterator<Self>;\n     fn skip_while<'r>(self, predicate: &'r fn(&A) -> bool) -> SkipWhileIterator<'r, A, Self>;\n     fn take_while<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhileIterator<'r, A, Self>;\n@@ -74,6 +75,11 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         FilterIterator{iter: self, predicate: predicate}\n     }\n \n+    #[inline(always)]\n+    fn filter_map<'r, B>(self, f: &'r fn(A) -> Option<B>) -> FilterMapIterator<'r, A, B, T> {\n+        FilterMapIterator { iter: self, f: f }\n+    }\n+\n     #[inline(always)]\n     fn enumerate(self) -> EnumerateIterator<T> {\n         EnumerateIterator{iter: self, count: 0}\n@@ -213,6 +219,28 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for FilterIterator<'self, A, T> {\n     }\n }\n \n+pub struct FilterMapIterator<'self, A, B, T> {\n+    priv iter: T,\n+    priv f: &'self fn(A) -> Option<B>\n+}\n+\n+impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<B> {\n+        loop {\n+            match self.iter.next() {\n+                None    => { return None; }\n+                Some(a) => {\n+                    match (self.f)(a) {\n+                        Some(b) => { return Some(b); }\n+                        None    => { loop; }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n pub struct EnumerateIterator<T> {\n     priv iter: T,\n     priv count: uint\n@@ -432,6 +460,13 @@ mod tests {\n         assert_eq!(i, expected.len());\n     }\n \n+    #[test]\n+    fn test_filter_map() {\n+        let it  = Counter::new(0u, 1u).take(10)\n+            .filter_map(|x: uint| if x.is_even() { Some(x*x) } else { None });\n+        assert_eq!(it.to_vec(), ~[0*0, 2*2, 4*4, 6*6, 8*8]);\n+    }\n+\n     #[test]\n     fn test_iterator_enumerate() {\n         let xs = [0u, 1, 2, 3, 4, 5];"}]}