{"sha": "623faac84ec56fa545163ab81d7e3b759a392353", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyM2ZhYWM4NGVjNTZmYTU0NTE2M2FiODFkN2UzYjc1OWEzOTIzNTM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-06-06T09:50:59Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2020-06-06T09:50:59Z"}, "message": "Cleanup: Use rustc's `same_types` instead of our `same_tys`", "tree": {"sha": "81f8269594f6f9e078753c773b9271773235253e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81f8269594f6f9e078753c773b9271773235253e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/623faac84ec56fa545163ab81d7e3b759a392353", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE6VFioMHrom999LRAK0OZxL9Ny94FAl7bZx4ACgkQK0OZxL9N\ny97ICw/9G1mvUX4+oON2Kya1Vqh3NC2Oxj8qiokB6rK40oKI9nWla1sJa8083ZVW\nBHpCQj+0hBTrMoVMHKqZXsbyKP1dRvMltA0TTfbaOw7VRkNKpBaWKAUnBHeKkn8p\ni/gxYhvnbQ1Nzf32tQh2Hkw0sFvjo0qrda5rlqIxz3ZjX3nAL7pdGGzvc4FbqVkR\nxQqOQ0JsnhzmscQV5oA82DJoLede9+f5+fW/73lRJqohSgeU/LOvURiPshhmSHJi\ng1RsBvzZd59qE/IhrflbkzclMDr1NIFiw2vx1os6jdEHlO2MFxycssJqPb4ILI1F\nkU40knljLHu7DfoyzyxZP2cIYjpgqXdLCOm7qmEpLLuoXpeqpomUJxfxS3DUG5nZ\nUpYT5ukoqx7A2XrWxDwe0SJIRYO+uHzlQ2NqDTQRWNJdTRuWWL6Kwu+D6UHVALYU\nMnuVjyfG1vWTRBlyCwRvvvEquTayKiyQ7YmlnT9Vkl2+tAQbyCYrndUx1ykSm5zt\nyDHSX9AMTVRcFGA1j9JtFBXtoeufuf9By978KZaYuK8HdlzBxps6Nv+8c8XcOCSl\n5llNezfYc6dDVQTlL3ONC8PUXlmBs85dUkJtYDW81hpJwnNSjxQzBEHoMqpIfKtz\nwh3uvyHnvXUWc2zSzl/5vAxjt0T6UCkRyfwNsaqg9f1i3Okna1w=\n=z4KX\n-----END PGP SIGNATURE-----", "payload": "tree 81f8269594f6f9e078753c773b9271773235253e\nparent ea7066a01dceec00e19e1c13b90c41acf031d488\nauthor Philipp Hansch <dev@phansch.net> 1591437059 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1591437059 +0200\n\nCleanup: Use rustc's `same_types` instead of our `same_tys`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/623faac84ec56fa545163ab81d7e3b759a392353", "html_url": "https://github.com/rust-lang/rust/commit/623faac84ec56fa545163ab81d7e3b759a392353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/623faac84ec56fa545163ab81d7e3b759a392353/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea7066a01dceec00e19e1c13b90c41acf031d488", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7066a01dceec00e19e1c13b90c41acf031d488", "html_url": "https://github.com/rust-lang/rust/commit/ea7066a01dceec00e19e1c13b90c41acf031d488"}], "stats": {"total": 76, "additions": 29, "deletions": 47}, "files": [{"sha": "b6d50bdfa1466f61ea04325ad4bc02c840ba9963", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=623faac84ec56fa545163ab81d7e3b759a392353", "patch": "@@ -1,9 +1,9 @@\n-use crate::utils::{get_parent_expr, higher, if_sequence, same_tys, snippet, span_lint_and_note, span_lint_and_then};\n+use crate::utils::{get_parent_expr, higher, if_sequence, snippet, span_lint_and_note, span_lint_and_then};\n use crate::utils::{SpanlessEq, SpanlessHash};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{Arm, Block, Expr, ExprKind, MatchSource, Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{Ty, TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n use std::collections::hash_map::Entry;\n@@ -242,15 +242,11 @@ fn lint_same_fns_in_if_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n \n /// Implementation of `MATCH_SAME_ARMS`.\n fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr<'_>) {\n-    fn same_bindings<'tcx>(\n-        cx: &LateContext<'_, 'tcx>,\n-        lhs: &FxHashMap<Symbol, Ty<'tcx>>,\n-        rhs: &FxHashMap<Symbol, Ty<'tcx>>,\n-    ) -> bool {\n+    fn same_bindings<'tcx>(lhs: &FxHashMap<Symbol, Ty<'tcx>>, rhs: &FxHashMap<Symbol, Ty<'tcx>>) -> bool {\n         lhs.len() == rhs.len()\n             && lhs\n                 .iter()\n-                .all(|(name, l_ty)| rhs.get(name).map_or(false, |r_ty| same_tys(cx, l_ty, r_ty)))\n+                .all(|(name, l_ty)| rhs.get(name).map_or(false, |r_ty| TyS::same_type(l_ty, r_ty)))\n     }\n \n     if let ExprKind::Match(_, ref arms, MatchSource::Normal) = expr.kind {\n@@ -269,7 +265,7 @@ fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr<'_>) {\n             (min_index..=max_index).all(|index| arms[index].guard.is_none()) &&\n                 SpanlessEq::new(cx).eq_expr(&lhs.body, &rhs.body) &&\n                 // all patterns should have the same bindings\n-                same_bindings(cx, &bindings(cx, &lhs.pat), &bindings(cx, &rhs.pat))\n+                same_bindings(&bindings(cx, &lhs.pat), &bindings(cx, &rhs.pat))\n         };\n \n         let indexed_arms: Vec<(usize, &Arm<'_>)> = arms.iter().enumerate().collect();"}, {"sha": "57c62d739640f2c7f4640f08991d8375300bcade", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=623faac84ec56fa545163ab81d7e3b759a392353", "patch": "@@ -8,7 +8,7 @@ use crate::utils::{\n     multispan_sugg, snippet, snippet_opt, snippet_with_applicability, span_lint, span_lint_and_help,\n     span_lint_and_sugg, span_lint_and_then, SpanlessEq,\n };\n-use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sugg};\n+use crate::utils::{is_type_diagnostic_item, qpath_res, sugg};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -24,7 +24,7 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::middle::region;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -1256,7 +1256,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>, e\n             } else if method_name == \"into_iter\" && match_trait_method(cx, arg, &paths::INTO_ITERATOR) {\n                 let receiver_ty = cx.tables.expr_ty(&args[0]);\n                 let receiver_ty_adjusted = cx.tables.expr_ty_adjusted(&args[0]);\n-                if same_tys(cx, receiver_ty, receiver_ty_adjusted) {\n+                if TyS::same_type(receiver_ty, receiver_ty_adjusted) {\n                     let mut applicability = Applicability::MachineApplicable;\n                     let object = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);\n                     span_lint_and_sugg(\n@@ -1277,7 +1277,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>, e\n                             mutbl: Mutability::Not,\n                         },\n                     );\n-                    if same_tys(cx, receiver_ty_adjusted, ref_receiver_ty) {\n+                    if TyS::same_type(receiver_ty_adjusted, ref_receiver_ty) {\n                         lint_iter_method(cx, args, arg, method_name)\n                     }\n                 }"}, {"sha": "78d69690c2d7ccca7166764fa56f7f3d03a937c1", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=623faac84ec56fa545163ab81d7e3b759a392353", "patch": "@@ -18,7 +18,7 @@ use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, SymbolStr};\n@@ -29,9 +29,9 @@ use crate::utils::{\n     get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro, is_copy,\n     is_ctor_or_promotable_const_function, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n     match_def_path, match_qpath, match_trait_method, match_type, match_var, method_calls, method_chain_args, paths,\n-    remove_blocks, return_ty, same_tys, single_segment_path, snippet, snippet_with_applicability,\n-    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n-    span_lint_and_then, sugg, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n+    remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite,\n+    span_lint, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty,\n+    walk_ptrs_ty_depth, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -1548,7 +1548,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n \n             let contains_self_ty = |ty: Ty<'tcx>| {\n                 ty.walk().any(|inner| match inner.unpack() {\n-                    GenericArgKind::Type(inner_ty) => same_tys(cx, self_ty, inner_ty),\n+                    GenericArgKind::Type(inner_ty) => TyS::same_type(self_ty, inner_ty),\n \n                     GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n                 })\n@@ -1575,7 +1575,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                 }\n             }\n \n-            if name == \"new\" && !same_tys(cx, ret_ty, self_ty) {\n+            if name == \"new\" && !TyS::same_type(ret_ty, self_ty) {\n                 span_lint(\n                     cx,\n                     NEW_RET_NO_SELF,"}, {"sha": "dd236535c18ad9d6aed4c0fc5105d1b12f598a78", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=623faac84ec56fa545163ab81d7e3b759a392353", "patch": "@@ -1,13 +1,13 @@\n use crate::utils::paths;\n use crate::utils::sugg::DiagnosticBuilderExt;\n-use crate::utils::{get_trait_def_id, return_ty, same_tys, span_lint_hir_and_then};\n+use crate::utils::{get_trait_def_id, return_ty, span_lint_hir_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::HirIdSet;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{Ty, TyS};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -93,7 +93,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                             let self_def_id = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if_chain! {\n-                                if same_tys(cx, self_ty, return_ty(cx, id));\n+                                if TyS::same_type(self_ty, return_ty(cx, id));\n                                 if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n                                 then {\n                                     if self.impling_types.is_none() {"}, {"sha": "bc5fe44b30f8f9868421600d2b29043ee30247e9", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=623faac84ec56fa545163ab81d7e3b759a392353", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::{\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, InferTy, Ty, TyCtxt, TypeckTables};\n+use rustc_middle::ty::{self, InferTy, Ty, TyCtxt, TyS, TypeckTables};\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::Span;\n@@ -31,7 +31,7 @@ use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_type_diagnostic_item,\n     last_path_segment, match_def_path, match_path, method_chain_args, multispan_sugg, numeric_literal::NumericLiteral,\n-    qpath_res, same_tys, sext, snippet, snippet_block_with_applicability, snippet_opt, snippet_with_applicability,\n+    qpath_res, sext, snippet, snippet_block_with_applicability, snippet_opt, snippet_with_applicability,\n     snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n@@ -2556,7 +2556,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n             if let ExprKind::Path(QPath::TypeRelative(ref ty, ref method)) = fun.kind;\n             if let TyKind::Path(QPath::Resolved(None, ty_path)) = ty.kind;\n             then {\n-                if !same_tys(self.cx, self.target.ty(), self.body.expr_ty(e)) {\n+                if !TyS::same_type(self.target.ty(), self.body.expr_ty(e)) {\n                     return;\n                 }\n "}, {"sha": "141035a980adeabcc50cb47f7e0627c3a32fd8b5", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=623faac84ec56fa545163ab81d7e3b759a392353", "patch": "@@ -1,12 +1,12 @@\n use crate::utils::{\n-    is_type_diagnostic_item, match_def_path, match_trait_method, paths, same_tys, snippet, snippet_with_macro_callsite,\n+    is_type_diagnostic_item, match_def_path, match_trait_method, paths, snippet, snippet_with_macro_callsite,\n     span_lint_and_help, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, TyS};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n@@ -65,7 +65,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                 if match_trait_method(cx, e, &paths::INTO) && &*name.ident.as_str() == \"into\" {\n                     let a = cx.tables.expr_ty(e);\n                     let b = cx.tables.expr_ty(&args[0]);\n-                    if same_tys(cx, a, b) {\n+                    if TyS::same_type(a, b) {\n                         let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n                         span_lint_and_sugg(\n                             cx,\n@@ -81,7 +81,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                 if match_trait_method(cx, e, &paths::INTO_ITERATOR) && &*name.ident.as_str() == \"into_iter\" {\n                     let a = cx.tables.expr_ty(e);\n                     let b = cx.tables.expr_ty(&args[0]);\n-                    if same_tys(cx, a, b) {\n+                    if TyS::same_type(a, b) {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n                         span_lint_and_sugg(\n                             cx,\n@@ -101,7 +101,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                         if is_type_diagnostic_item(cx, a, sym!(result_type));\n                         if let ty::Adt(_, substs) = a.kind;\n                         if let Some(a_type) = substs.types().next();\n-                        if same_tys(cx, a_type, b);\n+                        if TyS::same_type(a_type, b);\n \n                         then {\n                             span_lint_and_help(\n@@ -131,7 +131,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                             if is_type_diagnostic_item(cx, a, sym!(result_type));\n                             if let ty::Adt(_, substs) = a.kind;\n                             if let Some(a_type) = substs.types().next();\n-                            if same_tys(cx, a_type, b);\n+                            if TyS::same_type(a_type, b);\n \n                             then {\n                                 let hint = format!(\"consider removing `{}()`\", snippet(cx, path.span, \"TryFrom::try_from\"));\n@@ -148,7 +148,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n \n                         if_chain! {\n                             if match_def_path(cx, def_id, &paths::FROM_FROM);\n-                            if same_tys(cx, a, b);\n+                            if TyS::same_type(a, b);\n \n                             then {\n                                 let sugg = snippet(cx, args[0].span.source_callsite(), \"<expr>\").into_owned();"}, {"sha": "9a6750c51abe31c654317ed50fb3ddac2a10119f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623faac84ec56fa545163ab81d7e3b759a392353/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=623faac84ec56fa545163ab81d7e3b759a392353", "patch": "@@ -40,7 +40,7 @@ use rustc_hir::{\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::{self, layout::IntegerExt, subst::GenericArg, Binder, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, layout::IntegerExt, subst::GenericArg, Ty, TyCtxt, TypeFoldable};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::symbol::{self, kw, Symbol};\n@@ -879,20 +879,6 @@ pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: hir::HirId) -> T\n     cx.tcx.erase_late_bound_regions(&ret_ty)\n }\n \n-/// Checks if two types are the same.\n-///\n-/// This discards any lifetime annotations, too.\n-//\n-// FIXME: this works correctly for lifetimes bounds (`for <'a> Foo<'a>` ==\n-// `for <'b> Foo<'b>`, but not for type parameters).\n-pub fn same_tys<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n-    let a = cx.tcx.erase_late_bound_regions(&Binder::bind(a));\n-    let b = cx.tcx.erase_late_bound_regions(&Binder::bind(b));\n-    cx.tcx\n-        .infer_ctxt()\n-        .enter(|infcx| infcx.can_eq(cx.param_env, a, b).is_ok())\n-}\n-\n /// Returns `true` if the given type is an `unsafe` function.\n pub fn type_is_unsafe_function<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.kind {"}]}