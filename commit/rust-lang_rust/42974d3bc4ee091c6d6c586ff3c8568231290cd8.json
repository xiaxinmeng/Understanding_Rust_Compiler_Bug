{"sha": "42974d3bc4ee091c6d6c586ff3c8568231290cd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOTc0ZDNiYzRlZTA5MWM2ZDZjNTg2ZmYzYzg1NjgyMzEyOTBjZDg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-13T15:54:40Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-16T00:50:28Z"}, "message": "std: simplify the string comparison implementations, using iterators.", "tree": {"sha": "12e8aa3574e6aa0b9413356f082a5a8a8ae1597c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12e8aa3574e6aa0b9413356f082a5a8a8ae1597c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42974d3bc4ee091c6d6c586ff3c8568231290cd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42974d3bc4ee091c6d6c586ff3c8568231290cd8", "html_url": "https://github.com/rust-lang/rust/commit/42974d3bc4ee091c6d6c586ff3c8568231290cd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42974d3bc4ee091c6d6c586ff3c8568231290cd8/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1886680e00850843e2524fba609ddba6a13180b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1886680e00850843e2524fba609ddba6a13180b", "html_url": "https://github.com/rust-lang/rust/commit/f1886680e00850843e2524fba609ddba6a13180b"}], "stats": {"total": 44, "additions": 14, "deletions": 30}, "files": [{"sha": "1f823a078c4f7e7dfd066aa2ac109b54a64811d9", "filename": "src/libstd/str.rs", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/42974d3bc4ee091c6d6c586ff3c8568231290cd8/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42974d3bc4ee091c6d6c586ff3c8568231290cd8/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=42974d3bc4ee091c6d6c586ff3c8568231290cd8", "patch": "@@ -530,54 +530,38 @@ pub fn eq(a: &~str, b: &~str) -> bool {\n     eq_slice(*a, *b)\n }\n \n-#[inline]\n-fn cmp(a: &str, b: &str) -> Ordering {\n-    let low = uint::min(a.len(), b.len());\n-\n-    for uint::range(0, low) |idx| {\n-        match a[idx].cmp(&b[idx]) {\n-          Greater => return Greater,\n-          Less => return Less,\n-          Equal => ()\n-        }\n-    }\n-\n-    a.len().cmp(&b.len())\n-}\n-\n #[cfg(not(test))]\n impl<'self> TotalOrd for &'self str {\n     #[inline]\n-    fn cmp(&self, other: & &'self str) -> Ordering { cmp(*self, *other) }\n+    fn cmp(&self, other: & &'self str) -> Ordering {\n+        for self.bytes_iter().zip(other.bytes_iter()).advance |(s_b, o_b)| {\n+            match s_b.cmp(&o_b) {\n+                Greater => return Greater,\n+                Less => return Less,\n+                Equal => ()\n+            }\n+        }\n+\n+        self.len().cmp(&other.len())\n+    }\n }\n \n #[cfg(not(test))]\n impl TotalOrd for ~str {\n     #[inline]\n-    fn cmp(&self, other: &~str) -> Ordering { cmp(*self, *other) }\n+    fn cmp(&self, other: &~str) -> Ordering { self.as_slice().cmp(&other.as_slice()) }\n }\n \n #[cfg(not(test))]\n impl TotalOrd for @str {\n     #[inline]\n-    fn cmp(&self, other: &@str) -> Ordering { cmp(*self, *other) }\n+    fn cmp(&self, other: &@str) -> Ordering { self.as_slice().cmp(&other.as_slice()) }\n }\n \n /// Bytewise slice less than\n #[inline]\n fn lt(a: &str, b: &str) -> bool {\n-    let (a_len, b_len) = (a.len(), b.len());\n-    let end = uint::min(a_len, b_len);\n-\n-    let mut i = 0;\n-    while i < end {\n-        let (c_a, c_b) = (a[i], b[i]);\n-        if c_a < c_b { return true; }\n-        if c_a > c_b { return false; }\n-        i += 1;\n-    }\n-\n-    return a_len < b_len;\n+    a.cmp(& b) == Less\n }\n \n /// Bytewise less than or equal"}]}