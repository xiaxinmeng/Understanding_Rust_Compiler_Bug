{"sha": "96d565be014d462e9bd235bb42ce768cabed16b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZDU2NWJlMDE0ZDQ2MmU5YmQyMzViYjQyY2U3NjhjYWJlZDE2YjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-29T14:50:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-29T14:50:17Z"}, "message": "Auto merge of #60039 - rasendubi:assert-trailing-junk, r=alexcrichton\n\nMake assert! ensure the macro is parsed completely\n\nFixes https://github.com/rust-lang/rust/issues/60024", "tree": {"sha": "9981d6c72fb6fa52237e7a0d1d9bccb3a2e028aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9981d6c72fb6fa52237e7a0d1d9bccb3a2e028aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96d565be014d462e9bd235bb42ce768cabed16b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96d565be014d462e9bd235bb42ce768cabed16b5", "html_url": "https://github.com/rust-lang/rust/commit/96d565be014d462e9bd235bb42ce768cabed16b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96d565be014d462e9bd235bb42ce768cabed16b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00acb7b24337eb138c934bde7a1efa5ee6a8b797", "url": "https://api.github.com/repos/rust-lang/rust/commits/00acb7b24337eb138c934bde7a1efa5ee6a8b797", "html_url": "https://github.com/rust-lang/rust/commit/00acb7b24337eb138c934bde7a1efa5ee6a8b797"}, {"sha": "f29e9a5cb83ef6dca14652b323e2c00c36997a54", "url": "https://api.github.com/repos/rust-lang/rust/commits/f29e9a5cb83ef6dca14652b323e2c00c36997a54", "html_url": "https://github.com/rust-lang/rust/commit/f29e9a5cb83ef6dca14652b323e2c00c36997a54"}], "stats": {"total": 165, "additions": 151, "deletions": 14}, "files": [{"sha": "cd69733571d5af6a12f4d9b6c8f9ad161e337d44", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 67, "deletions": 14, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/96d565be014d462e9bd235bb42ce768cabed16b5/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d565be014d462e9bd235bb42ce768cabed16b5/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=96d565be014d462e9bd235bb42ce768cabed16b5", "patch": "@@ -1,10 +1,11 @@\n-use errors::DiagnosticBuilder;\n+use errors::{Applicability, DiagnosticBuilder};\n \n use syntax::ast::{self, *};\n use syntax::source_map::Spanned;\n use syntax::ext::base::*;\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token;\n+use syntax::parse::parser::Parser;\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n@@ -74,17 +75,69 @@ fn parse_assert<'a>(\n         return Err(err);\n     }\n \n-    Ok(Assert {\n-        cond_expr: parser.parse_expr()?,\n-        custom_message: if parser.eat(&token::Comma) {\n-            let ts = parser.parse_tokens();\n-            if !ts.is_empty() {\n-                Some(ts)\n-            } else {\n-                None\n-            }\n-        } else {\n-            None\n-        },\n-    })\n+    let cond_expr = parser.parse_expr()?;\n+\n+    // Some crates use the `assert!` macro in the following form (note extra semicolon):\n+    //\n+    // assert!(\n+    //     my_function();\n+    // );\n+    //\n+    // Warn about semicolon and suggest removing it. Eventually, this should be turned into an\n+    // error.\n+    if parser.token == token::Semi {\n+        let mut err = cx.struct_span_warn(sp, \"macro requires an expression as an argument\");\n+        err.span_suggestion(\n+            parser.span,\n+            \"try removing semicolon\",\n+            String::new(),\n+            Applicability::MaybeIncorrect\n+        );\n+        err.note(\"this is going to be an error in the future\");\n+        err.emit();\n+\n+        parser.bump();\n+    }\n+\n+    // Some crates use the `assert!` macro in the following form (note missing comma before\n+    // message):\n+    //\n+    // assert!(true \"error message\");\n+    //\n+    // Parse this as an actual message, and suggest inserting a comma. Eventually, this should be\n+    // turned into an error.\n+    let custom_message = if let token::Literal(token::Lit::Str_(_), _) = parser.token {\n+        let mut err = cx.struct_span_warn(parser.span, \"unexpected string literal\");\n+        let comma_span = cx.source_map().next_point(parser.prev_span);\n+        err.span_suggestion_short(\n+            comma_span,\n+            \"try adding a comma\",\n+            \", \".to_string(),\n+            Applicability::MaybeIncorrect\n+        );\n+        err.note(\"this is going to be an error in the future\");\n+        err.emit();\n+\n+        parse_custom_message(&mut parser)\n+    } else if parser.eat(&token::Comma) {\n+        parse_custom_message(&mut parser)\n+    } else {\n+        None\n+    };\n+\n+    if parser.token != token::Eof {\n+        parser.expect_one_of(&[], &[])?;\n+        unreachable!();\n+    }\n+\n+    Ok(Assert { cond_expr, custom_message })\n+}\n+\n+fn parse_custom_message<'a>(parser: &mut Parser<'a>) -> Option<TokenStream> {\n+    let ts = parser.parse_tokens();\n+    if !ts.is_empty() {\n+        Some(ts)\n+    } else {\n+        None\n+    }\n }"}, {"sha": "676ae05bf0fa67b4c1516408ca6a1636651338ec", "filename": "src/test/ui/macros/assert-trailing-junk.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/96d565be014d462e9bd235bb42ce768cabed16b5/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d565be014d462e9bd235bb42ce768cabed16b5/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.rs?ref=96d565be014d462e9bd235bb42ce768cabed16b5", "patch": "@@ -0,0 +1,24 @@\n+// Ensure assert macro does not ignore trailing garbage.\n+//\n+// See https://github.com/rust-lang/rust/issues/60024 for details.\n+\n+fn main() {\n+    assert!(true some extra junk, \"whatever\");\n+    //~^ ERROR expected one of\n+\n+    assert!(true some extra junk);\n+    //~^ ERROR expected one of\n+\n+    assert!(true, \"whatever\" blah);\n+    //~^ ERROR no rules expected\n+\n+    assert!(true \"whatever\" blah);\n+    //~^ WARN unexpected string literal\n+    //~^^ ERROR no rules expected\n+\n+    assert!(true;);\n+    //~^ WARN macro requires an expression\n+\n+    assert!(false || true \"error message\");\n+    //~^ WARN unexpected string literal\n+}"}, {"sha": "6fc0a278461097b3c68b1cafe4abe9b59d3348cd", "filename": "src/test/ui/macros/assert-trailing-junk.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/96d565be014d462e9bd235bb42ce768cabed16b5/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96d565be014d462e9bd235bb42ce768cabed16b5/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr?ref=96d565be014d462e9bd235bb42ce768cabed16b5", "patch": "@@ -0,0 +1,60 @@\n+error: expected one of `,`, `.`, `?`, or an operator, found `some`\n+  --> $DIR/assert-trailing-junk.rs:6:18\n+   |\n+LL |     assert!(true some extra junk, \"whatever\");\n+   |                  ^^^^ expected one of `,`, `.`, `?`, or an operator here\n+\n+error: expected one of `,`, `.`, `?`, or an operator, found `some`\n+  --> $DIR/assert-trailing-junk.rs:9:18\n+   |\n+LL |     assert!(true some extra junk);\n+   |                  ^^^^ expected one of `,`, `.`, `?`, or an operator here\n+\n+error: no rules expected the token `blah`\n+  --> $DIR/assert-trailing-junk.rs:12:30\n+   |\n+LL |     assert!(true, \"whatever\" blah);\n+   |                             -^^^^ no rules expected this token in macro call\n+   |                             |\n+   |                             help: missing comma here\n+\n+warning: unexpected string literal\n+  --> $DIR/assert-trailing-junk.rs:15:18\n+   |\n+LL |     assert!(true \"whatever\" blah);\n+   |                 -^^^^^^^^^^\n+   |                 |\n+   |                 help: try adding a comma\n+   |\n+   = note: this is going to be an error in the future\n+\n+error: no rules expected the token `blah`\n+  --> $DIR/assert-trailing-junk.rs:15:29\n+   |\n+LL |     assert!(true \"whatever\" blah);\n+   |                            -^^^^ no rules expected this token in macro call\n+   |                            |\n+   |                            help: missing comma here\n+\n+warning: macro requires an expression as an argument\n+  --> $DIR/assert-trailing-junk.rs:19:5\n+   |\n+LL |     assert!(true;);\n+   |     ^^^^^^^^^^^^-^^\n+   |                 |\n+   |                 help: try removing semicolon\n+   |\n+   = note: this is going to be an error in the future\n+\n+warning: unexpected string literal\n+  --> $DIR/assert-trailing-junk.rs:22:27\n+   |\n+LL |     assert!(false || true \"error message\");\n+   |                          -^^^^^^^^^^^^^^^\n+   |                          |\n+   |                          help: try adding a comma\n+   |\n+   = note: this is going to be an error in the future\n+\n+error: aborting due to 4 previous errors\n+"}]}