{"sha": "66a7db9a3593b1bc4744239a21520369f0418d3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YTdkYjlhMzU5M2IxYmM0NzQ0MjM5YTIxNTIwMzY5ZjA0MThkM2M=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-05-30T06:01:35Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-06-03T16:23:01Z"}, "message": "make a llvm-tools rustup component", "tree": {"sha": "362dc1094b491474856afaeee00a962a97869315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/362dc1094b491474856afaeee00a962a97869315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66a7db9a3593b1bc4744239a21520369f0418d3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66a7db9a3593b1bc4744239a21520369f0418d3c", "html_url": "https://github.com/rust-lang/rust/commit/66a7db9a3593b1bc4744239a21520369f0418d3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66a7db9a3593b1bc4744239a21520369f0418d3c/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e673073f349f9b7cadaf809f8b88a2bfd296769", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e673073f349f9b7cadaf809f8b88a2bfd296769", "html_url": "https://github.com/rust-lang/rust/commit/8e673073f349f9b7cadaf809f8b88a2bfd296769"}], "stats": {"total": 147, "additions": 103, "deletions": 44}, "files": [{"sha": "e0932dbf91a13973a22ad6788962c1a62c95c3ad", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=66a7db9a3593b1bc4744239a21520369f0418d3c", "patch": "@@ -451,6 +451,7 @@ impl<'a> Builder<'a> {\n                 dist::Cargo,\n                 dist::Rls,\n                 dist::Rustfmt,\n+                dist::LlvmTools,\n                 dist::Extended,\n                 dist::HashSign\n             ),"}, {"sha": "231ed9d40d2de2660492a0a6cc4e431875b5e7a2", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=66a7db9a3593b1bc4744239a21520369f0418d3c", "patch": "@@ -31,7 +31,7 @@ use filetime::FileTime;\n use serde_json;\n \n use util::{exe, libdir, is_dylib, CiEnv};\n-use {Compiler, Mode, LLVM_TOOLS};\n+use {Compiler, Mode};\n use native;\n use tool;\n \n@@ -775,23 +775,6 @@ fn copy_codegen_backends_to_sysroot(builder: &Builder,\n     }\n }\n \n-fn copy_llvm_tools_to_sysroot(builder: &Builder,\n-                              target_compiler: Compiler) {\n-    let target = target_compiler.host;\n-\n-    let dst = builder.sysroot_libdir(target_compiler, target)\n-        .parent()\n-        .unwrap()\n-        .join(\"bin\");\n-    t!(fs::create_dir_all(&dst));\n-\n-    let src = builder.llvm_out(target).join(\"bin\");\n-    for tool in LLVM_TOOLS {\n-        let exe = exe(tool, &target);\n-        builder.copy(&src.join(&exe), &dst.join(&exe));\n-    }\n-}\n-\n fn copy_lld_to_sysroot(builder: &Builder,\n                        target_compiler: Compiler,\n                        lld_install_root: &Path) {\n@@ -983,9 +966,6 @@ impl Step for Assemble {\n         copy_codegen_backends_to_sysroot(builder,\n                                          build_compiler,\n                                          target_compiler);\n-        if builder.config.ship_llvm_tools {\n-            copy_llvm_tools_to_sysroot(builder, target_compiler);\n-        }\n         if let Some(lld_install) = lld_install {\n             copy_lld_to_sysroot(builder, target_compiler, &lld_install);\n         }"}, {"sha": "c6b1b8724700380a0b83e4786497aeeb380b23e9", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=66a7db9a3593b1bc4744239a21520369f0418d3c", "patch": "@@ -88,7 +88,7 @@ pub struct Config {\n     pub llvm_link_jobs: Option<u32>,\n \n     pub lld_enabled: bool,\n-    pub ship_llvm_tools: bool,\n+    pub llvm_tools_enabled: bool,\n \n     // rust codegen options\n     pub rust_optimize: bool,\n@@ -533,7 +533,7 @@ impl Config {\n             set(&mut config.test_miri, rust.test_miri);\n             set(&mut config.wasm_syscall, rust.wasm_syscall);\n             set(&mut config.lld_enabled, rust.lld);\n-            set(&mut config.ship_llvm_tools, rust.llvm_tools);\n+            set(&mut config.llvm_tools_enabled, rust.llvm_tools);\n             config.rustc_parallel_queries = rust.experimental_parallel_queries.unwrap_or(false);\n             config.rustc_default_linker = rust.default_linker.clone();\n             config.musl_root = rust.musl_root.clone().map(PathBuf::from);"}, {"sha": "73cda4b436d4245f808eefd61447553463b5c89e", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 79, "deletions": 19, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=66a7db9a3593b1bc4744239a21520369f0418d3c", "patch": "@@ -43,6 +43,8 @@ pub fn pkgname(builder: &Builder, component: &str) -> String {\n         format!(\"{}-{}\", component, builder.rls_package_vers())\n     } else if component == \"rustfmt\" {\n         format!(\"{}-{}\", component, builder.rustfmt_package_vers())\n+    } else if component == \"llvm-tools\" {\n+        format!(\"{}-{}\", component, builder.llvm_tools_vers())\n     } else {\n         assert!(component.starts_with(\"rust\"));\n         format!(\"{}-{}\", component, builder.rust_package_vers())\n@@ -394,7 +396,7 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let host = self.compiler.host;\n \n-        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, compiler.host));\n+        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, host));\n         let name = pkgname(builder, \"rustc\");\n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n         let _ = fs::remove_dir_all(&image);\n@@ -503,24 +505,6 @@ impl Step for Rustc {\n                 builder.copy(&src, &dst);\n             }\n \n-            if builder.config.ship_llvm_tools {\n-                let src = builder.sysroot_libdir(compiler, host)\n-                    .parent()\n-                    .unwrap()\n-                    .join(\"bin\");\n-\n-                let dst = image.join(\"lib/rustlib\")\n-                    .join(&*host)\n-                    .join(\"bin\");\n-\n-                t!(fs::create_dir_all(&dst.parent().unwrap()));\n-\n-                for tool in LLVM_TOOLS {\n-                    let exe = exe(tool, &compiler.host);\n-                    builder.copy(&src.join(&exe), &dst.join(&exe));\n-                }\n-            }\n-\n             // Man pages\n             t!(fs::create_dir_all(image.join(\"share/man/man1\")));\n             let man_src = builder.src.join(\"src/doc/man\");\n@@ -1756,6 +1740,7 @@ impl Step for HashSign {\n         cmd.arg(builder.package_vers(&builder.release_num(\"cargo\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rls\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rustfmt\")));\n+        cmd.arg(builder.llvm_tools_vers());\n         cmd.arg(addr);\n \n         builder.create_dir(&distdir(builder));\n@@ -1766,3 +1751,78 @@ impl Step for HashSign {\n         assert!(status.success());\n     }\n }\n+\n+#[derive(Clone, Debug, Eq, Hash, PartialEq)]\n+pub struct LlvmTools {\n+    pub stage: u32,\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for LlvmTools {\n+    type Output = Option<PathBuf>;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"llvm-tools\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(LlvmTools {\n+            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler(run.builder.top_stage, run.target),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> Option<PathBuf> {\n+        let compiler = self.compiler;\n+        let host = compiler.host;\n+\n+        let stage = self.stage;\n+        assert!(builder.config.extended);\n+\n+        builder.info(&format!(\"Dist LlvmTools stage{} ({})\", stage, host));\n+        let src = builder.src.join(\"src/llvm\");\n+        let name = pkgname(builder, \"llvm-tools\");\n+\n+        let tmp = tmpdir(builder);\n+        let image = tmp.join(\"llvm-tools-image\");\n+        drop(fs::remove_dir_all(&image));\n+        t!(fs::create_dir_all(&image.join(\"bin\")));\n+\n+        // Prepare the image directory\n+        for tool in LLVM_TOOLS {\n+            let exe = builder\n+                .llvm_out(host)\n+                .join(\"bin\")\n+                .join(exe(tool, &compiler.host));\n+            builder.install(&exe, &image.join(\"bin\"), 0o755);\n+        }\n+\n+        // Prepare the overlay\n+        let overlay = tmp.join(\"llvm-tools-overlay\");\n+        drop(fs::remove_dir_all(&overlay));\n+        builder.create_dir(&overlay);\n+        builder.install(&src.join(\"README.txt\"), &overlay, 0o644);\n+        builder.install(&src.join(\"LICENSE.TXT\"), &overlay, 0o644);\n+\n+        // Generate the installer tarball\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+            .arg(\"--product-name=Rust\")\n+            .arg(\"--rel-manifest-dir=rustlib\")\n+            .arg(\"--success-message=llvm-tools-installed.\")\n+            .arg(\"--image-dir\").arg(&image)\n+            .arg(\"--work-dir\").arg(&tmpdir(builder))\n+            .arg(\"--output-dir\").arg(&distdir(builder))\n+            .arg(\"--non-installed-overlay\").arg(&overlay)\n+            .arg(format!(\"--package-name={}-{}\", name, host))\n+            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+            .arg(\"--component-name=llvm-tools\");\n+\n+\n+        builder.run(&mut cmd);\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host)))\n+    }\n+}"}, {"sha": "cb135ad6f3523d40bfaf4d6b0db2220a1d3056ed", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=66a7db9a3593b1bc4744239a21520369f0418d3c", "patch": "@@ -957,6 +957,24 @@ impl Build {\n         self.package_vers(&self.release_num(\"rustfmt\"))\n     }\n \n+    fn llvm_tools_vers(&self) -> String {\n+        let stdout = build_helper::output(\n+            Command::new(self.llvm_out(self.config.build).join(\"build/bin/llvm-size\"))\n+                .arg(\"--version\"),\n+        );\n+\n+        for line in stdout.lines() {\n+            if line.contains(\"LLVM version\") {\n+                if let Some(vers) = line.split_whitespace().nth(2) {\n+                    return vers.to_string();\n+                }\n+            }\n+        }\n+\n+        panic!(\"The output of $LLVM_TOOL has changed; \\\n+                please fix `bootstrap::Build.llvm_tools_vers`\");\n+    }\n+\n     /// Returns the `version` string associated with this compiler for Rust\n     /// itself.\n     ///"}, {"sha": "c3f84378adfb23b8b4247a55f41fdb392dad1f8f", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a7db9a3593b1bc4744239a21520369f0418d3c/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=66a7db9a3593b1bc4744239a21520369f0418d3c", "patch": "@@ -170,12 +170,12 @@ impl Step for Llvm {\n         //\n         // If we are shipping llvm tools then we statically link them LLVM\n         if (target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\")) &&\n-            !builder.config.ship_llvm_tools  {\n+            !builder.config.llvm_tools_enabled {\n                 cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n         // For distribution we want the LLVM tools to be *statically* linked to libstdc++\n-        if builder.config.ship_llvm_tools {\n+        if builder.config.llvm_tools_enabled {\n             cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-Wl,-Bsymbolic -static-libstdc++\");\n         }\n "}]}