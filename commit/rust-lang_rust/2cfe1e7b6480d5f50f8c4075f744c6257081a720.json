{"sha": "2cfe1e7b6480d5f50f8c4075f744c6257081a720", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZmUxZTdiNjQ4MGQ1ZjUwZjhjNDA3NWY3NDRjNjI1NzA4MWE3MjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2016-11-09T09:49:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-09T09:49:16Z"}, "message": "Merge pull request #1328 from Machtan/master\n\n Add '--version' flag and allow version and help flags when called as 'cargo-clippy'", "tree": {"sha": "c59a4ec0a9481d02c04776b876bd42a11bf92067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c59a4ec0a9481d02c04776b876bd42a11bf92067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cfe1e7b6480d5f50f8c4075f744c6257081a720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cfe1e7b6480d5f50f8c4075f744c6257081a720", "html_url": "https://github.com/rust-lang/rust/commit/2cfe1e7b6480d5f50f8c4075f744c6257081a720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cfe1e7b6480d5f50f8c4075f744c6257081a720/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a260e65ead626ae60cfc45cf0be962a904b7fbbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a260e65ead626ae60cfc45cf0be962a904b7fbbf", "html_url": "https://github.com/rust-lang/rust/commit/a260e65ead626ae60cfc45cf0be962a904b7fbbf"}, {"sha": "2d9386f86dd93bf4e048c7fe362dde0a603b858c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d9386f86dd93bf4e048c7fe362dde0a603b858c", "html_url": "https://github.com/rust-lang/rust/commit/2d9386f86dd93bf4e048c7fe362dde0a603b858c"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "a839bbad34175e81c61f426875e454e049a90df4", "filename": "src/main.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe1e7b6480d5f50f8c4075f744c6257081a720/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe1e7b6480d5f50f8c4075f744c6257081a720/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=2cfe1e7b6480d5f50f8c4075f744c6257081a720", "patch": "@@ -17,8 +17,9 @@ use rustc_driver::{driver, CompilerCalls, RustcDefaultCalls, Compilation};\n use rustc::session::{config, Session};\n use rustc::session::config::{Input, ErrorOutputType};\n use std::path::PathBuf;\n-use std::process::Command;\n+use std::process::{self, Command};\n use syntax::ast;\n+use std::io::{self, Write};\n \n use clippy_lints::utils::cargo;\n \n@@ -118,6 +119,7 @@ Usage:\n Common options:\n     -h, --help               Print this message\n     --features               Features to compile for the package\n+    -V, --version            Print version info and exit\n \n Other options are the same as `cargo rustc`.\n \n@@ -140,26 +142,41 @@ fn show_help() {\n     println!(\"{}\", CARGO_CLIPPY_HELP);\n }\n \n+#[allow(print_stdout)]\n+fn show_version() {\n+    println!(\"{}\", env!(\"CARGO_PKG_VERSION\"));\n+}\n+\n pub fn main() {\n     use std::env;\n \n     if env::var(\"CLIPPY_DOGFOOD\").map(|_| true).unwrap_or(false) {\n         panic!(\"yummy\");\n     }\n+    \n+    // Check for version and help flags even when invoked as 'cargo-clippy'\n+    if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n+        show_help();\n+        return;\n+    }\n+    if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n+        show_version();\n+        return;\n+    }\n \n     let dep_path = env::current_dir().expect(\"current dir is not readable\").join(\"target\").join(\"debug\").join(\"deps\");\n \n     if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n         // this arm is executed on the initial call to `cargo clippy`\n \n-        if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n-            show_help();\n-            return;\n-        }\n-\n         let manifest_path_arg = std::env::args().skip(2).find(|val| val.starts_with(\"--manifest-path=\"));\n \n-        let mut metadata = cargo::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref)).expect(\"could not obtain cargo metadata\");\n+        let mut metadata = if let Ok(metadata) = cargo::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref)) {\n+            metadata\n+        } else {\n+            let _ = io::stderr().write_fmt(format_args!(\"error: Could not obtain cargo metadata.\"));\n+            process::exit(101);\n+        };\n \n         assert_eq!(metadata.version, 1);\n "}]}