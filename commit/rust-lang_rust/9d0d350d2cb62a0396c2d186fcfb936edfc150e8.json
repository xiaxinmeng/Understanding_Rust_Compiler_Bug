{"sha": "9d0d350d2cb62a0396c2d186fcfb936edfc150e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMGQzNTBkMmNiNjJhMDM5NmMyZDE4NmZjZmI5MzZlZGZjMTUwZTg=", "commit": {"author": {"name": "Jeffrey Yasskin", "email": "jyasskin@gmail.com", "date": "2010-07-19T05:59:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2010-07-19T18:08:00Z"}, "message": "Make the LLVM compiler crash when it hits a source construct it doesn't know\nwhat to do with, rather than silently omitting it from the output.", "tree": {"sha": "0effbac6d2a17a98a256702c783f99c275145e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0effbac6d2a17a98a256702c783f99c275145e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d0d350d2cb62a0396c2d186fcfb936edfc150e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0d350d2cb62a0396c2d186fcfb936edfc150e8", "html_url": "https://github.com/rust-lang/rust/commit/9d0d350d2cb62a0396c2d186fcfb936edfc150e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d0d350d2cb62a0396c2d186fcfb936edfc150e8/comments", "author": {"login": "jyasskin", "id": 83420, "node_id": "MDQ6VXNlcjgzNDIw", "avatar_url": "https://avatars.githubusercontent.com/u/83420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyasskin", "html_url": "https://github.com/jyasskin", "followers_url": "https://api.github.com/users/jyasskin/followers", "following_url": "https://api.github.com/users/jyasskin/following{/other_user}", "gists_url": "https://api.github.com/users/jyasskin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyasskin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyasskin/subscriptions", "organizations_url": "https://api.github.com/users/jyasskin/orgs", "repos_url": "https://api.github.com/users/jyasskin/repos", "events_url": "https://api.github.com/users/jyasskin/events{/privacy}", "received_events_url": "https://api.github.com/users/jyasskin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe78e33a2a5fd7d8628d113b117386f88906e1c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe78e33a2a5fd7d8628d113b117386f88906e1c3", "html_url": "https://github.com/rust-lang/rust/commit/fe78e33a2a5fd7d8628d113b117386f88906e1c3"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "f2edb62d76320498f2e703819b1052fa15d3c775", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d0d350d2cb62a0396c2d186fcfb936edfc150e8/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9d0d350d2cb62a0396c2d186fcfb936edfc150e8/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=9d0d350d2cb62a0396c2d186fcfb936edfc150e8", "patch": "@@ -373,6 +373,7 @@ TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       acyclic-unwind.rs \\\n                       alt-pattern-simple.rs \\\n                       alt-tag.rs \\\n+                      argv.rs \\\n                       basic.rs \\\n                       bind-obj-ctor.rs \\\n                       bind-thunk.rs \\"}, {"sha": "1697bf22d2a943175e37e2dfb02688cfb06e3da9", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d0d350d2cb62a0396c2d186fcfb936edfc150e8/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9d0d350d2cb62a0396c2d186fcfb936edfc150e8/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=9d0d350d2cb62a0396c2d186fcfb936edfc150e8", "patch": "@@ -1389,6 +1389,8 @@ let sprintf_effect = sprintf_fmt fmt_effect;;\n let sprintf_tag = sprintf_fmt fmt_tag;;\n let sprintf_carg = sprintf_fmt fmt_carg;;\n let sprintf_constr = sprintf_fmt fmt_constr;;\n+let sprintf_mod_item =\n+  sprintf_fmt (fun ff (id,item) -> fmt_mod_item ff id item);;\n let sprintf_mod_items = sprintf_fmt fmt_mod_items;;\n let sprintf_decl_param = sprintf_fmt fmt_decl_param;;\n let sprintf_decl_params = sprintf_fmt fmt_decl_params;;"}, {"sha": "9131155514b55dd8371a179b6c9e25d88a0b8364", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9d0d350d2cb62a0396c2d186fcfb936edfc150e8/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9d0d350d2cb62a0396c2d186fcfb936edfc150e8/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=9d0d350d2cb62a0396c2d186fcfb936edfc150e8", "patch": "@@ -120,15 +120,6 @@ let trans_crate\n       | Some (Node num) -> num_llid num\n   in\n \n-  (*\n-   * Returns a bogus value for use in stub code that hasn't been implemented\n-   * yet.\n-   *\n-   * TODO: On some joyous day, remove me.\n-   *)\n-  let bogus = Llvm.const_null (Llvm.i32_type llctx) in\n-  let bogus_ptr = Llvm.const_null (Llvm.pointer_type (Llvm.i32_type llctx)) in\n-\n   let llnilty = Llvm.array_type (Llvm.i1_type llctx) 0 in\n   let llnil = Llvm.const_array (Llvm.i1_type llctx) [| |] in\n \n@@ -338,7 +329,9 @@ let trans_crate\n           word_ty\n \n       | Ast.TY_tag _ | Ast.TY_iso _ | Ast.TY_idx _\n-      | Ast.TY_obj _ | Ast.TY_type -> (opaque()) (* TODO *)\n+      | Ast.TY_obj _ | Ast.TY_type ->\n+          raise (Not_implemented\n+                   (\"trans_ty_full \" ^ (Ast.sprintf_ty() ty)))\n \n       | Ast.TY_param _ | Ast.TY_named _ ->\n           bug () \"unresolved type in lltrans\"\n@@ -543,8 +536,10 @@ let trans_crate\n   let (dbg_llscopes:(node_id, Llvm.llvalue) Hashtbl.t) = Hashtbl.create 0 in\n   let declare_mod_item\n       (name:Ast.ident)\n-      { node = { Ast.decl_item = (item:Ast.mod_item') }; id = id }\n+      mod_item\n       : unit =\n+    let { node = { Ast.decl_item = (item:Ast.mod_item') }; id = id } =\n+      mod_item in\n     let full_name = Semant.item_str sem_cx id in\n     let (filename, line_num) =\n       match Session.get_span sess id with\n@@ -564,7 +559,16 @@ let trans_crate\n               Hashtbl.add llitems id llfn;\n               Hashtbl.add dbg_llscopes id meta\n \n-        | _ -> () (* TODO *)\n+        | Ast.MOD_ITEM_type _ ->\n+            ()  (* Types get translated with their terms. *)\n+\n+        | Ast.MOD_ITEM_mod _ ->\n+            ()  (* Modules simply contain other items that are translated\n+                   on their own. *)\n+\n+        | _ -> raise (Not_implemented\n+                        (\"declare_mod_item \" ^\n+                           (Ast.sprintf_mod_item() (name,mod_item))))\n   in\n \n   let trans_fn\n@@ -711,9 +715,12 @@ let trans_crate\n                 match referent with\n                     Semant.DEFN_slot _ -> Hashtbl.find slot_to_llvalue id\n                   | Semant.DEFN_item _ -> Hashtbl.find llitems id\n-                  | _ -> bogus_ptr (* TODO *)\n+                  | _ -> raise\n+                      (Not_implemented\n+                         (\"referent of \" ^ (Ast.sprintf_lval() lval)))\n               end\n-          | Ast.LVAL_ext _ -> bogus_ptr (* TODO *)\n+          | Ast.LVAL_ext _ -> raise\n+              (Not_implemented (\"trans_lval \" ^ (Ast.sprintf_lval() lval)))\n       in\n \n       let trans_atom (atom:Ast.atom) : Llvm.llvalue =\n@@ -754,10 +761,16 @@ let trans_crate\n           | Ast.BINOP_div -> Llvm.build_sdiv lllhs llrhs llid llbuilder\n           | Ast.BINOP_mod -> Llvm.build_srem lllhs llrhs llid llbuilder\n \n-          | _ -> bogus (* TODO *)\n+          | _ -> raise\n+              (Not_implemented\n+                 (\"trans_binary_expr \" ^\n+                    (Ast.sprintf_expr() (Ast.EXPR_binary (op,lhs,rhs)))))\n       in\n \n-      let trans_unary_expr _ = bogus in (* TODO *)\n+      let trans_unary_expr e = raise\n+        (Not_implemented (\"trans_unary_expr \" ^\n+                            (Ast.sprintf_expr() (Ast.EXPR_unary e))))\n+      in\n \n       let trans_expr (expr:Ast.expr) : Llvm.llvalue =\n         iflog (fun _ -> log sem_cx \"trans_expr: %a\" Ast.sprintf_expr expr);\n@@ -915,7 +928,11 @@ let trans_crate\n                       (Some d) [| s; len |];\n                     trans_tail ()\n \n-              | _ -> trans_stmts block_id llbuilder tail terminate\n+              | Ast.STMT_decl _ ->\n+                  trans_tail ()\n+\n+              | _ -> raise (Not_implemented\n+                              (\"trans_stmts \" ^ (Ast.sprintf_stmt() head)))\n \n     (* \n      * Translates an AST block to one or more LLVM basic blocks and returns"}, {"sha": "63a4a321c7f511007b12847605ca227400fcc4c3", "filename": "src/boot/util/common.ml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d0d350d2cb62a0396c2d186fcfb936edfc150e8/src%2Fboot%2Futil%2Fcommon.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9d0d350d2cb62a0396c2d186fcfb936edfc150e8/src%2Fboot%2Futil%2Fcommon.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Futil%2Fcommon.ml?ref=9d0d350d2cb62a0396c2d186fcfb936edfc150e8", "patch": "@@ -25,6 +25,10 @@ let bug _ =\n   in Printf.ksprintf k\n ;;\n \n+(* TODO: On some joyous day, remove me. *)\n+exception Not_implemented of string\n+;;\n+\n exception Semant_err of ((node_id option) * string)\n ;;\n "}]}