{"sha": "88310cc0ebf4144205743dbb3a65223deffcf8e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MzEwY2MwZWJmNDE0NDIwNTc0M2RiYjNhNjUyMjNkZWZmY2Y4ZTY=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-10-11T04:14:11Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-11T01:58:28Z"}, "message": "Indroduce feature flag for RFC-2229\n\nSigned-off-by: Aman Arora <me@aman-arora.com>", "tree": {"sha": "44ea1014b63661687515c17cc8b74572aad787ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44ea1014b63661687515c17cc8b74572aad787ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88310cc0ebf4144205743dbb3a65223deffcf8e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88310cc0ebf4144205743dbb3a65223deffcf8e6", "html_url": "https://github.com/rust-lang/rust/commit/88310cc0ebf4144205743dbb3a65223deffcf8e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88310cc0ebf4144205743dbb3a65223deffcf8e6/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "127a6ede1dd9622db20bee435221205b3a61d0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/127a6ede1dd9622db20bee435221205b3a61d0ba", "html_url": "https://github.com/rust-lang/rust/commit/127a6ede1dd9622db20bee435221205b3a61d0ba"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "a035507924794cd487d469c9efa71af8799d6a21", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88310cc0ebf4144205743dbb3a65223deffcf8e6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88310cc0ebf4144205743dbb3a65223deffcf8e6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=88310cc0ebf4144205743dbb3a65223deffcf8e6", "patch": "@@ -616,6 +616,9 @@ declare_features! (\n     /// Enables `#[cfg(panic = \"...\")]` config key.\n     (active, cfg_panic, \"1.49.0\", Some(77443), None),\n \n+    /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n+    (active, capture_disjoint_fields, \"1.49.0\", Some(53488), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -639,6 +642,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::inline_const,\n     sym::repr128,\n     sym::unsized_locals,\n+    sym::capture_disjoint_fields,\n ];\n \n /// Some features are not allowed to be used together at the same time, if"}, {"sha": "fa8edba629e929251663664c27440a68cd66e2dc", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88310cc0ebf4144205743dbb3a65223deffcf8e6/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88310cc0ebf4144205743dbb3a65223deffcf8e6/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=88310cc0ebf4144205743dbb3a65223deffcf8e6", "patch": "@@ -547,6 +547,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     rustc_attr!(TEST, rustc_outlives, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_variance, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\")),\n     rustc_attr!(TEST, rustc_regions, Normal, template!(Word)),"}, {"sha": "3a2a3adce35c91cecac03a664584ab2faf1bfe57", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88310cc0ebf4144205743dbb3a65223deffcf8e6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88310cc0ebf4144205743dbb3a65223deffcf8e6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=88310cc0ebf4144205743dbb3a65223deffcf8e6", "patch": "@@ -318,6 +318,7 @@ symbols! {\n         call_mut,\n         call_once,\n         caller_location,\n+        capture_disjoint_fields,\n         cdylib,\n         ceilf32,\n         ceilf64,\n@@ -909,6 +910,7 @@ symbols! {\n         rustc_args_required_const,\n         rustc_attrs,\n         rustc_builtin_macro,\n+        rustc_capture_analysis,\n         rustc_clean,\n         rustc_const_stable,\n         rustc_const_unstable,"}, {"sha": "a28744c2ece755645c54345f5ab34dd01f1a68da", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/88310cc0ebf4144205743dbb3a65223deffcf8e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88310cc0ebf4144205743dbb3a65223deffcf8e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=88310cc0ebf4144205743dbb3a65223deffcf8e6", "patch": "@@ -32,8 +32,6 @@\n \n use super::FnCtxt;\n \n-use std::env;\n-\n use crate::expr_use_visitor as euv;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir as hir;\n@@ -43,8 +41,25 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_infer::infer::UpvarRegion;\n use rustc_middle::hir::place::{Place, PlaceBase, PlaceWithHirId};\n use rustc_middle::ty::{self, Ty, TyCtxt, UpvarSubsts};\n+use rustc_span::sym;\n use rustc_span::{Span, Symbol};\n \n+macro_rules! log_capture_analysis {\n+    ($fcx:expr, $closure_def_id:expr, $fmt:literal) => {\n+        if $fcx.should_log_capture_analysis($closure_def_id) {\n+            print!(\"For closure={:?}: \", $closure_def_id);\n+            println!($fmt);\n+        }\n+    };\n+\n+    ($fcx:expr, $closure_def_id:expr, $fmt:literal, $($args:expr),*) => {\n+        if $fcx.should_log_capture_analysis($closure_def_id) {\n+            print!(\"For closure={:?}: \", $closure_def_id);\n+            println!($fmt, $($args),*);\n+        }\n+    };\n+}\n+\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn closure_analyze(&self, body: &'tcx hir::Body<'tcx>) {\n         InferBorrowKindVisitor { fcx: self }.visit_body(body);\n@@ -115,8 +130,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let local_def_id = closure_def_id.expect_local();\n \n         let mut capture_information = FxIndexMap::<Place<'tcx>, ty::CaptureInfo<'tcx>>::default();\n-        if !new_capture_analysis() {\n-            debug!(\"Using old-style capture analysis\");\n+        if self.tcx.features().capture_disjoint_fields {\n+            log_capture_analysis!(self, closure_def_id, \"Using new-style capture analysis\");\n+        } else {\n+            log_capture_analysis!(self, closure_def_id, \"Using old-style capture analysis\");\n             if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n                 for (&var_hir_id, _) in upvars.iter() {\n                     let place = self.place_for_root_variable(local_def_id, var_hir_id);\n@@ -325,6 +342,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             projections: Default::default(),\n         }\n     }\n+\n+    fn should_log_capture_analysis(&self, closure_def_id: DefId) -> bool {\n+        self.tcx.has_attr(closure_def_id, sym::rustc_capture_analysis)\n+    }\n }\n \n struct InferBorrowKind<'a, 'tcx> {\n@@ -601,10 +622,6 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n             let expr_id = Some(diag_expr_id);\n             let capture_info = ty::CaptureInfo { expr_id, capture_kind };\n \n-            if log_capture_analysis() {\n-                debug!(\"capture_info: {:?}\", capture_info);\n-            }\n-\n             self.capture_information.insert(place_with_id.place.clone(), capture_info);\n         } else {\n             debug!(\"Not upvar: {:?}\", place_with_id);\n@@ -670,11 +687,3 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n fn var_name(tcx: TyCtxt<'_>, var_hir_id: hir::HirId) -> Symbol {\n     tcx.hir().name(var_hir_id)\n }\n-\n-fn new_capture_analysis() -> bool {\n-    matches!(env::var(\"SG_NEW\"), Ok(_))\n-}\n-\n-fn log_capture_analysis() -> bool {\n-    matches!(env::var(\"SG_VERBOSE\"), Ok(_))\n-}"}, {"sha": "5eab718736cb2033b3c68857871c2720ce4e4213", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88310cc0ebf4144205743dbb3a65223deffcf8e6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88310cc0ebf4144205743dbb3a65223deffcf8e6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs?ref=88310cc0ebf4144205743dbb3a65223deffcf8e6", "patch": "@@ -0,0 +1,12 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+#![feature(rustc_attrs)]\n+\n+fn main() {\n+    let s = format!(\"s\");\n+\n+    let c = #[rustc_capture_analysis] || {\n+    //~^ ERROR: attributes on expressions are experimental\n+        println!(\"This uses new capture analyysis to capture s={}\", s);\n+    };\n+}"}, {"sha": "4dc1f9a6ab27b50b3d4e8effc6cae96a515a38bc", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/88310cc0ebf4144205743dbb3a65223deffcf8e6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88310cc0ebf4144205743dbb3a65223deffcf8e6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr?ref=88310cc0ebf4144205743dbb3a65223deffcf8e6", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:8:13\n+   |\n+LL |     let c = #[rustc_capture_analysis] || {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "c1fca9afd3910379581df0e4f684755bfcb0bf44", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88310cc0ebf4144205743dbb3a65223deffcf8e6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/88310cc0ebf4144205743dbb3a65223deffcf8e6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stdout?ref=88310cc0ebf4144205743dbb3a65223deffcf8e6", "patch": "@@ -0,0 +1 @@\n+For closure=DefId(0:4 ~ feature_gate_capture_disjoint_fields[317d]::main::{closure#0}): Using new-style capture analysis"}]}