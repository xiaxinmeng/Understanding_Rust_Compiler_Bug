{"sha": "15b2d1a97c9cefe41bcb61d5faef5682c112172a", "node_id": "C_kwDOAAsO6NoAKDE1YjJkMWE5N2M5Y2VmZTQxYmNiNjFkNWZhZWY1NjgyYzExMjE3MmE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-13T10:12:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-31T16:33:46Z"}, "message": "Merge impl_constness and is_const_fn_raw.", "tree": {"sha": "01f54641d17651da7078f54e0f531d24068570cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01f54641d17651da7078f54e0f531d24068570cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15b2d1a97c9cefe41bcb61d5faef5682c112172a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15b2d1a97c9cefe41bcb61d5faef5682c112172a", "html_url": "https://github.com/rust-lang/rust/commit/15b2d1a97c9cefe41bcb61d5faef5682c112172a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15b2d1a97c9cefe41bcb61d5faef5682c112172a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62f4838424208f0f980f6bf95d17610694c80d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62f4838424208f0f980f6bf95d17610694c80d4", "html_url": "https://github.com/rust-lang/rust/commit/e62f4838424208f0f980f6bf95d17610694c80d4"}], "stats": {"total": 115, "additions": 52, "deletions": 63}, "files": [{"sha": "19a543ae777f046045b494e3f68c23649522fa6d", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=15b2d1a97c9cefe41bcb61d5faef5682c112172a", "patch": "@@ -1,7 +1,8 @@\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi::Abi;\n \n@@ -16,44 +17,47 @@ pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n }\n \n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let parent_id = tcx.hir().get_parent_node(hir_id);\n-    matches!(\n-        tcx.hir().get(parent_id),\n-        hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Impl(hir::Impl { constness: hir::Constness::Const, .. }),\n-            ..\n-        })\n-    )\n+    let parent_id = tcx.local_parent(def_id).unwrap();\n+    tcx.def_kind(parent_id) == DefKind::Impl\n+        && tcx.impl_constness(parent_id) == hir::Constness::Const\n }\n \n /// Checks whether the function has a `const` modifier or, in case it is an intrinsic, whether\n /// said intrinsic has a `rustc_const_{un,}stable` attribute.\n-fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+fn impl_constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n     let def_id = def_id.expect_local();\n     let node = tcx.hir().get_by_def_id(def_id);\n \n-    if let hir::Node::ForeignItem(hir::ForeignItem { kind: hir::ForeignItemKind::Fn(..), .. }) =\n-        node\n-    {\n-        // Intrinsics use `rustc_const_{un,}stable` attributes to indicate constness. All other\n-        // foreign items cannot be evaluated at compile-time.\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = tcx.hir().get_foreign_abi(hir_id) {\n-            tcx.lookup_const_stability(def_id).is_some()\n-        } else {\n-            false\n-        }\n-    } else if let Some(fn_kind) = node.fn_kind() {\n-        if fn_kind.constness() == hir::Constness::Const {\n-            return true;\n+    match node {\n+        hir::Node::Ctor(_) => hir::Constness::Const,\n+        hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(impl_), .. }) => impl_.constness,\n+        hir::Node::ForeignItem(hir::ForeignItem { kind: hir::ForeignItemKind::Fn(..), .. }) => {\n+            // Intrinsics use `rustc_const_{un,}stable` attributes to indicate constness. All other\n+            // foreign items cannot be evaluated at compile-time.\n+            let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+            let is_const = if let Abi::RustIntrinsic | Abi::PlatformIntrinsic =\n+                tcx.hir().get_foreign_abi(hir_id)\n+            {\n+                tcx.lookup_const_stability(def_id).is_some()\n+            } else {\n+                false\n+            };\n+            if is_const { hir::Constness::Const } else { hir::Constness::NotConst }\n         }\n+        _ => {\n+            if let Some(fn_kind) = node.fn_kind() {\n+                if fn_kind.constness() == hir::Constness::Const {\n+                    return hir::Constness::Const;\n+                }\n \n-        // If the function itself is not annotated with `const`, it may still be a `const fn`\n-        // if it resides in a const trait impl.\n-        is_parent_const_impl_raw(tcx, def_id)\n-    } else {\n-        matches!(node, hir::Node::Ctor(_))\n+                // If the function itself is not annotated with `const`, it may still be a `const fn`\n+                // if it resides in a const trait impl.\n+                let is_const = is_parent_const_impl_raw(tcx, def_id);\n+                if is_const { hir::Constness::Const } else { hir::Constness::NotConst }\n+            } else {\n+                hir::Constness::NotConst\n+            }\n+        }\n     }\n }\n \n@@ -77,5 +81,5 @@ fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    *providers = Providers { is_const_fn_raw, is_promotable_const_fn, ..*providers };\n+    *providers = Providers { impl_constness, is_promotable_const_fn, ..*providers };\n }"}, {"sha": "046322a42d85b9fb8eac559c722fd27187cf9724", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=15b2d1a97c9cefe41bcb61d5faef5682c112172a", "patch": "@@ -14,7 +14,6 @@ use rustc_data_structures::sync::{Lock, LockGuard, Lrc, OnceCell};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, ProcMacroDerive};\n-use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n@@ -1419,19 +1418,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we\n-    // don't serialize constness for tuple variant and tuple struct constructors.\n-    fn is_const_fn_raw(self, id: DefIndex) -> bool {\n-        let constness = match self.kind(id) {\n-            EntryKind::AssocFn(_) | EntryKind::Fn | EntryKind::ForeignFn => {\n-                self.root.tables.impl_constness.get(self, id).unwrap().decode(self)\n-            }\n-            EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,\n-            _ => hir::Constness::NotConst,\n-        };\n-        constness == hir::Constness::Const\n-    }\n-\n     fn is_foreign_item(self, id: DefIndex) -> bool {\n         match self.kind(id) {\n             EntryKind::ForeignStatic | EntryKind::ForeignFn => true,"}, {"sha": "cd3a1d72d41d24d8194adfa14ae6267420f50699", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=15b2d1a97c9cefe41bcb61d5faef5682c112172a", "patch": "@@ -163,7 +163,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     associated_item_def_ids => { cdata.get_associated_item_def_ids(tcx, def_id.index) }\n     associated_item => { cdata.get_associated_item(def_id.index) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n-    is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }"}, {"sha": "6c758b8e5b633544483933bc06f16fa6320a6c31", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=15b2d1a97c9cefe41bcb61d5faef5682c112172a", "patch": "@@ -1048,6 +1048,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n+        record!(self.tables.impl_constness[def_id] <- hir::Constness::Const);\n         record!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n             assert!(f.did.is_local());\n             f.did.index\n@@ -1077,6 +1078,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n+        record!(self.tables.impl_constness[def_id] <- hir::Constness::Const);\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -1155,6 +1157,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.repr_options[def_id] <- adt_def.repr());\n+        record!(self.tables.impl_constness[def_id] <- hir::Constness::Const);\n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data)));\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n@@ -1417,6 +1420,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 record!(self.tables.repr_options[def_id] <- adt_def.repr());\n+                record!(self.tables.impl_constness[def_id] <- hir::Constness::Const);\n \n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method"}, {"sha": "14c11187fc5eecc28b946a5e01a9c14fac1b3fdb", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=15b2d1a97c9cefe41bcb61d5faef5682c112172a", "patch": "@@ -559,7 +559,7 @@ rustc_queries! {\n     ///\n     /// **Do not call this function manually.** It is only meant to cache the base data for the\n     /// `is_const_fn` function.\n-    query is_const_fn_raw(key: DefId) -> bool {\n+    query impl_constness(key: DefId) -> hir::Constness {\n         desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n         separate_provide_extern\n     }\n@@ -1329,11 +1329,6 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query impl_constness(def_id: DefId) -> hir::Constness {\n-        desc { |tcx| \"looking up whether `{}` is a const impl\", tcx.def_path_str(def_id) }\n-        separate_provide_extern\n-    }\n-\n     query check_item_well_formed(key: LocalDefId) -> () {\n         desc { |tcx| \"checking that `{}` is well-formed\", tcx.def_path_str(key.to_def_id()) }\n     }"}, {"sha": "37425c91157b3a8ce4282a8923d3022f34ec3b32", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=15b2d1a97c9cefe41bcb61d5faef5682c112172a", "patch": "@@ -289,6 +289,11 @@ pub struct ClosureSizeProfileData<'tcx> {\n pub trait DefIdTree: Copy {\n     fn parent(self, id: DefId) -> Option<DefId>;\n \n+    #[inline]\n+    fn local_parent(self, id: LocalDefId) -> Option<LocalDefId> {\n+        Some(self.parent(id.to_def_id())?.expect_local())\n+    }\n+\n     fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {\n         if descendant.krate != ancestor.krate {\n             return false;\n@@ -2256,6 +2261,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn is_object_safe(self, key: DefId) -> bool {\n         self.object_safety_violations(key).is_empty()\n     }\n+\n+    #[inline]\n+    pub fn is_const_fn_raw(self, def_id: DefId) -> bool {\n+        matches!(self.def_kind(def_id), DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..))\n+            && self.impl_constness(def_id) == hir::Constness::Const\n+    }\n }\n \n /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition."}, {"sha": "7ad8748135630747c61b135f84d65760b69255d5", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=15b2d1a97c9cefe41bcb61d5faef5682c112172a", "patch": "@@ -1859,7 +1859,7 @@ impl CheckAttrVisitor<'_> {\n     ) -> bool {\n         match target {\n             Target::Fn | Target::Method(_)\n-                if self.tcx.is_const_fn_raw(self.tcx.hir().local_def_id(hir_id)) =>\n+                if self.tcx.is_const_fn_raw(self.tcx.hir().local_def_id(hir_id).to_def_id()) =>\n             {\n                 true\n             }"}, {"sha": "64145bbf189ff43a8acff9e0acaa14326d4e7db6", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b2d1a97c9cefe41bcb61d5faef5682c112172a/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=15b2d1a97c9cefe41bcb61d5faef5682c112172a", "patch": "@@ -77,15 +77,6 @@ fn impl_defaultness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Defaultness {\n     }\n }\n \n-fn impl_constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n-    let item = tcx.hir().expect_item(def_id.expect_local());\n-    if let hir::ItemKind::Impl(impl_) = &item.kind {\n-        impl_.constness\n-    } else {\n-        bug!(\"`impl_constness` called on {:?}\", item);\n-    }\n-}\n-\n /// Calculates the `Sized` constraint.\n ///\n /// In fact, there are only a few options for the types in the constraint:\n@@ -498,7 +489,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         instance_def_size_estimate,\n         issue33140_self_ty,\n         impl_defaultness,\n-        impl_constness,\n         conservative_is_privately_uninhabited: conservative_is_privately_uninhabited_raw,\n         ..*providers\n     };"}]}