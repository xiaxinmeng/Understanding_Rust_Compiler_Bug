{"sha": "1872c4c6b57a93c689c54e00d29d324ca1a10e95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NzJjNGM2YjU3YTkzYzY4OWM1NGUwMGQyOWQzMjRjYTFhMTBlOTU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-05-17T21:46:40Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-14T00:39:35Z"}, "message": "syntax: add a custom owned smart pointer in ptr::P.", "tree": {"sha": "804b459e32ee25a0adfe5c0279bc28b9cc18979a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/804b459e32ee25a0adfe5c0279bc28b9cc18979a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1872c4c6b57a93c689c54e00d29d324ca1a10e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1872c4c6b57a93c689c54e00d29d324ca1a10e95", "html_url": "https://github.com/rust-lang/rust/commit/1872c4c6b57a93c689c54e00d29d324ca1a10e95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1872c4c6b57a93c689c54e00d29d324ca1a10e95/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79a5448f41dcc6ab52663105a6b02fc5af4c503e", "url": "https://api.github.com/repos/rust-lang/rust/commits/79a5448f41dcc6ab52663105a6b02fc5af4c503e", "html_url": "https://github.com/rust-lang/rust/commit/79a5448f41dcc6ab52663105a6b02fc5af4c503e"}], "stats": {"total": 92, "additions": 82, "deletions": 10}, "files": [{"sha": "0c367f3a9a453aca1d7c73625e6315cd0e577eb6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1872c4c6b57a93c689c54e00d29d324ca1a10e95/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1872c4c6b57a93c689c54e00d29d324ca1a10e95/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1872c4c6b57a93c689c54e00d29d324ca1a10e95", "patch": "@@ -25,16 +25,6 @@ use std::rc::Rc;\n use std::gc::{Gc, GC};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n-/// A pointer abstraction.\n-// FIXME(eddyb) #10676 use Rc<T> in the future.\n-pub type P<T> = Gc<T>;\n-\n-#[allow(non_snake_case)]\n-/// Construct a P<T> from a T value.\n-pub fn P<T: 'static>(value: T) -> P<T> {\n-    box(GC) value\n-}\n-\n // FIXME #6993: in librustc, uses of \"ident\" should be replaced\n // by just \"Name\".\n "}, {"sha": "44cc63fbede4826253892d1e8fbed69c757e7151", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1872c4c6b57a93c689c54e00d29d324ca1a10e95/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1872c4c6b57a93c689c54e00d29d324ca1a10e95/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=1872c4c6b57a93c689c54e00d29d324ca1a10e95", "patch": "@@ -63,6 +63,7 @@ pub mod diagnostic;\n pub mod fold;\n pub mod owned_slice;\n pub mod parse;\n+pub mod ptr;\n pub mod visit;\n \n pub mod print {"}, {"sha": "92315a870f203130d70da78db3803fd5e899a633", "filename": "src/libsyntax/ptr.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1872c4c6b57a93c689c54e00d29d324ca1a10e95/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1872c4c6b57a93c689c54e00d29d324ca1a10e95/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=1872c4c6b57a93c689c54e00d29d324ca1a10e95", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+use std::fmt::Show;\n+use std::hash::Hash;\n+use serialize::{Encodable, Decodable, Encoder, Decoder};\n+\n+/// An owned smart pointer.\n+pub struct P<T> {\n+    ptr: Box<T>\n+}\n+\n+#[allow(non_snake_case)]\n+/// Construct a P<T> from a T value.\n+pub fn P<T: 'static>(value: T) -> P<T> {\n+    P {\n+        ptr: box value\n+    }\n+}\n+\n+impl<T: 'static> P<T> {\n+    pub fn and_then<U>(self, f: |T| -> U) -> U {\n+        f(*self.ptr)\n+    }\n+\n+    pub fn map(self, f: |T| -> T) -> P<T> {\n+        self.and_then(|x| P(f(x)))\n+    }\n+}\n+\n+impl<T> Deref<T> for P<T> {\n+    fn deref<'a>(&'a self) -> &'a T {\n+        &*self.ptr\n+    }\n+}\n+\n+impl<T: 'static + Clone> Clone for P<T> {\n+    fn clone(&self) -> P<T> {\n+        P((**self).clone())\n+    }\n+}\n+\n+impl<T: PartialEq> PartialEq for P<T> {\n+    fn eq(&self, other: &P<T>) -> bool {\n+        **self == **other\n+    }\n+}\n+\n+impl<T: Eq> Eq for P<T> {}\n+\n+impl<T: Show> Show for P<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        (**self).fmt(f)\n+    }\n+}\n+\n+impl<S, T: Hash<S>> Hash<S> for P<T> {\n+    fn hash(&self, state: &mut S) {\n+        (**self).hash(state);\n+    }\n+}\n+\n+impl<E, D: Decoder<E>, T: 'static + Decodable<D, E>> Decodable<D, E> for P<T> {\n+    fn decode(d: &mut D) -> Result<P<T>, E> {\n+        Decodable::decode(d).map(P)\n+    }\n+}\n+\n+impl<E, S: Encoder<E>, T: Encodable<S, E>> Encodable<S, E> for P<T> {\n+    fn encode(&self, s: &mut S) -> Result<(), E> {\n+        (**self).encode(s)\n+    }\n+}"}]}