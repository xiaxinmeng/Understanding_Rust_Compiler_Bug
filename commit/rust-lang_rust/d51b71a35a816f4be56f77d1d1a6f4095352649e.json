{"sha": "d51b71a35a816f4be56f77d1d1a6f4095352649e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MWI3MWEzNWE4MTZmNGJlNTZmNzdkMWQxYTZmNDA5NTM1MjY0OWU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-01T05:49:24Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-01T05:49:24Z"}, "message": "add tracking issue", "tree": {"sha": "144ceba190d297bdb22e0e4fddab64c5ff0aadc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/144ceba190d297bdb22e0e4fddab64c5ff0aadc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d51b71a35a816f4be56f77d1d1a6f4095352649e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d51b71a35a816f4be56f77d1d1a6f4095352649e", "html_url": "https://github.com/rust-lang/rust/commit/d51b71a35a816f4be56f77d1d1a6f4095352649e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d51b71a35a816f4be56f77d1d1a6f4095352649e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e75ffb0f1c566e11011b72ac04c3afcad3bf2b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/e75ffb0f1c566e11011b72ac04c3afcad3bf2b13", "html_url": "https://github.com/rust-lang/rust/commit/e75ffb0f1c566e11011b72ac04c3afcad3bf2b13"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b791c775548cda7f8f81f013ad0f38e566e493da", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51b71a35a816f4be56f77d1d1a6f4095352649e/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51b71a35a816f4be56f77d1d1a6f4095352649e/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=d51b71a35a816f4be56f77d1d1a6f4095352649e", "patch": "@@ -95,7 +95,7 @@ use crate::borrow::ToOwned;\n use crate::boxed::Box;\n use crate::vec::Vec;\n \n-#[unstable(feature = \"array_chunks\", issue = \"none\")]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub use core::slice::ArrayChunks;\n #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use core::slice::SliceIndex;"}, {"sha": "93608a1ce4864c8180371146e81e05c7b23c979e", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d51b71a35a816f4be56f77d1d1a6f4095352649e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51b71a35a816f4be56f77d1d1a6f4095352649e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=d51b71a35a816f4be56f77d1d1a6f4095352649e", "patch": "@@ -868,7 +868,7 @@ impl<T> [T] {\n     /// ```\n     ///\n     /// [`chunks_exact`]: #method.chunks_exact\n-    #[unstable(feature = \"array_chunks\", issue = \"none\")]\n+    #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n     pub fn array_chunks<const N: usize>(&self) -> ArrayChunks<'_, T, N> {\n         assert_ne!(N, 0);\n@@ -5484,7 +5484,7 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n /// [`remainder`]: ../../std/slice/struct.ArrayChunks.html#method.remainder\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n-#[unstable(feature = \"array_chunks\", issue = \"none\")]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub struct ArrayChunks<'a, T: 'a, const N: usize> {\n     iter: Iter<'a, [T; N]>,\n     rem: &'a [T],\n@@ -5494,21 +5494,21 @@ impl<'a, T, const N: usize> ArrayChunks<'a, T, N> {\n     /// Returns the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n-    #[unstable(feature = \"array_chunks\", issue = \"none\")]\n+    #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     pub fn remainder(&self) -> &'a [T] {\n         self.rem\n     }\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"array_chunks\", issue = \"none\")]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n impl<T, const N: usize> Clone for ArrayChunks<'_, T, N> {\n     fn clone(&self) -> Self {\n         ArrayChunks { iter: self.iter.clone(), rem: self.rem }\n     }\n }\n \n-#[unstable(feature = \"array_chunks\", issue = \"none\")]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n impl<'a, T, const N: usize> Iterator for ArrayChunks<'a, T, N> {\n     type Item = &'a [T; N];\n \n@@ -5538,7 +5538,7 @@ impl<'a, T, const N: usize> Iterator for ArrayChunks<'a, T, N> {\n     }\n }\n \n-#[unstable(feature = \"array_chunks\", issue = \"none\")]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n impl<'a, T, const N: usize> DoubleEndedIterator for ArrayChunks<'a, T, N> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T; N]> {\n@@ -5551,7 +5551,7 @@ impl<'a, T, const N: usize> DoubleEndedIterator for ArrayChunks<'a, T, N> {\n     }\n }\n \n-#[unstable(feature = \"array_chunks\", issue = \"none\")]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n impl<T, const N: usize> ExactSizeIterator for ArrayChunks<'_, T, N> {\n     fn is_empty(&self) -> bool {\n         self.iter.is_empty()\n@@ -5561,11 +5561,11 @@ impl<T, const N: usize> ExactSizeIterator for ArrayChunks<'_, T, N> {\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T, const N: usize> TrustedLen for ArrayChunks<'_, T, N> {}\n \n-#[unstable(feature = \"array_chunks\", issue = \"none\")]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n impl<T, const N: usize> FusedIterator for ArrayChunks<'_, T, N> {}\n \n #[doc(hidden)]\n-#[unstable(feature = \"array_chunks\", issue = \"none\")]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a [T; N] {\n         unsafe { self.iter.get_unchecked(i) }"}]}