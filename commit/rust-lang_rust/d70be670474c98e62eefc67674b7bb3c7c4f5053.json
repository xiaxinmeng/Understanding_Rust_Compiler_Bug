{"sha": "d70be670474c98e62eefc67674b7bb3c7c4f5053", "node_id": "C_kwDOAAsO6NoAKGQ3MGJlNjcwNDc0Yzk4ZTYyZWVmYzY3Njc0YjdiYjNjN2M0ZjUwNTM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-18T20:17:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-18T20:17:07Z"}, "message": "Rollup merge of #112753 - Zalathar:no-bless, r=clubby789\n\nDon't try to auto-bless 32-bit `mir-opt` tests on ARM Mac hosts\n\n#112418 added special support for automatically blessing 32-bit output on 64-bit hosts, for the subset of `mir-opt` tests that are pointer-width-dependent.\n\nThis relies on the 64-bit host having some corresponding 32-bit target that can be built \u201ceasily\u201d. For most 64-bit hosts this is fine, but ARM Macs don't have a corresponding 32-bit target. (There have never been 32-bit ARM Macs, and ARM Macs don't have the libraries needed for building `i686-apple-darwin`.)\n\nThere is an entry for `(\"i686-apple-darwin\", \"aarch64-apple-darwin\")` in the list of corresponding 32-bit platforms, but this doesn't actually work on ARM Macs. Instead, the bootstrap invocation fails to build the necessary 32-bit target support, and nothing gets tested or blessed.\n\nAccording to [this Zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20bless.20any.20mir-opt.20tests.20on.20aarch64.20Mac/near/367109789), that mapping was only added because the author assumed it would work. But since it doesn't actually work on ARM Macs, the solution is to just remove that mapping.\n\nWith the mapping removed, ARM Macs still can't auto-bless 32-bit output (they will see a warning instead), but at least they can now bless the output of `mir-opt` tests that don't care about pointer width.", "tree": {"sha": "c660007db49da031dc86cc55c6d032aba4c95945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c660007db49da031dc86cc55c6d032aba4c95945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d70be670474c98e62eefc67674b7bb3c7c4f5053", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkj2ZDCRBK7hj4Ov3rIwAAgdgIAEL+KfpdLFILlaW+04g1CvN7\n0o5MQozCXcKPAWzRfAMvVzpyeKAylczA4tQDWNayLGHi2ss2hCc8TqFnZjm4eo/S\nsKH7l9RRuvD0U2+0/vdMRXYWIkwx+JohLNpsjUQuAVdGi4UKEL5Oz+QrOtI9UEcm\nCQfRMrZh4spIrWQkGHP83hlEARBz3genbsECPYYd75Eb6EN0q0cv41RP/B5uYtEx\nk5JuGq5k1LctEEoOzBNPJVUNw16w7WnNjRE+imJwFzYccFHdUyicoXRAaZwAlOKl\nobzR9H/ZfxXSzOOyOEsBxRGkom5dSoaHn4HsWVxtO30v6eNgb5rlQjPXxLpocwc=\n=gcPX\n-----END PGP SIGNATURE-----\n", "payload": "tree c660007db49da031dc86cc55c6d032aba4c95945\nparent b598ea101c1f874dc7e94354b3006305d1f55b09\nparent b198589214e5d6e1a7dc40599e61031a0d1a7b1b\nauthor Michael Goulet <michael@errs.io> 1687119427 -0700\ncommitter GitHub <noreply@github.com> 1687119427 -0700\n\nRollup merge of #112753 - Zalathar:no-bless, r=clubby789\n\nDon't try to auto-bless 32-bit `mir-opt` tests on ARM Mac hosts\n\n#112418 added special support for automatically blessing 32-bit output on 64-bit hosts, for the subset of `mir-opt` tests that are pointer-width-dependent.\n\nThis relies on the 64-bit host having some corresponding 32-bit target that can be built \u201ceasily\u201d. For most 64-bit hosts this is fine, but ARM Macs don't have a corresponding 32-bit target. (There have never been 32-bit ARM Macs, and ARM Macs don't have the libraries needed for building `i686-apple-darwin`.)\n\nThere is an entry for `(\"i686-apple-darwin\", \"aarch64-apple-darwin\")` in the list of corresponding 32-bit platforms, but this doesn't actually work on ARM Macs. Instead, the bootstrap invocation fails to build the necessary 32-bit target support, and nothing gets tested or blessed.\n\nAccording to [this Zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20bless.20any.20mir-opt.20tests.20on.20aarch64.20Mac/near/367109789), that mapping was only added because the author assumed it would work. But since it doesn't actually work on ARM Macs, the solution is to just remove that mapping.\n\nWith the mapping removed, ARM Macs still can't auto-bless 32-bit output (they will see a warning instead), but at least they can now bless the output of `mir-opt` tests that don't care about pointer width.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d70be670474c98e62eefc67674b7bb3c7c4f5053", "html_url": "https://github.com/rust-lang/rust/commit/d70be670474c98e62eefc67674b7bb3c7c4f5053", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d70be670474c98e62eefc67674b7bb3c7c4f5053/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b598ea101c1f874dc7e94354b3006305d1f55b09", "url": "https://api.github.com/repos/rust-lang/rust/commits/b598ea101c1f874dc7e94354b3006305d1f55b09", "html_url": "https://github.com/rust-lang/rust/commit/b598ea101c1f874dc7e94354b3006305d1f55b09"}, {"sha": "b198589214e5d6e1a7dc40599e61031a0d1a7b1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b198589214e5d6e1a7dc40599e61031a0d1a7b1b", "html_url": "https://github.com/rust-lang/rust/commit/b198589214e5d6e1a7dc40599e61031a0d1a7b1b"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "9212362f6c9e10e2f7c8a52b9d2ab68e6a07a113", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d70be670474c98e62eefc67674b7bb3c7c4f5053/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d70be670474c98e62eefc67674b7bb3c7c4f5053/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d70be670474c98e62eefc67674b7bb3c7c4f5053", "patch": "@@ -44,7 +44,8 @@ const MIR_OPT_BLESS_TARGET_MAPPING: &[(&str, &str)] = &[\n     (\"i686-pc-windows-msvc\", \"x86_64-pc-windows-msvc\"),\n     (\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"),\n     (\"i686-apple-darwin\", \"x86_64-apple-darwin\"),\n-    (\"i686-apple-darwin\", \"aarch64-apple-darwin\"),\n+    // ARM Macs don't have a corresponding 32-bit target that they can (easily)\n+    // build for, so there is no entry for \"aarch64-apple-darwin\" here.\n ];\n \n fn try_run(builder: &Builder<'_>, cmd: &mut Command) -> bool {"}]}