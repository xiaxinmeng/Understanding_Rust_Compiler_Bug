{"sha": "e5e2b0be26ea177527b60d355bd8f56cd473bd00", "node_id": "C_kwDOAAsO6NoAKGU1ZTJiMGJlMjZlYTE3NzUyN2I2MGQzNTViZDhmNTZjZDQ3M2JkMDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-18T22:46:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-18T22:46:47Z"}, "message": "Auto merge of #93048 - matthiaskrgr:rollup-cz5ma34, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #90782 (Implement raw-dylib support for windows-gnu)\n - #91150 (Let qpath contain NtTy: `<$:ty as $:ty>::\u2026`)\n - #92425 (Improve SIMD casts)\n - #92692 (Simplify and unify rustdoc sidebar styles)\n - #92780 (Directly use ConstValue for single literals in blocks)\n - #92924 (Delete pretty printer tracing)\n - #93018 (Remove some unused `Ord` derives based on `Span`)\n - #93026 (fix typo in `max` description for f32/f64)\n - #93035 (Fix stdarch submodule pointing to commit outside tree)\n\nFailed merges:\n\n - #92861 (Rustdoc mobile: put out-of-band info on its own line)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d88fe7568bde7be8c68938dc717b0c01ead17cdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d88fe7568bde7be8c68938dc717b0c01ead17cdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5e2b0be26ea177527b60d355bd8f56cd473bd00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e2b0be26ea177527b60d355bd8f56cd473bd00", "html_url": "https://github.com/rust-lang/rust/commit/e5e2b0be26ea177527b60d355bd8f56cd473bd00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5e2b0be26ea177527b60d355bd8f56cd473bd00/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "html_url": "https://github.com/rust-lang/rust/commit/9ad5d82f822b3cb67637f11be2e65c5662b66ec0"}, {"sha": "f851a849cb29db5eb761fe68abf1ccaf33b7d544", "url": "https://api.github.com/repos/rust-lang/rust/commits/f851a849cb29db5eb761fe68abf1ccaf33b7d544", "html_url": "https://github.com/rust-lang/rust/commit/f851a849cb29db5eb761fe68abf1ccaf33b7d544"}], "stats": {"total": 1644, "additions": 902, "deletions": 742}, "files": [{"sha": "4c02b21dd71e9d9cfd06e388923ddb6aaa55111d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -3433,7 +3433,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n  \"rustc_span\",\n- \"tracing\",\n ]\n \n [[package]]"}, {"sha": "565488ab6a52d20cefd6b5b569aae45f1432427c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -2006,7 +2006,7 @@ bitflags::bitflags! {\n     }\n }\n \n-#[derive(Clone, PartialEq, PartialOrd, Encodable, Decodable, Debug, Hash, HashStable_Generic)]\n+#[derive(Clone, PartialEq, Encodable, Decodable, Debug, Hash, HashStable_Generic)]\n pub enum InlineAsmTemplatePiece {\n     String(String),\n     Placeholder { operand_idx: usize, modifier: Option<char>, span: Span },\n@@ -2211,7 +2211,7 @@ pub enum IsAuto {\n     No,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]\n #[derive(HashStable_Generic)]\n pub enum Unsafe {\n     Yes(Span),"}, {"sha": "5ad8714e9fec999dd71591a64daa47c2652ddae1", "filename": "compiler/rustc_ast_pretty/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_ast_pretty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_ast_pretty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2FCargo.toml?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -7,6 +7,5 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-tracing = \"0.1\"\n rustc_span = { path = \"../rustc_span\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "25437f8b53a94e4250a933433ad23077382eef3a", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -138,7 +138,6 @@ use ring::RingBuffer;\n use std::borrow::Cow;\n use std::collections::VecDeque;\n use std::fmt;\n-use tracing::debug;\n \n /// How to break. Described in more detail in the module docs.\n #[derive(Clone, Copy, PartialEq)]\n@@ -193,22 +192,6 @@ impl fmt::Display for Token {\n     }\n }\n \n-fn buf_str(buf: &RingBuffer<BufEntry>, left: usize, right: usize, lim: usize) -> String {\n-    let mut i = left;\n-    let mut l = lim;\n-    let mut s = String::from(\"[\");\n-    while i != right && l != 0 {\n-        l -= 1;\n-        if i != left {\n-            s.push_str(\", \");\n-        }\n-        s.push_str(&format!(\"{}={}\", buf[i].size, &buf[i].token));\n-        i += 1;\n-    }\n-    s.push(']');\n-    s\n-}\n-\n #[derive(Copy, Clone)]\n enum PrintStackBreak {\n     Fits,\n@@ -267,7 +250,6 @@ impl Default for BufEntry {\n impl Printer {\n     pub fn new() -> Self {\n         let linewidth = 78;\n-        debug!(\"Printer::new {}\", linewidth);\n         let mut buf = RingBuffer::new();\n         buf.advance_right();\n         Printer {\n@@ -310,16 +292,13 @@ impl Printer {\n         } else {\n             self.advance_right();\n         }\n-        debug!(\"pp Begin({})/buffer Vec<{},{}>\", b.offset, self.left, self.right);\n         self.scan_push(BufEntry { token: Token::Begin(b), size: -self.right_total });\n     }\n \n     fn scan_end(&mut self) {\n         if self.scan_stack.is_empty() {\n-            debug!(\"pp End/print Vec<{},{}>\", self.left, self.right);\n             self.print_end();\n         } else {\n-            debug!(\"pp End/buffer Vec<{},{}>\", self.left, self.right);\n             self.advance_right();\n             self.scan_push(BufEntry { token: Token::End, size: -1 });\n         }\n@@ -334,18 +313,15 @@ impl Printer {\n         } else {\n             self.advance_right();\n         }\n-        debug!(\"pp Break({})/buffer Vec<{},{}>\", b.offset, self.left, self.right);\n         self.check_stack(0);\n         self.scan_push(BufEntry { token: Token::Break(b), size: -self.right_total });\n         self.right_total += b.blank_space;\n     }\n \n     fn scan_string(&mut self, s: Cow<'static, str>) {\n         if self.scan_stack.is_empty() {\n-            debug!(\"pp String('{}')/print Vec<{},{}>\", s, self.left, self.right);\n             self.print_string(s);\n         } else {\n-            debug!(\"pp String('{}')/buffer Vec<{},{}>\", s, self.left, self.right);\n             self.advance_right();\n             let len = s.len() as isize;\n             self.buf[self.right] = BufEntry { token: Token::String(s), size: len };\n@@ -355,18 +331,8 @@ impl Printer {\n     }\n \n     fn check_stream(&mut self) {\n-        debug!(\n-            \"check_stream Vec<{}, {}> with left_total={}, right_total={}\",\n-            self.left, self.right, self.left_total, self.right_total\n-        );\n         if self.right_total - self.left_total > self.space {\n-            debug!(\n-                \"scan window is {}, longer than space on line ({})\",\n-                self.right_total - self.left_total,\n-                self.space\n-            );\n             if Some(&self.left) == self.scan_stack.back() {\n-                debug!(\"setting {} to infinity and popping\", self.left);\n                 let scanned = self.scan_pop_bottom();\n                 self.buf[scanned].size = SIZE_INFINITY;\n             }\n@@ -378,7 +344,6 @@ impl Printer {\n     }\n \n     fn scan_push(&mut self, entry: BufEntry) {\n-        debug!(\"scan_push {}\", self.right);\n         self.buf[self.right] = entry;\n         self.scan_stack.push_front(self.right);\n     }\n@@ -401,11 +366,6 @@ impl Printer {\n     }\n \n     fn advance_left(&mut self) {\n-        debug!(\n-            \"advance_left Vec<{},{}>, sizeof({})={}\",\n-            self.left, self.right, self.left, self.buf[self.left].size\n-        );\n-\n         let mut left_size = self.buf[self.left].size;\n \n         while left_size >= 0 {\n@@ -465,14 +425,12 @@ impl Printer {\n     }\n \n     fn print_newline(&mut self, amount: isize) {\n-        debug!(\"NEWLINE {}\", amount);\n         self.out.push('\\n');\n         self.pending_indentation = 0;\n         self.indent(amount);\n     }\n \n     fn indent(&mut self, amount: isize) {\n-        debug!(\"INDENT {}\", amount);\n         self.pending_indentation += amount;\n     }\n \n@@ -485,40 +443,33 @@ impl Printer {\n     fn print_begin(&mut self, b: BeginToken, l: isize) {\n         if l > self.space {\n             let col = self.margin - self.space + b.offset;\n-            debug!(\"print Begin -> push broken block at col {}\", col);\n             self.print_stack\n                 .push(PrintStackElem { offset: col, pbreak: PrintStackBreak::Broken(b.breaks) });\n         } else {\n-            debug!(\"print Begin -> push fitting block\");\n             self.print_stack.push(PrintStackElem { offset: 0, pbreak: PrintStackBreak::Fits });\n         }\n     }\n \n     fn print_end(&mut self) {\n-        debug!(\"print End -> pop End\");\n         self.print_stack.pop().unwrap();\n     }\n \n     fn print_break(&mut self, b: BreakToken, l: isize) {\n         let top = self.get_top();\n         match top.pbreak {\n             PrintStackBreak::Fits => {\n-                debug!(\"print Break({}) in fitting block\", b.blank_space);\n                 self.space -= b.blank_space;\n                 self.indent(b.blank_space);\n             }\n             PrintStackBreak::Broken(Breaks::Consistent) => {\n-                debug!(\"print Break({}+{}) in consistent block\", top.offset, b.offset);\n                 self.print_newline(top.offset + b.offset);\n                 self.space = self.margin - (top.offset + b.offset);\n             }\n             PrintStackBreak::Broken(Breaks::Inconsistent) => {\n                 if l > self.space {\n-                    debug!(\"print Break({}+{}) w/ newline in inconsistent\", top.offset, b.offset);\n                     self.print_newline(top.offset + b.offset);\n                     self.space = self.margin - (top.offset + b.offset);\n                 } else {\n-                    debug!(\"print Break({}) w/o newline in inconsistent\", b.blank_space);\n                     self.indent(b.blank_space);\n                     self.space -= b.blank_space;\n                 }\n@@ -528,7 +479,6 @@ impl Printer {\n \n     fn print_string(&mut self, s: Cow<'static, str>) {\n         let len = s.len() as isize;\n-        debug!(\"print String({})\", s);\n         // assert!(len <= space);\n         self.space -= len;\n \n@@ -545,8 +495,6 @@ impl Printer {\n     }\n \n     fn print(&mut self, token: Token, l: isize) {\n-        debug!(\"print {} {} (remaining line space={})\", token, l, self.space);\n-        debug!(\"{}\", buf_str(&self.buf, self.left, self.right, 6));\n         match token {\n             Token::Begin(b) => self.print_begin(b, l),\n             Token::End => self.print_end(),"}, {"sha": "5703a72c686e5bb3dc09e9d80aba617dbd7cd36f", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 159, "deletions": 46, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,6 +1,7 @@\n //! A helper class for dealing with static archives\n \n-use std::ffi::{CStr, CString};\n+use std::env;\n+use std::ffi::{CStr, CString, OsString};\n use std::io;\n use std::mem;\n use std::path::{Path, PathBuf};\n@@ -158,54 +159,127 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             output_path.with_extension(\"lib\")\n         };\n \n-        // we've checked for \\0 characters in the library name already\n-        let dll_name_z = CString::new(lib_name).unwrap();\n-        // All import names are Rust identifiers and therefore cannot contain \\0 characters.\n-        // FIXME: when support for #[link_name] implemented, ensure that import.name values don't\n-        // have any \\0 characters\n-        let import_name_and_ordinal_vector: Vec<(CString, Option<u16>)> = dll_imports\n+        let mingw_gnu_toolchain = self.config.sess.target.llvm_target.ends_with(\"pc-windows-gnu\");\n+\n+        let import_name_and_ordinal_vector: Vec<(String, Option<u16>)> = dll_imports\n             .iter()\n             .map(|import: &DllImport| {\n                 if self.config.sess.target.arch == \"x86\" {\n-                    (LlvmArchiveBuilder::i686_decorated_name(import), import.ordinal)\n+                    (\n+                        LlvmArchiveBuilder::i686_decorated_name(import, mingw_gnu_toolchain),\n+                        import.ordinal,\n+                    )\n                 } else {\n-                    (CString::new(import.name.to_string()).unwrap(), import.ordinal)\n+                    (import.name.to_string(), import.ordinal)\n                 }\n             })\n             .collect();\n \n-        let output_path_z = rustc_fs_util::path_to_c_string(&output_path);\n+        if mingw_gnu_toolchain {\n+            // The binutils linker used on -windows-gnu targets cannot read the import\n+            // libraries generated by LLVM: in our attempts, the linker produced an .EXE\n+            // that loaded but crashed with an AV upon calling one of the imported\n+            // functions.  Therefore, use binutils to create the import library instead,\n+            // by writing a .DEF file to the temp dir and calling binutils's dlltool.\n+            let def_file_path =\n+                tmpdir.as_ref().join(format!(\"{}_imports\", lib_name)).with_extension(\"def\");\n+\n+            let def_file_content = format!(\n+                \"EXPORTS\\n{}\",\n+                import_name_and_ordinal_vector\n+                    .into_iter()\n+                    .map(|(name, ordinal)| {\n+                        match ordinal {\n+                            Some(n) => format!(\"{} @{} NONAME\", name, n),\n+                            None => name,\n+                        }\n+                    })\n+                    .collect::<Vec<String>>()\n+                    .join(\"\\n\")\n+            );\n \n-        tracing::trace!(\"invoking LLVMRustWriteImportLibrary\");\n-        tracing::trace!(\"  dll_name {:#?}\", dll_name_z);\n-        tracing::trace!(\"  output_path {}\", output_path.display());\n-        tracing::trace!(\n-            \"  import names: {}\",\n-            dll_imports.iter().map(|import| import.name.to_string()).collect::<Vec<_>>().join(\", \"),\n-        );\n+            match std::fs::write(&def_file_path, def_file_content) {\n+                Ok(_) => {}\n+                Err(e) => {\n+                    self.config.sess.fatal(&format!(\"Error writing .DEF file: {}\", e));\n+                }\n+            };\n \n-        let ffi_exports: Vec<LLVMRustCOFFShortExport> = import_name_and_ordinal_vector\n-            .iter()\n-            .map(|(name_z, ordinal)| LLVMRustCOFFShortExport::new(name_z.as_ptr(), *ordinal))\n-            .collect();\n-        let result = unsafe {\n-            crate::llvm::LLVMRustWriteImportLibrary(\n-                dll_name_z.as_ptr(),\n-                output_path_z.as_ptr(),\n-                ffi_exports.as_ptr(),\n-                ffi_exports.len(),\n-                llvm_machine_type(&self.config.sess.target.arch) as u16,\n-                !self.config.sess.target.is_like_msvc,\n-            )\n-        };\n+            let dlltool = find_binutils_dlltool(self.config.sess);\n+            let result = std::process::Command::new(dlltool)\n+                .args([\n+                    \"-d\",\n+                    def_file_path.to_str().unwrap(),\n+                    \"-D\",\n+                    lib_name,\n+                    \"-l\",\n+                    output_path.to_str().unwrap(),\n+                ])\n+                .output();\n+\n+            match result {\n+                Err(e) => {\n+                    self.config.sess.fatal(&format!(\"Error calling dlltool: {}\", e.to_string()));\n+                }\n+                Ok(output) if !output.status.success() => self.config.sess.fatal(&format!(\n+                    \"Dlltool could not create import library: {}\\n{}\",\n+                    String::from_utf8_lossy(&output.stdout),\n+                    String::from_utf8_lossy(&output.stderr)\n+                )),\n+                _ => {}\n+            }\n+        } else {\n+            // we've checked for \\0 characters in the library name already\n+            let dll_name_z = CString::new(lib_name).unwrap();\n+\n+            let output_path_z = rustc_fs_util::path_to_c_string(&output_path);\n+\n+            tracing::trace!(\"invoking LLVMRustWriteImportLibrary\");\n+            tracing::trace!(\"  dll_name {:#?}\", dll_name_z);\n+            tracing::trace!(\"  output_path {}\", output_path.display());\n+            tracing::trace!(\n+                \"  import names: {}\",\n+                dll_imports\n+                    .iter()\n+                    .map(|import| import.name.to_string())\n+                    .collect::<Vec<_>>()\n+                    .join(\", \"),\n+            );\n \n-        if result == crate::llvm::LLVMRustResult::Failure {\n-            self.config.sess.fatal(&format!(\n-                \"Error creating import library for {}: {}\",\n-                lib_name,\n-                llvm::last_error().unwrap_or(\"unknown LLVM error\".to_string())\n-            ));\n-        }\n+            // All import names are Rust identifiers and therefore cannot contain \\0 characters.\n+            // FIXME: when support for #[link_name] is implemented, ensure that the import names\n+            // still don't contain any \\0 characters.  Also need to check that the names don't\n+            // contain substrings like \" @\" or \"NONAME\" that are keywords or otherwise reserved\n+            // in definition files.\n+            let cstring_import_name_and_ordinal_vector: Vec<(CString, Option<u16>)> =\n+                import_name_and_ordinal_vector\n+                    .into_iter()\n+                    .map(|(name, ordinal)| (CString::new(name).unwrap(), ordinal))\n+                    .collect();\n+\n+            let ffi_exports: Vec<LLVMRustCOFFShortExport> = cstring_import_name_and_ordinal_vector\n+                .iter()\n+                .map(|(name_z, ordinal)| LLVMRustCOFFShortExport::new(name_z.as_ptr(), *ordinal))\n+                .collect();\n+            let result = unsafe {\n+                crate::llvm::LLVMRustWriteImportLibrary(\n+                    dll_name_z.as_ptr(),\n+                    output_path_z.as_ptr(),\n+                    ffi_exports.as_ptr(),\n+                    ffi_exports.len(),\n+                    llvm_machine_type(&self.config.sess.target.arch) as u16,\n+                    !self.config.sess.target.is_like_msvc,\n+                )\n+            };\n+\n+            if result == crate::llvm::LLVMRustResult::Failure {\n+                self.config.sess.fatal(&format!(\n+                    \"Error creating import library for {}: {}\",\n+                    lib_name,\n+                    llvm::last_error().unwrap_or(\"unknown LLVM error\".to_string())\n+                ));\n+            }\n+        };\n \n         self.add_archive(&output_path, |_| false).unwrap_or_else(|e| {\n             self.config.sess.fatal(&format!(\n@@ -332,22 +406,61 @@ impl<'a> LlvmArchiveBuilder<'a> {\n         }\n     }\n \n-    fn i686_decorated_name(import: &DllImport) -> CString {\n+    fn i686_decorated_name(import: &DllImport, mingw: bool) -> String {\n         let name = import.name;\n-        // We verified during construction that `name` does not contain any NULL characters, so the\n-        // conversion to CString is guaranteed to succeed.\n-        CString::new(match import.calling_convention {\n-            DllCallingConvention::C => format!(\"_{}\", name),\n-            DllCallingConvention::Stdcall(arg_list_size) => format!(\"_{}@{}\", name, arg_list_size),\n+        let prefix = if mingw { \"\" } else { \"_\" };\n+\n+        match import.calling_convention {\n+            DllCallingConvention::C => format!(\"{}{}\", prefix, name),\n+            DllCallingConvention::Stdcall(arg_list_size) => {\n+                format!(\"{}{}@{}\", prefix, name, arg_list_size)\n+            }\n             DllCallingConvention::Fastcall(arg_list_size) => format!(\"@{}@{}\", name, arg_list_size),\n             DllCallingConvention::Vectorcall(arg_list_size) => {\n                 format!(\"{}@@{}\", name, arg_list_size)\n             }\n-        })\n-        .unwrap()\n+        }\n     }\n }\n \n fn string_to_io_error(s: String) -> io::Error {\n     io::Error::new(io::ErrorKind::Other, format!(\"bad archive: {}\", s))\n }\n+\n+fn find_binutils_dlltool(sess: &Session) -> OsString {\n+    assert!(sess.target.options.is_like_windows && !sess.target.options.is_like_msvc);\n+    if let Some(dlltool_path) = &sess.opts.debugging_opts.dlltool {\n+        return dlltool_path.clone().into_os_string();\n+    }\n+\n+    let mut tool_name: OsString = if sess.host.arch != sess.target.arch {\n+        // We are cross-compiling, so we need the tool with the prefix matching our target\n+        if sess.target.arch == \"x86\" {\n+            \"i686-w64-mingw32-dlltool\"\n+        } else {\n+            \"x86_64-w64-mingw32-dlltool\"\n+        }\n+    } else {\n+        // We are not cross-compiling, so we just want `dlltool`\n+        \"dlltool\"\n+    }\n+    .into();\n+\n+    if sess.host.options.is_like_windows {\n+        // If we're compiling on Windows, add the .exe suffix\n+        tool_name.push(\".exe\");\n+    }\n+\n+    // NOTE: it's not clear how useful it is to explicitly search PATH.\n+    for dir in env::split_paths(&env::var_os(\"PATH\").unwrap_or_default()) {\n+        let full_path = dir.join(&tool_name);\n+        if full_path.is_file() {\n+            return full_path.into_os_string();\n+        }\n+    }\n+\n+    // The user didn't specify the location of the dlltool binary, and we weren't able\n+    // to find the appropriate one on the PATH.  Just return the name of the tool\n+    // and let the invocation fail with a hopefully useful error message.\n+    tool_name\n+}"}, {"sha": "8a9450c20dda4c1727bfa1af201ff190d11344b6", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -731,27 +731,11 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn fptoui_sat(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> Option<&'ll Value> {\n-        if !self.fptoint_sat_broken_in_llvm() {\n-            let src_ty = self.cx.val_ty(val);\n-            let float_width = self.cx.float_width(src_ty);\n-            let int_width = self.cx.int_width(dest_ty);\n-            let name = format!(\"llvm.fptoui.sat.i{}.f{}\", int_width, float_width);\n-            return Some(self.call_intrinsic(&name, &[val]));\n-        }\n-\n-        None\n+        self.fptoint_sat(false, val, dest_ty)\n     }\n \n     fn fptosi_sat(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> Option<&'ll Value> {\n-        if !self.fptoint_sat_broken_in_llvm() {\n-            let src_ty = self.cx.val_ty(val);\n-            let float_width = self.cx.float_width(src_ty);\n-            let int_width = self.cx.int_width(dest_ty);\n-            let name = format!(\"llvm.fptosi.sat.i{}.f{}\", int_width, float_width);\n-            return Some(self.call_intrinsic(&name, &[val]));\n-        }\n-\n-        None\n+        self.fptoint_sat(true, val, dest_ty)\n     }\n \n     fn fptoui(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> &'ll Value {\n@@ -1455,4 +1439,43 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n             _ => false,\n         }\n     }\n+\n+    fn fptoint_sat(\n+        &mut self,\n+        signed: bool,\n+        val: &'ll Value,\n+        dest_ty: &'ll Type,\n+    ) -> Option<&'ll Value> {\n+        if !self.fptoint_sat_broken_in_llvm() {\n+            let src_ty = self.cx.val_ty(val);\n+            let (float_ty, int_ty, vector_length) = if self.cx.type_kind(src_ty) == TypeKind::Vector\n+            {\n+                assert_eq!(self.cx.vector_length(src_ty), self.cx.vector_length(dest_ty));\n+                (\n+                    self.cx.element_type(src_ty),\n+                    self.cx.element_type(dest_ty),\n+                    Some(self.cx.vector_length(src_ty)),\n+                )\n+            } else {\n+                (src_ty, dest_ty, None)\n+            };\n+            let float_width = self.cx.float_width(float_ty);\n+            let int_width = self.cx.int_width(int_ty);\n+\n+            let instr = if signed { \"fptosi\" } else { \"fptoui\" };\n+            let name = if let Some(vector_length) = vector_length {\n+                format!(\n+                    \"llvm.{}.sat.v{}i{}.v{}f{}\",\n+                    instr, vector_length, int_width, vector_length, float_width\n+                )\n+            } else {\n+                format!(\"llvm.{}.sat.i{}.f{}\", instr, int_width, float_width)\n+            };\n+            let f =\n+                self.declare_cfn(&name, llvm::UnnamedAddr::No, self.type_func(&[src_ty], dest_ty));\n+            Some(self.call(self.type_func(&[src_ty], dest_ty), f, &[val], None))\n+        } else {\n+            None\n+        }\n+    }\n }"}, {"sha": "5adfa18035a0e2efbd53c159723c9fb52327a39d", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1688,7 +1688,7 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n     bitwise_red!(simd_reduce_all: vector_reduce_and, true);\n     bitwise_red!(simd_reduce_any: vector_reduce_or, true);\n \n-    if name == sym::simd_cast {\n+    if name == sym::simd_cast || name == sym::simd_as {\n         require_simd!(ret_ty, \"return\");\n         let (out_len, out_elem) = ret_ty.simd_size_and_type(bx.tcx());\n         require!(\n@@ -1714,14 +1714,26 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         let (in_style, in_width) = match in_elem.kind() {\n             // vectors of pointer-sized integers should've been\n             // disallowed before here, so this unwrap is safe.\n-            ty::Int(i) => (Style::Int(true), i.bit_width().unwrap()),\n-            ty::Uint(u) => (Style::Int(false), u.bit_width().unwrap()),\n+            ty::Int(i) => (\n+                Style::Int(true),\n+                i.normalize(bx.tcx().sess.target.pointer_width).bit_width().unwrap(),\n+            ),\n+            ty::Uint(u) => (\n+                Style::Int(false),\n+                u.normalize(bx.tcx().sess.target.pointer_width).bit_width().unwrap(),\n+            ),\n             ty::Float(f) => (Style::Float, f.bit_width()),\n             _ => (Style::Unsupported, 0),\n         };\n         let (out_style, out_width) = match out_elem.kind() {\n-            ty::Int(i) => (Style::Int(true), i.bit_width().unwrap()),\n-            ty::Uint(u) => (Style::Int(false), u.bit_width().unwrap()),\n+            ty::Int(i) => (\n+                Style::Int(true),\n+                i.normalize(bx.tcx().sess.target.pointer_width).bit_width().unwrap(),\n+            ),\n+            ty::Uint(u) => (\n+                Style::Int(false),\n+                u.normalize(bx.tcx().sess.target.pointer_width).bit_width().unwrap(),\n+            ),\n             ty::Float(f) => (Style::Float, f.bit_width()),\n             _ => (Style::Unsupported, 0),\n         };\n@@ -1748,10 +1760,10 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n                 });\n             }\n             (Style::Float, Style::Int(out_is_signed)) => {\n-                return Ok(if out_is_signed {\n-                    bx.fptosi(args[0].immediate(), llret_ty)\n-                } else {\n-                    bx.fptoui(args[0].immediate(), llret_ty)\n+                return Ok(match (out_is_signed, name == sym::simd_as) {\n+                    (false, false) => bx.fptoui(args[0].immediate(), llret_ty),\n+                    (true, false) => bx.fptosi(args[0].immediate(), llret_ty),\n+                    (_, true) => bx.cast_float_to_int(out_is_signed, args[0].immediate(), llret_ty),\n                 });\n             }\n             (Style::Float, Style::Float) => {"}, {"sha": "68decce82ab52a44bdd6aa83235e4ce040c54ced", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 147, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -3,11 +3,10 @@ use super::place::PlaceRef;\n use super::{FunctionCx, LocalRef};\n \n use crate::base;\n-use crate::common::{self, IntPredicate, RealPredicate};\n+use crate::common::{self, IntPredicate};\n use crate::traits::*;\n use crate::MemFlags;\n \n-use rustc_apfloat::{ieee, Float, Round, Status};\n use rustc_middle::mir;\n use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n@@ -368,10 +367,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 bx.inttoptr(usize_llval, ll_t_out)\n                             }\n                             (CastTy::Float, CastTy::Int(IntTy::I)) => {\n-                                cast_float_to_int(&mut bx, true, llval, ll_t_in, ll_t_out)\n+                                bx.cast_float_to_int(true, llval, ll_t_out)\n                             }\n                             (CastTy::Float, CastTy::Int(_)) => {\n-                                cast_float_to_int(&mut bx, false, llval, ll_t_in, ll_t_out)\n+                                bx.cast_float_to_int(false, llval, ll_t_out)\n                             }\n                             _ => bug!(\"unsupported cast: {:?} to {:?}\", operand.layout.ty, cast.ty),\n                         };\n@@ -768,146 +767,3 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // (*) this is only true if the type is suitable\n     }\n }\n-\n-fn cast_float_to_int<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n-    bx: &mut Bx,\n-    signed: bool,\n-    x: Bx::Value,\n-    float_ty: Bx::Type,\n-    int_ty: Bx::Type,\n-) -> Bx::Value {\n-    if let Some(false) = bx.cx().sess().opts.debugging_opts.saturating_float_casts {\n-        return if signed { bx.fptosi(x, int_ty) } else { bx.fptoui(x, int_ty) };\n-    }\n-\n-    let try_sat_result = if signed { bx.fptosi_sat(x, int_ty) } else { bx.fptoui_sat(x, int_ty) };\n-    if let Some(try_sat_result) = try_sat_result {\n-        return try_sat_result;\n-    }\n-\n-    let int_width = bx.cx().int_width(int_ty);\n-    let float_width = bx.cx().float_width(float_ty);\n-    // LLVM's fpto[su]i returns undef when the input x is infinite, NaN, or does not fit into the\n-    // destination integer type after rounding towards zero. This `undef` value can cause UB in\n-    // safe code (see issue #10184), so we implement a saturating conversion on top of it:\n-    // Semantically, the mathematical value of the input is rounded towards zero to the next\n-    // mathematical integer, and then the result is clamped into the range of the destination\n-    // integer type. Positive and negative infinity are mapped to the maximum and minimum value of\n-    // the destination integer type. NaN is mapped to 0.\n-    //\n-    // Define f_min and f_max as the largest and smallest (finite) floats that are exactly equal to\n-    // a value representable in int_ty.\n-    // They are exactly equal to int_ty::{MIN,MAX} if float_ty has enough significand bits.\n-    // Otherwise, int_ty::MAX must be rounded towards zero, as it is one less than a power of two.\n-    // int_ty::MIN, however, is either zero or a negative power of two and is thus exactly\n-    // representable. Note that this only works if float_ty's exponent range is sufficiently large.\n-    // f16 or 256 bit integers would break this property. Right now the smallest float type is f32\n-    // with exponents ranging up to 127, which is barely enough for i128::MIN = -2^127.\n-    // On the other hand, f_max works even if int_ty::MAX is greater than float_ty::MAX. Because\n-    // we're rounding towards zero, we just get float_ty::MAX (which is always an integer).\n-    // This already happens today with u128::MAX = 2^128 - 1 > f32::MAX.\n-    let int_max = |signed: bool, int_width: u64| -> u128 {\n-        let shift_amount = 128 - int_width;\n-        if signed { i128::MAX as u128 >> shift_amount } else { u128::MAX >> shift_amount }\n-    };\n-    let int_min = |signed: bool, int_width: u64| -> i128 {\n-        if signed { i128::MIN >> (128 - int_width) } else { 0 }\n-    };\n-\n-    let compute_clamp_bounds_single = |signed: bool, int_width: u64| -> (u128, u128) {\n-        let rounded_min = ieee::Single::from_i128_r(int_min(signed, int_width), Round::TowardZero);\n-        assert_eq!(rounded_min.status, Status::OK);\n-        let rounded_max = ieee::Single::from_u128_r(int_max(signed, int_width), Round::TowardZero);\n-        assert!(rounded_max.value.is_finite());\n-        (rounded_min.value.to_bits(), rounded_max.value.to_bits())\n-    };\n-    let compute_clamp_bounds_double = |signed: bool, int_width: u64| -> (u128, u128) {\n-        let rounded_min = ieee::Double::from_i128_r(int_min(signed, int_width), Round::TowardZero);\n-        assert_eq!(rounded_min.status, Status::OK);\n-        let rounded_max = ieee::Double::from_u128_r(int_max(signed, int_width), Round::TowardZero);\n-        assert!(rounded_max.value.is_finite());\n-        (rounded_min.value.to_bits(), rounded_max.value.to_bits())\n-    };\n-\n-    let mut float_bits_to_llval = |bits| {\n-        let bits_llval = match float_width {\n-            32 => bx.cx().const_u32(bits as u32),\n-            64 => bx.cx().const_u64(bits as u64),\n-            n => bug!(\"unsupported float width {}\", n),\n-        };\n-        bx.bitcast(bits_llval, float_ty)\n-    };\n-    let (f_min, f_max) = match float_width {\n-        32 => compute_clamp_bounds_single(signed, int_width),\n-        64 => compute_clamp_bounds_double(signed, int_width),\n-        n => bug!(\"unsupported float width {}\", n),\n-    };\n-    let f_min = float_bits_to_llval(f_min);\n-    let f_max = float_bits_to_llval(f_max);\n-    // To implement saturation, we perform the following steps:\n-    //\n-    // 1. Cast x to an integer with fpto[su]i. This may result in undef.\n-    // 2. Compare x to f_min and f_max, and use the comparison results to select:\n-    //  a) int_ty::MIN if x < f_min or x is NaN\n-    //  b) int_ty::MAX if x > f_max\n-    //  c) the result of fpto[su]i otherwise\n-    // 3. If x is NaN, return 0.0, otherwise return the result of step 2.\n-    //\n-    // This avoids resulting undef because values in range [f_min, f_max] by definition fit into the\n-    // destination type. It creates an undef temporary, but *producing* undef is not UB. Our use of\n-    // undef does not introduce any non-determinism either.\n-    // More importantly, the above procedure correctly implements saturating conversion.\n-    // Proof (sketch):\n-    // If x is NaN, 0 is returned by definition.\n-    // Otherwise, x is finite or infinite and thus can be compared with f_min and f_max.\n-    // This yields three cases to consider:\n-    // (1) if x in [f_min, f_max], the result of fpto[su]i is returned, which agrees with\n-    //     saturating conversion for inputs in that range.\n-    // (2) if x > f_max, then x is larger than int_ty::MAX. This holds even if f_max is rounded\n-    //     (i.e., if f_max < int_ty::MAX) because in those cases, nextUp(f_max) is already larger\n-    //     than int_ty::MAX. Because x is larger than int_ty::MAX, the return value of int_ty::MAX\n-    //     is correct.\n-    // (3) if x < f_min, then x is smaller than int_ty::MIN. As shown earlier, f_min exactly equals\n-    //     int_ty::MIN and therefore the return value of int_ty::MIN is correct.\n-    // QED.\n-\n-    let int_max = bx.cx().const_uint_big(int_ty, int_max(signed, int_width));\n-    let int_min = bx.cx().const_uint_big(int_ty, int_min(signed, int_width) as u128);\n-    let zero = bx.cx().const_uint(int_ty, 0);\n-\n-    // Step 1 ...\n-    let fptosui_result = if signed { bx.fptosi(x, int_ty) } else { bx.fptoui(x, int_ty) };\n-    let less_or_nan = bx.fcmp(RealPredicate::RealULT, x, f_min);\n-    let greater = bx.fcmp(RealPredicate::RealOGT, x, f_max);\n-\n-    // Step 2: We use two comparisons and two selects, with %s1 being the\n-    // result:\n-    //     %less_or_nan = fcmp ult %x, %f_min\n-    //     %greater = fcmp olt %x, %f_max\n-    //     %s0 = select %less_or_nan, int_ty::MIN, %fptosi_result\n-    //     %s1 = select %greater, int_ty::MAX, %s0\n-    // Note that %less_or_nan uses an *unordered* comparison. This\n-    // comparison is true if the operands are not comparable (i.e., if x is\n-    // NaN). The unordered comparison ensures that s1 becomes int_ty::MIN if\n-    // x is NaN.\n-    //\n-    // Performance note: Unordered comparison can be lowered to a \"flipped\"\n-    // comparison and a negation, and the negation can be merged into the\n-    // select. Therefore, it not necessarily any more expensive than an\n-    // ordered (\"normal\") comparison. Whether these optimizations will be\n-    // performed is ultimately up to the backend, but at least x86 does\n-    // perform them.\n-    let s0 = bx.select(less_or_nan, int_min, fptosui_result);\n-    let s1 = bx.select(greater, int_max, s0);\n-\n-    // Step 3: NaN replacement.\n-    // For unsigned types, the above step already yielded int_ty::MIN == 0 if x is NaN.\n-    // Therefore we only need to execute this step for signed integer types.\n-    if signed {\n-        // LLVM has no isNaN predicate, so we use (x == x) instead\n-        let cmp = bx.fcmp(RealPredicate::RealOEQ, x, x);\n-        bx.select(cmp, s1, zero)\n-    } else {\n-        s1\n-    }\n-}"}, {"sha": "5a06fb4610587963b923e46be227a4e85fc61499", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 178, "deletions": 2, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,18 +1,21 @@\n use super::abi::AbiBuilderMethods;\n use super::asm::AsmBuilderMethods;\n+use super::consts::ConstMethods;\n use super::coverageinfo::CoverageInfoBuilderMethods;\n use super::debuginfo::DebugInfoBuilderMethods;\n use super::intrinsic::IntrinsicCallMethods;\n-use super::type_::ArgAbiMethods;\n+use super::misc::MiscMethods;\n+use super::type_::{ArgAbiMethods, BaseTypeMethods};\n use super::{HasCodegen, StaticBuilderMethods};\n \n use crate::common::{\n-    AtomicOrdering, AtomicRmwBinOp, IntPredicate, RealPredicate, SynchronizationScope,\n+    AtomicOrdering, AtomicRmwBinOp, IntPredicate, RealPredicate, SynchronizationScope, TypeKind,\n };\n use crate::mir::operand::OperandRef;\n use crate::mir::place::PlaceRef;\n use crate::MemFlags;\n \n+use rustc_apfloat::{ieee, Float, Round, Status};\n use rustc_middle::ty::layout::{HasParamEnv, TyAndLayout};\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n@@ -202,6 +205,179 @@ pub trait BuilderMethods<'a, 'tcx>:\n     fn intcast(&mut self, val: Self::Value, dest_ty: Self::Type, is_signed: bool) -> Self::Value;\n     fn pointercast(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n \n+    fn cast_float_to_int(\n+        &mut self,\n+        signed: bool,\n+        x: Self::Value,\n+        dest_ty: Self::Type,\n+    ) -> Self::Value {\n+        let in_ty = self.cx().val_ty(x);\n+        let (float_ty, int_ty) = if self.cx().type_kind(dest_ty) == TypeKind::Vector\n+            && self.cx().type_kind(in_ty) == TypeKind::Vector\n+        {\n+            (self.cx().element_type(in_ty), self.cx().element_type(dest_ty))\n+        } else {\n+            (in_ty, dest_ty)\n+        };\n+        assert!(matches!(self.cx().type_kind(float_ty), TypeKind::Float | TypeKind::Double));\n+        assert_eq!(self.cx().type_kind(int_ty), TypeKind::Integer);\n+\n+        if let Some(false) = self.cx().sess().opts.debugging_opts.saturating_float_casts {\n+            return if signed { self.fptosi(x, dest_ty) } else { self.fptoui(x, dest_ty) };\n+        }\n+\n+        let try_sat_result =\n+            if signed { self.fptosi_sat(x, dest_ty) } else { self.fptoui_sat(x, dest_ty) };\n+        if let Some(try_sat_result) = try_sat_result {\n+            return try_sat_result;\n+        }\n+\n+        let int_width = self.cx().int_width(int_ty);\n+        let float_width = self.cx().float_width(float_ty);\n+        // LLVM's fpto[su]i returns undef when the input x is infinite, NaN, or does not fit into the\n+        // destination integer type after rounding towards zero. This `undef` value can cause UB in\n+        // safe code (see issue #10184), so we implement a saturating conversion on top of it:\n+        // Semantically, the mathematical value of the input is rounded towards zero to the next\n+        // mathematical integer, and then the result is clamped into the range of the destination\n+        // integer type. Positive and negative infinity are mapped to the maximum and minimum value of\n+        // the destination integer type. NaN is mapped to 0.\n+        //\n+        // Define f_min and f_max as the largest and smallest (finite) floats that are exactly equal to\n+        // a value representable in int_ty.\n+        // They are exactly equal to int_ty::{MIN,MAX} if float_ty has enough significand bits.\n+        // Otherwise, int_ty::MAX must be rounded towards zero, as it is one less than a power of two.\n+        // int_ty::MIN, however, is either zero or a negative power of two and is thus exactly\n+        // representable. Note that this only works if float_ty's exponent range is sufficiently large.\n+        // f16 or 256 bit integers would break this property. Right now the smallest float type is f32\n+        // with exponents ranging up to 127, which is barely enough for i128::MIN = -2^127.\n+        // On the other hand, f_max works even if int_ty::MAX is greater than float_ty::MAX. Because\n+        // we're rounding towards zero, we just get float_ty::MAX (which is always an integer).\n+        // This already happens today with u128::MAX = 2^128 - 1 > f32::MAX.\n+        let int_max = |signed: bool, int_width: u64| -> u128 {\n+            let shift_amount = 128 - int_width;\n+            if signed { i128::MAX as u128 >> shift_amount } else { u128::MAX >> shift_amount }\n+        };\n+        let int_min = |signed: bool, int_width: u64| -> i128 {\n+            if signed { i128::MIN >> (128 - int_width) } else { 0 }\n+        };\n+\n+        let compute_clamp_bounds_single = |signed: bool, int_width: u64| -> (u128, u128) {\n+            let rounded_min =\n+                ieee::Single::from_i128_r(int_min(signed, int_width), Round::TowardZero);\n+            assert_eq!(rounded_min.status, Status::OK);\n+            let rounded_max =\n+                ieee::Single::from_u128_r(int_max(signed, int_width), Round::TowardZero);\n+            assert!(rounded_max.value.is_finite());\n+            (rounded_min.value.to_bits(), rounded_max.value.to_bits())\n+        };\n+        let compute_clamp_bounds_double = |signed: bool, int_width: u64| -> (u128, u128) {\n+            let rounded_min =\n+                ieee::Double::from_i128_r(int_min(signed, int_width), Round::TowardZero);\n+            assert_eq!(rounded_min.status, Status::OK);\n+            let rounded_max =\n+                ieee::Double::from_u128_r(int_max(signed, int_width), Round::TowardZero);\n+            assert!(rounded_max.value.is_finite());\n+            (rounded_min.value.to_bits(), rounded_max.value.to_bits())\n+        };\n+        // To implement saturation, we perform the following steps:\n+        //\n+        // 1. Cast x to an integer with fpto[su]i. This may result in undef.\n+        // 2. Compare x to f_min and f_max, and use the comparison results to select:\n+        //  a) int_ty::MIN if x < f_min or x is NaN\n+        //  b) int_ty::MAX if x > f_max\n+        //  c) the result of fpto[su]i otherwise\n+        // 3. If x is NaN, return 0.0, otherwise return the result of step 2.\n+        //\n+        // This avoids resulting undef because values in range [f_min, f_max] by definition fit into the\n+        // destination type. It creates an undef temporary, but *producing* undef is not UB. Our use of\n+        // undef does not introduce any non-determinism either.\n+        // More importantly, the above procedure correctly implements saturating conversion.\n+        // Proof (sketch):\n+        // If x is NaN, 0 is returned by definition.\n+        // Otherwise, x is finite or infinite and thus can be compared with f_min and f_max.\n+        // This yields three cases to consider:\n+        // (1) if x in [f_min, f_max], the result of fpto[su]i is returned, which agrees with\n+        //     saturating conversion for inputs in that range.\n+        // (2) if x > f_max, then x is larger than int_ty::MAX. This holds even if f_max is rounded\n+        //     (i.e., if f_max < int_ty::MAX) because in those cases, nextUp(f_max) is already larger\n+        //     than int_ty::MAX. Because x is larger than int_ty::MAX, the return value of int_ty::MAX\n+        //     is correct.\n+        // (3) if x < f_min, then x is smaller than int_ty::MIN. As shown earlier, f_min exactly equals\n+        //     int_ty::MIN and therefore the return value of int_ty::MIN is correct.\n+        // QED.\n+\n+        let float_bits_to_llval = |bx: &mut Self, bits| {\n+            let bits_llval = match float_width {\n+                32 => bx.cx().const_u32(bits as u32),\n+                64 => bx.cx().const_u64(bits as u64),\n+                n => bug!(\"unsupported float width {}\", n),\n+            };\n+            bx.bitcast(bits_llval, float_ty)\n+        };\n+        let (f_min, f_max) = match float_width {\n+            32 => compute_clamp_bounds_single(signed, int_width),\n+            64 => compute_clamp_bounds_double(signed, int_width),\n+            n => bug!(\"unsupported float width {}\", n),\n+        };\n+        let f_min = float_bits_to_llval(self, f_min);\n+        let f_max = float_bits_to_llval(self, f_max);\n+        let int_max = self.cx().const_uint_big(int_ty, int_max(signed, int_width));\n+        let int_min = self.cx().const_uint_big(int_ty, int_min(signed, int_width) as u128);\n+        let zero = self.cx().const_uint(int_ty, 0);\n+\n+        // If we're working with vectors, constants must be \"splatted\": the constant is duplicated\n+        // into each lane of the vector.  The algorithm stays the same, we are just using the\n+        // same constant across all lanes.\n+        let maybe_splat = |bx: &mut Self, val| {\n+            if bx.cx().type_kind(dest_ty) == TypeKind::Vector {\n+                bx.vector_splat(bx.vector_length(dest_ty), val)\n+            } else {\n+                val\n+            }\n+        };\n+        let f_min = maybe_splat(self, f_min);\n+        let f_max = maybe_splat(self, f_max);\n+        let int_max = maybe_splat(self, int_max);\n+        let int_min = maybe_splat(self, int_min);\n+        let zero = maybe_splat(self, zero);\n+\n+        // Step 1 ...\n+        let fptosui_result = if signed { self.fptosi(x, dest_ty) } else { self.fptoui(x, dest_ty) };\n+        let less_or_nan = self.fcmp(RealPredicate::RealULT, x, f_min);\n+        let greater = self.fcmp(RealPredicate::RealOGT, x, f_max);\n+\n+        // Step 2: We use two comparisons and two selects, with %s1 being the\n+        // result:\n+        //     %less_or_nan = fcmp ult %x, %f_min\n+        //     %greater = fcmp olt %x, %f_max\n+        //     %s0 = select %less_or_nan, int_ty::MIN, %fptosi_result\n+        //     %s1 = select %greater, int_ty::MAX, %s0\n+        // Note that %less_or_nan uses an *unordered* comparison. This\n+        // comparison is true if the operands are not comparable (i.e., if x is\n+        // NaN). The unordered comparison ensures that s1 becomes int_ty::MIN if\n+        // x is NaN.\n+        //\n+        // Performance note: Unordered comparison can be lowered to a \"flipped\"\n+        // comparison and a negation, and the negation can be merged into the\n+        // select. Therefore, it not necessarily any more expensive than an\n+        // ordered (\"normal\") comparison. Whether these optimizations will be\n+        // performed is ultimately up to the backend, but at least x86 does\n+        // perform them.\n+        let s0 = self.select(less_or_nan, int_min, fptosui_result);\n+        let s1 = self.select(greater, int_max, s0);\n+\n+        // Step 3: NaN replacement.\n+        // For unsigned types, the above step already yielded int_ty::MIN == 0 if x is NaN.\n+        // Therefore we only need to execute this step for signed integer types.\n+        if signed {\n+            // LLVM has no isNaN predicate, so we use (x == x) instead\n+            let cmp = self.fcmp(RealPredicate::RealOEQ, x, x);\n+            self.select(cmp, s1, zero)\n+        } else {\n+            s1\n+        }\n+    }\n+\n     fn icmp(&mut self, op: IntPredicate, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn fcmp(&mut self, op: RealPredicate, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n "}, {"sha": "0e27a82b2b13bbc842ce3a34ca666f5ca1d6f2d8", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -646,6 +646,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(borrowck, String::from(\"other\"));\n     untracked!(deduplicate_diagnostics, false);\n     untracked!(dep_tasks, true);\n+    untracked!(dlltool, Some(PathBuf::from(\"custom_dlltool.exe\")));\n     untracked!(dont_buffer_diagnostics, true);\n     untracked!(dump_dep_graph, true);\n     untracked!(dump_mir, Some(String::from(\"abc\")));"}, {"sha": "13cd8e4a046b03ba3d8a84da0ad655868ff83fde", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -274,11 +274,6 @@ impl Collector<'_> {\n                     span,\n                     \"`#[link(...)]` with `kind = \\\"raw-dylib\\\"` only supported on Windows\",\n                 );\n-            } else if !self.tcx.sess.target.options.is_like_msvc {\n-                self.tcx.sess.span_warn(\n-                    span,\n-                    \"`#[link(...)]` with `kind = \\\"raw-dylib\\\"` not supported on windows-gnu\",\n-                );\n             }\n \n             if lib_name.as_str().contains('\\0') {"}, {"sha": "fafd847a1cbaa8ece09222a40c5623f1a1b1fad4", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -105,7 +105,7 @@ impl<'a> Iterator for SwitchTargetsIter<'a> {\n \n impl<'a> ExactSizeIterator for SwitchTargetsIter<'a> {}\n \n-#[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]\n+#[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]\n pub enum TerminatorKind<'tcx> {\n     /// Block should have one successor in the graph; we jump there.\n     Goto { target: BasicBlock },"}, {"sha": "19a73732fcac3aaba32925a705fb4b9dd471385c", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -36,6 +36,7 @@ impl<'tcx> Const<'tcx> {\n         Self::from_opt_const_arg_anon_const(tcx, ty::WithOptConstParam::unknown(def_id))\n     }\n \n+    #[instrument(skip(tcx), level = \"debug\")]\n     pub fn from_opt_const_arg_anon_const(\n         tcx: TyCtxt<'tcx>,\n         def: ty::WithOptConstParam<LocalDefId>,\n@@ -51,6 +52,7 @@ impl<'tcx> Const<'tcx> {\n         };\n \n         let expr = &tcx.hir().body(body_id).value;\n+        debug!(?expr);\n \n         let ty = tcx.type_of(def.def_id_for_type_of());\n \n@@ -67,11 +69,21 @@ impl<'tcx> Const<'tcx> {\n         }\n     }\n \n+    #[instrument(skip(tcx), level = \"debug\")]\n     fn try_eval_lit_or_param(\n         tcx: TyCtxt<'tcx>,\n         ty: Ty<'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n     ) -> Option<&'tcx Self> {\n+        // Unwrap a block, so that e.g. `{ P }` is recognised as a parameter. Const arguments\n+        // currently have to be wrapped in curly brackets, so it's necessary to special-case.\n+        let expr = match &expr.kind {\n+            hir::ExprKind::Block(block, _) if block.stmts.is_empty() && block.expr.is_some() => {\n+                block.expr.as_ref().unwrap()\n+            }\n+            _ => expr,\n+        };\n+\n         let lit_input = match expr.kind {\n             hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),\n             hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => match expr.kind {\n@@ -97,15 +109,6 @@ impl<'tcx> Const<'tcx> {\n             }\n         }\n \n-        // Unwrap a block, so that e.g. `{ P }` is recognised as a parameter. Const arguments\n-        // currently have to be wrapped in curly brackets, so it's necessary to special-case.\n-        let expr = match &expr.kind {\n-            hir::ExprKind::Block(block, _) if block.stmts.is_empty() && block.expr.is_some() => {\n-                block.expr.as_ref().unwrap()\n-            }\n-            _ => expr,\n-        };\n-\n         use hir::{def::DefKind::ConstParam, def::Res, ExprKind, Path, QPath};\n         match expr.kind {\n             ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {"}, {"sha": "48502112e3a715420ace19a46ecd5c6aff154228", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -139,22 +139,46 @@ impl<'a> Parser<'a> {\n         style: PathStyle,\n         ty_generics: Option<&Generics>,\n     ) -> PResult<'a, Path> {\n-        maybe_whole!(self, NtPath, |path| {\n+        let reject_generics_if_mod_style = |parser: &Parser<'_>, path: &Path| {\n+            // Ensure generic arguments don't end up in attribute paths, such as:\n+            //\n+            //     macro_rules! m {\n+            //         ($p:path) => { #[$p] struct S; }\n+            //     }\n+            //\n+            //     m!(inline<u8>); //~ ERROR: unexpected generic arguments in path\n+            //\n             if style == PathStyle::Mod && path.segments.iter().any(|segment| segment.args.is_some())\n             {\n-                self.struct_span_err(\n-                    path.segments\n-                        .iter()\n-                        .filter_map(|segment| segment.args.as_ref())\n-                        .map(|arg| arg.span())\n-                        .collect::<Vec<_>>(),\n-                    \"unexpected generic arguments in path\",\n-                )\n-                .emit();\n+                parser\n+                    .struct_span_err(\n+                        path.segments\n+                            .iter()\n+                            .filter_map(|segment| segment.args.as_ref())\n+                            .map(|arg| arg.span())\n+                            .collect::<Vec<_>>(),\n+                        \"unexpected generic arguments in path\",\n+                    )\n+                    .emit();\n             }\n+        };\n+\n+        maybe_whole!(self, NtPath, |path| {\n+            reject_generics_if_mod_style(self, &path);\n             path\n         });\n \n+        if let token::Interpolated(nt) = &self.token.kind {\n+            if let token::NtTy(ty) = &**nt {\n+                if let ast::TyKind::Path(None, path) = &ty.kind {\n+                    let path = path.clone();\n+                    self.bump();\n+                    reject_generics_if_mod_style(self, &path);\n+                    return Ok(path);\n+                }\n+            }\n+        }\n+\n         let lo = self.token.span;\n         let mut segments = Vec::new();\n         let mod_sep_ctxt = self.token.span.ctxt();"}, {"sha": "c48d8d689c10e9305cac596679827245b8d7dd5b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1161,6 +1161,8 @@ options! {\n     dep_tasks: bool = (false, parse_bool, [UNTRACKED],\n         \"print tasks that execute and the color their dep node gets (requires debug build) \\\n         (default: no)\"),\n+    dlltool: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n+        \"import library generation tool (windows-gnu only)\"),\n     dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n         \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) \\\n         (default: no)\"),"}, {"sha": "702e35946607954b772a17f30cc3e98f2a7498e9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1223,6 +1223,7 @@ symbols! {\n         simd,\n         simd_add,\n         simd_and,\n+        simd_as,\n         simd_bitmask,\n         simd_cast,\n         simd_ceil,"}, {"sha": "af3540386f9fc71fdde9b4c9f4f8bce51575db35", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -53,6 +53,7 @@ pub fn add_placeholder_note(err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n /// If there are types that satisfy both impls, invokes `on_overlap`\n /// with a suitably-freshened `ImplHeader` with those types\n /// substituted. Otherwise, invokes `no_overlap`.\n+#[instrument(skip(tcx, skip_leak_check, on_overlap, no_overlap), level = \"debug\")]\n pub fn overlapping_impls<F1, F2, R>(\n     tcx: TyCtxt<'_>,\n     impl1_def_id: DefId,\n@@ -65,12 +66,6 @@ where\n     F1: FnOnce(OverlapResult<'_>) -> R,\n     F2: FnOnce() -> R,\n {\n-    debug!(\n-        \"overlapping_impls(\\\n-           impl1_def_id={:?}, \\\n-           impl2_def_id={:?})\",\n-        impl1_def_id, impl2_def_id,\n-    );\n     // Before doing expensive operations like entering an inference context, do\n     // a quick check via fast_reject to tell if the impl headers could possibly\n     // unify.\n@@ -85,6 +80,7 @@ where\n     .any(|(ty1, ty2)| {\n         let t1 = fast_reject::simplify_type(tcx, ty1, SimplifyParams::No, StripReferences::No);\n         let t2 = fast_reject::simplify_type(tcx, ty2, SimplifyParams::No, StripReferences::No);\n+\n         if let (Some(t1), Some(t2)) = (t1, t2) {\n             // Simplified successfully\n             t1 != t2"}, {"sha": "cd2e0f18e0cc0f6404c801f1a20941f209f6e74f", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -117,9 +117,8 @@ pub fn translate_substs<'a, 'tcx>(\n /// Specialization is determined by the sets of types to which the impls apply;\n /// `impl1` specializes `impl2` if it applies to a subset of the types `impl2` applies\n /// to.\n+#[instrument(skip(tcx), level = \"debug\")]\n pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId, DefId)) -> bool {\n-    debug!(\"specializes({:?}, {:?})\", impl1_def_id, impl2_def_id);\n-\n     // The feature gate should prevent introducing new specializations, but not\n     // taking advantage of upstream ones.\n     let features = tcx.features();"}, {"sha": "4c612ed5be51a06db1c12823db92c6ddf8850a61", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -453,7 +453,7 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         sym::simd_scatter => (3, vec![param(0), param(1), param(2)], tcx.mk_unit()),\n         sym::simd_insert => (2, vec![param(0), tcx.types.u32, param(1)], param(0)),\n         sym::simd_extract => (2, vec![param(0), tcx.types.u32], param(1)),\n-        sym::simd_cast => (2, vec![param(0)], param(1)),\n+        sym::simd_cast | sym::simd_as => (2, vec![param(0)], param(1)),\n         sym::simd_bitmask => (2, vec![param(0)], param(1)),\n         sym::simd_select | sym::simd_select_bitmask => {\n             (2, vec![param(0), param(1), param(1)], param(1))"}, {"sha": "0b8ed0cc174b42a4a5dcc792087255b52e09fb51", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -675,7 +675,7 @@ impl f32 {\n     /// Returns the maximum of the two numbers.\n     ///\n     /// Follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs.\n-    /// This matches the behavior of libm\u2019s fmin.\n+    /// This matches the behavior of libm\u2019s fmax.\n     ///\n     /// ```\n     /// let x = 1.0f32;"}, {"sha": "5a3cd2a4b92600286983480dd0ea0f9b9ed6544d", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -691,7 +691,7 @@ impl f64 {\n     /// Returns the maximum of the two numbers.\n     ///\n     /// Follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs.\n-    /// This matches the behavior of libm\u2019s fmin.\n+    /// This matches the behavior of libm\u2019s fmax.\n     ///\n     /// ```\n     /// let x = 1.0_f64;"}, {"sha": "11c98f6eb9c4ba48b2362ad4960343b312d056b8", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1 +1 @@\n-Subproject commit 1d5d0e8b0e3134dc781adb98057e38ffdf200df2\n+Subproject commit 11c98f6eb9c4ba48b2362ad4960343b312d056b8"}, {"sha": "2455d56bd2b3f9c1038bd4b58e81ed5b6b000ee2", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -554,16 +554,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             extra_scripts: &[],\n             static_extra_scripts: &[],\n         };\n-        let sidebar = if let Some(ref version) = self.shared.cache.crate_version {\n-            format!(\n-                \"<h2 class=\\\"location\\\">Crate {}</h2>\\\n-                     <div class=\\\"block version\\\">\\\n-                         <p>Version {}</p>\\\n-                     </div>\\\n-                     <a id=\\\"all-types\\\" href=\\\"index.html\\\"><p>Back to index</p></a>\",\n-                crate_name,\n-                Escape(version),\n-            )\n+        let sidebar = if self.shared.cache.crate_version.is_some() {\n+            format!(\"<h2 class=\\\"location\\\">Crate {}</h2>\", crate_name)\n         } else {\n             String::new()\n         };"}, {"sha": "29a793f3110b1ef0e360c54bd99df8adb9525957", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1744,13 +1744,6 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n             buffer,\n             \"<h2 class=\\\"location\\\"><a href=\\\"#\\\">{}{}</a></h2>\",\n             match *it.kind {\n-                clean::StructItem(..) => \"Struct \",\n-                clean::TraitItem(..) => \"Trait \",\n-                clean::PrimitiveItem(..) => \"Primitive Type \",\n-                clean::UnionItem(..) => \"Union \",\n-                clean::EnumItem(..) => \"Enum \",\n-                clean::TypedefItem(..) => \"Type Definition \",\n-                clean::ForeignTypeItem => \"Foreign Type \",\n                 clean::ModuleItem(..) =>\n                     if it.is_crate() {\n                         \"Crate \"\n@@ -1763,26 +1756,14 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n         );\n     }\n \n+    buffer.write_str(\"<div class=\\\"sidebar-elems\\\">\");\n     if it.is_crate() {\n+        write!(buffer, \"<div class=\\\"block\\\"><ul>\");\n         if let Some(ref version) = cx.cache().crate_version {\n-            write!(\n-                buffer,\n-                \"<div class=\\\"block version\\\">\\\n-                     <div class=\\\"narrow-helper\\\"></div>\\\n-                     <p>Version {}</p>\\\n-                 </div>\",\n-                Escape(version),\n-            );\n+            write!(buffer, \"<li class=\\\"version\\\">Version {}</li>\", Escape(version));\n         }\n-    }\n-\n-    buffer.write_str(\"<div class=\\\"sidebar-elems\\\">\");\n-    if it.is_crate() {\n-        write!(\n-            buffer,\n-            \"<a id=\\\"all-types\\\" href=\\\"all.html\\\"><p>See all {}'s items</p></a>\",\n-            it.name.as_ref().expect(\"crates always have a name\"),\n-        );\n+        write!(buffer, \"<li><a id=\\\"all-types\\\" href=\\\"all.html\\\">All Items</a></li>\");\n+        buffer.write_str(\"</div></ul>\");\n     }\n \n     match *it.kind {\n@@ -1806,7 +1787,7 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n     // to navigate the documentation (though slightly inefficiently).\n \n     if !it.is_mod() {\n-        buffer.write_str(\"<h2 class=\\\"location\\\">Other items in<br>\");\n+        buffer.write_str(\"<h2 class=\\\"location\\\">In \");\n         for (i, name) in cx.current.iter().take(parentlen).enumerate() {\n             if i > 0 {\n                 buffer.write_str(\"::<wbr>\");"}, {"sha": "dbc068ce6b13b2a30a3fede073039be862764030", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 122, "deletions": 182, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -169,8 +169,7 @@ h1.fqn {\n \tsection hierarchies. */\n h2,\n .top-doc h3,\n-.top-doc h4,\n-.sidebar .others h3 {\n+.top-doc h4 {\n \tborder-bottom: 1px solid;\n }\n h3.code-header {\n@@ -206,7 +205,11 @@ div.impl-items > div {\n }\n \n h1, h2, h3, h4, h5, h6,\n-.sidebar, a.source, .search-input, .search-results .result-name,\n+.sidebar,\n+.mobile-topbar,\n+a.source,\n+.search-input,\n+.search-results .result-name,\n .content table td:first-child > a,\n .item-left > a,\n .out-of-band,\n@@ -261,6 +264,11 @@ textarea {\n \tmargin: 0;\n }\n \n+button {\n+\t/* Buttons on Safari have different default padding than other platforms. Make them the same. */\n+\tpadding: 1px 6px;\n+}\n+\n /* end tweaks for normalize.css 8 */\n \n .rustdoc {\n@@ -359,15 +367,25 @@ nav.sub {\n }\n \n .sidebar {\n-\twidth: 200px;\n+\tfont-size: 0.9rem;\n+\twidth: 250px;\n+\tmin-width: 200px;\n \toverflow-y: scroll;\n \tposition: sticky;\n-\tmin-width: 200px;\n \theight: 100vh;\n \ttop: 0;\n \tleft: 0;\n }\n \n+.sidebar-elems,\n+.sidebar > .location {\n+\tpadding-left: 24px;\n+}\n+\n+.sidebar .location {\n+\toverflow-wrap: anywhere;\n+}\n+\n .rustdoc.source .sidebar {\n \twidth: 50px;\n \tmin-width: 0px;\n@@ -396,6 +414,10 @@ nav.sub {\n \tvisibility: visible;\n }\n \n+#all-types {\n+\tmargin-top: 1em;\n+}\n+\n /* Improve the scrollbar display on firefox */\n * {\n \tscrollbar-width: initial;\n@@ -415,48 +437,28 @@ nav.sub {\n \t-webkit-box-shadow: inset 0;\n }\n \n-.sidebar .block > ul > li {\n-\tmargin-right: -10px;\n-}\n-\n /* Everything else */\n \n .hidden {\n \tdisplay: none !important;\n }\n \n-.logo-container {\n+.sidebar .logo-container {\n \tdisplay: flex;\n \tmargin-top: 10px;\n \tmargin-bottom: 10px;\n \tjustify-content: center;\n }\n \n+.version {\n+\toverflow-wrap: break-word;\n+}\n+\n .logo-container > img {\n \theight: 100px;\n \twidth: 100px;\n }\n \n-.sidebar .location {\n-\tborder: 1px solid;\n-\tfont-size: 1.0625rem;\n-\tmargin: 30px 10px 20px 10px;\n-\ttext-align: center;\n-\tword-wrap: break-word;\n-\tfont-weight: inherit;\n-\tpadding: 0;\n-}\n-\n-.sidebar .version {\n-\tfont-size: 0.9375rem;\n-\ttext-align: center;\n-\tborder-bottom: 1px solid;\n-\toverflow-wrap: break-word;\n-\toverflow-wrap: anywhere;\n-\tword-wrap: break-word; /* deprecated */\n-\tword-break: break-word; /* Chrome, non-standard */\n-}\n-\n .location:empty {\n \tborder: none;\n }\n@@ -470,48 +472,45 @@ nav.sub {\n \n .block {\n \tpadding: 0;\n-\tmargin-bottom: 14px;\n-}\n-.block h2, .block h3 {\n-\ttext-align: center;\n }\n .block ul, .block li {\n-\tmargin: 0 10px;\n \tpadding: 0;\n \tlist-style: none;\n }\n \n .block a {\n \tdisplay: block;\n+\tpadding: 0.3em;\n+\tmargin-left: -0.3em;\n+\n \ttext-overflow: ellipsis;\n \toverflow: hidden;\n-\tline-height: 15px;\n-\tpadding: 7px 5px;\n-\tfont-size: 0.875rem;\n-\tfont-weight: 300;\n-\ttransition: border 500ms ease-out;\n }\n \n-.sidebar-title {\n-\tborder-top: 1px solid;\n-\tborder-bottom: 1px solid;\n-\ttext-align: center;\n-\tfont-size: 1.0625rem;\n-\tmargin-bottom: 5px;\n-\tfont-weight: inherit;\n+.sidebar h2 {\n+\tborder-bottom: none;\n+\tfont-weight: 500;\n \tpadding: 0;\n+\tmargin: 0;\n+\tmargin-top: 1rem;\n+\tmargin-bottom: 1rem;\n }\n \n-.sidebar-links {\n-\tmargin-bottom: 15px;\n+.sidebar h3 {\n+\tfont-size: 1.1rem;\n+\tfont-weight: 500;\n+\tpadding: 0;\n+\tmargin: 0;\n+\tmargin-top: 0.5rem;\n+\tmargin-bottom: 0.25rem;\n }\n \n-.sidebar-links > a {\n-\tpadding-left: 10px;\n-\twidth: 100%;\n+.sidebar-links,\n+.block {\n+\tmargin-bottom: 2em;\n }\n \n-.sidebar-menu {\n+.mobile-topbar {\n \tdisplay: none;\n }\n \n@@ -784,13 +783,12 @@ nav.sub {\n \tmargin-top: 0;\n }\n \n-nav:not(.sidebar) {\n+nav.sub {\n \tflex-grow: 1;\n-\tborder-bottom: 1px solid;\n \tpadding-bottom: 10px;\n \tmargin-bottom: 25px;\n }\n-.source nav:not(.sidebar).sub {\n+.source nav.sub {\n \tmargin-left: 32px;\n }\n nav.main {\n@@ -1395,18 +1393,6 @@ pre.rust {\n \tmargin-left: 5px;\n }\n \n-#all-types {\n-\ttext-align: center;\n-\tborder: 1px solid;\n-\tmargin: 0 10px;\n-\tmargin-bottom: 10px;\n-\tdisplay: block;\n-\tborder-radius: 7px;\n-}\n-#all-types > p {\n-\tmargin: 5px 0;\n-}\n-\n #sidebar-toggle {\n \tposition: sticky;\n \ttop: 0;\n@@ -1752,143 +1738,123 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n }\n \n @media (max-width: 700px) {\n-\tbody {\n+\t.rustdoc {\n \t\tpadding-top: 0px;\n+\t\t/* Sidebar should overlay main content, rather than pushing main content to the right.\n+\t\t   Turn off `display: flex` on the body element. */\n+\t\tdisplay: block;\n+\t\tscroll-margin-top: 45px;\n \t}\n \n \tmain {\n \t\tpadding-left: 15px;\n \t\tpadding-top: 0px;\n \t}\n \n-\t/* Space is at a premium on mobile, so remove the theme-picker icon. */\n-\t#theme-picker {\n-\t\tdisplay: none;\n-\t\twidth: 0;\n-\t}\n-\n \t.rustdoc {\n \t\tflex-direction: column;\n \t}\n \n-\t.rustdoc:not(.source) > .sidebar {\n-\t\twidth: 100%;\n-\t\theight: 45px;\n-\t\tmin-height: 40px;\n-\t\tmax-height: 45px;\n-\t\tmargin: 0;\n-\t\tpadding: 0 15px;\n-\t\tposition: static;\n-\t\tz-index: 11;\n-\t\toverflow-y: hidden;\n+\t/* Hide the logo and item name from the sidebar. Those are displayed\n+\t   in the mobile-topbar instead. */\n+\t.sidebar .sidebar-logo,\n+\t.sidebar .location {\n+\t\tdisplay: none;\n \t}\n \n-\t.rustdoc.source > .sidebar {\n+\t.sidebar-elems {\n+\t\tmargin-top: 1em;\n+\t}\n+\n+\t.sidebar {\n \t\tposition: fixed;\n-\t\ttop: 0;\n-\t\tleft: 0;\n+\t\ttop: 45px;\n+\t\t/* Hide the sidebar offscreen while not in use. Doing this instead of display: none means\n+\t\t   the sidebar stays visible for screen readers, which is useful for navigation. */\n+\t\tleft: -1000px;\n+\t\tmargin-left: 0;\n+\t\tbackground-color: rgba(0,0,0,0);\n \t\tmargin: 0;\n+\t\tpadding: 0;\n+\t\tpadding-left: 15px;\n \t\tz-index: 11;\n-\t\twidth: 0;\n \t}\n \n-\t.sidebar.mobile {\n-\t\tposition: sticky !important;\n+\t/* The source view uses a different design for the sidebar toggle, and doesn't have a topbar,\n+\t   so don't bump down the main content or the sidebar. */\n+\t.source main,\n+\t.source .sidebar {\n \t\ttop: 0;\n+\t\tpadding: 0;\n+\t}\n+\n+\t.sidebar.shown,\n+\t.sidebar.expanded,\n+\t.sidebar:focus-within {\n \t\tleft: 0;\n-\t\twidth: 100%;\n-\t\tmargin-left: 0;\n-\t\tbackground-color: rgba(0,0,0,0);\n \t}\n \n-\t.sidebar > .location {\n-\t\tfloat: right;\n-\t\tmargin: 0px;\n-\t\tmargin-top: 2px;\n-\t\tpadding: 3px 10px 1px 10px;\n-\t\tmin-height: 39px;\n-\t\tbackground: inherit;\n-\t\ttext-align: left;\n-\t\tfont-size: 1.5rem;\n+\t.rustdoc.source > .sidebar {\n+\t\tposition: fixed;\n+\t\tmargin: 0;\n+\t\tz-index: 11;\n+\t\twidth: 0;\n \t}\n \n-\t.sidebar .location:empty {\n-\t\tpadding: 0;\n+\t.mobile-topbar .location {\n+\t\tborder: none;\n+\t\tmargin: 0;\n+\t\tmargin-left: auto;\n+\t\tpadding: 0.3em;\n+\t\tpadding-right: 0.6em;\n+\t\ttext-overflow: ellipsis;\n+\t\toverflow-x: hidden;\n \t}\n \n-\t.rustdoc:not(.source) .sidebar .logo-container {\n-\t\twidth: 35px;\n-\t\theight: 35px;\n-\t\tmargin-top: 5px;\n-\t\tmargin-bottom: 5px;\n-\t\tfloat: left;\n-\t\tmargin-left: 50px;\n+\t.mobile-topbar .logo-container {\n+\t\tmax-height: 45px;\n \t}\n \n-\t.sidebar .logo-container > img {\n+\t.mobile-topbar .logo-container > img {\n \t\tmax-width: 35px;\n \t\tmax-height: 35px;\n+\t\tmargin-left: 20px;\n+\t\tmargin-top: 5px;\n+\t\tmargin-bottom: 5px;\n \t}\n \n-\t.sidebar-menu {\n-\t\tposition: fixed;\n+\t.mobile-topbar {\n+\t\tdisplay: flex;\n+\t\tflex-direction: row;\n+\t\tposition: sticky;\n \t\tz-index: 10;\n \t\tfont-size: 2rem;\n \t\tcursor: pointer;\n-\t\twidth: 45px;\n+\t\theight: 45px;\n+\t\twidth: 100%;\n \t\tleft: 0;\n \t\ttop: 0;\n-\t\ttext-align: center;\n-\t\tdisplay: block;\n-\t\tborder-bottom: 1px solid;\n-\t\tborder-right: 1px solid;\n-\t\theight: 45px;\n \t}\n \n-\t.rustdoc.source > .sidebar > .sidebar-menu {\n+\t.source .mobile-topbar {\n \t\tdisplay: none;\n \t}\n \n-\t/* We do NOT hide this element so that alternative device readers still have this information\n-\t   available. */\n-\t.sidebar-elems {\n-\t\tposition: fixed;\n-\t\tz-index: 1;\n-\t\ttop: 45px;\n-\t\tbottom: 0;\n-\t\twidth: 246px;\n-\t\t/* We move the sidebar to the left by its own width so it doesn't appear. */\n-\t\tleft: -246px;\n-\t\toverflow-y: auto;\n-\t\tborder-right: 1px solid;\n-\t}\n-\n-\t.sidebar > .block.version {\n-\t\toverflow: hidden;\n-\t\tborder-bottom: none;\n-\t\tmargin-bottom: 0;\n-\t\theight: 100%;\n-\t\tpadding-left: 12px;\n-\t}\n-\t.sidebar > .block.version > div.narrow-helper {\n-\t\tfloat: left;\n-\t\twidth: 1px;\n-\t\theight: 100%;\n-\t}\n-\t.sidebar > .block.version > p {\n-\t\t/* hide Version text if too narrow */\n-\t\tmargin: 0;\n-\t\tmin-width: 55px;\n-\t\t/* vertically center */\n-\t\tdisplay: flex;\n-\t\talign-items: center;\n-\t\theight: 100%;\n+\t.sidebar-menu-toggle {\n+\t\twidth: 45px;\n+\t\tborder: none;\n \t}\n \n \t.source nav:not(.sidebar).sub {\n \t\tmargin-left: 32px;\n \t}\n \n+\t/* Space is at a premium on mobile, so remove the theme-picker icon. */\n+\t#theme-picker {\n+\t\tdisplay: none;\n+\t\twidth: 0;\n+\t}\n+\n \t.content {\n \t\tmargin-left: 0px;\n \t}\n@@ -1925,28 +1891,6 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\theight: 50px;\n \t}\n \n-\t.show-it, .sidebar-elems:focus-within {\n-\t\tz-index:  2;\n-\t\tleft: 0;\n-\t}\n-\n-\t.show-it > .block.items {\n-\t\tmargin: 8px 0;\n-\t}\n-\n-\t.show-it > .block.items > ul {\n-\t\tmargin: 0;\n-\t}\n-\n-\t.show-it > .block.items > ul > li {\n-\t\ttext-align: center;\n-\t\tmargin: 2px 0;\n-\t}\n-\n-\t.show-it > .block.items > ul > li > a {\n-\t\tfont-size: 1.3125rem;\n-\t}\n-\n \t/* Because of ios, we need to actually have a full height sidebar title so the\n \t * actual sidebar can show up. But then we need to make it transparent so we don't\n \t * hide content. The filler just allows to create the background for the sidebar\n@@ -1967,10 +1911,6 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\tleft: -11px;\n \t}\n \n-\t#all-types {\n-\t\tmargin: 10px;\n-\t}\n-\n \t.sidebar.expanded #sidebar-toggle {\n \t\tfont-size: 1.5rem;\n \t}"}, {"sha": "82a2be67ceb0cb367974eb2a2b79018692ec4c84", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -57,7 +57,7 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #191f26;\n }\n \n-.sidebar {\n+.sidebar, .mobile-topbar, .sidebar-menu-toggle {\n \tbackground-color: #14191f;\n }\n \n@@ -100,12 +100,6 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #14191f;\n }\n \n-.sidebar .location {\n-\tborder-color: #000;\n-\tbackground-color: #0f1419;\n-\tcolor: #fff;\n-}\n-\n .sidebar-elems .location {\n \tcolor: #ff7733;\n }\n@@ -114,15 +108,6 @@ pre, .rustdoc.source .example-wrap {\n \tcolor: #fff;\n }\n \n-.sidebar .version {\n-\tborder-bottom-color: #424c57;\n-}\n-\n-.sidebar-title {\n-\tborder-top-color: #5c6773;\n-\tborder-bottom-color: #5c6773;\n-}\n-\n .block a:hover {\n \tbackground: transparent;\n \tcolor: #ffb44c;\n@@ -228,7 +213,8 @@ a.anchor,\n .small-section-header a,\n #source-sidebar a,\n pre.rust a,\n-.sidebar a,\n+.sidebar h2 a,\n+.sidebar h3 a,\n .in-band a {\n \tcolor: #c5c5c5;\n }\n@@ -581,13 +567,6 @@ kbd {\n \t}\n }\n \n-#all-types {\n-\tbackground-color: #14191f;\n-}\n-#all-types:hover {\n-\tbackground-color: rgba(70, 70, 70, 0.33);\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #c5c5c5;\n }"}, {"sha": "761bf50dd36b1ff7047a45502fa9fc100599fce1", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -28,7 +28,7 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #2A2A2A;\n }\n \n-.sidebar {\n+.sidebar, .mobile-topbar, .sidebar-menu-toggle {\n \tbackground-color: #505050;\n }\n \n@@ -69,21 +69,6 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #565656;\n }\n \n-.sidebar .location {\n-\tborder-color: #fff;\n-\tbackground: #575757;\n-\tcolor: #DDD;\n-}\n-\n-.sidebar .version {\n-\tborder-bottom-color: #DDD;\n-}\n-\n-.sidebar-title {\n-\tborder-top-color: #777;\n-\tborder-bottom-color: #777;\n-}\n-\n .block a:hover {\n \tbackground: #444;\n }\n@@ -186,7 +171,8 @@ a.anchor,\n .small-section-header a,\n #source-sidebar a,\n pre.rust a,\n-.sidebar a,\n+.sidebar h2 a,\n+.sidebar h3 a,\n .in-band a {\n \tcolor: #ddd;\n }\n@@ -453,13 +439,6 @@ kbd {\n \t}\n }\n \n-#all-types {\n-\tbackground-color: #505050;\n-}\n-#all-types:hover {\n-\tbackground-color: #606060;\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #fff;\n }"}, {"sha": "7cca7d4004b5ee2ace913f6f7d64823eb4e912e7", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -30,7 +30,7 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #F5F5F5;\n }\n \n-.sidebar {\n+.sidebar, .mobile-topbar, .sidebar-menu-toggle {\n \tbackground-color: #F5F5F5;\n }\n \n@@ -69,21 +69,6 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #f1f1f1;\n }\n \n-.sidebar .location {\n-\tborder-color: #000;\n-\tbackground-color: #fff;\n-\tcolor: #333;\n-}\n-\n-.sidebar .version {\n-\tborder-bottom-color: #DDD;\n-}\n-\n-.sidebar-title {\n-\tborder-top-color: #777;\n-\tborder-bottom-color: #777;\n-}\n-\n .block a:hover {\n \tbackground: #F5F5F5;\n }\n@@ -183,7 +168,8 @@ a.anchor,\n .small-section-header a,\n #source-sidebar a,\n pre.rust a,\n-.sidebar a,\n+.sidebar h2 a,\n+.sidebar h3 a,\n .in-band a {\n \tcolor: #000;\n }\n@@ -440,13 +426,6 @@ kbd {\n \t}\n }\n \n-#all-types {\n-\tbackground-color: #fff;\n-}\n-#all-types:hover {\n-\tbackground-color: #f9f9f9;\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #000;\n }"}, {"sha": "161b95d99930e761de21ae49be2b8e41df3377ba", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -67,6 +67,13 @@ function resourcePath(basename, extension) {\n             ty: sidebarVars.attributes[\"data-ty\"].value,\n             relpath: sidebarVars.attributes[\"data-relpath\"].value,\n         };\n+        // FIXME: It would be nicer to generate this text content directly in HTML,\n+        // but with the current code it's hard to get the right information in the right place.\n+        var mobileLocationTitle = document.querySelector(\".mobile-topbar h2.location\");\n+        var locationTitle = document.querySelector(\".sidebar h2.location\");\n+        if (mobileLocationTitle && locationTitle) {\n+            mobileLocationTitle.innerText = locationTitle.innerText;\n+        }\n     }\n }());\n \n@@ -309,37 +316,6 @@ function hideThemeButtonState() {\n         return null;\n     }\n \n-    function showSidebar() {\n-        var elems = document.getElementsByClassName(\"sidebar-elems\")[0];\n-        if (elems) {\n-            addClass(elems, \"show-it\");\n-        }\n-        var sidebar = document.getElementsByClassName(\"sidebar\")[0];\n-        if (sidebar) {\n-            addClass(sidebar, \"mobile\");\n-            var filler = document.getElementById(\"sidebar-filler\");\n-            if (!filler) {\n-                var div = document.createElement(\"div\");\n-                div.id = \"sidebar-filler\";\n-                sidebar.appendChild(div);\n-            }\n-        }\n-    }\n-\n-    function hideSidebar() {\n-        var elems = document.getElementsByClassName(\"sidebar-elems\")[0];\n-        if (elems) {\n-            removeClass(elems, \"show-it\");\n-        }\n-        var sidebar = document.getElementsByClassName(\"sidebar\")[0];\n-        removeClass(sidebar, \"mobile\");\n-        var filler = document.getElementById(\"sidebar-filler\");\n-        if (filler) {\n-            filler.remove();\n-        }\n-        document.getElementsByTagName(\"body\")[0].style.marginTop = \"\";\n-    }\n-\n     var toggleAllDocsId = \"toggle-all-docs\";\n     var main = document.getElementById(MAIN_ID);\n     var savedHash = \"\";\n@@ -374,7 +350,8 @@ function hideThemeButtonState() {\n \n     function onHashChange(ev) {\n         // If we're in mobile mode, we should hide the sidebar in any case.\n-        hideSidebar();\n+        var sidebar = document.getElementsByClassName(\"sidebar\")[0];\n+        removeClass(sidebar, \"shown\");\n         handleHashes(ev);\n     }\n \n@@ -866,6 +843,11 @@ function hideThemeButtonState() {\n         });\n     }());\n \n+    function hideSidebar() {\n+        var sidebar = document.getElementsByClassName(\"sidebar\")[0];\n+        removeClass(sidebar, \"shown\");\n+    }\n+\n     function handleClick(id, f) {\n         var elem = document.getElementById(id);\n         if (elem) {\n@@ -906,16 +888,16 @@ function hideThemeButtonState() {\n         };\n     });\n \n-    var sidebar_menu = document.getElementsByClassName(\"sidebar-menu\")[0];\n-    if (sidebar_menu) {\n-        sidebar_menu.onclick = function() {\n+    var sidebar_menu_toggle = document.getElementsByClassName(\"sidebar-menu-toggle\")[0];\n+    if (sidebar_menu_toggle) {\n+        sidebar_menu_toggle.addEventListener(\"click\", function() {\n             var sidebar = document.getElementsByClassName(\"sidebar\")[0];\n-            if (hasClass(sidebar, \"mobile\")) {\n-                hideSidebar();\n+            if (!hasClass(sidebar, \"shown\")) {\n+                addClass(sidebar, \"shown\");\n             } else {\n-                showSidebar();\n+                removeClass(sidebar, \"shown\");\n             }\n-        };\n+        });\n     }\n \n     var buildHelperPopup = function() {"}, {"sha": "498f60e9f25ae4fd601dd22087421667209c8493", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -139,7 +139,7 @@ function createSourceSidebar() {\n                                       currentFile, hasFoundFile);\n     });\n \n-    container.insertBefore(sidebar, document.querySelector(\".sidebar-logo\").nextSibling);\n+    container.appendChild(sidebar);\n     // Focus on the current file in the source files sidebar.\n     var selected_elem = sidebar.getElementsByClassName(\"selected\")[0];\n     if (typeof selected_elem !== \"undefined\") {"}, {"sha": "1322b854b7fc77298fa6390f3fb080d133439134", "filename": "src/librustdoc/templates/page.html", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Flibrustdoc%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftemplates%2Fpage.html?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -72,8 +72,20 @@\n     </div> {#- -#}\n     <![endif]--> {#- -#}\n     {{- layout.external_html.before_content|safe -}}\n+    <nav class=\"mobile-topbar\"> {#- -#}\n+        <button class=\"sidebar-menu-toggle\">&#9776;</button> {#- -#}\n+        <a class=\"sidebar-logo\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n+            <div class=\"logo-container\"> {#- -#}\n+            {%- if !layout.logo.is_empty() -%}\n+                <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n+            {%- else -%}\n+                <img class=\"rust-logo\" src=\"{{static_root_path|safe}}rust-logo{{page.resource_suffix}}.svg\" alt=\"logo\"> {#- -#}\n+            {%- endif -%}\n+            </div>\n+        </a> {#- -#}\n+        <h2 class=\"location\"></h2>\n+    </nav>\n     <nav class=\"sidebar\"> {#- -#}\n-        <div class=\"sidebar-menu\" role=\"button\">&#9776;</div> {#- -#}\n         <a class=\"sidebar-logo\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n             <div class=\"logo-container\"> {#- -#}\n                 {%- if !layout.logo.is_empty()  %}"}, {"sha": "166305672e6f229790c35292ad5f39d221aa9f5f", "filename": "src/test/run-make/raw-dylib-c/Makefile", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,14 +1,19 @@\n # Test the behavior of #[link(.., kind = \"raw-dylib\")] on windows-msvc\n \n-# only-windows-msvc\n+# only-windows\n \n -include ../../run-make-fulldeps/tools.mk\n \n all:\n \t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern_1.obj,extern_1.c)\n \t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern_2.obj,extern_2.c)\n+ifdef IS_MSVC\n \t$(CC) \"$(TMPDIR)\"/extern_1.obj -link -dll -out:\"$(TMPDIR)\"/extern_1.dll\n \t$(CC) \"$(TMPDIR)\"/extern_2.obj -link -dll -out:\"$(TMPDIR)\"/extern_2.dll\n+else\n+\t$(CC) \"$(TMPDIR)\"/extern_1.obj -shared -o \"$(TMPDIR)\"/extern_1.dll\n+\t$(CC) \"$(TMPDIR)\"/extern_2.obj -shared -o \"$(TMPDIR)\"/extern_2.dll\n+endif\n \t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n \t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n \t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt"}, {"sha": "0e84a749b05782151ae4008333b319947ba56421", "filename": "src/test/run-make/raw-dylib-link-ordinal/Makefile", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,12 +1,16 @@\n # Test the behavior of #[link(.., kind = \"raw-dylib\")] and #[link_ordinal] on windows-msvc\n \n-# only-windows-msvc\n+# only-windows\n \n -include ../../run-make-fulldeps/tools.mk\n \n all:\n \t$(call COMPILE_OBJ,\"$(TMPDIR)\"/exporter.obj,exporter.c)\n+ifdef IS_MSVC\n \t$(CC) \"$(TMPDIR)\"/exporter.obj exporter.def -link -dll -out:\"$(TMPDIR)\"/exporter.dll\n+else\n+\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter.def -shared -o \"$(TMPDIR)\"/exporter.dll\n+endif\n \t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n \t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n \t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt"}, {"sha": "69f62669d6291da4d8cc3e3122699d921e869c3c", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/Makefile", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2FMakefile?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -0,0 +1,23 @@\n+# Test the behavior of #[link(.., kind = \"raw-dylib\")], #[link_ordinal], and alternative calling conventions on i686 windows.\n+\n+# only-x86\n+# only-windows\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(call COMPILE_OBJ,\"$(TMPDIR)\"/exporter.obj,exporter.c)\n+ifdef IS_MSVC\n+\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter-msvc.def -link -dll -out:\"$(TMPDIR)\"/exporter.dll\n+else\n+\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter-gnu.def -shared -o \"$(TMPDIR)\"/exporter.dll\n+endif\n+\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n+\t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/actual_output.txt\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/actual_output.txt expected_output.txt\n+else\n+\t$(DIFF) expected_output.txt \"$(TMPDIR)\"/actual_output.txt\n+endif"}, {"sha": "4059ede11fc96ec7363aefdc0209442030390d80", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/driver.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fdriver.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -0,0 +1,5 @@\n+extern crate raw_dylib_test;\n+\n+fn main() {\n+    raw_dylib_test::library_function();\n+}"}, {"sha": "20157763745f8ffa7a4037ffdd53909b56b4ac99", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/expected_output.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexpected_output.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexpected_output.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexpected_output.txt?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -0,0 +1,2 @@\n+exported_function_stdcall(6)\n+exported_function_fastcall(125)"}, {"sha": "8d28d714b7e6437578ab8a074a7f137f3db7ce3b", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/exporter-gnu.def", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-gnu.def", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-gnu.def", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-gnu.def?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -0,0 +1,4 @@\n+LIBRARY exporter\n+EXPORTS\n+    exported_function_stdcall@4 @15 NONAME\n+    @exported_function_fastcall@4 @18 NONAME\n\\ No newline at end of file"}, {"sha": "5a4c79a58edfd0651c96dd79aada761f1ce0048c", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/exporter-msvc.def", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-msvc.def", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-msvc.def", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-msvc.def?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -0,0 +1,4 @@\n+LIBRARY exporter\n+EXPORTS\n+    _exported_function_stdcall@4 @15 NONAME\n+    @exported_function_fastcall@4 @18 NONAME\n\\ No newline at end of file"}, {"sha": "1fb45bf010ff2f60ab1c20a09c4f8f6afe37b497", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/exporter.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter.c", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter.c?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -0,0 +1,11 @@\n+#include <stdio.h>\n+\n+void __stdcall exported_function_stdcall(int i) {\n+    printf(\"exported_function_stdcall(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+void __fastcall exported_function_fastcall(int i) {\n+    printf(\"exported_function_fastcall(%d)\\n\", i);\n+    fflush(stdout);\n+}"}, {"sha": "07dd3d7be9b903a5a0b9a5ccbad6b4cec886c5c2", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Flib.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -0,0 +1,20 @@\n+#![feature(raw_dylib)]\n+\n+#[link(name = \"exporter\", kind = \"raw-dylib\")]\n+extern \"stdcall\" {\n+    #[link_ordinal(15)]\n+    fn imported_function_stdcall(i: i32);\n+}\n+\n+#[link(name = \"exporter\", kind = \"raw-dylib\")]\n+extern \"fastcall\" {\n+    #[link_ordinal(18)]\n+    fn imported_function_fastcall(i: i32);\n+}\n+\n+pub fn library_function() {\n+    unsafe {\n+        imported_function_stdcall(6);\n+        imported_function_fastcall(125);\n+    }\n+}"}, {"sha": "2d48d21dc1b05da4e2d5571af6af732c40519fbc", "filename": "src/test/rustdoc-gui/anchors.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchors.goml?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -20,7 +20,7 @@ assert-css: (\".srclink\", {\"text-decoration\": \"underline solid rgb(56, 115, 173)\"\n \n assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(0, 0, 0)\"})\n \n-assert-css: (\".sidebar a\", {\"color\": \"rgb(0, 0, 0)\"})\n+assert-css: (\".sidebar a\", {\"color\": \"rgb(56, 115, 173)\"})\n assert-css: (\".in-band a\", {\"color\": \"rgb(0, 0, 0)\"})\n \n // We move the cursor over the \"Implementations\" title so the anchor is displayed."}, {"sha": "f93f3f0aefc51e9ad30e7969a9f63ba39292ea09", "filename": "src/test/rustdoc-gui/code-blocks-overflow.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-blocks-overflow.goml?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -5,4 +5,4 @@ size: (1080, 600)\n assert-count: (\".docblock > .example-wrap\", 2)\n assert: \".docblock > .example-wrap > .language-txt\"\n assert: \".docblock > .example-wrap > .rust-example-rendered\"\n-assert-css: (\".docblock > .example-wrap > pre\", {\"width\": \"796px\", \"overflow-x\": \"auto\"}, ALL)\n+assert-css: (\".docblock > .example-wrap > pre\", {\"width\": \"785.25px\", \"overflow-x\": \"auto\"}, ALL)"}, {"sha": "a9af88189a67de78bcee02314831f56d355ebbab", "filename": "src/test/rustdoc-gui/docblock-table-overflow.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -4,7 +4,7 @@ goto: file://|DOC_PATH|/lib2/long_table/struct.Foo.html\n size: (1100, 800)\n // Logically, the \".docblock\" and the \"<p>\" should have the same scroll width.\n compare-elements-property: (\".top-doc .docblock\", \".top-doc .docblock > p\", [\"scrollWidth\"])\n-assert-property: (\".top-doc .docblock\", {\"scrollWidth\": \"816\"})\n+assert-property: (\".top-doc .docblock\", {\"scrollWidth\": \"801\"})\n // However, since there is overflow in the <table>, its scroll width is bigger.\n assert-property: (\".top-doc .docblock table\", {\"scrollWidth\": \"1573\"})\n \n@@ -16,6 +16,6 @@ compare-elements-property: (\n     \"#implementations + details .docblock > p\",\n     [\"scrollWidth\"],\n )\n-assert-property: (\"#implementations + details .docblock\", {\"scrollWidth\": \"816\"})\n+assert-property: (\"#implementations + details .docblock\", {\"scrollWidth\": \"801\"})\n // However, since there is overflow in the <table>, its scroll width is bigger.\n assert-property: (\"#implementations + details .docblock table\", {\"scrollWidth\": \"1573\"})"}, {"sha": "34ff2de3a9b2b5069313cb0012e64ab747a676f7", "filename": "src/test/rustdoc-gui/headings.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheadings.goml?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -110,7 +110,7 @@ assert-css: (\"h6#sub-sub-heading-for-enum-impl-item-doc\", {\"font-size\": \"15.2px\"\n assert-css: (\"h6#sub-sub-heading-for-enum-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n \n assert-text: (\".sidebar .others h3\", \"Modules\")\n-assert-css: (\".sidebar .others h3\", {\"border-bottom-width\": \"1px\"}, ALL)\n+assert-css: (\".sidebar .others h3\", {\"border-bottom-width\": \"0px\"}, ALL)\n \n goto: file://|DOC_PATH|/test_docs/union.HeavilyDocumentedUnion.html\n "}, {"sha": "acb30141ce577c9ff693714a14e7c2b4921adb4a", "filename": "src/test/rustdoc-gui/item-info-width.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -3,5 +3,5 @@ goto: file://|DOC_PATH|/lib2/struct.Foo.html\n // We set a fixed size so there is no chance of \"random\" resize.\n size: (1100, 800)\n // We check that \".item-info\" is bigger than its content.\n-assert-css: (\".item-info\", {\"width\": \"807px\"})\n+assert-css: (\".item-info\", {\"width\": \"757px\"})\n assert-css: (\".item-info .stab\", {\"width\": \"341px\"})"}, {"sha": "3162a067d2107f8c16b7f2aa41552c9e82448808", "filename": "src/test/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -5,7 +5,7 @@ write: (\".search-input\", \"test\")\n wait-for: \"#titles\"\n // The width is returned by \"getComputedStyle\" which returns the exact number instead of the\n // CSS rule which is \"50%\"...\n-assert-css: (\".search-results div.desc\", {\"width\": \"320px\"})\n+assert-css: (\".search-results div.desc\", {\"width\": \"295px\"})\n size: (600, 100)\n // As counter-intuitive as it may seem, in this width, the width is \"100%\", which is why\n // when computed it's larger."}, {"sha": "547eb3fd1b3d107e63cfa1d864ddf3d2a1b73585", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -4,25 +4,28 @@\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n // Switching to \"mobile view\" by reducing the width to 600px.\n size: (600, 600)\n-assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"-246px\"})\n+assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})\n // Opening the sidebar menu.\n-click: \".sidebar-menu\"\n-assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"0px\"})\n+click: \".sidebar-menu-toggle\"\n+assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"0px\"})\n // Closing the sidebar menu.\n-click: \".sidebar-menu\"\n-assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"-246px\"})\n+click: \".sidebar-menu-toggle\"\n+assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})\n // Force the sidebar open by focusing a link inside it.\n // This makes it easier for keyboard users to get to it.\n focus: \".sidebar-title a\"\n-assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"0px\"})\n+assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"0px\"})\n // When we tab out of the sidebar, close it.\n focus: \".search-input\"\n-assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"-246px\"})\n+assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})\n \n // Open the sidebar menu.\n-click: \".sidebar-menu\"\n-assert-css: (\".sidebar-elems\", {\"left\": \"0px\"})\n+click: \".sidebar-menu-toggle\"\n+assert-css: (\".sidebar\", {\"left\": \"0px\"})\n \n // Click elsewhere.\n click: \"body\"\n-assert-css: (\".sidebar-elems\", {\"left\": \"-246px\"})\n+assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})\n+\n+// Check that the topbar is visible\n+assert-property: (\".mobile-topbar\", {\"clientHeight\": \"45\"})"}, {"sha": "1c5eb9239ba8bba6468a73153205a0e4d10a8513", "filename": "src/test/rustdoc-gui/sidebar-source-code.goml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -10,6 +10,7 @@ click: (10, 10)\n // We wait for the sidebar to be expanded (there is a 0.5s animation).\n wait-for: 600\n assert-css: (\"nav.sidebar.expanded\", {\"width\": \"300px\"})\n+assert-css: (\"nav.sidebar.expanded a\", {\"font-size\": \"14.4px\"})\n // We collapse the sidebar.\n click: (10, 10)\n // We wait for the sidebar to be collapsed (there is a 0.5s animation).\n@@ -30,3 +31,6 @@ click: (10, 10)\n // We ensure that the class has been removed.\n assert-false: \"nav.sidebar.expanded\"\n assert: \"nav.sidebar\"\n+\n+// Check that the topbar is not visible\n+assert-property: (\".mobile-topbar\", {\"offsetParent\": \"null\"})"}, {"sha": "a1175525858200b390f243e3e1d5399dec222256", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,8 +1,14 @@\n goto: file://|DOC_PATH|/test_docs/index.html\n+show-text: true\n+local-storage: {\"rustdoc-theme\": \"light\"}\n+// We reload the page so the local storage settings are being used.\n+reload:\n+\n assert-text: (\".sidebar > .location\", \"Crate test_docs\")\n // In modules, we only have one \"location\" element.\n assert-count: (\".sidebar .location\", 1)\n-assert-text: (\".sidebar-elems > #all-types\", \"See all test_docs's items\")\n+assert-text: (\"#all-types\", \"All Items\")\n+assert-css: (\"#all-types\", {\"color\": \"rgb(56, 115, 173)\"})\n // We check that we have the crates list and that the \"current\" on is \"test_docs\".\n assert-text: (\".sidebar-elems .crate > ul > li > a.current\", \"test_docs\")\n // And we're also supposed to have the list of items in the current module.\n@@ -24,13 +30,14 @@ assert-count: (\".sidebar .location\", 2)\n assert-false: \".sidebar-elems > .crate\"\n \n click: \".sidebar-links a\"\n-assert-property: (\"html\", {\"scrollTop\": \"389\"})\n+assert-property-false: (\"html\", {\"scrollTop\": \"0\"})\n \n-click: \".sidebar h2.location\"\n+click: \".sidebar h2.location a\"\n assert-property: (\"html\", {\"scrollTop\": \"0\"})\n \n // We now go back to the crate page to click on the \"lib2\" crate link.\n goto: file://|DOC_PATH|/test_docs/index.html\n+assert-css: (\".sidebar-elems .crate > ul > li:first-child > a\", {\"color\": \"rgb(56, 115, 173)\"})\n click: \".sidebar-elems .crate > ul > li:first-child > a\"\n \n // PAGE: lib2/index.html\n@@ -51,8 +58,7 @@ click: \"#functions + .item-table .item-left > a\"\n // In items containing no items (like functions or constants) and in modules, we have one\n // \"location\" elements.\n assert-count: (\".sidebar .location\", 1)\n-// There is a \"<br>\" tag between \"in\" and \"lib2\", but it doesn't count as a space.\n-assert-text: (\".sidebar .sidebar-elems .location\", \"Other items inlib2\")\n+assert-text: (\".sidebar .sidebar-elems .location\", \"In lib2\")\n // We check that we don't have the crate list.\n assert-false: \".sidebar-elems > .crate\"\n "}, {"sha": "21874f786f1ad17cc81564f5e6cfa960fcad1965", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -11,7 +11,7 @@ assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1324\"})\n goto: file://|DOC_PATH|/lib2/too_long/type.ReallyLongTypeNameLongLongLong.html\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // We now check that the section width hasn't grown because of it.\n-assert-property: (\"#main-content\", {\"scrollWidth\": \"840\"})\n+assert-property: (\"#main-content\", {\"scrollWidth\": \"825\"})\n // And now checking that it has scrollable content.\n assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1103\"})\n \n@@ -20,6 +20,13 @@ assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1103\"})\n goto: file://|DOC_PATH|/lib2/too_long/constant.ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong.html\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // We now check that the section width hasn't grown because of it.\n-assert-property: (\"#main-content\", {\"scrollWidth\": \"840\"})\n+assert-property: (\"#main-content\", {\"scrollWidth\": \"825\"})\n // And now checking that it has scrollable content.\n assert-property: (\".item-decl pre\", {\"scrollWidth\": \"950\"})\n+\n+// On mobile:\n+size: (600, 600)\n+goto: file://|DOC_PATH|/lib2/too_long/struct.SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName.html\n+assert-property: (\".mobile-topbar .location\", {\"scrollWidth\": \"504\"})\n+assert-property: (\".mobile-topbar .location\", {\"clientWidth\": \"504\"})\n+assert-css: (\".mobile-topbar .location\", {\"overflow-x\": \"hidden\"})"}, {"sha": "08a35339680cd91b76502fc894b5538e2d90e5b5", "filename": "src/test/rustdoc/cap-lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc%2Fcap-lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc%2Fcap-lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcap-lints.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -3,7 +3,7 @@\n // therefore should not concern itself with the lints.\n #[deny(warnings)]\n \n-// @has cap_lints/struct.Foo.html //* 'Struct Foo'\n+// @has cap_lints/struct.Foo.html //* 'Foo'\n pub struct Foo {\n     field: i32,\n }"}, {"sha": "8413709f15e909af3052fc62aec17d6e9b616e82", "filename": "src/test/rustdoc/crate-version-escape.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc%2Fcrate-version-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc%2Fcrate-version-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcrate-version-escape.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -2,5 +2,4 @@\n \n #![crate_name = \"foo\"]\n \n-// @has 'foo/index.html' '//div[@class=\"block version\"]/p' 'Version <script>alert(\"hi\")</script>'\n-// @has 'foo/all.html' '//div[@class=\"block version\"]/p' 'Version <script>alert(\"hi\")</script>'\n+// @has 'foo/index.html' '//li[@class=\"version\"]' 'Version <script>alert(\"hi\")</script>'"}, {"sha": "2592c98530fe44e0292def4385de24f7aa30e967", "filename": "src/test/rustdoc/crate-version.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc%2Fcrate-version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc%2Fcrate-version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcrate-version.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,3 +1,3 @@\n // compile-flags: --crate-version=1.3.37\n \n-// @has 'crate_version/index.html' '//div[@class=\"block version\"]/p' 'Version 1.3.37'\n+// @has 'crate_version/index.html' '//*[@class=\"version\"]' 'Version 1.3.37'"}, {"sha": "69e8b856b0a26142cbf6461a5b336f35f42eefe5", "filename": "src/test/rustdoc/titles.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc%2Ftitles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc%2Ftitles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftitles.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,10 +1,11 @@\n #![crate_name = \"foo\"]\n-\n #![feature(rustdoc_internals)]\n \n // @matches 'foo/index.html' '//h1' 'Crate foo'\n+// @matches 'foo/index.html' '//h2[@class=\"location\"]' 'Crate foo'\n \n // @matches 'foo/foo_mod/index.html' '//h1' 'Module foo::foo_mod'\n+// @matches 'foo/foo_mod/index.html' '//h2[@class=\"location\"]' 'Module foo_mod'\n pub mod foo_mod {\n     pub struct __Thing {}\n }\n@@ -18,15 +19,19 @@ extern \"C\" {\n pub fn foo_fn() {}\n \n // @matches 'foo/trait.FooTrait.html' '//h1' 'Trait foo::FooTrait'\n+// @matches 'foo/trait.FooTrait.html' '//h2[@class=\"location\"]' 'FooTrait'\n pub trait FooTrait {}\n \n // @matches 'foo/struct.FooStruct.html' '//h1' 'Struct foo::FooStruct'\n+// @matches 'foo/struct.FooStruct.html' '//h2[@class=\"location\"]' 'FooStruct'\n pub struct FooStruct;\n \n // @matches 'foo/enum.FooEnum.html' '//h1' 'Enum foo::FooEnum'\n+// @matches 'foo/enum.FooEnum.html' '//h2[@class=\"location\"]' 'FooEnum'\n pub enum FooEnum {}\n \n // @matches 'foo/type.FooType.html' '//h1' 'Type Definition foo::FooType'\n+// @matches 'foo/type.FooType.html' '//h2[@class=\"location\"]' 'FooType'\n pub type FooType = FooStruct;\n \n // @matches 'foo/macro.foo_macro.html' '//h1' 'Macro foo::foo_macro'"}, {"sha": "4ecd62cded22e9a22c56ff6c0356978b483002ed", "filename": "src/test/rustdoc/typedef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc%2Ftypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Frustdoc%2Ftypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftypedef.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -12,7 +12,7 @@ impl MyStruct {\n // @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'impl MyAlias'\n // @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'impl MyTrait for MyAlias'\n // @has - 'Alias docstring'\n-// @has - '//*[@class=\"sidebar\"]//*[@class=\"location\"]' 'Type Definition MyAlias'\n+// @has - '//*[@class=\"sidebar\"]//*[@class=\"location\"]' 'MyAlias'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#implementations\"]' 'Methods'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#trait-implementations\"]' 'Trait Implementations'\n /// Alias docstring"}, {"sha": "9ced4667d249a887cc3ade7507d4e368a1098eec", "filename": "src/test/ui/const-generics/issues/issue-92186.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-92186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-92186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-92186.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub struct Foo<const N: usize>;\n+pub trait Bar<T> {}\n+\n+impl<T> Bar<T> for Foo<{ 1 }> {}\n+impl<T> Bar<T> for Foo<{ 2 }> {}\n+\n+fn main() {}"}, {"sha": "4d6b752867f1b0bd23c00e779a99483c6c70803d", "filename": "src/test/ui/const-generics/types-mismatch-const-args.full.stderr", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -15,9 +15,20 @@ LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `A<'a, u16, {2u32}, {3u32}>`\n-              found struct `A<'b, u32, {2u32}, {3u32}>`\n+   = note: expected struct `A<'a, u16, _, _>`\n+              found struct `A<'b, u32, _, _>`\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/types-mismatch-const-args.rs:18:41\n+   |\n+LL |     let _: A<'a, u16, {4u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `A<'a, u16, 4_u32, _>`\n+              found struct `A<'b, u32, 2_u32, _>`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "8b60238cb0c030469a4c04ab9b03968c67500072", "filename": "src/test/ui/const-generics/types-mismatch-const-args.min.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -20,6 +20,17 @@ LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data\n    = note: expected struct `A<'a, u16, _, _>`\n               found struct `A<'b, u32, _, _>`\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/types-mismatch-const-args.rs:18:41\n+   |\n+LL |     let _: A<'a, u16, {4u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `A<'a, u16, 4_u32, _>`\n+              found struct `A<'b, u32, 2_u32, _>`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "43ef28b268f56becba15ecfd8504385455a74b3d", "filename": "src/test/ui/const-generics/types-mismatch-const-args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -15,6 +15,8 @@ fn a<'a, 'b>() {\n     //~^ ERROR mismatched types\n     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n     //~^ ERROR mismatched types\n+    let _: A<'a, u16, {4u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n+    //~^ ERROR mismatched types\n }\n \n pub fn main() {}"}, {"sha": "33f9c5393135f237370b5ccd5f3fc90af06e4251", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-gnu.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.rs?ref=9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "patch": "@@ -1,8 +0,0 @@\n-// gate-test-raw_dylib\n-// only-windows-gnu\n-#[link(name = \"foo\", kind = \"raw-dylib\")]\n-//~^ ERROR: kind=\"raw-dylib\" is unstable\n-//~| WARNING: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n-extern \"C\" {}\n-\n-fn main() {}"}, {"sha": "14dfadf4126f3d105a52f230bdb5b6f8d012957e", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-gnu.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.stderr?ref=9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "patch": "@@ -1,18 +0,0 @@\n-warning: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n-  --> $DIR/feature-gate-raw-dylib-windows-gnu.rs:3:1\n-   |\n-LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0658]: kind=\"raw-dylib\" is unstable\n-  --> $DIR/feature-gate-raw-dylib-windows-gnu.rs:3:1\n-   |\n-LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n-   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "995d9ced4801a639e5cc1a9a84027ed83d40d59c", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,5 +1,4 @@\n-// gate-test-raw_dylib\n-// only-windows-msvc\n+// only-windows\n #[link(name = \"foo\", kind = \"raw-dylib\")]\n //~^ ERROR: kind=\"raw-dylib\" is unstable\n extern \"C\" {}", "previous_filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-msvc.rs"}, {"sha": "bb64af38b2cb92d1db9fdf110a3808ebc07f99e7", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: kind=\"raw-dylib\" is unstable\n-  --> $DIR/feature-gate-raw-dylib-windows-msvc.rs:3:1\n+  --> $DIR/feature-gate-raw-dylib.rs:2:1\n    |\n LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-msvc.stderr"}, {"sha": "35003a79ad703daf9145cd0cd7030b4305277352", "filename": "src/test/ui/macros/macro-interpolation.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fmacros%2Fmacro-interpolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fmacros%2Fmacro-interpolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-interpolation.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -14,8 +14,20 @@ macro_rules! overly_complicated {\n \n }\n \n+macro_rules! qpath {\n+    (path, <$type:ty as $trait:path>::$name:ident) => {\n+        <$type as $trait>::$name\n+    };\n+\n+    (ty, <$type:ty as $trait:ty>::$name:ident) => {\n+        <$type as $trait>::$name\n+    };\n+}\n+\n pub fn main() {\n+    let _: qpath!(path, <str as ToOwned>::Owned);\n+    let _: qpath!(ty, <str as ToOwned>::Owned);\n+\n     assert!(overly_complicated!(f, x, Option<usize>, { return Some(x); },\n                                Some(8), Some(y), y) == 8)\n-\n }"}, {"sha": "2a15b1d799f846fc7379d8d28ec7a4c84d46a63c", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,4 +1,4 @@\n-// only-windows-msvc\n+// only-windows\n #![feature(raw_dylib)]\n //~^ WARN the feature `raw_dylib` is incomplete\n "}, {"sha": "13c9aa01e34ae8126858fb760bf1b32f37f5d2e8", "filename": "src/test/ui/rfc-2627-raw-dylib/multiple-declarations.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,4 +1,5 @@\n-// only-i686-pc-windows-msvc\n+// only-x86\n+// only-windows\n // compile-flags: --crate-type lib --emit link\n #![allow(clashing_extern_declarations)]\n #![feature(raw_dylib)]"}, {"sha": "93ca8f4d8d448e1780f22d56a80e32d43898f8e3", "filename": "src/test/ui/rfc-2627-raw-dylib/multiple-declarations.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/multiple-declarations.rs:4:12\n+  --> $DIR/multiple-declarations.rs:5:12\n    |\n LL | #![feature(raw_dylib)]\n    |            ^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![feature(raw_dylib)]\n    = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n \n error: multiple declarations of external function `f` from library `foo.dll` have different calling conventions\n-  --> $DIR/multiple-declarations.rs:14:9\n+  --> $DIR/multiple-declarations.rs:15:9\n    |\n LL |         fn f(x: i32);\n    |         ^^^^^^^^^^^^^"}, {"sha": "e9690f03f45c9832081b99968ce475b43ca01908", "filename": "src/test/ui/rfc-2627-raw-dylib/raw-dylib-msvc-only.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.rs?ref=9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "patch": "@@ -1,8 +0,0 @@\n-// only-windows-gnu\n-// check-pass\n-// compile-flags: --crate-type lib\n-#![feature(raw_dylib)]\n-//~^ WARNING: the feature `raw_dylib` is incomplete\n-#[link(name = \"foo\", kind = \"raw-dylib\")]\n-//~^ WARNING: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n-extern \"C\" {}"}, {"sha": "6e24112b3c3e50857f11cd109f57da7312f71415", "filename": "src/test/ui/rfc-2627-raw-dylib/raw-dylib-msvc-only.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.stderr?ref=9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/raw-dylib-msvc-only.rs:4:12\n-   |\n-LL | #![feature(raw_dylib)]\n-   |            ^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n-\n-warning: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n-  --> $DIR/raw-dylib-msvc-only.rs:6:1\n-   |\n-LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: 2 warnings emitted\n-"}, {"sha": "dc647fd63f527651746d09a4298c1ed1cd028649", "filename": "src/test/ui/rfc-2627-raw-dylib/unsupported-abi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,4 +1,5 @@\n-// only-x86_64-pc-windows-msvc\n+// only-x86_64\n+// only-windows\n // compile-flags: --crate-type lib --emit link\n #![allow(incomplete_features)]\n #![feature(raw_dylib)]"}, {"sha": "d8a2a6af9c19e5dcd0ebc0270dfd1926d2c2326c", "filename": "src/test/ui/rfc-2627-raw-dylib/unsupported-abi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.stderr?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -1,5 +1,5 @@\n error: ABI not supported by `#[link(kind = \"raw-dylib\")]` on this architecture\n-  --> $DIR/unsupported-abi.rs:7:5\n+  --> $DIR/unsupported-abi.rs:8:5\n    |\n LL |     fn f(x: i32);\n    |     ^^^^^^^^^^^^^"}, {"sha": "a975190a2fafd43ae5d55f600c3285ef0eee55b6", "filename": "src/test/ui/simd/intrinsic/generic-as.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-as.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -0,0 +1,48 @@\n+// run-pass\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_as<T, U>(x: T) -> U;\n+}\n+\n+#[derive(Copy, Clone)]\n+#[repr(simd)]\n+struct V<T>([T; 2]);\n+\n+fn main() {\n+    unsafe {\n+        let u = V::<u32>([u32::MIN, u32::MAX]);\n+        let i: V<i16> = simd_as(u);\n+        assert_eq!(i.0[0], u.0[0] as i16);\n+        assert_eq!(i.0[1], u.0[1] as i16);\n+    }\n+\n+    unsafe {\n+        let f = V::<f32>([f32::MIN, f32::MAX]);\n+        let i: V<i16> = simd_as(f);\n+        assert_eq!(i.0[0], f.0[0] as i16);\n+        assert_eq!(i.0[1], f.0[1] as i16);\n+    }\n+\n+    unsafe {\n+        let f = V::<f32>([f32::MIN, f32::MAX]);\n+        let u: V<u8> = simd_as(f);\n+        assert_eq!(u.0[0], f.0[0] as u8);\n+        assert_eq!(u.0[1], f.0[1] as u8);\n+    }\n+\n+    unsafe {\n+        let f = V::<f64>([f64::MIN, f64::MAX]);\n+        let i: V<isize> = simd_as(f);\n+        assert_eq!(i.0[0], f.0[0] as isize);\n+        assert_eq!(i.0[1], f.0[1] as isize);\n+    }\n+\n+    unsafe {\n+        let f = V::<f64>([f64::MIN, f64::MAX]);\n+        let u: V<usize> = simd_as(f);\n+        assert_eq!(u.0[0], f.0[0] as usize);\n+        assert_eq!(u.0[1], f.0[1] as usize);\n+    }\n+}"}, {"sha": "b9382310deb2c99d1e9a0b7057d60c83a3d9ef19", "filename": "src/test/ui/simd/intrinsic/generic-cast-pointer-width.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pointer-width.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e2b0be26ea177527b60d355bd8f56cd473bd00/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pointer-width.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pointer-width.rs?ref=e5e2b0be26ea177527b60d355bd8f56cd473bd00", "patch": "@@ -0,0 +1,21 @@\n+// run-pass\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_cast<T, U>(x: T) -> U;\n+}\n+\n+#[derive(Copy, Clone)]\n+#[repr(simd)]\n+struct V<T>([T; 4]);\n+\n+fn main() {\n+    let u = V::<usize>([0, 1, 2, 3]);\n+    let uu32: V<u32> = unsafe { simd_cast(u) };\n+    let ui64: V<i64> = unsafe { simd_cast(u) };\n+\n+    for (u, (uu32, ui64)) in u.0.iter().zip(uu32.0.iter().zip(ui64.0.iter())) {\n+        assert_eq!(*u as u32, *uu32);\n+        assert_eq!(*u as i64, *ui64);\n+    }\n+}"}]}