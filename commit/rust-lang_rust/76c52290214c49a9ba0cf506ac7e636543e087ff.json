{"sha": "76c52290214c49a9ba0cf506ac7e636543e087ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YzUyMjkwMjE0YzQ5YTliYTBjZjUwNmFjN2U2MzY1NDNlMDg3ZmY=", "commit": {"author": {"name": "Peter Todd", "email": "pete@petertodd.org", "date": "2019-05-07T16:16:33Z"}, "committer": {"name": "Peter Todd", "email": "pete@petertodd.org", "date": "2019-05-07T16:16:33Z"}, "message": "Document purpose of union-nonzero test", "tree": {"sha": "d4b3b475095476c08f59bd2c9d56b367aea2b4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4b3b475095476c08f59bd2c9d56b367aea2b4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76c52290214c49a9ba0cf506ac7e636543e087ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEFcyURjhyM68BBPYTJIFAPaXwkfsFAlzRr2IACgkQJIFAPaXw\nkfsz9QgAlyLGXLVZY8Skb8VvP1U+1HYZQXf5IhSYWEdj7fU7UuU4do1kgVmZYeZO\nUCRgcPTvc1AwIsvWCbAobOvfohshAfYOVIq6Y+QUXoyZVadQsHIAo20camqSSU5b\n1kbR5gaPeOseJlJFOcWS9CALmmyAPPrRvbSCDCj5PYFZLVHNRewkcQdj54cYeXyf\nZC7M+cIaj4+kxRgrJj9oL5fIdlgx/uiL6PiapmrEmORm0uxrZ1al8tc5aQXXTjho\nrl2yws09I7oDuYTk+fH/W9tWwig1Rk1X3ue3lhB2Q8+BuBPrypOpO2IaoNADn3oS\nsBJnr28mhhuB7DOp3bi1TIuJ2Q+UmQ==\n=Hncz\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEC4aXy93MLCjL/gbzojPRWLshFqrW9QklU3z7ZROM4+CP/wEFZJ+DB8WYNw\nTstuF6mH7qcI8BB14/NktHeA4y3wUIK5RRpVCPEEXNGvaPAIMJ1YmL4vny0Ag9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BB+BZwdyuok4mRXsojxVWInCPEEXNGvaPAICjWXzdrJi8QAg9/jDS75DI4jImh0\ndHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23/8BCgUkMAxT3IGbOH+OIl\nQM7mCPEEXNGvaPAIf1MGB+/E9TgAg9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRj\nLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQxTqBCyfftyUGsFEO4ghJFgjx\nBFzRr2jwCLO81CWXxwtnAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----", "payload": "tree d4b3b475095476c08f59bd2c9d56b367aea2b4e7\nparent 48d1be4f46225350bb59f87a46bf2f6cba041013\nauthor Peter Todd <pete@petertodd.org> 1557245793 -0400\ncommitter Peter Todd <pete@petertodd.org> 1557245793 -0400\n\nDocument purpose of union-nonzero test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76c52290214c49a9ba0cf506ac7e636543e087ff", "html_url": "https://github.com/rust-lang/rust/commit/76c52290214c49a9ba0cf506ac7e636543e087ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76c52290214c49a9ba0cf506ac7e636543e087ff/comments", "author": {"login": "petertodd", "id": 7042, "node_id": "MDQ6VXNlcjcwNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petertodd", "html_url": "https://github.com/petertodd", "followers_url": "https://api.github.com/users/petertodd/followers", "following_url": "https://api.github.com/users/petertodd/following{/other_user}", "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions", "organizations_url": "https://api.github.com/users/petertodd/orgs", "repos_url": "https://api.github.com/users/petertodd/repos", "events_url": "https://api.github.com/users/petertodd/events{/privacy}", "received_events_url": "https://api.github.com/users/petertodd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petertodd", "id": 7042, "node_id": "MDQ6VXNlcjcwNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petertodd", "html_url": "https://github.com/petertodd", "followers_url": "https://api.github.com/users/petertodd/followers", "following_url": "https://api.github.com/users/petertodd/following{/other_user}", "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions", "organizations_url": "https://api.github.com/users/petertodd/orgs", "repos_url": "https://api.github.com/users/petertodd/repos", "events_url": "https://api.github.com/users/petertodd/events{/privacy}", "received_events_url": "https://api.github.com/users/petertodd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48d1be4f46225350bb59f87a46bf2f6cba041013", "url": "https://api.github.com/repos/rust-lang/rust/commits/48d1be4f46225350bb59f87a46bf2f6cba041013", "html_url": "https://github.com/rust-lang/rust/commit/48d1be4f46225350bb59f87a46bf2f6cba041013"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "07a58aa7746d13556da2ed462ef5cb7b743eada0", "filename": "src/test/run-pass/union/union-nonzero.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76c52290214c49a9ba0cf506ac7e636543e087ff/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c52290214c49a9ba0cf506ac7e636543e087ff/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs?ref=76c52290214c49a9ba0cf506ac7e636543e087ff", "patch": "@@ -1,6 +1,18 @@\n // run-pass\n #![allow(dead_code)]\n \n+// Tests that unions aren't subject to unsafe non-zero/niche-filling optimizations.\n+//\n+// For example, if a union `U` can contain both a `&T` and a `*const T`, there's definitely no\n+// bit-value that an `Option<U>` could reuse as `None`; this test makes sure that isn't done.\n+//\n+// Secondly, this tests the status quo to not apply such optimizations to types containing unions\n+// even if they're theoretically possible. (discussion: https://github.com/rust-lang/rust/issues/36394)\n+//\n+// Notably this nails down part of the behavior that `MaybeUninit` assumes: that a\n+// `Option<MaybeUninit<&u8>>` does not take advantage of non-zero optimization, and thus is a safe\n+// construct.\n+\n use std::mem::{size_of, transmute};\n \n union U1<A: Copy> {"}]}