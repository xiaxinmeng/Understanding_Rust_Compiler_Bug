{"sha": "55e1910d006da7961687928542c1167cc556a39f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZTE5MTBkMDA2ZGE3OTYxNjg3OTI4NTQyYzExNjdjYzU1NmEzOWY=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-15T19:50:28Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-22T20:47:31Z"}, "message": "classify module from declaration", "tree": {"sha": "8440f4a2655ab06884d20180da10134f652d403b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8440f4a2655ab06884d20180da10134f652d403b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55e1910d006da7961687928542c1167cc556a39f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55e1910d006da7961687928542c1167cc556a39f", "html_url": "https://github.com/rust-lang/rust/commit/55e1910d006da7961687928542c1167cc556a39f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55e1910d006da7961687928542c1167cc556a39f/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93c179531b31786bfd50644b5f0c879afc798f7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/93c179531b31786bfd50644b5f0c879afc798f7d", "html_url": "https://github.com/rust-lang/rust/commit/93c179531b31786bfd50644b5f0c879afc798f7d"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "a137aeb9098266ecc09a1eb929bd745349f7e8ad", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55e1910d006da7961687928542c1167cc556a39f/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e1910d006da7961687928542c1167cc556a39f/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=55e1910d006da7961687928542c1167cc556a39f", "patch": "@@ -181,7 +181,6 @@ impl Module {\n     ) -> Option<Self> {\n         let decl_id = match src.ast {\n             ModuleSource::Module(ref module) => {\n-                assert!(!module.has_semi());\n                 let ast_id_map = db.ast_id_map(src.file_id);\n                 let item_id = ast_id_map.ast_id(module).with_file_id(src.file_id);\n                 Some(item_id)"}, {"sha": "3d647d2cbc4d14e5114df0cb244fc64fde1b2e32", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/55e1910d006da7961687928542c1167cc556a39f/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e1910d006da7961687928542c1167cc556a39f/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=55e1910d006da7961687928542c1167cc556a39f", "patch": "@@ -232,7 +232,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_find_all_refs_modules() {\n+    fn test_find_all_refs_two_modules() {\n         let code = r#\"\n             //- /lib.rs\n             pub mod foo;\n@@ -270,6 +270,33 @@ mod tests {\n         assert_eq!(refs.len(), 3);\n     }\n \n+\n+    // `mod foo;` is not in the results because `foo` is an `ast::Name`.\n+    // So, there are two references: the first one is a definition of the `foo` module, \n+    // which is the whole `foo.rs`, and the second one is in `use foo::Foo`.\n+    #[test]\n+    fn test_find_all_refs_decl_module() {\n+        let code = r#\"\n+            //- /lib.rs\n+            mod foo<|>;\n+\n+            use foo::Foo;\n+\n+            fn f() {\n+                let i = Foo { n: 5 };\n+            }\n+\n+            //- /foo.rs\n+            pub struct Foo {\n+                pub n: u32,\n+            }\n+        \"#;\n+\n+        let (analysis, pos) = analysis_and_position(code);\n+        let refs = analysis.find_all_refs(pos).unwrap().unwrap();\n+        assert_eq!(refs.len(), 2);\n+    }\n+\n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n         analysis.find_all_refs(position).unwrap().unwrap()"}, {"sha": "ac9cf34eb0c79fb564caeb9984dd06a4b1b3d9af", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/55e1910d006da7961687928542c1167cc556a39f/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e1910d006da7961687928542c1167cc556a39f/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=55e1910d006da7961687928542c1167cc556a39f", "patch": "@@ -31,9 +31,16 @@ pub(crate) fn classify_name(\n                 Some(from_struct_field(db, field))\n             },\n             ast::Module(it) => {\n-                let ast = hir::ModuleSource::Module(it);\n-                let src = hir::Source { file_id, ast };\n-                let def = hir::Module::from_definition(db, src)?;\n+                let def = {\n+                    if !it.has_semi() {\n+                        let ast = hir::ModuleSource::Module(it);\n+                        let src = hir::Source { file_id, ast };\n+                        hir::Module::from_definition(db, src)\n+                    } else {\n+                        let src = hir::Source { file_id, ast: it };\n+                        hir::Module::from_declaration(db, src)\n+                    }\n+                }?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::StructDef(it) => {"}, {"sha": "d2c966b4f3a632341975e4f65249da7106e70741", "filename": "crates/ra_ide_api/src/references/search_scope.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55e1910d006da7961687928542c1167cc556a39f/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e1910d006da7961687928542c1167cc556a39f/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=55e1910d006da7961687928542c1167cc556a39f", "patch": "@@ -1,5 +1,7 @@\n //! FIXME: write short doc here\n \n+use std::collections::HashSet;\n+\n use hir::{DefWithBody, HasSource, ModuleSource};\n use ra_db::{FileId, SourceDatabase, SourceDatabaseExt};\n use ra_syntax::{AstNode, TextRange};\n@@ -9,7 +11,7 @@ use crate::db::RootDatabase;\n use super::{NameDefinition, NameKind};\n \n impl NameDefinition {\n-    pub(crate) fn search_scope(&self, db: &RootDatabase) -> Vec<(FileId, Option<TextRange>)> {\n+    pub(crate) fn search_scope(&self, db: &RootDatabase) -> HashSet<(FileId, Option<TextRange>)> {\n         let module_src = self.container.definition_source(db);\n         let file_id = module_src.file_id.original_file(db);\n \n@@ -19,13 +21,13 @@ impl NameDefinition {\n                 DefWithBody::Const(c) => c.source(db).ast.syntax().text_range(),\n                 DefWithBody::Static(s) => s.source(db).ast.syntax().text_range(),\n             };\n-            return vec![(file_id, Some(range))];\n+            return [(file_id, Some(range))].iter().cloned().collect();\n         }\n \n         if let Some(ref vis) = self.visibility {\n             let source_root_id = db.file_source_root(file_id);\n             let source_root = db.source_root(source_root_id);\n-            let mut files = source_root.walk().map(|id| (id.into(), None)).collect::<Vec<_>>();\n+            let mut files = source_root.walk().map(|id| (id.into(), None)).collect::<HashSet<_>>();\n \n             if vis.syntax().to_string().as_str() == \"pub(crate)\" {\n                 return files;\n@@ -54,6 +56,6 @@ impl NameDefinition {\n             ModuleSource::Module(m) => Some(m.syntax().text_range()),\n             ModuleSource::SourceFile(_) => None,\n         };\n-        vec![(file_id, range)]\n+        [(file_id, range)].iter().cloned().collect()\n     }\n }"}]}