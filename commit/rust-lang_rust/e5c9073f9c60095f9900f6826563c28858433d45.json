{"sha": "e5c9073f9c60095f9900f6826563c28858433d45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YzkwNzNmOWM2MDA5NWY5OTAwZjY4MjY1NjNjMjg4NTg0MzNkNDU=", "commit": {"author": {"name": "ThibsG", "email": "thebaek1@hotmail.com", "date": "2020-01-10T09:56:09Z"}, "committer": {"name": "ThibsG", "email": "thebaek1@hotmail.com", "date": "2020-01-13T15:25:35Z"}, "message": "Better binding name on Err for note", "tree": {"sha": "94c8b43d574273ff03b6828cd49074f3021412e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94c8b43d574273ff03b6828cd49074f3021412e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5c9073f9c60095f9900f6826563c28858433d45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c9073f9c60095f9900f6826563c28858433d45", "html_url": "https://github.com/rust-lang/rust/commit/e5c9073f9c60095f9900f6826563c28858433d45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5c9073f9c60095f9900f6826563c28858433d45/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f79c47f28dd882b8c59353bc78758f0a1651799e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f79c47f28dd882b8c59353bc78758f0a1651799e", "html_url": "https://github.com/rust-lang/rust/commit/f79c47f28dd882b8c59353bc78758f0a1651799e"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "3d95b8f327143ef053701f24c03c08a285658c8e", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e5c9073f9c60095f9900f6826563c28858433d45/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c9073f9c60095f9900f6826563c28858433d45/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=e5c9073f9c60095f9900f6826563c28858433d45", "patch": "@@ -17,6 +17,7 @@ use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::symbol::Ident;\n use std::cmp::Ordering;\n use std::collections::Bound;\n use syntax::ast::{self, LitKind};\n@@ -470,18 +471,13 @@ fn is_wild<'tcx>(pat: &impl std::ops::Deref<Target = Pat<'tcx>>) -> bool {\n     }\n }\n \n-fn is_unused_underscored<'tcx>(patkind: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n-    match patkind {\n-        PatKind::Binding(.., ident, None) if ident.as_str().starts_with('_') => {\n-            let mut visitor = UsedVisitor {\n-                var: ident.name,\n-                used: false,\n-            };\n-            walk_expr(&mut visitor, body);\n-            !visitor.used\n-        },\n-        _ => false,\n-    }\n+fn is_unused<'tcx>(ident: &'tcx Ident, body: &'tcx Expr<'_>) -> bool {\n+    let mut visitor = UsedVisitor {\n+        var: ident.name,\n+        used: false,\n+    };\n+    walk_expr(&mut visitor, body);\n+    !visitor.used\n }\n \n struct UsedVisitor {\n@@ -511,20 +507,34 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n         for arm in arms {\n             if let PatKind::TupleStruct(ref path, ref inner, _) = arm.pat.kind {\n                 let path_str = print::to_string(print::NO_ANN, |s| s.print_qpath(path, false));\n-                if_chain! {\n-                    if path_str == \"Err\";\n-                    if inner.iter().any(is_wild) || inner.iter().any(|pat| is_unused_underscored(&pat.kind, arm.body));\n-                    if let ExprKind::Block(ref block, _) = arm.body.kind;\n-                    if is_panic_block(block);\n-                    then {\n-                        // `Err(_)` arm with `panic!` found\n-                        span_note_and_lint(cx,\n-                                           MATCH_WILD_ERR_ARM,\n-                                           arm.pat.span,\n-                                           \"`Err(_)` will match all errors, maybe not a good idea\",\n-                                           arm.pat.span,\n-                                           \"to remove this warning, match each error separately \\\n-                                            or use `unreachable!` macro\");\n+                if path_str == \"Err\" {\n+                    let mut matching_wild = inner.iter().any(is_wild);\n+                    let mut ident_bind_name = String::from(\"_\");\n+                    if !matching_wild {\n+                        // Looking for unused bindings (i.e.: `_e`)\n+                        inner.iter().for_each(|pat| {\n+                            if let PatKind::Binding(.., ident, None) = &pat.kind {\n+                                if ident.as_str().starts_with('_') && is_unused(ident, arm.body) {\n+                                    ident_bind_name = (&ident.name.as_str()).to_string();\n+                                    matching_wild = true;\n+                                }\n+                            }\n+                        });\n+                    }\n+                    if_chain! {\n+                        if matching_wild;\n+                        if let ExprKind::Block(ref block, _) = arm.body.kind;\n+                        if is_panic_block(block);\n+                        then {\n+                            // `Err(_)` or `Err(_e)` arm with `panic!` found\n+                            span_note_and_lint(cx,\n+                                            MATCH_WILD_ERR_ARM,\n+                                            arm.pat.span,\n+                                            &format!(\"`Err({})` will match all errors, maybe not a good idea\", &ident_bind_name),\n+                                            arm.pat.span,\n+                                            \"to remove this warning, match each error separately \\\n+                                                or use `unreachable!` macro\");\n+                        }\n                     }\n                 }\n             }"}, {"sha": "dd8014073df73c5f2b37e214d3c93795dc56519e", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5c9073f9c60095f9900f6826563c28858433d45/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5c9073f9c60095f9900f6826563c28858433d45/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=e5c9073f9c60095f9900f6826563c28858433d45", "patch": "@@ -78,7 +78,7 @@ LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: `Err(_)` will match all errors, maybe not a good idea\n+error: `Err(_e)` will match all errors, maybe not a good idea\n   --> $DIR/matches.rs:34:9\n    |\n LL |         Err(_e) => panic!(),"}]}