{"sha": "6a8aec35612b1ca7968a962a47e7fabea0eeafe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOGFlYzM1NjEyYjFjYTc5NjhhOTYyYTQ3ZTdmYWJlYTBlZWFmZTI=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2015-07-31T18:40:05Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2015-07-31T18:40:05Z"}, "message": "Add Win10 SDK lib subfolder name\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>", "tree": {"sha": "45ba12eea8a1e674dd4a9ace9bb8611a769547df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45ba12eea8a1e674dd4a9ace9bb8611a769547df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a8aec35612b1ca7968a962a47e7fabea0eeafe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a8aec35612b1ca7968a962a47e7fabea0eeafe2", "html_url": "https://github.com/rust-lang/rust/commit/6a8aec35612b1ca7968a962a47e7fabea0eeafe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a8aec35612b1ca7968a962a47e7fabea0eeafe2/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "759726276733a6c63fcb9d5b0ca75128736f8539", "url": "https://api.github.com/repos/rust-lang/rust/commits/759726276733a6c63fcb9d5b0ca75128736f8539", "html_url": "https://github.com/rust-lang/rust/commit/759726276733a6c63fcb9d5b0ca75128736f8539"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "87d3fd1c0e827963a131cd6d3ded16e8f35c4933", "filename": "src/librustc_trans/back/msvc/mod.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6a8aec35612b1ca7968a962a47e7fabea0eeafe2/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8aec35612b1ca7968a962a47e7fabea0eeafe2/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fmod.rs?ref=6a8aec35612b1ca7968a962a47e7fabea0eeafe2", "patch": "@@ -206,7 +206,7 @@ pub fn link_exe_cmd(sess: &Session) -> Command {\n         return max_key\n     }\n \n-    fn get_windows_sdk_path() -> Option<(PathBuf, usize)> {\n+    fn get_windows_sdk_path() -> Option<(PathBuf, usize, Option<OsString>)> {\n         let key = r\"SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\";\n         let key = LOCAL_MACHINE.open(key.as_ref());\n         let (n, k) = match key.ok().as_ref().and_then(max_version) {\n@@ -217,28 +217,29 @@ pub fn link_exe_cmd(sess: &Session) -> Command {\n         let major = parts.next().unwrap().parse::<usize>().unwrap();\n         let _minor = parts.next().unwrap().parse::<usize>().unwrap();\n         k.query_str(\"InstallationFolder\").ok().map(|folder| {\n-            (PathBuf::from(folder), major)\n+            let ver = k.query_str(\"ProductVersion\");\n+            (PathBuf::from(folder), major, ver.ok())\n         })\n     }\n \n     fn get_windows_sdk_lib_path(sess: &Session) -> Option<PathBuf> {\n-        let (mut path, major) = match get_windows_sdk_path() {\n+        let (mut path, major, ver) = match get_windows_sdk_path() {\n             Some(p) => p,\n             None => return None,\n         };\n         path.push(\"Lib\");\n         if major <= 7 {\n             // In Windows SDK 7.x, x86 libraries are directly in the Lib folder,\n-            // x64 libraries are inside, and it's not necessary to link agains\n+            // x64 libraries are inside, and it's not necessary to link against\n             // the SDK 7.x when targeting ARM or other architectures.\n             let x86 = match &sess.target.target.arch[..] {\n                 \"x86\" => true,\n                 \"x86_64\" => false,\n                 _ => return None,\n             };\n             Some(if x86 {path} else {path.join(\"x64\")})\n-        } else {\n-            // Windows SDK 8.x installes libraries in a folder whose names\n+        } else if major <= 8 {\n+            // Windows SDK 8.x installs libraries in a folder whose names\n             // depend on the version of the OS you're targeting. By default\n             // choose the newest, which usually corresponds to the version of\n             // the OS you've installed the SDK on.\n@@ -251,7 +252,25 @@ pub fn link_exe_cmd(sess: &Session) -> Command {\n             }).map(|path| {\n                 path.join(\"um\").join(extra)\n             })\n-        }\n+        } else if let Some(mut ver) = ver {\n+            // Windows SDK 10 splits the libraries into architectures the same\n+            // as Windows SDK 8.x, except for the addition of arm64.\n+            // Additionally, the SDK 10 is split by Windows 10 build numbers\n+            // rather than the OS version like the SDK 8.x does.\n+            let extra = match windows_sdk_v10_subdir(sess) {\n+                Some(e) => e,\n+                None => return None,\n+            };\n+            // To get the correct directory we need to get the Windows SDK 10\n+            // version, and so far it looks like the \"ProductVersion\" of the SDK\n+            // corresponds to the folder name that the libraries are located in\n+            // except that the folder contains an extra \".0\". For now just\n+            // append a \".0\" to look for find the directory we're in. This logic\n+            // will likely want to be refactored one day.\n+            ver.push(\".0\");\n+            let p = path.join(ver).join(\"um\").join(extra);\n+            fs::metadata(&p).ok().map(|_| p)\n+        } else { None }\n     }\n \n     fn windows_sdk_v8_subdir(sess: &Session) -> Option<&'static str> {\n@@ -263,6 +282,16 @@ pub fn link_exe_cmd(sess: &Session) -> Command {\n         }\n     }\n \n+    fn windows_sdk_v10_subdir(sess: &Session) -> Option<&'static str> {\n+        match &sess.target.target.arch[..] {\n+            \"x86\" => Some(\"x86\"),\n+            \"x86_64\" => Some(\"x64\"),\n+            \"arm\" => Some(\"arm\"),\n+            \"aarch64\" => Some(\"arm64\"), // FIXME - Check if aarch64 is correct\n+            _ => return None,\n+        }\n+    }\n+\n     fn ucrt_install_dir(vs_install_dir: &Path) -> Option<(PathBuf, String)> {\n         let is_vs_14 = vs_install_dir.iter().filter_map(|p| p.to_str()).any(|s| {\n             s == \"Microsoft Visual Studio 14.0\""}]}