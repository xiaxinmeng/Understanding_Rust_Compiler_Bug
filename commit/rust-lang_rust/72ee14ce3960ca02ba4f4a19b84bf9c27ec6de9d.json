{"sha": "72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d", "node_id": "C_kwDOAAsO6NoAKDcyZWUxNGNlMzk2MGNhMDJiYTRmNGExOWI4NGJmOWMyN2VjNmRlOWQ", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-01-18T09:47:31Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-01-19T09:40:54Z"}, "message": "Allow for more efficient sorting when exporting Unord collections.", "tree": {"sha": "90c247dc1f6e0f16661871f29398144e18a7d175", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c247dc1f6e0f16661871f29398144e18a7d175"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d", "html_url": "https://github.com/rust-lang/rust/commit/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d25731207e466fc20b00124a5aadd435d3b885", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d25731207e466fc20b00124a5aadd435d3b885", "html_url": "https://github.com/rust-lang/rust/commit/c3d25731207e466fc20b00124a5aadd435d3b885"}], "stats": {"total": 133, "additions": 99, "deletions": 34}, "files": [{"sha": "57a99e74c21ade04464f985e4623fa635e1fdddf", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d", "patch": "@@ -177,7 +177,7 @@ fn exported_symbols_provider_local(\n     //        Can we skip the later sorting?\n     let mut symbols: Vec<_> = tcx.with_stable_hashing_context(|hcx| {\n         tcx.reachable_non_generics(LOCAL_CRATE)\n-            .to_sorted(&hcx)\n+            .to_sorted(&hcx, true)\n             .into_iter()\n             .map(|(&def_id, &info)| (ExportedSymbol::NonGeneric(def_id), info))\n             .collect()"}, {"sha": "d29b49872741cffcd44de89840f9dc8a47c6eb6f", "filename": "compiler/rustc_data_structures/src/unord.rs", "status": "modified", "additions": 80, "deletions": 7, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs?ref=72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d", "patch": "@@ -14,7 +14,7 @@ use std::{\n \n use crate::{\n     fingerprint::Fingerprint,\n-    stable_hasher::{HashStable, StableHasher, ToStableHashKey},\n+    stable_hasher::{HashStable, StableHasher, StableOrd, ToStableHashKey},\n };\n \n /// `UnordItems` is the order-less version of `Iterator`. It only contains methods\n@@ -158,6 +158,7 @@ pub struct UnordSet<V: Eq + Hash> {\n }\n \n impl<V: Eq + Hash> Default for UnordSet<V> {\n+    #[inline]\n     fn default() -> Self {\n         Self { inner: FxHashSet::default() }\n     }\n@@ -207,6 +208,46 @@ impl<V: Eq + Hash> UnordSet<V> {\n         UnordItems(self.inner.into_iter())\n     }\n \n+    #[inline]\n+    pub fn to_sorted<HCX>(&self, hcx: &HCX, cache_sort_key: bool) -> Vec<&V>\n+    where\n+        V: ToStableHashKey<HCX>,\n+    {\n+        let mut items: Vec<&V> = self.inner.iter().collect();\n+        if cache_sort_key {\n+            items.sort_by_cached_key(|k| k.to_stable_hash_key(hcx));\n+        } else {\n+            items.sort_unstable_by_key(|k| k.to_stable_hash_key(hcx));\n+        }\n+\n+        items\n+    }\n+\n+    #[inline]\n+    pub fn to_sorted_stable_ord(&self) -> Vec<V>\n+    where\n+        V: Ord + StableOrd + Copy,\n+    {\n+        let mut items: Vec<V> = self.inner.iter().copied().collect();\n+        items.sort_unstable();\n+        items\n+    }\n+\n+    #[inline]\n+    pub fn into_sorted<HCX>(self, hcx: &HCX, cache_sort_key: bool) -> Vec<V>\n+    where\n+        V: ToStableHashKey<HCX>,\n+    {\n+        let mut items: Vec<V> = self.inner.into_iter().collect();\n+        if cache_sort_key {\n+            items.sort_by_cached_key(|k| k.to_stable_hash_key(hcx));\n+        } else {\n+            items.sort_unstable_by_key(|k| k.to_stable_hash_key(hcx));\n+        }\n+\n+        items\n+    }\n+\n     // We can safely extend this UnordSet from a set of unordered values because that\n     // won't expose the internal ordering anywhere.\n     #[inline]\n@@ -221,12 +262,14 @@ impl<V: Eq + Hash> UnordSet<V> {\n }\n \n impl<V: Hash + Eq> Extend<V> for UnordSet<V> {\n+    #[inline]\n     fn extend<T: IntoIterator<Item = V>>(&mut self, iter: T) {\n         self.inner.extend(iter)\n     }\n }\n \n impl<V: Hash + Eq> FromIterator<V> for UnordSet<V> {\n+    #[inline]\n     fn from_iter<T: IntoIterator<Item = V>>(iter: T) -> Self {\n         UnordSet { inner: FxHashSet::from_iter(iter) }\n     }\n@@ -254,24 +297,28 @@ pub struct UnordMap<K: Eq + Hash, V> {\n }\n \n impl<K: Eq + Hash, V> Default for UnordMap<K, V> {\n+    #[inline]\n     fn default() -> Self {\n         Self { inner: FxHashMap::default() }\n     }\n }\n \n impl<K: Hash + Eq, V> Extend<(K, V)> for UnordMap<K, V> {\n+    #[inline]\n     fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {\n         self.inner.extend(iter)\n     }\n }\n \n impl<K: Hash + Eq, V> FromIterator<(K, V)> for UnordMap<K, V> {\n+    #[inline]\n     fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> Self {\n         UnordMap { inner: FxHashMap::from_iter(iter) }\n     }\n }\n \n impl<K: Hash + Eq, V, I: Iterator<Item = (K, V)>> From<UnordItems<(K, V), I>> for UnordMap<K, V> {\n+    #[inline]\n     fn from(items: UnordItems<(K, V), I>) -> Self {\n         UnordMap { inner: FxHashMap::from_iter(items.0) }\n     }\n@@ -351,30 +398,56 @@ impl<K: Eq + Hash, V> UnordMap<K, V> {\n         self.inner.extend(items.0)\n     }\n \n-    pub fn to_sorted<HCX>(&self, hcx: &HCX) -> Vec<(&K, &V)>\n+    #[inline]\n+    pub fn to_sorted<HCX>(&self, hcx: &HCX, cache_sort_key: bool) -> Vec<(&K, &V)>\n     where\n         K: ToStableHashKey<HCX>,\n     {\n         let mut items: Vec<(&K, &V)> = self.inner.iter().collect();\n-        items.sort_by_cached_key(|(k, _)| k.to_stable_hash_key(hcx));\n+        if cache_sort_key {\n+            items.sort_by_cached_key(|(k, _)| k.to_stable_hash_key(hcx));\n+        } else {\n+            items.sort_unstable_by_key(|(k, _)| k.to_stable_hash_key(hcx));\n+        }\n+\n         items\n     }\n \n-    pub fn into_sorted<HCX>(self, hcx: &HCX) -> Vec<(K, V)>\n+    #[inline]\n+    pub fn to_sorted_stable_ord(&self) -> Vec<(K, &V)>\n+    where\n+        K: Ord + StableOrd + Copy,\n+    {\n+        let mut items: Vec<(K, &V)> = self.inner.iter().map(|(&k, v)| (k, v)).collect();\n+        items.sort_unstable_by_key(|&(k, _)| k);\n+        items\n+    }\n+\n+    #[inline]\n+    pub fn into_sorted<HCX>(self, hcx: &HCX, cache_sort_key: bool) -> Vec<(K, V)>\n     where\n         K: ToStableHashKey<HCX>,\n     {\n         let mut items: Vec<(K, V)> = self.inner.into_iter().collect();\n-        items.sort_by_cached_key(|(k, _)| k.to_stable_hash_key(hcx));\n+        if cache_sort_key {\n+            items.sort_by_cached_key(|(k, _)| k.to_stable_hash_key(hcx));\n+        } else {\n+            items.sort_unstable_by_key(|(k, _)| k.to_stable_hash_key(hcx));\n+        }\n         items\n     }\n \n-    pub fn values_sorted<HCX>(&self, hcx: &HCX) -> impl Iterator<Item = &V>\n+    #[inline]\n+    pub fn values_sorted<HCX>(&self, hcx: &HCX, cache_sort_key: bool) -> impl Iterator<Item = &V>\n     where\n         K: ToStableHashKey<HCX>,\n     {\n         let mut items: Vec<(&K, &V)> = self.inner.iter().collect();\n-        items.sort_by_cached_key(|(k, _)| k.to_stable_hash_key(hcx));\n+        if cache_sort_key {\n+            items.sort_by_cached_key(|(k, _)| k.to_stable_hash_key(hcx));\n+        } else {\n+            items.sort_unstable_by_key(|(k, _)| k.to_stable_hash_key(hcx));\n+        }\n         items.into_iter().map(|(_, v)| v)\n     }\n }"}, {"sha": "250f4cd3f65fbf4c857e3b3366fa56148f699f54", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d", "patch": "@@ -19,7 +19,6 @@ use rustc_middle::ty::TypeckResults;\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use smallvec::SmallVec;\n \n use std::mem;\n use std::ops::ControlFlow;\n@@ -450,9 +449,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         let common_hir_owner = fcx_typeck_results.hir_owner;\n \n         let fcx_closure_kind_origins =\n-            fcx_typeck_results.closure_kind_origins().items_in_stable_order(self.tcx());\n+            fcx_typeck_results.closure_kind_origins().items_in_stable_order();\n \n-        for (&local_id, origin) in fcx_closure_kind_origins {\n+        for (local_id, origin) in fcx_closure_kind_origins {\n             let hir_id = hir::HirId { owner: common_hir_owner, local_id };\n             let place_span = origin.0;\n             let place = self.resolve(origin.1.clone(), &place_span);\n@@ -465,14 +464,10 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n         assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);\n \n-        self.tcx().with_stable_hashing_context(|hcx| {\n-            let fcx_coercion_casts: SmallVec<[_; 32]> =\n-                fcx_typeck_results.coercion_casts().items().cloned().into_sorted_small_vec(&hcx);\n-\n-            for local_id in fcx_coercion_casts {\n-                self.typeck_results.set_coercion_cast(local_id);\n-            }\n-        });\n+        let fcx_coercion_casts = fcx_typeck_results.coercion_casts().to_sorted_stable_ord();\n+        for local_id in fcx_coercion_casts {\n+            self.typeck_results.set_coercion_cast(local_id);\n+        }\n     }\n \n     fn visit_user_provided_tys(&mut self) {\n@@ -482,10 +477,10 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n         if self.rustc_dump_user_substs {\n             let sorted_user_provided_types =\n-                fcx_typeck_results.user_provided_types().items_in_stable_order(self.tcx());\n+                fcx_typeck_results.user_provided_types().items_in_stable_order();\n \n             let mut errors_buffer = Vec::new();\n-            for (&local_id, c_ty) in sorted_user_provided_types {\n+            for (local_id, c_ty) in sorted_user_provided_types {\n                 let hir_id = hir::HirId { owner: common_hir_owner, local_id };\n \n                 if let ty::UserType::TypeOf(_, user_substs) = c_ty.value {\n@@ -661,10 +656,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);\n         let common_hir_owner = fcx_typeck_results.hir_owner;\n \n-        let fcx_liberated_fn_sigs =\n-            fcx_typeck_results.liberated_fn_sigs().items_in_stable_order(self.tcx());\n+        let fcx_liberated_fn_sigs = fcx_typeck_results.liberated_fn_sigs().items_in_stable_order();\n \n-        for (&local_id, &fn_sig) in fcx_liberated_fn_sigs {\n+        for (local_id, &fn_sig) in fcx_liberated_fn_sigs {\n             let hir_id = hir::HirId { owner: common_hir_owner, local_id };\n             let fn_sig = self.resolve(fn_sig, &hir_id);\n             self.typeck_results.liberated_fn_sigs_mut().insert(hir_id, fn_sig);\n@@ -676,10 +670,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);\n         let common_hir_owner = fcx_typeck_results.hir_owner;\n \n-        let fcx_fru_field_types =\n-            fcx_typeck_results.fru_field_types().items_in_stable_order(self.tcx());\n+        let fcx_fru_field_types = fcx_typeck_results.fru_field_types().items_in_stable_order();\n \n-        for (&local_id, ftys) in fcx_fru_field_types {\n+        for (local_id, ftys) in fcx_fru_field_types {\n             let hir_id = hir::HirId { owner: common_hir_owner, local_id };\n             let ftys = self.resolve(ftys.clone(), &hir_id);\n             self.typeck_results.fru_field_types_mut().insert(hir_id, ftys);"}, {"sha": "5b6f327c5c2c0ab953656bc1b77206d36596550c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d", "patch": "@@ -1188,7 +1188,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n         }\n         let inherent_impls = tcx.with_stable_hashing_context(|hcx| {\n-            tcx.crate_inherent_impls(()).inherent_impls.to_sorted(&hcx)\n+            tcx.crate_inherent_impls(()).inherent_impls.to_sorted(&hcx, true)\n         });\n \n         for (def_id, implementations) in inherent_impls {"}, {"sha": "2902c6dc556e4140594243d2507e011055bab13a", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d", "patch": "@@ -27,7 +27,7 @@ use rustc_session::Session;\n use rustc_span::Span;\n use std::{collections::hash_map::Entry, hash::Hash, iter};\n \n-use super::{RvalueScopes, TyCtxt};\n+use super::RvalueScopes;\n \n #[derive(TyEncodable, TyDecodable, Debug, HashStable)]\n pub struct TypeckResults<'tcx> {\n@@ -575,9 +575,8 @@ impl<'a, V> LocalTableInContext<'a, V> {\n         self.data.items().map(|(id, value)| (*id, value))\n     }\n \n-    #[allow(rustc::pass_by_value)]\n-    pub fn items_in_stable_order(&self, tcx: TyCtxt<'_>) -> Vec<(&'a ItemLocalId, &'a V)> {\n-        tcx.with_stable_hashing_context(|hcx| self.data.to_sorted(&hcx))\n+    pub fn items_in_stable_order(&self) -> Vec<(ItemLocalId, &'a V)> {\n+        self.data.to_sorted_stable_ord()\n     }\n }\n "}, {"sha": "e9b2e31a769ad5a216a3375d9be6a52f9e4f2e24", "filename": "src/tools/clippy/clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs?ref=72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n \n         let inherent_impls = cx\n             .tcx\n-            .with_stable_hashing_context(|hcx| cx.tcx.crate_inherent_impls(()).inherent_impls.to_sorted(&hcx));\n+            .with_stable_hashing_context(|hcx| cx.tcx.crate_inherent_impls(()).inherent_impls.to_sorted(&hcx, true));\n \n         for (_, impl_ids) in inherent_impls.into_iter().filter(|(&id, impls)| {\n             impls.len() > 1"}, {"sha": "3371b4cce32c1fa265b21ab0c207c6d5d8742a99", "filename": "src/tools/clippy/clippy_lints/src/missing_trait_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_trait_methods.rs?ref=72ee14ce3960ca02ba4f4a19b84bf9c27ec6de9d", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingTraitMethods {\n             }\n \n             cx.tcx.with_stable_hashing_context(|hcx| {\n-                for assoc in provided.values_sorted(&hcx) {\n+                for assoc in provided.values_sorted(&hcx, true) {\n                     let source_map = cx.tcx.sess.source_map();\n                     let definition_span = source_map.guess_head_span(cx.tcx.def_span(assoc.def_id));\n "}]}