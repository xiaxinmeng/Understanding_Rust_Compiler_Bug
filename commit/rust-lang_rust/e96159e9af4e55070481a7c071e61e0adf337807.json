{"sha": "e96159e9af4e55070481a7c071e61e0adf337807", "node_id": "C_kwDOAAsO6NoAKGU5NjE1OWU5YWY0ZTU1MDcwNDgxYTdjMDcxZTYxZTBhZGYzMzc4MDc", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-01-27T19:50:58Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-01-27T19:50:58Z"}, "message": "pub use std::simd::StdFloat;\n\nMake available the remaining float intrinsics that require runtime support\nfrom a platform's libm, and thus cannot be included in a no-deps libcore,\nby exposing them through a sealed trait, `std::simd::StdFloat`.\n\nWe might use the trait approach a bit more in the future, or maybe not.\nIdeally, this trait doesn't stick around, even if so.\nIf we don't need to intermesh it with std, it can be used as a crate,\nbut currently that is somewhat uncertain.", "tree": {"sha": "fbfbc641183d7daacc3e8164d731b7c1c7eb26da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbfbc641183d7daacc3e8164d731b7c1c7eb26da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e96159e9af4e55070481a7c071e61e0adf337807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e96159e9af4e55070481a7c071e61e0adf337807", "html_url": "https://github.com/rust-lang/rust/commit/e96159e9af4e55070481a7c071e61e0adf337807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e96159e9af4e55070481a7c071e61e0adf337807/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cde7bdc678c52efd16baead2c9cb8eb3bf8be854", "url": "https://api.github.com/repos/rust-lang/rust/commits/cde7bdc678c52efd16baead2c9cb8eb3bf8be854", "html_url": "https://github.com/rust-lang/rust/commit/cde7bdc678c52efd16baead2c9cb8eb3bf8be854"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "159b5027455ae63e0ef57015002b195373a2d628", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e96159e9af4e55070481a7c071e61e0adf337807/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96159e9af4e55070481a7c071e61e0adf337807/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e96159e9af4e55070481a7c071e61e0adf337807", "patch": "@@ -313,6 +313,7 @@\n #![feature(panic_internals)]\n #![feature(panic_unwind)]\n #![feature(pin_static_ref)]\n+#![feature(platform_intrinsics)]\n #![feature(portable_simd)]\n #![feature(prelude_import)]\n #![feature(ptr_as_uninit)]\n@@ -465,8 +466,6 @@ pub use core::pin;\n pub use core::ptr;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::result;\n-#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-pub use core::simd;\n #[unstable(feature = \"async_stream\", issue = \"79024\")]\n pub use core::stream;\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n@@ -513,6 +512,25 @@ pub mod time;\n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n pub mod lazy;\n \n+// Pull in `std_float` crate  into libstd. The contents of\n+// `std_float` are in a different repository: rust-lang/portable-simd.\n+#[path = \"../../portable-simd/crates/std_float/src/lib.rs\"]\n+#[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n+#[allow(rustdoc::bare_urls)]\n+#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n+#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n+mod std_float;\n+\n+#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n+#[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n+#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n+pub mod simd {\n+    #[doc(inline)]\n+    pub use crate::std_float::StdFloat;\n+    #[doc(inline)]\n+    pub use core::simd::*;\n+}\n+\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub mod task {\n     //! Types and Traits for working with asynchronous tasks."}, {"sha": "6a844e7120e79ae72a482c97ea83460d3536c022", "filename": "src/test/ui/simd/libm_std_can_float.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e96159e9af4e55070481a7c071e61e0adf337807/src%2Ftest%2Fui%2Fsimd%2Flibm_std_can_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96159e9af4e55070481a7c071e61e0adf337807/src%2Ftest%2Fui%2Fsimd%2Flibm_std_can_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Flibm_std_can_float.rs?ref=e96159e9af4e55070481a7c071e61e0adf337807", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+// This is the converse of the other libm test.\n+#![feature(portable_simd)]\n+use std::simd::f32x4;\n+use std::simd::StdFloat;\n+\n+// For SIMD float ops, the LLIR version which is used to implement the portable\n+// forms of them may become calls to math.h AKA libm. So, we can't guarantee\n+// we can compile them for #![no_std] crates.\n+//\n+// However, we can expose some of these ops via an extension trait.\n+fn main() {\n+    let x = f32x4::from_array([0.1, 0.5, 0.6, -1.5]);\n+    let x2 = x + x;\n+    let _xc = x.ceil();\n+    let _xf = x.floor();\n+    let _xr = x.round();\n+    let _xt = x.trunc();\n+    let _xfma = x.mul_add(x, x);\n+    let _xsqrt = x.sqrt();\n+    let _ = x2.abs() * x2;\n+}"}, {"sha": "667c8b67b1d468e597855b561d83f793777f3901", "filename": "src/test/ui/simd/portable-intrinsics-arent-exposed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e96159e9af4e55070481a7c071e61e0adf337807/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96159e9af4e55070481a7c071e61e0adf337807/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.rs?ref=e96159e9af4e55070481a7c071e61e0adf337807", "patch": "@@ -1,7 +1,8 @@\n // May not matter, since people can use them with a nightly feature.\n // However this tests to guarantee they don't leak out via portable_simd,\n // and thus don't accidentally get stabilized.\n-use std::simd::intrinsics; //~ERROR E0603\n+use core::simd::intrinsics; //~ERROR E0433\n+use std::simd::intrinsics; //~ERROR E0432\n \n fn main() {\n     ()"}, {"sha": "f568aa04295257a4aa3edbe5b90c9322d5ec352a", "filename": "src/test/ui/simd/portable-intrinsics-arent-exposed.stderr", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e96159e9af4e55070481a7c071e61e0adf337807/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96159e9af4e55070481a7c071e61e0adf337807/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr?ref=e96159e9af4e55070481a7c071e61e0adf337807", "patch": "@@ -1,15 +1,16 @@\n-error[E0603]: module `intrinsics` is private\n-  --> $DIR/portable-intrinsics-arent-exposed.rs:4:16\n+error[E0433]: failed to resolve: maybe a missing crate `core`?\n+  --> $DIR/portable-intrinsics-arent-exposed.rs:4:5\n    |\n-LL | use std::simd::intrinsics;\n-   |                ^^^^^^^^^^ private module\n-   |\n-note: the module `intrinsics` is defined here\n-  --> $SRC_DIR/core/src/lib.rs:LL:COL\n+LL | use core::simd::intrinsics;\n+   |     ^^^^ maybe a missing crate `core`?\n+\n+error[E0432]: unresolved import `std::simd::intrinsics`\n+  --> $DIR/portable-intrinsics-arent-exposed.rs:5:5\n    |\n-LL |     pub use crate::core_simd::simd::*;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | use std::simd::intrinsics;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ no `intrinsics` in `simd`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0603`.\n+Some errors have detailed explanations: E0432, E0433.\n+For more information about an error, try `rustc --explain E0432`."}]}