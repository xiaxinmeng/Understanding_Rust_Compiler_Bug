{"sha": "76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YTNiNjA5ZDBiOTNjNWQ4ZGE1ZTRlM2RiMzdiZDAzZTVjYjFjMzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-25T21:41:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-25T21:41:57Z"}, "message": "Rustdoc accessibility: use real headers for doc items\n\nPart of #87059\n\nPartially reverts #84703\n\nPreview at: https://notriddle.com/notriddle-rustdoc-test/real-headers/std/index.html", "tree": {"sha": "cbdb085960c1960f952ed572e1dc9bf497f12146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbdb085960c1960f952ed572e1dc9bf497f12146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "html_url": "https://github.com/rust-lang/rust/commit/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e742158ef5483b9cd756b193402329af3d4ba177", "url": "https://api.github.com/repos/rust-lang/rust/commits/e742158ef5483b9cd756b193402329af3d4ba177", "html_url": "https://github.com/rust-lang/rust/commit/e742158ef5483b9cd756b193402329af3d4ba177"}], "stats": {"total": 449, "additions": 231, "deletions": 218}, "files": [{"sha": "2b7f7aa3691bdc476259a98b806c1aca07b0ca1f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -1194,7 +1194,7 @@ fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n                     if out.is_empty() {\n                         write!(\n                             &mut out,\n-                            \"<h3 class=\\\"notable\\\">Notable traits for {}</h3>\\\n+                            \"<div class=\\\"notable\\\">Notable traits for {}</div>\\\n                              <code class=\\\"content\\\">\",\n                             impl_.for_.print(cx)\n                         );\n@@ -1350,15 +1350,15 @@ fn render_impl(\n                     );\n                     render_rightside(w, cx, item, containing_item);\n                     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                    w.write_str(\"<code>\");\n+                    w.write_str(\"<h4 class=\\\"code-header\\\">\");\n                     render_assoc_item(\n                         w,\n                         item,\n                         link.anchor(source_id.as_ref().unwrap_or(&id)),\n                         ItemType::Impl,\n                         cx,\n                     );\n-                    w.write_str(\"</code>\");\n+                    w.write_str(\"</h4>\");\n                     w.write_str(\"</div>\");\n                 }\n             }\n@@ -1371,7 +1371,7 @@ fn render_impl(\n                     id, item_type, in_trait_class\n                 );\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                w.write_str(\"<code>\");\n+                w.write_str(\"<h4 class=\\\"code-header\\\">\");\n                 assoc_type(\n                     w,\n                     item,\n@@ -1381,7 +1381,7 @@ fn render_impl(\n                     \"\",\n                     cx,\n                 );\n-                w.write_str(\"</code>\");\n+                w.write_str(\"</h4>\");\n                 w.write_str(\"</div>\");\n             }\n             clean::AssocConstItem(ref ty, ref default) => {\n@@ -1394,7 +1394,7 @@ fn render_impl(\n                 );\n                 render_rightside(w, cx, item, containing_item);\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                w.write_str(\"<code>\");\n+                w.write_str(\"<h4 class=\\\"code-header\\\">\");\n                 assoc_const(\n                     w,\n                     item,\n@@ -1404,15 +1404,15 @@ fn render_impl(\n                     \"\",\n                     cx,\n                 );\n-                w.write_str(\"</code>\");\n+                w.write_str(\"</h4>\");\n                 w.write_str(\"</div>\");\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n                 write!(w, \"<div id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class,);\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                w.write_str(\"<code>\");\n+                w.write_str(\"<h4 class=\\\"code-header\\\">\");\n                 assoc_type(\n                     w,\n                     item,\n@@ -1422,7 +1422,7 @@ fn render_impl(\n                     \"\",\n                     cx,\n                 );\n-                w.write_str(\"</code>\");\n+                w.write_str(\"</h4>\");\n                 w.write_str(\"</div>\");\n             }\n             clean::StrippedItem(..) => return,\n@@ -1613,7 +1613,7 @@ pub(crate) fn render_impl_summary(\n     write!(w, \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n     render_rightside(w, cx, &i.impl_item, containing_item);\n     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-    write!(w, \"<code class=\\\"in-band\\\">\");\n+    write!(w, \"<h3 class=\\\"code-header in-band\\\">\");\n \n     if let Some(use_absolute) = use_absolute {\n         write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n@@ -1629,7 +1629,7 @@ pub(crate) fn render_impl_summary(\n     } else {\n         write!(w, \"{}\", i.inner_impl().print(false, cx));\n     }\n-    write!(w, \"</code>\");\n+    write!(w, \"</h3>\");\n \n     let is_trait = i.inner_impl().trait_.is_some();\n     if is_trait {"}, {"sha": "50793acbbf0f1b682f1b2a658da9678d294521f6", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -621,9 +621,9 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         render_stability_since(w, m, t, cx.tcx());\n         write_srclink(cx, m, w);\n         write!(w, \"</div>\");\n-        write!(w, \"<code>\");\n+        write!(w, \"<h4 class=\\\"code-header\\\">\");\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl, cx);\n-        w.write_str(\"</code>\");\n+        w.write_str(\"</h4>\");\n         w.write_str(\"</div>\");\n         if toggled {\n             write!(w, \"</summary>\");"}, {"sha": "f124d7aec6c1ececc2d992949a0aa9c796c8a2c7", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -146,6 +146,13 @@ h1.fqn > .in-band > a:hover {\n h2, h3, h4 {\n \tborder-bottom: 1px solid;\n }\n+h3.code-header, h4.code-header {\n+\tfont-size: 1em;\n+\tfont-weight: 600;\n+\tborder: none;\n+\tpadding: 0;\n+\tmargin: 0;\n+}\n .impl,\n .impl-items .method,\n .methods .method,\n@@ -233,7 +240,7 @@ details:not(.rustdoc-toggle) summary {\n \tmargin-bottom: .6em;\n }\n \n-code, pre, a.test-arrow {\n+code, pre, a.test-arrow, .code-header {\n \tfont-family: \"Source Code Pro\", monospace;\n }\n .docblock code, .docblock-short code {\n@@ -520,7 +527,7 @@ nav.sub {\n \tfont-weight: normal;\n }\n \n-.method > code, .trait-impl > code, .invisible > code {\n+.method > .code-header, .trait-impl > .code-header, .invisible > .code-header {\n \tmax-width: calc(100% - 41px);\n \tdisplay: block;\n }\n@@ -536,7 +543,7 @@ nav.sub {\n \tpadding: 0px;\n }\n \n-.in-band > code {\n+.in-band > code, .in-band > .code-header {\n \tdisplay: inline-block;\n }\n \n@@ -742,7 +749,7 @@ a {\n }\n \n .invisible > .srclink,\n-.method > code + .srclink {\n+.method > .code-header + .srclink {\n \tposition: absolute;\n \ttop: 0;\n \tright: 0;\n@@ -1103,7 +1110,7 @@ a.test-arrow:hover{\n \tleft: -10px;\n }\n \n-:target > code {\n+:target > code, :target > .code-header {\n \topacity: 1;\n }\n "}, {"sha": "df386fb66a33f4c9d309d03e97ba441fa062b59e", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -334,7 +334,7 @@ a.test-arrow:hover {\n \tcolor: #999;\n }\n \n-:target, :target * {\n+:target, :target > * {\n \tbackground: rgba(255, 236, 164, 0.06);\n }\n "}, {"sha": "c8a5dbdc66aaf98832a0f07e6d7fb0b46994db7b", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -282,7 +282,7 @@ a.test-arrow:hover{\n \tcolor: #999;\n }\n \n-:target, :target * {\n+:target, :target > * {\n \tbackground-color: #494a3d;\n }\n "}, {"sha": "bc18a72450896eb5044d951a4f5dcad686bc0c17", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -274,7 +274,7 @@ a.test-arrow:hover{\n \tcolor: #999;\n }\n \n-:target, :target * {\n+:target, :target > * {\n \tbackground: #FDFFD3;\n }\n "}, {"sha": "869aff5376649da4d57bc01304c0aa6f72641b8c", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -706,8 +706,9 @@ function hideThemeButtonState() {\n                     }\n                 }\n \n-                var code = document.createElement(\"code\");\n+                var code = document.createElement(\"h3\");\n                 code.innerHTML = struct.text;\n+                addClass(code, \"code-header\");\n                 addClass(code, \"in-band\");\n \n                 onEachLazy(code.getElementsByTagName(\"a\"), function(elem) {"}, {"sha": "92ad92a8c34155320f488a76b382d9af08a571a2", "filename": "src/test/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -2,9 +2,9 @@ goto: file://|DOC_PATH|/lib2/struct.Foo.html\n // This test checks that the font weight is correctly applied.\n assert-css: (\"//*[@class='docblock type-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n assert-css: (\"//*[@class='structfield small-section-header']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n-assert-css: (\"#method\\.a_method > code\", {\"font-weight\": \"600\"})\n-assert-css: (\"#associatedtype\\.X > code\", {\"font-weight\": \"600\"})\n-assert-css: (\"#associatedconstant\\.Y > code\", {\"font-weight\": \"600\"})\n+assert-css: (\"#method\\.a_method > .code-header\", {\"font-weight\": \"600\"})\n+assert-css: (\"#associatedtype\\.X > .code-header\", {\"font-weight\": \"600\"})\n+assert-css: (\"#associatedconstant\\.Y > .code-header\", {\"font-weight\": \"600\"})\n \n goto: file://|DOC_PATH|/test_docs/type.SomeType.html\n assert-css: (\".top-doc .docblock p\", {\"font-weight\": \"400\"}, ALL)"}, {"sha": "87e4f2a7bd141d158b8ce9e42637a922d244475e", "filename": "src/test/rustdoc-gui/implementors.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -8,9 +8,9 @@ assert-count: (\"#implementors-list > .impl\", 2)\n assert: (\"#implementors-list > .impl:nth-child(1) > a.anchor\")\n assert-attribute: (\"#implementors-list > .impl:nth-child(1)\", {\"id\": \"impl-Whatever\"})\n assert-attribute: (\"#implementors-list > .impl:nth-child(1) > a.anchor\", {\"href\": \"#impl-Whatever\"})\n-assert: \"#implementors-list > .impl:nth-child(1) > code.in-band\"\n+assert: \"#implementors-list > .impl:nth-child(1) > .code-header.in-band\"\n \n assert: (\"#implementors-list > .impl:nth-child(2) > a.anchor\")\n assert-attribute: (\"#implementors-list > .impl:nth-child(2)\", {\"id\": \"impl-Whatever-1\"})\n assert-attribute: (\"#implementors-list > .impl:nth-child(2) > a.anchor\", {\"href\": \"#impl-Whatever-1\"})\n-assert: \"#implementors-list > .impl:nth-child(2) > code.in-band\"\n+assert: \"#implementors-list > .impl:nth-child(2) > .code-header.in-band\""}, {"sha": "ff7fd66391628a4f8707295d851b2511733376f0", "filename": "src/test/rustdoc/assoc-consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-consts.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -13,7 +13,7 @@ pub trait Foo {\n pub struct Bar;\n \n impl Foo for Bar {\n-    // @has assoc_consts/struct.Bar.html '//code' 'impl Foo for Bar'\n+    // @has assoc_consts/struct.Bar.html '//h3[@class=\"code-header in-band\"]' 'impl Foo for Bar'\n     // @has - '//*[@id=\"associatedconstant.FOO\"]' 'const FOO: usize'\n     const FOO: usize = 12;\n     // @has - '//*[@id=\"associatedconstant.FOO_NO_DEFAULT\"]' 'const FOO_NO_DEFAULT: bool'\n@@ -77,7 +77,7 @@ pub trait Qux {\n     const QUX_DEFAULT2: u32 = 3;\n }\n \n-// @has assoc_consts/struct.Bar.html '//code' 'impl Qux for Bar'\n+// @has assoc_consts/struct.Bar.html '//h3[@class=\"code-header in-band\"]' 'impl Qux for Bar'\n impl Qux for Bar {\n     // @has - '//*[@id=\"associatedconstant.QUX0\"]' 'const QUX0: u8'\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX0 in trait.\""}, {"sha": "d9e4ffab1c7d50434ba02f00e143170bf409e93f", "filename": "src/test/rustdoc/assoc-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-types.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -2,11 +2,11 @@\n \n // @has assoc_types/trait.Index.html\n pub trait Index<I: ?Sized> {\n-    // @has - '//*[@id=\"associatedtype.Output\"]//code' 'type Output: ?Sized'\n+        // @has - '//*[@id=\"associatedtype.Output\"]//h4[@class=\"code-header\"]' 'type Output: ?Sized'\n     type Output: ?Sized;\n-    // @has - '//*[@id=\"tymethod.index\"]//code' \\\n+    // @has - '//*[@id=\"tymethod.index\"]//h4[@class=\"code-header\"]' \\\n     //      \"fn index<'a>(&'a self, index: I) -> &'a Self::Output\"\n-    // @has - '//*[@id=\"tymethod.index\"]//code//a[@href=\"trait.Index.html#associatedtype.Output\"]' \\\n+    // @has - '//*[@id=\"tymethod.index\"]//h4[@class=\"code-header\"]//a[@href=\"trait.Index.html#associatedtype.Output\"]' \\\n     //      \"Output\"\n     fn index<'a>(&'a self, index: I) -> &'a Self::Output;\n }"}, {"sha": "6d85171edf784f805bbe5a88f395307f9ccdca90", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -35,9 +35,9 @@ pub async fn quux() -> impl Bar {\n }\n \n // @has async_fn/struct.Foo.html\n-// @matches - '//code' 'pub async fn f\\(\\)$'\n-// @matches - '//code' 'pub async unsafe fn g\\(\\)$'\n-// @matches - '//code' 'pub async fn mut_self\\(self, first: usize\\)$'\n+// @matches - '//h4[@class=\"code-header\"]' 'pub async fn f\\(\\)$'\n+// @matches - '//h4[@class=\"code-header\"]' 'pub async unsafe fn g\\(\\)$'\n+// @matches - '//h4[@class=\"code-header\"]' 'pub async fn mut_self\\(self, first: usize\\)$'\n pub struct Foo;\n \n impl Foo {"}, {"sha": "b934d84a9f616e290036907b4ad620e19c41ddb7", "filename": "src/test/rustdoc/blanket-reexport-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fblanket-reexport-item.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/struct.S.html '//div[@id=\"impl-Into%3CU%3E\"]//code' 'impl<T, U> Into<U> for T'\n+// @has foo/struct.S.html '//div[@id=\"impl-Into%3CU%3E\"]//h3[@class=\"code-header in-band\"]' 'impl<T, U> Into<U> for T'\n pub struct S2 {}\n mod m {\n     pub struct S {}"}, {"sha": "fb8ea7e33c28ce2f419bd60d7eee6ca6b770616d", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -49,19 +49,19 @@ pub const unsafe fn bar_not_gated() -> u32 { 42 }\n pub struct Foo;\n \n impl Foo {\n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated\"]/code' 'pub fn gated() -> u32'\n+    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated\"]/h4[@class=\"code-header\"]' 'pub fn gated() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n     pub const fn gated() -> u32 { 42 }\n \n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated_unsafe\"]/code' 'pub unsafe fn gated_unsafe() -> u32'\n+    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated_unsafe\"]/h4[@class=\"code-header\"]' 'pub unsafe fn gated_unsafe() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n     pub const unsafe fn gated_unsafe() -> u32 { 42 }\n \n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.stable_impl\"]/code' 'pub const fn stable_impl() -> u32'\n+    // @has 'foo/struct.Foo.html' '//div[@id=\"method.stable_impl\"]/h4[@class=\"code-header\"]' 'pub const fn stable_impl() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.2.0)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"rust1\", since = \"1.2.0\")]"}, {"sha": "123dbaa406b83eeb8fe5eba1ee6832736c4abdc5", "filename": "src/test/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -8,7 +8,7 @@ pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }\n \n-// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]//div/code' 'impl Add<Simd<u8, 16_usize>> for Simd<u8, 16>'\n+// @has foo/struct.Simd.html '//div[@id=\"trait-implementations-list\"]//div/h3[@class=\"code-header in-band\"]' 'impl Add<Simd<u8, 16_usize>> for Simd<u8, 16>'\n impl Add for Simd<u8, 16> {\n     type Output = Self;\n "}, {"sha": "92d2c4697e7edea020355356ed6f78308a48fb7f", "filename": "src/test/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -19,10 +19,10 @@ pub use extern_crate::WTrait;\n \n // @has foo/trait.Trait.html '//pre[@class=\"rust trait\"]' \\\n //      'pub trait Trait<const N: usize>'\n-// @has - '//*[@id=\"impl-Trait%3C1_usize%3E-for-u8\"]//code' 'impl Trait<1_usize> for u8'\n-// @has - '//*[@id=\"impl-Trait%3C2_usize%3E-for-u8\"]//code' 'impl Trait<2_usize> for u8'\n-// @has - '//*[@id=\"impl-Trait%3C{1%20+%202}%3E-for-u8\"]//code' 'impl Trait<{1 + 2}> for u8'\n-// @has - '//*[@id=\"impl-Trait%3CN%3E-for-%5Bu8%3B%20N%5D\"]//code' \\\n+// @has - '//*[@id=\"impl-Trait%3C1_usize%3E-for-u8\"]//h3[@class=\"code-header in-band\"]' 'impl Trait<1_usize> for u8'\n+// @has - '//*[@id=\"impl-Trait%3C2_usize%3E-for-u8\"]//h3[@class=\"code-header in-band\"]' 'impl Trait<2_usize> for u8'\n+// @has - '//*[@id=\"impl-Trait%3C{1%20+%202}%3E-for-u8\"]//h3[@class=\"code-header in-band\"]' 'impl Trait<{1 + 2}> for u8'\n+// @has - '//*[@id=\"impl-Trait%3CN%3E-for-%5Bu8%3B%20N%5D\"]//h3[@class=\"code-header in-band\"]' \\\n //      'impl<const N: usize> Trait<N> for [u8; N]'\n pub trait Trait<const N: usize> {}\n impl Trait<1> for u8 {}\n@@ -36,7 +36,7 @@ pub struct Foo<const N: usize> where u8: Trait<N>;\n // @has foo/struct.Bar.html '//pre[@class=\"rust struct\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);\n \n-// @has foo/struct.Foo.html '//div[@id=\"impl\"]/code' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n+// @has foo/struct.Foo.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n impl<const M: usize> Foo<M> where u8: Trait<M> {\n     // @has - '//*[@id=\"associatedconstant.FOO_ASSOC\"]' 'pub const FOO_ASSOC: usize'\n     pub const FOO_ASSOC: usize = M + 13;\n@@ -47,7 +47,7 @@ impl<const M: usize> Foo<M> where u8: Trait<M> {\n     }\n }\n \n-// @has foo/struct.Bar.html '//div[@id=\"impl\"]/code' 'impl<const M: usize> Bar<u8, M>'\n+// @has foo/struct.Bar.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Bar<u8, M>'\n impl<const M: usize> Bar<u8, M> {\n     // @has - '//*[@id=\"method.hey\"]' \\\n     //      'pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N>'"}, {"sha": "7ddcb3a29f28b21c7c44c9bebc1e53706d001897", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -9,20 +9,20 @@ pub enum Order {\n }\n \n // @has foo/struct.VSet.html '//pre[@class=\"rust struct\"]' 'pub struct VSet<T, const ORDER: Order>'\n-// @has foo/struct.VSet.html '//div[@id=\"impl-Send\"]/code' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n-// @has foo/struct.VSet.html '//div[@id=\"impl-Sync\"]/code' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//div[@id=\"impl-Send\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//div[@id=\"impl-Sync\"]/h3[@class=\"code-header in-band\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {\n     inner: Vec<T>,\n }\n \n-// @has foo/struct.VSet.html '//div[@id=\"impl\"]/code' 'impl<T> VSet<T, {Order::Sorted}>'\n+// @has foo/struct.VSet.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, {Order::Sorted}>'\n impl <T> VSet<T, {Order::Sorted}> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n     }\n }\n \n-// @has foo/struct.VSet.html '//div[@id=\"impl-1\"]/code' 'impl<T> VSet<T, {Order::Unsorted}>'\n+// @has foo/struct.VSet.html '//div[@id=\"impl-1\"]/h3[@class=\"code-header in-band\"]' 'impl<T> VSet<T, {Order::Unsorted}>'\n impl <T> VSet<T, {Order::Unsorted}> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n@@ -31,7 +31,7 @@ impl <T> VSet<T, {Order::Unsorted}> {\n \n pub struct Escape<const S: &'static str>;\n \n-// @has foo/struct.Escape.html '//div[@id=\"impl\"]/code' 'impl Escape<{ r#\"<script>alert(\"Escape\");</script>\"# }>'\n+// @has foo/struct.Escape.html '//div[@id=\"impl\"]/h3[@class=\"code-header in-band\"]' 'impl Escape<{ r#\"<script>alert(\"Escape\");</script>\"# }>'\n impl Escape<{ r#\"<script>alert(\"Escape\");</script>\"# }> {\n     pub fn f() {}\n }"}, {"sha": "f4c5dcc72259d3e6e6f4424e195a9aef6d799b68", "filename": "src/test/rustdoc/const-generics/lazy_normalization_consts/const-equate-pred.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -12,7 +12,7 @@ pub struct Hasher<T> {\n unsafe impl<T: Default> Send for Hasher<T> {}\n \n // @has foo/struct.Foo.html\n-// @has - '//code' 'impl Send for Foo'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Send for Foo'\n pub struct Foo {\n     hasher: Hasher<[u8; 3]>,\n }"}, {"sha": "587ad4db4782947836a50555d2a8bed8a4b5516f", "filename": "src/test/rustdoc/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -3,7 +3,7 @@\n pub struct Foo;\n \n impl Foo {\n-    // @has const/struct.Foo.html '//*[@id=\"method.new\"]//code' 'const unsafe fn new'\n+    // @has const/struct.Foo.html '//*[@id=\"method.new\"]//h4[@class=\"code-header\"]' 'const unsafe fn new'\n     pub const unsafe fn new() -> Foo {\n         Foo\n     }"}, {"sha": "7ace13fe3a6b56dce0f24d2bb9cd61ebad400992", "filename": "src/test/rustdoc/duplicate_impls/issue-33054.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -1,10 +1,10 @@\n // @has issue_33054/impls/struct.Foo.html\n-// @has - '//code' 'impl Foo'\n-// @has - '//code' 'impl Bar for Foo'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Foo'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for Foo'\n // @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n // @count - '//*[@id=\"main\"]/details/summary/*[@class=\"impl has-srclink\"]' 1\n // @has issue_33054/impls/bar/trait.Bar.html\n-// @has - '//code' 'impl Bar for Foo'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for Foo'\n // @count - '//*[@class=\"struct\"]' 1\n pub mod impls;\n "}, {"sha": "8ab026afd1b8dd4807c693ee22288da402c4b2b5", "filename": "src/test/rustdoc/extern-impl-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fextern-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fextern-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-impl-trait.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -4,8 +4,8 @@\n \n extern crate extern_impl_trait;\n \n-// @has 'foo/struct.X.html' '//code' \"impl Foo<Associated = ()> + 'a\"\n+// @has 'foo/struct.X.html' '//h4[@class=\"code-header\"]' \"impl Foo<Associated = ()> + 'a\"\n pub use extern_impl_trait::X;\n \n-// @has 'foo/struct.Y.html' '//code' \"impl ?Sized + Foo<Associated = ()> + 'a\"\n+// @has 'foo/struct.Y.html' '//h4[@class=\"code-header\"]' \"impl ?Sized + Foo<Associated = ()> + 'a\"\n pub use extern_impl_trait::Y;"}, {"sha": "f357d65df94beed593775e82b33c4910932bcaa1", "filename": "src/test/rustdoc/extern-impl.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fextern-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fextern-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-impl.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -4,24 +4,24 @@\n pub struct Foo;\n \n impl Foo {\n-    // @has - '//code' 'fn rust0()'\n+    // @has - '//h4[@class=\"code-header\"]' 'fn rust0()'\n     pub fn rust0() {}\n-    // @has - '//code' 'fn rust1()'\n+    // @has - '//h4[@class=\"code-header\"]' 'fn rust1()'\n     pub extern \"Rust\" fn rust1() {}\n-    // @has - '//code' 'extern \"C\" fn c0()'\n+    // @has - '//h4[@class=\"code-header\"]' 'extern \"C\" fn c0()'\n     pub extern fn c0() {}\n-    // @has - '//code' 'extern \"C\" fn c1()'\n+    // @has - '//h4[@class=\"code-header\"]' 'extern \"C\" fn c1()'\n     pub extern \"C\" fn c1() {}\n-    // @has - '//code' 'extern \"system\" fn system0()'\n+    // @has - '//h4[@class=\"code-header\"]' 'extern \"system\" fn system0()'\n     pub extern \"system\" fn system0() {}\n }\n \n // @has foo/trait.Bar.html\n pub trait Bar {}\n \n-// @has - '//code' 'impl Bar for fn()'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for fn()'\n impl Bar for fn() {}\n-// @has - '//code' 'impl Bar for extern \"C\" fn()'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for extern \"C\" fn()'\n impl Bar for extern fn() {}\n-// @has - '//code' 'impl Bar for extern \"system\" fn()'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Bar for extern \"system\" fn()'\n impl Bar for extern \"system\" fn() {}"}, {"sha": "9cf5fc190af0f390538b8e2f664127160e348ca5", "filename": "src/test/rustdoc/extern-method.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fextern-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fextern-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-method.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -6,14 +6,14 @@\n extern crate rustdoc_extern_method as foo;\n \n // @has extern_method/trait.Foo.html //pre \"pub trait Foo\"\n-// @has - '//*[@id=\"tymethod.foo\"]//code' 'extern \"rust-call\" fn foo'\n-// @has - '//*[@id=\"method.foo_\"]//code' 'extern \"rust-call\" fn foo_'\n+// @has - '//*[@id=\"tymethod.foo\"]//h4[@class=\"code-header\"]' 'extern \"rust-call\" fn foo'\n+// @has - '//*[@id=\"method.foo_\"]//h4[@class=\"code-header\"]' 'extern \"rust-call\" fn foo_'\n pub use foo::Foo;\n \n // @has extern_method/trait.Bar.html //pre \"pub trait Bar\"\n pub trait Bar {\n-    // @has - '//*[@id=\"tymethod.bar\"]//code' 'extern \"rust-call\" fn bar'\n+    // @has - '//*[@id=\"tymethod.bar\"]//h4[@class=\"code-header\"]' 'extern \"rust-call\" fn bar'\n     extern \"rust-call\" fn bar(&self, _: ());\n-    // @has - '//*[@id=\"method.bar_\"]//code' 'extern \"rust-call\" fn bar_'\n+    // @has - '//*[@id=\"method.bar_\"]//h4[@class=\"code-header\"]' 'extern \"rust-call\" fn bar_'\n     extern \"rust-call\" fn bar_(&self, _: ()) { }\n }"}, {"sha": "906316d2ebcc00799a62bc3cd75e1c338fbea089", "filename": "src/test/rustdoc/generic-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -2,10 +2,10 @@\n \n use std::fmt;\n \n-// @!has foo/struct.Bar.html '//div[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n+// @!has foo/struct.Bar.html '//div[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n pub struct Bar;\n \n-// @has foo/struct.Foo.html '//div[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n+// @has foo/struct.Foo.html '//div[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n pub struct Foo;\n // @has foo/struct.Foo.html '//div[@class=\"sidebar-links\"]/a[@href=\"#impl-ToString\"]' 'ToString'\n "}, {"sha": "b75b8de52f9cb6c3fab04e3a1dbf86caa7d4e019", "filename": "src/test/rustdoc/higher-ranked-trait-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -38,7 +38,7 @@ pub struct Foo<'a> {\n // @has - '//span[@id=\"structfield.some_trait\"]' \"some_trait: &'a dyn for<'b> Trait<'b>\"\n \n impl<'a> Foo<'a> {\n-    // @has - '//code' \"pub fn bar<T>() where T: Trait<'a>,\"\n+    // @has - '//h4[@class=\"code-header\"]' \"pub fn bar<T>() where T: Trait<'a>,\"\n     pub fn bar<T>()\n     where\n         T: Trait<'a>,\n@@ -49,7 +49,7 @@ impl<'a> Foo<'a> {\n // @has foo/trait.B.html\n pub trait B<'x> {}\n \n-// @has - '//code[@class=\"in-band\"]' \"impl<'a> B<'a> for dyn for<'b> Trait<'b>\"\n+// @has - '//h3[@class=\"code-header in-band\"]' \"impl<'a> B<'a> for dyn for<'b> Trait<'b>\"\n impl<'a> B<'a> for dyn for<'b> Trait<'b> {}\n \n // @has foo/struct.Bar.html"}, {"sha": "d1d39ccff328f8b02bf3610ad6175d3140ccc334", "filename": "src/test/rustdoc/impl-disambiguation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -4,13 +4,13 @@ pub trait Foo {}\n \n pub struct Bar<T> { field: T }\n \n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n //     \"impl Foo for Bar<u8>\"\n impl Foo for Bar<u8> {}\n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n //     \"impl Foo for Bar<u16>\"\n impl Foo for Bar<u16> {}\n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n //     \"impl<'a> Foo for &'a Bar<u8>\"\n impl<'a> Foo for &'a Bar<u8> {}\n \n@@ -22,9 +22,9 @@ pub mod mod2 {\n     pub enum Baz {}\n }\n \n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n //     \"impl Foo for foo::mod1::Baz\"\n impl Foo for mod1::Baz {}\n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n //     \"impl<'a> Foo for &'a foo::mod2::Baz\"\n impl<'a> Foo for &'a mod2::Baz {}"}, {"sha": "249158c1a1f89bca9a9f1b63f1da16c76785e388", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -5,8 +5,8 @@ pub auto trait AnAutoTrait {}\n \n pub struct Foo<T> { field: T }\n \n-// @has impl_parts/struct.Foo.html '//*[@class=\"impl has-srclink\"]//code' \\\n+// @has impl_parts/struct.Foo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n //     \"impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync,\"\n-// @has impl_parts/trait.AnAutoTrait.html '//*[@class=\"item-list\"]//code' \\\n+// @has impl_parts/trait.AnAutoTrait.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n //     \"impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync,\"\n impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync {}"}, {"sha": "ef615472b0e98a194a54433af0b32b00d70cd6f7", "filename": "src/test/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -31,8 +31,8 @@ pub use impl_trait_aux::func4;\n pub use impl_trait_aux::async_fn;\n \n // @has impl_trait/struct.Foo.html\n-// @has - '//*[@id=\"method.method\"]//code' \"pub fn method<'a>(_x: impl Clone + Into<Vec<u8, Global>> + 'a)\"\n-// @!has - '//*[@id=\"method.method\"]//code' 'where'\n+// @has - '//*[@id=\"method.method\"]//h4[@class=\"code-header\"]' \"pub fn method<'a>(_x: impl Clone + Into<Vec<u8, Global>> + 'a)\"\n+// @!has - '//*[@id=\"method.method\"]//h4[@class=\"code-header\"]' 'where'\n pub use impl_trait_aux::Foo;\n \n // @has impl_trait/struct.Bar.html"}, {"sha": "be8585dd16e175f5f1f8aafe2b503db94af2eff2", "filename": "src/test/rustdoc/inline_cross/issue-31948-1.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -5,22 +5,22 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948_1/struct.Wobble.html\n-// @has - '//*[@class=\"impl has-srclink\"]//code' 'Bark for'\n-// @has - '//*[@class=\"impl has-srclink\"]//code' 'Woof for'\n-// @!has - '//*[@class=\"impl\"]//code' 'Bar for'\n-// @!has - '//*[@class=\"impl\"]//code' 'Qux for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Bark for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Woof for'\n+// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header in-band\"]' 'Bar for'\n+// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header in-band\"]' 'Qux for'\n pub use rustdoc_nonreachable_impls::hidden::Wobble;\n \n // @has issue_31948_1/trait.Bark.html\n-// @has - '//code' 'for Foo'\n-// @has - '//code' 'for Wobble'\n-// @!has - '//code' 'for Wibble'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'for Foo'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'for Wobble'\n+// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wibble'\n pub use rustdoc_nonreachable_impls::Bark;\n \n // @has issue_31948_1/trait.Woof.html\n-// @has - '//code' 'for Foo'\n-// @has - '//code' 'for Wobble'\n-// @!has - '//code' 'for Wibble'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'for Foo'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'for Wobble'\n+// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wibble'\n pub use rustdoc_nonreachable_impls::Woof;\n \n // @!has issue_31948_1/trait.Bar.html"}, {"sha": "7aa994f19d6f141e5d0e05357a6635aeebdd627c", "filename": "src/test/rustdoc/inline_cross/issue-31948-2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -5,15 +5,15 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948_2/struct.Wobble.html\n-// @has - '//*[@class=\"impl has-srclink\"]//code' 'Qux for'\n-// @has - '//*[@class=\"impl has-srclink\"]//code' 'Bark for'\n-// @has - '//*[@class=\"impl has-srclink\"]//code' 'Woof for'\n-// @!has - '//*[@class=\"impl\"]//code' 'Bar for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Qux for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Bark for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Woof for'\n+// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header in-band\"]' 'Bar for'\n pub use rustdoc_nonreachable_impls::hidden::Wobble;\n \n // @has issue_31948_2/trait.Qux.html\n-// @has - '//code' 'for Foo'\n-// @has - '//code' 'for Wobble'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'for Foo'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'for Wobble'\n pub use rustdoc_nonreachable_impls::hidden::Qux;\n \n // @!has issue_31948_2/trait.Bar.html"}, {"sha": "7bf4110d32ac10f19fcceaa8c197db822b96cbac", "filename": "src/test/rustdoc/inline_cross/issue-31948.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -5,22 +5,22 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948/struct.Foo.html\n-// @has - '//*[@class=\"impl has-srclink\"]//code' 'Bark for'\n-// @has - '//*[@class=\"impl has-srclink\"]//code' 'Woof for'\n-// @!has - '//*[@class=\"impl has-srclink\"]//code' 'Bar for'\n-// @!has - '//*[@class=\"impl\"]//code' 'Qux for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Bark for'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Woof for'\n+// @!has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'Bar for'\n+// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header in-band\"]' 'Qux for'\n pub use rustdoc_nonreachable_impls::Foo;\n \n // @has issue_31948/trait.Bark.html\n-// @has - '//code' 'for Foo'\n-// @!has - '//code' 'for Wibble'\n-// @!has - '//code' 'for Wobble'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'for Foo'\n+// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wibble'\n+// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wobble'\n pub use rustdoc_nonreachable_impls::Bark;\n \n // @has issue_31948/trait.Woof.html\n-// @has - '//code' 'for Foo'\n-// @!has - '//code' 'for Wibble'\n-// @!has - '//code' 'for Wobble'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'for Foo'\n+// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wibble'\n+// @!has - '//h3[@class=\"code-header in-band\"]' 'for Wobble'\n pub use rustdoc_nonreachable_impls::Woof;\n \n // @!has issue_31948/trait.Bar.html"}, {"sha": "8052339a83b6d3bbad43065a416474e1c9a91c02", "filename": "src/test/rustdoc/inline_cross/issue-32881.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -5,7 +5,7 @@\n extern crate rustdoc_trait_object_impl;\n \n // @has issue_32881/trait.Bar.html\n-// @has - '//code' \"impl<'a> dyn Bar\"\n-// @has - '//code' \"impl<'a> Debug for dyn Bar\"\n+// @has - '//h3[@class=\"code-header in-band\"]' \"impl<'a> dyn Bar\"\n+// @has - '//h3[@class=\"code-header in-band\"]' \"impl<'a> Debug for dyn Bar\"\n \n pub use rustdoc_trait_object_impl::Bar;"}, {"sha": "c60859bbcea98662a9829379ed6aabceaadd09ca", "filename": "src/test/rustdoc/inline_cross/issue-33113.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -5,6 +5,6 @@\n extern crate bar;\n \n // @has issue_33113/trait.Bar.html\n-// @has - '//code' \"for &'a char\"\n-// @has - '//code' \"for Foo\"\n+// @has - '//h3[@class=\"code-header in-band\"]' \"for &'a char\"\n+// @has - '//h3[@class=\"code-header in-band\"]' \"for Foo\"\n pub use bar::Bar;"}, {"sha": "363c52a336e42043b7f0a8a7ff45082af29e9cba", "filename": "src/test/rustdoc/inline_cross/trait-vis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Ftrait-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_cross%2Ftrait-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Ftrait-vis.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -3,5 +3,5 @@\n extern crate inner;\n \n // @has trait_vis/struct.SomeStruct.html\n-// @has - '//code' 'impl Clone for SomeStruct'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Clone for SomeStruct'\n pub use inner::SomeStruct;"}, {"sha": "e7b08088f4032c92224d29ce5e7e17061952cbc0", "filename": "src/test/rustdoc/inline_local/trait-vis.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_local%2Ftrait-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Finline_local%2Ftrait-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Ftrait-vis.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -13,6 +13,6 @@ mod asdf {\n }\n \n // @has trait_vis/struct.SomeStruct.html\n-// @has - '//code' 'impl ThisTrait for SomeStruct'\n-// @!has - '//code' 'impl PrivateTrait for SomeStruct'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl ThisTrait for SomeStruct'\n+// @!has - '//h3[@class=\"code-header in-band\"]' 'impl PrivateTrait for SomeStruct'\n pub use asdf::SomeStruct;"}, {"sha": "2046273e2c1baed7448a2353d974cb114f6ff44f", "filename": "src/test/rustdoc/issue-19190.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-19190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-19190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-19190.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -14,7 +14,7 @@ impl Deref for Bar {\n }\n \n // @has issue_19190/struct.Bar.html\n-// @has - '//*[@id=\"method.foo\"]//code' 'fn foo(&self)'\n+// @has - '//*[@id=\"method.foo\"]//h4[@class=\"code-header\"]' 'fn foo(&self)'\n // @has - '//*[@id=\"method.foo\"]' 'fn foo(&self)'\n-// @!has - '//*[@id=\"method.static_foo\"]//code' 'fn static_foo()'\n+// @!has - '//*[@id=\"method.static_foo\"]//h4[@class=\"code-header\"]' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}, {"sha": "c97b35adaf22eb6bb70f5793791b9263ebc4788e", "filename": "src/test/rustdoc/issue-25001.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-25001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-25001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-25001.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -8,36 +8,36 @@ pub trait Bar {\n }\n \n impl Foo<u8> {\n-    // @has - '//*[@id=\"method.pass\"]//code' 'fn pass()'\n+    // @has - '//*[@id=\"method.pass\"]//h4[@class=\"code-header\"]' 'fn pass()'\n     pub fn pass() {}\n }\n impl Foo<u16> {\n-    // @has - '//*[@id=\"method.pass-1\"]//code' 'fn pass() -> usize'\n+    // @has - '//*[@id=\"method.pass-1\"]//h4[@class=\"code-header\"]' 'fn pass() -> usize'\n     pub fn pass() -> usize { 42 }\n }\n impl Foo<u32> {\n-    // @has - '//*[@id=\"method.pass-2\"]//code' 'fn pass() -> isize'\n+    // @has - '//*[@id=\"method.pass-2\"]//h4[@class=\"code-header\"]' 'fn pass() -> isize'\n     pub fn pass() -> isize { 42 }\n }\n \n impl<T> Bar for Foo<T> {\n-    // @has - '//*[@id=\"associatedtype.Item\"]//code' 'type Item = T'\n+    // @has - '//*[@id=\"associatedtype.Item\"]//h4[@class=\"code-header\"]' 'type Item = T'\n     type Item=T;\n \n-    // @has - '//*[@id=\"method.quux\"]//code' 'fn quux(self)'\n+    // @has - '//*[@id=\"method.quux\"]//h4[@class=\"code-header\"]' 'fn quux(self)'\n     fn quux(self) {}\n }\n impl<'a, T> Bar for &'a Foo<T> {\n-    // @has - '//*[@id=\"associatedtype.Item-1\"]//code' \"type Item = &'a T\"\n+    // @has - '//*[@id=\"associatedtype.Item-1\"]//h4[@class=\"code-header\"]' \"type Item = &'a T\"\n     type Item=&'a T;\n \n-    // @has - '//*[@id=\"method.quux-1\"]//code' 'fn quux(self)'\n+    // @has - '//*[@id=\"method.quux-1\"]//h4[@class=\"code-header\"]' 'fn quux(self)'\n     fn quux(self) {}\n }\n impl<'a, T> Bar for &'a mut Foo<T> {\n-    // @has - '//*[@id=\"associatedtype.Item-2\"]//code' \"type Item = &'a mut T\"\n+    // @has - '//*[@id=\"associatedtype.Item-2\"]//h4[@class=\"code-header\"]' \"type Item = &'a mut T\"\n     type Item=&'a mut T;\n \n-    // @has - '//*[@id=\"method.quux-2\"]//code' 'fn quux(self)'\n+    // @has - '//*[@id=\"method.quux-2\"]//h4[@class=\"code-header\"]' 'fn quux(self)'\n     fn quux(self) {}\n }"}, {"sha": "097e4e3b03d9db1a0f2b522961854f20d5a31a4b", "filename": "src/test/rustdoc/issue-27362.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-27362.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-27362.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-27362.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -7,4 +7,4 @@ pub use issue_27362_aux::*;\n \n // @matches issue_27362/fn.foo.html '//pre' \"pub const fn foo()\"\n // @matches issue_27362/fn.bar.html '//pre' \"pub const unsafe fn bar()\"\n-// @matches issue_27362/struct.Foo.html '//code' \"const unsafe fn baz()\"\n+// @matches issue_27362/struct.Foo.html '//h4[@class=\"code-header\"]' \"const unsafe fn baz()\""}, {"sha": "90a2b76eab67bcdaa32a780bc5f5d1b52fc81cc1", "filename": "src/test/rustdoc/issue-29503.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29503.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -5,7 +5,7 @@ pub trait MyTrait {\n     fn my_string(&self) -> String;\n }\n \n-// @has - \"//div[@id='implementors-list']//div[@id='impl-MyTrait']//code\" \"impl<T> MyTrait for T where T: Debug\"\n+// @has - \"//div[@id='implementors-list']//div[@id='impl-MyTrait']//h3[@class='code-header in-band']\" \"impl<T> MyTrait for T where T: Debug\"\n impl<T> MyTrait for T where T: fmt::Debug {\n     fn my_string(&self) -> String {\n         format!(\"{:?}\", self)"}, {"sha": "815439db9bfd23c8e4fcaf54dee57f236b4f55b9", "filename": "src/test/rustdoc/issue-33592.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-33592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-33592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-33592.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -6,8 +6,8 @@ pub struct Bar;\n \n pub struct Baz;\n \n-// @has foo/trait.Foo.html '//code' 'impl Foo<i32> for Bar'\n+// @has foo/trait.Foo.html '//h3[@class=\"code-header in-band\"]' 'impl Foo<i32> for Bar'\n impl Foo<i32> for Bar {}\n \n-// @has foo/trait.Foo.html '//code' 'impl<T> Foo<T> for Baz'\n+// @has foo/trait.Foo.html '//h3[@class=\"code-header in-band\"]' 'impl<T> Foo<T> for Baz'\n impl<T> Foo<T> for Baz {}"}, {"sha": "f08466baf8b05fa5f369563fa40b1f0dfb9f1294", "filename": "src/test/rustdoc/issue-35169-2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -24,17 +24,17 @@ impl DerefMut for Bar {\n }\n \n // @has issue_35169_2/struct.Bar.html\n-// @has - '//*[@id=\"method.by_ref\"]//code' 'fn by_ref(&self)'\n+// @has - '//*[@id=\"method.by_ref\"]//h4[@class=\"code-header\"]' 'fn by_ref(&self)'\n // @has - '//*[@id=\"method.by_ref\"]' 'fn by_ref(&self)'\n-// @has - '//*[@id=\"method.by_explicit_ref\"]//code' 'fn by_explicit_ref(self: &Foo)'\n+// @has - '//*[@id=\"method.by_explicit_ref\"]//h4[@class=\"code-header\"]' 'fn by_explicit_ref(self: &Foo)'\n // @has - '//*[@id=\"method.by_explicit_ref\"]' 'fn by_explicit_ref(self: &Foo)'\n-// @has - '//*[@id=\"method.by_mut_ref\"]//code' 'fn by_mut_ref(&mut self)'\n+// @has - '//*[@id=\"method.by_mut_ref\"]//h4[@class=\"code-header\"]' 'fn by_mut_ref(&mut self)'\n // @has - '//*[@id=\"method.by_mut_ref\"]' 'fn by_mut_ref(&mut self)'\n-// @has - '//*[@id=\"method.by_explicit_mut_ref\"]//code' 'fn by_explicit_mut_ref(self: &mut Foo)'\n+// @has - '//*[@id=\"method.by_explicit_mut_ref\"]//h4[@class=\"code-header\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n // @has - '//*[@id=\"method.by_explicit_mut_ref\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n-// @!has - '//*[@id=\"method.by_explicit_box\"]//code' 'fn by_explicit_box(self: Box<Foo>)'\n+// @!has - '//*[@id=\"method.by_explicit_box\"]//h4[@class=\"code-header\"]' 'fn by_explicit_box(self: Box<Foo>)'\n // @!has - '//*[@id=\"method.by_explicit_box\"]' 'fn by_explicit_box(self: Box<Foo>)'\n-// @!has - '//*[@id=\"method.by_explicit_self_box\"]//code' 'fn by_explicit_self_box(self: Box<Self>)'\n+// @!has - '//*[@id=\"method.by_explicit_self_box\"]//h4[@class=\"code-header\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n // @!has - '//*[@id=\"method.by_explicit_self_box\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n-// @!has - '//*[@id=\"method.static_foo\"]//code' 'fn static_foo()'\n+// @!has - '//*[@id=\"method.static_foo\"]//h4[@class=\"code-header\"]' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}, {"sha": "70a2265c80632504c4f939ea7e18b1c1e0863a8d", "filename": "src/test/rustdoc/issue-35169.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-35169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-35169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-35169.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -19,17 +19,17 @@ impl Deref for Bar {\n }\n \n // @has issue_35169/struct.Bar.html\n-// @has - '//*[@id=\"method.by_ref\"]//code' 'fn by_ref(&self)'\n+// @has - '//*[@id=\"method.by_ref\"]//h4[@class=\"code-header\"]' 'fn by_ref(&self)'\n // @has - '//*[@id=\"method.by_ref\"]' 'fn by_ref(&self)'\n-// @has - '//*[@id=\"method.by_explicit_ref\"]//code' 'fn by_explicit_ref(self: &Foo)'\n+// @has - '//*[@id=\"method.by_explicit_ref\"]//h4[@class=\"code-header\"]' 'fn by_explicit_ref(self: &Foo)'\n // @has - '//*[@id=\"method.by_explicit_ref\"]' 'fn by_explicit_ref(self: &Foo)'\n-// @!has - '//*[@id=\"method.by_mut_ref\"]//code' 'fn by_mut_ref(&mut self)'\n+// @!has - '//*[@id=\"method.by_mut_ref\"]//h4[@class=\"code-header\"]' 'fn by_mut_ref(&mut self)'\n // @!has - '//*[@id=\"method.by_mut_ref\"]' 'fn by_mut_ref(&mut self)'\n-// @!has - '//*[@id=\"method.by_explicit_mut_ref\"]//code' 'fn by_explicit_mut_ref(self: &mut Foo)'\n+// @!has - '//*[@id=\"method.by_explicit_mut_ref\"]//h4[@class=\"code-header\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n // @!has - '//*[@id=\"method.by_explicit_mut_ref\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n-// @!has - '//*[@id=\"method.by_explicit_box\"]//code' 'fn by_explicit_box(self: Box<Foo>)'\n+// @!has - '//*[@id=\"method.by_explicit_box\"]//h4[@class=\"code-header\"]' 'fn by_explicit_box(self: Box<Foo>)'\n // @!has - '//*[@id=\"method.by_explicit_box\"]' 'fn by_explicit_box(self: Box<Foo>)'\n-// @!has - '//*[@id=\"method.by_explicit_self_box\"]//code' 'fn by_explicit_self_box(self: Box<Self>)'\n+// @!has - '//*[@id=\"method.by_explicit_self_box\"]//h4[@class=\"code-header\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n // @!has - '//*[@id=\"method.by_explicit_self_box\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n-// @!has - '//*[@id=\"method.static_foo\"]//code' 'fn static_foo()'\n+// @!has - '//*[@id=\"method.static_foo\"]//h4[@class=\"code-header\"]' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}, {"sha": "00e9127a34d2027edb8fe1989e8ba2d8b8291614", "filename": "src/test/rustdoc/issue-46727.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-46727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-46727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-46727.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -3,5 +3,5 @@\n extern crate issue_46727;\n \n // @has issue_46727/trait.Foo.html\n-// @has - '//code' 'impl<T> Foo for Bar<[T; 3]>'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Foo for Bar<[T; 3]>'\n pub use issue_46727::{Foo, Bar};"}, {"sha": "d88c29217023a9f9b5da233a3766297a872eeb0b", "filename": "src/test/rustdoc/issue-50159.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-50159.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -11,8 +11,8 @@ impl<B, C> Signal2 for B where B: Signal<Item = C> {\n }\n \n // @has issue_50159/struct.Switch.html\n-// @has - '//code' 'impl<B> Send for Switch<B> where <B as Signal>::Item: Send'\n-// @has - '//code' 'impl<B> Sync for Switch<B> where <B as Signal>::Item: Sync'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Send for Switch<B> where <B as Signal>::Item: Send'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Sync for Switch<B> where <B as Signal>::Item: Sync'\n // @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl\"]' 0\n // @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n pub struct Switch<B: Signal> {"}, {"sha": "ee11ccc6811633fac9cd3f6b09abfc35b7e0a62f", "filename": "src/test/rustdoc/issue-51236.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-51236.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -7,7 +7,7 @@ pub mod traits {\n }\n \n // @has issue_51236/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<T> Send for Owned<T> where <T as Owned<'static>>::Reader: Send\"\n pub struct Owned<T> where T: for<'a> ::traits::Owned<'a> {\n     marker: PhantomData<<T as ::traits::Owned<'static>>::Reader>,"}, {"sha": "52ce4159d823ec85b2fd5b8f9f42a88e2ed6b72b", "filename": "src/test/rustdoc/issue-53689.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-53689.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-53689.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-53689.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -6,7 +6,7 @@ extern crate issue_53689;\n \n // @has foo/trait.MyTrait.html\n // @!has - 'MyStruct'\n-// @count - '//*[code=\"impl<T> MyTrait for T\"]' 1\n+// @count - '//*[h3=\"impl<T> MyTrait for T\"]' 1\n pub trait MyTrait {}\n \n impl<T> MyTrait for T {}"}, {"sha": "bedaf5c4ddc360a311c83fc415943cab0b1e08f2", "filename": "src/test/rustdoc/issue-54705.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-54705.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -3,10 +3,10 @@ pub trait ScopeHandle<'scope> {}\n \n \n // @has issue_54705/struct.ScopeFutureContents.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<'scope, S> Send for ScopeFutureContents<'scope, S> where S: Sync\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<'scope, S> Sync for ScopeFutureContents<'scope, S> where S: Sync\"\n pub struct ScopeFutureContents<'scope, S>\n     where S: ScopeHandle<'scope>,"}, {"sha": "ee2420d86d236fa95e4674ae39a0dbb9698d9d9d", "filename": "src/test/rustdoc/issue-55321.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-55321.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -1,18 +1,18 @@\n #![feature(negative_impls)]\n \n // @has issue_55321/struct.A.html\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl !Send for A\"\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl !Sync for A\"\n pub struct A();\n \n impl !Send for A {}\n impl !Sync for A {}\n \n // @has issue_55321/struct.B.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<T> !Send for B<T>\"\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<T> !Sync for B<T>\"\n pub struct B<T: ?Sized>(A, Box<T>);"}, {"sha": "aef6ddd8d23bc658840f42e9fd786cff18f7ad3d", "filename": "src/test/rustdoc/issue-56822.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-56822.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -17,7 +17,7 @@ impl<'a, T> MyTrait for Inner<'a, T> {\n }\n \n // @has issue_56822/struct.Parser.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<'a> Send for Parser<'a>\"\n pub struct Parser<'a> {\n     field: <Wrapper<Inner<'a, u8>> as MyTrait>::Output"}, {"sha": "167f0f039c15e16b2cff56dd81e73d75e43f51c4", "filename": "src/test/rustdoc/issue-60726.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-60726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-60726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-60726.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -26,9 +26,9 @@ where\n {}\n \n // @has issue_60726/struct.IntoIter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<T> !Send for IntoIter<T>\"\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<T> !Sync for IntoIter<T>\"\n pub struct IntoIter<T>{\n     hello:DynTrait<FooInterface<T>>,"}, {"sha": "ac97b94fb351b558258671d7529e8c5825373591", "filename": "src/test/rustdoc/issue-75588.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-75588.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -10,8 +10,8 @@ extern crate realcore;\n extern crate real_gimli;\n \n // issue #74672\n-// @!has foo/trait.Deref.html '//*[@id=\"impl-Deref-for-EndianSlice\"]//code' 'impl Deref for EndianSlice'\n+// @!has foo/trait.Deref.html '//*[@id=\"impl-Deref-for-EndianSlice\"]//h3[@class=\"code-header in-band\"]' 'impl Deref for EndianSlice'\n pub use realcore::Deref;\n \n-// @has foo/trait.Join.html '//*[@id=\"impl-Join-for-Foo\"]//code' 'impl Join for Foo'\n+// @has foo/trait.Join.html '//*[@id=\"impl-Join-for-Foo\"]//h3[@class=\"code-header in-band\"]' 'impl Join for Foo'\n pub use realcore::Join;"}, {"sha": "515e617b4f4cef1468785a1a35451a1c13d9a2e9", "filename": "src/test/rustdoc/issue-80233-normalize-auto-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -31,7 +31,7 @@ impl<T: Trait3> Trait3 for Vec<T> {\n pub struct Struct1 {}\n \n // @has issue_80233_normalize_auto_trait/struct.Question.html\n-// @has - '//code' 'impl<T> Send for Question<T>'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Send for Question<T>'\n pub struct Question<T: Trait1> {\n     pub ins: <<Vec<T> as Trait3>::Type3 as Trait2>::Type2,\n }"}, {"sha": "8999e6a889bda2662c9fc5c79959fd729bdcf264", "filename": "src/test/rustdoc/issue-82465-asref-for-and-of-local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-82465-asref-for-and-of-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fissue-82465-asref-for-and-of-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-82465-asref-for-and-of-local.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -1,14 +1,14 @@\n use std::convert::AsRef;\n pub struct Local;\n \n-// @has issue_82465_asref_for_and_of_local/struct.Local.html '//code' 'impl AsRef<str> for Local'\n+// @has issue_82465_asref_for_and_of_local/struct.Local.html '//h3[@class=\"code-header in-band\"]' 'impl AsRef<str> for Local'\n impl AsRef<str> for Local {\n     fn as_ref(&self) -> &str {\n         todo!()\n     }\n }\n \n-// @has - '//code' 'impl AsRef<Local> for str'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl AsRef<Local> for str'\n impl AsRef<Local> for str {\n     fn as_ref(&self) -> &Local {\n         todo!()"}, {"sha": "61a23986862309e05b7fd4c6641dd3bd4d311a93", "filename": "src/test/rustdoc/negative-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -5,10 +5,10 @@ pub struct Alpha;\n // @matches negative_impl/struct.Bravo.html '//pre' \"pub struct Bravo<B>\"\n pub struct Bravo<B>(B);\n \n-// @matches negative_impl/struct.Alpha.html '//*[@class=\"impl has-srclink\"]//code' \\\n+// @matches negative_impl/struct.Alpha.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl !Send for Alpha\"\n impl !Send for Alpha {}\n \n-// @matches negative_impl/struct.Bravo.html '//*[@class=\"impl has-srclink\"]//code' \"\\\n+// @matches negative_impl/struct.Bravo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \"\\\n // impl<B> !Send for Bravo<B>\"\n impl<B> !Send for Bravo<B> {}"}, {"sha": "0bf6157fed34825ab136423c09fd2ae0e25a7a9e", "filename": "src/test/rustdoc/primitive-generic-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fprimitive-generic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fprimitive-generic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-generic-impl.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -2,4 +2,4 @@\n \n include!(\"primitive/primitive-generic-impl.rs\");\n \n-// @has foo/primitive.i32.html '//div[@id=\"impl-ToString\"]//code' 'impl<T> ToString for T'\n+// @has foo/primitive.i32.html '//div[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'"}, {"sha": "3d17bce472154e7de09411c3ab85e27b633edcf4", "filename": "src/test/rustdoc/recursive-deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Frecursive-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Frecursive-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frecursive-deref.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -3,7 +3,7 @@ use std::ops::Deref;\n pub struct A;\n pub struct B;\n \n-// @has recursive_deref/struct.A.html '//code' 'impl Deref for A'\n+// @has recursive_deref/struct.A.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for A'\n impl Deref for A {\n     type Target = B;\n \n@@ -12,7 +12,7 @@ impl Deref for A {\n     }\n }\n \n-// @has recursive_deref/struct.B.html '//code' 'impl Deref for B'\n+// @has recursive_deref/struct.B.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for B'\n impl Deref for B {\n     type Target = A;\n "}, {"sha": "d1083c487642d7ad668299fe02f53528820affc9", "filename": "src/test/rustdoc/sidebar-links-to-foreign-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -6,9 +6,9 @@\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//h2[@id=\"foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n-// @has - '//div[@id=\"impl-Foo-for-u32\"]//code' 'impl Foo for u32'\n+// @has - '//div[@id=\"impl-Foo-for-u32\"]//h3[@class=\"code-header in-band\"]' 'impl Foo for u32'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-%26%27a%20str\"]' \"&'a str\"\n-// @has - '//div[@id=\"impl-Foo-for-%26%27a%20str\"]//code' \"impl<'a> Foo for &'a str\"\n+// @has - '//div[@id=\"impl-Foo-for-%26%27a%20str\"]//h3[@class=\"code-header in-band\"]' \"impl<'a> Foo for &'a str\"\n pub trait Foo {}\n \n impl Foo for u32 {}"}, {"sha": "ac4a4ad394c1bb23f4768be96a8f7112689f5603", "filename": "src/test/rustdoc/sized_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsized_trait.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -11,7 +11,7 @@ pub struct Bar {\n pub struct Foo<T: ?Sized>(T);\n \n // @has foo/struct.Unsized.html\n-// @has - '//div[@id=\"impl-Sized\"]/code' 'impl !Sized for Unsized'\n+// @has - '//div[@id=\"impl-Sized\"]//h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "f9ac836c9b18faa33fe5c4c2ac1340d9eca864b4", "filename": "src/test/rustdoc/src-links-auto-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -1,11 +1,11 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Unsized.html\n-// @has - '//div[@id=\"impl-Sized\"]/code' 'impl !Sized for Unsized'\n+// @has - '//div[@id=\"impl-Sized\"]/h3[@class=\"code-header in-band\"]' 'impl !Sized for Unsized'\n // @!has - '//div[@id=\"impl-Sized\"]//a[@class=\"srclink\"]' '[src]'\n-// @has - '//div[@id=\"impl-Sync\"]/code' 'impl Sync for Unsized'\n+// @has - '//div[@id=\"impl-Sync\"]/h3[@class=\"code-header in-band\"]' 'impl Sync for Unsized'\n // @!has - '//div[@id=\"impl-Sync\"]//a[@class=\"srclink\"]' '[src]'\n-// @has - '//div[@id=\"impl-Any\"]/code' 'impl<T> Any for T'\n+// @has - '//div[@id=\"impl-Any\"]/h3[@class=\"code-header in-band\"]' 'impl<T> Any for T'\n // @has - '//div[@id=\"impl-Any\"]//a[@class=\"srclink\"]' '[src]'\n pub struct Unsized {\n     data: [u8],"}, {"sha": "54c54fdbf68a8acafc9e50e48d0af6f9f7d3bc7b", "filename": "src/test/rustdoc/synthetic_auto/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -1,6 +1,6 @@\n // @has basic/struct.Foo.html\n-// @has - '//code' 'impl<T> Send for Foo<T> where T: Send'\n-// @has - '//code' 'impl<T> Sync for Foo<T> where T: Sync'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Send for Foo<T> where T: Send'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Sync for Foo<T> where T: Sync'\n // @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl has-srclink\"]' 0\n // @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n pub struct Foo<T> {"}, {"sha": "f9017b90caee774d2022797e0321002bb77b630f", "filename": "src/test/rustdoc/synthetic_auto/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -20,7 +20,7 @@ mod foo {\n }\n \n // @has complex/struct.NotOuter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<'a, T, K: ?Sized> Send for Outer<'a, T, K> where K: for<'b> Fn((&'b bool, &'a u8)) \\\n // -> &'b i8, T: MyTrait<'a>, <T as MyTrait<'a>>::MyItem: Copy, 'a: 'static\"\n "}, {"sha": "58b787dfafc7c48923dc0fca98ca945b8718df52", "filename": "src/test/rustdoc/synthetic_auto/crate-local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcrate-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcrate-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcrate-local.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -3,7 +3,7 @@\n pub auto trait Banana {}\n \n // @has crate_local/struct.Peach.html\n-// @has - '//code' 'impl Banana for Peach'\n-// @has - '//code' 'impl Send for Peach'\n-// @has - '//code' 'impl Sync for Peach'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Banana for Peach'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Send for Peach'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Sync for Peach'\n pub struct Peach;"}, {"sha": "ee1393f9729c176ccff505f02e489c9e2116a2dc", "filename": "src/test/rustdoc/synthetic_auto/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -9,10 +9,10 @@ where\n {}\n \n // @has lifetimes/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<'c, K> Send for Foo<'c, K> where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<'c, K> Sync for Foo<'c, K> where K: Sync\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}, {"sha": "49bad162211b7041be4ba179022091d2d11f3b9f", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -1,8 +1,8 @@\n // @has manual/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // 'impl<T> Sync for Foo<T> where T: Sync'\n //\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // 'impl<T> Send for Foo<T>'\n //\n // @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1"}, {"sha": "66e749ac38d9623237d03be982a5899b06d825fb", "filename": "src/test/rustdoc/synthetic_auto/negative.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -3,10 +3,10 @@ pub struct Inner<T: Copy> {\n }\n \n // @has negative/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<T> !Send for Outer<T>\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<T> !Sync for Outer<T>\"\n pub struct Outer<T: Copy> {\n     inner_field: Inner<T>,"}, {"sha": "69edbee619e31e8316c1796bcc7916cfd9cd9c28", "filename": "src/test/rustdoc/synthetic_auto/nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -9,10 +9,10 @@ where\n }\n \n // @has nested/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // 'impl<T> Send for Foo<T> where T: Copy'\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // 'impl<T> Sync for Foo<T> where T: Sync'\n pub struct Foo<T> {\n     inner_field: Inner<T>,"}, {"sha": "f727c9a47f2687095f84cf8929affbc71a57a515", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -9,7 +9,7 @@ where\n }\n \n // @has no_redundancy/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<T> Send for Outer<T> where T: Copy + Send\"\n pub struct Outer<T> {\n     inner_field: Inner<T>,"}, {"sha": "c132ab6fb1b3e856c774cd0bf21b6d9799ec7e02", "filename": "src/test/rustdoc/synthetic_auto/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -21,7 +21,7 @@ enum TyData<I: Interner> {\n struct VariableKind<I: Interner>(I::InternedType);\n \n // @has overflow/struct.BoundVarsCollector.html\n-// @has - '//code' \"impl<'tcx> Send for BoundVarsCollector<'tcx>\"\n+// @has - '//h3[@class=\"code-header in-band\"]' \"impl<'tcx> Send for BoundVarsCollector<'tcx>\"\n pub struct BoundVarsCollector<'tcx> {\n     val: VariableKind<RustInterner<'tcx>>\n }"}, {"sha": "8b020582563f3d3ac9fe6cd6be4975c2c66641bf", "filename": "src/test/rustdoc/synthetic_auto/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -23,10 +23,10 @@ where\n }\n \n // @has project/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<'c, K> Send for Foo<'c, K> where K: MyTrait<MyItem = bool>, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<'c, K> Sync for Foo<'c, K> where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, \\\n // 'c: 'static,\"\n pub struct Foo<'c, K: 'c> {"}, {"sha": "ccef901b18da3e57b359973eb52e04cb3f5f19ad", "filename": "src/test/rustdoc/synthetic_auto/self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -23,7 +23,7 @@ impl<T> Pattern for Wrapper<T> {\n \n \n // @has self_referential/struct.WriteAndThen.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<P1> Send for WriteAndThen<P1>  where  <P1 as Pattern>::Value: Send\"\n pub struct WriteAndThen<P1>(pub P1::Value,pub <Constrain<P1, Wrapper<P1::Value>> as Pattern>::Value)\n     where P1: Pattern;"}, {"sha": "36e985144b0e09026e60796a8908419b766eb363", "filename": "src/test/rustdoc/synthetic_auto/static-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -3,7 +3,7 @@ pub trait OwnedTrait<'a> {\n }\n \n // @has static_region/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // \"impl<T> Send for Owned<T> where <T as OwnedTrait<'static>>::Reader: Send\"\n pub struct Owned<T> where T: OwnedTrait<'static> {\n     marker: <T as OwnedTrait<'static>>::Reader,"}, {"sha": "1aa74e5965960e56c8abdd6b95d5bc375195db4d", "filename": "src/test/rustdoc/toggle-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Ftoggle-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Ftoggle-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftoggle-method.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -4,9 +4,9 @@\n // summary. Struct methods with no documentation should not be wrapped.\n //\n // @has foo/struct.Foo.html\n-// @has - '//details[@class=\"rustdoc-toggle method-toggle\"]//summary//code' 'is_documented()'\n+// @has - '//details[@class=\"rustdoc-toggle method-toggle\"]//summary//h4[@class=\"code-header\"]' 'is_documented()'\n // @has - '//details[@class=\"rustdoc-toggle method-toggle\"]//*[@class=\"docblock\"]' 'is_documented is documented'\n-// @!has - '//details[@class=\"rustdoc-toggle method-toggle\"]//summary//code' 'not_documented()'\n+// @!has - '//details[@class=\"rustdoc-toggle method-toggle\"]//summary//h4[@class=\"code-header\"]' 'not_documented()'\n pub struct Foo {\n }\n "}, {"sha": "65e8daeb06619ca1250f58f396201fad2945c4ea", "filename": "src/test/rustdoc/toggle-trait-fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Ftoggle-trait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Ftoggle-trait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftoggle-trait-fn.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -4,11 +4,11 @@\n // summary. Trait methods with no documentation should not be wrapped.\n //\n // @has foo/trait.Foo.html\n-// @has -  '//details[@class=\"rustdoc-toggle\"]//summary//code' 'is_documented()'\n-// @!has - '//details[@class=\"rustdoc-toggle\"]//summary//code' 'not_documented()'\n+// @has -  '//details[@class=\"rustdoc-toggle\"]//summary//h4[@class=\"code-header\"]' 'is_documented()'\n+// @!has - '//details[@class=\"rustdoc-toggle\"]//summary//h4[@class=\"code-header\"]' 'not_documented()'\n // @has -  '//details[@class=\"rustdoc-toggle\"]//*[@class=\"docblock\"]' 'is_documented is documented'\n-// @has -  '//details[@class=\"rustdoc-toggle\"]//summary//code' 'is_documented_optional()'\n-// @!has - '//details[@class=\"rustdoc-toggle\"]//summary//code' 'not_documented_optional()'\n+// @has -  '//details[@class=\"rustdoc-toggle\"]//summary//h4[@class=\"code-header\"]' 'is_documented_optional()'\n+// @!has - '//details[@class=\"rustdoc-toggle\"]//summary//h4[@class=\"code-header\"]' 'not_documented_optional()'\n // @has -  '//details[@class=\"rustdoc-toggle\"]//*[@class=\"docblock\"]' 'is_documented_optional is documented'\n pub trait Foo {\n     fn not_documented();"}, {"sha": "05ccc074bf1102ef4030dce39012af2baf098d7c", "filename": "src/test/rustdoc/trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -43,5 +43,5 @@ impl Trait for Struct {\n     // @!has - '//*[@id=\"method.d\"]/../../div[@class=\"docblock\"]/p/em'\n     fn d() {}\n \n-    // @has - '//*[@id=\"impl-Trait\"]/code/a/@href' 'trait.Trait.html'\n+    // @has - '//*[@id=\"impl-Trait\"]/h3//a/@href' 'trait.Trait.html'\n }"}, {"sha": "6d450a625d0bfa9a47e32f24482ceed7e12470f9", "filename": "src/test/rustdoc/traits-in-bodies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Ftraits-in-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Ftraits-in-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftraits-in-bodies.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -4,7 +4,7 @@\n pub struct Bounded<T: Clone>(T);\n \n // @has traits_in_bodies/struct.SomeStruct.html\n-// @has - '//code' 'impl Clone for SomeStruct'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Clone for SomeStruct'\n pub struct SomeStruct;\n \n fn asdf() -> Bounded<SomeStruct> {\n@@ -18,7 +18,7 @@ fn asdf() -> Bounded<SomeStruct> {\n }\n \n // @has traits_in_bodies/struct.Point.html\n-// @has - '//code' 'impl Copy for Point'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Copy for Point'\n #[derive(Clone)]\n pub struct Point {\n     x: i32,\n@@ -31,7 +31,7 @@ const _FOO: () = {\n };\n \n // @has traits_in_bodies/struct.Inception.html\n-// @has - '//code' 'impl Clone for Inception'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl Clone for Inception'\n pub struct Inception;\n \n static _BAR: usize = {"}, {"sha": "1fb28ee99702f7dc2eae764330cd0f291293c26c", "filename": "src/test/rustdoc/typedef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Ftypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Ftypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftypedef.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -9,8 +9,8 @@ impl MyStruct {\n }\n \n // @has typedef/type.MyAlias.html\n-// @has - '//*[@class=\"impl has-srclink\"]//code' 'impl MyAlias'\n-// @has - '//*[@class=\"impl has-srclink\"]//code' 'impl MyTrait for MyAlias'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'impl MyAlias'\n+// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'impl MyTrait for MyAlias'\n // @has - 'Alias docstring'\n // @has - '//*[@class=\"sidebar\"]//*[@class=\"location\"]' 'Type Definition MyAlias'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#implementations\"]' 'Methods'"}, {"sha": "cd284dad390e76965c10c6b2e69f9fdcf116631d", "filename": "src/test/rustdoc/visibility.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fvisibility.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -60,14 +60,14 @@ pub trait PubTrait {\n     fn function();\n }\n \n-// @has 'foo/struct.FooPublic.html' '//code' 'type Type'\n-// @!has 'foo/struct.FooPublic.html' '//code' 'pub type Type'\n+// @has 'foo/struct.FooPublic.html' '//h4[@class=\"code-header\"]' 'type Type'\n+// @!has 'foo/struct.FooPublic.html' '//h4[@class=\"code-header\"]' 'pub type Type'\n //\n-// @has 'foo/struct.FooPublic.html' '//code' 'const CONST: usize'\n-// @!has 'foo/struct.FooPublic.html' '//code' 'pub const CONST: usize'\n+// @has 'foo/struct.FooPublic.html' '//h4[@class=\"code-header\"]' 'const CONST: usize'\n+// @!has 'foo/struct.FooPublic.html' '//h4[@class=\"code-header\"]' 'pub const CONST: usize'\n //\n-// @has 'foo/struct.FooPublic.html' '//code' 'fn function()'\n-// @!has 'foo/struct.FooPublic.html' '//code' 'pub fn function()'\n+// @has 'foo/struct.FooPublic.html' '//h4[@class=\"code-header\"]' 'fn function()'\n+// @!has 'foo/struct.FooPublic.html' '//h4[@class=\"code-header\"]' 'pub fn function()'\n \n impl PubTrait for FooPublic {\n     type Type = usize;"}, {"sha": "549cfff96cb6dc37e5c56aa7f06c99ff778e60dd", "filename": "src/test/rustdoc/where.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftest%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -11,25 +11,25 @@ pub fn charlie<C>() where C: MyTrait {}\n \n pub struct Delta<D>(D);\n \n-// @has foo/struct.Delta.html '//*[@class=\"impl has-srclink\"]//code' \\\n+// @has foo/struct.Delta.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n //          \"impl<D> Delta<D> where D: MyTrait\"\n impl<D> Delta<D> where D: MyTrait {\n     pub fn delta() {}\n }\n \n pub struct Echo<E>(E);\n \n-// @has foo/struct.Echo.html '//*[@class=\"impl has-srclink\"]//code' \\\n+// @has foo/struct.Echo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n //          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n-// @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//code' \\\n+// @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header in-band\"]' \\\n //          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n impl<E> MyTrait for Echo<E> where E: MyTrait {}\n \n pub enum Foxtrot<F> { Foxtrot1(F) }\n \n-// @has foo/enum.Foxtrot.html '//*[@class=\"impl has-srclink\"]//code' \\\n+// @has foo/enum.Foxtrot.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n //          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\"\n-// @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//code' \\\n+// @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header in-band\"]' \\\n //          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\"\n impl<F> MyTrait for Foxtrot<F> where F: MyTrait {}\n "}, {"sha": "7bdf527d8842bbedba3da1795ea5a4bd8b57a165", "filename": "src/tools/html-checker/main.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftools%2Fhtml-checker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30/src%2Ftools%2Fhtml-checker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fhtml-checker%2Fmain.rs?ref=76a3b609d0b93c5d8da5e4e3db37bd03e5cb1c30", "patch": "@@ -15,6 +15,11 @@ fn check_html_file(file: &Path) -> usize {\n         \"MISSING_ENDTAG_BEFORE\",\n         \"INSERTING_TAG\",\n         \"DISCARDING_UNEXPECTED\",\n+        // This error is caused by nesting the Notable Traits tooltip within an <h4> tag.\n+        // The solution is to avoid doing that, but we need to have the <h4> tags for accessibility\n+        // reasons, and we need the Notable Traits tooltip to help everyone understand the Iterator\n+        // combinators\n+        \"TAG_NOT_ALLOWED_IN\",\n     ];\n     let to_mute_s = to_mute.join(\",\");\n     let mut command = Command::new(\"tidy\");"}]}