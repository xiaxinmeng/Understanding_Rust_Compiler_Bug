{"sha": "1afddff97ff825c88b106f98955ed84d135ef6f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZmRkZmY5N2ZmODI1Yzg4YjEwNmY5ODk1NWVkODRkMTM1ZWY2Zjc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-23T05:37:37Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-23T06:40:17Z"}, "message": "remove oldsmallintmap\n\nCloses #4738", "tree": {"sha": "3c97baa9c8654f77e23dc6d9ca78d9032f765b1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c97baa9c8654f77e23dc6d9ca78d9032f765b1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1afddff97ff825c88b106f98955ed84d135ef6f7", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1afddff97ff825c88b106f98955ed84d135ef6f7", "html_url": "https://github.com/rust-lang/rust/commit/1afddff97ff825c88b106f98955ed84d135ef6f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1afddff97ff825c88b106f98955ed84d135ef6f7/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82062a63485b75b7476d078e722b49e3eb376795", "url": "https://api.github.com/repos/rust-lang/rust/commits/82062a63485b75b7476d078e722b49e3eb376795", "html_url": "https://github.com/rust-lang/rust/commit/82062a63485b75b7476d078e722b49e3eb376795"}], "stats": {"total": 295, "additions": 27, "deletions": 268}, "files": [{"sha": "02cd5afc920a118f0b5265231b9896b57636cba3", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=1afddff97ff825c88b106f98955ed84d135ef6f7", "patch": "@@ -860,7 +860,7 @@ fn encode_side_tables_for_id(ecx: @e::EncodeContext,\n             }\n         }\n     }\n-    do option::iter(&(*tcx.node_types).find(id as uint)) |ty| {\n+    do option::iter(&tcx.node_types.find(&(id as uint))) |&ty| {\n         do ebml_w.tag(c::tag_table_node_type) {\n             ebml_w.id(id);\n             do ebml_w.tag(c::tag_table_val) {\n@@ -1135,7 +1135,7 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                 let ty = val_dsr.read_ty(xcx);\n                 debug!(\"inserting ty for node %?: %s\",\n                        id, ty_to_str(dcx.tcx, ty));\n-                (*dcx.tcx.node_types).insert(id as uint, ty);\n+                dcx.tcx.node_types.insert(id as uint, ty);\n             } else if tag == (c::tag_table_node_type_subst as uint) {\n                 let tys = val_dsr.read_tys(xcx);\n                 dcx.tcx.node_type_substs.insert(id, tys);"}, {"sha": "a25bc84f8a214d5a4cbc0feb9c8812dcc9d7e2bd", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=1afddff97ff825c88b106f98955ed84d135ef6f7", "patch": "@@ -34,8 +34,7 @@ use core::uint;\n use core::vec;\n use std::oldmap::{Map, HashMap};\n use std::oldmap;\n-use std::oldsmallintmap::{Map, SmallIntMap};\n-use std::oldsmallintmap;\n+use std::smallintmap::SmallIntMap;\n use syntax::ast_util::{path_to_ident};\n use syntax::attr;\n use syntax::codemap::span;\n@@ -275,7 +274,7 @@ pub fn get_lint_dict() -> LintDict {\n }\n \n // This is a highly not-optimal set of data structure decisions.\n-type LintModes = SmallIntMap<level>;\n+type LintModes = @mut SmallIntMap<level>;\n type LintModeMap = HashMap<ast::node_id, LintModes>;\n \n // settings_map maps node ids of items with non-default lint settings\n@@ -288,14 +287,14 @@ pub struct LintSettings {\n \n pub fn mk_lint_settings() -> LintSettings {\n     LintSettings {\n-        default_settings: oldsmallintmap::mk(),\n+        default_settings: @mut SmallIntMap::new(),\n         settings_map: HashMap()\n     }\n }\n \n pub fn get_lint_level(modes: LintModes, lint: lint) -> level {\n-    match modes.find(lint as uint) {\n-      Some(c) => c,\n+    match modes.find(&(lint as uint)) {\n+      Some(&c) => c,\n       None => allow\n     }\n }\n@@ -314,8 +313,7 @@ pub fn get_lint_settings_level(settings: LintSettings,\n // This is kind of unfortunate. It should be somewhere else, or we should use\n // a persistent data structure...\n fn clone_lint_modes(modes: LintModes) -> LintModes {\n-    oldsmallintmap::SmallIntMap_(@oldsmallintmap::SmallIntMap_\n-    {v: copy modes.v})\n+    @mut (copy *modes)\n }\n \n struct Context {\n@@ -332,7 +330,7 @@ impl Context {\n \n     fn set_level(&self, lint: lint, level: level) {\n         if level == allow {\n-            self.curr.remove(lint as uint);\n+            self.curr.remove(&(lint as uint));\n         } else {\n             self.curr.insert(lint as uint, level);\n         }\n@@ -440,7 +438,7 @@ fn build_settings_item(i: @ast::item, &&cx: Context, v: visit::vt<Context>) {\n pub fn build_settings_crate(sess: session::Session, crate: @ast::crate) {\n     let cx = Context {\n         dict: get_lint_dict(),\n-        curr: oldsmallintmap::mk(),\n+        curr: @mut SmallIntMap::new(),\n         is_default: true,\n         sess: sess\n     };\n@@ -458,7 +456,7 @@ pub fn build_settings_crate(sess: session::Session, crate: @ast::crate) {\n \n     do cx.with_lint_attrs(/*bad*/copy crate.node.attrs) |cx| {\n         // Copy out the default settings\n-        for cx.curr.each |k, v| {\n+        for cx.curr.each |&(k, &v)| {\n             sess.lint_settings.default_settings.insert(k, v);\n         }\n "}, {"sha": "b9f88b1763464d69032e12d267b5b84e6c96e759", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1afddff97ff825c88b106f98955ed84d135ef6f7", "patch": "@@ -76,7 +76,6 @@ use core::option::{is_none, is_some};\n use core::option;\n use core::uint;\n use std::oldmap::HashMap;\n-use std::oldsmallintmap;\n use std::{oldmap, time, list};\n use syntax::ast_map::{path, path_elt_to_str, path_mod, path_name};\n use syntax::ast_util::{def_id_of_def, local_def, path_to_ident};"}, {"sha": "2fa397e9196902032d2b1d4d74ee5656da6c8572", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1afddff97ff825c88b106f98955ed84d135ef6f7", "patch": "@@ -42,7 +42,8 @@ use core::uint;\n use core::vec;\n use core::hashmap::linear::LinearMap;\n use std::oldmap::HashMap;\n-use std::{oldmap, oldsmallintmap};\n+use std::oldmap;\n+use std::smallintmap::SmallIntMap;\n use syntax::ast::*;\n use syntax::ast_util::{is_local, local_def};\n use syntax::ast_util;\n@@ -767,7 +768,7 @@ type type_cache = HashMap<ast::def_id, ty_param_bounds_and_ty>;\n \n type constness_cache = HashMap<ast::def_id, const_eval::constness>;\n \n-pub type node_type_table = @oldsmallintmap::SmallIntMap<t>;\n+pub type node_type_table = @mut SmallIntMap<t>;\n \n fn mk_rcache() -> creader_cache {\n     type val = {cnum: int, pos: uint, len: uint};\n@@ -812,7 +813,7 @@ pub fn mk_ctxt(s: session::Session,\n         def_map: dm,\n         region_map: region_map,\n         region_paramd_items: region_paramd_items,\n-        node_types: @oldsmallintmap::mk(),\n+        node_types: @mut SmallIntMap::new(),\n         node_type_substs: oldmap::HashMap(),\n         items: amap,\n         intrinsic_defs: oldmap::HashMap(),\n@@ -2787,8 +2788,8 @@ pub fn br_hashmap<V:Copy>() -> HashMap<bound_region, V> {\n \n pub fn node_id_to_type(cx: ctxt, id: ast::node_id) -> t {\n     //io::println(fmt!(\"%?/%?\", id, cx.node_types.len()));\n-    match oldsmallintmap::find(*cx.node_types, id as uint) {\n-       Some(t) => t,\n+    match cx.node_types.find(&(id as uint)) {\n+       Some(&t) => t,\n        None => cx.sess.bug(\n            fmt!(\"node_id_to_type: no type for node `%s`\",\n                 ast_map::node_id_to_str(cx.items, id,\n@@ -3179,8 +3180,8 @@ pub fn expr_kind(tcx: ctxt,\n         }\n \n         ast::expr_cast(*) => {\n-            match oldsmallintmap::find(*tcx.node_types, expr.id as uint) {\n-                Some(t) => {\n+            match tcx.node_types.find(&(expr.id as uint)) {\n+                Some(&t) => {\n                     if ty::type_is_immediate(t) {\n                         RvalueDatumExpr\n                     } else {"}, {"sha": "b7e1b8a14ec68c73743b4ce3a7b4d0eb268c889d", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=1afddff97ff825c88b106f98955ed84d135ef6f7", "patch": "@@ -277,7 +277,7 @@ use core::result;\n use core::vec;\n use std::list::Nil;\n use std::oldmap::HashMap;\n-use std::oldsmallintmap;\n+use std::smallintmap::SmallIntMap;\n use syntax::ast::{ret_style, purity};\n use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast::{unsafe_fn, impure_fn, pure_fn, extern_fn};\n@@ -353,7 +353,7 @@ pub fn fixup_err_to_str(f: fixup_err) -> ~str {\n \n fn new_ValsAndBindings<V:Copy,T:Copy>() -> ValsAndBindings<V, T> {\n     ValsAndBindings {\n-        vals: oldsmallintmap::mk(),\n+        vals: @mut SmallIntMap::new(),\n         bindings: ~[]\n     }\n }"}, {"sha": "93c6131d3406aac82ee98364ea6a3f009d66d1d2", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=1afddff97ff825c88b106f98955ed84d135ef6f7", "patch": "@@ -10,7 +10,7 @@\n \n use core::prelude::*;\n use core::result;\n-use std::oldsmallintmap::SmallIntMap;\n+use std::smallintmap::SmallIntMap;\n \n use middle::ty::{Vid, expected_found, IntVarValue};\n use middle::ty;\n@@ -27,7 +27,7 @@ pub enum VarValue<V, T> {\n }\n \n pub struct ValsAndBindings<V, T> {\n-    vals: SmallIntMap<VarValue<V, T>>,\n+    vals: @mut SmallIntMap<VarValue<V, T>>,\n     bindings: ~[(V, VarValue<V, T>)],\n }\n \n@@ -64,12 +64,12 @@ pub impl InferCtxt {\n             vid: V) -> Node<V, T>\n         {\n             let vid_u = vid.to_uint();\n-            match vb.vals.find(vid_u) {\n+            match vb.vals.find(&vid_u) {\n                 None => {\n                     tcx.sess.bug(fmt!(\n                         \"failed lookup of vid `%u`\", vid_u));\n                 }\n-                Some(ref var_val) => {\n+                Some(var_val) => {\n                     match *var_val {\n                         Redirect(vid) => {\n                             let node: Node<V,T> = helper(tcx, vb, vid);\n@@ -103,8 +103,8 @@ pub impl InferCtxt {\n \n         { // FIXME(#4903)---borrow checker is not flow sensitive\n             let vb = UnifyVid::appropriate_vals_and_bindings(self);\n-            let old_v = vb.vals.get(vid.to_uint());\n-            vb.bindings.push((vid, old_v));\n+            let old_v = vb.vals.get(&vid.to_uint());\n+            vb.bindings.push((vid, *old_v));\n             vb.vals.insert(vid.to_uint(), new_v);\n         }\n     }"}, {"sha": "de3df62d62cafe4b2d850f49023f70b4ca1f00f8", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=1afddff97ff825c88b106f98955ed84d135ef6f7", "patch": "@@ -69,7 +69,6 @@ use std::list::{List, Nil, Cons};\n use std::list;\n use std::oldmap::HashMap;\n use std::oldmap;\n-use std::oldsmallintmap;\n use syntax::ast::{provided, required};\n use syntax::ast_map::node_id_to_str;\n use syntax::ast_util::{local_def, split_trait_methods};"}, {"sha": "a31309d7980dcde46e70257a1e70eccbcbc80956", "filename": "src/libstd/oldsmallintmap.rs", "status": "removed", "additions": 0, "deletions": 237, "changes": 237, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Flibstd%2Foldsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Flibstd%2Foldsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldsmallintmap.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -1,237 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n- * A simple map based on a vector for small integer keys. Space requirements\n- * are O(highest integer key).\n- */\n-#[forbid(deprecated_mode)];\n-\n-use core::container::{Container, Mutable, Map, Set};\n-use core::dvec::DVec;\n-use core::ops;\n-use core::option::{Some, None};\n-use core::option;\n-use core::prelude::*;\n-\n-// FIXME (#2347): Should not be @; there's a bug somewhere in rustc that\n-// requires this to be.\n-struct SmallIntMap_<T> {\n-    v: DVec<Option<T>>,\n-}\n-\n-pub enum SmallIntMap<T> {\n-    SmallIntMap_(@SmallIntMap_<T>)\n-}\n-\n-/// Create a smallintmap\n-pub fn mk<T:Copy>() -> SmallIntMap<T> {\n-    let v = DVec();\n-    SmallIntMap_(@SmallIntMap_ { v: v } )\n-}\n-\n-/**\n- * Add a value to the map. If the map already contains a value for\n- * the specified key then the original value is replaced.\n- */\n-#[inline(always)]\n-pub fn insert<T:Copy>(self: SmallIntMap<T>, key: uint, val: T) {\n-    //io::println(fmt!(\"%?\", key));\n-    self.v.grow_set_elt(key, &None, Some(val));\n-}\n-\n-/**\n- * Get the value for the specified key. If the key does not exist\n- * in the map then returns none\n- */\n-pub pure fn find<T:Copy>(self: SmallIntMap<T>, key: uint) -> Option<T> {\n-    if key < self.v.len() { return self.v.get_elt(key); }\n-    return None::<T>;\n-}\n-\n-/**\n- * Get the value for the specified key\n- *\n- * # Failure\n- *\n- * If the key does not exist in the map\n- */\n-pub pure fn get<T:Copy>(self: SmallIntMap<T>, key: uint) -> T {\n-    match find(self, key) {\n-      None => {\n-        error!(\"smallintmap::get(): key not present\");\n-        fail!();\n-      }\n-      Some(v) => return v\n-    }\n-}\n-\n-/// Returns true if the map contains a value for the specified key\n-pub pure fn contains_key<T:Copy>(self: SmallIntMap<T>, key: uint) -> bool {\n-    return !find(self, key).is_none();\n-}\n-\n-impl<V> Container for SmallIntMap<V> {\n-    /// Return the number of elements in the map\n-    pure fn len(&self) -> uint {\n-        let mut sz = 0u;\n-        for self.v.each |item| {\n-            match *item {\n-              Some(_) => sz += 1u,\n-              _ => ()\n-            }\n-        }\n-        sz\n-    }\n-\n-    /// Return true if the map contains no elements\n-    pure fn is_empty(&self) -> bool { self.len() == 0 }\n-}\n-\n-impl<V> Mutable for SmallIntMap<V> {\n-    fn clear(&mut self) { self.v.set(~[]) }\n-}\n-\n-/// Implements the map::map interface for smallintmap\n-impl<V:Copy> SmallIntMap<V> {\n-    #[inline(always)]\n-    fn insert(key: uint, value: V) -> bool {\n-        let exists = contains_key(self, key);\n-        insert(self, key, value);\n-        return !exists;\n-    }\n-    fn remove(key: uint) -> bool {\n-        if key >= self.v.len() {\n-            return false;\n-        }\n-        let old = self.v.get_elt(key);\n-        self.v.set_elt(key, None);\n-        old.is_some()\n-    }\n-    pure fn contains_key(key: uint) -> bool {\n-        contains_key(self, key)\n-    }\n-    pure fn contains_key_ref(key: &uint) -> bool {\n-        contains_key(self, *key)\n-    }\n-    pure fn get(key: uint) -> V { get(self, key) }\n-    pure fn find(key: uint) -> Option<V> { find(self, key) }\n-\n-    fn update_with_key(key: uint, val: V, ff: fn(uint, V, V) -> V) -> bool {\n-        match self.find(key) {\n-            None            => return self.insert(key, val),\n-            Some(copy orig) => return self.insert(key, ff(key, orig, val)),\n-        }\n-    }\n-\n-    fn update(key: uint, newval: V, ff: fn(V, V) -> V) -> bool {\n-        return self.update_with_key(key, newval, |_k, v, v1| ff(v,v1));\n-    }\n-\n-    pure fn each(it: fn(key: uint, value: V) -> bool) {\n-        self.each_ref(|k, v| it(*k, *v))\n-    }\n-    pure fn each_key(it: fn(key: uint) -> bool) {\n-        self.each_ref(|k, _v| it(*k))\n-    }\n-    pure fn each_value(it: fn(value: V) -> bool) {\n-        self.each_ref(|_k, v| it(*v))\n-    }\n-    pure fn each_ref(it: fn(key: &uint, value: &V) -> bool) {\n-        let mut idx = 0u, l = self.v.len();\n-        while idx < l {\n-            match self.v.get_elt(idx) {\n-              Some(ref elt) => if !it(&idx, elt) { break },\n-              None => ()\n-            }\n-            idx += 1u;\n-        }\n-    }\n-    pure fn each_key_ref(blk: fn(key: &uint) -> bool) {\n-        self.each_ref(|k, _v| blk(k))\n-    }\n-    pure fn each_value_ref(blk: fn(value: &V) -> bool) {\n-        self.each_ref(|_k, v| blk(v))\n-    }\n-}\n-\n-impl<V:Copy> ops::Index<uint, V> for SmallIntMap<V> {\n-    pure fn index(&self, key: uint) -> V {\n-        unsafe {\n-            get(*self, key)\n-        }\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::{mk, SmallIntMap};\n-\n-    use core::option::None;\n-\n-    #[test]\n-    fn test_len() {\n-        let mut map = mk();\n-        assert map.len() == 0;\n-        assert map.is_empty();\n-        map.insert(5, 20);\n-        assert map.len() == 1;\n-        assert !map.is_empty();\n-        map.insert(11, 12);\n-        assert map.len() == 2;\n-        assert !map.is_empty();\n-        map.insert(14, 22);\n-        assert map.len() == 3;\n-        assert !map.is_empty();\n-    }\n-\n-    #[test]\n-    fn test_clear() {\n-        let mut map = mk();\n-        map.insert(5, 20);\n-        map.insert(11, 12);\n-        map.insert(14, 22);\n-        map.clear();\n-        assert map.is_empty();\n-        assert map.find(5).is_none();\n-        assert map.find(11).is_none();\n-        assert map.find(14).is_none();\n-    }\n-\n-    #[test]\n-    fn test_insert_with_key() {\n-        let map: SmallIntMap<uint> = mk();\n-\n-        // given a new key, initialize it with this new count, given\n-        // given an existing key, add more to its count\n-        fn addMoreToCount(_k: uint, v0: uint, v1: uint) -> uint {\n-            v0 + v1\n-        }\n-\n-        fn addMoreToCount_simple(v0: uint, v1: uint) -> uint {\n-            v0 + v1\n-        }\n-\n-        // count integers\n-        map.update(3, 1, addMoreToCount_simple);\n-        map.update_with_key(9, 1, addMoreToCount);\n-        map.update(3, 7, addMoreToCount_simple);\n-        map.update_with_key(5, 3, addMoreToCount);\n-        map.update_with_key(3, 2, addMoreToCount);\n-\n-        // check the total counts\n-        assert map.find(3).get() == 10;\n-        assert map.find(5).get() == 3;\n-        assert map.find(9).get() == 1;\n-\n-        // sadly, no sevens were counted\n-        assert None == map.find(7);\n-    }\n-}"}, {"sha": "1ece8c17ff7a794144edb000c57db609f914ce7a", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/1afddff97ff825c88b106f98955ed84d135ef6f7/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=1afddff97ff825c88b106f98955ed84d135ef6f7", "patch": "@@ -75,7 +75,6 @@ pub mod oldmap;\n pub mod priority_queue;\n pub mod rope;\n pub mod smallintmap;\n-pub mod oldsmallintmap;\n pub mod sort;\n pub mod treemap;\n "}]}