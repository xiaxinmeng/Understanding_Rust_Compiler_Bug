{"sha": "66f4883308d999c8b405fdfd442562b8600a462d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZjQ4ODMzMDhkOTk5YzhiNDA1ZmRmZDQ0MjU2MmI4NjAwYTQ2MmQ=", "commit": {"author": {"name": "Casey Rodarmor", "email": "casey@rodarmor.com", "date": "2020-10-27T02:08:42Z"}, "committer": {"name": "Casey Rodarmor", "email": "casey@rodarmor.com", "date": "2021-02-12T08:02:52Z"}, "message": "[librustdoc] Reform lang string token splitting\n\nOnly split doctest lang strings on `,`, ` `, and `\\t`. Additionally, to\npreserve backwards compatibility with pandoc-style langstrings, strip a\nsurrounding `{}`, and remove leading `.`s from each token.\n\nPrior to this change, doctest lang strings were split on all\nnon-alphanumeric characters except `-` or `_`, which limited future\nextensions to doctest lang string tokens, for example using `=` for\nkey-value tokens.\n\nThis is a breaking change, although it is not expected to be disruptive,\nbecause lang strings using separators other than `,` and ` ` are not\nvery common", "tree": {"sha": "86a5d6b52b22914633ca307b7739549f72b4f5e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86a5d6b52b22914633ca307b7739549f72b4f5e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66f4883308d999c8b405fdfd442562b8600a462d", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMlna7bKWNrDiAlpwVWGGsVPsb+AFAmAmN0sACgkQVWGGsVPs\nb+AQHw//UZHchsTgoYMs/JJbb1D0hxhqcSVEeSvWtQU2AYG0LX6+bsWRiEYvWizz\nXEN7eGY4EbtrdeJmfWAFuCR9UQ785QPX3npfIv6eXbHXnPsfhkSMR6apj9Fvorrl\njulWjrkIT9c599cgB2S0AIf9vd/lQU4SSKSS0sqMOPpqmhjdICayx6XOLecX/AXW\n0qtumFN2IAaGFhW1lFbJnR2WorCt0UAP8+51hKMYEggnPyxvwGty7iaHjTA/xEKH\nIjZbBifAcjUEBONIn22x/Vsmv7uiSeiDIjpMfytQY4rOun9gdiaaUUAOSVkHWVA9\naDNhPx7Do29SklunysAjayaBgfjwE08svxn0cgB4zVr0Nx1HJp0wsghSGllG4pOA\nfpK3oxOqmiKFhoFRqGnnvwXALPGucngIcjg8VvMBjc8L7fR4lwM7xHctImE/yOqt\nqeB+tLRzr2q6A/TIEJhuE0gmqglZMG+FY1feqB3rEiPAnU1khELvhqkjHRLwsS9E\n9EvSbQ1SosQa6X/CJQS5pUP95bz7OgLCefOAcw2MFXM3PC2qlG1QIhwPCxJGci6e\ntchB6gnrhBvQcJ+L3uS+BfVpug3kQ20RjsrWaY/xNN1JDzB7FPp6CfLc6f2pDKG1\nALiAHfDX8KOeO8SpPoHVUkhz/Gq/ppPM8uaFpFxdY/TxvIXD09o=\n=hNYX\n-----END PGP SIGNATURE-----", "payload": "tree 86a5d6b52b22914633ca307b7739549f72b4f5e6\nparent e9920ef7749d11fc71cc32ca4ba055bcfeaab945\nauthor Casey Rodarmor <casey@rodarmor.com> 1603764522 -0700\ncommitter Casey Rodarmor <casey@rodarmor.com> 1613116972 -0800\n\n[librustdoc] Reform lang string token splitting\n\nOnly split doctest lang strings on `,`, ` `, and `\\t`. Additionally, to\npreserve backwards compatibility with pandoc-style langstrings, strip a\nsurrounding `{}`, and remove leading `.`s from each token.\n\nPrior to this change, doctest lang strings were split on all\nnon-alphanumeric characters except `-` or `_`, which limited future\nextensions to doctest lang string tokens, for example using `=` for\nkey-value tokens.\n\nThis is a breaking change, although it is not expected to be disruptive,\nbecause lang strings using separators other than `,` and ` ` are not\nvery common\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66f4883308d999c8b405fdfd442562b8600a462d", "html_url": "https://github.com/rust-lang/rust/commit/66f4883308d999c8b405fdfd442562b8600a462d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66f4883308d999c8b405fdfd442562b8600a462d/comments", "author": {"login": "casey", "id": 1945, "node_id": "MDQ6VXNlcjE5NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/casey", "html_url": "https://github.com/casey", "followers_url": "https://api.github.com/users/casey/followers", "following_url": "https://api.github.com/users/casey/following{/other_user}", "gists_url": "https://api.github.com/users/casey/gists{/gist_id}", "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/casey/subscriptions", "organizations_url": "https://api.github.com/users/casey/orgs", "repos_url": "https://api.github.com/users/casey/repos", "events_url": "https://api.github.com/users/casey/events{/privacy}", "received_events_url": "https://api.github.com/users/casey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "casey", "id": 1945, "node_id": "MDQ6VXNlcjE5NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/casey", "html_url": "https://github.com/casey", "followers_url": "https://api.github.com/users/casey/followers", "following_url": "https://api.github.com/users/casey/following{/other_user}", "gists_url": "https://api.github.com/users/casey/gists{/gist_id}", "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/casey/subscriptions", "organizations_url": "https://api.github.com/users/casey/orgs", "repos_url": "https://api.github.com/users/casey/repos", "events_url": "https://api.github.com/users/casey/events{/privacy}", "received_events_url": "https://api.github.com/users/casey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9920ef7749d11fc71cc32ca4ba055bcfeaab945", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9920ef7749d11fc71cc32ca4ba055bcfeaab945", "html_url": "https://github.com/rust-lang/rust/commit/e9920ef7749d11fc71cc32ca4ba055bcfeaab945"}], "stats": {"total": 104, "additions": 84, "deletions": 20}, "files": [{"sha": "760c5897698aa6137cf5767a1d19ea16f2f6c81c", "filename": "compiler/rustc_error_codes/src/error_codes/E0761.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f4883308d999c8b405fdfd442562b8600a462d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0761.md", "raw_url": "https://github.com/rust-lang/rust/raw/66f4883308d999c8b405fdfd442562b8600a462d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0761.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0761.md?ref=66f4883308d999c8b405fdfd442562b8600a462d", "patch": "@@ -2,7 +2,7 @@ Multiple candidate files were found for an out-of-line module.\n \n Erroneous code example:\n \n-```ignore (multiple source files required for compile_fail)\n+```ignore (Multiple source files are required for compile_fail.)\n // file: ambiguous_module/mod.rs\n \n fn foo() {}"}, {"sha": "3f7808c20901b13418db34826d4b698269fecadb", "filename": "compiler/rustc_mir/src/dataflow/framework/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66f4883308d999c8b405fdfd442562b8600a462d/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f4883308d999c8b405fdfd442562b8600a462d/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs?ref=66f4883308d999c8b405fdfd442562b8600a462d", "patch": "@@ -10,7 +10,7 @@\n //! fixpoint solution to your dataflow problem, or implement the `ResultsVisitor` interface and use\n //! `visit_results`. The following example uses the `ResultsCursor` approach.\n //!\n-//! ```ignore(cross-crate-imports)\n+//! ```ignore (cross-crate-imports)\n //! use rustc_mir::dataflow::Analysis; // Makes `into_engine` available.\n //!\n //! fn do_my_analysis(tcx: TyCtxt<'tcx>, body: &mir::Body<'tcx>) {\n@@ -211,7 +211,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// default impl and the one for all `A: GenKillAnalysis` will do the right thing.\n     /// Its purpose is to enable method chaining like so:\n     ///\n-    /// ```ignore(cross-crate-imports)\n+    /// ```ignore (cross-crate-imports)\n     /// let results = MyAnalysis::new(tcx, body)\n     ///     .into_engine(tcx, body, def_id)\n     ///     .iterate_to_fixpoint()"}, {"sha": "bcd2b207c4f6f0c2b4bd335e59c324cb5378492f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66f4883308d999c8b405fdfd442562b8600a462d/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f4883308d999c8b405fdfd442562b8600a462d/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=66f4883308d999c8b405fdfd442562b8600a462d", "patch": "@@ -336,7 +336,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.expect(\"fruits are healthy\"), \"value\");\n     /// ```\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Option<&str> = None;\n     /// x.expect(\"fruits are healthy\"); // panics with `fruits are healthy`\n     /// ```\n@@ -372,7 +372,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.unwrap(), \"air\");\n     /// ```\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Option<&str> = None;\n     /// assert_eq!(x.unwrap(), \"air\"); // fails\n     /// ```\n@@ -1114,7 +1114,7 @@ impl<T: fmt::Debug> Option<T> {\n     /// }\n     /// ```\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// #![feature(option_expect_none)]\n     ///\n     /// use std::collections::HashMap;\n@@ -1156,7 +1156,7 @@ impl<T: fmt::Debug> Option<T> {\n     /// }\n     /// ```\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// #![feature(option_unwrap_none)]\n     ///\n     /// use std::collections::HashMap;"}, {"sha": "048b699d2768ba702984234eba83ce108b5c5bb0", "filename": "library/core/src/result.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66f4883308d999c8b405fdfd442562b8600a462d/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f4883308d999c8b405fdfd442562b8600a462d/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=66f4883308d999c8b405fdfd442562b8600a462d", "patch": "@@ -112,7 +112,7 @@\n //! assert success with [`expect`]. This will panic if the\n //! write fails, providing a marginally useful message indicating why:\n //!\n-//! ```{.no_run}\n+//! ```no_run\n //! use std::fs::File;\n //! use std::io::prelude::*;\n //!\n@@ -122,7 +122,7 @@\n //!\n //! You might also simply assert success:\n //!\n-//! ```{.no_run}\n+//! ```no_run\n //! # use std::fs::File;\n //! # use std::io::prelude::*;\n //! # let mut file = File::create(\"valuable_data.txt\").unwrap();\n@@ -984,7 +984,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     ///\n     /// Basic usage:\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n     /// ```\n@@ -1024,7 +1024,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// assert_eq!(x.unwrap(), 2);\n     /// ```\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.unwrap(); // panics with `emergency failure`\n     /// ```\n@@ -1052,7 +1052,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     ///\n     /// Basic usage:\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Result<u32, &str> = Ok(10);\n     /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n     /// ```\n@@ -1075,7 +1075,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Result<u32, &str> = Ok(2);\n     /// x.unwrap_err(); // panics with `2`\n     /// ```"}, {"sha": "edc1229d0e4e8ebadfe0bf12526988fbb4548de3", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/66f4883308d999c8b405fdfd442562b8600a462d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f4883308d999c8b405fdfd442562b8600a462d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=66f4883308d999c8b405fdfd442562b8600a462d", "patch": "@@ -779,6 +779,31 @@ impl LangString {\n         Self::parse(string, allow_error_code_check, enable_per_target_ignores, None)\n     }\n \n+    fn tokens(string: &str) -> impl Iterator<Item = &str> {\n+        // Pandoc, which Rust once used for generating documentation,\n+        // expects lang strings to be surrounded by `{}` and for each token\n+        // to be proceeded by a `.`. Since some of these lang strings are still\n+        // loose in the wild, we strip a pair of surrounding `{}` from the lang\n+        // string and a leading `.` from each token.\n+\n+        let string = string.trim();\n+\n+        let first = string.chars().next();\n+        let last = string.chars().last();\n+\n+        let string = if first == Some('{') && last == Some('}') {\n+            &string[1..string.len() - 1]\n+        } else {\n+            string\n+        };\n+\n+        string\n+            .split(|c| c == ',' || c == ' ' || c == '\\t')\n+            .map(str::trim)\n+            .map(|token| if token.chars().next() == Some('.') { &token[1..] } else { token })\n+            .filter(|token| !token.is_empty())\n+    }\n+\n     fn parse(\n         string: &str,\n         allow_error_code_check: ErrorCodes,\n@@ -792,11 +817,11 @@ impl LangString {\n         let mut ignores = vec![];\n \n         data.original = string.to_owned();\n-        let tokens = string.split(|c: char| !(c == '_' || c == '-' || c.is_alphanumeric()));\n+\n+        let tokens = Self::tokens(string).collect::<Vec<&str>>();\n \n         for token in tokens {\n-            match token.trim() {\n-                \"\" => {}\n+            match token {\n                 \"should_panic\" => {\n                     data.should_panic = true;\n                     seen_rust_tags = !seen_other_tags;\n@@ -893,6 +918,7 @@ impl LangString {\n                 _ => seen_other_tags = true,\n             }\n         }\n+\n         // ignore-foo overrides ignore\n         if !ignores.is_empty() {\n             data.ignore = Ignore::Some(ignores);"}, {"sha": "53f85d02575fea2cebab9fdc7e74cdf880fe0106", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/66f4883308d999c8b405fdfd442562b8600a462d/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f4883308d999c8b405fdfd442562b8600a462d/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=66f4883308d999c8b405fdfd442562b8600a462d", "patch": "@@ -58,6 +58,9 @@ fn test_lang_string_parse() {\n \n     t(Default::default());\n     t(LangString { original: \"rust\".into(), ..Default::default() });\n+    t(LangString { original: \".rust\".into(), ..Default::default() });\n+    t(LangString { original: \"{rust}\".into(), ..Default::default() });\n+    t(LangString { original: \"{.rust}\".into(), ..Default::default() });\n     t(LangString { original: \"sh\".into(), rust: false, ..Default::default() });\n     t(LangString { original: \"ignore\".into(), ignore: Ignore::All, ..Default::default() });\n     t(LangString {\n@@ -75,16 +78,16 @@ fn test_lang_string_parse() {\n         ..Default::default()\n     });\n     t(LangString { original: \"allow_fail\".into(), allow_fail: true, ..Default::default() });\n-    t(LangString { original: \"{.no_run .example}\".into(), no_run: true, ..Default::default() });\n+    t(LangString { original: \"no_run,example\".into(), no_run: true, ..Default::default() });\n     t(LangString {\n-        original: \"{.sh .should_panic}\".into(),\n+        original: \"sh,should_panic\".into(),\n         should_panic: true,\n         rust: false,\n         ..Default::default()\n     });\n-    t(LangString { original: \"{.example .rust}\".into(), ..Default::default() });\n+    t(LangString { original: \"example,rust\".into(), ..Default::default() });\n     t(LangString {\n-        original: \"{.test_harness .rust}\".into(),\n+        original: \"test_harness,.rust\".into(),\n         test_harness: true,\n         ..Default::default()\n     });\n@@ -100,6 +103,18 @@ fn test_lang_string_parse() {\n         rust: false,\n         ..Default::default()\n     });\n+    t(LangString {\n+        original: \"text,no_run, \".into(),\n+        no_run: true,\n+        rust: false,\n+        ..Default::default()\n+    });\n+    t(LangString {\n+        original: \"text,no_run,\".into(),\n+        no_run: true,\n+        rust: false,\n+        ..Default::default()\n+    });\n     t(LangString {\n         original: \"edition2015\".into(),\n         edition: Some(Edition::Edition2015),\n@@ -112,6 +127,29 @@ fn test_lang_string_parse() {\n     });\n }\n \n+#[test]\n+fn test_lang_string_tokenizer() {\n+    fn case(lang_string: &str, want: &[&str]) {\n+        let have = LangString::tokens(lang_string).collect::<Vec<&str>>();\n+        assert_eq!(have, want, \"Unexpected lang string split for `{}`\", lang_string);\n+    }\n+\n+    case(\"\", &[]);\n+    case(\"foo\", &[\"foo\"]);\n+    case(\"foo,bar\", &[\"foo\", \"bar\"]);\n+    case(\".foo,.bar\", &[\"foo\", \"bar\"]);\n+    case(\"{.foo,.bar}\", &[\"foo\", \"bar\"]);\n+    case(\"  {.foo,.bar}  \", &[\"foo\", \"bar\"]);\n+    case(\"foo bar\", &[\"foo\", \"bar\"]);\n+    case(\"foo\\tbar\", &[\"foo\", \"bar\"]);\n+    case(\"foo\\t, bar\", &[\"foo\", \"bar\"]);\n+    case(\" foo , bar \", &[\"foo\", \"bar\"]);\n+    case(\",,foo,,bar,,\", &[\"foo\", \"bar\"]);\n+    case(\"foo=bar\", &[\"foo=bar\"]);\n+    case(\"a-b-c\", &[\"a-b-c\"]);\n+    case(\"a_b_c\", &[\"a_b_c\"]);\n+}\n+\n #[test]\n fn test_header() {\n     fn t(input: &str, expect: &str) {"}]}