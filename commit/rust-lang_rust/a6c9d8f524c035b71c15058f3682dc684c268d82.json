{"sha": "a6c9d8f524c035b71c15058f3682dc684c268d82", "node_id": "C_kwDOAAsO6NoAKGE2YzlkOGY1MjRjMDM1YjcxYzE1MDU4ZjM2ODJkYzY4NGMyNjhkODI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-14T22:52:04Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-18T19:14:42Z"}, "message": "Invert the keyword list to list only *no* space before delim", "tree": {"sha": "a01644decab845224b84a12dee91c20565f514e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a01644decab845224b84a12dee91c20565f514e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c9d8f524c035b71c15058f3682dc684c268d82", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHnEaIACgkQ+boUO5X/\nbYJn1A//e1EB+T0FLMDBjOuIdAsVEQKAT07eQ40uQUwHl+1T6Y25IfCFFNPyn3hY\nfp4ytI2B63HYgFKYGhmDOTfhREoIARHej9SqCC5F2JaZ9Ta72AvO9nEbgVger8JJ\nk38v2wPENUvANp9UA59D/aGk/3YXES/bGiVWxXPzjxHny9LOClme0N+YxEU16khI\ndixtiIpy9zLLEPyTQLM50kNOPfYmwbmuv6c0+U6iF5Q+WboStLAdmoyhvI39VOXk\nlpryq8jFeFJYe4ASg9oGxoKQW860IIo7EUCDlymRbOPZO3D80S3qJW5qiUKAZpNX\nrTIMafbVl8KyXgCntTM0L4vR5+Wnzy434TG3l93f/1HwnLZ5t0HUFM4GTytOH+Z0\neJHK7Sb3waw/vn4aJIPqYCspSeI/Lht82XYSKLHr3wvl5EO4FhnPBJ7eNHRIsPjb\ntEl5Z5/xksiChtTm5MY4pmU0oDYwWDPNIW3de9h9HgwJdsuut4zUUf5nVpgZLyq/\nyZh5+GPo7GJLVmdjOH9wLuAs4LEfe9w7GsCGn1J9C34nd0BscA6GcKmZp9MIQzHU\nOgnb4+YvFTHgGYvXYtcmQ/HEhY9oPVY3kSu3vE1LrQwffRN2kWVaj8ZeKz0LptzN\n+yuadNjhIRxoi6zRCbtgSgvWahNONE/VDyPrOjPCenhzW7VrZuM=\n=fC59\n-----END PGP SIGNATURE-----", "payload": "tree a01644decab845224b84a12dee91c20565f514e0\nparent c70c646a0f7d7e9a1a481d5ae5b26b140cfd4cf2\nauthor David Tolnay <dtolnay@gmail.com> 1642200724 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1642533282 -0800\n\nInvert the keyword list to list only *no* space before delim\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c9d8f524c035b71c15058f3682dc684c268d82", "html_url": "https://github.com/rust-lang/rust/commit/a6c9d8f524c035b71c15058f3682dc684c268d82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c9d8f524c035b71c15058f3682dc684c268d82/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c70c646a0f7d7e9a1a481d5ae5b26b140cfd4cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c70c646a0f7d7e9a1a481d5ae5b26b140cfd4cf2", "html_url": "https://github.com/rust-lang/rust/commit/c70c646a0f7d7e9a1a481d5ae5b26b140cfd4cf2"}], "stats": {"total": 98, "additions": 60, "deletions": 38}, "files": [{"sha": "dff370ab75025c3111d2fe653f1a02949e367843", "filename": "src/librustdoc/clean/render_macro_matchers.rs", "status": "modified", "additions": 60, "deletions": 38, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/a6c9d8f524c035b71c15058f3682dc684c268d82/src%2Flibrustdoc%2Fclean%2Frender_macro_matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c9d8f524c035b71c15058f3682dc684c268d82/src%2Flibrustdoc%2Fclean%2Frender_macro_matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Frender_macro_matchers.rs?ref=a6c9d8f524c035b71c15058f3682dc684c268d82", "patch": "@@ -5,7 +5,8 @@ use rustc_ast_pretty::pprust::PrintState;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::FilePathMapping;\n-use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::symbol::{kw, Ident, Symbol};\n+use rustc_span::Span;\n \n /// Render a macro matcher in a format suitable for displaying to the user\n /// as part of an item declaration.\n@@ -153,7 +154,7 @@ fn print_tts(printer: &mut Printer<'_>, tts: &TokenStream) {\n                 }\n                 (Pound, token::Not) => (false, PoundBang),\n                 (_, token::Ident(symbol, /* is_raw */ false))\n-                    if !usually_needs_space_between_keyword_and_open_delim(*symbol) =>\n+                    if !usually_needs_space_between_keyword_and_open_delim(*symbol, tt.span) =>\n                 {\n                     (true, Ident)\n                 }\n@@ -177,42 +178,63 @@ fn print_tts(printer: &mut Printer<'_>, tts: &TokenStream) {\n     }\n }\n \n-// This rough subset of keywords is listed here to distinguish tokens resembling\n-// `f(0)` (no space between ident and paren) from tokens resembling `if let (0,\n-// 0) = x` (space between ident and paren).\n-fn usually_needs_space_between_keyword_and_open_delim(symbol: Symbol) -> bool {\n+fn usually_needs_space_between_keyword_and_open_delim(symbol: Symbol, span: Span) -> bool {\n+    let ident = Ident { name: symbol, span };\n+    let is_keyword = ident.is_used_keyword() || ident.is_unused_keyword();\n+    if !is_keyword {\n+        // An identifier that is not a keyword usually does not need a space\n+        // before an open delim. For example: `f(0)` or `f[0]`.\n+        return false;\n+    }\n+\n     match symbol {\n-        kw::As\n-        | kw::Box\n-        | kw::Break\n-        | kw::Const\n-        | kw::Continue\n-        | kw::Crate\n-        | kw::Else\n-        | kw::Enum\n-        | kw::Extern\n-        | kw::For\n-        | kw::If\n-        | kw::Impl\n-        | kw::In\n-        | kw::Let\n-        | kw::Loop\n-        | kw::Macro\n-        | kw::Match\n-        | kw::Mod\n-        | kw::Move\n-        | kw::Mut\n-        | kw::Ref\n-        | kw::Return\n-        | kw::Static\n-        | kw::Struct\n-        | kw::Trait\n-        | kw::Type\n-        | kw::Unsafe\n-        | kw::Use\n-        | kw::Where\n-        | kw::While\n-        | kw::Yield => true,\n-        _ => false,\n+        // No space after keywords that are syntactically an expression. For\n+        // example: a tuple struct created with `let _ = Self(0, 0)`, or if\n+        // someone has `impl Index<MyStruct> for bool` then `true[MyStruct]`.\n+        kw::False | kw::SelfLower | kw::SelfUpper | kw::True => false,\n+\n+        // No space, as in `let _: fn();`\n+        kw::Fn => false,\n+\n+        // No space, as in `pub(crate) type T;`\n+        kw::Pub => false,\n+\n+        // No space for keywords that can end an expression, as in `fut.await()`\n+        // where fut's Output type is `fn()`.\n+        kw::Await => false,\n+\n+        // Otherwise space after keyword. Some examples:\n+        //\n+        // `expr as [T; 2]`\n+        //         ^\n+        // `box (tuple,)`\n+        //     ^\n+        // `break (tuple,)`\n+        //       ^\n+        // `type T = dyn (Fn() -> dyn Trait) + Send;`\n+        //              ^\n+        // `for (tuple,) in iter {}`\n+        //     ^\n+        // `if (tuple,) == v {}`\n+        //    ^\n+        // `impl [T] {}`\n+        //      ^\n+        // `for x in [..] {}`\n+        //          ^\n+        // `let () = unit;`\n+        //     ^\n+        // `match [x, y] {...}`\n+        //       ^\n+        // `&mut (x as T)`\n+        //      ^\n+        // `return [];`\n+        //        ^\n+        // `fn f<T>() where (): Into<T>`\n+        //                 ^\n+        // `while (a + b).what() {}`\n+        //       ^\n+        // `yield [];`\n+        //       ^\n+        _ => true,\n     }\n }"}]}