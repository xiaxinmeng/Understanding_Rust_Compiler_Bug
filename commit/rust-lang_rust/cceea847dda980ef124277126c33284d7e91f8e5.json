{"sha": "cceea847dda980ef124277126c33284d7e91f8e5", "node_id": "C_kwDOAAsO6NoAKGNjZWVhODQ3ZGRhOTgwZWYxMjQyNzcxMjZjMzMyODRkN2U5MWY4ZTU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-04T11:36:27Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-04T11:36:27Z"}, "message": "Sync from rust 44cfafe2fafe816395d3acc434663a45d5178c41", "tree": {"sha": "f01c80324947d8b9873cd7beb28b07c9d5b3eef8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f01c80324947d8b9873cd7beb28b07c9d5b3eef8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cceea847dda980ef124277126c33284d7e91f8e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cceea847dda980ef124277126c33284d7e91f8e5", "html_url": "https://github.com/rust-lang/rust/commit/cceea847dda980ef124277126c33284d7e91f8e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cceea847dda980ef124277126c33284d7e91f8e5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "162365e3d64786dcd6deca7c08285e9c16aa26cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/162365e3d64786dcd6deca7c08285e9c16aa26cb", "html_url": "https://github.com/rust-lang/rust/commit/162365e3d64786dcd6deca7c08285e9c16aa26cb"}, {"sha": "1b57cb6762a36c2f7823e87829c18b2ccd00f6de", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b57cb6762a36c2f7823e87829c18b2ccd00f6de", "html_url": "https://github.com/rust-lang/rust/commit/1b57cb6762a36c2f7823e87829c18b2ccd00f6de"}], "stats": {"total": 61, "additions": 30, "deletions": 31}, "files": [{"sha": "5bb3d850659ce432d05ce07ca250c9b65ce6624e", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/cceea847dda980ef124277126c33284d7e91f8e5/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cceea847dda980ef124277126c33284d7e91f8e5/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=cceea847dda980ef124277126c33284d7e91f8e5", "patch": "@@ -21,7 +21,8 @@ mod simd;\n pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n-use rustc_middle::ty::layout::HasParamEnv;\n+use rustc_middle::ty;\n+use rustc_middle::ty::layout::{HasParamEnv, ValidityRequirement};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -634,37 +635,35 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             intrinsic_args!(fx, args => (); intrinsic);\n \n             let ty = substs.type_at(0);\n-            let layout = fx.layout_of(ty);\n-            let do_panic = match intrinsic {\n-                sym::assert_inhabited => layout.abi.is_uninhabited(),\n-                sym::assert_zero_valid => !fx\n-                    .tcx\n-                    .permits_zero_init(fx.param_env().and(ty))\n-                    .expect(\"expected to have layout during codegen\"),\n-                sym::assert_mem_uninitialized_valid => !fx\n+\n+            let requirement = ValidityRequirement::from_intrinsic(intrinsic);\n+\n+            if let Some(requirement) = requirement {\n+                let do_panic = !fx\n                     .tcx\n-                    .permits_uninit_init(fx.param_env().and(ty))\n-                    .expect(\"expected to have layout during codegen\"),\n-                _ => unreachable!(),\n-            };\n-            if do_panic {\n-                let msg_str = with_no_visible_paths!({\n-                    with_no_trimmed_paths!({\n-                        if layout.abi.is_uninhabited() {\n-                            // Use this error even for the other intrinsics as it is more precise.\n-                            format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n-                        } else if intrinsic == sym::assert_zero_valid {\n-                            format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n-                        } else {\n-                            format!(\n-                                \"attempted to leave type `{}` uninitialized, which is invalid\",\n-                                ty\n-                            )\n-                        }\n-                    })\n-                });\n-                crate::base::codegen_panic_nounwind(fx, &msg_str, source_info);\n-                return;\n+                    .check_validity_requirement((requirement, fx.param_env().and(ty)))\n+                    .expect(\"expect to have layout during codegen\");\n+\n+                if do_panic {\n+                    let layout = fx.layout_of(ty);\n+                    let msg_str = with_no_visible_paths!({\n+                        with_no_trimmed_paths!({\n+                            if layout.abi.is_uninhabited() {\n+                                // Use this error even for the other intrinsics as it is more precise.\n+                                format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n+                            } else if intrinsic == sym::assert_zero_valid {\n+                                format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n+                            } else {\n+                                format!(\n+                                    \"attempted to leave type `{}` uninitialized, which is invalid\",\n+                                    ty\n+                                )\n+                            }\n+                        })\n+                    });\n+                    crate::base::codegen_panic_nounwind(fx, &msg_str, source_info);\n+                    return;\n+                }\n             }\n         }\n "}]}