{"sha": "18542568a8f7d5580094634c4a10695fb71ba74a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NTQyNTY4YThmN2Q1NTgwMDk0NjM0YzRhMTA2OTVmYjcxYmE3NGE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-15T02:56:41Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-15T04:15:56Z"}, "message": "std: rename .connect/.concat in VectorVector to avoid conflicting with StrVector.\n\nThis is caused by StrVector having a generic implementation for &[S]\nand so #5898 means that method resolution of ~[~[1]].concat() sees that\nboth StrVector and VectorVector have methods that (superficially) match.\n\nThey are now connect_vec and concat_vec, which means that they can actually be\ncalled.", "tree": {"sha": "a68e800bf659c4aae26ec9ba1bd88580150fccad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a68e800bf659c4aae26ec9ba1bd88580150fccad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18542568a8f7d5580094634c4a10695fb71ba74a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18542568a8f7d5580094634c4a10695fb71ba74a", "html_url": "https://github.com/rust-lang/rust/commit/18542568a8f7d5580094634c4a10695fb71ba74a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18542568a8f7d5580094634c4a10695fb71ba74a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e05747b5cf75671b7fb7c634eba8fe56f9eb39", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e05747b5cf75671b7fb7c634eba8fe56f9eb39", "html_url": "https://github.com/rust-lang/rust/commit/38e05747b5cf75671b7fb7c634eba8fe56f9eb39"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "1583d189a1aef26a08442145b2922cce96d84bc5", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/18542568a8f7d5580094634c4a10695fb71ba74a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18542568a8f7d5580094634c4a10695fb71ba74a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=18542568a8f7d5580094634c4a10695fb71ba74a", "patch": "@@ -1002,31 +1002,33 @@ pub fn retain<T>(v: &mut ~[T], f: &fn(t: &T) -> bool) {\n }\n \n /// Flattens a vector of vectors of T into a single vector of T.\n-pub fn concat<T:Copy>(v: &[~[T]]) -> ~[T] { v.concat() }\n+pub fn concat<T:Copy>(v: &[~[T]]) -> ~[T] { v.concat_vec() }\n \n /// Concatenate a vector of vectors, placing a given separator between each\n-pub fn connect<T:Copy>(v: &[~[T]], sep: &T) -> ~[T] { v.connect(sep) }\n+pub fn connect<T:Copy>(v: &[~[T]], sep: &T) -> ~[T] { v.connect_vec(sep) }\n \n /// Flattens a vector of vectors of T into a single vector of T.\n-pub fn concat_slices<T:Copy>(v: &[&[T]]) -> ~[T] { v.concat() }\n+pub fn concat_slices<T:Copy>(v: &[&[T]]) -> ~[T] { v.concat_vec() }\n \n /// Concatenate a vector of vectors, placing a given separator between each\n-pub fn connect_slices<T:Copy>(v: &[&[T]], sep: &T) -> ~[T] { v.connect(sep) }\n+pub fn connect_slices<T:Copy>(v: &[&[T]], sep: &T) -> ~[T] { v.connect_vec(sep) }\n \n #[allow(missing_doc)]\n pub trait VectorVector<T> {\n-    pub fn concat(&self) -> ~[T];\n-    pub fn connect(&self, sep: &T) -> ~[T];\n+    // FIXME #5898: calling these .concat and .connect conflicts with\n+    // StrVector::con{cat,nect}, since they have generic contents.\n+    pub fn concat_vec(&self) -> ~[T];\n+    pub fn connect_vec(&self, sep: &T) -> ~[T];\n }\n \n impl<'self, T:Copy> VectorVector<T> for &'self [~[T]] {\n     /// Flattens a vector of slices of T into a single vector of T.\n-    pub fn concat(&self) -> ~[T] {\n+    pub fn concat_vec(&self) -> ~[T] {\n         self.flat_map(|&inner| inner)\n     }\n \n     /// Concatenate a vector of vectors, placing a given separator between each.\n-    pub fn connect(&self, sep: &T) -> ~[T] {\n+    pub fn connect_vec(&self, sep: &T) -> ~[T] {\n         let mut r = ~[];\n         let mut first = true;\n         for self.each |&inner| {\n@@ -1039,12 +1041,12 @@ impl<'self, T:Copy> VectorVector<T> for &'self [~[T]] {\n \n impl<'self, T:Copy> VectorVector<T> for &'self [&'self [T]] {\n     /// Flattens a vector of slices of T into a single vector of T.\n-    pub fn concat(&self) -> ~[T] {\n+    pub fn concat_vec(&self) -> ~[T] {\n         self.flat_map(|&inner| inner.to_owned())\n     }\n \n     /// Concatenate a vector of slices, placing a given separator between each.\n-    pub fn connect(&self, sep: &T) -> ~[T] {\n+    pub fn connect_vec(&self, sep: &T) -> ~[T] {\n         let mut r = ~[];\n         let mut first = true;\n         for self.each |&inner| {\n@@ -3704,25 +3706,25 @@ mod tests {\n     #[test]\n     fn test_concat() {\n         assert_eq!(concat([~[1], ~[2,3]]), ~[1, 2, 3]);\n-        assert_eq!([~[1], ~[2,3]].concat(), ~[1, 2, 3]);\n+        assert_eq!([~[1], ~[2,3]].concat_vec(), ~[1, 2, 3]);\n \n         assert_eq!(concat_slices([&[1], &[2,3]]), ~[1, 2, 3]);\n-        assert_eq!([&[1], &[2,3]].concat(), ~[1, 2, 3]);\n+        assert_eq!([&[1], &[2,3]].concat_vec(), ~[1, 2, 3]);\n     }\n \n     #[test]\n     fn test_connect() {\n         assert_eq!(connect([], &0), ~[]);\n         assert_eq!(connect([~[1], ~[2, 3]], &0), ~[1, 0, 2, 3]);\n         assert_eq!(connect([~[1], ~[2], ~[3]], &0), ~[1, 0, 2, 0, 3]);\n-        assert_eq!([~[1], ~[2, 3]].connect(&0), ~[1, 0, 2, 3]);\n-        assert_eq!([~[1], ~[2], ~[3]].connect(&0), ~[1, 0, 2, 0, 3]);\n+        assert_eq!([~[1], ~[2, 3]].connect_vec(&0), ~[1, 0, 2, 3]);\n+        assert_eq!([~[1], ~[2], ~[3]].connect_vec(&0), ~[1, 0, 2, 0, 3]);\n \n         assert_eq!(connect_slices([], &0), ~[]);\n         assert_eq!(connect_slices([&[1], &[2, 3]], &0), ~[1, 0, 2, 3]);\n         assert_eq!(connect_slices([&[1], &[2], &[3]], &0), ~[1, 0, 2, 0, 3]);\n-        assert_eq!([&[1], &[2, 3]].connect(&0), ~[1, 0, 2, 3]);\n-        assert_eq!([&[1], &[2], &[3]].connect(&0), ~[1, 0, 2, 0, 3]);\n+        assert_eq!([&[1], &[2, 3]].connect_vec(&0), ~[1, 0, 2, 3]);\n+        assert_eq!([&[1], &[2], &[3]].connect_vec(&0), ~[1, 0, 2, 0, 3]);\n     }\n \n     #[test]"}]}