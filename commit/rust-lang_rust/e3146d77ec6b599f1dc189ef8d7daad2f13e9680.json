{"sha": "e3146d77ec6b599f1dc189ef8d7daad2f13e9680", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMTQ2ZDc3ZWM2YjU5OWYxZGMxODllZjhkN2RhYWQyZjEzZTk2ODA=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-03-18T12:53:40Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-03-19T00:24:22Z"}, "message": "Add functions to convert IPv6 addresses from and to octets\n\nSee also #32313.", "tree": {"sha": "d9ec0a625f8b0fef7676d2f64be9f6fe13ed3d2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9ec0a625f8b0fef7676d2f64be9f6fe13ed3d2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3146d77ec6b599f1dc189ef8d7daad2f13e9680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3146d77ec6b599f1dc189ef8d7daad2f13e9680", "html_url": "https://github.com/rust-lang/rust/commit/e3146d77ec6b599f1dc189ef8d7daad2f13e9680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3146d77ec6b599f1dc189ef8d7daad2f13e9680/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2de6ddd75e202acdedfcd05b51a863dcc10459ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/2de6ddd75e202acdedfcd05b51a863dcc10459ca", "html_url": "https://github.com/rust-lang/rust/commit/2de6ddd75e202acdedfcd05b51a863dcc10459ca"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "e761b41befe1b8e19ab603247843b7782d948b6e", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e3146d77ec6b599f1dc189ef8d7daad2f13e9680/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3146d77ec6b599f1dc189ef8d7daad2f13e9680/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=e3146d77ec6b599f1dc189ef8d7daad2f13e9680", "patch": "@@ -427,6 +427,13 @@ impl Ipv6Addr {\n             _ => None\n         }\n     }\n+\n+    /// Returns the sixteen eight-bit integers the IPv6 address consists of.\n+    #[unstable(feature = \"ipv6_to_octets\", reason = \"needs some testing\",\n+               issue = \"32313\")]\n+    pub fn octets(&self) -> [u8; 16] {\n+        self.inner.s6_addr\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -553,6 +560,15 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n     }\n }\n \n+#[stable(feature = \"ipv6_from_octets\", since = \"1.9.0\")]\n+impl From<[u8; 16]> for Ipv6Addr {\n+    fn from(octets: [u8; 16]) -> Ipv6Addr {\n+        let mut inner: c::in6_addr = unsafe { mem::zeroed() };\n+        inner.s6_addr = octets;\n+        Ipv6Addr::from_inner(inner)\n+    }\n+}\n+\n // Tests for this module\n #[cfg(test)]\n mod tests {\n@@ -739,7 +755,7 @@ mod tests {\n         //    address                unspec loopbk privt  linloc global multicast brdcast doc\n         check(&[0, 0, 0, 0],         true,  false, false, false, false,  false,    false,  false);\n         check(&[0, 0, 0, 1],         false, false, false, false, true,   false,    false,  false);\n-        check(&[1, 0, 0, 0],         false, false, false, false, true,   false,    false,  false);\n+        check(&[0, 1, 0, 0],         false, false, false, false, true,   false,    false,  false);\n         check(&[10, 9, 8, 7],        false, false, true,  false, false,  false,    false,  false);\n         check(&[127, 1, 2, 3],       false, true,  false, false, false,  false,    false,  false);\n         check(&[172, 31, 254, 253],  false, false, true,  false, false,  false,    false,  false);\n@@ -757,12 +773,14 @@ mod tests {\n \n     #[test]\n     fn ipv6_properties() {\n-        fn check(str_addr: &str, unspec: bool, loopback: bool,\n+        fn check(str_addr: &str, octets: &[u8; 16], unspec: bool, loopback: bool,\n                  unique_local: bool, global: bool,\n                  u_link_local: bool, u_site_local: bool, u_global: bool, u_doc: bool,\n                  m_scope: Option<Ipv6MulticastScope>) {\n             let ip: Ipv6Addr = str_addr.parse().unwrap();\n             assert_eq!(str_addr, ip.to_string());\n+            assert_eq!(&ip.octets(), octets);\n+            assert_eq!(Ipv6Addr::from(*octets), ip);\n \n             assert_eq!(ip.is_unspecified(), unspec);\n             assert_eq!(ip.is_loopback(), loopback);\n@@ -776,41 +794,45 @@ mod tests {\n             assert_eq!(ip.is_multicast(), m_scope.is_some());\n         }\n \n-        //    unspec loopbk uniqlo global unill  unisl  uniglo  doc    mscope\n-        check(\"::\",\n-              true,  false, false, false,  false, false, false, false, None);\n-        check(\"::1\",\n-              false, true,  false, false, false, false,  false, false, None);\n-        check(\"::0.0.0.2\",\n+        //    unspec loopbk uniqlo global unill  unisl  uniglo doc    mscope\n+        check(\"::\", &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+              true,  false, false, false, false, false, false, false, None);\n+        check(\"::1\", &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n+              false, true,  false, false, false, false, false, false, None);\n+        check(\"::0.0.0.2\", &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n               false, false, false, true,  false, false, true,  false, None);\n-        check(\"1::\",\n+        check(\"1::\", &[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, false, true,  false, false, true,  false, None);\n-        check(\"fc00::\",\n+        check(\"fc00::\", &[0xfc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, true,  false, false, false, false, false, None);\n-        check(\"fdff:ffff::\",\n+        check(\"fdff:ffff::\", &[0xfd, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, true,  false, false, false, false, false, None);\n-        check(\"fe80:ffff::\",\n+        check(\"fe80:ffff::\", &[0xfe, 0x80, 0xff, 0xff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, false, false, true,  false, false, false, None);\n-        check(\"febf:ffff::\",\n+        check(\"febf:ffff::\", &[0xfe, 0xbf, 0xff, 0xff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, false, false, true,  false, false, false, None);\n-        check(\"fec0::\",\n+        check(\"fec0::\", &[0xfe, 0xc0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, false, false, false, true,  false, false, None);\n-        check(\"ff01::\",\n+        check(\"ff01::\", &[0xff, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, false, false, false, false, false, false, Some(InterfaceLocal));\n-        check(\"ff02::\",\n+        check(\"ff02::\", &[0xff, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, false, false, false, false, false, false, Some(LinkLocal));\n-        check(\"ff03::\",\n+        check(\"ff03::\", &[0xff, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, false, false, false, false, false, false, Some(RealmLocal));\n-        check(\"ff04::\",\n+        check(\"ff04::\", &[0xff, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, false, false, false, false, false, false, Some(AdminLocal));\n-        check(\"ff05::\",\n+        check(\"ff05::\", &[0xff, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, false, false, false, false, false, false, Some(SiteLocal));\n-        check(\"ff08::\",\n+        check(\"ff08::\", &[0xff, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, false, false, false, false, false, false, Some(OrganizationLocal));\n-        check(\"ff0e::\",\n+        check(\"ff0e::\", &[0xff, 0xe, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               false, false, false, true,  false, false, false, false, Some(Global));\n         check(\"2001:db8:85a3::8a2e:370:7334\",\n+              &[0x20, 1, 0xd, 0xb8, 0x85, 0xa3, 0, 0, 0, 0, 0x8a, 0x2e, 3, 0x70, 0x73, 0x34],\n               false, false, false, false, false, false, false, true, None);\n+        check(\"102:304:506:708:90a:b0c:d0e:f10\",\n+              &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n+              false, false, false, true,  false, false, true,  false, None);\n     }\n \n     #[test]"}]}