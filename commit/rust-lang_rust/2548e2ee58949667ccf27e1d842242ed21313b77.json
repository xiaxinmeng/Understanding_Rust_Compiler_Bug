{"sha": "2548e2ee58949667ccf27e1d842242ed21313b77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NDhlMmVlNTg5NDk2NjdjY2YyN2UxZDg0MjI0MmVkMjEzMTNiNzc=", "commit": {"author": {"name": "Jack Wilson", "email": "jack.wilson.v@gmail.com", "date": "2015-09-04T03:48:26Z"}, "committer": {"name": "Jack Wilson", "email": "jack.wilson.v@gmail.com", "date": "2015-09-04T03:48:26Z"}, "message": "Fixes minor formatting inconsistencies", "tree": {"sha": "b5039832a0b573c64e779afa9724d608f57a1df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5039832a0b573c64e779afa9724d608f57a1df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2548e2ee58949667ccf27e1d842242ed21313b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2548e2ee58949667ccf27e1d842242ed21313b77", "html_url": "https://github.com/rust-lang/rust/commit/2548e2ee58949667ccf27e1d842242ed21313b77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2548e2ee58949667ccf27e1d842242ed21313b77/comments", "author": {"login": "id4ho", "id": 1232370, "node_id": "MDQ6VXNlcjEyMzIzNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1232370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/id4ho", "html_url": "https://github.com/id4ho", "followers_url": "https://api.github.com/users/id4ho/followers", "following_url": "https://api.github.com/users/id4ho/following{/other_user}", "gists_url": "https://api.github.com/users/id4ho/gists{/gist_id}", "starred_url": "https://api.github.com/users/id4ho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/id4ho/subscriptions", "organizations_url": "https://api.github.com/users/id4ho/orgs", "repos_url": "https://api.github.com/users/id4ho/repos", "events_url": "https://api.github.com/users/id4ho/events{/privacy}", "received_events_url": "https://api.github.com/users/id4ho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "id4ho", "id": 1232370, "node_id": "MDQ6VXNlcjEyMzIzNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1232370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/id4ho", "html_url": "https://github.com/id4ho", "followers_url": "https://api.github.com/users/id4ho/followers", "following_url": "https://api.github.com/users/id4ho/following{/other_user}", "gists_url": "https://api.github.com/users/id4ho/gists{/gist_id}", "starred_url": "https://api.github.com/users/id4ho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/id4ho/subscriptions", "organizations_url": "https://api.github.com/users/id4ho/orgs", "repos_url": "https://api.github.com/users/id4ho/repos", "events_url": "https://api.github.com/users/id4ho/events{/privacy}", "received_events_url": "https://api.github.com/users/id4ho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2727a8e1c06f27169be6a414623880f118551dbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2727a8e1c06f27169be6a414623880f118551dbd", "html_url": "https://github.com/rust-lang/rust/commit/2727a8e1c06f27169be6a414623880f118551dbd"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "73cd771114b375581dd5c80c3bad1a36962ebc86", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2548e2ee58949667ccf27e1d842242ed21313b77/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/2548e2ee58949667ccf27e1d842242ed21313b77/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=2548e2ee58949667ccf27e1d842242ed21313b77", "patch": "@@ -7,7 +7,7 @@ can be awkward. Consider this code:\n baz(bar(foo));\n ```\n \n-We would read this left-to right, and so we see \u2018baz bar foo\u2019. But this isn\u2019t the\n+We would read this left-to-right, and so we see \u2018baz bar foo\u2019. But this isn\u2019t the\n order that the functions would get called in, that\u2019s inside-out: \u2018foo bar baz\u2019.\n Wouldn\u2019t it be nice if we could do this instead?\n \n@@ -45,17 +45,17 @@ This will print `12.566371`.\n \n \n \n-We\u2019ve made a struct that represents a circle. We then write an `impl` block,\n+We\u2019ve made a `struct` that represents a circle. We then write an `impl` block,\n and inside it, define a method, `area`.\n \n-Methods take a  special first parameter, of which there are three variants:\n+Methods take a special first parameter, of which there are three variants:\n `self`, `&self`, and `&mut self`. You can think of this first parameter as\n being the `foo` in `foo.bar()`. The three variants correspond to the three\n kinds of things `foo` could be: `self` if it\u2019s just a value on the stack,\n `&self` if it\u2019s a reference, and `&mut self` if it\u2019s a mutable reference.\n Because we took the `&self` parameter to `area`, we can use it just like any\n other parameter. Because we know it\u2019s a `Circle`, we can access the `radius`\n-just like we would with any other struct. \n+just like we would with any other `struct`. \n \n We should default to using `&self`, as you should prefer borrowing over taking\n ownership, as well as taking immutable references over mutable ones. Here\u2019s an\n@@ -120,12 +120,12 @@ Check the return type:\n ```rust\n # struct Circle;\n # impl Circle {\n-fn grow(&self) -> Circle {\n+fn grow(&self, increment: f64) -> Circle {\n # Circle } }\n ```\n \n We just say we\u2019re returning a `Circle`. With this method, we can grow a new\n-circle to any arbitrary size.\n+`circle` to any arbitrary size.\n \n # Associated functions\n \n@@ -161,7 +161,7 @@ methods\u2019.\n \n # Builder Pattern\n \n-Let\u2019s say that we want our users to be able to create Circles, but we will\n+Let\u2019s say that we want our users to be able to create `Circle`s, but we will\n allow them to only set the properties they care about. Otherwise, the `x`\n and `y` attributes will be `0.0`, and the `radius` will be `1.0`. Rust doesn\u2019t\n have method overloading, named arguments, or variable arguments. We employ\n@@ -224,7 +224,7 @@ fn main() {\n }\n ```\n \n-What we\u2019ve done here is make another struct, `CircleBuilder`. We\u2019ve defined our\n+What we\u2019ve done here is make another `struct`, `CircleBuilder`. We\u2019ve defined our\n builder methods on it. We\u2019ve also defined our `area()` method on `Circle`. We\n also made one more method on `CircleBuilder`: `finalize()`. This method creates\n our final `Circle` from the builder. Now, we\u2019ve used the type system to enforce"}]}