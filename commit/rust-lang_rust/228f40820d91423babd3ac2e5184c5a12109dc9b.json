{"sha": "228f40820d91423babd3ac2e5184c5a12109dc9b", "node_id": "C_kwDOAAsO6NoAKDIyOGY0MDgyMGQ5MTQyM2JhYmQzYWMyZTUxODRjNWExMjEwOWRjOWI", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-08T11:03:20Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-08T11:07:01Z"}, "message": "address review comment", "tree": {"sha": "26c3fd0084650b309e6f8e04d37460e88e7c4605", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26c3fd0084650b309e6f8e04d37460e88e7c4605"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/228f40820d91423babd3ac2e5184c5a12109dc9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/228f40820d91423babd3ac2e5184c5a12109dc9b", "html_url": "https://github.com/rust-lang/rust/commit/228f40820d91423babd3ac2e5184c5a12109dc9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/228f40820d91423babd3ac2e5184c5a12109dc9b/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "095b5fae1c5fb1ff2433e6c15a092e7f267415ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/095b5fae1c5fb1ff2433e6c15a092e7f267415ec", "html_url": "https://github.com/rust-lang/rust/commit/095b5fae1c5fb1ff2433e6c15a092e7f267415ec"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "21bd9243ad6a0f42b28428f29b6fd3a234b1d875", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/228f40820d91423babd3ac2e5184c5a12109dc9b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228f40820d91423babd3ac2e5184c5a12109dc9b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=228f40820d91423babd3ac2e5184c5a12109dc9b", "patch": "@@ -420,7 +420,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         // `RegionConstraintData` contains the relationship here.\n         if *any_unifications {\n             *any_unifications = false;\n-            self.unification_table_mut().reset_unifications(|_| UnifiedRegion(None));\n+            self.unification_table_mut().reset_unifications(|_| UnifiedRegion::new(None));\n         }\n \n         data\n@@ -447,7 +447,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> RegionVid {\n         let vid = self.var_infos.push(RegionVariableInfo { origin, universe });\n \n-        let u_vid = self.unification_table_mut().new_key(UnifiedRegion(None));\n+        let u_vid = self.unification_table_mut().new_key(UnifiedRegion::new(None));\n         assert_eq!(vid, u_vid.vid);\n         self.undo_log.push(AddVar(vid));\n         debug!(\"created new region variable {:?} in {:?} with origin {:?}\", vid, universe, origin);\n@@ -522,7 +522,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n                 (Region(Interned(ReVar(vid), _)), value)\n                 | (value, Region(Interned(ReVar(vid), _))) => {\n                     debug!(\"make_eqregion: unifying {:?} with {:?}\", vid, value);\n-                    self.unification_table_mut().union_value(*vid, UnifiedRegion(Some(value)));\n+                    self.unification_table_mut().union_value(*vid, UnifiedRegion::new(Some(value)));\n                     self.any_unifications = true;\n                 }\n                 (_, _) => {}\n@@ -642,7 +642,10 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> ty::Region<'tcx> {\n         let mut ut = self.unification_table_mut(); // FIXME(rust-lang/ena#42): unnecessary mut\n         let root_vid = ut.find(vid).vid;\n-        let resolved = ut.probe_value(root_vid).0.unwrap_or_else(|| tcx.mk_re_var(root_vid));\n+        let resolved = ut\n+            .probe_value(root_vid)\n+            .get_value_ignoring_universes()\n+            .unwrap_or_else(|| tcx.mk_re_var(root_vid));\n \n         // Don't resolve a variable to a region that it cannot name.\n         if self.var_universe(vid).can_name(self.universe(resolved)) {"}, {"sha": "2ef6cf6f32d332a53a73445576b52808608bb824", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/228f40820d91423babd3ac2e5184c5a12109dc9b/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228f40820d91423babd3ac2e5184c5a12109dc9b/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=228f40820d91423babd3ac2e5184c5a12109dc9b", "patch": "@@ -1,4 +1,4 @@\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Region, Ty, TyCtxt};\n use rustc_data_structures::unify::{NoError, UnifyKey, UnifyValue};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::Symbol;\n@@ -11,7 +11,20 @@ pub trait ToType {\n }\n \n #[derive(PartialEq, Copy, Clone, Debug)]\n-pub struct UnifiedRegion<'tcx>(pub Option<ty::Region<'tcx>>);\n+pub struct UnifiedRegion<'tcx> {\n+    value: Option<ty::Region<'tcx>>,\n+}\n+\n+impl<'tcx> UnifiedRegion<'tcx> {\n+    pub fn new(value: Option<Region<'tcx>>) -> Self {\n+        Self { value }\n+    }\n+\n+    /// The caller is responsible for checking universe compatibility before using this value.\n+    pub fn get_value_ignoring_universes(self) -> Option<Region<'tcx>> {\n+        self.value\n+    }\n+}\n \n #[derive(PartialEq, Copy, Clone, Debug)]\n pub struct RegionVidKey<'tcx> {\n@@ -44,7 +57,7 @@ impl<'tcx> UnifyValue for UnifiedRegion<'tcx> {\n     type Error = NoError;\n \n     fn unify_values(value1: &Self, value2: &Self) -> Result<Self, NoError> {\n-        Ok(match (value1.0, value2.0) {\n+        Ok(match (value1.value, value2.value) {\n             // Here we can just pick one value, because the full constraints graph\n             // will be handled later. Ideally, we might want a `MultipleValues`\n             // variant or something. For now though, this is fine."}]}