{"sha": "3e108b71907b8da09176cac271e9e8ae8b46f352", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMTA4YjcxOTA3YjhkYTA5MTc2Y2FjMjcxZTllOGFlOGI0NmYzNTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-10-19T17:16:03Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-10-19T17:16:03Z"}, "message": "Fix constant promotion stuff", "tree": {"sha": "c0e7a1d19c498c182910fa5f71d4686e66fc851e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e7a1d19c498c182910fa5f71d4686e66fc851e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e108b71907b8da09176cac271e9e8ae8b46f352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e108b71907b8da09176cac271e9e8ae8b46f352", "html_url": "https://github.com/rust-lang/rust/commit/3e108b71907b8da09176cac271e9e8ae8b46f352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e108b71907b8da09176cac271e9e8ae8b46f352/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f81dcbebd3af4d448f0304d632c0952852652e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f81dcbebd3af4d448f0304d632c0952852652e7", "html_url": "https://github.com/rust-lang/rust/commit/1f81dcbebd3af4d448f0304d632c0952852652e7"}], "stats": {"total": 84, "additions": 17, "deletions": 67}, "files": [{"sha": "38e7009653fceec87a6040662b56a2d83a51468f", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3e108b71907b8da09176cac271e9e8ae8b46f352/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e108b71907b8da09176cac271e9e8ae8b46f352/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=3e108b71907b8da09176cac271e9e8ae8b46f352", "patch": "@@ -821,18 +821,6 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n         or_has_args: bool,\n         span: Span,\n     ) {\n-        // don't lint for constant values\n-        // FIXME: can we `expect` here instead of match?\n-        let promotable = cx.tcx\n-            .rvalue_promotable_to_static\n-            .borrow()\n-            .get(&arg.id)\n-            .cloned()\n-            .unwrap_or(true);\n-        if promotable {\n-            return;\n-        }\n-\n         // (path, fn_has_argument, methods, suffix)\n         let know_types: &[(&[_], _, &[_], _)] = &[\n             (&paths::BTREEMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n@@ -841,6 +829,22 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n             (&paths::RESULT, true, &[\"or\", \"unwrap_or\"], \"else\"),\n         ];\n \n+        // early check if the name is one we care about\n+        if know_types.iter().all(|k| !k.2.contains(&name)) {\n+            return;\n+        }\n+\n+        // don't lint for constant values\n+        // FIXME: can we `expect` here instead of match?\n+        let owner = cx.tcx.hir.get_parent(arg.id);\n+        let owner_def = cx.tcx.hir.local_def_id(owner);\n+        let promotable = cx.tcx\n+            .rvalue_promotable_map(owner_def)\n+            .contains_key(&arg.hir_id.local_id);\n+        if promotable {\n+            return;\n+        }\n+\n         let self_ty = cx.tables.expr_ty(self_expr);\n \n         let (fn_has_arguments, poss, suffix) = if let Some(&(_, fn_has_arguments, poss, suffix)) ="}, {"sha": "068cbbcd193b244da442dbd399d2fc3bcbb3a62a", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3e108b71907b8da09176cac271e9e8ae8b46f352/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e108b71907b8da09176cac271e9e8ae8b46f352/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=3e108b71907b8da09176cac271e9e8ae8b46f352", "patch": "@@ -318,37 +318,13 @@ error: unnecessary structure name repetition\n 263 |         fn new() -> Foo { Foo }\n     |                     ^^^ help: use the applicable keyword: `Self`\n \n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:281:5\n-    |\n-281 |     with_constructor.unwrap_or(make());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`\n-    |\n-    = note: `-D or-fun-call` implied by `-D warnings`\n-\n error: use of `unwrap_or` followed by a call to `new`\n    --> $DIR/methods.rs:284:5\n     |\n 284 |     with_new.unwrap_or(Vec::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n-\n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:287:5\n     |\n-287 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n-\n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:290:5\n-    |\n-290 |     with_err.unwrap_or(make());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n-\n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:293:5\n-    |\n-293 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n+    = note: `-D or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `default`\n    --> $DIR/methods.rs:296:5\n@@ -362,36 +338,6 @@ error: use of `unwrap_or` followed by a call to `default`\n 299 |     with_default_type.unwrap_or(u64::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:302:5\n-    |\n-302 |     with_vec.unwrap_or(vec![]);\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n-\n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:307:5\n-    |\n-307 |     without_default.unwrap_or(Foo::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n-\n-error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:310:5\n-    |\n-310 |     map.entry(42).or_insert(String::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n-\n-error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:313:5\n-    |\n-313 |     btree.entry(42).or_insert(String::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n-\n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:316:13\n-    |\n-316 |     let _ = stringy.unwrap_or(\"\".to_owned());\n-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n-\n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n    --> $DIR/methods.rs:327:23\n     |"}]}