{"sha": "78264f5e3c94592ff64aab831499f48497083a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MjY0ZjVlM2M5NDU5MmZmNjRhYWI4MzE0OTlmNDg0OTcwODNhOTE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-08-05T15:45:30Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-08-16T15:11:18Z"}, "message": "Add tracking issue numbers", "tree": {"sha": "7e8b10a652ce0f7c65a9f861e27cbb1325bf2fba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e8b10a652ce0f7c65a9f861e27cbb1325bf2fba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78264f5e3c94592ff64aab831499f48497083a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78264f5e3c94592ff64aab831499f48497083a91", "html_url": "https://github.com/rust-lang/rust/commit/78264f5e3c94592ff64aab831499f48497083a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78264f5e3c94592ff64aab831499f48497083a91/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1141136b90663cf9d5ee6325b2f9e47f02e70746", "url": "https://api.github.com/repos/rust-lang/rust/commits/1141136b90663cf9d5ee6325b2f9e47f02e70746", "html_url": "https://github.com/rust-lang/rust/commit/1141136b90663cf9d5ee6325b2f9e47f02e70746"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "e315b9f3417af131ddab366bbfba82a7c9a1b8b0", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78264f5e3c94592ff64aab831499f48497083a91/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78264f5e3c94592ff64aab831499f48497083a91/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=78264f5e3c94592ff64aab831499f48497083a91", "patch": "@@ -141,7 +141,7 @@ impl<T> Box<T> {\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Box<mem::MaybeUninit<T>> {\n         let layout = alloc::Layout::new::<mem::MaybeUninit<T>>();\n         let ptr = unsafe {\n@@ -181,7 +181,7 @@ impl<T> Box<[T]> {\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         let layout = alloc::Layout::array::<mem::MaybeUninit<T>>(len).unwrap();\n         let ptr = unsafe { alloc::alloc(layout) };\n@@ -220,7 +220,7 @@ impl<T> Box<mem::MaybeUninit<T>> {\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Box<T> {\n         Box(Box::into_unique(self).cast())\n@@ -258,7 +258,7 @@ impl<T> Box<[mem::MaybeUninit<T>]> {\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Box<[T]> {\n         Box(Unique::new_unchecked(Box::into_raw(self) as _))"}, {"sha": "a9aa822173fdc7b2996d1907834f6803dd579fc9", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78264f5e3c94592ff64aab831499f48497083a91/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78264f5e3c94592ff64aab831499f48497083a91/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=78264f5e3c94592ff64aab831499f48497083a91", "patch": "@@ -348,7 +348,7 @@ impl<T> Rc<T> {\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Rc<mem::MaybeUninit<T>> {\n         let layout = Layout::new::<RcBox<mem::MaybeUninit<T>>>();\n         unsafe {\n@@ -438,7 +438,7 @@ impl<T> Rc<[T]> {\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_slice(len: usize) -> Rc<[mem::MaybeUninit<T>]> {\n         let data_layout = Layout::array::<mem::MaybeUninit<T>>(len).unwrap();\n         let (layout, offset) = Layout::new::<RcBox<()>>().extend(data_layout).unwrap();\n@@ -492,7 +492,7 @@ impl<T> Rc<mem::MaybeUninit<T>> {\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Rc<T> {\n         Rc {\n@@ -536,7 +536,7 @@ impl<T> Rc<[mem::MaybeUninit<T>]> {\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Rc<[T]> {\n         Rc {\n@@ -762,7 +762,7 @@ impl<T: ?Sized> Rc<T> {\n     /// assert_eq!(*x, \"foo\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"get_mut_unchecked\", issue = \"0\")]\n+    #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {\n         &mut this.ptr.as_mut().value\n     }"}, {"sha": "50fd98508930f3226146ea5045a15e2a6899330e", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78264f5e3c94592ff64aab831499f48497083a91/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78264f5e3c94592ff64aab831499f48497083a91/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=78264f5e3c94592ff64aab831499f48497083a91", "patch": "@@ -332,7 +332,7 @@ impl<T> Arc<T> {\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Arc<mem::MaybeUninit<T>> {\n         let layout = Layout::new::<ArcInner<mem::MaybeUninit<T>>>();\n         unsafe {\n@@ -422,7 +422,7 @@ impl<T> Arc<[T]> {\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_slice(len: usize) -> Arc<[mem::MaybeUninit<T>]> {\n         let data_layout = Layout::array::<mem::MaybeUninit<T>>(len).unwrap();\n         let (layout, offset) = Layout::new::<ArcInner<()>>().extend(data_layout).unwrap();\n@@ -476,7 +476,7 @@ impl<T> Arc<mem::MaybeUninit<T>> {\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Arc<T> {\n         Arc {\n@@ -520,7 +520,7 @@ impl<T> Arc<[mem::MaybeUninit<T>]> {\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n-    #[unstable(feature = \"new_uninit\", issue = \"0\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Arc<[T]> {\n         Arc {\n@@ -1147,7 +1147,7 @@ impl<T: ?Sized> Arc<T> {\n     /// assert_eq!(*x, \"foo\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"get_mut_unchecked\", issue = \"0\")]\n+    #[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]\n     pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {\n         &mut this.ptr.as_mut().data\n     }"}]}