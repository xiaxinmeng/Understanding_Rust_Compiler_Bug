{"sha": "547e5eb49884e521b8a75bf13ad76eb421ca4688", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0N2U1ZWI0OTg4NGU1MjFiOGE3NWJmMTNhZDc2ZWI0MjFjYTQ2ODg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-09T22:21:40Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-16T20:14:37Z"}, "message": "Do not check unused braces on inline consts", "tree": {"sha": "c6b7eda682e7ac3b510902c27b28410a7d487284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6b7eda682e7ac3b510902c27b28410a7d487284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/547e5eb49884e521b8a75bf13ad76eb421ca4688", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl+J/y0ACgkQgTGiTgx5\n76960hAAjSE6MDkKniJse9F44YI5bmD3YPG1DU7eUCKFDD21Hx+Z/MPTQLDWEl7+\nDszCdxa9F7+lf8JnWSMXOvZIigotHbNqicofnTgM9b2Z4YkMogd5rUgVySj7A5yP\nqeZGeH9QViZtXJDFxIArBkQMFrTTKmyEcVLrOGhGr01lR5Z0X2wKEHqlgndH8Az6\njNTivmb1hNzrRHTQOaYyJcJ295HzFKQqBRnHDyxLGTy4M3S/6gSYSuR/jitWjHCC\nJIBxYf5aw8sD5HdlzR3I8O5c42gh7hqKKd7BGr3O+N84V5spALKcbq8BI6vlJT4Q\nHyGwkPSfRJDAaINXFjHNKt4iROqa/nyoeJXp94kX963WpmU5SrQnPviH87B3kOZ9\nDOEjGFnV6DkoF2oqwfhRLrlouPpG3rpWb2J5aBDc+tEuzpI81tv29DidEY0lu/Q9\nE88hS0rEW9R0PhHFWkmZS1iYJ4zCwcn2iBVqIjg6pw4o/DdC+mUPrNab+XAti//t\nbAmicOflxL6sIg6BKfljCJQm1VNc5p4VDwzRMBYKZAQ96oIw760KpwHIlqV0XbUI\nwKVfKKmwOpb/Sqv4z45/5RA9y6A+JCW3U0ag4p/dGXpdN8hRNBZTWmTWW1XU55Ii\nxSNfkJUGhUrPMUEhu8q8lf60uP2j4jKIXulSTIZ62H0KltgjaLo=\n=e15h\n-----END PGP SIGNATURE-----", "payload": "tree c6b7eda682e7ac3b510902c27b28410a7d487284\nparent 03defb627cd39a3de720f1f829678b9f0d581e8e\nauthor Santiago Pastorino <spastorino@gmail.com> 1602282100 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1602879277 -0300\n\nDo not check unused braces on inline consts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/547e5eb49884e521b8a75bf13ad76eb421ca4688", "html_url": "https://github.com/rust-lang/rust/commit/547e5eb49884e521b8a75bf13ad76eb421ca4688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/547e5eb49884e521b8a75bf13ad76eb421ca4688/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03defb627cd39a3de720f1f829678b9f0d581e8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/03defb627cd39a3de720f1f829678b9f0d581e8e", "html_url": "https://github.com/rust-lang/rust/commit/03defb627cd39a3de720f1f829678b9f0d581e8e"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "4bff7f317cbc924c1e8614b3826f63c6d094d50d", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 53, "deletions": 18, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/547e5eb49884e521b8a75bf13ad76eb421ca4688/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547e5eb49884e521b8a75bf13ad76eb421ca4688/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=547e5eb49884e521b8a75bf13ad76eb421ca4688", "patch": "@@ -839,10 +839,6 @@ impl EarlyLintPass for UnusedParens {\n         }\n     }\n \n-    fn check_anon_const(&mut self, cx: &EarlyContext<'_>, c: &ast::AnonConst) {\n-        self.check_unused_delims_expr(cx, &c.value, UnusedDelimsCtx::AnonConst, false, None, None);\n-    }\n-\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         if let StmtKind::Local(ref local) = s.kind {\n             self.check_unused_parens_pat(cx, &local.pat, false, false);\n@@ -965,13 +961,6 @@ impl UnusedDelimLint for UnusedBraces {\n                         if !Self::is_expr_delims_necessary(expr, followed_by_block)\n                             && (ctx != UnusedDelimsCtx::AnonConst\n                                 || matches!(expr.kind, ast::ExprKind::Lit(_)))\n-                            // array length expressions are checked during `check_anon_const` and `check_ty`,\n-                            // once as `ArrayLenExpr` and once as `AnonConst`.\n-                            //\n-                            // As we do not want to lint this twice, we do not emit an error for\n-                            // `ArrayLenExpr` if `AnonConst` would do the same.\n-                            && (ctx != UnusedDelimsCtx::ArrayLenExpr\n-                                || !matches!(expr.kind, ast::ExprKind::Lit(_)))\n                             && !cx.sess().source_map().is_multiline(value.span)\n                             && value.attrs.is_empty()\n                             && !value.span.from_expansion()\n@@ -999,21 +988,54 @@ impl UnusedDelimLint for UnusedBraces {\n }\n \n impl EarlyLintPass for UnusedBraces {\n+    fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n+        <Self as UnusedDelimLint>::check_stmt(self, cx, s)\n+    }\n+\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        <Self as UnusedDelimLint>::check_expr(self, cx, e)\n+        <Self as UnusedDelimLint>::check_expr(self, cx, e);\n+\n+        if let ExprKind::Repeat(_, ref anon_const) = e.kind {\n+            self.check_unused_delims_expr(\n+                cx,\n+                &anon_const.value,\n+                UnusedDelimsCtx::AnonConst,\n+                false,\n+                None,\n+                None,\n+            );\n+        }\n     }\n \n-    fn check_anon_const(&mut self, cx: &EarlyContext<'_>, c: &ast::AnonConst) {\n-        self.check_unused_delims_expr(cx, &c.value, UnusedDelimsCtx::AnonConst, false, None, None);\n+    fn check_generic_arg(&mut self, cx: &EarlyContext<'_>, arg: &ast::GenericArg) {\n+        if let ast::GenericArg::Const(ct) = arg {\n+            self.check_unused_delims_expr(\n+                cx,\n+                &ct.value,\n+                UnusedDelimsCtx::AnonConst,\n+                false,\n+                None,\n+                None,\n+            );\n+        }\n     }\n \n-    fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n-        <Self as UnusedDelimLint>::check_stmt(self, cx, s)\n+    fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &ast::Variant) {\n+        if let Some(anon_const) = &v.disr_expr {\n+            self.check_unused_delims_expr(\n+                cx,\n+                &anon_const.value,\n+                UnusedDelimsCtx::AnonConst,\n+                false,\n+                None,\n+                None,\n+            );\n+        }\n     }\n \n     fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {\n-        if let &ast::TyKind::Paren(ref r) = &ty.kind {\n-            if let ast::TyKind::Array(_, ref len) = r.kind {\n+        match ty.kind {\n+            ast::TyKind::Array(_, ref len) => {\n                 self.check_unused_delims_expr(\n                     cx,\n                     &len.value,\n@@ -1023,6 +1045,19 @@ impl EarlyLintPass for UnusedBraces {\n                     None,\n                 );\n             }\n+\n+            ast::TyKind::Typeof(ref anon_const) => {\n+                self.check_unused_delims_expr(\n+                    cx,\n+                    &anon_const.value,\n+                    UnusedDelimsCtx::AnonConst,\n+                    false,\n+                    None,\n+                    None,\n+                );\n+            }\n+\n+            _ => {}\n         }\n     }\n "}]}