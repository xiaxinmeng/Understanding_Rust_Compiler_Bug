{"sha": "2a8ae0eb4ae91d8695ea7e95e024f51ec19ef56a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOGFlMGViNGFlOTFkODY5NWVhN2U5NWUwMjRmNTFlYzE5ZWY1NmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-08T17:22:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-08T17:22:57Z"}, "message": "auto merge of #7604 : apasel422/rust/peek, r=huonw\n\nThis can be useful for inserting debugging code at different steps in an iterator pipeline.", "tree": {"sha": "1d9644988ab7866d3aaa78fcd5c247676378b1e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d9644988ab7866d3aaa78fcd5c247676378b1e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a8ae0eb4ae91d8695ea7e95e024f51ec19ef56a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8ae0eb4ae91d8695ea7e95e024f51ec19ef56a", "html_url": "https://github.com/rust-lang/rust/commit/2a8ae0eb4ae91d8695ea7e95e024f51ec19ef56a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a8ae0eb4ae91d8695ea7e95e024f51ec19ef56a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed69ef0b6625efa652864eda2d5469eb92dcb682", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed69ef0b6625efa652864eda2d5469eb92dcb682", "html_url": "https://github.com/rust-lang/rust/commit/ed69ef0b6625efa652864eda2d5469eb92dcb682"}, {"sha": "7bb4ff62672178c220a945129a2110b91f78d47f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb4ff62672178c220a945129a2110b91f78d47f", "html_url": "https://github.com/rust-lang/rust/commit/7bb4ff62672178c220a945129a2110b91f78d47f"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "4f5f1bd85c73fa42cc2e8a1163d811adfbdfe086", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2a8ae0eb4ae91d8695ea7e95e024f51ec19ef56a/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8ae0eb4ae91d8695ea7e95e024f51ec19ef56a/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=2a8ae0eb4ae91d8695ea7e95e024f51ec19ef56a", "patch": "@@ -245,6 +245,25 @@ pub trait IteratorUtil<A> {\n     fn flat_map_<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n         -> FlatMapIterator<'r, A, B, Self, U>;\n \n+    /// Creates an iterator that calls a function with a reference to each\n+    /// element before yielding it. This is often useful for debugging an\n+    /// iterator pipeline.\n+    ///\n+    /// # Example\n+    ///\n+    /// ~~~ {.rust}\n+    ///let xs = [1u, 4, 2, 3, 8, 9, 6];\n+    ///let sum = xs.iter()\n+    ///            .transform(|&x| x)\n+    ///            .peek_(|&x| debug!(\"filtering %u\", x))\n+    ///            .filter(|&x| x % 2 == 0)\n+    ///            .peek_(|&x| debug!(\"%u made it through\", x))\n+    ///            .sum();\n+    ///println(sum.to_str());\n+    /// ~~~\n+    // FIXME: #5898: should be called `peek`\n+    fn peek_<'r>(self, f: &'r fn(&A)) -> PeekIterator<'r, A, Self>;\n+\n     /// An adaptation of an external iterator to the for-loop protocol of rust.\n     ///\n     /// # Example\n@@ -442,6 +461,12 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         FlatMapIterator{iter: self, f: f, subiter: None }\n     }\n \n+    // FIXME: #5898: should be called `peek`\n+    #[inline]\n+    fn peek_<'r>(self, f: &'r fn(&A)) -> PeekIterator<'r, A, T> {\n+        PeekIterator{iter: self, f: f}\n+    }\n+\n     /// A shim implementing the `for` loop iteration protocol for iterator objects\n     #[inline]\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool {\n@@ -1041,6 +1066,32 @@ impl<'self, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for\n     }\n }\n \n+/// An iterator that calls a function with a reference to each\n+/// element before yielding it.\n+pub struct PeekIterator<'self, A, T> {\n+    priv iter: T,\n+    priv f: &'self fn(&A)\n+}\n+\n+impl<'self, A, T: Iterator<A>> Iterator<A> for PeekIterator<'self, A, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        let next = self.iter.next();\n+\n+        match next {\n+            Some(ref a) => (self.f)(a),\n+            None => ()\n+        }\n+\n+        next\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n /// An iterator which just modifies the contained state throughout iteration.\n pub struct UnfoldrIterator<'self, A, St> {\n     priv f: &'self fn(&mut St) -> Option<A>,\n@@ -1236,6 +1287,20 @@ mod tests {\n         assert_eq!(i, ys.len());\n     }\n \n+    #[test]\n+    fn test_peek() {\n+        let xs = [1u, 2, 3, 4];\n+        let mut n = 0;\n+\n+        let ys = xs.iter()\n+                   .transform(|&x| x)\n+                   .peek_(|_| n += 1)\n+                   .collect::<~[uint]>();\n+\n+        assert_eq!(n, xs.len());\n+        assert_eq!(xs, ys.as_slice());\n+    }\n+\n     #[test]\n     fn test_unfoldr() {\n         fn count(st: &mut uint) -> Option<uint> {"}]}