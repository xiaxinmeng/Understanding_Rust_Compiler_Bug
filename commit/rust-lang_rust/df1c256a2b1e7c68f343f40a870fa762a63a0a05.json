{"sha": "df1c256a2b1e7c68f343f40a870fa762a63a0a05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMWMyNTZhMmIxZTdjNjhmMzQzZjQwYTg3MGZhNzYyYTYzYTBhMDU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-18T11:45:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:31Z"}, "message": "Replace type_param_to_index with param_def_id_to_index", "tree": {"sha": "7150b648930cfd51eba21cacdce3d62866342af7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7150b648930cfd51eba21cacdce3d62866342af7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df1c256a2b1e7c68f343f40a870fa762a63a0a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df1c256a2b1e7c68f343f40a870fa762a63a0a05", "html_url": "https://github.com/rust-lang/rust/commit/df1c256a2b1e7c68f343f40a870fa762a63a0a05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df1c256a2b1e7c68f343f40a870fa762a63a0a05/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b45a892a482f70ccb696abdcab089cce5f2d612", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b45a892a482f70ccb696abdcab089cce5f2d612", "html_url": "https://github.com/rust-lang/rust/commit/7b45a892a482f70ccb696abdcab089cce5f2d612"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "fc0a9ac9d18f3eaae599c198c96701cdc15d3d72", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df1c256a2b1e7c68f343f40a870fa762a63a0a05/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1c256a2b1e7c68f343f40a870fa762a63a0a05/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=df1c256a2b1e7c68f343f40a870fa762a63a0a05", "patch": "@@ -740,7 +740,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n \n             // Reverse map to each `TypeParamDef`'s `index` field, from\n             // `def_id.index` (`def_id.krate` is the same as the item's).\n-            type_param_to_index: _, // Don't hash this\n+            param_def_id_to_index: _, // Don't hash this\n             has_self,\n             has_late_bound_regions,\n         } = *self;"}, {"sha": "35a44bcf40309049a187ec0554451f5ae0a11154", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df1c256a2b1e7c68f343f40a870fa762a63a0a05/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1c256a2b1e7c68f343f40a870fa762a63a0a05/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=df1c256a2b1e7c68f343f40a870fa762a63a0a05", "patch": "@@ -796,7 +796,7 @@ pub struct Generics {\n     pub params: Vec<GenericParamDef>,\n \n     /// Reverse map to each `TypeParamDef`'s `index` field\n-    pub type_param_to_index: FxHashMap<DefId, u32>,\n+    pub param_def_id_to_index: FxHashMap<DefId, u32>,\n \n     pub has_self: bool,\n     pub has_late_bound_regions: Option<Span>,"}, {"sha": "2c9995b25a1bdd9403eb269057c3873d6fbe53cb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df1c256a2b1e7c68f343f40a870fa762a63a0a05/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1c256a2b1e7c68f343f40a870fa762a63a0a05/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=df1c256a2b1e7c68f343f40a870fa762a63a0a05", "patch": "@@ -985,7 +985,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let item_id = tcx.hir.get_parent_node(node_id);\n                 let item_def_id = tcx.hir.local_def_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n-                let index = generics.type_param_to_index[&tcx.hir.local_def_id(node_id)];\n+                let index = generics.param_def_id_to_index[&tcx.hir.local_def_id(node_id)];\n                 tcx.mk_param(index, tcx.hir.name(node_id).as_interned_str())\n             }\n             Def::SelfTy(_, Some(def_id)) => {"}, {"sha": "0726650b05480ee1827554ba695f8f8bc1539984", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df1c256a2b1e7c68f343f40a870fa762a63a0a05/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1c256a2b1e7c68f343f40a870fa762a63a0a05/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=df1c256a2b1e7c68f343f40a870fa762a63a0a05", "patch": "@@ -1716,7 +1716,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n         let item_id = tcx.hir.ty_param_owner(node_id);\n         let item_def_id = tcx.hir.local_def_id(item_id);\n         let generics = tcx.generics_of(item_def_id);\n-        let index = generics.type_param_to_index[&def_id];\n+        let index = generics.param_def_id_to_index[&def_id];\n         ty::GenericPredicates {\n             parent: None,\n             predicates: self.param_env.caller_bounds.iter().filter(|predicate| {"}, {"sha": "452b76e1b702f7c769a8da8cfdd2391c4d0e140d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/df1c256a2b1e7c68f343f40a870fa762a63a0a05/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1c256a2b1e7c68f343f40a870fa762a63a0a05/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=df1c256a2b1e7c68f343f40a870fa762a63a0a05", "patch": "@@ -243,7 +243,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let param_owner = tcx.hir.ty_param_owner(param_id);\n     let param_owner_def_id = tcx.hir.local_def_id(param_owner);\n     let generics = tcx.generics_of(param_owner_def_id);\n-    let index = generics.type_param_to_index[&def_id];\n+    let index = generics.param_def_id_to_index[&def_id];\n     let ty = tcx.mk_param(index, tcx.hir.ty_param_name(param_id).as_interned_str());\n \n     // Don't look for bounds where the type parameter isn't in scope.\n@@ -966,23 +966,28 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         });\n     }\n \n-    let type_param_to_index = opt_self.iter()\n-                                      .chain(types.iter())\n-                                      .map(|ty| (ty.def_id, ty.index))\n-                                      .collect();\n-\n     let opt_self = opt_self.into_iter().map(|ty| ty::GenericParamDef::Type(ty));\n     let lifetimes = regions.into_iter().map(|lt| ty::GenericParamDef::Lifetime(lt));\n     let types = types.into_iter().map(|ty| ty::GenericParamDef::Type(ty));\n-    let params = opt_self.chain(lifetimes)\n-                         .chain(types)\n-                         .collect();\n+    let params: Vec<_> = opt_self.chain(lifetimes)\n+                                 .chain(types)\n+                                 .collect();\n+\n+    let param_def_id_to_index =\n+        params.iter()\n+              .map(|param| {\n+                  match param {\n+                      ty::GenericParamDef::Lifetime(lt) => (lt.def_id, lt.index),\n+                      ty::GenericParamDef::Type(ty) => (ty.def_id, ty.index),\n+                  }\n+              })\n+              .collect();\n \n     tcx.alloc_generics(ty::Generics {\n         parent: parent_def_id,\n         parent_count,\n         params,\n-        type_param_to_index,\n+        param_def_id_to_index,\n         has_self: has_self || parent_has_self,\n         has_late_bound_regions: has_late_bound_regions(tcx, node),\n     })"}]}