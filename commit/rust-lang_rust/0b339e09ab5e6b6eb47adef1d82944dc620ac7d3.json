{"sha": "0b339e09ab5e6b6eb47adef1d82944dc620ac7d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMzM5ZTA5YWI1ZTZiNmViNDdhZGVmMWQ4Mjk0NGRjNjIwYWM3ZDM=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-25T04:48:05Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-25T04:48:05Z"}, "message": "Add methods for obtaining iterators over the keys and values of a SmallIntMap", "tree": {"sha": "991790547141aa974f231828aec8cf176e5d1577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991790547141aa974f231828aec8cf176e5d1577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b339e09ab5e6b6eb47adef1d82944dc620ac7d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b339e09ab5e6b6eb47adef1d82944dc620ac7d3", "html_url": "https://github.com/rust-lang/rust/commit/0b339e09ab5e6b6eb47adef1d82944dc620ac7d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b339e09ab5e6b6eb47adef1d82944dc620ac7d3/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f7b8f20120897ea2f64f0435e0eca0c095a72b", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f7b8f20120897ea2f64f0435e0eca0c095a72b", "html_url": "https://github.com/rust-lang/rust/commit/18f7b8f20120897ea2f64f0435e0eca0c095a72b"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "e1980e1549a05055ab4e476644380f0815645049", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0b339e09ab5e6b6eb47adef1d82944dc620ac7d3/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b339e09ab5e6b6eb47adef1d82944dc620ac7d3/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=0b339e09ab5e6b6eb47adef1d82944dc620ac7d3", "patch": "@@ -17,6 +17,7 @@ use core::prelude::*;\n \n use core::default::Default;\n use core::fmt;\n+use core::iter;\n use core::iter::{Enumerate, FilterMap};\n use core::mem::replace;\n \n@@ -194,6 +195,18 @@ impl<V> SmallIntMap<V> {\n         self.find(key).expect(\"key not present\")\n     }\n \n+    /// An iterator visiting all keys in ascending order by the keys.\n+    /// Iterator element type is `uint`.\n+    pub fn keys<'r>(&'r self) -> Keys<'r, V> {\n+        self.iter().map(|(k, _v)| k)\n+    }\n+\n+    /// An iterator visiting all values in ascending order by the keys.\n+    /// Iterator element type is `&'r V`.\n+    pub fn values<'r>(&'r self) -> Values<'r, V> {\n+        self.iter().map(|(_k, v)| v)\n+    }\n+\n     /// An iterator visiting all key-value pairs in ascending order by the keys.\n     /// Iterator element type is `(uint, &'r V)`.\n     ///\n@@ -422,6 +435,14 @@ pub struct MutEntries<'a, T> {\n iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)\n double_ended_iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)\n \n+/// Forward iterator over the keys of a map\n+pub type Keys<'a, T> =\n+    iter::Map<'static, (uint, &'a T), uint, Entries<'a, T>>;\n+\n+/// Forward iterator over the values of a map\n+pub type Values<'a, T> =\n+    iter::Map<'static, (uint, &'a T), &'a T, Entries<'a, T>>;\n+\n #[cfg(test)]\n mod test_map {\n     use std::prelude::*;\n@@ -517,6 +538,32 @@ mod test_map {\n         assert_eq!(m.pop(&1), None);\n     }\n \n+    #[test]\n+    fn test_keys() {\n+        let mut map = SmallIntMap::new();\n+        map.insert(1, 'a');\n+        map.insert(2, 'b');\n+        map.insert(3, 'c');\n+        let keys = map.keys().collect::<Vec<uint>>();\n+        assert_eq!(keys.len(), 3);\n+        assert!(keys.contains(&1));\n+        assert!(keys.contains(&2));\n+        assert!(keys.contains(&3));\n+    }\n+\n+    #[test]\n+    fn test_values() {\n+        let mut map = SmallIntMap::new();\n+        map.insert(1, 'a');\n+        map.insert(2, 'b');\n+        map.insert(3, 'c');\n+        let values = map.values().map(|&v| v).collect::<Vec<char>>();\n+        assert_eq!(values.len(), 3);\n+        assert!(values.contains(&'a'));\n+        assert!(values.contains(&'b'));\n+        assert!(values.contains(&'c'));\n+    }\n+\n     #[test]\n     fn test_iterator() {\n         let mut m = SmallIntMap::new();"}]}