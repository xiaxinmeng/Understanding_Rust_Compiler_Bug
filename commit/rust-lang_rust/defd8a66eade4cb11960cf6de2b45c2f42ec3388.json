{"sha": "defd8a66eade4cb11960cf6de2b45c2f42ec3388", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZmQ4YTY2ZWFkZTRjYjExOTYwY2Y2ZGUyYjQ1YzJmNDJlYzMzODg=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-07-28T22:17:30Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-29T03:30:29Z"}, "message": "Rename rust_proxy_delegate to maybe_proxy, flesh out logic in it. Add strong-ref distinction on rust_proxy.", "tree": {"sha": "d9c2c87a2df903ba4ae3b93536805a6b2ad17c39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9c2c87a2df903ba4ae3b93536805a6b2ad17c39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/defd8a66eade4cb11960cf6de2b45c2f42ec3388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/defd8a66eade4cb11960cf6de2b45c2f42ec3388", "html_url": "https://github.com/rust-lang/rust/commit/defd8a66eade4cb11960cf6de2b45c2f42ec3388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/defd8a66eade4cb11960cf6de2b45c2f42ec3388/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b3f8a11713e32fdb0d0059141289152a46d501", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b3f8a11713e32fdb0d0059141289152a46d501", "html_url": "https://github.com/rust-lang/rust/commit/30b3f8a11713e32fdb0d0059141289152a46d501"}], "stats": {"total": 71, "additions": 48, "deletions": 23}, "files": [{"sha": "bf12e1d5f0ed4dbd43d71f06d015bc6831d754f2", "filename": "src/rt/rust_proxy.h", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/defd8a66eade4cb11960cf6de2b45c2f42ec3388/src%2Frt%2Frust_proxy.h", "raw_url": "https://github.com/rust-lang/rust/raw/defd8a66eade4cb11960cf6de2b45c2f42ec3388/src%2Frt%2Frust_proxy.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_proxy.h?ref=defd8a66eade4cb11960cf6de2b45c2f42ec3388", "patch": "@@ -1,30 +1,55 @@\n+#ifndef RUST_PROXY_H\n+#define RUST_PROXY_H\n+\n /**\n  * A proxy object is a wrapper around other Rust objects. One use of the proxy\n  * object is to mitigate access between tasks in different thread domains.\n  */\n \n-#ifndef RUST_PROXY_H\n-#define RUST_PROXY_H\n-\n+template <typename T> struct rust_proxy;\n+/**\n+ * The base class of all objects that may delegate.\n+ */\n template <typename T> struct\n-rust_proxy_delegate : public rc_base<T> {\n+maybe_proxy : public rc_base<T>, public rust_cond {\n protected:\n     T *_delegate;\n public:\n-    rust_proxy_delegate(T * delegate) : _delegate(delegate) {\n+    maybe_proxy(T * delegate) : _delegate(delegate) {\n+\n+    }\n+    T *delegate() {\n+        return _delegate;\n+    }\n+    bool is_proxy() {\n+        return _delegate != this;\n+    }\n+    rust_proxy<T> *as_proxy() {\n+        return (rust_proxy<T> *) this;\n+    }\n+    T *as_delegate() {\n+        I(_delegate->get_dom(), !is_proxy());\n+        return (T *) this;\n     }\n-    T *delegate() { return _delegate; }\n };\n \n+/**\n+ * A proxy object that delegates to another.\n+ */\n template <typename T> struct\n-rust_proxy : public rust_proxy_delegate<T>,\n+rust_proxy : public maybe_proxy<T>,\n              public dom_owned<rust_proxy<T> > {\n+private:\n+    bool _strong;\n public:\n     rust_dom *dom;\n-    rust_proxy(rust_dom *dom, T *delegate) :\n-        rust_proxy_delegate<T> (delegate),\n-        dom(dom) {\n-        delegate->ref();\n+    rust_proxy(rust_dom *dom, T *delegate, bool strong) :\n+        maybe_proxy<T> (delegate), _strong(strong), dom(dom) {\n+        this->dom->log(rust_log::COMM,\n+            \"new proxy: 0x%\" PRIxPTR \" => 0x%\" PRIxPTR, this, delegate);\n+        if (strong) {\n+            delegate->ref();\n+        }\n     }\n };\n "}, {"sha": "189824ac16a71c6ee1ed838d70dfc2ee38434b7e", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/defd8a66eade4cb11960cf6de2b45c2f42ec3388/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/defd8a66eade4cb11960cf6de2b45c2f42ec3388/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=defd8a66eade4cb11960cf6de2b45c2f42ec3388", "patch": "@@ -53,7 +53,7 @@ align_down(uintptr_t sp)\n \n \n rust_task::rust_task(rust_dom *dom, rust_task *spawner) :\n-    rust_proxy_delegate<rust_task>(this),\n+    maybe_proxy<rust_task>(this),\n     stk(new_stk(dom, 0)),\n     runtime_sp(0),\n     rust_sp(stk->limit),"}, {"sha": "0c723a9dd5d64a12850eb2d9f13a4080fdacb62b", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/defd8a66eade4cb11960cf6de2b45c2f42ec3388/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/defd8a66eade4cb11960cf6de2b45c2f42ec3388/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=defd8a66eade4cb11960cf6de2b45c2f42ec3388", "patch": "@@ -5,9 +5,8 @@\n #ifndef RUST_TASK_H\n #define RUST_TASK_H\n struct\n-rust_task : public rust_proxy_delegate<rust_task>,\n-            public dom_owned<rust_task>,\n-            public rust_cond\n+rust_task : public maybe_proxy<rust_task>,\n+            public dom_owned<rust_task>\n {\n     // Fields known to the compiler.\n     stk_seg *stk;"}, {"sha": "e4604049c4dfc1e91d43f09ca1d85c2ee2a966f2", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/defd8a66eade4cb11960cf6de2b45c2f42ec3388/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/defd8a66eade4cb11960cf6de2b45c2f42ec3388/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=defd8a66eade4cb11960cf6de2b45c2f42ec3388", "patch": "@@ -105,7 +105,7 @@ extern \"C\" CDECL void upcall_del_chan(rust_task *task, rust_chan *chan) {\n  */\n extern \"C\" CDECL rust_chan *\n upcall_clone_chan(rust_task *task,\n-                  rust_proxy_delegate<rust_task> *spawnee_proxy,\n+                  maybe_proxy<rust_task> *spawnee_proxy,\n                   rust_chan *chan) {\n     LOG_UPCALL_ENTRY(task);\n     rust_task *spawnee = spawnee_proxy->delegate();\n@@ -121,8 +121,8 @@ extern \"C\" CDECL void upcall_yield(rust_task *task) {\n     task->yield(1);\n }\n \n-extern \"C\" CDECL void upcall_join(rust_task *task,\n-                                  rust_proxy_delegate<rust_task> *proxy) {\n+extern \"C\" CDECL void\n+upcall_join(rust_task *task, maybe_proxy<rust_task> *proxy) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::COMM,\n                   \"join proxy 0x%\" PRIxPTR \" -> task = 0x%\" PRIxPTR,\n@@ -194,7 +194,7 @@ extern \"C\" CDECL void upcall_fail(rust_task *task, char const *expr,\n  * Called whenever a task's ref count drops to zero.\n  */\n extern \"C\" CDECL void\n-upcall_kill(rust_task *task, rust_proxy_delegate<rust_task> *target_proxy) {\n+upcall_kill(rust_task *task, maybe_proxy<rust_task> *target_proxy) {\n     LOG_UPCALL_ENTRY(task);\n     rust_task *target_task = target_proxy->delegate();\n     if (target_proxy != target_task) {\n@@ -504,7 +504,7 @@ upcall_start_task(rust_task *spawner, rust_task *task,\n     return task;\n }\n \n-extern \"C\" CDECL rust_proxy_delegate<rust_task> *\n+extern \"C\" CDECL maybe_proxy<rust_task> *\n upcall_new_thread(rust_task *task) {\n     LOG_UPCALL_ENTRY(task);\n \n@@ -516,16 +516,17 @@ upcall_new_thread(rust_task *task) {\n               \"upcall new_thread() = dom 0x%\" PRIxPTR \" task 0x%\" PRIxPTR,\n               new_dom, new_dom->root_task);\n     rust_proxy<rust_task> *proxy =\n-            new (old_dom) rust_proxy<rust_task>(old_dom, new_dom->root_task);\n+        new (old_dom) rust_proxy<rust_task>(old_dom,\n+                                            new_dom->root_task, true);\n     task->log(rust_log::UPCALL | rust_log::MEM,\n               \"new proxy = 0x%\" PRIxPTR \" -> task = 0x%\" PRIxPTR,\n               proxy, proxy->delegate());\n     return proxy;\n }\n \n-extern \"C\" CDECL rust_proxy_delegate<rust_task> *\n+extern \"C\" CDECL maybe_proxy<rust_task> *\n upcall_start_thread(rust_task *spawner,\n-                    rust_proxy_delegate<rust_task> *root_task_proxy,\n+                    maybe_proxy<rust_task> *root_task_proxy,\n     uintptr_t exit_task_glue, uintptr_t spawnee_fn, size_t callsz) {\n     LOG_UPCALL_ENTRY(spawner);\n "}]}