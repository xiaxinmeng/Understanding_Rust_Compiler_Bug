{"sha": "5edb02adad4bb05eb6c243ff02d4c23da51f4e82", "node_id": "C_kwDOAAsO6NoAKDVlZGIwMmFkYWQ0YmIwNWViNmMyNDNmZjAyZDRjMjNkYTUxZjRlODI", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2021-11-01T23:16:37Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2021-11-01T23:33:27Z"}, "message": "Fix #7903", "tree": {"sha": "46596346476f63ee7c79638257241879f7d3ff41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46596346476f63ee7c79638257241879f7d3ff41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5edb02adad4bb05eb6c243ff02d4c23da51f4e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5edb02adad4bb05eb6c243ff02d4c23da51f4e82", "html_url": "https://github.com/rust-lang/rust/commit/5edb02adad4bb05eb6c243ff02d4c23da51f4e82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5edb02adad4bb05eb6c243ff02d4c23da51f4e82/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8c4046841b43e4b3ea3ff8f5c22858f34c8fe9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c4046841b43e4b3ea3ff8f5c22858f34c8fe9f", "html_url": "https://github.com/rust-lang/rust/commit/e8c4046841b43e4b3ea3ff8f5c22858f34c8fe9f"}], "stats": {"total": 105, "additions": 82, "deletions": 23}, "files": [{"sha": "17ee6e0b568481a13b106c1642fd1db6afb8b601", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5edb02adad4bb05eb6c243ff02d4c23da51f4e82/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edb02adad4bb05eb6c243ff02d4c23da51f4e82/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=5edb02adad4bb05eb6c243ff02d4c23da51f4e82", "patch": "@@ -1,14 +1,14 @@\n-//! This module contains functions that retrieves specifiec elements.\n+//! This module contains functions that retrieve specific elements.\n \n #![deny(clippy::missing_docs_in_private_items)]\n \n use crate::ty::is_type_diagnostic_item;\n-use crate::{is_expn_of, last_path_segment, match_def_path, paths};\n+use crate::{is_expn_of, last_path_segment, match_def_path, path_to_local_id, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::{self, LitKind};\n use rustc_hir as hir;\n use rustc_hir::{\n-    Arm, Block, BorrowKind, Expr, ExprKind, HirId, LoopSource, MatchSource, Node, Pat, QPath, StmtKind, UnOp,\n+    Arm, Block, BorrowKind, Expr, ExprKind, HirId, LoopSource, MatchSource, Node, Pat, PatKind, QPath, StmtKind, UnOp,\n };\n use rustc_lint::LateContext;\n use rustc_span::{sym, symbol, ExpnKind, Span, Symbol};\n@@ -513,6 +513,8 @@ pub struct FormatArgsExpn<'tcx> {\n     pub format_string_parts: &'tcx [Expr<'tcx>],\n     /// Symbols corresponding to [`Self::format_string_parts`]\n     pub format_string_symbols: Vec<Symbol>,\n+    /// Match arm patterns, the `arg0`, etc. from the next field `args`\n+    pub arg_names: &'tcx [Pat<'tcx>],\n     /// Expressions like `ArgumentV1::new(arg0, Debug::fmt)`\n     pub args: &'tcx [Expr<'tcx>],\n     /// The final argument passed to `Arguments::new_v1_formatted`, if applicable\n@@ -557,13 +559,15 @@ impl FormatArgsExpn<'tcx> {\n                     _ => None,\n                 })\n                 .collect();\n+            if let PatKind::Tuple(arg_names, None) = arm.pat.kind;\n             if let ExprKind::Array(args) = arm.body.kind;\n             then {\n                 Some(FormatArgsExpn {\n                     format_string_span: strs_ref.span,\n                     value_args,\n                     format_string_parts,\n                     format_string_symbols,\n+                    arg_names,\n                     args,\n                     fmt_expr,\n                 })\n@@ -587,9 +591,15 @@ impl FormatArgsExpn<'tcx> {\n                             if let Some(position_field) = fields.iter().find(|f| f.ident.name == sym::position);\n                             if let ExprKind::Lit(lit) = &position_field.expr.kind;\n                             if let LitKind::Int(position, _) = lit.node;\n+                            if let Ok(i) = usize::try_from(position);\n+                            let arg = &self.args[i];\n+                            if let ExprKind::Call(_, [arg_name, _]) = arg.kind;\n+                            if let Some(j) = self\n+                                .arg_names\n+                                .iter()\n+                                .position(|pat| path_to_local_id(arg_name, pat.hir_id));\n                             then {\n-                                let i = usize::try_from(position).unwrap();\n-                                Some(FormatArgsArg { value: self.value_args[i], arg: &self.args[i], fmt: Some(fmt) })\n+                                Some(FormatArgsArg { value: self.value_args[j], arg, fmt: Some(fmt) })\n                             } else {\n                                 None\n                             }"}, {"sha": "69b5e1c722e0320df446f0fb6a01d74d20fead7f", "filename": "tests/ui/format_args.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5edb02adad4bb05eb6c243ff02d4c23da51f4e82/tests%2Fui%2Fformat_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5edb02adad4bb05eb6c243ff02d4c23da51f4e82/tests%2Fui%2Fformat_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_args.fixed?ref=5edb02adad4bb05eb6c243ff02d4c23da51f4e82", "patch": "@@ -5,6 +5,7 @@\n #![allow(unused_variables)]\n #![allow(clippy::assertions_on_constants)]\n #![allow(clippy::eq_op)]\n+#![allow(clippy::print_literal)]\n #![warn(clippy::to_string_in_format_args)]\n \n use std::io::{stdout, Write};\n@@ -97,9 +98,20 @@ fn main() {\n     println!(\"{}\", Z(1));\n     println!(\"{}\", **x);\n     println!(\"{}\", ***x_ref);\n+    // https://github.com/rust-lang/rust-clippy/issues/7903\n+    println!(\"{foo}{bar}\", foo = \"foo\", bar = \"bar\");\n+    println!(\"{foo}{bar}\", foo = \"foo\", bar = \"bar\");\n+    println!(\"{foo}{bar}\", bar = \"bar\", foo = \"foo\");\n+    println!(\"{foo}{bar}\", bar = \"bar\", foo = \"foo\");\n \n+    // negative tests\n     println!(\"error: something failed at {}\", Somewhere.to_string());\n+    // The next two tests are negative because caching the string might be faster than calling `<X as\n+    // Display>::fmt` twice.\n     println!(\"{} and again {0}\", x.to_string());\n+    println!(\"{foo}{foo}\", foo = \"foo\".to_string());\n     my_macro!();\n     println!(\"error: something failed at {}\", my_other_macro!());\n+    // https://github.com/rust-lang/rust-clippy/issues/7903\n+    println!(\"{foo}{foo:?}\", foo = \"foo\".to_string());\n }"}, {"sha": "3a434c5bf002a3350a08a0da2988747de925bcc9", "filename": "tests/ui/format_args.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5edb02adad4bb05eb6c243ff02d4c23da51f4e82/tests%2Fui%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edb02adad4bb05eb6c243ff02d4c23da51f4e82/tests%2Fui%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_args.rs?ref=5edb02adad4bb05eb6c243ff02d4c23da51f4e82", "patch": "@@ -5,6 +5,7 @@\n #![allow(unused_variables)]\n #![allow(clippy::assertions_on_constants)]\n #![allow(clippy::eq_op)]\n+#![allow(clippy::print_literal)]\n #![warn(clippy::to_string_in_format_args)]\n \n use std::io::{stdout, Write};\n@@ -97,9 +98,20 @@ fn main() {\n     println!(\"{}\", Z(1).to_string());\n     println!(\"{}\", x.to_string());\n     println!(\"{}\", x_ref.to_string());\n+    // https://github.com/rust-lang/rust-clippy/issues/7903\n+    println!(\"{foo}{bar}\", foo = \"foo\".to_string(), bar = \"bar\");\n+    println!(\"{foo}{bar}\", foo = \"foo\", bar = \"bar\".to_string());\n+    println!(\"{foo}{bar}\", bar = \"bar\".to_string(), foo = \"foo\");\n+    println!(\"{foo}{bar}\", bar = \"bar\", foo = \"foo\".to_string());\n \n+    // negative tests\n     println!(\"error: something failed at {}\", Somewhere.to_string());\n+    // The next two tests are negative because caching the string might be faster than calling `<X as\n+    // Display>::fmt` twice.\n     println!(\"{} and again {0}\", x.to_string());\n+    println!(\"{foo}{foo}\", foo = \"foo\".to_string());\n     my_macro!();\n     println!(\"error: something failed at {}\", my_other_macro!());\n+    // https://github.com/rust-lang/rust-clippy/issues/7903\n+    println!(\"{foo}{foo:?}\", foo = \"foo\".to_string());\n }"}, {"sha": "c0cbca507958d1306cfbf008fb3b1d16e2f3959d", "filename": "tests/ui/format_args.stderr", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5edb02adad4bb05eb6c243ff02d4c23da51f4e82/tests%2Fui%2Fformat_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5edb02adad4bb05eb6c243ff02d4c23da51f4e82/tests%2Fui%2Fformat_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_args.stderr?ref=5edb02adad4bb05eb6c243ff02d4c23da51f4e82", "patch": "@@ -1,106 +1,130 @@\n error: `to_string` applied to a type that implements `Display` in `format!` args\n-  --> $DIR/format_args.rs:75:72\n+  --> $DIR/format_args.rs:76:72\n    |\n LL |     let _ = format!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                                        ^^^^^^^^^^^^ help: remove this\n    |\n    = note: `-D clippy::to-string-in-format-args` implied by `-D warnings`\n \n error: `to_string` applied to a type that implements `Display` in `write!` args\n-  --> $DIR/format_args.rs:79:27\n+  --> $DIR/format_args.rs:80:27\n    |\n LL |         Location::caller().to_string()\n    |                           ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `writeln!` args\n-  --> $DIR/format_args.rs:84:27\n+  --> $DIR/format_args.rs:85:27\n    |\n LL |         Location::caller().to_string()\n    |                           ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `print!` args\n-  --> $DIR/format_args.rs:86:63\n+  --> $DIR/format_args.rs:87:63\n    |\n LL |     print!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                               ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:87:65\n+  --> $DIR/format_args.rs:88:65\n    |\n LL |     println!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                                 ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `eprint!` args\n-  --> $DIR/format_args.rs:88:64\n+  --> $DIR/format_args.rs:89:64\n    |\n LL |     eprint!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                                ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `eprintln!` args\n-  --> $DIR/format_args.rs:89:66\n+  --> $DIR/format_args.rs:90:66\n    |\n LL |     eprintln!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                                  ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `format_args!` args\n-  --> $DIR/format_args.rs:90:77\n+  --> $DIR/format_args.rs:91:77\n    |\n LL |     let _ = format_args!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                                             ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `assert!` args\n-  --> $DIR/format_args.rs:91:70\n+  --> $DIR/format_args.rs:92:70\n    |\n LL |     assert!(true, \"error: something failed at {}\", Location::caller().to_string());\n    |                                                                      ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `assert_eq!` args\n-  --> $DIR/format_args.rs:92:73\n+  --> $DIR/format_args.rs:93:73\n    |\n LL |     assert_eq!(0, 0, \"error: something failed at {}\", Location::caller().to_string());\n    |                                                                         ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `assert_ne!` args\n-  --> $DIR/format_args.rs:93:73\n+  --> $DIR/format_args.rs:94:73\n    |\n LL |     assert_ne!(0, 0, \"error: something failed at {}\", Location::caller().to_string());\n    |                                                                         ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `panic!` args\n-  --> $DIR/format_args.rs:94:63\n+  --> $DIR/format_args.rs:95:63\n    |\n LL |     panic!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                               ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:95:20\n+  --> $DIR/format_args.rs:96:20\n    |\n LL |     println!(\"{}\", X(1).to_string());\n    |                    ^^^^^^^^^^^^^^^^ help: use this: `*X(1)`\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:96:20\n+  --> $DIR/format_args.rs:97:20\n    |\n LL |     println!(\"{}\", Y(&X(1)).to_string());\n    |                    ^^^^^^^^^^^^^^^^^^^^ help: use this: `***Y(&X(1))`\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:97:24\n+  --> $DIR/format_args.rs:98:24\n    |\n LL |     println!(\"{}\", Z(1).to_string());\n    |                        ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:98:20\n+  --> $DIR/format_args.rs:99:20\n    |\n LL |     println!(\"{}\", x.to_string());\n    |                    ^^^^^^^^^^^^^ help: use this: `**x`\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:99:20\n+  --> $DIR/format_args.rs:100:20\n    |\n LL |     println!(\"{}\", x_ref.to_string());\n    |                    ^^^^^^^^^^^^^^^^^ help: use this: `***x_ref`\n \n-error: aborting due to 17 previous errors\n+error: `to_string` applied to a type that implements `Display` in `println!` args\n+  --> $DIR/format_args.rs:102:39\n+   |\n+LL |     println!(\"{foo}{bar}\", foo = \"foo\".to_string(), bar = \"bar\");\n+   |                                       ^^^^^^^^^^^^ help: remove this\n+\n+error: `to_string` applied to a type that implements `Display` in `println!` args\n+  --> $DIR/format_args.rs:103:52\n+   |\n+LL |     println!(\"{foo}{bar}\", foo = \"foo\", bar = \"bar\".to_string());\n+   |                                                    ^^^^^^^^^^^^ help: remove this\n+\n+error: `to_string` applied to a type that implements `Display` in `println!` args\n+  --> $DIR/format_args.rs:104:39\n+   |\n+LL |     println!(\"{foo}{bar}\", bar = \"bar\".to_string(), foo = \"foo\");\n+   |                                       ^^^^^^^^^^^^ help: remove this\n+\n+error: `to_string` applied to a type that implements `Display` in `println!` args\n+  --> $DIR/format_args.rs:105:52\n+   |\n+LL |     println!(\"{foo}{bar}\", bar = \"bar\", foo = \"foo\".to_string());\n+   |                                                    ^^^^^^^^^^^^ help: remove this\n+\n+error: aborting due to 21 previous errors\n "}, {"sha": "b24ddf7321e4000cf7fe20cee6ca5485ab6fab0f", "filename": "tests/ui/format_args_unfixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5edb02adad4bb05eb6c243ff02d4c23da51f4e82/tests%2Fui%2Fformat_args_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edb02adad4bb05eb6c243ff02d4c23da51f4e82/tests%2Fui%2Fformat_args_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_args_unfixable.rs?ref=5edb02adad4bb05eb6c243ff02d4c23da51f4e82", "patch": "@@ -51,6 +51,7 @@ fn main() {\n     assert_ne!(0, 0, \"error: {}\", format!(\"something failed at {}\", Location::caller()));\n     panic!(\"error: {}\", format!(\"something failed at {}\", Location::caller()));\n \n+    // negative tests\n     println!(\"error: {}\", format_args!(\"something failed at {}\", Location::caller()));\n     println!(\"error: {:>70}\", format!(\"something failed at {}\", Location::caller()));\n     println!(\"error: {} {0}\", format!(\"something failed at {}\", Location::caller()));"}]}