{"sha": "a65ec44779ab2c01ba937b40496ca648626d0308", "node_id": "C_kwDOAAsO6NoAKGE2NWVjNDQ3NzlhYjJjMDFiYTkzN2I0MDQ5NmNhNjQ4NjI2ZDAzMDg", "commit": {"author": {"name": "Miguel Ojeda", "email": "ojeda@kernel.org", "date": "2022-12-17T01:50:08Z"}, "committer": {"name": "Miguel Ojeda", "email": "ojeda@kernel.org", "date": "2022-12-20T20:42:54Z"}, "message": "Add `-Zno-jump-tables`\n\nThis flag mimics GCC/Clang's `-fno-jump-tables` [1][2], which makes\nthe codegen backend avoid generating jump tables when lowering switches.\n\nIn the case of LLVM, the `\"no-jump-tables\"=\"true\"` function attribute is\nadded to every function.\n\nThe kernel currently needs it for x86 when enabling IBT [3], as well\nas for Alpha (plus VDSO objects in MIPS/LoongArch).\n\n[1] https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#index-fno-jump-tables\n[2] https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-fjump-tables\n[3] https://github.com/torvalds/linux/blob/v6.1/arch/x86/Makefile#L75-L83\n\nSigned-off-by: Miguel Ojeda <ojeda@kernel.org>", "tree": {"sha": "453e0c3915df4070434effa73f03856acec7eb92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/453e0c3915df4070434effa73f03856acec7eb92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a65ec44779ab2c01ba937b40496ca648626d0308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a65ec44779ab2c01ba937b40496ca648626d0308", "html_url": "https://github.com/rust-lang/rust/commit/a65ec44779ab2c01ba937b40496ca648626d0308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a65ec44779ab2c01ba937b40496ca648626d0308/comments", "author": {"login": "ojeda", "id": 1054456, "node_id": "MDQ6VXNlcjEwNTQ0NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1054456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ojeda", "html_url": "https://github.com/ojeda", "followers_url": "https://api.github.com/users/ojeda/followers", "following_url": "https://api.github.com/users/ojeda/following{/other_user}", "gists_url": "https://api.github.com/users/ojeda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ojeda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ojeda/subscriptions", "organizations_url": "https://api.github.com/users/ojeda/orgs", "repos_url": "https://api.github.com/users/ojeda/repos", "events_url": "https://api.github.com/users/ojeda/events{/privacy}", "received_events_url": "https://api.github.com/users/ojeda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ojeda", "id": 1054456, "node_id": "MDQ6VXNlcjEwNTQ0NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1054456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ojeda", "html_url": "https://github.com/ojeda", "followers_url": "https://api.github.com/users/ojeda/followers", "following_url": "https://api.github.com/users/ojeda/following{/other_user}", "gists_url": "https://api.github.com/users/ojeda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ojeda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ojeda/subscriptions", "organizations_url": "https://api.github.com/users/ojeda/orgs", "repos_url": "https://api.github.com/users/ojeda/repos", "events_url": "https://api.github.com/users/ojeda/events{/privacy}", "received_events_url": "https://api.github.com/users/ojeda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c07efe84f28a44f3044237696acc295aa407ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c07efe84f28a44f3044237696acc295aa407ee5", "html_url": "https://github.com/rust-lang/rust/commit/9c07efe84f28a44f3044237696acc295aa407ee5"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "487eead22b897de056ab822dbc78247244c0b4c3", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a65ec44779ab2c01ba937b40496ca648626d0308/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65ec44779ab2c01ba937b40496ca648626d0308/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=a65ec44779ab2c01ba937b40496ca648626d0308", "patch": "@@ -137,6 +137,14 @@ fn instrument_function_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribu\n     }\n }\n \n+fn nojumptables_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n+    if !cx.sess().opts.unstable_opts.no_jump_tables {\n+        return None;\n+    }\n+\n+    Some(llvm::CreateAttrStringValue(cx.llcx, \"no-jump-tables\", \"true\"))\n+}\n+\n fn probestack_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n     // Currently stack probes seem somewhat incompatible with the address\n     // sanitizer and thread sanitizer. With asan we're already protected from\n@@ -293,6 +301,7 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     // FIXME: none of these three functions interact with source level attributes.\n     to_add.extend(frame_pointer_type_attr(cx));\n     to_add.extend(instrument_function_attr(cx));\n+    to_add.extend(nojumptables_attr(cx));\n     to_add.extend(probestack_attr(cx));\n     to_add.extend(stackprotector_attr(cx));\n "}, {"sha": "ff2196d58577c817557e23d497733fbbc7c00f2e", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a65ec44779ab2c01ba937b40496ca648626d0308/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65ec44779ab2c01ba937b40496ca648626d0308/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=a65ec44779ab2c01ba937b40496ca648626d0308", "patch": "@@ -754,6 +754,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(move_size_limit, Some(4096));\n     tracked!(mutable_noalias, Some(true));\n     tracked!(no_generate_arange_section, true);\n+    tracked!(no_jump_tables, true);\n     tracked!(no_link, true);\n     tracked!(no_profiler_runtime, true);\n     tracked!(no_unique_section_names, true);"}, {"sha": "40bc669707aa01d33f55a89e9eaef27cf7127cbf", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a65ec44779ab2c01ba937b40496ca648626d0308/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65ec44779ab2c01ba937b40496ca648626d0308/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=a65ec44779ab2c01ba937b40496ca648626d0308", "patch": "@@ -1421,6 +1421,8 @@ options! {\n         \"run all passes except codegen; no output\"),\n     no_generate_arange_section: bool = (false, parse_no_flag, [TRACKED],\n         \"omit DWARF address ranges that give faster lookups\"),\n+    no_jump_tables: bool = (false, parse_no_flag, [TRACKED],\n+        \"disable the jump tables and lookup tables that can be generated from a switch case lowering\"),\n     no_leak_check: bool = (false, parse_no_flag, [UNTRACKED],\n         \"disable the 'leak check' for subtyping; unsound, but useful for tests\"),\n     no_link: bool = (false, parse_no_flag, [TRACKED],"}, {"sha": "007c3591a4a6fda0a32241d71ef21a8389df80ac", "filename": "src/test/assembly/x86_64-no-jump-tables.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a65ec44779ab2c01ba937b40496ca648626d0308/src%2Ftest%2Fassembly%2Fx86_64-no-jump-tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65ec44779ab2c01ba937b40496ca648626d0308/src%2Ftest%2Fassembly%2Fx86_64-no-jump-tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-no-jump-tables.rs?ref=a65ec44779ab2c01ba937b40496ca648626d0308", "patch": "@@ -0,0 +1,34 @@\n+// Test that jump tables are (not) emitted when the `-Zno-jump-tables`\n+// flag is (not) set.\n+\n+// revisions: unset set\n+// assembly-output: emit-asm\n+// compile-flags: -O\n+// [set] compile-flags: -Zno-jump-tables\n+// only-x86_64\n+\n+#![crate_type = \"lib\"]\n+\n+extern \"C\" {\n+    fn bar1();\n+    fn bar2();\n+    fn bar3();\n+    fn bar4();\n+    fn bar5();\n+    fn bar6();\n+}\n+\n+// CHECK-LABEL: foo:\n+#[no_mangle]\n+pub unsafe fn foo(x: i32) {\n+    // unset: LJTI0_0\n+    // set-NOT: LJTI0_0\n+    match x {\n+        1 => bar1(),\n+        2 => bar2(),\n+        3 => bar3(),\n+        4 => bar4(),\n+        5 => bar5(),\n+        _ => bar6(),\n+    }\n+}"}, {"sha": "8e2cb47566ea9f3f1ff5392e04403fea1b94351b", "filename": "src/test/codegen/no-jump-tables.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a65ec44779ab2c01ba937b40496ca648626d0308/src%2Ftest%2Fcodegen%2Fno-jump-tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65ec44779ab2c01ba937b40496ca648626d0308/src%2Ftest%2Fcodegen%2Fno-jump-tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-jump-tables.rs?ref=a65ec44779ab2c01ba937b40496ca648626d0308", "patch": "@@ -0,0 +1,22 @@\n+// Test that the `no-jump-tables` function attribute are (not) emitted when\n+// the `-Zno-jump-tables` flag is (not) set.\n+\n+// revisions: unset set\n+// needs-llvm-components: x86\n+// compile-flags: --target x86_64-unknown-linux-gnu\n+// [set] compile-flags: -Zno-jump-tables\n+\n+#![crate_type = \"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[no_mangle]\n+pub fn foo() {\n+    // CHECK: @foo() unnamed_addr #0\n+\n+    // unset-NOT: attributes #0 = { {{.*}}\"no-jump-tables\"=\"true\"{{.*}} }\n+    // set: attributes #0 = { {{.*}}\"no-jump-tables\"=\"true\"{{.*}} }\n+}"}, {"sha": "53677b18377098bbf77089472e3a1d8513528c21", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a65ec44779ab2c01ba937b40496ca648626d0308/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a65ec44779ab2c01ba937b40496ca648626d0308/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=a65ec44779ab2c01ba937b40496ca648626d0308", "patch": "@@ -92,6 +92,7 @@\n     -Z                             no-analysis=val -- parse and expand the source, but run no analysis\n     -Z                              no-codegen=val -- run all passes except codegen; no output\n     -Z              no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n+    -Z                          no-jump-tables=val -- disable the jump tables and lookup tables that can be generated from a switch case lowering\n     -Z                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n     -Z                                 no-link=val -- compile without linking\n     -Z                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)"}]}