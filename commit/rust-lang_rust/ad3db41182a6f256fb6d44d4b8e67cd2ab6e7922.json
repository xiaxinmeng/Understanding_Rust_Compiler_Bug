{"sha": "ad3db41182a6f256fb6d44d4b8e67cd2ab6e7922", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkM2RiNDExODJhNmYyNTZmYjZkNDRkNGI4ZTY3Y2QyYWI2ZTc5MjI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-19T18:12:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-19T18:12:25Z"}, "message": "Rollup merge of #75696 - matklad:mirit, r=RalfJung\n\nRemove `#[cfg(miri)]` from OnceCell tests\n\nThey were carried over from once_cell crate, but they are not entirely\ncorrect (as miri now supports more things), and we don't run miri\ntests for std, so let's just remove them.\n\nMaybe one day we'll run miri in std, but then we can just re-install\nthese attributes.", "tree": {"sha": "d3005c84ee82e922dc2d27aa7a2426c9de49571d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3005c84ee82e922dc2d27aa7a2426c9de49571d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad3db41182a6f256fb6d44d4b8e67cd2ab6e7922", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPWuJCRBK7hj4Ov3rIwAAdHIIAAKWb0wTTycNv6iFfOJLMiaH\nhGQvHFXgabikL8NcKW4Y3pnDicdCO/7MDG7ckk6DUGf+uO2TaXENzDIE7RyAALXv\nArBMErISBgy/mXsr5TbnStTLcyGydGgruZJHhi3TPt2zusTfvCB0M+tXhQaMWwHZ\nzaZQDNsyK/GGI4VWSEvslduuMgYELGL8wfz2xBpuPRii5LcK7GTvtK8X67ufh0Qs\nLGIp9hhxtxg2ORScEpj4Yx5zKhgRkDowrwjUJAS/qhNv4GwVdljVEJG2nsE4STiS\nnFwKLnwzWJINh1Q/ieUIDDlLSbq0Jd39u2F4fDkNLlhbjGHyKfHZOHE0a4AV5EY=\n=4FJ6\n-----END PGP SIGNATURE-----\n", "payload": "tree d3005c84ee82e922dc2d27aa7a2426c9de49571d\nparent 0fdc8c06dd36b2ee52b32f2b7431ee5952427f28\nparent 34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b\nauthor Tyler Mandry <tmandry@gmail.com> 1597860745 -0700\ncommitter GitHub <noreply@github.com> 1597860745 -0700\n\nRollup merge of #75696 - matklad:mirit, r=RalfJung\n\nRemove `#[cfg(miri)]` from OnceCell tests\n\nThey were carried over from once_cell crate, but they are not entirely\ncorrect (as miri now supports more things), and we don't run miri\ntests for std, so let's just remove them.\n\nMaybe one day we'll run miri in std, but then we can just re-install\nthese attributes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3db41182a6f256fb6d44d4b8e67cd2ab6e7922", "html_url": "https://github.com/rust-lang/rust/commit/ad3db41182a6f256fb6d44d4b8e67cd2ab6e7922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad3db41182a6f256fb6d44d4b8e67cd2ab6e7922/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "html_url": "https://github.com/rust-lang/rust/commit/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28"}, {"sha": "34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b", "url": "https://api.github.com/repos/rust-lang/rust/commits/34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b", "html_url": "https://github.com/rust-lang/rust/commit/34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b"}], "stats": {"total": 28, "additions": 4, "deletions": 24}, "files": [{"sha": "f0548582d2f5d0bab4ee461616ba84ab190779ae", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ad3db41182a6f256fb6d44d4b8e67cd2ab6e7922/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3db41182a6f256fb6d44d4b8e67cd2ab6e7922/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=ad3db41182a6f256fb6d44d4b8e67cd2ab6e7922", "patch": "@@ -517,6 +517,7 @@ mod tests {\n             mpsc::channel,\n             Mutex,\n         },\n+        thread,\n     };\n \n     #[test]\n@@ -553,26 +554,8 @@ mod tests {\n         }\n     }\n \n-    // miri doesn't support threads\n-    #[cfg(not(miri))]\n     fn spawn_and_wait<R: Send + 'static>(f: impl FnOnce() -> R + Send + 'static) -> R {\n-        crate::thread::spawn(f).join().unwrap()\n-    }\n-\n-    #[cfg(not(miri))]\n-    fn spawn(f: impl FnOnce() + Send + 'static) {\n-        let _ = crate::thread::spawn(f);\n-    }\n-\n-    // \"stub threads\" for Miri\n-    #[cfg(miri)]\n-    fn spawn_and_wait<R: Send + 'static>(f: impl FnOnce() -> R + Send + 'static) -> R {\n-        f(())\n-    }\n-\n-    #[cfg(miri)]\n-    fn spawn(f: impl FnOnce() + Send + 'static) {\n-        f(())\n+        thread::spawn(f).join().unwrap()\n     }\n \n     #[test]\n@@ -735,7 +718,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(miri, ignore)] // leaks memory\n     fn static_sync_lazy() {\n         static XS: SyncLazy<Vec<i32>> = SyncLazy::new(|| {\n             let mut xs = Vec::new();\n@@ -753,7 +735,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(miri, ignore)] // leaks memory\n     fn static_sync_lazy_via_fn() {\n         fn xs() -> &'static Vec<i32> {\n             static XS: SyncOnceCell<Vec<i32>> = SyncOnceCell::new();\n@@ -812,7 +793,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(miri, ignore)] // deadlocks without real threads\n     fn sync_once_cell_does_not_leak_partially_constructed_boxes() {\n         static ONCE_CELL: SyncOnceCell<String> = SyncOnceCell::new();\n \n@@ -824,7 +804,7 @@ mod tests {\n \n         for _ in 0..n_readers {\n             let tx = tx.clone();\n-            spawn(move || {\n+            thread::spawn(move || {\n                 loop {\n                     if let Some(msg) = ONCE_CELL.get() {\n                         tx.send(msg).unwrap();\n@@ -836,7 +816,7 @@ mod tests {\n             });\n         }\n         for _ in 0..n_writers {\n-            spawn(move || {\n+            thread::spawn(move || {\n                 let _ = ONCE_CELL.set(MSG.to_owned());\n             });\n         }"}]}