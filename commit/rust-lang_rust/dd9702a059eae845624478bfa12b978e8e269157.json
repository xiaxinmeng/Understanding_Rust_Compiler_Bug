{"sha": "dd9702a059eae845624478bfa12b978e8e269157", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOTcwMmEwNTllYWU4NDU2MjQ0NzhiZmExMmI5NzhlOGUyNjkxNTc=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-08-10T10:40:14Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-19T08:36:36Z"}, "message": "Do not call the `const_eval` query in mir interpretation except for caching of nulary intrinsics", "tree": {"sha": "33c716576ca9d6fbced188c2e3ab38440a8d971d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33c716576ca9d6fbced188c2e3ab38440a8d971d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd9702a059eae845624478bfa12b978e8e269157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9702a059eae845624478bfa12b978e8e269157", "html_url": "https://github.com/rust-lang/rust/commit/dd9702a059eae845624478bfa12b978e8e269157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd9702a059eae845624478bfa12b978e8e269157/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6c60bbe5de9a090c8da30d5edbd27582f6b19e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c60bbe5de9a090c8da30d5edbd27582f6b19e6", "html_url": "https://github.com/rust-lang/rust/commit/a6c60bbe5de9a090c8da30d5edbd27582f6b19e6"}], "stats": {"total": 42, "additions": 8, "deletions": 34}, "files": [{"sha": "8b0e993f02dc3b04a07589773922eca614ad1a30", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd9702a059eae845624478bfa12b978e8e269157/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9702a059eae845624478bfa12b978e8e269157/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=dd9702a059eae845624478bfa12b978e8e269157", "patch": "@@ -51,7 +51,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n \n         let gid = GlobalId { instance, promoted: None };\n \n-        let place = self.const_eval_raw(gid)?;\n+        let place = self.const_eval(gid)?;\n \n         self.copy_op(place.into(), dest)?;\n "}, {"sha": "2bf14cca877eff7e4008b8ec3f14b60c9dcfbb75", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dd9702a059eae845624478bfa12b978e8e269157/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9702a059eae845624478bfa12b978e8e269157/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=dd9702a059eae845624478bfa12b978e8e269157", "patch": "@@ -20,7 +20,7 @@ use rustc_span::{Pos, Span};\n use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n \n use super::{\n-    Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, OpTy, Operand, Place, PlaceTy,\n+    Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, Operand, Place, PlaceTy,\n     ScalarMaybeUninit, StackPopJump,\n };\n use crate::transform::validate::equal_up_to_regions;\n@@ -875,32 +875,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub(super) fn const_eval(\n-        &self,\n-        gid: GlobalId<'tcx>,\n-        ty: Ty<'tcx>,\n-    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        // For statics we pick `ParamEnv::reveal_all`, because statics don't have generics\n-        // and thus don't care about the parameter environment. While we could just use\n-        // `self.param_env`, that would mean we invoke the query to evaluate the static\n-        // with different parameter environments, thus causing the static to be evaluated\n-        // multiple times.\n-        let param_env = if self.tcx.is_static(gid.instance.def_id()) {\n-            ty::ParamEnv::reveal_all()\n-        } else {\n-            self.param_env\n-        };\n-        let val = self.tcx.const_eval_global_id(param_env, gid, Some(self.tcx.span))?;\n-\n-        // Even though `ecx.const_eval` is called from `const_to_op` we can never have a\n-        // recursion deeper than one level, because the `tcx.const_eval` above is guaranteed to not\n-        // return `ConstValue::Unevaluated`, which is the only way that `const_to_op` will call\n-        // `ecx.const_eval`.\n-        let const_ = ty::Const { val: ty::ConstKind::Value(val), ty };\n-        self.const_to_op(&const_, None)\n-    }\n-\n-    pub fn const_eval_raw(\n+    pub fn const_eval(\n         &self,\n         gid: GlobalId<'tcx>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {"}, {"sha": "0664f25e409dcd3c8765233d1763a786a2fe13d7", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd9702a059eae845624478bfa12b978e8e269157/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9702a059eae845624478bfa12b978e8e269157/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=dd9702a059eae845624478bfa12b978e8e269157", "patch": "@@ -152,7 +152,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     sym::type_name => self.tcx.mk_static_str(),\n                     _ => bug!(\"already checked for nullary intrinsics\"),\n                 };\n-                let val = self.const_eval(gid, ty)?;\n+                let val =\n+                    self.tcx.const_eval_global_id(self.param_env, gid, Some(self.tcx.span))?;\n+                let const_ = ty::Const { val: ty::ConstKind::Value(val), ty };\n+                let val = self.const_to_op(&const_, None)?;\n                 self.copy_op(val, dest)?;\n             }\n "}, {"sha": "54c43b518fdddf4e7f0d081e93f6f2dd4bb44260", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd9702a059eae845624478bfa12b978e8e269157/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9702a059eae845624478bfa12b978e8e269157/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=dd9702a059eae845624478bfa12b978e8e269157", "patch": "@@ -553,11 +553,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Error(_) => throw_inval!(TypeckError(ErrorReported)),\n             ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                 let instance = self.resolve(def.did, substs)?;\n-                // We use `const_eval` here and `const_eval_raw` elsewhere in mir interpretation.\n-                // The reason we use `const_eval` here is that there can never be a `ty::ConstKind`\n-                // that directly mentions the initializer of a static. Statics are always encoded\n-                // as constants with vaule `&STATIC`.\n-                return Ok(self.const_eval(GlobalId { instance, promoted }, val.ty)?);\n+                return Ok(self.const_eval(GlobalId { instance, promoted })?.into());\n             }\n             ty::ConstKind::Infer(..)\n             | ty::ConstKind::Bound(..)"}]}