{"sha": "0648f03133a899269a86cdd204d45582871bbb61", "node_id": "C_kwDOAAsO6NoAKDA2NDhmMDMxMzNhODk5MjY5YTg2Y2RkMjA0ZDQ1NTgyODcxYmJiNjE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-06T22:34:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-13T16:07:02Z"}, "message": "ensure all worker threads stay around", "tree": {"sha": "3cd90c5a8d84c1ca0147b26cfcbaebcbec58fd8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cd90c5a8d84c1ca0147b26cfcbaebcbec58fd8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0648f03133a899269a86cdd204d45582871bbb61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0648f03133a899269a86cdd204d45582871bbb61", "html_url": "https://github.com/rust-lang/rust/commit/0648f03133a899269a86cdd204d45582871bbb61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0648f03133a899269a86cdd204d45582871bbb61/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c1f50bf2bef7b25613a4c42322de87ffcf8c922", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1f50bf2bef7b25613a4c42322de87ffcf8c922", "html_url": "https://github.com/rust-lang/rust/commit/4c1f50bf2bef7b25613a4c42322de87ffcf8c922"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "8b7b4783fabb2399701d74d4a75a1552729166e5", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0648f03133a899269a86cdd204d45582871bbb61/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648f03133a899269a86cdd204d45582871bbb61/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=0648f03133a899269a86cdd204d45582871bbb61", "patch": "@@ -1,3 +1,4 @@\n+use std::collections::VecDeque;\n use std::fmt::Write;\n use std::path::{Path, PathBuf};\n use std::process::{Command, ExitStatus};\n@@ -6,7 +7,6 @@ use std::sync::Mutex;\n \n use colored::*;\n use comments::ErrorMatch;\n-use crossbeam::queue::SegQueue;\n use regex::Regex;\n use rustc_stderr::{Level, Message};\n \n@@ -55,9 +55,8 @@ pub fn run_tests(config: Config) {\n     // Get the triple with which to run the tests\n     let target = config.target.clone().unwrap_or_else(|| config.get_host());\n \n-    // A queue for files or folders to process\n-    let todo = SegQueue::new();\n-    todo.push(config.root_dir.clone());\n+    // A channel for files to process\n+    let (submit, receive) = crossbeam::channel::unbounded();\n \n     // Some statistics and failure reports.\n     let failures = Mutex::new(vec![]);\n@@ -66,20 +65,31 @@ pub fn run_tests(config: Config) {\n     let filtered = AtomicUsize::default();\n \n     crossbeam::scope(|s| {\n+        // Create a thread that is in charge of walking the directory and submitting jobs.\n+        // It closes the channel when it is done.\n+        s.spawn(|_| {\n+            let mut todo = VecDeque::new();\n+            todo.push_back(config.root_dir.clone());\n+            while let Some(path) = todo.pop_front() {\n+                if path.is_dir() {\n+                    // Enqueue everything inside this directory.\n+                    for entry in std::fs::read_dir(path).unwrap() {\n+                        todo.push_back(entry.unwrap().path());\n+                    }\n+                } else if path.extension().map(|ext| ext == \"rs\").unwrap_or(false) {\n+                    // Forward .rs files to the test workers.\n+                    submit.send(path).unwrap();\n+                }\n+            }\n+            // There will be no more jobs. This signals the workers to quit.\n+            // (This also ensures `submit` is moved into this closure.)\n+            drop(submit);\n+        });\n+\n+        // Create N worker threads that receive files to test.\n         for _ in 0..std::thread::available_parallelism().unwrap().get() {\n             s.spawn(|_| {\n-                while let Some(path) = todo.pop() {\n-                    // Collect everything inside directories\n-                    if path.is_dir() {\n-                        for entry in std::fs::read_dir(path).unwrap() {\n-                            todo.push(entry.unwrap().path());\n-                        }\n-                        continue;\n-                    }\n-                    // Only look at .rs files\n-                    if !path.extension().map(|ext| ext == \"rs\").unwrap_or(false) {\n-                        continue;\n-                    }\n+                for path in &receive {\n                     if !config.path_filter.is_empty() {\n                         let path_display = path.display().to_string();\n                         if !config.path_filter.iter().any(|filter| path_display.contains(filter)) {"}]}