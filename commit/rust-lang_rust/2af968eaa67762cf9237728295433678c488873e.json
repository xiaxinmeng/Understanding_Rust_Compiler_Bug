{"sha": "2af968eaa67762cf9237728295433678c488873e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZjk2OGVhYTY3NzYyY2Y5MjM3NzI4Mjk1NDMzNjc4YzQ4ODg3M2U=", "commit": {"author": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2015-02-11T17:12:57Z"}, "committer": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2015-02-11T17:12:57Z"}, "message": "Eliminate assoc type projection predicate candidate duplicates\n\nWhen projecting associate types for a trait's default methods, the\ntrait itself was added to the predicate candidate list twice: one from\nparameter environment, the other from trait definition. Then the\nduplicates were deemed as code ambiguity and the compiler rejected the\ncode. Simply checking and dropping the duplicates solves the issue.\n\nCloses #22036", "tree": {"sha": "788680619d8fb49ded9d78a73c8391d3c60eb8d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/788680619d8fb49ded9d78a73c8391d3c60eb8d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2af968eaa67762cf9237728295433678c488873e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2af968eaa67762cf9237728295433678c488873e", "html_url": "https://github.com/rust-lang/rust/commit/2af968eaa67762cf9237728295433678c488873e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2af968eaa67762cf9237728295433678c488873e/comments", "author": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1500df8934431dd7842827209528211ae53ded12", "url": "https://api.github.com/repos/rust-lang/rust/commits/1500df8934431dd7842827209528211ae53ded12", "html_url": "https://github.com/rust-lang/rust/commit/1500df8934431dd7842827209528211ae53ded12"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "bddbb7c02baa77b827196d6b8ff4af702da8c939", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2af968eaa67762cf9237728295433678c488873e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2af968eaa67762cf9237728295433678c488873e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=2af968eaa67762cf9237728295433678c488873e", "patch": "@@ -63,7 +63,7 @@ mod util;\n /// either identifying an `impl` (e.g., `impl Eq for int`) that\n /// provides the required vtable, or else finding a bound that is in\n /// scope. The eventual result is usually a `Selection` (defined below).\n-#[derive(Clone)]\n+#[derive(Clone, PartialEq, Eq)]\n pub struct Obligation<'tcx, T> {\n     pub cause: ObligationCause<'tcx>,\n     pub recursion_depth: uint,\n@@ -74,7 +74,7 @@ pub type PredicateObligation<'tcx> = Obligation<'tcx, ty::Predicate<'tcx>>;\n pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n /// Why did we incur this obligation? Used for error reporting.\n-#[derive(Clone)]\n+#[derive(Clone, PartialEq, Eq)]\n pub struct ObligationCause<'tcx> {\n     pub span: Span,\n \n@@ -89,7 +89,7 @@ pub struct ObligationCause<'tcx> {\n     pub code: ObligationCauseCode<'tcx>\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, PartialEq, Eq)]\n pub enum ObligationCauseCode<'tcx> {\n     /// Not well classified or should be obvious from span.\n     MiscObligation,\n@@ -129,7 +129,7 @@ pub enum ObligationCauseCode<'tcx> {\n     CompareImplMethodObligation,\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, PartialEq, Eq)]\n pub struct DerivedObligationCause<'tcx> {\n     /// The trait reference of the parent obligation that led to the\n     /// current obligation. Note that only trait obligations lead to\n@@ -251,7 +251,7 @@ pub enum Vtable<'tcx, N> {\n /// is `Obligation`, as one might expect. During trans, however, this\n /// is `()`, because trans only requires a shallow resolution of an\n /// impl, and nested obligations are satisfied later.\n-#[derive(Clone)]\n+#[derive(Clone, PartialEq, Eq)]\n pub struct VtableImplData<'tcx, N> {\n     pub impl_def_id: ast::DefId,\n     pub substs: subst::Substs<'tcx>,"}, {"sha": "7d02adea1fa5ce245efde5236933919718ef7428", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2af968eaa67762cf9237728295433678c488873e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2af968eaa67762cf9237728295433678c488873e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=2af968eaa67762cf9237728295433678c488873e", "patch": "@@ -54,6 +54,7 @@ pub struct MismatchedProjectionTypes<'tcx> {\n     pub err: ty::type_err<'tcx>\n }\n \n+#[derive(PartialEq, Eq)]\n enum ProjectionTyCandidate<'tcx> {\n     ParamEnv(ty::PolyProjectionPredicate<'tcx>),\n     Impl(VtableImplData<'tcx, PredicateObligation<'tcx>>),\n@@ -481,6 +482,25 @@ fn project_type<'cx,'tcx>(\n \n     // We probably need some winnowing logic similar to select here.\n \n+    // Drop duplicates.\n+    //\n+    // Note: `candidates.vec` seems to be on the critical path of the\n+    // compiler. Replacing it with an hash set was also tried, which would\n+    // render the following dedup unnecessary. It led to cleaner code but\n+    // prolonged compiling time of `librustc` from 5m30s to 6m in one test, or\n+    // ~9% performance lost.\n+    if candidates.vec.len() > 1 {\n+        let mut i = 0;\n+        while i < candidates.vec.len() {\n+            let has_dup = (0..i).any(|j| candidates.vec[i] == candidates.vec[j]);\n+            if has_dup {\n+                candidates.vec.swap_remove(i);\n+            } else {\n+                i += 1;\n+            }\n+        }\n+    }\n+\n     if candidates.ambiguous || candidates.vec.len() > 1 {\n         return Err(ProjectionTyError::TooManyCandidates);\n     }"}, {"sha": "c06a29c09f78eeda9eb6e5354c243976f48a03f3", "filename": "src/test/run-pass/issue-22036.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2af968eaa67762cf9237728295433678c488873e/src%2Ftest%2Frun-pass%2Fissue-22036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2af968eaa67762cf9237728295433678c488873e/src%2Ftest%2Frun-pass%2Fissue-22036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22036.rs?ref=2af968eaa67762cf9237728295433678c488873e", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait DigitCollection: Sized {\n+    type Iter: Iterator<Item = u8>;\n+    fn digit_iter(self) -> Self::Iter;\n+\n+    fn digit_sum(self) -> u32 {\n+        self.digit_iter()\n+            .map(|digit: u8| digit as u32)\n+            .fold(0, |sum, digit| sum + digit)\n+    }\n+}\n+\n+impl<I> DigitCollection for I where I: Iterator<Item=u8> {\n+    type Iter = I;\n+\n+    fn digit_iter(self) -> I {\n+        self\n+    }\n+}\n+\n+fn main() {\n+    let xs = vec![1u8, 2, 3, 4, 5];\n+    assert_eq!(xs.into_iter().digit_sum(), 15);\n+}"}]}