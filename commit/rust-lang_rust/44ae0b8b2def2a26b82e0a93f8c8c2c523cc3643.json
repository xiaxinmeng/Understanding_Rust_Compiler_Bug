{"sha": "44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YWUwYjhiMmRlZjJhMjZiODJlMGE5M2Y4YzhjMmM1MjNjYzM2NDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-22T06:02:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-22T06:02:21Z"}, "message": "Auto merge of #76799 - Mark-Simulacrum:fix-cross-compile-dist, r=alexcrichton\n\nFix cross compiling dist/build invocations\n\nI am uncertain why the first commit is not affecting CI. I suspect it's because we pass --disable-docs on most of our cross-compilation builders. The second commit doesn't affect CI because CI runs x.py dist, not x.py build.\n\nBoth commits are standalone; together they should resolve #76733. The first commit doesn't really fix that issue but rather just fixes cross-compiled x.py dist, resolving a bug introduced in #76549.", "tree": {"sha": "29a2bd0e86208b0aa2e192c45c2bd74d76b53209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a2bd0e86208b0aa2e192c45c2bd74d76b53209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643", "html_url": "https://github.com/rust-lang/rust/commit/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2bc344eb23d8c1d18e803b3f1e631cf99926fbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bc344eb23d8c1d18e803b3f1e631cf99926fbb", "html_url": "https://github.com/rust-lang/rust/commit/c2bc344eb23d8c1d18e803b3f1e631cf99926fbb"}, {"sha": "363aff0a9d0b85285b7501cb04dd8263d29d273a", "url": "https://api.github.com/repos/rust-lang/rust/commits/363aff0a9d0b85285b7501cb04dd8263d29d273a", "html_url": "https://github.com/rust-lang/rust/commit/363aff0a9d0b85285b7501cb04dd8263d29d273a"}], "stats": {"total": 106, "additions": 90, "deletions": 16}, "files": [{"sha": "4a9082d3e8576d828e65c1d1fa9b23c2bce3e413", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643", "patch": "@@ -93,6 +93,54 @@ mod defaults {\n         assert!(builder.cache.all::<compile::Rustc>().is_empty());\n     }\n \n+    #[test]\n+    fn build_cross_compile() {\n+        let config = Config { stage: 1, ..configure(\"build\", &[\"B\"], &[\"B\"]) };\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        let b = TargetSelection::from_user(\"B\");\n+\n+        // Ideally, this build wouldn't actually have `target: a`\n+        // rustdoc/rustcc/std here (the user only requested a host=B build, so\n+        // there's not really a need for us to build for target A in this case\n+        // (since we're producing stage 1 libraries/binaries).  But currently\n+        // rustbuild is just a bit buggy here; this should be fixed though.\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Std>()),\n+            &[\n+                compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 0 }, target: b },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n+            ]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Assemble>()),\n+            &[\n+                compile::Assemble { target_compiler: Compiler { host: a, stage: 0 } },\n+                compile::Assemble { target_compiler: Compiler { host: a, stage: 1 } },\n+                compile::Assemble { target_compiler: Compiler { host: b, stage: 1 } },\n+            ]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<tool::Rustdoc>()),\n+            &[\n+                tool::Rustdoc { compiler: Compiler { host: a, stage: 1 } },\n+                tool::Rustdoc { compiler: Compiler { host: b, stage: 1 } },\n+            ],\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Rustc>()),\n+            &[\n+                compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: b },\n+            ]\n+        );\n+    }\n+\n     #[test]\n     fn doc_default() {\n         let mut config = configure(\"doc\", &[], &[]);"}, {"sha": "aa670bd9a2e0c71e63a77b1b2586e8ad3d450277", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643", "patch": "@@ -752,6 +752,7 @@ impl Step for RustcBook {\n         let out_listing = out_base.join(\"src/lints\");\n         builder.cp_r(&builder.src.join(\"src/doc/rustc\"), &out_base);\n         builder.info(&format!(\"Generating lint docs ({})\", self.target));\n+\n         let rustc = builder.rustc(self.compiler);\n         // The tool runs `rustc` for extracting output examples, so it needs a\n         // functional sysroot.\n@@ -762,7 +763,8 @@ impl Step for RustcBook {\n         cmd.arg(\"--out\");\n         cmd.arg(&out_listing);\n         cmd.arg(\"--rustc\");\n-        cmd.arg(rustc);\n+        cmd.arg(&rustc);\n+        cmd.arg(\"--rustc-target\").arg(&self.target.rustc_target_arg());\n         if builder.config.verbose() {\n             cmd.arg(\"--verbose\");\n         }"}, {"sha": "290e3744852f4d2dcbf38ff5866a56ba4ad5d9a0", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643", "patch": "@@ -470,7 +470,11 @@ impl Step for Rustdoc {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Rustdoc {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n+            // Note: this is somewhat unique in that we actually want a *target*\n+            // compiler here, because rustdoc *is* a compiler. We won't be using\n+            // this as the compiler to build with, but rather this is \"what\n+            // compiler are we producing\"?\n+            compiler: run.builder.compiler(run.builder.top_stage, run.target),\n         });\n     }\n "}, {"sha": "6b32ebdc284f47800dad49ad6e60ccb8d6d45ea8", "filename": "src/tools/lint-docs/src/groups.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs?ref=44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643", "patch": "@@ -18,10 +18,10 @@ static GROUP_DESCRIPTIONS: &[(&str, &str)] = &[\n /// Updates the documentation of lint groups.\n pub(crate) fn generate_group_docs(\n     lints: &[Lint],\n-    rustc_path: &Path,\n+    rustc: crate::Rustc<'_>,\n     out_path: &Path,\n ) -> Result<(), Box<dyn Error>> {\n-    let groups = collect_groups(rustc_path)?;\n+    let groups = collect_groups(rustc)?;\n     let groups_path = out_path.join(\"groups.md\");\n     let contents = fs::read_to_string(&groups_path)\n         .map_err(|e| format!(\"could not read {}: {}\", groups_path.display(), e))?;\n@@ -36,9 +36,9 @@ pub(crate) fn generate_group_docs(\n type LintGroups = BTreeMap<String, BTreeSet<String>>;\n \n /// Collects the group names from rustc.\n-fn collect_groups(rustc: &Path) -> Result<LintGroups, Box<dyn Error>> {\n+fn collect_groups(rustc: crate::Rustc<'_>) -> Result<LintGroups, Box<dyn Error>> {\n     let mut result = BTreeMap::new();\n-    let mut cmd = Command::new(rustc);\n+    let mut cmd = Command::new(rustc.path);\n     cmd.arg(\"-Whelp\");\n     let output = cmd.output().map_err(|e| format!(\"failed to run command {:?}\\n{}\", cmd, e))?;\n     if !output.status.success() {"}, {"sha": "6ca71dcaf3cd0b735fd2aa4f4a1b78237b97173b", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643", "patch": "@@ -45,16 +45,22 @@ impl Level {\n     }\n }\n \n+#[derive(Copy, Clone)]\n+pub struct Rustc<'a> {\n+    pub path: &'a Path,\n+    pub target: &'a str,\n+}\n+\n /// Collects all lints, and writes the markdown documentation at the given directory.\n pub fn extract_lint_docs(\n     src_path: &Path,\n     out_path: &Path,\n-    rustc_path: &Path,\n+    rustc: Rustc<'_>,\n     verbose: bool,\n ) -> Result<(), Box<dyn Error>> {\n     let mut lints = gather_lints(src_path)?;\n     for lint in &mut lints {\n-        generate_output_example(lint, rustc_path, verbose).map_err(|e| {\n+        generate_output_example(lint, rustc, verbose).map_err(|e| {\n             format!(\n                 \"failed to test example in lint docs for `{}` in {}:{}: {}\",\n                 lint.name,\n@@ -65,7 +71,7 @@ pub fn extract_lint_docs(\n         })?;\n     }\n     save_lints_markdown(&lints, &out_path.join(\"listing\"))?;\n-    groups::generate_group_docs(&lints, rustc_path, out_path)?;\n+    groups::generate_group_docs(&lints, rustc, out_path)?;\n     Ok(())\n }\n \n@@ -208,7 +214,7 @@ fn lint_name(line: &str) -> Result<String, &'static str> {\n /// actual output from the compiler.\n fn generate_output_example(\n     lint: &mut Lint,\n-    rustc_path: &Path,\n+    rustc: Rustc<'_>,\n     verbose: bool,\n ) -> Result<(), Box<dyn Error>> {\n     // Explicit list of lints that are allowed to not have an example. Please\n@@ -230,7 +236,7 @@ fn generate_output_example(\n     // separate test suite, and use an include mechanism such as mdbook's\n     // `{{#rustdoc_include}}`.\n     if !lint.is_ignored() {\n-        replace_produces(lint, rustc_path, verbose)?;\n+        replace_produces(lint, rustc, verbose)?;\n     }\n     Ok(())\n }\n@@ -261,7 +267,7 @@ fn check_style(lint: &Lint) -> Result<(), Box<dyn Error>> {\n /// output from the compiler.\n fn replace_produces(\n     lint: &mut Lint,\n-    rustc_path: &Path,\n+    rustc: Rustc<'_>,\n     verbose: bool,\n ) -> Result<(), Box<dyn Error>> {\n     let mut lines = lint.doc.iter_mut();\n@@ -302,7 +308,7 @@ fn replace_produces(\n                 Some(line) if line.is_empty() => {}\n                 Some(line) if line == \"{{produces}}\" => {\n                     let output =\n-                        generate_lint_output(&lint.name, &example, &options, rustc_path, verbose)?;\n+                        generate_lint_output(&lint.name, &example, &options, rustc, verbose)?;\n                     line.replace_range(\n                         ..,\n                         &format!(\n@@ -329,7 +335,7 @@ fn generate_lint_output(\n     name: &str,\n     example: &[&mut String],\n     options: &[&str],\n-    rustc_path: &Path,\n+    rustc: Rustc<'_>,\n     verbose: bool,\n ) -> Result<String, Box<dyn Error>> {\n     if verbose {\n@@ -364,13 +370,14 @@ fn generate_lint_output(\n     }\n     fs::write(&tempfile, source)\n         .map_err(|e| format!(\"failed to write {}: {}\", tempfile.display(), e))?;\n-    let mut cmd = Command::new(rustc_path);\n+    let mut cmd = Command::new(rustc.path);\n     if options.contains(&\"edition2015\") {\n         cmd.arg(\"--edition=2015\");\n     } else {\n         cmd.arg(\"--edition=2018\");\n     }\n     cmd.arg(\"--error-format=json\");\n+    cmd.arg(\"--target\").arg(rustc.target);\n     if options.contains(&\"test\") {\n         cmd.arg(\"--test\");\n     }"}, {"sha": "5db49007d375c1b263f9d4a132fc27d25bbd47b6", "filename": "src/tools/lint-docs/src/main.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs?ref=44ae0b8b2def2a26b82e0a93f8c8c2c523cc3643", "patch": "@@ -13,6 +13,7 @@ fn doit() -> Result<(), Box<dyn Error>> {\n     let mut src_path = None;\n     let mut out_path = None;\n     let mut rustc_path = None;\n+    let mut rustc_target = None;\n     let mut verbose = false;\n     while let Some(arg) = args.next() {\n         match arg.as_str() {\n@@ -34,6 +35,12 @@ fn doit() -> Result<(), Box<dyn Error>> {\n                     None => return Err(\"--rustc requires a value\".into()),\n                 };\n             }\n+            \"--rustc-target\" => {\n+                rustc_target = match args.next() {\n+                    Some(s) => Some(s),\n+                    None => return Err(\"--rustc-target requires a value\".into()),\n+                };\n+            }\n             \"-v\" | \"--verbose\" => verbose = true,\n             s => return Err(format!(\"unexpected argument `{}`\", s).into()),\n         }\n@@ -47,10 +54,16 @@ fn doit() -> Result<(), Box<dyn Error>> {\n     if rustc_path.is_none() {\n         return Err(\"--rustc must be specified to the path of rustc\".into());\n     }\n+    if rustc_target.is_none() {\n+        return Err(\"--rustc-target must be specified to the rustc target\".into());\n+    }\n     lint_docs::extract_lint_docs(\n         &src_path.unwrap(),\n         &out_path.unwrap(),\n-        &rustc_path.unwrap(),\n+        lint_docs::Rustc {\n+            path: rustc_path.as_deref().unwrap(),\n+            target: rustc_target.as_deref().unwrap(),\n+        },\n         verbose,\n     )\n }"}]}