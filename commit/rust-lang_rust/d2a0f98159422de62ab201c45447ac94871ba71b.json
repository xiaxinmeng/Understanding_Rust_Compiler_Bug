{"sha": "d2a0f98159422de62ab201c45447ac94871ba71b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYTBmOTgxNTk0MjJkZTYyYWIyMDFjNDU0NDdhYzk0ODcxYmE3MWI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-07T05:47:14Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-07T07:26:51Z"}, "message": "Rollup merge of #53895 - joshtriplett:tidy-tidy, r=nikomatsakis\n\ntidy: Cleanups and clippy warning fixes\n\nThis eliminates various clippy warnings in the tidy tool, as well as\nmaking some related cleanups. These changes should not introduce any\nfunctional differences.", "tree": {"sha": "aa5eb53b3485fe2de5b1b406c05194a27acc75e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa5eb53b3485fe2de5b1b406c05194a27acc75e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2a0f98159422de62ab201c45447ac94871ba71b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAluSKDwACgkQ/vbIBR0O\nATxkQw/9GDtZGLI7T5F/0WRZxhmi5pa3cuAEjJ7f18IU3SQ5k652rcZ6o1D43bmC\nfmsdWzExd+jomq6oLDYDajgIUoTQC5dvH783ZZI8LbBNxurjgHSJuSejCebtHCvr\n2/nJiSJePyK00OlkHcors2aaPBD06QdpGiuUM7oAqdO/sj+LJxZHkNzLbFYoBSHY\nidnELS+/0Lg6CM65tINOYXepoCu2ZtlyVj4qTl9eysffQv9wPXEs/NWji65dG7bg\nUCDx8871BFlG7H/XnqYacPXUzffC25iuGgIkTqeGd+Mr7F0Nkh8/N9w0w1NNQDaF\n1fXSWWj/8XY/F5lKhpRI3CULWO9IKwYaVr3Ypv7msf59MBhgLmzeCA7tCD+lZHVO\nonF3D7WzHMdFVwrynQYZSseFNpEmzEFoIo3K8lBXH8pPRBqRBi9M44ggjQsQgfW5\nOxzQDxt+Glpq5X9iAdY1TR3I31JyE3y59CLzIj3YRyJud7lJct6uOL8O19XFucq0\nySNiTvUMxLsWHd5LhALMvNccGmA9RaYfOqRMnXf1SCUArAtqDqjb4TG3PQCDLI94\nuCBKkZ+pfozM62Z6Oy9ESxrq7ulwXXit9aL8VkNPWrUzjT4pb/BCKLtCHPPJoJmS\nRhsZ2mnPwBm5dPXkJnHPTgFMEegJUV9mZCzNEn3rtqrNC4R0tqY=\n=ow9s\n-----END PGP SIGNATURE-----", "payload": "tree aa5eb53b3485fe2de5b1b406c05194a27acc75e7\nparent 3c7704367714a136ad40711b6d6b8f5691333f6b\nparent a5c86fe6e1693add443ca94616bd262e393f6c7b\nauthor kennytm <kennytm@gmail.com> 1536299234 +0800\ncommitter kennytm <kennytm@gmail.com> 1536305211 +0800\n\nRollup merge of #53895 - joshtriplett:tidy-tidy, r=nikomatsakis\n\ntidy: Cleanups and clippy warning fixes\n\nThis eliminates various clippy warnings in the tidy tool, as well as\nmaking some related cleanups. These changes should not introduce any\nfunctional differences.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a0f98159422de62ab201c45447ac94871ba71b", "html_url": "https://github.com/rust-lang/rust/commit/d2a0f98159422de62ab201c45447ac94871ba71b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2a0f98159422de62ab201c45447ac94871ba71b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c7704367714a136ad40711b6d6b8f5691333f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7704367714a136ad40711b6d6b8f5691333f6b", "html_url": "https://github.com/rust-lang/rust/commit/3c7704367714a136ad40711b6d6b8f5691333f6b"}, {"sha": "a5c86fe6e1693add443ca94616bd262e393f6c7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c86fe6e1693add443ca94616bd262e393f6c7b", "html_url": "https://github.com/rust-lang/rust/commit/a5c86fe6e1693add443ca94616bd262e393f6c7b"}], "stats": {"total": 101, "additions": 44, "deletions": 57}, "files": [{"sha": "69f61bc248dbb5e6a0633799e5c5e8de4b309d41", "filename": "src/tools/tidy/src/cargo.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs?ref=d2a0f98159422de62ab201c45447ac94871ba71b", "patch": "@@ -65,9 +65,8 @@ fn verify(tomlfile: &Path, libfile: &Path, bad: &mut bool) {\n         Some(i) => &toml[i+1..],\n         None => return,\n     };\n-    let mut lines = deps.lines().peekable();\n-    while let Some(line) = lines.next() {\n-        if line.starts_with(\"[\") {\n+    for line in deps.lines() {\n+        if line.starts_with('[') {\n             break\n         }\n "}, {"sha": "f76c2d4e8cc542e061bc63020c33c248cb14f658", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=d2a0f98159422de62ab201c45447ac94871ba71b", "patch": "@@ -18,7 +18,7 @@ use std::process::Command;\n \n use serde_json;\n \n-static LICENSES: &'static [&'static str] = &[\n+const LICENSES: &[&str] = &[\n     \"MIT/Apache-2.0\",\n     \"MIT / Apache-2.0\",\n     \"Apache-2.0/MIT\",\n@@ -33,7 +33,7 @@ static LICENSES: &'static [&'static str] = &[\n /// should be considered bugs. Exceptions are only allowed in Rust\n /// tooling. It is _crucial_ that no exception crates be dependencies\n /// of the Rust runtime (std / test).\n-static EXCEPTIONS: &'static [&'static str] = &[\n+const EXCEPTIONS: &[&str] = &[\n     \"mdbook\",             // MPL2, mdbook\n     \"openssl\",            // BSD+advertising clause, cargo, mdbook\n     \"pest\",               // MPL2, mdbook via handlebars\n@@ -54,13 +54,13 @@ static EXCEPTIONS: &'static [&'static str] = &[\n ];\n \n /// Which crates to check against the whitelist?\n-static WHITELIST_CRATES: &'static [CrateVersion] = &[\n+const WHITELIST_CRATES: &[CrateVersion] = &[\n     CrateVersion(\"rustc\", \"0.0.0\"),\n     CrateVersion(\"rustc_codegen_llvm\", \"0.0.0\"),\n ];\n \n /// Whitelist of crates rustc is allowed to depend on. Avoid adding to the list if possible.\n-static WHITELIST: &'static [Crate] = &[\n+const WHITELIST: &[Crate] = &[\n     Crate(\"aho-corasick\"),\n     Crate(\"arrayvec\"),\n     Crate(\"atty\"),\n@@ -208,12 +208,13 @@ pub fn check(path: &Path, bad: &mut bool) {\n         let dir = t!(dir);\n \n         // skip our exceptions\n-        if EXCEPTIONS.iter().any(|exception| {\n+        let is_exception = EXCEPTIONS.iter().any(|exception| {\n             dir.path()\n                 .to_str()\n                 .unwrap()\n                 .contains(&format!(\"src/vendor/{}\", exception))\n-        }) {\n+        });\n+        if is_exception {\n             continue;\n         }\n \n@@ -242,7 +243,7 @@ pub fn check_whitelist(path: &Path, cargo: &Path, bad: &mut bool) {\n         unapproved.append(&mut bad);\n     }\n \n-    if unapproved.len() > 0 {\n+    if !unapproved.is_empty() {\n         println!(\"Dependencies not on the whitelist:\");\n         for dep in unapproved {\n             println!(\"* {}\", dep.id_str());"}, {"sha": "9f55d6f9ad63613b628d400573a87498ae97f370", "filename": "src/tools/tidy/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs?ref=d2a0f98159422de62ab201c45447ac94871ba71b", "patch": "@@ -50,7 +50,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             }\n \n             let mut search = line;\n-            while let Some(i) = search.find(\"E\") {\n+            while let Some(i) = search.find('E') {\n                 search = &search[i + 1..];\n                 let code = if search.len() > 4 {\n                     search[..4].parse::<u32>()"}, {"sha": "7f58b440a833e07b5bd95e90c9fe17ac41374c4b", "filename": "src/tools/tidy/src/extdeps.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs?ref=d2a0f98159422de62ab201c45447ac94871ba71b", "patch": "@@ -15,7 +15,7 @@ use std::io::Read;\n use std::path::Path;\n \n /// List of whitelisted sources for packages\n-static WHITELISTED_SOURCES: &'static [&'static str] = &[\n+const WHITELISTED_SOURCES: &[&str] = &[\n     \"\\\"registry+https://github.com/rust-lang/crates.io-index\\\"\",\n ];\n \n@@ -29,17 +29,15 @@ pub fn check(path: &Path, bad: &mut bool) {\n     t!(t!(File::open(path)).read_to_string(&mut cargo_lock));\n \n     // process each line\n-    let mut lines = cargo_lock.lines();\n-    while let Some(line) = lines.next() {\n+    for line in cargo_lock.lines() {\n \n         // consider only source entries\n         if ! line.starts_with(\"source = \") {\n             continue;\n         }\n \n         // extract source value\n-        let parts: Vec<&str> = line.splitn(2, \"=\").collect();\n-        let source = parts[1].trim();\n+        let source = line.splitn(2, '=').nth(1).unwrap().trim();\n \n         // ensure source is whitelisted\n         if !WHITELISTED_SOURCES.contains(&&*source) {"}, {"sha": "85b123e4af51f7ffc6c0c5157c166be94db6b9c7", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=d2a0f98159422de62ab201c45447ac94871ba71b", "patch": "@@ -75,7 +75,7 @@ pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n             return;\n         }\n \n-        let filen_underscore = filename.replace(\"-\",\"_\").replace(\".rs\",\"\");\n+        let filen_underscore = filename.replace('-',\"_\").replace(\".rs\",\"\");\n         let filename_is_gate_test = test_filen_gate(&filen_underscore, &mut features);\n \n         contents.truncate(0);\n@@ -88,13 +88,9 @@ pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n \n             let gate_test_str = \"gate-test-\";\n \n-            if !line.contains(gate_test_str) {\n-                continue;\n-            }\n-\n             let feature_name = match line.find(gate_test_str) {\n                 Some(i) => {\n-                    &line[i+gate_test_str.len()..line[i+1..].find(' ').unwrap_or(line.len())]\n+                    line[i+gate_test_str.len()..].splitn(2, ' ').next().unwrap()\n                 },\n                 None => continue,\n             };\n@@ -133,7 +129,7 @@ pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n                  name);\n     }\n \n-    if gate_untested.len() > 0 {\n+    if !gate_untested.is_empty() {\n         tidy_error!(bad, \"Found {} features without a gate test.\", gate_untested.len());\n     }\n \n@@ -259,14 +255,11 @@ pub fn collect_lib_features(base_src_path: &Path) -> Features {\n \n     map_lib_features(base_src_path,\n                      &mut |res, _, _| {\n-        match res {\n-            Ok((name, feature)) => {\n-                if lib_features.get(name).is_some() {\n-                    return;\n-                }\n-                lib_features.insert(name.to_owned(), feature);\n-            },\n-            Err(_) => (),\n+        if let Ok((name, feature)) = res {\n+            if lib_features.contains_key(name) {\n+                return;\n+            }\n+            lib_features.insert(name.to_owned(), feature);\n         }\n     });\n    lib_features\n@@ -332,11 +325,11 @@ fn map_lib_features(base_src_path: &Path,\n                     f.tracking_issue = find_attr_val(line, \"issue\")\n                     .map(|s| s.parse().unwrap());\n                 }\n-                if line.ends_with(\"]\") {\n+                if line.ends_with(']') {\n                     mf(Ok((name, f.clone())), file, i + 1);\n-                } else if !line.ends_with(\",\") && !line.ends_with(\"\\\\\") {\n+                } else if !line.ends_with(',') && !line.ends_with('\\\\') {\n                     // We need to bail here because we might have missed the\n-                    // end of a stability attribute above because the \"]\"\n+                    // end of a stability attribute above because the ']'\n                     // might not have been at the end of the line.\n                     // We could then get into the very unfortunate situation that\n                     // we continue parsing the file assuming the current stability\n@@ -394,7 +387,7 @@ fn map_lib_features(base_src_path: &Path,\n                 has_gate_test: false,\n                 tracking_issue,\n             };\n-            if line.contains(\"]\") {\n+            if line.contains(']') {\n                 mf(Ok((feature_name, feature)), file, i + 1);\n             } else {\n                 becoming_feature = Some((feature_name.to_owned(), feature));"}, {"sha": "22fa954e5fa55bbdc2d53937c066eff1c207d9ab", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=d2a0f98159422de62ab201c45447ac94871ba71b", "patch": "@@ -24,11 +24,8 @@ use std::path::PathBuf;\n use std::env;\n \n fn main() {\n-    let path = env::args_os().skip(1).next().expect(\"need path to src\");\n-    let path = PathBuf::from(path);\n-\n-    let cargo = env::args_os().skip(2).next().expect(\"need path to cargo\");\n-    let cargo = PathBuf::from(cargo);\n+    let path: PathBuf = env::args_os().nth(1).expect(\"need path to src\").into();\n+    let cargo: PathBuf = env::args_os().nth(2).expect(\"need path to cargo\").into();\n \n     let args: Vec<String> = env::args().skip(1).collect();\n "}, {"sha": "69a4c09c2285dc759b2f38e93a9ad0b79a689893", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=d2a0f98159422de62ab201c45447ac94871ba71b", "patch": "@@ -50,7 +50,7 @@ use std::path::Path;\n use std::iter::Iterator;\n \n // Paths that may contain platform-specific code\n-const EXCEPTION_PATHS: &'static [&'static str] = &[\n+const EXCEPTION_PATHS: &[&str] = &[\n     // std crates\n     \"src/liballoc_jemalloc\",\n     \"src/liballoc_system\",\n@@ -88,22 +88,22 @@ const EXCEPTION_PATHS: &'static [&'static str] = &[\n ];\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    let ref mut contents = String::new();\n+    let mut contents = String::new();\n     // Sanity check that the complex parsing here works\n-    let ref mut saw_target_arch = false;\n-    let ref mut saw_cfg_bang = false;\n+    let mut saw_target_arch = false;\n+    let mut saw_cfg_bang = false;\n     super::walk(path, &mut super::filter_dirs, &mut |file| {\n         let filestr = file.to_string_lossy().replace(\"\\\\\", \"/\");\n         if !filestr.ends_with(\".rs\") { return }\n \n         let is_exception_path = EXCEPTION_PATHS.iter().any(|s| filestr.contains(&**s));\n         if is_exception_path { return }\n \n-        check_cfgs(contents, &file, bad, saw_target_arch, saw_cfg_bang);\n+        check_cfgs(&mut contents, &file, bad, &mut saw_target_arch, &mut saw_cfg_bang);\n     });\n \n-    assert!(*saw_target_arch);\n-    assert!(*saw_cfg_bang);\n+    assert!(saw_target_arch);\n+    assert!(saw_cfg_bang);\n }\n \n fn check_cfgs(contents: &mut String, file: &Path,\n@@ -130,7 +130,7 @@ fn check_cfgs(contents: &mut String, file: &Path,\n         tidy_error!(bad, \"{}:{}: platform-specific cfg: {}\", file.display(), line, cfg);\n     };\n \n-    for (idx, cfg) in cfgs.into_iter() {\n+    for (idx, cfg) in cfgs {\n         // Sanity check that the parsing here works\n         if !*saw_target_arch && cfg.contains(\"target_arch\") { *saw_target_arch = true }\n         if !*saw_cfg_bang && cfg.contains(\"cfg!\") { *saw_cfg_bang = true }\n@@ -216,7 +216,7 @@ fn parse_cfgs<'a>(contents: &'a str) -> Vec<(usize, &'a str)> {\n                 b')' => {\n                     depth -= 1;\n                     if depth == 0 {\n-                        return (i, &contents_from[.. j + 1]);\n+                        return (i, &contents_from[..=j]);\n                     }\n                 }\n                 _ => { }"}, {"sha": "33cd8b5dcd9ab1565616a1a02fb6410740dd0fc0", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=d2a0f98159422de62ab201c45447ac94871ba71b", "patch": "@@ -69,7 +69,7 @@ fn line_is_url(line: &str) -> bool {\n             (EXP_COMMENT_START, \"//!\") => state = EXP_LINK_LABEL_OR_URL,\n \n             (EXP_LINK_LABEL_OR_URL, w)\n-                if w.len() >= 4 && w.starts_with(\"[\") && w.ends_with(\"]:\")\n+                if w.len() >= 4 && w.starts_with('[') && w.ends_with(\"]:\")\n                 => state = EXP_URL,\n \n             (EXP_LINK_LABEL_OR_URL, w)\n@@ -128,13 +128,13 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 && !long_line_is_ok(line) {\n                     err(&format!(\"line longer than {} chars\", COLS));\n             }\n-            if line.contains(\"\\t\") && !skip_tab {\n+            if line.contains('\\t') && !skip_tab {\n                 err(\"tab character\");\n             }\n-            if !skip_end_whitespace && (line.ends_with(\" \") || line.ends_with(\"\\t\")) {\n+            if !skip_end_whitespace && (line.ends_with(' ') || line.ends_with('\\t')) {\n                 err(\"trailing whitespace\");\n             }\n-            if line.contains(\"\\r\") && !skip_cr {\n+            if line.contains('\\r') && !skip_cr {\n                 err(\"CR character\");\n             }\n             if filename != \"style.rs\" {"}, {"sha": "520879df620eedf833b7756d304879acffb678ec", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a0f98159422de62ab201c45447ac94871ba71b/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=d2a0f98159422de62ab201c45447ac94871ba71b", "patch": "@@ -56,12 +56,11 @@ pub fn collect_unstable_feature_names(features: &Features) -> BTreeSet<String> {\n pub fn collect_unstable_book_section_file_names(dir: &path::Path) -> BTreeSet<String> {\n     fs::read_dir(dir)\n         .expect(\"could not read directory\")\n-        .into_iter()\n         .map(|entry| entry.expect(\"could not read directory entry\"))\n         .filter(dir_entry_is_file)\n-        .map(|entry| entry.file_name().into_string().unwrap())\n-        .filter(|n| n.ends_with(\".md\"))\n-        .map(|n| n.trim_right_matches(\".md\").to_owned())\n+        .map(|entry| entry.path())\n+        .filter(|path| path.extension().map(|e| e.to_str().unwrap()) == Some(\"md\"))\n+        .map(|path| path.file_stem().unwrap().to_str().unwrap().into())\n         .collect()\n }\n "}]}