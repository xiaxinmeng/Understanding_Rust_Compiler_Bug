{"sha": "4b0ed96f2eed2e49da2cceba550732ce9e7e461e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMGVkOTZmMmVlZDJlNDlkYTJjY2ViYTU1MDczMmNlOWU3ZTQ2MWU=", "commit": {"author": {"name": "David Bar-On", "email": "david.cdb004@gmail.com", "date": "2021-02-16T14:35:47Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-02-18T02:19:27Z"}, "message": "Fix for issue 4603 about extra macro body indentation (third version)", "tree": {"sha": "f95c88deaffa905d82a62c78c49511c74191448d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f95c88deaffa905d82a62c78c49511c74191448d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b0ed96f2eed2e49da2cceba550732ce9e7e461e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b0ed96f2eed2e49da2cceba550732ce9e7e461e", "html_url": "https://github.com/rust-lang/rust/commit/4b0ed96f2eed2e49da2cceba550732ce9e7e461e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b0ed96f2eed2e49da2cceba550732ce9e7e461e/comments", "author": {"login": "davidBar-On", "id": 61089727, "node_id": "MDQ6VXNlcjYxMDg5NzI3", "avatar_url": "https://avatars.githubusercontent.com/u/61089727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidBar-On", "html_url": "https://github.com/davidBar-On", "followers_url": "https://api.github.com/users/davidBar-On/followers", "following_url": "https://api.github.com/users/davidBar-On/following{/other_user}", "gists_url": "https://api.github.com/users/davidBar-On/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidBar-On/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidBar-On/subscriptions", "organizations_url": "https://api.github.com/users/davidBar-On/orgs", "repos_url": "https://api.github.com/users/davidBar-On/repos", "events_url": "https://api.github.com/users/davidBar-On/events{/privacy}", "received_events_url": "https://api.github.com/users/davidBar-On/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61709488204bce4f82456d01482e5c31bb9e8b17", "url": "https://api.github.com/repos/rust-lang/rust/commits/61709488204bce4f82456d01482e5c31bb9e8b17", "html_url": "https://github.com/rust-lang/rust/commit/61709488204bce4f82456d01482e5c31bb9e8b17"}], "stats": {"total": 125, "additions": 120, "deletions": 5}, "files": [{"sha": "e42864a50556fa758920b090994eb80b2d274e47", "filename": "src/formatting.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b0ed96f2eed2e49da2cceba550732ce9e7e461e/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0ed96f2eed2e49da2cceba550732ce9e7e461e/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=4b0ed96f2eed2e49da2cceba550732ce9e7e461e", "patch": "@@ -331,6 +331,9 @@ pub(crate) struct ReportedErrors {\n \n     /// Formatted code differs from existing code (--check only).\n     pub(crate) has_diff: bool,\n+\n+    /// Formatted code missed something, like lost comments or extra trailing space\n+    pub(crate) has_unformatted_code_errors: bool,\n }\n \n impl ReportedErrors {\n@@ -342,6 +345,7 @@ impl ReportedErrors {\n         self.has_macro_format_failure |= other.has_macro_format_failure;\n         self.has_check_errors |= other.has_check_errors;\n         self.has_diff |= other.has_diff;\n+        self.has_unformatted_code_errors |= other.has_unformatted_code_errors;\n     }\n }\n "}, {"sha": "db48b52f440bb270fe2aa0a1d65dc549f4dfdecc", "filename": "src/lib.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4b0ed96f2eed2e49da2cceba550732ce9e7e461e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0ed96f2eed2e49da2cceba550732ce9e7e461e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4b0ed96f2eed2e49da2cceba550732ce9e7e461e", "patch": "@@ -210,14 +210,22 @@ impl FormatReport {\n         if !new_errors.is_empty() {\n             errs.has_formatting_errors = true;\n         }\n-        if errs.has_operational_errors && errs.has_check_errors {\n+        if errs.has_operational_errors && errs.has_check_errors && errs.has_unformatted_code_errors\n+        {\n             return;\n         }\n         for err in new_errors {\n             match err.kind {\n-                ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace => {\n+                ErrorKind::LineOverflow(..) => {\n                     errs.has_operational_errors = true;\n                 }\n+                ErrorKind::TrailingWhitespace => {\n+                    errs.has_operational_errors = true;\n+                    errs.has_unformatted_code_errors = true;\n+                }\n+                ErrorKind::LostComment => {\n+                    errs.has_unformatted_code_errors = true;\n+                }\n                 ErrorKind::BadIssue(_)\n                 | ErrorKind::LicenseCheck\n                 | ErrorKind::DeprecatedAttr\n@@ -294,6 +302,9 @@ fn format_snippet(snippet: &str, config: &Config, is_macro_def: bool) -> Option<\n         config.set().emit_mode(config::EmitMode::Stdout);\n         config.set().verbose(Verbosity::Quiet);\n         config.set().hide_parse_errors(true);\n+        if is_macro_def {\n+            config.set().error_on_unformatted(true);\n+        }\n \n         let (formatting_error, result) = {\n             let input = Input::Text(snippet.into());\n@@ -302,7 +313,8 @@ fn format_snippet(snippet: &str, config: &Config, is_macro_def: bool) -> Option<\n             (\n                 session.errors.has_macro_format_failure\n                     || session.out.as_ref().unwrap().is_empty() && !snippet.is_empty()\n-                    || result.is_err(),\n+                    || result.is_err()\n+                    || (is_macro_def && session.has_unformatted_code_errors()),\n                 result,\n             )\n         };\n@@ -477,13 +489,18 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n         self.errors.has_diff\n     }\n \n+    pub fn has_unformatted_code_errors(&self) -> bool {\n+        self.errors.has_unformatted_code_errors\n+    }\n+\n     pub fn has_no_errors(&self) -> bool {\n         !(self.has_operational_errors()\n             || self.has_parsing_errors()\n             || self.has_formatting_errors()\n             || self.has_check_errors()\n-            || self.has_diff())\n-            || self.errors.has_macro_format_failure\n+            || self.has_diff()\n+            || self.has_unformatted_code_errors()\n+            || self.errors.has_macro_format_failure)\n     }\n }\n "}, {"sha": "ba0803e0ecabaeaa85da524ee664b5adf2fe2428", "filename": "tests/source/issue-4603.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4b0ed96f2eed2e49da2cceba550732ce9e7e461e/tests%2Fsource%2Fissue-4603.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0ed96f2eed2e49da2cceba550732ce9e7e461e/tests%2Fsource%2Fissue-4603.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4603.rs?ref=4b0ed96f2eed2e49da2cceba550732ce9e7e461e", "patch": "@@ -0,0 +1,47 @@\n+// Formatting when original macro snippet is used\n+\n+// Original issue #4603 code\n+#![feature(or_patterns)]\n+macro_rules! t_or_f {\n+    () => {\n+        (true // some comment\n+        | false)\n+    };\n+}\n+\n+// Other test cases variations\n+macro_rules! RULES {\n+    () => {\n+        (\n+\t\txxxxxxx // COMMENT\n+        | yyyyyyy\n+        )\n+    };\n+}\n+macro_rules! RULES {\n+    () => {\n+        (xxxxxxx // COMMENT\n+            | yyyyyyy)\n+    };\n+}\n+\n+fn main() {\n+\tmacro_rules! RULES {\n+\t\t() => {\n+\t\t\t(xxxxxxx // COMMENT\n+\t\t\t| yyyyyyy)\n+\t\t};\n+\t}\n+}\n+\n+macro_rules! RULES {\n+    () => {\n+        (xxxxxxx /* COMMENT */ | yyyyyyy)\n+    };\n+}\n+macro_rules! RULES {\n+    () => {\n+        (xxxxxxx /* COMMENT */\n+        | yyyyyyy)\n+    };\n+}"}, {"sha": "e8c368a247fd8408242cbeb4e1aa385d83016458", "filename": "tests/target/issue-4603.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4b0ed96f2eed2e49da2cceba550732ce9e7e461e/tests%2Ftarget%2Fissue-4603.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0ed96f2eed2e49da2cceba550732ce9e7e461e/tests%2Ftarget%2Fissue-4603.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4603.rs?ref=4b0ed96f2eed2e49da2cceba550732ce9e7e461e", "patch": "@@ -0,0 +1,47 @@\n+// Formatting when original macro snippet is used\n+\n+// Original issue #4603 code\n+#![feature(or_patterns)]\n+macro_rules! t_or_f {\n+    () => {\n+        (true // some comment\n+        | false)\n+    };\n+}\n+\n+// Other test cases variations\n+macro_rules! RULES {\n+    () => {\n+        (\n+\t\txxxxxxx // COMMENT\n+        | yyyyyyy\n+        )\n+    };\n+}\n+macro_rules! RULES {\n+    () => {\n+        (xxxxxxx // COMMENT\n+            | yyyyyyy)\n+    };\n+}\n+\n+fn main() {\n+    macro_rules! RULES {\n+\t\t() => {\n+\t\t\t(xxxxxxx // COMMENT\n+\t\t\t| yyyyyyy)\n+\t\t};\n+\t}\n+}\n+\n+macro_rules! RULES {\n+    () => {\n+        (xxxxxxx /* COMMENT */ | yyyyyyy)\n+    };\n+}\n+macro_rules! RULES {\n+    () => {\n+        (xxxxxxx /* COMMENT */\n+        | yyyyyyy)\n+    };\n+}"}]}