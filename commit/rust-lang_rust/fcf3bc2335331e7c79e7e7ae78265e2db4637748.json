{"sha": "fcf3bc2335331e7c79e7e7ae78265e2db4637748", "node_id": "C_kwDOAAsO6NoAKGZjZjNiYzIzMzUzMzFlN2M3OWU3ZTdhZTc4MjY1ZTJkYjQ2Mzc3NDg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-24T15:49:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-24T15:49:11Z"}, "message": "with permissive-provenance set, we already treat ptr::invalid correctly", "tree": {"sha": "988a467dc37ce37802d945a6c4c8dd751b16826f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/988a467dc37ce37802d945a6c4c8dd751b16826f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf3bc2335331e7c79e7e7ae78265e2db4637748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf3bc2335331e7c79e7e7ae78265e2db4637748", "html_url": "https://github.com/rust-lang/rust/commit/fcf3bc2335331e7c79e7e7ae78265e2db4637748", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf3bc2335331e7c79e7e7ae78265e2db4637748/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22c97b33e470d0b7c085e98417bef8b362d43d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/22c97b33e470d0b7c085e98417bef8b362d43d4e", "html_url": "https://github.com/rust-lang/rust/commit/22c97b33e470d0b7c085e98417bef8b362d43d4e"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "b371103e6b66565037833fc1df610f9f0cfe9d67", "filename": "tests/compile-fail/provenance/ptr_invalid.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcf3bc2335331e7c79e7e7ae78265e2db4637748/tests%2Fcompile-fail%2Fprovenance%2Fptr_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf3bc2335331e7c79e7e7ae78265e2db4637748/tests%2Fcompile-fail%2Fprovenance%2Fptr_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprovenance%2Fptr_invalid.rs?ref=fcf3bc2335331e7c79e7e7ae78265e2db4637748", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Zmiri-permissive-provenance\n+#![feature(strict_provenance)]\n+\n+// Ensure that a `ptr::invalid` ptr is truly invalid.\n+fn main() {\n+    let x = 42;\n+    let xptr = &x as *const i32;\n+    let xptr_invalid = std::ptr::invalid::<i32>(xptr.expose_addr());\n+    let _val = unsafe { *xptr_invalid }; //~ ERROR is not a valid pointer\n+}"}]}