{"sha": "23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYjRhZDUwMWZkM2QxNDJiYjE4ZmI1ZWJlZWM4MTZiYTQ0ZjNlYmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-29T14:07:43Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-29T14:07:43Z"}, "message": "Run rustfmt", "tree": {"sha": "75d66eee397592ba3bbf0d14c651e5ef2c9affbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75d66eee397592ba3bbf0d14c651e5ef2c9affbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "html_url": "https://github.com/rust-lang/rust/commit/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c1fc5d2a3d437a2a19b6557c7abe943832b00c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1fc5d2a3d437a2a19b6557c7abe943832b00c0", "html_url": "https://github.com/rust-lang/rust/commit/5c1fc5d2a3d437a2a19b6557c7abe943832b00c0"}], "stats": {"total": 156, "additions": 80, "deletions": 76}, "files": [{"sha": "ffb240d3ab476cdee5108d0bba25e6c23d6dce3a", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -136,8 +136,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CCHelper<'a, 'tcx> {\n                 walk_expr(self, e);\n                 let ty = self.cx.tables.node_id_to_type(callee.id);\n                 match ty.sty {\n-                    ty::TyFnDef(..) |\n-                    ty::TyFnPtr(_) => {\n+                    ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n                         let sig = ty.fn_sig(self.cx.tcx);\n                         if sig.skip_binder().output().sty == ty::TyNever {\n                             self.divergence += 1;"}, {"sha": "46c3bd5106811d7c0904d8522ca8c317ad2ebeef", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -62,7 +62,7 @@ struct Parser<'a> {\n \n impl<'a> Parser<'a> {\n     fn new(parser: pulldown_cmark::Parser<'a>) -> Parser<'a> {\n-        Self { parser }\n+        Self { parser: parser }\n     }\n }\n \n@@ -89,10 +89,7 @@ pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(\n             let doc = &comment[prefix.len()..];\n             let mut doc = doc.to_owned();\n             doc.push('\\n');\n-            return (\n-                doc.to_owned(),\n-                vec![(doc.len(), Span { lo: span.lo + BytePos(prefix.len() as u32), ..span })]\n-            );\n+            return (doc.to_owned(), vec![(doc.len(), Span { lo: span.lo + BytePos(prefix.len() as u32), ..span })]);\n         }\n     }\n \n@@ -105,7 +102,7 @@ pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(\n             debug_assert_eq!(offset as u32 as usize, offset);\n \n             // +1 for the newline\n-            sizes.push((line.len()+1, Span { lo: span.lo + BytePos(offset as u32), ..span }));\n+            sizes.push((line.len() + 1, Span { lo: span.lo + BytePos(offset as u32), ..span }));\n         }\n \n         return (doc.to_string(), sizes);\n@@ -154,15 +151,15 @@ pub fn check_attrs<'a>(cx: &EarlyContext, valid_idents: &[String], attrs: &'a [a\n                     let mut x = x.into_owned();\n                     x.push_str(&y);\n                     Ok((x_offset, Text(x.into())))\n-                }\n+                },\n                 (x, y) => Err(((x_offset, x), (y_offset, y))),\n             }\n         });\n         check_doc(cx, valid_idents, parser, &spans);\n     }\n }\n \n-fn check_doc<'a, Events: Iterator<Item=(usize, pulldown_cmark::Event<'a>)>>(\n+fn check_doc<'a, Events: Iterator<Item = (usize, pulldown_cmark::Event<'a>)>>(\n     cx: &EarlyContext,\n     valid_idents: &[String],\n     docs: Events,\n@@ -175,26 +172,27 @@ fn check_doc<'a, Events: Iterator<Item=(usize, pulldown_cmark::Event<'a>)>>(\n \n     for (offset, event) in docs {\n         match event {\n-            Start(CodeBlock(_)) | Start(Code) => in_code = true,\n-            End(CodeBlock(_)) | End(Code) => in_code = false,\n+            Start(CodeBlock(_)) |\n+            Start(Code) => in_code = true,\n+            End(CodeBlock(_)) |\n+            End(Code) => in_code = false,\n             Start(_tag) | End(_tag) => (), // We don't care about other tags\n-            Html(_html) | InlineHtml(_html) => (), // HTML is weird, just ignore it\n+            Html(_html) |\n+            InlineHtml(_html) => (), // HTML is weird, just ignore it\n             SoftBreak => (),\n             HardBreak => (),\n-            FootnoteReference(text) | Text(text) => {\n+            FootnoteReference(text) |\n+            Text(text) => {\n                 if !in_code {\n                     let index = match spans.binary_search_by(|c| c.0.cmp(&offset)) {\n                         Ok(o) => o,\n-                        Err(e) => e-1,\n+                        Err(e) => e - 1,\n                     };\n \n                     let (begin, span) = spans[index];\n \n                     // Adjust for the begining of the current `Event`\n-                    let span = Span {\n-                        lo: span.lo + BytePos::from_usize(offset - begin),\n-                        ..span\n-                    };\n+                    let span = Span { lo: span.lo + BytePos::from_usize(offset - begin), ..span };\n \n                     check_text(cx, valid_idents, &text, span);\n                 }"}, {"sha": "f7199f073e4fff25dd8e3131285d50db95c776f0", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -64,11 +64,9 @@ fn check_closure(cx: &LateContext, expr: &Expr) {\n             let fn_ty = cx.tables.expr_ty(caller);\n             match fn_ty.sty {\n                 // Is it an unsafe function? They don't implement the closure traits\n-                ty::TyFnDef(..) |\n-                ty::TyFnPtr(_) => {\n+                ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n                     let sig = fn_ty.fn_sig(cx.tcx);\n-                    if sig.skip_binder().unsafety == Unsafety::Unsafe ||\n-                       sig.skip_binder().output().sty == ty::TyNever {\n+                    if sig.skip_binder().unsafety == Unsafety::Unsafe || sig.skip_binder().output().sty == ty::TyNever {\n                         return;\n                     }\n                 },"}, {"sha": "81a94220ea154f779f67a8081a1cd973fe5b458b", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -128,8 +128,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n             ExprCall(ref func, _) => {\n                 let typ = self.cx.tables.expr_ty(func);\n                 match typ.sty {\n-                    ty::TyFnDef(..) |\n-                    ty::TyFnPtr(_) => {\n+                    ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n                         let sig = typ.fn_sig(self.cx.tcx);\n                         if let ty::TyNever = self.cx.tcx.erase_late_bound_regions(&sig).output().sty {\n                             self.report_diverging_sub_expr(e);"}, {"sha": "c6a74b22c99be4c0979c824a929ff911f914f29d", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -169,7 +169,10 @@ fn check_cmp(cx: &LateContext, span: Span, left: &Expr, right: &Expr, op: &str)\n fn check_len_zero(cx: &LateContext, span: Span, name: Name, args: &[Expr], lit: &Lit, op: &str) {\n     if let Spanned { node: LitKind::Int(0, _), .. } = *lit {\n         if name == \"len\" && args.len() == 1 && has_is_empty(cx, &args[0]) {\n-            span_lint_and_sugg(cx, LEN_ZERO, span, \"length comparison to zero\",\n+            span_lint_and_sugg(cx,\n+                               LEN_ZERO,\n+                               span,\n+                               \"length comparison to zero\",\n                                \"using `is_empty` is more concise:\",\n                                format!(\"{}{}.is_empty()\", op, snippet(cx, args[0].span, \"_\")));\n         }"}, {"sha": "c0eb8506fa525985bfdd9f10fd9f01108b1bd38c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -434,8 +434,8 @@ fn never_loop(block: &Block, id: &NodeId) -> bool {\n }\n \n fn contains_continue_block(block: &Block, dest: &NodeId) -> bool {\n-    block.stmts.iter().any(|e| contains_continue_stmt(e, dest))\n-        || block.expr.as_ref().map_or(false, |e| contains_continue_expr(e, dest))\n+    block.stmts.iter().any(|e| contains_continue_stmt(e, dest)) ||\n+    block.expr.as_ref().map_or(false, |e| contains_continue_expr(e, dest))\n }\n \n fn contains_continue_stmt(stmt: &Stmt, dest: &NodeId) -> bool {\n@@ -449,7 +449,7 @@ fn contains_continue_stmt(stmt: &Stmt, dest: &NodeId) -> bool {\n fn contains_continue_decl(decl: &Decl, dest: &NodeId) -> bool {\n     match decl.node {\n         DeclLocal(ref local) => local.init.as_ref().map_or(false, |e| contains_continue_expr(e, dest)),\n-        _ => false\n+        _ => false,\n     }\n }\n \n@@ -466,14 +466,20 @@ fn contains_continue_expr(expr: &Expr, dest: &NodeId) -> bool {\n         ExprArray(ref es) |\n         ExprMethodCall(_, _, ref es) |\n         ExprTup(ref es) => es.iter().any(|e| contains_continue_expr(e, dest)),\n-        ExprCall(ref e, ref es) => contains_continue_expr(e, dest) || es.iter().any(|e| contains_continue_expr(e, dest)),\n+        ExprCall(ref e, ref es) => {\n+            contains_continue_expr(e, dest) || es.iter().any(|e| contains_continue_expr(e, dest))\n+        },\n         ExprBinary(_, ref e1, ref e2) |\n         ExprAssign(ref e1, ref e2) |\n         ExprAssignOp(_, ref e1, ref e2) |\n         ExprIndex(ref e1, ref e2) => [e1, e2].iter().any(|e| contains_continue_expr(e, dest)),\n-        ExprIf(ref e, ref e2, ref e3) => [e, e2].iter().chain(e3.as_ref().iter()).any(|e| contains_continue_expr(e, dest)),\n+        ExprIf(ref e, ref e2, ref e3) => {\n+            [e, e2].iter().chain(e3.as_ref().iter()).any(|e| contains_continue_expr(e, dest))\n+        },\n         ExprWhile(ref e, ref b, _) => contains_continue_expr(e, dest) || contains_continue_block(b, dest),\n-        ExprMatch(ref e, ref arms, _) => contains_continue_expr(e, dest) || arms.iter().any(|a| contains_continue_expr(&a.body, dest)),\n+        ExprMatch(ref e, ref arms, _) => {\n+            contains_continue_expr(e, dest) || arms.iter().any(|a| contains_continue_expr(&a.body, dest))\n+        },\n         ExprBlock(ref block) => contains_continue_block(block, dest),\n         ExprStruct(_, _, ref base) => base.as_ref().map_or(false, |e| contains_continue_expr(e, dest)),\n         ExprAgain(d) => d.target_id.opt_id().map_or(false, |id| id == *dest),\n@@ -482,8 +488,7 @@ fn contains_continue_expr(expr: &Expr, dest: &NodeId) -> bool {\n }\n \n fn loop_exit_block(block: &Block) -> bool {\n-    block.stmts.iter().any(|e| loop_exit_stmt(e))\n-        || block.expr.as_ref().map_or(false, |e| loop_exit_expr(e))\n+    block.stmts.iter().any(|e| loop_exit_stmt(e)) || block.expr.as_ref().map_or(false, |e| loop_exit_expr(e))\n }\n \n fn loop_exit_stmt(stmt: &Stmt) -> bool {\n@@ -497,7 +502,7 @@ fn loop_exit_stmt(stmt: &Stmt) -> bool {\n fn loop_exit_decl(decl: &Decl) -> bool {\n     match decl.node {\n         DeclLocal(ref local) => local.init.as_ref().map_or(false, |e| loop_exit_expr(e)),\n-        _ => false\n+        _ => false,\n     }\n }\n \n@@ -519,13 +524,13 @@ fn loop_exit_expr(expr: &Expr) -> bool {\n         ExprAssign(ref e1, ref e2) |\n         ExprAssignOp(_, ref e1, ref e2) |\n         ExprIndex(ref e1, ref e2) => [e1, e2].iter().any(|e| loop_exit_expr(e)),\n-        ExprIf(ref e, ref e2, ref e3) => loop_exit_expr(e) || e3.as_ref().map_or(false, |e| loop_exit_expr(e)) && loop_exit_expr(e2),\n+        ExprIf(ref e, ref e2, ref e3) => {\n+            loop_exit_expr(e) || e3.as_ref().map_or(false, |e| loop_exit_expr(e)) && loop_exit_expr(e2)\n+        },\n         ExprWhile(ref e, ref b, _) => loop_exit_expr(e) || loop_exit_block(b),\n         ExprMatch(ref e, ref arms, _) => loop_exit_expr(e) || arms.iter().all(|a| loop_exit_expr(&a.body)),\n         ExprBlock(ref b) => loop_exit_block(b),\n-        ExprBreak(_, _) |\n-        ExprAgain(_) |\n-        ExprRet(_) => true,\n+        ExprBreak(_, _) | ExprAgain(_) | ExprRet(_) => true,\n         _ => false,\n     }\n }"}, {"sha": "6b721a970a6091ba2c59ca7020aaf4dd9a3bd7d9", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -2,8 +2,8 @@ use rustc::lint::*;\n use rustc::hir::*;\n use rustc::ty;\n use syntax::ast;\n-use utils::{is_adjusted, match_path, match_trait_method, match_type, remove_blocks, paths, snippet,\n-            span_help_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, iter_input_pats};\n+use utils::{is_adjusted, match_path, match_trait_method, match_type, remove_blocks, paths, snippet, span_help_and_lint,\n+            walk_ptrs_ty, walk_ptrs_ty_depth, iter_input_pats};\n \n /// **What it does:** Checks for mapping `clone()` over an iterator.\n ///"}, {"sha": "14a426909c950d25597799dda7155f3930084257", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -9,8 +9,8 @@ use std::collections::Bound;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n use utils::paths;\n-use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, span_lint_and_sugg, in_external_macro, expr_block, walk_ptrs_ty,\n-            is_expn_of, remove_blocks};\n+use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, span_lint_and_sugg, in_external_macro,\n+            expr_block, walk_ptrs_ty, is_expn_of, remove_blocks};\n use utils::sugg::Sugg;\n \n /// **What it does:** Checks for matches with a single arm where an `if let`"}, {"sha": "031aad08c533e960738de1ee7cdc6091cfd54258", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -8,9 +8,9 @@ use std::borrow::Cow;\n use std::fmt;\n use syntax::codemap::Span;\n use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, is_copy, match_path, match_trait_method,\n-            match_type, method_chain_args, return_ty, same_tys, snippet, span_lint, span_lint_and_then, span_lint_and_sugg,\n-            span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, last_path_segment, single_segment_path,\n-            match_def_path, is_self, is_self_ty, iter_input_pats, match_path_old};\n+            match_type, method_chain_args, return_ty, same_tys, snippet, span_lint, span_lint_and_then,\n+            span_lint_and_sugg, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, last_path_segment,\n+            single_segment_path, match_def_path, is_self, is_self_ty, iter_input_pats, match_path_old};\n use utils::paths;\n use utils::sugg;\n \n@@ -859,7 +859,10 @@ fn lint_string_extend(cx: &LateContext, expr: &hir::Expr, args: &[hir::Expr]) {\n             return;\n         };\n \n-        span_lint_and_sugg(cx, STRING_EXTEND_CHARS, expr.span, \"calling `.extend(_.chars())`\",\n+        span_lint_and_sugg(cx,\n+                           STRING_EXTEND_CHARS,\n+                           expr.span,\n+                           \"calling `.extend(_.chars())`\",\n                            \"try this\",\n                            format!(\"{}.push_str({}{})\",\n                                    snippet(cx, args[0].span, \"_\"),"}, {"sha": "7fee29c8464d39479adb8a58ac54608052531875", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -57,8 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n \n fn check_arguments<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arguments: &[Expr], type_definition: Ty<'tcx>, name: &str) {\n     match type_definition.sty {\n-        ty::TyFnDef(..) |\n-        ty::TyFnPtr(_) => {\n+        ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n             let parameters = type_definition.fn_sig(cx.tcx).skip_binder().inputs();\n             for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n                 match parameter.sty {"}, {"sha": "5318163f8a0c58139506bb8ad43ed0742eeb7d11", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -9,7 +9,8 @@ use utils::{span_lint, in_macro};\n \n /// **What it does:** Checks for useless borrowed references.\n ///\n-/// **Why is this bad?** It is completely useless and make the code look more complex than it actually is.\n+/// **Why is this bad?** It is completely useless and make the code look more complex than it\n+/// actually is.\n ///\n /// **Known problems:** None.\n ///\n@@ -18,7 +19,8 @@ use utils::{span_lint, in_macro};\n ///     let mut v = Vec::<String>::new();\n ///     let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n /// ```\n-/// This clojure takes a reference on something that has been matched as a reference and de-referenced.\n+/// This clojure takes a reference on something that has been matched as a reference and\n+/// de-referenced.\n /// As such, it could just be |a| a.is_empty()\n declare_lint! {\n     pub NEEDLESS_BORROWED_REFERENCE,\n@@ -55,4 +57,3 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n         }}\n     }\n }\n-"}, {"sha": "08b4cf166f27af562124d09921105705edd5df1c", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -36,11 +36,14 @@ impl LintPass for Precedence {\n impl EarlyLintPass for Precedence {\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n         if let ExprKind::Binary(Spanned { node: op, .. }, ref left, ref right) = expr.node {\n-            let span_sugg =\n-                |expr: &Expr, sugg| {\n-                    span_lint_and_sugg(cx, PRECEDENCE, expr.span, \"operator precedence can trip the unwary\",\n-                                       \"consider parenthesizing your expression\", sugg);\n-                };\n+            let span_sugg = |expr: &Expr, sugg| {\n+                span_lint_and_sugg(cx,\n+                                   PRECEDENCE,\n+                                   expr.span,\n+                                   \"operator precedence can trip the unwary\",\n+                                   \"consider parenthesizing your expression\",\n+                                   sugg);\n+            };\n \n             if !is_bit_op(op) {\n                 return;"}, {"sha": "4f4d6add1dd32675befbe09d6ef1317b8068cb3d", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -58,12 +58,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StepByZero {\n                 use rustc_const_math::ConstInt::Usize;\n                 if let Some((Constant::Int(Usize(us)), _)) = constant(cx, &args[1]) {\n                     if us.as_u64(cx.sess().target.uint_type) == 0 {\n-                        span_lint(\n-                            cx,\n-                            ITERATOR_STEP_BY_ZERO,\n-                            expr.span,\n-                            \"Iterator::step_by(0) will panic at runtime\",\n-                        );\n+                        span_lint(cx,\n+                                  ITERATOR_STEP_BY_ZERO,\n+                                  expr.span,\n+                                  \"Iterator::step_by(0) will panic at runtime\");\n                     }\n                 }\n             } else if name == \"zip\" && args.len() == 2 {\n@@ -100,9 +98,5 @@ fn has_step_by(cx: &LateContext, expr: &Expr) -> bool {\n     // can't be called on a borrowed range.\n     let ty = cx.tables.expr_ty_adjusted(expr);\n \n-    get_trait_def_id(cx, &paths::ITERATOR)\n-        .map_or(\n-            false,\n-            |iterator_trait| implements_trait(cx, ty, iterator_trait, &[])\n-        )\n+    get_trait_def_id(cx, &paths::ITERATOR).map_or(false, |iterator_trait| implements_trait(cx, ty, iterator_trait, &[]))\n }"}, {"sha": "a148d99aca87c1aec231539a5d836b1ce64fb486", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -40,8 +40,12 @@ impl EarlyLintPass for Pass {\n     fn check_expr(&mut self, cx: &EarlyContext, e: &Expr) {\n         if let ExprKind::Unary(UnOp::Deref, ref deref_target) = e.node {\n             if let ExprKind::AddrOf(_, ref addrof_target) = without_parens(deref_target).node {\n-                span_lint_and_sugg(cx, DEREF_ADDROF, e.span, \"immediately dereferencing a reference\",\n-                                   \"try this\", format!(\"{}\", snippet(cx, addrof_target.span, \"_\")));\n+                span_lint_and_sugg(cx,\n+                                   DEREF_ADDROF,\n+                                   e.span,\n+                                   \"immediately dereferencing a reference\",\n+                                   \"try this\",\n+                                   format!(\"{}\", snippet(cx, addrof_target.span, \"_\")));\n             }\n         }\n     }"}, {"sha": "d1d804ca39f89540403f32aecf5629a3159687c4", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -3,8 +3,7 @@ use syntax::ast;\n use syntax::codemap::{Span, Spanned};\n use syntax::visit::FnKind;\n \n-use utils::{span_note_and_lint, span_lint_and_then, snippet_opt, match_path_ast, in_macro,\n-            in_external_macro};\n+use utils::{span_note_and_lint, span_lint_and_then, snippet_opt, match_path_ast, in_macro, in_external_macro};\n \n /// **What it does:** Checks for return statements at the end of a block.\n ///"}, {"sha": "72a1b685a6a26a3a677835898821a7bdfddd7180", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -8,8 +8,8 @@ use std::cmp::Ordering;\n use syntax::ast::{IntTy, UintTy, FloatTy};\n use syntax::attr::IntType;\n use syntax::codemap::Span;\n-use utils::{comparisons, higher, in_external_macro, in_macro, match_def_path, snippet, span_help_and_lint, span_lint, span_lint_and_sugg,\n-            opt_def_id, last_path_segment, type_size};\n+use utils::{comparisons, higher, in_external_macro, in_macro, match_def_path, snippet, span_help_and_lint, span_lint,\n+            span_lint_and_sugg, opt_def_id, last_path_segment, type_size};\n use utils::paths;\n \n /// Handles all the linting of funky types"}, {"sha": "66c99a1e1ef621ed1c1f8d76ac4e761ae04b8156", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=23b4ad501fd3d142bb18fb5ebeec816ba44f3ebd", "patch": "@@ -778,8 +778,7 @@ pub fn same_tys<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, a: Ty<'tcx>, b: Ty<'tcx>)\n /// Return whether the given type is an `unsafe` function.\n pub fn type_is_unsafe_function<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n-        ty::TyFnDef(..) |\n-        ty::TyFnPtr(_) => ty.fn_sig(cx.tcx).unsafety() == Unsafety::Unsafe,\n+        ty::TyFnDef(..) | ty::TyFnPtr(_) => ty.fn_sig(cx.tcx).unsafety() == Unsafety::Unsafe,\n         _ => false,\n     }\n }"}]}