{"sha": "fd8c592757144b8d0655aaf1ff3dd3c5b8b16a80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOGM1OTI3NTcxNDRiOGQwNjU1YWFmMWZmM2RkM2M1YjhiMTZhODA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-04-15T16:53:19Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-04-15T19:36:07Z"}, "message": "Always type-check the index of an IndexExpr\n\nFixes #24363.", "tree": {"sha": "612583aae9c062f532e9d515e8ada1ce867c1166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/612583aae9c062f532e9d515e8ada1ce867c1166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd8c592757144b8d0655aaf1ff3dd3c5b8b16a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8c592757144b8d0655aaf1ff3dd3c5b8b16a80", "html_url": "https://github.com/rust-lang/rust/commit/fd8c592757144b8d0655aaf1ff3dd3c5b8b16a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd8c592757144b8d0655aaf1ff3dd3c5b8b16a80/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c1dfed2ba2946bbf9de787de647f5c58e336ae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1dfed2ba2946bbf9de787de647f5c58e336ae0", "html_url": "https://github.com/rust-lang/rust/commit/9c1dfed2ba2946bbf9de787de647f5c58e336ae0"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "402465355b685a8793bfe8808062b475c3893b48", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fd8c592757144b8d0655aaf1ff3dd3c5b8b16a80/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8c592757144b8d0655aaf1ff3dd3c5b8b16a80/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fd8c592757144b8d0655aaf1ff3dd3c5b8b16a80", "patch": "@@ -3515,34 +3515,34 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n       }\n       ast::ExprIndex(ref base, ref idx) => {\n           check_expr_with_lvalue_pref(fcx, &**base, lvalue_pref);\n+          check_expr(fcx, &**idx);\n+\n           let base_t = fcx.expr_ty(&**base);\n+          let idx_t = fcx.expr_ty(&**idx);\n+\n           if ty::type_is_error(base_t) {\n               fcx.write_ty(id, base_t);\n+          } else if ty::type_is_error(idx_t) {\n+              fcx.write_ty(id, idx_t);\n           } else {\n-              check_expr(fcx, &**idx);\n-              let idx_t = fcx.expr_ty(&**idx);\n-              if ty::type_is_error(idx_t) {\n-                  fcx.write_ty(id, idx_t);\n-              } else {\n-                  let base_t = structurally_resolved_type(fcx, expr.span, base_t);\n-                  match lookup_indexing(fcx, expr, base, base_t, idx_t, lvalue_pref) {\n-                      Some((index_ty, element_ty)) => {\n-                          let idx_expr_ty = fcx.expr_ty(idx);\n-                          demand::eqtype(fcx, expr.span, index_ty, idx_expr_ty);\n-                          fcx.write_ty(id, element_ty);\n-                      }\n-                      None => {\n-                          check_expr_has_type(fcx, &**idx, fcx.tcx().types.err);\n-                          fcx.type_error_message(\n-                              expr.span,\n-                              |actual| {\n-                                  format!(\"cannot index a value of type `{}`\",\n-                                          actual)\n-                              },\n-                              base_t,\n-                              None);\n-                          fcx.write_ty(id, fcx.tcx().types.err);\n-                      }\n+              let base_t = structurally_resolved_type(fcx, expr.span, base_t);\n+              match lookup_indexing(fcx, expr, base, base_t, idx_t, lvalue_pref) {\n+                  Some((index_ty, element_ty)) => {\n+                      let idx_expr_ty = fcx.expr_ty(idx);\n+                      demand::eqtype(fcx, expr.span, index_ty, idx_expr_ty);\n+                      fcx.write_ty(id, element_ty);\n+                  }\n+                  None => {\n+                      check_expr_has_type(fcx, &**idx, fcx.tcx().types.err);\n+                      fcx.type_error_message(\n+                          expr.span,\n+                          |actual| {\n+                              format!(\"cannot index a value of type `{}`\",\n+                                      actual)\n+                          },\n+                          base_t,\n+                          None);\n+                      fcx.write_ty(id, fcx.tcx().types.err);\n                   }\n               }\n           }"}]}