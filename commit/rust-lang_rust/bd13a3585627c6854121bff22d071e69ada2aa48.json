{"sha": "bd13a3585627c6854121bff22d071e69ada2aa48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMTNhMzU4NTYyN2M2ODU0MTIxYmZmMjJkMDcxZTY5YWRhMmFhNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-12T07:40:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-12T07:40:33Z"}, "message": "Auto merge of #6325 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "855a71828642c59f90bf52c90d631c2158bdf4fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/855a71828642c59f90bf52c90d631c2158bdf4fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd13a3585627c6854121bff22d071e69ada2aa48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd13a3585627c6854121bff22d071e69ada2aa48", "html_url": "https://github.com/rust-lang/rust/commit/bd13a3585627c6854121bff22d071e69ada2aa48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd13a3585627c6854121bff22d071e69ada2aa48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4fc076e11b7125d481ee96df6d2e0c4ed493356", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fc076e11b7125d481ee96df6d2e0c4ed493356", "html_url": "https://github.com/rust-lang/rust/commit/c4fc076e11b7125d481ee96df6d2e0c4ed493356"}, {"sha": "92ece848735c51767b95d31055e57405dec511e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/92ece848735c51767b95d31055e57405dec511e5", "html_url": "https://github.com/rust-lang/rust/commit/92ece848735c51767b95d31055e57405dec511e5"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "55904a0ec0a84131da7e6a1685a2879b806be232", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd13a3585627c6854121bff22d071e69ada2aa48/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd13a3585627c6854121bff22d071e69ada2aa48/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=bd13a3585627c6854121bff22d071e69ada2aa48", "patch": "@@ -588,7 +588,7 @@ impl EarlyLintPass for EarlyAttributes {\n \n fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::Item) {\n     for attr in &item.attrs {\n-        let attr_item = if let AttrKind::Normal(ref attr) = attr.kind {\n+        let attr_item = if let AttrKind::Normal(ref attr, _) = attr.kind {\n             attr\n         } else {\n             return;"}, {"sha": "0d31e9cfc3decb073691ca18766184563141b25f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd13a3585627c6854121bff22d071e69ada2aa48/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd13a3585627c6854121bff22d071e69ada2aa48/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=bd13a3585627c6854121bff22d071e69ada2aa48", "patch": "@@ -3087,7 +3087,7 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor {\n     }\n }\n \n-/// Detect the occurences of calls to `iter` or `into_iter` for the\n+/// Detect the occurrences of calls to `iter` or `into_iter` for the\n /// given identifier\n fn detect_iter_and_into_iters<'tcx>(block: &'tcx Block<'tcx>, identifier: Ident) -> Option<Vec<IterFunction>> {\n     let mut visitor = IterFunctionVisitor {"}, {"sha": "b68e33f101d2b6d15c5b577ae2d6e46483ade234", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd13a3585627c6854121bff22d071e69ada2aa48/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd13a3585627c6854121bff22d071e69ada2aa48/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=bd13a3585627c6854121bff22d071e69ada2aa48", "patch": "@@ -509,7 +509,7 @@ pub fn eq_attr(l: &Attribute, r: &Attribute) -> bool {\n     l.style == r.style\n         && match (&l.kind, &r.kind) {\n             (DocComment(l1, l2), DocComment(r1, r2)) => l1 == r1 && l2 == r2,\n-            (Normal(l), Normal(r)) => eq_path(&l.path, &r.path) && eq_mac_args(&l.args, &r.args),\n+            (Normal(l, _), Normal(r, _)) => eq_path(&l.path, &r.path) && eq_mac_args(&l.args, &r.args),\n             _ => false,\n         }\n }"}, {"sha": "e6d41341a55f3bbd5666eee9963afc849dec97cb", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd13a3585627c6854121bff22d071e69ada2aa48/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd13a3585627c6854121bff22d071e69ada2aa48/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=bd13a3585627c6854121bff22d071e69ada2aa48", "patch": "@@ -57,7 +57,7 @@ pub fn get_attr<'a>(\n     name: &'static str,\n ) -> impl Iterator<Item = &'a ast::Attribute> {\n     attrs.iter().filter(move |attr| {\n-        let attr = if let ast::AttrKind::Normal(ref attr) = attr.kind {\n+        let attr = if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n             attr\n         } else {\n             return false;"}, {"sha": "253b7823bd9d96f2c74376608cb7cc1ef02aa1c1", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd13a3585627c6854121bff22d071e69ada2aa48/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd13a3585627c6854121bff22d071e69ada2aa48/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=bd13a3585627c6854121bff22d071e69ada2aa48", "patch": "@@ -1385,7 +1385,7 @@ pub fn is_must_use_func_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n \n pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {\n     krate.item.attrs.iter().any(|attr| {\n-        if let ast::AttrKind::Normal(ref attr) = attr.kind {\n+        if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n             attr.path == symbol::sym::no_std\n         } else {\n             false"}]}