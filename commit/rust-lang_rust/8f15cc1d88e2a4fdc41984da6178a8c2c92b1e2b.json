{"sha": "8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMTVjYzFkODhlMmE0ZmRjNDE5ODRkYTYxNzhhOGMyYzkyYjFlMmI=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-01-19T08:15:36Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-02-02T03:13:43Z"}, "message": "PR fixup", "tree": {"sha": "0d0e2a600ac4098c41f8ab0d169dd0f038968c3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d0e2a600ac4098c41f8ab0d169dd0f038968c3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b", "html_url": "https://github.com/rust-lang/rust/commit/8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caf06bf5f5f3470f79362210a58c927711effd4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf06bf5f5f3470f79362210a58c927711effd4d", "html_url": "https://github.com/rust-lang/rust/commit/caf06bf5f5f3470f79362210a58c927711effd4d"}], "stats": {"total": 89, "additions": 48, "deletions": 41}, "files": [{"sha": "542d9a58e8aedfb96a5007076052a32f6b316ff0", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 46, "deletions": 39, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b", "patch": "@@ -162,34 +162,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n         if should_do_migration_analysis(self.tcx, closure_hir_id) {\n-            let need_migrations = self.compute_2229_migrations_first_pass(\n-                closure_def_id,\n-                span,\n-                capture_clause,\n-                body,\n-                self.typeck_results.borrow().closure_min_captures.get(&closure_def_id),\n-            );\n-\n-            if !need_migrations.is_empty() {\n-                let need_migrations_hir_id =\n-                    need_migrations.iter().map(|m| m.0).collect::<Vec<_>>();\n-\n-                let migrations_text =\n-                    migration_suggestion_for_2229(self.tcx, &need_migrations_hir_id);\n-\n-                self.tcx.struct_span_lint_hir(\n-                    lint::builtin::DISJOINT_CAPTURE_DROP_REORDER,\n-                    closure_hir_id,\n-                    span,\n-                    |lint| {\n-                        let mut diagnostics_builder = lint.build(\n-                            \"drop order affected for closure because of `capture_disjoint_fields`\",\n-                        );\n-                        diagnostics_builder.note(&migrations_text);\n-                        diagnostics_builder.emit();\n-                    },\n-                );\n-            }\n+            self.perform_2229_migration_anaysis(closure_def_id, capture_clause, span, body);\n         }\n \n         // We now fake capture information for all variables that are mentioned within the closure\n@@ -555,6 +528,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         typeck_results.closure_min_captures.insert(closure_def_id, root_var_min_capture_list);\n     }\n \n+    /// Perform the migration analysis for RFC 2229, and emit lint\n+    /// `disjoint_capture_drop_reorder` if needed.\n+    fn perform_2229_migration_anaysis(\n+        &self,\n+        closure_def_id: DefId,\n+        capture_clause: hir::CaptureBy,\n+        span: Span,\n+        body: &'tcx hir::Body<'tcx>,\n+    ) {\n+        let need_migrations = self.compute_2229_migrations_first_pass(\n+            closure_def_id,\n+            span,\n+            capture_clause,\n+            body,\n+            self.typeck_results.borrow().closure_min_captures.get(&closure_def_id),\n+        );\n+\n+        if !need_migrations.is_empty() {\n+            let need_migrations_hir_id = need_migrations.iter().map(|m| m.0).collect::<Vec<_>>();\n+\n+            let migrations_text = migration_suggestion_for_2229(self.tcx, &need_migrations_hir_id);\n+\n+            let local_def_id = closure_def_id.expect_local();\n+            let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n+            self.tcx.struct_span_lint_hir(\n+                lint::builtin::DISJOINT_CAPTURE_DROP_REORDER,\n+                closure_hir_id,\n+                span,\n+                |lint| {\n+                    let mut diagnostics_builder = lint.build(\n+                        \"drop order affected for closure because of `capture_disjoint_fields`\",\n+                    );\n+                    diagnostics_builder.note(&migrations_text);\n+                    diagnostics_builder.emit();\n+                },\n+            );\n+        }\n+    }\n+\n     /// Figures out the list of root variables (and their types) that aren't completely\n     /// captured by the closure when `capture_disjoint_fields` is enabled and drop order of\n     /// some path starting at that root variable **might** be affected.\n@@ -617,17 +629,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let is_moved = root_var_min_capture_list\n                 .iter()\n-                .find(|capture| matches!(capture.info.capture_kind, ty::UpvarCapture::ByValue(_)))\n-                .is_some();\n-\n-            // 1. If we capture more than one path starting at the root variabe then the root variable\n-            //    isn't being captured in its entirety\n-            // 2. If we only capture one path starting at the root variable, it's still possible\n-            //    that it isn't the root variable completely.\n-            if is_moved\n-                && ((root_var_min_capture_list.len() > 1)\n-                    || (root_var_min_capture_list[0].place.projections.len() > 0))\n-            {\n+                .any(|capture| matches!(capture.info.capture_kind, ty::UpvarCapture::ByValue(_)));\n+\n+            let is_not_completely_captured =\n+                root_var_min_capture_list.iter().any(|capture| capture.place.projections.len() > 0);\n+\n+            if is_moved && is_not_completely_captured {\n                 need_migrations.push((var_hir_id, ty));\n             }\n         }"}, {"sha": "5b5092e9db9a496951a7f84133cf5322cb1937f7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs?ref=8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b", "patch": "@@ -108,7 +108,7 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n // Note we need migration here only because the non-copy (because Drop type) is captured,\n // otherwise we won't need to, since we can get away with just by ref capture in that case.\n fn test7_drop_non_drop_aggregate_need_migration() {\n-    let t = (String::new(), 0i32);\n+    let t = (String::new(), String::new(), 0i32);\n \n     let c = || {\n     //~^ERROR: drop order affected for closure because of `capture_disjoint_fields`"}, {"sha": "25b5539b862896698b01531fda7de43fabdd98dd", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs?ref=8f15cc1d88e2a4fdc41984da6178a8c2c92b1e2b", "patch": "@@ -85,7 +85,7 @@ fn test4_type_contains_drop_need_migration() {\n // Note we need migration here only because the non-copy (because Drop type) is captured,\n // otherwise we won't need to, since we can get away with just by ref capture in that case.\n fn test5_drop_non_drop_aggregate_need_migration() {\n-    let t = (Foo(0), 0i32);\n+    let t = (Foo(0), Foo(0), 0i32);\n \n     let c = || {\n     //~^ERROR: drop order affected for closure because of `capture_disjoint_fields`"}]}