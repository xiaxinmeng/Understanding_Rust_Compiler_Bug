{"sha": "13b70599c1fbf15ced793b862ee9732156dd7bb8", "node_id": "C_kwDOAAsO6NoAKDEzYjcwNTk5YzFmYmYxNWNlZDc5M2I4NjJlZTk3MzIxNTZkZDdiYjg", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-09-27T14:16:09Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:16Z"}, "message": "Only allow registration of scalars for now", "tree": {"sha": "06b571ae8d7f0da1039c34a9d78fefc002b7fd25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b571ae8d7f0da1039c34a9d78fefc002b7fd25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13b70599c1fbf15ced793b862ee9732156dd7bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13b70599c1fbf15ced793b862ee9732156dd7bb8", "html_url": "https://github.com/rust-lang/rust/commit/13b70599c1fbf15ced793b862ee9732156dd7bb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13b70599c1fbf15ced793b862ee9732156dd7bb8/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc82c13e973bddd59a55f2fbff6286b398eb68eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc82c13e973bddd59a55f2fbff6286b398eb68eb", "html_url": "https://github.com/rust-lang/rust/commit/bc82c13e973bddd59a55f2fbff6286b398eb68eb"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "05285e460eb17016922a792dcdd0f06fd87d70e6", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/13b70599c1fbf15ced793b862ee9732156dd7bb8/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b70599c1fbf15ced793b862ee9732156dd7bb8/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=13b70599c1fbf15ced793b862ee9732156dd7bb8", "patch": "@@ -55,6 +55,7 @@ use std::fmt::{Debug, Formatter};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n@@ -549,8 +550,8 @@ impl Map {\n         filter: &mut impl FnMut(Ty<'tcx>) -> bool,\n     ) {\n         if filter(ty) {\n-            // Since downcasts are currently not allowed, this might fail.\n-            let _ = self.register(local, projection);\n+            // This might fail if `ty` is not scalar.\n+            let _ = self.register_with_ty(local, projection, ty);\n         }\n         if max_derefs > 0 {\n             if let Some(ty::TypeAndMut { ty, .. }) = ty.builtin_deref(false) {\n@@ -560,33 +561,27 @@ impl Map {\n             }\n         }\n         iter_fields(ty, tcx, |variant, field, ty| {\n-            if let Some(variant) = variant {\n-                projection.push(PlaceElem::Downcast(None, variant));\n+            if variant.is_some() {\n+                // Downcasts are currently not supported.\n+                return;\n             }\n             projection.push(PlaceElem::Field(field, ty));\n             self.register_with_filter_rec(tcx, max_derefs, local, projection, ty, filter);\n             projection.pop();\n-            if variant.is_some() {\n-                projection.pop();\n-            }\n         });\n     }\n \n-    pub fn register<'tcx>(\n+    fn make_place<'tcx>(\n         &mut self,\n         local: Local,\n         projection: &[PlaceElem<'tcx>],\n-    ) -> Result<(), ()> {\n+    ) -> Result<PlaceIndex, ()> {\n         // Get the base index of the local.\n         let mut index =\n             *self.locals.get_or_insert_with(local, || self.places.push(PlaceInfo::new(None)));\n \n         // Apply the projection.\n         for &elem in projection {\n-            // For now, downcast is not allowed due to aliasing between variants (see #101168).\n-            // Also, according to the documentation of [`Place`], a single-variant type can be\n-            // projected with and without a [`ProjectionElem::Downcast`]. This creates an ambiguity\n-            // that needs to be resolved.\n             match elem {\n                 PlaceElem::Downcast(..) => return Err(()),\n                 _ => (),\n@@ -601,9 +596,46 @@ impl Map {\n             });\n         }\n \n+        Ok(index)\n+    }\n+\n+    pub fn register<'tcx>(\n+        &mut self,\n+        local: Local,\n+        projection: &[PlaceElem<'tcx>],\n+        decls: &impl HasLocalDecls<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> Result<(), ()> {\n+        projection\n+            .iter()\n+            .fold(PlaceTy::from_ty(decls.local_decls()[local].ty), |place_ty, &elem| {\n+                place_ty.projection_ty(tcx, elem)\n+            });\n+\n+        let place_ty = Place::ty_from(local, projection, decls, tcx);\n+        if place_ty.variant_index.is_some() {\n+            return Err(());\n+        }\n+        self.register_with_ty(local, projection, place_ty.ty)\n+    }\n+\n+    fn register_with_ty<'tcx>(\n+        &mut self,\n+        local: Local,\n+        projection: &[PlaceElem<'tcx>],\n+        ty: Ty<'tcx>,\n+    ) -> Result<(), ()> {\n+        if !ty.is_scalar() {\n+            // Currently, only scalar types are allowed, because they are atomic\n+            // and therefore do not require invalidation of parent places.\n+            return Err(());\n+        }\n+\n+        let place = self.make_place(local, projection)?;\n+\n         // Allocate a value slot if it doesn't have one.\n-        if self.places[index].value_index.is_none() {\n-            self.places[index].value_index = Some(self.value_count.into());\n+        if self.places[place].value_index.is_none() {\n+            self.places[place].value_index = Some(self.value_count.into());\n             self.value_count += 1;\n         }\n \n@@ -720,11 +752,13 @@ impl<V> HasTop for FlatSet<V> {\n     }\n }\n \n+/// Currently, we only track places through deref and field projections.\n+///\n+/// For now, downcast is not allowed due to aliasing between variants (see #101168).\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ProjElem {\n     Deref,\n     Field(Field),\n-    Downcast(VariantIdx),\n }\n \n impl<V, T> TryFrom<ProjectionElem<V, T>> for ProjElem {\n@@ -734,7 +768,6 @@ impl<V, T> TryFrom<ProjectionElem<V, T>> for ProjElem {\n         match value {\n             ProjectionElem::Deref => Ok(ProjElem::Deref),\n             ProjectionElem::Field(field, _) => Ok(ProjElem::Field(field)),\n-            ProjectionElem::Downcast(_, variant) => Ok(ProjElem::Downcast(variant)),\n             _ => Err(()),\n         }\n     }\n@@ -800,7 +833,6 @@ fn debug_with_context_rec<V: Debug + Eq>(\n                     format!(\"{}.{}\", place_str, field.index())\n                 }\n             }\n-            ProjElem::Downcast(variant) => format!(\"({} as #{})\", place_str, variant.index()),\n         };\n         debug_with_context_rec(child, &child_place_str, new, old, map, f)?;\n     }"}]}