{"sha": "4a1336401072bdbac9601c97e278795b1a4b9763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMTMzNjQwMTA3MmJkYmFjOTYwMWM5N2UyNzg3OTViMWE0Yjk3NjM=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-12-16T18:01:40Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-12-16T18:01:40Z"}, "message": "Remove obsolete mutability from ast::Ty", "tree": {"sha": "4c798b831e9e440cdb614180d502a4abbfea69c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c798b831e9e440cdb614180d502a4abbfea69c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1336401072bdbac9601c97e278795b1a4b9763", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1336401072bdbac9601c97e278795b1a4b9763", "html_url": "https://github.com/rust-lang/rust/commit/4a1336401072bdbac9601c97e278795b1a4b9763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1336401072bdbac9601c97e278795b1a4b9763/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb89a6c6e60b0ed844258b6c00a68973828b0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb89a6c6e60b0ed844258b6c00a68973828b0ba", "html_url": "https://github.com/rust-lang/rust/commit/9eb89a6c6e60b0ed844258b6c00a68973828b0ba"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "eb17955f050162ae334c3c2686970f36afd251d4", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=4a1336401072bdbac9601c97e278795b1a4b9763", "patch": "@@ -282,6 +282,12 @@ pub static NO_TPS: uint = 2;\n pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n     this: &AC, rscope: &RS, ast_ty: &ast::Ty) -> ty::t {\n \n+    fn ast_ty_to_mt<AC:AstConv, RS:RegionScope>(\n+        this: &AC, rscope: &RS, ty: &ast::Ty) -> ty::mt {\n+\n+        ty::mt {ty: ast_ty_to_ty(this, rscope, ty), mutbl: ast::MutImmutable}\n+    }\n+\n     fn ast_mt_to_mt<AC:AstConv, RS:RegionScope>(\n         this: &AC, rscope: &RS, mt: &ast::mt) -> ty::mt {\n \n@@ -303,8 +309,8 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n         debug!(\"mk_pointer(vst={:?})\", vst);\n \n         match a_seq_ty.ty.node {\n-            ast::ty_vec(ref mt) => {\n-                let mut mt = ast_mt_to_mt(this, rscope, mt);\n+            ast::ty_vec(ty) => {\n+                let mut mt = ast_ty_to_mt(this, rscope, ty);\n                 if a_seq_ty.mutbl == ast::MutMutable {\n                     mt = ty::mt { ty: mt.ty, mutbl: a_seq_ty.mutbl };\n                 }\n@@ -394,14 +400,15 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n         mk_pointer(this, rscope, mt, ty::vstore_box,\n                    |tmt| ty::mk_box(tcx, tmt))\n       }\n-      ast::ty_uniq(ref mt) => {\n-        mk_pointer(this, rscope, mt, ty::vstore_uniq,\n+      ast::ty_uniq(ty) => {\n+        let mt = ast::mt { ty: ty, mutbl: ast::MutImmutable };\n+        mk_pointer(this, rscope, &mt, ty::vstore_uniq,\n                    |tmt| ty::mk_uniq(tcx, tmt))\n       }\n-      ast::ty_vec(ref mt) => {\n+      ast::ty_vec(ty) => {\n         tcx.sess.span_err(ast_ty.span, \"bare `[]` is not a type\");\n         // return /something/ so they can at least get more errors\n-        ty::mk_evec(tcx, ast_mt_to_mt(this, rscope, mt), ty::vstore_uniq)\n+        ty::mk_evec(tcx, ast_ty_to_mt(this, rscope, ty), ty::vstore_uniq)\n       }\n       ast::ty_ptr(ref mt) => {\n         ty::mk_ptr(tcx, ast_mt_to_mt(this, rscope, mt))\n@@ -532,15 +539,15 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n           }\n         }\n       }\n-      ast::ty_fixed_length_vec(ref a_mt, e) => {\n+      ast::ty_fixed_length_vec(ty, e) => {\n         match const_eval::eval_const_expr_partial(&tcx, e) {\n           Ok(ref r) => {\n             match *r {\n               const_eval::const_int(i) =>\n-                ty::mk_evec(tcx, ast_mt_to_mt(this, rscope, a_mt),\n+                ty::mk_evec(tcx, ast_ty_to_mt(this, rscope, ty),\n                             ty::vstore_fixed(i as uint)),\n               const_eval::const_uint(i) =>\n-                ty::mk_evec(tcx, ast_mt_to_mt(this, rscope, a_mt),\n+                ty::mk_evec(tcx, ast_ty_to_mt(this, rscope, ty),\n                             ty::vstore_fixed(i as uint)),\n               _ => {\n                 tcx.sess.span_fatal("}, {"sha": "443293818af7c1cd63f0bd3f4bd567595a09b5df", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=4a1336401072bdbac9601c97e278795b1a4b9763", "patch": "@@ -621,10 +621,10 @@ impl Clean<Type> for ast::Ty {\n                 BorrowedRef {lifetime: l.clean(), mutability: m.mutbl.clean(),\n                              type_: ~m.ty.clean()},\n             ty_box(ref m) => Managed(m.mutbl.clean(), ~m.ty.clean()),\n-            ty_uniq(ref m) => Unique(~m.ty.clean()),\n-            ty_vec(ref m) => Vector(~m.ty.clean()),\n-            ty_fixed_length_vec(ref m, ref e) => FixedVector(~m.ty.clean(),\n-                                                             e.span.to_src()),\n+            ty_uniq(ty) => Unique(~ty.clean()),\n+            ty_vec(ty) => Vector(~ty.clean()),\n+            ty_fixed_length_vec(ty, ref e) => FixedVector(~ty.clean(),\n+                                                          e.span.to_src()),\n             ty_tup(ref tys) => Tuple(tys.iter().map(|x| x.clean()).collect()),\n             ty_path(ref p, ref tpbs, id) =>\n                 resolve_type(p.clean(), tpbs.clean(), id),"}, {"sha": "8e6e0625138d99f555bdd3e44dfb7800494f998f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4a1336401072bdbac9601c97e278795b1a4b9763", "patch": "@@ -875,9 +875,9 @@ pub enum ty_ {\n     ty_nil,\n     ty_bot, /* bottom type */\n     ty_box(mt),\n-    ty_uniq(mt),\n-    ty_vec(mt),\n-    ty_fixed_length_vec(mt, @Expr),\n+    ty_uniq(P<Ty>),\n+    ty_vec(P<Ty>),\n+    ty_fixed_length_vec(P<Ty>, @Expr),\n     ty_ptr(mt),\n     ty_rptr(Option<Lifetime>, mt),\n     ty_closure(@TyClosure),"}, {"sha": "930d25e7443e778a00b2a1e5224408fe3d7a2a5a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4a1336401072bdbac9601c97e278795b1a4b9763", "patch": "@@ -312,7 +312,7 @@ impl AstBuilder for @ExtCtxt {\n                 ast::ty_rptr(lifetime, self.ty_mt(ty, mutbl)))\n     }\n     fn ty_uniq(&self, span: Span, ty: P<ast::Ty>) -> P<ast::Ty> {\n-        self.ty(span, ast::ty_uniq(self.ty_mt(ty, ast::MutImmutable)))\n+        self.ty(span, ast::ty_uniq(ty))\n     }\n     fn ty_box(&self, span: Span,\n                  ty: P<ast::Ty>, mutbl: ast::Mutability) -> P<ast::Ty> {"}, {"sha": "98ebc24427d9a5aaa4487e6b275c90a34e2c28b8", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=4a1336401072bdbac9601c97e278795b1a4b9763", "patch": "@@ -593,7 +593,7 @@ impl Context {\n                 ~[]\n             ), None);\n         let ty = ast::ty_fixed_length_vec(\n-            self.ecx.ty_mt(piece_ty, ast::MutImmutable),\n+            piece_ty,\n             self.ecx.expr_uint(self.fmtsp, self.pieces.len())\n         );\n         let ty = self.ecx.ty(self.fmtsp, ty);"}, {"sha": "a7faeee494e2f5a3f4d805a9b08093e427e8cd1c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4a1336401072bdbac9601c97e278795b1a4b9763", "patch": "@@ -241,8 +241,8 @@ pub trait ast_fold {\n         let node = match t.node {\n             ty_nil | ty_bot | ty_infer => t.node.clone(),\n             ty_box(ref mt) => ty_box(fold_mt(mt, self)),\n-            ty_uniq(ref mt) => ty_uniq(fold_mt(mt, self)),\n-            ty_vec(ref mt) => ty_vec(fold_mt(mt, self)),\n+            ty_uniq(ty) => ty_uniq(self.fold_ty(ty)),\n+            ty_vec(ty) => ty_vec(self.fold_ty(ty)),\n             ty_ptr(ref mt) => ty_ptr(fold_mt(mt, self)),\n             ty_rptr(ref region, ref mt) => {\n                 ty_rptr(fold_opt_lifetime(region, self), fold_mt(mt, self))\n@@ -272,8 +272,8 @@ pub trait ast_fold {\n                         fold_opt_bounds(bounds, self),\n                         self.new_id(id))\n             }\n-            ty_fixed_length_vec(ref mt, e) => {\n-                ty_fixed_length_vec(fold_mt(mt, self), self.fold_expr(e))\n+            ty_fixed_length_vec(ty, e) => {\n+                ty_fixed_length_vec(self.fold_ty(ty), self.fold_expr(e))\n             }\n             ty_typeof(expr) => ty_typeof(self.fold_expr(expr)),\n         };"}, {"sha": "9ab6cc96d33193a00ca705e83a879985e24dc146", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4a1336401072bdbac9601c97e278795b1a4b9763", "patch": "@@ -1213,25 +1213,25 @@ impl Parser {\n         } else if *self.token == token::AT {\n             // MANAGED POINTER\n             self.bump();\n-            self.parse_box_or_uniq_pointee(ManagedSigil, ty_box)\n+            self.parse_box_or_uniq_pointee(ManagedSigil)\n         } else if *self.token == token::TILDE {\n             // OWNED POINTER\n             self.bump();\n-            self.parse_box_or_uniq_pointee(OwnedSigil, ty_uniq)\n+            self.parse_box_or_uniq_pointee(OwnedSigil)\n         } else if *self.token == token::BINOP(token::STAR) {\n             // STAR POINTER (bare pointer?)\n             self.bump();\n             ty_ptr(self.parse_mt())\n         } else if *self.token == token::LBRACKET {\n             // VECTOR\n             self.expect(&token::LBRACKET);\n-            let mt = mt { ty: self.parse_ty(false), mutbl: MutImmutable };\n+            let t = self.parse_ty(false);\n \n             // Parse the `, ..e` in `[ int, ..e ]`\n             // where `e` is a const expression\n             let t = match self.maybe_parse_fixed_vstore() {\n-                None => ty_vec(mt),\n-                Some(suffix) => ty_fixed_length_vec(mt, suffix)\n+                None => ty_vec(t),\n+                Some(suffix) => ty_fixed_length_vec(t, suffix)\n             };\n             self.expect(&token::RBRACKET);\n             t\n@@ -1284,8 +1284,7 @@ impl Parser {\n \n     // parse the type following a @ or a ~\n     pub fn parse_box_or_uniq_pointee(&self,\n-                                     sigil: ast::Sigil,\n-                                     ctor: |v: mt| -> ty_)\n+                                     sigil: ast::Sigil)\n                                      -> ty_ {\n         // ~'foo fn() or ~fn() are parsed directly as obsolete fn types:\n         match *self.token {\n@@ -1309,9 +1308,9 @@ impl Parser {\n         // rather than boxed ptrs.  But the special casing of str/vec is not\n         // reflected in the AST type.\n         if sigil == OwnedSigil {\n-            ctor(mt { ty: self.parse_ty(false), mutbl: MutImmutable })\n+            ty_uniq(self.parse_ty(false))\n         } else {\n-            ctor(self.parse_mt())\n+            ty_box(self.parse_mt())\n         }\n     }\n "}, {"sha": "7cea2ed3f9ca6d71cf3ff02ed72639170a081fd5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4a1336401072bdbac9601c97e278795b1a4b9763", "patch": "@@ -401,14 +401,10 @@ pub fn print_type(s: @ps, ty: &ast::Ty) {\n       ast::ty_nil => word(s.s, \"()\"),\n       ast::ty_bot => word(s.s, \"!\"),\n       ast::ty_box(ref mt) => { word(s.s, \"@\"); print_mt(s, mt); }\n-      ast::ty_uniq(ref mt) => { word(s.s, \"~\"); print_mt(s, mt); }\n-      ast::ty_vec(ref mt) => {\n+      ast::ty_uniq(ty) => { word(s.s, \"~\"); print_type(s, ty); }\n+      ast::ty_vec(ty) => {\n         word(s.s, \"[\");\n-        match mt.mutbl {\n-          ast::MutMutable => word_space(s, \"mut\"),\n-          ast::MutImmutable => ()\n-        }\n-        print_type(s, mt.ty);\n+        print_type(s, ty);\n         word(s.s, \"]\");\n       }\n       ast::ty_ptr(ref mt) => { word(s.s, \"*\"); print_mt(s, mt); }\n@@ -444,13 +440,9 @@ pub fn print_type(s: @ps, ty: &ast::Ty) {\n                       Some(&generics), None);\n       }\n       ast::ty_path(ref path, ref bounds, _) => print_bounded_path(s, path, bounds),\n-      ast::ty_fixed_length_vec(ref mt, v) => {\n+      ast::ty_fixed_length_vec(ty, v) => {\n         word(s.s, \"[\");\n-        match mt.mutbl {\n-            ast::MutMutable => word_space(s, \"mut\"),\n-            ast::MutImmutable => ()\n-        }\n-        print_type(s, mt.ty);\n+        print_type(s, ty);\n         word(s.s, \", ..\");\n         print_expr(s, v);\n         word(s.s, \"]\");"}, {"sha": "f5471373b62ab758a79b8e5c69223af0602e6fa3", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1336401072bdbac9601c97e278795b1a4b9763/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=4a1336401072bdbac9601c97e278795b1a4b9763", "patch": "@@ -298,8 +298,10 @@ pub fn skip_ty<E, V:Visitor<E>>(_: &mut V, _: &Ty, _: E) {\n \n pub fn walk_ty<E:Clone, V:Visitor<E>>(visitor: &mut V, typ: &Ty, env: E) {\n     match typ.node {\n-        ty_box(ref mutable_type) | ty_uniq(ref mutable_type) |\n-        ty_vec(ref mutable_type) | ty_ptr(ref mutable_type) => {\n+        ty_uniq(ty) | ty_vec(ty) => {\n+            visitor.visit_ty(ty, env)\n+        }\n+        ty_box(ref mutable_type) | ty_ptr(ref mutable_type) => {\n             visitor.visit_ty(mutable_type.ty, env)\n         }\n         ty_rptr(ref lifetime, ref mutable_type) => {\n@@ -340,8 +342,8 @@ pub fn walk_ty<E:Clone, V:Visitor<E>>(visitor: &mut V, typ: &Ty, env: E) {\n                 walk_ty_param_bounds(visitor, bounds, env.clone())\n             }\n         }\n-        ty_fixed_length_vec(ref mutable_type, expression) => {\n-            visitor.visit_ty(mutable_type.ty, env.clone());\n+        ty_fixed_length_vec(ty, expression) => {\n+            visitor.visit_ty(ty, env.clone());\n             visitor.visit_expr(expression, env)\n         }\n         ty_typeof(expression) => {"}]}