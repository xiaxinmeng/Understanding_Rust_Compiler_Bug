{"sha": "3c07835e10d003b5926bd32de1f4ed4f51109a88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMDc4MzVlMTBkMDAzYjU5MjZiZDMyZGUxZjRlZDRmNTExMDlhODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-06T16:07:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-06T16:07:18Z"}, "message": "Auto merge of #24056 - nikomatsakis:issue-23853-crates-io, r=aturon\n\nIf we find a blanket impl for `Trait` but we're matching on an object `Trait`, prefer the object (I think we could perhaps go either way, but this seems safer). Also give a nice error for attempts to manually `impl Trait for Trait`, since they will be ineffectual.\r\n\r\nThis fixes the problems around ambiguity ICEs relating to `Any` and `MarkerTrait` that were cropping up all over the place. There may still be similar ICEs reported in #21756 that this PR does not address.\r\n\r\nFixes #24015.\r\n\r\nFixes #24051.\r\nFixes #24037.\r\nFixes #23853.\r\nFixes #21942.\r\ncc #21756.\r\n\r\ncc @alexcrichton (this fixes crates.io)\r\nr? @aturon", "tree": {"sha": "8310167487099b4522350fa4d2d2429144b36dca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8310167487099b4522350fa4d2d2429144b36dca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c07835e10d003b5926bd32de1f4ed4f51109a88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c07835e10d003b5926bd32de1f4ed4f51109a88", "html_url": "https://github.com/rust-lang/rust/commit/3c07835e10d003b5926bd32de1f4ed4f51109a88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c07835e10d003b5926bd32de1f4ed4f51109a88/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f37ba64e812713b273ad9818f05d852f6563b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f37ba64e812713b273ad9818f05d852f6563b87", "html_url": "https://github.com/rust-lang/rust/commit/9f37ba64e812713b273ad9818f05d852f6563b87"}, {"sha": "0d56699d41c5683935ec4c182baa867756ae4e79", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d56699d41c5683935ec4c182baa867756ae4e79", "html_url": "https://github.com/rust-lang/rust/commit/0d56699d41c5683935ec4c182baa867756ae4e79"}], "stats": {"total": 117, "additions": 112, "deletions": 5}, "files": [{"sha": "08357084bb20b4850154c0e2b72bc981576a98c8", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c07835e10d003b5926bd32de1f4ed4f51109a88/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07835e10d003b5926bd32de1f4ed4f51109a88/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=3c07835e10d003b5926bd32de1f4ed4f51109a88", "patch": "@@ -1378,6 +1378,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // #18453.\n                 true\n             }\n+            (&ImplCandidate(..), &ObjectCandidate(..)) => {\n+                // This means that we are matching an object of type\n+                // `Trait` against the trait `Trait`. In that case, we\n+                // always prefer to use the object vtable over the\n+                // impl. Like a where clause, the impl may or may not\n+                // be the one that is used by the object (because the\n+                // impl may have additional where-clauses that the\n+                // object's source might not meet) -- if it is, using\n+                // the vtable is fine. If it is not, using the vtable\n+                // is good. A win win!\n+                true\n+            }\n             (&DefaultImplCandidate(_), _) => {\n                 // Prefer other candidates over default implementations.\n                 self.tcx().sess.bug("}, {"sha": "99b6d4154e91f07ddb58ed5858bb9b459380548a", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3c07835e10d003b5926bd32de1f4ed4f51109a88/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07835e10d003b5926bd32de1f4ed4f51109a88/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=3c07835e10d003b5926bd32de1f4ed4f51109a88", "patch": "@@ -21,14 +21,14 @@ use syntax::ast_util;\n use syntax::visit;\n use syntax::codemap::Span;\n use util::nodemap::DefIdMap;\n-use util::ppaux::Repr;\n+use util::ppaux::{Repr, UserString};\n \n pub fn check(tcx: &ty::ctxt) {\n     let mut overlap = OverlapChecker { tcx: tcx, default_impls: DefIdMap() };\n     overlap.check_for_overlapping_impls();\n \n-    // this secondary walk specifically checks for impls of defaulted\n-    // traits, for which additional overlap rules exist\n+    // this secondary walk specifically checks for some other cases,\n+    // like defaulted traits, for which additional overlap rules exist\n     visit::walk_crate(&mut overlap, tcx.map.krate());\n }\n \n@@ -153,7 +153,41 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n                     None => { }\n                 }\n             }\n-            _ => {}\n+            ast::ItemImpl(_, _, _, Some(_), ref self_ty, _) => {\n+                let impl_def_id = ast_util::local_def(item.id);\n+                let trait_ref = ty::impl_trait_ref(self.tcx, impl_def_id).unwrap();\n+                let trait_def_id = trait_ref.def_id;\n+                match trait_ref.self_ty().sty {\n+                    ty::ty_trait(ref data) => {\n+                        // This is something like impl Trait1 for Trait2. Illegal\n+                        // if Trait1 is a supertrait of Trait2 or Trait2 is not object safe.\n+\n+                        if !traits::is_object_safe(self.tcx, data.principal_def_id()) {\n+                            // this just means the self-ty is illegal,\n+                            // and probably this error should have\n+                            // been reported elsewhere, but I'm trying to avoid\n+                            // giving a misleading message below.\n+                            span_err!(self.tcx.sess, self_ty.span, E0372,\n+                                      \"the trait `{}` cannot be made into an object\",\n+                                      ty::item_path_str(self.tcx, data.principal_def_id()));\n+                        } else {\n+                            let mut supertrait_def_ids =\n+                                traits::supertrait_def_ids(self.tcx, data.principal_def_id());\n+                            if supertrait_def_ids.any(|d| d == trait_def_id) {\n+                                span_err!(self.tcx.sess, item.span, E0371,\n+                                          \"the object type `{}` automatically \\\n+                                           implements the trait `{}`\",\n+                                          trait_ref.self_ty().user_string(self.tcx),\n+                                          ty::item_path_str(self.tcx, trait_def_id));\n+                            }\n+                        }\n+                    }\n+                    _ => { }\n+                }\n+            }\n+            _ => {\n+            }\n         }\n+        visit::walk_item(self, item);\n     }\n }"}, {"sha": "b17702cfb8cb5c58d6b9bf907f3491affe892040", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c07835e10d003b5926bd32de1f4ed4f51109a88/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07835e10d003b5926bd32de1f4ed4f51109a88/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=3c07835e10d003b5926bd32de1f4ed4f51109a88", "patch": "@@ -179,7 +179,9 @@ register_diagnostics! {\n     E0366, // dropck forbid specialization to concrete type or region\n     E0367, // dropck forbid specialization to predicate not in struct/enum\n     E0368, // binary operation `<op>=` cannot be applied to types\n-    E0369  // binary operation `<op>` cannot be applied to types\n+    E0369, // binary operation `<op>` cannot be applied to types\n+    E0371, // impl Trait for Trait is illegal\n+    E0372  // impl Trait for Trait where Trait is not object safe\n }\n \n __build_diagnostic_array! { DIAGNOSTICS }"}, {"sha": "23f4218fc1ebda71b1ae5e674f053d5b63b7471c", "filename": "src/test/compile-fail/coherence-impl-trait-for-trait.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3c07835e10d003b5926bd32de1f4ed4f51109a88/src%2Ftest%2Fcompile-fail%2Fcoherence-impl-trait-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07835e10d003b5926bd32de1f4ed4f51109a88/src%2Ftest%2Fcompile-fail%2Fcoherence-impl-trait-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impl-trait-for-trait.rs?ref=3c07835e10d003b5926bd32de1f4ed4f51109a88", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we give suitable error messages when the user attempts to\n+// impl a trait `Trait` for its own object type.\n+\n+trait Foo { fn dummy(&self) { } }\n+trait Bar: Foo { }\n+trait Baz: Bar { }\n+\n+// Subtraits of Baz are not legal:\n+impl Foo for Baz { }   //~ ERROR E0371\n+impl Bar for Baz { }   //~ ERROR E0371\n+impl Baz for Baz { }   //~ ERROR E0371\n+\n+// But other random traits are:\n+trait Other { }\n+impl Other for Baz { } // OK, Bar not a subtrait of Baz\n+\n+// If the trait is not object-safe, we give a more tailored message\n+// because we're such schnuckels:\n+trait NotObjectSafe { fn eq(&self, other: Self); }\n+impl NotObjectSafe for NotObjectSafe { } //~ ERROR E0372\n+\n+fn main() { }"}, {"sha": "b9b2b5061375a663b7967c8584fd012a944c3f0e", "filename": "src/test/run-pass/traits-impl-object-overlap-issue-23853.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3c07835e10d003b5926bd32de1f4ed4f51109a88/src%2Ftest%2Frun-pass%2Ftraits-impl-object-overlap-issue-23853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c07835e10d003b5926bd32de1f4ed4f51109a88/src%2Ftest%2Frun-pass%2Ftraits-impl-object-overlap-issue-23853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-impl-object-overlap-issue-23853.rs?ref=3c07835e10d003b5926bd32de1f4ed4f51109a88", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to compile the case where both a blanket impl\n+// and the object type itself supply the required trait obligation.\n+// In this case, the blanket impl for `Foo` applies to any type,\n+// including `Bar`, but the object type `Bar` also implicitly supplies\n+// this context.\n+\n+trait Foo { fn dummy(&self) { } }\n+\n+trait Bar: Foo { }\n+\n+impl<T:?Sized> Foo for T { }\n+\n+fn want_foo<B:?Sized+Foo>() { }\n+\n+fn main() {\n+    want_foo::<Bar>();\n+}"}]}