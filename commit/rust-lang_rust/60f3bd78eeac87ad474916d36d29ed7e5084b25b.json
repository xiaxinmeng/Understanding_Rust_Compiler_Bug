{"sha": "60f3bd78eeac87ad474916d36d29ed7e5084b25b", "node_id": "C_kwDOAAsO6NoAKDYwZjNiZDc4ZWVhYzg3YWQ0NzQ5MTZkMzZkMjllZDdlNTA4NGIyNWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-20T07:30:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-20T07:30:16Z"}, "message": "Auto merge of #92041 - Aaron1011:remove-speculative-evaluation, r=jackh726\n\nRemove 'speculative evaluation' of predicates\n\nPerforming 'speculative evaluation' introduces caching bugs that\ncannot be fixed without invasive changes to projection.\n\nHopefully, we can win back most of the performance lost by\nre-adding 'cache completion'\n\nFixes #90662", "tree": {"sha": "a78a4c898374cc0405f31664766be0fc80b04891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78a4c898374cc0405f31664766be0fc80b04891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60f3bd78eeac87ad474916d36d29ed7e5084b25b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60f3bd78eeac87ad474916d36d29ed7e5084b25b", "html_url": "https://github.com/rust-lang/rust/commit/60f3bd78eeac87ad474916d36d29ed7e5084b25b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60f3bd78eeac87ad474916d36d29ed7e5084b25b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "940a97a91023d1817b33d0ababc985793c9ed780", "url": "https://api.github.com/repos/rust-lang/rust/commits/940a97a91023d1817b33d0ababc985793c9ed780", "html_url": "https://github.com/rust-lang/rust/commit/940a97a91023d1817b33d0ababc985793c9ed780"}, {"sha": "eee09ec4263ac13d94e79b92bdd7df780330077a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eee09ec4263ac13d94e79b92bdd7df780330077a", "html_url": "https://github.com/rust-lang/rust/commit/eee09ec4263ac13d94e79b92bdd7df780330077a"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "23f615a96185df70969a5391b9bd50fedd81f4fb", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/60f3bd78eeac87ad474916d36d29ed7e5084b25b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f3bd78eeac87ad474916d36d29ed7e5084b25b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=60f3bd78eeac87ad474916d36d29ed7e5084b25b", "patch": "@@ -10,7 +10,6 @@ use super::PredicateObligation;\n use super::Selection;\n use super::SelectionContext;\n use super::SelectionError;\n-use super::TraitQueryMode;\n use super::{\n     ImplSourceClosureData, ImplSourceDiscriminantKindData, ImplSourceFnPointerData,\n     ImplSourceGeneratorData, ImplSourcePointeeData, ImplSourceUserDefinedData,\n@@ -946,27 +945,11 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             };\n \n             let mut deduped: SsoHashSet<_> = Default::default();\n-            let mut canonical =\n-                SelectionContext::with_query_mode(selcx.infcx(), TraitQueryMode::Canonical);\n-\n             result.obligations.drain_filter(|projected_obligation| {\n                 if !deduped.insert(projected_obligation.clone()) {\n                     return true;\n                 }\n-                // If any global obligations always apply, considering regions, then we don't\n-                // need to include them. The `is_global` check rules out inference variables,\n-                // so there's no need for the caller of `opt_normalize_projection_type`\n-                // to evaluate them.\n-                // Note that we do *not* discard obligations that evaluate to\n-                // `EvaluatedtoOkModuloRegions`. Evaluating these obligations\n-                // inside of a query (e.g. `evaluate_obligation`) can change\n-                // the result to `EvaluatedToOkModuloRegions`, while an\n-                // `EvaluatedToOk` obligation will never change the result.\n-                // See #85360 for more details\n-                projected_obligation.is_global(canonical.tcx())\n-                    && canonical\n-                        .evaluate_root_obligation(projected_obligation)\n-                        .map_or(false, |res| res.must_apply_considering_regions())\n+                false\n             });\n \n             if use_cache {"}, {"sha": "879f30071bfdb0e685cd70282079fe887555d5c9", "filename": "src/test/ui/traits/issue-90662-projection-caching.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/60f3bd78eeac87ad474916d36d29ed7e5084b25b/src%2Ftest%2Fui%2Ftraits%2Fissue-90662-projection-caching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f3bd78eeac87ad474916d36d29ed7e5084b25b/src%2Ftest%2Fui%2Ftraits%2Fissue-90662-projection-caching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-90662-projection-caching.rs?ref=60f3bd78eeac87ad474916d36d29ed7e5084b25b", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+\n+// Regression test for issue #90662\n+// Tests that projection caching does not cause a spurious error\n+\n+trait HasProvider<T: ?Sized> {}\n+trait Provider<M> {\n+    type Interface: ?Sized;\n+}\n+\n+trait Repository {}\n+trait Service {}\n+\n+struct DbConnection;\n+impl<M> Provider<M> for DbConnection {\n+    type Interface = DbConnection;\n+}\n+\n+struct RepositoryImpl;\n+impl<M: HasProvider<DbConnection>> Provider<M> for RepositoryImpl {\n+    type Interface = dyn Repository;\n+}\n+\n+struct ServiceImpl;\n+impl<M: HasProvider<dyn Repository>> Provider<M> for ServiceImpl {\n+    type Interface = dyn Service;\n+}\n+\n+struct TestModule;\n+impl HasProvider<<DbConnection as Provider<Self>>::Interface> for TestModule {}\n+impl HasProvider<<RepositoryImpl as Provider<Self>>::Interface> for TestModule {}\n+impl HasProvider<<ServiceImpl as Provider<Self>>::Interface> for TestModule {}\n+\n+fn main() {}"}]}