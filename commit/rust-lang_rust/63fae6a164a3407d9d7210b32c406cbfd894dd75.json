{"sha": "63fae6a164a3407d9d7210b32c406cbfd894dd75", "node_id": "C_kwDOAAsO6NoAKDYzZmFlNmExNjRhMzQwN2Q5ZDcyMTBiMzJjNDA2Y2JmZDg5NGRkNzU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-13T14:19:54Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-13T14:19:54Z"}, "message": "Introduce helpers for common test case commands", "tree": {"sha": "dca54a549a4d39956f40e4388e7281e025f59ef2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca54a549a4d39956f40e4388e7281e025f59ef2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63fae6a164a3407d9d7210b32c406cbfd894dd75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63fae6a164a3407d9d7210b32c406cbfd894dd75", "html_url": "https://github.com/rust-lang/rust/commit/63fae6a164a3407d9d7210b32c406cbfd894dd75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63fae6a164a3407d9d7210b32c406cbfd894dd75/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397fafa16090dc2530449027a71143480d5cc336", "url": "https://api.github.com/repos/rust-lang/rust/commits/397fafa16090dc2530449027a71143480d5cc336", "html_url": "https://github.com/rust-lang/rust/commit/397fafa16090dc2530449027a71143480d5cc336"}], "stats": {"total": 226, "additions": 117, "deletions": 109}, "files": [{"sha": "8bef6f733800afd82e070ac20327a5219fb86475", "filename": "build_system/tests.rs", "status": "modified", "additions": 117, "deletions": 109, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/63fae6a164a3407d9d7210b32c406cbfd894dd75/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fae6a164a3407d9d7210b32c406cbfd894dd75/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=63fae6a164a3407d9d7210b32c406cbfd894dd75", "patch": "@@ -15,112 +15,83 @@ static BUILD_EXAMPLE_OUT_DIR: RelPath = RelPath::BUILD.join(\"example\");\n \n struct TestCase {\n     config: &'static str,\n-    func: &'static dyn Fn(&TestRunner),\n+    cmd: TestCaseCmd,\n+}\n+\n+enum TestCaseCmd {\n+    Custom { func: &'static dyn Fn(&TestRunner) },\n+    BuildLib { source: &'static str, crate_types: &'static str },\n+    BuildBinAndRun { source: &'static str, args: &'static [&'static str] },\n+    JitBin { source: &'static str, args: &'static str },\n }\n \n impl TestCase {\n-    const fn new(config: &'static str, func: &'static dyn Fn(&TestRunner)) -> Self {\n-        Self { config, func }\n+    // FIXME reduce usage of custom test case commands\n+    const fn custom(config: &'static str, func: &'static dyn Fn(&TestRunner)) -> Self {\n+        Self { config, cmd: TestCaseCmd::Custom { func } }\n+    }\n+\n+    const fn build_lib(\n+        config: &'static str,\n+        source: &'static str,\n+        crate_types: &'static str,\n+    ) -> Self {\n+        Self { config, cmd: TestCaseCmd::BuildLib { source, crate_types } }\n+    }\n+\n+    const fn build_bin_and_run(\n+        config: &'static str,\n+        source: &'static str,\n+        args: &'static [&'static str],\n+    ) -> Self {\n+        Self { config, cmd: TestCaseCmd::BuildBinAndRun { source, args } }\n+    }\n+\n+    const fn jit_bin(config: &'static str, source: &'static str, args: &'static str) -> Self {\n+        Self { config, cmd: TestCaseCmd::JitBin { source, args } }\n     }\n }\n \n const NO_SYSROOT_SUITE: &[TestCase] = &[\n-    TestCase::new(\"build.mini_core\", &|runner| {\n-        runner.run_rustc([\"example/mini_core.rs\", \"--crate-type\", \"lib,dylib\"]);\n-    }),\n-    TestCase::new(\"build.example\", &|runner| {\n-        runner.run_rustc([\"example/example.rs\", \"--crate-type\", \"lib\"]);\n-    }),\n-    TestCase::new(\"jit.mini_core_hello_world\", &|runner| {\n-        let mut jit_cmd = runner.rustc_command([\n-            \"-Zunstable-options\",\n-            \"-Cllvm-args=mode=jit\",\n-            \"-Cprefer-dynamic\",\n-            \"example/mini_core_hello_world.rs\",\n-            \"--cfg\",\n-            \"jit\",\n-        ]);\n-        jit_cmd.env(\"CG_CLIF_JIT_ARGS\", \"abc bcd\");\n-        spawn_and_wait(jit_cmd);\n-\n-        eprintln!(\"[JIT-lazy] mini_core_hello_world\");\n-        let mut jit_cmd = runner.rustc_command([\n-            \"-Zunstable-options\",\n-            \"-Cllvm-args=mode=jit-lazy\",\n-            \"-Cprefer-dynamic\",\n-            \"example/mini_core_hello_world.rs\",\n-            \"--cfg\",\n-            \"jit\",\n-        ]);\n-        jit_cmd.env(\"CG_CLIF_JIT_ARGS\", \"abc bcd\");\n-        spawn_and_wait(jit_cmd);\n-    }),\n-    TestCase::new(\"aot.mini_core_hello_world\", &|runner| {\n-        runner.run_rustc([\"example/mini_core_hello_world.rs\"]);\n-        runner.run_out_command(\"mini_core_hello_world\", [\"abc\", \"bcd\"]);\n-    }),\n+    TestCase::build_lib(\"build.mini_core\", \"example/mini_core.rs\", \"lib,dylib\"),\n+    TestCase::build_lib(\"build.example\", \"example/example.rs\", \"lib\"),\n+    TestCase::jit_bin(\"jit.mini_core_hello_world\", \"example/mini_core_hello_world.rs\", \"abc bcd\"),\n+    TestCase::build_bin_and_run(\n+        \"aot.mini_core_hello_world\",\n+        \"example/mini_core_hello_world.rs\",\n+        &[\"abc\", \"bcd\"],\n+    ),\n ];\n \n const BASE_SYSROOT_SUITE: &[TestCase] = &[\n-    TestCase::new(\"aot.arbitrary_self_types_pointers_and_wrappers\", &|runner| {\n-        runner.run_rustc([\"example/arbitrary_self_types_pointers_and_wrappers.rs\"]);\n-        runner.run_out_command(\"arbitrary_self_types_pointers_and_wrappers\", []);\n-    }),\n-    TestCase::new(\"aot.issue_91827_extern_types\", &|runner| {\n-        runner.run_rustc([\"example/issue-91827-extern-types.rs\"]);\n-        runner.run_out_command(\"issue-91827-extern-types\", []);\n-    }),\n-    TestCase::new(\"build.alloc_system\", &|runner| {\n-        runner.run_rustc([\"example/alloc_system.rs\", \"--crate-type\", \"lib\"]);\n-    }),\n-    TestCase::new(\"aot.alloc_example\", &|runner| {\n-        runner.run_rustc([\"example/alloc_example.rs\"]);\n-        runner.run_out_command(\"alloc_example\", []);\n-    }),\n-    TestCase::new(\"jit.std_example\", &|runner| {\n-        runner.run_rustc([\n-            \"-Zunstable-options\",\n-            \"-Cllvm-args=mode=jit\",\n-            \"-Cprefer-dynamic\",\n-            \"example/std_example.rs\",\n-        ]);\n-\n-        eprintln!(\"[JIT-lazy] std_example\");\n-        runner.run_rustc([\n-            \"-Zunstable-options\",\n-            \"-Cllvm-args=mode=jit-lazy\",\n-            \"-Cprefer-dynamic\",\n-            \"example/std_example.rs\",\n-        ]);\n-    }),\n-    TestCase::new(\"aot.std_example\", &|runner| {\n-        runner.run_rustc([\"example/std_example.rs\"]);\n-        runner.run_out_command(\"std_example\", [\"arg\"]);\n-    }),\n-    TestCase::new(\"aot.dst_field_align\", &|runner| {\n-        runner.run_rustc([\"example/dst-field-align.rs\"]);\n-        runner.run_out_command(\"dst-field-align\", []);\n-    }),\n-    TestCase::new(\"aot.subslice-patterns-const-eval\", &|runner| {\n-        runner.run_rustc([\"example/subslice-patterns-const-eval.rs\"]);\n-        runner.run_out_command(\"subslice-patterns-const-eval\", []);\n-    }),\n-    TestCase::new(\"aot.track-caller-attribute\", &|runner| {\n-        runner.run_rustc([\"example/track-caller-attribute.rs\"]);\n-        runner.run_out_command(\"track-caller-attribute\", []);\n-    }),\n-    TestCase::new(\"aot.float-minmax-pass\", &|runner| {\n-        runner.run_rustc([\"example/float-minmax-pass.rs\"]);\n-        runner.run_out_command(\"float-minmax-pass\", []);\n-    }),\n-    TestCase::new(\"aot.mod_bench\", &|runner| {\n-        runner.run_rustc([\"example/mod_bench.rs\"]);\n-        runner.run_out_command(\"mod_bench\", []);\n-    }),\n-    TestCase::new(\"aot.issue-72793\", &|runner| {\n-        runner.run_rustc([\"example/issue-72793.rs\"]);\n-        runner.run_out_command(\"issue-72793\", []);\n-    }),\n+    TestCase::build_bin_and_run(\n+        \"aot.arbitrary_self_types_pointers_and_wrappers\",\n+        \"example/arbitrary_self_types_pointers_and_wrappers.rs\",\n+        &[],\n+    ),\n+    TestCase::build_bin_and_run(\n+        \"aot.issue_91827_extern_types\",\n+        \"example/issue-91827-extern-types.rs\",\n+        &[],\n+    ),\n+    TestCase::build_lib(\"build.alloc_system\", \"example/alloc_system.rs\", \"lib\"),\n+    TestCase::build_bin_and_run(\"aot.alloc_example\", \"example/alloc_example.rs\", &[]),\n+    TestCase::jit_bin(\"jit.std_example\", \"example/std_example.rs\", \"\"),\n+    TestCase::build_bin_and_run(\"aot.std_example\", \"example/std_example.rs\", &[\"arg\"]),\n+    TestCase::build_bin_and_run(\"aot.dst_field_align\", \"example/dst-field-align.rs\", &[]),\n+    TestCase::build_bin_and_run(\n+        \"aot.subslice-patterns-const-eval\",\n+        \"example/subslice-patterns-const-eval.rs\",\n+        &[],\n+    ),\n+    TestCase::build_bin_and_run(\n+        \"aot.track-caller-attribute\",\n+        \"example/track-caller-attribute.rs\",\n+        &[],\n+    ),\n+    TestCase::build_bin_and_run(\"aot.float-minmax-pass\", \"example/float-minmax-pass.rs\", &[]),\n+    TestCase::build_bin_and_run(\"aot.mod_bench\", \"example/mod_bench.rs\", &[]),\n+    TestCase::build_bin_and_run(\"aot.issue-72793\", \"example/issue-72793.rs\", &[]),\n ];\n \n pub(crate) static RAND_REPO: GitRepo =\n@@ -147,7 +118,7 @@ static LIBCORE_TESTS: CargoProject =\n     CargoProject::new(&SYSROOT_SRC.join(\"library/core/tests\"), \"core_tests\");\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n-    TestCase::new(\"test.rust-random/rand\", &|runner| {\n+    TestCase::custom(\"test.rust-random/rand\", &|runner| {\n         spawn_and_wait(RAND.clean(&runner.target_compiler.cargo, &runner.dirs));\n \n         if runner.is_native {\n@@ -162,11 +133,11 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             spawn_and_wait(build_cmd);\n         }\n     }),\n-    TestCase::new(\"test.simple-raytracer\", &|runner| {\n+    TestCase::custom(\"test.simple-raytracer\", &|runner| {\n         spawn_and_wait(SIMPLE_RAYTRACER.clean(&runner.host_compiler.cargo, &runner.dirs));\n         spawn_and_wait(SIMPLE_RAYTRACER.build(&runner.target_compiler, &runner.dirs));\n     }),\n-    TestCase::new(\"test.libcore\", &|runner| {\n+    TestCase::custom(\"test.libcore\", &|runner| {\n         spawn_and_wait(LIBCORE_TESTS.clean(&runner.host_compiler.cargo, &runner.dirs));\n \n         if runner.is_native {\n@@ -178,7 +149,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             spawn_and_wait(build_cmd);\n         }\n     }),\n-    TestCase::new(\"test.regex-shootout-regex-dna\", &|runner| {\n+    TestCase::custom(\"test.regex-shootout-regex-dna\", &|runner| {\n         spawn_and_wait(REGEX.clean(&runner.target_compiler.cargo, &runner.dirs));\n \n         // newer aho_corasick versions throw a deprecation warning\n@@ -232,7 +203,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             }\n         }\n     }),\n-    TestCase::new(\"test.regex\", &|runner| {\n+    TestCase::custom(\"test.regex\", &|runner| {\n         spawn_and_wait(REGEX.clean(&runner.host_compiler.cargo, &runner.dirs));\n \n         // newer aho_corasick versions throw a deprecation warning\n@@ -259,7 +230,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             spawn_and_wait(build_cmd);\n         }\n     }),\n-    TestCase::new(\"test.portable-simd\", &|runner| {\n+    TestCase::custom(\"test.portable-simd\", &|runner| {\n         spawn_and_wait(PORTABLE_SIMD.clean(&runner.host_compiler.cargo, &runner.dirs));\n \n         let mut build_cmd = PORTABLE_SIMD.build(&runner.target_compiler, &runner.dirs);\n@@ -366,7 +337,7 @@ impl TestRunner {\n     }\n \n     pub fn run_testsuite(&self, tests: &[TestCase]) {\n-        for &TestCase { config, func } in tests {\n+        for TestCase { config, cmd } in tests {\n             let (tag, testname) = config.split_once('.').unwrap();\n             let tag = tag.to_uppercase();\n             let is_jit_test = tag == \"JIT\";\n@@ -378,7 +349,47 @@ impl TestRunner {\n                 eprintln!(\"[{tag}] {testname}\");\n             }\n \n-            func(self);\n+            match *cmd {\n+                TestCaseCmd::Custom { func } => func(self),\n+                TestCaseCmd::BuildLib { source, crate_types } => {\n+                    self.run_rustc([source, \"--crate-type\", crate_types]);\n+                }\n+                TestCaseCmd::BuildBinAndRun { source, args } => {\n+                    self.run_rustc([source]);\n+                    self.run_out_command(\n+                        source.split('/').last().unwrap().split('.').next().unwrap(),\n+                        args,\n+                    );\n+                }\n+                TestCaseCmd::JitBin { source, args } => {\n+                    let mut jit_cmd = self.rustc_command([\n+                        \"-Zunstable-options\",\n+                        \"-Cllvm-args=mode=jit\",\n+                        \"-Cprefer-dynamic\",\n+                        source,\n+                        \"--cfg\",\n+                        \"jit\",\n+                    ]);\n+                    if !args.is_empty() {\n+                        jit_cmd.env(\"CG_CLIF_JIT_ARGS\", args);\n+                    }\n+                    spawn_and_wait(jit_cmd);\n+\n+                    eprintln!(\"[JIT-lazy] {testname}\");\n+                    let mut jit_cmd = self.rustc_command([\n+                        \"-Zunstable-options\",\n+                        \"-Cllvm-args=mode=jit-lazy\",\n+                        \"-Cprefer-dynamic\",\n+                        source,\n+                        \"--cfg\",\n+                        \"jit\",\n+                    ]);\n+                    if !args.is_empty() {\n+                        jit_cmd.env(\"CG_CLIF_JIT_ARGS\", args);\n+                    }\n+                    spawn_and_wait(jit_cmd);\n+                }\n+            }\n         }\n     }\n \n@@ -410,10 +421,7 @@ impl TestRunner {\n         spawn_and_wait(self.rustc_command(args));\n     }\n \n-    fn run_out_command<'a, I>(&self, name: &str, args: I)\n-    where\n-        I: IntoIterator<Item = &'a str>,\n-    {\n+    fn run_out_command<'a>(&self, name: &str, args: &[&str]) {\n         let mut full_cmd = vec![];\n \n         // Prepend the RUN_WRAPPER's\n@@ -425,7 +433,7 @@ impl TestRunner {\n             BUILD_EXAMPLE_OUT_DIR.to_path(&self.dirs).join(name).to_str().unwrap().to_string(),\n         );\n \n-        for arg in args.into_iter() {\n+        for arg in args {\n             full_cmd.push(arg.to_string());\n         }\n "}]}