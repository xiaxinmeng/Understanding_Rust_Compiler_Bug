{"sha": "8f9f3aa04d0fc5dff13f8e045f30fc96a4928703", "node_id": "C_kwDOAAsO6NoAKDhmOWYzYWEwNGQwZmM1ZGZmMTNmOGUwNDVmMzBmYzk2YTQ5Mjg3MDM", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-30T02:33:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-30T02:33:42Z"}, "message": "Rollup merge of #89335 - mbrubeck:range-is-sorted, r=cuviper\n\nOptimize is_sorted for Range and RangeInclusive\n\nThe [`Step`] trait guarantees that `Range<impl Step>` yields items in sorted order.  We can override `Iterator::is_sorted` based on this guarantee, as we already do for `Iterator::min` and `max`.\n\nThank you to ``@fiveseven-lambda`` who pointed this out [on the Rust Users Forum](https://users.rust-lang.org/t/is-sorted-method-in-impl-iterator-for-range/64717).\n\n[`Step`]: https://doc.rust-lang.org/stable/std/iter/trait.Step.html", "tree": {"sha": "dd881983d7a6edd189a2343c73dfebc9185850c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd881983d7a6edd189a2343c73dfebc9185850c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f9f3aa04d0fc5dff13f8e045f30fc96a4928703", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVSIGCRBK7hj4Ov3rIwAAI6UIAK5dnQ/CH2mMBAjxYUETf67J\nOIyDl0a/vOwFEHEeFlNt0nY8rjoVTsd0PWVybXTIkOGrBXgVe2iTkuhBQbb4z2wg\nUFx3jxLAZqDPL32fT7kpwUiJgd42k9X7wzgDiQ73mnmNJPM6FuiQ9iZrA8bDDQZZ\nJdgpeZ0lf3IhhhyxescfmRGOjLgfHNlD7aYscQfVc+T7np3iuFI/30MZ2pyq/u/6\neMDH03EcF2ensLeMdQsBCnZIKlsshCfRVrwFdMrdLAJvE3DjtId5lU2AVVOKacFS\ne6e571oHKNTDY1R9rvopxpVSY2mB67pHLzbtTeh4KuGjJ94T6InUAv2onjFoc9U=\n=epQz\n-----END PGP SIGNATURE-----\n", "payload": "tree dd881983d7a6edd189a2343c73dfebc9185850c0\nparent e392f5d90d6d0229ee4fa830642cb6e8df0bae03\nparent 830ecbd96ce30e3885663512ed94cbd347e64615\nauthor Eric Huss <eric@huss.org> 1632969222 -0700\ncommitter GitHub <noreply@github.com> 1632969222 -0700\n\nRollup merge of #89335 - mbrubeck:range-is-sorted, r=cuviper\n\nOptimize is_sorted for Range and RangeInclusive\n\nThe [`Step`] trait guarantees that `Range<impl Step>` yields items in sorted order.  We can override `Iterator::is_sorted` based on this guarantee, as we already do for `Iterator::min` and `max`.\n\nThank you to ``@fiveseven-lambda`` who pointed this out [on the Rust Users Forum](https://users.rust-lang.org/t/is-sorted-method-in-impl-iterator-for-range/64717).\n\n[`Step`]: https://doc.rust-lang.org/stable/std/iter/trait.Step.html\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9f3aa04d0fc5dff13f8e045f30fc96a4928703", "html_url": "https://github.com/rust-lang/rust/commit/8f9f3aa04d0fc5dff13f8e045f30fc96a4928703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f9f3aa04d0fc5dff13f8e045f30fc96a4928703/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e392f5d90d6d0229ee4fa830642cb6e8df0bae03", "url": "https://api.github.com/repos/rust-lang/rust/commits/e392f5d90d6d0229ee4fa830642cb6e8df0bae03", "html_url": "https://github.com/rust-lang/rust/commit/e392f5d90d6d0229ee4fa830642cb6e8df0bae03"}, {"sha": "830ecbd96ce30e3885663512ed94cbd347e64615", "url": "https://api.github.com/repos/rust-lang/rust/commits/830ecbd96ce30e3885663512ed94cbd347e64615", "html_url": "https://github.com/rust-lang/rust/commit/830ecbd96ce30e3885663512ed94cbd347e64615"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "0f835689699fc110626c214a5a565396669a7f59", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f9f3aa04d0fc5dff13f8e045f30fc96a4928703/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9f3aa04d0fc5dff13f8e045f30fc96a4928703/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=8f9f3aa04d0fc5dff13f8e045f30fc96a4928703", "patch": "@@ -672,6 +672,11 @@ impl<A: Step> Iterator for ops::Range<A> {\n         self.next_back()\n     }\n \n+    #[inline]\n+    fn is_sorted(self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n@@ -1095,6 +1100,11 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     fn max(mut self) -> Option<A> {\n         self.next_back()\n     }\n+\n+    #[inline]\n+    fn is_sorted(self) -> bool {\n+        true\n+    }\n }\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]"}]}