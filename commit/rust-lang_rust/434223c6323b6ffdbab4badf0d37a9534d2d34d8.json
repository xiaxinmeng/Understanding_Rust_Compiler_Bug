{"sha": "434223c6323b6ffdbab4badf0d37a9534d2d34d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNDIyM2M2MzIzYjZmZmRiYWI0YmFkZjBkMzdhOTUzNGQyZDM0ZDg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-26T14:04:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-26T14:04:37Z"}, "message": "Rollup merge of #87464 - camelid:rm-union-structhead, r=jyn514\n\nRemove unnecessary `structhead` parameter from `render_union`\n\n`structhead` is used for `render_struct` so that the logic for rendering\nstructs can be shared between struct variants and struct items. However,\n`render_union` is not used anywhere except for rendering union items, so\nits `structhead` parameter is unnecessary.", "tree": {"sha": "ce25605da8f99fa1d6203a5ece228251b863e147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce25605da8f99fa1d6203a5ece228251b863e147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/434223c6323b6ffdbab4badf0d37a9534d2d34d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg/sD1CRBK7hj4Ov3rIwAAjk0IAGhc0BJAuOIM9j0/wNZ+qCxr\nLWtN/yOTO0eB28ERQxrmp3Y4rI5L424ZHBiKk+dU/VuD8nZOXQsF9iNqBosvNHHj\nXKXIDbKFEaDfjBSIN1+bdf/QTxgt81M7dbONhKV07YvFlJd33Xy3PiiCoCWRxrFx\nCw/aqUtsz4S5uhuYkCupEqH+5AppKlWVj3Kgdm+HvCBy/UNCop3etDEU4k5EXUEt\nFf1cwGWNH6mmIelA54jalaZRb4HrCjuCCiuj0rRN3ZUral6ftwBYTzBTICqAiG2K\nYKOltoQJpGVTxj9HZjLsxH8RJfyxzJQhbcCHIgkuJn82LJWZASOTg2OTqXrWCo8=\n=aWDN\n-----END PGP SIGNATURE-----\n", "payload": "tree ce25605da8f99fa1d6203a5ece228251b863e147\nparent f9d00b4a7850ca3a5c710fec1debaf421b339718\nparent dbb978a3c6d0503d188f11bbd4e53aac74d98bda\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1627308277 +0200\ncommitter GitHub <noreply@github.com> 1627308277 +0200\n\nRollup merge of #87464 - camelid:rm-union-structhead, r=jyn514\n\nRemove unnecessary `structhead` parameter from `render_union`\n\n`structhead` is used for `render_struct` so that the logic for rendering\nstructs can be shared between struct variants and struct items. However,\n`render_union` is not used anywhere except for rendering union items, so\nits `structhead` parameter is unnecessary.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/434223c6323b6ffdbab4badf0d37a9534d2d34d8", "html_url": "https://github.com/rust-lang/rust/commit/434223c6323b6ffdbab4badf0d37a9534d2d34d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/434223c6323b6ffdbab4badf0d37a9534d2d34d8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d00b4a7850ca3a5c710fec1debaf421b339718", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d00b4a7850ca3a5c710fec1debaf421b339718", "html_url": "https://github.com/rust-lang/rust/commit/f9d00b4a7850ca3a5c710fec1debaf421b339718"}, {"sha": "dbb978a3c6d0503d188f11bbd4e53aac74d98bda", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb978a3c6d0503d188f11bbd4e53aac74d98bda", "html_url": "https://github.com/rust-lang/rust/commit/dbb978a3c6d0503d188f11bbd4e53aac74d98bda"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "83ad4f7097bdf625e5acc532037e41bcc2444553", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/434223c6323b6ffdbab4badf0d37a9534d2d34d8/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434223c6323b6ffdbab4badf0d37a9534d2d34d8/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=434223c6323b6ffdbab4badf0d37a9534d2d34d8", "patch": "@@ -888,7 +888,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust union\\\">\");\n         render_attributes_in_pre(w, it, \"\");\n-        render_union(w, it, Some(&s.generics), &s.fields, \"\", true, cx);\n+        render_union(w, it, Some(&s.generics), &s.fields, \"\", cx);\n         w.write_str(\"</pre>\")\n     });\n \n@@ -1380,14 +1380,12 @@ fn render_union(\n     g: Option<&clean::Generics>,\n     fields: &[clean::Item],\n     tab: &str,\n-    structhead: bool,\n     cx: &Context<'_>,\n ) {\n     write!(\n         w,\n-        \"{}{}{}\",\n+        \"{}union {}\",\n         it.visibility.print_with_space(it.def_id, cx),\n-        if structhead { \"union \" } else { \"\" },\n         it.name.as_ref().unwrap()\n     );\n     if let Some(g) = g {"}]}