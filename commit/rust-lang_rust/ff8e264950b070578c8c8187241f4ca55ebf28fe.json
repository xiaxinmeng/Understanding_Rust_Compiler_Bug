{"sha": "ff8e264950b070578c8c8187241f4ca55ebf28fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOGUyNjQ5NTBiMDcwNTc4YzhjODE4NzI0MWY0Y2E1NWViZjI4ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-08T10:43:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-08T10:43:45Z"}, "message": "Auto merge of #45012 - Gankro:noalias, r=arielb1\n\nAdd -Zmutable-noalias flag\n\nWe disabled noalias on mutable references a long time ago when it was clear that llvm was incorrectly handling this in relation to unwinding edges.\n\nSince then, a few things have happened:\n\n* llvm has cleaned up a bunch of the issues (I'm told)\n* we've added a nounwind codegen option\n\nAs such, I would like to add this -Z flag so that we can evaluate if the codegen bugs still exist, and if this significantly affects the codegen of different projects, with an eye towards permanently re-enabling it (or at least making it a stable option).", "tree": {"sha": "272142ab47edf6097f2544b9ad23f0f0091b1138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/272142ab47edf6097f2544b9ad23f0f0091b1138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff8e264950b070578c8c8187241f4ca55ebf28fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8e264950b070578c8c8187241f4ca55ebf28fe", "html_url": "https://github.com/rust-lang/rust/commit/ff8e264950b070578c8c8187241f4ca55ebf28fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff8e264950b070578c8c8187241f4ca55ebf28fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "108706f13a7e5e530ba4bbddf776d8ce71aec01f", "url": "https://api.github.com/repos/rust-lang/rust/commits/108706f13a7e5e530ba4bbddf776d8ce71aec01f", "html_url": "https://github.com/rust-lang/rust/commit/108706f13a7e5e530ba4bbddf776d8ce71aec01f"}, {"sha": "a6dea41d64a244c8f7671dd0eeb498b015c3a712", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6dea41d64a244c8f7671dd0eeb498b015c3a712", "html_url": "https://github.com/rust-lang/rust/commit/a6dea41d64a244c8f7671dd0eeb498b015c3a712"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "9ff52496dab7ec8adaf8b59344b817e250f37ebd", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff8e264950b070578c8c8187241f4ca55ebf28fe/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff8e264950b070578c8c8187241f4ca55ebf28fe/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ff8e264950b070578c8c8187241f4ca55ebf28fe", "patch": "@@ -1051,6 +1051,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"print the result of the translation item collection pass\"),\n     mir_opt_level: usize = (1, parse_uint, [TRACKED],\n           \"set the MIR optimization level (0-3, default: 1)\"),\n+    mutable_noalias: bool = (false, parse_bool, [UNTRACKED],\n+          \"emit noalias metadata for mutable references\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n           \"dump MIR state at various points in translation\"),\n     dump_mir_dir: Option<String> = (None, parse_opt_string, [UNTRACKED],"}, {"sha": "ee295bdf0b4c1ee0ebfbbe27bff047e603fdf7ad", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff8e264950b070578c8c8187241f4ca55ebf28fe/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff8e264950b070578c8c8187241f4ca55ebf28fe/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=ff8e264950b070578c8c8187241f4ca55ebf28fe", "patch": "@@ -37,6 +37,7 @@ use type_of;\n use rustc::hir;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, Layout, LayoutTyper, TyLayout, Size};\n+use rustc_back::PanicStrategy;\n \n use libc::c_uint;\n use std::cmp;\n@@ -760,7 +761,17 @@ impl<'a, 'tcx> FnType<'tcx> {\n                 // on memory dependencies rather than pointer equality\n                 let is_freeze = ccx.shared().type_is_freeze(mt.ty);\n \n-                if mt.mutbl != hir::MutMutable && is_freeze {\n+                let no_alias_is_safe =\n+                    if ccx.shared().tcx().sess.opts.debugging_opts.mutable_noalias ||\n+                       ccx.shared().tcx().sess.panic_strategy() == PanicStrategy::Abort {\n+                        // Mutable refrences or immutable shared references\n+                        mt.mutbl == hir::MutMutable || is_freeze\n+                    } else {\n+                        // Only immutable shared references\n+                        mt.mutbl != hir::MutMutable && is_freeze\n+                    };\n+\n+                if no_alias_is_safe {\n                     arg.attrs.set(ArgAttribute::NoAlias);\n                 }\n "}]}