{"sha": "aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYzlkNmVlZTlhMWUwYjI1NGJmNmUwMzVlMmUxNGU1MTA2NzU4YmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-28T01:45:13Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-28T02:09:27Z"}, "message": "librustc: Fix merge fallout", "tree": {"sha": "f17cd2853c7661f708058117b190b84f02025dc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f17cd2853c7661f708058117b190b84f02025dc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "html_url": "https://github.com/rust-lang/rust/commit/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd46e767c0fe5b6188df61cb9daf8f2e65a3ed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd46e767c0fe5b6188df61cb9daf8f2e65a3ed0", "html_url": "https://github.com/rust-lang/rust/commit/2bd46e767c0fe5b6188df61cb9daf8f2e65a3ed0"}], "stats": {"total": 111, "additions": 63, "deletions": 48}, "files": [{"sha": "08c04c6c8887e9c046c0b9991073385eecbe187c", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -2230,7 +2230,7 @@ Some examples of call expressions:\n # fn add(x: int, y: int) -> int { 0 }\n \n let x: int = add(1, 2);\n-let pi = FromStr::from_str::<f32>(\"3.14\");\n+let pi: Option<f32> = FromStr::from_str(\"3.14\");\n ~~~~\n \n ### Lambda expressions"}, {"sha": "5fd9690d9b0b32dbe0b5d94611e1d4f24db6a506", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -1169,8 +1169,8 @@ mod biguint_tests {\n     #[test]\n     fn test_shl() {\n         fn check(s: &str, shift: uint, ans: &str) {\n-            let bu = (FromStrRadix::from_str_radix::<BigUint>(s, 16).unwrap() << shift)\n-                .to_str_radix(16);\n+            let opt_biguint: Option<BigUint> = FromStrRadix::from_str_radix(s, 16);\n+            let bu = (opt_biguint.unwrap() << shift).to_str_radix(16);\n             assert_eq!(bu.as_slice(), ans);\n         }\n \n@@ -1207,8 +1207,9 @@ mod biguint_tests {\n     #[test]\n     fn test_shr() {\n         fn check(s: &str, shift: uint, ans: &str) {\n-            let bu = (FromStrRadix::from_str_radix::<BigUint>(s, 16).unwrap() >> shift)\n-                .to_str_radix(16);\n+            let opt_biguint: Option<BigUint> =\n+                FromStrRadix::from_str_radix(s, 16);\n+            let bu = (opt_biguint.unwrap() >> shift).to_str_radix(16);\n             assert_eq!(bu.as_slice(), ans);\n         }\n \n@@ -2015,16 +2016,16 @@ mod bench {\n     use extra::test::BenchHarness;\n \n     fn factorial(n: uint) -> BigUint {\n-        let mut f = One::one::<BigUint>();\n+        let mut f: BigUint = One::one();\n         for i in iterator::range_inclusive(1, n) {\n             f = f * BigUint::from_uint(i);\n         }\n         f\n     }\n \n     fn fib(n: uint) -> BigUint {\n-        let mut f0 = Zero::zero::<BigUint>();\n-        let mut f1 = One::one::<BigUint>();\n+        let mut f0: BigUint = Zero::zero();\n+        let mut f1: BigUint = One::one();\n         for _ in range(0, n) {\n             let f2 = f0 + f1;\n             f0 = util::replace(&mut f1, f2);"}, {"sha": "485a0aefe98294e5128dfc07406b59616da33617", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -23,7 +23,7 @@ use mc = middle::mem_categorization;\n use middle::borrowck::*;\n use middle::moves;\n use middle::ty;\n-use syntax::ast::m_mutbl;\n+use syntax::ast::{m_imm, m_mutbl};\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;\n@@ -488,7 +488,6 @@ impl<'self> CheckLoanCtxt<'self> {\n                     mc::cat_deref(_, _, mc::unsafe_ptr(*)) |\n                     mc::cat_static_item(*) |\n                     mc::cat_deref(_, _, mc::gc_ptr(_)) |\n-                    mc::cat_deref(_, _, mc::region_ptr(m_const, _)) |\n                     mc::cat_deref(_, _, mc::region_ptr(m_imm, _)) => {\n                         // Aliasability is independent of base cmt\n                         match cmt.freely_aliasable() {"}, {"sha": "7c81bfbda6512f209149fb3bc3a7c691a96eafa0", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -824,17 +824,16 @@ fn trans_def_datum_unadjusted(bcx: @mut Block,\n {\n     let _icx = push_ctxt(\"trans_def_datum_unadjusted\");\n \n-    match def {\n+    let fn_data = match def {\n         ast::def_fn(did, _) |\n         ast::def_static_method(did, ast::FromImpl(_), _) => {\n             callee::trans_fn_ref(bcx, did, ref_expr.id)\n         }\n         ast::def_static_method(impl_did, ast::FromTrait(trait_did), _) => {\n-            let fn_data = meth::trans_static_method_callee(bcx,\n-                                                           impl_did,\n-                                                           trait_did,\n-                                                           ref_expr.id);\n-            return fn_data_to_datum(bcx, ref_expr, impl_did, fn_data);\n+            meth::trans_static_method_callee(bcx,\n+                                             impl_did,\n+                                             trait_did,\n+                                             ref_expr.id)\n         }\n         _ => {\n             bcx.tcx().sess.span_bug(ref_expr.span, fmt!("}, {"sha": "f4e9c4d7c11b5aae208a71f72469b9040750a470", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -24,7 +24,7 @@ pub fn open<P: PathLike>(path: &P,\n                          access: FileAccess\n                         ) -> Option<FileStream> {\n     let open_result = unsafe {\n-        let io = Local::unsafe_borrow::<IoFactoryObject>();\n+        let io: *mut IoFactoryObject = Local::unsafe_borrow();\n         (*io).fs_open(path, mode, access)\n     };\n     match open_result {\n@@ -43,7 +43,7 @@ pub fn open<P: PathLike>(path: &P,\n /// by `path`.\n pub fn unlink<P: PathLike>(path: &P) {\n     let unlink_result = unsafe {\n-        let io = Local::unsafe_borrow::<IoFactoryObject>();\n+        let io: *mut IoFactoryObject = Local::unsafe_borrow();\n         (*io).fs_unlink(path)\n     };\n     match unlink_result {"}, {"sha": "d4f31879c003a01bd49bde2617f33727bbbafe37", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -107,7 +107,7 @@ impl Local for Scheduler {\n     }\n     unsafe fn try_unsafe_borrow() -> Option<*mut Scheduler> {\n         let task_opt: Option<*mut Task> = Local::try_unsafe_borrow();\n-        match Local::try_unsafe_borrow::<Task>() {\n+        match task_opt {\n             Some(task) => {\n                 match (*task).sched {\n                     Some(~ref mut sched) => {"}, {"sha": "b393832871dd7dae2074f028d5fafea4c8fa612c", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -175,7 +175,7 @@ impl Scheduler {\n         sched.run();\n \n         // Close the idle callback.\n-        let mut sched = Local::take::<Scheduler>();\n+        let mut sched: ~Scheduler = Local::take();\n         sched.idle_callback.get_mut_ref().close();\n         // Make one go through the loop to run the close callback.\n         sched.run();\n@@ -581,7 +581,7 @@ impl Scheduler {\n         // run the cleanup job, as expected by the previously called\n         // swap_contexts function.\n         unsafe {\n-            let task: *mut Task = Local::unsafe_borrow::<Task>();\n+            let task: *mut Task = Local::unsafe_borrow();\n             (*task).sched.get_mut_ref().run_cleanup_job();\n \n             // Must happen after running the cleanup job (of course)."}, {"sha": "e620ab274b1ed238737f1a63625db5d935463caa", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -92,7 +92,7 @@ trait HomingIO {\n             // go home\n             let old_home = Cell::new_empty();\n             let old_home_ptr = &old_home;\n-            let scheduler = Local::take::<Scheduler>();\n+            let scheduler: ~Scheduler = Local::take();\n             do scheduler.deschedule_running_task_and_then |_, task| {\n                 // get the old home first\n                 do task.wake().map_move |mut task| {\n@@ -102,11 +102,11 @@ trait HomingIO {\n             }\n \n             // do IO\n-            let scheduler = Local::take::<Scheduler>();\n+            let scheduler: ~Scheduler = Local::take();\n             let a = io_sched(self, scheduler);\n \n             // unhome home\n-            let scheduler = Local::take::<Scheduler>();\n+            let scheduler: ~Scheduler = Local::take();\n             do scheduler.deschedule_running_task_and_then |scheduler, task| {\n                 do task.wake().map_move |mut task| {\n                     task.give_home(old_home.take());\n@@ -442,7 +442,7 @@ impl IoFactory for UvIoFactory {\n                             do stream.close {\n                                 let res = Err(uv_error_to_io_error(status.unwrap()));\n                                 unsafe { (*result_cell_ptr).put_back(res); }\n-                                let scheduler = Local::take::<Scheduler>();\n+                                let scheduler: ~Scheduler = Local::take();\n                                 scheduler.resume_blocked_task_immediately(task_cell.take());\n                             }\n                         }\n@@ -539,7 +539,7 @@ impl IoFactory for UvIoFactory {\n                                            IoError>> = &result_cell;\n         let path_cell = Cell::new(path);\n         do task::unkillable { // FIXME(#8674)\n-            let scheduler = Local::take::<Scheduler>();\n+            let scheduler: ~Scheduler = Local::take();\n             do scheduler.deschedule_running_task_and_then |_, task| {\n                 let task_cell = Cell::new(task);\n                 let path = path_cell.take();\n@@ -553,12 +553,12 @@ impl IoFactory for UvIoFactory {\n                             loop_, fd, true, home) as ~RtioFileStream;\n                         let res = Ok(fs);\n                         unsafe { (*result_cell_ptr).put_back(res); }\n-                        let scheduler = Local::take::<Scheduler>();\n+                        let scheduler: ~Scheduler = Local::take();\n                         scheduler.resume_blocked_task_immediately(task_cell.take());\n                     } else {\n                         let res = Err(uv_error_to_io_error(err.unwrap()));\n                         unsafe { (*result_cell_ptr).put_back(res); }\n-                        let scheduler = Local::take::<Scheduler>();\n+                        let scheduler: ~Scheduler = Local::take();\n                         scheduler.resume_blocked_task_immediately(task_cell.take());\n                     }\n                 };\n@@ -573,7 +573,7 @@ impl IoFactory for UvIoFactory {\n         let result_cell_ptr: *Cell<Result<(), IoError>> = &result_cell;\n         let path_cell = Cell::new(path);\n         do task::unkillable { // FIXME(#8674)\n-            let scheduler = Local::take::<Scheduler>();\n+            let scheduler: ~Scheduler = Local::take();\n             do scheduler.deschedule_running_task_and_then |_, task| {\n                 let task_cell = Cell::new(task);\n                 let path = path_cell.take();\n@@ -583,7 +583,7 @@ impl IoFactory for UvIoFactory {\n                         Some(err) => Err(uv_error_to_io_error(err))\n                     };\n                     unsafe { (*result_cell_ptr).put_back(res); }\n-                    let scheduler = Local::take::<Scheduler>();\n+                    let scheduler: ~Scheduler = Local::take();\n                     scheduler.resume_blocked_task_immediately(task_cell.take());\n                 };\n             };\n@@ -1154,7 +1154,7 @@ impl UvFileStream {\n                         Some(err) => Err(uv_error_to_io_error(err))\n                     };\n                     unsafe { (*result_cell_ptr).put_back(res); }\n-                    let scheduler = Local::take::<Scheduler>();\n+                    let scheduler: ~Scheduler = Local::take();\n                     scheduler.resume_blocked_task_immediately(task_cell.take());\n                 };\n             };\n@@ -1175,7 +1175,7 @@ impl UvFileStream {\n                         Some(err) => Err(uv_error_to_io_error(err))\n                     };\n                     unsafe { (*result_cell_ptr).put_back(res); }\n-                    let scheduler = Local::take::<Scheduler>();\n+                    let scheduler: ~Scheduler = Local::take();\n                     scheduler.resume_blocked_task_immediately(task_cell.take());\n                 };\n             };\n@@ -1208,7 +1208,7 @@ impl Drop for UvFileStream {\n                 do scheduler.deschedule_running_task_and_then |_, task| {\n                     let task_cell = Cell::new(task);\n                     do self_.fd.close(&self.loop_) |_,_| {\n-                        let scheduler = Local::take::<Scheduler>();\n+                        let scheduler: ~Scheduler = Local::take();\n                         scheduler.resume_blocked_task_immediately(task_cell.take());\n                     };\n                 };\n@@ -1776,7 +1776,7 @@ fn file_test_uvio_full_simple_impl() {\n     use path::Path;\n     use rt::io::{Open, Create, ReadWrite, Read};\n     unsafe {\n-        let io = Local::unsafe_borrow::<IoFactoryObject>();\n+        let io: *mut IoFactoryObject = Local::unsafe_borrow();\n         let write_val = \"hello uvio!\";\n         let path = \"./tmp/file_test_uvio_full.txt\";\n         {\n@@ -1810,7 +1810,7 @@ fn uvio_naive_print(input: &str) {\n     use str::StrSlice;\n     unsafe {\n         use libc::{STDOUT_FILENO};\n-        let io = Local::unsafe_borrow::<IoFactoryObject>();\n+        let io: *mut IoFactoryObject = Local::unsafe_borrow();\n         {\n             let mut fd = (*io).fs_from_raw_fd(STDOUT_FILENO, false);\n             let write_buf = input.as_bytes();"}, {"sha": "2571d60145906db1d20da9a6723e14d1979c15a0", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -121,54 +121,54 @@ fn main() {\n     io::println(\"\\nTreeMap:\");\n \n     {\n-        let mut map = TreeMap::new::<uint, uint>();\n+        let mut map: TreeMap<uint,uint> = TreeMap::new();\n         ascending(&mut map, n_keys);\n     }\n \n     {\n-        let mut map = TreeMap::new::<uint, uint>();\n+        let mut map: TreeMap<uint,uint> = TreeMap::new();\n         descending(&mut map, n_keys);\n     }\n \n     {\n         io::println(\" Random integers:\");\n-        let mut map = TreeMap::new::<uint, uint>();\n+        let mut map: TreeMap<uint,uint> = TreeMap::new();\n         vector(&mut map, n_keys, rand);\n     }\n \n     io::println(\"\\nHashMap:\");\n \n     {\n-        let mut map = HashMap::new::<uint, uint>();\n+        let mut map: HashMap<uint,uint> = HashMap::new();\n         ascending(&mut map, n_keys);\n     }\n \n     {\n-        let mut map = HashMap::new::<uint, uint>();\n+        let mut map: HashMap<uint,uint> = HashMap::new();\n         descending(&mut map, n_keys);\n     }\n \n     {\n         io::println(\" Random integers:\");\n-        let mut map = HashMap::new::<uint, uint>();\n+        let mut map: HashMap<uint,uint> = HashMap::new();\n         vector(&mut map, n_keys, rand);\n     }\n \n     io::println(\"\\nTrieMap:\");\n \n     {\n-        let mut map = TrieMap::new::<uint>();\n+        let mut map: TrieMap<uint> = TrieMap::new();\n         ascending(&mut map, n_keys);\n     }\n \n     {\n-        let mut map = TrieMap::new::<uint>();\n+        let mut map: TrieMap<uint> = TrieMap::new();\n         descending(&mut map, n_keys);\n     }\n \n     {\n         io::println(\" Random integers:\");\n-        let mut map = TrieMap::new::<uint>();\n+        let mut map: TrieMap<uint> = TrieMap::new();\n         vector(&mut map, n_keys, rand);\n     }\n }"}, {"sha": "fe77196e2b101512fc89c03a178e9d882b29572c", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -169,16 +169,28 @@ fn main() {\n     {\n         let mut rng = rand::IsaacRng::new_seeded(seed);\n         let mut results = empty_results();\n-        results.bench_int(&mut rng, num_keys, max, || HashSet::new::<uint>());\n-        results.bench_str(&mut rng, num_keys, || HashSet::new::<~str>());\n+        results.bench_int(&mut rng, num_keys, max, || {\n+            let s: HashSet<uint> = HashSet::new();\n+            s\n+        });\n+        results.bench_str(&mut rng, num_keys, || {\n+            let s: HashSet<~str> = HashSet::new();\n+            s\n+        });\n         write_results(\"std::hashmap::HashSet\", &results);\n     }\n \n     {\n         let mut rng = rand::IsaacRng::new_seeded(seed);\n         let mut results = empty_results();\n-        results.bench_int(&mut rng, num_keys, max, || TreeSet::new::<uint>());\n-        results.bench_str(&mut rng, num_keys, || TreeSet::new::<~str>());\n+        results.bench_int(&mut rng, num_keys, max, || {\n+            let s: TreeSet<uint> = TreeSet::new();\n+            s\n+        });\n+        results.bench_str(&mut rng, num_keys, || {\n+            let s: TreeSet<~str> = TreeSet::new();\n+            s\n+        });\n         write_results(\"extra::treemap::TreeSet\", &results);\n     }\n "}, {"sha": "baef20944f7047a0fbc825b0bd3be85286f74f35", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-header.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -1,3 +1,5 @@\n+// xfail-pretty\n+\n // Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "a4510ef70e1b257b1db70f9dbcddf21b79801084", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac9d6eee9a1e0b254bf6e035e2e14e5106758bd/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=aac9d6eee9a1e0b254bf6e035e2e14e5106758bd", "patch": "@@ -1,3 +1,5 @@\n+// xfail-pretty\n+\n // Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}]}