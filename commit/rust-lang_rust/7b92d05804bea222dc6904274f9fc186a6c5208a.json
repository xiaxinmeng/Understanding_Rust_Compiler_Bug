{"sha": "7b92d05804bea222dc6904274f9fc186a6c5208a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOTJkMDU4MDRiZWEyMjJkYzY5MDQyNzRmOWZjMTg2YTZjNTIwOGE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-09-01T10:34:56Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-09-01T10:34:56Z"}, "message": "turn the RFC1592 warnings into hard errors\n\nThe warnings have already reached stable\n\nThe test rfc1592_deprecated is covered by `bad_sized` and\n`unsized6`.\n\nFixes #33242\nFixes #33243", "tree": {"sha": "762113fdb6a10ddeeb93482a784b1aafe55214da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/762113fdb6a10ddeeb93482a784b1aafe55214da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b92d05804bea222dc6904274f9fc186a6c5208a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b92d05804bea222dc6904274f9fc186a6c5208a", "html_url": "https://github.com/rust-lang/rust/commit/7b92d05804bea222dc6904274f9fc186a6c5208a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b92d05804bea222dc6904274f9fc186a6c5208a/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a187c39c79e21cd61d1688d449bdd52d7510281", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a187c39c79e21cd61d1688d449bdd52d7510281", "html_url": "https://github.com/rust-lang/rust/commit/7a187c39c79e21cd61d1688d449bdd52d7510281"}], "stats": {"total": 364, "additions": 50, "deletions": 314}, "files": [{"sha": "ed94e5fe377c495165a21de8a6949c4458fe4b29", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -186,18 +186,6 @@ declare_lint! {\n     \"detects super or self keywords at the beginning of global path\"\n }\n \n-declare_lint! {\n-    pub UNSIZED_IN_TUPLE,\n-    Warn,\n-    \"unsized types in the interior of a tuple were erroneously allowed\"\n-}\n-\n-declare_lint! {\n-    pub OBJECT_UNSAFE_FRAGMENT,\n-    Warn,\n-    \"object-unsafe non-principal fragments in object types were erroneously allowed\"\n-}\n-\n declare_lint! {\n     pub LIFETIME_UNDERSCORE,\n     Warn,\n@@ -239,8 +227,6 @@ impl LintPass for HardwiredLints {\n             OVERLAPPING_INHERENT_IMPLS,\n             RENAMED_AND_REMOVED_LINTS,\n             SUPER_OR_SELF_IN_GLOBAL_PATH,\n-            UNSIZED_IN_TUPLE,\n-            OBJECT_UNSAFE_FRAGMENT,\n             HR_LIFETIME_IN_ASSOC_TYPE,\n             LIFETIME_UNDERSCORE\n         )"}, {"sha": "bd35bfc9829a5c08541a83d35585a706f7f873ce", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -55,7 +55,6 @@ impl FreeRegionMap {\n             match *predicate {\n                 ty::Predicate::Projection(..) |\n                 ty::Predicate::Trait(..) |\n-                ty::Predicate::Rfc1592(..) |\n                 ty::Predicate::Equate(..) |\n                 ty::Predicate::WellFormed(..) |\n                 ty::Predicate::ObjectSafe(..) |"}, {"sha": "6d6d7c2b3ba0a830e0237e6e44a9c41d1aeeeba5", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 25, "deletions": 97, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -36,50 +36,37 @@ use util::nodemap::{FnvHashMap, FnvHashSet};\n \n use std::cmp;\n use std::fmt;\n-use syntax::ast;\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n \n #[derive(Debug, PartialEq, Eq, Hash)]\n pub struct TraitErrorKey<'tcx> {\n     span: Span,\n-    warning_node_id: Option<ast::NodeId>,\n     predicate: ty::Predicate<'tcx>\n }\n \n impl<'a, 'gcx, 'tcx> TraitErrorKey<'tcx> {\n     fn from_error(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-                  e: &FulfillmentError<'tcx>,\n-                  warning_node_id: Option<ast::NodeId>) -> Self {\n+                  e: &FulfillmentError<'tcx>) -> Self {\n         let predicate =\n             infcx.resolve_type_vars_if_possible(&e.obligation.predicate);\n         TraitErrorKey {\n             span: e.obligation.cause.span,\n-            predicate: infcx.tcx.erase_regions(&predicate),\n-            warning_node_id: warning_node_id\n+            predicate: infcx.tcx.erase_regions(&predicate)\n         }\n     }\n }\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_fulfillment_errors(&self, errors: &Vec<FulfillmentError<'tcx>>) {\n         for error in errors {\n-            self.report_fulfillment_error(error, None);\n-        }\n-    }\n-\n-    pub fn report_fulfillment_errors_as_warnings(&self,\n-                                                 errors: &Vec<FulfillmentError<'tcx>>,\n-                                                 node_id: ast::NodeId) {\n-        for error in errors {\n-            self.report_fulfillment_error(error, Some(node_id));\n+            self.report_fulfillment_error(error);\n         }\n     }\n \n     fn report_fulfillment_error(&self,\n-                                error: &FulfillmentError<'tcx>,\n-                                warning_node_id: Option<ast::NodeId>) {\n-        let error_key = TraitErrorKey::from_error(self, error, warning_node_id);\n+                                error: &FulfillmentError<'tcx>) {\n+        let error_key = TraitErrorKey::from_error(self, error);\n         debug!(\"report_fulfillment_errors({:?}) - key={:?}\",\n                error, error_key);\n         if !self.reported_trait_errors.borrow_mut().insert(error_key) {\n@@ -88,10 +75,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n         match error.code {\n             FulfillmentErrorCode::CodeSelectionError(ref e) => {\n-                self.report_selection_error(&error.obligation, e, warning_node_id);\n+                self.report_selection_error(&error.obligation, e);\n             }\n             FulfillmentErrorCode::CodeProjectionError(ref e) => {\n-                self.report_projection_error(&error.obligation, e, warning_node_id);\n+                self.report_projection_error(&error.obligation, e);\n             }\n             FulfillmentErrorCode::CodeAmbiguity => {\n                 self.maybe_report_ambiguity(&error.obligation);\n@@ -101,25 +88,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     fn report_projection_error(&self,\n                                obligation: &PredicateObligation<'tcx>,\n-                               error: &MismatchedProjectionTypes<'tcx>,\n-                               warning_node_id: Option<ast::NodeId>)\n+                               error: &MismatchedProjectionTypes<'tcx>)\n     {\n         let predicate =\n             self.resolve_type_vars_if_possible(&obligation.predicate);\n \n         if predicate.references_error() {\n             return\n         }\n-        if let Some(warning_node_id) = warning_node_id {\n-            self.tcx.sess.add_lint(\n-                ::lint::builtin::UNSIZED_IN_TUPLE,\n-                warning_node_id,\n-                obligation.cause.span,\n-                format!(\"type mismatch resolving `{}`: {}\",\n-                        predicate,\n-                        error.err));\n-            return\n-        }\n+\n         self.probe(|_| {\n             let origin = TypeOrigin::Misc(obligation.cause.span);\n             let err_buf;\n@@ -442,8 +419,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn report_selection_error(&self,\n                                   obligation: &PredicateObligation<'tcx>,\n-                                  error: &SelectionError<'tcx>,\n-                                  warning_node_id: Option<ast::NodeId>)\n+                                  error: &SelectionError<'tcx>)\n     {\n         let span = obligation.cause.span;\n         let mut err = match *error {\n@@ -466,16 +442,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             } else {\n                                 let trait_ref = trait_predicate.to_poly_trait_ref();\n \n-                                if let Some(warning_node_id) = warning_node_id {\n-                                    self.tcx.sess.add_lint(\n-                                        ::lint::builtin::UNSIZED_IN_TUPLE,\n-                                        warning_node_id,\n-                                        obligation.cause.span,\n-                                        format!(\"the trait bound `{}` is not satisfied\",\n-                                                trait_ref.to_predicate()));\n-                                    return;\n-                                }\n-\n                                 let mut err = struct_span_err!(self.tcx.sess, span, E0277,\n                                     \"the trait bound `{}` is not satisfied\",\n                                     trait_ref.to_predicate());\n@@ -541,15 +507,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n                         ty::Predicate::ObjectSafe(trait_def_id) => {\n                             let violations = self.tcx.object_safety_violations(trait_def_id);\n-                            let err = self.tcx.report_object_safety_error(span,\n-                                                                          trait_def_id,\n-                                                                          warning_node_id,\n-                                                                          violations);\n-                            if let Some(err) = err {\n-                                err\n-                            } else {\n-                                return;\n-                            }\n+                            self.tcx.report_object_safety_error(span,\n+                                                                trait_def_id,\n+                                                                violations)\n                         }\n \n                         ty::Predicate::ClosureKind(closure_def_id, kind) => {\n@@ -577,13 +537,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             // (which may fail).\n                             span_bug!(span, \"WF predicate not satisfied for {:?}\", ty);\n                         }\n-\n-                        ty::Predicate::Rfc1592(ref data) => {\n-                            span_bug!(\n-                                obligation.cause.span,\n-                                \"RFC1592 predicate not satisfied for {:?}\",\n-                                data);\n-                        }\n                     }\n                 }\n             }\n@@ -605,14 +558,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n             TraitNotObjectSafe(did) => {\n                 let violations = self.tcx.object_safety_violations(did);\n-                let err = self.tcx.report_object_safety_error(span, did,\n-                                                              warning_node_id,\n-                                                              violations);\n-                if let Some(err) = err {\n-                    err\n-                } else {\n-                    return;\n-                }\n+                self.tcx.report_object_safety_error(span, did,\n+                                                    violations)\n             }\n         };\n         self.note_obligation_cause(&mut err, obligation);\n@@ -640,24 +587,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_object_safety_error(self,\n                                       span: Span,\n                                       trait_def_id: DefId,\n-                                      warning_node_id: Option<ast::NodeId>,\n                                       violations: Vec<ObjectSafetyViolation>)\n-                                      -> Option<DiagnosticBuilder<'tcx>>\n+                                      -> DiagnosticBuilder<'tcx>\n     {\n-        let mut err = match warning_node_id {\n-            Some(_) => None,\n-            None => {\n-                let trait_str = self.item_path_str(trait_def_id);\n-                let mut db = struct_span_err!(\n-                            self.sess, span, E0038,\n-                            \"the trait `{}` cannot be made into an object\",\n-                            trait_str);\n-                db.span_label(span,\n-                              &format!(\"the trait `{}` cannot be made \\\n-                              into an object\", trait_str));\n-                Some(db)\n-            }\n-        };\n+        let trait_str = self.item_path_str(trait_def_id);\n+        let mut err = struct_span_err!(\n+            self.sess, span, E0038,\n+            \"the trait `{}` cannot be made into an object\",\n+            trait_str);\n+        err.span_label(span, &format!(\n+            \"the trait `{}` cannot be made into an object\", trait_str\n+        ));\n \n         let mut reported_violations = FnvHashSet();\n         for violation in violations {\n@@ -697,19 +637,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     &buf\n                 }\n             };\n-            match (warning_node_id, &mut err) {\n-                (Some(node_id), &mut None) => {\n-                    self.sess.add_lint(\n-                        ::lint::builtin::OBJECT_UNSAFE_FRAGMENT,\n-                        node_id,\n-                        span,\n-                        note.to_string());\n-                }\n-                (None, &mut Some(ref mut err)) => {\n-                    err.note(note);\n-                }\n-                _ => unreachable!()\n-            }\n+            err.note(note);\n         }\n         err\n     }"}, {"sha": "65860671c4c636c331fd87d56525a9489966b60a", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -57,9 +57,6 @@ pub struct FulfillmentContext<'tcx> {\n     // fulfillment context.\n     predicates: ObligationForest<PendingPredicateObligation<'tcx>>,\n \n-    // A list of new obligations due to RFC1592.\n-    rfc1592_obligations: Vec<PredicateObligation<'tcx>>,\n-\n     // A set of constraints that regionck must validate. Each\n     // constraint has the form `T:'a`, meaning \"some type `T` must\n     // outlive the lifetime 'a\". These constraints derive from\n@@ -192,7 +189,6 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n     pub fn new() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             predicates: ObligationForest::new(),\n-            rfc1592_obligations: Vec::new(),\n             region_obligations: NodeMap(),\n             deferred_obligations: vec![],\n         }\n@@ -275,13 +271,6 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n         });\n     }\n \n-    pub fn register_rfc1592_obligation(&mut self,\n-                                       _infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-                                       obligation: PredicateObligation<'tcx>)\n-    {\n-        self.rfc1592_obligations.push(obligation);\n-    }\n-\n     pub fn region_obligations(&self,\n                               body_id: ast::NodeId)\n                               -> &[RegionObligation<'tcx>]\n@@ -292,21 +281,6 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n         }\n     }\n \n-    pub fn select_rfc1592_obligations(&mut self,\n-                                      infcx: &InferCtxt<'a, 'gcx, 'tcx>)\n-                                      -> Result<(),Vec<FulfillmentError<'tcx>>>\n-    {\n-        while !self.rfc1592_obligations.is_empty() {\n-            for obligation in mem::replace(&mut self.rfc1592_obligations, Vec::new()) {\n-                self.register_predicate_obligation(infcx, obligation);\n-            }\n-\n-            self.select_all_or_error(infcx)?;\n-        }\n-\n-        Ok(())\n-    }\n-\n     pub fn select_all_or_error(&mut self,\n                                infcx: &InferCtxt<'a, 'gcx, 'tcx>)\n                                -> Result<(),Vec<FulfillmentError<'tcx>>>\n@@ -362,7 +336,6 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n             let outcome = self.predicates.process_obligations(&mut FulfillProcessor {\n                 selcx: selcx,\n                 region_obligations: &mut self.region_obligations,\n-                rfc1592_obligations: &mut self.rfc1592_obligations,\n                 deferred_obligations: &mut self.deferred_obligations\n             });\n             debug!(\"select: outcome={:?}\", outcome);\n@@ -398,7 +371,6 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n struct FulfillProcessor<'a, 'b: 'a, 'gcx: 'tcx, 'tcx: 'b> {\n     selcx: &'a mut SelectionContext<'b, 'gcx, 'tcx>,\n     region_obligations: &'a mut NodeMap<Vec<RegionObligation<'tcx>>>,\n-    rfc1592_obligations: &'a mut Vec<PredicateObligation<'tcx>>,\n     deferred_obligations: &'a mut Vec<DeferredObligation<'tcx>>\n }\n \n@@ -413,7 +385,6 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n         process_predicate(self.selcx,\n                           obligation,\n                           self.region_obligations,\n-                          self.rfc1592_obligations,\n                           self.deferred_obligations)\n             .map(|os| os.map(|os| os.into_iter().map(|o| PendingPredicateObligation {\n                 obligation: o,\n@@ -455,7 +426,6 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n     selcx: &mut SelectionContext<'a, 'gcx, 'tcx>,\n     pending_obligation: &mut PendingPredicateObligation<'tcx>,\n     region_obligations: &mut NodeMap<Vec<RegionObligation<'tcx>>>,\n-    rfc1592_obligations: &mut Vec<PredicateObligation<'tcx>>,\n     deferred_obligations: &mut Vec<DeferredObligation<'tcx>>)\n     -> Result<Option<Vec<PredicateObligation<'tcx>>>,\n               FulfillmentErrorCode<'tcx>>\n@@ -644,14 +614,6 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                 s => Ok(s)\n             }\n         }\n-\n-        ty::Predicate::Rfc1592(ref inner) => {\n-            rfc1592_obligations.push(PredicateObligation {\n-                predicate: ty::Predicate::clone(inner),\n-                ..obligation.clone()\n-            });\n-            Ok(Some(vec![]))\n-        }\n     }\n }\n "}, {"sha": "5f7b71518291a1f932729f690d1975ea9c4c5a37", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -153,7 +153,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::TypeOutlives(..) |\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::ClosureKind(..) |\n-                    ty::Predicate::Rfc1592(..) |\n                     ty::Predicate::Equate(..) => {\n                         false\n                     }\n@@ -184,7 +183,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::Trait(..) |\n-                    ty::Predicate::Rfc1592(..) |\n                     ty::Predicate::Equate(..) |\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::WellFormed(..) |"}, {"sha": "0573f0c5bbaa0b144b49ce6ad7b2e1f0a4e090fc", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -513,8 +513,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n \n         match obligation.predicate {\n-            ty::Predicate::Rfc1592(..) => EvaluatedToOk,\n-\n             ty::Predicate::Trait(ref t) => {\n                 assert!(!t.has_escaping_regions());\n                 let obligation = obligation.with(t.clone());\n@@ -1779,8 +1777,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::TyStr | ty::TySlice(_) | ty::TyTrait(..) => Never,\n \n             ty::TyTuple(tys) => {\n-                // FIXME(#33242) we only need to constrain the last field\n-                Where(ty::Binder(tys.to_vec()))\n+                Where(ty::Binder(tys.last().into_iter().cloned().collect()))\n             }\n \n             ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n@@ -2508,12 +2505,11 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n             // T -> Trait.\n             (_, &ty::TyTrait(ref data)) => {\n-                let mut object_dids = Some(data.principal.def_id()).into_iter();\n-                // FIXME(#33243)\n-//                    data.builtin_bounds.iter().flat_map(|bound| {\n-//                        tcx.lang_items.from_builtin_kind(bound).ok()\n-//                    })\n-//                    .chain(Some(data.principal.def_id()));\n+                let mut object_dids =\n+                    data.builtin_bounds.iter().flat_map(|bound| {\n+                        tcx.lang_items.from_builtin_kind(bound).ok()\n+                    })\n+                    .chain(Some(data.principal.def_id()));\n                 if let Some(did) = object_dids.find(|did| {\n                     !tcx.is_object_safe(*did)\n                 }) {"}, {"sha": "2cefc2ad79646730cc9b9e07e3cc7be784fc6680", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -23,9 +23,6 @@ fn anonymize_predicate<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::Predicate::Trait(ref data) =>\n             ty::Predicate::Trait(tcx.anonymize_late_bound_regions(data)),\n \n-        ty::Predicate::Rfc1592(ref data) =>\n-            ty::Predicate::Rfc1592(Box::new(anonymize_predicate(tcx, data))),\n-\n         ty::Predicate::Equate(ref data) =>\n             ty::Predicate::Equate(tcx.anonymize_late_bound_regions(data)),\n \n@@ -150,9 +147,6 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n \n                 self.stack.extend(predicates);\n             }\n-            ty::Predicate::Rfc1592(..) => {\n-                // Nothing to elaborate.\n-            }\n             ty::Predicate::WellFormed(..) => {\n                 // Currently, we do not elaborate WF predicates,\n                 // although we easily could."}, {"sha": "09420077a8abfa7c42463156cd837bfe7d6f2133", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -804,9 +804,6 @@ pub enum Predicate<'tcx> {\n     /// would be the type parameters.\n     Trait(PolyTraitPredicate<'tcx>),\n \n-    /// A predicate created by RFC1592\n-    Rfc1592(Box<Predicate<'tcx>>),\n-\n     /// where `T1 == T2`.\n     Equate(PolyEquatePredicate<'tcx>),\n \n@@ -906,8 +903,6 @@ impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n         match *self {\n             Predicate::Trait(ty::Binder(ref data)) =>\n                 Predicate::Trait(ty::Binder(data.subst(tcx, substs))),\n-            Predicate::Rfc1592(ref pi) =>\n-                Predicate::Rfc1592(Box::new(pi.subst_supertrait(tcx, trait_ref))),\n             Predicate::Equate(ty::Binder(ref data)) =>\n                 Predicate::Equate(ty::Binder(data.subst(tcx, substs))),\n             Predicate::RegionOutlives(ty::Binder(ref data)) =>\n@@ -1108,9 +1103,6 @@ impl<'tcx> Predicate<'tcx> {\n             ty::Predicate::Trait(ref data) => {\n                 data.skip_binder().input_types().collect()\n             }\n-            ty::Predicate::Rfc1592(ref data) => {\n-                return data.walk_tys()\n-            }\n             ty::Predicate::Equate(ty::Binder(ref data)) => {\n                 vec![data.0, data.1]\n             }\n@@ -1148,7 +1140,6 @@ impl<'tcx> Predicate<'tcx> {\n             Predicate::Trait(ref t) => {\n                 Some(t.to_poly_trait_ref())\n             }\n-            Predicate::Rfc1592(..) |\n             Predicate::Projection(..) |\n             Predicate::Equate(..) |\n             Predicate::RegionOutlives(..) |\n@@ -1820,10 +1811,10 @@ impl<'a, 'tcx> AdtDefData<'tcx, 'tcx> {\n             }\n \n             TyTuple(ref tys) => {\n-                // FIXME(#33242) we only need to constrain the last field\n-                tys.iter().flat_map(|ty| {\n-                    self.sized_constraint_for_ty(tcx, stack, ty)\n-                }).collect()\n+                match tys.last() {\n+                    None => vec![],\n+                    Some(ty) => self.sized_constraint_for_ty(tcx, stack, ty)\n+                }\n             }\n \n             TyEnum(adt, substs) | TyStruct(adt, substs) => {"}, {"sha": "ad3769605abd90023b76362cc4ce16e5a504cb9c", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -178,9 +178,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n             ty::Predicate::WellFormed(ty) => {\n                 tcx.lift(&ty).map(ty::Predicate::WellFormed)\n             }\n-            ty::Predicate::Rfc1592(box ref a) => {\n-                tcx.lift(a).map(|a| ty::Predicate::Rfc1592(Box::new(a)))\n-            }\n             ty::Predicate::ClosureKind(closure_def_id, kind) => {\n                 Some(ty::Predicate::ClosureKind(closure_def_id, kind))\n             }\n@@ -790,8 +787,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n         match *self {\n             ty::Predicate::Trait(ref a) =>\n                 ty::Predicate::Trait(a.fold_with(folder)),\n-            ty::Predicate::Rfc1592(ref a) =>\n-                ty::Predicate::Rfc1592(a.fold_with(folder)),\n             ty::Predicate::Equate(ref binder) =>\n                 ty::Predicate::Equate(binder.fold_with(folder)),\n             ty::Predicate::RegionOutlives(ref binder) =>\n@@ -812,7 +807,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n             ty::Predicate::Trait(ref a) => a.visit_with(visitor),\n-            ty::Predicate::Rfc1592(ref a) => a.visit_with(visitor),\n             ty::Predicate::Equate(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::RegionOutlives(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::TypeOutlives(ref binder) => binder.visit_with(visitor),"}, {"sha": "77d16287fedc6d5296f2c0063419f29d23d77d73", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -318,7 +318,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 match predicate {\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::Trait(..) |\n-                    ty::Predicate::Rfc1592(..) |\n                     ty::Predicate::Equate(..) |\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |"}, {"sha": "aef646a7aacafdfda6ab9be099be93e046d2342f", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -94,9 +94,6 @@ pub fn predicate_obligations<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n         }\n         ty::Predicate::ClosureKind(..) => {\n         }\n-        ty::Predicate::Rfc1592(ref data) => {\n-            bug!(\"RFC1592 predicate `{:?}` in predicate_obligations\", data);\n-        }\n     }\n \n     wf.normalize()\n@@ -158,7 +155,6 @@ pub fn implied_bounds<'a, 'gcx, 'tcx>(\n                 assert!(!obligation.has_escaping_regions());\n                 match obligation.predicate {\n                     ty::Predicate::Trait(..) |\n-                    ty::Predicate::Rfc1592(..) |\n                     ty::Predicate::Equate(..) |\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::ClosureKind(..) |\n@@ -282,21 +278,14 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>,\n-                     rfc1592: bool) {\n+    fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_regions() {\n             let cause = self.cause(cause);\n             match self.infcx.tcx.trait_ref_for_builtin_bound(ty::BoundSized, subty) {\n                 Ok(trait_ref) => {\n-                    let predicate = trait_ref.to_predicate();\n-                    let predicate = if rfc1592 {\n-                        ty::Predicate::Rfc1592(box predicate)\n-                    } else {\n-                        predicate\n-                    };\n                     self.out.push(\n                         traits::Obligation::new(cause,\n-                                                predicate));\n+                                                trait_ref.to_predicate()));\n                 }\n                 Err(ErrorReported) => { }\n             }\n@@ -326,13 +315,13 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n \n                 ty::TySlice(subty) |\n                 ty::TyArray(subty, _) => {\n-                    self.require_sized(subty, traits::SliceOrArrayElem, false);\n+                    self.require_sized(subty, traits::SliceOrArrayElem);\n                 }\n \n                 ty::TyTuple(ref tys) => {\n                     if let Some((_last, rest)) = tys.split_last() {\n                         for elem in rest {\n-                            self.require_sized(elem, traits::TupleElem, true);\n+                            self.require_sized(elem, traits::TupleElem);\n                         }\n                     }\n                 }\n@@ -401,22 +390,15 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n \n                     let cause = self.cause(traits::MiscObligation);\n \n-                    // FIXME(#33243): remove RFC1592\n-                    self.out.push(traits::Obligation::new(\n-                        cause.clone(),\n-                        ty::Predicate::ObjectSafe(data.principal.def_id())\n-                    ));\n                     let component_traits =\n                         data.builtin_bounds.iter().flat_map(|bound| {\n                             tcx.lang_items.from_builtin_kind(bound).ok()\n-                        });\n-//                        .chain(Some(data.principal.def_id()));\n+                        })\n+                        .chain(Some(data.principal.def_id()));\n                     self.out.extend(\n                         component_traits.map(|did| { traits::Obligation::new(\n                             cause.clone(),\n-                            ty::Predicate::Rfc1592(\n-                                box ty::Predicate::ObjectSafe(did)\n-                            )\n+                            ty::Predicate::ObjectSafe(did)\n                         )})\n                     );\n                 }"}, {"sha": "7e2cc2938ca9e4b1763c336288673c36b0181b12", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -487,9 +487,6 @@ impl<'tcx> fmt::Debug for ty::Predicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             ty::Predicate::Trait(ref a) => write!(f, \"{:?}\", a),\n-            ty::Predicate::Rfc1592(ref a) => {\n-                write!(f, \"RFC1592({:?})\", a)\n-            }\n             ty::Predicate::Equate(ref pair) => write!(f, \"{:?}\", pair),\n             ty::Predicate::RegionOutlives(ref pair) => write!(f, \"{:?}\", pair),\n             ty::Predicate::TypeOutlives(ref pair) => write!(f, \"{:?}\", pair),\n@@ -1083,7 +1080,6 @@ impl<'tcx> fmt::Display for ty::Predicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             ty::Predicate::Trait(ref data) => write!(f, \"{}\", data),\n-            ty::Predicate::Rfc1592(ref data) => write!(f, \"{}\", data),\n             ty::Predicate::Equate(ref predicate) => write!(f, \"{}\", predicate),\n             ty::Predicate::RegionOutlives(ref predicate) => write!(f, \"{}\", predicate),\n             ty::Predicate::TypeOutlives(ref predicate) => write!(f, \"{}\", predicate),"}, {"sha": "0f0e9cfb3577335923d3bd0c38334815fe5beada", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -191,14 +191,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN),\n             reference: \"RFC 1445 <https://github.com/rust-lang/rfcs/pull/1445>\",\n         },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(UNSIZED_IN_TUPLE),\n-            reference: \"issue #33242 <https://github.com/rust-lang/rust/issues/33242>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(OBJECT_UNSAFE_FRAGMENT),\n-            reference: \"issue #33243 <https://github.com/rust-lang/rust/issues/33243>\",\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(HR_LIFETIME_IN_ASSOC_TYPE),\n             reference: \"issue #33685 <https://github.com/rust-lang/rust/issues/33685>\","}, {"sha": "954ca878c01ef7919ea945681528fbca1af3448d", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -479,9 +479,6 @@ pub fn enc_predicate<'a, 'tcx>(w: &mut Cursor<Vec<u8>>,\n                                p: &ty::Predicate<'tcx>)\n {\n     match *p {\n-        ty::Predicate::Rfc1592(..) => {\n-            bug!(\"RFC1592 predicate in metadata `{:?}`\", p);\n-        }\n         ty::Predicate::Trait(ref trait_ref) => {\n             write!(w, \"t\");\n             enc_trait_ref(w, cx, trait_ref.0.trait_ref);"}, {"sha": "2fc90ab27a08559c5db46346635ac0e8b3c265a5", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -1019,10 +1019,6 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n                     if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n                         infcx.report_fulfillment_errors(&err);\n                     }\n-\n-                    if let Err(errors) = fulfillment_cx.select_rfc1592_obligations(&infcx) {\n-                        infcx.report_fulfillment_errors_as_warnings(&errors, id);\n-                    }\n                 });\n             }\n         }"}, {"sha": "e15b0b4044ee37b6e95d36c286a84ad9ed4ff652", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -1128,8 +1128,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             tcx.astconv_object_safety_violations(principal.def_id());\n         if !object_safety_violations.is_empty() {\n             tcx.report_object_safety_error(\n-                span, principal.def_id(), None, object_safety_violations)\n-                .unwrap().emit();\n+                span, principal.def_id(), object_safety_violations)\n+                .emit();\n             return tcx.types.err;\n         }\n "}, {"sha": "516dd9c64221c491b6267f6ad06ca29e134d968e", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -165,7 +165,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::TypeOutlives(..) => None,\n                     ty::Predicate::WellFormed(..) => None,\n                     ty::Predicate::ObjectSafe(..) => None,\n-                    ty::Predicate::Rfc1592(..) => None,\n \n                     // NB: This predicate is created by breaking down a\n                     // `ClosureType: FnFoo()` predicate, where"}, {"sha": "365c18d5e666123481616e32034108c9d051dfd0", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -484,7 +484,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n                 // Object safety violations or miscellaneous.\n                 Err(err) => {\n-                    self.report_selection_error(&obligation, &err, None);\n+                    self.report_selection_error(&obligation, &err);\n                     // Treat this like an obligation and follow through\n                     // with the unsizing - the lack of a coercion should\n                     // be silent, as it causes a type mismatch later."}, {"sha": "3a6076774330dcd26fad834b0fd871d402493478", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -111,10 +111,6 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n             return Err(());\n         }\n \n-    if let Err(ref errors) = fulfillment_cx.select_rfc1592_obligations(&infcx) {\n-        infcx.report_fulfillment_errors_as_warnings(errors, drop_impl_node_id);\n-    }\n-\n         let free_regions = FreeRegionMap::new();\n         infcx.resolve_regions_and_report_errors(&free_regions, drop_impl_node_id);\n         Ok(())"}, {"sha": "2e2cb2765d93de6493105de55f2945865cb7a6b5", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -496,7 +496,6 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |\n                     ty::Predicate::ClosureKind(..) |\n-                    ty::Predicate::Rfc1592(..) |\n                     ty::Predicate::TypeOutlives(..) => {\n                         None\n                     }"}, {"sha": "90a9d9bffe7dc2420a055b4494e39af654b4637a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -505,10 +505,6 @@ pub fn check_item_bodies(ccx: &CrateCtxt) -> CompileResult {\n                 if let Err(errors) = fulfillment_cx.select_all_or_error(&infcx) {\n                     infcx.report_fulfillment_errors(&errors);\n                 }\n-\n-                if let Err(errors) = fulfillment_cx.select_rfc1592_obligations(&infcx) {\n-                    infcx.report_fulfillment_errors_as_warnings(&errors, item_id);\n-                }\n             });\n         }\n     })\n@@ -2245,10 +2241,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Ok(()) => { }\n             Err(errors) => { self.report_fulfillment_errors(&errors); }\n         }\n-\n-        if let Err(ref errors) = fulfillment_cx.select_rfc1592_obligations(self) {\n-            self.report_fulfillment_errors_as_warnings(errors, self.body_id);\n-        }\n     }\n \n     /// Select as many obligations as we can at present."}, {"sha": "f63e7b0994761d0c48e93928a4d236f6ab6eeadf", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -477,7 +477,6 @@ impl<'tcx> GetTypeParameterBounds<'tcx> for ty::GenericPredicates<'tcx> {\n                 ty::Predicate::TypeOutlives(ref data) => {\n                     data.skip_binder().0.is_param(def.index)\n                 }\n-                ty::Predicate::Rfc1592(..) |\n                 ty::Predicate::Equate(..) |\n                 ty::Predicate::RegionOutlives(..) |\n                 ty::Predicate::WellFormed(..) |"}, {"sha": "e4b6a30d5bcb3b35c3f55954ee9cb09545b561e5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -858,7 +858,6 @@ impl<'a> Clean<WherePredicate> for ty::Predicate<'a> {\n             Predicate::WellFormed(_) => panic!(\"not user writable\"),\n             Predicate::ObjectSafe(_) => panic!(\"not user writable\"),\n             Predicate::ClosureKind(..) => panic!(\"not user writable\"),\n-            Predicate::Rfc1592(..) => panic!(\"not user writable\"),\n         }\n     }\n }"}, {"sha": "e9d0b986c11767915ff6d7842e99de01b2f26340", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -13,5 +13,7 @@ trait Trait {}\n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n     //~^ ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n+    //~| ERROR the trait `std::marker::Sized` cannot be made into an object\n     //~| ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n+    //~| ERROR the trait `std::marker::Sized` cannot be made into an object\n }"}, {"sha": "8ba95d14931e0b335914711d808c144ad8f5efee", "filename": "src/test/compile-fail/issue-32963.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -17,4 +17,5 @@ fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n fn main() {\n     size_of_copy::<Misc+Copy>();\n     //~^ ERROR `Misc + Copy: std::marker::Copy` is not satisfied\n+    //~| ERROR the trait `std::marker::Copy` cannot be made into an object\n }"}, {"sha": "e766f977200c3c4724cafb47a8670aed20f2dd74", "filename": "src/test/compile-fail/rfc1592-deprecated.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2Frfc1592-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Fcompile-fail%2Frfc1592-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1592-deprecated.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::fmt;\n-\n-#[deny(warnings)] trait Foo { fn foo(&self) -> (Self, Self); }\n-//~^ ERROR the trait bound `Self: std::marker::Sized` is not satisfied\n-//~| WARNING hard error\n-\n-impl<T: Copy> Foo for T {\n-    fn foo(&self) -> (Self, Self) {\n-        (*self, *self)\n-    }\n-}\n-\n-#[deny(warnings)]\n-fn main() {\n-    assert_eq!((11).foo(), (11, 11));\n-\n-    let junk: Box<fmt::Debug+Sized> = Box::new(42);\n-    //~^ ERROR the trait cannot require that `Self : Sized`\n-    //~| WARNING hard error\n-    let f = format!(\"{:?}\", junk);\n-    assert_eq!(f, \"42\");\n-}"}, {"sha": "462d760a60ceb99647f5c5a7a3f08dcd15a37e32", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b92d05804bea222dc6904274f9fc186a6c5208a/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=7b92d05804bea222dc6904274f9fc186a6c5208a", "patch": "@@ -14,9 +14,9 @@ trait T {}\n \n fn f1<X: ?Sized>(x: &X) {\n     let _: X; // <-- this is OK, no bindings created, no initializer.\n-    let _: (isize, (X, isize));\n+    let _: (isize, (X, isize)); //~ERROR `X: std::marker::Sized` is not satisfie\n     let y: X; //~ERROR `X: std::marker::Sized` is not satisfied\n-    let y: (isize, (X, usize)); //~ERROR `X: std::marker::Sized` is not satisfied\n+    let y: (isize, (X, usize));\n }\n fn f2<X: ?Sized + T>(x: &X) {\n     let y: X; //~ERROR `X: std::marker::Sized` is not satisfied"}, {"sha": "81bf02587896fbac62b953d7986e0fc7db914067", "filename": "src/test/run-pass/rfc1592-deprecated.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Frun-pass%2Frfc1592-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a187c39c79e21cd61d1688d449bdd52d7510281/src%2Ftest%2Frun-pass%2Frfc1592-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1592-deprecated.rs?ref=7a187c39c79e21cd61d1688d449bdd52d7510281", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::fmt;\n-\n-trait Foo {\n-    fn foo(&self) -> (Self, Self);\n-}\n-\n-impl<T: Copy> Foo for T {\n-    fn foo(&self) -> (Self, Self) {\n-        (*self, *self)\n-    }\n-}\n-\n-fn main() {\n-    assert_eq!((11).foo(), (11, 11));\n-\n-    let junk: Box<fmt::Debug+Sized> = Box::new(42);\n-    let f = format!(\"{:?}\", junk);\n-    assert_eq!(f, \"42\");\n-}"}]}