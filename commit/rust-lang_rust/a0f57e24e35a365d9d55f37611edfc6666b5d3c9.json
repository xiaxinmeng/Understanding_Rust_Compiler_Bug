{"sha": "a0f57e24e35a365d9d55f37611edfc6666b5d3c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZjU3ZTI0ZTM1YTM2NWQ5ZDU1ZjM3NjExZWRmYzY2NjZiNWQzYzk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-06T19:05:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-16T08:39:11Z"}, "message": "Unpack type arguments for QueryState.", "tree": {"sha": "9709d926501b1001311e369acd328638f4bef1e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9709d926501b1001311e369acd328638f4bef1e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0f57e24e35a365d9d55f37611edfc6666b5d3c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f57e24e35a365d9d55f37611edfc6666b5d3c9", "html_url": "https://github.com/rust-lang/rust/commit/a0f57e24e35a365d9d55f37611edfc6666b5d3c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0f57e24e35a365d9d55f37611edfc6666b5d3c9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "486a082c58c60959328e0b394f9e58850b3c6341", "url": "https://api.github.com/repos/rust-lang/rust/commits/486a082c58c60959328e0b394f9e58850b3c6341", "html_url": "https://github.com/rust-lang/rust/commit/486a082c58c60959328e0b394f9e58850b3c6341"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "37fc339ee6395dd3bc1484712f144e6d07343f58", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a0f57e24e35a365d9d55f37611edfc6666b5d3c9/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f57e24e35a365d9d55f37611edfc6666b5d3c9/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=a0f57e24e35a365d9d55f37611edfc6666b5d3c9", "patch": "@@ -56,15 +56,25 @@ impl<'tcx, K, C: Default> Default for QueryStateShardImpl<'tcx, K, C> {\n     }\n }\n \n-pub(crate) struct QueryState<'tcx, D: QueryAccessors<'tcx> + ?Sized> {\n-    pub(super) cache: D::Cache,\n-    pub(super) shards: Sharded<QueryStateShard<'tcx, D>>,\n+pub(crate) type QueryState<'tcx, Q> = QueryStateImpl<\n+    'tcx,\n+    <Q as QueryConfig<'tcx>>::Key,\n+    <Q as QueryConfig<'tcx>>::Value,\n+    <Q as QueryAccessors<'tcx>>::Cache,\n+>;\n+\n+pub(crate) struct QueryStateImpl<'tcx, K, V, C: QueryCache<K, V>> {\n+    pub(super) cache: C,\n+    pub(super) shards: Sharded<QueryStateShardImpl<'tcx, K, C::Sharded>>,\n     #[cfg(debug_assertions)]\n     pub(super) cache_hits: AtomicUsize,\n }\n \n-impl<'tcx, Q: QueryAccessors<'tcx>> QueryState<'tcx, Q> {\n-    pub(super) fn get_lookup<K: Hash>(&'tcx self, key: &K) -> QueryLookup<'tcx, Q> {\n+impl<'tcx, K, V, C: QueryCache<K, V>> QueryStateImpl<'tcx, K, V, C> {\n+    pub(super) fn get_lookup<K2: Hash>(\n+        &'tcx self,\n+        key: &K2,\n+    ) -> QueryLookupImpl<'tcx, QueryStateShardImpl<'tcx, K, C::Sharded>> {\n         // We compute the key's hash once and then use it for both the\n         // shard lookup and the hashmap lookup. This relies on the fact\n         // that both of them use `FxHasher`.\n@@ -88,12 +98,10 @@ pub(super) enum QueryResult<'tcx> {\n     Poisoned,\n }\n \n-impl<'tcx, M: QueryAccessors<'tcx>> QueryState<'tcx, M> {\n+impl<'tcx, K, V, C: QueryCache<K, V>> QueryStateImpl<'tcx, K, V, C> {\n     pub fn iter_results<R>(\n         &self,\n-        f: impl for<'a> FnOnce(\n-            Box<dyn Iterator<Item = (&'a M::Key, &'a M::Value, DepNodeIndex)> + 'a>,\n-        ) -> R,\n+        f: impl for<'a> FnOnce(Box<dyn Iterator<Item = (&'a K, &'a V, DepNodeIndex)> + 'a>) -> R,\n     ) -> R {\n         self.cache.iter(&self.shards, |shard| &mut shard.cache, f)\n     }\n@@ -103,10 +111,10 @@ impl<'tcx, M: QueryAccessors<'tcx>> QueryState<'tcx, M> {\n     }\n }\n \n-impl<'tcx, M: QueryAccessors<'tcx>> Default for QueryState<'tcx, M> {\n-    fn default() -> QueryState<'tcx, M> {\n-        QueryState {\n-            cache: M::Cache::default(),\n+impl<'tcx, K, V, C: QueryCache<K, V>> Default for QueryStateImpl<'tcx, K, V, C> {\n+    fn default() -> QueryStateImpl<'tcx, K, V, C> {\n+        QueryStateImpl {\n+            cache: C::default(),\n             shards: Default::default(),\n             #[cfg(debug_assertions)]\n             cache_hits: AtomicUsize::new(0),\n@@ -441,7 +449,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         let state = Q::query_state(self);\n \n-        state.cache.lookup(\n+        state.cache.lookup::<_, _, _, _, Q>(\n             state,\n             QueryStateShard::<Q>::get_cache,\n             key,\n@@ -1035,7 +1043,7 @@ macro_rules! define_queries_inner {\n                 let mut string_cache = QueryKeyStringCache::new();\n \n                 $({\n-                    alloc_self_profile_query_strings_for_query_cache(\n+                    alloc_self_profile_query_strings_for_query_cache::<queries::$name<'_>>(\n                         self,\n                         stringify!($name),\n                         &self.queries.$name,"}]}