{"sha": "21d8fbd082aa66db3431debc05e485d5eb03c110", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZDhmYmQwODJhYTY2ZGIzNDMxZGViYzA1ZTQ4NWQ1ZWIwM2MxMTA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-04-11T13:44:13Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-04-11T13:44:13Z"}, "message": "Don't lint for lifetime bounds required by traits", "tree": {"sha": "e3ec80e29b342ca0d16f26422f688c12c835a27a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3ec80e29b342ca0d16f26422f688c12c835a27a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21d8fbd082aa66db3431debc05e485d5eb03c110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21d8fbd082aa66db3431debc05e485d5eb03c110", "html_url": "https://github.com/rust-lang/rust/commit/21d8fbd082aa66db3431debc05e485d5eb03c110", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21d8fbd082aa66db3431debc05e485d5eb03c110/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "856b1f1242b55c2f4fa19dc6d0f55c68e0d81426", "url": "https://api.github.com/repos/rust-lang/rust/commits/856b1f1242b55c2f4fa19dc6d0f55c68e0d81426", "html_url": "https://github.com/rust-lang/rust/commit/856b1f1242b55c2f4fa19dc6d0f55c68e0d81426"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "7c095ad7cf78a2be44d1369a7d95bd83c8c44f5e", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/21d8fbd082aa66db3431debc05e485d5eb03c110/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d8fbd082aa66db3431debc05e485d5eb03c110/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=21d8fbd082aa66db3431debc05e485d5eb03c110", "patch": "@@ -89,29 +89,31 @@ enum RefLt {\n     Named(Name),\n }\n \n-fn bound_lifetimes(bound: &TyParamBound) -> HirVec<&Lifetime> {\n-    if let TraitTyParamBound(ref trait_ref, _) = *bound {\n-        trait_ref.trait_ref\n-            .path\n-            .segments\n-            .last()\n-            .expect(\"a path must have at least one segment\")\n-            .parameters\n-            .lifetimes()\n-    } else {\n-        HirVec::new()\n-    }\n-}\n-\n fn check_fn_inner<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, body: Option<BodyId>, generics: &'tcx Generics, span: Span) {\n     if in_external_macro(cx, span) || has_where_lifetimes(cx, &generics.where_clause) {\n         return;\n     }\n \n-    let bounds_lts = generics.ty_params\n-        .iter()\n-        .flat_map(|typ| typ.bounds.iter().flat_map(bound_lifetimes));\n-\n+    let mut bounds_lts = Vec::new();\n+    for typ in &generics.ty_params {\n+        for bound in &typ.bounds {\n+            if let TraitTyParamBound(ref trait_ref, _) = *bound {\n+                let bounds = trait_ref.trait_ref\n+                    .path\n+                    .segments\n+                    .last()\n+                    .expect(\"a path must have at least one segment\")\n+                    .parameters\n+                    .lifetimes();\n+                for bound in bounds {\n+                    if bound.name != \"'static\" && !bound.is_elided() {\n+                        return;\n+                    }\n+                    bounds_lts.push(bound);\n+                }\n+            }\n+        }\n+    }\n     if could_use_elision(cx, decl, body, &generics.lifetimes, bounds_lts) {\n         span_lint(cx,\n                   NEEDLESS_LIFETIMES,\n@@ -121,12 +123,12 @@ fn check_fn_inner<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, body\n     report_extra_lifetimes(cx, decl, generics);\n }\n \n-fn could_use_elision<'a, 'tcx: 'a, T: Iterator<Item = &'tcx Lifetime>>(\n+fn could_use_elision<'a, 'tcx: 'a>(\n     cx: &LateContext<'a, 'tcx>,\n     func: &'tcx FnDecl,\n     body: Option<BodyId>,\n     named_lts: &'tcx [LifetimeDef],\n-    bounds_lts: T\n+    bounds_lts: Vec<&'tcx Lifetime>,\n ) -> bool {\n     // There are two scenarios where elision works:\n     // * no output references, all input references have different LT\n@@ -151,7 +153,7 @@ fn could_use_elision<'a, 'tcx: 'a, T: Iterator<Item = &'tcx Lifetime>>(\n     }\n \n     let input_lts = match input_visitor.into_vec() {\n-        Some(lts) => lts_from_bounds(lts, bounds_lts),\n+        Some(lts) => lts_from_bounds(lts, bounds_lts.into_iter()),\n         None => return false,\n     };\n     let output_lts = match output_visitor.into_vec() {"}, {"sha": "6d213ad45f243a91d4089253caced6bbcd2dfd6e", "filename": "tests/ui/lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21d8fbd082aa66db3431debc05e485d5eb03c110/tests%2Fui%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d8fbd082aa66db3431debc05e485d5eb03c110/tests%2Fui%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.stderr?ref=21d8fbd082aa66db3431debc05e485d5eb03c110", "patch": "@@ -91,11 +91,5 @@ error: explicit lifetimes given in parameter types where they could be elided\n 128 | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() }\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n-   --> $DIR/lifetimes.rs:132:1\n-    |\n-132 | fn trait_bound_bug<'a, T: WithLifetime<'a>>() { unimplemented!() }\n-    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 15 previous errors\n+error: aborting due to 14 previous errors\n "}]}