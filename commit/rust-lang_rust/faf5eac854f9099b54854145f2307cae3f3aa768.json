{"sha": "faf5eac854f9099b54854145f2307cae3f3aa768", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjVlYWM4NTRmOTA5OWI1NDg1NDE0NWYyMzA3Y2FlM2YzYWE3Njg=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-04-26T07:22:36Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-04-30T04:55:10Z"}, "message": "Move metadata encoding earlier.\n\nThis commit separates metadata encoding (`tcx.encode_metadata`) from the\ncreation of the metadata module (which is now handled by\n`write_compressed_metadata`, formerly `write_metadata`).\n\nThe metadata encoding now occurs slightly earlier in the pipeline, at\nthe very start of code generation within `start_codegen`.\n\nMetadata *writing* still occurs near the end of compilation; that will\nbe moved forward in subsequent commits.", "tree": {"sha": "9d90efdc4c648c5efe111da6fb2f7926f608f170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d90efdc4c648c5efe111da6fb2f7926f608f170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf5eac854f9099b54854145f2307cae3f3aa768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf5eac854f9099b54854145f2307cae3f3aa768", "html_url": "https://github.com/rust-lang/rust/commit/faf5eac854f9099b54854145f2307cae3f3aa768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf5eac854f9099b54854145f2307cae3f3aa768/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03122e1bac482b150844ef9664b1ad2438b43072", "url": "https://api.github.com/repos/rust-lang/rust/commits/03122e1bac482b150844ef9664b1ad2438b43072", "html_url": "https://github.com/rust-lang/rust/commit/03122e1bac482b150844ef9664b1ad2438b43072"}], "stats": {"total": 161, "additions": 85, "deletions": 76}, "files": [{"sha": "9077e89a4020eae8cc5b479ec13d83d6b1d89008", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=faf5eac854f9099b54854145f2307cae3f3aa768", "patch": "@@ -28,7 +28,7 @@ use rustc::mir::mono::{Linkage, Visibility, Stats};\n use rustc::middle::cstore::{EncodedMetadata};\n use rustc::ty::TyCtxt;\n use rustc::middle::exported_symbols;\n-use rustc::session::config::{self, DebugInfo};\n+use rustc::session::config::DebugInfo;\n use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_data_structures::small_c_str::SmallCStr;\n \n@@ -42,47 +42,16 @@ use rustc::hir::CodegenFnAttrs;\n \n use crate::value::Value;\n \n-\n-pub fn write_metadata<'a, 'gcx>(\n+pub fn write_compressed_metadata<'a, 'gcx>(\n     tcx: TyCtxt<'a, 'gcx, 'gcx>,\n+    metadata: &EncodedMetadata,\n     llvm_module: &mut ModuleLlvm\n-) -> EncodedMetadata {\n+) {\n     use std::io::Write;\n     use flate2::Compression;\n     use flate2::write::DeflateEncoder;\n \n     let (metadata_llcx, metadata_llmod) = (&*llvm_module.llcx, llvm_module.llmod());\n-\n-    #[derive(PartialEq, Eq, PartialOrd, Ord)]\n-    enum MetadataKind {\n-        None,\n-        Uncompressed,\n-        Compressed\n-    }\n-\n-    let kind = tcx.sess.crate_types.borrow().iter().map(|ty| {\n-        match *ty {\n-            config::CrateType::Executable |\n-            config::CrateType::Staticlib |\n-            config::CrateType::Cdylib => MetadataKind::None,\n-\n-            config::CrateType::Rlib => MetadataKind::Uncompressed,\n-\n-            config::CrateType::Dylib |\n-            config::CrateType::ProcMacro => MetadataKind::Compressed,\n-        }\n-    }).max().unwrap_or(MetadataKind::None);\n-\n-    if kind == MetadataKind::None {\n-        return EncodedMetadata::new();\n-    }\n-\n-    let metadata = tcx.encode_metadata();\n-    if kind == MetadataKind::Uncompressed {\n-        return metadata;\n-    }\n-\n-    assert!(kind == MetadataKind::Compressed);\n     let mut compressed = tcx.metadata_encoding_version();\n     DeflateEncoder::new(&mut compressed, Compression::fast())\n         .write_all(&metadata.raw_data).unwrap();\n@@ -107,7 +76,6 @@ pub fn write_metadata<'a, 'gcx>(\n         let directive = CString::new(directive).unwrap();\n         llvm::LLVMSetModuleInlineAsm(metadata_llmod, directive.as_ptr())\n     }\n-    return metadata;\n }\n \n pub struct ValueIter<'ll> {"}, {"sha": "09b284052b3c488414f140c4ec9ac96ab66de9d2", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=faf5eac854f9099b54854145f2307cae3f3aa768", "patch": "@@ -110,12 +110,13 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n         ModuleLlvm::new_metadata(tcx, mod_name)\n     }\n \n-    fn write_metadata<'b, 'gcx>(\n+    fn write_compressed_metadata<'b, 'gcx>(\n         &self,\n         tcx: TyCtxt<'b, 'gcx, 'gcx>,\n-        metadata: &mut ModuleLlvm\n-    ) -> EncodedMetadata {\n-        base::write_metadata(tcx, metadata)\n+        metadata: &EncodedMetadata,\n+        llvm_module: &mut ModuleLlvm\n+    ) {\n+        base::write_compressed_metadata(tcx, metadata, llvm_module)\n     }\n     fn codegen_allocator<'b, 'gcx>(\n         &self,\n@@ -289,9 +290,12 @@ impl CodegenBackend for LlvmCodegenBackend {\n     fn codegen_crate<'b, 'tcx>(\n         &self,\n         tcx: TyCtxt<'b, 'tcx, 'tcx>,\n+        metadata: EncodedMetadata,\n+        need_metadata_module: bool,\n         rx: mpsc::Receiver<Box<dyn Any + Send>>\n     ) -> Box<dyn Any> {\n-        box rustc_codegen_ssa::base::codegen_crate(LlvmCodegenBackend(()), tcx, rx)\n+        box rustc_codegen_ssa::base::codegen_crate(\n+            LlvmCodegenBackend(()), tcx, metadata, need_metadata_module, rx)\n     }\n \n     fn join_codegen_and_link("}, {"sha": "3cd47dfbb29fb7cf6387cecc36406e59999565b0", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=faf5eac854f9099b54854145f2307cae3f3aa768", "patch": "@@ -17,6 +17,7 @@ use crate::{ModuleCodegen, ModuleKind, CachedModuleCodegen};\n \n use rustc::dep_graph::cgu_reuse_tracker::CguReuse;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::lang_items::StartFnLangItem;\n use rustc::middle::weak_lang_items;\n use rustc::mir::mono::{Stats, CodegenUnitNameBuilder};\n@@ -25,7 +26,7 @@ use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, VariantIdx, HasTyCtxt};\n use rustc::ty::query::Providers;\n use rustc::middle::cstore::{self, LinkagePreference};\n use rustc::util::common::{time, print_time_passes_entry};\n-use rustc::session::config::{self, CrateType, EntryFnType, Lto};\n+use rustc::session::config::{self, EntryFnType, Lto};\n use rustc::session::Session;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n use rustc_mir::monomorphize::Instance;\n@@ -530,26 +531,13 @@ pub const CODEGEN_WORKER_ID: usize = ::std::usize::MAX;\n pub fn codegen_crate<B: ExtraBackendMethods>(\n     backend: B,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    metadata: EncodedMetadata,\n+    need_metadata_module: bool,\n     rx: mpsc::Receiver<Box<dyn Any + Send>>\n ) -> OngoingCodegen<B> {\n \n     check_for_rustc_errors_attr(tcx);\n \n-    let cgu_name_builder = &mut CodegenUnitNameBuilder::new(tcx);\n-\n-    // Codegen the metadata.\n-    tcx.sess.profiler(|p| p.start_activity(\"codegen crate metadata\"));\n-\n-    let metadata_cgu_name = cgu_name_builder.build_cgu_name(LOCAL_CRATE,\n-                                                            &[\"crate\"],\n-                                                            Some(\"metadata\")).as_str()\n-                                                                             .to_string();\n-    let mut metadata_llvm_module = backend.new_metadata(tcx, &metadata_cgu_name);\n-    let metadata = time(tcx.sess, \"write metadata\", || {\n-        backend.write_metadata(tcx, &mut metadata_llvm_module)\n-    });\n-    tcx.sess.profiler(|p| p.end_activity(\"codegen crate metadata\"));\n-\n     // Skip crate items and just output metadata in -Z no-codegen mode.\n     if tcx.sess.opts.debugging_opts.no_codegen ||\n        !tcx.sess.opts.output_types.should_codegen() {\n@@ -569,6 +557,8 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         return ongoing_codegen;\n     }\n \n+    let cgu_name_builder = &mut CodegenUnitNameBuilder::new(tcx);\n+\n     // Run the monomorphization collector and partition the collected items into\n     // codegen units.\n     let codegen_units = tcx.collect_and_partition_mono_items(LOCAL_CRATE).1;\n@@ -632,17 +622,21 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         ongoing_codegen.submit_pre_codegened_module_to_llvm(tcx, allocator_module);\n     }\n \n-    let needs_metadata_module = tcx.sess.crate_types.borrow().iter().any(|ct| {\n-        match *ct {\n-            CrateType::Dylib |\n-            CrateType::ProcMacro => true,\n-            CrateType::Executable |\n-            CrateType::Rlib |\n-            CrateType::Staticlib |\n-            CrateType::Cdylib => false,\n-        }\n-    });\n-    if needs_metadata_module {\n+    if need_metadata_module {\n+        // Codegen the encoded metadata.\n+        tcx.sess.profiler(|p| p.start_activity(\"codegen crate metadata\"));\n+\n+        let metadata_cgu_name = cgu_name_builder.build_cgu_name(LOCAL_CRATE,\n+                                                                &[\"crate\"],\n+                                                                Some(\"metadata\")).as_str()\n+                                                                                 .to_string();\n+        let mut metadata_llvm_module = backend.new_metadata(tcx, &metadata_cgu_name);\n+        time(tcx.sess, \"write compressed metadata\", || {\n+            backend.write_compressed_metadata(tcx, &ongoing_codegen.metadata,\n+                                              &mut metadata_llvm_module);\n+        });\n+        tcx.sess.profiler(|p| p.end_activity(\"codegen crate metadata\"));\n+\n         let metadata_module = ModuleCodegen {\n             name: metadata_cgu_name,\n             module_llvm: metadata_llvm_module,"}, {"sha": "530eba516a6c0c4a00094498a47424482809700d", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=faf5eac854f9099b54854145f2307cae3f3aa768", "patch": "@@ -33,11 +33,12 @@ impl<'tcx, T> Backend<'tcx> for T where\n \n pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send {\n     fn new_metadata(&self, sess: TyCtxt<'_, '_, '_>, mod_name: &str) -> Self::Module;\n-    fn write_metadata<'b, 'gcx>(\n+    fn write_compressed_metadata<'b, 'gcx>(\n         &self,\n         tcx: TyCtxt<'b, 'gcx, 'gcx>,\n-        metadata: &mut Self::Module,\n-    ) -> EncodedMetadata;\n+        metadata: &EncodedMetadata,\n+        llvm_module: &mut Self::Module,\n+    );\n     fn codegen_allocator<'b, 'gcx>(\n         &self,\n         tcx: TyCtxt<'b, 'gcx, 'gcx>,"}, {"sha": "191c6605b43ff4022e636c1fa6fe758ebcf15d35", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=faf5eac854f9099b54854145f2307cae3f3aa768", "patch": "@@ -18,7 +18,7 @@ use rustc::util::common::ErrorReported;\n use rustc::session::config::{OutputFilenames, PrintRequest};\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n-use rustc::middle::cstore::MetadataLoader;\n+use rustc::middle::cstore::{EncodedMetadata, MetadataLoader};\n use rustc::dep_graph::DepGraph;\n \n pub use rustc_data_structures::sync::MetadataRef;\n@@ -37,6 +37,8 @@ pub trait CodegenBackend {\n     fn codegen_crate<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        metadata: EncodedMetadata,\n+        need_metadata_module: bool,\n         rx: mpsc::Receiver<Box<dyn Any + Send>>\n     ) -> Box<dyn Any>;\n "}, {"sha": "38d641d2f60761994a8a964b3f1f4bd00b957882", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=faf5eac854f9099b54854145f2307cae3f3aa768", "patch": "@@ -16,7 +16,7 @@ use rustc::traits;\n use rustc::util::common::{time, ErrorReported};\n use rustc::util::profiling::ProfileCategory;\n use rustc::session::{CompileResult, CrateDisambiguator, Session};\n-use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n+use rustc::session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n use rustc_allocator as allocator;\n use rustc_borrowck as borrowck;\n@@ -999,6 +999,38 @@ fn analysis<'tcx>(\n     Ok(())\n }\n \n+fn encode_metadata<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> (middle::cstore::EncodedMetadata, bool) {\n+    #[derive(PartialEq, Eq, PartialOrd, Ord)]\n+    enum MetadataKind {\n+        None,\n+        Uncompressed,\n+        Compressed\n+    }\n+\n+    let metadata_kind = tcx.sess.crate_types.borrow().iter().map(|ty| {\n+        match *ty {\n+            CrateType::Executable |\n+            CrateType::Staticlib |\n+            CrateType::Cdylib => MetadataKind::None,\n+\n+            CrateType::Rlib => MetadataKind::Uncompressed,\n+\n+            CrateType::Dylib |\n+            CrateType::ProcMacro => MetadataKind::Compressed,\n+        }\n+    }).max().unwrap_or(MetadataKind::None);\n+\n+    let need_metadata_module = metadata_kind == MetadataKind::Compressed;\n+\n+    let metadata = match metadata_kind {\n+        MetadataKind::None => middle::cstore::EncodedMetadata::new(),\n+        MetadataKind::Uncompressed |\n+        MetadataKind::Compressed => tcx.encode_metadata(),\n+    };\n+\n+    (metadata, need_metadata_module)\n+}\n+\n /// Runs the codegen backend, after which the AST and analysis can\n /// be discarded.\n pub fn start_codegen<'tcx>(\n@@ -1013,11 +1045,17 @@ pub fn start_codegen<'tcx>(\n     }\n \n     time(tcx.sess, \"resolving dependency formats\", || {\n-        ::rustc::middle::dependency_format::calculate(tcx)\n+        middle::dependency_format::calculate(tcx)\n+    });\n+\n+    let (metadata, need_metadata_module) = time(tcx.sess, \"metadata encoding\", || {\n+        encode_metadata(tcx)\n     });\n \n     tcx.sess.profiler(|p| p.start_activity(\"codegen crate\"));\n-    let codegen = time(tcx.sess, \"codegen\", move || codegen_backend.codegen_crate(tcx, rx));\n+    let codegen = time(tcx.sess, \"codegen\", move || {\n+        codegen_backend.codegen_crate(tcx, metadata, need_metadata_module, rx)\n+    });\n     tcx.sess.profiler(|p| p.end_activity(\"codegen crate\"));\n \n     if log_enabled!(::log::Level::Info) {"}, {"sha": "4e43aa96e1d853895e90754a9cd747a36fb83d12", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf5eac854f9099b54854145f2307cae3f3aa768/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=faf5eac854f9099b54854145f2307cae3f3aa768", "patch": "@@ -15,7 +15,7 @@ use rustc::session::Session;\n use rustc::session::config::OutputFilenames;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n-use rustc::middle::cstore::MetadataLoader;\n+use rustc::middle::cstore::{EncodedMetadata, MetadataLoader};\n use rustc::dep_graph::DepGraph;\n use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n@@ -61,6 +61,8 @@ impl CodegenBackend for TheBackend {\n     fn codegen_crate<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        _metadata: EncodedMetadata,\n+        _need_metadata_module: bool,\n         _rx: mpsc::Receiver<Box<Any + Send>>\n     ) -> Box<Any> {\n         use rustc::hir::def_id::LOCAL_CRATE;"}]}