{"sha": "8fb0041f4739dc350e8d74608313bcb7c4c5e20d", "node_id": "C_kwDOAAsO6NoAKDhmYjAwNDFmNDczOWRjMzUwZThkNzQ2MDgzMTNiY2I3YzRjNWUyMGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-30T16:40:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-30T16:40:25Z"}, "message": "Auto merge of #10248 - koka831:missing-config, r=xFrednet\n\nMissing config\n\nThis PR addresses https://rust-lang.zulipchat.com/#narrow/stream/257328-clippy/topic/Some.20lints.20miss.20its.20config/near/318460000.\n\nchangelog: Documentation: Made sure that lint configurations on Clippy's lint list are all up to date\n[#10248](https://github.com/rust-lang/rust-clippy/pull/10248)\n<!-- changelog_checked -->\n\nr? `@xFrednet`\n\n---\n\nI have tried to create [a prototype](https://github.com/koka831/rust-clippy/pull/1), but have not yet found a good way to implement it.\nSo I would like to put it aside for now and try again after addressing other issues so that I can understand how clippy works better:)", "tree": {"sha": "29456c131d7e77f08ce3585c8a0eec78ddcc2c25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29456c131d7e77f08ce3585c8a0eec78ddcc2c25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fb0041f4739dc350e8d74608313bcb7c4c5e20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fb0041f4739dc350e8d74608313bcb7c4c5e20d", "html_url": "https://github.com/rust-lang/rust/commit/8fb0041f4739dc350e8d74608313bcb7c4c5e20d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fb0041f4739dc350e8d74608313bcb7c4c5e20d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c28d1f69a120de7fcdbc40fb17610a407a4900", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c28d1f69a120de7fcdbc40fb17610a407a4900", "html_url": "https://github.com/rust-lang/rust/commit/96c28d1f69a120de7fcdbc40fb17610a407a4900"}, {"sha": "a9e6b128542134c340bb25e13144eafbd176f51b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e6b128542134c340bb25e13144eafbd176f51b", "html_url": "https://github.com/rust-lang/rust/commit/a9e6b128542134c340bb25e13144eafbd176f51b"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "32e8e218c40554462d28c7e0e31dec6f5d2e2a4c", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8fb0041f4739dc350e8d74608313bcb7c4c5e20d/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/8fb0041f4739dc350e8d74608313bcb7c4c5e20d/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=8fb0041f4739dc350e8d74608313bcb7c4c5e20d", "patch": "@@ -43,6 +43,7 @@ Please use that command to update the file and do not edit it by hand.\n | [allowed-scripts](#allowed-scripts) | `[\"Latin\"]` |\n | [enable-raw-pointer-heuristic-for-send](#enable-raw-pointer-heuristic-for-send) | `true` |\n | [max-suggested-slice-pattern-length](#max-suggested-slice-pattern-length) | `3` |\n+| [await-holding-invalid-types](#await-holding-invalid-types) | `[]` |\n | [max-include-file-size](#max-include-file-size) | `1000000` |\n | [allow-expect-in-tests](#allow-expect-in-tests) | `false` |\n | [allow-unwrap-in-tests](#allow-unwrap-in-tests) | `false` |\n@@ -167,6 +168,17 @@ The minimum rust version that the project supports\n * [manual_clamp](https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp)\n * [manual_let_else](https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else)\n * [unchecked_duration_subtraction](https://rust-lang.github.io/rust-clippy/master/index.html#unchecked_duration_subtraction)\n+* [collapsible_str_replace](https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_str_replace)\n+* [seek_from_current](https://rust-lang.github.io/rust-clippy/master/index.html#seek_from_current)\n+* [seek_rewind](https://rust-lang.github.io/rust-clippy/master/index.html#seek_rewind)\n+* [unnecessary_lazy_evaluations](https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations)\n+* [transmute_ptr_to_ref](https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ref)\n+* [almost_complete_range](https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_range)\n+* [needless_borrow](https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow)\n+* [derivable_impls](https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls)\n+* [manual_is_ascii_check](https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_ascii_check)\n+* [manual_rem_euclid](https://rust-lang.github.io/rust-clippy/master/index.html#manual_rem_euclid)\n+* [manual_retain](https://rust-lang.github.io/rust-clippy/master/index.html#manual_retain)\n \n \n ### cognitive-complexity-threshold\n@@ -279,7 +291,7 @@ The minimum size (in bytes) to consider a type for passing by reference instead\n \n **Default Value:** `256` (`u64`)\n \n-* [large_type_pass_by_move](https://rust-lang.github.io/rust-clippy/master/index.html#large_type_pass_by_move)\n+* [large_types_passed_by_value](https://rust-lang.github.io/rust-clippy/master/index.html#large_types_passed_by_value)\n \n \n ### too-many-lines-threshold\n@@ -442,6 +454,14 @@ For example, `[_, _, _, e, ..]` is a slice pattern with 4 elements.\n * [index_refutable_slice](https://rust-lang.github.io/rust-clippy/master/index.html#index_refutable_slice)\n \n \n+### await-holding-invalid-types\n+\n+\n+**Default Value:** `[]` (`Vec<crate::utils::conf::DisallowedPath>`)\n+\n+* [await_holding_invalid_type](https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_invalid_type)\n+\n+\n ### max-include-file-size\n The maximum size of a file included via `include_bytes!()` or `include_str!()`, in bytes\n \n@@ -497,7 +517,7 @@ for the generic parameters for determining interior mutability\n \n **Default Value:** `[\"bytes::Bytes\"]` (`Vec<String>`)\n \n-* [mutable_key](https://rust-lang.github.io/rust-clippy/master/index.html#mutable_key)\n+* [mutable_key_type](https://rust-lang.github.io/rust-clippy/master/index.html#mutable_key_type)\n \n \n ### allow-mixed-uninlined-format-args\n@@ -509,7 +529,7 @@ Whether to allow mixed uninlined format args, e.g. `format!(\"{} {}\", a, foo.bar)\n \n \n ### suppress-restriction-lint-in-const\n-In same\n+Whether to suppress a restriction lint in constant code. In same\n cases the restructured operation might not be unavoidable, as the\n suggested counterparts are unavailable in constant code. This\n configuration will cause restriction lints to trigger even"}, {"sha": "6a1575e182f0f11899f300d38d06f8bec4680e0f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fb0041f4739dc350e8d74608313bcb7c4c5e20d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb0041f4739dc350e8d74608313bcb7c4c5e20d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=8fb0041f4739dc350e8d74608313bcb7c4c5e20d", "patch": "@@ -1818,6 +1818,7 @@ declare_clippy_lint! {\n     ///  - `or_else` to `or`\n     ///  - `get_or_insert_with` to `get_or_insert`\n     ///  - `ok_or_else` to `ok_or`\n+    ///  - `then` to `then_some` (for msrv >= 1.62.0)\n     ///\n     /// ### Why is this bad?\n     /// Using eager evaluation is shorter and simpler in some cases."}, {"sha": "1d78c7cfae0dfc6e74dea3b7b7f37ec9cc6f97b1", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fb0041f4739dc350e8d74608313bcb7c4c5e20d/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb0041f4739dc350e8d74608313bcb7c4c5e20d/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=8fb0041f4739dc350e8d74608313bcb7c4c5e20d", "patch": "@@ -253,7 +253,7 @@ define_Conf! {\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),\n-    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, ERR_EXPECT, CAST_ABS_TO_UNSIGNED, UNINLINED_FORMAT_ARGS, MANUAL_CLAMP, MANUAL_LET_ELSE, UNCHECKED_DURATION_SUBTRACTION.\n+    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, ERR_EXPECT, CAST_ABS_TO_UNSIGNED, UNINLINED_FORMAT_ARGS, MANUAL_CLAMP, MANUAL_LET_ELSE, UNCHECKED_DURATION_SUBTRACTION, COLLAPSIBLE_STR_REPLACE, SEEK_FROM_CURRENT, SEEK_REWIND, UNNECESSARY_LAZY_EVALUATIONS, TRANSMUTE_PTR_TO_REF, ALMOST_COMPLETE_RANGE, NEEDLESS_BORROW, DERIVABLE_IMPLS, MANUAL_IS_ASCII_CHECK, MANUAL_REM_EUCLID, MANUAL_RETAIN.\n     ///\n     /// The minimum rust version that the project supports\n     (msrv: Option<String> = None),\n@@ -323,7 +323,7 @@ define_Conf! {\n     ///\n     /// The maximum size (in bytes) to consider a `Copy` type for passing by value instead of by reference.\n     (trivial_copy_size_limit: Option<u64> = None),\n-    /// Lint: LARGE_TYPE_PASS_BY_MOVE.\n+    /// Lint: LARGE_TYPES_PASSED_BY_VALUE.\n     ///\n     /// The minimum size (in bytes) to consider a type for passing by reference instead of by value.\n     (pass_by_value_size_limit: u64 = 256),\n@@ -411,7 +411,7 @@ define_Conf! {\n     /// the slice pattern that is suggested. If more elements would be necessary, the lint is suppressed.\n     /// For example, `[_, _, _, e, ..]` is a slice pattern with 4 elements.\n     (max_suggested_slice_pattern_length: u64 = 3),\n-    /// Lint: AWAIT_HOLDING_INVALID_TYPE\n+    /// Lint: AWAIT_HOLDING_INVALID_TYPE.\n     (await_holding_invalid_types: Vec<crate::utils::conf::DisallowedPath> = Vec::new()),\n     /// Lint: LARGE_INCLUDE_FILE.\n     ///\n@@ -437,7 +437,7 @@ define_Conf! {\n     ///\n     /// The maximum size of the `Err`-variant in a `Result` returned from a function\n     (large_error_threshold: u64 = 128),\n-    /// Lint: MUTABLE_KEY.\n+    /// Lint: MUTABLE_KEY_TYPE.\n     ///\n     /// A list of paths to types that should be treated like `Arc`, i.e. ignored but\n     /// for the generic parameters for determining interior mutability\n@@ -446,7 +446,7 @@ define_Conf! {\n     ///\n     /// Whether to allow mixed uninlined format args, e.g. `format!(\"{} {}\", a, foo.bar)`\n     (allow_mixed_uninlined_format_args: bool = true),\n-    /// Lint: INDEXING_SLICING\n+    /// Lint: INDEXING_SLICING.\n     ///\n     /// Whether to suppress a restriction lint in constant code. In same\n     /// cases the restructured operation might not be unavoidable, as the"}]}