{"sha": "62a0203a5a1ec3ba1165b98cdfab9547fa755814", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYTAyMDNhNWExZWMzYmExMTY1Yjk4Y2RmYWI5NTQ3ZmE3NTU4MTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-08T15:24:52Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-08T15:24:52Z"}, "message": "Rustfmt", "tree": {"sha": "1e2f7f7b1de7b1cd00ac6ad0ee0f22f8a5909ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e2f7f7b1de7b1cd00ac6ad0ee0f22f8a5909ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62a0203a5a1ec3ba1165b98cdfab9547fa755814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62a0203a5a1ec3ba1165b98cdfab9547fa755814", "html_url": "https://github.com/rust-lang/rust/commit/62a0203a5a1ec3ba1165b98cdfab9547fa755814", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62a0203a5a1ec3ba1165b98cdfab9547fa755814/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "252607ae41f93b65ea305e79719231e8b454dc43", "url": "https://api.github.com/repos/rust-lang/rust/commits/252607ae41f93b65ea305e79719231e8b454dc43", "html_url": "https://github.com/rust-lang/rust/commit/252607ae41f93b65ea305e79719231e8b454dc43"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "318cfe49da184cc4de5f206ec9f3a3d6225bf122", "filename": "examples/mini_core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a0203a5a1ec3ba1165b98cdfab9547fa755814/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a0203a5a1ec3ba1165b98cdfab9547fa755814/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=62a0203a5a1ec3ba1165b98cdfab9547fa755814", "patch": "@@ -194,7 +194,7 @@ static mut MY_TINY_HEAP: [u8; 16] = [0; 16];\n \n #[lang = \"exchange_malloc\"]\n unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n-     &mut MY_TINY_HEAP as *mut [u8; 16] as *mut u8\n+    &mut MY_TINY_HEAP as *mut [u8; 16] as *mut u8\n }\n \n pub mod intrinsics {"}, {"sha": "f77009be9811add58ed2f37b2bea37c453e21182", "filename": "src/abi.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62a0203a5a1ec3ba1165b98cdfab9547fa755814/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a0203a5a1ec3ba1165b98cdfab9547fa755814/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=62a0203a5a1ec3ba1165b98cdfab9547fa755814", "patch": "@@ -90,7 +90,8 @@ pub fn cton_sig_from_fn_ty<'a, 'tcx: 'a>(\n         ),\n         PassMode::ByRef => {\n             (\n-                Some(pointer_ty(tcx)).into_iter() // First param is place to put return val\n+                Some(pointer_ty(tcx)) // First param is place to put return val\n+                    .into_iter()\n                     .chain(inputs)\n                     .map(AbiParam::new)\n                     .collect(),\n@@ -182,7 +183,9 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n     ) -> Option<Value> {\n         let sig = Signature {\n             params: input_tys.iter().cloned().map(AbiParam::new).collect(),\n-            returns: output_ty.map(|output_ty| vec![AbiParam::new(output_ty)]).unwrap_or(Vec::new()),\n+            returns: output_ty\n+                .map(|output_ty| vec![AbiParam::new(output_ty)])\n+                .unwrap_or(Vec::new()),\n             call_conv: CallConv::SystemV,\n         };\n         let func_id = self\n@@ -606,7 +609,7 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                             let len = args[0].load_value_pair(fx).1;\n                             let elem_size = fx.layout_of(elem).size.bytes();\n                             fx.bcx.ins().imul_imm(len, elem_size as i64)\n-                        },\n+                        }\n                         ty => unimplemented!(\"size_of_val for {:?}\", ty),\n                     };\n                     ret.write_cvalue(fx, CValue::ByVal(size, usize_layout));"}, {"sha": "9e01785416786fc2c97ada2a32e96c9b404e0b12", "filename": "src/base.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62a0203a5a1ec3ba1165b98cdfab9547fa755814/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a0203a5a1ec3ba1165b98cdfab9547fa755814/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=62a0203a5a1ec3ba1165b98cdfab9547fa755814", "patch": "@@ -23,7 +23,9 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                 match inst.def {\n                     InstanceDef::Item(_)\n                     | InstanceDef::DropGlue(_, _)\n-                    | InstanceDef::Virtual(_, _) if inst.def_id().krate == LOCAL_CRATE => {\n+                    | InstanceDef::Virtual(_, _)\n+                        if inst.def_id().krate == LOCAL_CRATE =>\n+                    {\n                         let mut mir = ::std::io::Cursor::new(Vec::new());\n                         ::rustc_mir::util::write_mir_pretty(tcx, Some(inst.def_id()), &mut mir)\n                             .unwrap();\n@@ -35,8 +37,8 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                     | InstanceDef::FnPtrShim(_, _)\n                     | InstanceDef::ClosureOnceShim { .. }\n                     | InstanceDef::CloneShim(_, _) => {\n-                       // FIXME fix write_mir_pretty for these instances\n-                       format!(\"{:#?}\", tcx.instance_mir(inst.def))\n+                        // FIXME fix write_mir_pretty for these instances\n+                        format!(\"{:#?}\", tcx.instance_mir(inst.def))\n                     }\n                     InstanceDef::Intrinsic(_) => bug!(\"tried to codegen intrinsic\"),\n                 }\n@@ -507,15 +509,17 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let def_id = match fx.tcx.lang_items().require(ExchangeMallocFnLangItem) {\n                         Ok(id) => id,\n                         Err(s) => {\n-                            fx.tcx.sess.fatal(&format!(\"allocation of `{}` {}\", box_layout.ty, s));\n+                            fx.tcx\n+                                .sess\n+                                .fatal(&format!(\"allocation of `{}` {}\", box_layout.ty, s));\n                         }\n                     };\n                     let instance = ty::Instance::mono(fx.tcx, def_id);\n                     let func_ref = fx.get_function_ref(instance);\n                     let call = fx.bcx.ins().call(func_ref, &[llsize, llalign]);\n                     let ptr = fx.bcx.inst_results(call)[0];\n                     lval.write_cvalue(fx, CValue::ByVal(ptr, box_layout));\n-                },\n+                }\n                 Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n                     assert!(\n                         lval.layout()"}, {"sha": "a7159c210ea83b0a50370cfd22cc3363e61c2ff9", "filename": "src/common.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/62a0203a5a1ec3ba1165b98cdfab9547fa755814/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a0203a5a1ec3ba1165b98cdfab9547fa755814/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=62a0203a5a1ec3ba1165b98cdfab9547fa755814", "patch": "@@ -143,16 +143,17 @@ impl<'tcx> CValue<'tcx> {\n     {\n         match self {\n             CValue::ByRef(addr, layout) => {\n-                let cton_ty = fx\n-                    .cton_type(layout.ty)\n-                    .unwrap_or_else(|| {\n-                        if layout.ty.is_box() && !fx.layout_of(layout.ty.builtin_deref(true).unwrap().ty).is_unsized() {\n-                            // Consider sized box to be a ptr\n-                            pointer_ty(fx.tcx)\n-                        } else {\n-                            panic!(\"load_value of type {:?}\", layout.ty);\n-                        }\n-                    });\n+                let cton_ty = fx.cton_type(layout.ty).unwrap_or_else(|| {\n+                    if layout.ty.is_box() && !fx\n+                        .layout_of(layout.ty.builtin_deref(true).unwrap().ty)\n+                        .is_unsized()\n+                    {\n+                        // Consider sized box to be a ptr\n+                        pointer_ty(fx.tcx)\n+                    } else {\n+                        panic!(\"load_value of type {:?}\", layout.ty);\n+                    }\n+                });\n                 fx.bcx.ins().load(cton_ty, MemFlags::new(), addr, 0)\n             }\n             CValue::ByVal(value, _layout) => value,"}, {"sha": "c1aea7739b86bedba38072c28613c23bc526e659", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62a0203a5a1ec3ba1165b98cdfab9547fa755814/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a0203a5a1ec3ba1165b98cdfab9547fa755814/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=62a0203a5a1ec3ba1165b98cdfab9547fa755814", "patch": "@@ -82,9 +82,7 @@ mod prelude {\n     };\n     pub use cranelift::codegen::Context;\n     pub use cranelift::prelude::*;\n-    pub use cranelift_module::{\n-        Backend, DataContext, DataId, FuncId, Linkage, Module,\n-    };\n+    pub use cranelift_module::{Backend, DataContext, DataId, FuncId, Linkage, Module};\n     pub use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n \n     pub use crate::abi::*;"}]}