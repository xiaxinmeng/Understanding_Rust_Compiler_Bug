{"sha": "84bf0240941b645ef9f8c57b81db30659f7c68e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YmYwMjQwOTQxYjY0NWVmOWY4YzU3YjgxZGIzMDY1OWY3YzY4ZTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-31T13:01:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-31T13:01:54Z"}, "message": "Merge #5621\n\n5621: Finalize TypeBound grammar r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "801a66f324421dac1012b4516805c12a633d543f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/801a66f324421dac1012b4516805c12a633d543f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84bf0240941b645ef9f8c57b81db30659f7c68e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJBZCCRBK7hj4Ov3rIwAAdHIIAFvaJNlc6VsB/s1R6RROMMoR\n6SEHAZzjMdvaVcURcxvO2jfV3y6VofJ/pugoWNGtsqixr6RI9pjkXsAI98Anlxag\nwzBZzBO0v+u0DeK9Z33mA3gyaSRfrLGnA1qL4nKK8J2uGkBRMSfILpAWu2Ib2pJv\nJmNlp/AjIcSKjkRNHY8PfKRfC3oixx4l6eFnCCsMApgrmn/t1WYFM6NNRQz3TUb/\nHJQpOD1woDKDPwJFW+da6zPcTwiSiuK742nT0lHYJxUq+0J4vxMHcHjQB1HGqlXh\na6FlZgk5PE68YmxVtJaunAKYL+ywjNtUUdiHTjCs7uP/c29cNM94voGTSo6M/7Q=\n=Vf3V\n-----END PGP SIGNATURE-----\n", "payload": "tree 801a66f324421dac1012b4516805c12a633d543f\nparent 847a50e74e3e45ea84f38efb23788fa5a61566eb\nparent b250ae6c55c446f65f85914d98da2cd2c75871f7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596200514 +0000\ncommitter GitHub <noreply@github.com> 1596200514 +0000\n\nMerge #5621\n\n5621: Finalize TypeBound grammar r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84bf0240941b645ef9f8c57b81db30659f7c68e4", "html_url": "https://github.com/rust-lang/rust/commit/84bf0240941b645ef9f8c57b81db30659f7c68e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84bf0240941b645ef9f8c57b81db30659f7c68e4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "847a50e74e3e45ea84f38efb23788fa5a61566eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/847a50e74e3e45ea84f38efb23788fa5a61566eb", "html_url": "https://github.com/rust-lang/rust/commit/847a50e74e3e45ea84f38efb23788fa5a61566eb"}, {"sha": "b250ae6c55c446f65f85914d98da2cd2c75871f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b250ae6c55c446f65f85914d98da2cd2c75871f7", "html_url": "https://github.com/rust-lang/rust/commit/b250ae6c55c446f65f85914d98da2cd2c75871f7"}], "stats": {"total": 89, "additions": 35, "deletions": 54}, "files": [{"sha": "699ba9c923524f406596991c2d5e1b4b1f73b51d", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84bf0240941b645ef9f8c57b81db30659f7c68e4/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84bf0240941b645ef9f8c57b81db30659f7c68e4/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=84bf0240941b645ef9f8c57b81db30659f7c68e4", "patch": "@@ -270,7 +270,7 @@ impl GenericParams {\n         bound: ast::TypeBound,\n         type_ref: TypeRef,\n     ) {\n-        if bound.question_token().is_some() {\n+        if bound.question_mark_token().is_some() {\n             // FIXME: remove this bound\n             return;\n         }"}, {"sha": "9064398a908842b551542a1ea98c67ffafb091ac", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/84bf0240941b645ef9f8c57b81db30659f7c68e4/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84bf0240941b645ef9f8c57b81db30659f7c68e4/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=84bf0240941b645ef9f8c57b81db30659f7c68e4", "patch": "@@ -639,6 +639,17 @@ impl DynTraitType {\n     pub fn type_bound_list(&self) -> Option<TypeBoundList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TypeBound {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl TypeBound {\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n+    pub fn question_mark_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![?]) }\n+    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TupleExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1168,17 +1179,6 @@ impl MacroStmts {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeBound {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl TypeBound {\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n-    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n-    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct WherePred {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -2045,6 +2045,17 @@ impl AstNode for DynTraitType {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for TypeBound {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for TupleExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2661,17 +2672,6 @@ impl AstNode for MacroStmts {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TypeBound {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for WherePred {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_PRED }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3746,6 +3746,11 @@ impl std::fmt::Display for DynTraitType {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for TypeBound {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for TupleExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4026,11 +4031,6 @@ impl std::fmt::Display for MacroStmts {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TypeBound {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for WherePred {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "69726fb93f13e872dbdd7f28d6f31f1222600e6e", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/84bf0240941b645ef9f8c57b81db30659f7c68e4/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84bf0240941b645ef9f8c57b81db30659f7c68e4/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=84bf0240941b645ef9f8c57b81db30659f7c68e4", "patch": "@@ -362,26 +362,6 @@ impl ast::TypeBound {\n             unreachable!()\n         }\n     }\n-\n-    pub fn const_question_token(&self) -> Option<SyntaxToken> {\n-        self.syntax()\n-            .children_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .take_while(|it| it.kind() != T![const])\n-            .find(|it| it.kind() == T![?])\n-    }\n-\n-    pub fn question_token(&self) -> Option<SyntaxToken> {\n-        if self.const_token().is_some() {\n-            self.syntax()\n-                .children_with_tokens()\n-                .filter_map(|it| it.into_token())\n-                .skip_while(|it| it.kind() != T![const])\n-                .find(|it| it.kind() == T![?])\n-        } else {\n-            support::token(&self.syntax, T![?])\n-        }\n-    }\n }\n \n pub enum VisibilityKind {"}, {"sha": "32f2808ead3db77885d6f08d876a3da2cb106ee1", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/84bf0240941b645ef9f8c57b81db30659f7c68e4/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/84bf0240941b645ef9f8c57b81db30659f7c68e4/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=84bf0240941b645ef9f8c57b81db30659f7c68e4", "patch": "@@ -242,6 +242,13 @@ ImplTraitType =\n DynTraitType =\n   'dyn' TypeBoundList\n \n+TypeBoundList =\n+   bounds:(TypeBound ('+' TypeBound)* '+'?)\n+\n+TypeBound =\n+  'lifetime'\n+| '?'? Type\n+\n TupleExpr =\n   Attr* '(' Expr* ')'\n \n@@ -443,12 +450,6 @@ MacroStmts =\n   statements:Stmt*\n   Expr?\n \n-TypeBound =\n-  'lifetime' | 'const'? Type\n-\n-TypeBoundList =\n-   bounds:TypeBound*\n-\n WherePred =\n   ('for' GenericParamList)?  ('lifetime' | Type) ':' TypeBoundList\n "}]}