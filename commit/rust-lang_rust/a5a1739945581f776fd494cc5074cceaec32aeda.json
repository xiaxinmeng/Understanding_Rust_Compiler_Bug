{"sha": "a5a1739945581f776fd494cc5074cceaec32aeda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YTE3Mzk5NDU1ODFmNzc2ZmQ0OTRjYzUwNzRjY2VhZWMzMmFlZGE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-18T14:41:54Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-18T14:48:07Z"}, "message": "Add missing urls for Result struct", "tree": {"sha": "9449ca57899dd78698156f5c58fb1b6d8c765e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9449ca57899dd78698156f5c58fb1b6d8c765e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5a1739945581f776fd494cc5074cceaec32aeda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a1739945581f776fd494cc5074cceaec32aeda", "html_url": "https://github.com/rust-lang/rust/commit/a5a1739945581f776fd494cc5074cceaec32aeda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5a1739945581f776fd494cc5074cceaec32aeda/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86fd9a552d25f6e174512581ca75f38f84462811", "url": "https://api.github.com/repos/rust-lang/rust/commits/86fd9a552d25f6e174512581ca75f38f84462811", "html_url": "https://github.com/rust-lang/rust/commit/86fd9a552d25f6e174512581ca75f38f84462811"}], "stats": {"total": 100, "additions": 73, "deletions": 27}, "files": [{"sha": "ea064ca5c39fe0539804ab0536e519e538000cc3", "filename": "src/libcore/result.rs", "status": "modified", "additions": 73, "deletions": 27, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a5a1739945581f776fd494cc5074cceaec32aeda/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5a1739945581f776fd494cc5074cceaec32aeda/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=a5a1739945581f776fd494cc5074cceaec32aeda", "patch": "@@ -244,9 +244,12 @@ use fmt;\n use iter::{FromIterator, FusedIterator, TrustedLen};\n use ops;\n \n-/// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n+/// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///\n /// See the [`std::result`](index.html) module documentation for details.\n+///\n+/// [`Ok`]: enum.Result.html#variant.Ok\n+/// [`Err`]: enum.Result.html#variant.Err\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -269,7 +272,9 @@ impl<T, E> Result<T, E> {\n     // Querying the contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns `true` if the result is `Ok`.\n+    /// Returns `true` if the result is [`Ok`].\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n     ///\n     /// # Examples\n     ///\n@@ -291,7 +296,9 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Returns `true` if the result is `Err`.\n+    /// Returns `true` if the result is [`Err`].\n+    ///\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -433,10 +440,13 @@ impl<T, E> Result<T, E> {\n     /////////////////////////////////////////////////////////////////////////\n \n     /// Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\n-    /// contained `Ok` value, leaving an `Err` value untouched.\n+    /// contained [`Ok`] value, leaving an [`Err`] value untouched.\n     ///\n     /// This function can be used to compose the results of two functions.\n     ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// Print the numbers on each line of a string multiplied by two.\n@@ -461,11 +471,14 @@ impl<T, E> Result<T, E> {\n     }\n \n     /// Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\n-    /// contained `Err` value, leaving an `Ok` value untouched.\n+    /// contained [`Err`] value, leaving an [`Ok`] value untouched.\n     ///\n     /// This function can be used to pass through a successful result while handling\n     /// an error.\n     ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -546,7 +559,10 @@ impl<T, E> Result<T, E> {\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.\n+    /// Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -578,7 +594,10 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.\n+    /// Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// This function can be used for control flow based on `Result` values.\n     ///\n@@ -604,7 +623,10 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.\n+    /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -636,10 +658,13 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.\n+    /// Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.\n     ///\n     /// This function can be used for control flow based on result values.\n     ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -662,9 +687,12 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an `Ok`.\n+    /// Unwraps a result, yielding the content of an [`Ok`].\n     /// Else, it returns `optb`.\n     ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -686,8 +714,11 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an `Ok`.\n-    /// If the value is an `Err` then it calls `op` with its value.\n+    /// Unwraps a result, yielding the content of an [`Ok`].\n+    /// If the value is an [`Err`] then it calls `op` with its value.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -710,12 +741,15 @@ impl<T, E> Result<T, E> {\n }\n \n impl<T, E: fmt::Debug> Result<T, E> {\n-    /// Unwraps a result, yielding the content of an `Ok`.\n+    /// Unwraps a result, yielding the content of an [`Ok`].\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an `Err`, with a panic message provided by the\n-    /// `Err`'s value.\n+    /// Panics if the value is an [`Err`], with a panic message provided by the\n+    /// [`Err`]'s value.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -739,12 +773,15 @@ impl<T, E: fmt::Debug> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an `Ok`.\n+    /// Unwraps a result, yielding the content of an [`Ok`].\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an `Err`, with a panic message including the\n-    /// passed message, and the content of the `Err`.\n+    /// Panics if the value is an [`Err`], with a panic message including the\n+    /// passed message, and the content of the [`Err`].\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -765,12 +802,16 @@ impl<T, E: fmt::Debug> Result<T, E> {\n }\n \n impl<T: fmt::Debug, E> Result<T, E> {\n-    /// Unwraps a result, yielding the content of an `Err`.\n+    /// Unwraps a result, yielding the content of an [`Err`].\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an `Ok`, with a custom panic message provided\n-    /// by the `Ok`'s value.\n+    /// Panics if the value is an [`Ok`], with a custom panic message provided\n+    /// by the [`Ok`]'s value.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n     ///\n     /// # Examples\n     ///\n@@ -792,12 +833,15 @@ impl<T: fmt::Debug, E> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an `Err`.\n+    /// Unwraps a result, yielding the content of an [`Err`].\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an `Ok`, with a panic message including the\n-    /// passed message, and the content of the `Ok`.\n+    /// Panics if the value is an [`Ok`], with a panic message including the\n+    /// passed message, and the content of the [`Ok`].\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -820,16 +864,16 @@ impl<T: fmt::Debug, E> Result<T, E> {\n impl<T: Default, E> Result<T, E> {\n     /// Returns the contained value or a default\n     ///\n-    /// Consumes the `self` argument then, if `Ok`, returns the contained\n-    /// value, otherwise if `Err`, returns the default value for that\n+    /// Consumes the `self` argument then, if [`Ok`], returns the contained\n+    /// value, otherwise if [`Err`], returns the default value for that\n     /// type.\n     ///\n     /// # Examples\n     ///\n     /// Convert a string to an integer, turning poorly-formed strings\n     /// into 0 (the default value for integers). [`parse`] converts\n     /// a string to any other type that implements [`FromStr`], returning an\n-    /// `Err` on error.\n+    /// [`Err`] on error.\n     ///\n     /// ```\n     /// let good_year_from_input = \"1909\";\n@@ -843,6 +887,8 @@ impl<T: Default, E> Result<T, E> {\n     ///\n     /// [`parse`]: ../../std/primitive.str.html#method.parse\n     /// [`FromStr`]: ../../std/str/trait.FromStr.html\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n     #[inline]\n     #[stable(feature = \"result_unwrap_or_default\", since = \"1.16.0\")]\n     pub fn unwrap_or_default(self) -> T {"}]}