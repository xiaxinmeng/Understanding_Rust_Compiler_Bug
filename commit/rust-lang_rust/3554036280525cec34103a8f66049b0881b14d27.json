{"sha": "3554036280525cec34103a8f66049b0881b14d27", "node_id": "C_kwDOAAsO6NoAKDM1NTQwMzYyODA1MjVjZWMzNDEwM2E4ZjY2MDQ5YjA4ODFiMTRkMjc", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-05T03:10:36Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-05T23:15:22Z"}, "message": "Use `nuw` when calculating slice lengths from `Range`s\n\nAn `assume` would definitely not be worth it, but since the flag is almost free we might as well tell LLVM this, especially on `_unchecked` calls where there's no obvious way for it to deduce it.\n\n(Today neither safe nor unsafe indexing gets it: <https://rust.godbolt.org/z/G1jYT548s>)", "tree": {"sha": "3cc8a7e99af6780c6e12b00b84be055fa8c6f1e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cc8a7e99af6780c6e12b00b84be055fa8c6f1e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3554036280525cec34103a8f66049b0881b14d27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3554036280525cec34103a8f66049b0881b14d27", "html_url": "https://github.com/rust-lang/rust/commit/3554036280525cec34103a8f66049b0881b14d27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3554036280525cec34103a8f66049b0881b14d27/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7820b62d20bc548096d4632a3487987308cb4b5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7820b62d20bc548096d4632a3487987308cb4b5d", "html_url": "https://github.com/rust-lang/rust/commit/7820b62d20bc548096d4632a3487987308cb4b5d"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "3539353240a9baa81333defbe312d76e445549b4", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3554036280525cec34103a8f66049b0881b14d27/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3554036280525cec34103a8f66049b0881b14d27/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=3554036280525cec34103a8f66049b0881b14d27", "patch": "@@ -2,6 +2,7 @@\n \n use crate::intrinsics::assert_unsafe_precondition;\n use crate::intrinsics::const_eval_select;\n+use crate::intrinsics::unchecked_sub;\n use crate::ops;\n use crate::ptr;\n \n@@ -375,14 +376,15 @@ unsafe impl<T> const SliceIndex<[T]> for ops::Range<usize> {\n         // SAFETY: the caller guarantees that `slice` is not dangling, so it\n         // cannot be longer than `isize::MAX`. They also guarantee that\n         // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,\n-        // so the call to `add` is safe.\n+        // so the call to `add` is safe and the length calculation cannot overflow.\n         unsafe {\n             assert_unsafe_precondition!(\n                 \"slice::get_unchecked requires that the range is within the slice\",\n                 [T](this: ops::Range<usize>, slice: *const [T]) =>\n                 this.end >= this.start && this.end <= slice.len()\n             );\n-            ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start)\n+            let new_len = unchecked_sub(self.end, self.start);\n+            ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), new_len)\n         }\n     }\n \n@@ -396,7 +398,8 @@ unsafe impl<T> const SliceIndex<[T]> for ops::Range<usize> {\n                 [T](this: ops::Range<usize>, slice: *mut [T]) =>\n                 this.end >= this.start && this.end <= slice.len()\n             );\n-            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)\n+            let new_len = unchecked_sub(self.end, self.start);\n+            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), new_len)\n         }\n     }\n "}, {"sha": "c40d59fb0cf0210adf7b9803dc468e45a02a6d36", "filename": "tests/codegen/slice-indexing.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3554036280525cec34103a8f66049b0881b14d27/tests%2Fcodegen%2Fslice-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3554036280525cec34103a8f66049b0881b14d27/tests%2Fcodegen%2Fslice-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fslice-indexing.rs?ref=3554036280525cec34103a8f66049b0881b14d27", "patch": "@@ -0,0 +1,35 @@\n+// compile-flags: -O\n+// only-64bit (because the LLVM type of i64 for usize shows up)\n+// ignore-debug: the debug assertions get in the way\n+\n+#![crate_type = \"lib\"]\n+\n+use std::ops::Range;\n+\n+// CHECK-LABEL: @index_by_range(\n+#[no_mangle]\n+pub fn index_by_range(x: &[u16], r: Range<usize>) -> &[u16] {\n+    // CHECK: sub nuw i64\n+    &x[r]\n+}\n+\n+// CHECK-LABEL: @get_unchecked_by_range(\n+#[no_mangle]\n+pub unsafe fn get_unchecked_by_range(x: &[u16], r: Range<usize>) -> &[u16] {\n+    // CHECK: sub nuw i64\n+    x.get_unchecked(r)\n+}\n+\n+// CHECK-LABEL: @index_mut_by_range(\n+#[no_mangle]\n+pub fn index_mut_by_range(x: &mut [i32], r: Range<usize>) -> &mut [i32] {\n+    // CHECK: sub nuw i64\n+    &mut x[r]\n+}\n+\n+// CHECK-LABEL: @get_unchecked_mut_by_range(\n+#[no_mangle]\n+pub unsafe fn get_unchecked_mut_by_range(x: &mut [i32], r: Range<usize>) -> &mut [i32] {\n+    // CHECK: sub nuw i64\n+    x.get_unchecked_mut(r)\n+}"}, {"sha": "d9a74b4f3e24cbfc8565bd43abf749af4540a005", "filename": "tests/ui/consts/const-eval/ub-slice-get-unchecked.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3554036280525cec34103a8f66049b0881b14d27/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3554036280525cec34103a8f66049b0881b14d27/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.rs?ref=3554036280525cec34103a8f66049b0881b14d27", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_slice_index)]\n+\n+const A: [(); 5] = [(), (), (), (), ()];\n+\n+// Since the indexing is on a ZST, the addresses are all fine,\n+// but we should still catch the bad range.\n+const B: &[()] = unsafe { A.get_unchecked(3..1) };\n+\n+fn main() {}"}, {"sha": "775e475dfeb413af90264d9805ba73990f31bc12", "filename": "tests/ui/consts/const-eval/ub-slice-get-unchecked.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3554036280525cec34103a8f66049b0881b14d27/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3554036280525cec34103a8f66049b0881b14d27/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.stderr?ref=3554036280525cec34103a8f66049b0881b14d27", "patch": "@@ -0,0 +1,18 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $SRC_DIR/core/src/slice/index.rs:LL:COL\n+   |\n+   = note: overflow executing `unchecked_sub`\n+   |\n+note: inside `<std::ops::Range<usize> as SliceIndex<[()]>>::get_unchecked`\n+  --> $SRC_DIR/core/src/slice/index.rs:LL:COL\n+note: inside `core::slice::<impl [()]>::get_unchecked::<std::ops::Range<usize>>`\n+  --> $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+note: inside `B`\n+  --> $DIR/ub-slice-get-unchecked.rs:7:27\n+   |\n+LL | const B: &[()] = unsafe { A.get_unchecked(3..1) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}]}