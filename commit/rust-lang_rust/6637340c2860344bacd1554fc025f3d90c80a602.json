{"sha": "6637340c2860344bacd1554fc025f3d90c80a602", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MzczNDBjMjg2MDM0NGJhY2QxNTU0ZmMwMjVmM2Q5MGM4MGE2MDI=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T08:42:58Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T08:42:58Z"}, "message": "Properly calculate base working dir for compile units.", "tree": {"sha": "09f4196d87ec54894fc9c3c511cbcc5289973eb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09f4196d87ec54894fc9c3c511cbcc5289973eb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6637340c2860344bacd1554fc025f3d90c80a602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6637340c2860344bacd1554fc025f3d90c80a602", "html_url": "https://github.com/rust-lang/rust/commit/6637340c2860344bacd1554fc025f3d90c80a602", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6637340c2860344bacd1554fc025f3d90c80a602/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3d28bdf169c891a0f3cf82879d8609ba2d44ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff", "html_url": "https://github.com/rust-lang/rust/commit/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "8e293e98f0d0454e3bd46d9f288b4a1ab0a6b59b", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6637340c2860344bacd1554fc025f3d90c80a602/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6637340c2860344bacd1554fc025f3d90c80a602/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=6637340c2860344bacd1554fc025f3d90c80a602", "patch": "@@ -489,7 +489,7 @@ fn build_session_options(match: getopts::match)\n     ret sopts;\n }\n \n-fn build_session(sopts: @session::options) -> session::session {\n+fn build_session(sopts: @session::options, input: str) -> session::session {\n     let target_cfg = build_target_config(sopts);\n     let cstore = cstore::mk_cstore();\n     let filesearch = filesearch::mk_filesearch(\n@@ -498,7 +498,7 @@ fn build_session(sopts: @session::options) -> session::session {\n         sopts.addl_lib_search_paths);\n     ret session::session(target_cfg, sopts, cstore,\n                          @{cm: codemap::new_codemap(), mutable next_id: 1},\n-                         none, 0u, filesearch, false);\n+                         none, 0u, filesearch, false, fs::dirname(input));\n }\n \n fn parse_pretty(sess: session::session, &&name: str) -> pp_mode {\n@@ -644,7 +644,7 @@ fn main(args: [str]) {\n     };\n \n     let sopts = build_session_options(match);\n-    let sess = build_session(sopts);\n+    let sess = build_session(sopts, ifile);\n     let odir = getopts::opt_maybe_str(match, \"out-dir\");\n     let ofile = getopts::opt_maybe_str(match, \"o\");\n     let cfg = build_configuration(sess, binary, ifile);\n@@ -676,7 +676,7 @@ mod test {\n               ok(m) { m }\n             };\n         let sessopts = build_session_options(match);\n-        let sess = build_session(sessopts);\n+        let sess = build_session(sessopts, \"\");\n         let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n         assert (attr::contains_name(cfg, \"test\"));\n     }\n@@ -690,7 +690,7 @@ mod test {\n               ok(m) { m }\n             };\n         let sessopts = build_session_options(match);\n-        let sess = build_session(sessopts);\n+        let sess = build_session(sessopts, \"\");\n         let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n         let test_items = attr::find_meta_items_by_name(cfg, \"test\");\n         assert (vec::len(test_items) == 1u);"}, {"sha": "1bedbf87f7eabd7d06f2a7ac95edcc6c9e69634c", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6637340c2860344bacd1554fc025f3d90c80a602/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6637340c2860344bacd1554fc025f3d90c80a602/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=6637340c2860344bacd1554fc025f3d90c80a602", "patch": "@@ -60,7 +60,8 @@ obj session(targ_cfg: @config,\n             mutable main_fn: option::t<node_id>,\n             mutable err_count: uint,\n             filesearch: filesearch::filesearch,\n-            mutable building_library: bool) {\n+            mutable building_library: bool,\n+            working_dir: str) {\n     fn get_targ_cfg() -> @config { ret targ_cfg; }\n     fn get_opts() -> @options { ret opts; }\n     fn get_cstore() -> metadata::cstore::cstore { cstore }\n@@ -123,6 +124,9 @@ obj session(targ_cfg: @config,\n     fn set_building_library(crate: @ast::crate) {\n         building_library = session::building_library(opts.crate_type, crate);\n     }\n+    fn get_working_dir() -> str {\n+        ret working_dir;\n+    }\n }\n \n fn building_library(req_crate_type: crate_type, crate: @ast::crate) -> bool {"}, {"sha": "c11f65dc34f100b015e92be01e78c1ac592b6e2d", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6637340c2860344bacd1554fc025f3d90c80a602/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6637340c2860344bacd1554fc025f3d90c80a602/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=6637340c2860344bacd1554fc025f3d90c80a602", "patch": "@@ -162,13 +162,18 @@ fn create_compile_unit(cx: @crate_ctxt, full_path: str)\n       option::none. {}\n     }\n \n-    let fname = fs::basename(full_path);\n-    let path = fs::dirname(full_path);\n+    let work_dir = cx.sess.get_working_dir();\n+    let file_path = if str::starts_with(full_path, work_dir) {\n+        str::slice(full_path, str::byte_len(work_dir),\n+                   str::byte_len(full_path))\n+    } else {\n+        full_path\n+    };\n     let unit_metadata = [lltag(tg),\n                          llunused(),\n                          lli32(DW_LANG_RUST),\n-                         llstr(fname),\n-                         llstr(path),\n+                         llstr(file_path),\n+                         llstr(work_dir),\n                          llstr(#env[\"CFG_VERSION\"]),\n                          lli1(false), // main compile unit\n                          lli1(cx.sess.get_opts().optimize != 0u),"}]}