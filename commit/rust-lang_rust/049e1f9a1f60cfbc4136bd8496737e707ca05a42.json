{"sha": "049e1f9a1f60cfbc4136bd8496737e707ca05a42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OWUxZjlhMWY2MGNmYmM0MTM2YmQ4NDk2NzM3ZTcwN2NhMDVhNDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-19T21:46:27Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-19T21:46:27Z"}, "message": "libsyntax: Accept `static` instead of `const` for globals", "tree": {"sha": "ec48a5ca6de88e5740671649e780b4e63e9693b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec48a5ca6de88e5740671649e780b4e63e9693b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/049e1f9a1f60cfbc4136bd8496737e707ca05a42", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/049e1f9a1f60cfbc4136bd8496737e707ca05a42", "html_url": "https://github.com/rust-lang/rust/commit/049e1f9a1f60cfbc4136bd8496737e707ca05a42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/049e1f9a1f60cfbc4136bd8496737e707ca05a42/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7ec80bcce454d55d31c6bd335bb2ad64a7298e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7ec80bcce454d55d31c6bd335bb2ad64a7298e", "html_url": "https://github.com/rust-lang/rust/commit/2e7ec80bcce454d55d31c6bd335bb2ad64a7298e"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "b224ccba114b1a37cf2dfd8f95a3c4de88571a36", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/049e1f9a1f60cfbc4136bd8496737e707ca05a42/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049e1f9a1f60cfbc4136bd8496737e707ca05a42/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=049e1f9a1f60cfbc4136bd8496737e707ca05a42", "patch": "@@ -3477,7 +3477,12 @@ pub impl Parser {\n     fn parse_item_foreign_const(&self, vis: ast::visibility,\n                                 +attrs: ~[attribute]) -> @foreign_item {\n         let lo = self.span.lo;\n-        self.expect_keyword(&~\"const\");\n+\n+        // XXX: Obsolete; remove after snap.\n+        if !self.eat_keyword(&~\"const\") {\n+            self.expect_keyword(&~\"static\");\n+        }\n+\n         let ident = self.parse_ident();\n         self.expect(&token::COLON);\n         let ty = self.parse_ty(false);\n@@ -3506,7 +3511,7 @@ pub impl Parser {\n \n     fn parse_foreign_item(&self, +attrs: ~[attribute]) -> @foreign_item {\n         let vis = self.parse_visibility();\n-        if self.is_keyword(&~\"const\") {\n+        if self.is_keyword(&~\"const\") || self.is_keyword(&~\"static\") {\n             self.parse_item_foreign_const(vis, attrs)\n         } else {\n             self.parse_item_foreign_fn(attrs)\n@@ -3864,13 +3869,18 @@ pub impl Parser {\n             visibility = inherited;\n         }\n \n-        if items_allowed && self.eat_keyword(&~\"const\") {\n+        if items_allowed &&\n+                (self.is_keyword(&~\"const\") ||\n+                (self.is_keyword(&~\"static\") &&\n+                    !self.token_is_keyword(&~\"fn\", &self.look_ahead(1)))) {\n             // CONST ITEM\n+            self.bump();\n             let (ident, item_, extra_attrs) = self.parse_item_const();\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));\n-        } else if foreign_items_allowed && self.is_keyword(&~\"const\") {\n+        } else if foreign_items_allowed &&\n+                (self.is_keyword(&~\"const\") || self.is_keyword(&~\"static\")) {\n             // FOREIGN CONST ITEM\n             let item = self.parse_item_foreign_const(visibility, attrs);\n             return iovi_foreign_item(item);"}, {"sha": "36c9e36ed5d3245481256d4cac8a7348bb483a5a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/049e1f9a1f60cfbc4136bd8496737e707ca05a42/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049e1f9a1f60cfbc4136bd8496737e707ca05a42/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=049e1f9a1f60cfbc4136bd8496737e707ca05a42", "patch": "@@ -452,7 +452,7 @@ pub fn print_foreign_item(s: @ps, item: @ast::foreign_item) {\n         end(s); // end the outer fn box\n       }\n       ast::foreign_item_const(t) => {\n-        head(s, ~\"const\");\n+        head(s, ~\"static\");\n         print_ident(s, item.ident);\n         word_space(s, ~\":\");\n         print_type(s, t);\n@@ -471,7 +471,7 @@ pub fn print_item(s: @ps, &&item: @ast::item) {\n     (s.ann.pre)(ann_node);\n     match /*bad*/ copy item.node {\n       ast::item_const(ty, expr) => {\n-        head(s, visibility_qualified(item.vis, ~\"const\"));\n+        head(s, visibility_qualified(item.vis, ~\"static\"));\n         print_ident(s, item.ident);\n         word_space(s, ~\":\");\n         print_type(s, ty);"}, {"sha": "f5c691d512e1225d190c188e4c84239ad1f535f3", "filename": "src/test/run-pass/new-style-constants.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/049e1f9a1f60cfbc4136bd8496737e707ca05a42/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049e1f9a1f60cfbc4136bd8496737e707ca05a42/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs?ref=049e1f9a1f60cfbc4136bd8496737e707ca05a42", "patch": "@@ -0,0 +1,8 @@\n+use core::io::println;\n+\n+static FOO: int = 3;\n+\n+fn main() {\n+    println(fmt!(\"%d\", FOO));\n+}\n+"}]}