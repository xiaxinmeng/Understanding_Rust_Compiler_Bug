{"sha": "45ccd50d0e52e006fdd81f854b4cd711ac439e85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Y2NkNTBkMGU1MmUwMDZmZGQ4MWY4NTRiNGNkNzExYWM0MzllODU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-04-04T22:31:43Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-04-04T22:49:57Z"}, "message": "Don't report disambiguator error if link would have been ignored\n\nThis prevents us from warning on links such as `<hello@example.com>`.\nNote that we still warn on links such as `<hello@localhost>` because\nthey have no dots in them. However, the links will still work, even\nthough a warning is reported.", "tree": {"sha": "a972b6a9cc98b15c4ced03b94dfb19068b99b01c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a972b6a9cc98b15c4ced03b94dfb19068b99b01c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45ccd50d0e52e006fdd81f854b4cd711ac439e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45ccd50d0e52e006fdd81f854b4cd711ac439e85", "html_url": "https://github.com/rust-lang/rust/commit/45ccd50d0e52e006fdd81f854b4cd711ac439e85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45ccd50d0e52e006fdd81f854b4cd711ac439e85/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad6a443cfee83e1f7d29c9ec0de26143c54a617", "html_url": "https://github.com/rust-lang/rust/commit/8ad6a443cfee83e1f7d29c9ec0de26143c54a617"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "545fbf2618121f23645026ca6731a00f1cfefc1d", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/45ccd50d0e52e006fdd81f854b4cd711ac439e85/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ccd50d0e52e006fdd81f854b4cd711ac439e85/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=45ccd50d0e52e006fdd81f854b4cd711ac439e85", "patch": "@@ -978,14 +978,18 @@ impl LinkCollector<'_, '_> {\n             Ok(Some((d, path))) => (path.trim(), Some(d)),\n             Ok(None) => (link.trim(), None),\n             Err((err_msg, relative_range)) => {\n-                let disambiguator_range = (no_backticks_range.start + relative_range.start)\n-                    ..(no_backticks_range.start + relative_range.end);\n-                disambiguator_error(self.cx, &item, dox, disambiguator_range, &err_msg);\n+                if !should_ignore_link_with_disambiguators(link) {\n+                    // Only report error if we would not have ignored this link.\n+                    // See issue #83859.\n+                    let disambiguator_range = (no_backticks_range.start + relative_range.start)\n+                        ..(no_backticks_range.start + relative_range.end);\n+                    disambiguator_error(self.cx, &item, dox, disambiguator_range, &err_msg);\n+                }\n                 return None;\n             }\n         };\n \n-        if path_str.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;\".contains(ch))) {\n+        if should_ignore_link(path_str) {\n             return None;\n         }\n \n@@ -1515,6 +1519,22 @@ fn range_between_backticks(ori_link: &MarkdownLink) -> Range<usize> {\n         ..(ori_link.range.start + before_second_backtick_group)\n }\n \n+/// Returns true if we should ignore `link` due to it being unlikely\n+/// that it is an intra-doc link. `link` should still have disambiguators\n+/// if there were any.\n+///\n+/// The difference between this and [`should_ignore_link()`] is that this\n+/// check should only be used on links that still have disambiguators.\n+fn should_ignore_link_with_disambiguators(link: &str) -> bool {\n+    link.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;@()\".contains(ch)))\n+}\n+\n+/// Returns true if we should ignore `path_str` due to it being unlikely\n+/// that it is an intra-doc link.\n+fn should_ignore_link(path_str: &str) -> bool {\n+    path_str.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;\".contains(ch)))\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n /// Disambiguators for a link.\n crate enum Disambiguator {"}, {"sha": "417618c74582cda0c897cf8a7658eb6e0f1ef3b0", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ccd50d0e52e006fdd81f854b4cd711ac439e85/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ccd50d0e52e006fdd81f854b4cd711ac439e85/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs?ref=45ccd50d0e52e006fdd81f854b4cd711ac439e85", "patch": "@@ -0,0 +1,6 @@\n+#![deny(warnings)]\n+\n+//! Email me at <hello@localhost>.\n+//~^ ERROR unknown disambiguator `hello`\n+\n+//! This should *not* warn: <hello@example.com>."}, {"sha": "de215b2163bd4e28d1100720c34876aa08ec4f8f", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/45ccd50d0e52e006fdd81f854b4cd711ac439e85/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45ccd50d0e52e006fdd81f854b4cd711ac439e85/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr?ref=45ccd50d0e52e006fdd81f854b4cd711ac439e85", "patch": "@@ -0,0 +1,15 @@\n+error: unknown disambiguator `hello`\n+  --> $DIR/email-address-localhost.rs:3:18\n+   |\n+LL | //! Email me at <hello@localhost>.\n+   |                  ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/email-address-localhost.rs:1:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c407eb80da225aed5eb1895a02d5fc33eb387b26", "filename": "src/test/rustdoc/intra-doc/email-address.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ccd50d0e52e006fdd81f854b4cd711ac439e85/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ccd50d0e52e006fdd81f854b4cd711ac439e85/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs?ref=45ccd50d0e52e006fdd81f854b4cd711ac439e85", "patch": "@@ -0,0 +1,6 @@\n+//! Email me at <hello@example.com>.\n+//! Email me at <hello-world@example.com>.\n+//! Email me at <hello@localhost> (this warns but will still become a link).\n+// @has email_address/index.html '//a[@href=\"mailto:hello@example.com\"]' 'hello@example.com'\n+// @has email_address/index.html '//a[@href=\"mailto:hello-world@example.com\"]' 'hello-world@example.com'\n+// @has email_address/index.html '//a[@href=\"mailto:hello@localhost\"]' 'hello@localhost'"}]}