{"sha": "7636de33cf7935835d3be4fc504b1acc218dec6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MzZkZTMzY2Y3OTM1ODM1ZDNiZTRmYzUwNGIxYWNjMjE4ZGVjNmM=", "commit": {"author": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-08-04T11:02:17Z"}, "committer": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-08-30T18:16:23Z"}, "message": "Point to no_mangle/export_name attribute when linting", "tree": {"sha": "443b18aeb0b65e78d3cdcc470cf31643257c4fc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/443b18aeb0b65e78d3cdcc470cf31643257c4fc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7636de33cf7935835d3be4fc504b1acc218dec6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7636de33cf7935835d3be4fc504b1acc218dec6c", "html_url": "https://github.com/rust-lang/rust/commit/7636de33cf7935835d3be4fc504b1acc218dec6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7636de33cf7935835d3be4fc504b1acc218dec6c/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ed3661427670346b8071ee32a6577892e8ea506", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed3661427670346b8071ee32a6577892e8ea506", "html_url": "https://github.com/rust-lang/rust/commit/9ed3661427670346b8071ee32a6577892e8ea506"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "0a477fa5f2b7209147f7aa271548d3babadd57c4", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7636de33cf7935835d3be4fc504b1acc218dec6c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7636de33cf7935835d3be4fc504b1acc218dec6c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7636de33cf7935835d3be4fc504b1acc218dec6c", "patch": "@@ -290,34 +290,34 @@ impl EarlyLintPass for UnsafeCode {\n             }\n \n             ast::ItemKind::Fn(..) => {\n-                if attr::contains_name(&it.attrs, sym::no_mangle) {\n+                if let Some(attr) = attr::find_by_name(&it.attrs, sym::no_mangle) {\n                     self.report_overriden_symbol_name(\n                         cx,\n-                        it.ident.span,\n+                        attr.span,\n                         \"declaration of a `no_mangle` function\",\n                     );\n                 }\n-                if attr::contains_name(&it.attrs, sym::export_name) {\n+                if let Some(attr) = attr::find_by_name(&it.attrs, sym::export_name) {\n                     self.report_overriden_symbol_name(\n                         cx,\n-                        it.ident.span,\n+                        attr.span,\n                         \"declaration of a function with `export_name`\",\n                     );\n                 }\n             }\n \n             ast::ItemKind::Static(..) => {\n-                if attr::contains_name(&it.attrs, sym::no_mangle) {\n+                if let Some(attr) = attr::find_by_name(&it.attrs, sym::no_mangle) {\n                     self.report_overriden_symbol_name(\n                         cx,\n-                        it.ident.span,\n+                        attr.span,\n                         \"declaration of a `no_mangle` static\",\n                     );\n                 }\n-                if attr::contains_name(&it.attrs, sym::export_name) {\n+                if let Some(attr) = attr::find_by_name(&it.attrs, sym::export_name) {\n                     self.report_overriden_symbol_name(\n                         cx,\n-                        it.ident.span,\n+                        attr.span,\n                         \"declaration of a static with `export_name`\",\n                     );\n                 }"}, {"sha": "a8ef047e517b49569e315cf85ad71023ad179dcd", "filename": "src/test/ui/lint/lint-unsafe-code.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7636de33cf7935835d3be4fc504b1acc218dec6c/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7636de33cf7935835d3be4fc504b1acc218dec6c/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr?ref=7636de33cf7935835d3be4fc504b1acc218dec6c", "patch": "@@ -1,8 +1,8 @@\n error: declaration of a `no_mangle` function\n-  --> $DIR/lint-unsafe-code.rs:31:17\n+  --> $DIR/lint-unsafe-code.rs:31:1\n    |\n LL | #[no_mangle] fn foo() {}\n-   |                 ^^^\n+   | ^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-unsafe-code.rs:3:9\n@@ -12,26 +12,26 @@ LL | #![deny(unsafe_code)]\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of a `no_mangle` static\n-  --> $DIR/lint-unsafe-code.rs:32:21\n+  --> $DIR/lint-unsafe-code.rs:32:1\n    |\n LL | #[no_mangle] static FOO: u32 = 5;\n-   |                     ^^^\n+   | ^^^^^^^^^^^^\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of a function with `export_name`\n-  --> $DIR/lint-unsafe-code.rs:34:27\n+  --> $DIR/lint-unsafe-code.rs:34:1\n    |\n LL | #[export_name = \"bar\"] fn bar() {}\n-   |                           ^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of a static with `export_name`\n-  --> $DIR/lint-unsafe-code.rs:35:31\n+  --> $DIR/lint-unsafe-code.rs:35:1\n    |\n LL | #[export_name = \"BAR\"] static BAR: u32 = 5;\n-   |                               ^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n@@ -114,10 +114,10 @@ LL |     unsafe {}\n    |     ^^^^^^^^^\n \n error: declaration of a `no_mangle` function\n-  --> $DIR/lint-unsafe-code.rs:21:25\n+  --> $DIR/lint-unsafe-code.rs:21:9\n    |\n LL |         #[no_mangle] fn foo() {}\n-   |                         ^^^\n+   |         ^^^^^^^^^^^^\n ...\n LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n@@ -126,10 +126,10 @@ LL |     unsafe_in_macro!()\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: declaration of a `no_mangle` static\n-  --> $DIR/lint-unsafe-code.rs:22:29\n+  --> $DIR/lint-unsafe-code.rs:22:9\n    |\n LL |         #[no_mangle] static FOO: u32 = 5;\n-   |                             ^^^\n+   |         ^^^^^^^^^^^^\n ...\n LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n@@ -138,10 +138,10 @@ LL |     unsafe_in_macro!()\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: declaration of a function with `export_name`\n-  --> $DIR/lint-unsafe-code.rs:23:35\n+  --> $DIR/lint-unsafe-code.rs:23:9\n    |\n LL |         #[export_name = \"bar\"] fn bar() {}\n-   |                                   ^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n@@ -150,10 +150,10 @@ LL |     unsafe_in_macro!()\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: declaration of a static with `export_name`\n-  --> $DIR/lint-unsafe-code.rs:25:39\n+  --> $DIR/lint-unsafe-code.rs:25:9\n    |\n LL |         #[export_name = \"BAR\"] static BAR: u32 = 5;\n-   |                                       ^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation"}]}