{"sha": "671926ac93f0ff921758a919eaf87c056979189f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MTkyNmFjOTNmMGZmOTIxNzU4YTkxOWVhZjg3YzA1Njk3OTE4OWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-30T12:45:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-30T12:45:49Z"}, "message": "Merge #3666\n\n3666: Reload part of the server configuration without restarts r=matklad a=SomeoneToIgnore\n\nPartially addresses https://github.com/rust-analyzer/rust-analyzer/issues/2857\r\n\r\nCloses #3751\n\nReloads all server configuration that's not related to VFS without restarts.\r\n\r\nThe VFS-related parameters are not considered, since VFS is planned to be rewritten/replaced in the future and I have a suspicion that with the current code, swapping the VFS and the file watchers on the fly will cause big troubles.\r\n\r\nI have to store and process the config request id separately, since the `workspace/configuration` response returns `any[]` (https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_configuration), if there's a better way to handle those responses, let me know.\r\n\r\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "111c2cc751cb7fcca38eb7518e1d39af394ee243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/111c2cc751cb7fcca38eb7518e1d39af394ee243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/671926ac93f0ff921758a919eaf87c056979189f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJegen9CRBK7hj4Ov3rIwAAdHIIAKUgYPxZKpq2x3kgGBfcnC43\n8UflRoWGma8azn7VKHEXjQD6TGXdFAIXun72dISZfWFRwST/ihXQvDOVOpV1wmG+\naSBVq1FXkJ6h4xfAU7ORPCiZ5CWfF/K6qseI6t7kot4TG/0pN8JvAGsu79EWU2rW\n+6EbkjQV4/2oIHAQ2AsJVNFBCa81Eh8HjDmZ23tDvm7Bj8jdy7gu3kX3CMONpQ8c\nj9n2/5fyrBq9a4ECTli1jC6BaP6+nrBqVyD++Of0MC8xaHaUUD97K5LuwFd8Zpfj\nQ4SKhS306Cxuj7lb4ewFgxzmnUuqkx4Wulit1IgtBFSkZ2h5RkrhvagLQeJA1j8=\n=ooR0\n-----END PGP SIGNATURE-----\n", "payload": "tree 111c2cc751cb7fcca38eb7518e1d39af394ee243\nparent 9e12b9e6fdc03ea6bc35a88cfb5d5d6751672ec8\nparent 4c897d8d2dd047e0906d585318866c9ae7a21610\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585572349 +0000\ncommitter GitHub <noreply@github.com> 1585572349 +0000\n\nMerge #3666\n\n3666: Reload part of the server configuration without restarts r=matklad a=SomeoneToIgnore\n\nPartially addresses https://github.com/rust-analyzer/rust-analyzer/issues/2857\r\n\r\nCloses #3751\n\nReloads all server configuration that's not related to VFS without restarts.\r\n\r\nThe VFS-related parameters are not considered, since VFS is planned to be rewritten/replaced in the future and I have a suspicion that with the current code, swapping the VFS and the file watchers on the fly will cause big troubles.\r\n\r\nI have to store and process the config request id separately, since the `workspace/configuration` response returns `any[]` (https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_configuration), if there's a better way to handle those responses, let me know.\r\n\r\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/671926ac93f0ff921758a919eaf87c056979189f", "html_url": "https://github.com/rust-lang/rust/commit/671926ac93f0ff921758a919eaf87c056979189f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/671926ac93f0ff921758a919eaf87c056979189f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e12b9e6fdc03ea6bc35a88cfb5d5d6751672ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e12b9e6fdc03ea6bc35a88cfb5d5d6751672ec8", "html_url": "https://github.com/rust-lang/rust/commit/9e12b9e6fdc03ea6bc35a88cfb5d5d6751672ec8"}, {"sha": "4c897d8d2dd047e0906d585318866c9ae7a21610", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c897d8d2dd047e0906d585318866c9ae7a21610", "html_url": "https://github.com/rust-lang/rust/commit/4c897d8d2dd047e0906d585318866c9ae7a21610"}], "stats": {"total": 315, "additions": 205, "deletions": 110}, "files": [{"sha": "2692c1bf55208431290c291e639da7517baa6198", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/671926ac93f0ff921758a919eaf87c056979189f/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671926ac93f0ff921758a919eaf87c056979189f/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=671926ac93f0ff921758a919eaf87c056979189f", "patch": "@@ -95,6 +95,9 @@ impl CheckWatcherThread {\n     }\n \n     fn run(&mut self, task_send: &Sender<CheckTask>, cmd_recv: &Receiver<CheckCommand>) {\n+        // If we rerun the thread, we need to discard the previous check results first\n+        self.clean_previous_results(task_send);\n+\n         loop {\n             select! {\n                 recv(&cmd_recv) -> cmd => match cmd {\n@@ -127,6 +130,13 @@ impl CheckWatcherThread {\n         }\n     }\n \n+    fn clean_previous_results(&self, task_send: &Sender<CheckTask>) {\n+        task_send.send(CheckTask::ClearDiagnostics).unwrap();\n+        task_send\n+            .send(CheckTask::Status(WorkDoneProgress::End(WorkDoneProgressEnd { message: None })))\n+            .unwrap();\n+    }\n+\n     fn should_recheck(&mut self) -> bool {\n         if let Some(_last_update_req) = &self.last_update_req {\n             // We currently only request an update on save, as we need up to"}, {"sha": "937c9caa51868b4dbdf757a8ee64bfd097638843", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/671926ac93f0ff921758a919eaf87c056979189f/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671926ac93f0ff921758a919eaf87c056979189f/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=671926ac93f0ff921758a919eaf87c056979189f", "patch": "@@ -138,6 +138,11 @@ impl AnalysisHost {\n     pub fn new(lru_capacity: Option<usize>) -> AnalysisHost {\n         AnalysisHost { db: RootDatabase::new(lru_capacity) }\n     }\n+\n+    pub fn update_lru_capacity(&mut self, lru_capacity: Option<usize>) {\n+        self.db.update_lru_capacity(lru_capacity);\n+    }\n+\n     /// Returns a snapshot of the current state, which you can query for\n     /// semantic information.\n     pub fn analysis(&self) -> Analysis {"}, {"sha": "e6f2d36e946324f2107351e6631a77fad49b79c4", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/671926ac93f0ff921758a919eaf87c056979189f/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671926ac93f0ff921758a919eaf87c056979189f/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=671926ac93f0ff921758a919eaf87c056979189f", "patch": "@@ -115,12 +115,16 @@ impl RootDatabase {\n         db.set_crate_graph_with_durability(Default::default(), Durability::HIGH);\n         db.set_local_roots_with_durability(Default::default(), Durability::HIGH);\n         db.set_library_roots_with_durability(Default::default(), Durability::HIGH);\n-        let lru_capacity = lru_capacity.unwrap_or(ra_db::DEFAULT_LRU_CAP);\n-        db.query_mut(ra_db::ParseQuery).set_lru_capacity(lru_capacity);\n-        db.query_mut(hir::db::ParseMacroQuery).set_lru_capacity(lru_capacity);\n-        db.query_mut(hir::db::MacroExpandQuery).set_lru_capacity(lru_capacity);\n+        db.update_lru_capacity(lru_capacity);\n         db\n     }\n+\n+    pub fn update_lru_capacity(&mut self, lru_capacity: Option<usize>) {\n+        let lru_capacity = lru_capacity.unwrap_or(ra_db::DEFAULT_LRU_CAP);\n+        self.query_mut(ra_db::ParseQuery).set_lru_capacity(lru_capacity);\n+        self.query_mut(hir::db::ParseMacroQuery).set_lru_capacity(lru_capacity);\n+        self.query_mut(hir::db::MacroExpandQuery).set_lru_capacity(lru_capacity);\n+    }\n }\n \n impl salsa::ParallelDatabase for RootDatabase {"}, {"sha": "79ea90cc94b2429c498619af6500cf90bff57370", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 107, "deletions": 61, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/671926ac93f0ff921758a919eaf87c056979189f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671926ac93f0ff921758a919eaf87c056979189f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=671926ac93f0ff921758a919eaf87c056979189f", "patch": "@@ -17,8 +17,9 @@ use std::{\n use crossbeam_channel::{never, select, unbounded, RecvError, Sender};\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n use lsp_types::{\n-    ClientCapabilities, NumberOrString, WorkDoneProgress, WorkDoneProgressBegin,\n-    WorkDoneProgressCreateParams, WorkDoneProgressEnd, WorkDoneProgressReport,\n+    ClientCapabilities, NumberOrString, TextDocumentClientCapabilities, WorkDoneProgress,\n+    WorkDoneProgressBegin, WorkDoneProgressCreateParams, WorkDoneProgressEnd,\n+    WorkDoneProgressReport,\n };\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckTask};\n use ra_ide::{Canceled, FileId, InlayHintsOptions, LibraryData, SourceRootId};\n@@ -40,6 +41,7 @@ use crate::{\n     world::{Options, WorldSnapshot, WorldState},\n     Result, ServerConfig,\n };\n+use req::ConfigurationParams;\n \n #[derive(Debug)]\n pub struct LspError {\n@@ -63,6 +65,53 @@ impl fmt::Display for LspError {\n \n impl Error for LspError {}\n \n+fn get_feature_flags(config: &ServerConfig, connection: &Connection) -> FeatureFlags {\n+    let mut ff = FeatureFlags::default();\n+    for (flag, &value) in &config.feature_flags {\n+        if ff.set(flag.as_str(), value).is_err() {\n+            log::error!(\"unknown feature flag: {:?}\", flag);\n+            show_message(\n+                req::MessageType::Error,\n+                format!(\"unknown feature flag: {:?}\", flag),\n+                &connection.sender,\n+            );\n+        }\n+    }\n+    log::info!(\"feature_flags: {:#?}\", ff);\n+    ff\n+}\n+\n+fn get_options(\n+    config: &ServerConfig,\n+    text_document_caps: Option<&TextDocumentClientCapabilities>,\n+) -> Options {\n+    Options {\n+        publish_decorations: config.publish_decorations,\n+        supports_location_link: text_document_caps\n+            .and_then(|it| it.definition)\n+            .and_then(|it| it.link_support)\n+            .unwrap_or(false),\n+        line_folding_only: text_document_caps\n+            .and_then(|it| it.folding_range.as_ref())\n+            .and_then(|it| it.line_folding_only)\n+            .unwrap_or(false),\n+        inlay_hints: InlayHintsOptions {\n+            type_hints: config.inlay_hints_type,\n+            parameter_hints: config.inlay_hints_parameter,\n+            chaining_hints: config.inlay_hints_chaining,\n+            max_length: config.inlay_hints_max_length,\n+        },\n+        cargo_watch: CheckOptions {\n+            enable: config.cargo_watch_enable,\n+            args: config.cargo_watch_args.clone(),\n+            command: config.cargo_watch_command.clone(),\n+            all_targets: config.cargo_watch_all_targets,\n+        },\n+        rustfmt_args: config.rustfmt_args.clone(),\n+        vscode_lldb: config.vscode_lldb,\n+    }\n+}\n+\n pub fn main_loop(\n     ws_roots: Vec<PathBuf>,\n     client_caps: ClientCapabilities,\n@@ -90,23 +139,10 @@ pub fn main_loop(\n         SetThreadPriority(thread, thread_priority_above_normal);\n     }\n \n+    let text_document_caps = client_caps.text_document.as_ref();\n     let mut loop_state = LoopState::default();\n     let mut world_state = {\n-        let feature_flags = {\n-            let mut ff = FeatureFlags::default();\n-            for (flag, value) in config.feature_flags {\n-                if ff.set(flag.as_str(), value).is_err() {\n-                    log::error!(\"unknown feature flag: {:?}\", flag);\n-                    show_message(\n-                        req::MessageType::Error,\n-                        format!(\"unknown feature flag: {:?}\", flag),\n-                        &connection.sender,\n-                    );\n-                }\n-            }\n-            ff\n-        };\n-        log::info!(\"feature_flags: {:#?}\", feature_flags);\n+        let feature_flags = get_feature_flags(&config, &connection);\n \n         // FIXME: support dynamic workspace loading.\n         let workspaces = {\n@@ -168,42 +204,13 @@ pub fn main_loop(\n             connection.sender.send(request.into()).unwrap();\n         }\n \n-        let options = {\n-            let text_document_caps = client_caps.text_document.as_ref();\n-            Options {\n-                publish_decorations: config.publish_decorations,\n-                supports_location_link: text_document_caps\n-                    .and_then(|it| it.definition)\n-                    .and_then(|it| it.link_support)\n-                    .unwrap_or(false),\n-                line_folding_only: text_document_caps\n-                    .and_then(|it| it.folding_range.as_ref())\n-                    .and_then(|it| it.line_folding_only)\n-                    .unwrap_or(false),\n-                inlay_hints: InlayHintsOptions {\n-                    type_hints: config.inlay_hints_type,\n-                    parameter_hints: config.inlay_hints_parameter,\n-                    chaining_hints: config.inlay_hints_chaining,\n-                    max_length: config.inlay_hints_max_length,\n-                },\n-                cargo_watch: CheckOptions {\n-                    enable: config.cargo_watch_enable,\n-                    args: config.cargo_watch_args,\n-                    command: config.cargo_watch_command,\n-                    all_targets: config.cargo_watch_all_targets,\n-                },\n-                rustfmt_args: config.rustfmt_args,\n-                vscode_lldb: config.vscode_lldb,\n-            }\n-        };\n-\n         WorldState::new(\n             ws_roots,\n             workspaces,\n             config.lru_capacity,\n             &globs,\n             Watch(!config.use_client_watching),\n-            options,\n+            get_options(&config, text_document_caps),\n             feature_flags,\n         )\n     };\n@@ -247,6 +254,7 @@ pub fn main_loop(\n                 &task_sender,\n                 &libdata_sender,\n                 &connection,\n+                text_document_caps,\n                 &mut world_state,\n                 &mut loop_state,\n                 event,\n@@ -336,10 +344,10 @@ struct LoopState {\n     in_flight_libraries: usize,\n     pending_libraries: Vec<(SourceRootId, Vec<(FileId, RelativePathBuf, Arc<String>)>)>,\n     workspace_loaded: bool,\n-\n     roots_progress_reported: Option<usize>,\n     roots_scanned: usize,\n     roots_total: usize,\n+    configuration_request_id: Option<RequestId>,\n }\n \n impl LoopState {\n@@ -357,6 +365,7 @@ fn loop_turn(\n     task_sender: &Sender<Task>,\n     libdata_sender: &Sender<LibraryData>,\n     connection: &Connection,\n+    text_document_caps: Option<&TextDocumentClientCapabilities>,\n     world_state: &mut WorldState,\n     loop_state: &mut LoopState,\n     event: Event,\n@@ -397,19 +406,47 @@ fn loop_turn(\n                 req,\n             )?,\n             Message::Notification(not) => {\n-                on_notification(\n-                    &connection.sender,\n-                    world_state,\n-                    &mut loop_state.pending_requests,\n-                    &mut loop_state.subscriptions,\n-                    not,\n-                )?;\n+                on_notification(&connection.sender, world_state, loop_state, not)?;\n             }\n             Message::Response(resp) => {\n                 let removed = loop_state.pending_responses.remove(&resp.id);\n                 if !removed {\n                     log::error!(\"unexpected response: {:?}\", resp)\n                 }\n+\n+                if Some(&resp.id) == loop_state.configuration_request_id.as_ref() {\n+                    loop_state.configuration_request_id = None;\n+                    log::debug!(\"config update response: '{:?}\", resp);\n+                    let Response { error, result, .. } = resp;\n+\n+                    match (\n+                        error,\n+                        result.map(|result| serde_json::from_value::<Vec<ServerConfig>>(result)),\n+                    ) {\n+                        (Some(err), _) => {\n+                            log::error!(\"failed to fetch the server settings: {:?}\", err)\n+                        }\n+                        (None, Some(Ok(new_config))) => {\n+                            let new_config = new_config\n+                                .first()\n+                                .expect(\n+                                    \"the client is expected to always send a non-empty config data\",\n+                                )\n+                                .to_owned();\n+                            world_state.update_configuration(\n+                                new_config.lru_capacity,\n+                                get_options(&new_config, text_document_caps),\n+                                get_feature_flags(&new_config, connection),\n+                            );\n+                        }\n+                        (None, Some(Err(e))) => {\n+                            log::error!(\"failed to parse client config response: {}\", e)\n+                        }\n+                        (None, None) => {\n+                            log::error!(\"received empty server settings response from the client\")\n+                        }\n+                    }\n+                }\n             }\n         },\n     };\n@@ -569,8 +606,7 @@ fn on_request(\n fn on_notification(\n     msg_sender: &Sender<Message>,\n     state: &mut WorldState,\n-    pending_requests: &mut PendingRequests,\n-    subs: &mut Subscriptions,\n+    loop_state: &mut LoopState,\n     not: Notification,\n ) -> Result<()> {\n     let not = match notification_cast::<req::Cancel>(not) {\n@@ -579,7 +615,7 @@ fn on_notification(\n                 NumberOrString::Number(id) => id.into(),\n                 NumberOrString::String(id) => id.into(),\n             };\n-            if pending_requests.cancel(&id) {\n+            if loop_state.pending_requests.cancel(&id) {\n                 let response = Response::new_err(\n                     id,\n                     ErrorCode::RequestCanceled as i32,\n@@ -598,7 +634,7 @@ fn on_notification(\n             if let Some(file_id) =\n                 state.vfs.write().add_file_overlay(&path, params.text_document.text)\n             {\n-                subs.add_sub(FileId(file_id.0));\n+                loop_state.subscriptions.add_sub(FileId(file_id.0));\n             }\n             return Ok(());\n         }\n@@ -629,7 +665,7 @@ fn on_notification(\n             let uri = params.text_document.uri;\n             let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n             if let Some(file_id) = state.vfs.write().remove_file_overlay(path.as_path()) {\n-                subs.remove_sub(FileId(file_id.0));\n+                loop_state.subscriptions.remove_sub(FileId(file_id.0));\n             }\n             let params =\n                 req::PublishDiagnosticsParams { uri, diagnostics: Vec::new(), version: None };\n@@ -640,7 +676,17 @@ fn on_notification(\n         Err(not) => not,\n     };\n     let not = match notification_cast::<req::DidChangeConfiguration>(not) {\n-        Ok(_params) => {\n+        Ok(_) => {\n+            // As stated in https://github.com/microsoft/language-server-protocol/issues/676,\n+            // this notification's parameters should be ignored and the actual config queried separately.\n+            let request_id = loop_state.next_request_id();\n+            let request = request_new::<req::WorkspaceConfiguration>(\n+                request_id.clone(),\n+                ConfigurationParams::default(),\n+            );\n+            msg_sender.send(request.into())?;\n+            loop_state.configuration_request_id = Some(request_id);\n+\n             return Ok(());\n         }\n         Err(not) => not,"}, {"sha": "994f0ed61416592cc639fa4b25f15bf57a410deb", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671926ac93f0ff921758a919eaf87c056979189f/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671926ac93f0ff921758a919eaf87c056979189f/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=671926ac93f0ff921758a919eaf87c056979189f", "patch": "@@ -6,7 +6,7 @@ use serde::{Deserialize, Serialize};\n \n pub use lsp_types::{\n     notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens,\n-    CodeLensParams, CompletionParams, CompletionResponse, DiagnosticTag,\n+    CodeLensParams, CompletionParams, CompletionResponse, ConfigurationParams, DiagnosticTag,\n     DidChangeConfigurationParams, DidChangeWatchedFilesParams,\n     DidChangeWatchedFilesRegistrationOptions, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n     DocumentSymbolResponse, FileSystemWatcher, Hover, InitializeResult, MessageType,"}, {"sha": "ad096a1d89964491019515004f647ec1244cece5", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/671926ac93f0ff921758a919eaf87c056979189f/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671926ac93f0ff921758a919eaf87c056979189f/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=671926ac93f0ff921758a919eaf87c056979189f", "patch": "@@ -31,6 +31,24 @@ use crate::{\n use ra_db::ExternSourceId;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n+fn create_watcher(workspaces: &[ProjectWorkspace], options: &Options) -> Option<CheckWatcher> {\n+    // FIXME: Figure out the multi-workspace situation\n+    workspaces\n+        .iter()\n+        .find_map(|w| match w {\n+            ProjectWorkspace::Cargo { cargo, .. } => Some(cargo),\n+            ProjectWorkspace::Json { .. } => None,\n+        })\n+        .map(|cargo| {\n+            let cargo_project_root = cargo.workspace_root().to_path_buf();\n+            Some(CheckWatcher::new(&options.cargo_watch, cargo_project_root))\n+        })\n+        .unwrap_or_else(|| {\n+            log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");\n+            None\n+        })\n+}\n+\n #[derive(Debug, Clone)]\n pub struct Options {\n     pub publish_decorations: bool,\n@@ -167,21 +185,7 @@ impl WorldState {\n             });\n         change.set_crate_graph(crate_graph);\n \n-        // FIXME: Figure out the multi-workspace situation\n-        let check_watcher = workspaces\n-            .iter()\n-            .find_map(|w| match w {\n-                ProjectWorkspace::Cargo { cargo, .. } => Some(cargo),\n-                ProjectWorkspace::Json { .. } => None,\n-            })\n-            .map(|cargo| {\n-                let cargo_project_root = cargo.workspace_root().to_path_buf();\n-                Some(CheckWatcher::new(&options.cargo_watch, cargo_project_root))\n-            })\n-            .unwrap_or_else(|| {\n-                log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");\n-                None\n-            });\n+        let check_watcher = create_watcher(&workspaces, &options);\n \n         let mut analysis_host = AnalysisHost::new(lru_capacity);\n         analysis_host.apply_change(change);\n@@ -199,6 +203,18 @@ impl WorldState {\n         }\n     }\n \n+    pub fn update_configuration(\n+        &mut self,\n+        lru_capacity: Option<usize>,\n+        options: Options,\n+        feature_flags: FeatureFlags,\n+    ) {\n+        self.feature_flags = Arc::new(feature_flags);\n+        self.analysis_host.update_lru_capacity(lru_capacity);\n+        self.check_watcher = create_watcher(&self.workspaces, &options);\n+        self.options = options;\n+    }\n+\n     /// Returns a vec of libraries\n     /// FIXME: better API here\n     pub fn process_changes("}, {"sha": "d72ecc58fc27b45969329bb9b5c5a47cd0e340c3", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/671926ac93f0ff921758a919eaf87c056979189f/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/671926ac93f0ff921758a919eaf87c056979189f/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=671926ac93f0ff921758a919eaf87c056979189f", "patch": "@@ -5,6 +5,31 @@ import { Config } from './config';\n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n import { SemanticTokensFeature, DocumentSemanticsTokensSignature } from 'vscode-languageclient/lib/semanticTokens.proposed';\n \n+export function configToServerOptions(config: Config) {\n+    return {\n+        publishDecorations: !config.highlightingSemanticTokens,\n+        lruCapacity: config.lruCapacity,\n+\n+        inlayHintsType: config.inlayHints.typeHints,\n+        inlayHintsParameter: config.inlayHints.parameterHints,\n+        inlayHintsChaining: config.inlayHints.chainingHints,\n+        inlayHintsMaxLength: config.inlayHints.maxLength,\n+\n+        cargoWatchEnable: config.cargoWatchOptions.enable,\n+        cargoWatchArgs: config.cargoWatchOptions.arguments,\n+        cargoWatchCommand: config.cargoWatchOptions.command,\n+        cargoWatchAllTargets: config.cargoWatchOptions.allTargets,\n+\n+        excludeGlobs: config.excludeGlobs,\n+        useClientWatching: config.useClientWatching,\n+        featureFlags: config.featureFlags,\n+        withSysroot: config.withSysroot,\n+        cargoFeatures: config.cargoFeatures,\n+        rustfmtArgs: config.rustfmtArgs,\n+        vscodeLldb: vscode.extensions.getExtension(\"vadimcn.vscode-lldb\") != null,\n+    };\n+}\n+\n export async function createClient(config: Config, serverPath: string): Promise<lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n@@ -22,32 +47,10 @@ export async function createClient(config: Config, serverPath: string): Promise<\n     const traceOutputChannel = vscode.window.createOutputChannel(\n         'Rust Analyzer Language Server Trace',\n     );\n-    const cargoWatchOpts = config.cargoWatchOptions;\n \n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: 'file', language: 'rust' }],\n-        initializationOptions: {\n-            publishDecorations: !config.highlightingSemanticTokens,\n-            lruCapacity: config.lruCapacity,\n-\n-            inlayHintsType: config.inlayHints.typeHints,\n-            inlayHintsParameter: config.inlayHints.parameterHints,\n-            inlayHintsChaining: config.inlayHints.chainingHints,\n-            inlayHintsMaxLength: config.inlayHints.maxLength,\n-\n-            cargoWatchEnable: cargoWatchOpts.enable,\n-            cargoWatchArgs: cargoWatchOpts.arguments,\n-            cargoWatchCommand: cargoWatchOpts.command,\n-            cargoWatchAllTargets: cargoWatchOpts.allTargets,\n-\n-            excludeGlobs: config.excludeGlobs,\n-            useClientWatching: config.useClientWatching,\n-            featureFlags: config.featureFlags,\n-            withSysroot: config.withSysroot,\n-            cargoFeatures: config.cargoFeatures,\n-            rustfmtArgs: config.rustfmtArgs,\n-            vscodeLldb: vscode.extensions.getExtension(\"vadimcn.vscode-lldb\") != null,\n-        },\n+        initializationOptions: configToServerOptions(config),\n         traceOutputChannel,\n         middleware: {\n             // Workaround for https://github.com/microsoft/vscode-languageserver-node/issues/576"}, {"sha": "501997fef780688dc5c692398f26253ee43a344a", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/671926ac93f0ff921758a919eaf87c056979189f/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/671926ac93f0ff921758a919eaf87c056979189f/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=671926ac93f0ff921758a919eaf87c056979189f", "patch": "@@ -12,9 +12,9 @@ export class Config {\n     private readonly requiresReloadOpts = [\n         \"serverPath\",\n         \"cargoFeatures\",\n-        \"cargo-watch\",\n-        \"highlighting.semanticTokens\",\n-        \"inlayHints\",\n+        \"excludeGlobs\",\n+        \"useClientWatching\",\n+        \"highlighting\",\n         \"updates.channel\",\n     ]\n         .map(opt => `${this.rootSection}.${opt}`);"}, {"sha": "d2f49cd23d3dd75db0033a98527f0186d5be65d5", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/671926ac93f0ff921758a919eaf87c056979189f/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/671926ac93f0ff921758a919eaf87c056979189f/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=671926ac93f0ff921758a919eaf87c056979189f", "patch": "@@ -2,7 +2,7 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import { Config } from './config';\n-import { createClient } from './client';\n+import { createClient, configToServerOptions } from './client';\n import { isRustEditor, RustEditor } from './util';\n \n export class Ctx {\n@@ -20,6 +20,7 @@ export class Ctx {\n         const res = new Ctx(config, extCtx, client, serverPath);\n         res.pushCleanup(client.start());\n         await client.onReady();\n+        client.onRequest('workspace/configuration', _ => [configToServerOptions(config)]);\n         return res;\n     }\n "}, {"sha": "6a8bd942e163109e15249f70117adc3f121161e4", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/671926ac93f0ff921758a919eaf87c056979189f/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/671926ac93f0ff921758a919eaf87c056979189f/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=671926ac93f0ff921758a919eaf87c056979189f", "patch": "@@ -17,7 +17,11 @@ export function activateInlayHints(ctx: Ctx) {\n             ) {\n                 return this.dispose();\n             }\n-            if (!this.updater) this.updater = new HintsUpdater(ctx);\n+            if (this.updater) {\n+                this.updater.syncCacheAndRenderHints();\n+            } else {\n+                this.updater = new HintsUpdater(ctx);\n+            }\n         },\n         dispose() {\n             this.updater?.dispose();\n@@ -124,7 +128,7 @@ class HintsUpdater implements Disposable {\n         this.syncCacheAndRenderHints();\n     }\n \n-    private syncCacheAndRenderHints() {\n+    syncCacheAndRenderHints() {\n         // FIXME: make inlayHints request pass an array of files?\n         this.sourceFiles.forEach((file, uri) => this.fetchHints(file).then(hints => {\n             if (!hints) return;"}, {"sha": "a46dbde33cea7d2b8455d2900480e53176402994", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/671926ac93f0ff921758a919eaf87c056979189f/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/671926ac93f0ff921758a919eaf87c056979189f/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=671926ac93f0ff921758a919eaf87c056979189f", "patch": "@@ -91,6 +91,12 @@ export async function activate(context: vscode.ExtensionContext) {\n         activateHighlighting(ctx);\n     }\n     activateInlayHints(ctx);\n+\n+    vscode.workspace.onDidChangeConfiguration(\n+        _ => ctx?.client?.sendNotification('workspace/didChangeConfiguration', { settings: \"\" }),\n+        null,\n+        ctx.subscriptions,\n+    );\n }\n \n export async function deactivate() {"}]}