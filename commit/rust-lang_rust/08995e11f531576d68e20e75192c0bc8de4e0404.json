{"sha": "08995e11f531576d68e20e75192c0bc8de4e0404", "node_id": "C_kwDOAAsO6NoAKDA4OTk1ZTExZjUzMTU3NmQ2OGUyMGU3NTE5MmMwYmM4ZGU0ZTA0MDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-21T18:48:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-21T18:48:32Z"}, "message": "Rollup merge of #95116 - bjorn3:cg_clif_test_fixes, r=Dylan-DPC\n\nAdd needs-* directives to many tests\n\nThese are necessary to ignore tests that need features unsupported by cg_clif.", "tree": {"sha": "0b337b59650abc36efe1a805e406ac02c455da92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b337b59650abc36efe1a805e406ac02c455da92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08995e11f531576d68e20e75192c0bc8de4e0404", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOMiACRBK7hj4Ov3rIwAANdUIACd3ZMxgB5x9KXGlTUOpKkUo\niQVJRAkORHNVGBXa105o1a8bjzrbzODUDBauFNA9P/aoju762kFlUCgWHV9Ax1OS\nH1ZPXInsrspDkL6vemCPz/t2EfApmqx/mISPTvPhGg3Wn7wo6NT3y8MpS9TtKqtB\ncA5mkfstU6ZDJwqg1K4aipeGlugrFIXQOxNJM80ePXAibAjvZ/n3v7PKbdROyzhd\nsAy/gWRbjNOLx/oEVkdogU920C+gmBWdX4CLhVyewbhxpEllGLkPzCLVloemd039\ndsE5AkNfFBeQUJ2vVt9ZineslBF/0j2YJcPs4brqVLH6GozpckbMUqsgpcfeYyQ=\n=Hut8\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b337b59650abc36efe1a805e406ac02c455da92\nparent e41e510c7f2ef36b324bf9bfe4947383a290baf8\nparent c542cd7740a34abb5d4fb9f9acba2f8381c8f628\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1647888512 +0100\ncommitter GitHub <noreply@github.com> 1647888512 +0100\n\nRollup merge of #95116 - bjorn3:cg_clif_test_fixes, r=Dylan-DPC\n\nAdd needs-* directives to many tests\n\nThese are necessary to ignore tests that need features unsupported by cg_clif.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08995e11f531576d68e20e75192c0bc8de4e0404", "html_url": "https://github.com/rust-lang/rust/commit/08995e11f531576d68e20e75192c0bc8de4e0404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08995e11f531576d68e20e75192c0bc8de4e0404/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e41e510c7f2ef36b324bf9bfe4947383a290baf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e41e510c7f2ef36b324bf9bfe4947383a290baf8", "html_url": "https://github.com/rust-lang/rust/commit/e41e510c7f2ef36b324bf9bfe4947383a290baf8"}, {"sha": "c542cd7740a34abb5d4fb9f9acba2f8381c8f628", "url": "https://api.github.com/repos/rust-lang/rust/commits/c542cd7740a34abb5d4fb9f9acba2f8381c8f628", "html_url": "https://github.com/rust-lang/rust/commit/c542cd7740a34abb5d4fb9f9acba2f8381c8f628"}], "stats": {"total": 195, "additions": 107, "deletions": 88}, "files": [{"sha": "9404e71d0fe242549df19d79d2400b49f6808b06", "filename": "src/test/ui/abi/abi-sysv64-register-usage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -5,6 +5,7 @@\n // ignore-android\n // ignore-arm\n // ignore-aarch64\n+// needs-asm-support\n #![feature(asm_sym)]\n \n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "de299bfdbdfc922e1030c715d116ca9b4558e6d0", "filename": "src/test/ui/asm/aarch64/const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,5 +1,6 @@\n // only-aarch64\n // run-pass\n+// needs-asm-support\n // revisions: mirunsafeck thirunsafeck\n // [thirunsafeck]compile-flags: -Z thir-unsafeck\n "}, {"sha": "fa1dd4aef5d1c0bc57ca8f7980325734286b4b27", "filename": "src/test/ui/asm/aarch64/duplicate-options.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,4 +1,5 @@\n // only-aarch64\n+// needs-asm-support\n // run-rustfix\n \n use std::arch::asm;"}, {"sha": "b2d3fe7d9a7373cc8d9b310dbf72ba367bc1e4f2", "filename": "src/test/ui/asm/aarch64/duplicate-options.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,4 +1,5 @@\n // only-aarch64\n+// needs-asm-support\n // run-rustfix\n \n use std::arch::asm;"}, {"sha": "feb3838f4f796539263f09bd5bfb4e0e7e9cb433", "filename": "src/test/ui/asm/aarch64/duplicate-options.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.stderr?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,53 +1,53 @@\n error: the `nomem` option was already provided\n-  --> $DIR/duplicate-options.rs:8:33\n+  --> $DIR/duplicate-options.rs:9:33\n    |\n LL |         asm!(\"\", options(nomem, nomem));\n    |                                 ^^^^^ this option was already provided\n \n error: the `preserves_flags` option was already provided\n-  --> $DIR/duplicate-options.rs:10:43\n+  --> $DIR/duplicate-options.rs:11:43\n    |\n LL |         asm!(\"\", options(preserves_flags, preserves_flags));\n    |                                           ^^^^^^^^^^^^^^^ this option was already provided\n \n error: the `nostack` option was already provided\n-  --> $DIR/duplicate-options.rs:12:61\n+  --> $DIR/duplicate-options.rs:13:61\n    |\n LL |         asm!(\"\", options(nostack, preserves_flags), options(nostack));\n    |                                                             ^^^^^^^ this option was already provided\n \n error: the `nostack` option was already provided\n-  --> $DIR/duplicate-options.rs:14:35\n+  --> $DIR/duplicate-options.rs:15:35\n    |\n LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n    |                                   ^^^^^^^ this option was already provided\n \n error: the `nostack` option was already provided\n-  --> $DIR/duplicate-options.rs:14:53\n+  --> $DIR/duplicate-options.rs:15:53\n    |\n LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n    |                                                     ^^^^^^^ this option was already provided\n \n error: the `nostack` option was already provided\n-  --> $DIR/duplicate-options.rs:14:71\n+  --> $DIR/duplicate-options.rs:15:71\n    |\n LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n    |                                                                       ^^^^^^^ this option was already provided\n \n error: the `noreturn` option was already provided\n-  --> $DIR/duplicate-options.rs:21:38\n+  --> $DIR/duplicate-options.rs:22:38\n    |\n LL |             options(preserves_flags, noreturn),\n    |                                      ^^^^^^^^ this option was already provided\n \n error: the `nomem` option was already provided\n-  --> $DIR/duplicate-options.rs:22:21\n+  --> $DIR/duplicate-options.rs:23:21\n    |\n LL |             options(nomem, nostack),\n    |                     ^^^^^ this option was already provided\n \n error: the `noreturn` option was already provided\n-  --> $DIR/duplicate-options.rs:23:21\n+  --> $DIR/duplicate-options.rs:24:21\n    |\n LL |             options(noreturn),\n    |                     ^^^^^^^^ this option was already provided"}, {"sha": "e87a88434991bce2a0ae505e8c4f21a2dd4b6e86", "filename": "src/test/ui/asm/aarch64/interpolated-idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,5 +1,5 @@\n // only-aarch64\n-\n+// needs-asm-support\n use std::arch::asm;\n \n macro_rules! m {"}, {"sha": "040d4df546fb512d30fabba5c55a151efe698423", "filename": "src/test/ui/asm/aarch64/srcloc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,5 +1,6 @@\n // only-aarch64\n // build-fail\n+// needs-asm-support\n // compile-flags: -Ccodegen-units=1\n \n use std::arch::asm;"}, {"sha": "f8b645c23f5a08678c80599ed06911077e4d551a", "filename": "src/test/ui/asm/aarch64/srcloc.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,5 +1,5 @@\n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:11:15\n+  --> $DIR/srcloc.rs:12:15\n    |\n LL |         asm!(\"invalid_instruction\");\n    |               ^\n@@ -11,7 +11,7 @@ LL |     invalid_instruction\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:15:13\n+  --> $DIR/srcloc.rs:16:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -23,7 +23,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:20:13\n+  --> $DIR/srcloc.rs:21:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -35,7 +35,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:26:13\n+  --> $DIR/srcloc.rs:27:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -47,7 +47,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:33:13\n+  --> $DIR/srcloc.rs:34:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -59,7 +59,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:38:14\n+  --> $DIR/srcloc.rs:39:14\n    |\n LL |         asm!(concat!(\"invalid\", \"_\", \"instruction\"));\n    |              ^\n@@ -71,7 +71,7 @@ LL |     invalid_instruction\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:42:14\n+  --> $DIR/srcloc.rs:43:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -83,7 +83,7 @@ LL |     invalid_instruction\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:48:14\n+  --> $DIR/srcloc.rs:49:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -95,7 +95,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:55:14\n+  --> $DIR/srcloc.rs:56:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -107,7 +107,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:62:13\n+  --> $DIR/srcloc.rs:63:13\n    |\n LL |             concat!(\"invalid\", \"_\", \"instruction\"),\n    |             ^\n@@ -119,7 +119,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:69:13\n+  --> $DIR/srcloc.rs:70:13\n    |\n LL |             concat!(\"invalid\", \"_\", \"instruction\"),\n    |             ^\n@@ -131,7 +131,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:76:14\n+  --> $DIR/srcloc.rs:77:14\n    |\n LL |             \"invalid_instruction1\",\n    |              ^\n@@ -143,7 +143,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:77:14\n+  --> $DIR/srcloc.rs:78:14\n    |\n LL |             \"invalid_instruction2\",\n    |              ^\n@@ -155,7 +155,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:83:13\n+  --> $DIR/srcloc.rs:84:13\n    |\n LL |             concat!(\n    |             ^\n@@ -167,7 +167,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:83:13\n+  --> $DIR/srcloc.rs:84:13\n    |\n LL |             concat!(\n    |             ^\n@@ -179,7 +179,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:92:13\n+  --> $DIR/srcloc.rs:93:13\n    |\n LL |             concat!(\n    |             ^\n@@ -191,7 +191,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:92:13\n+  --> $DIR/srcloc.rs:93:13\n    |\n LL |             concat!(\n    |             ^\n@@ -203,7 +203,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:96:13\n+  --> $DIR/srcloc.rs:97:13\n    |\n LL |             concat!(\n    |             ^\n@@ -215,7 +215,7 @@ LL | invalid_instruction3\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:96:13\n+  --> $DIR/srcloc.rs:97:13\n    |\n LL |             concat!(\n    |             ^\n@@ -227,7 +227,7 @@ LL | invalid_instruction4\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:107:13\n+  --> $DIR/srcloc.rs:108:13\n    |\n LL |             concat!(\n    |             ^\n@@ -239,7 +239,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:107:13\n+  --> $DIR/srcloc.rs:108:13\n    |\n LL |             concat!(\n    |             ^\n@@ -251,7 +251,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:111:13\n+  --> $DIR/srcloc.rs:112:13\n    |\n LL |             concat!(\n    |             ^\n@@ -263,7 +263,7 @@ LL | invalid_instruction3\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:111:13\n+  --> $DIR/srcloc.rs:112:13\n    |\n LL |             concat!(\n    |             ^"}, {"sha": "3f659363cc848b18f8eb0f40d333ae547ad5560d", "filename": "src/test/ui/asm/aarch64/sym.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,5 +1,6 @@\n // only-aarch64\n // only-linux\n+// needs-asm-support\n // run-pass\n \n #![feature(thread_local, asm_sym)]"}, {"sha": "1352fb3771be3761a636c463f98374fa245a7159", "filename": "src/test/ui/asm/inline-syntax.arm.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -13,7 +13,7 @@ LL | .intel_syntax noprefix\n    | ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:31:15\n+  --> $DIR/inline-syntax.rs:32:15\n    |\n LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n    |               ^\n@@ -25,7 +25,7 @@ LL |     .intel_syntax noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:34:15\n+  --> $DIR/inline-syntax.rs:35:15\n    |\n LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n    |               ^\n@@ -37,7 +37,7 @@ LL |     .intel_syntax aaa noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:37:15\n+  --> $DIR/inline-syntax.rs:38:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n    |               ^\n@@ -49,7 +49,7 @@ LL |     .att_syntax noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:40:15\n+  --> $DIR/inline-syntax.rs:41:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n    |               ^\n@@ -61,7 +61,7 @@ LL |     .att_syntax bbb noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:43:15\n+  --> $DIR/inline-syntax.rs:44:15\n    |\n LL |         asm!(\".intel_syntax noprefix; nop\");\n    |               ^\n@@ -73,7 +73,7 @@ LL |     .intel_syntax noprefix; nop\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:49:13\n+  --> $DIR/inline-syntax.rs:50:13\n    |\n LL |             .intel_syntax noprefix\n    |             ^"}, {"sha": "d06796e33d51681c36930b16ac1b363d22acde0d", "filename": "src/test/ui/asm/inline-syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -8,6 +8,7 @@\n //[arm] compile-flags: --target armv7-unknown-linux-gnueabihf\n //[arm] build-fail\n //[arm] needs-llvm-components: arm\n+// needs-asm-support\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "840b250f87d7299dfb1ed8749e135848e06bc055", "filename": "src/test/ui/asm/inline-syntax.x86_64.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,43 +1,43 @@\n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:57:14\n+  --> $DIR/inline-syntax.rs:58:14\n    |\n LL | global_asm!(\".intel_syntax noprefix\", \"nop\");\n    |              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(bad_asm_style)]` on by default\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:31:15\n+  --> $DIR/inline-syntax.rs:32:15\n    |\n LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:34:15\n+  --> $DIR/inline-syntax.rs:35:15\n    |\n LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n-  --> $DIR/inline-syntax.rs:37:15\n+  --> $DIR/inline-syntax.rs:38:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n-  --> $DIR/inline-syntax.rs:40:15\n+  --> $DIR/inline-syntax.rs:41:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:43:15\n+  --> $DIR/inline-syntax.rs:44:15\n    |\n LL |         asm!(\".intel_syntax noprefix; nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:49:13\n+  --> $DIR/inline-syntax.rs:50:13\n    |\n LL |             .intel_syntax noprefix\n    |             ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "6e3c26e98c3f60a4c4d23b44a7541347f11896e5", "filename": "src/test/ui/asm/issue-92378.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fissue-92378.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fissue-92378.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-92378.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: --target armv5te-unknown-linux-gnueabi\n // needs-llvm-components: arm\n+// needs-asm-support\n // build-pass\n \n #![feature(no_core, lang_items, rustc_attrs, isa_attribute)]"}, {"sha": "8d3c300e0586c4dfdd731a0fe0957434abd3f8fd", "filename": "src/test/ui/asm/naked-functions-unused.aarch64.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,66 +1,66 @@\n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:16:32\n+  --> $DIR/naked-functions-unused.rs:17:32\n    |\n LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n    |                                ^ help: if this is intentional, prefix it with an underscore: `_a`\n    |\n note: the lint level is defined here\n-  --> $DIR/naked-functions-unused.rs:4:9\n+  --> $DIR/naked-functions-unused.rs:5:9\n    |\n LL | #![deny(unused)]\n    |         ^^^^^^\n    = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:16:42\n+  --> $DIR/naked-functions-unused.rs:17:42\n    |\n LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n    |                                          ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:25:38\n+  --> $DIR/naked-functions-unused.rs:26:38\n    |\n LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n    |                                      ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:25:48\n+  --> $DIR/naked-functions-unused.rs:26:48\n    |\n LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n    |                                                ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:31:41\n+  --> $DIR/naked-functions-unused.rs:32:41\n    |\n LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n    |                                         ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:31:51\n+  --> $DIR/naked-functions-unused.rs:32:51\n    |\n LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n    |                                                   ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:39:40\n+  --> $DIR/naked-functions-unused.rs:40:40\n    |\n LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n    |                                        ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:39:50\n+  --> $DIR/naked-functions-unused.rs:40:50\n    |\n LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n    |                                                  ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:45:43\n+  --> $DIR/naked-functions-unused.rs:46:43\n    |\n LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n    |                                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:45:53\n+  --> $DIR/naked-functions-unused.rs:46:53\n    |\n LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n    |                                                     ^ help: if this is intentional, prefix it with an underscore: `_b`"}, {"sha": "044a0e5b9408989c3df795c31155fbfd0aa47382", "filename": "src/test/ui/asm/naked-functions-unused.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,4 +1,5 @@\n // revisions: x86_64 aarch64\n+// needs-asm-support\n //[x86_64] only-x86_64\n //[aarch64] only-aarch64\n #![deny(unused)]"}, {"sha": "8d3c300e0586c4dfdd731a0fe0957434abd3f8fd", "filename": "src/test/ui/asm/naked-functions-unused.x86_64.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.x86_64.stderr?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,66 +1,66 @@\n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:16:32\n+  --> $DIR/naked-functions-unused.rs:17:32\n    |\n LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n    |                                ^ help: if this is intentional, prefix it with an underscore: `_a`\n    |\n note: the lint level is defined here\n-  --> $DIR/naked-functions-unused.rs:4:9\n+  --> $DIR/naked-functions-unused.rs:5:9\n    |\n LL | #![deny(unused)]\n    |         ^^^^^^\n    = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:16:42\n+  --> $DIR/naked-functions-unused.rs:17:42\n    |\n LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n    |                                          ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:25:38\n+  --> $DIR/naked-functions-unused.rs:26:38\n    |\n LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n    |                                      ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:25:48\n+  --> $DIR/naked-functions-unused.rs:26:48\n    |\n LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n    |                                                ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:31:41\n+  --> $DIR/naked-functions-unused.rs:32:41\n    |\n LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n    |                                         ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:31:51\n+  --> $DIR/naked-functions-unused.rs:32:51\n    |\n LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n    |                                                   ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:39:40\n+  --> $DIR/naked-functions-unused.rs:40:40\n    |\n LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n    |                                        ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:39:50\n+  --> $DIR/naked-functions-unused.rs:40:50\n    |\n LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n    |                                                  ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:45:43\n+  --> $DIR/naked-functions-unused.rs:46:43\n    |\n LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n    |                                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:45:53\n+  --> $DIR/naked-functions-unused.rs:46:53\n    |\n LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n    |                                                     ^ help: if this is intentional, prefix it with an underscore: `_b`"}, {"sha": "d523ae021a5d4dccce013ea1599dfb36c5c074bd", "filename": "src/test/ui/asm/x86_64/const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,5 +1,6 @@\n // only-x86_64\n // run-pass\n+// needs-asm-support\n // revisions: mirunsafeck thirunsafeck\n // [thirunsafeck]compile-flags: -Z thir-unsafeck\n "}, {"sha": "669fd7e7e46e527441ef9998c111f89cc388132f", "filename": "src/test/ui/asm/x86_64/issue-89875.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,4 +1,5 @@\n // build-pass\n+// needs-asm-support\n // only-x86_64\n \n #![feature(target_feature_11)]"}, {"sha": "622365bc712af15d22d86fdd823783ba547309e6", "filename": "src/test/ui/asm/x86_64/sym.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,6 +1,7 @@\n // min-llvm-version: 12.0.1\n // only-x86_64\n // only-linux\n+// needs-asm-support\n // run-pass\n \n #![feature(thread_local, asm_sym)]"}, {"sha": "c2d9e222b84a44e6788f92f5d10be80464e8343d", "filename": "src/test/ui/backtrace.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbacktrace.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -88,28 +88,31 @@ fn runtest(me: &str) {\n     assert!(!s.contains(\"stack backtrace\") && !s.contains(\" - foo\"),\n             \"bad output3: {}\", s);\n \n-    // Make sure a stack trace is printed\n-    let p = template(me).arg(\"double-fail\").spawn().unwrap();\n-    let out = p.wait_with_output().unwrap();\n-    assert!(!out.status.success());\n-    let s = str::from_utf8(&out.stderr).unwrap();\n-    // loosened the following from double::h to double:: due to\n-    // spurious failures on mac, 32bit, optimized\n-    assert!(s.contains(\"stack backtrace\") && contains_verbose_expected(s, \"double\"),\n-            \"bad output3: {}\", s);\n+    #[cfg(not(panic = \"abort\"))]\n+    {\n+        // Make sure a stack trace is printed\n+        let p = template(me).arg(\"double-fail\").spawn().unwrap();\n+        let out = p.wait_with_output().unwrap();\n+        assert!(!out.status.success());\n+        let s = str::from_utf8(&out.stderr).unwrap();\n+        // loosened the following from double::h to double:: due to\n+        // spurious failures on mac, 32bit, optimized\n+        assert!(s.contains(\"stack backtrace\") && contains_verbose_expected(s, \"double\"),\n+                \"bad output3: {}\", s);\n \n-    // Make sure a stack trace isn't printed too many times\n-    let p = template(me).arg(\"double-fail\")\n-                                .env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n-    let out = p.wait_with_output().unwrap();\n-    assert!(!out.status.success());\n-    let s = str::from_utf8(&out.stderr).unwrap();\n-    let mut i = 0;\n-    for _ in 0..2 {\n-        i += s[i + 10..].find(\"stack backtrace\").unwrap() + 10;\n+        // Make sure a stack trace isn't printed too many times\n+        let p = template(me).arg(\"double-fail\")\n+                                    .env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n+        let out = p.wait_with_output().unwrap();\n+        assert!(!out.status.success());\n+        let s = str::from_utf8(&out.stderr).unwrap();\n+        let mut i = 0;\n+        for _ in 0..2 {\n+            i += s[i + 10..].find(\"stack backtrace\").unwrap() + 10;\n+        }\n+        assert!(s[i + 10..].find(\"stack backtrace\").is_none(),\n+                \"bad output4: {}\", s);\n     }\n-    assert!(s[i + 10..].find(\"stack backtrace\").is_none(),\n-            \"bad output4: {}\", s);\n }\n \n fn main() {"}, {"sha": "77368b87e961c2cc841b5841949e262444ee5b3b", "filename": "src/test/ui/numbers-arithmetic/issue-8460.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![allow(unused_must_use)]\n // ignore-emscripten no threads support\n+// needs-unwind\n #![feature(rustc_attrs)]\n \n use std::thread;"}, {"sha": "098f54ac23f6afbdd37159a7356428554970f2d3", "filename": "src/test/ui/panic-while-printing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-while-printing.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-emscripten no subprocess support\n \n #![feature(internal_output_capture)]"}, {"sha": "a1887c2180ecf4bcf4551f93b8ac65756cc817ba", "filename": "src/test/ui/process/multi-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fprocess%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Fprocess%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fmulti-panic.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// needs-unwind\n \n fn check_for_no_backtrace(test: std::process::Output) {\n     assert!(!test.status.success());"}, {"sha": "01e460da5ab57ff938c089031b57aeb78530232f", "filename": "src/test/ui/test-attrs/test-panic-while-printing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-panic-while-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08995e11f531576d68e20e75192c0bc8de4e0404/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-panic-while-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-panic-while-printing.rs?ref=08995e11f531576d68e20e75192c0bc8de4e0404", "patch": "@@ -1,5 +1,6 @@\n // compile-flags:--test\n // run-pass\n+// needs-unwind\n // ignore-emscripten no subprocess support\n \n use std::fmt;"}]}