{"sha": "699ae365dfadabb3d26f957341a9f176d73bc8af", "node_id": "C_kwDOAAsO6NoAKDY5OWFlMzY1ZGZhZGFiYjNkMjZmOTU3MzQxYTlmMTc2ZDczYmM4YWY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-03-20T14:03:17Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:09Z"}, "message": "Apply suggestions:\n\n * Forbid generics without a path (so \"<p>\" is forbidden).\n * Change `handleSingleArg` so that it takes `results_others`, `results_in_args` and `results_returned` as arguments instead of using the \"global\" variables.\n * Change `createQueryElement` so that it returns the newly created element instead of taking `elems` as argument.\n * Improve documentation", "tree": {"sha": "1dbb52f4b0a7990602b1577142b7d36b750cad7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dbb52f4b0a7990602b1577142b7d36b750cad7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/699ae365dfadabb3d26f957341a9f176d73bc8af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/699ae365dfadabb3d26f957341a9f176d73bc8af", "html_url": "https://github.com/rust-lang/rust/commit/699ae365dfadabb3d26f957341a9f176d73bc8af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/699ae365dfadabb3d26f957341a9f176d73bc8af/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b", "html_url": "https://github.com/rust-lang/rust/commit/c7de1a16f89b9aa3205f50c9cf2b9f6792ac6e4b"}], "stats": {"total": 188, "additions": 121, "deletions": 67}, "files": [{"sha": "0fe0fdadbd21050b3c27aa51331e81797a5a74b5", "filename": "src/librustdoc/html/static/js/externs.js", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "raw_url": "https://github.com/rust-lang/rust/raw/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js?ref=699ae365dfadabb3d26f957341a9f176d73bc8af", "patch": "@@ -67,7 +67,6 @@ var ResultsTable;\n \n /**\n  * @typedef {{\n- * crate: \"std\"\n  *     desc: string,\n  *     displayPath: string,\n  *     fullPath: string,"}, {"sha": "92a8279791deee1241051b25fa1201e004a1e0cb", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 74, "deletions": 36, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=699ae365dfadabb3d26f957341a9f176d73bc8af", "patch": "@@ -193,6 +193,7 @@ window.initSearch = function(rawSearchIndex) {\n      * Returns `true` if the current parser position is starting with \"::\".\n      *\n      * @param {ParserState} parserState\n+     *\n      * @return {boolean}\n      */\n     function isPathStart(parserState) {\n@@ -203,6 +204,7 @@ window.initSearch = function(rawSearchIndex) {\n      * Returns `true` if the current parser position is starting with \"->\".\n      *\n      * @param {ParserState} parserState\n+     *\n      * @return {boolean}\n      */\n     function isReturnArrow(parserState) {\n@@ -212,11 +214,12 @@ window.initSearch = function(rawSearchIndex) {\n     /**\n      * @param {ParsedQuery} query\n      * @param {ParserState} parserState\n-     * @param {Array<QueryElement>} elems    - This is where the new {QueryElement} will be added.\n      * @param {string} name                  - Name of the query element.\n      * @param {Array<QueryElement>} generics - List of generics of this query element.\n+     *\n+     * @return {QueryElement}                - The newly created `QueryElement`.\n      */\n-    function createQueryElement(query, parserState, elems, name, generics) {\n+    function createQueryElement(query, parserState, name, generics) {\n         if (name === '*' || (name.length === 0 && generics.length === 0)) {\n             return;\n         }\n@@ -238,18 +241,18 @@ window.initSearch = function(rawSearchIndex) {\n                 }\n             }\n         }\n-        // In case we only have something like `<p>`, there is no name but it remains valid.\n-        if (pathSegments.length === 0) {\n-            pathSegments = [\"\"];\n+        // In case we only have something like `<p>`, there is no name.\n+        if (pathSegments.length === 0 || (pathSegments.length === 1 && pathSegments[0] === \"\")) {\n+            throw new Error(\"Found generics without a path\");\n         }\n-        elems.push({\n+        parserState.totalElems += 1;\n+        return {\n             name: name,\n             fullPath: pathSegments,\n             pathWithoutLast: pathSegments.slice(0, pathSegments.length - 1),\n             pathLast: pathSegments[pathSegments.length - 1],\n             generics: generics,\n-        });\n-        parserState.totalElems += 1;\n+        };\n     }\n \n     /**\n@@ -300,12 +303,14 @@ window.initSearch = function(rawSearchIndex) {\n         if (start >= end && generics.length === 0) {\n             return;\n         }\n-        createQueryElement(\n-            query,\n-            parserState,\n-            elems,\n-            parserState.userQuery.slice(start, end),\n-            generics);\n+        elems.push(\n+            createQueryElement(\n+                query,\n+                parserState,\n+                parserState.userQuery.slice(start, end),\n+                generics\n+            )\n+        );\n     }\n \n     /**\n@@ -372,8 +377,11 @@ window.initSearch = function(rawSearchIndex) {\n                 if (c === \",\" || c === \" \") {\n                     parserState.pos += 1;\n                     continue;\n-                } else if (c === \"-\" && isReturnArrow(parserState)) {\n-                    break;\n+                } else if (c === \"-\" || c === \">\") {\n+                    if (isReturnArrow(parserState)) {\n+                        break;\n+                    }\n+                    throw new Error(`Unexpected \\`${c}\\` (did you mean \\`->\\`?)`);\n                 }\n             } else if (c === \":\" &&\n                 parserState.typeFilter === null &&\n@@ -424,6 +432,7 @@ window.initSearch = function(rawSearchIndex) {\n      * Takes the user search input and returns an empty `ParsedQuery`.\n      *\n      * @param {string} userQuery\n+     *\n      * @return {ParsedQuery}\n      */\n     function newParsedQuery(userQuery) {\n@@ -445,6 +454,7 @@ window.initSearch = function(rawSearchIndex) {\n      *\n      * @param {string} search            - The current search being performed.\n      * @param {string|null} filterCrates - The current filtering crate (if any).\n+     *\n      * @return {string}\n      */\n     function buildUrl(search, filterCrates) {\n@@ -478,17 +488,20 @@ window.initSearch = function(rawSearchIndex) {\n      *\n      * The supported syntax by this parser is as follow:\n      *\n-     * ident = *(ALPHA / DIGIT)\n+     * ident = *(ALPHA / DIGIT / \"_\")\n      * path = ident *(DOUBLE-COLON ident)\n      * arg = path [generics]\n      * arg-without-generic = path\n-     * nonempty-arg-list = arg *WS *(COMMA *WS arg)\n-     * nonempty-arg-list-without-generics = arg-without-generic *WS *(COMMA *WS arg-without-generic)\n-     * generics = OPEN-ANGLE-BRACKET *WS nonempty-arg-list-without-generics *WS CLOSE-ANGLE-BRACKET\n+     * type-sep = COMMA/WS *(COMMA/WS)\n+     * nonempty-arg-list = arg *(type-sep arg) *(COMMA/WS)\n+     * nonempty-arg-list-without-generics = arg-without-generic *(type-sep arg-without-generic)\n+     *                                      *(COMMA/WS)\n+     * generics = OPEN-ANGLE-BRACKET *WS [ nonempty-arg-list-without-generics ] *WS\n+     *            CLOSE-ANGLE-BRACKET\n      * return-args = RETURN-ARROW *WS nonempty-arg-list\n      *\n      * exact-search = [type-filter *WS COLON] *WS QUOTE ident QUOTE *WS [generics]\n-     * type-search = [type-filter *WS COLON] *WS path *WS generics\n+     * type-search = [type-filter *WS COLON] *WS path *WS nonempty-arg-list\n      *\n      * query = *WS (exact-search / type-search / return-args) *WS\n      *\n@@ -533,6 +546,7 @@ window.initSearch = function(rawSearchIndex) {\n      * WS = %x09 / \" \"\n      *\n      * @param  {string} val     - The user query\n+     *\n      * @return {ParsedQuery}    - The parsed query\n      */\n     function parseQuery(userQuery) {\n@@ -567,7 +581,7 @@ window.initSearch = function(rawSearchIndex) {\n         query.foundElems = query.elems.length + query.returned.length;\n         if (query.foundElems === 0 && parserState.length !== 0) {\n             // In this case, we'll simply keep whatever was entered by the user...\n-            createQueryElement(query, parserState, query.elems, userQuery, []);\n+            query.elems.push(createQueryElement(query, parserState, userQuery, []));\n             query.foundElems += 1;\n         }\n         return query;\n@@ -580,6 +594,7 @@ window.initSearch = function(rawSearchIndex) {\n      * @param {Array<Result>} results_returned\n      * @param {Array<Result>} results_in_args\n      * @param {ParsedQuery} parsedQuery\n+     *\n      * @return {ResultsTable}\n      */\n     function createQueryResults(results_in_args, results_returned, results_others, parsedQuery) {\n@@ -597,6 +612,7 @@ window.initSearch = function(rawSearchIndex) {\n      * @param  {ParsedQuery} parsedQuery - The parsed user query\n      * @param  {Object} searchWords      - The list of search words to query against\n      * @param  {Object} [filterCrates]   - Crate to search in if defined\n+     *\n      * @return {ResultsTable}\n      */\n     function execQuery(parsedQuery, searchWords, filterCrates) {\n@@ -634,12 +650,7 @@ window.initSearch = function(rawSearchIndex) {\n         }\n \n         function sortResults(results, isType) {\n-            var nameSplit = null;\n-            if (parsedQuery.elems.length === 1) {\n-                var hasPath = typeof parsedQuery.elems[0].path === \"undefined\";\n-                nameSplit = hasPath ? null : parsedQuery.elems[0].path;\n-            }\n-            var query = parsedQuery.userQuery;\n+            var userQuery = parsedQuery.userQuery;\n             var ar = [];\n             for (var entry in results) {\n                 if (hasOwnPropertyRustdoc(results, entry)) {\n@@ -659,8 +670,8 @@ window.initSearch = function(rawSearchIndex) {\n                 var a, b;\n \n                 // sort by exact match with regard to the last word (mismatch goes later)\n-                a = (aaa.word !== query);\n-                b = (bbb.word !== query);\n+                a = (aaa.word !== userQuery);\n+                b = (bbb.word !== userQuery);\n                 if (a !== b) { return a - b; }\n \n                 // Sort by non levenshtein results and then levenshtein results by the distance\n@@ -722,6 +733,12 @@ window.initSearch = function(rawSearchIndex) {\n                 return 0;\n             });\n \n+            var nameSplit = null;\n+            if (parsedQuery.elems.length === 1) {\n+                var hasPath = typeof parsedQuery.elems[0].path === \"undefined\";\n+                nameSplit = hasPath ? null : parsedQuery.elems[0].path;\n+            }\n+\n             for (var i = 0, len = results.length; i < len; ++i) {\n                 result = results[i];\n \n@@ -763,7 +780,7 @@ window.initSearch = function(rawSearchIndex) {\n             // match as well.\n             var elem_name;\n             if (elem.generics.length > 0 && row[GENERICS_DATA].length >= elem.generics.length) {\n-                var elems = {};\n+                var elems = Object.create(null);\n                 for (var x = 0, length = row[GENERICS_DATA].length; x < length; ++x) {\n                     elem_name = row[GENERICS_DATA][x][NAME];\n                     if (elem_name === \"\") {\n@@ -935,6 +952,8 @@ window.initSearch = function(rawSearchIndex) {\n         }\n \n         /**\n+         * This function checks if the object (`row`) returns the given type (`elem`).\n+         *\n          * @param {Row} row\n          * @param {QueryElement} elem   - The element from the parsed query.\n          * @param {integer} typeFilter\n@@ -1103,7 +1122,7 @@ window.initSearch = function(rawSearchIndex) {\n          * * `index` is an `integer`` used to sort by the position of the word in the item's name.\n          * * `lev` is the main metric used to sort the search results.\n          *\n-         * @param {Object} results\n+         * @param {Results} results\n          * @param {string} fullId\n          * @param {integer} id\n          * @param {integer} index\n@@ -1130,10 +1149,21 @@ window.initSearch = function(rawSearchIndex) {\n          * This function is called in case the query is only one element (with or without generics).\n          *\n          * @param {Row} row\n-         * @param {integer} pos           - Position in the `searchIndex`.\n-         * @param {QueryElement} elem     - The element from the parsed query.\n+         * @param {integer} pos              - Position in the `searchIndex`.\n+         * @param {QueryElement} elem        - The element from the parsed query.\n+         * @param {Results} results_others   - Unqualified results (not in arguments nor in\n+         *                                     returned values).\n+         * @param {Results} results_in_args  - Matching arguments results.\n+         * @param {Results} results_returned - Matching returned arguments results.\n          */\n-        function handleSingleArg(row, pos, elem) {\n+        function handleSingleArg(\n+            row,\n+            pos,\n+            elem,\n+            results_others,\n+            results_in_args,\n+            results_returned\n+        ) {\n             if (!row || (filterCrates !== null && row.crate !== filterCrates)) {\n                 return;\n             }\n@@ -1261,7 +1291,14 @@ window.initSearch = function(rawSearchIndex) {\n                     for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {\n                         // It means we want to check for this element everywhere (in names, args and\n                         // returned).\n-                        handleSingleArg(searchIndex[i], i, elem);\n+                        handleSingleArg(\n+                            searchIndex[i],\n+                            i,\n+                            elem,\n+                            results_others,\n+                            results_in_args,\n+                            results_returned\n+                        );\n                     }\n                 } else if (parsedQuery.returned.length === 1) {\n                     // We received one returned argument to check, so looking into returned values.\n@@ -1315,6 +1352,7 @@ window.initSearch = function(rawSearchIndex) {\n      * @param  {string} path   - The path of the result\n      * @param  {string} keys   - The keys to be used ([\"file\", \"open\"])\n      * @param  {Object} parent - The parent of the result\n+     *\n      * @return {boolean}       - Whether the result is valid or not\n      */\n     function validateResult(name, path, keys, parent) {"}, {"sha": "080f82b41eca7986dcbf736c40576e74ea584339", "filename": "src/test/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js?ref=699ae365dfadabb3d26f957341a9f176d73bc8af", "patch": "@@ -1,4 +1,6 @@\n const QUERY = [\n+    '<P>',\n+    '-> <P>',\n     '<\"P\">',\n     '\"P\" \"P\"',\n     'P \"P\"',\n@@ -16,9 +18,29 @@ const QUERY = [\n     \"a b:\",\n     \"a (b:\",\n     \"{:\",\n+    \"a-bb\",\n+    \"a>bb\",\n ];\n \n const PARSED = [\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"<P>\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"<p>\",\n+        error: \"Found generics without a path\",\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"-> <P>\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"-> <p>\",\n+        error: \"Found generics without a path\",\n+    },\n     {\n         elems: [],\n         foundElems: 0,\n@@ -172,4 +194,22 @@ const PARSED = [\n         userQuery: \"{:\",\n         error: \"Unknown type filter `{`\",\n     },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a-bb\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a-bb\",\n+        error: \"Unexpected `-` (did you mean `->`?)\",\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a>bb\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a>bb\",\n+        error: \"Unexpected `>` (did you mean `->`?)\",\n+    },\n ];"}, {"sha": "cc92f2333d2ae3487b41dc7b6254907ebf31d993", "filename": "src/test/rustdoc-js-std/parser-generics.js", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "raw_url": "https://github.com/rust-lang/rust/raw/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js?ref=699ae365dfadabb3d26f957341a9f176d73bc8af", "patch": "@@ -1,29 +1,6 @@\n-const QUERY = ['<P>', 'A<B<C<D>,  E>', 'p<> u8'];\n+const QUERY = ['A<B<C<D>,  E>', 'p<> u8'];\n \n const PARSED = [\n-    {\n-        elems: [{\n-            name: \"\",\n-            fullPath: [\"\"],\n-            pathWithoutLast: [],\n-            pathLast: \"\",\n-            generics: [\n-                {\n-                    name: \"p\",\n-                    fullPath: [\"p\"],\n-                    pathWithoutLast: [],\n-                    pathLast: \"p\",\n-                    generics: [],\n-                },\n-            ],\n-        }],\n-        foundElems: 1,\n-        original: \"<P>\",\n-        returned: [],\n-        typeFilter: -1,\n-        userQuery: \"<p>\",\n-        error: null,\n-    },\n     {\n         elems: [],\n         foundElems: 0,"}, {"sha": "8910275c91e3bd02e4587fcf963231cbd332b08d", "filename": "src/test/rustdoc-js-std/parser-returned.js", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js", "raw_url": "https://github.com/rust-lang/rust/raw/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js?ref=699ae365dfadabb3d26f957341a9f176d73bc8af", "patch": "@@ -1,15 +1,15 @@\n-const QUERY = ['-> <P>', '-> P'];\n+const QUERY = ['-> F<P>', '-> P'];\n \n const PARSED = [\n     {\n         elems: [],\n         foundElems: 1,\n-        original: \"-> <P>\",\n+        original: \"-> F<P>\",\n         returned: [{\n-            name: \"\",\n-            fullPath: [\"\"],\n+            name: \"f\",\n+            fullPath: [\"f\"],\n             pathWithoutLast: [],\n-            pathLast: \"\",\n+            pathLast: \"f\",\n             generics: [\n                 {\n                     name: \"p\",\n@@ -21,7 +21,7 @@ const PARSED = [\n             ],\n         }],\n         typeFilter: -1,\n-        userQuery: \"-> <p>\",\n+        userQuery: \"-> f<p>\",\n         error: null,\n     },\n     {"}, {"sha": "87ebe21c49ba195cc9447cd3cd86e5734661f3c1", "filename": "src/test/rustdoc-js-std/parser-weird-queries.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Ftest%2Frustdoc-js-std%2Fparser-weird-queries.js", "raw_url": "https://github.com/rust-lang/rust/raw/699ae365dfadabb3d26f957341a9f176d73bc8af/src%2Ftest%2Frustdoc-js-std%2Fparser-weird-queries.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-weird-queries.js?ref=699ae365dfadabb3d26f957341a9f176d73bc8af", "previous_filename": "src/test/rustdoc-js-std/parser-invalid.js"}]}