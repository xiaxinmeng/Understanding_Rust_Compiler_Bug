{"sha": "b1063b83da7159c0dc8616fec26daeaa11b5f4d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMDYzYjgzZGE3MTU5YzBkYzg2MTZmZWMyNmRhZWFhMTFiNWY0ZDc=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-05-27T21:25:47Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-05-27T21:25:47Z"}, "message": "Clippy should always build\n\nThis just unwraps clippy's build step instead of skipping tests if clippy didn't\nbuild. This matches e.g. cargo's behavior and seems more correct, as we always\nexpect clippy to successfully build.", "tree": {"sha": "881c5b65490b1182e846fb0a00046b71f38a889a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/881c5b65490b1182e846fb0a00046b71f38a889a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1063b83da7159c0dc8616fec26daeaa11b5f4d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1063b83da7159c0dc8616fec26daeaa11b5f4d7", "html_url": "https://github.com/rust-lang/rust/commit/b1063b83da7159c0dc8616fec26daeaa11b5f4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1063b83da7159c0dc8616fec26daeaa11b5f4d7/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2873165725c15e96dae521a412065c144d9c7a25", "url": "https://api.github.com/repos/rust-lang/rust/commits/2873165725c15e96dae521a412065c144d9c7a25", "html_url": "https://github.com/rust-lang/rust/commit/2873165725c15e96dae521a412065c144d9c7a25"}], "stats": {"total": 60, "additions": 26, "deletions": 34}, "files": [{"sha": "f1305e2540b4ca9deba0a3bb8aafd6a3ed804d0f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b1063b83da7159c0dc8616fec26daeaa11b5f4d7/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1063b83da7159c0dc8616fec26daeaa11b5f4d7/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b1063b83da7159c0dc8616fec26daeaa11b5f4d7", "patch": "@@ -516,45 +516,37 @@ impl Step for Clippy {\n         let host = self.host;\n         let compiler = builder.compiler(stage, host);\n \n-        let clippy = builder.ensure(tool::Clippy {\n+        let clippy = builder\n+            .ensure(tool::Clippy { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n+        let mut cargo = tool::prepare_tool_cargo(\n+            builder,\n             compiler,\n-            target: self.host,\n-            extra_features: Vec::new(),\n-        });\n-        if let Some(clippy) = clippy {\n-            let mut cargo = tool::prepare_tool_cargo(\n-                builder,\n-                compiler,\n-                Mode::ToolRustc,\n-                host,\n-                \"test\",\n-                \"src/tools/clippy\",\n-                SourceType::InTree,\n-                &[],\n-            );\n+            Mode::ToolRustc,\n+            host,\n+            \"test\",\n+            \"src/tools/clippy\",\n+            SourceType::InTree,\n+            &[],\n+        );\n \n-            // clippy tests need to know about the stage sysroot\n-            cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n-            cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n-            cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n-            let host_libs = builder.stage_out(compiler, Mode::ToolRustc).join(builder.cargo_dir());\n-            let target_libs = builder\n-                .stage_out(compiler, Mode::ToolRustc)\n-                .join(&self.host)\n-                .join(builder.cargo_dir());\n-            cargo.env(\"HOST_LIBS\", host_libs);\n-            cargo.env(\"TARGET_LIBS\", target_libs);\n-            // clippy tests need to find the driver\n-            cargo.env(\"CLIPPY_DRIVER_PATH\", clippy);\n+        // clippy tests need to know about the stage sysroot\n+        cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n+        cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n+        cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n+        let host_libs = builder.stage_out(compiler, Mode::ToolRustc).join(builder.cargo_dir());\n+        let target_libs =\n+            builder.stage_out(compiler, Mode::ToolRustc).join(&self.host).join(builder.cargo_dir());\n+        cargo.env(\"HOST_LIBS\", host_libs);\n+        cargo.env(\"TARGET_LIBS\", target_libs);\n+        // clippy tests need to find the driver\n+        cargo.env(\"CLIPPY_DRIVER_PATH\", clippy);\n \n-            cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n \n-            builder.add_rustc_lib_path(compiler, &mut cargo);\n+        builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            try_run(builder, &mut cargo.into());\n-        } else {\n-            eprintln!(\"failed to test clippy: could not build\");\n-        }\n+        try_run(builder, &mut cargo.into());\n     }\n }\n "}]}