{"sha": "dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "node_id": "C_kwDOAAsO6NoAKGRjMzVkNTg0YTk3MWU5YTJkN2EwYzU0YmU2YWJhYzc3OWYyYmY5YjU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-23T13:14:59Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-28T17:08:50Z"}, "message": "Show that the behaviour is the same for RPIT and TAIT", "tree": {"sha": "23cfdabec7e57d087f4d032b16d6eafe0360b662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23cfdabec7e57d087f4d032b16d6eafe0360b662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "html_url": "https://github.com/rust-lang/rust/commit/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82b0cde4ef5c8f7dfd451eb8ea1c57d4c153bf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82b0cde4ef5c8f7dfd451eb8ea1c57d4c153bf8", "html_url": "https://github.com/rust-lang/rust/commit/e82b0cde4ef5c8f7dfd451eb8ea1c57d4c153bf8"}], "stats": {"total": 230, "additions": 230, "deletions": 0}, "files": [{"sha": "f2217f699fbbdc6a7951e092bb52bb6dcb137e70", "filename": "src/test/ui/impl-trait/nested-return-type2-tait.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs?ref=dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "patch": "@@ -0,0 +1,32 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Duh {}\n+\n+impl Duh for i32 {}\n+\n+trait Trait {\n+    type Assoc: Duh;\n+}\n+\n+// the fact that `R` is the `::Output` projection on `F` causes\n+// an intermediate inference var to be generated which is then later\n+// compared against the actually found `Assoc` type.\n+impl<R: Duh, F: FnMut() -> R> Trait for F {\n+    type Assoc = R;\n+}\n+\n+type Sendable = impl Send;\n+\n+// The `Sendable` here is then later compared against the inference var\n+// created, causing the inference var to be set to `Sendable` instead of\n+// the hidden type. We already have obligations registered on the inference\n+// var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n+// type does not implement `Duh`, even if its hidden type does. So we error out.\n+fn foo() -> impl Trait<Assoc = Sendable> {\n+    //~^ ERROR `Sendable: Duh` is not satisfied\n+    //~| ERROR `Sendable: Duh` is not satisfied\n+    || 42\n+}\n+\n+fn main() {\n+}"}, {"sha": "776c06b20dfc23a7c9810cf646a4a91aac3c2dc9", "filename": "src/test/ui/impl-trait/nested-return-type2-tait.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr?ref=dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "patch": "@@ -0,0 +1,32 @@\n+error[E0277]: the trait bound `Sendable: Duh` is not satisfied\n+  --> $DIR/nested-return-type2-tait.rs:25:13\n+   |\n+LL | fn foo() -> impl Trait<Assoc = Sendable> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Duh` is not implemented for `Sendable`\n+   |\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait.rs:28:5: 28:10]`\n+  --> $DIR/nested-return-type2-tait.rs:14:31\n+   |\n+LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n+   |                               ^^^^^     ^\n+\n+error[E0277]: the trait bound `Sendable: Duh` is not satisfied\n+  --> $DIR/nested-return-type2-tait.rs:25:42\n+   |\n+LL |   fn foo() -> impl Trait<Assoc = Sendable> {\n+   |  __________________________________________^\n+LL | |\n+LL | |\n+LL | |     || 42\n+LL | | }\n+   | |_^ the trait `Duh` is not implemented for `Sendable`\n+   |\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait.rs:28:5: 28:10]`\n+  --> $DIR/nested-return-type2-tait.rs:14:31\n+   |\n+LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n+   |                               ^^^^^     ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "af8e066305471df0451cb61a6a75c501cc5dc8d0", "filename": "src/test/ui/impl-trait/nested-return-type2-tait2.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.rs?ref=dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "patch": "@@ -0,0 +1,32 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Duh {}\n+\n+impl Duh for i32 {}\n+\n+trait Trait {\n+    type Assoc: Duh;\n+}\n+\n+// the fact that `R` is the `::Output` projection on `F` causes\n+// an intermediate inference var to be generated which is then later\n+// compared against the actually found `Assoc` type.\n+impl<R: Duh, F: FnMut() -> R> Trait for F {\n+    type Assoc = R;\n+}\n+\n+type Sendable = impl Send;\n+type Traitable = impl Trait<Assoc = Sendable>;\n+\n+// The `impl Send` here is then later compared against the inference var\n+// created, causing the inference var to be set to `impl Send` instead of\n+// the hidden type. We already have obligations registered on the inference\n+// var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n+// type does not implement `Duh`, even if its hidden type does. So we error out.\n+fn foo() -> Traitable {\n+    || 42\n+    //~^ ERROR `Sendable: Duh` is not satisfied\n+}\n+\n+fn main() {\n+}"}, {"sha": "4993202e2532e5fa1782ebf62ecc263af54d992c", "filename": "src/test/ui/impl-trait/nested-return-type2-tait2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr?ref=dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `Sendable: Duh` is not satisfied\n+  --> $DIR/nested-return-type2-tait2.rs:27:5\n+   |\n+LL |     || 42\n+   |     ^^^^^ the trait `Duh` is not implemented for `Sendable`\n+   |\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait2.rs:27:5: 27:10]`\n+  --> $DIR/nested-return-type2-tait2.rs:14:31\n+   |\n+LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n+   |                               ^^^^^     ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "74fd8a9dda0bfcb952e7631e9492abe0d02fa941", "filename": "src/test/ui/impl-trait/nested-return-type2-tait3.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.rs?ref=dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "patch": "@@ -0,0 +1,31 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Duh {}\n+\n+impl Duh for i32 {}\n+\n+trait Trait {\n+    type Assoc: Duh;\n+}\n+\n+// the fact that `R` is the `::Output` projection on `F` causes\n+// an intermediate inference var to be generated which is then later\n+// compared against the actually found `Assoc` type.\n+impl<R: Duh, F: FnMut() -> R> Trait for F {\n+    type Assoc = R;\n+}\n+\n+type Traitable = impl Trait<Assoc = impl Send>;\n+\n+// The `impl Send` here is then later compared against the inference var\n+// created, causing the inference var to be set to `impl Send` instead of\n+// the hidden type. We already have obligations registered on the inference\n+// var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n+// type does not implement `Duh`, even if its hidden type does. So we error out.\n+fn foo() -> Traitable {\n+    || 42\n+    //~^ ERROR `impl Send: Duh` is not satisfied\n+}\n+\n+fn main() {\n+}"}, {"sha": "efeaf059a3bb27b54a0cd15058fc4e11f867db62", "filename": "src/test/ui/impl-trait/nested-return-type2-tait3.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr?ref=dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `impl Send: Duh` is not satisfied\n+  --> $DIR/nested-return-type2-tait3.rs:26:5\n+   |\n+LL |     || 42\n+   |     ^^^^^ the trait `Duh` is not implemented for `impl Send`\n+   |\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait3.rs:26:5: 26:10]`\n+  --> $DIR/nested-return-type2-tait3.rs:14:31\n+   |\n+LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n+   |                               ^^^^^     ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3936f4dbbb426f385704f8eb8a3c7ede227d9a7b", "filename": "src/test/ui/impl-trait/nested-return-type3-tait.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.rs?ref=dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Duh {}\n+\n+impl Duh for i32 {}\n+\n+trait Trait {\n+    type Assoc: Duh;\n+}\n+\n+impl<F: Duh> Trait for F {\n+    type Assoc = F;\n+}\n+\n+type Sendable = impl Send;\n+\n+fn foo() -> impl Trait<Assoc = Sendable> {\n+    42\n+}\n+\n+fn main() {\n+}"}, {"sha": "56778ed90dc7b46b7fef77a686e207363cff3bd2", "filename": "src/test/ui/impl-trait/nested-return-type3-tait2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.rs?ref=dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Duh {}\n+\n+impl Duh for i32 {}\n+\n+trait Trait {\n+    type Assoc: Duh;\n+}\n+\n+impl<F: Duh> Trait for F {\n+    type Assoc = F;\n+}\n+\n+type Sendable = impl Send;\n+type Traitable = impl Trait<Assoc = Sendable>;\n+\n+fn foo() -> Traitable {\n+    42\n+}\n+\n+fn main() {\n+}"}, {"sha": "04c6c92b1a3c50e5408db510c60f11e288d035e7", "filename": "src/test/ui/impl-trait/nested-return-type3-tait3.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc35d584a971e9a2d7a0c54be6abac779f2bf9b5/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type3-tait3.rs?ref=dc35d584a971e9a2d7a0c54be6abac779f2bf9b5", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Duh {}\n+\n+impl Duh for i32 {}\n+\n+trait Trait {\n+    type Assoc: Duh;\n+}\n+\n+impl<F: Duh> Trait for F {\n+    type Assoc = F;\n+}\n+\n+type Traitable = impl Trait<Assoc = impl Send>;\n+\n+fn foo() -> Traitable {\n+    42\n+}\n+\n+fn main() {\n+}"}]}