{"sha": "f1756c3ddd06f8d82fa20fb9d738708f84382a33", "node_id": "C_kwDOAAsO6NoAKGYxNzU2YzNkZGQwNmY4ZDgyZmEyMGZiOWQ3Mzg3MDhmODQzODJhMzM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-17T13:49:10Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-25T13:31:26Z"}, "message": "Add a custom ui test runner and move all tests to it", "tree": {"sha": "0d6d8ef9991d9ec8af4009f344873d11f5785511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d6d8ef9991d9ec8af4009f344873d11f5785511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1756c3ddd06f8d82fa20fb9d738708f84382a33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1756c3ddd06f8d82fa20fb9d738708f84382a33", "html_url": "https://github.com/rust-lang/rust/commit/f1756c3ddd06f8d82fa20fb9d738708f84382a33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1756c3ddd06f8d82fa20fb9d738708f84382a33/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5063880779609c3f5d084ecdd7ab948f28f9279b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5063880779609c3f5d084ecdd7ab948f28f9279b", "html_url": "https://github.com/rust-lang/rust/commit/5063880779609c3f5d084ecdd7ab948f28f9279b"}], "stats": {"total": 7753, "additions": 7306, "deletions": 447}, "files": [{"sha": "b74444fbc6e4e6a8e6585917e051417fefaa25e2", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,6 +1,6 @@\n # Contribution Guide\n \n-If you want to hack on miri yourself, great!  Here are some resources you might\n+If you want to hack on Miri yourself, great!  Here are some resources you might\n find useful.\n \n ## Getting started\n@@ -89,6 +89,20 @@ MIRI_LOG=rustc_mir::interpret=info,miri::stacked_borrows ./miri run tests/run-pa\n In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an\n evaluation error was originally raised.\n \n+#### UI testing\n+\n+We use ui-testing in Miri, meaning we generate `.stderr` and `.stdout` files for the output\n+produced by Miri. You can use `./miri bless` to automatically (re)generate these files when\n+you add new tests or change how Miri presents certain output.\n+\n+Note that when you also use `MIRIFLAGS` to change optimizations and similar, the ui output\n+will change in unexpected ways. In order to still be able\n+to run the other checks while ignoring the ui output, use `MIRI_SKIP_UI_CHECKS=1 ./miri test`.\n+\n+For more info on how to configure ui tests see [the documentation on the ui test crate][ui_test]\n+\n+[ui_test]: ui_test/README.md\n+\n ### Testing `cargo miri`\n \n Working with the driver directly gives you full control, but you also lose all\n@@ -183,15 +197,15 @@ A big part of the Miri driver lives in rustc, so working on Miri will sometimes\n require using a locally built rustc. The bug you want to fix may actually be on\n the rustc side, or you just need to get more detailed trace of the execution\n than what is possible with release builds -- in both cases, you should develop\n-miri against a rustc you compiled yourself, with debug assertions (and hence\n+Miri against a rustc you compiled yourself, with debug assertions (and hence\n tracing) enabled.\n \n The setup for a local rustc works as follows:\n ```sh\n # Clone the rust-lang/rust repo.\n git clone https://github.com/rust-lang/rust rustc\n cd rustc\n-# Create a config.toml with defaults for working on miri.\n+# Create a config.toml with defaults for working on Miri.\n ./x.py setup compiler\n  # Now edit `config.toml` and under `[rust]` set `debug-assertions = true`.\n "}, {"sha": "5377f9420b7c8b3bd95591e69d1dbb30545c1b56", "filename": "Cargo.lock", "status": "modified", "additions": 121, "deletions": 198, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -12,10 +12,13 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"anyhow\"\n-version = \"1.0.51\"\n+name = \"ansi_term\"\n+version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8b26702f315f53b6071259e15dd9d64528213b44d61de1ec926eca7715d62203\"\n+checksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\n+dependencies = [\n+ \"winapi\",\n+]\n \n [[package]]\n name = \"atty\"\n@@ -28,6 +31,12 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"autocfg\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n+\n [[package]]\n name = \"bitflags\"\n version = \"1.3.2\"\n@@ -52,87 +61,101 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"compiletest_rs\"\n-version = \"0.7.1\"\n+name = \"crossbeam\"\n+version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"29843cb8d351febf86557681d049d1e1652b81a086a190fa1173c07fd17fbf83\"\n+checksum = \"4ae5588f6b3c3cb05239e90bd110f257254aecd01e4635400391aeae07497845\"\n dependencies = [\n- \"diff\",\n- \"filetime\",\n- \"getopts\",\n- \"lazy_static\",\n- \"libc\",\n- \"log\",\n- \"miow\",\n- \"regex\",\n- \"rustfix\",\n- \"serde\",\n- \"serde_derive\",\n- \"serde_json\",\n- \"tempfile\",\n- \"tester\",\n- \"winapi\",\n+ \"cfg-if\",\n+ \"crossbeam-channel\",\n+ \"crossbeam-deque\",\n+ \"crossbeam-epoch\",\n+ \"crossbeam-queue\",\n+ \"crossbeam-utils\",\n ]\n \n [[package]]\n-name = \"diff\"\n-version = \"0.1.12\"\n+name = \"crossbeam-channel\"\n+version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0e25ea47919b1560c4e3b7fe0aaab9becf5b84a10325ddf7db0f0ba5e1026499\"\n+checksum = \"5aaa7bd5fb665c6864b5f963dd9097905c54125909c7aa94c9e18507cdbe6c53\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"crossbeam-utils\",\n+]\n \n [[package]]\n-name = \"dirs-next\"\n-version = \"2.0.0\"\n+name = \"crossbeam-deque\"\n+version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\n+checksum = \"6455c0ca19f0d2fbf751b908d5c55c1f5cbc65e03c4225427254b46890bdde1e\"\n dependencies = [\n  \"cfg-if\",\n- \"dirs-sys-next\",\n+ \"crossbeam-epoch\",\n+ \"crossbeam-utils\",\n ]\n \n [[package]]\n-name = \"dirs-sys-next\"\n-version = \"0.1.2\"\n+name = \"crossbeam-epoch\"\n+version = \"0.9.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d\"\n+checksum = \"1145cf131a2c6ba0615079ab6a638f7e1973ac9c2634fcbeaaad6114246efe8c\"\n dependencies = [\n- \"libc\",\n- \"redox_users\",\n- \"winapi\",\n+ \"autocfg\",\n+ \"cfg-if\",\n+ \"crossbeam-utils\",\n+ \"lazy_static\",\n+ \"memoffset\",\n+ \"scopeguard\",\n ]\n \n [[package]]\n-name = \"env_logger\"\n-version = \"0.9.0\"\n+name = \"crossbeam-queue\"\n+version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0b2cf0344971ee6c64c31be0d530793fba457d322dfec2810c453d0ef228f9c3\"\n+checksum = \"1f25d8400f4a7a5778f0e4e52384a48cbd9b5c495d110786187fc750075277a2\"\n dependencies = [\n- \"atty\",\n- \"humantime\",\n- \"log\",\n- \"regex\",\n- \"termcolor\",\n+ \"cfg-if\",\n+ \"crossbeam-utils\",\n ]\n \n [[package]]\n-name = \"filetime\"\n-version = \"0.2.15\"\n+name = \"crossbeam-utils\"\n+version = \"0.8.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"975ccf83d8d9d0d84682850a38c8169027be83368805971cc4f238c2b245bc98\"\n+checksum = \"0bf124c720b7686e3c2663cf54062ab0f68a88af2fb6a030e87e30bf721fcb38\"\n dependencies = [\n  \"cfg-if\",\n- \"libc\",\n- \"redox_syscall\",\n- \"winapi\",\n+ \"lazy_static\",\n ]\n \n [[package]]\n-name = \"getopts\"\n-version = \"0.2.21\"\n+name = \"ctor\"\n+version = \"0.1.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"14dbbfd5c71d70241ecf9e6f13737f7b5ce823821063188d7e46c41d371eebd5\"\n+checksum = \"f877be4f7c9f246b183111634f75baa039715e3f46ce860677d3b19a69fb229c\"\n dependencies = [\n- \"unicode-width\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"diff\"\n+version = \"0.1.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0e25ea47919b1560c4e3b7fe0aaab9becf5b84a10325ddf7db0f0ba5e1026499\"\n+\n+[[package]]\n+name = \"env_logger\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0b2cf0344971ee6c64c31be0d530793fba457d322dfec2810c453d0ef228f9c3\"\n+dependencies = [\n+ \"atty\",\n+ \"humantime\",\n+ \"log\",\n+ \"regex\",\n+ \"termcolor\",\n ]\n \n [[package]]\n@@ -170,12 +193,6 @@ dependencies = [\n  \"cfg-if\",\n ]\n \n-[[package]]\n-name = \"itoa\"\n-version = \"1.0.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1aab8fc367588b89dcee83ab0fd66b72b50b72fa1904d7095045ace2b0c81c35\"\n-\n [[package]]\n name = \"lazy_static\"\n version = \"1.4.0\"\n@@ -236,40 +253,40 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"miow\"\n-version = \"0.3.7\"\n+name = \"memoffset\"\n+version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b9f1c5b025cda876f66ef43a113f91ebc9f4ccef34843000e0adf6ebbab84e21\"\n+checksum = \"5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce\"\n dependencies = [\n- \"winapi\",\n+ \"autocfg\",\n ]\n \n [[package]]\n name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"colored\",\n- \"compiletest_rs\",\n  \"env_logger\",\n  \"getrandom\",\n+ \"lazy_static\",\n  \"libc\",\n  \"log\",\n  \"measureme\",\n  \"rand\",\n+ \"regex\",\n  \"rustc-workspace-hack\",\n- \"rustc_version\",\n  \"shell-escape\",\n  \"smallvec\",\n+ \"ui_test\",\n ]\n \n [[package]]\n-name = \"num_cpus\"\n-version = \"1.13.0\"\n+name = \"output_vt100\"\n+version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3\"\n+checksum = \"628223faebab4e3e40667ee0b2336d34a5b960ff60ea743ddfdbcf7770bcfb66\"\n dependencies = [\n- \"hermit-abi\",\n- \"libc\",\n+ \"winapi\",\n ]\n \n [[package]]\n@@ -312,20 +329,32 @@ version = \"0.2.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ed0cfbc8191465bed66e1718596ee0b0b35d5ee1f41c5df2189d0fe8bde535ba\"\n \n+[[package]]\n+name = \"pretty_assertions\"\n+version = \"1.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c89f989ac94207d048d92db058e4f6ec7342b0971fc58d1271ca148b799b3563\"\n+dependencies = [\n+ \"ansi_term\",\n+ \"ctor\",\n+ \"diff\",\n+ \"output_vt100\",\n+]\n+\n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.33\"\n+version = \"1.0.39\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fb37d2df5df740e582f28f8560cf425f52bb267d872fe58358eadb554909f07a\"\n+checksum = \"c54b25569025b7fc9651de43004ae593a75ad88543b17178aa5e1b9c4f15f56f\"\n dependencies = [\n- \"unicode-xid\",\n+ \"unicode-ident\",\n ]\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.10\"\n+version = \"1.0.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"38bc8cc6a5f2e3655e0899c1b848643b2562f853f114bfec7be120678e3ace05\"\n+checksum = \"a1feb54ed693b93a84e14094943b84b7c4eae204c512b7ccb95ab0c66d278ad1\"\n dependencies = [\n  \"proc-macro2\",\n ]\n@@ -379,21 +408,11 @@ dependencies = [\n  \"bitflags\",\n ]\n \n-[[package]]\n-name = \"redox_users\"\n-version = \"0.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"528532f3d801c87aec9def2add9ca802fe569e44a544afe633765267840abe64\"\n-dependencies = [\n- \"getrandom\",\n- \"redox_syscall\",\n-]\n-\n [[package]]\n name = \"regex\"\n-version = \"1.5.4\"\n+version = \"1.5.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d07a8629359eb56f1e2fb1652bb04212c072a87ba68546a04065d525673ac461\"\n+checksum = \"1a11647b6b25ff05a515cb92c365cec08801e83423a235b51e231e1808747286\"\n dependencies = [\n  \"aho-corasick\",\n  \"memchr\",\n@@ -406,15 +425,6 @@ version = \"0.6.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b\"\n \n-[[package]]\n-name = \"remove_dir_all\"\n-version = \"0.5.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\n-dependencies = [\n- \"winapi\",\n-]\n-\n [[package]]\n name = \"rustc-hash\"\n version = \"1.1.0\"\n@@ -436,30 +446,6 @@ dependencies = [\n  \"semver\",\n ]\n \n-[[package]]\n-name = \"rustfix\"\n-version = \"0.5.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f2c50b74badcddeb8f7652fa8323ce440b95286f8e4b64ebfd871c609672704e\"\n-dependencies = [\n- \"anyhow\",\n- \"log\",\n- \"serde\",\n- \"serde_json\",\n-]\n-\n-[[package]]\n-name = \"rustversion\"\n-version = \"1.0.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f2cc38e8fa666e2de3c4aba7edeb5ffc5246c1c2ed0e3d17e560aeeba736b23f\"\n-\n-[[package]]\n-name = \"ryu\"\n-version = \"1.0.9\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"73b4b750c782965c211b42f022f59af1fbceabdd026623714f104152f1ec149f\"\n-\n [[package]]\n name = \"scopeguard\"\n version = \"1.1.0\"\n@@ -468,40 +454,9 @@ checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n \n [[package]]\n name = \"semver\"\n-version = \"1.0.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"568a8e6258aa33c13358f81fd834adb854c6f7c9468520910a9b1e8fac068012\"\n-\n-[[package]]\n-name = \"serde\"\n-version = \"1.0.131\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b4ad69dfbd3e45369132cc64e6748c2d65cdfb001a2b1c232d128b4ad60561c1\"\n-dependencies = [\n- \"serde_derive\",\n-]\n-\n-[[package]]\n-name = \"serde_derive\"\n-version = \"1.0.131\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b710a83c4e0dff6a3d511946b95274ad9ca9e5d3ae497b63fda866ac955358d2\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"serde_json\"\n-version = \"1.0.73\"\n+version = \"1.0.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bcbd0344bc6533bc7ec56df11d42fb70f1b912351c0825ccb7211b59d8af7cf5\"\n-dependencies = [\n- \"itoa\",\n- \"ryu\",\n- \"serde\",\n-]\n+checksum = \"8cb243bdfdb5936c8dc3c45762a19d12ab4550cdc753bc247637d4ec35a040fd\"\n \n [[package]]\n name = \"shell-escape\"\n@@ -517,38 +472,13 @@ checksum = \"1ecab6c735a6bb4139c0caafd0cc3635748bbb3acf4550e8138122099251f309\"\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.82\"\n+version = \"1.0.95\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8daf5dd0bb60cbd4137b1b587d2fc0ae729bc07cf01cd70b36a1ed5ade3b9d59\"\n+checksum = \"fbaf6116ab8924f39d52792136fb74fd60a80194cf1b1c6ffa6453eef1c3f942\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"unicode-xid\",\n-]\n-\n-[[package]]\n-name = \"tempfile\"\n-version = \"3.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dac1c663cfc93810f88aed9b8941d48cabf856a1b111c29a40439018d870eb22\"\n-dependencies = [\n- \"cfg-if\",\n- \"libc\",\n- \"rand\",\n- \"redox_syscall\",\n- \"remove_dir_all\",\n- \"winapi\",\n-]\n-\n-[[package]]\n-name = \"term\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c59df8ac95d96ff9bede18eb7300b0fda5e5d8d90960e76f8e14ae765eedbf1f\"\n-dependencies = [\n- \"dirs-next\",\n- \"rustversion\",\n- \"winapi\",\n+ \"unicode-ident\",\n ]\n \n [[package]]\n@@ -561,29 +491,22 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"tester\"\n-version = \"0.9.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0639d10d8f4615f223a57275cf40f9bdb7cfbb806bcb7f7cc56e3beb55a576eb\"\n+name = \"ui_test\"\n+version = \"0.1.0\"\n dependencies = [\n- \"cfg-if\",\n- \"getopts\",\n- \"libc\",\n- \"num_cpus\",\n- \"term\",\n+ \"colored\",\n+ \"crossbeam\",\n+ \"lazy_static\",\n+ \"pretty_assertions\",\n+ \"regex\",\n+ \"rustc_version\",\n ]\n \n [[package]]\n-name = \"unicode-width\"\n-version = \"0.1.9\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3ed742d4ea2bd1176e236172c8429aaf54486e7ac098db29ffe6529e0ce50973\"\n-\n-[[package]]\n-name = \"unicode-xid\"\n-version = \"0.2.2\"\n+name = \"unicode-ident\"\n+version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3\"\n+checksum = \"d22af068fba1eb5edcb4aea19d382b2a3deb4c8f9d475c589b6ada9e0fd493ee\"\n \n [[package]]\n name = \"wasi\""}, {"sha": "cf6f4c8b2ee965bdc073a671af84a3ddc418118d", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -37,9 +37,10 @@ measureme = \"9.1.2\"\n libc = \"0.2\"\n \n [dev-dependencies]\n-compiletest_rs = { version = \"0.7\", features = [\"tmp\"] }\n-rustc_version = \"0.4\"\n colored = \"2\"\n+ui_test = { path = \"ui_test\" }\n+regex = \"1.5.5\"\n+lazy_static = \"1.4.0\"\n \n [package.metadata.rust-analyzer]\n # This crate uses #[feature(rustc_private)]."}, {"sha": "afee8a8bfa053a1337718c996da210ecc960586a", "filename": "README.md", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -328,7 +328,7 @@ to Miri failing to detect cases of undefined behavior in a program.\n    using the tools in the repository https://github.com/rust-lang/measureme.\n * `-Zmiri-mute-stdout-stderr` silently ignores all writes to stdout and stderr,\n   but reports to the program that it did actually write. This is useful when you\n-  are not interested in the actual program's output, but only want to see miri's\n+  are not interested in the actual program's output, but only want to see Miri's\n   errors and warnings.\n * `-Zmiri-panic-on-unsupported` will makes some forms of unsupported functionality,\n   such as FFI and unsupported syscalls, panic within the context of the emulated\n@@ -412,6 +412,11 @@ Moreover, Miri recognizes some environment variables:\n * `MIRI_TEST_TARGET` (recognized by the test suite) indicates which target\n   architecture to test against.  `miri` and `cargo miri` accept the `--target`\n   flag for the same purpose.\n+* `MIRI_BLESS` (recognized by the test suite) overwrite all `stderr` and `stdout` files\n+  instead of checking whether the output matches.\n+* `MIRI_SKIP_UI_CHECKS` (recognized by the test suite) don't check whether the\n+  `stderr` or `stdout` files match the actual output. Useful for the rustc test suite\n+  which has subtle differences that we don't care about.\n \n The following environment variables are *internal* and must not be used by\n anyone but Miri itself. They are used to communicate between different Miri\n@@ -519,15 +524,15 @@ GitHub or use the [Miri stream on the Rust Zulip][zulip].\n \n This project began as part of an undergraduate research course in 2015 by\n @solson at the [University of Saskatchewan][usask].  There are [slides] and a\n-[report] available from that project.  In 2016, @oli-obk joined to prepare miri\n+[report] available from that project.  In 2016, @oli-obk joined to prepare Miri\n for eventually being used as const evaluator in the Rust compiler itself\n (basically, for `const` and `static` stuff), replacing the old evaluator that\n worked directly on the AST.  In 2017, @RalfJung did an internship with Mozilla\n-and began developing miri towards a tool for detecting undefined behavior, and\n-also using miri as a way to explore the consequences of various possible\n-definitions for undefined behavior in Rust.  @oli-obk's move of the miri engine\n+and began developing Miri towards a tool for detecting undefined behavior, and\n+also using Miri as a way to explore the consequences of various possible\n+definitions for undefined behavior in Rust.  @oli-obk's move of the Miri engine\n into the compiler finally came to completion in early 2018.  Meanwhile, later\n-that year, @RalfJung did a second internship, developing miri further with\n+that year, @RalfJung did a second internship, developing Miri further with\n support for checking basic type invariants and verifying that references are\n used according to their aliasing restrictions.\n "}, {"sha": "e08cb8c88c00e5162b8afafd23d54e34d4623b47", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -461,7 +461,12 @@ path = \"lib.rs\"\n     command.env_remove(\"RUSTFLAGS\");\n     // Disable debug assertions in the standard library -- Miri is already slow enough.\n     // But keep the overflow checks, they are cheap.\n-    command.env(\"RUSTFLAGS\", \"-Cdebug-assertions=off -Coverflow-checks=on\");\n+    // Also remap the current directory to something that is stable across different\n+    // machines. Otherwise ui output would contain the current directory.\n+    command.env(\n+        \"RUSTFLAGS\",\n+        \"-Cdebug-assertions=off -Coverflow-checks=on -Zremap-cwd-prefix=rustc_src\",\n+    );\n     // Finally run it!\n     if command.status().expect(\"failed to run xargo\").success().not() {\n         show_error(format!(\"failed to run xargo\"));"}, {"sha": "d435e0e2a210bc4b4195fa896bf479088e52143c", "filename": "ci.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -24,7 +24,8 @@ function run_tests {\n   if [ -z \"${MIRI_TEST_TARGET+exists}\" ]; then\n     # Only for host architecture: tests with optimizations (`-O` is what cargo passes, but crank MIR\n     # optimizations up all the way).\n-    MIRIFLAGS=\"-O -Zmir-opt-level=4\" ./miri test --locked\n+    # Optimizations change diagnostics (mostly backtraces), so we don't check them\n+    MIRIFLAGS=\"-O -Zmir-opt-level=4\" MIRI_SKIP_UI_CHECKS=1 ./miri test --locked\n   fi\n \n   # On Windows, there is always \"python\", not \"python3\" or \"python2\"."}, {"sha": "6a809b74356a34fafd855143e73c7683cf79090f", "filename": "miri", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/miri", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -123,10 +123,15 @@ build|build-debug)\n     cargo build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n     cargo build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n     ;;\n-test|test-debug)\n+test|test-debug|bless|bless-debug)\n     # First build and get a sysroot.\n     cargo build $CARGO_BUILD_FLAGS\n     find_sysroot\n+    case \"$COMMAND\" in\n+    bless|bless-debug)\n+        export MIRI_BLESS=\"Gesundheit\"\n+        ;;\n+    esac\n     # Then test, and let caller control flags.\n     # Only in root project as `cargo-miri` has no tests.\n     exec cargo test $CARGO_BUILD_FLAGS \"$@\""}, {"sha": "249b578b1214af37f10b1eadcd20b7db254a60d7", "filename": "src/machine.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -583,7 +583,11 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         if let Some(&ptr) = ecx.machine.extern_statics.get(&link_name) {\n             Ok(ptr)\n         } else {\n-            throw_unsup_format!(\"`extern` static {:?} is not supported by Miri\", def_id)\n+            throw_unsup_format!(\n+                \"`extern` static `{}` from crate `{}` is not supported by Miri\",\n+                ecx.tcx.def_path_str(def_id),\n+                ecx.tcx.crate_name(def_id.krate),\n+            )\n         }\n     }\n "}, {"sha": "76501ca074fddba6ccd78a554db83265b8ee7a84", "filename": "tests/compile-fail/abort-terminator.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fabort-terminator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fabort-terminator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fabort-terminator.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,19 @@\n+thread 'main' panicked at 'explicit panic', $DIR/abort-terminator.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: abnormal termination: the program aborted execution\n+  --> $DIR/abort-terminator.rs:LL:CC\n+   |\n+LL | extern \"C\" fn panic_abort() { panic!() }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the program aborted execution\n+   |\n+   = note: inside `panic_abort` at $DIR/abort-terminator.rs:LL:CC\n+note: inside `main` at $DIR/abort-terminator.rs:LL:CC\n+  --> $DIR/abort-terminator.rs:LL:CC\n+   |\n+LL |     panic_abort();\n+   |     ^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "e03704b118a6726f0cbf6c5eccfdd07de4a29ddb", "filename": "tests/compile-fail/alloc/deallocate-bad-alignment.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-alignment.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: incorrect layout on deallocation: ALLOC has size 1 and alignment ALIGN, but gave size 1 and alignment ALIGN\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n+note: inside `main` at $DIR/deallocate-bad-alignment.rs:LL:CC\n+  --> $DIR/deallocate-bad-alignment.rs:LL:CC\n+   |\n+LL |         dealloc(x, Layout::from_size_align_unchecked(1, 2));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "3ab15094daeb803905cdfe701e2d8ca5993d4f56", "filename": "tests/compile-fail/alloc/deallocate-bad-size.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fdeallocate-bad-size.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: incorrect layout on deallocation: ALLOC has size 1 and alignment ALIGN, but gave size 2 and alignment ALIGN\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n+note: inside `main` at $DIR/deallocate-bad-size.rs:LL:CC\n+  --> $DIR/deallocate-bad-size.rs:LL:CC\n+   |\n+LL |         dealloc(x, Layout::from_size_align_unchecked(2, 1));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "dfd14c397865e3309be217dc159e8b711028bd7e", "filename": "tests/compile-fail/alloc/deallocate-twice.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fdeallocate-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fdeallocate-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fdeallocate-twice.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n+note: inside `main` at $DIR/deallocate-twice.rs:LL:CC\n+  --> $DIR/deallocate-twice.rs:LL:CC\n+   |\n+LL |         dealloc(x, Layout::from_size_align_unchecked(1, 1));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "3f58de4d6fb0a1f81ab8780d69b5cfbc37391f65", "filename": "tests/compile-fail/alloc/global_system_mixup.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -2,6 +2,8 @@\n // (even when the default `Global` uses `System`).\n // error-pattern: which is Rust heap memory, using\n \n+// normalize-stderr-test: \"using [A-Za-z]+ heap deallocation operation\" -> \"using PLATFORM heap deallocation operation\"\n+\n #![feature(allocator_api, slice_ptr_get)]\n \n use std::alloc::{Allocator, Global, System, Layout};"}, {"sha": "93598be134f7790a7d9e3991e714fa0d3ea831a3", "filename": "tests/compile-fail/alloc/global_system_mixup.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fglobal_system_mixup.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+error: Undefined Behavior: deallocating ALLOC, which is Rust heap memory, using PLATFORM heap deallocation operation\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::sys::PLATFORM::alloc::<impl std::alloc::GlobalAlloc for std::alloc::System>::dealloc` at rustc_src/src/sys/PLATFORM/alloc.rs:LL:CC\n+   = note: inside `<std::alloc::System as std::alloc::Allocator>::deallocate` at rustc_src/src/alloc.rs:LL:CC\n+note: inside `main` at $DIR/global_system_mixup.rs:LL:CC\n+  --> $DIR/global_system_mixup.rs:LL:CC\n+   |\n+LL |     unsafe { System.deallocate(ptr, l); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "2a9840ee83c4cc0db2ac7ad8b09c9dd9e43ffa90", "filename": "tests/compile-fail/alloc/no_global_allocator.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fno_global_allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fno_global_allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fno_global_allocator.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,12 @@\n+error: unsupported operation: can't call foreign function: __rust_alloc\n+  --> $DIR/no_global_allocator.rs:LL:CC\n+   |\n+LL |         __rust_alloc(1, 1);\n+   |         ^^^^^^^^^^^^^^^^^^ can't call foreign function: __rust_alloc\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `start` at $DIR/no_global_allocator.rs:LL:CC\n+\n+error: aborting due to previous error\n+"}, {"sha": "f2692b1c343f99d34ca2487c4c539478269efbfd", "filename": "tests/compile-fail/alloc/reallocate-bad-size.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Freallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Freallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Freallocate-bad-size.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: incorrect layout on deallocation: ALLOC has size 1 and alignment ALIGN, but gave size 2 and alignment ALIGN\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::alloc::realloc` at rustc_src/src/alloc.rs:LL:CC\n+note: inside `main` at $DIR/reallocate-bad-size.rs:LL:CC\n+  --> $DIR/reallocate-bad-size.rs:LL:CC\n+   |\n+LL |         let _y = realloc(x, Layout::from_size_align_unchecked(2, 1), 1);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "d400931379b06e64f782a60cbf1dd159a3352d69", "filename": "tests/compile-fail/alloc/reallocate-change-alloc.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Freallocate-change-alloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Freallocate-change-alloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Freallocate-change-alloc.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/reallocate-change-alloc.rs:LL:CC\n+   |\n+LL |         let _z = *x;\n+   |                  ^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/reallocate-change-alloc.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "d813fb0db9026c79ea4caafb8ecc98b04242bea0", "filename": "tests/compile-fail/alloc/reallocate-dangling.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Freallocate-dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Freallocate-dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Freallocate-dangling.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::alloc::realloc` at rustc_src/src/alloc.rs:LL:CC\n+note: inside `main` at $DIR/reallocate-dangling.rs:LL:CC\n+  --> $DIR/reallocate-dangling.rs:LL:CC\n+   |\n+LL |         let _z = realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "9df85d6eab7f57c4c604a51eba93aa453c9d4a5e", "filename": "tests/compile-fail/alloc/stack_free.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fstack_free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Falloc%2Fstack_free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fstack_free.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: deallocating ALLOC, which is stack variable memory, using Rust heap deallocation operation\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))` at rustc_src/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::mem::drop::<std::boxed::Box<i32>>` at rustc_src/src/mem/mod.rs:LL:CC\n+note: inside `main` at $DIR/stack_free.rs:LL:CC\n+  --> $DIR/stack_free.rs:LL:CC\n+   |\n+LL |     drop(bad_box);\n+   |     ^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "007ef96f72a95dc564985cc1cdb7866f3128fc39", "filename": "tests/compile-fail/backtrace/bad-backtrace-decl.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-decl.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: bad declaration of miri_resolve_frame - should return a struct with 5 fields\n+  --> $DIR/bad-backtrace-decl.rs:LL:CC\n+   |\n+LL | ...   miri_resolve_frame(*frame, 0);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bad declaration of miri_resolve_frame - should return a struct with 5 fields\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/bad-backtrace-decl.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f6ffe3c93c89165b9de069eed8f99d0feb86c93e", "filename": "tests/compile-fail/backtrace/bad-backtrace-flags.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-flags.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: unknown `miri_get_backtrace` flags 2\n+  --> $DIR/bad-backtrace-flags.rs:LL:CC\n+   |\n+LL |         miri_get_backtrace(2, 0 as *mut _);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_get_backtrace` flags 2\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/bad-backtrace-flags.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "ed726a5dcdc22c08b1d14624f2ae0a902db4ac7d", "filename": "tests/compile-fail/backtrace/bad-backtrace-ptr.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-ptr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: null pointer is not a valid pointer for this operation\n+  --> $DIR/bad-backtrace-ptr.rs:LL:CC\n+   |\n+LL |         miri_resolve_frame(0 as *mut _, 0);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/bad-backtrace-ptr.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "49495651dfec4656ba9f3e264682dae531f6bce9", "filename": "tests/compile-fail/backtrace/bad-backtrace-resolve-flags.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: unknown `miri_resolve_frame` flags 2\n+  --> $DIR/bad-backtrace-resolve-flags.rs:LL:CC\n+   |\n+LL |         miri_resolve_frame(buf[0], 2);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_resolve_frame` flags 2\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/bad-backtrace-resolve-flags.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "d575caa4ff4ede75957c8345b86b83052a49dc33", "filename": "tests/compile-fail/backtrace/bad-backtrace-resolve-names-flags.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: unknown `miri_resolve_frame_names` flags 2\n+  --> $DIR/bad-backtrace-resolve-names-flags.rs:LL:CC\n+   |\n+LL | ...   miri_resolve_frame_names(buf[0], 2, 0 as *mut _, 0 as *mut _);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_resolve_frame_names` flags 2\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/bad-backtrace-resolve-names-flags.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "09f22b74b9c34f88fbb38cdf2c89882e7dbdfecf", "filename": "tests/compile-fail/backtrace/bad-backtrace-size-flags.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-size-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-size-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-size-flags.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: unknown `miri_backtrace_size` flags 2\n+  --> $DIR/bad-backtrace-size-flags.rs:LL:CC\n+   |\n+LL |         miri_backtrace_size(2);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_backtrace_size` flags 2\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/bad-backtrace-size-flags.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "4e7292732754b76eb315199f29394ecf3621bd2e", "filename": "tests/compile-fail/backtrace/bad-backtrace-version.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-version.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-version.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-version.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: unknown `miri_resolve_frame` flags 1\n+  --> $DIR/bad-backtrace-version.rs:7:9\n+   |\n+LL |         miri_resolve_frame(0 as *mut _, 1); //~ ERROR  unsupported operation: unknown `miri_resolve_frame` flags 1\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_resolve_frame` flags 1\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/bad-backtrace-version.rs:7:9\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "a4eaec93a8fb24ad73316e42f7e43d3e096f135f", "filename": "tests/compile-fail/box-cell-alias.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbox-cell-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbox-cell-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbox-cell-alias.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,32 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/box-cell-alias.rs:LL:CC\n+   |\n+LL |     unsafe { (*ptr).set(20); }\n+   |              ^^^^^^^^^^^^^^\n+   |              |\n+   |              trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |              this error occurs as part of a reborrow at ALLOC[0x0..0x1]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x1]\n+  --> $DIR/box-cell-alias.rs:LL:CC\n+   |\n+LL |     let ptr: *const Cell<u8> = &*val;\n+   |                                ^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x1]\n+  --> $DIR/box-cell-alias.rs:LL:CC\n+   |\n+LL |     let res = helper(val, ptr);\n+   |                      ^^^\n+   = note: inside `helper` at $DIR/box-cell-alias.rs:LL:CC\n+note: inside `main` at $DIR/box-cell-alias.rs:LL:CC\n+  --> $DIR/box-cell-alias.rs:LL:CC\n+   |\n+LL |     let res = helper(val, ptr);\n+   |               ^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "2e0f813983031547c604167fa0a63153b4571238", "filename": "tests/compile-fail/branchless-select-i128-pointer.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbranchless-select-i128-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbranchless-select-i128-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbranchless-select-i128-pointer.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: type validation failed: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+  --> $DIR/branchless-select-i128-pointer.rs:LL:CC\n+   |\n+LL |                 !mask & transmute::<_, TwoPtrs>(\"false !\") | mask & transmute::<_, TwoPtrs>(\"true !\"),\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/branchless-select-i128-pointer.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "7b9bbdb382895a75b589e37b65e279571458db02", "filename": "tests/compile-fail/breakpoint.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbreakpoint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fbreakpoint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbreakpoint.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,12 @@\n+error: abnormal termination: Trace/breakpoint trap\n+  --> $DIR/breakpoint.rs:LL:CC\n+   |\n+LL |         core::intrinsics::breakpoint()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Trace/breakpoint trap\n+   |\n+   = note: inside `main` at $DIR/breakpoint.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "0f7fbefe0af0894984aed219d39955063e10fa4e", "filename": "tests/compile-fail/concurrency/libc_pthread_create_main_terminate.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_create_main_terminate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_create_main_terminate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_create_main_terminate.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,8 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: the main thread terminated without waiting for all remaining threads\n+\n+note: pass `-Zmiri-ignore-leaks` to disable this check\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "688f61a98b904fa295be4d0781bf4e5ef8f58e6f", "filename": "tests/compile-fail/concurrency/libc_pthread_join_detached.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_detached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_detached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_detached.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: trying to join a detached or already joined thread\n+  --> $DIR/libc_pthread_join_detached.rs:LL:CC\n+   |\n+LL | ...   assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trying to join a detached or already joined thread\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/libc_pthread_join_detached.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "518f72de5bef85ad7bf9b1f6a07e11906301bee1", "filename": "tests/compile-fail/concurrency/libc_pthread_join_joined.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_joined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_joined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_joined.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: trying to join a detached or already joined thread\n+  --> $DIR/libc_pthread_join_joined.rs:LL:CC\n+   |\n+LL | ...   assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trying to join a detached or already joined thread\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/libc_pthread_join_joined.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "5d9ec148e079716d566f43e3820b2cb21d801b22", "filename": "tests/compile-fail/concurrency/libc_pthread_join_main.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_main.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: trying to join a detached or already joined thread\n+  --> $DIR/libc_pthread_join_main.rs:LL:CC\n+   |\n+LL | ...   assert_eq!(libc::pthread_join(thread_id, ptr::null_mut()), 0);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trying to join a detached or already joined thread\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/libc_pthread_join_main.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "57126a14ae2ff4bb32fcef3e6a33e30a8d9fff50", "filename": "tests/compile-fail/concurrency/libc_pthread_join_multiple.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: trying to join a detached or already joined thread\n+  --> $DIR/libc_pthread_join_multiple.rs:LL:CC\n+   |\n+LL | ...   assert_eq!(libc::pthread_join(native_copy, ptr::null_mut()), 0);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trying to join a detached or already joined thread\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/libc_pthread_join_multiple.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "d638d089398ae3b7d26410a511f98ae37cb8817f", "filename": "tests/compile-fail/concurrency/libc_pthread_join_self.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_self.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: trying to join itself\n+  --> $DIR/libc_pthread_join_self.rs:LL:CC\n+   |\n+LL |             assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trying to join itself\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/libc_pthread_join_self.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "948ce946d8948491e3cf5cf7f9498fd223cc1411", "filename": "tests/compile-fail/concurrency/thread-spawn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Fthread-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Fthread-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Fthread-spawn.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,5 +1,4 @@\n-// ignore-linux: Only Windows is not supported.\n-// ignore-macos: Only Windows is not supported.\n+// only-windows: Only Windows is not supported.\n \n use std::thread;\n "}, {"sha": "cdeb22fb3175972a6546241d3eb172a4e849d978", "filename": "tests/compile-fail/concurrency/thread_local_static_dealloc.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Fthread_local_static_dealloc.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/thread_local_static_dealloc.rs:LL:CC\n+   |\n+LL |     let _val = *(dangling_ptr as *const u8);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/thread_local_static_dealloc.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "753b5e9ea7eb21d06d44652ff446ec8e202ba78c", "filename": "tests/compile-fail/concurrency/too_few_args.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_few_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_few_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_few_args.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: callee has fewer arguments than expected\n+  --> $DIR/too_few_args.rs:LL:CC\n+   |\n+LL |     panic!()\n+   |     ^^^^^^^^ callee has fewer arguments than expected\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `thread_start` at rustc_src/src/panic.rs:LL:CC\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "483b032a9b1733d23a06d0de6657aa2ecfa05600", "filename": "tests/compile-fail/concurrency/too_many_args.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Ftoo_many_args.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: callee has more arguments than expected\n+  --> $DIR/too_many_args.rs:LL:CC\n+   |\n+LL |     panic!()\n+   |     ^^^^^^^^ callee has more arguments than expected\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `thread_start` at rustc_src/src/panic.rs:LL:CC\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "600b8443d2c79f51849433f13bee8ecd64414db6", "filename": "tests/compile-fail/concurrency/unwind_top_of_stack.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Funwind_top_of_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fconcurrency%2Funwind_top_of_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Funwind_top_of_stack.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,19 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+thread '<unnamed>' panicked at 'explicit panic', $DIR/unwind_top_of_stack.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: Undefined Behavior: unwinding past the topmost frame of the stack\n+  --> $DIR/unwind_top_of_stack.rs:LL:CC\n+   |\n+LL | / extern \"C-unwind\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {\n+LL | |     panic!()\n+LL | | }\n+   | |_^ unwinding past the topmost frame of the stack\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `thread_start` at $DIR/unwind_top_of_stack.rs:LL:CC\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "6638be3758cfee9fcdbcfd7de3a4f69ded68e027", "filename": "tests/compile-fail/dangling_pointers/dangling_pointer_addr_of.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/dangling_pointer_addr_of.rs:LL:CC\n+   |\n+LL |     let x = unsafe { ptr::addr_of!(*p) };\n+   |                      ^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at rustc_src/src/ptr/mod.rs:LL:CC\n+   = note: this error originates in the macro `ptr::addr_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "69e7af74857a27587bce98212237ee4db377ce60", "filename": "tests/compile-fail/dangling_pointers/dangling_pointer_deref.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/dangling_pointer_deref.rs:LL:CC\n+   |\n+LL |     let x = unsafe { *p };\n+   |                      ^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/dangling_pointer_deref.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "658635433c7a8fcb60a5eefd5abaec4db99e9fbf", "filename": "tests/compile-fail/dangling_pointers/dangling_zst_deref.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_zst_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_zst_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_zst_deref.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/dangling_zst_deref.rs:LL:CC\n+   |\n+LL |     let _x = unsafe { *p };\n+   |                       ^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/dangling_zst_deref.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "56830e97caa377437e64ef3cae7396837e98cc2c", "filename": "tests/compile-fail/dangling_pointers/deref-invalid-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-invalid-ptr.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -3,5 +3,5 @@\n \n fn main() {\n     let x = 16usize as *const u32;\n-    let _y = unsafe { &*x as *const u32 }; //~ ERROR 0x10 is not a valid pointer\n+    let _y = unsafe { &*x as *const u32 }; //~ ERROR is not a valid pointer\n }"}, {"sha": "f4361d9fefa95fef2c17b2ac70627b37200f26d8", "filename": "tests/compile-fail/dangling_pointers/deref-invalid-ptr.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: 0x10 is not a valid pointer\n+  --> $DIR/deref-invalid-ptr.rs:LL:CC\n+   |\n+LL |     let _y = unsafe { &*x as *const u32 };\n+   |                       ^^^ dereferencing pointer failed: 0x10 is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/deref-invalid-ptr.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "dc51eae71a3a3eba501ba526c678a6835e5b5965", "filename": "tests/compile-fail/dangling_pointers/deref-partially-dangling.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-partially-dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-partially-dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-partially-dangling.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 8, so pointer to 12 bytes starting at offset 0 is out-of-bounds\n+  --> $DIR/deref-partially-dangling.rs:LL:CC\n+   |\n+LL |     let val = unsafe { (*xptr).1 };\n+   |                        ^^^^^^^^^ dereferencing pointer failed: ALLOC has size 8, so pointer to 12 bytes starting at offset 0 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/deref-partially-dangling.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "6048a3b4434d641b67cd63eeacf3bdc85f207f22", "filename": "tests/compile-fail/dangling_pointers/dyn_size.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fdyn_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fdyn_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fdyn_size.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 4, so pointer to 5 bytes starting at offset 0 is out-of-bounds\n+  --> $DIR/dyn_size.rs:LL:CC\n+   |\n+LL |     let _ptr = unsafe { &*ptr };\n+   |                         ^^^^^ dereferencing pointer failed: ALLOC has size 4, so pointer to 5 bytes starting at offset 0 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/dyn_size.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b4da315a5542706b5ff748b2e6ced7e817399d65", "filename": "tests/compile-fail/dangling_pointers/maybe_null_pointer_deref_zst.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 1, so pointer at offset -2048 is out-of-bounds\n+  --> $DIR/maybe_null_pointer_deref_zst.rs:LL:CC\n+   |\n+LL |     let _x: () = unsafe { *ptr };\n+   |                           ^^^^ dereferencing pointer failed: ALLOC has size 1, so pointer at offset -2048 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/maybe_null_pointer_deref_zst.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "dc810424abc6c1b61df0bdea06d2fa1dcd61ed67", "filename": "tests/compile-fail/dangling_pointers/maybe_null_pointer_write_zst.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 1, so pointer at offset -2048 is out-of-bounds\n+  --> $DIR/maybe_null_pointer_write_zst.rs:LL:CC\n+   |\n+LL |     unsafe { *ptr = zst_val; }\n+   |              ^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC has size 1, so pointer at offset -2048 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/maybe_null_pointer_write_zst.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "0930160023f1bb2ce1f7db63d08b384878114e71", "filename": "tests/compile-fail/dangling_pointers/null_pointer_deref.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_deref.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: null pointer is not a valid pointer\n+  --> $DIR/null_pointer_deref.rs:LL:CC\n+   |\n+LL |     let x: i32 = unsafe { *std::ptr::null() };\n+   |                           ^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/null_pointer_deref.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "25fea50b15af1ae72a2f4afab76e28ab435a9514", "filename": "tests/compile-fail/dangling_pointers/null_pointer_deref_zst.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: null pointer is not a valid pointer\n+  --> $DIR/null_pointer_deref_zst.rs:LL:CC\n+   |\n+LL |     let x: () = unsafe { *std::ptr::null() };\n+   |                          ^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/null_pointer_deref_zst.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "5ac8cc7c20fdfd892af26f07755df30377cadf2f", "filename": "tests/compile-fail/dangling_pointers/null_pointer_write.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_write.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: null pointer is not a valid pointer\n+  --> $DIR/null_pointer_write.rs:LL:CC\n+   |\n+LL |     unsafe { *std::ptr::null_mut() = 0i32 };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/null_pointer_write.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b40a9154f18268281090cb54c93ff4bcae5226d2", "filename": "tests/compile-fail/dangling_pointers/null_pointer_write_zst.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+error: Undefined Behavior: memory access failed: null pointer is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::ptr::write::<[u8; 0]>` at rustc_src/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::ptr::mut_ptr::<impl *mut [u8; 0]>::write` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+note: inside `main` at $DIR/null_pointer_write_zst.rs:LL:CC\n+  --> $DIR/null_pointer_write_zst.rs:LL:CC\n+   |\n+LL |     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "1982b07066b1c7bfff5fc6b9c39987d717bd3aec", "filename": "tests/compile-fail/dangling_pointers/out_of_bounds_read1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 2, so pointer to 1 byte starting at offset 5 is out-of-bounds\n+  --> $DIR/out_of_bounds_read1.rs:LL:CC\n+   |\n+LL |     let x = unsafe { *v.as_ptr().wrapping_offset(5) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC has size 2, so pointer to 1 byte starting at offset 5 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/out_of_bounds_read1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b70ce44c48a08bac25fb14a2ddeb0d35c058649d", "filename": "tests/compile-fail/dangling_pointers/out_of_bounds_read2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 2, so pointer to 1 byte starting at offset 5 is out-of-bounds\n+  --> $DIR/out_of_bounds_read2.rs:LL:CC\n+   |\n+LL |     let x = unsafe { *v.as_ptr().wrapping_offset(5) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC has size 2, so pointer to 1 byte starting at offset 5 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/out_of_bounds_read2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f4f84765be54b069cf20b4b5e9fd20b43d47e5b8", "filename": "tests/compile-fail/dangling_pointers/stack_temporary.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fstack_temporary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fstack_temporary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fstack_temporary.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/stack_temporary.rs:LL:CC\n+   |\n+LL |         let val = *x;\n+   |                   ^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/stack_temporary.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "aed14105ad077fa0441322ab7892c0743d798bc8", "filename": "tests/compile-fail/dangling_pointers/storage_dead_dangling.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/storage_dead_dangling.rs:LL:CC\n+   |\n+LL |     unsafe { &mut *(LEAK as *mut i32) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `evil` at $DIR/storage_dead_dangling.rs:LL:CC\n+note: inside `main` at $DIR/storage_dead_dangling.rs:LL:CC\n+  --> $DIR/storage_dead_dangling.rs:LL:CC\n+   |\n+LL |     evil();\n+   |     ^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "eebaea48ba67dad32b4f437fd0d8643c2dda843d", "filename": "tests/compile-fail/dangling_pointers/wild_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fwild_pointer_deref.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let p = 44 as *const i32;\n-    let x = unsafe { *p }; //~ ERROR 0x2c is not a valid pointer\n+    let x = unsafe { *p }; //~ ERROR is not a valid pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "b20f310da083be1fc55877ac0ffff209907d4c9d", "filename": "tests/compile-fail/dangling_pointers/wild_pointer_deref.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fwild_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdangling_pointers%2Fwild_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fwild_pointer_deref.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: 0x2c is not a valid pointer\n+  --> $DIR/wild_pointer_deref.rs:LL:CC\n+   |\n+LL |     let x = unsafe { *p };\n+   |                      ^^ dereferencing pointer failed: 0x2c is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/wild_pointer_deref.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "9d9006966b335805fc22f259edcab9ebdb9643b1", "filename": "tests/compile-fail/data_race/alloc_read_race.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Falloc_read_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Falloc_read_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Falloc_read_race.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Read on Thread(id = 2) and Allocate on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/alloc_read_race.rs:LL:CC\n+   |\n+LL |             *pointer.load(Ordering::Relaxed)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on Thread(id = 2) and Allocate on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/alloc_read_race.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "318895cae6b06bbd1ef92e5dd8af4b96591dbaf6", "filename": "tests/compile-fail/data_race/alloc_write_race.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Falloc_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Falloc_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Falloc_write_race.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Write on Thread(id = 2) and Allocate on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/alloc_write_race.rs:LL:CC\n+   |\n+LL |             *pointer.load(Ordering::Relaxed) = 2;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on Thread(id = 2) and Allocate on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/alloc_write_race.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "09d7accb0543141a82b58b73f17f9b6bd592b6ce", "filename": "tests/compile-fail/data_race/atomic_read_na_write_race1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Atomic Load on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/atomic_read_na_write_race1.rs:LL:CC\n+   |\n+LL |             atomic_load(c.0 as *mut usize)\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Load on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/atomic_read_na_write_race1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "739ce83d0b07209ab74fb92fb1ac175690e426cc", "filename": "tests/compile-fail/data_race/atomic_read_na_write_race2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Write on Thread(id = 2) and Atomic Load on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/atomic_read_na_write_race2.rs:LL:CC\n+   |\n+LL |             *atomic_ref.get_mut() = 32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on Thread(id = 2) and Atomic Load on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/atomic_read_na_write_race2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "6d67f58aaee4198f955e122762cb7b2b03601a8c", "filename": "tests/compile-fail/data_race/atomic_write_na_read_race1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Read on Thread(id = 2) and Atomic Store on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/atomic_write_na_read_race1.rs:LL:CC\n+   |\n+LL |             *atomic_ref.get_mut()\n+   |             ^^^^^^^^^^^^^^^^^^^^^ Data race detected between Read on Thread(id = 2) and Atomic Store on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/atomic_write_na_read_race1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "d9950ebcb75babb0788625f85a7a478d7af04835", "filename": "tests/compile-fail/data_race/atomic_write_na_read_race2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Atomic Store on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/atomic_write_na_read_race2.rs:LL:CC\n+   |\n+LL |             atomic_store(c.0 as *mut usize, 32);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/atomic_write_na_read_race2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "29ccf7021253e5619ea05f192a2dfd1d53f0b552", "filename": "tests/compile-fail/data_race/atomic_write_na_write_race1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Atomic Store on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/atomic_write_na_write_race1.rs:LL:CC\n+   |\n+LL |             atomic_store(c.0 as *mut usize, 64);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Atomic Store on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/atomic_write_na_write_race1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "5488f05de031e38e05911989d388d3f1384be1ef", "filename": "tests/compile-fail/data_race/atomic_write_na_write_race2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Write on Thread(id = 2) and Atomic Store on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/atomic_write_na_write_race2.rs:LL:CC\n+   |\n+LL |             *atomic_ref.get_mut() = 32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Write on Thread(id = 2) and Atomic Store on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/atomic_write_na_write_race2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "eccc243d696efa1ca25b5e78093973f6ec889cc6", "filename": "tests/compile-fail/data_race/dangling_thread_async_race.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Write on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/dangling_thread_async_race.rs:LL:CC\n+   |\n+LL |             *c.0 = 64;\n+   |             ^^^^^^^^^ Data race detected between Write on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/dangling_thread_async_race.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "4dffeb14233a1c45a487c15367ffaf1635e03a16", "filename": "tests/compile-fail/data_race/dangling_thread_race.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_race.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Write on Thread(id = 0, name = \"main\") and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/dangling_thread_race.rs:LL:CC\n+   |\n+LL |         *c.0 = 64;\n+   |         ^^^^^^^^^ Data race detected between Write on Thread(id = 0, name = \"main\") and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/dangling_thread_race.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "37196021ead93fe582eba29df1f25bbc7bc03fb4", "filename": "tests/compile-fail/data_race/dealloc_read_race1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Deallocate on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/dealloc_read_race1.rs:LL:CC\n+   |\n+LL |             __rust_dealloc(ptr.0 as *mut _, std::mem::size_of::<usize>(), std::mem::align_of::<usize>());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Deallocate on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/dealloc_read_race1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "03fb5dbea90d5d22020bf8f682ea799ec9c53839", "filename": "tests/compile-fail/data_race/dealloc_read_race2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/dealloc_read_race2.rs:LL:CC\n+   |\n+LL |             *ptr.0\n+   |             ^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/dealloc_read_race2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "055724fe29794278de3a03649c9f6ead96b6660e", "filename": "tests/compile-fail/data_race/dealloc_read_race_stack.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/dealloc_read_race_stack.rs:LL:CC\n+   |\n+LL |             }\n+   |             ^ Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/dealloc_read_race_stack.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "7160f49af697d61d7c0ef8e9197785541440ad06", "filename": "tests/compile-fail/data_race/dealloc_write_race1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Deallocate on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/dealloc_write_race1.rs:LL:CC\n+   |\n+LL |             __rust_dealloc(ptr.0 as *mut _, std::mem::size_of::<usize>(), std::mem::align_of::<usize>());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Data race detected between Deallocate on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/dealloc_write_race1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "cb0d0af8672b3a104df3eb526f8858f4a04478ec", "filename": "tests/compile-fail/data_race/dealloc_write_race2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/dealloc_write_race2.rs:LL:CC\n+   |\n+LL |             *ptr.0 = 2;\n+   |             ^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/dealloc_write_race2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "05a8e1a8b7e2189115ef8233096b31fd0dd3dc41", "filename": "tests/compile-fail/data_race/dealloc_write_race_stack.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Deallocate on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/dealloc_write_race_stack.rs:LL:CC\n+   |\n+LL |             }\n+   |             ^ Data race detected between Deallocate on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/dealloc_write_race_stack.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "e612e08ade4ffcafb5ed40cb19b6736425592830", "filename": "tests/compile-fail/data_race/enable_after_join_to_main.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fenable_after_join_to_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fenable_after_join_to_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fenable_after_join_to_main.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Write on Thread(id = 6) and Write on Thread(id = 5) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/enable_after_join_to_main.rs:LL:CC\n+   |\n+LL |             *c.0 = 64;\n+   |             ^^^^^^^^^ Data race detected between Write on Thread(id = 6) and Write on Thread(id = 5) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/enable_after_join_to_main.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "fc04141830bffbc654f40a15933b6b3e1d9303dd", "filename": "tests/compile-fail/data_race/read_write_race.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Write on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/read_write_race.rs:LL:CC\n+   |\n+LL |             *c.0 = 64;\n+   |             ^^^^^^^^^ Data race detected between Write on Thread(id = 2) and Read on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/read_write_race.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "aad63731ca0505b333f516e48970b0552d5f61e4", "filename": "tests/compile-fail/data_race/read_write_race_stack.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Read on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/read_write_race_stack.rs:LL:CC\n+   |\n+LL |             stack_var\n+   |             ^^^^^^^^^ Data race detected between Read on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/read_write_race_stack.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "a437120c891d73252a4944a37b77bdb73071d97d", "filename": "tests/compile-fail/data_race/relax_acquire_race.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/relax_acquire_race.rs:LL:CC\n+   |\n+LL |                 *c.0\n+   |                 ^^^^ Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/relax_acquire_race.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "1a1c7ac64f78ed931a3f13a9f5b9ddfe60658d21", "filename": "tests/compile-fail/data_race/release_seq_race.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/release_seq_race.rs:LL:CC\n+   |\n+LL |                 *c.0\n+   |                 ^^^^ Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/release_seq_race.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "f357c0647d4df8ac95bf7bf8f10320b048851965", "filename": "tests/compile-fail/data_race/release_seq_race_same_thread.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race_same_thread.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Read on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/release_seq_race_same_thread.rs:LL:CC\n+   |\n+LL |                 *c.0\n+   |                 ^^^^ Data race detected between Read on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/release_seq_race_same_thread.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "dd3692c6dcc87bd4c7bb05c5661045806aed7ba2", "filename": "tests/compile-fail/data_race/rmw_race.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/rmw_race.rs:LL:CC\n+   |\n+LL |                 *c.0\n+   |                 ^^^^ Data race detected between Read on Thread(id = 3) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/rmw_race.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "dafee7dbf8cf4736752401359cb8d5b6ee5952fc", "filename": "tests/compile-fail/data_race/write_write_race.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Write on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/write_write_race.rs:LL:CC\n+   |\n+LL |             *c.0 = 64;\n+   |             ^^^^^^^^^ Data race detected between Write on Thread(id = 2) and Write on Thread(id = 1) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/write_write_race.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "8d113673ac15695683e4829ba89d3efcdbcac716", "filename": "tests/compile-fail/data_race/write_write_race_stack.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n+\n+error: Undefined Behavior: Data race detected between Write on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+  --> $DIR/write_write_race_stack.rs:LL:CC\n+   |\n+LL |             stack_var = 1usize;\n+   |             ^^^^^^^^^^^^^^^^^^ Data race detected between Write on Thread(id = 1) and Write on Thread(id = 2) at ALLOC (current vector clock = VClock, conflicting timestamp = VClock)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/write_write_race_stack.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "640d953a811d2d9f51c0e30bcb89cb1e2ecc6088", "filename": "tests/compile-fail/environ-gets-deallocated.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fenviron-gets-deallocated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fenviron-gets-deallocated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenviron-gets-deallocated.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/environ-gets-deallocated.rs:LL:CC\n+   |\n+LL |     let _y = unsafe { *pointer };\n+   |                       ^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/environ-gets-deallocated.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "e1758ad657de74427c9611bf8ead9f05c7d2b69c", "filename": "tests/compile-fail/erroneous_const.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ferroneous_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ferroneous_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ferroneous_const.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,26 @@\n+error[E0080]: evaluation of `PrintName::<i32>::VOID` failed\n+  --> $DIR/erroneous_const.rs:LL:CC\n+   |\n+LL |     const VOID: ! = panic!();\n+   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/erroneous_const.rs:LL:CC\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: post-monomorphization error: encountered constants with type errors, stopping evaluation\n+  --> $DIR/erroneous_const.rs:LL:CC\n+   |\n+LL |         let _ = PrintName::<T>::VOID;\n+   |                 ^^^^^^^^^^^^^^^^^^^^ encountered constants with type errors, stopping evaluation\n+   |\n+   = note: inside `no_codegen::<i32>` at $DIR/erroneous_const.rs:LL:CC\n+note: inside `main` at $DIR/erroneous_const.rs:LL:CC\n+  --> $DIR/erroneous_const.rs:LL:CC\n+   |\n+LL |     no_codegen::<i32>();\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "d5c89a8e82bf32470ba85451e09992b4d242bd58", "filename": "tests/compile-fail/erroneous_const2.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ferroneous_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ferroneous_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ferroneous_const2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,41 @@\n+error: any use of this value will cause an error\n+  --> $DIR/erroneous_const2.rs:LL:CC\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   | ------------------^^^^^---------------------------\n+   |                   |\n+   |                   attempt to compute `5_u32 - 6_u32`, which would overflow\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/erroneous_const2.rs:LL:CC\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^ referenced constant has errors\n+\n+error: erroneous constant used\n+  --> $DIR/erroneous_const2.rs:LL:CC\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^ referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: post-monomorphization error: referenced constant has errors\n+  --> $DIR/erroneous_const2.rs:LL:CC\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^ referenced constant has errors\n+   |\n+   = note: inside `main` at $DIR/erroneous_const2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "e673d074bc84c4d297236ebb7578ef64a922690c", "filename": "tests/compile-fail/extern_static.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fextern_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fextern_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fextern_static.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: `extern` static `FOO` from crate `extern_static` is not supported by Miri\n+  --> $DIR/extern_static.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { std::ptr::addr_of!(FOO) };\n+   |                                            ^^^ `extern` static `FOO` from crate `extern_static` is not supported by Miri\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/extern_static.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "542044df4d9cb477c1b2904d908e5231b4537d2e", "filename": "tests/compile-fail/fast_math_both.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffast_math_both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffast_math_both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffast_math_both.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `fsub_fast` intrinsic called with non-finite value as both parameters\n+  --> $DIR/fast_math_both.rs:LL:CC\n+   |\n+LL | ...: f32 = core::intrinsics::fsub_fast(f32::NAN, f32::NAN);\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `fsub_fast` intrinsic called with non-finite value as both parameters\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/fast_math_both.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "74ba08dc87878311acc63844f7009d04e84d39e0", "filename": "tests/compile-fail/fast_math_first.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffast_math_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffast_math_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffast_math_first.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `frem_fast` intrinsic called with non-finite value as first parameter\n+  --> $DIR/fast_math_first.rs:LL:CC\n+   |\n+LL | ...   let _x: f32 = core::intrinsics::frem_fast(f32::NAN, 3.2);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `frem_fast` intrinsic called with non-finite value as first parameter\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/fast_math_first.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "cbb059a07f682c3949b22ae9d6e745543d136b66", "filename": "tests/compile-fail/fast_math_second.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffast_math_second.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffast_math_second.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffast_math_second.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `fmul_fast` intrinsic called with non-finite value as second parameter\n+  --> $DIR/fast_math_second.rs:LL:CC\n+   |\n+LL | ...f32 = core::intrinsics::fmul_fast(3.4f32, f32::INFINITY);\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `fmul_fast` intrinsic called with non-finite value as second parameter\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/fast_math_second.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "79fa0458b4bd564c23af678f405daf9b4e76805a", "filename": "tests/compile-fail/fs/close_stdout.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Fclose_stdout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Fclose_stdout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Fclose_stdout.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: stdout cannot be closed\n+  --> $DIR/close_stdout.rs:LL:CC\n+   |\n+LL |         libc::close(1);\n+   |         ^^^^^^^^^^^^^^ stdout cannot be closed\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/close_stdout.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "056a67259c1a736663ad29f675ea409d65ff4878", "filename": "tests/compile-fail/fs/isolated_file.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Fisolated_file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Fisolated_file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Fisolated_file.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,22 @@\n+error: unsupported operation: `open` not available when isolation is enabled\n+   |\n+   = help: pass the flag `-Zmiri-disable-isolation` to disable isolation;\n+   = help: or pass `-Zmiri-isolation-error=warn` to configure Miri to return an error code from isolated operations (if supported for that operation) and continue with a warning\n+           \n+   = note: inside closure at rustc_src/src/sys/PLATFORM/fs.rs:LL:CC\n+   = note: inside `std::sys::PLATFORM::cvt_r::<i32, [closure@std::sys::PLATFORM::fs::File::open_c::{closure#0}]>` at rustc_src/src/sys/PLATFORM/mod.rs:LL:CC\n+   = note: inside `std::sys::PLATFORM::fs::File::open_c` at rustc_src/src/sys/PLATFORM/fs.rs:LL:CC\n+   = note: inside `std::sys::PLATFORM::fs::File::open` at rustc_src/src/sys/PLATFORM/fs.rs:LL:CC\n+   = note: inside `std::fs::OpenOptions::_open` at rustc_src/src/fs.rs:LL:CC\n+   = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at rustc_src/src/fs.rs:LL:CC\n+   = note: inside `std::fs::File::open::<&str>` at rustc_src/src/fs.rs:LL:CC\n+note: inside `main` at $DIR/isolated_file.rs:LL:CC\n+  --> $DIR/isolated_file.rs:LL:CC\n+   |\n+LL |     let _file = std::fs::File::open(\"file.txt\").unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "4fbd11e7cd9b15441aa0b72cb840806eddff393e", "filename": "tests/compile-fail/fs/isolated_stdin.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Fisolated_stdin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Fisolated_stdin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Fisolated_stdin.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: unsupported operation: `read` from stdin not available when isolation is enabled\n+  --> $DIR/isolated_stdin.rs:LL:CC\n+   |\n+LL |         libc::read(0, bytes.as_mut_ptr() as *mut libc::c_void, 512);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `read` from stdin not available when isolation is enabled\n+   |\n+   = help: pass the flag `-Zmiri-disable-isolation` to disable isolation;\n+   = help: or pass `-Zmiri-isolation-error=warn` to configure Miri to return an error code from isolated operations (if supported for that operation) and continue with a warning\n+           \n+   = note: inside `main` at $DIR/isolated_stdin.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "45573c471e2adbf5b9e9771e313352a69f0b129d", "filename": "tests/compile-fail/fs/read_from_stdout.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Fread_from_stdout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Fread_from_stdout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Fread_from_stdout.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: cannot read from stdout\n+  --> $DIR/read_from_stdout.rs:LL:CC\n+   |\n+LL |         libc::read(1, bytes.as_mut_ptr() as *mut libc::c_void, 512);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot read from stdout\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/read_from_stdout.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "7003234331242f56f37820a6b4b6150ce327551d", "filename": "tests/compile-fail/fs/unix_open_missing_required_mode.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Funix_open_missing_required_mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Funix_open_missing_required_mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Funix_open_missing_required_mode.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: incorrect number of arguments for `open` with `O_CREAT`: got 2, expected at least 3\n+  --> $DIR/unix_open_missing_required_mode.rs:LL:CC\n+   |\n+LL | ...safe { libc::open(name_ptr, libc::O_CREAT) };\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of arguments for `open` with `O_CREAT`: got 2, expected at least 3\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `test_file_open_missing_needed_mode` at $DIR/unix_open_missing_required_mode.rs:LL:CC\n+note: inside `main` at $DIR/unix_open_missing_required_mode.rs:LL:CC\n+  --> $DIR/unix_open_missing_required_mode.rs:LL:CC\n+   |\n+LL |     test_file_open_missing_needed_mode();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f71a44d34daba497a2fd79c551bc3f4e30681511", "filename": "tests/compile-fail/fs/unix_open_too_many_args.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Funix_open_too_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Funix_open_too_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Funix_open_too_many_args.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: incorrect number of arguments for `open`: got 4, expected 2 or 3\n+  --> $DIR/unix_open_too_many_args.rs:15:24\n+   |\n+LL |     let _fd = unsafe { libc::open(name_ptr, libc::O_RDONLY, 0, 0) }; //~ ERROR Undefined Behavior: incorrect number of arguments for `ope...\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of arguments for `open`: got 4, expected 2 or 3\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `test_open_too_many_args` at $DIR/unix_open_too_many_args.rs:15:24\n+note: inside `main` at $DIR/unix_open_too_many_args.rs:9:5\n+  --> $DIR/unix_open_too_many_args.rs:9:5\n+   |\n+LL |     test_open_too_many_args();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "1cbc3eef66ae90d21c0543f5c9a80108b85ba76f", "filename": "tests/compile-fail/fs/write_to_stdin.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Fwrite_to_stdin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffs%2Fwrite_to_stdin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffs%2Fwrite_to_stdin.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: cannot write to stdin\n+  --> $DIR/write_to_stdin.rs:LL:CC\n+   |\n+LL |         libc::write(0, bytes.as_ptr() as *const libc::c_void, 5);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot write to stdin\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/write_to_stdin.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "9ee7d301b19ff56bdb10dee8a5234d5c7b82724a", "filename": "tests/compile-fail/function_calls/check_arg_abi.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_abi.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calling a function with ABI C using caller ABI Rust\n+  --> $DIR/check_arg_abi.rs:LL:CC\n+   |\n+LL |         let _ = malloc(0);\n+   |                 ^^^^^^^^^ calling a function with ABI C using caller ABI Rust\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/check_arg_abi.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "c7682578f99b8eb2164e7df38c0fb5b8d8a1105f", "filename": "tests/compile-fail/function_calls/check_arg_count_abort.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: incorrect number of arguments: got 1, expected 0\n+  --> $DIR/check_arg_count_abort.rs:LL:CC\n+   |\n+LL |         abort(1);\n+   |         ^^^^^^^^ incorrect number of arguments: got 1, expected 0\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/check_arg_count_abort.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b7d6bbfd5719b7f56ed7ce3ac77a7549bf343de8", "filename": "tests/compile-fail/function_calls/check_arg_count_too_few_args.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: incorrect number of arguments: got 0, expected 1\n+  --> $DIR/check_arg_count_too_few_args.rs:LL:CC\n+   |\n+LL |         let _ = malloc();\n+   |                 ^^^^^^^^ incorrect number of arguments: got 0, expected 1\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/check_arg_count_too_few_args.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "33cc5750b890ee072b540a13f6eb1c0eb8dade94", "filename": "tests/compile-fail/function_calls/check_arg_count_too_many_args.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: incorrect number of arguments: got 2, expected 1\n+  --> $DIR/check_arg_count_too_many_args.rs:LL:CC\n+   |\n+LL |         let _ = malloc(1, 2);\n+   |                 ^^^^^^^^^^^^ incorrect number of arguments: got 2, expected 1\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/check_arg_count_too_many_args.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "ea7c2bb6b4ae4076494b2d450e545ad7b411d8e9", "filename": "tests/compile-fail/function_calls/check_callback_abi.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_callback_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_callback_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_callback_abi.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,19 @@\n+error: Undefined Behavior: calling a function with ABI C using caller ABI Rust\n+  --> $DIR/check_callback_abi.rs:LL:CC\n+   |\n+LL | /         std::intrinsics::r#try(\n+LL | |             std::mem::transmute::<extern \"C\" fn(*mut u8), _>(try_fn),\n+LL | |             std::ptr::null_mut(),\n+LL | |             |_, _| unreachable!(),\n+LL | |         );\n+   | |_________^ calling a function with ABI C using caller ABI Rust\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/check_callback_abi.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "bf0d27d91576ab4dd2db79d9d008d0292fbef7f5", "filename": "tests/compile-fail/function_calls/exported_symbol_abi_mismatch.cache.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calling a function with calling convention Rust using calling convention C\n+  --> $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n+   |\n+LL |         unsafe { foo() }\n+   |                  ^^^^^ calling a function with calling convention Rust using calling convention C\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "ee810af315fc02cb5741dfe192232cdf856db65d", "filename": "tests/compile-fail/function_calls/exported_symbol_abi_mismatch.fn_ptr.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calling a function with calling convention Rust using calling convention C\n+  --> $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n+   |\n+LL |     unsafe { std::mem::transmute::<unsafe fn(), unsafe extern \"C\" fn()>(foo)() }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling a function with calling convention Rust using calling convention C\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "bf0d27d91576ab4dd2db79d9d008d0292fbef7f5", "filename": "tests/compile-fail/function_calls/exported_symbol_abi_mismatch.no_cache.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calling a function with calling convention Rust using calling convention C\n+  --> $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n+   |\n+LL |         unsafe { foo() }\n+   |                  ^^^^^ calling a function with calling convention Rust using calling convention C\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "8cd74f1fd86df86c653945a410317d8779580fc8", "filename": "tests/compile-fail/function_calls/exported_symbol_bad_unwind1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_bad_unwind1.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: Undefined Behavior: unwinding past a stack frame that does not allow unwinding\n+  --> $DIR/exported_symbol_bad_unwind1.rs:LL:CC\n+   |\n+LL |     unsafe { unwind() }\n+   |              ^^^^^^^^ unwinding past a stack frame that does not allow unwinding\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/exported_symbol_bad_unwind1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "48df075ba622b3941208f45d06b596860d52e3bd", "filename": "tests/compile-fail/function_calls/exported_symbol_bad_unwind2.both.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,23 @@\n+thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: abnormal termination: the program aborted execution\n+  --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+   |\n+LL | / extern \"C-unwind\" fn nounwind() {\n+LL | |     //[definition]~^ ERROR abnormal termination: the program aborted execution\n+LL | |     //[both]~^^ ERROR abnormal termination: the program aborted execution\n+LL | |     panic!();\n+LL | | }\n+   | |_^ the program aborted execution\n+   |\n+   = note: inside `nounwind` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+note: inside `main` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+  --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+   |\n+LL |     unsafe { nounwind() }\n+   |              ^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "48df075ba622b3941208f45d06b596860d52e3bd", "filename": "tests/compile-fail/function_calls/exported_symbol_bad_unwind2.definition.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,23 @@\n+thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: abnormal termination: the program aborted execution\n+  --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+   |\n+LL | / extern \"C-unwind\" fn nounwind() {\n+LL | |     //[definition]~^ ERROR abnormal termination: the program aborted execution\n+LL | |     //[both]~^^ ERROR abnormal termination: the program aborted execution\n+LL | |     panic!();\n+LL | | }\n+   | |_^ the program aborted execution\n+   |\n+   = note: inside `nounwind` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+note: inside `main` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+  --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+   |\n+LL |     unsafe { nounwind() }\n+   |              ^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "fac42bf66ae4b732ae77a77ab4904e3ffd0fbb22", "filename": "tests/compile-fail/function_calls/exported_symbol_bad_unwind2.extern_block.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: Undefined Behavior: unwinding past a stack frame that does not allow unwinding\n+  --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+   |\n+LL |     unsafe { nounwind() }\n+   |              ^^^^^^^^^^ unwinding past a stack frame that does not allow unwinding\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "1ddd882c4cb3b69cf650457333a6d606f4766128", "filename": "tests/compile-fail/function_calls/exported_symbol_clashing.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_clashing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_clashing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_clashing.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,22 @@\n+error: multiple definitions of symbol `foo`\n+  --> $DIR/exported_symbol_clashing.rs:LL:CC\n+   |\n+LL |     unsafe { foo() }\n+   |              ^^^^^ multiple definitions of symbol `foo`\n+   |\n+help: it's first defined here, in crate `exported_symbol_clashing`\n+  --> $DIR/exported_symbol_clashing.rs:LL:CC\n+   |\n+LL | fn foo() {}\n+   | ^^^^^^^^\n+help: then it's defined here again, in crate `exported_symbol_clashing`\n+  --> $DIR/exported_symbol_clashing.rs:LL:CC\n+   |\n+LL | fn bar() {}\n+   | ^^^^^^^^\n+   = note: inside `main` at $DIR/exported_symbol_clashing.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "fa25b4e3f34724e477f028039d04dc6bf20b4aa5", "filename": "tests/compile-fail/function_calls/exported_symbol_shim_clashing.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,20 @@\n+error: found `malloc` symbol definition that clashes with a built-in shim\n+  --> $DIR/exported_symbol_shim_clashing.rs:LL:CC\n+   |\n+LL |         malloc(0);\n+   |         ^^^^^^^^^ found `malloc` symbol definition that clashes with a built-in shim\n+   |\n+help: the `malloc` symbol is defined here\n+  --> $DIR/exported_symbol_shim_clashing.rs:LL:CC\n+   |\n+LL | / extern \"C\" fn malloc(_: usize) -> *mut std::ffi::c_void {\n+LL | |\n+LL | |     unreachable!()\n+LL | | }\n+   | |_^\n+   = note: inside `main` at $DIR/exported_symbol_shim_clashing.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "fe5498c85d7fbfd9d6d98977fc37aadf4276b625", "filename": "tests/compile-fail/function_calls/exported_symbol_wrong_arguments.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calling a function with more arguments than it expected\n+  --> $DIR/exported_symbol_wrong_arguments.rs:LL:CC\n+   |\n+LL |     unsafe { foo(1) }\n+   |              ^^^^^^ calling a function with more arguments than it expected\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/exported_symbol_wrong_arguments.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f4027049087121d859c7b7b606d4fdf8d69ae82c", "filename": "tests/compile-fail/function_calls/exported_symbol_wrong_type.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: attempt to call an exported symbol that is not defined as a function\n+  --> $DIR/exported_symbol_wrong_type.rs:LL:CC\n+   |\n+LL |     unsafe { FOO() }\n+   |              ^^^^^ attempt to call an exported symbol that is not defined as a function\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/exported_symbol_wrong_type.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "13f8ef37824396f50c2381c007cebf39725417c5", "filename": "tests/compile-fail/function_pointers/cast_box_int_to_fn_ptr.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: using ALLOC as function pointer but it does not point to a function\n+  --> $DIR/cast_box_int_to_fn_ptr.rs:LL:CC\n+   |\n+LL |     (*g)(42)\n+   |     ^^^^^^^^ using ALLOC as function pointer but it does not point to a function\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/cast_box_int_to_fn_ptr.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "765dbb6578ab1a268d2bb198002b27b984d4b91f", "filename": "tests/compile-fail/function_pointers/cast_fn_ptr1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calling a function with more arguments than it expected\n+  --> $DIR/cast_fn_ptr1.rs:LL:CC\n+   |\n+LL |     g(42)\n+   |     ^^^^^ calling a function with more arguments than it expected\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/cast_fn_ptr1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "123d0e1b0bb6e3ed143c06854c04c9e35547c1c0", "filename": "tests/compile-fail/function_pointers/cast_fn_ptr2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calling a function with argument of type (i32, i32) passing data of type i32\n+  --> $DIR/cast_fn_ptr2.rs:LL:CC\n+   |\n+LL |     g(42)\n+   |     ^^^^^ calling a function with argument of type (i32, i32) passing data of type i32\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/cast_fn_ptr2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "51f6ca0713d725bd6ae57b5f956873ba1ee7ace7", "filename": "tests/compile-fail/function_pointers/cast_fn_ptr3.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calling a function with fewer arguments than it requires\n+  --> $DIR/cast_fn_ptr3.rs:LL:CC\n+   |\n+LL |     g()\n+   |     ^^^ calling a function with fewer arguments than it requires\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/cast_fn_ptr3.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "515f00ec3929f14c76270844f96844c8b3f2e199", "filename": "tests/compile-fail/function_pointers/cast_fn_ptr4.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calling a function with argument of type *const [i32] passing data of type *const i32\n+  --> $DIR/cast_fn_ptr4.rs:LL:CC\n+   |\n+LL |     g(&42 as *const i32)\n+   |     ^^^^^^^^^^^^^^^^^^^^ calling a function with argument of type *const [i32] passing data of type *const i32\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/cast_fn_ptr4.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "2978866c929052ec726a0d93956a3a6320b5200e", "filename": "tests/compile-fail/function_pointers/cast_fn_ptr5.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calling a function with return type u32 passing return place of type ()\n+  --> $DIR/cast_fn_ptr5.rs:LL:CC\n+   |\n+LL |     g()\n+   |     ^^^ calling a function with return type u32 passing return place of type ()\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/cast_fn_ptr5.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b206cb9ab36011317aad584af13aa7bf7bea4ef4", "filename": "tests/compile-fail/function_pointers/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -6,5 +6,5 @@ fn main() {\n         std::mem::transmute::<usize, fn(i32)>(42)\n     };\n \n-    g(42) //~ ERROR 0x2a is not a valid pointer\n+    g(42) //~ ERROR not a valid pointer\n }"}, {"sha": "25501e74913d41ee7aa591068c78f5e4d724c068", "filename": "tests/compile-fail/function_pointers/cast_int_to_fn_ptr.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: 0x2a is not a valid pointer\n+  --> $DIR/cast_int_to_fn_ptr.rs:LL:CC\n+   |\n+LL |     g(42)\n+   |     ^^^^^ 0x2a is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/cast_int_to_fn_ptr.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "1e3da2726d4b89fbfa2e277586b88d4c77d97533", "filename": "tests/compile-fail/function_pointers/deref_fn_ptr.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fderef_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fderef_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Fderef_fn_ptr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: accessing ALLOC which contains a function\n+  --> $DIR/deref_fn_ptr.rs:LL:CC\n+   |\n+LL |         *std::mem::transmute::<fn(), *const u8>(f)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing ALLOC which contains a function\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/deref_fn_ptr.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "daa6277b85e412d11fda08f673a47c13e7bff213", "filename": "tests/compile-fail/function_pointers/execute_memory.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fexecute_memory.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Fexecute_memory.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Fexecute_memory.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: using ALLOC as function pointer but it does not point to a function\n+  --> $DIR/execute_memory.rs:LL:CC\n+   |\n+LL |         f()\n+   |         ^^^ using ALLOC as function pointer but it does not point to a function\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/execute_memory.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "0f3baab1b512a51fcb97c1867c143d1d69fbf48f", "filename": "tests/compile-fail/function_pointers/fn_ptr_offset.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Ffn_ptr_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Ffunction_pointers%2Ffn_ptr_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Ffn_ptr_offset.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: using ALLOC+0x1 as function pointer but it does not point to a function\n+  --> $DIR/fn_ptr_offset.rs:LL:CC\n+   |\n+LL |     x();\n+   |     ^^^ using ALLOC+0x1 as function pointer but it does not point to a function\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/fn_ptr_offset.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "98ccf3097c29876305604037ac21dfd1384ee51b", "filename": "tests/compile-fail/generator-pinned-moved.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fgenerator-pinned-moved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fgenerator-pinned-moved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fgenerator-pinned-moved.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,26 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/generator-pinned-moved.rs:LL:CC\n+   |\n+LL |         *num += 1;\n+   |         ^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/generator-pinned-moved.rs:LL:CC\n+note: inside `<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC: 15:6]> as std::iter::Iterator>::next` at $DIR/generator-pinned-moved.rs:LL:CC\n+  --> $DIR/generator-pinned-moved.rs:LL:CC\n+   |\n+LL |         match me.resume(()) {\n+   |               ^^^^^^^^^^^^^\n+   = note: inside `<std::boxed::Box<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC: 15:6]>> as std::iter::Iterator>::next` at rustc_src/src/boxed.rs:LL:CC\n+note: inside `main` at $DIR/generator-pinned-moved.rs:LL:CC\n+  --> $DIR/generator-pinned-moved.rs:LL:CC\n+   |\n+LL |     generator_iterator_2.next(); // and use moved value\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "e5059a699b10353e0c0dfad1bab6c10cb984baef", "filename": "tests/compile-fail/intrinsics/assume.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fassume.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fassume.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fassume.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `assume` intrinsic called with `false`\n+  --> $DIR/assume.rs:LL:CC\n+   |\n+LL |         std::intrinsics::assume(x > 42);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `assume` intrinsic called with `false`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/assume.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "461f529fa85d55e353669b2b182377e402b3af65", "filename": "tests/compile-fail/intrinsics/copy_null.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_null.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: memory access failed: null pointer is not a valid pointer\n+  --> $DIR/copy_null.rs:LL:CC\n+   |\n+LL |     unsafe { copy_nonoverlapping(std::ptr::null(), ptr, 0); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/copy_null.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "512184a36c18e06de12c960215a4e77abb9e63df", "filename": "tests/compile-fail/intrinsics/copy_overflow.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_overflow.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+error: Undefined Behavior: overflow computing total size of `copy`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::intrinsics::copy::<i32>` at rustc_src/src/intrinsics.rs:LL:CC\n+   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::copy_from` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+note: inside `main` at $DIR/copy_overflow.rs:LL:CC\n+  --> $DIR/copy_overflow.rs:LL:CC\n+   |\n+LL |         (&mut y as *mut i32).copy_from(&x, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "cba08d9b5c823ba2160249d81ecb3569b6339bf1", "filename": "tests/compile-fail/intrinsics/copy_overlapping.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_overlapping.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: copy_nonoverlapping called on overlapping ranges\n+  --> $DIR/copy_overlapping.rs:LL:CC\n+   |\n+LL |         copy_nonoverlapping(a, b, 2);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ copy_nonoverlapping called on overlapping ranges\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/copy_overlapping.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "7aff0adc407a2eab7becac7890a8274d17db7639", "filename": "tests/compile-fail/intrinsics/copy_unaligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     let mut data = [0u16; 8];\n     let ptr = (&mut data[0] as *mut u16 as *mut u8).wrapping_add(1) as *mut u16;\n     // Even copying 0 elements to something unaligned should error\n-    unsafe { copy_nonoverlapping(&data[5], ptr, 0); } //~ ERROR accessing memory with alignment 1, but alignment 2 is required\n+    unsafe { copy_nonoverlapping(&data[5], ptr, 0); } //~ ERROR accessing memory with alignment ALIGN, but alignment ALIGN is required\n }"}, {"sha": "b99588698d22df6e870e25423570a0f119e03353", "filename": "tests/compile-fail/intrinsics/copy_unaligned.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: accessing memory with alignment ALIGN, but alignment ALIGN is required\n+  --> $DIR/copy_unaligned.rs:LL:CC\n+   |\n+LL |     unsafe { copy_nonoverlapping(&data[5], ptr, 0); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/copy_unaligned.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "0c895cf138e95a8b13d0304d8c8ed8038f059a80", "filename": "tests/compile-fail/intrinsics/ctlz_nonzero.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fctlz_nonzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fctlz_nonzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fctlz_nonzero.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `ctlz_nonzero` called on 0\n+  --> $DIR/ctlz_nonzero.rs:LL:CC\n+   |\n+LL |         ctlz_nonzero(0u8);\n+   |         ^^^^^^^^^^^^^^^^^ `ctlz_nonzero` called on 0\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/ctlz_nonzero.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "5257668d53e9d22e30a541d887608b05fc3fe57d", "filename": "tests/compile-fail/intrinsics/cttz_nonzero.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcttz_nonzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fcttz_nonzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fcttz_nonzero.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `cttz_nonzero` called on 0\n+  --> $DIR/cttz_nonzero.rs:LL:CC\n+   |\n+LL |         cttz_nonzero(0u8);\n+   |         ^^^^^^^^^^^^^^^^^ `cttz_nonzero` called on 0\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/cttz_nonzero.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "388f4aef7fa965a0a6ef687df04a55b26d5f91f7", "filename": "tests/compile-fail/intrinsics/div-by-zero.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fdiv-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fdiv-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fdiv-by-zero.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dividing by zero\n+  --> $DIR/div-by-zero.rs:LL:CC\n+   |\n+LL |         let _n = unchecked_div(1i64, 0);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ dividing by zero\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/div-by-zero.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "a0f03b201a8dec4a189cb61005c5ce4fbe466507", "filename": "tests/compile-fail/intrinsics/exact_div1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calculating the remainder with a divisor of zero\n+  --> $DIR/exact_div1.rs:LL:CC\n+   |\n+LL |     unsafe { std::intrinsics::exact_div(2, 0); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calculating the remainder with a divisor of zero\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/exact_div1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "78a85c9caac6b8bfb99e550f4c59dbae80a5bad6", "filename": "tests/compile-fail/intrinsics/exact_div2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: exact_div: 2_u16 cannot be divided by 3_u16 without remainder\n+  --> $DIR/exact_div2.rs:LL:CC\n+   |\n+LL |     unsafe { std::intrinsics::exact_div(2u16, 3); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exact_div: 2_u16 cannot be divided by 3_u16 without remainder\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/exact_div2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "3062b60d468e9c9894cd326e074af4a9bb7f3733", "filename": "tests/compile-fail/intrinsics/exact_div3.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div3.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: exact_div: -19_i8 cannot be divided by 2_i8 without remainder\n+  --> $DIR/exact_div3.rs:LL:CC\n+   |\n+LL |     unsafe { std::intrinsics::exact_div(-19i8, 2); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exact_div: -19_i8 cannot be divided by 2_i8 without remainder\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/exact_div3.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "1ae67ad87a5dacec4de5be888f4bc8932f944e17", "filename": "tests/compile-fail/intrinsics/exact_div4.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fexact_div4.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflow in signed remainder (dividing MIN by -1)\n+  --> $DIR/exact_div4.rs:LL:CC\n+   |\n+LL |     unsafe { std::intrinsics::exact_div(i64::MIN, -1); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow in signed remainder (dividing MIN by -1)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/exact_div4.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "cdf232d93eb21bc1dc179c749ea78e4ddadc7136", "filename": "tests/compile-fail/intrinsics/float_to_int_32_inf1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on +Inf which cannot be represented in target type `i32`\n+  --> $DIR/float_to_int_32_inf1.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f32, i32>(f32::INFINITY); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on +Inf which cannot be represented in target type `i32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_32_inf1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "ae7301193682b4dd920d2b821d466704a5f76682", "filename": "tests/compile-fail/intrinsics/float_to_int_32_infneg1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on -Inf which cannot be represented in target type `i32`\n+  --> $DIR/float_to_int_32_infneg1.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f32, i32>(f32::NEG_INFINITY); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on -Inf which cannot be represented in target type `i32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_32_infneg1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "9c20abef78df91de9c0ba0bf5226e18a1fe718d2", "filename": "tests/compile-fail/intrinsics/float_to_int_32_nan.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on NaN which cannot be represented in target type `u32`\n+  --> $DIR/float_to_int_32_nan.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f32, u32>(f32::NAN); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on NaN which cannot be represented in target type `u32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_32_nan.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f5675fd654dda4a136bd69d98ec961eba2069a41", "filename": "tests/compile-fail/intrinsics/float_to_int_32_nanneg.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on NaN which cannot be represented in target type `u32`\n+  --> $DIR/float_to_int_32_nanneg.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f32, u32>(-f32::NAN); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on NaN which cannot be represented in target type `u32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_32_nanneg.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "3b7c755af6544cac802a9df594e818f58131b34f", "filename": "tests/compile-fail/intrinsics/float_to_int_32_neg.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on -1 which cannot be represented in target type `u32`\n+  --> $DIR/float_to_int_32_neg.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f32, u32>(-1.000000001f32); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on -1 which cannot be represented in target type `u32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_32_neg.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "abfda9eef0af46ea5ea12b2b8f875d3081dd7917", "filename": "tests/compile-fail/intrinsics/float_to_int_32_too_big1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on 2.14748365E+9 which cannot be represented in target type `i32`\n+  --> $DIR/float_to_int_32_too_big1.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f32, i32>(2147483648.0f32); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on 2.14748365E+9 which cannot be represented in target type `i32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_32_too_big1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "2680d0c9908c97abbf6dbe9289c623afaa2dfc77", "filename": "tests/compile-fail/intrinsics/float_to_int_32_too_big2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on 4.2949673E+9 which cannot be represented in target type `u32`\n+  --> $DIR/float_to_int_32_too_big2.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f32, u32>((u32::MAX-127) as f32); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on 4.2949673E+9 which cannot be represented in target type `u32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_32_too_big2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b03bd380df47c49b9c6b202972a4a65f942d75f4", "filename": "tests/compile-fail/intrinsics/float_to_int_32_too_small1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on -2.1474839E+9 which cannot be represented in target type `i32`\n+  --> $DIR/float_to_int_32_too_small1.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f32, i32>(-2147483904.0f32); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on -2.1474839E+9 which cannot be represented in target type `i32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_32_too_small1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "7509844cfd41b079b826ee3d29872f902c1414dd", "filename": "tests/compile-fail/intrinsics/float_to_int_64_inf1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on +Inf which cannot be represented in target type `u128`\n+  --> $DIR/float_to_int_64_inf1.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, u128>(f64::INFINITY); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on +Inf which cannot be represented in target type `u128`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_inf1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "539cd52d83d0e7e5864f3c23cf137bfd3bbda27c", "filename": "tests/compile-fail/intrinsics/float_to_int_64_infneg1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on -Inf which cannot be represented in target type `u128`\n+  --> $DIR/float_to_int_64_infneg1.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, u128>(f64::NEG_INFINITY); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on -Inf which cannot be represented in target type `u128`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_infneg1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "ceb18c3f4121cc5baf09b95c39d1c9e738706612", "filename": "tests/compile-fail/intrinsics/float_to_int_64_infneg2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on -Inf which cannot be represented in target type `i128`\n+  --> $DIR/float_to_int_64_infneg2.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, i128>(f64::NEG_INFINITY); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on -Inf which cannot be represented in target type `i128`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_infneg2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "eee8d2fac0b31b212efd99dcf9ceb6c09b80a749", "filename": "tests/compile-fail/intrinsics/float_to_int_64_nan.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on NaN which cannot be represented in target type `u32`\n+  --> $DIR/float_to_int_64_nan.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, u32>(f64::NAN); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on NaN which cannot be represented in target type `u32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_nan.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "384c0232465a8967e5cf29a5d30875f122689f33", "filename": "tests/compile-fail/intrinsics/float_to_int_64_neg.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on -1 which cannot be represented in target type `u128`\n+  --> $DIR/float_to_int_64_neg.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, u128>(-1.0000000000001f64); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on -1 which cannot be represented in target type `u128`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_neg.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "bb5b10a2710f87248f7dbb678d3bddee8fc90d32", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on 2147483648 which cannot be represented in target type `i32`\n+  --> $DIR/float_to_int_64_too_big1.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, i32>(2147483648.0f64); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on 2147483648 which cannot be represented in target type `i32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_too_big1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "a4d57c2f5ceeb4822303dff24c9f270ec061971b", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on 9.2233720368547758E+18 which cannot be represented in target type `i64`\n+  --> $DIR/float_to_int_64_too_big2.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, i64>(9223372036854775808.0f64); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on 9.2233720368547758E+18 which cannot be represented in target type `i64`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_too_big2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "2b7379fcbd387c51a45dbe3d5900789fa085a27a", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big3.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on 1.8446744073709552E+19 which cannot be represented in target type `u64`\n+  --> $DIR/float_to_int_64_too_big3.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, u64>(18446744073709551616.0f64); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on 1.8446744073709552E+19 which cannot be represented in target type `u64`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_too_big3.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "d30817607b9f0ad29b2b6324d162eb23a169b16f", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big4.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on 3.4028236692093846E+38 which cannot be represented in target type `u128`\n+  --> $DIR/float_to_int_64_too_big4.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, u128>(u128::MAX as f64); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on 3.4028236692093846E+38 which cannot be represented in target type `u128`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_too_big4.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f6b0c0a3527f5a8adb0d066aa0b23b09968639a3", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big5.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on 2.4028236692093845E+38 which cannot be represented in target type `i128`\n+  --> $DIR/float_to_int_64_too_big5.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, i128>(240282366920938463463374607431768211455.0f64); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on 2.4028236692093845E+38 which cannot be represented in target type `i128`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_too_big5.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "e0eab8148b07c872cce2afb3cc77e7a4f1c626a1", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big6.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on 1.7976931348623157E+308 which cannot be represented in target type `u128`\n+  --> $DIR/float_to_int_64_too_big6.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, u128>(f64::MAX); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on 1.7976931348623157E+308 which cannot be represented in target type `u128`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_too_big6.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "a291b21c7aad522b075d19e0daafefddd830bbc3", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_big7.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on -1.7976931348623157E+308 which cannot be represented in target type `i128`\n+  --> $DIR/float_to_int_64_too_big7.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, i128>(f64::MIN); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on -1.7976931348623157E+308 which cannot be represented in target type `i128`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_too_big7.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "81ca218505dd4b32101e43b0dc4e988f72fc7f9e", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_small1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on -2147483649 which cannot be represented in target type `i32`\n+  --> $DIR/float_to_int_64_too_small1.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, i32>(-2147483649.0f64); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on -2147483649 which cannot be represented in target type `i32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_too_small1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "245f5cf0238cb12144ad0dfa49f6cc2a6c22be92", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_small2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on -9.2233720368547778E+18 which cannot be represented in target type `i64`\n+  --> $DIR/float_to_int_64_too_small2.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, i64>(-9223372036854777856.0f64); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on -9.2233720368547778E+18 which cannot be represented in target type `i64`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_too_small2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f684ed2cde987353382b6066bd17abeab1ae91ba", "filename": "tests/compile-fail/intrinsics/float_to_int_64_too_small3.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on -2.4028236692093845E+38 which cannot be represented in target type `i128`\n+  --> $DIR/float_to_int_64_too_small3.rs:LL:CC\n+   |\n+LL |     unsafe { float_to_int_unchecked::<f64, i128>(-240282366920938463463374607431768211455.0f64); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `float_to_int_unchecked` intrinsic called on -2.4028236692093845E+38 which cannot be represented in target type `i128`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/float_to_int_64_too_small3.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "2b00876297faa23c907ec3c7cfd8ed66c794b9f1", "filename": "tests/compile-fail/intrinsics/out_of_bounds_ptr_1.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: pointer arithmetic failed: ALLOC has size 4, so pointer to 5 bytes starting at offset 0 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at rustc_src/src/ptr/const_ptr.rs:LL:CC\n+note: inside `main` at $DIR/out_of_bounds_ptr_1.rs:LL:CC\n+  --> $DIR/out_of_bounds_ptr_1.rs:LL:CC\n+   |\n+LL |     let x = unsafe { x.offset(5) };\n+   |                      ^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "32ac570f7231b225602c5cc1443a54fc1a507301", "filename": "tests/compile-fail/intrinsics/out_of_bounds_ptr_2.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: overflowing in-bounds pointer arithmetic\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at rustc_src/src/ptr/const_ptr.rs:LL:CC\n+note: inside `main` at $DIR/out_of_bounds_ptr_2.rs:LL:CC\n+  --> $DIR/out_of_bounds_ptr_2.rs:LL:CC\n+   |\n+LL |     let x = unsafe { x.offset(isize::MIN) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "cd48112cb4304407e7c482f0a4f19aba0af7f3ce", "filename": "tests/compile-fail/intrinsics/out_of_bounds_ptr_3.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: pointer arithmetic failed: ALLOC has size 4, so pointer to 1 byte starting at offset -1 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at rustc_src/src/ptr/const_ptr.rs:LL:CC\n+note: inside `main` at $DIR/out_of_bounds_ptr_3.rs:LL:CC\n+  --> $DIR/out_of_bounds_ptr_3.rs:LL:CC\n+   |\n+LL |     let x = unsafe { x.offset(-1) };\n+   |                      ^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "6402f4bb74c6a4d170bafbf90f3b12f61d2b611b", "filename": "tests/compile-fail/intrinsics/overflowing-unchecked-rsh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Foverflowing-unchecked-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Foverflowing-unchecked-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Foverflowing-unchecked-rsh.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -2,7 +2,7 @@\n \n use std::intrinsics::*;\n \n-//error-pattern: overflowing shift by 64 in `unchecked_shr`\n+// error-pattern: overflowing shift by 64 in `unchecked_shr`\n \n fn main() {\n     unsafe {"}, {"sha": "0d22b166b26781f9492495d2e05e30877fc05dfd", "filename": "tests/compile-fail/intrinsics/overflowing-unchecked-rsh.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflowing shift by 64 in `unchecked_shr`\n+  --> $DIR/overflowing-unchecked-rsh.rs:LL:CC\n+   |\n+LL |         let _n = unchecked_shr(1i64, 64);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 64 in `unchecked_shr`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/overflowing-unchecked-rsh.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "d3e2fe4013f44f1c576c4377af898cf3b56c02e9", "filename": "tests/compile-fail/intrinsics/ptr_offset_0_plus_0.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: pointer arithmetic failed: null pointer is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::offset` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+note: inside `main` at $DIR/ptr_offset_0_plus_0.rs:LL:CC\n+  --> $DIR/ptr_offset_0_plus_0.rs:LL:CC\n+   |\n+LL |     let _x = unsafe { x.offset(0) }; // UB despite offset 0, NULL is never inbounds\n+   |                       ^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "0e723a5ee3951a4e82bd6cae5d201fd9ced3bea6", "filename": "tests/compile-fail/intrinsics/ptr_offset_from_oob.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_from_oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_from_oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_from_oob.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: out-of-bounds offset_from: ALLOC has size 4, so pointer at offset 10 is out-of-bounds\n+  --> $DIR/ptr_offset_from_oob.rs:LL:CC\n+   |\n+LL |     unsafe { ptr_offset_from(end_ptr, end_ptr) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: ALLOC has size 4, so pointer at offset 10 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/ptr_offset_from_oob.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "e332a9dc624a073bfe6bbb976634f12ebfe8f2f6", "filename": "tests/compile-fail/intrinsics/ptr_offset_int_plus_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: 0x1 is not a valid pointer\n+// error-pattern: is not a valid pointer\n \n fn main() {\n     // Can't offset an integer pointer by non-zero offset."}, {"sha": "a47ed4719d90a3edab1d003491fb091fabe62b4f", "filename": "tests/compile-fail/intrinsics/ptr_offset_int_plus_int.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: pointer arithmetic failed: 0x1 is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+note: inside `main` at $DIR/ptr_offset_int_plus_int.rs:LL:CC\n+  --> $DIR/ptr_offset_int_plus_int.rs:LL:CC\n+   |\n+LL |         let _val = (1 as *mut u8).offset(1);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "2d27e25a7af1f475c82c2199e305a554a16acc77", "filename": "tests/compile-fail/intrinsics/ptr_offset_int_plus_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: 0x1 is not a valid pointer\n+// error-pattern: is not a valid pointer\n \n fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));"}, {"sha": "58b33e706d3ee7191c7e34325c3cc2466a2c7f63", "filename": "tests/compile-fail/intrinsics/ptr_offset_int_plus_ptr.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: pointer arithmetic failed: 0x1 is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+note: inside `main` at $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n+  --> $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n+   |\n+LL |         let _val = (1 as *mut u8).offset(ptr as isize);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "734547b6013b0cc9f1fad8cd1b2ec669be71b164", "filename": "tests/compile-fail/intrinsics/ptr_offset_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_overflow.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,4 +1,4 @@\n-//error-pattern: overflowing in-bounds pointer arithmetic\n+// error-pattern: overflowing in-bounds pointer arithmetic\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;"}, {"sha": "81ff87168c1212dea69cf1535ccc895cf0c3638e", "filename": "tests/compile-fail/intrinsics/ptr_offset_overflow.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_overflow.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: overflowing in-bounds pointer arithmetic\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at rustc_src/src/ptr/const_ptr.rs:LL:CC\n+note: inside `main` at $DIR/ptr_offset_overflow.rs:LL:CC\n+  --> $DIR/ptr_offset_overflow.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { x.offset(isize::MIN) };\n+   |                         ^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "686ab179664792fa57be20b9874055e3df36e3a4", "filename": "tests/compile-fail/intrinsics/ptr_offset_ptr_plus_0.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: pointer arithmetic failed: ALLOC has size 4, so pointer at offset 32 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::ptr::mut_ptr::<impl *mut u32>::offset` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+note: inside `main` at $DIR/ptr_offset_ptr_plus_0.rs:LL:CC\n+  --> $DIR/ptr_offset_ptr_plus_0.rs:LL:CC\n+   |\n+LL |     let _x = unsafe { x.offset(0) }; // UB despite offset 0, the pointer is not inbounds of the only object it can point to\n+   |                       ^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "7501aca7b247fe7964435543019def31da82dbe3", "filename": "tests/compile-fail/intrinsics/rem-by-zero.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Frem-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Frem-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Frem-by-zero.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calculating the remainder with a divisor of zero\n+  --> $DIR/rem-by-zero.rs:LL:CC\n+   |\n+LL |         let _n = unchecked_rem(3u32, 0);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ calculating the remainder with a divisor of zero\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/rem-by-zero.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "77c12de8d81a036bf53d0f589755e674677fb7d6", "filename": "tests/compile-fail/intrinsics/simd-div-by-zero.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-by-zero.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dividing by zero\n+  --> $DIR/simd-div-by-zero.rs:LL:CC\n+   |\n+LL |     simd_div(x, y);\n+   |     ^^^^^^^^^^^^^^ dividing by zero\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/simd-div-by-zero.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "53479a738b7b3fe7e5aaacc2659ebe4a42a3f083", "filename": "tests/compile-fail/intrinsics/simd-div-overflow.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-overflow.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflow in signed division (dividing MIN by -1)\n+  --> $DIR/simd-div-overflow.rs:LL:CC\n+   |\n+LL |     simd_div(x, y);\n+   |     ^^^^^^^^^^^^^^ overflow in signed division (dividing MIN by -1)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/simd-div-overflow.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "378c2b48bb935c154646a84d838ae62bd1abcd44", "filename": "tests/compile-fail/intrinsics/simd-float-to-int.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-float-to-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-float-to-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-float-to-int.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+error: Undefined Behavior: `float_to_int_unchecked` intrinsic called on 3.40282347E+38 which cannot be represented in target type `i32`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `core::core_simd::round::<impl std::simd::Simd<f32, 2_usize>>::to_int_unchecked::<i32>` at rustc_src/src/../../portable-simd/crates/core_simd/src/round.rs:LL:CC\n+note: inside `main` at $DIR/simd-float-to-int.rs:LL:CC\n+  --> $DIR/simd-float-to-int.rs:LL:CC\n+   |\n+LL |     let _x : i32x2 = f32x2::from_array([f32::MAX, f32::MIN]).to_int_unchecked();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `implement` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "3da14e1fe37560720d13f2e70b825b93d3cca19e", "filename": "tests/compile-fail/intrinsics/simd-gather.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 9, so pointer to 1 byte starting at offset 9 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::simd::Simd::<i8, 4_usize>::gather_select_unchecked` at rustc_src/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n+note: inside `main` at $DIR/simd-gather.rs:LL:CC\n+  --> $DIR/simd-gather.rs:LL:CC\n+   |\n+LL |     let _result = Simd::gather_select_unchecked(&vec, Mask::splat(true), idxs, Simd::splat(0));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "a2404b174e880dde15cf37e20bc681a1e2f31dd4", "filename": "tests/compile-fail/intrinsics/simd-reduce-invalid-bool.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: each element of a SIMD mask must be all-0-bits or all-1-bits\n+  --> $DIR/simd-reduce-invalid-bool.rs:LL:CC\n+   |\n+LL |     simd_reduce_any(x);\n+   |     ^^^^^^^^^^^^^^^^^^ each element of a SIMD mask must be all-0-bits or all-1-bits\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/simd-reduce-invalid-bool.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "98e5ca2079721067b2b237acf75bbfed7a1d3cf4", "filename": "tests/compile-fail/intrinsics/simd-rem-by-zero.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-rem-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-rem-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-rem-by-zero.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: calculating the remainder with a divisor of zero\n+  --> $DIR/simd-rem-by-zero.rs:LL:CC\n+   |\n+LL |     simd_rem(x, y);\n+   |     ^^^^^^^^^^^^^^ calculating the remainder with a divisor of zero\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/simd-rem-by-zero.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "2d2cc2972ab3dcc57f4a95dc294f5195015a7d33", "filename": "tests/compile-fail/intrinsics/simd-scatter.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 9, so pointer to 1 byte starting at offset 9 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::simd::Simd::<i8, 4_usize>::scatter_select_unchecked` at rustc_src/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n+note: inside `main` at $DIR/simd-scatter.rs:LL:CC\n+  --> $DIR/simd-scatter.rs:LL:CC\n+   |\n+LL |     Simd::from_array([-27, 82, -41, 124]).scatter_select_unchecked(&mut vec, Mask::splat(true), idxs);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "e5fe3c886cb848cdba812937ff0fb0ed1089a7be", "filename": "tests/compile-fail/intrinsics/simd-select-bitmask-invalid.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: a SIMD bitmask less than 8 bits long must be filled with 0s for the remaining bits\n+  --> $DIR/simd-select-bitmask-invalid.rs:LL:CC\n+   |\n+LL |     simd_select_bitmask(0b11111111u8, x, x);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a SIMD bitmask less than 8 bits long must be filled with 0s for the remaining bits\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/simd-select-bitmask-invalid.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f0a1282edac46eaa34d0a5a28b9844f036bdaa0e", "filename": "tests/compile-fail/intrinsics/simd-select-invalid-bool.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: each element of a SIMD mask must be all-0-bits or all-1-bits\n+  --> $DIR/simd-select-invalid-bool.rs:LL:CC\n+   |\n+LL |     simd_select(x, x, x);\n+   |     ^^^^^^^^^^^^^^^^^^^^ each element of a SIMD mask must be all-0-bits or all-1-bits\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/simd-select-invalid-bool.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "dcd38d6f011405c14bc10192b82f5319cccaf296", "filename": "tests/compile-fail/intrinsics/simd-shl-too-far.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shl-too-far.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shl-too-far.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shl-too-far.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflowing shift by 100 in `simd_shl` in SIMD lane 0\n+  --> $DIR/simd-shl-too-far.rs:LL:CC\n+   |\n+LL |     simd_shl(x, y);\n+   |     ^^^^^^^^^^^^^^ overflowing shift by 100 in `simd_shl` in SIMD lane 0\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/simd-shl-too-far.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "c2c2850522f5a9ff01255c17112eacbe088e61e6", "filename": "tests/compile-fail/intrinsics/simd-shr-too-far.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shr-too-far.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shr-too-far.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shr-too-far.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflowing shift by 40 in `simd_shr` in SIMD lane 1\n+  --> $DIR/simd-shr-too-far.rs:LL:CC\n+   |\n+LL |     simd_shr(x, y);\n+   |     ^^^^^^^^^^^^^^ overflowing shift by 40 in `simd_shr` in SIMD lane 1\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/simd-shr-too-far.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b967b46ac9bac03082c0e04420e63d4e76db94a8", "filename": "tests/compile-fail/intrinsics/unchecked_add1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_add1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_add1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_add1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflow executing `unchecked_add`\n+  --> $DIR/unchecked_add1.rs:LL:CC\n+   |\n+LL |     unsafe { std::intrinsics::unchecked_add(40000u16, 30000); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_add`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/unchecked_add1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "18a116b7da96b005f1a9cc1f82bd5693e8da5192", "filename": "tests/compile-fail/intrinsics/unchecked_add2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_add2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_add2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_add2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflow executing `unchecked_add`\n+  --> $DIR/unchecked_add2.rs:LL:CC\n+   |\n+LL |     unsafe { std::intrinsics::unchecked_add(-30000i16, -8000); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_add`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/unchecked_add2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f153e4efd984be15f8255348ee6543dd04bf87fa", "filename": "tests/compile-fail/intrinsics/unchecked_div1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_div1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_div1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_div1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflow in signed division (dividing MIN by -1)\n+  --> $DIR/unchecked_div1.rs:LL:CC\n+   |\n+LL |     unsafe { std::intrinsics::unchecked_div(i16::MIN, -1); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow in signed division (dividing MIN by -1)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/unchecked_div1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "5372ba9933a2516c3847589d99d241347fccb9e9", "filename": "tests/compile-fail/intrinsics/unchecked_mul1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_mul1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_mul1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_mul1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflow executing `unchecked_mul`\n+  --> $DIR/unchecked_mul1.rs:LL:CC\n+   |\n+LL |     unsafe { std::intrinsics::unchecked_mul(300u16, 250u16); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_mul`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/unchecked_mul1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "20a44d2422ae97e87b8282b6631054b37c9d8b90", "filename": "tests/compile-fail/intrinsics/unchecked_mul2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_mul2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_mul2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_mul2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflow executing `unchecked_mul`\n+  --> $DIR/unchecked_mul2.rs:LL:CC\n+   |\n+LL |     unsafe { std::intrinsics::unchecked_mul(1_000_000_000i32, -4); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_mul`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/unchecked_mul2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "12abfed8ff73a79263dc1db489d8219bf7886e63", "filename": "tests/compile-fail/intrinsics/unchecked_sub1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_sub1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_sub1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_sub1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflow executing `unchecked_sub`\n+  --> $DIR/unchecked_sub1.rs:LL:CC\n+   |\n+LL |     unsafe { std::intrinsics::unchecked_sub(14u32, 22); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_sub`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/unchecked_sub1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "d62d2de2f930dea2dba55300f5794868b0d62b35", "filename": "tests/compile-fail/intrinsics/unchecked_sub2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_sub2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_sub2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Funchecked_sub2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: overflow executing `unchecked_sub`\n+  --> $DIR/unchecked_sub2.rs:LL:CC\n+   |\n+LL |     unsafe { std::intrinsics::unchecked_sub(30000i16, -7000); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_sub`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/unchecked_sub2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "150128ba2a41c1d4665fd5f57c8f2ff62e189e49", "filename": "tests/compile-fail/intrinsics/uninit_uninhabited_type.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funinit_uninhabited_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Funinit_uninhabited_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Funinit_uninhabited_type.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,12 @@\n+error: abnormal termination: aborted execution: attempted to instantiate uninhabited type `!`\n+  --> $DIR/uninit_uninhabited_type.rs:LL:CC\n+   |\n+LL |     unsafe { std::mem::uninitialized::<!>() };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n+   |\n+   = note: inside `main` at $DIR/uninit_uninhabited_type.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "77f675e8fb62905bc2509df87cd7aa8dbf70e333", "filename": "tests/compile-fail/intrinsics/write_bytes_null.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_null.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: memory access failed: null pointer is not a valid pointer\n+  --> $DIR/write_bytes_null.rs:LL:CC\n+   |\n+LL |     unsafe { write_bytes::<u8>(std::ptr::null_mut(), 0, 0) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/write_bytes_null.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "018ba83f53fb659bbcbd93e9e87337acbfd26bd8", "filename": "tests/compile-fail/intrinsics/write_bytes_overflow.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_overflow.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+error: Undefined Behavior: overflow computing total size of `write_bytes`\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::intrinsics::write_bytes::<i32>` at rustc_src/src/intrinsics.rs:LL:CC\n+   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::write_bytes` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+note: inside `main` at $DIR/write_bytes_overflow.rs:LL:CC\n+  --> $DIR/write_bytes_overflow.rs:LL:CC\n+   |\n+LL |         (&mut y as *mut i32).write_bytes(0u8, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "9d44ba9f746adb2a7440afd1967a93850855d0a7", "filename": "tests/compile-fail/intrinsics/zero_fn_ptr.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fzero_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fintrinsics%2Fzero_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fzero_fn_ptr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,12 @@\n+error: abnormal termination: aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n+  --> $DIR/zero_fn_ptr.rs:LL:CC\n+   |\n+LL |     unsafe { std::mem::zeroed::<fn()>() };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n+   |\n+   = note: inside `main` at $DIR/zero_fn_ptr.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "c0c982b8ca21ddd6cebb8240be7aacaf1d71481e", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -5,5 +5,5 @@\n \n fn main() {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n-    let _x = b == std::hint::black_box(true); //~ ERROR interpreting an invalid 8-bit value as a bool: 0x02\n+    let _x = b == std::hint::black_box(true); //~ ERROR interpreting an invalid 8-bit value as a bool\n }"}, {"sha": "23c5365618b8d7a6a6434f352a84804cc43be76a", "filename": "tests/compile-fail/invalid_bool.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: interpreting an invalid 8-bit value as a bool: 0x02\n+  --> $DIR/invalid_bool.rs:LL:CC\n+   |\n+LL |     let _x = b == std::hint::black_box(true);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ interpreting an invalid 8-bit value as a bool: 0x02\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/invalid_bool.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "9d485b73f2469b2a61198787fb99c6d38d3c805c", "filename": "tests/compile-fail/invalid_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_char.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let c = 0xFFFFFFu32;\n     assert!(std::char::from_u32(c).is_none());\n     let c = unsafe { std::mem::transmute::<u32, char>(c) };\n-    let _x = c == 'x'; //~ ERROR interpreting an invalid 32-bit value as a char: 0x00ffffff\n+    let _x = c == 'x'; //~ ERROR interpreting an invalid 32-bit value as a char\n }"}, {"sha": "69f3ef1f4a6dac104171926a4d0a5bdf6a1a0eeb", "filename": "tests/compile-fail/invalid_char.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_char.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: interpreting an invalid 32-bit value as a char: $HEX\n+  --> $DIR/invalid_char.rs:LL:CC\n+   |\n+LL |     let _x = c == 'x';\n+   |              ^^^^^^^^ interpreting an invalid 32-bit value as a char: $HEX\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/invalid_char.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "63b6003f3d89e2812b6d745a4b28e9ca06526d1c", "filename": "tests/compile-fail/invalid_enum_tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_enum_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_enum_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_tag.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -2,7 +2,7 @@\n // Make sure we find these even with many checks disabled.\n // compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n-// error-pattern: enum value has invalid tag: 0x0000002a\n+// error-pattern: enum value has invalid tag\n \n use std::mem;\n "}, {"sha": "a602204cf46bce99dd71db1622eb3bad9e494858", "filename": "tests/compile-fail/invalid_enum_tag.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_enum_tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_enum_tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_tag.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: enum value has invalid tag: $HEX\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::mem::discriminant::<Foo>` at rustc_src/src/mem/mod.rs:LL:CC\n+note: inside `main` at $DIR/invalid_enum_tag.rs:LL:CC\n+  --> $DIR/invalid_enum_tag.rs:LL:CC\n+   |\n+LL |     let _val = mem::discriminant(&f);\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "cd7919444f0a95d3b7b84c251128fd1b0bdeae35", "filename": "tests/compile-fail/invalid_int.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Finvalid_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_int.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+  --> $DIR/invalid_int.rs:LL:CC\n+   |\n+LL |     let _x = i + 0;\n+   |              ^^^^^ using uninitialized data, but this operation requires initialized memory\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/invalid_int.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "1dfcad0c147b414022d80e57faa522fd39798a14", "filename": "tests/compile-fail/issue-miri-1112.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fissue-miri-1112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fissue-miri-1112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fissue-miri-1112.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: type validation failed: encountered invalid drop function pointer in vtable (function has incompatible signature)\n+  --> $DIR/issue-miri-1112.rs:LL:CC\n+   |\n+LL |         let obj = std::mem::transmute::<FatPointer, *mut FunnyPointer>(obj);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (function has incompatible signature)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `FunnyPointer::from_data_ptr` at $DIR/issue-miri-1112.rs:LL:CC\n+note: inside `main` at $DIR/issue-miri-1112.rs:LL:CC\n+  --> $DIR/issue-miri-1112.rs:LL:CC\n+   |\n+LL |         let _raw: &FunnyPointer = FunnyPointer::from_data_ptr(&hello, &meta as *const _);\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "7dee9ddf1c98885964549789e59092e0c9186c56", "filename": "tests/compile-fail/memleak.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmemleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmemleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,4 +1,5 @@\n-//error-pattern: the evaluated program leaked memory\n+// error-pattern: the evaluated program leaked memory\n+// normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n \n fn main() {\n     std::mem::forget(Box::new(42));"}, {"sha": "f8b62af3eb857f72a8420486c4f43569af0c484e", "filename": "tests/compile-fail/memleak.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmemleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmemleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,10 @@\n+The following memory was leaked: ALLOC (Rust heap, size: 4, align: 4) {\n+$stripped$\n+}\n+\n+error: the evaluated program leaked memory\n+\n+note: pass `-Zmiri-ignore-leaks` to disable this check\n+\n+error: aborting due to previous error\n+"}, {"sha": "da222609091ab73810d9f7027075f44e221c6956", "filename": "tests/compile-fail/memleak_rc.32bit.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmemleak_rc.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmemleak_rc.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak_rc.32bit.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,10 @@\n+The following memory was leaked: ALLOC (Rust heap, size: 16, align: 4) {\n+$stripped$\n+}\n+\n+error: the evaluated program leaked memory\n+\n+note: pass `-Zmiri-ignore-leaks` to disable this check\n+\n+error: aborting due to previous error\n+"}, {"sha": "8c24bbc779bd68b0ce9697c36ff023a88e364803", "filename": "tests/compile-fail/memleak_rc.64bit.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmemleak_rc.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmemleak_rc.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak_rc.64bit.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,11 @@\n+The following memory was leaked: ALLOC (Rust heap, size: 32, align: 8) {\n+$stripped$\n+$stripped$\n+}\n+\n+error: the evaluated program leaked memory\n+\n+note: pass `-Zmiri-ignore-leaks` to disable this check\n+\n+error: aborting due to previous error\n+"}, {"sha": "17bcb36f36106d41b97ec064d104b109916f734d", "filename": "tests/compile-fail/memleak_rc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmemleak_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmemleak_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak_rc.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,4 +1,6 @@\n-//error-pattern: the evaluated program leaked memory\n+// error-pattern: the evaluated program leaked memory\n+// stderr-per-bitwidth\n+// normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n \n use std::rc::Rc;\n use std::cell::RefCell;"}, {"sha": "995011482323d109bc8d02b7e8fd95e4c731e92d", "filename": "tests/compile-fail/modifying_constants.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmodifying_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fmodifying_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodifying_constants.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: writing to ALLOC which is read-only\n+  --> $DIR/modifying_constants.rs:LL:CC\n+   |\n+LL |     *y = 42;\n+   |     ^^^^^^^ writing to ALLOC which is read-only\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/modifying_constants.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "22ad10f1310354c513d970488c208d6f232a90d6", "filename": "tests/compile-fail/never_say_never.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnever_say_never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnever_say_never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_say_never.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: entering unreachable code\n+  --> $DIR/never_say_never.rs:LL:CC\n+   |\n+LL |         *(y as *const _ as *const !)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/never_say_never.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "6d8fa37e98ef9cd6b16f27c63f3bc712cebdc73c", "filename": "tests/compile-fail/never_transmute_humans.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnever_transmute_humans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnever_transmute_humans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_humans.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: transmuting to uninhabited type\n+  --> $DIR/never_transmute_humans.rs:LL:CC\n+   |\n+LL |         std::mem::transmute::<Human, !>(Human)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/never_transmute_humans.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "8d8a4d0e832f96a600bd6d93c055d7a47be0ca40", "filename": "tests/compile-fail/never_transmute_void.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnever_transmute_void.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnever_transmute_void.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_void.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: entering unreachable code\n+  --> $DIR/never_transmute_void.rs:LL:CC\n+   |\n+LL |         match v.0 {}\n+   |               ^^^ entering unreachable code\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `m::f` at $DIR/never_transmute_void.rs:LL:CC\n+note: inside `main` at $DIR/never_transmute_void.rs:LL:CC\n+  --> $DIR/never_transmute_void.rs:LL:CC\n+   |\n+LL |     m::f(v);\n+   |     ^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "52591a8d6da316961a9d0cf415520731ccc578d1", "filename": "tests/compile-fail/no_main.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fno_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fno_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fno_main.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,2 @@\n+error: miri can only run programs that have a main function\n+"}, {"sha": "0930160023f1bb2ce1f7db63d08b384878114e71", "filename": "tests/compile-fail/null_pointer_deref.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnull_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnull_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: null pointer is not a valid pointer\n+  --> $DIR/null_pointer_deref.rs:LL:CC\n+   |\n+LL |     let x: i32 = unsafe { *std::ptr::null() };\n+   |                           ^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/null_pointer_deref.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "25fea50b15af1ae72a2f4afab76e28ab435a9514", "filename": "tests/compile-fail/null_pointer_deref_zst.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: null pointer is not a valid pointer\n+  --> $DIR/null_pointer_deref_zst.rs:LL:CC\n+   |\n+LL |     let x: () = unsafe { *std::ptr::null() };\n+   |                          ^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/null_pointer_deref_zst.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "5ac8cc7c20fdfd892af26f07755df30377cadf2f", "filename": "tests/compile-fail/null_pointer_write.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnull_pointer_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnull_pointer_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_write.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: null pointer is not a valid pointer\n+  --> $DIR/null_pointer_write.rs:LL:CC\n+   |\n+LL |     unsafe { *std::ptr::null_mut() = 0i32 };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/null_pointer_write.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b40a9154f18268281090cb54c93ff4bcae5226d2", "filename": "tests/compile-fail/null_pointer_write_zst.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnull_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fnull_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_write_zst.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+error: Undefined Behavior: memory access failed: null pointer is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::ptr::write::<[u8; 0]>` at rustc_src/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::ptr::mut_ptr::<impl *mut [u8; 0]>::write` at rustc_src/src/ptr/mut_ptr.rs:LL:CC\n+note: inside `main` at $DIR/null_pointer_write_zst.rs:LL:CC\n+  --> $DIR/null_pointer_write_zst.rs:LL:CC\n+   |\n+LL |     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "dca5d39b7665eace49392537fe16f5756e2f2a6e", "filename": "tests/compile-fail/panic/bad_miri_start_panic.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fbad_miri_start_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fbad_miri_start_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fbad_miri_start_panic.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: unwinding past a stack frame that does not allow unwinding\n+  --> $DIR/bad_miri_start_panic.rs:LL:CC\n+   |\n+LL |     unsafe { miri_start_panic(&mut 0) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ unwinding past a stack frame that does not allow unwinding\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/bad_miri_start_panic.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "529f4179a8f7eafe42b935057d62188f58f4fe29", "filename": "tests/compile-fail/panic/bad_unwind.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fbad_unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fbad_unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fbad_unwind.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,25 @@\n+thread 'main' panicked at 'explicit panic', $DIR/bad_unwind.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: Undefined Behavior: unwinding past a stack frame that does not allow unwinding\n+  --> $DIR/bad_unwind.rs:LL:CC\n+   |\n+LL |     std::panic::catch_unwind(|| unwind()).unwrap_err();\n+   |                                 ^^^^^^^^ unwinding past a stack frame that does not allow unwinding\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside closure at $DIR/bad_unwind.rs:LL:CC\n+   = note: inside `std::panicking::r#try::do_call::<[closure@$DIR/bad_unwind.rs:LL:CC: 13:41], ()>` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::panicking::r#try::<(), [closure@$DIR/bad_unwind.rs:LL:CC: 13:41]>` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::panic::catch_unwind::<[closure@$DIR/bad_unwind.rs:LL:CC: 13:41], ()>` at rustc_src/src/panic.rs:LL:CC\n+note: inside `main` at $DIR/bad_unwind.rs:LL:CC\n+  --> $DIR/bad_unwind.rs:LL:CC\n+   |\n+LL |     std::panic::catch_unwind(|| unwind()).unwrap_err();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b854a6b721589855b179c9a52c46321f5ccbb2a8", "filename": "tests/compile-fail/panic/double_panic.stderr", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fdouble_panic.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,91 @@\n+thread 'main' panicked at 'first', $DIR/double_panic.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+thread 'main' panicked at 'second', $DIR/double_panic.rs:LL:CC\n+stack backtrace:\n+   0: std::backtrace_rs::backtrace::miri::trace_unsynchronized\n+ at rustc_src/src/../../backtrace/src/backtrace/miri.rs:LL:CC\n+   1: std::backtrace_rs::backtrace::miri::trace\n+ at rustc_src/src/../../backtrace/src/backtrace/miri.rs:LL:CC\n+   2: std::backtrace_rs::backtrace::trace_unsynchronized\n+ at rustc_src/src/../../backtrace/src/backtrace/mod.rs:LL:CC\n+   3: std::sys_common::backtrace::_print_fmt\n+ at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+   4: <std::sys_common::backtrace::_print::DisplayBacktrace as std::fmt::Display>::fmt\n+ at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+   5: std::fmt::write\n+ at rustc_src/src/fmt/mod.rs:LL:CC\n+   6: <std::sys::PLATFORM::stdio::Stderr as std::io::Write>::write_fmt\n+ at rustc_src/src/io/mod.rs:LL:CC\n+   7: std::sys_common::backtrace::_print\n+ at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+   8: std::sys_common::backtrace::print\n+ at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+   9: std::panicking::default_hook::{closure#1}\n+ at rustc_src/src/panicking.rs:LL:CC\n+  10: std::panicking::default_hook\n+ at rustc_src/src/panicking.rs:LL:CC\n+  11: std::panicking::rust_panic_with_hook\n+ at rustc_src/src/panicking.rs:LL:CC\n+  12: std::rt::begin_panic::{closure#0}\n+ at rustc_src/src/panicking.rs:LL:CC\n+  13: std::sys_common::backtrace::__rust_end_short_backtrace\n+ at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+  14: std::rt::begin_panic\n+ at rustc_src/src/panicking.rs:LL:CC\n+  15: <Foo as std::ops::Drop>::drop\n+ at $DIR/double_panic.rs:LL:CC\n+  16: std::ptr::drop_in_place - shim(Some(Foo))\n+ at rustc_src/src/ptr/mod.rs:LL:CC\n+  17: main\n+ at $DIR/double_panic.rs:LL:CC\n+  18: <fn() as std::ops::FnOnce<()>>::call_once - shim(fn())\n+ at rustc_src/src/ops/function.rs:LL:CC\n+  19: std::sys_common::backtrace::__rust_begin_short_backtrace\n+ at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+  20: std::rt::lang_start::{closure#0}\n+ at rustc_src/src/rt.rs:LL:CC\n+  21: std::ops::function::impls::call_once\n+ at rustc_src/src/ops/function.rs:LL:CC\n+  22: std::panicking::r#try::do_call\n+ at rustc_src/src/panicking.rs:LL:CC\n+  23: std::panicking::r#try\n+ at rustc_src/src/panicking.rs:LL:CC\n+  24: std::panic::catch_unwind\n+ at rustc_src/src/panic.rs:LL:CC\n+  25: std::rt::lang_start_internal::{closure#2}\n+ at rustc_src/src/rt.rs:LL:CC\n+  26: std::panicking::r#try::do_call\n+ at rustc_src/src/panicking.rs:LL:CC\n+  27: std::panicking::r#try\n+ at rustc_src/src/panicking.rs:LL:CC\n+  28: std::panic::catch_unwind\n+ at rustc_src/src/panic.rs:LL:CC\n+  29: std::rt::lang_start_internal\n+ at rustc_src/src/rt.rs:LL:CC\n+  30: std::rt::lang_start\n+ at rustc_src/src/rt.rs:LL:CC\n+thread panicked while panicking. aborting.\n+error: abnormal termination: the program aborted execution\n+   |\n+   = note: inside `std::sys::PLATFORM::abort_internal` at rustc_src/src/sys/PLATFORM/mod.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic_with_hook` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside closure at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::rt::begin_panic::<&str>` at rustc_src/src/panicking.rs:LL:CC\n+note: inside `<Foo as std::ops::Drop>::drop` at rustc_src/src/panic.rs:LL:CC\n+  --> $DIR/double_panic.rs:LL:CC\n+   |\n+LL |         panic!(\"second\");\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: inside `std::ptr::drop_in_place::<Foo> - shim(Some(Foo))` at rustc_src/src/ptr/mod.rs:LL:CC\n+note: inside `main` at $DIR/double_panic.rs:LL:CC\n+  --> $DIR/double_panic.rs:LL:CC\n+   |\n+LL | }\n+   | ^\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "93f48bb89e3bc4da852283f67a8e05870165fdf0", "filename": "tests/compile-fail/panic/panic_abort1.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,22 @@\n+thread 'main' panicked at 'panicking from libstd', $DIR/panic_abort1.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: abnormal termination: the program aborted execution\n+   |\n+   = note: inside `panic_abort::__rust_start_panic::abort` at rustc_src/src/lib.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic` at rustc_src/src/lib.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic_with_hook` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside closure at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::rt::begin_panic::<&str>` at rustc_src/src/panicking.rs:LL:CC\n+note: inside `main` at rustc_src/src/panic.rs:LL:CC\n+  --> $DIR/panic_abort1.rs:LL:CC\n+   |\n+LL |     std::panic!(\"panicking from libstd\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "bb4b96fd0aebd74cdcd585709610726aff5facb4", "filename": "tests/compile-fail/panic/panic_abort2.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,23 @@\n+thread 'main' panicked at '42-panicking from libstd', $DIR/panic_abort2.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: abnormal termination: the program aborted execution\n+   |\n+   = note: inside `panic_abort::__rust_start_panic::abort` at rustc_src/src/lib.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic` at rustc_src/src/lib.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic_with_hook` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside closure at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::panicking::begin_panic_handler` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::rt::panic_fmt` at rustc_src/src/panicking.rs:LL:CC\n+note: inside `main` at rustc_src/src/panic.rs:LL:CC\n+  --> $DIR/panic_abort2.rs:LL:CC\n+   |\n+LL |     std::panic!(\"{}-panicking from libstd\", 42);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "a799ce4b4de9f86073428a538b055ae0af46224e", "filename": "tests/compile-fail/panic/panic_abort3.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,24 @@\n+thread 'main' panicked at 'panicking from libcore', $DIR/panic_abort3.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: abnormal termination: the program aborted execution\n+   |\n+   = note: inside `panic_abort::__rust_start_panic::abort` at rustc_src/src/lib.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic` at rustc_src/src/lib.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic_with_hook` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside closure at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::panicking::begin_panic_handler` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::rt::panic_fmt` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `core::panicking::panic` at rustc_src/src/panicking.rs:LL:CC\n+note: inside `main` at rustc_src/src/panic.rs:LL:CC\n+  --> $DIR/panic_abort3.rs:LL:CC\n+   |\n+LL |     core::panic!(\"panicking from libcore\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "a24d0948d1cf60f3ff6e00e2aa8635b0f022ee46", "filename": "tests/compile-fail/panic/panic_abort4.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,23 @@\n+thread 'main' panicked at '42-panicking from libcore', $DIR/panic_abort4.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+error: abnormal termination: the program aborted execution\n+   |\n+   = note: inside `panic_abort::__rust_start_panic::abort` at rustc_src/src/lib.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic` at rustc_src/src/lib.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::panicking::rust_panic_with_hook` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside closure at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at rustc_src/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::panicking::begin_panic_handler` at rustc_src/src/panicking.rs:LL:CC\n+   = note: inside `std::rt::panic_fmt` at rustc_src/src/panicking.rs:LL:CC\n+note: inside `main` at rustc_src/src/panic.rs:LL:CC\n+  --> $DIR/panic_abort4.rs:LL:CC\n+   |\n+LL |     core::panic!(\"{}-panicking from libcore\", 42);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "7ae965156f007627ae0a8e827354a17265f587c6", "filename": "tests/compile-fail/panic/unwind_panic_abort.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Funwind_panic_abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpanic%2Funwind_panic_abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Funwind_panic_abort.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: unwinding past a stack frame that does not allow unwinding\n+  --> $DIR/unwind_panic_abort.rs:LL:CC\n+   |\n+LL |     unsafe { miri_start_panic(&mut 0); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ unwinding past a stack frame that does not allow unwinding\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/unwind_panic_abort.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "6779df99c3fbfc4a81c6eaba21e3a78b0765c2bd", "filename": "tests/compile-fail/pointer_partial_overwrite.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpointer_partial_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpointer_partial_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_partial_overwrite.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+  --> $DIR/pointer_partial_overwrite.rs:LL:CC\n+   |\n+LL |     let x = *p;\n+   |             ^^ using uninitialized data, but this operation requires initialized memory\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/pointer_partial_overwrite.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "dc35f7e109a54b9b8cb65620ca8cef2d0d3732a9", "filename": "tests/compile-fail/pointer_partial_read.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpointer_partial_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fpointer_partial_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_partial_read.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: unable to turn pointer into raw bytes\n+  --> $DIR/pointer_partial_read.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { *z };\n+   |                         ^^ unable to turn pointer into raw bytes\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/pointer_partial_read.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "cdd25d0e638ef0f1d02497c3205cfec74baa54f6", "filename": "tests/compile-fail/provenance/ptr_int_unexposed.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fptr_int_unexposed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fptr_int_unexposed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprovenance%2Fptr_int_unexposed.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: $HEX is not a valid pointer\n+  --> $DIR/ptr_int_unexposed.rs:LL:CC\n+   |\n+LL |     assert_eq!(unsafe { *ptr }, 3);\n+   |                         ^^^^ dereferencing pointer failed: $HEX is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/ptr_int_unexposed.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "76a40765eb2ff6199d73eb7449f51346be070b24", "filename": "tests/compile-fail/provenance/ptr_invalid.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fptr_invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fptr_invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprovenance%2Fptr_invalid.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: $HEX is not a valid pointer\n+  --> $DIR/ptr_invalid.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { *xptr_invalid };\n+   |                         ^^^^^^^^^^^^^ dereferencing pointer failed: $HEX is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/ptr_invalid.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "538ec4484edb9282b09c5512ff2b3282f8ed1750", "filename": "tests/compile-fail/provenance/ptr_legacy_provenance.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fptr_legacy_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fptr_legacy_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprovenance%2Fptr_legacy_provenance.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -Zmiri-disable-stacked-borrows\n+// normalize-stderr-test: \"offset -[0-9]+\" -> \"offset -XX\"\n #![feature(strict_provenance)]\n \n use std::ptr;"}, {"sha": "4552be08145d4a9654927238cf8572f07b310117", "filename": "tests/compile-fail/provenance/ptr_legacy_provenance.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fptr_legacy_provenance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fptr_legacy_provenance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprovenance%2Fptr_legacy_provenance.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 4, so pointer to 4 bytes starting at offset -XX is out-of-bounds\n+  --> $DIR/ptr_legacy_provenance.rs:LL:CC\n+   |\n+LL |     assert_eq!(unsafe { *ptr }, 0);\n+   |                         ^^^^ dereferencing pointer failed: ALLOC has size 4, so pointer to 4 bytes starting at offset -XX is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/ptr_legacy_provenance.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "482b7a404c513e5cedd4ee266342f940388047b1", "filename": "tests/compile-fail/provenance/strict-provenance-offset.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fstrict-provenance-offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fstrict-provenance-offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprovenance%2Fstrict-provenance-offset.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: pointer arithmetic failed: $HEX is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::ptr::const_ptr::<impl *const u8>::offset` at rustc_src/src/ptr/const_ptr.rs:LL:CC\n+note: inside `main` at $DIR/strict-provenance-offset.rs:LL:CC\n+  --> $DIR/strict-provenance-offset.rs:LL:CC\n+   |\n+LL |     let _ = unsafe { roundtrip.offset(1) };\n+   |                      ^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "544431815c1bcc7127433a37e7c8be0bfa38b8f2", "filename": "tests/compile-fail/provenance/strict_provenance_transmute.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fstrict_provenance_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fprovenance%2Fstrict_provenance_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprovenance%2Fstrict_provenance_transmute.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected plain (non-pointer) bytes\n+  --> $DIR/strict_provenance_transmute.rs:LL:CC\n+   |\n+LL |     let left_int: usize = mem::transmute(left);\n+   |                           ^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected plain (non-pointer) bytes\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `deref` at $DIR/strict_provenance_transmute.rs:LL:CC\n+note: inside `main` at $DIR/strict_provenance_transmute.rs:LL:CC\n+  --> $DIR/strict_provenance_transmute.rs:LL:CC\n+   |\n+LL |         deref(ptr1, ptr2.with_addr(ptr1.addr()));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "bc2ca54438ff90a9aa72b4e5ee61c8edd31ab1ee", "filename": "tests/compile-fail/ptr_integer_array_transmute.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fptr_integer_array_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fptr_integer_array_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_integer_array_transmute.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n+  --> $DIR/ptr_integer_array_transmute.rs:LL:CC\n+   |\n+LL |     let _i: [usize; 1] = unsafe { std::mem::transmute(r) };\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/ptr_integer_array_transmute.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "de9ebf4eb06b4c419632ad749fcd18533ef6c789", "filename": "tests/compile-fail/ptr_integer_transmute.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fptr_integer_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fptr_integer_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_integer_transmute.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected initialized plain (non-pointer) bytes\n+  --> $DIR/ptr_integer_transmute.rs:LL:CC\n+   |\n+LL |     let _i: usize = unsafe { std::mem::transmute(r) };\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected initialized plain (non-pointer) bytes\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/ptr_integer_transmute.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "3d745b7dc5c9468762a77dc2a8178530dfc08622", "filename": "tests/compile-fail/rc_as_ptr.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Frc_as_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Frc_as_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frc_as_ptr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,16 @@\n+error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n+  --> $DIR/rc_as_ptr.rs:LL:CC\n+   |\n+LL |     assert_eq!(42, **unsafe { &*Weak::as_ptr(&weak) });\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at rustc_src/src/macros/mod.rs:LL:CC\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "505c8deafb6d5ababb7a1c7a2c325694ffcfe8ef", "filename": "tests/compile-fail/reading_half_a_pointer.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Freading_half_a_pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Freading_half_a_pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freading_half_a_pointer.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: unable to turn pointer into raw bytes\n+  --> $DIR/reading_half_a_pointer.rs:LL:CC\n+   |\n+LL |         let _x = *d_alias;\n+   |                  ^^^^^^^^ unable to turn pointer into raw bytes\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/reading_half_a_pointer.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "09d0f7a6df955795aa95309385426d90f06b58e6", "filename": "tests/compile-fail/rustc-error.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Frustc-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Frustc-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frustc-error.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,14 @@\n+error[E0423]: expected function, found macro `println`\n+  --> $DIR/rustc-error.rs:LL:CC\n+   |\n+LL |     println(\"Hello, world!\");\n+   |     ^^^^^^^ not a function\n+   |\n+help: use `!` to invoke the macro\n+   |\n+LL |     println!(\"Hello, world!\");\n+   |            +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0423`."}, {"sha": "3b54a5b51248174686d599728b7f44604bb288d8", "filename": "tests/compile-fail/shim_arg_size.32bit.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fshim_arg_size.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fshim_arg_size.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fshim_arg_size.32bit.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: scalar size mismatch: expected 4 bytes but got 2 bytes instead\n+  --> $DIR/shim_arg_size.rs:LL:CC\n+   |\n+LL |         let _p1 = malloc(42);\n+   |                   ^^^^^^^^^^ scalar size mismatch: expected 4 bytes but got 2 bytes instead\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/shim_arg_size.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "5e33604c121d6173ed8eb589adf0c7940081b364", "filename": "tests/compile-fail/shim_arg_size.64bit.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fshim_arg_size.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fshim_arg_size.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fshim_arg_size.64bit.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: scalar size mismatch: expected 8 bytes but got 4 bytes instead\n+  --> $DIR/shim_arg_size.rs:LL:CC\n+   |\n+LL |         let _p1 = malloc(42);\n+   |                   ^^^^^^^^^^ scalar size mismatch: expected 8 bytes but got 4 bytes instead\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/shim_arg_size.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "1297e5ed070f63346c0cec40b207b5a7b8567c0f", "filename": "tests/compile-fail/shim_arg_size.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fshim_arg_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fshim_arg_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fshim_arg_size.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,3 +1,5 @@\n+// stderr-per-bitwidth\n+\n fn main() {\n     extern \"C\" {\n         // Use the wrong type(ie. not the pointer width) for the `size`"}, {"sha": "13239506c633ff0eb550a1ef6a2c32df0f82bb63", "filename": "tests/compile-fail/slice-too-big.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fslice-too-big.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fslice-too-big.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fslice-too-big.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object\n+  --> $DIR/slice-too-big.rs:5:21\n+   |\n+LL |     let _x: &[u8] = mem::transmute((ptr, usize::MAX)); //~ ERROR: invalid reference metadata: slice is bigger than largest supported object\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/slice-too-big.rs:5:21\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "6862a67faec267616d0842fb2bb9218b4f1e2d8d", "filename": "tests/compile-fail/stacked_borrows/alias_through_mutation.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/alias_through_mutation.rs:LL:CC\n+   |\n+LL |     let _val = *target_alias;\n+   |                ^^^^^^^^^^^^^\n+   |                |\n+   |                attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/alias_through_mutation.rs:LL:CC\n+   |\n+LL |     unsafe { *x = &mut *(target as *mut _); }\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/alias_through_mutation.rs:LL:CC\n+   |\n+LL |     *target = 13;\n+   |     ^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/alias_through_mutation.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "5f2e5cbbad36fcff77fdf85379a79c3066286aa3", "filename": "tests/compile-fail/stacked_borrows/aliasing_mut1.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,34 @@\n+error: Undefined Behavior: not granting access to tag <TAG> because incompatible item is protected: [Unique for <TAG> (call ID)]\n+  --> $DIR/aliasing_mut1.rs:LL:CC\n+   |\n+LL | pub fn safe(_x: &mut i32, _y: &mut i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not granting access to tag <TAG> because incompatible item is protected: [Unique for <TAG> (call ID)]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/aliasing_mut1.rs:LL:CC\n+   |\n+LL |     let xraw: *mut i32 = unsafe { mem::transmute(&mut x) };\n+   |                                                  ^^^^^^\n+help: <TAG> was protected due to <TAG> which was created here\n+  --> $DIR/aliasing_mut1.rs:LL:CC\n+   |\n+LL |     let xraw: *mut i32 = unsafe { mem::transmute(&mut x) };\n+   |                                                  ^^^^^^\n+help: this protector is live for this call\n+  --> $DIR/aliasing_mut1.rs:LL:CC\n+   |\n+LL | pub fn safe(_x: &mut i32, _y: &mut i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `safe` at $DIR/aliasing_mut1.rs:LL:CC\n+note: inside `main` at $DIR/aliasing_mut1.rs:LL:CC\n+  --> $DIR/aliasing_mut1.rs:LL:CC\n+   |\n+LL |     safe_raw(xraw, xraw);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "bb82252e78d422cf98ec1794f246e2003337b519", "filename": "tests/compile-fail/stacked_borrows/aliasing_mut2.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,34 @@\n+error: Undefined Behavior: not granting access to tag <TAG> because incompatible item is protected: [SharedReadOnly for <TAG> (call ID)]\n+  --> $DIR/aliasing_mut2.rs:LL:CC\n+   |\n+LL | pub fn safe(_x: &i32, _y: &mut i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not granting access to tag <TAG> because incompatible item is protected: [SharedReadOnly for <TAG> (call ID)]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/aliasing_mut2.rs:LL:CC\n+   |\n+LL |     let xref = &mut x;\n+   |                ^^^^^^\n+help: <TAG> was protected due to <TAG> which was created here\n+  --> $DIR/aliasing_mut2.rs:LL:CC\n+   |\n+LL |     safe_raw(xshr, xraw);\n+   |              ^^^^\n+help: this protector is live for this call\n+  --> $DIR/aliasing_mut2.rs:LL:CC\n+   |\n+LL | pub fn safe(_x: &i32, _y: &mut i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `safe` at $DIR/aliasing_mut2.rs:LL:CC\n+note: inside `main` at $DIR/aliasing_mut2.rs:LL:CC\n+  --> $DIR/aliasing_mut2.rs:LL:CC\n+   |\n+LL |     safe_raw(xshr, xraw);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "0cfddcac84868a62c4d809db1405bb9a6a194be9", "filename": "tests/compile-fail/stacked_borrows/aliasing_mut3.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut3.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,32 @@\n+error: Undefined Behavior: trying to reborrow <untagged> for SharedReadOnly permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/aliasing_mut3.rs:LL:CC\n+   |\n+LL | pub fn safe(_x: &mut i32, _y: &i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | trying to reborrow <untagged> for SharedReadOnly permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   | this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: tag was most recently created at offsets [0x0..0x4]\n+  --> $DIR/aliasing_mut3.rs:LL:CC\n+   |\n+LL |     safe_raw(xraw, xshr);\n+   |                    ^^^^\n+help: tag was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/aliasing_mut3.rs:LL:CC\n+   |\n+LL | pub fn safe(_x: &mut i32, _y: &i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `safe` at $DIR/aliasing_mut3.rs:LL:CC\n+note: inside `main` at $DIR/aliasing_mut3.rs:LL:CC\n+  --> $DIR/aliasing_mut3.rs:LL:CC\n+   |\n+LL |     safe_raw(xraw, xshr);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "13b589b94754fe448ac0bfb991dce9efbb65b81c", "filename": "tests/compile-fail/stacked_borrows/aliasing_mut4.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Faliasing_mut4.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,34 @@\n+error: Undefined Behavior: not granting access to tag <TAG> because incompatible item is protected: [SharedReadOnly for <TAG> (call ID)]\n+  --> $DIR/aliasing_mut4.rs:LL:CC\n+   |\n+LL | pub fn safe(_x: &i32, _y: &mut Cell<i32>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not granting access to tag <TAG> because incompatible item is protected: [SharedReadOnly for <TAG> (call ID)]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/aliasing_mut4.rs:LL:CC\n+   |\n+LL |     let xref = &mut x;\n+   |                ^^^^^^\n+help: <TAG> was protected due to <TAG> which was created here\n+  --> $DIR/aliasing_mut4.rs:LL:CC\n+   |\n+LL |     safe_raw(xshr, xraw as *mut _);\n+   |              ^^^^\n+help: this protector is live for this call\n+  --> $DIR/aliasing_mut4.rs:LL:CC\n+   |\n+LL | pub fn safe(_x: &i32, _y: &mut Cell<i32>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `safe` at $DIR/aliasing_mut4.rs:LL:CC\n+note: inside `main` at $DIR/aliasing_mut4.rs:LL:CC\n+  --> $DIR/aliasing_mut4.rs:LL:CC\n+   |\n+LL |     safe_raw(xshr, xraw as *mut _);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "94d450955348459e57694b2ef1c1f5472d7e5753", "filename": "tests/compile-fail/stacked_borrows/box_exclusive_violation1.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,38 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/box_exclusive_violation1.rs:LL:CC\n+   |\n+LL |   *our\n+   |   ^^^^\n+   |   |\n+   |   attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |   this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/box_exclusive_violation1.rs:LL:CC\n+   |\n+LL | / fn demo_mut_advanced_unique(mut our: Box<i32>) -> i32 {\n+LL | |   unknown_code_1(&*our);\n+LL | |\n+LL | |   // This \"re-asserts\" uniqueness of the reference: After writing, we know\n+...  |\n+LL | |   *our\n+LL | | }\n+   | |_^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/box_exclusive_violation1.rs:LL:CC\n+   |\n+LL |     *LEAK = 7;\n+   |     ^^^^^^^^^\n+   = note: inside `demo_mut_advanced_unique` at $DIR/box_exclusive_violation1.rs:LL:CC\n+note: inside `main` at $DIR/box_exclusive_violation1.rs:LL:CC\n+  --> $DIR/box_exclusive_violation1.rs:LL:CC\n+   |\n+LL |     demo_mut_advanced_unique(Box::new(0));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "8eed3732a0cb08434859c8979fcb00107fd89062", "filename": "tests/compile-fail/stacked_borrows/buggy_as_mut_slice.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a write access using <TAG> at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/buggy_as_mut_slice.rs:LL:CC\n+   |\n+LL |     v1[1] = 5;\n+   |     ^^^^^^^^^\n+   |     |\n+   |     attempting a write access using <TAG> at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+   |     this error occurs as part of an access at ALLOC[0x4..0x8]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0xc]\n+  --> $DIR/buggy_as_mut_slice.rs:LL:CC\n+   |\n+LL |     let v1 = safe::as_mut_slice(&v);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0xc]\n+  --> $DIR/buggy_as_mut_slice.rs:LL:CC\n+   |\n+LL |             from_raw_parts_mut(self_.as_ptr() as *mut T, self_.len())\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/buggy_as_mut_slice.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "d1d8d1f6aa3c9040bfd23ddba226ef554b7bee4b", "filename": "tests/compile-fail/stacked_borrows/buggy_split_at_mut.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for Unique permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/buggy_split_at_mut.rs:LL:CC\n+   |\n+LL |     let (a, b) = safe::split_at_mut(&mut array, 0);\n+   |          ^\n+   |          |\n+   |          trying to reborrow <TAG> for Unique permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |          this error occurs as part of a reborrow at ALLOC[0x0..0x10]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x10]\n+  --> $DIR/buggy_split_at_mut.rs:LL:CC\n+   |\n+LL |             (from_raw_parts_mut(ptr, len - mid), // BUG: should be \"mid\" instead of \"len - mid\"\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x10]\n+  --> $DIR/buggy_split_at_mut.rs:LL:CC\n+   |\n+LL |             from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/buggy_split_at_mut.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "593419fe9b377fd350b53213b38cd0fe556fcb3a", "filename": "tests/compile-fail/stacked_borrows/deallocate_against_barrier1.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,34 @@\n+error: Undefined Behavior: deallocating while item is protected: [Unique for <TAG> (call ID)]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+           \n+   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))` at rustc_src/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::mem::drop::<std::boxed::Box<i32>>` at rustc_src/src/mem/mod.rs:LL:CC\n+note: inside closure at $DIR/deallocate_against_barrier1.rs:LL:CC\n+  --> $DIR/deallocate_against_barrier1.rs:LL:CC\n+   |\n+LL |         drop(unsafe { Box::from_raw(raw) });\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `<[closure@$DIR/deallocate_against_barrier1.rs:LL:CC: 12:6] as std::ops::FnOnce<(&mut i32,)>>::call_once - shim` at rustc_src/src/ops/function.rs:LL:CC\n+note: inside `inner` at $DIR/deallocate_against_barrier1.rs:LL:CC\n+  --> $DIR/deallocate_against_barrier1.rs:LL:CC\n+   |\n+LL |     f(x)\n+   |     ^^^^\n+note: inside `main` at $DIR/deallocate_against_barrier1.rs:LL:CC\n+  --> $DIR/deallocate_against_barrier1.rs:LL:CC\n+   |\n+LL | /     inner(Box::leak(Box::new(0)), |x| {\n+LL | |         let raw = x as *mut _;\n+LL | |         drop(unsafe { Box::from_raw(raw) });\n+LL | |     });\n+   | |______^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f6734db71588017e4a428fa86e0384b3e883a724", "filename": "tests/compile-fail/stacked_borrows/deallocate_against_barrier2.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fdeallocate_against_barrier2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,34 @@\n+error: Undefined Behavior: deallocating while item is protected: [SharedReadWrite for <TAG> (call ID)]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+           \n+   = note: inside `std::alloc::dealloc` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `alloc::alloc::box_free::<std::cell::Cell<i32>, std::alloc::Global>` at rustc_src/src/alloc.rs:LL:CC\n+   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<std::cell::Cell<i32>>> - shim(Some(std::boxed::Box<std::cell::Cell<i32>>))` at rustc_src/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::mem::drop::<std::boxed::Box<std::cell::Cell<i32>>>` at rustc_src/src/mem/mod.rs:LL:CC\n+note: inside closure at $DIR/deallocate_against_barrier2.rs:LL:CC\n+  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n+   |\n+LL |         drop(unsafe { Box::from_raw(raw) });\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `<[closure@$DIR/deallocate_against_barrier2.rs:LL:CC: 16:6] as std::ops::FnOnce<(&std::cell::Cell<i32>,)>>::call_once - shim` at rustc_src/src/ops/function.rs:LL:CC\n+note: inside `inner` at $DIR/deallocate_against_barrier2.rs:LL:CC\n+  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n+   |\n+LL |     f(x)\n+   |     ^^^^\n+note: inside `main` at $DIR/deallocate_against_barrier2.rs:LL:CC\n+  --> $DIR/deallocate_against_barrier2.rs:LL:CC\n+   |\n+LL | /     inner(Box::leak(Box::new(Cell::new(0))), |x| {\n+LL | |         let raw = x as *const _ as *mut Cell<i32>;\n+LL | |         drop(unsafe { Box::from_raw(raw) });\n+LL | |     });\n+   | |______^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "ca3147e6221ecf3018552b2ad7b1e208817d0e9d", "filename": "tests/compile-fail/stacked_borrows/illegal_read1.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_read1.rs:LL:CC\n+   |\n+LL |     let _val = *xref; // ...but any use of raw will invalidate our ref.\n+   |                ^^^^^\n+   |                |\n+   |                attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/illegal_read1.rs:LL:CC\n+   |\n+LL |     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still ok...\n+   |                         ^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/illegal_read1.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { *xraw };\n+   |                         ^^^^^\n+   = note: inside `main` at $DIR/illegal_read1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b6343ddd30b6439863bcd2996d3ad09152211e11", "filename": "tests/compile-fail/stacked_borrows/illegal_read2.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_read2.rs:LL:CC\n+   |\n+LL |     let _val = *xref; // ...but any use of raw will invalidate our ref.\n+   |                ^^^^^\n+   |                |\n+   |                attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/illegal_read2.rs:LL:CC\n+   |\n+LL |     let xref = unsafe { &mut *xraw }; // derived from raw, so using raw is still ok...\n+   |                         ^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/illegal_read2.rs:LL:CC\n+   |\n+LL |     let shr = unsafe { &*xraw };\n+   |                        ^^^^^^\n+   = note: inside `main` at $DIR/illegal_read2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "ab26696a765c6584cda95125a7534d4a88545f9a", "filename": "tests/compile-fail/stacked_borrows/illegal_read3.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read3.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_read3.rs:LL:CC\n+   |\n+LL |     let _val = *xref2;\n+   |                ^^^^^^\n+   |                |\n+   |                attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/illegal_read3.rs:LL:CC\n+   |\n+LL |     let xref2 = &mut *xref1;\n+   |                 ^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/illegal_read3.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { *xref1.to };\n+   |                         ^^^^^^^^^\n+   = note: inside `main` at $DIR/illegal_read3.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "968c31ba23af7654fbb86c2a761963d56ce0fa07", "filename": "tests/compile-fail/stacked_borrows/illegal_read4.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read4.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_read4.rs:LL:CC\n+   |\n+LL |     let _illegal = *xref2;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                    this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/illegal_read4.rs:LL:CC\n+   |\n+LL |     let xref2 = unsafe { &mut *xraw };\n+   |                          ^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/illegal_read4.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { *xraw }; // use the raw again, this invalidates xref2 *even* with the special read except for uniq refs\n+   |                         ^^^^^\n+   = note: inside `main` at $DIR/illegal_read4.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "58f506251de2cb215b7b384ed45d9e2baac58894", "filename": "tests/compile-fail/stacked_borrows/illegal_read5.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,5 +1,6 @@\n // We *can* have aliasing &RefCell<T> and &mut T, but we cannot read through the former.\n // Else we couldn't optimize based on the assumption that `xref` below is truly unique.\n+// normalize-stderr-test: \"0x[0-9a-fA-F]+\" -> \"$$HEX\"\n \n use std::cell::RefCell;\n use std::{mem, ptr};"}, {"sha": "df6f0a1c6886215e02f32d574f89b8fc04fe5b56", "filename": "tests/compile-fail/stacked_borrows/illegal_read5.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read5.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[$HEX], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_read5.rs:LL:CC\n+   |\n+LL |     let _val = *xref; // the mutable one is dead and gone\n+   |                ^^^^^\n+   |                |\n+   |                attempting a read access using <TAG> at ALLOC[$HEX], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of an access at ALLOC[$HEX..$HEX]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [$HEX..$HEX]\n+  --> $DIR/illegal_read5.rs:LL:CC\n+   |\n+LL |     let xref: &mut i32 = &mut *refmut;\n+   |                          ^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [$HEX..$HEX]\n+  --> $DIR/illegal_read5.rs:LL:CC\n+   |\n+LL |     mem::forget(unsafe { ptr::read(xshr) }); // but after reading through the shared ref\n+   |                          ^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/illegal_read5.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "c2be5bb370c5aca37ead2b819e5230acfc700e42", "filename": "tests/compile-fail/stacked_borrows/illegal_read6.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read6.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_read6.rs:LL:CC\n+   |\n+LL |     let _val = *raw;\n+   |                ^^^^\n+   |                |\n+   |                attempting a read access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: tag was most recently created at offsets [0x0..0x4]\n+  --> $DIR/illegal_read6.rs:LL:CC\n+   |\n+LL |     let raw = x as *mut _;\n+   |               ^\n+help: tag was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/illegal_read6.rs:LL:CC\n+   |\n+LL |     let x = &mut *x; // kill `raw`\n+   |             ^^^^^^^\n+   = note: inside `main` at $DIR/illegal_read6.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "921d8872b70b88868cfd8d2f291e693b2f93966b", "filename": "tests/compile-fail/stacked_borrows/illegal_read7.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read7.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_read7.rs:LL:CC\n+   |\n+LL |     let _val = *x.get_mut();\n+   |                 ^^^^^^^^^^^\n+   |                 |\n+   |                 trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                 this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/illegal_read7.rs:LL:CC\n+   |\n+LL |     let x = &mut *raw;\n+   |             ^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/illegal_read7.rs:LL:CC\n+   |\n+LL |     let _val = ptr::read(raw);\n+   |                ^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/illegal_read7.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "6c6168032b246afa3a1b68da8c3d731ed54c0102", "filename": "tests/compile-fail/stacked_borrows/illegal_read8.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read8.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_read8.rs:LL:CC\n+   |\n+LL |     let _fail = *y1;\n+   |                 ^^^\n+   |                 |\n+   |                 attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                 this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/illegal_read8.rs:LL:CC\n+   |\n+LL |     let y1: &i32 = mem::transmute(&*x); // launder lifetimes\n+   |                    ^^^^^^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/illegal_read8.rs:LL:CC\n+   |\n+LL |     *y2 += 1;\n+   |     ^^^^^^^^\n+   = note: inside `main` at $DIR/illegal_read8.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "08fa05ff9f1ffcfddab1689461478f6d9c308bed", "filename": "tests/compile-fail/stacked_borrows/illegal_write1.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_write1.rs:LL:CC\n+   |\n+LL |     let _x = *xref;\n+   |              ^^^^^\n+   |              |\n+   |              attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |              this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/illegal_write1.rs:LL:CC\n+   |\n+LL |     let xref = &*target;\n+   |                ^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/illegal_write1.rs:LL:CC\n+   |\n+LL |         unsafe { *x = 42; } // invalidates shared ref, activates raw\n+   |                  ^^^^^^^\n+   = note: inside `main` at $DIR/illegal_write1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "13f41eea915390a7bdaec50905287ae2d8495257", "filename": "tests/compile-fail/stacked_borrows/illegal_write2.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_write2.rs:LL:CC\n+   |\n+LL |     unsafe { *target2 = 13; }\n+   |              ^^^^^^^^^^^^^\n+   |              |\n+   |              attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |              this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: tag was most recently created at offsets [0x0..0x4]\n+  --> $DIR/illegal_write2.rs:LL:CC\n+   |\n+LL |     let target2 = target as *mut _;\n+   |                   ^^^^^^\n+help: tag was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/illegal_write2.rs:LL:CC\n+   |\n+LL |     drop(&mut *target); // reborrow\n+   |          ^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/illegal_write2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b37caee5ef20371eefbf7d038c18b32914cdeffd", "filename": "tests/compile-fail/stacked_borrows/illegal_write3.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,22 @@\n+error: Undefined Behavior: attempting a write access using <untagged> at ALLOC[0x0], but that tag only grants SharedReadOnly permission for this location\n+  --> $DIR/illegal_write3.rs:LL:CC\n+   |\n+LL |     unsafe { *ptr = 42; }\n+   |              ^^^^^^^^^\n+   |              |\n+   |              attempting a write access using <untagged> at ALLOC[0x0], but that tag only grants SharedReadOnly permission for this location\n+   |              this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: tag was most recently created at offsets [0x0..0x4]\n+  --> $DIR/illegal_write3.rs:LL:CC\n+   |\n+LL |     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n+   |               ^^^^^\n+   = note: inside `main` at $DIR/illegal_write3.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "5c0b4ec868e2e88c2a500149f9be2cba643f6b9a", "filename": "tests/compile-fail/stacked_borrows/illegal_write4.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_write4.rs:LL:CC\n+   |\n+LL |     let _val = *reference;\n+   |                ^^^^^^^^^^\n+   |                |\n+   |                attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/illegal_write4.rs:LL:CC\n+   |\n+LL |     let reference = unsafe { &*raw }; // freeze\n+   |                              ^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/illegal_write4.rs:LL:CC\n+   |\n+LL |     let _mut_ref: &mut i32 = unsafe { mem::transmute(ptr) }; // &mut, with raw tag\n+   |                                       ^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/illegal_write4.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f9a4dcfd8d21d5ce6575401e1f391de1d336d511", "filename": "tests/compile-fail/stacked_borrows/illegal_write5.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write5.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/illegal_write5.rs:LL:CC\n+   |\n+LL |     let _val = *xref;\n+   |                ^^^^^\n+   |                |\n+   |                attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/illegal_write5.rs:LL:CC\n+   |\n+LL |     let xref = unsafe { &mut *xraw };\n+   |                         ^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/illegal_write5.rs:LL:CC\n+   |\n+LL |     unsafe { *xraw = 15 };\n+   |              ^^^^^^^^^^\n+   = note: inside `main` at $DIR/illegal_write5.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "5861aeefaf46ca9c625696b9531fb58b24ae1149", "filename": "tests/compile-fail/stacked_borrows/illegal_write6.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write6.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,39 @@\n+error: Undefined Behavior: not granting access to tag <untagged> because incompatible item is protected: [Unique for <TAG> (call ID)]\n+  --> $DIR/illegal_write6.rs:LL:CC\n+   |\n+LL |     unsafe { *y = 2; }\n+   |              ^^^^^^ not granting access to tag <untagged> because incompatible item is protected: [Unique for <TAG> (call ID)]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: tag was most recently created at offsets [0x0..0x4]\n+  --> $DIR/illegal_write6.rs:LL:CC\n+   |\n+LL |     let p = x as *mut u32;\n+   |             ^\n+help: <TAG> was protected due to a tag which was created here\n+  --> $DIR/illegal_write6.rs:LL:CC\n+   |\n+LL |     foo(x, p);\n+   |         ^\n+help: this protector is live for this call\n+  --> $DIR/illegal_write6.rs:LL:CC\n+   |\n+LL | / fn foo(a: &mut u32, y: *mut u32) -> u32 {\n+LL | |     *a = 1;\n+LL | |     let _b = &*a;\n+LL | |     unsafe { *y = 2; }\n+LL | |     return *a;\n+LL | | }\n+   | |_^\n+   = note: inside `foo` at $DIR/illegal_write6.rs:LL:CC\n+note: inside `main` at $DIR/illegal_write6.rs:LL:CC\n+  --> $DIR/illegal_write6.rs:LL:CC\n+   |\n+LL |     foo(x, p);\n+   |     ^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "af4163c93605eafcc7ea81e805232c414de4514c", "filename": "tests/compile-fail/stacked_borrows/interior_mut1.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/interior_mut1.rs:LL:CC\n+   |\n+LL |     let _val = *inner_shr.get();\n+   |                 ^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                 this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/interior_mut1.rs:LL:CC\n+   |\n+LL |     let inner_shr = &*inner_uniq; // adds a SharedReadWrite\n+   |                     ^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/interior_mut1.rs:LL:CC\n+   |\n+LL |     *c.get() = UnsafeCell::new(1); // invalidates inner_shr\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/interior_mut1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "5a4ddf381e715fc648cce97347b1424a67e853f1", "filename": "tests/compile-fail/stacked_borrows/interior_mut2.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Finterior_mut2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/interior_mut2.rs:LL:CC\n+   |\n+LL |     let _val = *inner_shr.get();\n+   |                 ^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                 this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/interior_mut2.rs:LL:CC\n+   |\n+LL |     let inner_shr = &*inner_uniq;\n+   |                     ^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/interior_mut2.rs:LL:CC\n+   |\n+LL |     *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/interior_mut2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "47f7a06a858516e775d1554ec6dee837bf9c5708", "filename": "tests/compile-fail/stacked_borrows/invalidate_against_barrier1.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Finvalidate_against_barrier1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Finvalidate_against_barrier1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Finvalidate_against_barrier1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,39 @@\n+error: Undefined Behavior: not granting access to tag <untagged> because incompatible item is protected: [Unique for <TAG> (call ID)]\n+  --> $DIR/invalidate_against_barrier1.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { *x };\n+   |                         ^^ not granting access to tag <untagged> because incompatible item is protected: [Unique for <TAG> (call ID)]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: tag was most recently created at offsets [0x0..0x4]\n+  --> $DIR/invalidate_against_barrier1.rs:LL:CC\n+   |\n+LL |     let xraw = &mut x as *mut _;\n+   |                ^^^^^^\n+help: <TAG> was protected due to a tag which was created here\n+  --> $DIR/invalidate_against_barrier1.rs:LL:CC\n+   |\n+LL |     inner(xraw, xref);\n+   |                 ^^^^\n+help: this protector is live for this call\n+  --> $DIR/invalidate_against_barrier1.rs:LL:CC\n+   |\n+LL | / fn inner(x: *mut i32, _y: &mut i32) {\n+LL | |     // If `x` and `y` alias, retagging is fine with this... but we really\n+LL | |     // shouldn't be allowed to use `x` at all because `y` was assumed to be\n+LL | |     // unique for the duration of this call.\n+LL | |     let _val = unsafe { *x };\n+LL | | }\n+   | |_^\n+   = note: inside `inner` at $DIR/invalidate_against_barrier1.rs:LL:CC\n+note: inside `main` at $DIR/invalidate_against_barrier1.rs:LL:CC\n+  --> $DIR/invalidate_against_barrier1.rs:LL:CC\n+   |\n+LL |     inner(xraw, xref);\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "fa2e6aa05a2b8d6b95bc10c74c413392cfc58298", "filename": "tests/compile-fail/stacked_borrows/invalidate_against_barrier2.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Finvalidate_against_barrier2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Finvalidate_against_barrier2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Finvalidate_against_barrier2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,39 @@\n+error: Undefined Behavior: not granting access to tag <untagged> because incompatible item is protected: [SharedReadOnly for <TAG> (call ID)]\n+  --> $DIR/invalidate_against_barrier2.rs:LL:CC\n+   |\n+LL |     unsafe { *x = 0 };\n+   |              ^^^^^^ not granting access to tag <untagged> because incompatible item is protected: [SharedReadOnly for <TAG> (call ID)]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: tag was most recently created at offsets [0x0..0x4]\n+  --> $DIR/invalidate_against_barrier2.rs:LL:CC\n+   |\n+LL |     let xraw = &mut x as *mut _;\n+   |                ^^^^^^\n+help: <TAG> was protected due to a tag which was created here\n+  --> $DIR/invalidate_against_barrier2.rs:LL:CC\n+   |\n+LL |     inner(xraw, xref);\n+   |                 ^^^^\n+help: this protector is live for this call\n+  --> $DIR/invalidate_against_barrier2.rs:LL:CC\n+   |\n+LL | / fn inner(x: *mut i32, _y: &i32) {\n+LL | |     // If `x` and `y` alias, retagging is fine with this... but we really\n+LL | |     // shouldn't be allowed to write to `x` at all because `y` was assumed to be\n+LL | |     // immutable for the duration of this call.\n+LL | |     unsafe { *x = 0 };\n+LL | | }\n+   | |_^\n+   = note: inside `inner` at $DIR/invalidate_against_barrier2.rs:LL:CC\n+note: inside `main` at $DIR/invalidate_against_barrier2.rs:LL:CC\n+  --> $DIR/invalidate_against_barrier2.rs:LL:CC\n+   |\n+LL |     inner(xraw, xref);\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "70c774818bcecb5eae434f00b91730f21aef3aae", "filename": "tests/compile-fail/stacked_borrows/issue-miri-1050-1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+error: Undefined Behavior: ALLOC has size 2, so pointer to 4 bytes starting at offset 0 is out-of-bounds\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::boxed::Box::<u32>::from_raw_in` at rustc_src/src/boxed.rs:LL:CC\n+   = note: inside `std::boxed::Box::<u32>::from_raw` at rustc_src/src/boxed.rs:LL:CC\n+note: inside `main` at $DIR/issue-miri-1050-1.rs:LL:CC\n+  --> $DIR/issue-miri-1050-1.rs:LL:CC\n+   |\n+LL |     Box::from_raw(ptr as *mut u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "8f0b47501604610cfcd02dee300867a734956c2d", "filename": "tests/compile-fail/stacked_borrows/issue-miri-1050-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: 0x4 is not a valid pointer\n+// error-pattern: is not a valid pointer\n use std::ptr::NonNull;\n \n fn main() { unsafe {"}, {"sha": "579f728b2b07e71fd716d77bca921dae0f81b2b1", "filename": "tests/compile-fail/stacked_borrows/issue-miri-1050-2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,17 @@\n+error: Undefined Behavior: 0x4 is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `std::boxed::Box::<i32>::from_raw_in` at rustc_src/src/boxed.rs:LL:CC\n+   = note: inside `std::boxed::Box::<i32>::from_raw` at rustc_src/src/boxed.rs:LL:CC\n+note: inside `main` at $DIR/issue-miri-1050-2.rs:LL:CC\n+  --> $DIR/issue-miri-1050-2.rs:LL:CC\n+   |\n+LL |     Box::from_raw(ptr.as_ptr());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "00eda4fe5a316bb4a23bc4e88a6bc0c20bc89e68", "filename": "tests/compile-fail/stacked_borrows/load_invalid_mut.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_mut.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for Unique permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/load_invalid_mut.rs:LL:CC\n+   |\n+LL |     let _val = *xref_in_mem;\n+   |                ^^^^^^^^^^^^\n+   |                |\n+   |                trying to reborrow <TAG> for Unique permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/load_invalid_mut.rs:LL:CC\n+   |\n+LL |     let xref_in_mem = Box::new(xref);\n+   |                       ^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/load_invalid_mut.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { *xraw }; // invalidate xref\n+   |                         ^^^^^\n+   = note: inside `main` at $DIR/load_invalid_mut.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "eb61b4762f8460a9ec30909987f2690bf4c9dc69", "filename": "tests/compile-fail/stacked_borrows/load_invalid_shr.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/load_invalid_shr.rs:LL:CC\n+   |\n+LL |     let _val = *xref_in_mem;\n+   |                ^^^^^^^^^^^^\n+   |                |\n+   |                trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/load_invalid_shr.rs:LL:CC\n+   |\n+LL |     let xref_in_mem = Box::new(xref);\n+   |                       ^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/load_invalid_shr.rs:LL:CC\n+   |\n+LL |     unsafe { *xraw = 42 }; // unfreeze\n+   |              ^^^^^^^^^^\n+   = note: inside `main` at $DIR/load_invalid_shr.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "2d8ef7c1a4eb4fafd9efca3f376b7373de6b1c8b", "filename": "tests/compile-fail/stacked_borrows/mut_exclusive_violation1.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,37 @@\n+error: Undefined Behavior: attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/mut_exclusive_violation1.rs:LL:CC\n+   |\n+LL |     *LEAK = 7;\n+   |     ^^^^^^^^^\n+   |     |\n+   |     attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |     this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: tag was most recently created at offsets [0x0..0x4]\n+  --> $DIR/mut_exclusive_violation1.rs:LL:CC\n+   |\n+LL |     LEAK = x as *const _ as *mut _;\n+   |            ^\n+help: tag was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/mut_exclusive_violation1.rs:LL:CC\n+   |\n+LL |   *our = 5;\n+   |   ^^^^^^^^\n+   = note: inside `unknown_code_2` at $DIR/mut_exclusive_violation1.rs:LL:CC\n+note: inside `demo_mut_advanced_unique` at $DIR/mut_exclusive_violation1.rs:LL:CC\n+  --> $DIR/mut_exclusive_violation1.rs:LL:CC\n+   |\n+LL |   unknown_code_2();\n+   |   ^^^^^^^^^^^^^^^^\n+note: inside `main` at $DIR/mut_exclusive_violation1.rs:LL:CC\n+  --> $DIR/mut_exclusive_violation1.rs:LL:CC\n+   |\n+LL |     demo_mut_advanced_unique(&mut 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "ae0eab467bf60d7785f7503039d48891b7a62b99", "filename": "tests/compile-fail/stacked_borrows/mut_exclusive_violation2.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/mut_exclusive_violation2.rs:LL:CC\n+   |\n+LL |     let _val = *raw1;\n+   |                ^^^^^\n+   |                |\n+   |                attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/mut_exclusive_violation2.rs:LL:CC\n+   |\n+LL |     let raw1 = ptr1.as_mut();\n+   |                ^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/mut_exclusive_violation2.rs:LL:CC\n+   |\n+LL |     let _raw2 = ptr2.as_mut();\n+   |                 ^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/mut_exclusive_violation2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "1c1deac2317f3f55fdf11d6191615a81e51025ef", "filename": "tests/compile-fail/stacked_borrows/outdated_local.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Foutdated_local.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/outdated_local.rs:LL:CC\n+   |\n+LL |     assert_eq!(unsafe { *y }, 1);\n+   |                         ^^\n+   |                         |\n+   |                         attempting a read access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                         this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: tag was most recently created at offsets [0x0..0x4]\n+  --> $DIR/outdated_local.rs:LL:CC\n+   |\n+LL |     let y: *const i32 = &x;\n+   |                         ^^\n+help: tag was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/outdated_local.rs:LL:CC\n+   |\n+LL |     x = 1; // this invalidates y by reactivating the lowermost uniq borrow for this local\n+   |     ^^^^^\n+   = note: inside `main` at $DIR/outdated_local.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "280e51693a5c0970c821159c7258d171f519369b", "filename": "tests/compile-fail/stacked_borrows/pass_invalid_mut.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_mut.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/pass_invalid_mut.rs:LL:CC\n+   |\n+LL |     foo(xref);\n+   |         ^^^^\n+   |         |\n+   |         trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |         this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/pass_invalid_mut.rs:LL:CC\n+   |\n+LL |     let xref = unsafe { &mut *xraw };\n+   |                         ^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/pass_invalid_mut.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { *xraw }; // invalidate xref\n+   |                         ^^^^^\n+   = note: inside `main` at $DIR/pass_invalid_mut.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "b111832193b9cd427147ef80226b19c5ebae7f6a", "filename": "tests/compile-fail/stacked_borrows/pass_invalid_shr.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_shr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/pass_invalid_shr.rs:LL:CC\n+   |\n+LL |     foo(xref);\n+   |         ^^^^\n+   |         |\n+   |         trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |         this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/pass_invalid_shr.rs:LL:CC\n+   |\n+LL |     let xref = unsafe { &*xraw };\n+   |                         ^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/pass_invalid_shr.rs:LL:CC\n+   |\n+LL |     unsafe { *xraw = 42 }; // unfreeze\n+   |              ^^^^^^^^^^\n+   = note: inside `main` at $DIR/pass_invalid_shr.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "097de439f79df66ccb83c3c5008edcb1dc7b56e0", "filename": "tests/compile-fail/stacked_borrows/pointer_smuggling.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpointer_smuggling.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,32 @@\n+error: Undefined Behavior: attempting a read access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/pointer_smuggling.rs:LL:CC\n+   |\n+LL |     let _x = unsafe { *PTR };\n+   |                       ^^^^\n+   |                       |\n+   |                       attempting a read access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                       this error occurs as part of an access at ALLOC[0x0..0x1]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: tag was most recently created at offsets [0x0..0x1]\n+  --> $DIR/pointer_smuggling.rs:LL:CC\n+   |\n+LL |         PTR = x;\n+   |               ^\n+help: tag was later invalidated at offsets [0x0..0x1]\n+  --> $DIR/pointer_smuggling.rs:LL:CC\n+   |\n+LL |     *val = 2; // this invalidates any raw ptrs `fun1` might have created.\n+   |     ^^^^^^^^\n+   = note: inside `fun2` at $DIR/pointer_smuggling.rs:LL:CC\n+note: inside `main` at $DIR/pointer_smuggling.rs:LL:CC\n+  --> $DIR/pointer_smuggling.rs:LL:CC\n+   |\n+LL |     fun2(); // if they now use a raw ptr they break our reference\n+   |     ^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "a03d55a90486a3b219a1ca1c6a870bd29d4e78bf", "filename": "tests/compile-fail/stacked_borrows/raw_tracking.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fraw_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fraw_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fraw_tracking.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a write access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/raw_tracking.rs:LL:CC\n+   |\n+LL |     unsafe { *raw1 = 13; }\n+   |              ^^^^^^^^^^\n+   |              |\n+   |              attempting a write access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |              this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/raw_tracking.rs:LL:CC\n+   |\n+LL |     let raw1 = &mut l as *mut _;\n+   |                ^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/raw_tracking.rs:LL:CC\n+   |\n+LL |     let raw2 = &mut l as *mut _; // invalidates raw1\n+   |                ^^^^^^\n+   = note: inside `main` at $DIR/raw_tracking.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "6de657b8298088e2db7d99f1aeeaeb10a9eb9347", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,32 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for Unique permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/return_invalid_mut.rs:LL:CC\n+   |\n+LL |     ret\n+   |     ^^^\n+   |     |\n+   |     trying to reborrow <TAG> for Unique permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+   |     this error occurs as part of a reborrow at ALLOC[0x4..0x8]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x4..0x8]\n+  --> $DIR/return_invalid_mut.rs:LL:CC\n+   |\n+LL |     let ret = unsafe { &mut (*xraw).1 };\n+   |                        ^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x8]\n+  --> $DIR/return_invalid_mut.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { *xraw }; // invalidate xref\n+   |                         ^^^^^\n+   = note: inside `foo` at $DIR/return_invalid_mut.rs:LL:CC\n+note: inside `main` at $DIR/return_invalid_mut.rs:LL:CC\n+  --> $DIR/return_invalid_mut.rs:LL:CC\n+   |\n+LL |     foo(&mut (1, 2));\n+   |     ^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "8b95765dcc460236436f0b4864b886e202a2ebba", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut_option.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for Unique permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/return_invalid_mut_option.rs:LL:CC\n+   |\n+LL |         Some(_x) => {},\n+   |              ^^\n+   |              |\n+   |              trying to reborrow <TAG> for Unique permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+   |              this error occurs as part of a reborrow at ALLOC[0x4..0x8]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x4..0x8]\n+  --> $DIR/return_invalid_mut_option.rs:LL:CC\n+   |\n+LL |     let ret = Some(ret);\n+   |                    ^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x8]\n+  --> $DIR/return_invalid_mut_option.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { *xraw }; // invalidate xref\n+   |                         ^^^^^\n+   = note: inside `main` at $DIR/return_invalid_mut_option.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f9e6d65c78e660fbe7ba871b7c7d1d1c3eb2eb03", "filename": "tests/compile-fail/stacked_borrows/return_invalid_mut_tuple.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for Unique permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/return_invalid_mut_tuple.rs:LL:CC\n+   |\n+LL |     foo(&mut (1, 2)).0;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     trying to reborrow <TAG> for Unique permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+   |     this error occurs as part of a reborrow at ALLOC[0x4..0x8]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x4..0x8]\n+  --> $DIR/return_invalid_mut_tuple.rs:LL:CC\n+   |\n+LL |     let ret = (unsafe { &mut (*xraw).1 },);\n+   |                         ^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x8]\n+  --> $DIR/return_invalid_mut_tuple.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { *xraw }; // invalidate xref\n+   |                         ^^^^^\n+   = note: inside `main` at $DIR/return_invalid_mut_tuple.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "20dcb8e93c2cf62ef3df5fc8ae97ba5708b9edb6", "filename": "tests/compile-fail/stacked_borrows/return_invalid_shr.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,32 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/return_invalid_shr.rs:LL:CC\n+   |\n+LL |     ret\n+   |     ^^^\n+   |     |\n+   |     trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+   |     this error occurs as part of a reborrow at ALLOC[0x4..0x8]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x4..0x8]\n+  --> $DIR/return_invalid_shr.rs:LL:CC\n+   |\n+LL |     let ret = unsafe { &(*xraw).1 };\n+   |                        ^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x8]\n+  --> $DIR/return_invalid_shr.rs:LL:CC\n+   |\n+LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n+   |              ^^^^^^^^^^^^^^^^\n+   = note: inside `foo` at $DIR/return_invalid_shr.rs:LL:CC\n+note: inside `main` at $DIR/return_invalid_shr.rs:LL:CC\n+  --> $DIR/return_invalid_shr.rs:LL:CC\n+   |\n+LL |     foo(&mut (1, 2));\n+   |     ^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "0c41a10a3f97c113c8ab1db6c4c9183cd3b6ac7f", "filename": "tests/compile-fail/stacked_borrows/return_invalid_shr_option.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/return_invalid_shr_option.rs:LL:CC\n+   |\n+LL |         Some(_x) => {},\n+   |              ^^\n+   |              |\n+   |              trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+   |              this error occurs as part of a reborrow at ALLOC[0x4..0x8]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x4..0x8]\n+  --> $DIR/return_invalid_shr_option.rs:LL:CC\n+   |\n+LL |     let ret = Some(unsafe { &(*xraw).1 });\n+   |                             ^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x8]\n+  --> $DIR/return_invalid_shr_option.rs:LL:CC\n+   |\n+LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n+   |              ^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/return_invalid_shr_option.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "9e7be7ad01388fee884e66e47c6fff13afd95e60", "filename": "tests/compile-fail/stacked_borrows/return_invalid_shr_tuple.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/return_invalid_shr_tuple.rs:LL:CC\n+   |\n+LL |     foo(&mut (1, 2)).0;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     trying to reborrow <TAG> for SharedReadOnly permission at ALLOC[0x4], but that tag does not exist in the borrow stack for this location\n+   |     this error occurs as part of a reborrow at ALLOC[0x4..0x8]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x4..0x8]\n+  --> $DIR/return_invalid_shr_tuple.rs:LL:CC\n+   |\n+LL |     let ret = (unsafe { &(*xraw).1 },);\n+   |                         ^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x8]\n+  --> $DIR/return_invalid_shr_tuple.rs:LL:CC\n+   |\n+LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n+   |              ^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/return_invalid_shr_tuple.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "576a21bbf6d41bd1d4fcea89015125a8b23a3b53", "filename": "tests/compile-fail/stacked_borrows/shared_rw_borrows_are_weak1.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n+   |\n+LL |     y.get_mut();\n+   |     ^^^^^^^^^^^\n+   |     |\n+   |     trying to reborrow <TAG> for SharedReadWrite permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |     this error occurs as part of a reborrow at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n+   |\n+LL |     let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n+   |\n+LL |     shr_rw.set(1);\n+   |     ^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "d4aef74dff6bae615d8f4dada6dc4a86de38ecf6", "filename": "tests/compile-fail/stacked_borrows/shared_rw_borrows_are_weak2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -1,6 +1,7 @@\n // We want to test that granting a SharedReadWrite will be added\n // *below* an already granted SharedReadWrite -- so writing to\n // the SharedReadWrite will invalidate the SharedReadWrite.\n+// normalize-stderr-test: \"0x[0-9a-fA-F]+\" -> \"$$HEX\"\n \n use std::mem;\n use std::cell::RefCell;"}, {"sha": "e2159ed5892f81dc22e1eb0fd519e9dab88e4358", "filename": "tests/compile-fail/stacked_borrows/shared_rw_borrows_are_weak2.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,27 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[$HEX], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n+   |\n+LL |     let _val = *y;\n+   |                ^^\n+   |                |\n+   |                attempting a read access using <TAG> at ALLOC[$HEX], but that tag does not exist in the borrow stack for this location\n+   |                this error occurs as part of an access at ALLOC[$HEX..$HEX]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [$HEX..$HEX]\n+  --> $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n+   |\n+LL |     let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [$HEX..$HEX]\n+  --> $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n+   |\n+LL |     shr_rw.replace(1);\n+   |     ^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "689ad1c6b6684ccf73f513132be7798232711224", "filename": "tests/compile-fail/stacked_borrows/shr_frozen_violation1.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,32 @@\n+error: Undefined Behavior: attempting a write access using <untagged> at ALLOC[0x0], but that tag only grants SharedReadOnly permission for this location\n+  --> $DIR/shr_frozen_violation1.rs:LL:CC\n+   |\n+LL |     unsafe { *(x as *const i32 as *mut i32) = 7; }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              attempting a write access using <untagged> at ALLOC[0x0], but that tag only grants SharedReadOnly permission for this location\n+   |              this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: tag was most recently created at offsets [0x0..0x4]\n+  --> $DIR/shr_frozen_violation1.rs:LL:CC\n+   |\n+LL |     unsafe { *(x as *const i32 as *mut i32) = 7; }\n+   |                ^\n+   = note: inside `unknown_code` at $DIR/shr_frozen_violation1.rs:LL:CC\n+note: inside `foo` at $DIR/shr_frozen_violation1.rs:LL:CC\n+  --> $DIR/shr_frozen_violation1.rs:LL:CC\n+   |\n+LL |   unknown_code(&*x);\n+   |   ^^^^^^^^^^^^^^^^^\n+note: inside `main` at $DIR/shr_frozen_violation1.rs:LL:CC\n+  --> $DIR/shr_frozen_violation1.rs:LL:CC\n+   |\n+LL |     println!(\"{}\", foo(&mut 0));\n+   |                    ^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "72e2ed9381240964e6a4c53af39da8abf7141f37", "filename": "tests/compile-fail/stacked_borrows/static_memory_modification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -3,6 +3,6 @@ static X: usize = 5;\n #[allow(mutable_transmutes)]\n fn main() {\n     let _x = unsafe {\n-        std::mem::transmute::<&usize, &mut usize>(&X) //~ ERROR writing to alloc1 which is read-only\n+        std::mem::transmute::<&usize, &mut usize>(&X) //~ ERROR writing to ALLOC which is read-only\n     };\n }"}, {"sha": "091eb29f64d7a69dcb58e45d061bce0c7fdd31b8", "filename": "tests/compile-fail/stacked_borrows/static_memory_modification.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,15 @@\n+error: Undefined Behavior: writing to ALLOC which is read-only\n+  --> $DIR/static_memory_modification.rs:LL:CC\n+   |\n+LL |         std::mem::transmute::<&usize, &mut usize>(&X)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ writing to ALLOC which is read-only\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at $DIR/static_memory_modification.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "f2ea4f919c6760c4174ecdba43454acd2782e2e4", "filename": "tests/compile-fail/stacked_borrows/transmute-is-no-escape.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1756c3ddd06f8d82fa20fb9d738708f84382a33/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr?ref=f1756c3ddd06f8d82fa20fb9d738708f84382a33", "patch": "@@ -0,0 +1,18 @@\n+error: Undefined Behavior: attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/transmute-is-no-escape.rs:LL:CC\n+   |\n+LL |     unsafe { *raw = 13; }\n+   |              ^^^^^^^^^\n+   |              |\n+   |              attempting a write access using <untagged> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |              this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+           \n+   = note: inside `main` at $DIR/transmute-is-no-escape.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}