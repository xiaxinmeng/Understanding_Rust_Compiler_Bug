{"sha": "0b508846ec08a5020f4697008d6c6cb3be37f063", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNTA4ODQ2ZWMwOGE1MDIwZjQ2OTcwMDhkNmM2Y2IzYmUzN2YwNjM=", "commit": {"author": {"name": "loomaclin", "email": "loo.maclin@protonmail.com", "date": "2017-11-18T07:27:24Z"}, "committer": {"name": "loomaclin", "email": "loo.maclin@protonmail.com", "date": "2017-11-18T07:27:24Z"}, "message": "Remove return_ty from Mir\nhttps://github.com/rust-lang/rust/issues/46001", "tree": {"sha": "1bc7ce1e783917efc29904b041d39b230be2337a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bc7ce1e783917efc29904b041d39b230be2337a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b508846ec08a5020f4697008d6c6cb3be37f063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b508846ec08a5020f4697008d6c6cb3be37f063", "html_url": "https://github.com/rust-lang/rust/commit/0b508846ec08a5020f4697008d6c6cb3be37f063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b508846ec08a5020f4697008d6c6cb3be37f063/comments", "author": {"login": "LooMaclin", "id": 10957765, "node_id": "MDQ6VXNlcjEwOTU3NzY1", "avatar_url": "https://avatars.githubusercontent.com/u/10957765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LooMaclin", "html_url": "https://github.com/LooMaclin", "followers_url": "https://api.github.com/users/LooMaclin/followers", "following_url": "https://api.github.com/users/LooMaclin/following{/other_user}", "gists_url": "https://api.github.com/users/LooMaclin/gists{/gist_id}", "starred_url": "https://api.github.com/users/LooMaclin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LooMaclin/subscriptions", "organizations_url": "https://api.github.com/users/LooMaclin/orgs", "repos_url": "https://api.github.com/users/LooMaclin/repos", "events_url": "https://api.github.com/users/LooMaclin/events{/privacy}", "received_events_url": "https://api.github.com/users/LooMaclin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LooMaclin", "id": 10957765, "node_id": "MDQ6VXNlcjEwOTU3NzY1", "avatar_url": "https://avatars.githubusercontent.com/u/10957765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LooMaclin", "html_url": "https://github.com/LooMaclin", "followers_url": "https://api.github.com/users/LooMaclin/followers", "following_url": "https://api.github.com/users/LooMaclin/following{/other_user}", "gists_url": "https://api.github.com/users/LooMaclin/gists{/gist_id}", "starred_url": "https://api.github.com/users/LooMaclin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LooMaclin/subscriptions", "organizations_url": "https://api.github.com/users/LooMaclin/orgs", "repos_url": "https://api.github.com/users/LooMaclin/repos", "events_url": "https://api.github.com/users/LooMaclin/events{/privacy}", "received_events_url": "https://api.github.com/users/LooMaclin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aabfed5e0c84211005c1cb2ecec2206a574a5146", "url": "https://api.github.com/repos/rust-lang/rust/commits/aabfed5e0c84211005c1cb2ecec2206a574a5146", "html_url": "https://github.com/rust-lang/rust/commit/aabfed5e0c84211005c1cb2ecec2206a574a5146"}], "stats": {"total": 51, "additions": 19, "deletions": 32}, "files": [{"sha": "355fb570c000bb6944c19a9ad3bb7b3f62392402", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=0b508846ec08a5020f4697008d6c6cb3be37f063", "patch": "@@ -82,9 +82,6 @@ pub struct Mir<'tcx> {\n     /// in scope, but a separate set of locals.\n     pub promoted: IndexVec<Promoted, Mir<'tcx>>,\n \n-    /// Return type of the function.\n-    pub return_ty: Ty<'tcx>,\n-\n     /// Yield type of the function, if it is a generator.\n     pub yield_ty: Option<Ty<'tcx>>,\n \n@@ -135,7 +132,6 @@ impl<'tcx> Mir<'tcx> {\n                visibility_scope_info: ClearOnDecode<IndexVec<VisibilityScope,\n                                                              VisibilityScopeInfo>>,\n                promoted: IndexVec<Promoted, Mir<'tcx>>,\n-               return_ty: Ty<'tcx>,\n                yield_ty: Option<Ty<'tcx>>,\n                local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n                arg_count: usize,\n@@ -145,14 +141,12 @@ impl<'tcx> Mir<'tcx> {\n         // We need `arg_count` locals, and one for the return pointer\n         assert!(local_decls.len() >= arg_count + 1,\n             \"expected at least {} locals, got {}\", arg_count + 1, local_decls.len());\n-        assert_eq!(local_decls[RETURN_POINTER].ty, return_ty);\n \n         Mir {\n             basic_blocks,\n             visibility_scopes,\n             visibility_scope_info,\n             promoted,\n-            return_ty,\n             yield_ty,\n             generator_drop: None,\n             generator_layout: None,\n@@ -273,6 +267,11 @@ impl<'tcx> Mir<'tcx> {\n             &block.terminator().source_info\n         }\n     }\n+\n+    /// Return the return type, it always return first element from `local_decls` array\n+    pub fn return_ty(&self) -> Ty<'tcx> {\n+        self.local_decls[RETURN_POINTER].ty\n+    }\n }\n \n #[derive(Clone, Debug)]\n@@ -299,7 +298,6 @@ impl_stable_hash_for!(struct Mir<'tcx> {\n     visibility_scopes,\n     visibility_scope_info,\n     promoted,\n-    return_ty,\n     yield_ty,\n     generator_drop,\n     generator_layout,\n@@ -1744,7 +1742,6 @@ impl<'tcx> TypeFoldable<'tcx> for Mir<'tcx> {\n             visibility_scopes: self.visibility_scopes.clone(),\n             visibility_scope_info: self.visibility_scope_info.clone(),\n             promoted: self.promoted.fold_with(folder),\n-            return_ty: self.return_ty.fold_with(folder),\n             yield_ty: self.yield_ty.fold_with(folder),\n             generator_drop: self.generator_drop.fold_with(folder),\n             generator_layout: self.generator_layout.fold_with(folder),\n@@ -1763,7 +1760,6 @@ impl<'tcx> TypeFoldable<'tcx> for Mir<'tcx> {\n         self.generator_layout.visit_with(visitor) ||\n         self.yield_ty.visit_with(visitor) ||\n         self.promoted.visit_with(visitor)     ||\n-        self.return_ty.visit_with(visitor)    ||\n         self.local_decls.visit_with(visitor)\n     }\n }"}, {"sha": "5f2f5b79cc698580338401d5664d12e2367296ad", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=0b508846ec08a5020f4697008d6c6cb3be37f063", "patch": "@@ -292,7 +292,7 @@ macro_rules! make_mir_visitor {\n                     self.visit_visibility_scope_data(scope);\n                 }\n \n-                self.visit_ty(&$($mutability)* mir.return_ty, TyContext::ReturnTy(SourceInfo {\n+                self.visit_ty(&$($mutability)* mir.return_ty(), TyContext::ReturnTy(SourceInfo {\n                     span: mir.span,\n                     scope: ARGUMENT_VISIBILITY_SCOPE,\n                 }));"}, {"sha": "287d10831893a7aeee5dc19678665b8509233580", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=0b508846ec08a5020f4697008d6c6cb3be37f063", "patch": "@@ -444,7 +444,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         }).collect()\n     });\n \n-    let mut mir = builder.finish(upvar_decls, return_ty, yield_ty);\n+    let mut mir = builder.finish(upvar_decls, yield_ty);\n     mir.spread_arg = spread_arg;\n     mir\n }\n@@ -469,7 +469,7 @@ fn construct_const<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n     // Constants can't `return` so a return block should not be created.\n     assert_eq!(builder.cached_return_block, None);\n \n-    builder.finish(vec![], ty, None)\n+    builder.finish(vec![], None)\n }\n \n fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n@@ -481,7 +481,7 @@ fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n     let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty);\n     let source_info = builder.source_info(span);\n     builder.cfg.terminate(START_BLOCK, source_info, TerminatorKind::Unreachable);\n-    builder.finish(vec![], ty, None)\n+    builder.finish(vec![], None)\n }\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n@@ -524,7 +524,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn finish(self,\n               upvar_decls: Vec<UpvarDecl>,\n-              return_ty: Ty<'tcx>,\n               yield_ty: Option<Ty<'tcx>>)\n               -> Mir<'tcx> {\n         for (index, block) in self.cfg.basic_blocks.iter().enumerate() {\n@@ -537,7 +536,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                  self.visibility_scopes,\n                  ClearOnDecode::Set(self.visibility_scope_info),\n                  IndexVec::new(),\n-                 return_ty,\n                  yield_ty,\n                  self.local_decls,\n                  self.arg_count,"}, {"sha": "d31f3812e9a1dd4953f41619883c958a1a679523", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=0b508846ec08a5020f4697008d6c6cb3be37f063", "patch": "@@ -197,7 +197,6 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ),\n         ClearOnDecode::Clear,\n         IndexVec::new(),\n-        sig.output(),\n         None,\n         local_decls_for_sig(&sig, span),\n         sig.inputs().len(),\n@@ -345,7 +344,6 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             ),\n             ClearOnDecode::Clear,\n             IndexVec::new(),\n-            self.sig.output(),\n             None,\n             self.local_decls,\n             self.sig.inputs().len(),\n@@ -808,7 +806,6 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ),\n         ClearOnDecode::Clear,\n         IndexVec::new(),\n-        sig.output(),\n         None,\n         local_decls,\n         sig.inputs().len(),\n@@ -881,7 +878,6 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n         ),\n         ClearOnDecode::Clear,\n         IndexVec::new(),\n-        sig.output(),\n         None,\n         local_decls,\n         sig.inputs().len(),"}, {"sha": "f676372193a360afb733424d9874581834d2ba03", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=0b508846ec08a5020f4697008d6c6cb3be37f063", "patch": "@@ -557,7 +557,6 @@ fn create_generator_drop_shim<'a, 'tcx>(\n     }\n \n     // Replace the return variable\n-    mir.return_ty = tcx.mk_nil();\n     mir.local_decls[RETURN_POINTER] = LocalDecl {\n         mutability: Mutability::Mut,\n         ty: tcx.mk_nil(),\n@@ -777,7 +776,7 @@ impl MirPass for StateTransform {\n         let state_did = tcx.lang_items().gen_state().unwrap();\n         let state_adt_ref = tcx.adt_def(state_did);\n         let state_substs = tcx.mk_substs([Kind::from(yield_ty),\n-            Kind::from(mir.return_ty)].iter());\n+            Kind::from(mir.return_ty())].iter());\n         let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n         // We rename RETURN_POINTER which has type mir.return_ty to new_ret_local\n@@ -808,7 +807,6 @@ impl MirPass for StateTransform {\n         transform.visit_mir(mir);\n \n         // Update our MIR struct to reflect the changed we've made\n-        mir.return_ty = ret_ty;\n         mir.yield_ty = None;\n         mir.arg_count = 1;\n         mir.spread_arg = None;"}, {"sha": "70f0c63c765e208b58d2c923410a71b20cc58ea7", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=0b508846ec08a5020f4697008d6c6cb3be37f063", "patch": "@@ -287,7 +287,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         let span = self.promoted.span;\n         let new_operand = Operand::Constant(box Constant {\n             span,\n-            ty: self.promoted.return_ty,\n+            ty: self.promoted.return_ty(),\n             literal: Literal::Promoted {\n                 index: Promoted::new(self.source.promoted.len())\n             }\n@@ -385,7 +385,6 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n                 mir.visibility_scopes.clone(),\n                 mir.visibility_scope_info.clone(),\n                 IndexVec::new(),\n-                ty,\n                 None,\n                 initial_locals,\n                 0,"}, {"sha": "97e80de96c5cc0d6ef119eb7c69f2d6bc90cb671", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0b508846ec08a5020f4697008d6c6cb3be37f063", "patch": "@@ -380,7 +380,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         // conservative type qualification instead.\n         if self.qualif.intersects(Qualif::CONST_ERROR) {\n             self.qualif = Qualif::empty();\n-            let return_ty = mir.return_ty;\n+            let return_ty = mir.return_ty();\n             self.add_type(return_ty);\n         }\n \n@@ -938,7 +938,7 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // performing the steal.\n     let mir = &tcx.mir_const(def_id).borrow();\n \n-    if mir.return_ty.references_error() {\n+    if mir.return_ty().references_error() {\n         tcx.sess.delay_span_bug(mir.span, \"mir_const_qualif: Mir had errors\");\n         return (Qualif::NOT_CONST.bits(), Rc::new(IdxSetBuf::new_empty(0)));\n     }\n@@ -956,7 +956,7 @@ impl MirPass for QualifyAndPromoteConstants {\n                           src: MirSource,\n                           mir: &mut Mir<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n-        if mir.return_ty.references_error() {\n+        if mir.return_ty().references_error() {\n             tcx.sess.delay_span_bug(mir.span, \"QualifyAndPromoteConstants: Mir had errors\");\n             return;\n         }\n@@ -1045,7 +1045,7 @@ impl MirPass for QualifyAndPromoteConstants {\n                     return;\n                 }\n             }\n-            let ty = mir.return_ty;\n+            let ty = mir.return_ty();\n             tcx.infer_ctxt().enter(|infcx| {\n                 let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n                 let cause = traits::ObligationCause::new(mir.span, id, traits::SharedStatic);"}, {"sha": "b70d0fb9c2c5d8a969848e4bdb63298afed2cbdc", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=0b508846ec08a5020f4697008d6c6cb3be37f063", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n     }\n \n     fn visit_mir(&mut self, mir: &Mir<'tcx>) {\n-        self.sanitize_type(&\"return type\", mir.return_ty);\n+        self.sanitize_type(&\"return type\", mir.return_ty());\n         for local_decl in &mir.local_decls {\n             self.sanitize_type(local_decl, local_decl.ty);\n         }"}, {"sha": "ea4495b484c39e32a2c956d631eefd85e425307a", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=0b508846ec08a5020f4697008d6c6cb3be37f063", "patch": "@@ -150,7 +150,7 @@ fn write_graph_label<'a, 'gcx, 'tcx, W: Write>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         write!(w, \"{:?}: {}\", Lvalue::Local(arg), escape(&mir.local_decls[arg].ty))?;\n     }\n \n-    write!(w, \") -&gt; {}\", escape(mir.return_ty))?;\n+    write!(w, \") -&gt; {}\", escape(mir.return_ty()))?;\n     write!(w, r#\"<br align=\"left\"/>\"#)?;\n \n     for local in mir.vars_and_temps_iter() {"}, {"sha": "7d9cae6bc19f9f250d82c4ab5fcdf44c7da7eede", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b508846ec08a5020f4697008d6c6cb3be37f063/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=0b508846ec08a5020f4697008d6c6cb3be37f063", "patch": "@@ -392,13 +392,13 @@ fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut Write)\n                 write!(w, \"{:?}: {}\", Lvalue::Local(arg), mir.local_decls[arg].ty)?;\n             }\n \n-            write!(w, \") -> {}\", mir.return_ty)\n+            write!(w, \") -> {}\", mir.return_ty())\n         }\n         (hir::BodyOwnerKind::Const, _) |\n         (hir::BodyOwnerKind::Static(_), _) |\n         (_, Some(_)) => {\n             assert_eq!(mir.arg_count, 0);\n-            write!(w, \": {} =\", mir.return_ty)\n+            write!(w, \": {} =\", mir.return_ty())\n         }\n     }\n }"}]}