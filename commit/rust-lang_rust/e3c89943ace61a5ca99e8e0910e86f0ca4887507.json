{"sha": "e3c89943ace61a5ca99e8e0910e86f0ca4887507", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYzg5OTQzYWNlNjFhNWNhOTllOGUwOTEwZTg2ZjBjYTQ4ODc1MDc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-31T13:06:23Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-31T13:06:23Z"}, "message": "Forward attributes of translated function/closure to trans_fn/trans_closure.", "tree": {"sha": "e337a793a2d999c982c02ad6aebaedd8b66d0981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e337a793a2d999c982c02ad6aebaedd8b66d0981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3c89943ace61a5ca99e8e0910e86f0ca4887507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c89943ace61a5ca99e8e0910e86f0ca4887507", "html_url": "https://github.com/rust-lang/rust/commit/e3c89943ace61a5ca99e8e0910e86f0ca4887507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3c89943ace61a5ca99e8e0910e86f0ca4887507/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a06bb977d86dcfe786d4265f4807a11c39b51141", "url": "https://api.github.com/repos/rust-lang/rust/commits/a06bb977d86dcfe786d4265f4807a11c39b51141", "html_url": "https://github.com/rust-lang/rust/commit/a06bb977d86dcfe786d4265f4807a11c39b51141"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "ea9ca8f37b173ee1f7e31a4309bc258701c4a7ac", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=e3c89943ace61a5ca99e8e0910e86f0ca4887507", "patch": "@@ -31,6 +31,7 @@ use session::config::FullDebugInfo;\n \n use syntax::abi::RustCall;\n use syntax::ast;\n+use syntax::attr::{ThinAttributes, ThinAttributesExt};\n \n use rustc_front::hir;\n \n@@ -176,7 +177,8 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n                                     body: &hir::Block,\n                                     id: ast::NodeId,\n                                     closure_def_id: DefId, // (*)\n-                                    closure_substs: &'tcx ty::ClosureSubsts<'tcx>)\n+                                    closure_substs: &'tcx ty::ClosureSubsts<'tcx>,\n+                                    closure_expr_attrs: &ThinAttributes)\n                                     -> Option<Block<'a, 'tcx>>\n {\n     // (*) Note that in the case of inlined functions, the `closure_def_id` will be the\n@@ -218,7 +220,7 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n                   llfn,\n                   param_substs,\n                   id,\n-                  &[],\n+                  closure_expr_attrs.as_attr_slice(),\n                   sig.output,\n                   function_type.abi,\n                   ClosureEnv::Closure(closure_def_id, &freevars));"}, {"sha": "e25819f77a172271ae957f131b8d9f7e0b5580e0", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=e3c89943ace61a5ca99e8e0910e86f0ca4887507", "patch": "@@ -1019,8 +1019,13 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         hir::ExprClosure(_, ref decl, ref body) => {\n             match ety.sty {\n                 ty::TyClosure(def_id, ref substs) => {\n-                    closure::trans_closure_expr(closure::Dest::Ignore(cx), decl,\n-                                                body, e.id, def_id, substs);\n+                    closure::trans_closure_expr(closure::Dest::Ignore(cx),\n+                                                decl,\n+                                                body,\n+                                                e.id,\n+                                                def_id,\n+                                                substs,\n+                                                &e.attrs);\n                 }\n                 _ =>\n                     cx.sess().span_bug("}, {"sha": "fb6f2190207ee3c8e33efe303b558371152800ba", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=e3c89943ace61a5ca99e8e0910e86f0ca4887507", "patch": "@@ -1196,7 +1196,13 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                         &format!(\"closure expr without closure type: {:?}\", t)),\n             };\n \n-            closure::trans_closure_expr(dest, decl, body, expr.id, def_id, substs).unwrap_or(bcx)\n+            closure::trans_closure_expr(dest,\n+                                        decl,\n+                                        body,\n+                                        expr.id,\n+                                        def_id,\n+                                        substs,\n+                                        &expr.attrs).unwrap_or(bcx)\n         }\n         hir::ExprCall(ref f, ref args) => {\n             if bcx.tcx().is_method_call(expr.id) {"}, {"sha": "9673daf0b791789ace98e3768c6337395ec7cdd9", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=e3c89943ace61a5ca99e8e0910e86f0ca4887507", "patch": "@@ -639,7 +639,7 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n         let llfn = declare::define_internal_rust_fn(ccx, &ps, t);\n         attributes::from_fn_attrs(ccx, attrs, llfn);\n-        base::trans_fn(ccx, decl, body, llfn, param_substs, id, &[]);\n+        base::trans_fn(ccx, decl, body, llfn, param_substs, id, attrs);\n         llfn\n     }\n "}, {"sha": "5968daf349f08dfcc70e571b5a28961d5a6f9854", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=e3c89943ace61a5ca99e8e0910e86f0ca4887507", "patch": "@@ -165,7 +165,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: DefId)\n                              llfn,\n                              empty_substs,\n                              impl_item.id,\n-                             &[]);\n+                             &impl_item.attrs);\n                     // See linkage comments on items.\n                     if ccx.sess().opts.cg.codegen_units == 1 {\n                         SetLinkage(llfn, InternalLinkage);"}, {"sha": "7a1cbf206074ddf123be9f0d88268dee7c9fe158", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=e3c89943ace61a5ca99e8e0910e86f0ca4887507", "patch": "@@ -74,8 +74,13 @@ pub fn trans_impl(ccx: &CrateContext,\n                     for (ref ccx, is_origin) in ccx.maybe_iter(trans_everywhere) {\n                         let llfn = get_item_val(ccx, impl_item.id);\n                         let empty_substs = tcx.mk_substs(Substs::trans_empty());\n-                        trans_fn(ccx, &sig.decl, body, llfn,\n-                                 empty_substs, impl_item.id, &[]);\n+                        trans_fn(ccx,\n+                                 &sig.decl,\n+                                 body,\n+                                 llfn,\n+                                 empty_substs,\n+                                 impl_item.id,\n+                                 &impl_item.attrs);\n                         update_linkage(ccx,\n                                        llfn,\n                                        Some(impl_item.id),"}, {"sha": "80a86bac26b9afc892044161f19400fff48d8a83", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c89943ace61a5ca99e8e0910e86f0ca4887507/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=e3c89943ace61a5ca99e8e0910e86f0ca4887507", "patch": "@@ -185,7 +185,13 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                               ccx, &**decl, &**body, &[], d, psubsts, fn_node_id,\n                               Some(&hash[..]));\n                       } else {\n-                          trans_fn(ccx, &**decl, &**body, d, psubsts, fn_node_id, &[]);\n+                          trans_fn(ccx,\n+                                   &**decl,\n+                                   &**body,\n+                                   d,\n+                                   psubsts,\n+                                   fn_node_id,\n+                                   &i.attrs);\n                       }\n                   }\n \n@@ -216,7 +222,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                  d,\n                                  psubsts,\n                                  impl_item.id,\n-                                 &[]);\n+                                 &impl_item.attrs);\n                     }\n                     d\n                 }\n@@ -232,8 +238,13 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                     let d = mk_lldecl(abi::Rust);\n                     let needs_body = setup_lldecl(d, &trait_item.attrs);\n                     if needs_body {\n-                        trans_fn(ccx, &sig.decl, body, d,\n-                                 psubsts, trait_item.id, &[]);\n+                        trans_fn(ccx,\n+                                 &sig.decl,\n+                                 body,\n+                                 d,\n+                                 psubsts,\n+                                 trait_item.id,\n+                                 &trait_item.attrs);\n                     }\n                     d\n                 }"}]}