{"sha": "72770efcb0e04cb645911dc194d10d216e5968c1", "node_id": "C_kwDOAAsO6NoAKDcyNzcwZWZjYjBlMDRjYjY0NTkxMWRjMTk0ZDEwZDIxNmU1OTY4YzE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-28T18:41:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-28T18:41:49Z"}, "message": "Rollup merge of #93787 - klensy:really-not-a-features, r=wesleywiser\n\nparallel_compiler: hide dependencies behind feature\n\nSeparate dependencies for `parallel_compiler` feature, so they will not be compiled if feature not selected, reducing number of compiled crates from 238 to 224.", "tree": {"sha": "94219aaff9cea5c105689fdf9e36d395f17b491c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94219aaff9cea5c105689fdf9e36d395f17b491c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72770efcb0e04cb645911dc194d10d216e5968c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQgFuCRBK7hj4Ov3rIwAAPlwIALDdApZTQfU2Y2QNz3Gbc87m\nRrzj1z19Ho8Ji33u9qzkgB/RwQb6SHG/pzu301XRHodz0zm6AJve5SNtTz27nfUn\nW2XIPAMg/7TfUpDVeH436IYnWvYF5sGmFMbv5PcXG+W42PQh3bjauI+5Scjbf6PA\nRxa+K4Bz6mfZYnM6kfzdDD3vbQGFyGu2P4GZEm14yoCJDuQbuZRoJD9azY6ZDjww\nC29nQ2tQjRvw75k0/glUI+pQyla4FjgCMZV9Jr0aM5TK2huSoEOWzmLBi/VdvP5E\nNA2J/ocJ9xtBKHpFPbkZD9KPyf7hx3WxZ4hj7XKivTESQfVU8/C2ejo1rbLQpBg=\n=2nlS\n-----END PGP SIGNATURE-----\n", "payload": "tree 94219aaff9cea5c105689fdf9e36d395f17b491c\nparent 600ec284838c52d1f6657c2cf0097b58970b133b\nparent 008fc79dcd821b08a1ab64f5fba40dcc4bcd3aee\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648492909 +0200\ncommitter GitHub <noreply@github.com> 1648492909 +0200\n\nRollup merge of #93787 - klensy:really-not-a-features, r=wesleywiser\n\nparallel_compiler: hide dependencies behind feature\n\nSeparate dependencies for `parallel_compiler` feature, so they will not be compiled if feature not selected, reducing number of compiled crates from 238 to 224.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72770efcb0e04cb645911dc194d10d216e5968c1", "html_url": "https://github.com/rust-lang/rust/commit/72770efcb0e04cb645911dc194d10d216e5968c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72770efcb0e04cb645911dc194d10d216e5968c1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "600ec284838c52d1f6657c2cf0097b58970b133b", "url": "https://api.github.com/repos/rust-lang/rust/commits/600ec284838c52d1f6657c2cf0097b58970b133b", "html_url": "https://github.com/rust-lang/rust/commit/600ec284838c52d1f6657c2cf0097b58970b133b"}, {"sha": "008fc79dcd821b08a1ab64f5fba40dcc4bcd3aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/008fc79dcd821b08a1ab64f5fba40dcc4bcd3aee", "html_url": "https://github.com/rust-lang/rust/commit/008fc79dcd821b08a1ab64f5fba40dcc4bcd3aee"}], "stats": {"total": 102, "additions": 63, "deletions": 39}, "files": [{"sha": "b642e891956cbe04b8f1aa0f9e96320ee7f164e2", "filename": "compiler/rustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc%2FCargo.toml?ref=72770efcb0e04cb645911dc194d10d216e5968c1", "patch": "@@ -19,3 +19,4 @@ features = ['unprefixed_malloc_on_supported_platforms']\n jemalloc = ['tikv-jemalloc-sys']\n llvm = ['rustc_driver/llvm']\n max_level_info = ['rustc_driver/max_level_info']\n+rustc_use_parallel_compiler = ['rustc_driver/rustc_use_parallel_compiler']"}, {"sha": "010560248054ebcb4441da4e49d32ea34c0bbcf4", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=72770efcb0e04cb645911dc194d10d216e5968c1", "patch": "@@ -14,6 +14,8 @@ use crate::{CachedModuleCodegen, CompiledModule, CrateInfo, MemFlags, ModuleCode\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n+\n+#[cfg(parallel_compiler)]\n use rustc_data_structures::sync::{par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -622,34 +624,34 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // This likely is a temporary measure. Once we don't have to support the\n     // non-parallel compiler anymore, we can compile CGUs end-to-end in\n     // parallel and get rid of the complicated scheduling logic.\n+    #[cfg(parallel_compiler)]\n     let pre_compile_cgus = |cgu_reuse: &[CguReuse]| {\n-        if cfg!(parallel_compiler) {\n-            tcx.sess.time(\"compile_first_CGU_batch\", || {\n-                // Try to find one CGU to compile per thread.\n-                let cgus: Vec<_> = cgu_reuse\n-                    .iter()\n-                    .enumerate()\n-                    .filter(|&(_, reuse)| reuse == &CguReuse::No)\n-                    .take(tcx.sess.threads())\n-                    .collect();\n-\n-                // Compile the found CGUs in parallel.\n-                let start_time = Instant::now();\n-\n-                let pre_compiled_cgus = par_iter(cgus)\n-                    .map(|(i, _)| {\n-                        let module = backend.compile_codegen_unit(tcx, codegen_units[i].name());\n-                        (i, module)\n-                    })\n-                    .collect();\n-\n-                (pre_compiled_cgus, start_time.elapsed())\n-            })\n-        } else {\n-            (FxHashMap::default(), Duration::new(0, 0))\n-        }\n+        tcx.sess.time(\"compile_first_CGU_batch\", || {\n+            // Try to find one CGU to compile per thread.\n+            let cgus: Vec<_> = cgu_reuse\n+                .iter()\n+                .enumerate()\n+                .filter(|&(_, reuse)| reuse == &CguReuse::No)\n+                .take(tcx.sess.threads())\n+                .collect();\n+\n+            // Compile the found CGUs in parallel.\n+            let start_time = Instant::now();\n+\n+            let pre_compiled_cgus = par_iter(cgus)\n+                .map(|(i, _)| {\n+                    let module = backend.compile_codegen_unit(tcx, codegen_units[i].name());\n+                    (i, module)\n+                })\n+                .collect();\n+\n+            (pre_compiled_cgus, start_time.elapsed())\n+        })\n     };\n \n+    #[cfg(not(parallel_compiler))]\n+    let pre_compile_cgus = |_: &[CguReuse]| (FxHashMap::default(), Duration::new(0, 0));\n+\n     let mut cgu_reuse = Vec::new();\n     let mut pre_compiled_cgus: Option<FxHashMap<usize, _>> = None;\n     let mut total_codegen_time = Duration::new(0, 0);"}, {"sha": "7cc8b5c20339ad8cb4571ab1db886f8f37d5f597", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=72770efcb0e04cb645911dc194d10d216e5968c1", "patch": "@@ -9,16 +9,16 @@ doctest = false\n [dependencies]\n arrayvec = { version = \"0.7\", default-features = false }\n ena = \"0.14\"\n-indexmap = { version = \"1.8.0\", features = [\"rustc-rayon\"] }\n+indexmap = { version = \"1.8.0\" }\n tracing = \"0.1\"\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_graphviz = { path = \"../rustc_graphviz\" }\n cfg-if = \"0.1.2\"\n stable_deref_trait = \"1.0.0\"\n-rayon = { version = \"0.3.2\", package = \"rustc-rayon\" }\n-rayon-core = { version = \"0.3.2\", package = \"rustc-rayon-core\" }\n+rayon = { version = \"0.3.2\", package = \"rustc-rayon\", optional = true }\n+rayon-core = { version = \"0.3.2\", package = \"rustc-rayon-core\", optional = true }\n rustc-hash = \"1.1.0\"\n smallvec = { version = \"1.6.1\", features = [\"const_generics\", \"union\", \"may_dangle\"] }\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n@@ -36,3 +36,6 @@ winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\", \"winerror\"] }\n \n [target.'cfg(not(target_arch = \"wasm32\"))'.dependencies]\n memmap2 = \"0.2.1\"\n+\n+[features]\n+rustc_use_parallel_compiler = [\"indexmap/rustc-rayon\", \"rayon\", \"rayon-core\"]"}, {"sha": "fd2ca5beadea3d013613968186be88f9cd412efd", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=72770efcb0e04cb645911dc194d10d216e5968c1", "patch": "@@ -39,3 +39,5 @@ winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"]\n [features]\n llvm = ['rustc_interface/llvm']\n max_level_info = ['rustc_log/max_level_info']\n+rustc_use_parallel_compiler = ['rustc_data_structures/rustc_use_parallel_compiler', 'rustc_interface/rustc_use_parallel_compiler',\n+    'rustc_middle/rustc_use_parallel_compiler']"}, {"sha": "29d1cd0e05467a3d75ee6bfbc3b0fd08da32c580", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=72770efcb0e04cb645911dc194d10d216e5968c1", "patch": "@@ -10,8 +10,8 @@ doctest = false\n libc = \"0.2\"\n libloading = \"0.7.1\"\n tracing = \"0.1\"\n-rustc-rayon-core = \"0.3.2\"\n-rayon = { version = \"0.3.2\", package = \"rustc-rayon\" }\n+rustc-rayon-core = { version = \"0.3.2\", optional = true }\n+rayon = { version = \"0.3.2\", package = \"rustc-rayon\", optional = true }\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_attr = { path = \"../rustc_attr\" }\n@@ -57,3 +57,4 @@ rustc_target = { path = \"../rustc_target\" }\n \n [features]\n llvm = ['rustc_codegen_llvm']\n+rustc_use_parallel_compiler = ['rayon', 'rustc-rayon-core', 'rustc_query_impl/rustc_use_parallel_compiler']"}, {"sha": "cd281ea5b38ae290781b0ab50c732d7039275a87", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=72770efcb0e04cb645911dc194d10d216e5968c1", "patch": "@@ -12,8 +12,8 @@ bitflags = \"1.2.1\"\n either = \"1.5.0\"\n gsgdt = \"0.1.2\"\n tracing = \"0.1\"\n-rustc-rayon = \"0.3.2\"\n-rustc-rayon-core = \"0.3.2\"\n+rustc-rayon = { version = \"0.3.2\", optional = true }\n+rustc-rayon-core = { version = \"0.3.2\", optional = true }\n polonius-engine = \"0.13.0\"\n rustc_apfloat = { path = \"../rustc_apfloat\" }\n rustc_attr = { path = \"../rustc_attr\" }\n@@ -35,3 +35,6 @@ rustc_session = { path = \"../rustc_session\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }\n rand = \"0.8.4\"\n rand_xoshiro = \"0.6.0\"\n+\n+[features]\n+rustc_use_parallel_compiler = [\"rustc-rayon\", \"rustc-rayon-core\"]"}, {"sha": "b7502c4b1e23b2d39b7b806c0cf61263ccd0b54d", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=72770efcb0e04cb645911dc194d10d216e5968c1", "patch": "@@ -8,7 +8,7 @@ doctest = false\n \n [dependencies]\n measureme = \"10.0.0\"\n-rustc-rayon-core = \"0.3.2\"\n+rustc-rayon-core = { version = \"0.3.2\", optional = true }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n@@ -20,3 +20,6 @@ rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n+\n+[features]\n+rustc_use_parallel_compiler = [\"rustc-rayon-core\", \"rustc_query_system/rustc_use_parallel_compiler\"]"}, {"sha": "8a35121f90cdbc48ad4beb39f8f4f7c02659f66a", "filename": "compiler/rustc_query_system/Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_query_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/72770efcb0e04cb645911dc194d10d216e5968c1/compiler%2Frustc_query_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2FCargo.toml?ref=72770efcb0e04cb645911dc194d10d216e5968c1", "patch": "@@ -9,7 +9,7 @@ doctest = false\n [dependencies]\n rustc_arena = { path = \"../rustc_arena\" }\n tracing = \"0.1\"\n-rustc-rayon-core = \"0.3.2\"\n+rustc-rayon-core = { version = \"0.3.2\", optional = true }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n@@ -23,3 +23,6 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n parking_lot = \"0.11\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n+\n+[features]\n+rustc_use_parallel_compiler = [\"rustc-rayon-core\"]"}, {"sha": "00fc1f0434252ac0c3b2b476369a39bea533788e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72770efcb0e04cb645911dc194d10d216e5968c1/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72770efcb0e04cb645911dc194d10d216e5968c1/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=72770efcb0e04cb645911dc194d10d216e5968c1", "patch": "@@ -689,6 +689,8 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n     }\n \n     if builder.config.rustc_parallel {\n+        // keep in sync with `bootstrap/lib.rs:Build::rustc_features`\n+        // `cfg` option for rustc, `features` option for cargo, for conditional compilation\n         cargo.rustflag(\"--cfg=parallel_compiler\");\n         cargo.rustdocflag(\"--cfg=parallel_compiler\");\n     }"}, {"sha": "8f076ad914d9a572c958403934bd41e6875c838d", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72770efcb0e04cb645911dc194d10d216e5968c1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72770efcb0e04cb645911dc194d10d216e5968c1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=72770efcb0e04cb645911dc194d10d216e5968c1", "patch": "@@ -729,12 +729,16 @@ impl Build {\n \n     /// Gets the space-separated set of activated features for the compiler.\n     fn rustc_features(&self, kind: Kind) -> String {\n-        let mut features = String::new();\n+        let mut features = vec![];\n         if self.config.jemalloc {\n-            features.push_str(\"jemalloc\");\n+            features.push(\"jemalloc\");\n         }\n         if self.config.llvm_enabled() || kind == Kind::Check {\n-            features.push_str(\" llvm\");\n+            features.push(\"llvm\");\n+        }\n+        // keep in sync with `bootstrap/compile.rs:rustc_cargo_env`\n+        if self.config.rustc_parallel {\n+            features.push(\"rustc_use_parallel_compiler\");\n         }\n \n         // If debug logging is on, then we want the default for tracing:\n@@ -743,10 +747,10 @@ impl Build {\n         // if its unset, if debug_assertions is on, then debug_logging will also be on\n         // as well as tracing *ignoring* this feature when debug_assertions is on\n         if !self.config.rust_debug_logging {\n-            features.push_str(\" max_level_info\");\n+            features.push(\"max_level_info\");\n         }\n \n-        features\n+        features.join(\" \")\n     }\n \n     /// Component directory that Cargo will produce output into (e.g."}]}