{"sha": "081d0f82f490b886753cf2cf32da8076050a5a6c", "node_id": "C_kwDOAAsO6NoAKDA4MWQwZjgyZjQ5MGI4ODY3NTNjZjJjZjMyZGE4MDc2MDUwYTVhNmM", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-10-11T00:03:11Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-10-21T18:01:28Z"}, "message": "Make useless_format recognize format!(\"\")\n\nCloses #7796", "tree": {"sha": "00519e2b843e2c15ba58f438b12c11e347609284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00519e2b843e2c15ba58f438b12c11e347609284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/081d0f82f490b886753cf2cf32da8076050a5a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/081d0f82f490b886753cf2cf32da8076050a5a6c", "html_url": "https://github.com/rust-lang/rust/commit/081d0f82f490b886753cf2cf32da8076050a5a6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/081d0f82f490b886753cf2cf32da8076050a5a6c/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "html_url": "https://github.com/rust-lang/rust/commit/91496c2ac6abf6454c413bb23e8becf6b6dc20ea"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "7169ac9ad6c5a50ce98062c8d1dcdaa465adea46", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/081d0f82f490b886753cf2cf32da8076050a5a6c/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/081d0f82f490b886753cf2cf32da8076050a5a6c/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=081d0f82f490b886753cf2cf32da8076050a5a6c", "patch": "@@ -49,15 +49,19 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n \n         let mut applicability = Applicability::MachineApplicable;\n         if format_args.value_args.is_empty() {\n-            if_chain! {\n-                if let [e] = &*format_args.format_string_parts;\n-                if let ExprKind::Lit(lit) = &e.kind;\n-                if let Some(s_src) = snippet_opt(cx, lit.span);\n-                then {\n-                    // Simulate macro expansion, converting {{ and }} to { and }.\n-                    let s_expand = s_src.replace(\"{{\", \"{\").replace(\"}}\", \"}\");\n-                    let sugg = format!(\"{}.to_string()\", s_expand);\n-                    span_useless_format(cx, call_site, sugg, applicability);\n+            if format_args.format_string_parts.is_empty() {\n+                span_useless_format_empty(cx, call_site, \"String::new()\".to_owned(), applicability);\n+            } else {\n+                if_chain! {\n+                    if let [e] = &*format_args.format_string_parts;\n+                    if let ExprKind::Lit(lit) = &e.kind;\n+                    if let Some(s_src) = snippet_opt(cx, lit.span);\n+                    then {\n+                        // Simulate macro expansion, converting {{ and }} to { and }.\n+                        let s_expand = s_src.replace(\"{{\", \"{\").replace(\"}}\", \"}\");\n+                        let sugg = format!(\"{}.to_string()\", s_expand);\n+                        span_useless_format(cx, call_site, sugg, applicability);\n+                    }\n                 }\n             }\n         } else if let [value] = *format_args.value_args {\n@@ -89,6 +93,18 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n     }\n }\n \n+fn span_useless_format_empty(cx: &LateContext<'_>, span: Span, sugg: String, applicability: Applicability) {\n+    span_lint_and_sugg(\n+        cx,\n+        USELESS_FORMAT,\n+        span,\n+        \"useless use of `format!`\",\n+        \"consider using `String::new()`\",\n+        sugg,\n+        applicability,\n+    );\n+}\n+\n fn span_useless_format(cx: &LateContext<'_>, span: Span, sugg: String, applicability: Applicability) {\n     span_lint_and_sugg(\n         cx,"}, {"sha": "64cb7b1cfb80f6c33ff5e81f7af29cceb1e8b73d", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/081d0f82f490b886753cf2cf32da8076050a5a6c/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/081d0f82f490b886753cf2cf32da8076050a5a6c/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=081d0f82f490b886753cf2cf32da8076050a5a6c", "patch": "@@ -16,6 +16,8 @@ fn main() {\n     r##\"foo {}\n \" bar\"##.to_string();\n \n+    let _ = String::new();\n+\n     \"foo\".to_string();\n     format!(\"{:?}\", \"foo\"); // Don't warn about `Debug`.\n     format!(\"{:8}\", \"foo\");"}, {"sha": "a065b1b5683c1b9ccbfeb81df5cf1b96d7d12c4d", "filename": "tests/ui/format.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/081d0f82f490b886753cf2cf32da8076050a5a6c/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/081d0f82f490b886753cf2cf32da8076050a5a6c/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=081d0f82f490b886753cf2cf32da8076050a5a6c", "patch": "@@ -18,6 +18,8 @@ fn main() {\n \" bar\"##\n     );\n \n+    let _ = format!(\"\");\n+\n     format!(\"{}\", \"foo\");\n     format!(\"{:?}\", \"foo\"); // Don't warn about `Debug`.\n     format!(\"{:8}\", \"foo\");"}, {"sha": "58ad7499bb26f530c5202239ac79858ab1aaa79c", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/081d0f82f490b886753cf2cf32da8076050a5a6c/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/081d0f82f490b886753cf2cf32da8076050a5a6c/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=081d0f82f490b886753cf2cf32da8076050a5a6c", "patch": "@@ -34,64 +34,70 @@ LL ~ \" bar\"##.to_string();\n    |\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:21:5\n+  --> $DIR/format.rs:21:13\n+   |\n+LL |     let _ = format!(\"\");\n+   |             ^^^^^^^^^^^ help: consider using `String::new()`: `String::new()`\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:23:5\n    |\n LL |     format!(\"{}\", \"foo\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:25:5\n+  --> $DIR/format.rs:27:5\n    |\n LL |     format!(\"{:+}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:26:5\n+  --> $DIR/format.rs:28:5\n    |\n LL |     format!(\"{:<}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:31:5\n+  --> $DIR/format.rs:33:5\n    |\n LL |     format!(\"{}\", arg);\n    |     ^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:35:5\n+  --> $DIR/format.rs:37:5\n    |\n LL |     format!(\"{:+}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:36:5\n+  --> $DIR/format.rs:38:5\n    |\n LL |     format!(\"{:<}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:63:5\n+  --> $DIR/format.rs:65:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:65:5\n+  --> $DIR/format.rs:67:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:69:18\n+  --> $DIR/format.rs:71:18\n    |\n LL |     let _ = Some(format!(\"{}\", a + \"bar\"));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `a + \"bar\"`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:73:22\n+  --> $DIR/format.rs:75:22\n    |\n LL |     let _s: String = format!(\"{}\", &*v.join(\"/n\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `(&*v.join(\"/n\")).to_string()`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n "}]}