{"sha": "46f427bee9ac60d4ce31baa95430223d5ec110b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZjQyN2JlZTlhYzYwZDRjZTMxYmFhOTU0MzAyMjNkNWVjMTEwYjM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-11T20:12:06Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-17T21:12:48Z"}, "message": "Fix incorrect subst index\n\nFix treatment of lifetimes defined in nested types during detection of late bound regions in signatures.\nDo not replace substs with inference variables when \"cannot specify lifetime arguments explicitly...\" is reported as a lint.", "tree": {"sha": "66ed7f3e9cbfc19ee2253d5fdc682c4d328bf94f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66ed7f3e9cbfc19ee2253d5fdc682c4d328bf94f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46f427bee9ac60d4ce31baa95430223d5ec110b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46f427bee9ac60d4ce31baa95430223d5ec110b3", "html_url": "https://github.com/rust-lang/rust/commit/46f427bee9ac60d4ce31baa95430223d5ec110b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46f427bee9ac60d4ce31baa95430223d5ec110b3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40cedb3932060abf4496254959e9dd307eb6a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40cedb3932060abf4496254959e9dd307eb6a2f", "html_url": "https://github.com/rust-lang/rust/commit/e40cedb3932060abf4496254959e9dd307eb6a2f"}], "stats": {"total": 84, "additions": 62, "deletions": 22}, "files": [{"sha": "ad4ee5a9d6dcf2c7dea25f84cf8c0616edc94a9a", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=46f427bee9ac60d4ce31baa95430223d5ec110b3", "patch": "@@ -281,7 +281,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n     fn instantiate_method_substs(&mut self,\n                                  pick: &probe::Pick<'tcx>,\n                                  segment: &hir::PathSegment,\n-                                 substs: &Substs<'tcx>)\n+                                 parent_substs: &Substs<'tcx>)\n                                  -> &'tcx Substs<'tcx> {\n         // Determine the values for the generic parameters of the method.\n         // If they were not explicitly supplied, just construct fresh\n@@ -296,20 +296,23 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             hir::AngleBracketedParameters(ref data) => (&data.types, &data.lifetimes),\n             _ => bug!(\"unexpected generic arguments: {:?}\", segment.parameters),\n         };\n+        assert_eq!(method_generics.parent_count(), parent_substs.len());\n         Substs::for_item(self.tcx, pick.item.def_id, |def, _| {\n             let i = def.index as usize;\n-            if i < substs.len() {\n-                substs.region_at(i)\n-            } else if let Some(lifetime) = supplied_lifetimes.get(i - substs.len()) {\n+            if i < parent_substs.len() {\n+                parent_substs.region_at(i)\n+            } else if let Some(lifetime) =\n+                    supplied_lifetimes.get(i - parent_substs.len()) {\n                 AstConv::ast_region_to_region(self.fcx, lifetime, Some(def))\n             } else {\n                 self.region_var_for_def(self.span, def)\n             }\n         }, |def, cur_substs| {\n             let i = def.index as usize;\n-            if i < substs.len() {\n-                substs.type_at(i)\n-            } else if let Some(ast_ty) = supplied_types.get(i - substs.len()) {\n+            if i < parent_substs.len() {\n+                parent_substs.type_at(i)\n+            } else if let Some(ast_ty) =\n+                    supplied_types.get(i - parent_substs.len() - method_generics.regions.len()) {\n                 self.to_ty(ast_ty)\n             } else {\n                 self.type_var_for_def(self.span, def, cur_substs)"}, {"sha": "af11cacb247b6b6b90bef620d7a28e58b0768893", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=46f427bee9ac60d4ce31baa95430223d5ec110b3", "patch": "@@ -4697,13 +4697,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.tcx.sess.span_err(lifetimes[0].span,\n                                        \"cannot specify lifetime arguments explicitly \\\n                                         if late bound lifetime parameters are present\");\n+                *segment = None;\n             } else {\n                 self.tcx.sess.add_lint(lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS,\n                                        lifetimes[0].id, lifetimes[0].span,\n                                        format!(\"cannot specify lifetime arguments explicitly \\\n                                                 if late bound lifetime parameters are present\"));\n             }\n-            *segment = None;\n             return;\n         }\n "}, {"sha": "72bd084330dd3ca62d92373d351431533685dd09", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=46f427bee9ac60d4ce31baa95430223d5ec110b3", "patch": "@@ -777,7 +777,7 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     -> bool {\n     struct LateBoundRegionsDetector<'a, 'tcx: 'a> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        binder_depth: usize,\n+        binder_depth: u32,\n         has_late_bound_regions: bool,\n     }\n \n@@ -812,7 +812,10 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             match self.tcx.named_region_map.defs.get(&lt.id).cloned() {\n                 Some(rl::Region::Static) | Some(rl::Region::EarlyBound(..)) => {}\n-                _ => self.has_late_bound_regions = true\n+                Some(rl::Region::LateBound(debruijn, _)) |\n+                Some(rl::Region::LateBoundAnon(debruijn, _))\n+                    if debruijn.depth < self.binder_depth => {}\n+                _ => self.has_late_bound_regions = true,\n             }\n         }\n     }\n@@ -822,7 +825,7 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         decl: &'tcx hir::FnDecl)\n                                         -> bool {\n         let mut visitor = LateBoundRegionsDetector {\n-            tcx, binder_depth: 0, has_late_bound_regions: false\n+            tcx, binder_depth: 1, has_late_bound_regions: false\n         };\n         for lifetime in &generics.lifetimes {\n             if tcx.named_region_map.late_bound.contains(&lifetime.lifetime.id) {"}, {"sha": "b206924e538f36d0521a281e917040b37688aa1f", "filename": "src/test/compile-fail/method-call-lifetime-args-lint.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-lint.rs?ref=46f427bee9ac60d4ce31baa95430223d5ec110b3", "patch": "@@ -17,6 +17,14 @@ impl S {\n     fn late_implicit(self, _: &u8, _: &u8) {}\n     fn late_early<'a, 'b>(self, _: &'a u8) -> &'b u8 { loop {} }\n     fn late_implicit_early<'b>(self, _: &u8) -> &'b u8 { loop {} }\n+\n+    // 'late lifetimes here belong to nested types not to the tested functions.\n+    fn early_tricky_explicit<'a>(_: for<'late> fn(&'late u8),\n+                                 _: Box<for<'late> Fn(&'late u8)>)\n+                                 -> &'a u8 { loop {} }\n+    fn early_tricky_implicit<'a>(_: fn(&u8),\n+                                 _: Box<Fn(&u8)>)\n+                                 -> &'a u8 { loop {} }\n }\n \n fn method_call() {\n@@ -61,6 +69,9 @@ fn method_call() {\n     S.late_implicit_early::<'static, 'static, 'static>(&0);\n     //~^ ERROR cannot specify lifetime arguments explicitly\n     //~| WARN this was previously accepted\n+\n+    S::early_tricky_explicit::<'static>(loop {}, loop {}); // OK\n+    S::early_tricky_implicit::<'static>(loop {}, loop {}); // OK\n }\n \n fn ufcs() {\n@@ -73,4 +84,13 @@ fn ufcs() {\n     //~| WARN this was previously accepted\n }\n \n+fn lint_not_inference_error() {\n+    fn f<'early, 'late, T: 'early>() {}\n+\n+    // Make sure `u8` is substituted and not replaced with an inference variable\n+    f::<'static, u8>;\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+}\n+\n fn main() {}"}, {"sha": "a9505e4f936a1b5bfe89ab821225fdc4002ced45", "filename": "src/test/compile-fail/method-call-lifetime-args-subst-index.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-subst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-subst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-subst-index.rs?ref=46f427bee9ac60d4ce31baa95430223d5ec110b3", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(unused)]\n+\n+struct S;\n+\n+impl S {\n+    fn early_and_type<'a, T>(self) -> &'a T { loop {} }\n+}\n+\n+fn test() {\n+    S.early_and_type::<u16>();\n+}\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "f0a87c7470386b3f3500e2bead3446e0d3ef7ce7", "filename": "src/test/compile-fail/method-call-lifetime-args.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f427bee9ac60d4ce31baa95430223d5ec110b3/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs?ref=46f427bee9ac60d4ce31baa95430223d5ec110b3", "patch": "@@ -19,14 +19,6 @@ impl S {\n     fn late_implicit_self_early<'b>(&self) -> &'b u8 { loop {} }\n     fn late_unused_early<'a, 'b>(self) -> &'b u8 { loop {} }\n     fn life_and_type<'a, T>(self) -> &'a T { loop {} }\n-\n-    // 'late lifetimes here belong to nested types not to the tested functions.\n-    fn early_tricky_explicit<'a>(_: for<'late> fn(&'late u8),\n-                                 _: Box<for<'late> Fn(&'late u8)>)\n-                                 -> &'a u8 { loop {} }\n-    fn early_tricky_implicit<'a>(_: fn(&u8),\n-                                 _: Box<Fn(&u8)>)\n-                                 -> &'a u8 { loop {} }\n }\n \n fn method_call() {\n@@ -85,9 +77,6 @@ fn ufcs() {\n     let _: &u8 = S::life_and_type::<'static>(S);\n     S::life_and_type::<u8>(S);\n     S::life_and_type::<'static, u8>(S);\n-\n-    S::early_tricky_explicit::<'static>(loop {}, loop {}); // OK\n-    S::early_tricky_implicit::<'static>(loop {}, loop {}); // OK\n }\n \n fn main() {}"}]}