{"sha": "8de59be93302781390491666409c35e60664c3fd", "node_id": "C_kwDOAAsO6NoAKDhkZTU5YmU5MzMwMjc4MTM5MDQ5MTY2NjQwOWMzNWU2MDY2NGMzZmQ", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-01-28T16:10:59Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-01-30T08:52:44Z"}, "message": "Compress amount of hashed bytes for `isize` values in StableHasher", "tree": {"sha": "6d493dc5bfdc84b0e546f65d303cd9d8839a51e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d493dc5bfdc84b0e546f65d303cd9d8839a51e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8de59be93302781390491666409c35e60664c3fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEg8FrwI85f934CWFa28VT5UDC9hkFAmH2UdwACgkQ28VT5UDC\n9hmRPQwAh3rxlVOyDLsQcgZXjJVantyffvxD94iCZhl1AHuacOAwOi4daC/ma/xA\nBQl9Fyx2aMvQSJrAq2YH0iZjrWHltS97+iXXT0ONTCa8064r1Vd/HhaFOgcI8wuD\n3zaXH+AUS+KEjq7w71Vfxr/j5ZW1URsPjgQx5A9AbrkN67cE6ig9wYTMTYgsJj6V\nBnvU6DHPgGeua+oXT1/LQrvziVGhpIdPUC0Kw5b/wTHrZpUcwUdL9tS7uSs+Vpib\nCLIze8zrZBlUVJcHBV5v1BPxmxRl8c4lrBj++Ae+oT0dkUk5nkXY8qaccYV1/5/c\nwhT9yWe8MPLHJyN98o5dkslCbMZn3rXHxa3X5dwyaFaSziL3vUbk8jPbjjmiP70u\nFwNE+so+v8XHXKzlQ9Ph+z2Fn0/6/fvLuHsCnJ6ajcou7M4yy/9rtZ3XRgjOQ/am\ngMXjcxwzZgH1qdLn9EnEdHkFeAWMwkaTxg4RGH5X/O3stbkjpFTr2B1iMGv6NwKJ\nlsCZN3JS\n=6k0B\n-----END PGP SIGNATURE-----", "payload": "tree 6d493dc5bfdc84b0e546f65d303cd9d8839a51e8\nparent e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1643386259 +0100\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1643532764 +0100\n\nCompress amount of hashed bytes for `isize` values in StableHasher\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8de59be93302781390491666409c35e60664c3fd", "html_url": "https://github.com/rust-lang/rust/commit/8de59be93302781390491666409c35e60664c3fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8de59be93302781390491666409c35e60664c3fd/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a", "html_url": "https://github.com/rust-lang/rust/commit/e0e70c0c2c4fc8d150a56c181994e3a3b3e9999a"}], "stats": {"total": 66, "additions": 57, "deletions": 9}, "files": [{"sha": "1495521ddbb5433967bdba3c79f06511e09d86c2", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8de59be93302781390491666409c35e60664c3fd/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de59be93302781390491666409c35e60664c3fd/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=8de59be93302781390491666409c35e60664c3fd", "patch": "@@ -137,7 +137,35 @@ impl Hasher for StableHasher {\n         // platforms. This is important for symbol hashes when cross compiling,\n         // for example. Sign extending here is preferable as it means that the\n         // same negative number hashes the same on both 32 and 64 bit platforms.\n-        self.state.write_i64((i as i64).to_le());\n+        let value = (i as i64).to_le() as u64;\n+\n+        // Cold path\n+        #[cold]\n+        #[inline(never)]\n+        fn hash_value(state: &mut SipHasher128, value: u64) {\n+            state.write_u8(0xFF);\n+            state.write_u64(value);\n+        }\n+\n+        // `isize` values often seem to have a small (positive) numeric value in practice.\n+        // To exploit this, if the value is small, we will hash a smaller amount of bytes.\n+        // However, we cannot just skip the leading zero bytes, as that would produce the same hash\n+        // e.g. if you hash two values that have the same bit pattern when they are swapped.\n+        // See https://github.com/rust-lang/rust/pull/93014 for context.\n+        //\n+        // Therefore, we employ the following strategy:\n+        // 1) When we encounter a value that fits within a single byte (the most common case), we\n+        // hash just that byte. This is the most common case that is being optimized. However, we do\n+        // not do this for the value 0xFF, as that is a reserved prefix (a bit like in UTF-8).\n+        // 2) When we encounter a larger value, we hash a \"marker\" 0xFF and then the corresponding\n+        // 8 bytes. Since this prefix cannot occur when we hash a single byte, when we hash two\n+        // `isize`s that fit within a different amount of bytes, they should always produce a different\n+        // byte stream for the hasher.\n+        if value < 0xFF {\n+            self.state.write_u8(value as u8);\n+        } else {\n+            hash_value(&mut self.state, value);\n+        }\n     }\n }\n "}, {"sha": "a84ee3da438c7635697657b83e8fbc573114fd8a", "filename": "compiler/rustc_data_structures/src/stable_hasher/tests.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8de59be93302781390491666409c35e60664c3fd/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de59be93302781390491666409c35e60664c3fd/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs?ref=8de59be93302781390491666409c35e60664c3fd", "patch": "@@ -39,7 +39,7 @@ fn test_hash_integers() {\n     test_isize.hash(&mut h);\n \n     // This depends on the hashing algorithm. See note at top of file.\n-    let expected = (2736651863462566372, 8121090595289675650);\n+    let expected = (1784307454142909076, 11471672289340283879);\n \n     assert_eq!(h.finalize(), expected);\n }\n@@ -67,7 +67,7 @@ fn test_hash_isize() {\n     test_isize.hash(&mut h);\n \n     // This depends on the hashing algorithm. See note at top of file.\n-    let expected = (14721296605626097289, 11385941877786388409);\n+    let expected = (2789913510339652884, 674280939192711005);\n \n     assert_eq!(h.finalize(), expected);\n }\n@@ -140,3 +140,23 @@ fn test_attribute_permutation() {\n     test_type!(i64);\n     test_type!(i128);\n }\n+\n+// Check that the `isize` hashing optimization does not produce the same hash when permuting two\n+// values.\n+#[test]\n+fn test_isize_compression() {\n+    fn check_hash(a: u64, b: u64) {\n+        let hash_a = hash(&(a as isize, b as isize));\n+        let hash_b = hash(&(b as isize, a as isize));\n+        assert_ne!(\n+            hash_a, hash_b,\n+            \"The hash stayed the same when permuting values `{a}` and `{b}!\",\n+        );\n+    }\n+\n+    check_hash(0xAA, 0xAAAA);\n+    check_hash(0xFF, 0xFFFF);\n+    check_hash(0xAAAA, 0xAAAAAA);\n+    check_hash(0xAAAAAA, 0xAAAAAAAA);\n+    check_hash(0xFF, 0xFFFFFFFFFFFFFFFF);\n+}"}, {"sha": "ac9a02cce048127d459d8716b3aa0be29a4808f9", "filename": "src/test/debuginfo/function-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8de59be93302781390491666409c35e60664c3fd/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de59be93302781390491666409c35e60664c3fd/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs?ref=8de59be93302781390491666409c35e60664c3fd", "patch": "@@ -37,7 +37,7 @@\n // Const generic parameter\n // gdb-command:info functions -q function_names::const_generic_fn.*\n // gdb-check:[...]static fn function_names::const_generic_fn_bool<false>();\n-// gdb-check:[...]static fn function_names::const_generic_fn_non_int<{CONST#fe3cfa0214ac55c7}>();\n+// gdb-check:[...]static fn function_names::const_generic_fn_non_int<{CONST#3fcd7c34c1555be6}>();\n // gdb-check:[...]static fn function_names::const_generic_fn_signed_int<-7>();\n // gdb-check:[...]static fn function_names::const_generic_fn_unsigned_int<14>();\n \n@@ -76,7 +76,7 @@\n // Const generic parameter\n // cdb-command:x a!function_names::const_generic_fn*\n // cdb-check:[...] a!function_names::const_generic_fn_bool<false> (void)\n-// cdb-check:[...] a!function_names::const_generic_fn_non_int<CONST$fe3cfa0214ac55c7> (void)\n+// cdb-check:[...] a!function_names::const_generic_fn_non_int<CONST$3fcd7c34c1555be6> (void)\n // cdb-check:[...] a!function_names::const_generic_fn_unsigned_int<14> (void)\n // cdb-check:[...] a!function_names::const_generic_fn_signed_int<-7> (void)\n "}, {"sha": "429e28e5241dc3f3f5b9873b0be323e049d49049", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8de59be93302781390491666409c35e60664c3fd/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8de59be93302781390491666409c35e60664c3fd/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=8de59be93302781390491666409c35e60664c3fd", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17h7c2c715a9b77648bE)\n+error: symbol-name(_ZN5basic4main17h611df9c6948c15f7E)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::h7c2c715a9b77648b)\n+error: demangling(basic::main::h611df9c6948c15f7)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "0e36747fb8071e81507a6be8b7461de34af8d547", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8de59be93302781390491666409c35e60664c3fd/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8de59be93302781390491666409c35e60664c3fd/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=8de59be93302781390491666409c35e60664c3fd", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h419983d0842a72aeE)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h5425dadb5b1e5fb6E)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h419983d0842a72ae)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h5425dadb5b1e5fb6)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}]}