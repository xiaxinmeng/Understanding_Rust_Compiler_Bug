{"sha": "18b851bc521d04cfd21b07725fbd915ad9764a6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4Yjg1MWJjNTIxZDA0Y2ZkMjFiMDc3MjVmYmQ5MTVhZDk3NjRhNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-22T00:31:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-22T00:31:29Z"}, "message": "Auto merge of #30944 - fhahn:issue-29789-use-constant2, r=nagisa\n\nThis PR for  #29789 uses `rustc::repr::mir::Constant` in `ExprKind::Repeat`, which seems to fit quite nicely. Is there a reason for not re-using that type?", "tree": {"sha": "db9721be567531755c2aa677ce329232b23d3a78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db9721be567531755c2aa677ce329232b23d3a78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18b851bc521d04cfd21b07725fbd915ad9764a6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18b851bc521d04cfd21b07725fbd915ad9764a6f", "html_url": "https://github.com/rust-lang/rust/commit/18b851bc521d04cfd21b07725fbd915ad9764a6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18b851bc521d04cfd21b07725fbd915ad9764a6f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54475e950cf3db909c4dec4a30c72f7636ab4e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/54475e950cf3db909c4dec4a30c72f7636ab4e07", "html_url": "https://github.com/rust-lang/rust/commit/54475e950cf3db909c4dec4a30c72f7636ab4e07"}, {"sha": "9884ff1dfbcb776c909ba575a90736326416fa22", "url": "https://api.github.com/repos/rust-lang/rust/commits/9884ff1dfbcb776c909ba575a90736326416fa22", "html_url": "https://github.com/rust-lang/rust/commit/9884ff1dfbcb776c909ba575a90736326416fa22"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "3e71d3ba9f397f2e44cf6c4566ad5e956bfd352d", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=18b851bc521d04cfd21b07725fbd915ad9764a6f", "patch": "@@ -683,7 +683,7 @@ pub enum Rvalue<'tcx> {\n     Use(Operand<'tcx>),\n \n     // [x; 32]\n-    Repeat(Operand<'tcx>, Constant<'tcx>),\n+    Repeat(Operand<'tcx>, TypedConstVal<'tcx>),\n \n     // &x or &mut x\n     Ref(Region, BorrowKind, Lvalue<'tcx>),\n@@ -891,6 +891,20 @@ pub struct Constant<'tcx> {\n     pub literal: Literal<'tcx>,\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n+pub struct TypedConstVal<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub span: Span,\n+    pub value: ConstVal\n+}\n+\n+impl<'tcx> Debug for TypedConstVal<'tcx> {\n+    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n+        try!(write!(fmt, \"const \"));\n+        fmt_const_val(fmt, &self.value)\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum ItemKind {\n     Constant,"}, {"sha": "a38ef078c6f8e713592f4de73350d4df3ce10f8a", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=18b851bc521d04cfd21b07725fbd915ad9764a6f", "patch": "@@ -213,9 +213,8 @@ macro_rules! make_mir_visitor {\n                     }\n \n                     Rvalue::Repeat(ref $($mutability)* value,\n-                                   ref $($mutability)* len) => {\n+                                   _) => {\n                         self.visit_operand(value);\n-                        self.visit_constant(len);\n                     }\n \n                     Rvalue::Ref(r, bk, ref $($mutability)* path) => {"}, {"sha": "c389e8e7330917f7d88dba8fce39998b93d1e2ac", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=18b851bc521d04cfd21b07725fbd915ad9764a6f", "patch": "@@ -44,7 +44,6 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n             ExprKind::Repeat { value, count } => {\n                 let value_operand = unpack!(block = this.as_operand(block, value));\n-                let count = this.as_constant(count);\n                 block.and(Rvalue::Repeat(value_operand, count))\n             }\n             ExprKind::Borrow { region, borrow_kind, arg } => {"}, {"sha": "d8a1930fd5c046688854f548f9239bbcbd10efe1", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=18b851bc521d04cfd21b07725fbd915ad9764a6f", "patch": "@@ -15,6 +15,7 @@ use hair::cx::block;\n use hair::cx::to_ref::ToRef;\n use rustc::front::map;\n use rustc::middle::def::Def;\n+use rustc::middle::const_eval;\n use rustc::middle::region::CodeExtent;\n use rustc::middle::pat_util;\n use rustc::middle::ty::{self, VariantDef, Ty};\n@@ -325,14 +326,11 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n \n             hir::ExprRepeat(ref v, ref c) => ExprKind::Repeat {\n                 value: v.to_ref(),\n-                count: Expr {\n+                count: TypedConstVal {\n                     ty: cx.tcx.expr_ty(c),\n-                    temp_lifetime: None,\n                     span: c.span,\n-                    kind: ExprKind::Literal {\n-                        literal: cx.const_eval_literal(c)\n-                    }\n-                }.to_ref()\n+                    value: const_eval::eval_const_expr(cx.tcx, c)\n+                }\n             },\n             hir::ExprRet(ref v) =>\n                 ExprKind::Return { value: v.to_ref() },"}, {"sha": "d87b25a094e2f0fc5fd5e7664516fff95ce6d784", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=18b851bc521d04cfd21b07725fbd915ad9764a6f", "patch": "@@ -14,7 +14,8 @@\n //! unit-tested and separated from the Rust source and compiler data\n //! structures.\n \n-use rustc::mir::repr::{BinOp, BorrowKind, Field, Literal, Mutability, UnOp, ItemKind};\n+use rustc::mir::repr::{BinOp, BorrowKind, Field, Literal, Mutability, UnOp, ItemKind,\n+    TypedConstVal};\n use rustc::middle::const_eval::ConstVal;\n use rustc::middle::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n@@ -213,10 +214,7 @@ pub enum ExprKind<'tcx> {\n     },\n     Repeat {\n         value: ExprRef<'tcx>,\n-        // FIXME(#29789): Add a separate hair::Constant<'tcx> so this could be more explicit about\n-        // its contained data. Currently this should only contain expression of ExprKind::Literal\n-        // kind.\n-        count: ExprRef<'tcx>,\n+        count: TypedConstVal<'tcx>,\n     },\n     Vec {\n         fields: Vec<ExprRef<'tcx>>,"}, {"sha": "66604786d467ffe4ef7073fd07c602c71c9e0737", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=18b851bc521d04cfd21b07725fbd915ad9764a6f", "patch": "@@ -143,9 +143,9 @@ impl<'a, 'tcx> EraseRegions<'a, 'tcx> {\n             Rvalue::Use(ref mut operand) => {\n                 self.erase_regions_operand(operand)\n             }\n-            Rvalue::Repeat(ref mut operand, ref mut constant) => {\n+            Rvalue::Repeat(ref mut operand, ref mut value) => {\n                 self.erase_regions_operand(operand);\n-                self.erase_regions_constant(constant);\n+                value.ty = self.tcx.erase_regions(&value.ty);\n             }\n             Rvalue::Ref(ref mut region, _, ref mut lvalue) => {\n                 *region = ty::ReStatic;"}, {"sha": "fa925241c72cd3734f2151b54e2f8c65e8e08dc8", "filename": "src/librustc_trans/trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b851bc521d04cfd21b07725fbd915ad9764a6f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs?ref=18b851bc521d04cfd21b07725fbd915ad9764a6f", "patch": "@@ -89,7 +89,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n             mir::Rvalue::Repeat(ref elem, ref count) => {\n                 let elem = self.trans_operand(bcx, elem);\n-                let size = self.trans_constant(bcx, count).immediate();\n+                let size = self.trans_constval(bcx, &count.value, count.ty).immediate();\n                 let base = expr::get_dataptr(bcx, dest.llval);\n                 tvec::iter_vec_raw(bcx, base, elem.ty, size, |bcx, llslot, _| {\n                     self.store_operand(bcx, llslot, elem);"}]}