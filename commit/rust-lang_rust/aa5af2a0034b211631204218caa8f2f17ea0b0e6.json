{"sha": "aa5af2a0034b211631204218caa8f2f17ea0b0e6", "node_id": "C_kwDOAAsO6NoAKGFhNWFmMmEwMDM0YjIxMTYzMTIwNDIxOGNhYThmMmYxN2VhMGIwZTY", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-01T19:05:49Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-13T01:38:38Z"}, "message": "Allow unsafe through inline const for THIR unsafety checker\n\nThe closure handling code is changed slightly to avoid allocation\nwhen THIR building failed.", "tree": {"sha": "6c91062cc002695da0520baffb6101a714f25964", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c91062cc002695da0520baffb6101a714f25964"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa5af2a0034b211631204218caa8f2f17ea0b0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5af2a0034b211631204218caa8f2f17ea0b0e6", "html_url": "https://github.com/rust-lang/rust/commit/aa5af2a0034b211631204218caa8f2f17ea0b0e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa5af2a0034b211631204218caa8f2f17ea0b0e6/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9342d1e73e28d496d88f24beaf5b629981fdb09d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9342d1e73e28d496d88f24beaf5b629981fdb09d", "html_url": "https://github.com/rust-lang/rust/commit/9342d1e73e28d496d88f24beaf5b629981fdb09d"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "dc7f37c256621e328e600ba1c99af555e1721e88", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/aa5af2a0034b211631204218caa8f2f17ea0b0e6/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5af2a0034b211631204218caa8f2f17ea0b0e6/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=aa5af2a0034b211631204218caa8f2f17ea0b0e6", "patch": "@@ -408,16 +408,29 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 } else {\n                     ty::WithOptConstParam::unknown(closure_id)\n                 };\n-                let (closure_thir, expr) = self.tcx.thir_body(closure_def).unwrap_or_else(|_| {\n-                    (self.tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0))\n-                });\n-                let closure_thir = &closure_thir.borrow();\n-                let hir_context = self.tcx.hir().local_def_id_to_hir_id(closure_id);\n-                let mut closure_visitor =\n-                    UnsafetyVisitor { thir: closure_thir, hir_context, ..*self };\n-                closure_visitor.visit_expr(&closure_thir[expr]);\n-                // Unsafe blocks can be used in closures, make sure to take it into account\n-                self.safety_context = closure_visitor.safety_context;\n+                if let Ok((closure_thir, expr)) = self.tcx.thir_body(closure_def) {\n+                    let closure_thir = &closure_thir.borrow();\n+                    let hir_context = self.tcx.hir().local_def_id_to_hir_id(closure_id);\n+                    let mut closure_visitor =\n+                        UnsafetyVisitor { thir: closure_thir, hir_context, ..*self };\n+                    closure_visitor.visit_expr(&closure_thir[expr]);\n+                    // Unsafe blocks can be used in closures, make sure to take it into account\n+                    self.safety_context = closure_visitor.safety_context;\n+                }\n+            }\n+            ExprKind::ConstBlock { did, substs: _ } => {\n+                let def_id = did.expect_local();\n+                if let Ok((inner_thir, expr)) =\n+                    self.tcx.thir_body(ty::WithOptConstParam::unknown(def_id))\n+                {\n+                    let inner_thir = &inner_thir.borrow();\n+                    let hir_context = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+                    let mut inner_visitor =\n+                        UnsafetyVisitor { thir: inner_thir, hir_context, ..*self };\n+                    inner_visitor.visit_expr(&inner_thir[expr]);\n+                    // Unsafe blocks can be used in inline consts, make sure to take it into account\n+                    self.safety_context = inner_visitor.safety_context;\n+                }\n             }\n             ExprKind::Field { lhs, .. } => {\n                 let lhs = &self.thir[lhs];\n@@ -612,8 +625,8 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n         return;\n     }\n \n-    // Closures are handled by their owner, if it has a body\n-    if tcx.is_closure(def.did.to_def_id()) {\n+    // Closures and inline consts are handled by their owner, if it has a body\n+    if tcx.is_typeck_child(def.did.to_def_id()) {\n         let hir = tcx.hir();\n         let owner = hir.enclosing_body_owner(hir.local_def_id_to_hir_id(def.did));\n         tcx.ensure().thir_check_unsafety(owner);"}]}