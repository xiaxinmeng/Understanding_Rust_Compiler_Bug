{"sha": "58e80400b24c09624ee602746c80d25aa18e0c86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZTgwNDAwYjI0YzA5NjI0ZWU2MDI3NDZjODBkMjVhYTE4ZTBjODY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-11-29T19:20:49Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-12-06T01:23:01Z"}, "message": "Include non-`pub` `use` and `extern crate` items in the crate metadata for macros 2.0.", "tree": {"sha": "3772eb1d7e0f314794119d9ac1614527afb57831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3772eb1d7e0f314794119d9ac1614527afb57831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e80400b24c09624ee602746c80d25aa18e0c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e80400b24c09624ee602746c80d25aa18e0c86", "html_url": "https://github.com/rust-lang/rust/commit/58e80400b24c09624ee602746c80d25aa18e0c86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e80400b24c09624ee602746c80d25aa18e0c86/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8503b3ff822c1ed01c89773d30e4e10b886d77a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8503b3ff822c1ed01c89773d30e4e10b886d77a5", "html_url": "https://github.com/rust-lang/rust/commit/8503b3ff822c1ed01c89773d30e4e10b886d77a5"}], "stats": {"total": 151, "additions": 126, "deletions": 25}, "files": [{"sha": "a82c2f08463a68af9ac7235912a86e8f084014d2", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -14,6 +14,7 @@ use syntax::ast;\n use syntax::ext::base::MacroKind;\n use syntax_pos::Span;\n use hir;\n+use ty;\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum CtorKind {\n@@ -126,6 +127,9 @@ pub struct Export {\n     pub def: Def,\n     /// The span of the target definition.\n     pub span: Span,\n+    /// The visibility of the export.\n+    /// We include non-`pub` exports for hygienic macros that get used from extern crates.\n+    pub vis: ty::Visibility,\n }\n \n impl CtorKind {"}, {"sha": "a02efe7bd862d40bcf95e591203d2ddbf7331414", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -1162,6 +1162,7 @@ for hir::def_id::DefIndex {\n impl_stable_hash_for!(struct hir::def::Export {\n     ident,\n     def,\n+    vis,\n     span\n });\n "}, {"sha": "93ef29855ce1d7e313d13715090fffb3db868f3d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -307,6 +307,15 @@ impl Visibility {\n \n         self.is_accessible_from(vis_restriction, tree)\n     }\n+\n+    // Returns true if this item is visible anywhere in the local crate.\n+    pub fn is_visible_locally(self) -> bool {\n+        match self {\n+            Visibility::Public => true,\n+            Visibility::Restricted(def_id) => def_id.is_local(),\n+            Visibility::Invisible => false,\n+        }\n+    }\n }\n \n #[derive(Clone, PartialEq, RustcDecodable, RustcEncodable, Copy)]"}, {"sha": "bcf749da8cd445cc56eee31fd20a34cc4d743ddf", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -305,12 +305,12 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n                 let mut add_child = |bfs_queue: &mut VecDeque<_>,\n                                      child: &def::Export,\n                                      parent: DefId| {\n-                    let child = child.def.def_id();\n-\n-                    if tcx.visibility(child) != ty::Visibility::Public {\n+                    if child.vis != ty::Visibility::Public {\n                         return;\n                     }\n \n+                    let child = child.def.def_id();\n+\n                     match visible_parent_map.entry(child) {\n                         Entry::Occupied(mut entry) => {\n                             // If `child` is defined in crate `cnum`, ensure"}, {"sha": "e2ad5fbf22b394bad23e2f83ac53a0b390484322", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -631,7 +631,12 @@ impl<'a, 'tcx> CrateMetadata {\n                         ext.kind()\n                     );\n                     let ident = Ident::with_empty_ctxt(name);\n-                    callback(def::Export { ident: ident, def: def, span: DUMMY_SP });\n+                    callback(def::Export {\n+                        ident: ident,\n+                        def: def,\n+                        vis: ty::Visibility::Public,\n+                        span: DUMMY_SP,\n+                    });\n                 }\n             }\n             return\n@@ -668,6 +673,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                 callback(def::Export {\n                                     def,\n                                     ident: Ident::from_str(&self.item_name(child_index)),\n+                                    vis: self.get_visibility(child_index),\n                                     span: self.entry(child_index).span.decode((self, sess)),\n                                 });\n                             }\n@@ -685,23 +691,26 @@ impl<'a, 'tcx> CrateMetadata {\n                 if let (Some(def), Some(name)) =\n                     (self.get_def(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n                     let ident = Ident::from_str(&name);\n-                    callback(def::Export { def: def, ident: ident, span: span });\n+                    let vis = self.get_visibility(child_index);\n+                    callback(def::Export { def, ident, vis, span });\n                     // For non-reexport structs and variants add their constructors to children.\n                     // Reexport lists automatically contain constructors when necessary.\n                     match def {\n                         Def::Struct(..) => {\n                             if let Some(ctor_def_id) = self.get_struct_ctor_def_id(child_index) {\n                                 let ctor_kind = self.get_ctor_kind(child_index);\n                                 let ctor_def = Def::StructCtor(ctor_def_id, ctor_kind);\n-                                callback(def::Export { def: ctor_def, ident: ident, span: span });\n+                                let vis = self.get_visibility(ctor_def_id.index);\n+                                callback(def::Export { def: ctor_def, ident, vis, span });\n                             }\n                         }\n                         Def::Variant(def_id) => {\n                             // Braced variants, unlike structs, generate unusable names in\n                             // value namespace, they are reserved for possible future use.\n                             let ctor_kind = self.get_ctor_kind(child_index);\n                             let ctor_def = Def::VariantCtor(def_id, ctor_kind);\n-                            callback(def::Export { def: ctor_def, ident: ident, span: span });\n+                            let vis = self.get_visibility(child_index);\n+                            callback(def::Export { def: ctor_def, ident, vis, span });\n                         }\n                         _ => {}\n                     }"}, {"sha": "7de3b8a4264e3eb76065b5e38cf775dec041483e", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -506,9 +506,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n \n         let data = ModData {\n             reexports: match tcx.module_exports(def_id) {\n-                Some(ref exports) if *vis == hir::Public => {\n-                    self.lazy_seq_from_slice(exports.as_slice())\n-                }\n+                Some(ref exports) => self.lazy_seq_from_slice(exports.as_slice()),\n                 _ => LazySeq::empty(),\n             },\n         };"}, {"sha": "27898b5dd64bc8c2e5e21f582d7273e571f90bf7", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -331,7 +331,9 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             if let Some(exports) = self.tcx.module_exports(def_id) {\n                 for export in exports.iter() {\n                     if let Some(node_id) = self.tcx.hir.as_local_node_id(export.def.def_id()) {\n-                        self.update(node_id, Some(AccessLevel::Exported));\n+                        if export.vis == ty::Visibility::Public {\n+                            self.update(node_id, Some(AccessLevel::Exported));\n+                        }\n                     }\n                 }\n             }\n@@ -365,6 +367,15 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             for id in &module.item_ids {\n                 self.update(id.id, level);\n             }\n+            let def_id = self.tcx.hir.local_def_id(module_id);\n+            if let Some(exports) = self.tcx.module_exports(def_id) {\n+                for export in exports.iter() {\n+                    if let Some(node_id) = self.tcx.hir.as_local_node_id(export.def.def_id()) {\n+                        self.update(node_id, level);\n+                    }\n+                }\n+            }\n+\n             if module_id == ast::CRATE_NODE_ID {\n                 break\n             }"}, {"sha": "f19c1998d10d2c2f26191fee432821a4f78974c3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -466,11 +466,8 @@ impl<'a> Resolver<'a> {\n \n     /// Builds the reduced graph for a single item in an external crate.\n     fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'a>, child: Export) {\n-        let ident = child.ident;\n-        let def = child.def;\n+        let Export { ident, def, vis, span } = child;\n         let def_id = def.def_id();\n-        let vis = self.cstore.visibility_untracked(def_id);\n-        let span = child.span;\n         let expansion = Mark::root(); // FIXME(jseyfried) intercrate hygiene\n         match def {\n             Def::Mod(..) | Def::Enum(..) => {\n@@ -674,7 +671,8 @@ impl<'a> Resolver<'a> {\n             let ident = Ident::with_empty_ctxt(name);\n             let result = self.resolve_ident_in_module(module, ident, MacroNS, false, false, span);\n             if let Ok(binding) = result {\n-                self.macro_exports.push(Export { ident: ident, def: binding.def(), span: span });\n+                let (def, vis) = (binding.def(), binding.vis);\n+                self.macro_exports.push(Export { ident, def, vis, span });\n             } else {\n                 span_err!(self.session, span, E0470, \"reexported macro not found\");\n             }"}, {"sha": "1f126fcdd81669922dbd446cbff4cfc0d239daad", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -1107,7 +1107,11 @@ impl<'a> NameBinding<'a> {\n \n     // We sometimes need to treat variants as `pub` for backwards compatibility\n     fn pseudo_vis(&self) -> ty::Visibility {\n-        if self.is_variant() { ty::Visibility::Public } else { self.vis }\n+        if self.is_variant() && self.def().def_id().is_local() {\n+            ty::Visibility::Public\n+        } else {\n+            self.vis\n+        }\n     }\n \n     fn is_variant(&self) -> bool {\n@@ -3602,9 +3606,9 @@ impl<'a> Resolver<'a> {\n             self.populate_module_if_necessary(in_module);\n \n             in_module.for_each_child_stable(|ident, _, name_binding| {\n-                // abort if the module is already found\n-                if let Some(_) = result {\n-                    return ();\n+                // abort if the module is already found or if name_binding is private external\n+                if result.is_some() || !name_binding.vis.is_visible_locally() {\n+                    return\n                 }\n                 if let Some(module) = name_binding.module() {\n                     // form the path"}, {"sha": "ad1e70a5c6ec7e643cac21727a3d51396bf09ead", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -746,8 +746,12 @@ impl<'a> Resolver<'a> {\n             }));\n             if attr::contains_name(&item.attrs, \"macro_export\") {\n                 let def = Def::Macro(def_id, MacroKind::Bang);\n-                self.macro_exports\n-                    .push(Export { ident: ident.modern(), def: def, span: item.span });\n+                self.macro_exports.push(Export {\n+                    ident: ident.modern(),\n+                    def: def,\n+                    vis: ty::Visibility::Public,\n+                    span: item.span,\n+                });\n             } else {\n                 self.unused_macros.insert(def_id);\n             }"}, {"sha": "e885ec53631bd14977d1dfdfa020f8990e1f4016", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -845,8 +845,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 None => continue,\n             };\n \n-            if binding.vis == ty::Visibility::Public &&\n-               (binding.is_import() || binding.is_macro_def()) {\n+            if binding.is_import() || binding.is_macro_def() {\n                 let def = binding.def();\n                 if def != Def::Err {\n                     if !def.def_id().is_local() {\n@@ -862,7 +861,12 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                                 .emit();\n                         }\n                     }\n-                    reexports.push(Export { ident: ident.modern(), def: def, span: binding.span });\n+                    reexports.push(Export {\n+                        ident: ident.modern(),\n+                        def: def,\n+                        span: binding.span,\n+                        vis: binding.vis,\n+                    });\n                 }\n             }\n "}, {"sha": "2ccd043097f8e3b56ce46f04e14e2c77900912bb", "filename": "src/test/run-pass/hygiene/auxiliary/xcrate.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Ftest%2Frun-pass%2Fhygiene%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Ftest%2Frun-pass%2Fhygiene%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fauxiliary%2Fxcrate.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(decl_macro)]\n+#![allow(unused)]\n+\n+pub use bar::test;\n+\n+extern crate std as foo;\n+\n+pub fn f() {}\n+use f as f2;\n+\n+mod bar {\n+    pub fn g() {}\n+    use baz::h;\n+\n+    pub macro test() {\n+        use std::mem;\n+        use foo::cell;\n+        ::f();\n+        ::f2();\n+        g();\n+        h();\n+        ::bar::h();\n+    }\n+}\n+\n+mod baz {\n+    pub fn h() {}\n+}"}, {"sha": "6df3a34d3c87f0dd619081ca70db90d84ed63ead", "filename": "src/test/run-pass/hygiene/xcrate.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Ftest%2Frun-pass%2Fhygiene%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e80400b24c09624ee602746c80d25aa18e0c86/src%2Ftest%2Frun-pass%2Fhygiene%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fxcrate.rs?ref=58e80400b24c09624ee602746c80d25aa18e0c86", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty pretty-printing is unhygienic\n+\n+// aux-build:xcrate.rs\n+\n+#![feature(decl_macro)]\n+\n+extern crate xcrate;\n+\n+fn main() {\n+    xcrate::test!();\n+}"}]}