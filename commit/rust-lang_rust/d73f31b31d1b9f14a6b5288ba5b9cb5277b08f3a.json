{"sha": "d73f31b31d1b9f14a6b5288ba5b9cb5277b08f3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3M2YzMWIzMWQxYjlmMTRhNmI1Mjg4YmE1YjljYjUyNzdiMDhmM2E=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T19:50:02Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T19:50:02Z"}, "message": "Create Char trait", "tree": {"sha": "45ca046d2e4a890fd3c7a804070d7db5a7193841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45ca046d2e4a890fd3c7a804070d7db5a7193841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d73f31b31d1b9f14a6b5288ba5b9cb5277b08f3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d73f31b31d1b9f14a6b5288ba5b9cb5277b08f3a", "html_url": "https://github.com/rust-lang/rust/commit/d73f31b31d1b9f14a6b5288ba5b9cb5277b08f3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d73f31b31d1b9f14a6b5288ba5b9cb5277b08f3a/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a323c1b2d755b86b1987bba3454bb2f0f92b1c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a323c1b2d755b86b1987bba3454bb2f0f92b1c8", "html_url": "https://github.com/rust-lang/rust/commit/3a323c1b2d755b86b1987bba3454bb2f0f92b1c8"}], "stats": {"total": 158, "additions": 102, "deletions": 56}, "files": [{"sha": "a3957e1bbfc975bb828cbe21df35c1e923de8472", "filename": "src/libcore/char.rs", "status": "modified", "additions": 101, "deletions": 56, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/d73f31b31d1b9f14a6b5288ba5b9cb5277b08f3a/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d73f31b31d1b9f14a6b5288ba5b9cb5277b08f3a/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=d73f31b31d1b9f14a6b5288ba5b9cb5277b08f3a", "patch": "@@ -244,6 +244,53 @@ pub fn len_utf8_bytes(c: char) -> uint {\n     else { fail!(\"invalid character!\") }\n }\n \n+pub trait Char {\n+    fn is_alphabetic(&self) -> bool;\n+    fn is_XID_start(&self) -> bool;\n+    fn is_XID_continue(&self) -> bool;\n+    fn is_lowercase(&self) -> bool;\n+    fn is_uppercase(&self) -> bool;\n+    fn is_whitespace(&self) -> bool;\n+    fn is_alphanumeric(&self) -> bool;\n+    fn is_digit(&self) -> bool;\n+    fn is_digit_radix(&self, radix: uint) -> bool;\n+    fn to_digit(&self, radix: uint) -> Option<uint>;\n+    fn from_digit(num: uint, radix: uint) -> Option<char>;\n+    fn escape_unicode(&self) -> ~str;\n+    fn escape_default(&self) -> ~str;\n+    fn len_utf8_bytes(&self) -> uint;\n+}\n+\n+impl Char for char {\n+    fn is_alphabetic(&self) -> bool { is_alphabetic(*self) }\n+\n+    fn is_XID_start(&self) -> bool { is_XID_start(*self) }\n+\n+    fn is_XID_continue(&self) -> bool { is_XID_continue(*self) }\n+\n+    fn is_lowercase(&self) -> bool { is_lowercase(*self) }\n+\n+    fn is_uppercase(&self) -> bool { is_uppercase(*self) }\n+\n+    fn is_whitespace(&self) -> bool { is_whitespace(*self) }\n+\n+    fn is_alphanumeric(&self) -> bool { is_alphanumeric(*self) }\n+\n+    fn is_digit(&self) -> bool { is_digit(*self) }\n+\n+    fn is_digit_radix(&self, radix: uint) -> bool { is_digit_radix(*self, radix) }\n+\n+    fn to_digit(&self, radix: uint) -> Option<uint> { to_digit(*self, radix) }\n+\n+    fn from_digit(num: uint, radix: uint) -> Option<char> { from_digit(num, radix) }\n+\n+    fn escape_unicode(&self) -> ~str { escape_unicode(*self) }\n+\n+    fn escape_default(&self) -> ~str { escape_default(*self) }\n+\n+    fn len_utf8_bytes(&self) -> uint { len_utf8_bytes(*self) }\n+}\n+\n #[cfg(not(test))]\n impl Eq for char {\n     #[inline(always)]\n@@ -266,84 +313,82 @@ impl Ord for char {\n \n #[test]\n fn test_is_lowercase() {\n-    assert!(is_lowercase('a'));\n-    assert!(is_lowercase('\u00f6'));\n-    assert!(is_lowercase('\u00df'));\n-    assert!(!is_lowercase('\u00dc'));\n-    assert!(!is_lowercase('P'));\n+    assert!('a'.is_lowercase());\n+    assert!('\u00f6'.is_lowercase());\n+    assert!('\u00df'.is_lowercase());\n+    assert!(!'\u00dc'.is_lowercase());\n+    assert!(!'P'.is_lowercase());\n }\n \n #[test]\n fn test_is_uppercase() {\n-    assert!(!is_uppercase('h'));\n-    assert!(!is_uppercase('\u00e4'));\n-    assert!(!is_uppercase('\u00df'));\n-    assert!(is_uppercase('\u00d6'));\n-    assert!(is_uppercase('T'));\n+    assert!(!'h'.is_uppercase());\n+    assert!(!'\u00e4'.is_uppercase());\n+    assert!(!'\u00df'.is_uppercase());\n+    assert!('\u00d6'.is_uppercase());\n+    assert!('T'.is_uppercase());\n }\n \n #[test]\n fn test_is_whitespace() {\n-    assert!(is_whitespace(' '));\n-    assert!(is_whitespace('\\u2007'));\n-    assert!(is_whitespace('\\t'));\n-    assert!(is_whitespace('\\n'));\n-\n-    assert!(!is_whitespace('a'));\n-    assert!(!is_whitespace('_'));\n-    assert!(!is_whitespace('\\u0000'));\n+    assert!(' '.is_whitespace());\n+    assert!('\\u2007'.is_whitespace());\n+    assert!('\\t'.is_whitespace());\n+    assert!('\\n'.is_whitespace());\n+    assert!(!'a'.is_whitespace());\n+    assert!(!'_'.is_whitespace());\n+    assert!(!'\\u0000'.is_whitespace());\n }\n \n #[test]\n fn test_to_digit() {\n-    assert_eq!(to_digit('0', 10u), Some(0u));\n-    assert_eq!(to_digit('1', 2u), Some(1u));\n-    assert_eq!(to_digit('2', 3u), Some(2u));\n-    assert_eq!(to_digit('9', 10u), Some(9u));\n-    assert_eq!(to_digit('a', 16u), Some(10u));\n-    assert_eq!(to_digit('A', 16u), Some(10u));\n-    assert_eq!(to_digit('b', 16u), Some(11u));\n-    assert_eq!(to_digit('B', 16u), Some(11u));\n-    assert_eq!(to_digit('z', 36u), Some(35u));\n-    assert_eq!(to_digit('Z', 36u), Some(35u));\n-\n-    assert!(to_digit(' ', 10u).is_none());\n-    assert!(to_digit('$', 36u).is_none());\n+    assert_eq!('0'.to_digit(10u), Some(0u));\n+    assert_eq!('1'.to_digit(2u), Some(1u));\n+    assert_eq!('2'.to_digit(3u), Some(2u));\n+    assert_eq!('9'.to_digit(10u), Some(9u));\n+    assert_eq!('a'.to_digit(16u), Some(10u));\n+    assert_eq!('A'.to_digit(16u), Some(10u));\n+    assert_eq!('b'.to_digit(16u), Some(11u));\n+    assert_eq!('B'.to_digit(16u), Some(11u));\n+    assert_eq!('z'.to_digit(36u), Some(35u));\n+    assert_eq!('Z'.to_digit(36u), Some(35u));\n+    assert_eq!(' '.to_digit(10u), None);\n+    assert_eq!('$'.to_digit(36u), None);\n }\n \n #[test]\n fn test_is_digit() {\n-   assert!(is_digit('2'));\n-   assert!(is_digit('7'));\n-   assert!(! is_digit('c'));\n-   assert!(! is_digit('i'));\n-   assert!(! is_digit('z'));\n-   assert!(! is_digit('Q'));\n+   assert!('2'.is_digit());\n+   assert!('7'.is_digit());\n+   assert!(!'c'.is_digit());\n+   assert!(!'i'.is_digit());\n+   assert!(!'z'.is_digit());\n+   assert!(!'Q'.is_digit());\n }\n \n #[test]\n fn test_escape_default() {\n-    assert_eq!(escape_default('\\n'), ~\"\\\\n\");\n-    assert_eq!(escape_default('\\r'), ~\"\\\\r\");\n-    assert_eq!(escape_default('\\''), ~\"\\\\'\");\n-    assert_eq!(escape_default('\"'), ~\"\\\\\\\"\");\n-    assert_eq!(escape_default(' '), ~\" \");\n-    assert_eq!(escape_default('a'), ~\"a\");\n-    assert_eq!(escape_default('~'), ~\"~\");\n-    assert_eq!(escape_default('\\x00'), ~\"\\\\x00\");\n-    assert_eq!(escape_default('\\x1f'), ~\"\\\\x1f\");\n-    assert_eq!(escape_default('\\x7f'), ~\"\\\\x7f\");\n-    assert_eq!(escape_default('\\xff'), ~\"\\\\xff\");\n-    assert_eq!(escape_default('\\u011b'), ~\"\\\\u011b\");\n-    assert_eq!(escape_default('\\U0001d4b6'), ~\"\\\\U0001d4b6\");\n+    assert_eq!('\\n'.escape_default(), ~\"\\\\n\");\n+    assert_eq!('\\r'.escape_default(), ~\"\\\\r\");\n+    assert_eq!('\\''.escape_default(), ~\"\\\\'\");\n+    assert_eq!('\"'.escape_default(), ~\"\\\\\\\"\");\n+    assert_eq!(' '.escape_default(), ~\" \");\n+    assert_eq!('a'.escape_default(), ~\"a\");\n+    assert_eq!('~'.escape_default(), ~\"~\");\n+    assert_eq!('\\x00'.escape_default(), ~\"\\\\x00\");\n+    assert_eq!('\\x1f'.escape_default(), ~\"\\\\x1f\");\n+    assert_eq!('\\x7f'.escape_default(), ~\"\\\\x7f\");\n+    assert_eq!('\\xff'.escape_default(), ~\"\\\\xff\");\n+    assert_eq!('\\u011b'.escape_default(), ~\"\\\\u011b\");\n+    assert_eq!('\\U0001d4b6'.escape_default(), ~\"\\\\U0001d4b6\");\n }\n \n #[test]\n fn test_escape_unicode() {\n-    assert_eq!(escape_unicode('\\x00'), ~\"\\\\x00\");\n-    assert_eq!(escape_unicode('\\n'), ~\"\\\\x0a\");\n-    assert_eq!(escape_unicode(' '), ~\"\\\\x20\");\n-    assert_eq!(escape_unicode('a'), ~\"\\\\x61\");\n-    assert_eq!(escape_unicode('\\u011b'), ~\"\\\\u011b\");\n-    assert_eq!(escape_unicode('\\U0001d4b6'), ~\"\\\\U0001d4b6\");\n+    assert_eq!('\\x00'.escape_unicode(), ~\"\\\\x00\");\n+    assert_eq!('\\n'.escape_unicode(), ~\"\\\\x0a\");\n+    assert_eq!(' '.escape_unicode(), ~\"\\\\x20\");\n+    assert_eq!('a'.escape_unicode(), ~\"\\\\x61\");\n+    assert_eq!('\\u011b'.escape_unicode(), ~\"\\\\u011b\");\n+    assert_eq!('\\U0001d4b6'.escape_unicode(), ~\"\\\\U0001d4b6\");\n }"}, {"sha": "78273c51b526a532118fd35c936409a1638ebdb5", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d73f31b31d1b9f14a6b5288ba5b9cb5277b08f3a/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d73f31b31d1b9f14a6b5288ba5b9cb5277b08f3a/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=d73f31b31d1b9f14a6b5288ba5b9cb5277b08f3a", "patch": "@@ -29,6 +29,7 @@ pub use io::{print, println};\n \n pub use clone::{Clone, DeepClone};\n pub use cmp::{Eq, ApproxEq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater, Equiv};\n+pub use char::Char;\n pub use container::{Container, Mutable, Map, Set};\n pub use hash::Hash;\n pub use old_iter::{BaseIter, ReverseIter, MutableIter, ExtendedIter, EqIter};"}]}