{"sha": "888657e09a2133fc105382136f61915086144e3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ODY1N2UwOWEyMTMzZmMxMDUzODIxMzZmNjE5MTUwODYxNDRlM2Y=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-08-08T16:13:43Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-08-08T16:13:43Z"}, "message": "Fix ICE in `loops` module", "tree": {"sha": "28a637f5fb6cbbb7a5add66f9a19796347423fe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28a637f5fb6cbbb7a5add66f9a19796347423fe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/888657e09a2133fc105382136f61915086144e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/888657e09a2133fc105382136f61915086144e3f", "html_url": "https://github.com/rust-lang/rust/commit/888657e09a2133fc105382136f61915086144e3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/888657e09a2133fc105382136f61915086144e3f/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d4c3379d355c436342113a302421faf3990fb29", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4c3379d355c436342113a302421faf3990fb29", "html_url": "https://github.com/rust-lang/rust/commit/2d4c3379d355c436342113a302421faf3990fb29"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "1729fea7bc87074091bebb14ad877d4ddce32d59", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/888657e09a2133fc105382136f61915086144e3f/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888657e09a2133fc105382136f61915086144e3f/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=888657e09a2133fc105382136f61915086144e3f", "patch": "@@ -2374,7 +2374,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n                 match_type(cx, ty, &paths::BTREEMAP) ||\n                 is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n                 if method.ident.name == sym!(len) {\n-                    let span = shorten_span(expr, sym!(collect));\n+                    let span = shorten_needless_collect_span(expr);\n                     span_lint_and_sugg(\n                         cx,\n                         NEEDLESS_COLLECT,\n@@ -2386,20 +2386,20 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n                     );\n                 }\n                 if method.ident.name == sym!(is_empty) {\n-                    let span = shorten_span(expr, sym!(iter));\n+                    let span = shorten_needless_collect_span(expr);\n                     span_lint_and_sugg(\n                         cx,\n                         NEEDLESS_COLLECT,\n                         span,\n                         NEEDLESS_COLLECT_MSG,\n                         \"replace with\",\n-                        \"get(0).is_none()\".to_string(),\n+                        \"next().is_none()\".to_string(),\n                         Applicability::MachineApplicable,\n                     );\n                 }\n                 if method.ident.name == sym!(contains) {\n                     let contains_arg = snippet(cx, args[1].span, \"??\");\n-                    let span = shorten_span(expr, sym!(collect));\n+                    let span = shorten_needless_collect_span(expr);\n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_COLLECT,\n@@ -2579,13 +2579,13 @@ fn detect_iter_and_into_iters<'tcx>(block: &'tcx Block<'tcx>, identifier: Ident)\n     }\n }\n \n-fn shorten_span(expr: &Expr<'_>, target_fn_name: Symbol) -> Span {\n-    let mut current_expr = expr;\n-    while let ExprKind::MethodCall(ref path, ref span, ref args, _) = current_expr.kind {\n-        if path.ident.name == target_fn_name {\n+fn shorten_needless_collect_span(expr: &Expr<'_>) -> Span {\n+    if_chain! {\n+        if let ExprKind::MethodCall(.., args, _) = &expr.kind;\n+        if let ExprKind::MethodCall(_, span, ..) = &args[0].kind;\n+        then {\n             return expr.span.with_lo(span.lo());\n         }\n-        current_expr = &args[0];\n     }\n-    unreachable!()\n+    unreachable!();\n }"}, {"sha": "68afa8f8c3a84bfabbf06f4778fa5308d103f9f3", "filename": "tests/ui/crashes/ice-5872.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/888657e09a2133fc105382136f61915086144e3f/tests%2Fui%2Fcrashes%2Fice-5872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888657e09a2133fc105382136f61915086144e3f/tests%2Fui%2Fcrashes%2Fice-5872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5872.rs?ref=888657e09a2133fc105382136f61915086144e3f", "patch": "@@ -0,0 +1,5 @@\n+#![warn(clippy::needless_collect)]\n+\n+fn main() {\n+    let _ = vec![1, 2, 3].into_iter().collect::<Vec<_>>().is_empty();\n+}"}, {"sha": "a60ca345cf78d473213dad95d29cbdae97d765ac", "filename": "tests/ui/crashes/ice-5872.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/888657e09a2133fc105382136f61915086144e3f/tests%2Fui%2Fcrashes%2Fice-5872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888657e09a2133fc105382136f61915086144e3f/tests%2Fui%2Fcrashes%2Fice-5872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5872.stderr?ref=888657e09a2133fc105382136f61915086144e3f", "patch": "@@ -0,0 +1,10 @@\n+error: avoid using `collect()` when not needed\n+  --> $DIR/ice-5872.rs:4:39\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<_>>().is_empty();\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `next().is_none()`\n+   |\n+   = note: `-D clippy::needless-collect` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7f2fcf02f6b5bfb6140c7af508af3ee4e8f62765", "filename": "tests/ui/needless_collect.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888657e09a2133fc105382136f61915086144e3f/tests%2Fui%2Fneedless_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/888657e09a2133fc105382136f61915086144e3f/tests%2Fui%2Fneedless_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.fixed?ref=888657e09a2133fc105382136f61915086144e3f", "patch": "@@ -5,11 +5,11 @@\n use std::collections::{BTreeSet, HashMap, HashSet};\n \n #[warn(clippy::needless_collect)]\n-#[allow(unused_variables, clippy::iter_cloned_collect)]\n+#[allow(unused_variables, clippy::iter_cloned_collect, clippy::iter_next_slice)]\n fn main() {\n     let sample = [1; 5];\n     let len = sample.iter().count();\n-    if sample.get(0).is_none() {\n+    if sample.iter().next().is_none() {\n         // Empty\n     }\n     sample.iter().cloned().any(|x| x == 1);"}, {"sha": "788a9eb3264ee6c6cf972eeccc45d2c45b7542e2", "filename": "tests/ui/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888657e09a2133fc105382136f61915086144e3f/tests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888657e09a2133fc105382136f61915086144e3f/tests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.rs?ref=888657e09a2133fc105382136f61915086144e3f", "patch": "@@ -5,7 +5,7 @@\n use std::collections::{BTreeSet, HashMap, HashSet};\n \n #[warn(clippy::needless_collect)]\n-#[allow(unused_variables, clippy::iter_cloned_collect)]\n+#[allow(unused_variables, clippy::iter_cloned_collect, clippy::iter_next_slice)]\n fn main() {\n     let sample = [1; 5];\n     let len = sample.iter().collect::<Vec<_>>().len();"}, {"sha": "2a9539d59759d6f73798582868f6f6da667bf6b7", "filename": "tests/ui/needless_collect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888657e09a2133fc105382136f61915086144e3f/tests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888657e09a2133fc105382136f61915086144e3f/tests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.stderr?ref=888657e09a2133fc105382136f61915086144e3f", "patch": "@@ -7,10 +7,10 @@ LL |     let len = sample.iter().collect::<Vec<_>>().len();\n    = note: `-D clippy::needless-collect` implied by `-D warnings`\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:12:15\n+  --> $DIR/needless_collect.rs:12:22\n    |\n LL |     if sample.iter().collect::<Vec<_>>().is_empty() {\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `get(0).is_none()`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `next().is_none()`\n \n error: avoid using `collect()` when not needed\n   --> $DIR/needless_collect.rs:15:28"}]}