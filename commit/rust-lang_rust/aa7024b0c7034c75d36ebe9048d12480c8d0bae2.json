{"sha": "aa7024b0c7034c75d36ebe9048d12480c8d0bae2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNzAyNGIwYzcwMzRjNzVkMzZlYmU5MDQ4ZDEyNDgwYzhkMGJhZTI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-04T13:05:27Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T22:03:51Z"}, "message": "Add VecMap to rustc_data_structures", "tree": {"sha": "34fbd1ddf09aebe94e742cea3480ddbb79e56d4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34fbd1ddf09aebe94e742cea3480ddbb79e56d4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa7024b0c7034c75d36ebe9048d12480c8d0bae2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC+l8kACgkQgTGiTgx5\n76++ZhAAjOEG5trR8S5Eliiy8puSKU/jDmhAf+yklx17utzdACQv0aRiCUx76WyZ\n4xVOMH11ab8GRsBvEOOpayucn6HU/AMUTmZFju8wdCZZJ/rSnK1aHzMCRf+efgaQ\n3wK2YhnFkNVINCE/9bVj2+12rMXn9de/BuQ7RUh3SRCRH1d+LH72NCcEGGVDEKyf\n1kBWuloa4m0pQPwpA9+eVYlgZEye0c1Ad42kylywm+MT0H6cmb/z+9BAi2W5C4Bn\nkbajKuYVXoDpd04VV5xVXd4y70evyxI+aS3jdK+WOG9RI6/Ruvuv6oL2NL1Y38jY\n0+ElNWBRIlxAHJs5ra6EpnaF+01EM9IUbj9GhToBhwtekl0ZXxB2Y9CxROiTYtPH\notbJr7lBCIx4uH4Y/3qIheiUFMlLkI1YKXkR6+W1STSB7yGnMrtjSH29lyQPNJBC\nBnewAxCnNDNULfPn/6N++/shjzkjd5GmZOhx1e6XlyJpeh39lIf2ooVUohGgo/c7\nQd+ZJw265VjkKlBRiVkMhRp8TXMl1iCvCm/3tumYCPdcbk7F8BsMLxh2cgd79yEa\nHVrmXOGTchIoYquhaHln3zbCipSuoW8GRPA1o0MAFeeMbuGtlx0EVE/cOMB9ntn3\n5eGwI+SxpMpD6tmN8bnf0IxdsCpE+lVzc3LRlZA7NPkHcfOXXKE=\n=cpa+\n-----END PGP SIGNATURE-----", "payload": "tree 34fbd1ddf09aebe94e742cea3480ddbb79e56d4c\nparent 022720bfccd46400e69def42f4647fe4059ad951\nauthor Santiago Pastorino <spastorino@gmail.com> 1622811927 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623103431 -0300\n\nAdd VecMap to rustc_data_structures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7024b0c7034c75d36ebe9048d12480c8d0bae2", "html_url": "https://github.com/rust-lang/rust/commit/aa7024b0c7034c75d36ebe9048d12480c8d0bae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa7024b0c7034c75d36ebe9048d12480c8d0bae2/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "022720bfccd46400e69def42f4647fe4059ad951", "url": "https://api.github.com/repos/rust-lang/rust/commits/022720bfccd46400e69def42f4647fe4059ad951", "html_url": "https://github.com/rust-lang/rust/commit/022720bfccd46400e69def42f4647fe4059ad951"}], "stats": {"total": 186, "additions": 186, "deletions": 0}, "files": [{"sha": "bbfe225e23ebf8c06c300167efdd9a6586b79e22", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa7024b0c7034c75d36ebe9048d12480c8d0bae2/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7024b0c7034c75d36ebe9048d12480c8d0bae2/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=aa7024b0c7034c75d36ebe9048d12480c8d0bae2", "patch": "@@ -96,6 +96,7 @@ pub mod thin_vec;\n pub mod tiny_list;\n pub mod transitive_relation;\n pub mod vec_linked_list;\n+pub mod vec_map;\n pub mod work_queue;\n pub use atomic_ref::AtomicRef;\n pub mod frozen;"}, {"sha": "eca4ff212acae6654f713edc5feca3fdc168f6c3", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/aa7024b0c7034c75d36ebe9048d12480c8d0bae2/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7024b0c7034c75d36ebe9048d12480c8d0bae2/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=aa7024b0c7034c75d36ebe9048d12480c8d0bae2", "patch": "@@ -0,0 +1,137 @@\n+use std::borrow::Borrow;\n+use std::iter::FromIterator;\n+use std::slice::{Iter, IterMut};\n+use std::vec::IntoIter;\n+\n+use crate::stable_hasher::{HashStable, StableHasher};\n+\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct VecMap<K, V>(Vec<(K, V)>);\n+\n+impl<K, V> VecMap<K, V>\n+where\n+    K: PartialEq,\n+{\n+    pub fn new() -> Self {\n+        VecMap(Default::default())\n+    }\n+\n+    pub fn insert(&mut self, k: K, v: V) -> Option<V> {\n+        if let Some(elem) = self.0.iter_mut().find(|(key, _)| *key == k) {\n+            Some(std::mem::replace(&mut elem.1, v))\n+        } else {\n+            self.0.push((k, v));\n+            None\n+        }\n+    }\n+\n+    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Eq,\n+    {\n+        self.0.iter().find(|(key, _)| k == key.borrow()).map(|elem| &elem.1)\n+    }\n+\n+    pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool\n+    where\n+        K: Borrow<Q>,\n+        Q: Eq,\n+    {\n+        self.get(k).is_some()\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.0.is_empty()\n+    }\n+\n+    pub fn iter(&self) -> Iter<'_, (K, V)> {\n+        self.into_iter()\n+    }\n+\n+    pub fn iter_mut(&mut self) -> IterMut<'_, (K, V)> {\n+        self.into_iter()\n+    }\n+}\n+\n+impl<K, V> Default for VecMap<K, V> {\n+    #[inline]\n+    fn default() -> Self {\n+        Self(Default::default())\n+    }\n+}\n+\n+impl<K, V> From<Vec<(K, V)>> for VecMap<K, V> {\n+    fn from(vec: Vec<(K, V)>) -> Self {\n+        Self(vec)\n+    }\n+}\n+\n+impl<K, V> Into<Vec<(K, V)>> for VecMap<K, V> {\n+    fn into(self) -> Vec<(K, V)> {\n+        self.0\n+    }\n+}\n+\n+impl<K, V> FromIterator<(K, V)> for VecMap<K, V> {\n+    fn from_iter<I: IntoIterator<Item = (K, V)>>(iter: I) -> Self {\n+        Self(iter.into_iter().collect())\n+    }\n+}\n+\n+impl<'a, K, V> IntoIterator for &'a VecMap<K, V> {\n+    type Item = &'a (K, V);\n+    type IntoIter = Iter<'a, (K, V)>;\n+\n+    #[inline]\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.0.iter()\n+    }\n+}\n+\n+impl<'a, K, V> IntoIterator for &'a mut VecMap<K, V> {\n+    type Item = &'a mut (K, V);\n+    type IntoIter = IterMut<'a, (K, V)>;\n+\n+    #[inline]\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.0.iter_mut()\n+    }\n+}\n+\n+impl<K, V> IntoIterator for VecMap<K, V> {\n+    type Item = (K, V);\n+    type IntoIter = IntoIter<(K, V)>;\n+\n+    #[inline]\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.0.into_iter()\n+    }\n+}\n+\n+impl<K, V> Extend<(K, V)> for VecMap<K, V> {\n+    fn extend<I: IntoIterator<Item = (K, V)>>(&mut self, iter: I) {\n+        self.0.extend(iter);\n+    }\n+\n+    fn extend_one(&mut self, item: (K, V)) {\n+        self.0.extend_one(item);\n+    }\n+\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.0.extend_reserve(additional);\n+    }\n+}\n+\n+impl<K, V, CTX> HashStable<CTX> for VecMap<K, V>\n+where\n+    K: HashStable<CTX> + Eq,\n+    V: HashStable<CTX>,\n+{\n+    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n+        self.0.hash_stable(hcx, hasher)\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "9083de85982e7df482863d3e201a09acd5846cc7", "filename": "compiler/rustc_data_structures/src/vec_map/tests.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/aa7024b0c7034c75d36ebe9048d12480c8d0bae2/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa7024b0c7034c75d36ebe9048d12480c8d0bae2/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map%2Ftests.rs?ref=aa7024b0c7034c75d36ebe9048d12480c8d0bae2", "patch": "@@ -0,0 +1,48 @@\n+use super::*;\n+\n+impl<K, V> VecMap<K, V> {\n+    fn into_vec(self) -> Vec<(K, V)> {\n+        self.0.into()\n+    }\n+}\n+\n+#[test]\n+fn test_from_iterator() {\n+    assert_eq!(\n+        std::iter::empty().collect::<VecMap<i32, bool>>().into_vec(),\n+        Vec::<(i32, bool)>::new()\n+    );\n+    assert_eq!(std::iter::once((42, true)).collect::<VecMap<_, _>>().into_vec(), vec![(42, true)]);\n+    assert_eq!(\n+        vec![(1, true), (2, false)].into_iter().collect::<VecMap<_, _>>().into_vec(),\n+        vec![(1, true), (2, false)]\n+    );\n+}\n+\n+#[test]\n+fn test_into_iterator_owned() {\n+    assert_eq!(VecMap::new().into_iter().collect::<Vec<(i32, bool)>>(), Vec::<(i32, bool)>::new());\n+    assert_eq!(VecMap::from(vec![(1, true)]).into_iter().collect::<Vec<_>>(), vec![(1, true)]);\n+    assert_eq!(\n+        VecMap::from(vec![(1, true), (2, false)]).into_iter().collect::<Vec<_>>(),\n+        vec![(1, true), (2, false)]\n+    );\n+}\n+\n+#[test]\n+fn test_insert() {\n+    let mut v = VecMap::new();\n+    assert_eq!(v.insert(1, true), None);\n+    assert_eq!(v.insert(2, false), None);\n+    assert_eq!(v.clone().into_vec(), vec![(1, true), (2, false)]);\n+    assert_eq!(v.insert(1, false), Some(true));\n+    assert_eq!(v.into_vec(), vec![(1, false), (2, false)]);\n+}\n+\n+#[test]\n+fn test_get() {\n+    let v = vec![(1, true), (2, false)].into_iter().collect::<VecMap<_, _>>();\n+    assert_eq!(v.get(&1), Some(&true));\n+    assert_eq!(v.get(&2), Some(&false));\n+    assert_eq!(v.get(&3), None);\n+}"}]}