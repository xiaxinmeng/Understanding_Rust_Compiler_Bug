{"sha": "76311a8db9708a016c713dcd71ec8de4153b1491", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MzExYThkYjk3MDhhMDE2YzcxM2RjZDcxZWM4ZGU0MTUzYjE0OTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-06T02:28:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-06T02:28:12Z"}, "message": "Rollup merge of #66081 - RalfJung:ptr-offset, r=zackmdavis\n\nlet caller of check_ptr_access_align control the error message\n\nThis is needed for https://github.com/rust-lang/miri/pull/1031", "tree": {"sha": "1dfe68d63634bdbd5ff2079e359a4908e46c9903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dfe68d63634bdbd5ff2079e359a4908e46c9903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76311a8db9708a016c713dcd71ec8de4153b1491", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwi+8CRBK7hj4Ov3rIwAAdHIIABUl6HAB8LXFM74yxT++BAH8\nzvAfg8JciuojMJI4/qc9aM6G/7917biWCXqRKVPO2vXpoAGtRON1CrCl6mo9vVeQ\nJ14Jj17WKwEvUkX89paH4jhpBH8EzaFppU/URAnWysm5s1vsYPcZEoLNHOe22wye\nPT0DLD9yuoix1V0Wy8YjKrA5aBlmdC2Hc646SN9Fm0ct2Nc92I8KneHmOrM1rm1b\n8qblVmANrm638/c9dtXGoTvYccI2Y+tpmXX1Nn/XAwLryuXzyzhviYnUp/FrBbGT\n6sFHqwaiHF0+mNbaBQEmxsJDhqnZ0eFNDnt2ckUARlE8l79YtuSTY73hCES5T6I=\n=wZVf\n-----END PGP SIGNATURE-----\n", "payload": "tree 1dfe68d63634bdbd5ff2079e359a4908e46c9903\nparent f5c54896b9ff6bd62ffd3c8b9d2b2c4e7461d380\nparent b4dde363446e29005331b9ac295d07d12c89d458\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573007292 +0100\ncommitter GitHub <noreply@github.com> 1573007292 +0100\n\nRollup merge of #66081 - RalfJung:ptr-offset, r=zackmdavis\n\nlet caller of check_ptr_access_align control the error message\n\nThis is needed for https://github.com/rust-lang/miri/pull/1031\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76311a8db9708a016c713dcd71ec8de4153b1491", "html_url": "https://github.com/rust-lang/rust/commit/76311a8db9708a016c713dcd71ec8de4153b1491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76311a8db9708a016c713dcd71ec8de4153b1491/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5c54896b9ff6bd62ffd3c8b9d2b2c4e7461d380", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c54896b9ff6bd62ffd3c8b9d2b2c4e7461d380", "html_url": "https://github.com/rust-lang/rust/commit/f5c54896b9ff6bd62ffd3c8b9d2b2c4e7461d380"}, {"sha": "b4dde363446e29005331b9ac295d07d12c89d458", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4dde363446e29005331b9ac295d07d12c89d458", "html_url": "https://github.com/rust-lang/rust/commit/b4dde363446e29005331b9ac295d07d12c89d458"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "47b918248330abfcda020050b2628c0bbf5126ea", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76311a8db9708a016c713dcd71ec8de4153b1491/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76311a8db9708a016c713dcd71ec8de4153b1491/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=76311a8db9708a016c713dcd71ec8de4153b1491", "patch": "@@ -314,16 +314,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         align: Align,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n         let align = if M::CHECK_ALIGN { Some(align) } else { None };\n-        self.check_ptr_access_align(sptr, size, align)\n+        self.check_ptr_access_align(sptr, size, align, CheckInAllocMsg::MemoryAccessTest)\n     }\n \n     /// Like `check_ptr_access`, but *definitely* checks alignment when `align`\n-    /// is `Some` (overriding `M::CHECK_ALIGN`).\n-    pub(super) fn check_ptr_access_align(\n+    /// is `Some` (overriding `M::CHECK_ALIGN`). Also lets the caller control\n+    /// the error message for the out-of-bounds case.\n+    pub fn check_ptr_access_align(\n         &self,\n         sptr: Scalar<M::PointerTag>,\n         size: Size,\n         align: Option<Align>,\n+        msg: CheckInAllocMsg,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n         fn check_offset_align(offset: u64, align: Align) -> InterpResult<'static> {\n             if offset % align.bytes() == 0 {\n@@ -368,7 +370,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // It is sufficient to check this for the end pointer. The addition\n                 // checks for overflow.\n                 let end_ptr = ptr.offset(size, self)?;\n-                end_ptr.check_inbounds_alloc(allocation_size, CheckInAllocMsg::MemoryAccessTest)?;\n+                end_ptr.check_inbounds_alloc(allocation_size, msg)?;\n                 // Test align. Check this last; if both bounds and alignment are violated\n                 // we want the error to be about the bounds.\n                 if let Some(align) = align {"}, {"sha": "82b8b28d72b7b5aff22c8e6614ba1c65e70f81ae", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/76311a8db9708a016c713dcd71ec8de4153b1491/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76311a8db9708a016c713dcd71ec8de4153b1491/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=76311a8db9708a016c713dcd71ec8de4153b1491", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::fx::FxHashSet;\n use std::hash::Hash;\n \n use super::{\n-    GlobalAlloc, InterpResult,\n+    GlobalAlloc, InterpResult, CheckInAllocMsg,\n     Scalar, OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy,\n };\n \n@@ -424,7 +424,12 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     // alignment should take attributes into account).\n                     .unwrap_or_else(|| (layout.size, layout.align.abi));\n                 let ptr: Option<_> = match\n-                    self.ecx.memory.check_ptr_access_align(ptr, size, Some(align))\n+                    self.ecx.memory.check_ptr_access_align(\n+                        ptr,\n+                        size,\n+                        Some(align),\n+                        CheckInAllocMsg::InboundsTest,\n+                    )\n                 {\n                     Ok(ptr) => ptr,\n                     Err(err) => {"}]}