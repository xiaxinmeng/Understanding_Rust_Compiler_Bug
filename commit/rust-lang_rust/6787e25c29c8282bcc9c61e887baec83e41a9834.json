{"sha": "6787e25c29c8282bcc9c61e887baec83e41a9834", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ODdlMjVjMjljODI4MmJjYzljNjFlODg3YmFlYzgzZTQxYTk4MzQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-31T12:35:43Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-31T12:35:43Z"}, "message": "Blindly update the `#[rustc_region]` tests which got touched by the NLL diagnostic change.", "tree": {"sha": "9dbea0f90f0e9a3a0b73b30ec0103d8f078cca6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dbea0f90f0e9a3a0b73b30ec0103d8f078cca6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6787e25c29c8282bcc9c61e887baec83e41a9834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6787e25c29c8282bcc9c61e887baec83e41a9834", "html_url": "https://github.com/rust-lang/rust/commit/6787e25c29c8282bcc9c61e887baec83e41a9834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6787e25c29c8282bcc9c61e887baec83e41a9834/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8c29959cde82359283ba4b2e705f7c691538414", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c29959cde82359283ba4b2e705f7c691538414", "html_url": "https://github.com/rust-lang/rust/commit/e8c29959cde82359283ba4b2e705f7c691538414"}], "stats": {"total": 508, "additions": 254, "deletions": 254}, "files": [{"sha": "862d1f0b179c0e34a9e412ede8be5fe019efc35a", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -4,15 +4,6 @@ warning: not reporting region error due to nll\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                                  ^\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/escape-argument-callee.rs:36:45\n-   |\n-LL |         let mut closure = expect_sig(|p, y| *p = y);\n-   |                                       -  -  ^^^^^^ requires that `'1` must outlive `'2`\n-   |                                       |  |\n-   |                                       |  has type `&'1 i32`\n-   |                                       has type `&mut &'2 i32`\n-\n note: No external requirements\n   --> $DIR/escape-argument-callee.rs:36:38\n    |\n@@ -24,6 +15,15 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n                for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) i32))\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/escape-argument-callee.rs:36:45\n+   |\n+LL |         let mut closure = expect_sig(|p, y| *p = y);\n+   |                                       -  -  ^^^^^^ requires that `'1` must outlive `'2`\n+   |                                       |  |\n+   |                                       |  has type `&'1 i32`\n+   |                                       has type `&mut &'2 i32`\n+\n note: No external requirements\n   --> $DIR/escape-argument-callee.rs:30:1\n    |"}, {"sha": "72b7104b99dd3c5a3dcb0d4ebc155d8de5adfcb4", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -4,17 +4,6 @@ warning: not reporting region error due to nll\n LL |             let p = x.get();\n    |                     ^^^^^^^\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-fail-no-postdom.rs:57:13\n-   |\n-LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n-   |          ----------              ---------- has type `std::cell::Cell<&'2 &u32>`\n-   |          |\n-   |          has type `std::cell::Cell<&&'1 u32>`\n-...\n-LL |             demand_y(x, y, p) //~ ERROR\n-   |             ^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n note: No external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:53:9\n    |\n@@ -31,6 +20,17 @@ LL | |         },\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/propagate-approximated-fail-no-postdom.rs:57:13\n+   |\n+LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n+   |          ----------              ---------- has type `std::cell::Cell<&'2 &u32>`\n+   |          |\n+   |          has type `std::cell::Cell<&&'1 u32>`\n+...\n+LL |             demand_y(x, y, p) //~ ERROR\n+   |             ^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n note: No external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:48:1\n    |"}, {"sha": "43c39dee2448a1c5793579421402015233dd34b2", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -4,17 +4,6 @@ warning: not reporting region error due to nll\n LL |     foo(cell, |cell_a, cell_x| {\n    |     ^^^\n \n-error: borrowed data escapes outside of closure\n-  --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:33:9\n-   |\n-LL |     foo(cell, |cell_a, cell_x| {\n-   |                ------  ------ `cell_x` is a reference that is only valid in the closure body\n-   |                |\n-   |                `cell_a` is declared here, outside of the closure body\n-LL |         //~^ WARNING not reporting region error due to nll\n-LL |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ `cell_x` escapes the closure body here\n-\n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:31:15\n    |\n@@ -31,6 +20,17 @@ LL | |     })\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n            ]\n \n+error: borrowed data escapes outside of closure\n+  --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:33:9\n+   |\n+LL |     foo(cell, |cell_a, cell_x| {\n+   |                ------  ------ `cell_x` is a reference that is only valid in the closure body\n+   |                |\n+   |                `cell_a` is declared here, outside of the closure body\n+LL |         //~^ WARNING not reporting region error due to nll\n+LL |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ `cell_x` escapes the closure body here\n+\n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:28:1\n    |"}, {"sha": "c3bbf1035dbc574081c9d1a7d093606a5c1b54fa", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -23,19 +23,6 @@ LL | |     });\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#0r\n \n-error: borrowed data escapes outside of function\n-  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:5\n-   |\n-LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |                     ------ `cell_a` is a reference that is only valid in the function body\n-LL | /     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-LL | |         //~^ ERROR\n-LL | |\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to nll\n-LL | |     });\n-   | |______^ `cell_a` escapes the function body here\n-\n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:44:1\n    |\n@@ -50,5 +37,18 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]) with substs []\n \n+error: borrowed data escapes outside of function\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:5\n+   |\n+LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |                     ------ `cell_a` is a reference that is only valid in the function body\n+LL | /     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+LL | |         //~^ ERROR\n+LL | |\n+LL | |         // Only works if 'x: 'y:\n+LL | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to nll\n+LL | |     });\n+   | |______^ `cell_a` escapes the function body here\n+\n error: aborting due to previous error\n "}, {"sha": "9f259e2dee5904616ae14b850d277e817d93f8d6", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -23,19 +23,6 @@ LL | |     });\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#0r\n \n-error: borrowed data escapes outside of function\n-  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:5\n-   |\n-LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |                     ------ `cell_a` is a reference that is only valid in the function body\n-LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |         //~^ ERROR\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |         //~^ WARNING not reporting region error due to nll\n-LL | |     });\n-   | |______^ `cell_a` escapes the function body here\n-\n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:47:1\n    |\n@@ -50,5 +37,18 @@ LL | | }\n    |\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]) with substs []\n \n+error: borrowed data escapes outside of function\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:5\n+   |\n+LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |                     ------ `cell_a` is a reference that is only valid in the function body\n+LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+LL | |         //~^ ERROR\n+LL | |         // Only works if 'x: 'y:\n+LL | |         demand_y(x, y, x.get())\n+LL | |         //~^ WARNING not reporting region error due to nll\n+LL | |     });\n+   | |______^ `cell_a` escapes the function body here\n+\n error: aborting due to previous error\n "}, {"sha": "cd5e6f29f5f480cc2862f714777b826c80527414", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -4,17 +4,6 @@ warning: not reporting region error due to nll\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:47:9\n-   |\n-LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |                                                ---------  - has type `&std::cell::Cell<&'1 u32>`\n-   |                                                |\n-   |                                                has type `&std::cell::Cell<&'2 &u32>`\n-LL |         // Only works if 'x: 'y:\n-LL |         demand_y(x, y, x.get())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:45:47\n    |\n@@ -32,6 +21,17 @@ LL | |     });\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:47:9\n+   |\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |                                                ---------  - has type `&std::cell::Cell<&'1 u32>`\n+   |                                                |\n+   |                                                has type `&std::cell::Cell<&'2 &u32>`\n+LL |         // Only works if 'x: 'y:\n+LL |         demand_y(x, y, x.get())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:44:1\n    |"}, {"sha": "2176575e0aa128e7067afdad22b870fd0edbcc80", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -4,17 +4,6 @@ warning: not reporting region error due to nll\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:51:9\n-   |\n-LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |                                                ----------  ---------- has type `&std::cell::Cell<&'2 &u32>`\n-   |                                                |\n-   |                                                has type `&std::cell::Cell<&'1 &u32>`\n-LL |         // Only works if 'x: 'y:\n-LL |         demand_y(x, y, x.get())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:49:47\n    |\n@@ -32,6 +21,17 @@ LL | |     });\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:51:9\n+   |\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |                                                ----------  ---------- has type `&std::cell::Cell<&'2 &u32>`\n+   |                                                |\n+   |                                                has type `&std::cell::Cell<&'1 &u32>`\n+LL |         // Only works if 'x: 'y:\n+LL |         demand_y(x, y, x.get())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:48:1\n    |"}, {"sha": "8f8a99df5f0529dcef540ee13de8b348d85d654b", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -26,21 +26,6 @@ LL | |     });\n    = note: number of external vids: 3\n    = note: where T: '_#1r\n \n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/propagate-from-trait-match.rs:42:36\n-   |\n-LL |       establish_relationships(value, |value| {\n-   |  ____________________________________^\n-LL | |         //~^ ERROR the parameter type `T` may not live long enough\n-LL | |\n-LL | |         // This function call requires that\n-...  |\n-LL | |         //~^ WARNING not reporting region error due to nll\n-LL | |     });\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n-\n note: No external requirements\n   --> $DIR/propagate-from-trait-match.rs:38:1\n    |\n@@ -58,6 +43,21 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/propagate-from-trait-match.rs:42:36\n+   |\n+LL |       establish_relationships(value, |value| {\n+   |  ____________________________________^\n+LL | |         //~^ ERROR the parameter type `T` may not live long enough\n+LL | |\n+LL | |         // This function call requires that\n+...  |\n+LL | |         //~^ WARNING not reporting region error due to nll\n+LL | |     });\n+   | |_____^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0309`."}, {"sha": "d2e088815e11803a83f08dea0767f7904ade647c", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -4,15 +4,6 @@ warning: not reporting region error due to nll\n LL |     expect_sig(|a, b| b); // ought to return `a`\n    |                       ^\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/return-wrong-bound-region.rs:21:23\n-   |\n-LL |     expect_sig(|a, b| b); // ought to return `a`\n-   |                 -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n-   |                 |  |\n-   |                 |  has type `&'1 i32`\n-   |                 has type `&'2 i32`\n-\n note: No external requirements\n   --> $DIR/return-wrong-bound-region.rs:21:16\n    |\n@@ -24,6 +15,15 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) i32\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/return-wrong-bound-region.rs:21:23\n+   |\n+LL |     expect_sig(|a, b| b); // ought to return `a`\n+   |                 -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |                 |  |\n+   |                 |  has type `&'1 i32`\n+   |                 has type `&'2 i32`\n+\n note: No external requirements\n   --> $DIR/return-wrong-bound-region.rs:20:1\n    |"}, {"sha": "6d2170729ffb9f9db5f8db532bfbdf92710f3819", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -25,14 +25,6 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n-error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n-  --> $DIR/projection-no-regions-closure.rs:35:23\n-   |\n-LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n-\n note: No external requirements\n   --> $DIR/projection-no-regions-closure.rs:31:1\n    |\n@@ -50,6 +42,14 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n+  --> $DIR/projection-no-regions-closure.rs:35:23\n+   |\n+LL |     with_signature(x, |mut y| Box::new(y.next()))\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n+\n note: External requirements\n   --> $DIR/projection-no-regions-closure.rs:45:23\n    |\n@@ -97,14 +97,6 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: number of external vids: 5\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n-error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n-  --> $DIR/projection-no-regions-closure.rs:53:23\n-   |\n-LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n-\n note: No external requirements\n   --> $DIR/projection-no-regions-closure.rs:49:1\n    |\n@@ -123,6 +115,14 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n+  --> $DIR/projection-no-regions-closure.rs:53:23\n+   |\n+LL |     with_signature(x, |mut y| Box::new(y.next()))\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n+\n note: External requirements\n   --> $DIR/projection-no-regions-closure.rs:64:23\n    |"}, {"sha": "ed8491349a257ba3db4e68ed7bd3c10f4446f745", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -32,20 +32,6 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where T: '_#2r\n    = note: where '_#1r: '_#2r\n \n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:55:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:16), 'a))`...\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-closure.rs:55:5\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n note: No external requirements\n   --> $DIR/projection-one-region-closure.rs:51:1\n    |\n@@ -63,6 +49,20 @@ LL | | }\n                T\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/projection-one-region-closure.rs:55:5\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/projection-one-region-closure.rs:55:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:16), 'a))`...\n+\n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:67:29\n    |\n@@ -80,20 +80,6 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:67:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-closure.rs:67:5\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n note: No external requirements\n   --> $DIR/projection-one-region-closure.rs:62:1\n    |\n@@ -112,6 +98,20 @@ LL | | }\n                T\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/projection-one-region-closure.rs:67:5\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/projection-one-region-closure.rs:67:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+\n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:89:29\n    |\n@@ -129,20 +129,6 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:89:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-closure.rs:89:5\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n note: No external requirements\n   --> $DIR/projection-one-region-closure.rs:74:1\n    |\n@@ -161,6 +147,20 @@ LL | | }\n                T\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/projection-one-region-closure.rs:89:5\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/projection-one-region-closure.rs:89:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+\n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:102:29\n    |"}, {"sha": "8318ce10745d32f5bfbe14151a9275337f9af8b6", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -31,12 +31,6 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:47:5\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:43:1\n    |\n@@ -54,6 +48,12 @@ LL | | }\n                T\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:47:5\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:58:29\n    |\n@@ -70,12 +70,6 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where '_#2r: '_#3r\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:58:5\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:53:1\n    |\n@@ -94,6 +88,12 @@ LL | | }\n                T\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:58:5\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:79:29\n    |\n@@ -110,12 +110,6 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where '_#2r: '_#3r\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:79:5\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:64:1\n    |\n@@ -134,6 +128,12 @@ LL | | }\n                T\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:79:5\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:90:29\n    |"}, {"sha": "1452573d57a255226ea99e8461ab4d7331f1ed40", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -38,14 +38,6 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 6\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n-error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReFree(DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:18), 'a))`...\n-\n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:44:1\n    |\n@@ -64,6 +56,14 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReFree(DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:18), 'a))`...\n+\n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:59:29\n    |\n@@ -81,14 +81,6 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 6\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-error[E0309]: the associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:59:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#7r, '_#8r>>::AssocType: ReEarlyBound(0, 'a)`...\n-\n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:54:1\n    |\n@@ -108,6 +100,14 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:59:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#7r, '_#8r>>::AssocType: ReEarlyBound(0, 'a)`...\n+\n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:80:29\n    |\n@@ -125,14 +125,6 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 6\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-error[E0309]: the associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:80:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#7r, '_#8r>>::AssocType: ReEarlyBound(0, 'a)`...\n-\n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:65:1\n    |\n@@ -152,6 +144,14 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:80:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#7r, '_#8r>>::AssocType: ReEarlyBound(0, 'a)`...\n+\n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:91:29\n    |\n@@ -239,12 +239,6 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:108:5\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:104:1\n    |\n@@ -262,6 +256,12 @@ LL | | }\n                T\n            ]\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:108:5\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+\n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:119:29\n    |"}, {"sha": "87f55b4e14d9652caca1fdd974a41026978f9b60", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -60,14 +60,6 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: number of external vids: 4\n    = note: where T: '_#1r\n \n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:24\n-   |\n-LL |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:6 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(1:15), 'a))`...\n-\n note: No external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:41:1\n    |\n@@ -83,6 +75,14 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:24\n+   |\n+LL |     twice(cell, value, |a, b| invoke(a, b));\n+   |                        ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:6 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(1:15), 'a))`...\n+\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0309`."}, {"sha": "aec0d98c79aa47671f49d165350dbeb87d2838fe", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -25,14 +25,6 @@ LL |     with_signature(x, |y| y)\n    = note: number of external vids: 4\n    = note: where T: '_#2r\n \n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-outlives-from-return-type.rs:36:23\n-   |\n-LL |     with_signature(x, |y| y)\n-   |                       ^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n-\n note: No external requirements\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:25:1\n    |\n@@ -50,6 +42,14 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/ty-param-closure-outlives-from-return-type.rs:36:23\n+   |\n+LL |     with_signature(x, |y| y)\n+   |                       ^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:52:5\n    |"}, {"sha": "67a158860d64c1d7ffcf6705472c5bb65499c852", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6787e25c29c8282bcc9c61e887baec83e41a9834/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=6787e25c29c8282bcc9c61e887baec83e41a9834", "patch": "@@ -31,21 +31,6 @@ LL | |     })\n    = note: number of external vids: 4\n    = note: where T: '_#1r\n \n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:37:26\n-   |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |         //~^ ERROR the parameter type `T` may not live long enough\n-LL | |         //\n-LL | |         // See `correct_region`, which explains the point of this\n-...  |\n-LL | |         //~^ WARNING not reporting region error due to nll\n-LL | |     })\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:6 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(crate0:DefIndex(1:14), 'a))`...\n-\n note: No external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:36:1\n    |\n@@ -62,6 +47,21 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:37:26\n+   |\n+LL |       with_signature(a, b, |x, y| {\n+   |  __________________________^\n+LL | |         //~^ ERROR the parameter type `T` may not live long enough\n+LL | |         //\n+LL | |         // See `correct_region`, which explains the point of this\n+...  |\n+LL | |         //~^ WARNING not reporting region error due to nll\n+LL | |     })\n+   | |_____^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:6 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(crate0:DefIndex(1:14), 'a))`...\n+\n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:54:26\n    |\n@@ -122,20 +122,6 @@ LL | |     })\n    = note: number of external vids: 5\n    = note: where T: '_#2r\n \n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:75:26\n-   |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |         //~^ ERROR the parameter type `T` may not live long enough\n-LL | |         // See `correct_region`\n-LL | |         require(&x, &y)\n-LL | |         //~^ WARNING not reporting region error due to nll\n-LL | |     })\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(crate0:DefIndex(1:20), 'a))`...\n-\n note: No external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:71:1\n    |\n@@ -153,6 +139,20 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:75:26\n+   |\n+LL |       with_signature(a, b, |x, y| {\n+   |  __________________________^\n+LL | |         //~^ ERROR the parameter type `T` may not live long enough\n+LL | |         // See `correct_region`\n+LL | |         require(&x, &y)\n+LL | |         //~^ WARNING not reporting region error due to nll\n+LL | |     })\n+   | |_____^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(crate0:DefIndex(1:20), 'a))`...\n+\n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:89:26\n    |"}]}