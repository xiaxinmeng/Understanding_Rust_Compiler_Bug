{"sha": "457a23fabe4caecb5b18c0d6a801f1393a4dac80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1N2EyM2ZhYmU0Y2FlY2I1YjE4YzBkNmE4MDFmMTM5M2E0ZGFjODA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-09T15:42:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-09T15:42:23Z"}, "message": "Rollup merge of #63468 - c410-f3r:attrs, r=petrochenkov\n\nResolve attributes in several places\n\nResolve attributes for Arm, Field, FieldPat, GenericParam, Param, StructField and Variant.\n\nThis PR is based on @petrochenkov work located at https://github.com/petrochenkov/rust/commit/83fdb8d598c1a871d40b21faed64ee698b74f814.", "tree": {"sha": "33e29f45bf31895d123021669313521067b60822", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33e29f45bf31895d123021669313521067b60822"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/457a23fabe4caecb5b18c0d6a801f1393a4dac80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJddnLfCRBK7hj4Ov3rIwAAdHIIAJO9E3mBHUBTy6yVRSpzYElk\nv92Dmadi3UmssVgH0Zx2PtLIgM391TKjF3iPDnTk/UKGRHcJjK+/8laz7Pa7d9eZ\nTeHgWn5YW3dVJ53J85VLlNw1YmbTbILqClLHIg1CX9g7fH9IiC78Gxkom77+5hGh\n4h8Mh8Qxn9nMC1V1WBIEVubaIc93f8+a1WZDM20iEeopEpulR50FxE0fzCHg7W4Z\nalkQ+oHnBOseq+NglAf0TtCWWaj7AFTfzcmWMeSO6lVsVpKlnqfLAWwOruY+0pgk\nzmDSuXNH9+WcFYdSHzSjL7CBrrnMp2RG0jG5Fz6CTFKzp0wyzW+lgg5O9huMnao=\n=1CBN\n-----END PGP SIGNATURE-----\n", "payload": "tree 33e29f45bf31895d123021669313521067b60822\nparent 824383d4ab66abd32abc6e19b68d78ecfddcb7d4\nparent 63a5f399aef46f94a24e0d0a3b03eb7f66a33800\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568043743 +0200\ncommitter GitHub <noreply@github.com> 1568043743 +0200\n\nRollup merge of #63468 - c410-f3r:attrs, r=petrochenkov\n\nResolve attributes in several places\n\nResolve attributes for Arm, Field, FieldPat, GenericParam, Param, StructField and Variant.\n\nThis PR is based on @petrochenkov work located at https://github.com/petrochenkov/rust/commit/83fdb8d598c1a871d40b21faed64ee698b74f814.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/457a23fabe4caecb5b18c0d6a801f1393a4dac80", "html_url": "https://github.com/rust-lang/rust/commit/457a23fabe4caecb5b18c0d6a801f1393a4dac80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/457a23fabe4caecb5b18c0d6a801f1393a4dac80/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "html_url": "https://github.com/rust-lang/rust/commit/824383d4ab66abd32abc6e19b68d78ecfddcb7d4"}, {"sha": "63a5f399aef46f94a24e0d0a3b03eb7f66a33800", "url": "https://api.github.com/repos/rust-lang/rust/commits/63a5f399aef46f94a24e0d0a3b03eb7f66a33800", "html_url": "https://github.com/rust-lang/rust/commit/63a5f399aef46f94a24e0d0a3b03eb7f66a33800"}], "stats": {"total": 1586, "additions": 1097, "deletions": 489}, "files": [{"sha": "bffb4df836e3b799960cca9f0e680c598b7f838d", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -155,6 +155,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_variant(&mut self, v: &'a Variant) {\n+        if v.is_placeholder {\n+            return self.visit_macro_invoc(v.id);\n+        }\n         let def = self.create_def(v.id,\n                                   DefPathData::TypeNs(v.ident.as_interned_str()),\n                                   v.span);\n@@ -168,16 +171,24 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_variant_data(&mut self, data: &'a VariantData) {\n         for (index, field) in data.fields().iter().enumerate() {\n+            if field.is_placeholder {\n+                self.visit_macro_invoc(field.id);\n+                continue;\n+            }\n             let name = field.ident.map(|ident| ident.name)\n                 .unwrap_or_else(|| sym::integer(index));\n             let def = self.create_def(field.id,\n                                       DefPathData::ValueNs(name.as_interned_str()),\n                                       field.span);\n-            self.with_parent(def, |this| this.visit_struct_field(field));\n+            self.with_parent(def, |this| visit::walk_struct_field(this, field));\n         }\n     }\n \n     fn visit_generic_param(&mut self, param: &'a GenericParam) {\n+        if param.is_placeholder {\n+            self.visit_macro_invoc(param.id);\n+            return;\n+        }\n         let name = param.ident.as_interned_str();\n         let def_path_data = match param.kind {\n             GenericParamKind::Lifetime { .. } => DefPathData::LifetimeNs(name),\n@@ -294,4 +305,49 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             }\n         }\n     }\n+\n+    fn visit_arm(&mut self, arm: &'a Arm) {\n+        if arm.is_placeholder {\n+            self.visit_macro_invoc(arm.id)\n+        } else {\n+            visit::walk_arm(self, arm)\n+        }\n+    }\n+\n+    fn visit_field(&mut self, f: &'a Field) {\n+        if f.is_placeholder {\n+            self.visit_macro_invoc(f.id)\n+        } else {\n+            visit::walk_field(self, f)\n+        }\n+    }\n+\n+    fn visit_field_pattern(&mut self, fp: &'a FieldPat) {\n+        if fp.is_placeholder {\n+            self.visit_macro_invoc(fp.id)\n+        } else {\n+            visit::walk_field_pattern(self, fp)\n+        }\n+    }\n+\n+    fn visit_param(&mut self, p: &'a Param) {\n+        if p.is_placeholder {\n+            self.visit_macro_invoc(p.id)\n+        } else {\n+            visit::walk_param(self, p)\n+        }\n+    }\n+\n+    fn visit_struct_field(&mut self, sf: &'a StructField) {\n+        if sf.is_placeholder {\n+            self.visit_macro_invoc(sf.id)\n+        } else {\n+            let name = sf.ident.map(|ident| ident.name)\n+                .unwrap_or_else(|| panic!(\"don't know the field number in this context\"));\n+            let def = self.create_def(sf.id,\n+                                        DefPathData::ValueNs(name.as_interned_str()),\n+                                        sf.span);\n+            self.with_parent(def, |this| visit::walk_struct_field(this, sf));\n+        }\n+    }\n }"}, {"sha": "11dcf5b4b00194f48614fcf54005da42efd2ce8e", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 94, "deletions": 45, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -31,7 +31,7 @@ use syntax::ast::{Name, Ident};\n use syntax::attr;\n \n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n-use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind, Variant};\n+use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::expand::AstFragment;\n use syntax::ext::hygiene::ExpnId;\n@@ -580,7 +580,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     /// Constructs the reduced graph for one item.\n-    fn build_reduced_graph_for_item(&mut self, item: &Item) {\n+    fn build_reduced_graph_for_item(&mut self, item: &'b Item) {\n         let parent_scope = &self.parent_scope;\n         let parent = parent_scope.module;\n         let expansion = parent_scope.expansion;\n@@ -716,23 +716,17 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n             }\n \n-            ItemKind::Enum(ref enum_definition, _) => {\n-                let module_kind = ModuleKind::Def(\n-                    DefKind::Enum,\n-                    self.r.definitions.local_def_id(item.id),\n-                    ident.name,\n-                );\n+            ItemKind::Enum(_, _) => {\n+                let def_id = self.r.definitions.local_def_id(item.id);\n+                self.r.variant_vis.insert(def_id, vis);\n+                let module_kind = ModuleKind::Def(DefKind::Enum, def_id, ident.name);\n                 let module = self.r.new_module(parent,\n                                              module_kind,\n                                              parent.normal_ancestor_id,\n                                              expansion,\n                                              item.span);\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.parent_scope.module = module;\n-\n-                for variant in &(*enum_definition).variants {\n-                    self.build_reduced_graph_for_variant(variant, vis);\n-                }\n             }\n \n             ItemKind::TraitAlias(..) => {\n@@ -817,38 +811,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         }\n     }\n \n-    // Constructs the reduced graph for one variant. Variants exist in the\n-    // type and value namespaces.\n-    fn build_reduced_graph_for_variant(&mut self, variant: &Variant, vis: ty::Visibility) {\n-        let parent = self.parent_scope.module;\n-        let expn_id = self.parent_scope.expansion;\n-        let ident = variant.ident;\n-\n-        // Define a name in the type namespace.\n-        let def_id = self.r.definitions.local_def_id(variant.id);\n-        let res = Res::Def(DefKind::Variant, def_id);\n-        self.r.define(parent, ident, TypeNS, (res, vis, variant.span, expn_id));\n-\n-        // If the variant is marked as non_exhaustive then lower the visibility to within the\n-        // crate.\n-        let mut ctor_vis = vis;\n-        let has_non_exhaustive = attr::contains_name(&variant.attrs, sym::non_exhaustive);\n-        if has_non_exhaustive && vis == ty::Visibility::Public {\n-            ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n-        }\n-\n-        // Define a constructor name in the value namespace.\n-        // Braced variants, unlike structs, generate unusable names in\n-        // value namespace, they are reserved for possible future use.\n-        // It's ok to use the variant's id as a ctor id since an\n-        // error will be reported on any use of such resolution anyway.\n-        let ctor_node_id = variant.data.ctor_id().unwrap_or(variant.id);\n-        let ctor_def_id = self.r.definitions.local_def_id(ctor_node_id);\n-        let ctor_kind = CtorKind::from_ast(&variant.data);\n-        let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);\n-        self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, variant.span, expn_id));\n-    }\n-\n     /// Constructs the reduced graph for one foreign item.\n     fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem) {\n         let (res, ns) = match item.node {\n@@ -1188,7 +1150,6 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n             ItemKind::Mod(..) => self.contains_macro_use(&item.attrs),\n             _ => false,\n         };\n-\n         let orig_current_module = self.parent_scope.module;\n         let orig_current_legacy_scope = self.parent_scope.legacy;\n         self.build_reduced_graph_for_item(item);\n@@ -1271,4 +1232,92 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         }\n         visit::walk_attribute(self, attr);\n     }\n+\n+    fn visit_arm(&mut self, arm: &'b ast::Arm) {\n+        if arm.is_placeholder {\n+            self.visit_invoc(arm.id);\n+        } else {\n+            visit::walk_arm(self, arm);\n+        }\n+    }\n+\n+    fn visit_field(&mut self, f: &'b ast::Field) {\n+        if f.is_placeholder {\n+            self.visit_invoc(f.id);\n+        } else {\n+            visit::walk_field(self, f);\n+        }\n+    }\n+\n+    fn visit_field_pattern(&mut self, fp: &'b ast::FieldPat) {\n+        if fp.is_placeholder {\n+            self.visit_invoc(fp.id);\n+        } else {\n+            visit::walk_field_pattern(self, fp);\n+        }\n+    }\n+\n+    fn visit_generic_param(&mut self, param: &'b ast::GenericParam) {\n+        if param.is_placeholder {\n+            self.visit_invoc(param.id);\n+        } else {\n+            visit::walk_generic_param(self, param);\n+        }\n+    }\n+\n+    fn visit_param(&mut self, p: &'b ast::Param) {\n+        if p.is_placeholder {\n+            self.visit_invoc(p.id);\n+        } else {\n+            visit::walk_param(self, p);\n+        }\n+    }\n+\n+    fn visit_struct_field(&mut self, sf: &'b ast::StructField) {\n+        if sf.is_placeholder {\n+            self.visit_invoc(sf.id);\n+        } else {\n+            visit::walk_struct_field(self, sf);\n+        }\n+    }\n+\n+    // Constructs the reduced graph for one variant. Variants exist in the\n+    // type and value namespaces.\n+    fn visit_variant(&mut self, variant: &'b ast::Variant) {\n+        if variant.is_placeholder {\n+            self.visit_invoc(variant.id);\n+            return;\n+        }\n+\n+        let parent = self.parent_scope.module;\n+        let vis = self.r.variant_vis[&parent.def_id().expect(\"enum without def-id\")];\n+        let expn_id = self.parent_scope.expansion;\n+        let ident = variant.ident;\n+\n+        // Define a name in the type namespace.\n+        let def_id = self.r.definitions.local_def_id(variant.id);\n+        let res = Res::Def(DefKind::Variant, def_id);\n+        self.r.define(parent, ident, TypeNS, (res, vis, variant.span, expn_id));\n+\n+        // If the variant is marked as non_exhaustive then lower the visibility to within the\n+        // crate.\n+        let mut ctor_vis = vis;\n+        let has_non_exhaustive = attr::contains_name(&variant.attrs, sym::non_exhaustive);\n+        if has_non_exhaustive && vis == ty::Visibility::Public {\n+            ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n+        }\n+\n+        // Define a constructor name in the value namespace.\n+        // Braced variants, unlike structs, generate unusable names in\n+        // value namespace, they are reserved for possible future use.\n+        // It's ok to use the variant's id as a ctor id since an\n+        // error will be reported on any use of such resolution anyway.\n+        let ctor_node_id = variant.data.ctor_id().unwrap_or(variant.id);\n+        let ctor_def_id = self.r.definitions.local_def_id(ctor_node_id);\n+        let ctor_kind = CtorKind::from_ast(&variant.data);\n+        let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);\n+        self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, variant.span, expn_id));\n+\n+        visit::walk_variant(self, variant);\n+    }\n }"}, {"sha": "f97fcb0a035a21cd2e53011599099b1ee04756b9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -952,6 +952,10 @@ pub struct Resolver<'a> {\n \n     /// Features enabled for this crate.\n     active_features: FxHashSet<Symbol>,\n+\n+    /// Stores enum visibilities to properly build a reduced graph\n+    /// when visiting the correspondent variants.\n+    variant_vis: DefIdMap<ty::Visibility>,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1214,6 +1218,7 @@ impl<'a> Resolver<'a> {\n                 features.declared_lib_features.iter().map(|(feat, ..)| *feat)\n                     .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n                     .collect(),\n+            variant_vis: Default::default()\n         }\n     }\n "}, {"sha": "bd8b5e13c62056ab294bcf8a369a0fe310fb2299", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -16,7 +16,7 @@ use syntax::attr::StabilityLevel;\n use syntax::edition::Edition;\n use syntax::ext::base::{self, InvocationRes, Indeterminate, SpecialDerives};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n-use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n+use syntax::ext::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n use syntax::ext::hygiene::{self, ExpnId, ExpnData, ExpnKind};\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n@@ -225,6 +225,26 @@ impl<'a> base::Resolver for Resolver<'a> {\n             self.definitions.add_parent_module_of_macro_def(invoc_id, normal_module_def_id);\n         }\n \n+        match invoc.fragment_kind {\n+            AstFragmentKind::Arms\n+                | AstFragmentKind::Fields\n+                | AstFragmentKind::FieldPats\n+                | AstFragmentKind::GenericParams\n+                | AstFragmentKind::Params\n+                | AstFragmentKind::StructFields\n+                | AstFragmentKind::Variants =>\n+            {\n+                if let Res::Def(..) = res {\n+                    self.session.span_err(\n+                        span,\n+                        \"expected an inert attribute, found an attribute macro\"\n+                    );\n+                    return Ok(InvocationRes::Single(self.dummy_ext(kind)));\n+                }\n+            },\n+            _ => {}\n+        }\n+\n         Ok(InvocationRes::Single(ext))\n     }\n "}, {"sha": "d2e9203779cc81c6fb28e9eaebd2f6ca4cebefa5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -519,15 +519,15 @@ fn convert_variant_ctor(tcx: TyCtxt<'_>, ctor_id: hir::HirId) {\n     tcx.predicates_of(def_id);\n }\n \n-fn convert_enum_variant_types<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn convert_enum_variant_types(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n     variants: &[hir::Variant]\n ) {\n     let def = tcx.adt_def(def_id);\n     let repr_type = def.repr.discr_type();\n     let initial = repr_type.initial_discriminant(tcx);\n-    let mut prev_discr = None::<Discr<'tcx>>;\n+    let mut prev_discr = None::<Discr<'_>>;\n \n     // fill the discriminant values and field types\n     for variant in variants {"}, {"sha": "bcbc0a19ce768d5e54ce7f715d8b7f4eaf6e8e32", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -352,7 +352,7 @@ pub struct GenericParam {\n     pub ident: Ident,\n     pub attrs: ThinVec<Attribute>,\n     pub bounds: GenericBounds,\n-\n+    pub is_placeholder: bool,\n     pub kind: GenericParamKind,\n }\n \n@@ -613,6 +613,7 @@ pub struct FieldPat {\n     pub attrs: ThinVec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n+    pub is_placeholder: bool,\n }\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n@@ -935,6 +936,7 @@ pub struct Arm {\n     pub body: P<Expr>,\n     pub span: Span,\n     pub id: NodeId,\n+    pub is_placeholder: bool,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n@@ -945,6 +947,7 @@ pub struct Field {\n     pub is_shorthand: bool,\n     pub attrs: ThinVec<Attribute>,\n     pub id: NodeId,\n+    pub is_placeholder: bool,\n }\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n@@ -1798,6 +1801,7 @@ pub struct Param {\n     pub pat: P<Pat>,\n     pub id: NodeId,\n     pub span: Span,\n+    pub is_placeholder: bool,\n }\n \n /// Alternative representation for `Arg`s describing `self` parameter of methods.\n@@ -1859,6 +1863,7 @@ impl Param {\n             span,\n             ty,\n             id: DUMMY_NODE_ID,\n+            is_placeholder: false\n         };\n         match eself.node {\n             SelfKind::Explicit(ty, mutbl) => param(mutbl, ty),\n@@ -2054,6 +2059,8 @@ pub struct Variant {\n     pub disr_expr: Option<AnonConst>,\n     /// Span\n     pub span: Span,\n+    /// Is a macro placeholder\n+    pub is_placeholder: bool,\n }\n \n /// Part of `use` item to the right of its prefix.\n@@ -2216,6 +2223,7 @@ pub struct StructField {\n     pub id: NodeId,\n     pub ty: P<Ty>,\n     pub attrs: Vec<Attribute>,\n+    pub is_placeholder: bool,\n }\n \n /// Fields and constructor ids of enum variants and structs."}, {"sha": "7759a985d61347ff096f490178f28222ca106604", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -35,6 +35,13 @@ pub enum Annotatable {\n     ForeignItem(P<ast::ForeignItem>),\n     Stmt(P<ast::Stmt>),\n     Expr(P<ast::Expr>),\n+    Arm(ast::Arm),\n+    Field(ast::Field),\n+    FieldPat(ast::FieldPat),\n+    GenericParam(ast::GenericParam),\n+    Param(ast::Param),\n+    StructField(ast::StructField),\n+    Variant(ast::Variant),\n }\n \n impl HasAttrs for Annotatable {\n@@ -46,6 +53,13 @@ impl HasAttrs for Annotatable {\n             Annotatable::ForeignItem(ref foreign_item) => &foreign_item.attrs,\n             Annotatable::Stmt(ref stmt) => stmt.attrs(),\n             Annotatable::Expr(ref expr) => &expr.attrs,\n+            Annotatable::Arm(ref arm) => &arm.attrs,\n+            Annotatable::Field(ref field) => &field.attrs,\n+            Annotatable::FieldPat(ref fp) => &fp.attrs,\n+            Annotatable::GenericParam(ref gp) => &gp.attrs,\n+            Annotatable::Param(ref p) => &p.attrs,\n+            Annotatable::StructField(ref sf) => &sf.attrs,\n+            Annotatable::Variant(ref v) => &v.attrs(),\n         }\n     }\n \n@@ -57,6 +71,13 @@ impl HasAttrs for Annotatable {\n             Annotatable::ForeignItem(foreign_item) => foreign_item.visit_attrs(f),\n             Annotatable::Stmt(stmt) => stmt.visit_attrs(f),\n             Annotatable::Expr(expr) => expr.visit_attrs(f),\n+            Annotatable::Arm(arm) => arm.visit_attrs(f),\n+            Annotatable::Field(field) => field.visit_attrs(f),\n+            Annotatable::FieldPat(fp) => fp.visit_attrs(f),\n+            Annotatable::GenericParam(gp) => gp.visit_attrs(f),\n+            Annotatable::Param(p) => p.visit_attrs(f),\n+            Annotatable::StructField(sf) => sf.visit_attrs(f),\n+            Annotatable::Variant(v) => v.visit_attrs(f),\n         }\n     }\n }\n@@ -70,6 +91,13 @@ impl Annotatable {\n             Annotatable::ForeignItem(ref foreign_item) => foreign_item.span,\n             Annotatable::Stmt(ref stmt) => stmt.span,\n             Annotatable::Expr(ref expr) => expr.span,\n+            Annotatable::Arm(ref arm) => arm.span,\n+            Annotatable::Field(ref field) => field.span,\n+            Annotatable::FieldPat(ref fp) => fp.pat.span,\n+            Annotatable::GenericParam(ref gp) => gp.ident.span,\n+            Annotatable::Param(ref p) => p.span,\n+            Annotatable::StructField(ref sf) => sf.span,\n+            Annotatable::Variant(ref v) => v.span,\n         }\n     }\n \n@@ -81,6 +109,13 @@ impl Annotatable {\n             Annotatable::ForeignItem(foreign_item) => visitor.visit_foreign_item(foreign_item),\n             Annotatable::Stmt(stmt) => visitor.visit_stmt(stmt),\n             Annotatable::Expr(expr) => visitor.visit_expr(expr),\n+            Annotatable::Arm(arm) => visitor.visit_arm(arm),\n+            Annotatable::Field(field) => visitor.visit_field(field),\n+            Annotatable::FieldPat(fp) => visitor.visit_field_pattern(fp),\n+            Annotatable::GenericParam(gp) => visitor.visit_generic_param(gp),\n+            Annotatable::Param(p) => visitor.visit_param(p),\n+            Annotatable::StructField(sf) =>visitor.visit_struct_field(sf),\n+            Annotatable::Variant(v) => visitor.visit_variant(v),\n         }\n     }\n \n@@ -136,6 +171,55 @@ impl Annotatable {\n         }\n     }\n \n+    pub fn expect_arm(self) -> ast::Arm {\n+        match self {\n+            Annotatable::Arm(arm) => arm,\n+            _ => panic!(\"expected match arm\")\n+        }\n+    }\n+\n+    pub fn expect_field(self) -> ast::Field {\n+        match self {\n+            Annotatable::Field(field) => field,\n+            _ => panic!(\"expected field\")\n+        }\n+    }\n+\n+    pub fn expect_field_pattern(self) -> ast::FieldPat {\n+        match self {\n+            Annotatable::FieldPat(fp) => fp,\n+            _ => panic!(\"expected field pattern\")\n+        }\n+    }\n+\n+    pub fn expect_generic_param(self) -> ast::GenericParam {\n+        match self {\n+            Annotatable::GenericParam(gp) => gp,\n+            _ => panic!(\"expected generic parameter\")\n+        }\n+    }\n+\n+    pub fn expect_param(self) -> ast::Param {\n+        match self {\n+            Annotatable::Param(param) => param,\n+            _ => panic!(\"expected parameter\")\n+        }\n+    }\n+\n+    pub fn expect_struct_field(self) -> ast::StructField {\n+        match self {\n+            Annotatable::StructField(sf) => sf,\n+            _ => panic!(\"expected struct field\")\n+        }\n+    }\n+\n+    pub fn expect_variant(self) -> ast::Variant {\n+        match self {\n+            Annotatable::Variant(v) => v,\n+            _ => panic!(\"expected variant\")\n+        }\n+    }\n+\n     pub fn derive_allowed(&self) -> bool {\n         match *self {\n             Annotatable::Item(ref item) => match item.node {\n@@ -325,6 +409,34 @@ pub trait MacResult {\n     fn make_ty(self: Box<Self>) -> Option<P<ast::Ty>> {\n         None\n     }\n+\n+    fn make_arms(self: Box<Self>) -> Option<SmallVec<[ast::Arm; 1]>> {\n+        None\n+    }\n+\n+    fn make_fields(self: Box<Self>) -> Option<SmallVec<[ast::Field; 1]>> {\n+        None\n+    }\n+\n+    fn make_field_patterns(self: Box<Self>) -> Option<SmallVec<[ast::FieldPat; 1]>> {\n+        None\n+    }\n+\n+    fn make_generic_params(self: Box<Self>) -> Option<SmallVec<[ast::GenericParam; 1]>> {\n+        None\n+    }\n+\n+    fn make_params(self: Box<Self>) -> Option<SmallVec<[ast::Param; 1]>> {\n+        None\n+    }\n+\n+    fn make_struct_fields(self: Box<Self>) -> Option<SmallVec<[ast::StructField; 1]>> {\n+        None\n+    }\n+\n+    fn make_variants(self: Box<Self>) -> Option<SmallVec<[ast::Variant; 1]>> {\n+        None\n+    }\n }\n \n macro_rules! make_MacEager {\n@@ -498,6 +610,34 @@ impl MacResult for DummyResult {\n     fn make_ty(self: Box<DummyResult>) -> Option<P<ast::Ty>> {\n         Some(DummyResult::raw_ty(self.span, self.is_error))\n     }\n+\n+    fn make_arms(self: Box<DummyResult>) -> Option<SmallVec<[ast::Arm; 1]>> {\n+       Some(SmallVec::new())\n+    }\n+\n+    fn make_fields(self: Box<DummyResult>) -> Option<SmallVec<[ast::Field; 1]>> {\n+        Some(SmallVec::new())\n+    }\n+\n+    fn make_field_patterns(self: Box<DummyResult>) -> Option<SmallVec<[ast::FieldPat; 1]>> {\n+        Some(SmallVec::new())\n+    }\n+\n+    fn make_generic_params(self: Box<DummyResult>) -> Option<SmallVec<[ast::GenericParam; 1]>> {\n+        Some(SmallVec::new())\n+    }\n+\n+    fn make_params(self: Box<DummyResult>) -> Option<SmallVec<[ast::Param; 1]>> {\n+        Some(SmallVec::new())\n+    }\n+\n+    fn make_struct_fields(self: Box<DummyResult>) -> Option<SmallVec<[ast::StructField; 1]>> {\n+        Some(SmallVec::new())\n+    }\n+\n+    fn make_variants(self: Box<DummyResult>) -> Option<SmallVec<[ast::Variant; 1]>> {\n+        Some(SmallVec::new())\n+    }\n }\n \n /// A syntax extension kind."}, {"sha": "06a55316f31d69ef874e4c49003a34d0b4dc5e5a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -166,7 +166,8 @@ impl<'a> ExtCtxt<'a> {\n             bounds,\n             kind: ast::GenericParamKind::Type {\n                 default,\n-            }\n+            },\n+            is_placeholder: false\n         }\n     }\n \n@@ -207,6 +208,7 @@ impl<'a> ExtCtxt<'a> {\n             attrs: attrs.into(),\n             bounds,\n             kind: ast::GenericParamKind::Lifetime,\n+            is_placeholder: false\n         }\n     }\n \n@@ -404,6 +406,7 @@ impl<'a> ExtCtxt<'a> {\n             is_shorthand: false,\n             attrs: ThinVec::new(),\n             id: ast::DUMMY_NODE_ID,\n+            is_placeholder: false,\n         }\n     }\n     pub fn expr_struct(\n@@ -614,6 +617,7 @@ impl<'a> ExtCtxt<'a> {\n             body: expr,\n             span,\n             id: ast::DUMMY_NODE_ID,\n+            is_placeholder: false,\n         }\n     }\n \n@@ -701,6 +705,7 @@ impl<'a> ExtCtxt<'a> {\n             pat: arg_pat,\n             span,\n             ty,\n+            is_placeholder: false,\n         }\n     }\n \n@@ -774,6 +779,7 @@ impl<'a> ExtCtxt<'a> {\n                 vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 attrs: Vec::new(),\n                 id: ast::DUMMY_NODE_ID,\n+                is_placeholder: false,\n             }\n         }).collect();\n \n@@ -790,6 +796,7 @@ impl<'a> ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             ident,\n             span,\n+            is_placeholder: false,\n         }\n     }\n "}, {"sha": "87e2d721f89a0954b237b4310310e3a6db80e053", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 193, "deletions": 6, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -141,7 +141,40 @@ ast_fragments! {\n         \"impl item\"; many fn flat_map_impl_item; fn visit_impl_item; fn make_impl_items;\n     }\n     ForeignItems(SmallVec<[ast::ForeignItem; 1]>) {\n-        \"foreign item\"; many fn flat_map_foreign_item; fn visit_foreign_item; fn make_foreign_items;\n+        \"foreign item\";\n+        many fn flat_map_foreign_item;\n+        fn visit_foreign_item;\n+        fn make_foreign_items;\n+    }\n+    Arms(SmallVec<[ast::Arm; 1]>) {\n+        \"match arm\"; many fn flat_map_arm; fn visit_arm; fn make_arms;\n+    }\n+    Fields(SmallVec<[ast::Field; 1]>) {\n+        \"field expression\"; many fn flat_map_field; fn visit_field; fn make_fields;\n+    }\n+    FieldPats(SmallVec<[ast::FieldPat; 1]>) {\n+        \"field pattern\";\n+        many fn flat_map_field_pattern;\n+        fn visit_field_pattern;\n+        fn make_field_patterns;\n+    }\n+    GenericParams(SmallVec<[ast::GenericParam; 1]>) {\n+        \"generic parameter\";\n+        many fn flat_map_generic_param;\n+        fn visit_generic_param;\n+        fn make_generic_params;\n+    }\n+    Params(SmallVec<[ast::Param; 1]>) {\n+        \"function parameter\"; many fn flat_map_param; fn visit_param; fn make_params;\n+    }\n+    StructFields(SmallVec<[ast::StructField; 1]>) {\n+        \"field\";\n+        many fn flat_map_struct_field;\n+        fn visit_struct_field;\n+        fn make_struct_fields;\n+    }\n+    Variants(SmallVec<[ast::Variant; 1]>) {\n+        \"variant\"; many fn flat_map_variant; fn visit_variant; fn make_variants;\n     }\n }\n \n@@ -154,6 +187,21 @@ impl AstFragmentKind {\n                                                                      -> AstFragment {\n         let mut items = items.into_iter();\n         match self {\n+            AstFragmentKind::Arms =>\n+                AstFragment::Arms(items.map(Annotatable::expect_arm).collect()),\n+            AstFragmentKind::Fields =>\n+                AstFragment::Fields(items.map(Annotatable::expect_field).collect()),\n+            AstFragmentKind::FieldPats =>\n+                AstFragment::FieldPats(items.map(Annotatable::expect_field_pattern).collect()),\n+            AstFragmentKind::GenericParams =>\n+                AstFragment::GenericParams(items.map(Annotatable::expect_generic_param).collect()),\n+            AstFragmentKind::Params =>\n+                AstFragment::Params(items.map(Annotatable::expect_param).collect()),\n+            AstFragmentKind::StructFields => AstFragment::StructFields(\n+                items.map(Annotatable::expect_struct_field).collect()\n+            ),\n+            AstFragmentKind::Variants =>\n+                AstFragment::Variants(items.map(Annotatable::expect_variant).collect()),\n             AstFragmentKind::Items =>\n                 AstFragment::Items(items.map(Annotatable::expect_item).collect()),\n             AstFragmentKind::ImplItems =>\n@@ -177,7 +225,7 @@ impl AstFragmentKind {\n \n pub struct Invocation {\n     pub kind: InvocationKind,\n-    fragment_kind: AstFragmentKind,\n+    pub fragment_kind: AstFragmentKind,\n     pub expansion_data: ExpansionData,\n }\n \n@@ -482,6 +530,27 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             Annotatable::Expr(mut expr) => {\n                 Annotatable::Expr({ cfg.visit_expr(&mut expr); expr })\n             }\n+            Annotatable::Arm(arm) => {\n+                Annotatable::Arm(cfg.flat_map_arm(arm).pop().unwrap())\n+            }\n+            Annotatable::Field(field) => {\n+                Annotatable::Field(cfg.flat_map_field(field).pop().unwrap())\n+            }\n+            Annotatable::FieldPat(fp) => {\n+                Annotatable::FieldPat(cfg.flat_map_field_pattern(fp).pop().unwrap())\n+            }\n+            Annotatable::GenericParam(param) => {\n+                Annotatable::GenericParam(cfg.flat_map_generic_param(param).pop().unwrap())\n+            }\n+            Annotatable::Param(param) => {\n+                Annotatable::Param(cfg.flat_map_param(param).pop().unwrap())\n+            }\n+            Annotatable::StructField(sf) => {\n+                Annotatable::StructField(cfg.flat_map_struct_field(sf).pop().unwrap())\n+            }\n+            Annotatable::Variant(v) => {\n+                Annotatable::Variant(cfg.flat_map_variant(v).pop().unwrap())\n+            }\n         }\n     }\n \n@@ -547,6 +616,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         Annotatable::ForeignItem(item) => token::NtForeignItem(item.into_inner()),\n                         Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n                         Annotatable::Expr(expr) => token::NtExpr(expr),\n+                        Annotatable::Arm(..)\n+                        | Annotatable::Field(..)\n+                        | Annotatable::FieldPat(..)\n+                        | Annotatable::GenericParam(..)\n+                        | Annotatable::Param(..)\n+                        | Annotatable::StructField(..)\n+                        | Annotatable::Variant(..)\n+                            => panic!(\"unexpected annotatable\"),\n                     })), DUMMY_SP).into();\n                     let input = self.extract_proc_macro_attr_input(attr.tokens, span);\n                     let tok_result = expander.expand(self.cx, span, input, item_tok);\n@@ -625,6 +702,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             Annotatable::Expr(_) if self.cx.ecfg.proc_macro_hygiene() => return,\n             Annotatable::Stmt(_) => (\"statements\", sym::proc_macro_hygiene),\n             Annotatable::Expr(_) => (\"expressions\", sym::proc_macro_hygiene),\n+            Annotatable::Arm(..)\n+            | Annotatable::Field(..)\n+            | Annotatable::FieldPat(..)\n+            | Annotatable::GenericParam(..)\n+            | Annotatable::Param(..)\n+            | Annotatable::StructField(..)\n+            | Annotatable::Variant(..)\n+            => panic!(\"unexpected annotatable\"),\n         };\n         emit_feature_err(\n             self.cx.parse_sess,\n@@ -681,6 +766,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             AstFragmentKind::TraitItems => return,\n             AstFragmentKind::ImplItems => return,\n             AstFragmentKind::ForeignItems => return,\n+            AstFragmentKind::Arms\n+            | AstFragmentKind::Fields\n+            | AstFragmentKind::FieldPats\n+            | AstFragmentKind::GenericParams\n+            | AstFragmentKind::Params\n+            | AstFragmentKind::StructFields\n+            | AstFragmentKind::Variants\n+                => panic!(\"unexpected AST fragment kind\"),\n         };\n         if self.cx.ecfg.proc_macro_hygiene() {\n             return\n@@ -771,6 +864,14 @@ impl<'a> Parser<'a> {\n             },\n             AstFragmentKind::Ty => AstFragment::Ty(self.parse_ty()?),\n             AstFragmentKind::Pat => AstFragment::Pat(self.parse_pat(None)?),\n+            AstFragmentKind::Arms\n+            | AstFragmentKind::Fields\n+            | AstFragmentKind::FieldPats\n+            | AstFragmentKind::GenericParams\n+            | AstFragmentKind::Params\n+            | AstFragmentKind::StructFields\n+            | AstFragmentKind::Variants\n+                => panic!(\"unexpected AST fragment kind\"),\n         })\n     }\n \n@@ -972,6 +1073,84 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         });\n     }\n \n+    fn flat_map_arm(&mut self, arm: ast::Arm) -> SmallVec<[ast::Arm; 1]> {\n+        let mut arm = configure!(self, arm);\n+\n+        let (attr, traits, after_derive) = self.classify_item(&mut arm);\n+        if attr.is_some() || !traits.is_empty() {\n+            return self.collect_attr(attr, traits, Annotatable::Arm(arm),\n+                                     AstFragmentKind::Arms, after_derive)\n+                                     .make_arms();\n+        }\n+\n+        noop_flat_map_arm(arm, self)\n+    }\n+\n+    fn flat_map_field(&mut self, field: ast::Field) -> SmallVec<[ast::Field; 1]> {\n+        let mut field = configure!(self, field);\n+\n+        let (attr, traits, after_derive) = self.classify_item(&mut field);\n+        if attr.is_some() || !traits.is_empty() {\n+            return self.collect_attr(attr, traits, Annotatable::Field(field),\n+                                     AstFragmentKind::Fields, after_derive)\n+                                     .make_fields();\n+        }\n+\n+        noop_flat_map_field(field, self)\n+    }\n+\n+    fn flat_map_field_pattern(&mut self, fp: ast::FieldPat) -> SmallVec<[ast::FieldPat; 1]> {\n+        let mut fp = configure!(self, fp);\n+\n+        let (attr, traits, after_derive) = self.classify_item(&mut fp);\n+        if attr.is_some() || !traits.is_empty() {\n+            return self.collect_attr(attr, traits, Annotatable::FieldPat(fp),\n+                                     AstFragmentKind::FieldPats, after_derive)\n+                                     .make_field_patterns();\n+        }\n+\n+        noop_flat_map_field_pattern(fp, self)\n+    }\n+\n+    fn flat_map_param(&mut self, p: ast::Param) -> SmallVec<[ast::Param; 1]> {\n+        let mut p = configure!(self, p);\n+\n+        let (attr, traits, after_derive) = self.classify_item(&mut p);\n+        if attr.is_some() || !traits.is_empty() {\n+            return self.collect_attr(attr, traits, Annotatable::Param(p),\n+                                     AstFragmentKind::Params, after_derive)\n+                                     .make_params();\n+        }\n+\n+        noop_flat_map_param(p, self)\n+    }\n+\n+    fn flat_map_struct_field(&mut self, sf: ast::StructField) -> SmallVec<[ast::StructField; 1]> {\n+        let mut sf = configure!(self, sf);\n+\n+        let (attr, traits, after_derive) = self.classify_item(&mut sf);\n+        if attr.is_some() || !traits.is_empty() {\n+            return self.collect_attr(attr, traits, Annotatable::StructField(sf),\n+                                     AstFragmentKind::StructFields, after_derive)\n+                                     .make_struct_fields();\n+        }\n+\n+        noop_flat_map_struct_field(sf, self)\n+    }\n+\n+    fn flat_map_variant(&mut self, variant: ast::Variant) -> SmallVec<[ast::Variant; 1]> {\n+        let mut variant = configure!(self, variant);\n+\n+        let (attr, traits, after_derive) = self.classify_item(&mut variant);\n+        if attr.is_some() || !traits.is_empty() {\n+            return self.collect_attr(attr, traits, Annotatable::Variant(variant),\n+                                     AstFragmentKind::Variants, after_derive)\n+                                     .make_variants();\n+        }\n+\n+        noop_flat_map_variant(variant, self)\n+    }\n+\n     fn filter_map_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n         let expr = configure!(self, expr);\n         expr.filter_map(|mut expr| {\n@@ -1227,12 +1406,20 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-   fn flat_map_generic_param(\n-       &mut self,\n-       param: ast::GenericParam\n+    fn flat_map_generic_param(\n+        &mut self,\n+        param: ast::GenericParam\n     ) -> SmallVec<[ast::GenericParam; 1]>\n     {\n-        let param = configure!(self, param);\n+        let mut param = configure!(self, param);\n+\n+        let (attr, traits, after_derive) = self.classify_item(&mut param);\n+        if attr.is_some() || !traits.is_empty() {\n+            return self.collect_attr(attr, traits, Annotatable::GenericParam(param),\n+                                     AstFragmentKind::GenericParams, after_derive)\n+                                     .make_generic_params();\n+        }\n+\n         noop_flat_map_generic_param(param, self)\n     }\n "}, {"sha": "52a0f95bce7ffb928c29c07d4703ecd6625eea86", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -32,6 +32,16 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n         attrs: ThinVec::new(),\n         node: ast::ExprKind::Mac(mac_placeholder()),\n     });\n+    let ty = P(ast::Ty {\n+        id,\n+        node: ast::TyKind::Mac(mac_placeholder()),\n+        span,\n+    });\n+    let pat = P(ast::Pat {\n+        id,\n+        node: ast::PatKind::Mac(mac_placeholder()),\n+        span,\n+    });\n \n     match kind {\n         AstFragmentKind::Expr => AstFragment::Expr(expr_placeholder()),\n@@ -67,6 +77,81 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n             let mac = P((mac_placeholder(), ast::MacStmtStyle::Braces, ThinVec::new()));\n             ast::Stmt { id, span, node: ast::StmtKind::Mac(mac) }\n         }]),\n+        AstFragmentKind::Arms => AstFragment::Arms(smallvec![\n+            ast::Arm {\n+                attrs: Default::default(),\n+                body: expr_placeholder(),\n+                guard: None,\n+                id,\n+                pat,\n+                span,\n+                is_placeholder: true,\n+            }\n+        ]),\n+        AstFragmentKind::Fields => AstFragment::Fields(smallvec![\n+            ast::Field {\n+                attrs: Default::default(),\n+                expr: expr_placeholder(),\n+                id,\n+                ident,\n+                is_shorthand: false,\n+                span,\n+                is_placeholder: true,\n+            }\n+        ]),\n+        AstFragmentKind::FieldPats => AstFragment::FieldPats(smallvec![\n+            ast::FieldPat {\n+                attrs: Default::default(),\n+                id,\n+                ident,\n+                is_shorthand: false,\n+                pat,\n+                span,\n+                is_placeholder: true,\n+            }\n+        ]),\n+        AstFragmentKind::GenericParams => AstFragment::GenericParams(smallvec![{\n+            ast::GenericParam {\n+                attrs: Default::default(),\n+                bounds: Default::default(),\n+                id,\n+                ident,\n+                is_placeholder: true,\n+                kind: ast::GenericParamKind::Lifetime,\n+            }\n+        }]),\n+        AstFragmentKind::Params => AstFragment::Params(smallvec![\n+            ast::Param {\n+                attrs: Default::default(),\n+                id,\n+                pat,\n+                span,\n+                ty,\n+                is_placeholder: true,\n+            }\n+        ]),\n+        AstFragmentKind::StructFields => AstFragment::StructFields(smallvec![\n+            ast::StructField {\n+                attrs: Default::default(),\n+                id,\n+                ident: None,\n+                span,\n+                ty,\n+                vis,\n+                is_placeholder: true,\n+            }\n+        ]),\n+        AstFragmentKind::Variants => AstFragment::Variants(smallvec![\n+            ast::Variant {\n+                attrs: Default::default(),\n+                data: ast::VariantData::Struct(Default::default(), false),\n+                disr_expr: None,\n+                id,\n+                ident,\n+                span,\n+                is_placeholder: true,\n+            }\n+        ])\n     }\n }\n \n@@ -105,6 +190,66 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n }\n \n impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n+    fn flat_map_arm(&mut self, arm: ast::Arm) -> SmallVec<[ast::Arm; 1]> {\n+        if arm.is_placeholder {\n+            self.remove(arm.id).make_arms()\n+        } else {\n+            noop_flat_map_arm(arm, self)\n+        }\n+    }\n+\n+    fn flat_map_field(&mut self, field: ast::Field) -> SmallVec<[ast::Field; 1]> {\n+        if field.is_placeholder {\n+            self.remove(field.id).make_fields()\n+        } else {\n+            noop_flat_map_field(field, self)\n+        }\n+    }\n+\n+    fn flat_map_field_pattern(&mut self, fp: ast::FieldPat) -> SmallVec<[ast::FieldPat; 1]> {\n+        if fp.is_placeholder {\n+            self.remove(fp.id).make_field_patterns()\n+        } else {\n+            noop_flat_map_field_pattern(fp, self)\n+        }\n+    }\n+\n+    fn flat_map_generic_param(\n+        &mut self,\n+        param: ast::GenericParam\n+    ) -> SmallVec<[ast::GenericParam; 1]>\n+    {\n+        if param.is_placeholder {\n+            self.remove(param.id).make_generic_params()\n+        } else {\n+            noop_flat_map_generic_param(param, self)\n+        }\n+    }\n+\n+    fn flat_map_param(&mut self, p: ast::Param) -> SmallVec<[ast::Param; 1]> {\n+        if p.is_placeholder {\n+            self.remove(p.id).make_params()\n+        } else {\n+            noop_flat_map_param(p, self)\n+        }\n+    }\n+\n+    fn flat_map_struct_field(&mut self, sf: ast::StructField) -> SmallVec<[ast::StructField; 1]> {\n+        if sf.is_placeholder {\n+            self.remove(sf.id).make_struct_fields()\n+        } else {\n+            noop_flat_map_struct_field(sf, self)\n+        }\n+    }\n+\n+    fn flat_map_variant(&mut self, variant: ast::Variant) -> SmallVec<[ast::Variant; 1]> {\n+        if variant.is_placeholder {\n+            self.remove(variant.id).make_variants()\n+        } else {\n+            noop_flat_map_variant(variant, self)\n+        }\n+    }\n+\n     fn flat_map_item(&mut self, item: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {\n         match item.node {\n             ast::ItemKind::Mac(_) => return self.remove(item.id).make_items(),"}, {"sha": "47b17ced8163e653a4832cd5936d0846d1916e41", "filename": "src/libsyntax/ext/proc_macro.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fext%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fext%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -88,6 +88,14 @@ impl MultiItemModifier for ProcMacroDerive {\n               item: Annotatable)\n               -> Vec<Annotatable> {\n         let item = match item {\n+            Annotatable::Arm(..) |\n+            Annotatable::Field(..) |\n+            Annotatable::FieldPat(..) |\n+            Annotatable::GenericParam(..) |\n+            Annotatable::Param(..) |\n+            Annotatable::StructField(..) |\n+            Annotatable::Variant(..)\n+                => panic!(\"unexpected annotatable\"),\n             Annotatable::Item(item) => item,\n             Annotatable::ImplItem(_) |\n             Annotatable::TraitItem(_) |"}, {"sha": "5a37222ee5590dba0d596b573580a89876e1d031", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -370,6 +370,7 @@ pub fn noop_flat_map_field_pattern<T: MutVisitor>(\n         attrs,\n         id,\n         ident,\n+        is_placeholder: _,\n         is_shorthand: _,\n         pat,\n         span,\n@@ -403,7 +404,7 @@ pub fn noop_visit_use_tree<T: MutVisitor>(use_tree: &mut UseTree, vis: &mut T) {\n }\n \n pub fn noop_flat_map_arm<T: MutVisitor>(mut arm: Arm, vis: &mut T) -> SmallVec<[Arm; 1]> {\n-    let Arm { attrs, pat, guard, body, span, id } = &mut arm;\n+    let Arm { attrs, pat, guard, body, span, id, is_placeholder: _ } = &mut arm;\n     visit_attrs(attrs, vis);\n     vis.visit_id(id);\n     vis.visit_pat(pat);\n@@ -477,7 +478,7 @@ pub fn noop_visit_foreign_mod<T: MutVisitor>(foreign_mod: &mut ForeignMod, vis:\n pub fn noop_flat_map_variant<T: MutVisitor>(mut variant: Variant, vis: &mut T)\n     -> SmallVec<[Variant; 1]>\n {\n-    let Variant { ident, attrs, id, data, disr_expr, span } = &mut variant;\n+    let Variant { ident, attrs, id, data, disr_expr, span, is_placeholder: _ } = &mut variant;\n     vis.visit_ident(ident);\n     visit_attrs(attrs, vis);\n     vis.visit_id(id);\n@@ -585,7 +586,7 @@ pub fn noop_visit_meta_item<T: MutVisitor>(mi: &mut MetaItem, vis: &mut T) {\n }\n \n pub fn noop_flat_map_param<T: MutVisitor>(mut param: Param, vis: &mut T) -> SmallVec<[Param; 1]> {\n-    let Param { attrs, id, pat, span, ty } = &mut param;\n+    let Param { attrs, id, pat, span, ty, is_placeholder: _ } = &mut param;\n     vis.visit_id(id);\n     visit_thin_attrs(attrs, vis);\n     vis.visit_pat(pat);\n@@ -736,7 +737,7 @@ pub fn noop_flat_map_generic_param<T: MutVisitor>(\n     vis: &mut T\n ) -> SmallVec<[GenericParam; 1]>\n {\n-    let GenericParam { id, ident, attrs, bounds, kind } = &mut param;\n+    let GenericParam { id, ident, attrs, bounds, kind, is_placeholder: _ } = &mut param;\n     vis.visit_id(id);\n     vis.visit_ident(ident);\n     visit_thin_attrs(attrs, vis);\n@@ -828,7 +829,7 @@ pub fn noop_visit_poly_trait_ref<T: MutVisitor>(p: &mut PolyTraitRef, vis: &mut\n pub fn noop_flat_map_struct_field<T: MutVisitor>(mut sf: StructField, visitor: &mut T)\n     -> SmallVec<[StructField; 1]>\n {\n-    let StructField { span, ident, vis, id, ty, attrs } = &mut sf;\n+    let StructField { span, ident, vis, id, ty, attrs, is_placeholder: _ } = &mut sf;\n     visitor.visit_span(span);\n     visit_opt(ident, |ident| visitor.visit_ident(ident));\n     visitor.visit_vis(vis);\n@@ -839,7 +840,7 @@ pub fn noop_flat_map_struct_field<T: MutVisitor>(mut sf: StructField, visitor: &\n }\n \n pub fn noop_flat_map_field<T: MutVisitor>(mut f: Field, vis: &mut T) -> SmallVec<[Field; 1]> {\n-    let Field { ident, expr, span, is_shorthand: _, attrs, id } = &mut f;\n+    let Field { ident, expr, span, is_shorthand: _, attrs, id, is_placeholder: _ } = &mut f;\n     vis.visit_ident(ident);\n     vis.visit_expr(expr);\n     vis.visit_id(id);"}, {"sha": "b74f2492c351f15c087002de2202bc039ebd3848", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -29,7 +29,14 @@ crate fn dummy_arg(ident: Ident) -> Param {\n         span: ident.span,\n         id: ast::DUMMY_NODE_ID\n     };\n-    Param { attrs: ThinVec::default(), id: ast::DUMMY_NODE_ID, pat, span: ident.span, ty: P(ty) }\n+    Param {\n+        attrs: ThinVec::default(),\n+        id: ast::DUMMY_NODE_ID,\n+        pat,\n+        span: ident.span,\n+        ty: P(ty),\n+        is_placeholder: false,\n+    }\n }\n \n pub enum Error {"}, {"sha": "fcebfa299623357cbebaf7acd6c194413689a994", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -1040,7 +1040,14 @@ impl<'a> Parser<'a> {\n \n         let span = lo.to(self.token.span);\n \n-        Ok(Param { attrs: attrs.into(), id: DUMMY_NODE_ID, pat, span, ty })\n+        Ok(Param {\n+            attrs: attrs.into(),\n+            id: ast::DUMMY_NODE_ID,\n+            is_placeholder: false,\n+            pat,\n+            span,\n+            ty,\n+        })\n     }\n \n     /// Parses mutability (`mut` or nothing)."}, {"sha": "31b28443abbc3520ac0770358b0b2370ee09103b", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -1193,7 +1193,8 @@ impl<'a> Parser<'a> {\n             ty: t,\n             pat,\n             span,\n-            id: DUMMY_NODE_ID\n+            id: DUMMY_NODE_ID,\n+            is_placeholder: false,\n         })\n     }\n \n@@ -1455,6 +1456,7 @@ impl<'a> Parser<'a> {\n             body: expr,\n             span: lo.to(hi),\n             id: DUMMY_NODE_ID,\n+            is_placeholder: false,\n         })\n     }\n \n@@ -1611,6 +1613,7 @@ impl<'a> Parser<'a> {\n                         is_shorthand: false,\n                         attrs: ThinVec::new(),\n                         id: DUMMY_NODE_ID,\n+                        is_placeholder: false,\n                     });\n                 }\n             }\n@@ -1697,6 +1700,7 @@ impl<'a> Parser<'a> {\n             is_shorthand,\n             attrs: attrs.into(),\n             id: DUMMY_NODE_ID,\n+            is_placeholder: false,\n         })\n     }\n "}, {"sha": "3e6118ad86f47a167364cc9d2dd9845dae14273f", "filename": "src/libsyntax/parse/parser/generics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -49,7 +49,8 @@ impl<'a> Parser<'a> {\n             bounds,\n             kind: GenericParamKind::Type {\n                 default,\n-            }\n+            },\n+            is_placeholder: false\n         })\n     }\n \n@@ -66,7 +67,8 @@ impl<'a> Parser<'a> {\n             bounds: Vec::new(),\n             kind: GenericParamKind::Const {\n                 ty,\n-            }\n+            },\n+            is_placeholder: false\n         })\n     }\n \n@@ -90,6 +92,7 @@ impl<'a> Parser<'a> {\n                     attrs: attrs.into(),\n                     bounds,\n                     kind: ast::GenericParamKind::Lifetime,\n+                    is_placeholder: false\n                 });\n             } else if self.check_keyword(kw::Const) {\n                 // Parse const parameter."}, {"sha": "baae6155f34787e522e77a8c395e63a330a4976f", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -1575,6 +1575,7 @@ impl<'a> Parser<'a> {\n                 data: struct_def,\n                 disr_expr,\n                 span: vlo.to(self.prev_span),\n+                is_placeholder: false,\n             };\n             variants.push(vr);\n \n@@ -1730,6 +1731,7 @@ impl<'a> Parser<'a> {\n                 id: DUMMY_NODE_ID,\n                 ty,\n                 attrs,\n+                is_placeholder: false,\n             })\n         }).map(|(r, _)| r)\n     }\n@@ -1821,6 +1823,7 @@ impl<'a> Parser<'a> {\n             id: DUMMY_NODE_ID,\n             ty,\n             attrs,\n+            is_placeholder: false,\n         })\n     }\n "}, {"sha": "08ee3a6bd86d4f5c58fc921fa67781d04cc9a03f", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -882,6 +882,7 @@ impl<'a> Parser<'a> {\n             attrs: attrs.into(),\n             id: ast::DUMMY_NODE_ID,\n             span: lo.to(hi),\n+            is_placeholder: false,\n         })\n     }\n "}, {"sha": "05d78cdd87ec6855455d815acc0e8ba05bae9043", "filename": "src/libsyntax/print/pprust/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -61,6 +61,7 @@ fn test_variant_to_string() {\n             data: ast::VariantData::Unit(ast::DUMMY_NODE_ID),\n             disr_expr: None,\n             span: syntax_pos::DUMMY_SP,\n+            is_placeholder: false,\n         };\n \n         let varstr = variant_to_string(&var);"}, {"sha": "c53fa7dc706e7ac5bf8032e956c344e6f809bb9c", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -1620,6 +1620,7 @@ impl<'a> TraitDef<'a> {\n                             id: ast::DUMMY_NODE_ID,\n                             span: pat.span.with_ctxt(self.span.ctxt()),\n                             pat,\n+                            is_placeholder: false\n                         }\n                     })\n                     .collect();"}, {"sha": "a38b3cfa6665ec35ee8c3b994a95642f64a45886", "filename": "src/test/ui/attrs-resolution-errors.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fattrs-resolution-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fattrs-resolution-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-resolution-errors.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -0,0 +1,40 @@\n+enum FooEnum {\n+    #[test]\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    Bar(i32),\n+}\n+\n+struct FooStruct {\n+    #[test]\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    bar: i32,\n+}\n+\n+fn main() {\n+    let foo_enum_bar = FooEnum::Bar(1);\n+    match foo_enum_bar {\n+        FooEnum::Bar(x) => {},\n+        _ => {}\n+    }\n+\n+    let foo_struct = FooStruct { bar: 1 };\n+    match foo_struct {\n+        FooStruct {\n+            #[test] bar\n+            //~^ ERROR expected an inert attribute, found an attribute macro\n+        } => {}\n+    }\n+\n+    match 1 {\n+        0 => {}\n+        #[test]\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n+        _ => {}\n+    }\n+\n+    let _another_foo_strunct = FooStruct {\n+        #[test]\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n+        bar: 1,\n+    };\n+}"}, {"sha": "31f2a74edb33316e70bd73f3358357986c469c9b", "filename": "src/test/ui/attrs-resolution-errors.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fattrs-resolution-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fattrs-resolution-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-resolution-errors.stderr?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -0,0 +1,32 @@\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/attrs-resolution-errors.rs:2:5\n+   |\n+LL |     #[test]\n+   |     ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/attrs-resolution-errors.rs:8:5\n+   |\n+LL |     #[test]\n+   |     ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/attrs-resolution-errors.rs:23:13\n+   |\n+LL |             #[test] bar\n+   |             ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/attrs-resolution-errors.rs:30:9\n+   |\n+LL |         #[test]\n+   |         ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/attrs-resolution-errors.rs:36:9\n+   |\n+LL |         #[test]\n+   |         ^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "6809773237d2c84fc5e606fd5a0626b7864301df", "filename": "src/test/ui/attrs-resolution.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fattrs-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fattrs-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-resolution.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+\n+enum FooEnum {\n+    #[rustfmt::skip]\n+    Bar(i32),\n+}\n+\n+struct FooStruct {\n+    #[rustfmt::skip]\n+    bar: i32,\n+}\n+\n+fn main() {\n+    let foo_enum_bar = FooEnum::Bar(1);\n+    match foo_enum_bar {\n+        FooEnum::Bar(x) => {}\n+        _ => {}\n+    }\n+\n+    let foo_struct = FooStruct { bar: 1 };\n+    match foo_struct {\n+        FooStruct {\n+            #[rustfmt::skip] bar\n+        } => {}\n+    }\n+\n+    match 1 {\n+        0 => {}\n+        #[rustfmt::skip]\n+        _ => {}\n+    }\n+\n+    let _another_foo_strunct = FooStruct {\n+        #[rustfmt::skip]\n+        bar: 1,\n+    };\n+}"}, {"sha": "faf01957c7e4f1122264b463e05e7aebf54d6c44", "filename": "src/test/ui/conditional-compilation/cfg-generic-params.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -16,21 +16,23 @@ struct WhereBad where for<#[cfg(no)] 'a, #[cfg(yes)] T> u8: Copy;\n //~^ ERROR only lifetime parameters can be used in this context\n \n fn f_lt_no<#[cfg_attr(no, unknown)] 'a>() {} // OK\n-fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {} //~ ERROR attribute `unknown` is currently unknown\n+fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {}\n+//~^ ERROR cannot find attribute macro `unknown` in this scope\n fn f_ty_no<#[cfg_attr(no, unknown)] T>() {} // OK\n-fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {} //~ ERROR attribute `unknown` is currently unknown\n+fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {}\n+//~^ ERROR cannot find attribute macro `unknown` in this scope\n \n type FnNo = for<#[cfg_attr(no, unknown)] 'a> fn(); // OK\n type FnYes = for<#[cfg_attr(yes, unknown)] 'a> fn();\n-//~^ ERROR attribute `unknown` is currently unknown\n+//~^ ERROR cannot find attribute macro `unknown` in this scope\n \n type PolyNo = dyn for<#[cfg_attr(no, unknown)] 'a> Copy; // OK\n type PolyYes = dyn for<#[cfg_attr(yes, unknown)] 'a> Copy;\n-//~^ ERROR attribute `unknown` is currently unknown\n+//~^ ERROR cannot find attribute macro `unknown` in this scope\n \n struct WhereNo where for<#[cfg_attr(no, unknown)] 'a> u8: Copy; // OK\n struct WhereYes where for<#[cfg_attr(yes, unknown)] 'a> u8: Copy;\n-//~^ ERROR attribute `unknown` is currently unknown\n+//~^ ERROR cannot find attribute macro `unknown` in this scope\n \n fn main() {\n     f_lt::<'static>();"}, {"sha": "f6e5732916b914492bfc7ce54131708d207892b9", "filename": "src/test/ui/conditional-compilation/cfg-generic-params.stderr", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-generic-params.stderr?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -16,51 +16,35 @@ error: only lifetime parameters can be used in this context\n LL | struct WhereBad where for<#[cfg(no)] 'a, #[cfg(yes)] T> u8: Copy;\n    |                                                      ^\n \n-error[E0658]: the attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/cfg-generic-params.rs:19:29\n-   |\n-LL | fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {}\n-   |                             ^^^^^^^\n+error: cannot find attribute macro `unknown` in this scope\n+  --> $DIR/cfg-generic-params.rs:34:43\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | struct WhereYes where for<#[cfg_attr(yes, unknown)] 'a> u8: Copy;\n+   |                                           ^^^^^^^\n \n-error[E0658]: the attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/cfg-generic-params.rs:21:29\n+error: cannot find attribute macro `unknown` in this scope\n+  --> $DIR/cfg-generic-params.rs:30:40\n    |\n-LL | fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {}\n-   |                             ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | type PolyYes = dyn for<#[cfg_attr(yes, unknown)] 'a> Copy;\n+   |                                        ^^^^^^^\n \n-error[E0658]: the attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/cfg-generic-params.rs:24:34\n+error: cannot find attribute macro `unknown` in this scope\n+  --> $DIR/cfg-generic-params.rs:26:34\n    |\n LL | type FnYes = for<#[cfg_attr(yes, unknown)] 'a> fn();\n    |                                  ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/cfg-generic-params.rs:28:40\n+error: cannot find attribute macro `unknown` in this scope\n+  --> $DIR/cfg-generic-params.rs:22:29\n    |\n-LL | type PolyYes = dyn for<#[cfg_attr(yes, unknown)] 'a> Copy;\n-   |                                        ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | fn f_ty_yes<#[cfg_attr(yes, unknown)] T>() {}\n+   |                             ^^^^^^^\n \n-error[E0658]: the attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/cfg-generic-params.rs:32:43\n-   |\n-LL | struct WhereYes where for<#[cfg_attr(yes, unknown)] 'a> u8: Copy;\n-   |                                           ^^^^^^^\n+error: cannot find attribute macro `unknown` in this scope\n+  --> $DIR/cfg-generic-params.rs:19:29\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | fn f_lt_yes<#[cfg_attr(yes, unknown)] 'a>() {}\n+   |                             ^^^^^^^\n \n error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "51b5bf5387b5f3e4e1daa678700ddda2f621ba51", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute2.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -4,54 +4,54 @@\n // gate-test-custom_attribute\n \n struct StLt<#[lt_struct] 'a>(&'a u32);\n-//~^ ERROR the attribute `lt_struct` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `lt_struct` in this scope\n struct StTy<#[ty_struct] I>(I);\n-//~^ ERROR the attribute `ty_struct` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `ty_struct` in this scope\n \n enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n-//~^ ERROR the attribute `lt_enum` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `lt_enum` in this scope\n enum EnTy<#[ty_enum] J> { A(J), B }\n-//~^ ERROR the attribute `ty_enum` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `ty_enum` in this scope\n \n trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n-//~^ ERROR the attribute `lt_trait` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `lt_trait` in this scope\n trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n-//~^ ERROR the attribute `ty_trait` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `ty_trait` in this scope\n \n type TyLt<#[lt_type] 'd> = &'d u32;\n-//~^ ERROR the attribute `lt_type` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `lt_type` in this scope\n type TyTy<#[ty_type] L> = (L, );\n-//~^ ERROR the attribute `ty_type` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `ty_type` in this scope\n \n impl<#[lt_inherent] 'e> StLt<'e> { }\n-//~^ ERROR the attribute `lt_inherent` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `lt_inherent` in this scope\n impl<#[ty_inherent] M> StTy<M> { }\n-//~^ ERROR the attribute `ty_inherent` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `ty_inherent` in this scope\n \n impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n-    //~^ ERROR the attribute `lt_impl_for` is currently unknown to the compiler\n+    //~^ ERROR cannot find attribute macro `lt_impl_for` in this scope\n     fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n }\n impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n-    //~^ ERROR the attribute `ty_impl_for` is currently unknown to the compiler\n+    //~^ ERROR cannot find attribute macro `ty_impl_for` in this scope\n     fn foo(&self, _: N) { }\n }\n \n fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n-//~^ ERROR the attribute `lt_fn` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `lt_fn` in this scope\n fn f_ty<#[ty_fn] O>(_: O) { }\n-//~^ ERROR the attribute `ty_fn` is currently unknown to the compiler\n+//~^ ERROR cannot find attribute macro `ty_fn` in this scope\n \n impl<I> StTy<I> {\n     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n-    //~^ ERROR the attribute `lt_meth` is currently unknown to the compiler\n+    //~^ ERROR cannot find attribute macro `lt_meth` in this scope\n     fn m_ty<#[ty_meth] P>(_: P) { }\n-    //~^ ERROR the attribute `ty_meth` is currently unknown to the compiler\n+    //~^ ERROR cannot find attribute macro `ty_meth` in this scope\n }\n \n fn hof_lt<Q>(_: Q)\n     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n-    //~^ ERROR the attribute `lt_hof` is currently unknown to the compiler\n+    //~^ ERROR cannot find attribute macro `lt_hof` in this scope\n {\n }\n "}, {"sha": "9250616127f3dd6ce3c9d30625f5db1fe690b869", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute2.stderr", "status": "modified", "additions": 67, "deletions": 119, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -1,156 +1,104 @@\n-error[E0658]: the attribute `lt_struct` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:6:13\n+error: cannot find attribute macro `lt_hof` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:53:21\n    |\n-LL | struct StLt<#[lt_struct] 'a>(&'a u32);\n-   |             ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+   |                     ^^^^^^\n \n-error[E0658]: the attribute `ty_struct` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:8:13\n+error: cannot find attribute macro `ty_meth` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:48:15\n    |\n-LL | struct StTy<#[ty_struct] I>(I);\n-   |             ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL |     fn m_ty<#[ty_meth] P>(_: P) { }\n+   |               ^^^^^^^\n \n-error[E0658]: the attribute `lt_enum` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:11:11\n+error: cannot find attribute macro `lt_meth` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:46:15\n    |\n-LL | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n-   |           ^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+   |               ^^^^^^^\n \n-error[E0658]: the attribute `ty_enum` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:13:11\n-   |\n-LL | enum EnTy<#[ty_enum] J> { A(J), B }\n-   |           ^^^^^^^^^^\n+error: cannot find attribute macro `ty_fn` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:42:11\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | fn f_ty<#[ty_fn] O>(_: O) { }\n+   |           ^^^^^\n \n-error[E0658]: the attribute `lt_trait` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:16:12\n+error: cannot find attribute macro `lt_fn` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:40:11\n    |\n-LL | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n-   |            ^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+   |           ^^^^^\n \n-error[E0658]: the attribute `ty_trait` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:18:12\n-   |\n-LL | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n-   |            ^^^^^^^^^^^\n+error: cannot find attribute macro `ty_impl_for` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:35:8\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n+   |        ^^^^^^^^^^^\n \n-error[E0658]: the attribute `lt_type` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:21:11\n-   |\n-LL | type TyLt<#[lt_type] 'd> = &'d u32;\n-   |           ^^^^^^^^^^\n+error: cannot find attribute macro `lt_impl_for` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:31:8\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+   |        ^^^^^^^^^^^\n \n-error[E0658]: the attribute `ty_type` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:23:11\n-   |\n-LL | type TyTy<#[ty_type] L> = (L, );\n-   |           ^^^^^^^^^^\n+error: cannot find attribute macro `ty_inherent` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:28:8\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | impl<#[ty_inherent] M> StTy<M> { }\n+   |        ^^^^^^^^^^^\n \n-error[E0658]: the attribute `lt_inherent` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:26:6\n+error: cannot find attribute macro `lt_inherent` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:26:8\n    |\n LL | impl<#[lt_inherent] 'e> StLt<'e> { }\n-   |      ^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+   |        ^^^^^^^^^^^\n \n-error[E0658]: the attribute `ty_inherent` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:28:6\n+error: cannot find attribute macro `ty_type` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:23:13\n    |\n-LL | impl<#[ty_inherent] M> StTy<M> { }\n-   |      ^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | type TyTy<#[ty_type] L> = (L, );\n+   |             ^^^^^^^\n \n-error[E0658]: the attribute `lt_impl_for` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:31:6\n+error: cannot find attribute macro `lt_type` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:21:13\n    |\n-LL | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n-   |      ^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | type TyLt<#[lt_type] 'd> = &'d u32;\n+   |             ^^^^^^^\n \n-error[E0658]: the attribute `ty_impl_for` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:35:6\n+error: cannot find attribute macro `ty_trait` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:18:14\n    |\n-LL | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n-   |      ^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n+   |              ^^^^^^^^\n \n-error[E0658]: the attribute `lt_fn` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:40:9\n+error: cannot find attribute macro `lt_trait` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:16:14\n    |\n-LL | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n-   |         ^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+   |              ^^^^^^^^\n \n-error[E0658]: the attribute `ty_fn` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:42:9\n+error: cannot find attribute macro `ty_enum` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:13:13\n    |\n-LL | fn f_ty<#[ty_fn] O>(_: O) { }\n-   |         ^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | enum EnTy<#[ty_enum] J> { A(J), B }\n+   |             ^^^^^^^\n \n-error[E0658]: the attribute `lt_meth` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:46:13\n+error: cannot find attribute macro `lt_enum` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:11:13\n    |\n-LL |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n-   |             ^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n+   |             ^^^^^^^\n \n-error[E0658]: the attribute `ty_meth` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:48:13\n+error: cannot find attribute macro `ty_struct` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:8:15\n    |\n-LL |     fn m_ty<#[ty_meth] P>(_: P) { }\n-   |             ^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | struct StTy<#[ty_struct] I>(I);\n+   |               ^^^^^^^^^\n \n-error[E0658]: the attribute `lt_hof` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/feature-gate-custom_attribute2.rs:53:19\n+error: cannot find attribute macro `lt_struct` in this scope\n+  --> $DIR/feature-gate-custom_attribute2.rs:6:15\n    |\n-LL |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n-   |                   ^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n+LL | struct StLt<#[lt_struct] 'a>(&'a u32);\n+   |               ^^^^^^^^^\n \n error: aborting due to 17 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "58f64d137b9f923c624256b53a155f20e32b3b62", "filename": "src/test/ui/issues/issue-49934-errors.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -0,0 +1,13 @@\n+fn foo<#[derive(Debug)] T>() {\n+//~^ ERROR `derive` may only be applied to structs, enums and unions\n+//~| ERROR expected an inert attribute, found an attribute macro\n+    match 0 {\n+        #[derive(Debug)]\n+        //~^ ERROR `derive` may only be applied to structs, enums and unions\n+        //~| ERROR expected an inert attribute, found an attribute macro\n+        _ => (),\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "fce1f65881266f00d5b047bc96fdab09fd263ab8", "filename": "src/test/ui/issues/issue-49934-errors.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49934-errors.stderr?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -0,0 +1,26 @@\n+error: `derive` may only be applied to structs, enums and unions\n+  --> $DIR/issue-49934-errors.rs:1:8\n+   |\n+LL | fn foo<#[derive(Debug)] T>() {\n+   |        ^^^^^^^^^^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/issue-49934-errors.rs:1:17\n+   |\n+LL | fn foo<#[derive(Debug)] T>() {\n+   |                 ^^^^^\n+\n+error: `derive` may only be applied to structs, enums and unions\n+  --> $DIR/issue-49934-errors.rs:5:9\n+   |\n+LL |         #[derive(Debug)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/issue-49934-errors.rs:5:18\n+   |\n+LL |         #[derive(Debug)]\n+   |                  ^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "262f4931d42d490f7db4d6cf110c23dd2b706c80", "filename": "src/test/ui/issues/issue-49934.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fissues%2Fissue-49934.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fissues%2Fissue-49934.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49934.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -1,15 +1,8 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(stmt_expr_attributes)]\n #![warn(unused_attributes)] //~ NOTE lint level defined here\n \n-fn foo<#[derive(Debug)] T>() { //~ WARN unused attribute\n-    match 0 {\n-        #[derive(Debug)] //~ WARN unused attribute\n-        _ => (),\n-    }\n-}\n-\n fn main() {\n     // fold_stmt (Item)\n     #[allow(dead_code)]"}, {"sha": "dbec379e3c55be621b58a3b053aa438804256ca2", "filename": "src/test/ui/issues/issue-49934.stderr", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fissues%2Fissue-49934.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fissues%2Fissue-49934.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49934.stderr?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -1,16 +1,16 @@\n warning: `#[derive]` does nothing on macro invocations\n-  --> $DIR/issue-49934.rs:20:5\n+  --> $DIR/issue-49934.rs:13:5\n    |\n LL |     #[derive(Debug)]\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: this may become a hard error in a future release\n \n warning: unused attribute\n-  --> $DIR/issue-49934.rs:6:8\n+  --> $DIR/issue-49934.rs:19:5\n    |\n-LL | fn foo<#[derive(Debug)] T>() {\n-   |        ^^^^^^^^^^^^^^^^\n+LL |     #[derive(Debug)]\n+   |     ^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/issue-49934.rs:4:9\n@@ -19,31 +19,19 @@ LL | #![warn(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-49934.rs:8:9\n-   |\n-LL |         #[derive(Debug)]\n-   |         ^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-49934.rs:26:5\n-   |\n-LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-49934.rs:30:5\n+  --> $DIR/issue-49934.rs:23:5\n    |\n LL |     #[derive(Debug)]\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-49934.rs:34:13\n+  --> $DIR/issue-49934.rs:27:13\n    |\n LL |     let _ = #[derive(Debug)] \"Hello, world!\";\n    |             ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-49934.rs:39:9\n+  --> $DIR/issue-49934.rs:32:9\n    |\n LL |         #[derive(Debug)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "2fd5efd71f041c4739971ac1340e29d1cb2c8f25", "filename": "src/test/ui/proc-macro/proc-macro-gates2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -10,11 +10,11 @@ extern crate test_macros;\n // should either require a feature gate or not be allowed on stable.\n \n fn _test6<#[empty_attr] T>() {}\n-//~^ ERROR: unknown to the compiler\n+//~^ ERROR: expected an inert attribute, found an attribute macro\n \n fn _test7() {\n     match 1 {\n-        #[empty_attr] //~ ERROR: unknown to the compiler\n+        #[empty_attr] //~ ERROR: expected an inert attribute, found an attribute macro\n         0 => {}\n         _ => {}\n     }"}, {"sha": "fd271da61553a19682cc8e7f3ed7d362822bcfcc", "filename": "src/test/ui/proc-macro/proc-macro-gates2.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -1,21 +1,14 @@\n-error[E0658]: the attribute `empty_attr` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-gates2.rs:12:11\n    |\n LL | fn _test6<#[empty_attr] T>() {}\n    |           ^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `empty_attr` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-gates2.rs:17:9\n    |\n LL |         #[empty_attr]\n    |         ^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a8fe5d6c1f60e01606a4ac2e7d137b84fd7c96bf", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -5,7 +5,7 @@ extern \"C\" {\n         /// Foo\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -21,7 +21,7 @@ type FnType = fn(\n     /// Foo\n     //~^ ERROR documentation comments cannot be applied to function\n     #[test] a: u32,\n-    //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n     /// Bar\n     //~^ ERROR documentation comments cannot be applied to function\n     #[must_use]\n@@ -36,7 +36,7 @@ pub fn foo(\n     /// Foo\n     //~^ ERROR documentation comments cannot be applied to function\n     #[test] a: u32,\n-    //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n     /// Bar\n     //~^ ERROR documentation comments cannot be applied to function\n     #[must_use]\n@@ -56,7 +56,7 @@ impl SelfStruct {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -77,7 +77,7 @@ impl RefStruct {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -96,7 +96,7 @@ trait RefTrait {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -115,7 +115,7 @@ impl RefTrait for RefStruct {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -132,7 +132,7 @@ fn main() {\n         /// Foo\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: u32,\n-        //~^ ERROR the attribute `test` is currently unknown to the compiler and may have\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]"}, {"sha": "8ab3fc39a0ccbdd000248be4910c2d1f08f0d3f3", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.stderr", "status": "modified", "additions": 48, "deletions": 73, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -1,3 +1,51 @@\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:7:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:23:5\n+   |\n+LL |     #[test] a: u32,\n+   |     ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:38:5\n+   |\n+LL |     #[test] a: u32,\n+   |     ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:58:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:79:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:98:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:117:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:134:9\n+   |\n+LL |         #[test] a: u32,\n+   |         ^^^^^^^\n+\n error: documentation comments cannot be applied to function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:5:9\n    |\n@@ -262,78 +310,5 @@ error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-i\n LL |         #[no_mangle] b: i32\n    |         ^^^^^^^^^^^^\n \n-error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/param-attrs-builtin-attrs.rs:7:9\n-   |\n-LL |         #[test] a: i32,\n-   |         ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n-\n-error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/param-attrs-builtin-attrs.rs:23:5\n-   |\n-LL |     #[test] a: u32,\n-   |     ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n-\n-error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/param-attrs-builtin-attrs.rs:38:5\n-   |\n-LL |     #[test] a: u32,\n-   |     ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n-\n-error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/param-attrs-builtin-attrs.rs:58:9\n-   |\n-LL |         #[test] a: i32,\n-   |         ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n-\n-error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/param-attrs-builtin-attrs.rs:79:9\n-   |\n-LL |         #[test] a: i32,\n-   |         ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n-\n-error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/param-attrs-builtin-attrs.rs:98:9\n-   |\n-LL |         #[test] a: i32,\n-   |         ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n-\n-error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/param-attrs-builtin-attrs.rs:117:9\n-   |\n-LL |         #[test] a: i32,\n-   |         ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n-\n-error[E0658]: the attribute `test` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/param-attrs-builtin-attrs.rs:134:9\n-   |\n-LL |         #[test] a: u32,\n-   |         ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n-\n error: aborting due to 52 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "7f0030892544275c89f9740801237ce741c9fc62", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -9,52 +9,52 @@ use ident_mac::id;\n struct W(u8);\n \n extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n-//~^ ERROR the attribute `id` is currently unknown to the compiler\n-//~| ERROR the attribute `id` is currently unknown to the compiler\n+//~^ ERROR expected an inert attribute, found an attribute macro\n+//~| ERROR expected an inert attribute, found an attribute macro\n \n unsafe extern \"C\" fn cvar(arg1: i32, #[id] mut args: ...) {}\n-//~^ ERROR the attribute `id` is currently unknown to the compiler\n+//~^ ERROR expected an inert attribute, found an attribute macro\n \n type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n-    //~^ ERROR the attribute `id` is currently unknown to the compiler\n-    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n \n fn free(#[id] arg1: u8) {\n-    //~^ ERROR the attribute `id` is currently unknown to the compiler\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n     let lam = |#[id] W(x), #[id] y| ();\n-    //~^ ERROR the attribute `id` is currently unknown to the compiler\n-    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n }\n \n impl W {\n     fn inherent1(#[id] self, #[id] arg1: u8) {}\n-    //~^ ERROR the attribute `id` is currently unknown to the compiler\n-    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n-    //~^ ERROR the attribute `id` is currently unknown to the compiler\n-    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n-    //~^ ERROR the attribute `id` is currently unknown to the compiler\n-    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n-    //~^ ERROR the attribute `id` is currently unknown to the compiler\n-    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n }\n \n trait A {\n     fn trait1(#[id] self, #[id] arg1: u8);\n-    //~^ ERROR the attribute `id` is currently unknown to the compiler\n-    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n     fn trait2(#[id] &self, #[id] arg1: u8);\n-    //~^ ERROR the attribute `id` is currently unknown to the compiler\n-    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n-    //~^ ERROR the attribute `id` is currently unknown to the compiler\n-    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n-    //~^ ERROR the attribute `id` is currently unknown to the compiler\n-    //~| ERROR the attribute `id` is currently unknown to the compiler\n-    //~| ERROR the attribute `id` is currently unknown to the compiler\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n }\n \n fn main() {}"}, {"sha": "3b72e8ab4bdf9df415930b8334f0d74fc615ebf7", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.stderr", "status": "modified", "additions": 25, "deletions": 101, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/457a23fabe4caecb5b18c0d6a801f1393a4dac80/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr?ref=457a23fabe4caecb5b18c0d6a801f1393a4dac80", "patch": "@@ -1,228 +1,152 @@\n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:11:21\n    |\n LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n    |                     ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:11:38\n    |\n LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n    |                                      ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:15:38\n    |\n LL | unsafe extern \"C\" fn cvar(arg1: i32, #[id] mut args: ...) {}\n    |                                      ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:18:28\n    |\n LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n    |                            ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:18:38\n    |\n LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n    |                                      ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:22:9\n    |\n LL | fn free(#[id] arg1: u8) {\n    |         ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:24:16\n    |\n LL |     let lam = |#[id] W(x), #[id] y| ();\n    |                ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:24:28\n    |\n LL |     let lam = |#[id] W(x), #[id] y| ();\n    |                            ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:30:18\n    |\n LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n    |                  ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:30:30\n    |\n LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n    |                              ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:33:18\n    |\n LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n    |                  ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:33:31\n    |\n LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n    |                               ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:36:22\n    |\n LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n    |                      ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:36:42\n    |\n LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n    |                                          ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:39:22\n    |\n LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n    |                      ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:39:45\n    |\n LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n    |                                             ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:45:15\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |               ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:45:27\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |                           ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:48:15\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |               ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:48:28\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |                            ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:51:19\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                   ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:51:39\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                                       ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:54:19\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                   ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:54:42\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                          ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n-error[E0658]: the attribute `id` is currently unknown to the compiler and may have meaning added to it in the future\n+error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:54:58\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                                          ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n-   = help: add `#![feature(custom_attribute)]` to the crate attributes to enable\n \n error: aborting due to 25 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}]}