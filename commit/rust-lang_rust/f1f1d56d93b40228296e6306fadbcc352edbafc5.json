{"sha": "f1f1d56d93b40228296e6306fadbcc352edbafc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZjFkNTZkOTNiNDAyMjgyOTZlNjMwNmZhZGJjYzM1MmVkYmFmYzU=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-08-15T04:53:40Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-07T22:08:46Z"}, "message": "Don't move ?Trait bounds to param bounds if they're in where clauses", "tree": {"sha": "c76689a44f3fbc05a604d033ca2be393b8817d00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c76689a44f3fbc05a604d033ca2be393b8817d00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1f1d56d93b40228296e6306fadbcc352edbafc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f1d56d93b40228296e6306fadbcc352edbafc5", "html_url": "https://github.com/rust-lang/rust/commit/f1f1d56d93b40228296e6306fadbcc352edbafc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1f1d56d93b40228296e6306fadbcc352edbafc5/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eaf9fe364b9d3ce19addba2201fa4a84492c085", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eaf9fe364b9d3ce19addba2201fa4a84492c085", "html_url": "https://github.com/rust-lang/rust/commit/2eaf9fe364b9d3ce19addba2201fa4a84492c085"}], "stats": {"total": 185, "additions": 103, "deletions": 82}, "files": [{"sha": "57a680f45b304072552e7ace03788815d58f17e8", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -2,7 +2,6 @@ use super::{AnonymousLifetimeMode, LoweringContext, ParamMode};\n use super::{ImplTraitContext, ImplTraitPosition};\n use crate::Arena;\n \n-use rustc_ast::node_id::NodeMap;\n use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::*;\n@@ -1351,8 +1350,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         generics: &Generics,\n         itctx: ImplTraitContext<'_, 'hir>,\n     ) -> GenericsCtor<'hir> {\n-        // Collect `?Trait` bounds in where clause and move them to parameter definitions.\n-        let mut add_bounds: NodeMap<Vec<_>> = Default::default();\n+        // Error if `?Trait` bounds in where clauses don't refer directly to type paramters.\n+        // Note: we used to clone these bounds directly onto the type parameter (and avoid lowering\n+        // these into hir when we lower thee where clauses), but this makes it quite difficult to\n+        // keep track of the Span info. Now, `is_unsized` in `AstConv` checks both param bounds and\n+        // where clauses for `?Sized`.\n         for pred in &generics.where_clause.predicates {\n             if let WherePredicate::BoundPredicate(ref bound_pred) = *pred {\n                 'next_bound: for bound in &bound_pred.bounds {\n@@ -1368,7 +1370,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             {\n                                 for param in &generics.params {\n                                     if def_id == self.resolver.local_def_id(param.id).to_def_id() {\n-                                        add_bounds.entry(param.id).or_default().push(bound.clone());\n                                         continue 'next_bound;\n                                     }\n                                 }\n@@ -1386,7 +1387,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n \n         GenericsCtor {\n-            params: self.lower_generic_params_mut(&generics.params, &add_bounds, itctx).collect(),\n+            params: self.lower_generic_params_mut(&generics.params, itctx).collect(),\n             where_clause: self.lower_where_clause(&generics.where_clause),\n             span: self.lower_span(generics.span),\n         }\n@@ -1419,32 +1420,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ref bounded_ty,\n                 ref bounds,\n                 span,\n-            }) => {\n-                self.with_in_scope_lifetime_defs(&bound_generic_params, |this| {\n-                    hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n-                        bound_generic_params: this.lower_generic_params(\n-                            bound_generic_params,\n-                            &NodeMap::default(),\n-                            ImplTraitContext::disallowed(),\n-                        ),\n-                        bounded_ty: this.lower_ty(bounded_ty, ImplTraitContext::disallowed()),\n-                        bounds: this.arena.alloc_from_iter(bounds.iter().map(\n-                            |bound| match bound {\n-                                // We used to ignore `?Trait` bounds, as they were copied into type\n-                                // parameters already, but we need to keep them around only for\n-                                // diagnostics when we suggest removal of `?Sized` bounds. See\n-                                // `suggest_constraining_type_param`. This will need to change if\n-                                // we ever allow something *other* than `?Sized`.\n-                                GenericBound::Trait(p, TraitBoundModifier::Maybe) => {\n-                                    hir::GenericBound::Unsized(this.lower_span(p.span))\n-                                }\n-                                _ => this.lower_param_bound(bound, ImplTraitContext::disallowed()),\n-                            },\n-                        )),\n-                        span: this.lower_span(span),\n-                    })\n+            }) => self.with_in_scope_lifetime_defs(&bound_generic_params, |this| {\n+                hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n+                    bound_generic_params: this\n+                        .lower_generic_params(bound_generic_params, ImplTraitContext::disallowed()),\n+                    bounded_ty: this.lower_ty(bounded_ty, ImplTraitContext::disallowed()),\n+                    bounds: this.arena.alloc_from_iter(bounds.iter().map(|bound| {\n+                        this.lower_param_bound(bound, ImplTraitContext::disallowed())\n+                    })),\n+                    span: this.lower_span(span),\n                 })\n-            }\n+            }),\n             WherePredicate::RegionPredicate(WhereRegionPredicate {\n                 ref lifetime,\n                 ref bounds,"}, {"sha": "fa14764c42a73f1707ac51729632769601f83de1", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -1313,7 +1313,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     hir::TyKind::BareFn(this.arena.alloc(hir::BareFnTy {\n                         generic_params: this.lower_generic_params(\n                             &f.generic_params,\n-                            &NodeMap::default(),\n                             ImplTraitContext::disallowed(),\n                         ),\n                         unsafety: this.lower_unsafety(f.unsafety),\n@@ -1998,30 +1997,25 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_generic_params_mut<'s>(\n         &'s mut self,\n         params: &'s [GenericParam],\n-        add_bounds: &'s NodeMap<Vec<GenericBound>>,\n         mut itctx: ImplTraitContext<'s, 'hir>,\n     ) -> impl Iterator<Item = hir::GenericParam<'hir>> + Captures<'a> + Captures<'s> {\n-        params\n-            .iter()\n-            .map(move |param| self.lower_generic_param(param, add_bounds, itctx.reborrow()))\n+        params.iter().map(move |param| self.lower_generic_param(param, itctx.reborrow()))\n     }\n \n     fn lower_generic_params(\n         &mut self,\n         params: &[GenericParam],\n-        add_bounds: &NodeMap<Vec<GenericBound>>,\n         itctx: ImplTraitContext<'_, 'hir>,\n     ) -> &'hir [hir::GenericParam<'hir>] {\n-        self.arena.alloc_from_iter(self.lower_generic_params_mut(params, add_bounds, itctx))\n+        self.arena.alloc_from_iter(self.lower_generic_params_mut(params, itctx))\n     }\n \n     fn lower_generic_param(\n         &mut self,\n         param: &GenericParam,\n-        add_bounds: &NodeMap<Vec<GenericBound>>,\n         mut itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::GenericParam<'hir> {\n-        let mut bounds: Vec<_> = self\n+        let bounds: Vec<_> = self\n             .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n                 this.lower_param_bounds_mut(&param.bounds, itctx.reborrow()).collect()\n             });\n@@ -2057,12 +2051,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 (param_name, kind)\n             }\n             GenericParamKind::Type { ref default, .. } => {\n-                let add_bounds = add_bounds.get(&param.id).map_or(&[][..], |x| &x);\n-                if !add_bounds.is_empty() {\n-                    let params = self.lower_param_bounds_mut(add_bounds, itctx.reborrow());\n-                    bounds.extend(params);\n-                }\n-\n                 let kind = hir::GenericParamKind::Type {\n                     default: default.as_ref().map(|x| {\n                         self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Other))\n@@ -2123,11 +2111,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         p: &PolyTraitRef,\n         mut itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::PolyTraitRef<'hir> {\n-        let bound_generic_params = self.lower_generic_params(\n-            &p.bound_generic_params,\n-            &NodeMap::default(),\n-            itctx.reborrow(),\n-        );\n+        let bound_generic_params =\n+            self.lower_generic_params(&p.bound_generic_params, itctx.reborrow());\n \n         let trait_ref = self.with_in_scope_lifetime_defs(&p.bound_generic_params, |this| {\n             // Any impl Trait types defined within this scope can capture"}, {"sha": "84bc37170c6346d1bd819d54bacb17972cd0c900", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -441,7 +441,6 @@ pub enum GenericBound<'hir> {\n     Trait(PolyTraitRef<'hir>, TraitBoundModifier),\n     // FIXME(davidtwco): Introduce `PolyTraitRef::LangItem`\n     LangItemTrait(LangItem, Span, HirId, &'hir GenericArgs<'hir>),\n-    Unsized(Span),\n     Outlives(Lifetime),\n }\n \n@@ -461,7 +460,6 @@ impl GenericBound<'_> {\n             GenericBound::Trait(t, ..) => t.span,\n             GenericBound::LangItemTrait(_, span, ..) => *span,\n             GenericBound::Outlives(l) => l.span,\n-            GenericBound::Unsized(span) => *span,\n         }\n     }\n }"}, {"sha": "137782a6dc78dcf809b196cd9dc0b447017d7eb4", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -871,7 +871,6 @@ pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericB\n             visitor.visit_generic_args(span, args);\n         }\n         GenericBound::Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),\n-        GenericBound::Unsized(_) => {}\n     }\n }\n "}, {"sha": "36054c0484782016fd0bb57c1f151d383a76d610", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -2232,9 +2232,6 @@ impl<'a> State<'a> {\n                 GenericBound::Outlives(lt) => {\n                     self.print_lifetime(lt);\n                 }\n-                GenericBound::Unsized(_) => {\n-                    self.s.word(\"?Sized\");\n-                }\n             }\n         }\n     }"}, {"sha": "092eae0fc5c236bbd3bb91ed99b767a7f2994a72", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -2,7 +2,6 @@\n \n use crate::ty::TyKind::*;\n use crate::ty::{InferTy, TyCtxt, TyS};\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -114,10 +113,8 @@ fn suggest_removing_unsized_bound(\n     def_id: Option<DefId>,\n ) {\n     // See if there's a `?Sized` bound that can be removed to suggest that.\n-    // First look at the `where` clause because we can have `where T: ?Sized`, but that\n-    // `?Sized` bound is *also* included in the `GenericParam` as a bound, which breaks\n-    // the spans. Hence the somewhat involved logic that follows.\n-    let mut where_unsized_bounds = FxHashSet::default();\n+    // First look at the `where` clause because we can have `where T: ?Sized`,\n+    // then look at params.\n     for (where_pos, predicate) in generics.where_clause.predicates.iter().enumerate() {\n         match predicate {\n             WherePredicate::BoundPredicate(WhereBoundPredicate {\n@@ -140,7 +137,6 @@ fn suggest_removing_unsized_bound(\n             }) if segment.ident.as_str() == param_name => {\n                 for (pos, bound) in bounds.iter().enumerate() {\n                     match bound {\n-                        hir::GenericBound::Unsized(_) => {}\n                         hir::GenericBound::Trait(poly, hir::TraitBoundModifier::Maybe)\n                             if poly.trait_ref.trait_def_id() == def_id => {}\n                         _ => continue,\n@@ -173,7 +169,6 @@ fn suggest_removing_unsized_bound(\n                         //             ^^^^^^^^^\n                         (_, pos, _, _) => bounds[pos - 1].span().shrink_to_hi().to(bound.span()),\n                     };\n-                    where_unsized_bounds.insert(bound.span());\n                     err.span_suggestion_verbose(\n                         sp,\n                         \"consider removing the `?Sized` bound to make the \\\n@@ -189,8 +184,7 @@ fn suggest_removing_unsized_bound(\n     for (pos, bound) in param.bounds.iter().enumerate() {\n         match bound {\n             hir::GenericBound::Trait(poly, hir::TraitBoundModifier::Maybe)\n-                if poly.trait_ref.trait_def_id() == def_id\n-                    && !where_unsized_bounds.contains(&bound.span()) =>\n+                if poly.trait_ref.trait_def_id() == def_id =>\n             {\n                 let sp = match (param.bounds.len(), pos) {\n                     // T: ?Sized,"}, {"sha": "3e99f4e29ef36ca8e46c2a5d61941d51a3bdbcfb", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -693,7 +693,6 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     (Some(self.tcx.require_lang_item(lang_item, Some(span))), span)\n                 }\n                 hir::GenericBound::Outlives(..) => continue,\n-                hir::GenericBound::Unsized(_) => continue,\n             };\n \n             if let Some(id) = def_id {"}, {"sha": "d72d3a88e34d6593ae1886e7866729bc69ef2e6a", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 58, "deletions": 9, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -854,7 +854,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     }\n \n     // Returns `true` if a bounds list includes `?Sized`.\n-    pub fn is_unsized(&self, ast_bounds: &[hir::GenericBound<'_>], span: Span) -> bool {\n+    fn is_unsized(\n+        &self,\n+        ast_bounds: &[hir::GenericBound<'_>],\n+        self_ty: Option<hir::HirId>,\n+        where_clause: Option<&[hir::WherePredicate<'_>]>,\n+        span: Span,\n+    ) -> bool {\n         let tcx = self.tcx();\n \n         // Try to find an unbound in bounds.\n@@ -868,11 +874,38 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n             }\n         }\n+        if let (Some(self_ty), Some(where_clause)) = (self_ty, where_clause) {\n+            let self_ty_def_id = tcx.hir().local_def_id(self_ty).to_def_id();\n+            for clause in where_clause {\n+                match clause {\n+                    hir::WherePredicate::BoundPredicate(pred) => {\n+                        match pred.bounded_ty.kind {\n+                            hir::TyKind::Path(hir::QPath::Resolved(_, path)) => match path.res {\n+                                Res::Def(DefKind::TyParam, def_id) if def_id == self_ty_def_id => {}\n+                                _ => continue,\n+                            },\n+                            _ => continue,\n+                        }\n+                        for ab in pred.bounds {\n+                            if let hir::GenericBound::Trait(ptr, hir::TraitBoundModifier::Maybe) =\n+                                ab\n+                            {\n+                                if unbound.is_none() {\n+                                    unbound = Some(&ptr.trait_ref);\n+                                } else {\n+                                    tcx.sess.emit_err(MultipleRelaxedDefaultBounds { span });\n+                                }\n+                            }\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n \n         let kind_id = tcx.lang_items().require(LangItem::Sized);\n         match unbound {\n             Some(tpb) => {\n-                // FIXME(#8559) currently requires the unbound to be built-in.\n                 if let Ok(kind_id) = kind_id {\n                     if tpb.path.res != Res::Def(DefKind::Trait, kind_id) {\n                         tcx.sess.span_warn(\n@@ -940,8 +973,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         false,\n                     );\n                 }\n-                hir::GenericBound::Trait(_, hir::TraitBoundModifier::Maybe)\n-                | hir::GenericBound::Unsized(_) => {}\n+                hir::GenericBound::Trait(_, hir::TraitBoundModifier::Maybe) => {}\n                 hir::GenericBound::LangItemTrait(lang_item, span, hir_id, args) => self\n                     .instantiate_lang_item_trait_ref(\n                         lang_item, span, hir_id, args, param_ty, bounds,\n@@ -970,22 +1002,33 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// example above, but is not true in supertrait listings like `trait Foo: Bar + Baz`.\n     ///\n     /// `span` should be the declaration size of the parameter.\n-    pub fn compute_bounds(\n+    pub(crate) fn compute_bounds(\n         &self,\n         param_ty: Ty<'tcx>,\n         ast_bounds: &[hir::GenericBound<'_>],\n+        self_ty: Option<hir::HirId>,\n+        where_clause: Option<&[hir::WherePredicate<'_>]>,\n         sized_by_default: SizedByDefault,\n         span: Span,\n     ) -> Bounds<'tcx> {\n-        self.compute_bounds_inner(param_ty, &ast_bounds, sized_by_default, span)\n+        self.compute_bounds_inner(\n+            param_ty,\n+            &ast_bounds,\n+            self_ty,\n+            where_clause,\n+            sized_by_default,\n+            span,\n+        )\n     }\n \n     /// Convert the bounds in `ast_bounds` that refer to traits which define an associated type\n     /// named `assoc_name` into ty::Bounds. Ignore the rest.\n-    pub fn compute_bounds_that_match_assoc_type(\n+    pub(crate) fn compute_bounds_that_match_assoc_type(\n         &self,\n         param_ty: Ty<'tcx>,\n         ast_bounds: &[hir::GenericBound<'_>],\n+        self_ty: Option<hir::HirId>,\n+        where_clause: Option<&[hir::WherePredicate<'_>]>,\n         sized_by_default: SizedByDefault,\n         span: Span,\n         assoc_name: Ident,\n@@ -1002,13 +1045,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n-        self.compute_bounds_inner(param_ty, &result, sized_by_default, span)\n+        self.compute_bounds_inner(param_ty, &result, self_ty, where_clause, sized_by_default, span)\n     }\n \n     fn compute_bounds_inner(\n         &self,\n         param_ty: Ty<'tcx>,\n         ast_bounds: &[hir::GenericBound<'_>],\n+        self_ty: Option<hir::HirId>,\n+        where_clause: Option<&[hir::WherePredicate<'_>]>,\n         sized_by_default: SizedByDefault,\n         span: Span,\n     ) -> Bounds<'tcx> {\n@@ -1017,7 +1062,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self.add_bounds(param_ty, ast_bounds, &mut bounds, ty::List::empty());\n \n         bounds.implicitly_sized = if let SizedByDefault::Yes = sized_by_default {\n-            if !self.is_unsized(ast_bounds, span) { Some(span) } else { None }\n+            if !self.is_unsized(ast_bounds, self_ty, where_clause, span) {\n+                Some(span)\n+            } else {\n+                None\n+            }\n         } else {\n             None\n         };"}, {"sha": "74ea7247ab2c75c2b212378a698880d8d7df5944", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -1156,6 +1156,8 @@ fn super_predicates_that_define_assoc_type(\n                 &icx,\n                 self_param_ty,\n                 &bounds,\n+                None,\n+                None,\n                 SizedByDefault::No,\n                 item.span,\n                 assoc_name,\n@@ -1165,6 +1167,8 @@ fn super_predicates_that_define_assoc_type(\n                 &icx,\n                 self_param_ty,\n                 &bounds,\n+                None,\n+                None,\n                 SizedByDefault::No,\n                 item.span,\n             )\n@@ -2181,6 +2185,8 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     &icx,\n                     param_ty,\n                     &param.bounds,\n+                    Some(param.hir_id),\n+                    Some(ast_generics.where_clause.predicates),\n                     sized,\n                     param.span,\n                 );\n@@ -2267,8 +2273,6 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                             predicates.extend(bounds.predicates(tcx, ty));\n                         }\n \n-                        hir::GenericBound::Unsized(_) => {}\n-\n                         hir::GenericBound::Outlives(lifetime) => {\n                             let region =\n                                 <dyn AstConv<'_>>::ast_region_to_region(&icx, lifetime, None);\n@@ -2529,7 +2533,6 @@ fn predicates_from_bound<'tcx>(\n             );\n             bounds.predicates(astconv.tcx(), param_ty)\n         }\n-        hir::GenericBound::Unsized(_) => vec![],\n         hir::GenericBound::Outlives(ref lifetime) => {\n             let region = astconv.ast_region_to_region(lifetime, None);\n             let pred = ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(param_ty, region))"}, {"sha": "cc524b34344cb1b588850ca268a047bbdb81e713", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -29,6 +29,8 @@ fn associated_type_bounds<'tcx>(\n         &ItemCtxt::new(tcx, assoc_item_def_id),\n         item_ty,\n         &bounds,\n+        None,\n+        None,\n         SizedByDefault::Yes,\n         span,\n     );\n@@ -70,6 +72,8 @@ fn opaque_type_bounds<'tcx>(\n             &ItemCtxt::new(tcx, opaque_def_id),\n             item_ty,\n             &bounds,\n+            None,\n+            None,\n             SizedByDefault::Yes,\n             span,\n         )"}, {"sha": "d7af0c4248056de175194e77fb867f7de58c2b50", "filename": "src/test/ui/maybe-bounds-where.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/src%2Ftest%2Fui%2Fmaybe-bounds-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/src%2Ftest%2Fui%2Fmaybe-bounds-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds-where.rs?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -11,6 +11,7 @@ trait Trait<'a> {}\n \n struct S4<T>(T) where for<'a> T: ?Trait<'a>;\n //~^ ERROR `?Trait` bounds are only permitted at the point where a type parameter is declared\n+//~| WARN default bound relaxed for a type parameter\n \n struct S5<T>(*const T) where T: ?Trait<'static> + ?Sized;\n //~^ ERROR type parameter has more than one relaxed default bound"}, {"sha": "2aa6a8a38223df4d5401f433ce649bc558515360", "filename": "src/test/ui/maybe-bounds-where.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1f1d56d93b40228296e6306fadbcc352edbafc5/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1f1d56d93b40228296e6306fadbcc352edbafc5/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr?ref=f1f1d56d93b40228296e6306fadbcc352edbafc5", "patch": "@@ -23,23 +23,29 @@ LL | struct S4<T>(T) where for<'a> T: ?Trait<'a>;\n    |                               ^\n \n error: `?Trait` bounds are only permitted at the point where a type parameter is declared\n-  --> $DIR/maybe-bounds-where.rs:20:18\n+  --> $DIR/maybe-bounds-where.rs:21:18\n    |\n LL |     fn f() where T: ?Sized {}\n    |                  ^\n \n+warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default; only `?Sized` is supported\n+  --> $DIR/maybe-bounds-where.rs:12:11\n+   |\n+LL | struct S4<T>(T) where for<'a> T: ?Trait<'a>;\n+   |           ^\n+\n error[E0203]: type parameter has more than one relaxed default bound, only one is supported\n-  --> $DIR/maybe-bounds-where.rs:15:11\n+  --> $DIR/maybe-bounds-where.rs:16:11\n    |\n LL | struct S5<T>(*const T) where T: ?Trait<'static> + ?Sized;\n    |           ^\n \n warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default; only `?Sized` is supported\n-  --> $DIR/maybe-bounds-where.rs:15:11\n+  --> $DIR/maybe-bounds-where.rs:16:11\n    |\n LL | struct S5<T>(*const T) where T: ?Trait<'static> + ?Sized;\n    |           ^\n \n-error: aborting due to 6 previous errors; 1 warning emitted\n+error: aborting due to 6 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0203`."}]}