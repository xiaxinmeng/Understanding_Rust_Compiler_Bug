{"sha": "196b2e0d82d6d687e0b61ebd4db100951c908556", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NmIyZTBkODJkNmQ2ODdlMGI2MWViZDRkYjEwMDk1MWM5MDg1NTY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-16T07:38:55Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-21T09:13:19Z"}, "message": "rustc: don't call Kind::from directly, use .into() instead.", "tree": {"sha": "8b3bad79cf1dd2bc32a8910b60ce07b39e27061f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b3bad79cf1dd2bc32a8910b60ce07b39e27061f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/196b2e0d82d6d687e0b61ebd4db100951c908556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/196b2e0d82d6d687e0b61ebd4db100951c908556", "html_url": "https://github.com/rust-lang/rust/commit/196b2e0d82d6d687e0b61ebd4db100951c908556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/196b2e0d82d6d687e0b61ebd4db100951c908556/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3df729c250c282c6876aca3f9ff1bc0e77e576c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3df729c250c282c6876aca3f9ff1bc0e77e576c", "html_url": "https://github.com/rust-lang/rust/commit/e3df729c250c282c6876aca3f9ff1bc0e77e576c"}], "stats": {"total": 66, "additions": 22, "deletions": 44}, "files": [{"sha": "1164c332330bc30d6bd0ad71532099517c1da44d", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=196b2e0d82d6d687e0b61ebd4db100951c908556", "patch": "@@ -256,11 +256,11 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n                     CanonicalTyVarKind::Float => self.tcx.mk_float_var(self.next_float_var_id()),\n                 };\n-                Kind::from(ty)\n+                ty.into()\n             }\n \n             CanonicalVarKind::Region => {\n-                Kind::from(self.next_region_var(RegionVariableOrigin::MiscVariable(span)))\n+                self.next_region_var(RegionVariableOrigin::MiscVariable(span)).into()\n             }\n         }\n     }\n@@ -555,7 +555,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                      opportunistically resolved to {:?}\",\n                     vid, r\n                 );\n-                let cvar = self.canonical_var(info, Kind::from(r));\n+                let cvar = self.canonical_var(info, r.into());\n                 self.tcx().mk_region(ty::ReCanonical(cvar))\n             }\n \n@@ -570,7 +570,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                     let info = CanonicalVarInfo {\n                         kind: CanonicalVarKind::Region,\n                     };\n-                    let cvar = self.canonical_var(info, Kind::from(r));\n+                    let cvar = self.canonical_var(info, r.into());\n                     self.tcx().mk_region(ty::ReCanonical(cvar))\n                 } else {\n                     r\n@@ -750,7 +750,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n             let info = CanonicalVarInfo {\n                 kind: CanonicalVarKind::Ty(ty_kind),\n             };\n-            let cvar = self.canonical_var(info, Kind::from(ty_var));\n+            let cvar = self.canonical_var(info, ty_var.into());\n             self.tcx().mk_infer(ty::InferTy::CanonicalTy(cvar))\n         }\n     }"}, {"sha": "c3b5b8e6fb35ffc2a6656a4ea05e6d9eb238a2ce", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=196b2e0d82d6d687e0b61ebd4db100951c908556", "patch": "@@ -37,7 +37,7 @@ use dep_graph::{DepNodeIndex, DepKind};\n use hir::def_id::DefId;\n use infer;\n use infer::{InferCtxt, InferOk, TypeFreshener};\n-use ty::subst::{Kind, Subst, Substs};\n+use ty::subst::{Subst, Substs};\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n use ty::fast_reject;\n use ty::relate::TypeRelation;\n@@ -3019,7 +3019,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 // with a potentially unsized trailing field.\n                 let params = substs_a.iter().enumerate().map(|(i, &k)| {\n                     if ty_params.contains(i) {\n-                        Kind::from(tcx.types.err)\n+                        tcx.types.err.into()\n                     } else {\n                         k\n                     }"}, {"sha": "c9c31372d560097634c1cc7dc9bad946a7c693f2", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=196b2e0d82d6d687e0b61ebd4db100951c908556", "patch": "@@ -11,7 +11,7 @@\n // Type substitutions.\n \n use hir::def_id::DefId;\n-use ty::{self, Lift, Slice, Region, Ty, TyCtxt};\n+use ty::{self, Lift, Slice, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n@@ -39,7 +39,7 @@ const TAG_MASK: usize = 0b11;\n const TYPE_TAG: usize = 0b00;\n const REGION_TAG: usize = 0b01;\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub enum UnpackedKind<'tcx> {\n     Lifetime(ty::Region<'tcx>),\n     Type(Ty<'tcx>),\n@@ -142,34 +142,13 @@ impl<'tcx> TypeFoldable<'tcx> for Kind<'tcx> {\n \n impl<'tcx> Encodable for Kind<'tcx> {\n     fn encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> {\n-        e.emit_enum(\"Kind\", |e| {\n-            match self.unpack() {\n-                UnpackedKind::Lifetime(lt) => {\n-                    e.emit_enum_variant(\"Region\", REGION_TAG, 1, |e| {\n-                        e.emit_enum_variant_arg(0, |e| lt.encode(e))\n-                    })\n-                }\n-                UnpackedKind::Type(ty) => {\n-                    e.emit_enum_variant(\"Ty\", TYPE_TAG, 1, |e| {\n-                        e.emit_enum_variant_arg(0, |e| ty.encode(e))\n-                    })\n-                }\n-            }\n-        })\n+        self.unpack().encode(e)\n     }\n }\n \n impl<'tcx> Decodable for Kind<'tcx> {\n     fn decode<D: Decoder>(d: &mut D) -> Result<Kind<'tcx>, D::Error> {\n-        d.read_enum(\"Kind\", |d| {\n-            d.read_enum_variant(&[\"Ty\", \"Region\"], |d, tag| {\n-                match tag {\n-                    TYPE_TAG => Ty::decode(d).map(Kind::from),\n-                    REGION_TAG => Region::decode(d).map(Kind::from),\n-                    _ => Err(d.error(\"invalid Kind tag\"))\n-                }\n-            })\n-        })\n+        Ok(UnpackedKind::decode(d)?.pack())\n     }\n }\n "}, {"sha": "59d227557aeef9d5a766e2aa63ce6fcbabfdeb56", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=196b2e0d82d6d687e0b61ebd4db100951c908556", "patch": "@@ -43,7 +43,6 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf};\n use rustc::ty::maps::Providers;\n use rustc::dep_graph::{DepNode, DepConstructor};\n-use rustc::ty::subst::Kind;\n use rustc::middle::cstore::{self, LinkMeta, LinkagePreference};\n use rustc::middle::exported_symbols;\n use rustc::util::common::{time, print_time_passes_entry};\n@@ -595,7 +594,7 @@ fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n             let start_fn = callee::resolve_and_get_fn(\n                 cx,\n                 start_def_id,\n-                cx.tcx.intern_substs(&[Kind::from(main_ret_ty)]),\n+                cx.tcx.intern_substs(&[main_ret_ty.into()]),\n             );\n             (start_fn, vec![bx.pointercast(rust_main, Type::i8p(cx).ptr_to()),\n                             arg_argc, arg_argv])"}, {"sha": "45429ea7aeaee0e2f051ea64185b92fd5f744084", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=196b2e0d82d6d687e0b61ebd4db100951c908556", "patch": "@@ -196,7 +196,7 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n-use rustc::ty::subst::{Substs, Kind};\n+use rustc::ty::subst::Substs;\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::session::config;\n@@ -1067,7 +1067,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n             start_def_id,\n-            self.tcx.intern_substs(&[Kind::from(main_ret_ty)])\n+            self.tcx.intern_substs(&[main_ret_ty.into()])\n         ).unwrap();\n \n         self.output.push(create_fn_mono_item(start_instance));"}, {"sha": "63c545c36f07ff8a8f2b5125dfe7f47996af1585", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=196b2e0d82d6d687e0b61ebd4db100951c908556", "patch": "@@ -13,7 +13,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::mir::*;\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind};\n-use rustc::ty::subst::{Kind, Subst, Substs};\n+use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::maps::Providers;\n \n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -170,7 +170,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let substs = if let Some(ty) = ty {\n-        tcx.mk_substs(iter::once(Kind::from(ty)))\n+        tcx.mk_substs(iter::once(ty.into()))\n     } else {\n         Substs::identity_for_item(tcx, def_id)\n     };"}, {"sha": "2af3a7ae4c6250104b19cc47b2985f37ecbe286e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=196b2e0d82d6d687e0b61ebd4db100951c908556", "patch": "@@ -18,9 +18,9 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use middle::resolve_lifetime as rl;\n use namespace::Namespace;\n-use rustc::ty::subst::{Kind, UnpackedKind, Subst, Substs};\n+use rustc::ty::subst::{UnpackedKind, Subst, Substs};\n use rustc::traits;\n-use rustc::ty::{self, RegionKind, Ty, TyCtxt, ToPredicate, TypeFoldable};\n+use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::wf::object_region_bounds;\n use rustc_target::spec::abi;\n@@ -1164,7 +1164,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             // Replace all lifetimes with 'static\n             for subst in &mut substs {\n                 if let UnpackedKind::Lifetime(_) = subst.unpack() {\n-                    *subst = Kind::from(&RegionKind::ReStatic);\n+                    *subst = tcx.types.re_static.into();\n                 }\n             }\n             debug!(\"impl_trait_ty_to_ty: substs from parent = {:?}\", substs);\n@@ -1173,7 +1173,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         // Fill in our own generics with the resolved lifetimes\n         assert_eq!(lifetimes.len(), generics.params.len());\n-        substs.extend(lifetimes.iter().map(|lt| Kind::from(self.ast_region_to_region(lt, None))));\n+        substs.extend(lifetimes.iter().map(|lt| self.ast_region_to_region(lt, None).into()));\n \n         debug!(\"impl_trait_ty_to_ty: final substs = {:?}\", substs);\n "}, {"sha": "b4bd64bfacee45ee1095af41e5f8a58ebe00c4c2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196b2e0d82d6d687e0b61ebd4db100951c908556/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=196b2e0d82d6d687e0b61ebd4db100951c908556", "patch": "@@ -94,7 +94,7 @@ use rustc::infer::anon_types::AnonTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n use rustc::mir::interpret::{GlobalId};\n-use rustc::ty::subst::{Kind, UnpackedKind, Subst, Substs};\n+use rustc::ty::subst::{UnpackedKind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n@@ -4754,7 +4754,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if let GenericParamDefKind::Type(_) = param.kind {\n                     // Handle Self first, so we can adjust the index to match the AST.\n                     if has_self && i == 0 {\n-                        return opt_self_ty.map(|ty| Kind::from(ty)).unwrap_or_else(|| {\n+                        return opt_self_ty.map(|ty| ty.into()).unwrap_or_else(|| {\n                             self.var_for_def(span, param)\n                         });\n                     }"}]}