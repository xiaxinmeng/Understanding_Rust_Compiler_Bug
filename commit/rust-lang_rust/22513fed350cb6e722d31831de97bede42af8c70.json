{"sha": "22513fed350cb6e722d31831de97bede42af8c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNTEzZmVkMzUwY2I2ZTcyMmQzMTgzMWRlOTdiZWRlNDJhZjhjNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-23T11:51:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-23T11:51:50Z"}, "message": "auto merge of #19158 : jakub-/rust/issue-14091, r=alexcrichton\n\nCloses #14091.\r\nCloses #19195.", "tree": {"sha": "4540d453e3256b5f21e64851ad2605fc55429e93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4540d453e3256b5f21e64851ad2605fc55429e93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22513fed350cb6e722d31831de97bede42af8c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22513fed350cb6e722d31831de97bede42af8c70", "html_url": "https://github.com/rust-lang/rust/commit/22513fed350cb6e722d31831de97bede42af8c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22513fed350cb6e722d31831de97bede42af8c70/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff10d5a230acde7e530ccee8cd4f805d6be7713", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff10d5a230acde7e530ccee8cd4f805d6be7713", "html_url": "https://github.com/rust-lang/rust/commit/5ff10d5a230acde7e530ccee8cd4f805d6be7713"}, {"sha": "0524161c0be7794a9c508aaa771735da897b555d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0524161c0be7794a9c508aaa771735da897b555d", "html_url": "https://github.com/rust-lang/rust/commit/0524161c0be7794a9c508aaa771735da897b555d"}], "stats": {"total": 117, "additions": 84, "deletions": 33}, "files": [{"sha": "b019b31de5f3f70fff4414d26b00450a51544bd7", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/22513fed350cb6e722d31831de97bede42af8c70/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22513fed350cb6e722d31831de97bede42af8c70/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=22513fed350cb6e722d31831de97bede42af8c70", "patch": "@@ -293,15 +293,17 @@ impl FileMap {\n \n     /// get a line from the list of pre-computed line-beginnings\n     ///\n-    pub fn get_line(&self, line: int) -> String {\n+    pub fn get_line(&self, line_number: uint) -> Option<String> {\n         let lines = self.lines.borrow();\n-        let begin: BytePos = (*lines)[line as uint] - self.start_pos;\n-        let begin = begin.to_uint();\n-        let slice = self.src.as_slice().slice_from(begin);\n-        match slice.find('\\n') {\n-            Some(e) => slice.slice_to(e).to_string(),\n-            None => slice.to_string()\n-        }\n+        lines.get(line_number).map(|&line| {\n+            let begin: BytePos = line - self.start_pos;\n+            let begin = begin.to_uint();\n+            let slice = self.src.as_slice().slice_from(begin);\n+            match slice.find('\\n') {\n+                Some(e) => slice.slice_to(e),\n+                None => slice\n+            }.to_string()\n+        })\n     }\n \n     pub fn record_multibyte_char(&self, pos: BytePos, bytes: uint) {\n@@ -578,10 +580,10 @@ mod test {\n         let fm = cm.new_filemap(\"blork.rs\".to_string(),\n                                 \"first line.\\nsecond line\".to_string());\n         fm.next_line(BytePos(0));\n-        assert_eq!(&fm.get_line(0),&\"first line.\".to_string());\n+        assert_eq!(fm.get_line(0), Some(\"first line.\".to_string()));\n         // TESTING BROKEN BEHAVIOR:\n         fm.next_line(BytePos(10));\n-        assert_eq!(&fm.get_line(1), &\".\".to_string());\n+        assert_eq!(fm.get_line(1), Some(\".\".to_string()));\n     }\n \n     #[test]"}, {"sha": "293c1b3a9530fbc0f2e708a0125f77c4232eaeb2", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/22513fed350cb6e722d31831de97bede42af8c70/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22513fed350cb6e722d31831de97bede42af8c70/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=22513fed350cb6e722d31831de97bede42af8c70", "patch": "@@ -436,9 +436,11 @@ fn highlight_lines(err: &mut EmitterWriter,\n         elided = true;\n     }\n     // Print the offending lines\n-    for line in display_lines.iter() {\n-        try!(write!(&mut err.dst, \"{}:{} {}\\n\", fm.name, *line + 1,\n-                    fm.get_line(*line as int)));\n+    for &line_number in display_lines.iter() {\n+        if let Some(line) = fm.get_line(line_number) {\n+            try!(write!(&mut err.dst, \"{}:{} {}\\n\", fm.name,\n+                        line_number + 1, line));\n+        }\n     }\n     if elided {\n         let last_line = display_lines[display_lines.len() - 1u];\n@@ -465,24 +467,26 @@ fn highlight_lines(err: &mut EmitterWriter,\n         for _ in range(0, skip) {\n             s.push(' ');\n         }\n-        let orig = fm.get_line(lines.lines[0] as int);\n-        for pos in range(0u, left-skip) {\n-            let cur_char = orig.as_bytes()[pos] as char;\n-            // Whenever a tab occurs on the previous line, we insert one on\n-            // the error-point-squiggly-line as well (instead of a space).\n-            // That way the squiggly line will usually appear in the correct\n-            // position.\n-            match cur_char {\n-                '\\t' => s.push('\\t'),\n-                _ => s.push(' '),\n-            };\n+        if let Some(orig) = fm.get_line(lines.lines[0]) {\n+            for pos in range(0u, left - skip) {\n+                let cur_char = orig.as_bytes()[pos] as char;\n+                // Whenever a tab occurs on the previous line, we insert one on\n+                // the error-point-squiggly-line as well (instead of a space).\n+                // That way the squiggly line will usually appear in the correct\n+                // position.\n+                match cur_char {\n+                    '\\t' => s.push('\\t'),\n+                    _ => s.push(' '),\n+                };\n+            }\n         }\n+\n         try!(write!(&mut err.dst, \"{}\", s));\n         let mut s = String::from_str(\"^\");\n         let hi = cm.lookup_char_pos(sp.hi);\n         if hi.col != lo.col {\n             // the ^ already takes up one space\n-            let num_squigglies = hi.col.to_uint()-lo.col.to_uint()-1u;\n+            let num_squigglies = hi.col.to_uint() - lo.col.to_uint() - 1u;\n             for _ in range(0, num_squigglies) {\n                 s.push('~');\n             }\n@@ -510,16 +514,22 @@ fn custom_highlight_lines(w: &mut EmitterWriter,\n \n     let lines = lines.lines.as_slice();\n     if lines.len() > MAX_LINES {\n-        try!(write!(&mut w.dst, \"{}:{} {}\\n\", fm.name,\n-                    lines[0] + 1, fm.get_line(lines[0] as int)));\n+        if let Some(line) = fm.get_line(lines[0]) {\n+            try!(write!(&mut w.dst, \"{}:{} {}\\n\", fm.name,\n+                        lines[0] + 1, line));\n+        }\n         try!(write!(&mut w.dst, \"...\\n\"));\n-        let last_line = lines[lines.len()-1];\n-        try!(write!(&mut w.dst, \"{}:{} {}\\n\", fm.name,\n-                    last_line + 1, fm.get_line(last_line as int)));\n-    } else {\n-        for line in lines.iter() {\n+        let last_line_number = lines[lines.len() - 1];\n+        if let Some(last_line) = fm.get_line(last_line_number) {\n             try!(write!(&mut w.dst, \"{}:{} {}\\n\", fm.name,\n-                        *line + 1, fm.get_line(*line as int)));\n+                        last_line_number + 1, last_line));\n+        }\n+    } else {\n+        for &line_number in lines.iter() {\n+            if let Some(line) = fm.get_line(line_number) {\n+                try!(write!(&mut w.dst, \"{}:{} {}\\n\", fm.name,\n+                            line_number + 1, line));\n+            }\n         }\n     }\n     let last_line_start = format!(\"{}:{} \", fm.name, lines[lines.len()-1]+1);"}, {"sha": "d3823a8cc5520f9bc309f628def24a78ddb71c1c", "filename": "src/test/compile-fail/issue-14091-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/22513fed350cb6e722d31831de97bede42af8c70/src%2Ftest%2Fcompile-fail%2Fissue-14091-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22513fed350cb6e722d31831de97bede42af8c70/src%2Ftest%2Fcompile-fail%2Fissue-14091-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14091-2.rs?ref=22513fed350cb6e722d31831de97bede42af8c70", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: cannot apply unary operator `!` to type `BytePos`\n+\n+// Very\n+\n+// sensitive\n+pub struct BytePos(pub u32);\n+\n+// to particular\n+\n+// line numberings / offsets\n+\n+fn main() {\n+    let x = BytePos(1);\n+\n+    assert!(x, x);\n+}"}, {"sha": "c2ad09f5cb4b1b5b86e42923aaabc95eedfcf87a", "filename": "src/test/compile-fail/issue-14091.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/22513fed350cb6e722d31831de97bede42af8c70/src%2Ftest%2Fcompile-fail%2Fissue-14091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22513fed350cb6e722d31831de97bede42af8c70/src%2Ftest%2Fcompile-fail%2Fissue-14091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14091.rs?ref=22513fed350cb6e722d31831de97bede42af8c70", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: expected `bool`, found `_` (expected bool, found integral variable)\n+\n+fn main(){assert!(1,1);}"}]}