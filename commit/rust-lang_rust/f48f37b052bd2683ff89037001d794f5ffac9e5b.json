{"sha": "f48f37b052bd2683ff89037001d794f5ffac9e5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0OGYzN2IwNTJiZDI2ODNmZjg5MDM3MDAxZDc5NGY1ZmZhYzllNWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-05-17T18:34:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-17T18:34:13Z"}, "message": "Rollup merge of #60902 - sfackler:fix-error-soudness, r=alexcrichton\n\nPrevent Error::type_id overrides\n\ntype_id now takes an argument that can't be named outside of the\nstd::error module, which prevents any implementations from overriding\nit. It's a pretty grody solution, and there's no way we can stabilize\nthe method with this API, but it avoids the soudness issue!\n\nCloses #60784\n\nr? @alexcrichton", "tree": {"sha": "4fb7f1a6229a9d360d01861a3c90eff426a2f910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb7f1a6229a9d360d01861a3c90eff426a2f910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f48f37b052bd2683ff89037001d794f5ffac9e5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc3v6lCRBK7hj4Ov3rIwAAdHIIAIvcVeTl/al8PpkY4f/CeqNw\nIWfC0Dc/xd/u6myd5OYLM/fP+11Kcl0/AAr6H7XS21WaVoY+3fgmJ1IeLNdaAqw4\nh9YhnZ+2xLc2azJ+2duUqsZAwxiTH/gcJLBFRUMzkdMiWyzX+z/NMwNw5rMKZFmn\ndD49xGvHunSnfriyAfideHb8M0QHt7zX0vdgVLT2SuvATK0opdjq1sF7RBUDCs2l\nCbcGlU1z3dlzJgjuefCRi7TSjLyUU5qqbzZCPJrLLbL1DzOOjiR/zS1OMjmV0bFd\nBikJfP9rq+AxgiNqr5oGLGgqqMVZOYqu0dztoAAsQhK6MG3s7O7zmsTeEndEiiI=\n=GDYQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 4fb7f1a6229a9d360d01861a3c90eff426a2f910\nparent ba0e2518c852f844a8975c2e4b1d5814dd2d11c8\nparent 686a611b9e19b487a70fccc960ea0e16e71de988\nauthor Manish Goregaokar <manishsmail@gmail.com> 1558118053 -0700\ncommitter GitHub <noreply@github.com> 1558118053 -0700\n\nRollup merge of #60902 - sfackler:fix-error-soudness, r=alexcrichton\n\nPrevent Error::type_id overrides\n\ntype_id now takes an argument that can't be named outside of the\nstd::error module, which prevents any implementations from overriding\nit. It's a pretty grody solution, and there's no way we can stabilize\nthe method with this API, but it avoids the soudness issue!\n\nCloses #60784\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f48f37b052bd2683ff89037001d794f5ffac9e5b", "html_url": "https://github.com/rust-lang/rust/commit/f48f37b052bd2683ff89037001d794f5ffac9e5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f48f37b052bd2683ff89037001d794f5ffac9e5b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba0e2518c852f844a8975c2e4b1d5814dd2d11c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0e2518c852f844a8975c2e4b1d5814dd2d11c8", "html_url": "https://github.com/rust-lang/rust/commit/ba0e2518c852f844a8975c2e4b1d5814dd2d11c8"}, {"sha": "686a611b9e19b487a70fccc960ea0e16e71de988", "url": "https://api.github.com/repos/rust-lang/rust/commits/686a611b9e19b487a70fccc960ea0e16e71de988", "html_url": "https://github.com/rust-lang/rust/commit/686a611b9e19b487a70fccc960ea0e16e71de988"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "62282006a40248df320c8eedc5c99c37b5b4683c", "filename": "src/libstd/error.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f48f37b052bd2683ff89037001d794f5ffac9e5b/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48f37b052bd2683ff89037001d794f5ffac9e5b/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=f48f37b052bd2683ff89037001d794f5ffac9e5b", "patch": "@@ -201,11 +201,19 @@ pub trait Error: Debug + Display {\n     #[unstable(feature = \"error_type_id\",\n                reason = \"this is memory unsafe to override in user code\",\n                issue = \"60784\")]\n-    fn type_id(&self) -> TypeId where Self: 'static {\n+    fn type_id(&self, _: private::Internal) -> TypeId where Self: 'static {\n         TypeId::of::<Self>()\n     }\n }\n \n+mod private {\n+    // This is a hack to prevent `type_id` from being overridden by `Error`\n+    // implementations, since that can enable unsound downcasting.\n+    #[unstable(feature = \"error_type_id\", issue = \"60784\")]\n+    #[derive(Debug)]\n+    pub struct Internal;\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     /// Converts a type of [`Error`] into a box of dyn [`Error`].\n@@ -575,7 +583,7 @@ impl dyn Error + 'static {\n         let t = TypeId::of::<T>();\n \n         // Get TypeId of the type in the trait object\n-        let boxed = self.type_id();\n+        let boxed = self.type_id(private::Internal);\n \n         // Compare both TypeIds on equality\n         t == boxed"}]}