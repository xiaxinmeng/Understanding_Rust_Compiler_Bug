{"sha": "fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNjhkMDIzZjQwMTFmZWExYzk4OGEyYjgyODAxZDA5YTVhZDhiZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-30T21:31:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-30T21:31:01Z"}, "message": "Auto merge of #64026 - Centril:rollup-le667lp, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #62957 (Match the loop examples)\n - #63600 (Merge oli-obk mail addresses)\n - #63684 (Constify LinkedList new function)\n - #63847 ([rustdoc] Fix system theme detection)\n - #63999 (Add missing links on AsRef trait)\n - #64014 ( miri: detect too large dynamically sized objects )\n - #64015 (some const-eval test tweaks)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "48dc5ce421c3bbc38ef95f79e8706b89deaf12c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48dc5ce421c3bbc38ef95f79e8706b89deaf12c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "html_url": "https://github.com/rust-lang/rust/commit/fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4295eea903a9e1014ee30f82930f5ec08d888077", "url": "https://api.github.com/repos/rust-lang/rust/commits/4295eea903a9e1014ee30f82930f5ec08d888077", "html_url": "https://github.com/rust-lang/rust/commit/4295eea903a9e1014ee30f82930f5ec08d888077"}, {"sha": "d997596445ad8f7e1591a2d6719c7868a4f5305e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d997596445ad8f7e1591a2d6719c7868a4f5305e", "html_url": "https://github.com/rust-lang/rust/commit/d997596445ad8f7e1591a2d6719c7868a4f5305e"}], "stats": {"total": 363, "additions": 222, "deletions": 141}, "files": [{"sha": "da8044de405a6afc1466e7a2f2e2d8b9b937c2f0", "filename": ".mailmap", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -184,12 +184,19 @@ Neil Pankey <npankey@gmail.com> <neil@wire.im>\n Nick Platt <platt.nicholas@gmail.com>\n Nicole Mazzuca <npmazzuca@gmail.com>\n Nif Ward <nif.ward@gmail.com>\n-Oliver Schneider <oliver.schneider@kit.edu> oli-obk <github6541940@oli-obk.de>\n-Oliver Schneider <oliver.schneider@kit.edu> Oliver 'ker' Schneider <rust19446194516@oli-obk.de>\n-Oliver Schneider <oliver.schneider@kit.edu> Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de>\n-Oliver Schneider <oliver.schneider@kit.edu> Oliver Schneider <git-spam9815368754983@oli-obk.de>\n-Oliver Schneider <oliver.schneider@kit.edu> Oliver Schneider <github333195615777966@oli-obk.de>\n-Oliver Schneider <oliver.schneider@kit.edu> Oliver Schneider <github6541940@oli-obk.de>\n+Oliver Scherer <oliver.schneider@kit.edu> <git-spam-no-reply9815368754983@oli-obk.de>\n+Oliver Scherer <oliver.schneider@kit.edu> <git-spam9815368754983@oli-obk.de>\n+Oliver Scherer <oliver.schneider@kit.edu> <github333195615777966@oli-obk.de>\n+Oliver Scherer <oliver.schneider@kit.edu> <github6541940@oli-obk.de>\n+Oliver Scherer <oliver.schneider@kit.edu> <rust19446194516@oli-obk.de>\n+Oliver Scherer <oliver.schneider@kit.edu> <git-no-reply-9879165716479413131@oli-obk.de>\n+Oliver Scherer <oliver.schneider@kit.edu> <git1984941651981@oli-obk.de>\n+Oliver Scherer <oliver.schneider@kit.edu> <github35764891676564198441@oli-obk.de>\n+Oliver Scherer <oliver.schneider@kit.edu> <github6541940@oli-obk.de>\n+Oliver Scherer <oliver.schneider@kit.edu> <oli-obk@users.noreply.github.com>\n+Oliver Scherer <oliver.schneider@kit.edu> <public.oliver.schneider@kit.edu>\n+Oliver Scherer <oliver.schneider@kit.edu> <obk8176014uqher834@olio-obk.de>\n+Oliver Scherer <oliver.schneider@kit.edu>\n O\u017ebolt Menegatti <ozbolt.menegatti@gmail.com> gareins <ozbolt.menegatti@gmail.com>\n Paul Faria <paul_faria@ultimatesoftware.com> Paul Faria <Nashenas88@gmail.com>\n Peer Aramillo Irizar <peer.aramillo.irizar@gmail.com> parir <peer.aramillo.irizar@gmail.com>"}, {"sha": "816a71f2557982a22b7d53c5dea848098dd96291", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -276,7 +276,7 @@ impl<T> LinkedList<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new() -> Self {\n+    pub const fn new() -> Self {\n         LinkedList {\n             head: None,\n             tail: None,"}, {"sha": "402a7b2c95a46f1e4638ddb5c4500f1dfd379003", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -104,22 +104,17 @@ pub const fn identity<T>(x: T) -> T { x }\n /// If you need to do a costly conversion it is better to implement [`From`] with type\n /// `&T` or write a custom function.\n ///\n-/// `AsRef` has the same signature as [`Borrow`], but `Borrow` is different in few aspects:\n+/// `AsRef` has the same signature as [`Borrow`], but [`Borrow`] is different in few aspects:\n ///\n-/// - Unlike `AsRef`, `Borrow` has a blanket impl for any `T`, and can be used to accept either\n+/// - Unlike `AsRef`, [`Borrow`] has a blanket impl for any `T`, and can be used to accept either\n ///   a reference or a value.\n-/// - `Borrow` also requires that `Hash`, `Eq` and `Ord` for borrowed value are\n+/// - [`Borrow`] also requires that [`Hash`], [`Eq`] and [`Ord`] for borrowed value are\n ///   equivalent to those of the owned value. For this reason, if you want to\n-///   borrow only a single field of a struct you can implement `AsRef`, but not `Borrow`.\n-///\n-/// [`Borrow`]: ../../std/borrow/trait.Borrow.html\n+///   borrow only a single field of a struct you can implement `AsRef`, but not [`Borrow`].\n ///\n /// **Note: This trait must not fail**. If the conversion can fail, use a\n /// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n-/// [`Option<T>`]: ../../std/option/enum.Option.html\n-/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n-///\n /// # Generic Implementations\n ///\n /// - `AsRef` auto-dereferences if the inner type is a reference or a mutable\n@@ -132,9 +127,16 @@ pub const fn identity<T>(x: T) -> T { x }\n /// converted to the specified type `T`.\n ///\n /// For example: By creating a generic function that takes an `AsRef<str>` we express that we\n-/// want to accept all references that can be converted to `&str` as an argument.\n-/// Since both [`String`] and `&str` implement `AsRef<str>` we can accept both as input argument.\n+/// want to accept all references that can be converted to [`&str`] as an argument.\n+/// Since both [`String`] and [`&str`] implement `AsRef<str>` we can accept both as input argument.\n ///\n+/// [`Option<T>`]: ../../std/option/enum.Option.html\n+/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`Borrow`]: ../../std/borrow/trait.Borrow.html\n+/// [`Hash`]: ../../std/hash/trait.Hash.html\n+/// [`Eq`]: ../../std/cmp/trait.Eq.html\n+/// [`Ord`]: ../../std/cmp/trait.Ord.html\n+/// [`&str`]: ../../std/primitive.str.html\n /// [`String`]: ../../std/string/struct.String.html\n ///\n /// ```"}, {"sha": "054b65f0e1a9edc0c8ba0da1a17b391bf895b396", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -442,27 +442,30 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 // Issue #27023: must add any necessary padding to `size`\n                 // (to make it a multiple of `align`) before returning it.\n-                //\n-                // Namely, the returned size should be, in C notation:\n-                //\n-                //   `size + ((size & (align-1)) ? align : 0)`\n-                //\n-                // emulated via the semi-standard fast bit trick:\n-                //\n-                //   `(size + (align-1)) & -align`\n-\n-                Ok(Some((size.align_to(align), align)))\n+                let size = size.align_to(align);\n+\n+                // Check if this brought us over the size limit.\n+                if size.bytes() >= self.tcx.data_layout().obj_size_bound() {\n+                    throw_ub_format!(\"wide pointer metadata contains invalid information: \\\n+                        total size is bigger than largest supported object\");\n+                }\n+                Ok(Some((size, align)))\n             }\n             ty::Dynamic(..) => {\n                 let vtable = metadata.expect(\"dyn trait fat ptr must have vtable\");\n-                // the second entry in the vtable is the dynamic size of the object.\n+                // Read size and align from vtable (already checks size).\n                 Ok(Some(self.read_size_and_align_from_vtable(vtable)?))\n             }\n \n             ty::Slice(_) | ty::Str => {\n                 let len = metadata.expect(\"slice fat ptr must have vtable\").to_usize(self)?;\n                 let elem = layout.field(self, 0)?;\n-                Ok(Some((elem.size * len, elem.align.abi)))\n+\n+                // Make sure the slice is not too big.\n+                let size = elem.size.checked_mul(len, &*self.tcx)\n+                    .ok_or_else(|| err_ub_format!(\"invalid slice: \\\n+                        total size is bigger than largest supported object\"))?;\n+                Ok(Some((size, elem.align.abi)))\n             }\n \n             ty::Foreign(_) => {"}, {"sha": "10b767ebba191174fa663f9192a8f9c980641646", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,5 @@\n use rustc::ty::{self, Ty, Instance, TypeFoldable};\n-use rustc::ty::layout::{Size, Align, LayoutOf};\n+use rustc::ty::layout::{Size, Align, LayoutOf, HasDataLayout};\n use rustc::mir::interpret::{Scalar, Pointer, InterpResult, PointerArithmetic,};\n \n use super::{InterpCx, Machine, MemoryKind, FnVal};\n@@ -151,6 +151,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             vtable.offset(pointer_size * 2, self)?,\n         )?.not_undef()?;\n         let align = self.force_bits(align, pointer_size)? as u64;\n+\n+        if size >= self.tcx.data_layout().obj_size_bound() {\n+            throw_ub_format!(\"invalid vtable: \\\n+                size is bigger than largest supported object\");\n+        }\n         Ok((Size::from_bytes(size), Align::from_bytes(align).unwrap()))\n     }\n }"}, {"sha": "3e14ba3efcc584d51267ef462e4dc7f29b37ec3a", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,3 +1,9 @@\n+//! Check the validity invariant of a given value, and tell the user\n+//! where in the value it got violated.\n+//! In const context, this goes even further and tries to approximate const safety.\n+//! That's useful because it means other passes (e.g. promotion) can rely on `const`s\n+//! to be const-safe.\n+\n use std::fmt::Write;\n use std::ops::RangeInclusive;\n "}, {"sha": "40a6a156972f62bb1b2a617590e37ae6285b33ea", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -118,7 +118,8 @@ function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n }\n \n function getSystemValue() {\n-    return getComputedStyle(document.documentElement).getPropertyValue('content');\n+    var property = getComputedStyle(document.documentElement).getPropertyValue('content');\n+    return property.replace(/\\\"\\'/g, \"\");\n }\n \n switchTheme(currentTheme, mainTheme,"}, {"sha": "a8dfe924fdf0698a4ec0002a71534d932ae482f6", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -681,14 +681,15 @@ mod while_keyword { }\n ///     # break;\n /// }\n ///\n-/// let mut i = 0;\n+/// let mut i = 1;\n /// loop {\n ///     println!(\"i is {}\", i);\n-///     if i > 10 {\n+///     if i > 100 {\n ///         break;\n ///     }\n-///     i += 1;\n+///     i *= 2;\n /// }\n+/// assert_eq!(i, 128);\n /// ```\n ///\n /// Unlike the other kinds of loops in Rust (`while`, `while let`, and `for`), loops can be used as"}, {"sha": "a2196db780ce046b0307d91e5cde45d1b08f6603", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,6 @@\n // only-x86_64\n \n+#[repr(C)]\n union Nonsense {\n     u: usize,\n     int_32_ref: &'static i32,"}, {"sha": "3333ffac4c9b0a9282697e66c8303a8676581a61", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,13 +1,13 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:24:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:25:5\n    |\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:27:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:28:43\n    |\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -17,215 +17,215 @@ LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_\n    = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:30:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:31:45\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:33:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:34:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:36:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:37:5\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:39:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:40:5\n    |\n LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:42:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:43:43\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:45:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:46:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:48:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:49:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:51:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:52:5\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:54:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:55:5\n    |\n LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:57:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:58:45\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:60:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:61:5\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:63:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:64:47\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:66:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:67:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:69:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:70:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:72:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:73:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:75:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:76:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:78:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:79:5\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:81:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:82:43\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:84:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:85:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:87:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:88:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:90:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:91:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:93:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:94:5\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:96:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:97:43\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:99:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:100:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:102:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:103:5\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:105:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:106:43\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:108:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:109:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}, {"sha": "4a7d8490ef25f4463a1d32c7cb830b743c7d77d3", "filename": "src/test/ui/consts/const-eval/const_transmute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_fn_union)]\n \n+#[repr(C)]\n union Transmute<T: Copy, U: Copy> {\n     t: T,\n     u: U,"}, {"sha": "b5d72d46f2861a5e95d42126edc93940a303f46d", "filename": "src/test/ui/consts/const-eval/dangling.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_transmute, const_raw_ptr_deref)]\n+\n+use std::{mem, usize};\n+\n+// Make sure we error with the right kind of error on a too large slice.\n+const TEST: () = { unsafe { //~ NOTE\n+    let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n+    let _val = &*slice; //~ ERROR: any use of this value will cause an error\n+    //~^ NOTE: total size is bigger than largest supported object\n+    //~^^ on by default\n+} };\n+\n+fn main() {}"}, {"sha": "286de0800975473bc3799b7769926f511364ed90", "filename": "src/test/ui/consts/const-eval/dangling.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -0,0 +1,16 @@\n+error: any use of this value will cause an error\n+  --> $DIR/dangling.rs:8:16\n+   |\n+LL | / const TEST: () = { unsafe {\n+LL | |     let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n+LL | |     let _val = &*slice;\n+   | |                ^^^^^^^ invalid slice: total size is bigger than largest supported object\n+LL | |\n+LL | |\n+LL | | } };\n+   | |____-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "ff2fff7fb790eca482646e3e210c6d9dd31847a0", "filename": "src/test/ui/consts/const-eval/double_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -8,6 +8,7 @@ enum Bar {\n     C = 42,\n     D = 99,\n }\n+#[repr(C)]\n union Union {\n     foo: &'static Foo,\n     bar: &'static Bar,"}, {"sha": "7c222b113cd7d866d11022f671b98bfc0d38b582", "filename": "src/test/ui/consts/const-eval/double_check2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -6,6 +6,7 @@ enum Bar {\n     C = 42,\n     D = 99,\n }\n+#[repr(C)]\n union Union {\n     foo: &'static Foo,\n     bar: &'static Bar,"}, {"sha": "9c56f1995208f7d8b6a3e00610846d3799a8a77b", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/double_check2.rs:15:1\n+  --> $DIR/double_check2.rs:16:1\n    |\n LL | / static FOO: (&Foo, &Bar) = unsafe {(\n LL | |     Union { u8: &BAR }.foo,"}, {"sha": "3f7bab065869a26f5900d80bd9c8dafbeab35eab", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_union.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -2,6 +2,7 @@\n \n fn main() {}\n \n+#[repr(C)]\n union Foo {\n     u: u32,\n     i: i32,"}, {"sha": "6899b7b82c5323d947d2aad5ae51a0683c6a5583", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_union.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: unions in const fn are unstable\n-  --> $DIR/feature-gate-const_fn_union.rs:11:5\n+  --> $DIR/feature-gate-const_fn_union.rs:12:5\n    |\n LL |     Foo { u }.i\n    |     ^^^^^^^^^^^"}, {"sha": "c6caeeffd22dd05bc96455d79da9067cff6d8aab", "filename": "src/test/ui/consts/const-eval/issue-49296.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -4,6 +4,7 @@\n #![feature(const_fn_union)]\n \n const unsafe fn transmute<T: Copy, U: Copy>(t: T) -> U {\n+    #[repr(C)]\n     union Transmute<T: Copy, U: Copy> {\n         from: T,\n         to: U,"}, {"sha": "48809e0ae649ca01f98c17ebe04022fc9c73dd9f", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/issue-49296.rs:18:16\n+  --> $DIR/issue-49296.rs:19:16\n    |\n LL | const X: u64 = *wat(42);\n    | ---------------^^^^^^^^-"}, {"sha": "3edd4e086867baa5a1818017498c030349efd3c2", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -2,6 +2,7 @@\n \n #![allow(const_err)]\n \n+#[repr(C)]\n union Bar {\n     a: &'static u8,\n     b: usize,"}, {"sha": "6618f1cd1c0b534f006b4e581bbedbb3770c33de", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_fn_fail.rs:20:27\n+  --> $DIR/promoted_const_fn_fail.rs:21:27\n    |\n LL |     let x: &'static u8 = &(bar() + 1);\n    |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "7887e426534640123a9cd6b9106f138e6da0505f", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -2,6 +2,7 @@\n \n #![deny(const_err)]\n \n+#[repr(C)]\n union Bar {\n     a: &'static u8,\n     b: usize,"}, {"sha": "5f9f3bda87b15f077e022a8b902de7872439750f", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:21:27\n+  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:22:27\n    |\n LL |     let x: &'static u8 = &(bar() + 1);\n    |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "45ce040fb9eef8b127713987f54ed26670e0d657", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -9,6 +9,7 @@ fn main() {\n     }\n }\n \n+#[repr(C)]\n union Foo {\n     f: Int,\n     r: &'static u32,"}, {"sha": "0be82e3434142dbfd8148d46cfdf9da8ad7c5701", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ref_to_int_match.rs:23:1\n+  --> $DIR/ref_to_int_match.rs:24:1\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes"}, {"sha": "483285aa4e12342b8a2b2aa6e50956c211b1c4e6", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -10,6 +10,7 @@ struct Wrap<T>(T);\n enum Enum {\n     A = 0,\n }\n+#[repr(C)]\n union TransmuteEnum {\n     in1: &'static u8,\n     in2: usize,\n@@ -35,6 +36,7 @@ enum Enum2 {\n     A = 2,\n }\n \n+#[repr(C)]\n union TransmuteEnum2 {\n     in1: usize,\n     in2: &'static u8,\n@@ -60,6 +62,7 @@ const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.\n \n // Invalid enum field content (mostly to test printing of paths for enum tuple\n // variants and tuples).\n+#[repr(C)]\n union TransmuteChar {\n     a: u32,\n     b: char,"}, {"sha": "30dd86592d4699c7407380020360097e3185c346", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,69 +1,69 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:22:1\n+  --> $DIR/ub-enum.rs:23:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { TransmuteEnum { in2: 1 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 1, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:25:1\n+  --> $DIR/ub-enum.rs:26:1\n    |\n LL | const BAD_ENUM_PTR: Enum = unsafe { TransmuteEnum { in1: &1 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:28:1\n+  --> $DIR/ub-enum.rs:29:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { TransmuteEnum { in1: &1 }.out2 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected something that cannot possibly fail to be equal to 0\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:46:1\n+  --> $DIR/ub-enum.rs:48:1\n    |\n LL | const BAD_ENUM2: Enum2 = unsafe { TransmuteEnum2 { in1: 0 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:48:1\n+  --> $DIR/ub-enum.rs:50:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { TransmuteEnum2 { in2: &0 }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:50:1\n+  --> $DIR/ub-enum.rs:52:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.out2 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected something that cannot possibly fail to be equal to 2\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:54:1\n+  --> $DIR/ub-enum.rs:56:1\n    |\n LL | const BAD_ENUM2_UNDEF : Enum2 = unsafe { TransmuteEnum2 { in3: () }.out1 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:58:1\n+  --> $DIR/ub-enum.rs:60:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.out3 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:68:1\n+  --> $DIR/ub-enum.rs:71:1\n    |\n LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 4294967295 at .<downcast-variant(Some)>.0.1, but expected something less or equal to 1114111"}, {"sha": "8ce64ced7dff4c02b004fb6d8637e94d82e2086a", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -24,6 +24,7 @@ const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n+#[repr(C)]\n union Transmute {\n     uninit: (),\n     out: NonZeroU8,"}, {"sha": "de20c3d0b8cfe042378510e4ba021f00b6d62594", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -41,23 +41,23 @@ LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:31:1\n+  --> $DIR/ub-nonnull.rs:32:1\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { Transmute { uninit: () }.out };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:39:1\n+  --> $DIR/ub-nonnull.rs:40:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 10..=30\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:45:1\n+  --> $DIR/ub-nonnull.rs:46:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 20, but expected something less or equal to 10, or greater or equal to 30"}, {"sha": "03ac12c8b1ac152f059e7e08b0199144ccb90e5e", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -11,6 +11,9 @@ const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n const NULL: &u16 = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n+// It is very important that we reject this: We do promote `&(4 * REF_AS_USIZE)`,\n+// but that would fail to compile; so we ended up breaking user code that would\n+// have worked fine had we not promoted.\n const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n //~^ ERROR it is undefined behavior to use this value\n "}, {"sha": "cd3cc38467c36fdfc28b5f82d19fb6595c01eef7", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -15,23 +15,23 @@ LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:14:1\n+  --> $DIR/ub-ref.rs:17:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:17:1\n+  --> $DIR/ub-ref.rs:20:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:20:1\n+  --> $DIR/ub-ref.rs:23:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (created from integer)"}, {"sha": "d2745d71bdb2f74b693d1d8c0d6e617798057ac2", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -6,6 +6,7 @@ use std::mem;\n #[derive(Copy, Clone)]\n enum Bar {}\n \n+#[repr(C)]\n union TransmuteUnion<A: Clone + Copy, B: Clone + Copy> {\n     a: A,\n     b: B,"}, {"sha": "43d91483797bffcbb23da64b4f11fcd250e6223b", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,21 +1,21 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:14:1\n+  --> $DIR/ub-uninhabit.rs:15:1\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { (TransmuteUnion::<(), Bar> { a: () }).b };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:17:1\n+  --> $DIR/ub-uninhabit.rs:18:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:20:1\n+  --> $DIR/ub-uninhabit.rs:21:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { (TransmuteUnion::<(), [Bar; 1]> { a: () }).b };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type"}, {"sha": "1f810c40572c0bd15ecc784352363f0569f91bfd", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -7,6 +7,7 @@\n // normalize-stderr-test \"allocation \\d+\" -> \"allocation N\"\n // normalize-stderr-test \"size \\d+\" -> \"size N\"\n \n+#[repr(C)]\n union BoolTransmute {\n   val: u8,\n   bl: bool,\n@@ -26,6 +27,7 @@ struct BadSliceRepr {\n     len: &'static u8,\n }\n \n+#[repr(C)]\n union SliceTransmute {\n     repr: SliceRepr,\n     bad: BadSliceRepr,\n@@ -58,6 +60,7 @@ struct BadDynRepr {\n     vtable: usize,\n }\n \n+#[repr(C)]\n union DynTransmute {\n     repr: DynRepr,\n     repr2: DynRepr2,\n@@ -91,10 +94,10 @@ const MY_STR_LENGTH_PTR: &MyStr = unsafe { SliceTransmute { bad: BadSliceRepr {\n //~^ ERROR it is undefined behavior to use this value\n \n // invalid UTF-8\n-const J1: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n+const STR_NO_UTF8: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n //~^ ERROR it is undefined behavior to use this value\n // invalid UTF-8 in user-defined str-like\n-const J2: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n+const MYSTR_NO_UTF8: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n //~^ ERROR it is undefined behavior to use this value\n \n // # slice\n@@ -111,16 +114,16 @@ const SLICE_LENGTH_PTR: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { pt\n //~^ ERROR it is undefined behavior to use this value\n \n // bad data *inside* the slice\n-const H: &[bool] = &[unsafe { BoolTransmute { val: 3 }.bl }];\n+const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { BoolTransmute { val: 3 }.bl }];\n //~^ ERROR it is undefined behavior to use this value\n \n // good MySliceBool\n-const I1: &MySliceBool = &MySlice(true, [false]);\n+const MYSLICE_GOOD: &MySliceBool = &MySlice(true, [false]);\n // bad: sized field is not okay\n-const I2: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false]);\n+const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false]);\n //~^ ERROR it is undefined behavior to use this value\n // bad: unsized part is not okay\n-const I3: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n+const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n //~^ ERROR it is undefined behavior to use this value\n \n // # raw slice\n@@ -132,17 +135,17 @@ const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe { SliceTransmute { addr: 42\n \n // # trait object\n // bad trait object\n-const D: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n+const TRAIT_OBJ_SHORT_VTABLE_1: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n //~^ ERROR it is undefined behavior to use this value\n // bad trait object\n-const E: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n+const TRAIT_OBJ_SHORT_VTABLE_2: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n //~^ ERROR it is undefined behavior to use this value\n // bad trait object\n-const F: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n+const TRAIT_OBJ_INT_VTABLE: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n //~^ ERROR it is undefined behavior to use this value\n \n // bad data *inside* the trait object\n-const G: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n+const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n //~^ ERROR it is undefined behavior to use this value\n \n // # raw trait object"}, {"sha": "aadabc323fbd47399cf8111936621663b43f6b77", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,141 +1,141 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:84:1\n+  --> $DIR/ub-wide-ptr.rs:87:1\n    |\n LL | const STR_TOO_LONG: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (not entirely in bounds)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:87:1\n+  --> $DIR/ub-wide-ptr.rs:90:1\n    |\n LL | const STR_LENGTH_PTR: &str = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:90:1\n+  --> $DIR/ub-wide-ptr.rs:93:1\n    |\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.my_str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:94:1\n+  --> $DIR/ub-wide-ptr.rs:97:1\n    |\n-LL | const J1: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>\n+LL | const STR_NO_UTF8: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:97:1\n+  --> $DIR/ub-wide-ptr.rs:100:1\n    |\n-LL | const J2: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>.0\n+LL | const MYSTR_NO_UTF8: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>.0\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:104:1\n+  --> $DIR/ub-wide-ptr.rs:107:1\n    |\n LL | const SLICE_LENGTH_UNINIT: &[u8] = unsafe { SliceTransmute { addr: 42 }.slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in wide pointer metadata\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:107:1\n+  --> $DIR/ub-wide-ptr.rs:110:1\n    |\n LL | const SLICE_TOO_LONG: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (not entirely in bounds)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:110:1\n+  --> $DIR/ub-wide-ptr.rs:113:1\n    |\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:114:1\n+  --> $DIR/ub-wide-ptr.rs:117:1\n    |\n-LL | const H: &[bool] = &[unsafe { BoolTransmute { val: 3 }.bl }];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>[0], but expected something less or equal to 1\n+LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { BoolTransmute { val: 3 }.bl }];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>[0], but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:120:1\n+  --> $DIR/ub-wide-ptr.rs:123:1\n    |\n-LL | const I2: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.0, but expected something less or equal to 1\n+LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false]);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.0, but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:123:1\n+  --> $DIR/ub-wide-ptr.rs:126:1\n    |\n-LL | const I3: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.1[0], but expected something less or equal to 1\n+LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.1[0], but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:130:1\n+  --> $DIR/ub-wide-ptr.rs:133:1\n    |\n LL | const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe { SliceTransmute { addr: 42 }.raw_slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in wide pointer metadata\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:135:1\n+  --> $DIR/ub-wide-ptr.rs:138:1\n    |\n-LL | const D: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n+LL | const TRAIT_OBJ_SHORT_VTABLE_1: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:138:1\n+  --> $DIR/ub-wide-ptr.rs:141:1\n    |\n-LL | const E: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n+LL | const TRAIT_OBJ_SHORT_VTABLE_2: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:141:1\n+  --> $DIR/ub-wide-ptr.rs:144:1\n    |\n-LL | const F: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n+LL | const TRAIT_OBJ_INT_VTABLE: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:145:1\n+  --> $DIR/ub-wide-ptr.rs:148:1\n    |\n-LL | const G: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something less or equal to 1\n+LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:149:1\n+  --> $DIR/ub-wide-ptr.rs:152:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 0 } }.rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:151:1\n+  --> $DIR/ub-wide-ptr.rs:154:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.raw_rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable"}, {"sha": "7f29a5bc24e4e28c69f9f9b03d572fc7b0746ed3", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -4,6 +4,7 @@ type Field1 = i32;\n type Field2 = f32;\n type Field3 = i64;\n \n+#[repr(C)]\n union DummyUnion {\n     field1: Field1,\n     field2: Field2,"}, {"sha": "4d008a0e02ad78393f8c6523d67374d3490f25a4", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-const-eval-field.rs:27:5\n+  --> $DIR/union-const-eval-field.rs:28:5\n    |\n LL |     const FIELD3: Field3 = unsafe { UNION.field3 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes"}, {"sha": "5a14c7fd99345f1497d6a09a6e12a4cff62c1ae0", "filename": "src/test/ui/consts/const-eval/union-ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -3,6 +3,7 @@\n type Field1 = i32;\n type Field3 = i64;\n \n+#[repr(C)]\n union DummyUnion {\n     field1: Field1,\n     field3: Field3,"}, {"sha": "8d950e86d27fc92f314ad8b6c93810a48f1fdd61", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,13 +1,13 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:13:1\n+  --> $DIR/union-ice.rs:14:1\n    |\n LL | const FIELD3: Field3 = unsafe { UNION.field3 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:15:1\n+  --> $DIR/union-ice.rs:16:1\n    |\n LL | / const FIELD_PATH: Struct = Struct {\n LL | |     a: 42,\n@@ -18,7 +18,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:25:1\n+  --> $DIR/union-ice.rs:26:1\n    |\n LL | / const FIELD_PATH2: Struct2 = Struct2 {\n LL | |     b: ["}, {"sha": "848826e6ef7f2f6d2cf67670c58a913d36cadff0", "filename": "src/test/ui/consts/const-eval/union-ub.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,6 @@\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n+#[repr(C)]\n union DummyUnion {\n     u8: u8,\n     bool: bool,\n@@ -14,11 +15,13 @@ enum Enum {\n }\n \n #[derive(Copy, Clone)]\n+#[repr(C)]\n union Foo {\n     a: bool,\n     b: Enum,\n }\n \n+#[repr(C)]\n union Bar {\n     foo: Foo,\n     u8: u8,"}, {"sha": "6a3a397585c899803f41cc50c4ed4334fd78509e", "filename": "src/test/ui/consts/const-eval/union-ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub.rs:28:1\n+  --> $DIR/union-ub.rs:31:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something less or equal to 1"}, {"sha": "7167f88a1185be1b2609077048f54b6237bcca5f", "filename": "src/test/ui/consts/const-eval/union_promotion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,6 @@\n #![allow(const_err)]\n \n+#[repr(C)]\n union Foo {\n     a: &'static u32,\n     b: usize,"}, {"sha": "ed186e3ebd2f5bd6068248186ec87a918c728e34", "filename": "src/test/ui/consts/const-eval/union_promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/union_promotion.rs:9:29\n+  --> $DIR/union_promotion.rs:10:29\n    |\n LL |       let x: &'static bool = &unsafe {\n    |  ____________-------------____^"}, {"sha": "65c642d750b5157870743bd961f6d3be7f386fd9", "filename": "src/test/ui/consts/const-eval/valid-const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68d023f4011fea1c988a2b82801d09a5ad8bdf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalid-const.rs?ref=fd68d023f4011fea1c988a2b82801d09a5ad8bdf", "patch": "@@ -1,7 +1,8 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // Some constants that *are* valid\n #![feature(const_transmute)]\n+#![deny(const_err)]\n \n use std::mem;\n use std::ptr::NonNull;"}]}