{"sha": "e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NWMxM2UxMDk5Yjc4YjFhNDg1MjAyZmFiYzljMWIxMGIxZjFkMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-14T17:33:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-14T17:33:38Z"}, "message": "Auto merge of #87324 - asquared31415:named-asm-labels, r=Amanieu\n\nLint against named asm labels\n\nThis adds a deny-by-default lint to prevent the use of named labels in inline `asm!`.  Without a solution to #81088 about whether the compiler should rewrite named labels or a special syntax for labels, a lint against them should prevent users from writing assembly that could break for internal compiler reasons, such as inlining or anything else that could change the number of actual inline assembly blocks emitted.\n\nThis does **not** resolve the issue with rewriting labels, that still needs a decision if the compiler should do any more work to try to make them work.", "tree": {"sha": "e33edc0c2a4ff39a0bf12b4928d366eb128997fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e33edc0c2a4ff39a0bf12b4928d366eb128997fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "html_url": "https://github.com/rust-lang/rust/commit/e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59e8853148c6a26ed583cccd0f1c3fc50444c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a59e8853148c6a26ed583cccd0f1c3fc50444c9c", "html_url": "https://github.com/rust-lang/rust/commit/a59e8853148c6a26ed583cccd0f1c3fc50444c9c"}, {"sha": "51e414ff454e35a38d9a47269cd2216a9d4c68da", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e414ff454e35a38d9a47269cd2216a9d4c68da", "html_url": "https://github.com/rust-lang/rust/commit/51e414ff454e35a38d9a47269cd2216a9d4c68da"}], "stats": {"total": 525, "additions": 520, "deletions": 5}, "files": [{"sha": "018a2ce6c2eab578cd40e5554d01c9feab8fe62d", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 75, "deletions": 5, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "patch": "@@ -7,10 +7,10 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n-use rustc_session::lint;\n+use rustc_session::lint::{self, BuiltinLintDiagnostics};\n use rustc_span::symbol::Ident;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::{InnerSpan, Span};\n+use rustc_span::{InnerSpan, MultiSpan, Span};\n use rustc_target::asm::InlineAsmArch;\n use smallvec::smallvec;\n \n@@ -397,7 +397,11 @@ fn parse_reg<'a>(\n     Ok(result)\n }\n \n-fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::InlineAsm> {\n+fn expand_preparsed_asm(\n+    ecx: &mut ExtCtxt<'_>,\n+    args: AsmArgs,\n+    is_local_asm: bool,\n+) -> Option<ast::InlineAsm> {\n     let mut template = vec![];\n     // Register operands are implicitly used since they are not allowed to be\n     // referenced in the template string.\n@@ -469,6 +473,72 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n             }\n         }\n \n+        // Lint against the use of named labels in inline `asm!` but not `global_asm!`\n+        if is_local_asm {\n+            let find_label_span = |needle: &str| -> Option<Span> {\n+                if let Some(snippet) = &template_snippet {\n+                    if let Some(pos) = snippet.find(needle) {\n+                        let end = pos\n+                            + &snippet[pos..]\n+                                .find(|c| c == ':')\n+                                .unwrap_or(snippet[pos..].len() - 1);\n+                        let inner = InnerSpan::new(pos, end);\n+                        return Some(template_sp.from_inner(inner));\n+                    }\n+                }\n+\n+                None\n+            };\n+\n+            let mut found_labels = Vec::new();\n+\n+            // A semicolon might not actually be specified as a separator for all targets, but it seems like LLVM accepts it always\n+            let statements = template_str.split(|c| matches!(c, '\\n' | ';'));\n+            for statement in statements {\n+                // If there's a comment, trim it from the statement\n+                let statement = statement.find(\"//\").map_or(statement, |idx| &statement[..idx]);\n+                let mut start_idx = 0;\n+                for (idx, _) in statement.match_indices(':') {\n+                    let possible_label = statement[start_idx..idx].trim();\n+                    let mut chars = possible_label.chars();\n+                    if let Some(c) = chars.next() {\n+                        // A label starts with an alphabetic character or . or _ and continues with alphanumeric characters, _, or $\n+                        if (c.is_alphabetic() || matches!(c, '.' | '_'))\n+                            && chars.all(|c| c.is_alphanumeric() || matches!(c, '_' | '$'))\n+                        {\n+                            found_labels.push(possible_label);\n+                        } else {\n+                            // If we encounter a non-label, there cannot be any further labels, so stop checking\n+                            break;\n+                        }\n+                    } else {\n+                        // Empty string means a leading ':' in this section, which is not a label\n+                        break;\n+                    }\n+\n+                    start_idx = idx + 1;\n+                }\n+            }\n+\n+            if found_labels.len() > 0 {\n+                let spans =\n+                    found_labels.into_iter().filter_map(find_label_span).collect::<Vec<Span>>();\n+                // If there were labels but we couldn't find a span, combine the warnings and use the template span\n+                let target_spans: MultiSpan =\n+                    if spans.len() > 0 { spans.into() } else { template_sp.into() };\n+                ecx.parse_sess().buffer_lint_with_diagnostic(\n+                    lint::builtin::NAMED_ASM_LABELS,\n+                    target_spans,\n+                    ecx.current_expansion.lint_node_id,\n+                    \"avoid using named labels in inline assembly\",\n+                    BuiltinLintDiagnostics::NamedAsmLabel(\n+                        \"only local labels of the form `<number>:` should be used in inline asm\"\n+                            .to_string(),\n+                    ),\n+                );\n+            }\n+        }\n+\n         // Don't treat raw asm as a format string.\n         if args.options.contains(ast::InlineAsmOptions::RAW) {\n             template.push(ast::InlineAsmTemplatePiece::String(template_str.to_string()));\n@@ -670,7 +740,7 @@ pub fn expand_asm<'cx>(\n ) -> Box<dyn base::MacResult + 'cx> {\n     match parse_args(ecx, sp, tts, false) {\n         Ok(args) => {\n-            let expr = if let Some(inline_asm) = expand_preparsed_asm(ecx, args) {\n+            let expr = if let Some(inline_asm) = expand_preparsed_asm(ecx, args, true) {\n                 P(ast::Expr {\n                     id: ast::DUMMY_NODE_ID,\n                     kind: ast::ExprKind::InlineAsm(P(inline_asm)),\n@@ -697,7 +767,7 @@ pub fn expand_global_asm<'cx>(\n ) -> Box<dyn base::MacResult + 'cx> {\n     match parse_args(ecx, sp, tts, true) {\n         Ok(args) => {\n-            if let Some(inline_asm) = expand_preparsed_asm(ecx, args) {\n+            if let Some(inline_asm) = expand_preparsed_asm(ecx, args, false) {\n                 MacEager::items(smallvec![P(ast::Item {\n                     ident: Ident::invalid(),\n                     attrs: Vec::new(),"}, {"sha": "47c6e904cd7e5490aec4b3a30b98eb61c9a9ef49", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "patch": "@@ -758,6 +758,10 @@ pub trait LintContext: Sized {\n                         Applicability::MachineApplicable\n                     );\n                 }\n+                BuiltinLintDiagnostics::NamedAsmLabel(help) => {\n+                    db.help(&help);\n+                    db.note(\"see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\");\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "467ec73663be64143d3cb32125ff3556619671ba", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "patch": "@@ -2468,6 +2468,38 @@ declare_lint! {\n     \"incorrect use of inline assembly\",\n }\n \n+declare_lint! {\n+    /// The `named_asm_labels` lint detects the use of named labels in the\n+    /// inline `asm!` macro.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// fn main() {\n+    ///     unsafe {\n+    ///         asm!(\"foo: bar\");\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// LLVM is allowed to duplicate inline assembly blocks for any\n+    /// reason, for example when it is in a function that gets inlined. Because\n+    /// of this, GNU assembler [local labels] *must* be used instead of labels\n+    /// with a name. Using named labels might cause assembler or linker errors.\n+    ///\n+    /// See the [unstable book] for more details.\n+    ///\n+    /// [local labels]: https://sourceware.org/binutils/docs/as/Symbol-Names.html#Local-Labels\n+    /// [unstable book]: https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels\n+    pub NAMED_ASM_LABELS,\n+    Deny,\n+    \"named labels in inline assembly\",\n+}\n+\n declare_lint! {\n     /// The `unsafe_op_in_unsafe_fn` lint detects unsafe operations in unsafe\n     /// functions without an explicit unsafe block.\n@@ -2988,6 +3020,7 @@ declare_lint_pass! {\n         INLINE_NO_SANITIZE,\n         BAD_ASM_STYLE,\n         ASM_SUB_REGISTER,\n+        NAMED_ASM_LABELS,\n         UNSAFE_OP_IN_UNSAFE_FN,\n         INCOMPLETE_INCLUDE,\n         CENUM_IMPL_DROP_CAST,"}, {"sha": "f89d531b5ef5ceb8e403004c874d0c469d681cb8", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "patch": "@@ -305,6 +305,7 @@ pub enum BuiltinLintDiagnostics {\n     ReservedPrefix(Span),\n     TrailingMacro(bool, Ident),\n     BreakWithLabelAndLoop(Span),\n+    NamedAsmLabel(String),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "6dcacd08cacdd94badb77f24053ef36edfa71fdc", "filename": "src/test/codegen/asm-sanitize-llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/src%2Ftest%2Fcodegen%2Fasm-sanitize-llvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/src%2Ftest%2Fcodegen%2Fasm-sanitize-llvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-sanitize-llvm.rs?ref=e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "patch": "@@ -7,6 +7,7 @@\n #![no_core]\n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]\n+#![allow(named_asm_labels)]\n \n #[rustc_builtin_macro]\n macro_rules! asm {"}, {"sha": "803501b40b68e59d88467682b4b4058256935014", "filename": "src/test/ui/asm/named-asm-labels.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs?ref=e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "patch": "@@ -0,0 +1,130 @@\n+// only-x86_64\n+\n+#![feature(asm, global_asm)]\n+\n+#[no_mangle]\n+pub static FOO: usize = 42;\n+\n+fn main() {\n+    unsafe {\n+        // Basic usage\n+        asm!(\"bar: nop\"); //~ ERROR avoid using named labels\n+\n+        // No following asm\n+        asm!(\"abcd:\"); //~ ERROR avoid using named labels\n+\n+        // Multiple labels on one line\n+        asm!(\"foo: bar1: nop\");\n+        //~^ ERROR avoid using named labels\n+\n+        // Multiple lines\n+        asm!(\"foo1: nop\", \"nop\"); //~ ERROR avoid using named labels\n+        asm!(\"foo2: foo3: nop\", \"nop\");\n+        //~^ ERROR avoid using named labels\n+        asm!(\"nop\", \"foo4: nop\"); //~ ERROR avoid using named labels\n+        asm!(\"foo5: nop\", \"foo6: nop\");\n+        //~^ ERROR avoid using named labels\n+        //~| ERROR avoid using named labels\n+\n+        // Statement separator\n+        asm!(\"foo7: nop; foo8: nop\");\n+        //~^ ERROR avoid using named labels\n+        asm!(\"foo9: nop; nop\"); //~ ERROR avoid using named labels\n+        asm!(\"nop; foo10: nop\"); //~ ERROR avoid using named labels\n+\n+        // Escaped newline\n+        asm!(\"bar2: nop\\n bar3: nop\");\n+        //~^ ERROR avoid using named labels\n+        asm!(\"bar4: nop\\n nop\"); //~ ERROR avoid using named labels\n+        asm!(\"nop\\n bar5: nop\"); //~ ERROR avoid using named labels\n+        asm!(\"nop\\n bar6: bar7: nop\");\n+        //~^ ERROR avoid using named labels\n+\n+        // Raw strings\n+        asm!(\n+            r\"\n+            blah2: nop\n+            blah3: nop\n+            \"\n+        );\n+        //~^^^^ ERROR avoid using named labels\n+\n+        asm!(\n+            r###\"\n+            nop\n+            nop ; blah4: nop\n+            \"###\n+        );\n+        //~^^^ ERROR avoid using named labels\n+\n+        // Non-labels\n+        // should not trigger lint, but may be invalid asm\n+        asm!(\"ab cd: nop\");\n+\n+        // `blah:` does not trigger because labels need to be at the start\n+        // of the statement, and there was already a non-label\n+        asm!(\"1bar: blah: nop\");\n+\n+        // Only `blah1:` should trigger\n+        asm!(\"blah1: 2bar: nop\"); //~ ERROR avoid using named labels\n+\n+        // Duplicate labels\n+        asm!(\"def: def: nop\"); //~ ERROR avoid using named labels\n+        asm!(\"def: nop\\ndef: nop\"); //~ ERROR avoid using named labels\n+        asm!(\"def: nop; def: nop\"); //~ ERROR avoid using named labels\n+\n+        // Trying to break parsing\n+        asm!(\":\");\n+        asm!(\"\\n:\\n\");\n+        asm!(\"::::\");\n+\n+        // 0x3A is a ':'\n+        asm!(\"fooo\\u{003A} nop\"); //~ ERROR avoid using named labels\n+        asm!(\"foooo\\x3A nop\"); //~ ERROR avoid using named labels\n+\n+        // 0x0A is a newline\n+        asm!(\"fooooo:\\u{000A} nop\"); //~ ERROR avoid using named labels\n+        asm!(\"foooooo:\\x0A nop\"); //~ ERROR avoid using named labels\n+\n+        // Intentionally breaking span finding\n+        // equivalent to \"ABC: nop\"\n+        asm!(\"\\x41\\x42\\x43\\x3A\\x20\\x6E\\x6F\\x70\"); //~ ERROR avoid using named labels\n+\n+        // Non-label colons - should pass\n+        // (most of these are stolen from other places)\n+        asm!(\"{:l}\", in(reg) 0i64);\n+        asm!(\"{:e}\", in(reg) 0f32);\n+        asm!(\"mov rax, qword ptr fs:[0]\");\n+\n+        // Comments\n+        asm!(\n+            r\"\n+            ab: nop // ab: does foo\n+            // cd: nop\n+            \"\n+        );\n+        //~^^^^ ERROR avoid using named labels\n+\n+        // Tests usage of colons in non-label positions\n+        asm!(\":lo12:FOO\"); // this is apparently valid aarch64\n+        // is there an example that is valid x86 for this test?\n+        asm!(\":bbb nop\");\n+\n+        // Test include_str in asm\n+        asm!(include_str!(\"named-asm-labels.s\")); //~ ERROR avoid using named labels\n+\n+        // Test allowing or warning on the lint instead\n+        #[allow(named_asm_labels)]\n+        {\n+            asm!(\"allowed: nop\"); // Should not emit anything\n+        }\n+\n+        #[warn(named_asm_labels)]\n+        {\n+            asm!(\"warned: nop\"); //~ WARNING avoid using named labels\n+        }\n+    }\n+}\n+\n+// Don't trigger on global asm\n+global_asm!(\"aaaaaaaa: nop\");"}, {"sha": "071356d75a0c3e9f94ed77eaec4157b0ccc67fb9", "filename": "src/test/ui/asm/named-asm-labels.s", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.s", "raw_url": "https://github.com/rust-lang/rust/raw/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.s", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.s?ref=e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "patch": "@@ -0,0 +1,5 @@\n+lab1: nop\n+// do more things\n+lab2: nop // does bar\n+// a: b\n+lab3: nop; lab4: nop"}, {"sha": "3c4a4db75e02de0d28f40c2bf33753ccdfa644a6", "filename": "src/test/ui/asm/named-asm-labels.stderr", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/rust-lang/rust/blob/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e55c13e1099b78b1a485202fabc9c1b10b1f1d15/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr?ref=e55c13e1099b78b1a485202fabc9c1b10b1f1d15", "patch": "@@ -0,0 +1,271 @@\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:11:15\n+   |\n+LL |         asm!(\"bar: nop\");\n+   |               ^^^\n+   |\n+   = note: `#[deny(named_asm_labels)]` on by default\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:14:15\n+   |\n+LL |         asm!(\"abcd:\");\n+   |               ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:17:15\n+   |\n+LL |         asm!(\"foo: bar1: nop\");\n+   |               ^^^  ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:21:15\n+   |\n+LL |         asm!(\"foo1: nop\", \"nop\");\n+   |               ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:22:15\n+   |\n+LL |         asm!(\"foo2: foo3: nop\", \"nop\");\n+   |               ^^^^  ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:24:22\n+   |\n+LL |         asm!(\"nop\", \"foo4: nop\");\n+   |                      ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:25:15\n+   |\n+LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n+   |               ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:25:28\n+   |\n+LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n+   |                            ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:30:15\n+   |\n+LL |         asm!(\"foo7: nop; foo8: nop\");\n+   |               ^^^^       ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:32:15\n+   |\n+LL |         asm!(\"foo9: nop; nop\");\n+   |               ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:33:20\n+   |\n+LL |         asm!(\"nop; foo10: nop\");\n+   |                    ^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:36:15\n+   |\n+LL |         asm!(\"bar2: nop\\n bar3: nop\");\n+   |               ^^^^        ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:38:15\n+   |\n+LL |         asm!(\"bar4: nop\\n nop\");\n+   |               ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:39:21\n+   |\n+LL |         asm!(\"nop\\n bar5: nop\");\n+   |                     ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:40:21\n+   |\n+LL |         asm!(\"nop\\n bar6: bar7: nop\");\n+   |                     ^^^^  ^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:46:13\n+   |\n+LL |             blah2: nop\n+   |             ^^^^^\n+LL |             blah3: nop\n+   |             ^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:55:19\n+   |\n+LL |             nop ; blah4: nop\n+   |                   ^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:69:15\n+   |\n+LL |         asm!(\"blah1: 2bar: nop\");\n+   |               ^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:72:15\n+   |\n+LL |         asm!(\"def: def: nop\");\n+   |               ^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:73:15\n+   |\n+LL |         asm!(\"def: nop\\ndef: nop\");\n+   |               ^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:74:15\n+   |\n+LL |         asm!(\"def: nop; def: nop\");\n+   |               ^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:82:15\n+   |\n+LL |         asm!(\"fooo\\u{003A} nop\");\n+   |               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:83:15\n+   |\n+LL |         asm!(\"foooo\\x3A nop\");\n+   |               ^^^^^^^^^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:86:15\n+   |\n+LL |         asm!(\"fooooo:\\u{000A} nop\");\n+   |               ^^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:87:15\n+   |\n+LL |         asm!(\"foooooo:\\x0A nop\");\n+   |               ^^^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:91:14\n+   |\n+LL |         asm!(\"\\x41\\x42\\x43\\x3A\\x20\\x6E\\x6F\\x70\");\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:102:13\n+   |\n+LL |             ab: nop // ab: does foo\n+   |             ^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:114:14\n+   |\n+LL |         asm!(include_str!(\"named-asm-labels.s\"));\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+warning: avoid using named labels in inline assembly\n+  --> $DIR/named-asm-labels.rs:124:19\n+   |\n+LL |             asm!(\"warned: nop\");\n+   |                   ^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/named-asm-labels.rs:122:16\n+   |\n+LL |         #[warn(named_asm_labels)]\n+   |                ^^^^^^^^^^^^^^^^\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of the unstable book <https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#labels> for more information\n+\n+error: aborting due to 28 previous errors; 1 warning emitted\n+"}]}