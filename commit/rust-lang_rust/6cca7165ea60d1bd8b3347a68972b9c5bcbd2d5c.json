{"sha": "6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjY2E3MTY1ZWE2MGQxYmQ4YjMzNDdhNjg5NzJiOWM1YmNiZDJkNWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-15T11:03:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-25T09:49:43Z"}, "message": "pass MemoryExtra to find_foreign_static and adjust_static_allocation; they might have to create allocations", "tree": {"sha": "a9087128c071be61a1e611092c65bb47540c5351", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9087128c071be61a1e611092c65bb47540c5351"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c", "html_url": "https://github.com/rust-lang/rust/commit/6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c090fe310e32300bd6c6a0610f3f23366ea1445", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c090fe310e32300bd6c6a0610f3f23366ea1445", "html_url": "https://github.com/rust-lang/rust/commit/4c090fe310e32300bd6c6a0610f3f23366ea1445"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "30c06ba5659f4eb924931985fdb7090042e81c75", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c", "patch": "@@ -433,16 +433,18 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n     }\n \n     fn find_foreign_static(\n-        _tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n         _def_id: DefId,\n+        _tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n+        _memory_extra: &(),\n     ) -> EvalResult<'tcx, Cow<'tcx, Allocation<Self::PointerTag>>> {\n         err!(ReadForeignStatic)\n     }\n \n     #[inline(always)]\n-    fn adjust_static_allocation(\n-        alloc: &'_ Allocation\n-    ) -> Cow<'_, Allocation<Self::PointerTag>> {\n+    fn adjust_static_allocation<'b>(\n+        alloc: &'b Allocation,\n+        _memory_extra: &(),\n+    ) -> Cow<'b, Allocation<Self::PointerTag>> {\n         // We do not use a tag so we can just cheaply forward the reference\n         Cow::Borrowed(alloc)\n     }"}, {"sha": "bf260c86742321d234423c44922d0b6632ddaf89", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c", "patch": "@@ -140,8 +140,9 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     /// the machine memory. (This relies on `AllocMap::get_or` being able to add the\n     /// owned allocation to the map even when the map is shared.)\n     fn find_foreign_static(\n-        tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n         def_id: DefId,\n+        tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n+        memory_extra: &Self::MemoryExtra,\n     ) -> EvalResult<'tcx, Cow<'tcx, Allocation<Self::PointerTag, Self::AllocExtra>>>;\n \n     /// Called to turn an allocation obtained from the `tcx` into one that has\n@@ -151,9 +152,10 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     /// allocation (because a copy had to be done to add tags or metadata), machine memory will\n     /// cache the result. (This relies on `AllocMap::get_or` being able to add the\n     /// owned allocation to the map even when the map is shared.)\n-    fn adjust_static_allocation(\n-        alloc: &'_ Allocation\n-    ) -> Cow<'_, Allocation<Self::PointerTag, Self::AllocExtra>>;\n+    fn adjust_static_allocation<'b>(\n+        alloc: &'b Allocation,\n+        memory_extra: &Self::MemoryExtra,\n+    ) -> Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>;\n \n     /// Called for all binary operations on integer(-like) types when one operand is a pointer\n     /// value, and for the `Offset` operation that is inherently about pointers."}, {"sha": "b52feb41370d3f9dec16c78b3d146553ace15369", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=6cca7165ea60d1bd8b3347a68972b9c5bcbd2d5c", "patch": "@@ -320,15 +320,16 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     /// this machine use the same pointer tag, so it is indirected through\n     /// `M::static_with_default_tag`.\n     fn get_static_alloc(\n-        tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n         id: AllocId,\n+        tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n+        memory_extra: &M::MemoryExtra,\n     ) -> EvalResult<'tcx, Cow<'tcx, Allocation<M::PointerTag, M::AllocExtra>>> {\n         let alloc = tcx.alloc_map.lock().get(id);\n         let def_id = match alloc {\n             Some(AllocType::Memory(mem)) => {\n                 // We got tcx memory. Let the machine figure out whether and how to\n                 // turn that into memory with the right pointer tag.\n-                return Ok(M::adjust_static_allocation(mem))\n+                return Ok(M::adjust_static_allocation(mem, memory_extra))\n             }\n             Some(AllocType::Function(..)) => {\n                 return err!(DerefFunctionPointer)\n@@ -342,7 +343,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         // We got a \"lazy\" static that has not been computed yet, do some work\n         trace!(\"static_alloc: Need to compute {:?}\", def_id);\n         if tcx.is_foreign_item(def_id) {\n-            return M::find_foreign_static(tcx, def_id);\n+            return M::find_foreign_static(def_id, tcx, memory_extra);\n         }\n         let instance = Instance::mono(tcx.tcx, def_id);\n         let gid = GlobalId {\n@@ -362,7 +363,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             let allocation = tcx.alloc_map.lock().unwrap_memory(raw_const.alloc_id);\n             // We got tcx memory. Let the machine figure out whether and how to\n             // turn that into memory with the right pointer tag.\n-            M::adjust_static_allocation(allocation)\n+            M::adjust_static_allocation(allocation, memory_extra)\n         })\n     }\n \n@@ -372,7 +373,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         // `get_static_alloc` that we can actually use directly without inserting anything anywhere.\n         // So the error type is `EvalResult<'tcx, &Allocation<M::PointerTag>>`.\n         let a = self.alloc_map.get_or(id, || {\n-            let alloc = Self::get_static_alloc(self.tcx, id).map_err(Err)?;\n+            let alloc = Self::get_static_alloc(id, self.tcx, &self.extra).map_err(Err)?;\n             match alloc {\n                 Cow::Borrowed(alloc) => {\n                     // We got a ref, cheaply return that as an \"error\" so that the\n@@ -401,10 +402,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         id: AllocId,\n     ) -> EvalResult<'tcx, &mut Allocation<M::PointerTag, M::AllocExtra>> {\n         let tcx = self.tcx;\n+        let memory_extra = &self.extra;\n         let a = self.alloc_map.get_mut_or(id, || {\n             // Need to make a copy, even if `get_static_alloc` is able\n             // to give us a cheap reference.\n-            let alloc = Self::get_static_alloc(tcx, id)?;\n+            let alloc = Self::get_static_alloc(id, tcx, memory_extra)?;\n             if alloc.mutability == Mutability::Immutable {\n                 return err!(ModifiedConstantMemory);\n             }"}]}