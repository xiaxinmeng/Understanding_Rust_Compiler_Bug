{"sha": "203305d09566e2924f893ed94845253da199eeab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMzMwNWQwOTU2NmUyOTI0Zjg5M2VkOTQ4NDUyNTNkYTE5OWVlYWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-20T02:42:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T02:42:43Z"}, "message": "Rollup merge of #71420 - RalfJung:specialization-incomplete, r=matthewjasper\n\nSpecialization is unsound\n\nAs discussed in https://github.com/rust-lang/rust/issues/31844#issuecomment-617013949, it might be a good idea to warn users of specialization that the feature they are using is unsound.\n\nI also expanded the \"incomplete feature\" warning to link the user to the tracking issue.", "tree": {"sha": "8e2967622dc42f3e709918bedc5d0f01d3a237fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e2967622dc42f3e709918bedc5d0f01d3a237fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/203305d09566e2924f893ed94845253da199eeab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7XejCRBK7hj4Ov3rIwAAdHIIAGukRP+ToT6MNdUB70giP2TX\nGq3GIaXGEdGNO2esGPQ3Tlw4B719W8l3f4BZHrqiQJFmw2siMfJMvtIfBrCiVWxD\neiDUx9TUXMLt4kaWVSGIR3oInylEFWLVukGNBFFGGoY/YLVdEcDG4Nn+2j8MM03Z\no/7MEaqAvxPggGCOM3UNBCD/oXQQjr0D6XUOCNAh+4zDlT/HN7+0uVVB8a3xeNL8\n8jNod1QFw97Do2eIcjxcHKK29tRmBySyPU7bvEYCYOXFgg6087O/HZ0eYhKak2rX\n9AfzqRp2oE7ZCTnKNqlCzlOGVl4wxjqYSeMDVnXOOqLpWJ7rvlqjwWznDZYpiLI=\n=rTjl\n-----END PGP SIGNATURE-----\n", "payload": "tree 8e2967622dc42f3e709918bedc5d0f01d3a237fa\nparent 34c5cd9a64d8537236626c4ccbed39a924cd38e2\nparent d1265e7679b748c3014b878c0e32178084a282ff\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592620963 -0700\ncommitter GitHub <noreply@github.com> 1592620963 -0700\n\nRollup merge of #71420 - RalfJung:specialization-incomplete, r=matthewjasper\n\nSpecialization is unsound\n\nAs discussed in https://github.com/rust-lang/rust/issues/31844#issuecomment-617013949, it might be a good idea to warn users of specialization that the feature they are using is unsound.\n\nI also expanded the \"incomplete feature\" warning to link the user to the tracking issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/203305d09566e2924f893ed94845253da199eeab", "html_url": "https://github.com/rust-lang/rust/commit/203305d09566e2924f893ed94845253da199eeab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/203305d09566e2924f893ed94845253da199eeab/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34c5cd9a64d8537236626c4ccbed39a924cd38e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/34c5cd9a64d8537236626c4ccbed39a924cd38e2", "html_url": "https://github.com/rust-lang/rust/commit/34c5cd9a64d8537236626c4ccbed39a924cd38e2"}, {"sha": "d1265e7679b748c3014b878c0e32178084a282ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1265e7679b748c3014b878c0e32178084a282ff", "html_url": "https://github.com/rust-lang/rust/commit/d1265e7679b748c3014b878c0e32178084a282ff"}], "stats": {"total": 878, "additions": 748, "deletions": 130}, "files": [{"sha": "4e55452a4c31b647c93082b3d38a09793f047088", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -19,7 +19,7 @@\n #![feature(raw)]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]\n-#![feature(specialization)]\n+#![feature(min_specialization)]\n #![feature(step_trait)]\n #![feature(step_trait_ext)]\n #![feature(str_internals)]"}, {"sha": "7aadf58243f31574d9f4ae0c78a6e90590df79cb", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -596,4 +596,5 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::raw_dylib,\n     sym::const_trait_impl,\n     sym::const_trait_bound_opt_out,\n+    sym::specialization,\n ];"}, {"sha": "958f0eb26680194b45bf0c235a10b4a8a6c108c0", "filename": "src/test/compile-fail/specialization/issue-50452.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-50452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-50452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-50452.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,6 @@\n // compile-fail\n-\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n pub trait Foo {\n     fn foo();"}, {"sha": "553705b2a4fab39c944dbae4802093ac3439ff66", "filename": "src/test/ui/associated-types/defaults-specialization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,7 @@\n //! Tests the interaction of associated type defaults and specialization.\n \n #![feature(associated_type_defaults, specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait Tr {\n     type Ty = u8;"}, {"sha": "09a8c8f8a88a205e2828f43dad1a86ee527740ec", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/defaults-specialization.rs:3:38\n+   |\n+LL | #![feature(associated_type_defaults, specialization)]\n+   |                                      ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0053]: method `make` has an incompatible type for trait\n-  --> $DIR/defaults-specialization.rs:18:18\n+  --> $DIR/defaults-specialization.rs:19:18\n    |\n LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n@@ -11,7 +20,7 @@ LL |     fn make() -> u8 { 0 }\n               found fn pointer `fn() -> u8`\n \n error[E0053]: method `make` has an incompatible type for trait\n-  --> $DIR/defaults-specialization.rs:34:18\n+  --> $DIR/defaults-specialization.rs:35:18\n    |\n LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n@@ -26,7 +35,7 @@ LL |     fn make() -> bool { true }\n               found fn pointer `fn() -> bool`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:9:9\n+  --> $DIR/defaults-specialization.rs:10:9\n    |\n LL |     type Ty = u8;\n    |     ------------- associated type defaults can't be assumed inside the trait defining them\n@@ -40,7 +49,7 @@ LL |         0u8\n                          found type `u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:25:29\n+  --> $DIR/defaults-specialization.rs:26:29\n    |\n LL |     fn make() -> Self::Ty { 0u8 }\n    |                  --------   ^^^ expected associated type, found `u8`\n@@ -53,7 +62,7 @@ LL |     fn make() -> Self::Ty { 0u8 }\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:43:29\n+  --> $DIR/defaults-specialization.rs:44:29\n    |\n LL |     default type Ty = bool;\n    |     ----------------------- expected this associated type\n@@ -67,7 +76,7 @@ LL |     fn make() -> Self::Ty { true }\n                          found type `bool`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:86:32\n+  --> $DIR/defaults-specialization.rs:87:32\n    |\n LL |     let _: <B<()> as Tr>::Ty = 0u8;\n    |            -----------------   ^^^ expected associated type, found `u8`\n@@ -77,13 +86,13 @@ LL |     let _: <B<()> as Tr>::Ty = 0u8;\n    = note: expected associated type `<B<()> as Tr>::Ty`\n                          found type `u8`\n help: a method is available that returns `<B<()> as Tr>::Ty`\n-  --> $DIR/defaults-specialization.rs:8:5\n+  --> $DIR/defaults-specialization.rs:9:5\n    |\n LL |     fn make() -> Self::Ty {\n    |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:87:32\n+  --> $DIR/defaults-specialization.rs:88:32\n    |\n LL |     let _: <B<()> as Tr>::Ty = true;\n    |            -----------------   ^^^^ expected associated type, found `bool`\n@@ -93,13 +102,13 @@ LL |     let _: <B<()> as Tr>::Ty = true;\n    = note: expected associated type `<B<()> as Tr>::Ty`\n                          found type `bool`\n help: a method is available that returns `<B<()> as Tr>::Ty`\n-  --> $DIR/defaults-specialization.rs:8:5\n+  --> $DIR/defaults-specialization.rs:9:5\n    |\n LL |     fn make() -> Self::Ty {\n    |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:88:33\n+  --> $DIR/defaults-specialization.rs:89:33\n    |\n LL |     let _: <B2<()> as Tr>::Ty = 0u8;\n    |            ------------------   ^^^ expected associated type, found `u8`\n@@ -109,13 +118,13 @@ LL |     let _: <B2<()> as Tr>::Ty = 0u8;\n    = note: expected associated type `<B2<()> as Tr>::Ty`\n                          found type `u8`\n help: a method is available that returns `<B2<()> as Tr>::Ty`\n-  --> $DIR/defaults-specialization.rs:8:5\n+  --> $DIR/defaults-specialization.rs:9:5\n    |\n LL |     fn make() -> Self::Ty {\n    |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-specialization.rs:89:33\n+  --> $DIR/defaults-specialization.rs:90:33\n    |\n LL |     let _: <B2<()> as Tr>::Ty = true;\n    |            ------------------   ^^^^ expected associated type, found `bool`\n@@ -125,12 +134,12 @@ LL |     let _: <B2<()> as Tr>::Ty = true;\n    = note: expected associated type `<B2<()> as Tr>::Ty`\n                          found type `bool`\n help: a method is available that returns `<B2<()> as Tr>::Ty`\n-  --> $DIR/defaults-specialization.rs:8:5\n+  --> $DIR/defaults-specialization.rs:9:5\n    |\n LL |     fn make() -> Self::Ty {\n    |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 9 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0053, E0308.\n For more information about an error, try `rustc --explain E0053`."}, {"sha": "d74d3a2a52351c844e2489224ed9035b1bc2ea1a", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -4,6 +4,7 @@\n //\n // No we expect to run into a more user-friendly cycle error instead.\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait Trait<T> { type Assoc; }\n //~^ ERROR E0391"}, {"sha": "7e140480b77d4d0eebe0fc27dbf35e80b3eabd2e", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,16 +1,25 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:6:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0391]: cycle detected when building specialization graph of trait `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:8:1\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1\n    |\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^\n    |\n    = note: ...which again requires building specialization graph of trait `Trait`, completing the cycle\n note: cycle used when coherence checking all impls of trait `Trait`\n-  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:8:1\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1\n    |\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0391`."}, {"sha": "3adbbb53046340abf7193be415f7eda66ffcad23", "filename": "src/test/ui/consts/trait_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -5,7 +5,7 @@\n // Tests that specialization does not cause optimizations running on polymorphic MIR to resolve\n // to a `default` implementation.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Marker {}\n "}, {"sha": "03da7d512e592a5a15cb075db93d0e8b58f201e5", "filename": "src/test/ui/consts/trait_specialization.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/trait_specialization.rs:8:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "ead78b7ffa2c40005838c27da367f1b4bea92c20", "filename": "src/test/ui/error-codes/E0520.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ferror-codes%2FE0520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ferror-codes%2FE0520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0520.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,5 @@\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait SpaceLlama {\n     fn fly(&self);"}, {"sha": "1041ccee937042726a1296b22fdbdb2b49ddbf52", "filename": "src/test/ui/error-codes/E0520.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/E0520.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0520]: `fly` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/E0520.rs:16:5\n+  --> $DIR/E0520.rs:17:5\n    |\n LL | / impl<T: Clone> SpaceLlama for T {\n LL | |     fn fly(&self) {}\n@@ -11,6 +20,6 @@ LL |       default fn fly(&self) {}\n    |\n    = note: to specialize, `fly` in the parent `impl` must be marked `default`\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0520`."}, {"sha": "607b4a49661cc6cb8014cbb565f3dd748d860b2e", "filename": "src/test/ui/impl-trait/equality-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo: std::fmt::Debug + Eq {}\n "}, {"sha": "1abf05dca8270b37fc869fb243139c6079bf5792", "filename": "src/test/ui/impl-trait/equality-rpass.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/equality-rpass.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "828b5aac896beff3d71fb276d3dc3b0785502dfd", "filename": "src/test/ui/impl-trait/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo: Copy + ToString {}\n "}, {"sha": "628dfb13d4ca8834bc6c32f2ffbbf282a00dce3e", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/equality.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0308]: mismatched types\n   --> $DIR/equality.rs:15:5\n    |\n@@ -24,7 +33,7 @@ LL |         n + sum_to(n - 1)\n    |\n    = help: the trait `std::ops::Add<impl Foo>` is not implemented for `u32`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "2e325867da86ee999dcfd87719630c995a3a2857", "filename": "src/test/ui/impl-trait/equality2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo: Copy + ToString {}\n "}, {"sha": "1780931efc5415790de6efab2b5c47be4694e680", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/equality2.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:25:18\n    |\n@@ -58,6 +67,6 @@ LL |          x.0);\n    = note: expected opaque type `impl Foo` (`i32`)\n               found opaque type `impl Foo` (`u32`)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "cc35213b93d686aec69d958fe88c640ac3c5972e", "filename": "src/test/ui/issues/issue-35376.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35376.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,5 +1,6 @@\n // check-pass\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n fn main() {}\n "}, {"sha": "06c31f3bae0620235969d416908d1b7c2d6b5628", "filename": "src/test/ui/issues/issue-35376.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-35376.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-35376.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35376.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-35376.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "c1262430502448f383596102de60f0f4735fc5ad", "filename": "src/test/ui/issues/issue-38091.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38091.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait Iterate<'a> {\n     type Ty: Valid;"}, {"sha": "a9855445f66680e4cfdbfc665ec9acf80636dbbc", "filename": "src/test/ui/issues/issue-38091.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-38091.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "f7cb296d3b8bb738bb0b5a4b3f72a4cb66eb2d4a", "filename": "src/test/ui/issues/issue-55380.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-55380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-55380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55380.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n-\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n pub trait Foo {\n     fn abc() -> u32;"}, {"sha": "451beebd1061ee1faf53c49b999187bcdbca6234", "filename": "src/test/ui/issues/issue-55380.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-55380.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "1e413120a371730bb854e0823c77a9c50e8ac612", "filename": "src/test/ui/overlap-doesnt-conflict-with-specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(marker_trait_attr)]\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n #[marker]\n trait MyMarker {}"}, {"sha": "16df31ba2a88b5e5a7873a0c43f39fbc3eff8cb3", "filename": "src/test/ui/overlap-doesnt-conflict-with-specialization.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/overlap-doesnt-conflict-with-specialization.rs:4:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a8759d2090d0fd72cadba4ca5ee34df6e8be0585", "filename": "src/test/ui/parser/assoc-static-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,7 @@\n // Semantically, we do not allow e.g., `static X: u8 = 0;` as an associated item.\n \n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n fn main() {}\n "}, {"sha": "bc3054c3e30622a37f899c8c8db63315845d6c90", "filename": "src/test/ui/parser/assoc-static-semantic-fail.stderr", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,167 +1,176 @@\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:9:5\n+  --> $DIR/assoc-static-semantic-fail.rs:10:5\n    |\n LL |     static IA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:11:5\n+  --> $DIR/assoc-static-semantic-fail.rs:12:5\n    |\n LL |     static IB: u8;\n    |     ^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:14:5\n+  --> $DIR/assoc-static-semantic-fail.rs:15:5\n    |\n LL |     default static IC: u8 = 0;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:14:5\n+  --> $DIR/assoc-static-semantic-fail.rs:15:5\n    |\n LL |     default static IC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:17:16\n+  --> $DIR/assoc-static-semantic-fail.rs:18:16\n    |\n LL |     pub(crate) default static ID: u8;\n    |                ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:17:5\n+  --> $DIR/assoc-static-semantic-fail.rs:18:5\n    |\n LL |     pub(crate) default static ID: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:24:5\n+  --> $DIR/assoc-static-semantic-fail.rs:25:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:26:5\n+  --> $DIR/assoc-static-semantic-fail.rs:27:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:28:5\n+  --> $DIR/assoc-static-semantic-fail.rs:29:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:28:5\n+  --> $DIR/assoc-static-semantic-fail.rs:29:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:31:16\n+  --> $DIR/assoc-static-semantic-fail.rs:32:16\n    |\n LL |     pub(crate) default static TD: u8;\n    |                ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:31:5\n+  --> $DIR/assoc-static-semantic-fail.rs:32:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:38:5\n+  --> $DIR/assoc-static-semantic-fail.rs:39:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:40:5\n+  --> $DIR/assoc-static-semantic-fail.rs:41:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:43:5\n+  --> $DIR/assoc-static-semantic-fail.rs:44:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:43:5\n+  --> $DIR/assoc-static-semantic-fail.rs:44:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a static item cannot be `default`\n-  --> $DIR/assoc-static-semantic-fail.rs:46:9\n+  --> $DIR/assoc-static-semantic-fail.rs:47:9\n    |\n LL |     pub default static TD: u8;\n    |         ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:46:5\n+  --> $DIR/assoc-static-semantic-fail.rs:47:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated constant in `impl` without body\n-  --> $DIR/assoc-static-semantic-fail.rs:11:5\n+  --> $DIR/assoc-static-semantic-fail.rs:12:5\n    |\n LL |     static IB: u8;\n    |     ^^^^^^^^^^^^^-\n    |                  |\n    |                  help: provide a definition for the constant: `= <expr>;`\n \n error: associated constant in `impl` without body\n-  --> $DIR/assoc-static-semantic-fail.rs:17:5\n+  --> $DIR/assoc-static-semantic-fail.rs:18:5\n    |\n LL |     pub(crate) default static ID: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                                     |\n    |                                     help: provide a definition for the constant: `= <expr>;`\n \n error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/assoc-static-semantic-fail.rs:31:5\n+  --> $DIR/assoc-static-semantic-fail.rs:32:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^\n \n error: associated constant in `impl` without body\n-  --> $DIR/assoc-static-semantic-fail.rs:40:5\n+  --> $DIR/assoc-static-semantic-fail.rs:41:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^-\n    |                  |\n    |                  help: provide a definition for the constant: `= <expr>;`\n \n error: associated constant in `impl` without body\n-  --> $DIR/assoc-static-semantic-fail.rs:46:5\n+  --> $DIR/assoc-static-semantic-fail.rs:47:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                              |\n    |                              help: provide a definition for the constant: `= <expr>;`\n \n error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/assoc-static-semantic-fail.rs:46:5\n+  --> $DIR/assoc-static-semantic-fail.rs:47:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^ `pub` not permitted here because it's implied\n \n-error: aborting due to 24 previous errors\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/assoc-static-semantic-fail.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+error: aborting due to 24 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0449`."}, {"sha": "52338c1f13aadde7c3ac78af8ef1284bbe6f4ead", "filename": "src/test/ui/parser/default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,7 @@\n // Test successful and unsuccessful parsing of the `default` contextual keyword\n \n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn foo<T: Default>() -> T;"}, {"sha": "dea35666f37b56c80f12150bc9e2aa2ba4a9284f", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,13 +1,13 @@\n error: `default` is not followed by an item\n-  --> $DIR/default.rs:22:5\n+  --> $DIR/default.rs:23:5\n    |\n LL |     default pub fn foo<T: Default>() -> T { T::default() }\n    |     ^^^^^^^ the `default` qualifier\n    |\n    = note: only `fn`, `const`, `type`, or `impl` items may be prefixed by `default`\n \n error: non-item in item list\n-  --> $DIR/default.rs:22:13\n+  --> $DIR/default.rs:23:13\n    |\n LL | impl Foo for u32 {\n    |                  - item list starts here\n@@ -18,21 +18,30 @@ LL | }\n    | - item list ends here\n \n error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/default.rs:16:5\n+  --> $DIR/default.rs:17:5\n    |\n LL |     pub default fn foo<T: Default>() -> T {\n    |     ^^^ `pub` not permitted here because it's implied\n \n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/default.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0046]: not all trait items implemented, missing: `foo`\n-  --> $DIR/default.rs:21:1\n+  --> $DIR/default.rs:22:1\n    |\n LL |     fn foo<T: Default>() -> T;\n    |     -------------------------- `foo` from trait\n ...\n LL | impl Foo for u32 {\n    | ^^^^^^^^^^^^^^^^ missing `foo` in implementation\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0046, E0449.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "34aee7f69359ee2c0d63ddd6f77c5c99c1d39c3d", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n fn main() {}\n "}, {"sha": "e8ff93f63237da3e779aecefef2816d9563d0936", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -46,5 +46,14 @@ LL |     default fn f2() {}\n    |     |\n    |     `default` because of this\n \n-error: aborting due to 6 previous errors\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/trait-item-with-defaultness-fail-semantic.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+error: aborting due to 6 previous errors; 1 warning emitted\n "}, {"sha": "fc39b553a61ac31cef08b8161cd2a66d01c2d859", "filename": "src/test/ui/specialization/assoc-ty-graph-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -2,7 +2,7 @@\n \n // Make sure we don't crash with a cycle error during coherence.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Trait<T> {\n     type Assoc;"}, {"sha": "250f48f8e5932f88f710d9b7b75820eb3efbd5cb", "filename": "src/test/ui/specialization/assoc-ty-graph-cycle.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/assoc-ty-graph-cycle.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "fc28d0c815eb3366dbc62e206e5d0a18aa90b4ef", "filename": "src/test/ui/specialization/cross-crate-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -2,7 +2,7 @@\n \n // aux-build:cross_crates_defaults.rs\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n extern crate cross_crates_defaults;\n "}, {"sha": "f18bc99d73916d21a642535c92844374240ed38b", "filename": "src/test/ui/specialization/cross-crate-defaults.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/cross-crate-defaults.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "5d67160eb96ad8f2114c424ee0f778fa535818f8", "filename": "src/test/ui/specialization/defaultimpl/allowed-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -5,7 +5,7 @@\n \n // aux-build:go_trait.rs\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n extern crate go_trait;\n "}, {"sha": "1b50329719d011672834e329c5d5b27a0d375367", "filename": "src/test/ui/specialization/defaultimpl/allowed-cross-crate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/allowed-cross-crate.rs:8:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "13258ac8c9fe670ba2f39aa6e7e20efe2bcedab4", "filename": "src/test/ui/specialization/defaultimpl/out-of-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -2,7 +2,7 @@\n \n // Test that you can list the more specific impl before the more general one.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     type Out;"}, {"sha": "deae021a8914d00e1f9a46570e2c2f1558b2a513", "filename": "src/test/ui/specialization/defaultimpl/out-of-order.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/out-of-order.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "0add4d5516c7b3433980eb8b0676daeb8213bb3a", "filename": "src/test/ui/specialization/defaultimpl/overlap-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -4,7 +4,7 @@\n // projections involve specialization, so long as the associated type is\n // provided by the most specialized impl.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Assoc {\n     type Output;"}, {"sha": "46899ca99549044c0331883e0914cafcbfbaf155", "filename": "src/test/ui/specialization/defaultimpl/overlap-projection.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/overlap-projection.rs:7:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4a9140969324dd46b94ae8cc22ef55313e8b844e", "filename": "src/test/ui/specialization/defaultimpl/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Make sure we *can* project non-defaulted associated types\n // cf compile-fail/specialization-default-projection.rs"}, {"sha": "8629c6c52d4a7a4326011a3d3eff6a3238965721", "filename": "src/test/ui/specialization/defaultimpl/projection.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/projection.rs:4:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "661724eef8a4386a7edc2de3c191074e9d54a74a", "filename": "src/test/ui/specialization/defaultimpl/specialization-no-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Check a number of scenarios in which one impl tries to override another,\n // without correctly using `default`."}, {"sha": "7958eddbeba251aefe0bcde14803c2c6698e83ff", "filename": "src/test/ui/specialization/defaultimpl/specialization-no-default.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-no-default.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n   --> $DIR/specialization-no-default.rs:20:5\n    |\n@@ -65,6 +74,6 @@ LL |       fn redundant(&self) {}\n    |\n    = note: to specialize, `redundant` in the parent `impl` must be marked `default`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0520`."}, {"sha": "89fef5b5ef9692838a27c0756ace6c2a623543ba", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-item-not-implemented-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -3,7 +3,7 @@\n // Tests that we can combine a default impl that supplies one method with a\n // full impl that supplies the other, and they can invoke one another.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn foo_one(&self) -> &'static str;"}, {"sha": "dc377dd10c868d18359ae354ddcf2949ace8f649", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-item-not-implemented-rpass.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-trait-item-not-implemented-rpass.rs:6:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "3c5414469fac2ef6a5c2146d6c0c3d4cc98faea4", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-item-not-implemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,6 @@\n // Tests that default impls do not have to supply all items but regular impls do.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn foo_one(&self) -> &'static str;"}, {"sha": "9d1eca1d6af76d4403bdee7ad868b3f2cb34384a", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-item-not-implemented.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-trait-item-not-implemented.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0046]: not all trait items implemented, missing: `foo_two`\n   --> $DIR/specialization-trait-item-not-implemented.rs:18:1\n    |\n@@ -7,6 +16,6 @@ LL |     fn foo_two(&self) -> &'static str;\n LL | impl Foo for MyStruct {}\n    | ^^^^^^^^^^^^^^^^^^^^^ missing `foo_two` in implementation\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0046`."}, {"sha": "35e3b8725a82a522ff3ac19e1a812e211a4319f0", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -2,7 +2,7 @@\n // - default impls do not have to supply all items and\n // - a default impl does not count as an impl (in this case, an incomplete default impl).\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn foo_one(&self) -> &'static str;"}, {"sha": "6b8e559bc36343ed23eb191681bcc8c2fd2a019e", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-trait-not-implemented.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0599]: no method named `foo_one` found for struct `MyStruct` in the current scope\n   --> $DIR/specialization-trait-not-implemented.rs:22:29\n    |\n@@ -19,6 +28,6 @@ note: `Foo` defines an item `foo_one`, perhaps you need to implement it\n LL | trait Foo {\n    | ^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0599`."}, {"sha": "afd634725e365adfcfe9eeee34096d7fa0cf3d15", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,6 @@\n // Tests that a default impl still has to have a WF trait ref.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo<'a, T: Eq + 'a> { }\n "}, {"sha": "d45825651a8e27d1e9efd010a04c743d0983b836", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-wfcheck.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0277]: the trait bound `U: std::cmp::Eq` is not satisfied\n   --> $DIR/specialization-wfcheck.rs:7:17\n    |\n@@ -12,6 +21,6 @@ help: consider restricting type parameter `U`\n LL | default impl<U: std::cmp::Eq> Foo<'static, U> for () {}\n    |               ^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "8558a1efb82f3694167495e620a56af2cffafe90", "filename": "src/test/ui/specialization/defaultimpl/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,5 +1,5 @@\n #![feature(negative_impls)]\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n struct S;\n struct Z;"}, {"sha": "2449849725f383c71b2c0483ee61de7f78b110fc", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -8,6 +8,15 @@ LL | default impl S {}\n    |\n    = note: only trait implementations may be annotated with `default`\n \n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/validation.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error: impls of auto traits cannot be default\n   --> $DIR/validation.rs:9:21\n    |\n@@ -36,6 +45,6 @@ error[E0750]: negative impls cannot be default impls\n LL | default impl !Tr for S {}\n    | ^^^^^^^      ^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0750`."}, {"sha": "89350602f3652bc58710e4c2d8387bb01c3c77ad", "filename": "src/test/ui/specialization/issue-36804.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n pub struct Cloned<I>(I);\n "}, {"sha": "744d88204247b4335e2d646dcb0889a605ecef4b", "filename": "src/test/ui/specialization/issue-36804.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-36804.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "9dd47a4a17e434b054255396fa66209ba3e329ce", "filename": "src/test/ui/specialization/issue-39448.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Regression test for a specialization-related ICE (#39448).\n "}, {"sha": "f3bb69b8f712a986fd7501ce83dfb45894f1ab79", "filename": "src/test/ui/specialization/issue-39448.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-39448.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0275]: overflow evaluating the requirement `T: FromA<U>`\n   --> $DIR/issue-39448.rs:45:13\n    |\n@@ -7,6 +16,6 @@ LL |     x.foo(y.to()).to()\n    = note: required because of the requirements on the impl of `FromA<U>` for `T`\n    = note: required because of the requirements on the impl of `ToA<T>` for `U`\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "72630ee9c7055c7020511533e4a3b682d37f72aa", "filename": "src/test/ui/specialization/issue-39618.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -4,7 +4,7 @@\n \n // check-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn foo(&self);"}, {"sha": "d40d17d8f71ca2349fb875eb3a5454dae6a455cc", "filename": "src/test/ui/specialization/issue-39618.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-39618.rs:7:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "29fc12066e8752d4d59d2e620e074fb0de6ed6b9", "filename": "src/test/ui/specialization/issue-50452.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n pub trait Foo {\n     fn foo();"}, {"sha": "c01817e0b2793a5ab3c06294a48e9f7b6db29558", "filename": "src/test/ui/specialization/issue-50452.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-50452.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "8046587020661b57a0ad2f63450a9d9068a3c86b", "filename": "src/test/ui/specialization/issue-52050.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Regression test for #52050: when inserting the blanket impl `I`\n // into the tree, we had to replace the child node for `Foo`, which"}, {"sha": "a7564ced055d5ef1ff5afad749b8e46291a60270", "filename": "src/test/ui/specialization/issue-52050.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-52050.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0119]: conflicting implementations of trait `IntoPyDictPointer` for type `()`:\n   --> $DIR/issue-52050.rs:28:1\n    |\n@@ -13,6 +22,6 @@ LL |   impl IntoPyDictPointer for ()\n    |\n    = note: upstream crates may add a new impl of trait `std::iter::Iterator` for type `()` in future versions\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "10f185c335144a198833f417d9f7f214f581947a", "filename": "src/test/ui/specialization/issue-63716-parse-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -4,7 +4,7 @@\n // check-pass\n // edition:2018\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n fn main() {}\n "}, {"sha": "43620e1ba51e1b3b631707f66fc94e6f93f09d4d", "filename": "src/test/ui/specialization/issue-63716-parse-async.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-63716-parse-async.rs:7:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d41b5355c2cded91a2db374db9e96214be95a947", "filename": "src/test/ui/specialization/issue-70442.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // check-pass\n "}, {"sha": "f71e4c7dd1cef0ca9bc9ccace200c5827ff831d8", "filename": "src/test/ui/specialization/issue-70442.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-70442.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b7d6ac829dd1482115632309389b38940af10805", "filename": "src/test/ui/specialization/non-defaulted-item-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,5 @@\n #![feature(specialization, associated_type_defaults)]\n+//~^ WARN the feature `specialization` is incomplete\n \n // Test that attempting to override a non-default method or one not in the\n // parent impl causes an error."}, {"sha": "eae045b92c04d49521d2fb697391c9243fd5e0f6", "filename": "src/test/ui/specialization/non-defaulted-item-fail.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/non-defaulted-item-fail.rs:1:12\n+   |\n+LL | #![feature(specialization, associated_type_defaults)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0520]: `Ty` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:29:5\n+  --> $DIR/non-defaulted-item-fail.rs:30:5\n    |\n LL | / impl<T> Foo for Box<T> {\n LL | |     type Ty = bool;\n@@ -14,7 +23,7 @@ LL |       type Ty = Vec<()>;\n    = note: to specialize, `Ty` in the parent `impl` must be marked `default`\n \n error[E0520]: `CONST` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:31:5\n+  --> $DIR/non-defaulted-item-fail.rs:32:5\n    |\n LL | / impl<T> Foo for Box<T> {\n LL | |     type Ty = bool;\n@@ -29,7 +38,7 @@ LL |       const CONST: u8 = 42;\n    = note: to specialize, `CONST` in the parent `impl` must be marked `default`\n \n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:33:5\n+  --> $DIR/non-defaulted-item-fail.rs:34:5\n    |\n LL | / impl<T> Foo for Box<T> {\n LL | |     type Ty = bool;\n@@ -44,7 +53,7 @@ LL |       fn foo(&self) -> bool { true }\n    = note: to specialize, `foo` in the parent `impl` must be marked `default`\n \n error[E0520]: `Ty` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:45:5\n+  --> $DIR/non-defaulted-item-fail.rs:46:5\n    |\n LL | impl<T> Foo for Vec<T> {}\n    | ------------------------- parent `impl` is here\n@@ -55,7 +64,7 @@ LL |     type Ty = Vec<()>;\n    = note: to specialize, `Ty` in the parent `impl` must be marked `default`\n \n error[E0520]: `CONST` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:47:5\n+  --> $DIR/non-defaulted-item-fail.rs:48:5\n    |\n LL | impl<T> Foo for Vec<T> {}\n    | ------------------------- parent `impl` is here\n@@ -66,7 +75,7 @@ LL |     const CONST: u8 = 42;\n    = note: to specialize, `CONST` in the parent `impl` must be marked `default`\n \n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/non-defaulted-item-fail.rs:49:5\n+  --> $DIR/non-defaulted-item-fail.rs:50:5\n    |\n LL | impl<T> Foo for Vec<T> {}\n    | ------------------------- parent `impl` is here\n@@ -76,6 +85,6 @@ LL |     fn foo(&self) -> bool { true }\n    |\n    = note: to specialize, `foo` in the parent `impl` must be marked `default`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0520`."}, {"sha": "5d67160eb96ad8f2114c424ee0f778fa535818f8", "filename": "src/test/ui/specialization/specialization-allowed-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -5,7 +5,7 @@\n \n // aux-build:go_trait.rs\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n extern crate go_trait;\n "}, {"sha": "7d087545725beb7b255c5bfa511110d55252769e", "filename": "src/test/ui/specialization/specialization-allowed-cross-crate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-allowed-cross-crate.rs:8:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "cbfcb4719f6a495e14ecd30121eaf1b11473fafa", "filename": "src/test/ui/specialization/specialization-assoc-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -2,7 +2,7 @@\n \n // Test that non-method associated functions can be specialized\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     fn mk() -> Self;"}, {"sha": "b12738604ea839c0811ace95c23fe87ee3abcb5e", "filename": "src/test/ui/specialization/specialization-assoc-fns.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-assoc-fns.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "721c934dbfab96cbb06b2a63cb0260c2db581cc0", "filename": "src/test/ui/specialization/specialization-basics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Tests a variety of basic specialization scenarios and method\n // dispatch for them."}, {"sha": "ad00cd81df13c976cf0703423dbb40a1fc9d831f", "filename": "src/test/ui/specialization/specialization-basics.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-basics.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4171505aa374c7d1066450bf9c73fb27789d08de", "filename": "src/test/ui/specialization/specialization-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -2,7 +2,7 @@\n \n // aux-build:specialization_cross_crate.rs\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n extern crate specialization_cross_crate;\n "}, {"sha": "7481eed796d966ad32b43bdcbbe2c4b2f092673c", "filename": "src/test/ui/specialization/specialization-cross-crate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-cross-crate.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "dcf68afa945bf2ff83408a44447e61e702c5aca5", "filename": "src/test/ui/specialization/specialization-default-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Test that default methods are cascaded correctly\n "}, {"sha": "4fa19adad066e8bba150bc7a10156ab18c90d9e8", "filename": "src/test/ui/specialization/specialization-default-methods.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-default-methods.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "7f3ae951287ca3daf1aab119c55a6b2409497764", "filename": "src/test/ui/specialization/specialization-default-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Make sure we can't project defaulted associated types\n "}, {"sha": "456eb6d5ca553b446a0fb1a7cf85fa366ce305d8", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-default-projection.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0308]: mismatched types\n   --> $DIR/specialization-default-projection.rs:21:5\n    |\n@@ -28,6 +37,6 @@ LL |     generic::<()>()\n    = help: consider constraining the associated type `<() as Foo>::Assoc` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "346471f11e4a8d5c7c34ecac81502da8d70392a2", "filename": "src/test/ui/specialization/specialization-default-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -2,7 +2,7 @@\n // associated type in the impl defining it -- otherwise, what happens\n // if it's overridden?\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Example {\n     type Output;"}, {"sha": "5e0221f07882ec994ff9a2f94eaff8d6c62b7ef2", "filename": "src/test/ui/specialization/specialization-default-types.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-default-types.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0308]: mismatched types\n   --> $DIR/specialization-default-types.rs:15:9\n    |\n@@ -24,6 +33,6 @@ LL |     Example::generate(t)\n    = help: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "ae739b2358d5869074269f32e064e4a68e6c90fe", "filename": "src/test/ui/specialization/specialization-no-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Check a number of scenarios in which one impl tries to override another,\n // without correctly using `default`."}, {"sha": "bb8b2a6c98e09f4ef997abd47b090bf65213f082", "filename": "src/test/ui/specialization/specialization-no-default.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-no-default.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n   --> $DIR/specialization-no-default.rs:20:5\n    |\n@@ -65,6 +74,6 @@ LL |       default fn redundant(&self) {}\n    |\n    = note: to specialize, `redundant` in the parent `impl` must be marked `default`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0520`."}, {"sha": "be8dcc4232e7b7c96aad6fdf8866be7d4665c05a", "filename": "src/test/ui/specialization/specialization-on-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Ensure that specialization works for impls defined directly on a projection\n "}, {"sha": "d91668d10c5f3f7398a0a259337306797c1de9a9", "filename": "src/test/ui/specialization/specialization-on-projection.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-on-projection.rs:4:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "cb7563e2760c2d4cc1f0162571cc1ca8668f0bcb", "filename": "src/test/ui/specialization/specialization-out-of-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -2,7 +2,7 @@\n \n // Test that you can list the more specific impl before the more general one.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo {\n     type Out;"}, {"sha": "a17f9f11a3f31d815f9a5fe678d75b168c33cd06", "filename": "src/test/ui/specialization/specialization-out-of-order.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-out-of-order.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "550d37082953990ee21f23d69f4fba62f5ff9fa6", "filename": "src/test/ui/specialization/specialization-overlap-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,5 +1,5 @@\n #![feature(negative_impls)]\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait MyTrait {}\n "}, {"sha": "6141174ba8c03c084ac83c92c8b73db3202e312d", "filename": "src/test/ui/specialization/specialization-overlap-negative.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-overlap-negative.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0751]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n   --> $DIR/specialization-overlap-negative.rs:9:1\n    |\n@@ -6,6 +15,6 @@ LL | unsafe impl<T: Clone> Send for TestType<T> {}\n LL | impl<T: MyTrait> !Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0751`."}, {"sha": "b07efb2a5c1cdd631c3d664f70e83f31a1383f36", "filename": "src/test/ui/specialization/specialization-overlap-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -4,7 +4,7 @@\n // projections involve specialization, so long as the associated type is\n // provided by the most specialized impl.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Assoc {\n     type Output;"}, {"sha": "6f1a594bacb3af550d3d84181f783aed35bb7122", "filename": "src/test/ui/specialization/specialization-overlap-projection.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-overlap-projection.rs:7:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "6bee22ceb8b645a2c923941cc2fe09b1edbb478a", "filename": "src/test/ui/specialization/specialization-overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Foo { fn foo() {} }\n impl<T: Clone> Foo for T {}"}, {"sha": "cf0f186a18337be7e57c8f6239316f36cb9bb69d", "filename": "src/test/ui/specialization/specialization-overlap.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-overlap.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0119]: conflicting implementations of trait `Foo` for type `std::vec::Vec<_>`:\n   --> $DIR/specialization-overlap.rs:5:1\n    |\n@@ -30,6 +39,6 @@ LL | impl<T: Clone> Qux for T {}\n LL | impl<T: Eq> Qux for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "17897d8b803d9a967ed33c674e93e7f9a172dd53", "filename": "src/test/ui/specialization/specialization-polarity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(optin_builtin_traits)]\n #![feature(negative_impls)]\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n auto trait Foo {}\n "}, {"sha": "c44af22b8e63b8092722cf34cfda7362466d37b7", "filename": "src/test/ui/specialization/specialization-polarity.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-polarity.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0751]: found both positive and negative implementation of trait `Foo` for type `u8`:\n   --> $DIR/specialization-polarity.rs:10:1\n    |\n@@ -14,6 +23,6 @@ LL | impl<T> !Bar for T {}\n LL | impl Bar for u8 {}\n    | ^^^^^^^^^^^^^^^ positive implementation here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0751`."}, {"sha": "f1f0b47bb65036e223f36029b2184e1196a5b120", "filename": "src/test/ui/specialization/specialization-projection-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Regression test for ICE when combining specialized associated types and type\n // aliases"}, {"sha": "0c3659a8f7a06a5542d3da9ec901b606e283fd86", "filename": "src/test/ui/specialization/specialization-projection-alias.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-projection-alias.rs:5:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "700975e3b828f3e1ab739360f9610e67569ac584", "filename": "src/test/ui/specialization/specialization-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Make sure we *can* project non-defaulted associated types\n // cf compile-fail/specialization-default-projection.rs"}, {"sha": "c5c86f5108e6e5dada1da6beae7681dfe7fb5c50", "filename": "src/test/ui/specialization/specialization-projection.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-projection.rs:4:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "fb85d8019218a7b551f15661cfc788538584ab01", "filename": "src/test/ui/specialization/specialization-super-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n // Test that you can specialize via an explicit trait hierarchy\n "}, {"sha": "05bdfd40136a45539e2adc7342c88d87c352b58c", "filename": "src/test/ui/specialization/specialization-super-traits.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-super-traits.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "5c2781a9c63a6eb4267ed4bb53f5d0dfb874f1ac", "filename": "src/test/ui/specialization/specialization-translate-projections-with-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Iterator {\n     fn next(&self);"}, {"sha": "6284dd8f3f7d79eff9d03f333005b9699306384d", "filename": "src/test/ui/specialization/specialization-translate-projections-with-lifetimes.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-translate-projections-with-lifetimes.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "62d63590a6688e238923122058c70780eee462b4", "filename": "src/test/ui/specialization/specialization-translate-projections-with-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -4,7 +4,7 @@\n // type parameters *and* rely on projections, and the type parameters are input\n // types on the trait.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Trait<T> {\n     fn convert(&self) -> T;"}, {"sha": "b17794173c5707b6865197fe99834a919b9c1f01", "filename": "src/test/ui/specialization/specialization-translate-projections-with-params.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-translate-projections-with-params.rs:7:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "92ea9e2b85d3256830ed2a384350a743e1f7c549", "filename": "src/test/ui/specialization/specialization-translate-projections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -3,7 +3,7 @@\n // Ensure that provided items are inherited properly even when impls vary in\n // type parameters *and* rely on projections.\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n use std::convert::Into;\n "}, {"sha": "fbb28e606408842dc87f74bf70f9156af9f2390f", "filename": "src/test/ui/specialization/specialization-translate-projections.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-translate-projections.rs:6:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "c68bca432fa8667e7b5777dacc4959284f44b719", "filename": "src/test/ui/traits/negative-impls/negative-default-impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,5 +1,6 @@\n #![feature(negative_impls)]\n #![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n \n trait MyTrait {\n     type Foo;"}, {"sha": "50e74373b53bbd4c867a8fd16aa49e47123ea5c5", "filename": "src/test/ui/traits/negative-impls/negative-default-impls.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,9 +1,18 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/negative-default-impls.rs:2:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0750]: negative impls cannot be default impls\n-  --> $DIR/negative-default-impls.rs:8:1\n+  --> $DIR/negative-default-impls.rs:9:1\n    |\n LL | default impl !MyTrait for u32 {}\n    | ^^^^^^^      ^\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0750`."}, {"sha": "35297ab124ed06f44381764f7ca535ac608bd1fd", "filename": "src/test/ui/traits/negative-impls/negative-specializes-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n #![feature(negative_impls)]\n \n // Test a negative impl that \"specializes\" another negative impl."}, {"sha": "8b536de378630094f892e16751257046dd556378", "filename": "src/test/ui/traits/negative-impls/negative-specializes-negative.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/negative-specializes-negative.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4281eedaf631c9173ac175c84d5d44cfd04486eb", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n #![feature(negative_impls)]\n \n // Negative impl for u32 cannot \"specialize\" the base impl."}, {"sha": "89ef15e89ac96a177a06ddff4ea54b3c835ec453", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/negative-specializes-positive-item.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive-item.rs:11:1\n    |\n@@ -7,6 +16,6 @@ LL | impl<T> MyTrait for T {\n LL | impl !MyTrait for u32 {}\n    | ^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0751`."}, {"sha": "0e227691e0404e20186f2627ab651ba055215b6f", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n #![feature(negative_impls)]\n \n // Negative impl for u32 cannot \"specialize\" the base impl."}, {"sha": "e45d5a251ab263b0bcad9c2b255718b45a4d310d", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/negative-specializes-positive.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive.rs:7:1\n    |\n@@ -6,6 +15,6 @@ LL | impl<T> MyTrait for T {}\n LL | impl !MyTrait for u32 {}\n    | ^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0751`."}, {"sha": "a06b357654068b2604fca2540ff841b3a7e38f74", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,4 +1,4 @@\n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n #![feature(negative_impls)]\n \n trait MyTrait {}"}, {"sha": "49c16d474040e81102a085d941e5cbb25b382230", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/positive-specializes-negative.rs:1:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/positive-specializes-negative.rs:7:1\n    |\n@@ -6,6 +15,6 @@ LL | impl<T> !MyTrait for T {}\n LL | impl MyTrait for u32 {}\n    | ^^^^^^^^^^^^^^^^^^^^ positive implementation here\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0751`."}, {"sha": "499334d983b1f1b38965c06be88b0cca8dac5279", "filename": "src/test/ui/transmute-specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftransmute-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftransmute-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute-specialization.rs?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(specialization)]\n+#![feature(specialization)] //~ WARN the feature `specialization` is incomplete\n \n trait Specializable { type Output; }\n "}, {"sha": "02315051d30ec103e670f48dcfc5735f12ed7fdd", "filename": "src/test/ui/transmute-specialization.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftransmute-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203305d09566e2924f893ed94845253da199eeab/src%2Ftest%2Fui%2Ftransmute-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute-specialization.stderr?ref=203305d09566e2924f893ed94845253da199eeab", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/transmute-specialization.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+\n+warning: 1 warning emitted\n+"}]}