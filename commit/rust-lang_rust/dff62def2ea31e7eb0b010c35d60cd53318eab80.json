{"sha": "dff62def2ea31e7eb0b010c35d60cd53318eab80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZjYyZGVmMmVhMzFlN2ViMGIwMTBjMzVkNjBjZDUzMzE4ZWFiODA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-24T10:40:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-24T10:40:47Z"}, "message": "Merge #5023\n\n5023: Fix string literal inference in match r=flodiebold a=lnicola\n\nFixes #5020 \r\n\r\nr? @flodiebold \n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "b38e0574c56bfbad6459a9e1355c89cae7830d11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b38e0574c56bfbad6459a9e1355c89cae7830d11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dff62def2ea31e7eb0b010c35d60cd53318eab80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8y2vCRBK7hj4Ov3rIwAAdHIIAKfaLSwBh2vNjR9VMNgvsAgU\nEt2sMcW95VtOuHnqU+MjJ7FamgNy757iv5zIOgNCetUbj5nM94dT3Xc/ncuUYwKI\nWN71acy5PN9iqWTMNlbyskeXVfYSdIJU+UY1Ys/blRoMAQoxKd6rp/9d256qEKbv\nOFk0foyY9E5bpsiGOUeJd6+B49zX1QieyBzUtm3G9ZFIhnQv9rWHBb2GO+YOR5Dz\nWakUyb7TkZhl0p9RTmqhtBM1yadA/dCK0GPJqiC6ega5oG4iHnspm8SjrvKfUd0a\nilkTn7E/jlL2LNMG63ZyU8xmwvE/j1r4o6mruO7RWq10CoUe98ZnGJ8dp9rwphA=\n=pwZ5\n-----END PGP SIGNATURE-----\n", "payload": "tree b38e0574c56bfbad6459a9e1355c89cae7830d11\nparent 414b731e7d3ae4d7b939744a83c2530d4836ae05\nparent 2bd9f0f0205e03f95ab83e8f579742618b97a609\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592995247 +0000\ncommitter GitHub <noreply@github.com> 1592995247 +0000\n\nMerge #5023\n\n5023: Fix string literal inference in match r=flodiebold a=lnicola\n\nFixes #5020 \r\n\r\nr? @flodiebold \n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dff62def2ea31e7eb0b010c35d60cd53318eab80", "html_url": "https://github.com/rust-lang/rust/commit/dff62def2ea31e7eb0b010c35d60cd53318eab80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dff62def2ea31e7eb0b010c35d60cd53318eab80/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "414b731e7d3ae4d7b939744a83c2530d4836ae05", "url": "https://api.github.com/repos/rust-lang/rust/commits/414b731e7d3ae4d7b939744a83c2530d4836ae05", "html_url": "https://github.com/rust-lang/rust/commit/414b731e7d3ae4d7b939744a83c2530d4836ae05"}, {"sha": "2bd9f0f0205e03f95ab83e8f579742618b97a609", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd9f0f0205e03f95ab83e8f579742618b97a609", "html_url": "https://github.com/rust-lang/rust/commit/2bd9f0f0205e03f95ab83e8f579742618b97a609"}], "stats": {"total": 90, "additions": 77, "deletions": 13}, "files": [{"sha": "23de2bd6b06eca86ce91f8e6d3f22c71cf9ef3a1", "filename": "crates/ra_hir_ty/src/infer/pat.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dff62def2ea31e7eb0b010c35d60cd53318eab80/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff62def2ea31e7eb0b010c35d60cd53318eab80/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=dff62def2ea31e7eb0b010c35d60cd53318eab80", "patch": "@@ -4,7 +4,7 @@ use std::iter::repeat;\n use std::sync::Arc;\n \n use hir_def::{\n-    expr::{BindingAnnotation, Pat, PatId, RecordFieldPat},\n+    expr::{BindingAnnotation, Expr, Literal, Pat, PatId, RecordFieldPat},\n     path::Path,\n     type_ref::Mutability,\n     FieldId,\n@@ -90,18 +90,7 @@ impl<'a> InferenceContext<'a> {\n     ) -> Ty {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n \n-        let is_non_ref_pat = match &body[pat] {\n-            Pat::Tuple { .. }\n-            | Pat::Or(..)\n-            | Pat::TupleStruct { .. }\n-            | Pat::Record { .. }\n-            | Pat::Range { .. }\n-            | Pat::Slice { .. } => true,\n-            // FIXME: Path/Lit might actually evaluate to ref, but inference is unimplemented.\n-            Pat::Path(..) | Pat::Lit(..) => true,\n-            Pat::Wild | Pat::Bind { .. } | Pat::Ref { .. } | Pat::Missing => false,\n-        };\n-        if is_non_ref_pat {\n+        if is_non_ref_pat(&body, pat) {\n             while let Some((inner, mutability)) = expected.as_reference() {\n                 expected = inner;\n                 default_bm = match default_bm {\n@@ -227,3 +216,21 @@ impl<'a> InferenceContext<'a> {\n         ty\n     }\n }\n+\n+fn is_non_ref_pat(body: &hir_def::body::Body, pat: PatId) -> bool {\n+    match &body[pat] {\n+        Pat::Tuple { .. }\n+        | Pat::TupleStruct { .. }\n+        | Pat::Record { .. }\n+        | Pat::Range { .. }\n+        | Pat::Slice { .. } => true,\n+        Pat::Or(pats) => pats.iter().all(|p| is_non_ref_pat(body, *p)),\n+        // FIXME: Path/Lit might actually evaluate to ref, but inference is unimplemented.\n+        Pat::Path(..) => true,\n+        Pat::Lit(expr) => match body[*expr] {\n+            Expr::Literal(Literal::String(..)) => false,\n+            _ => true,\n+        },\n+        Pat::Wild | Pat::Bind { .. } | Pat::Ref { .. } | Pat::Missing => false,\n+    }\n+}"}, {"sha": "e5ef241caefcd2ed92cd5c540267d3453dd5743f", "filename": "crates/ra_hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/dff62def2ea31e7eb0b010c35d60cd53318eab80/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff62def2ea31e7eb0b010c35d60cd53318eab80/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=dff62def2ea31e7eb0b010c35d60cd53318eab80", "patch": "@@ -270,6 +270,63 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_pattern_match_string_literal() {\n+    assert_snapshot!(\n+        infer_with_mismatches(r#\"\n+fn test() {\n+    let s: &str = \"hello\";\n+    match s {\n+        \"hello\" => {}\n+        _ => {}\n+    }\n+}\n+\"#, true),\n+    @r###\"\n+    10..98 '{     ...   } }': ()\n+    20..21 's': &str\n+    30..37 '\"hello\"': &str\n+    43..96 'match ...     }': ()\n+    49..50 's': &str\n+    61..68 '\"hello\"': &str\n+    61..68 '\"hello\"': &str\n+    72..74 '{}': ()\n+    83..84 '_': &str\n+    88..90 '{}': ()\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn infer_pattern_match_or() {\n+    assert_snapshot!(\n+        infer_with_mismatches(r#\"\n+fn test() {\n+    let s: &str = \"hello\";\n+    match s {\n+        \"hello\" | \"world\" => {}\n+        _ => {}\n+    }\n+}\n+\"#, true),\n+    @r###\"\n+    10..108 '{     ...   } }': ()\n+    20..21 's': &str\n+    30..37 '\"hello\"': &str\n+    43..106 'match ...     }': ()\n+    49..50 's': &str\n+    61..68 '\"hello\"': &str\n+    61..68 '\"hello\"': &str\n+    61..78 '\"hello...world\"': &str\n+    71..78 '\"world\"': &str\n+    71..78 '\"world\"': &str\n+    82..84 '{}': ()\n+    93..94 '_': &str\n+    98..100 '{}': ()\n+    \"###\n+    );\n+}\n+\n #[test]\n fn infer_pattern_match_arr() {\n     assert_snapshot!("}]}