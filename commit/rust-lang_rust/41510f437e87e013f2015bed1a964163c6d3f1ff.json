{"sha": "41510f437e87e013f2015bed1a964163c6d3f1ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNTEwZjQzN2U4N2UwMTNmMjAxNWJlZDFhOTY0MTYzYzZkM2YxZmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-17T15:37:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-17T15:37:06Z"}, "message": "minor: adjust config name", "tree": {"sha": "ead7add1ada64dfad8e819a32a5ea4ffa8c0cd60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ead7add1ada64dfad8e819a32a5ea4ffa8c0cd60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41510f437e87e013f2015bed1a964163c6d3f1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41510f437e87e013f2015bed1a964163c6d3f1ff", "html_url": "https://github.com/rust-lang/rust/commit/41510f437e87e013f2015bed1a964163c6d3f1ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41510f437e87e013f2015bed1a964163c6d3f1ff/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "html_url": "https://github.com/rust-lang/rust/commit/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135"}], "stats": {"total": 115, "additions": 41, "deletions": 74}, "files": [{"sha": "a3866c1baf7c1848f2a364627e2e789827f663fd", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41510f437e87e013f2015bed1a964163c6d3f1ff/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41510f437e87e013f2015bed1a964163c6d3f1ff/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=41510f437e87e013f2015bed1a964163c6d3f1ff", "patch": "@@ -124,6 +124,13 @@ config_data! {\n         /// These directories will be ignored by rust-analyzer.\n         files_excludeDirs: Vec<PathBuf> = \"[]\",\n \n+        /// Use semantic tokens for strings.\n+        ///\n+        /// In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n+        /// By disabling semantic tokens for strings, other grammars can be used to highlight\n+        /// their contents.\n+        highlighting_strings: bool = \"true\",\n+\n         /// Whether to show `Debug` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n         hoverActions_debug: bool           = \"true\",\n@@ -208,13 +215,6 @@ config_data! {\n         /// Advanced option, fully override the command rust-analyzer uses for\n         /// formatting.\n         rustfmt_overrideCommand: Option<Vec<String>> = \"null\",\n-\n-        /// Use semantic tokens for strings.\n-        ///\n-        /// In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n-        /// By disabling semantic tokens for strings, other grammars can be used to highlight\n-        /// their contents.\n-        semanticStringTokens: bool = \"true\",\n     }\n }\n \n@@ -388,9 +388,6 @@ impl Config {\n     pub fn line_folding_only(&self) -> bool {\n         try_or!(self.caps.text_document.as_ref()?.folding_range.as_ref()?.line_folding_only?, false)\n     }\n-    pub fn semantic_strings(&self) -> bool {\n-        self.data.semanticStringTokens\n-    }\n     pub fn hierarchical_symbols(&self) -> bool {\n         try_or!(\n             self.caps\n@@ -665,6 +662,9 @@ impl Config {\n             refs: self.data.lens_enable && self.data.lens_references,\n         }\n     }\n+    pub fn highlighting_strings(&self) -> bool {\n+        self.data.highlighting_strings\n+    }\n     pub fn hover(&self) -> HoverConfig {\n         HoverConfig {\n             implementations: self.data.hoverActions_enable"}, {"sha": "8fe97fd7c35ebc69efd9e5b94876048884f660dd", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41510f437e87e013f2015bed1a964163c6d3f1ff/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41510f437e87e013f2015bed1a964163c6d3f1ff/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=41510f437e87e013f2015bed1a964163c6d3f1ff", "patch": "@@ -1394,9 +1394,9 @@ pub(crate) fn handle_semantic_tokens_full(\n     let line_index = snap.file_line_index(file_id)?;\n \n     let highlights = snap.analysis.highlight(file_id)?;\n-    let semantic_strings = snap.config.semantic_strings();\n+    let highlight_strings = snap.config.highlighting_strings();\n     let semantic_tokens =\n-        to_proto::semantic_tokens(&text, &line_index, highlights, semantic_strings);\n+        to_proto::semantic_tokens(&text, &line_index, highlights, highlight_strings);\n \n     // Unconditionally cache the tokens\n     snap.semantic_tokens_cache.lock().insert(params.text_document.uri, semantic_tokens.clone());\n@@ -1415,9 +1415,9 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n     let line_index = snap.file_line_index(file_id)?;\n \n     let highlights = snap.analysis.highlight(file_id)?;\n-    let semantic_strings = snap.config.semantic_strings();\n+    let highlight_strings = snap.config.highlighting_strings();\n     let semantic_tokens =\n-        to_proto::semantic_tokens(&text, &line_index, highlights, semantic_strings);\n+        to_proto::semantic_tokens(&text, &line_index, highlights, highlight_strings);\n \n     let mut cache = snap.semantic_tokens_cache.lock();\n     let cached_tokens = cache.entry(params.text_document.uri).or_default();\n@@ -1446,9 +1446,9 @@ pub(crate) fn handle_semantic_tokens_range(\n     let line_index = snap.file_line_index(frange.file_id)?;\n \n     let highlights = snap.analysis.highlight_range(frange)?;\n-    let semantic_strings = snap.config.semantic_strings();\n+    let highlight_strings = snap.config.highlighting_strings();\n     let semantic_tokens =\n-        to_proto::semantic_tokens(&text, &line_index, highlights, semantic_strings);\n+        to_proto::semantic_tokens(&text, &line_index, highlights, highlight_strings);\n     Ok(Some(semantic_tokens.into()))\n }\n "}, {"sha": "4fd576adbb78a20a22eafa4b53f81980c85be8f4", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41510f437e87e013f2015bed1a964163c6d3f1ff/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41510f437e87e013f2015bed1a964163c6d3f1ff/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=41510f437e87e013f2015bed1a964163c6d3f1ff", "patch": "@@ -184,8 +184,8 @@ pub(crate) fn diff_tokens(old: &[SemanticToken], new: &[SemanticToken]) -> Vec<S\n     }\n }\n \n-pub(crate) fn type_index(type_: SemanticTokenType) -> u32 {\n-    SUPPORTED_TYPES.iter().position(|it| *it == type_).unwrap() as u32\n+pub(crate) fn type_index(ty: SemanticTokenType) -> u32 {\n+    SUPPORTED_TYPES.iter().position(|it| *it == ty).unwrap() as u32\n }\n \n #[cfg(test)]"}, {"sha": "9dec46c78955bf17ee65bc2f8a39d1c913028bfe", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41510f437e87e013f2015bed1a964163c6d3f1ff/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41510f437e87e013f2015bed1a964163c6d3f1ff/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=41510f437e87e013f2015bed1a964163c6d3f1ff", "patch": "@@ -381,7 +381,7 @@ pub(crate) fn semantic_tokens(\n     text: &str,\n     line_index: &LineIndex,\n     highlights: Vec<HlRange>,\n-    include_strings: bool,\n+    highlight_strings: bool,\n ) -> lsp_types::SemanticTokens {\n     let id = TOKEN_RESULT_COUNTER.fetch_add(1, Ordering::SeqCst).to_string();\n     let mut builder = semantic_tokens::SemanticTokensBuilder::new(id);\n@@ -390,11 +390,11 @@ pub(crate) fn semantic_tokens(\n         if highlight_range.highlight.is_empty() {\n             continue;\n         }\n-        let (typ, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n-        if !include_strings && typ == lsp_types::SemanticTokenType::STRING {\n+        let (ty, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n+        if !highlight_strings && ty == lsp_types::SemanticTokenType::STRING {\n             continue;\n         }\n-        let token_index = semantic_tokens::type_index(typ);\n+        let token_index = semantic_tokens::type_index(ty);\n         let modifier_bitset = mods.0;\n \n         for mut text_range in line_index.index.lines(highlight_range.range) {"}, {"sha": "c940ef2144537a2b0ddb2dfb6dc68853c4c3fb02", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/41510f437e87e013f2015bed1a964163c6d3f1ff/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41510f437e87e013f2015bed1a964163c6d3f1ff/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=41510f437e87e013f2015bed1a964163c6d3f1ff", "patch": "@@ -38,40 +38,6 @@ use crate::{\n const PROFILE: &str = \"\";\n // const PROFILE: &'static str = \"*@3>100\";\n \n-#[test]\n-fn can_disable_semantic_strings() {\n-    if skip_slow_tests() {\n-        return;\n-    }\n-\n-    [true, false].iter().for_each(|semantic_strings| {\n-        let server = Project::with_fixture(\n-            r#\"\n-//- /Cargo.toml\n-[package]\n-name = \"foo\"\n-version = \"0.0.0\"\n-\n-//- /src/lib.rs\n-const foo: &'static str = \"hi\";\n-\"#,\n-        )\n-        .with_config(serde_json::json!({ \"semanticStringTokens\": semantic_strings }))\n-        .server()\n-        .wait_until_workspace_is_loaded();\n-\n-        let res = server.send_request::<SemanticTokensRangeRequest>(SemanticTokensRangeParams {\n-            text_document: server.doc_id(\"src/lib.rs\"),\n-            partial_result_params: PartialResultParams::default(),\n-            work_done_progress_params: WorkDoneProgressParams::default(),\n-            range: Range::new(Position::new(0, 26), Position::new(0, 30)),\n-        });\n-\n-        let tok_res: SemanticTokens = from_value(res).expect(\"invalid server response\");\n-        assert!(tok_res.data.len() == *semantic_strings as usize);\n-    });\n-}\n-\n #[test]\n fn completes_items_from_standard_library() {\n     if skip_slow_tests() {"}, {"sha": "96dd684b32cca595784f5ec01ff667ab9ab92364", "filename": "docs/dev/style.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41510f437e87e013f2015bed1a964163c6d3f1ff/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/41510f437e87e013f2015bed1a964163c6d3f1ff/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=41510f437e87e013f2015bed1a964163c6d3f1ff", "patch": "@@ -791,13 +791,14 @@ Many names in rust-analyzer conflict with keywords.\n We use mangled names instead of `r#ident` syntax:\n \n ```\n-struct -> strukt\n crate  -> krate\n-impl   -> imp\n-trait  -> trait_\n-fn     -> func\n enum   -> enum_\n+fn     -> func\n+impl   -> imp\n mod    -> module\n+struct -> strukt\n+trait  -> trait_\n+type   -> ty\n ```\n \n **Rationale:** consistency."}, {"sha": "feba43ff15ca6552e91c74c3bc9b5f67b7600090", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/41510f437e87e013f2015bed1a964163c6d3f1ff/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/41510f437e87e013f2015bed1a964163c6d3f1ff/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=41510f437e87e013f2015bed1a964163c6d3f1ff", "patch": "@@ -179,6 +179,15 @@ Controls file watching implementation.\n --\n These directories will be ignored by rust-analyzer.\n --\n+[[rust-analyzer.highlighting.strings]]rust-analyzer.highlighting.strings (default: `true`)::\n++\n+--\n+Use semantic tokens for strings.\n+\n+In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n+By disabling semantic tokens for strings, other grammars can be used to highlight\n+their contents.\n+--\n [[rust-analyzer.hoverActions.debug]]rust-analyzer.hoverActions.debug (default: `true`)::\n +\n --\n@@ -332,12 +341,3 @@ Additional arguments to `rustfmt`.\n Advanced option, fully override the command rust-analyzer uses for\n formatting.\n --\n-[[rust-analyzer.semanticStringTokens]]rust-analyzer.semanticStringTokens (default: `true`)::\n-+\n---\n-Use semantic tokens for strings.\n-\n-In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n-By disabling semantic tokens for strings, other grammars can be used to highlight\n-their contents.\n---"}, {"sha": "2e67b67755bec6b8cdbca3ecfc7ff2eaeaccb68b", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41510f437e87e013f2015bed1a964163c6d3f1ff/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/41510f437e87e013f2015bed1a964163c6d3f1ff/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=41510f437e87e013f2015bed1a964163c6d3f1ff", "patch": "@@ -613,6 +613,11 @@\n                         \"type\": \"string\"\n                     }\n                 },\n+                \"rust-analyzer.highlighting.strings\": {\n+                    \"markdownDescription\": \"Use semantic tokens for strings.\\n\\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\\nBy disabling semantic tokens for strings, other grammars can be used to highlight\\ntheir contents.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.hoverActions.debug\": {\n                     \"markdownDescription\": \"Whether to show `Debug` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": true,\n@@ -778,11 +783,6 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.semanticStringTokens\": {\n-                    \"markdownDescription\": \"Use semantic tokens for strings.\\n\\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\\nBy disabling semantic tokens for strings, other grammars can be used to highlight\\ntheir contents.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n                 \"$generated-end\": false\n             }\n         },"}]}