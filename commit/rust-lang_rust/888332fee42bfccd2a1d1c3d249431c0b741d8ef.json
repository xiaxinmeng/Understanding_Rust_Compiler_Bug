{"sha": "888332fee42bfccd2a1d1c3d249431c0b741d8ef", "node_id": "C_kwDOAAsO6NoAKDg4ODMzMmZlZTQyYmZjY2QyYTFkMWMzZDI0OTQzMWMwYjc0MWQ4ZWY", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-21T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-21T16:38:21Z"}, "message": "Reject unsupported naked functions\n\nTransition unsupported naked functions future incompatibility lint into\nan error:\n\n* Naked functions must contain a single inline assembly block.\n  Introduced as future incompatibility lint in 1.50 #79653.\n  Change into an error fixes a soundness issue described in #32489.\n\n* Naked functions must not use any forms of inline attribute.\n  Introduced as future incompatibility lint in 1.56 #87652.", "tree": {"sha": "20d62a5fb4d1ca2534200bd94a8315c402fef5bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20d62a5fb4d1ca2534200bd94a8315c402fef5bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/888332fee42bfccd2a1d1c3d249431c0b741d8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/888332fee42bfccd2a1d1c3d249431c0b741d8ef", "html_url": "https://github.com/rust-lang/rust/commit/888332fee42bfccd2a1d1c3d249431c0b741d8ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/888332fee42bfccd2a1d1c3d249431c0b741d8ef/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e918971d643c6a33067d5125214ab800ce5307", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e918971d643c6a33067d5125214ab800ce5307", "html_url": "https://github.com/rust-lang/rust/commit/84e918971d643c6a33067d5125214ab800ce5307"}], "stats": {"total": 453, "additions": 170, "deletions": 283}, "files": [{"sha": "d4b12d00f1ff6d8f231bccb6bf819fac9e563683", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/888332fee42bfccd2a1d1c3d249431c0b741d8ef/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888332fee42bfccd2a1d1c3d249431c0b741d8ef/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=888332fee42bfccd2a1d1c3d249431c0b741d8ef", "patch": "@@ -486,6 +486,7 @@ E0783: include_str!(\"./error_codes/E0783.md\"),\n E0784: include_str!(\"./error_codes/E0784.md\"),\n E0785: include_str!(\"./error_codes/E0785.md\"),\n E0786: include_str!(\"./error_codes/E0786.md\"),\n+E0787: include_str!(\"./error_codes/E0787.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "cee5082927026627abb0c67d2d596cb214ecf110", "filename": "compiler/rustc_error_codes/src/error_codes/E0787.md", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/888332fee42bfccd2a1d1c3d249431c0b741d8ef/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0787.md", "raw_url": "https://github.com/rust-lang/rust/raw/888332fee42bfccd2a1d1c3d249431c0b741d8ef/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0787.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0787.md?ref=888332fee42bfccd2a1d1c3d249431c0b741d8ef", "patch": "@@ -0,0 +1,28 @@\n+An unsupported naked function definition.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0787\n+#![feature(naked_functions)]\n+\n+#[naked]\n+pub extern \"C\" fn f() -> u32 {\n+    42\n+}\n+```\n+\n+The naked functions must be defined using a single inline assembly\n+block.\n+\n+The execution must never fall through past the end of the assembly\n+code so the block must use `noreturn` option. The asm block can also\n+use `att_syntax` and `raw` options, but others options are not allowed.\n+\n+The asm block must not contain any operands other than `const` and\n+`sym`.\n+\n+### Additional information\n+\n+For more information, please see [RFC 2972].\n+\n+[RFC 2972]: https://github.com/rust-lang/rfcs/blob/master/text/2972-constrained-naked.md"}, {"sha": "dde47c1e4c43b5ebca01ec1029df887a0ab46768", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/888332fee42bfccd2a1d1c3d249431c0b741d8ef/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888332fee42bfccd2a1d1c3d249431c0b741d8ef/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=888332fee42bfccd2a1d1c3d249431c0b741d8ef", "patch": "@@ -481,6 +481,11 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n          <https://github.com/rust-lang/rust/issues/59014> for more information\",\n     );\n     store.register_removed(\"plugin_as_library\", \"plugins have been deprecated and retired\");\n+    store.register_removed(\n+        \"unsupported_naked_functions\",\n+        \"converted into hard error, see RFC 2972 \\\n+         <https://github.com/rust-lang/rfcs/blob/master/text/2972-constrained-naked.md> for more information\",\n+    );\n }\n \n fn register_internals(store: &mut LintStore) {"}, {"sha": "4096815c6a42631b0a530c615400cebce0e87862", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/888332fee42bfccd2a1d1c3d249431c0b741d8ef/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888332fee42bfccd2a1d1c3d249431c0b741d8ef/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=888332fee42bfccd2a1d1c3d249431c0b741d8ef", "patch": "@@ -2759,52 +2759,6 @@ declare_lint! {\n     \"undefined naked function ABI\"\n }\n \n-declare_lint! {\n-    /// The `unsupported_naked_functions` lint detects naked function\n-    /// definitions that are unsupported but were previously accepted.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust\n-    /// #![feature(naked_functions)]\n-    ///\n-    /// #[naked]\n-    /// pub extern \"C\" fn f() -> u32 {\n-    ///     42\n-    /// }\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// The naked functions must be defined using a single inline assembly\n-    /// block.\n-    ///\n-    /// The execution must never fall through past the end of the assembly\n-    /// code so the block must use `noreturn` option. The asm block can also\n-    /// use `att_syntax` option, but other options are not allowed.\n-    ///\n-    /// The asm block must not contain any operands other than `const` and\n-    /// `sym`. Additionally, naked function should specify a non-Rust ABI.\n-    ///\n-    /// Naked functions cannot be inlined. All forms of the `inline` attribute\n-    /// are prohibited.\n-    ///\n-    /// While other definitions of naked functions were previously accepted,\n-    /// they are unsupported and might not work reliably. This is a\n-    /// [future-incompatible] lint that will transition into hard error in\n-    /// the future.\n-    ///\n-    /// [future-incompatible]: ../index.md#future-incompatible-lints\n-    pub UNSUPPORTED_NAKED_FUNCTIONS,\n-    Warn,\n-    \"unsupported naked function definitions\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #32408 <https://github.com/rust-lang/rust/issues/32408>\",\n-    };\n-}\n-\n declare_lint! {\n     /// The `ineffective_unstable_trait_impl` lint detects `#[unstable]` attributes which are not used.\n     ///\n@@ -3070,7 +3024,6 @@ declare_lint_pass! {\n         UNINHABITED_STATIC,\n         FUNCTION_ITEM_REFERENCES,\n         USELESS_DEPRECATED,\n-        UNSUPPORTED_NAKED_FUNCTIONS,\n         MISSING_ABI,\n         INVALID_DOC_ATTRIBUTES,\n         SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,"}, {"sha": "e4feb8f136c6f3630322519d2a317ded07f92137", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/888332fee42bfccd2a1d1c3d249431c0b741d8ef/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888332fee42bfccd2a1d1c3d249431c0b741d8ef/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=888332fee42bfccd2a1d1c3d249431c0b741d8ef", "patch": "@@ -1,14 +1,14 @@\n //! Checks validity of naked functions.\n \n use rustc_ast::{Attribute, InlineAsmOptions};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{FnKind, Visitor};\n use rustc_hir::{ExprKind, HirId, InlineAsmOperand, StmtKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::UNDEFINED_NAKED_FUNCTION_ABI;\n-use rustc_session::lint::builtin::UNSUPPORTED_NAKED_FUNCTIONS;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n@@ -64,18 +64,16 @@ impl<'tcx> Visitor<'tcx> for CheckNakedFunctions<'tcx> {\n             check_abi(self.tcx, hir_id, fn_header.abi, ident_span);\n             check_no_patterns(self.tcx, body.params);\n             check_no_parameters_use(self.tcx, body);\n-            check_asm(self.tcx, hir_id, body, span);\n-            check_inline(self.tcx, hir_id, attrs);\n+            check_asm(self.tcx, body, span);\n+            check_inline(self.tcx, attrs);\n         }\n     }\n }\n \n /// Check that the function isn't inlined.\n-fn check_inline(tcx: TyCtxt<'_>, hir_id: HirId, attrs: &[Attribute]) {\n+fn check_inline(tcx: TyCtxt<'_>, attrs: &[Attribute]) {\n     for attr in attrs.iter().filter(|attr| attr.has_name(sym::inline)) {\n-        tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, attr.span, |lint| {\n-            lint.build(\"naked functions cannot be inlined\").emit();\n-        });\n+        tcx.sess.struct_span_err(attr.span, \"naked functions cannot be inlined\").emit();\n     }\n }\n \n@@ -146,31 +144,31 @@ impl<'tcx> Visitor<'tcx> for CheckParameters<'tcx> {\n }\n \n /// Checks that function body contains a single inline assembly block.\n-fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId, body: &'tcx hir::Body<'tcx>, fn_span: Span) {\n+fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, body: &'tcx hir::Body<'tcx>, fn_span: Span) {\n     let mut this = CheckInlineAssembly { tcx, items: Vec::new() };\n     this.visit_body(body);\n     if let [(ItemKind::Asm, _)] = this.items[..] {\n         // Ok.\n     } else {\n-        tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, fn_span, |lint| {\n-            let mut diag = lint.build(\"naked functions must contain a single asm block\");\n-            let mut has_asm = false;\n-            for &(kind, span) in &this.items {\n-                match kind {\n-                    ItemKind::Asm if has_asm => {\n-                        diag.span_label(\n-                            span,\n-                            \"multiple asm blocks are unsupported in naked functions\",\n-                        );\n-                    }\n-                    ItemKind::Asm => has_asm = true,\n-                    ItemKind::NonAsm => {\n-                        diag.span_label(span, \"non-asm is unsupported in naked functions\");\n-                    }\n+        let mut diag = struct_span_err!(\n+            tcx.sess,\n+            fn_span,\n+            E0787,\n+            \"naked functions must contain a single asm block\"\n+        );\n+        let mut has_asm = false;\n+        for &(kind, span) in &this.items {\n+            match kind {\n+                ItemKind::Asm if has_asm => {\n+                    diag.span_label(span, \"multiple asm blocks are unsupported in naked functions\");\n+                }\n+                ItemKind::Asm => has_asm = true,\n+                ItemKind::NonAsm => {\n+                    diag.span_label(span, \"non-asm is unsupported in naked functions\");\n                 }\n             }\n-            diag.emit();\n-        });\n+        }\n+        diag.emit();\n     }\n }\n \n@@ -221,7 +219,7 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n \n             ExprKind::InlineAsm(ref asm) => {\n                 self.items.push((ItemKind::Asm, span));\n-                self.check_inline_asm(expr.hir_id, asm, span);\n+                self.check_inline_asm(asm, span);\n             }\n \n             ExprKind::DropTemps(..) | ExprKind::Block(..) | ExprKind::Err => {\n@@ -230,7 +228,7 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n         }\n     }\n \n-    fn check_inline_asm(&self, hir_id: HirId, asm: &'tcx hir::InlineAsm<'tcx>, span: Span) {\n+    fn check_inline_asm(&self, asm: &'tcx hir::InlineAsm<'tcx>, span: Span) {\n         let unsupported_operands: Vec<Span> = asm\n             .operands\n             .iter()\n@@ -243,15 +241,13 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n             })\n             .collect();\n         if !unsupported_operands.is_empty() {\n-            self.tcx.struct_span_lint_hir(\n-                UNSUPPORTED_NAKED_FUNCTIONS,\n-                hir_id,\n+            struct_span_err!(\n+                self.tcx.sess,\n                 unsupported_operands,\n-                |lint| {\n-                    lint.build(\"only `const` and `sym` operands are supported in naked functions\")\n-                        .emit();\n-                },\n-            );\n+                E0787,\n+                \"only `const` and `sym` operands are supported in naked functions\",\n+            )\n+            .emit();\n         }\n \n         let unsupported_options: Vec<&'static str> = [\n@@ -266,19 +262,24 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n         .collect();\n \n         if !unsupported_options.is_empty() {\n-            self.tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, span, |lint| {\n-                lint.build(&format!(\n-                    \"asm options unsupported in naked functions: {}\",\n-                    unsupported_options.join(\", \")\n-                ))\n-                .emit();\n-            });\n+            struct_span_err!(\n+                self.tcx.sess,\n+                span,\n+                E0787,\n+                \"asm options unsupported in naked functions: {}\",\n+                unsupported_options.join(\", \")\n+            )\n+            .emit();\n         }\n \n         if !asm.options.contains(InlineAsmOptions::NORETURN) {\n-            self.tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, span, |lint| {\n-                lint.build(\"asm in naked functions must use `noreturn` option\").emit();\n-            });\n+            struct_span_err!(\n+                self.tcx.sess,\n+                span,\n+                E0787,\n+                \"asm in naked functions must use `noreturn` option\"\n+            )\n+            .emit();\n         }\n     }\n }"}, {"sha": "51c7a0c615d00d321c39578ade27990b55d5879b", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/888332fee42bfccd2a1d1c3d249431c0b741d8ef/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888332fee42bfccd2a1d1c3d249431c0b741d8ef/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=888332fee42bfccd2a1d1c3d249431c0b741d8ef", "patch": "@@ -1,42 +1,32 @@\n // compile-flags: -C no-prepopulate-passes\n+// needs-asm-support\n+// only-x86_64\n \n #![crate_type = \"lib\"]\n #![feature(naked_functions)]\n+use std::arch::asm;\n \n // CHECK: Function Attrs: naked\n // CHECK-NEXT: define{{.*}}void @naked_empty()\n #[no_mangle]\n #[naked]\n-pub fn naked_empty() {\n+pub unsafe extern \"C\" fn naked_empty() {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: ret void\n+    // CHECK-NEXT: call void asm\n+    // CHECK-NEXT: unreachable\n+    asm!(\"ret\",\n+         options(noreturn));\n }\n \n // CHECK: Function Attrs: naked\n+// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_args_and_return(i64 %a, i64 %b)\n #[no_mangle]\n #[naked]\n-// CHECK-NEXT: define{{.*}}void @naked_with_args(i{{[0-9]+( %a)?}})\n-pub fn naked_with_args(a: isize) {\n+pub unsafe extern \"C\" fn naked_with_args_and_return(a: isize, b: isize) -> isize {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK: ret void\n-}\n-\n-// CHECK: Function Attrs: naked\n-// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_return()\n-#[no_mangle]\n-#[naked]\n-pub fn naked_with_return() -> isize {\n-    // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: ret i{{[0-9]+}} 0\n-    0\n-}\n-\n-// CHECK: Function Attrs: naked\n-// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+( %a)?}})\n-#[no_mangle]\n-#[naked]\n-pub fn naked_with_args_and_return(a: isize) -> isize {\n-    // CHECK-NEXT: {{.+}}:\n-    // CHECK: ret i{{[0-9]+}} 0\n-    0\n+    // CHECK-NEXT: call void asm\n+    // CHECK-NEXT: unreachable\n+    asm!(\"lea rax, [rdi + rsi]\",\n+         \"ret\",\n+         options(noreturn));\n }"}, {"sha": "13bc139ecd05a50039bf60ae7d62bafead9dd8c2", "filename": "src/test/codegen/naked-noinline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/888332fee42bfccd2a1d1c3d249431c0b741d8ef/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888332fee42bfccd2a1d1c3d249431c0b741d8ef/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs?ref=888332fee42bfccd2a1d1c3d249431c0b741d8ef", "patch": "@@ -7,7 +7,6 @@\n \n use std::arch::asm;\n \n-#[inline(always)]\n #[naked]\n #[no_mangle]\n pub unsafe extern \"C\" fn f() {"}, {"sha": "26397a65cf99a572950b9174b2a49e454a486b8e", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 21, "deletions": 42, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/888332fee42bfccd2a1d1c3d249431c0b741d8ef/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888332fee42bfccd2a1d1c3d249431c0b741d8ef/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=888332fee42bfccd2a1d1c3d249431c0b741d8ef", "patch": "@@ -32,8 +32,7 @@ pub unsafe extern \"C\" fn patterns(\n \n #[naked]\n pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n+    //~^ ERROR naked functions must contain a single asm block\n     a + 1\n     //~^ ERROR referencing function parameters is not allowed in naked functions\n }\n@@ -42,21 +41,18 @@ pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n pub unsafe extern \"C\" fn inc_asm(a: u32) -> u32 {\n     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n     //~^ ERROR referencing function parameters is not allowed in naked functions\n-    //~| WARN only `const` and `sym` operands are supported in naked functions\n-    //~| WARN this was previously accepted\n+    //~| ERROR only `const` and `sym` operands are supported in naked functions\n }\n \n #[naked]\n pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n+    //~^ ERROR naked functions must contain a single asm block\n     (|| a + 1)()\n }\n \n #[naked]\n pub unsafe extern \"C\" fn unsupported_operands() {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n+    //~^ ERROR naked functions must contain a single asm block\n     let mut a = 0usize;\n     let mut b = 0usize;\n     let mut c = 0usize;\n@@ -65,11 +61,9 @@ pub unsafe extern \"C\" fn unsupported_operands() {\n     const F: usize = 0usize;\n     static G: usize = 0usize;\n     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n-         //~^ WARN asm in naked functions must use `noreturn` option\n-         //~| WARN this was previously accepted\n+         //~^ ERROR asm in naked functions must use `noreturn` option\n          in(reg) a,\n-         //~^ WARN only `const` and `sym` operands are supported in naked functions\n-         //~| WARN this was previously accepted\n+         //~^ ERROR only `const` and `sym` operands are supported in naked functions\n          inlateout(reg) b,\n          inout(reg) c,\n          lateout(reg) d,\n@@ -81,31 +75,25 @@ pub unsafe extern \"C\" fn unsupported_operands() {\n \n #[naked]\n pub extern \"C\" fn missing_assembly() {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n+    //~^ ERROR naked functions must contain a single asm block\n }\n \n #[naked]\n pub extern \"C\" fn too_many_asm_blocks() {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n+    //~^ ERROR naked functions must contain a single asm block\n     asm!(\"\");\n-    //~^ WARN asm in naked functions must use `noreturn` option\n-    //~| WARN this was previously accepted\n+    //~^ ERROR asm in naked functions must use `noreturn` option\n     asm!(\"\");\n-    //~^ WARN asm in naked functions must use `noreturn` option\n-    //~| WARN this was previously accepted\n+    //~^ ERROR asm in naked functions must use `noreturn` option\n     asm!(\"\");\n-    //~^ WARN asm in naked functions must use `noreturn` option\n-    //~| WARN this was previously accepted\n+    //~^ ERROR asm in naked functions must use `noreturn` option\n     asm!(\"\", options(noreturn));\n }\n \n pub fn outer(x: u32) -> extern \"C\" fn(usize) -> usize {\n     #[naked]\n     pub extern \"C\" fn inner(y: usize) -> usize {\n-        //~^ WARN naked functions must contain a single asm block\n-        //~| WARN this was previously accepted\n+        //~^ ERROR naked functions must contain a single asm block\n         *&y\n         //~^ ERROR referencing function parameters is not allowed in naked functions\n     }\n@@ -115,18 +103,15 @@ pub fn outer(x: u32) -> extern \"C\" fn(usize) -> usize {\n #[naked]\n unsafe extern \"C\" fn invalid_options() {\n     asm!(\"\", options(nomem, preserves_flags, noreturn));\n-    //~^ WARN asm options unsupported in naked functions: `nomem`, `preserves_flags`\n-    //~| WARN this was previously accepted\n+    //~^ ERROR asm options unsupported in naked functions: `nomem`, `preserves_flags`\n }\n \n #[naked]\n unsafe extern \"C\" fn invalid_options_continued() {\n     asm!(\"\", options(readonly, nostack), options(pure));\n     //~^ ERROR asm with the `pure` option must have at least one output\n-    //~| WARN asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n-    //~| WARN this was previously accepted\n-    //~| WARN asm in naked functions must use `noreturn` option\n-    //~| WARN this was previously accepted\n+    //~| ERROR asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n+    //~| ERROR asm in naked functions must use `noreturn` option\n }\n \n #[naked]\n@@ -177,38 +162,32 @@ pub unsafe extern \"C\" fn inline_none() {\n \n #[naked]\n #[inline]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n pub unsafe extern \"C\" fn inline_hint() {\n     asm!(\"\", options(noreturn));\n }\n \n #[naked]\n #[inline(always)]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n pub unsafe extern \"C\" fn inline_always() {\n     asm!(\"\", options(noreturn));\n }\n \n #[naked]\n #[inline(never)]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n pub unsafe extern \"C\" fn inline_never() {\n     asm!(\"\", options(noreturn));\n }\n \n #[naked]\n #[inline]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n #[inline(always)]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n #[inline(never)]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n pub unsafe extern \"C\" fn inline_all() {\n     asm!(\"\", options(noreturn));\n }"}, {"sha": "153858fd982e131d81a45f296df0d3c6273663db", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 54, "deletions": 123, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/888332fee42bfccd2a1d1c3d249431c0b741d8ef/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/888332fee42bfccd2a1d1c3d249431c0b741d8ef/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=888332fee42bfccd2a1d1c3d249431c0b741d8ef", "patch": "@@ -1,5 +1,5 @@\n error: asm with the `pure` option must have at least one output\n-  --> $DIR/naked-functions.rs:124:14\n+  --> $DIR/naked-functions.rs:111:14\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n@@ -29,66 +29,54 @@ LL |     P { x, y }: P,\n    |     ^^^^^^^^^^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:37:5\n+  --> $DIR/naked-functions.rs:36:5\n    |\n LL |     a + 1\n    |     ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n-warning: naked functions must contain a single asm block\n+error[E0787]: naked functions must contain a single asm block\n   --> $DIR/naked-functions.rs:34:1\n    |\n LL | / pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n LL | |\n-LL | |\n LL | |     a + 1\n    | |     ----- non-asm is unsupported in naked functions\n LL | |\n LL | | }\n    | |_^\n-   |\n-   = note: `#[warn(unsupported_naked_functions)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:43:31\n+  --> $DIR/naked-functions.rs:42:31\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                               ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n-warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:43:23\n+error[E0787]: only `const` and `sym` operands are supported in naked functions\n+  --> $DIR/naked-functions.rs:42:23\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                       ^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:50:1\n+error[E0787]: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:48:1\n    |\n LL | / pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n LL | |\n-LL | |\n LL | |     (|| a + 1)()\n    | |     ------------ non-asm is unsupported in naked functions\n LL | | }\n    | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:70:10\n+error[E0787]: only `const` and `sym` operands are supported in naked functions\n+  --> $DIR/naked-functions.rs:65:10\n    |\n LL |          in(reg) a,\n    |          ^^^^^^^^^\n-...\n+LL |\n LL |          inlateout(reg) b,\n    |          ^^^^^^^^^^^^^^^^\n LL |          inout(reg) c,\n@@ -97,31 +85,24 @@ LL |          lateout(reg) d,\n    |          ^^^^^^^^^^^^^^\n LL |          out(reg) e,\n    |          ^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:67:5\n+error[E0787]: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:63:5\n    |\n LL | /     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n LL | |\n-LL | |\n LL | |          in(reg) a,\n+LL | |\n ...  |\n LL | |          sym G,\n LL | |     );\n    | |_____^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:57:1\n+error[E0787]: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:54:1\n    |\n LL | / pub unsafe extern \"C\" fn unsupported_operands() {\n LL | |\n-LL | |\n LL | |     let mut a = 0usize;\n    | |     ------------------- non-asm is unsupported in naked functions\n LL | |     let mut b = 0usize;\n@@ -136,188 +117,138 @@ LL | |     let mut e = 0usize;\n LL | |     );\n LL | | }\n    | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:83:1\n+error[E0787]: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:77:1\n    |\n LL | / pub extern \"C\" fn missing_assembly() {\n LL | |\n-LL | |\n LL | | }\n    | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:92:5\n+error[E0787]: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:84:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:95:5\n+error[E0787]: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:86:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:98:5\n+error[E0787]: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:88:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:89:1\n+error[E0787]: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:82:1\n    |\n LL | / pub extern \"C\" fn too_many_asm_blocks() {\n LL | |\n-LL | |\n LL | |     asm!(\"\");\n-...  |\n+LL | |\n LL | |     asm!(\"\");\n    | |     -------- multiple asm blocks are unsupported in naked functions\n-...  |\n+LL | |\n LL | |     asm!(\"\");\n    | |     -------- multiple asm blocks are unsupported in naked functions\n-...  |\n+LL | |\n LL | |     asm!(\"\", options(noreturn));\n    | |     --------------------------- multiple asm blocks are unsupported in naked functions\n LL | | }\n    | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:109:11\n+  --> $DIR/naked-functions.rs:97:11\n    |\n LL |         *&y\n    |           ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:106:5\n+error[E0787]: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:95:5\n    |\n LL | /     pub extern \"C\" fn inner(y: usize) -> usize {\n LL | |\n-LL | |\n LL | |         *&y\n    | |         --- non-asm is unsupported in naked functions\n LL | |\n LL | |     }\n    | |_____^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n-  --> $DIR/naked-functions.rs:117:5\n+error[E0787]: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n+  --> $DIR/naked-functions.rs:105:5\n    |\n LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n-  --> $DIR/naked-functions.rs:124:5\n+error[E0787]: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n+  --> $DIR/naked-functions.rs:111:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:124:5\n+error[E0787]: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:111:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:133:15\n+  --> $DIR/naked-functions.rs:118:15\n    |\n LL | pub unsafe fn default_abi() {\n    |               ^^^^^^^^^^^\n    |\n    = note: `#[warn(undefined_naked_function_abi)]` on by default\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:139:15\n+  --> $DIR/naked-functions.rs:124:15\n    |\n LL | pub unsafe fn rust_abi() {\n    |               ^^^^^^^^\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:179:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:164:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:187:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:171:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:195:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:178:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:203:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:185:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:206:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:187:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:209:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:189:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-error: aborting due to 8 previous errors; 23 warnings emitted\n+error: aborting due to 29 previous errors; 2 warnings emitted\n \n+For more information about this error, try `rustc --explain E0787`."}]}