{"sha": "565be31504bf12a9ac2562da7c3ce6d3165b6691", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NWJlMzE1MDRiZjEyYTlhYzI1NjJkYTdjM2NlNmQzMTY1YjY2OTE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-21T21:23:50Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-28T17:08:10Z"}, "message": "Require `allow_internal_unstable` in HIR const-checker", "tree": {"sha": "8ab36ad1353ade38074ed6d6090be1e02062db31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ab36ad1353ade38074ed6d6090be1e02062db31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/565be31504bf12a9ac2562da7c3ce6d3165b6691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/565be31504bf12a9ac2562da7c3ce6d3165b6691", "html_url": "https://github.com/rust-lang/rust/commit/565be31504bf12a9ac2562da7c3ce6d3165b6691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/565be31504bf12a9ac2562da7c3ce6d3165b6691/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69a5cb15925d4e547f7c91a9558a1ca6503dceda", "url": "https://api.github.com/repos/rust-lang/rust/commits/69a5cb15925d4e547f7c91a9558a1ca6503dceda", "html_url": "https://github.com/rust-lang/rust/commit/69a5cb15925d4e547f7c91a9558a1ca6503dceda"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "e3bb124e1e573bd24a56878aa3568d0ea83a4e6d", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 50, "deletions": 13, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/565be31504bf12a9ac2562da7c3ce6d3165b6691/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565be31504bf12a9ac2562da7c3ce6d3165b6691/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=565be31504bf12a9ac2562da7c3ce6d3165b6691", "patch": "@@ -7,6 +7,7 @@\n //! errors. We still look for those primitives in the MIR const-checker to ensure nothing slips\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n+use rustc_attr as attr;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -70,35 +71,63 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n struct CheckConstVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     const_kind: Option<hir::ConstContext>,\n+    def_id: Option<DefId>,\n }\n \n impl<'tcx> CheckConstVisitor<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> Self {\n-        CheckConstVisitor { tcx, const_kind: None }\n+        CheckConstVisitor { tcx, const_kind: None, def_id: None }\n     }\n \n     /// Emits an error when an unsupported expression is found in a const context.\n     fn const_check_violated(&self, expr: NonConstExpr, span: Span) {\n-        let features = self.tcx.features();\n+        let Self { tcx, def_id, const_kind } = *self;\n+\n+        let features = tcx.features();\n         let required_gates = expr.required_feature_gates();\n+\n+        let is_feature_allowed = |feature_gate| {\n+            // All features require that the corresponding gate be enabled,\n+            // even if the function has `#[allow_internal_unstable(the_gate)]`.\n+            if !tcx.features().enabled(feature_gate) {\n+                return false;\n+            }\n+\n+            // If `def_id` is `None`, we don't need to consider stability attributes.\n+            let def_id = match def_id {\n+                Some(x) => x,\n+                None => return true,\n+            };\n+\n+            // If this crate is not using stability attributes, or this function is not claiming to be a\n+            // stable `const fn`, that is all that is required.\n+            if !tcx.features().staged_api || tcx.has_attr(def_id, sym::rustc_const_unstable) {\n+                return true;\n+            }\n+\n+            // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n+            // opt-in via `allow_internal_unstable`.\n+            attr::allow_internal_unstable(&tcx.get_attrs(def_id), &tcx.sess.diagnostic())\n+                .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+        };\n+\n         match required_gates {\n             // Don't emit an error if the user has enabled the requisite feature gates.\n-            Some(gates) if gates.iter().all(|&g| features.enabled(g)) => return,\n+            Some(gates) if gates.iter().copied().all(is_feature_allowed) => return,\n \n             // `-Zunleash-the-miri-inside-of-you` only works for expressions that don't have a\n             // corresponding feature gate. This encourages nightly users to use feature gates when\n             // possible.\n-            None if self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you => {\n-                self.tcx.sess.span_warn(span, \"skipping const checks\");\n+            None if tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you => {\n+                tcx.sess.span_warn(span, \"skipping const checks\");\n                 return;\n             }\n \n             _ => {}\n         }\n \n-        let const_kind = self\n-            .const_kind\n-            .expect(\"`const_check_violated` may only be called inside a const context\");\n+        let const_kind =\n+            const_kind.expect(\"`const_check_violated` may only be called inside a const context\");\n \n         let msg = format!(\"{} is not allowed in a `{}`\", expr.name(), const_kind.keyword_name());\n \n@@ -107,10 +136,10 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             required_gates.iter().copied().filter(|&g| !features.enabled(g)).collect();\n \n         match missing_gates.as_slice() {\n-            &[] => struct_span_err!(self.tcx.sess, span, E0744, \"{}\", msg).emit(),\n+            &[] => struct_span_err!(tcx.sess, span, E0744, \"{}\", msg).emit(),\n \n             &[missing_primary, ref missing_secondary @ ..] => {\n-                let mut err = feature_err(&self.tcx.sess.parse_sess, missing_primary, span, &msg);\n+                let mut err = feature_err(&tcx.sess.parse_sess, missing_primary, span, &msg);\n \n                 // If multiple feature gates would be required to enable this expression, include\n                 // them as help messages. Don't emit a separate error for each missing feature gate.\n@@ -133,10 +162,18 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n     }\n \n     /// Saves the parent `const_kind` before calling `f` and restores it afterwards.\n-    fn recurse_into(&mut self, kind: Option<hir::ConstContext>, f: impl FnOnce(&mut Self)) {\n+    fn recurse_into(\n+        &mut self,\n+        kind: Option<hir::ConstContext>,\n+        def_id: Option<DefId>,\n+        f: impl FnOnce(&mut Self),\n+    ) {\n+        let parent_def_id = self.def_id;\n         let parent_kind = self.const_kind;\n+        self.def_id = def_id;\n         self.const_kind = kind;\n         f(self);\n+        self.def_id = parent_def_id;\n         self.const_kind = parent_kind;\n     }\n }\n@@ -150,13 +187,13 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n \n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {\n         let kind = Some(hir::ConstContext::Const);\n-        self.recurse_into(kind, |this| intravisit::walk_anon_const(this, anon));\n+        self.recurse_into(kind, None, |this| intravisit::walk_anon_const(this, anon));\n     }\n \n     fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n         let owner = self.tcx.hir().body_owner_def_id(body.id());\n         let kind = self.tcx.hir().body_const_context(owner);\n-        self.recurse_into(kind, |this| intravisit::walk_body(this, body));\n+        self.recurse_into(kind, Some(owner.to_def_id()), |this| intravisit::walk_body(this, body));\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {"}]}