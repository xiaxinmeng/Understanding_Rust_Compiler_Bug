{"sha": "5c69df93df2746d0bd97ec81c48668729568dcb9", "node_id": "C_kwDOAAsO6NoAKDVjNjlkZjkzZGYyNzQ2ZDBiZDk3ZWM4MWM0ODY2ODcyOTU2OGRjYjk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T11:17:30Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T11:17:30Z"}, "message": "Split remaining completion calls on the context kinds", "tree": {"sha": "7736bc4770a91dd458a65cab00359d1862481ba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7736bc4770a91dd458a65cab00359d1862481ba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c69df93df2746d0bd97ec81c48668729568dcb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c69df93df2746d0bd97ec81c48668729568dcb9", "html_url": "https://github.com/rust-lang/rust/commit/5c69df93df2746d0bd97ec81c48668729568dcb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c69df93df2746d0bd97ec81c48668729568dcb9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb9b36075272013984ac5d27128e87a714b90c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9b36075272013984ac5d27128e87a714b90c9a", "html_url": "https://github.com/rust-lang/rust/commit/eb9b36075272013984ac5d27128e87a714b90c9a"}], "stats": {"total": 248, "additions": 130, "deletions": 118}, "files": [{"sha": "505f5f1edffcdd29dd76377f8f386ff33078a95b", "filename": "crates/ide-completion/src/completions/field.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs?ref=5c69df93df2746d0bd97ec81c48668729568dcb9", "patch": "@@ -1,7 +1,7 @@\n //! Completion of field list position.\n \n use crate::{\n-    context::{NameContext, NameKind, PathCompletionCtx, PathKind, Qualified, TypeLocation},\n+    context::{PathCompletionCtx, PathKind, Qualified, TypeLocation},\n     CompletionContext, Completions,\n };\n \n@@ -30,17 +30,11 @@ pub(crate) fn complete_field_list_tuple_variant(\n     }\n }\n \n-pub(crate) fn complete_field_list_record_variant(\n-    acc: &mut Completions,\n-    ctx: &CompletionContext,\n-    name_ctx: &NameContext,\n-) {\n-    if let NameContext { kind: NameKind::RecordField, .. } = name_ctx {\n-        if ctx.qualifier_ctx.vis_node.is_none() {\n-            let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n-            add_keyword(\"pub(crate)\", \"pub(crate)\");\n-            add_keyword(\"pub(super)\", \"pub(super)\");\n-            add_keyword(\"pub\", \"pub\");\n-        }\n+pub(crate) fn complete_field_list_record_variant(acc: &mut Completions, ctx: &CompletionContext) {\n+    if ctx.qualifier_ctx.vis_node.is_none() {\n+        let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n+        add_keyword(\"pub(crate)\", \"pub(crate)\");\n+        add_keyword(\"pub(super)\", \"pub(super)\");\n+        add_keyword(\"pub\", \"pub\");\n     }\n }"}, {"sha": "83d78e1093b4dec40441e24ddfab64f764456954", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=5c69df93df2746d0bd97ec81c48668729568dcb9", "patch": "@@ -43,10 +43,7 @@ use syntax::{\n use text_edit::TextEdit;\n \n use crate::{\n-    context::{\n-        ItemListKind, NameContext, NameKind, NameRefContext, NameRefKind, PathCompletionCtx,\n-        PathKind,\n-    },\n+    context::{ItemListKind, PathCompletionCtx, PathKind},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n \n@@ -58,17 +55,36 @@ enum ImplCompletionKind {\n     Const,\n }\n \n-pub(crate) fn complete_trait_impl_name(\n+pub(crate) fn complete_trait_impl_const(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    NameContext { name, kind, .. }: &NameContext,\n+    name: &Option<ast::Name>,\n+) -> Option<()> {\n+    complete_trait_impl_name(acc, ctx, name, ImplCompletionKind::Const)\n+}\n+\n+pub(crate) fn complete_trait_impl_type_alias(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    name: &Option<ast::Name>,\n+) -> Option<()> {\n+    complete_trait_impl_name(acc, ctx, name, ImplCompletionKind::TypeAlias)\n+}\n+\n+pub(crate) fn complete_trait_impl_fn(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    name: &Option<ast::Name>,\n+) -> Option<()> {\n+    complete_trait_impl_name(acc, ctx, name, ImplCompletionKind::Fn)\n+}\n+\n+fn complete_trait_impl_name(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    name: &Option<ast::Name>,\n+    kind: ImplCompletionKind,\n ) -> Option<()> {\n-    let kind = match kind {\n-        NameKind::Const => ImplCompletionKind::Const,\n-        NameKind::Function => ImplCompletionKind::Fn,\n-        NameKind::TypeAlias => ImplCompletionKind::TypeAlias,\n-        _ => return None,\n-    };\n     let token = ctx.token.clone();\n     let item = match name {\n         Some(name) => name.syntax().parent(),\n@@ -89,23 +105,18 @@ pub(crate) fn complete_trait_impl_name(\n pub(crate) fn complete_trait_impl_name_ref(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    name_ref_ctx: &NameRefContext,\n+    path_ctx: &PathCompletionCtx,\n+    name_ref: &Option<ast::NameRef>,\n ) -> Option<()> {\n-    match name_ref_ctx {\n-        NameRefContext {\n-            nameref,\n-            kind:\n-                NameRefKind::Path(\n-                    path_ctx @ PathCompletionCtx {\n-                        kind: PathKind::Item { kind: ItemListKind::TraitImpl(Some(impl_)) },\n-                        ..\n-                    },\n-                ),\n+    match path_ctx {\n+        PathCompletionCtx {\n+            kind: PathKind::Item { kind: ItemListKind::TraitImpl(Some(impl_)) },\n+            ..\n         } if path_ctx.is_trivial_path() => complete_trait_impl(\n             acc,\n             ctx,\n             ImplCompletionKind::All,\n-            match nameref {\n+            match name_ref {\n                 Some(name) => name.syntax().text_range(),\n                 None => ctx.source_range(),\n             },"}, {"sha": "6f67c38dfdebb399c6ea59741f5b60680cad1f55", "filename": "crates/ide-completion/src/completions/mod_.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=5c69df93df2746d0bd97ec81c48668729568dcb9", "patch": "@@ -9,21 +9,14 @@ use ide_db::{\n };\n use syntax::{ast, AstNode, SyntaxKind};\n \n-use crate::{\n-    context::{CompletionContext, NameContext, NameKind},\n-    CompletionItem, Completions,\n-};\n+use crate::{context::CompletionContext, CompletionItem, Completions};\n \n /// Complete mod declaration, i.e. `mod $0;`\n pub(crate) fn complete_mod(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    name_ctx: &NameContext,\n+    mod_under_caret: &ast::Module,\n ) -> Option<()> {\n-    let mod_under_caret = match name_ctx {\n-        NameContext { kind: NameKind::Module(mod_under_caret), .. } => mod_under_caret,\n-        _ => return None,\n-    };\n     if mod_under_caret.item_list().is_some() {\n         return None;\n     }"}, {"sha": "e12acc34e7bc3838d4d05b82e70fe7a2323f4783", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=5c69df93df2746d0bd97ec81c48668729568dcb9", "patch": "@@ -5,30 +5,21 @@ use ide_db::{FxHashSet, SymbolKind};\n use syntax::{ast, AstNode};\n \n use crate::{\n-    context::{\n-        CompletionContext, NameRefContext, NameRefKind, PathCompletionCtx, PathKind, Qualified,\n-    },\n+    context::{CompletionContext, PathCompletionCtx, PathKind, Qualified},\n     item::Builder,\n     CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n };\n \n pub(crate) fn complete_use_tree(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    name_ref_ctx: &NameRefContext,\n+    path_ctx: &PathCompletionCtx,\n+    name_ref: &Option<ast::NameRef>,\n ) {\n-    let (qualified, name_ref, use_tree_parent) = match name_ref_ctx {\n-        NameRefContext {\n-            kind:\n-                NameRefKind::Path(PathCompletionCtx {\n-                    kind: PathKind::Use,\n-                    qualified,\n-                    use_tree_parent,\n-                    ..\n-                }),\n-            nameref,\n-            ..\n-        } => (qualified, nameref, use_tree_parent),\n+    let (qualified, name_ref, use_tree_parent) = match path_ctx {\n+        PathCompletionCtx { kind: PathKind::Use, qualified, use_tree_parent, .. } => {\n+            (qualified, name_ref, use_tree_parent)\n+        }\n         _ => return,\n     };\n "}, {"sha": "5e9923eb0f3cc2bbde84ab1bf60b2819bb9c5b8f", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 77, "deletions": 52, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=5c69df93df2746d0bd97ec81c48668729568dcb9", "patch": "@@ -24,7 +24,9 @@ use text_edit::TextEdit;\n \n use crate::{\n     completions::Completions,\n-    context::{CompletionContext, IdentContext, NameKind, NameRefContext, NameRefKind},\n+    context::{\n+        CompletionContext, IdentContext, NameContext, NameKind, NameRefContext, NameRefKind,\n+    },\n };\n \n pub use crate::{\n@@ -164,63 +166,86 @@ pub fn completions(\n         let acc = &mut completions;\n \n         match &ctx.ident_ctx {\n-            IdentContext::Name(name_ctx) => {\n-                completions::field::complete_field_list_record_variant(acc, ctx, name_ctx);\n-                completions::item_list::trait_impl::complete_trait_impl_name(acc, ctx, name_ctx);\n-                completions::mod_::complete_mod(acc, ctx, name_ctx);\n-                if let NameKind::IdentPat(pattern_ctx) = &name_ctx.kind {\n+            IdentContext::Name(NameContext { name, kind }) => match kind {\n+                NameKind::Const => {\n+                    completions::item_list::trait_impl::complete_trait_impl_const(acc, ctx, name);\n+                }\n+                NameKind::Function => {\n+                    completions::item_list::trait_impl::complete_trait_impl_fn(acc, ctx, name);\n+                }\n+                NameKind::IdentPat(pattern_ctx) => {\n                     completions::flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n                     completions::fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n                     completions::pattern::complete_pattern(acc, ctx, pattern_ctx);\n                     completions::record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n                 }\n-            }\n-            IdentContext::NameRef(name_ctx @ NameRefContext { kind, .. }) => {\n-                completions::item_list::trait_impl::complete_trait_impl_name_ref(\n-                    acc, ctx, name_ctx,\n-                );\n-                completions::use_::complete_use_tree(acc, ctx, name_ctx);\n-\n-                match kind {\n-                    NameRefKind::Path(path_ctx) => {\n-                        completions::attribute::complete_attribute(acc, ctx, path_ctx);\n-                        completions::attribute::complete_derive(acc, ctx, path_ctx);\n-                        completions::dot::complete_undotted_self(acc, ctx, path_ctx);\n-                        completions::expr::complete_expr_path(acc, ctx, path_ctx);\n-                        completions::field::complete_field_list_tuple_variant(acc, ctx, path_ctx);\n-                        completions::flyimport::import_on_the_fly_path(acc, ctx, path_ctx);\n-                        completions::item_list::complete_item_list(acc, ctx, path_ctx);\n-                        completions::pattern::pattern_path_completion(acc, ctx, path_ctx);\n-                        completions::r#type::complete_inferred_type(acc, ctx, path_ctx);\n-                        completions::r#type::complete_type_path(acc, ctx, path_ctx);\n-                        completions::record::complete_record_expr_func_update(acc, ctx, path_ctx);\n-                        completions::snippet::complete_expr_snippet(acc, ctx, path_ctx);\n-                        completions::snippet::complete_item_snippet(acc, ctx, path_ctx);\n-                        completions::vis::complete_vis_path(acc, ctx, path_ctx);\n-                    }\n-                    NameRefKind::DotAccess(dot_access) => {\n-                        completions::flyimport::import_on_the_fly_dot(acc, ctx, dot_access);\n-                        completions::dot::complete_dot(acc, ctx, dot_access);\n-                        completions::postfix::complete_postfix(acc, ctx, dot_access);\n-                    }\n-                    NameRefKind::Keyword(item) => {\n-                        completions::keyword::complete_special_keywords(acc, ctx, item);\n-                    }\n-                    NameRefKind::RecordExpr(record_expr) => {\n-                        completions::record::complete_record_expr_fields_record_expr(\n-                            acc,\n-                            ctx,\n-                            record_expr,\n-                        );\n-                    }\n-                    NameRefKind::Pattern(pattern_ctx) => {\n-                        completions::flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n-                        completions::fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n-                        completions::pattern::complete_pattern(acc, ctx, pattern_ctx);\n-                        completions::record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n-                    }\n+                NameKind::Module(mod_under_caret) => {\n+                    completions::mod_::complete_mod(acc, ctx, mod_under_caret);\n                 }\n-            }\n+                NameKind::TypeAlias => {\n+                    completions::item_list::trait_impl::complete_trait_impl_type_alias(\n+                        acc, ctx, name,\n+                    );\n+                }\n+                NameKind::RecordField => {\n+                    completions::field::complete_field_list_record_variant(acc, ctx);\n+                }\n+                NameKind::ConstParam\n+                | NameKind::Enum\n+                | NameKind::MacroDef\n+                | NameKind::MacroRules\n+                | NameKind::Rename\n+                | NameKind::SelfParam\n+                | NameKind::Static\n+                | NameKind::Struct\n+                | NameKind::Trait\n+                | NameKind::TypeParam\n+                | NameKind::Union\n+                | NameKind::Variant => (),\n+            },\n+            IdentContext::NameRef(NameRefContext { kind, nameref }) => match kind {\n+                NameRefKind::Path(path_ctx) => {\n+                    completions::attribute::complete_attribute(acc, ctx, path_ctx);\n+                    completions::attribute::complete_derive(acc, ctx, path_ctx);\n+                    completions::dot::complete_undotted_self(acc, ctx, path_ctx);\n+                    completions::expr::complete_expr_path(acc, ctx, path_ctx);\n+                    completions::field::complete_field_list_tuple_variant(acc, ctx, path_ctx);\n+                    completions::flyimport::import_on_the_fly_path(acc, ctx, path_ctx);\n+                    completions::item_list::complete_item_list(acc, ctx, path_ctx);\n+                    completions::item_list::trait_impl::complete_trait_impl_name_ref(\n+                        acc, ctx, path_ctx, nameref,\n+                    );\n+                    completions::pattern::pattern_path_completion(acc, ctx, path_ctx);\n+                    completions::r#type::complete_inferred_type(acc, ctx, path_ctx);\n+                    completions::r#type::complete_type_path(acc, ctx, path_ctx);\n+                    completions::record::complete_record_expr_func_update(acc, ctx, path_ctx);\n+                    completions::snippet::complete_expr_snippet(acc, ctx, path_ctx);\n+                    completions::snippet::complete_item_snippet(acc, ctx, path_ctx);\n+                    completions::use_::complete_use_tree(acc, ctx, path_ctx, nameref);\n+                    completions::vis::complete_vis_path(acc, ctx, path_ctx);\n+                }\n+                NameRefKind::DotAccess(dot_access) => {\n+                    completions::flyimport::import_on_the_fly_dot(acc, ctx, dot_access);\n+                    completions::dot::complete_dot(acc, ctx, dot_access);\n+                    completions::postfix::complete_postfix(acc, ctx, dot_access);\n+                }\n+                NameRefKind::Keyword(item) => {\n+                    completions::keyword::complete_special_keywords(acc, ctx, item);\n+                }\n+                NameRefKind::RecordExpr(record_expr) => {\n+                    completions::record::complete_record_expr_fields_record_expr(\n+                        acc,\n+                        ctx,\n+                        record_expr,\n+                    );\n+                }\n+                NameRefKind::Pattern(pattern_ctx) => {\n+                    completions::flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n+                    completions::fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n+                    completions::pattern::complete_pattern(acc, ctx, pattern_ctx);\n+                    completions::record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n+                }\n+            },\n             IdentContext::Lifetime(lifetime_ctx) => {\n                 completions::lifetime::complete_label(acc, ctx, lifetime_ctx);\n                 completions::lifetime::complete_lifetime(acc, ctx, lifetime_ctx);"}, {"sha": "a6bb3d0648bb08877303898cb48ff3f1fac8345a", "filename": "crates/ide-completion/src/snippet.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c69df93df2746d0bd97ec81c48668729568dcb9/crates%2Fide-completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fsnippet.rs?ref=5c69df93df2746d0bd97ec81c48668729568dcb9", "patch": "@@ -2,8 +2,6 @@\n //!\n //! Actual logic is implemented in [`crate::completions::postfix`] and [`crate::completions::snippet`] respectively.\n \n-use std::ops::Deref;\n-\n // Feature: User Snippet Completions\n //\n // rust-analyzer allows the user to define custom (postfix)-snippets that may depend on items to be accessible for the current scope to be applicable.\n@@ -146,8 +144,8 @@ impl Snippet {\n         let (requires, snippet, description) = validate_snippet(snippet, description, requires)?;\n         Some(Snippet {\n             // Box::into doesn't work as that has a Copy bound \ud83d\ude12\n-            postfix_triggers: postfix_triggers.iter().map(Deref::deref).map(Into::into).collect(),\n-            prefix_triggers: prefix_triggers.iter().map(Deref::deref).map(Into::into).collect(),\n+            postfix_triggers: postfix_triggers.iter().map(String::as_str).map(Into::into).collect(),\n+            prefix_triggers: prefix_triggers.iter().map(String::as_str).map(Into::into).collect(),\n             scope,\n             snippet,\n             description,"}]}