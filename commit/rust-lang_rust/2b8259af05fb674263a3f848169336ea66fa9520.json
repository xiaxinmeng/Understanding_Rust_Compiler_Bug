{"sha": "2b8259af05fb674263a3f848169336ea66fa9520", "node_id": "C_kwDOAAsO6NoAKDJiODI1OWFmMDVmYjY3NDI2M2EzZjg0ODE2OTMzNmVhNjZmYTk1MjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-30T22:43:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-30T22:43:32Z"}, "message": "Rollup merge of #91366 - notriddle:notriddle/only-show-notable-if-types-are-the-same, r=GuillaumeGomez\n\nOnly show notable traits if both types are the same\n\nChecking only their DefId doesn't work because all slices have the same\nfake DefId.\n\nFixes #91347", "tree": {"sha": "9f645de7c542034324a6c91de28b553d1f21bc50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f645de7c542034324a6c91de28b553d1f21bc50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b8259af05fb674263a3f848169336ea66fa9520", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhpqkUCRBK7hj4Ov3rIwAAWYkIAGSuHTDI8bdIygmxVd3DKxLz\nurCHbGuzyiWT0HnbAq0c+yyB7WG66d5L+Fe7j5IJgOliFFGFomxy6SJvgTCVJ5Kb\nPR080n/YQIaJuP//SD8xL3aUURj259b9hZHAnCOXG4GuIE2kSWnFAWN0r1dpGr93\nHcsWz0py7PrsYFan07DA5GyOtmvH3/+qTDXHr8HFXTcLu81c8DcZ+3ZWzsNY/FV7\njPrfgAJeYf8gSiEYhnYYOKBbcSUeomyvKy23MMpFE3UbtCkZ9RaGNscSzgLS+9HN\nU1UX8Tyu0HjliPQVaTBsLLiKKcix0Za7ImjNkI0QOltzX0lUUijYTiVxdkrkrMM=\n=aSQe\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f645de7c542034324a6c91de28b553d1f21bc50\nparent bc929f940426bac7e7d6fc42c7012e04905213ce\nparent d4f71d8f86ec00c736b121b22284298ecaf9a6e5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638312212 +0100\ncommitter GitHub <noreply@github.com> 1638312212 +0100\n\nRollup merge of #91366 - notriddle:notriddle/only-show-notable-if-types-are-the-same, r=GuillaumeGomez\n\nOnly show notable traits if both types are the same\n\nChecking only their DefId doesn't work because all slices have the same\nfake DefId.\n\nFixes #91347\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8259af05fb674263a3f848169336ea66fa9520", "html_url": "https://github.com/rust-lang/rust/commit/2b8259af05fb674263a3f848169336ea66fa9520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b8259af05fb674263a3f848169336ea66fa9520/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc929f940426bac7e7d6fc42c7012e04905213ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc929f940426bac7e7d6fc42c7012e04905213ce", "html_url": "https://github.com/rust-lang/rust/commit/bc929f940426bac7e7d6fc42c7012e04905213ce"}, {"sha": "d4f71d8f86ec00c736b121b22284298ecaf9a6e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f71d8f86ec00c736b121b22284298ecaf9a6e5", "html_url": "https://github.com/rust-lang/rust/commit/d4f71d8f86ec00c736b121b22284298ecaf9a6e5"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "11dd140504ae381e7c3f6295827b5f9fc3a569f8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2b8259af05fb674263a3f848169336ea66fa9520/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8259af05fb674263a3f848169336ea66fa9520/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2b8259af05fb674263a3f848169336ea66fa9520", "patch": "@@ -1468,6 +1468,45 @@ crate enum Type {\n rustc_data_structures::static_assert_size!(Type, 72);\n \n impl Type {\n+    /// When comparing types for equality, it can help to ignore `&` wrapping.\n+    crate fn without_borrowed_ref(&self) -> &Type {\n+        let mut result = self;\n+        while let Type::BorrowedRef { type_, .. } = result {\n+            result = &*type_;\n+        }\n+        result\n+    }\n+\n+    /// Check if two types are \"potentially the same\".\n+    /// This is different from `Eq`, because it knows that things like\n+    /// `Placeholder` are possible matches for everything.\n+    crate fn is_same(&self, other: &Self, cache: &Cache) -> bool {\n+        match (self, other) {\n+            // Recursive cases.\n+            (Type::Tuple(a), Type::Tuple(b)) => {\n+                a.len() == b.len() && a.iter().zip(b).all(|(a, b)| a.is_same(&b, cache))\n+            }\n+            (Type::Slice(a), Type::Slice(b)) => a.is_same(&b, cache),\n+            (Type::Array(a, al), Type::Array(b, bl)) => al == bl && a.is_same(&b, cache),\n+            (Type::RawPointer(mutability, type_), Type::RawPointer(b_mutability, b_type_)) => {\n+                mutability == b_mutability && type_.is_same(&b_type_, cache)\n+            }\n+            (\n+                Type::BorrowedRef { mutability, type_, .. },\n+                Type::BorrowedRef { mutability: b_mutability, type_: b_type_, .. },\n+            ) => mutability == b_mutability && type_.is_same(&b_type_, cache),\n+            // Placeholders and generics are equal to all other types.\n+            (Type::Infer, _) | (_, Type::Infer) => true,\n+            (Type::Generic(_), _) | (_, Type::Generic(_)) => true,\n+            // Other cases, such as primitives, just use recursion.\n+            (a, b) => a\n+                .def_id(cache)\n+                .and_then(|a| Some((a, b.def_id(cache)?)))\n+                .map(|(a, b)| a == b)\n+                .unwrap_or(false),\n+        }\n+    }\n+\n     crate fn primitive_type(&self) -> Option<PrimitiveType> {\n         match *self {\n             Primitive(p) | BorrowedRef { type_: box Primitive(p), .. } => Some(p),"}, {"sha": "8bf7d0416dd0a2594ab2452cb04e1d82b5b381fb", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b8259af05fb674263a3f848169336ea66fa9520/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8259af05fb674263a3f848169336ea66fa9520/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=2b8259af05fb674263a3f848169336ea66fa9520", "patch": "@@ -1235,10 +1235,17 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, tcx: TyCtxt<'_>) ->\n fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n     let mut out = Buffer::html();\n \n-    if let Some(did) = decl.output.as_return().and_then(|t| t.def_id(cx.cache())) {\n+    if let Some((did, ty)) = decl.output.as_return().and_then(|t| Some((t.def_id(cx.cache())?, t)))\n+    {\n         if let Some(impls) = cx.cache().impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n+                if !impl_.for_.without_borrowed_ref().is_same(ty.without_borrowed_ref(), cx.cache())\n+                {\n+                    // Two different types might have the same did,\n+                    // without actually being the same.\n+                    continue;\n+                }\n                 if let Some(trait_) = &impl_.trait_ {\n                     let trait_did = trait_.def_id();\n "}, {"sha": "b0d414027216ac7ca1ad7558479c463272151ea2", "filename": "src/test/rustdoc/doc-notable_trait-slice.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2b8259af05fb674263a3f848169336ea66fa9520/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8259af05fb674263a3f848169336ea66fa9520/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs?ref=2b8259af05fb674263a3f848169336ea66fa9520", "patch": "@@ -0,0 +1,20 @@\n+#![feature(doc_notable_trait)]\n+\n+#[doc(notable_trait)]\n+pub trait SomeTrait {}\n+\n+pub struct SomeStruct;\n+pub struct OtherStruct;\n+impl SomeTrait for &[SomeStruct] {}\n+\n+// @has doc_notable_trait_slice/fn.bare_fn_matches.html\n+// @has - '//code[@class=\"content\"]' 'impl SomeTrait for &[SomeStruct]'\n+pub fn bare_fn_matches() -> &'static [SomeStruct] {\n+    &[]\n+}\n+\n+// @has doc_notable_trait_slice/fn.bare_fn_no_matches.html\n+// @!has - '//code[@class=\"content\"]' 'impl SomeTrait for &[SomeStruct]'\n+pub fn bare_fn_no_matches() -> &'static [OtherStruct] {\n+    &[]\n+}"}]}