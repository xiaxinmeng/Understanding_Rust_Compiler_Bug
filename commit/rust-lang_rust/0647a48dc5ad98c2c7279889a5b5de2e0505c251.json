{"sha": "0647a48dc5ad98c2c7279889a5b5de2e0505c251", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NDdhNDhkYzVhZDk4YzJjNzI3OTg4OWE1YjVkZTJlMDUwNWMyNTE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-08T17:21:19Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-22T04:22:42Z"}, "message": "resolve: Split `ensure_traits` into a separate function", "tree": {"sha": "da5485724badbdb88cfc73a24c8fa0595efb08a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da5485724badbdb88cfc73a24c8fa0595efb08a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0647a48dc5ad98c2c7279889a5b5de2e0505c251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0647a48dc5ad98c2c7279889a5b5de2e0505c251", "html_url": "https://github.com/rust-lang/rust/commit/0647a48dc5ad98c2c7279889a5b5de2e0505c251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0647a48dc5ad98c2c7279889a5b5de2e0505c251/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "344a42e66eb9f78de7926df10e85ab51ba1aa69f", "url": "https://api.github.com/repos/rust-lang/rust/commits/344a42e66eb9f78de7926df10e85ab51ba1aa69f", "html_url": "https://github.com/rust-lang/rust/commit/344a42e66eb9f78de7926df10e85ab51ba1aa69f"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "b8fe6724f89c7e6284bf639f11cebe460195900d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0647a48dc5ad98c2c7279889a5b5de2e0505c251/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0647a48dc5ad98c2c7279889a5b5de2e0505c251/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0647a48dc5ad98c2c7279889a5b5de2e0505c251", "patch": "@@ -522,6 +522,29 @@ impl<'a> ModuleData<'a> {\n         }\n     }\n \n+    /// This modifies `self` in place. The traits will be stored in `self.traits`.\n+    fn ensure_traits<R>(&'a self, resolver: &mut R)\n+    where\n+        R: AsMut<Resolver<'a>>,\n+    {\n+        let mut traits = self.traits.borrow_mut();\n+        if traits.is_none() {\n+            let mut collected_traits = Vec::new();\n+            self.for_each_child(resolver, |_, name, ns, binding| {\n+                if ns != TypeNS {\n+                    return;\n+                }\n+                match binding.res() {\n+                    Res::Def(DefKind::Trait | DefKind::TraitAlias, _) => {\n+                        collected_traits.push((name, binding))\n+                    }\n+                    _ => (),\n+                }\n+            });\n+            *traits = Some(collected_traits.into_boxed_slice());\n+        }\n+    }\n+\n     fn res(&self) -> Option<Res> {\n         match self.kind {\n             ModuleKind::Def(kind, def_id, _) => Some(Res::Def(kind, def_id)),\n@@ -1440,22 +1463,8 @@ impl<'a> Resolver<'a> {\n         parent_scope: &ParentScope<'a>,\n     ) {\n         assert!(ns == TypeNS || ns == ValueNS);\n-        let mut traits = module.traits.borrow_mut();\n-        if traits.is_none() {\n-            let mut collected_traits = Vec::new();\n-            module.for_each_child(self, |_, name, ns, binding| {\n-                if ns != TypeNS {\n-                    return;\n-                }\n-                match binding.res() {\n-                    Res::Def(DefKind::Trait | DefKind::TraitAlias, _) => {\n-                        collected_traits.push((name, binding))\n-                    }\n-                    _ => (),\n-                }\n-            });\n-            *traits = Some(collected_traits.into_boxed_slice());\n-        }\n+        module.ensure_traits(self);\n+        let traits = module.traits.borrow();\n \n         for &(trait_name, binding) in traits.as_ref().unwrap().iter() {\n             // Traits have pseudo-modules that can be used to search for the given ident."}]}