{"sha": "ef92453dfec04c5d82ae86bc9e31494545854c65", "node_id": "C_kwDOAAsO6NoAKGVmOTI0NTNkZmVjMDRjNWQ4MmFlODZiYzllMzE0OTQ1NDU4NTRjNjU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-26T20:22:35Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-30T20:23:54Z"}, "message": "internal: Refactor FamousDefs builtin crate search", "tree": {"sha": "d9336228fe14d52f2140f090e8d38c9a91424599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9336228fe14d52f2140f090e8d38c9a91424599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef92453dfec04c5d82ae86bc9e31494545854c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef92453dfec04c5d82ae86bc9e31494545854c65", "html_url": "https://github.com/rust-lang/rust/commit/ef92453dfec04c5d82ae86bc9e31494545854c65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef92453dfec04c5d82ae86bc9e31494545854c65/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "259182b50b131647975926e8c94aad4c47d33747", "url": "https://api.github.com/repos/rust-lang/rust/commits/259182b50b131647975926e8c94aad4c47d33747", "html_url": "https://github.com/rust-lang/rust/commit/259182b50b131647975926e8c94aad4c47d33747"}], "stats": {"total": 251, "additions": 146, "deletions": 105}, "files": [{"sha": "daa0e3f6997f72cdb576cd61ae9697cd20209c7d", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -10,7 +10,7 @@ use tt::Subtree;\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n-    input::{CrateName, CrateOrigin},\n+    input::{CrateName, CrateOrigin, LangCrateOrigin},\n     Change, CrateDisplayName, CrateGraph, CrateId, Dependency, Edition, Env, FileId, FilePosition,\n     FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, SourceDatabaseExt,\n     SourceRoot, SourceRootId,\n@@ -196,7 +196,7 @@ impl ChangeFixture {\n                 Env::default(),\n                 Default::default(),\n                 false,\n-                Default::default(),\n+                CrateOrigin::CratesIo { repo: None },\n             );\n         } else {\n             for (from, to, prelude) in crate_deps {\n@@ -233,7 +233,7 @@ impl ChangeFixture {\n                 Env::default(),\n                 Vec::new(),\n                 false,\n-                CrateOrigin::Lang,\n+                CrateOrigin::Lang(LangCrateOrigin::Core),\n             );\n \n             for krate in all_crates {\n@@ -270,7 +270,7 @@ impl ChangeFixture {\n                 Env::default(),\n                 proc_macro,\n                 true,\n-                CrateOrigin::Lang,\n+                CrateOrigin::CratesIo { repo: None },\n             );\n \n             for krate in all_crates {\n@@ -406,7 +406,11 @@ fn parse_crate(crate_str: String) -> (String, CrateOrigin, Option<String>) {\n         };\n         (a.to_owned(), origin, Some(version.to_string()))\n     } else {\n-        (crate_str, CrateOrigin::Unknown, None)\n+        let crate_origin = match &*crate_str {\n+            \"std\" => CrateOrigin::Lang(LangCrateOrigin::Std),\n+            _ => CrateOrigin::CratesIo { repo: None },\n+        };\n+        (crate_str, crate_origin, None)\n     }\n }\n "}, {"sha": "43d7ccad492d8ad7eb33f15f71e8eb88b54e6e2a", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -117,21 +117,22 @@ impl ops::Deref for CrateName {\n }\n \n /// Origin of the crates. It is used in emitting monikers.\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum CrateOrigin {\n     /// Crates that are from crates.io official registry,\n     CratesIo { repo: Option<String> },\n     /// Crates that are provided by the language, like std, core, proc-macro, ...\n-    Lang,\n-    /// Crates that we don't know their origin.\n-    // Ideally this enum should cover all cases, and then we remove this variant.\n-    Unknown,\n+    Lang(LangCrateOrigin),\n }\n \n-impl Default for CrateOrigin {\n-    fn default() -> Self {\n-        Self::Unknown\n-    }\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum LangCrateOrigin {\n+    Alloc,\n+    Core,\n+    ProcMacro,\n+    Std,\n+    Test,\n+    Other,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -585,6 +586,8 @@ impl fmt::Display for CyclicDependenciesError {\n \n #[cfg(test)]\n mod tests {\n+    use crate::CrateOrigin;\n+\n     use super::{CfgOptions, CrateGraph, CrateName, Dependency, Edition::Edition2018, Env, FileId};\n \n     #[test]\n@@ -600,7 +603,7 @@ mod tests {\n             Env::default(),\n             Default::default(),\n             false,\n-            Default::default(),\n+            CrateOrigin::CratesIo { repo: None },\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -612,7 +615,7 @@ mod tests {\n             Env::default(),\n             Default::default(),\n             false,\n-            Default::default(),\n+            CrateOrigin::CratesIo { repo: None },\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -624,7 +627,7 @@ mod tests {\n             Env::default(),\n             Default::default(),\n             false,\n-            Default::default(),\n+            CrateOrigin::CratesIo { repo: None },\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -650,7 +653,7 @@ mod tests {\n             Env::default(),\n             Default::default(),\n             false,\n-            Default::default(),\n+            CrateOrigin::CratesIo { repo: None },\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -662,7 +665,7 @@ mod tests {\n             Env::default(),\n             Default::default(),\n             false,\n-            Default::default(),\n+            CrateOrigin::CratesIo { repo: None },\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -685,7 +688,7 @@ mod tests {\n             Env::default(),\n             Default::default(),\n             false,\n-            Default::default(),\n+            CrateOrigin::CratesIo { repo: None },\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -697,7 +700,7 @@ mod tests {\n             Env::default(),\n             Default::default(),\n             false,\n-            Default::default(),\n+            CrateOrigin::CratesIo { repo: None },\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -709,7 +712,7 @@ mod tests {\n             Env::default(),\n             Default::default(),\n             false,\n-            Default::default(),\n+            CrateOrigin::CratesIo { repo: None },\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -732,7 +735,7 @@ mod tests {\n             Env::default(),\n             Default::default(),\n             false,\n-            Default::default(),\n+            CrateOrigin::CratesIo { repo: None },\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -744,7 +747,7 @@ mod tests {\n             Env::default(),\n             Default::default(),\n             false,\n-            Default::default(),\n+            CrateOrigin::CratesIo { repo: None },\n         );\n         assert!(graph\n             .add_dep("}, {"sha": "2454698bb61c64c2babd1874be5ad4546a207cff", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -12,8 +12,8 @@ pub use crate::{\n     change::Change,\n     input::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency,\n-        Edition, Env, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacroId,\n-        ProcMacroKind, SourceRoot, SourceRootId,\n+        Edition, Env, LangCrateOrigin, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n+        ProcMacroId, ProcMacroKind, SourceRoot, SourceRootId,\n     },\n };\n pub use salsa::{self, Cancelled};"}, {"sha": "171131c99eb8b9cc89a9b9df31f7e53bfad9a728", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -148,14 +148,18 @@ impl Crate {\n         db.crate_graph()[self.id].origin.clone()\n     }\n \n+    pub fn is_builtin(self, db: &dyn HirDatabase) -> bool {\n+        matches!(self.origin(db), CrateOrigin::Lang(_))\n+    }\n+\n     pub fn dependencies(self, db: &dyn HirDatabase) -> Vec<CrateDependency> {\n         db.crate_graph()[self.id]\n             .dependencies\n             .iter()\n             .map(|dep| {\n                 let krate = Crate { id: dep.crate_id };\n                 let name = dep.as_name();\n-                CrateDependency { krate, name }\n+                CrateDependency { krate, name, }\n             })\n             .collect()\n     }\n@@ -1741,10 +1745,8 @@ impl BuiltinType {\n         BuiltinType { inner: hir_def::builtin_type::BuiltinType::Str }\n     }\n \n-    pub fn ty(self, db: &dyn HirDatabase, module: Module) -> Type {\n-        let resolver = module.id.resolver(db.upcast());\n-        Type::new_with_resolver(db, &resolver, TyBuilder::builtin(self.inner))\n-            .expect(\"crate not present in resolver\")\n+    pub fn ty(self, db: &dyn HirDatabase) -> Type {\n+        Type::new_for_crate(db.crate_graph().iter().next().unwrap(), TyBuilder::builtin(self.inner))\n     }\n \n     pub fn name(self) -> Name {\n@@ -2619,6 +2621,7 @@ impl Type {\n         let krate = resolver.krate()?;\n         Some(Type::new_with_resolver_inner(db, krate, resolver, ty))\n     }\n+\n     pub(crate) fn new_with_resolver_inner(\n         db: &dyn HirDatabase,\n         krate: CrateId,\n@@ -2631,6 +2634,10 @@ impl Type {\n         Type { krate, env: environment, ty }\n     }\n \n+    pub(crate) fn new_for_crate(krate: CrateId, ty: Ty) -> Type {\n+        Type { krate, env: Arc::new(TraitEnvironment::empty(krate)), ty }\n+    }\n+\n     pub fn reference(inner: &Type, m: Mutability) -> Type {\n         inner.derived(\n             TyKind::Ref("}, {"sha": "a7d6bc24019900abdbf77be3b7d05fa5afe0c783", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -63,10 +63,7 @@ pub(crate) fn goto_implementation(\n                 Definition::Trait(trait_) => impls_for_trait(&sema, trait_),\n                 Definition::Adt(adt) => impls_for_ty(&sema, adt.ty(sema.db)),\n                 Definition::TypeAlias(alias) => impls_for_ty(&sema, alias.ty(sema.db)),\n-                Definition::BuiltinType(builtin) => {\n-                    let module = sema.to_module_def(position.file_id)?;\n-                    impls_for_ty(&sema, builtin.ty(sema.db, module))\n-                }\n+                Definition::BuiltinType(builtin) => impls_for_ty(&sema, builtin.ty(sema.db)),\n                 Definition::Function(f) => {\n                     let assoc = f.as_assoc_item(sema.db)?;\n                     let name = assoc.name(sema.db)?;"}, {"sha": "4c4a2bd199c30a1d10b77551f07737c00bf663c4", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -64,7 +64,7 @@ use cfg::CfgOptions;\n use ide_db::{\n     base_db::{\n         salsa::{self, ParallelDatabase},\n-        Env, FileLoader, FileSet, SourceDatabase, VfsPath,\n+        CrateOrigin, Env, FileLoader, FileSet, SourceDatabase, VfsPath,\n     },\n     symbol_index, LineIndexDatabase,\n };\n@@ -232,7 +232,7 @@ impl Analysis {\n             Env::default(),\n             Default::default(),\n             false,\n-            Default::default(),\n+            CrateOrigin::CratesIo { repo: None },\n         );\n         change.change_file(file_id, Some(Arc::new(text)));\n         change.set_crate_graph(crate_graph);"}, {"sha": "0f75abe55c1d5c67b6afb1c8fefa89cdc13d88df", "filename": "crates/ide/src/moniker.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide%2Fsrc%2Fmoniker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide%2Fsrc%2Fmoniker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmoniker.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -3,7 +3,7 @@\n \n use hir::{db::DefDatabase, AsAssocItem, AssocItemContainer, Crate, Name, Semantics};\n use ide_db::{\n-    base_db::{CrateOrigin, FileId, FileLoader, FilePosition},\n+    base_db::{CrateOrigin, FileId, FileLoader, FilePosition, LangCrateOrigin},\n     defs::{Definition, IdentClass},\n     helpers::pick_best_token,\n     RootDatabase,\n@@ -151,11 +151,20 @@ pub(crate) fn def_to_moniker(\n             let name = krate.display_name(db)?.to_string();\n             let (repo, version) = match krate.origin(db) {\n                 CrateOrigin::CratesIo { repo } => (repo?, krate.version(db)?),\n-                CrateOrigin::Lang => (\n+                CrateOrigin::Lang(lang) => (\n                     \"https://github.com/rust-lang/rust/\".to_string(),\n-                    \"compiler_version\".to_string(),\n+                    format!(\n+                        \"https://github.com/rust-lang/rust/library/{}\",\n+                        match lang {\n+                            LangCrateOrigin::Alloc => \"alloc\",\n+                            LangCrateOrigin::Core => \"core\",\n+                            LangCrateOrigin::ProcMacro => \"proc_macro\",\n+                            LangCrateOrigin::Std => \"std\",\n+                            LangCrateOrigin::Test => \"test\",\n+                            LangCrateOrigin::Other => \"\",\n+                        }\n+                    ),\n                 ),\n-                CrateOrigin::Unknown => return None,\n             };\n             PackageInformation { name, repo, version }\n         },"}, {"sha": "e92deec8b81776339ecd0b00f8ee933922e1ec19", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -3,7 +3,6 @@\n use hir::{AsAssocItem, HasVisibility, Semantics};\n use ide_db::{\n     defs::{Definition, IdentClass, NameClass, NameRefClass},\n-    famous_defs::FamousDefs,\n     RootDatabase, SymbolKind,\n };\n use rustc_hash::FxHashMap;\n@@ -472,14 +471,12 @@ fn highlight_def(\n         Definition::ToolModule(_) => Highlight::new(HlTag::Symbol(SymbolKind::ToolModule)),\n     };\n \n-    let famous_defs = FamousDefs(sema, krate);\n     let def_crate = def.module(db).map(hir::Module::krate).or_else(|| match def {\n         Definition::Module(module) => Some(module.krate()),\n         _ => None,\n     });\n     let is_from_other_crate = def_crate != krate;\n-    let is_from_builtin_crate =\n-        def_crate.map_or(false, |def_crate| famous_defs.builtin_crates().any(|it| def_crate == it));\n+    let is_from_builtin_crate = def_crate.map_or(false, |def_crate| def_crate.is_builtin(db));\n     let is_builtin_type = matches!(def, Definition::BuiltinType(_));\n     let is_public = def.visibility(db) == Some(hir::Visibility::Public);\n \n@@ -525,10 +522,9 @@ fn highlight_method_call(\n         h |= HlMod::Trait;\n     }\n \n-    let famous_defs = FamousDefs(sema, krate);\n     let def_crate = func.module(sema.db).krate();\n     let is_from_other_crate = Some(def_crate) != krate;\n-    let is_from_builtin_crate = famous_defs.builtin_crates().any(|it| def_crate == it);\n+    let is_from_builtin_crate = def_crate.is_builtin(sema.db);\n     let is_public = func.visibility(sema.db) == hir::Visibility::Public;\n \n     if is_from_other_crate {"}, {"sha": "af41796e2169bbf8128ab4f978ff057a75db129d", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -43,5 +43,5 @@\n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n <pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module crate_root default_library library\">std</span><span class=\"semicolon\">;</span>\n-<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module crate_root default_library library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module crate_root default_library declaration library\">abc</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module crate_root library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module crate_root declaration library\">abc</span><span class=\"semicolon\">;</span>\n </code></pre>\n\\ No newline at end of file"}, {"sha": "0add9507185c636619494de91ec6c0590ae5070d", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -600,8 +600,7 @@ fn handle_as_ref_str(\n     db: &dyn HirDatabase,\n     famous_defs: &FamousDefs,\n ) -> Option<ReferenceConversionType> {\n-    let module = famous_defs.1?.root_module(db);\n-    let str_type = hir::BuiltinType::str().ty(db, module);\n+    let str_type = hir::BuiltinType::str().ty(db);\n \n     ty.impls_trait(db, famous_defs.core_convert_AsRef()?, &[str_type])\n         .then(|| ReferenceConversionType::AsRefStr)"}, {"sha": "574b8b8c7ae50668cd906f64081b46211c3980db", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -159,13 +159,7 @@ fn pattern_path_completion(\n                         hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Union(u))) => {\n                             u.ty(ctx.db)\n                         }\n-                        hir::PathResolution::Def(hir::ModuleDef::BuiltinType(ty)) => {\n-                            let module = match ctx.module {\n-                                Some(m) => m,\n-                                None => return,\n-                            };\n-                            ty.ty(ctx.db, module)\n-                        }\n+                        hir::PathResolution::Def(hir::ModuleDef::BuiltinType(ty)) => ty.ty(ctx.db),\n                         _ => return,\n                     };\n "}, {"sha": "3930adbf0eb78d8ddcf8932bf048c6064f7bc9a5", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -1,7 +1,6 @@\n //! Completion of paths, i.e. `some::prefix::$0`.\n \n use hir::{ScopeDef, Trait};\n-use ide_db::famous_defs::FamousDefs;\n use rustc_hash::FxHashSet;\n use syntax::ast;\n \n@@ -26,7 +25,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n     };\n     let traits_in_scope = |ctx: &CompletionContext| {\n         let mut traits_in_scope = ctx.scope.visible_traits();\n-        if let Some(drop) = FamousDefs(&ctx.sema, ctx.krate).core_ops_Drop() {\n+        if let Some(drop) = ctx.famous_defs().core_ops_Drop() {\n             traits_in_scope.remove(&drop.into());\n         }\n         traits_in_scope\n@@ -133,12 +132,8 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     ty\n                 }\n                 hir::ModuleDef::BuiltinType(builtin) => {\n-                    let module = match ctx.module {\n-                        Some(it) => it,\n-                        None => return,\n-                    };\n                     cov_mark::hit!(completes_primitive_assoc_const);\n-                    builtin.ty(ctx.db, module)\n+                    builtin.ty(ctx.db)\n                 }\n                 _ => unreachable!(),\n             };"}, {"sha": "e6cbb55203d6aeaef53f490478b129b732a87345", "filename": "crates/ide_db/src/famous_defs.rs", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -1,4 +1,6 @@\n //! See [`FamousDefs`].\n+\n+use base_db::{CrateOrigin, LangCrateOrigin, SourceDatabase};\n use hir::{Crate, Enum, Macro, Module, ScopeDef, Semantics, Trait};\n \n use crate::RootDatabase;\n@@ -21,11 +23,23 @@ pub struct FamousDefs<'a, 'b>(pub &'a Semantics<'b, RootDatabase>, pub Option<Cr\n #[allow(non_snake_case)]\n impl FamousDefs<'_, '_> {\n     pub fn std(&self) -> Option<Crate> {\n-        self.find_crate(\"std\")\n+        self.find_lang_crate(LangCrateOrigin::Std)\n     }\n \n     pub fn core(&self) -> Option<Crate> {\n-        self.find_crate(\"core\")\n+        self.find_lang_crate(LangCrateOrigin::Core)\n+    }\n+\n+    pub fn alloc(&self) -> Option<Crate> {\n+        self.find_lang_crate(LangCrateOrigin::Alloc)\n+    }\n+\n+    pub fn test(&self) -> Option<Crate> {\n+        self.find_lang_crate(LangCrateOrigin::Test)\n+    }\n+\n+    pub fn proc_macro(&self) -> Option<Crate> {\n+        self.find_lang_crate(LangCrateOrigin::ProcMacro)\n     }\n \n     pub fn core_cmp_Ord(&self) -> Option<Trait> {\n@@ -88,18 +102,6 @@ impl FamousDefs<'_, '_> {\n         self.find_macro(\"core:macros:builtin:derive\")\n     }\n \n-    pub fn alloc(&self) -> Option<Crate> {\n-        self.find_crate(\"alloc\")\n-    }\n-\n-    pub fn test(&self) -> Option<Crate> {\n-        self.find_crate(\"test\")\n-    }\n-\n-    pub fn proc_macro(&self) -> Option<Crate> {\n-        self.find_crate(\"proc_macro\")\n-    }\n-\n     pub fn builtin_crates(&self) -> impl Iterator<Item = Crate> {\n         IntoIterator::into_iter([\n             self.std(),\n@@ -139,20 +141,32 @@ impl FamousDefs<'_, '_> {\n         }\n     }\n \n-    fn find_crate(&self, name: &str) -> Option<Crate> {\n+    fn find_lang_crate(&self, origin: LangCrateOrigin) -> Option<Crate> {\n         let krate = self.1?;\n         let db = self.0.db;\n-        let res =\n-            krate.dependencies(db).into_iter().find(|dep| dep.name.to_smol_str() == name)?.krate;\n+        let crate_graph = self.0.db.crate_graph();\n+        let res = krate\n+            .dependencies(db)\n+            .into_iter()\n+            .find(|dep| crate_graph[dep.krate.into()].origin == CrateOrigin::Lang(origin))?\n+            .krate;\n         Some(res)\n     }\n \n     fn find_def(&self, path: &str) -> Option<ScopeDef> {\n         let db = self.0.db;\n         let mut path = path.split(':');\n         let trait_ = path.next_back()?;\n-        let std_crate = path.next()?;\n-        let std_crate = self.find_crate(std_crate)?;\n+        let lang_crate = path.next()?;\n+        let lang_crate = match lang_crate {\n+            \"core\" => LangCrateOrigin::Core,\n+            \"alloc\" => LangCrateOrigin::Alloc,\n+            \"test\" => LangCrateOrigin::Test,\n+            \"proc_macro\" => LangCrateOrigin::ProcMacro,\n+            \"std\" => LangCrateOrigin::Std,\n+            _ => return None,\n+        };\n+        let std_crate = self.find_lang_crate(lang_crate)?;\n         let mut module = std_crate.root_module(db);\n         for segment in path {\n             module = module.children(db).find_map(|child| {"}, {"sha": "fe99c2e2ce0251e7c55448f48f13caf48b076a4d", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -734,13 +734,7 @@ fn def_to_ty(sema: &Semantics<RootDatabase>, def: &Definition) -> Option<hir::Ty\n     match def {\n         Definition::Adt(adt) => Some(adt.ty(sema.db)),\n         Definition::TypeAlias(it) => Some(it.ty(sema.db)),\n-        Definition::BuiltinType(it) => {\n-            let graph = sema.db.crate_graph();\n-            let krate = graph.iter().next()?;\n-            let root_file = graph[krate].root_file_id;\n-            let module = sema.to_module_def(root_file)?;\n-            Some(it.ty(sema.db, module))\n-        }\n+        Definition::BuiltinType(it) => Some(it.ty(sema.db)),\n         Definition::SelfType(it) => Some(it.self_ty(sema.db)),\n         _ => None,\n     }"}, {"sha": "351e820adab21fa314fec9734ca54df140da9e44", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -1261,7 +1261,9 @@ fn rust_project_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n-                        origin: Lang,\n+                        origin: Lang(\n+                            Alloc,\n+                        ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n@@ -1291,7 +1293,9 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n-                        origin: Lang,\n+                        origin: Lang(\n+                            Other,\n+                        ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n@@ -1321,7 +1325,9 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n-                        origin: Lang,\n+                        origin: Lang(\n+                            Other,\n+                        ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n@@ -1361,7 +1367,9 @@ fn rust_project_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n-                        origin: Lang,\n+                        origin: Lang(\n+                            ProcMacro,\n+                        ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n@@ -1391,7 +1399,9 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n-                        origin: Lang,\n+                        origin: Lang(\n+                            Core,\n+                        ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n@@ -1490,7 +1500,9 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n-                        origin: Lang,\n+                        origin: Lang(\n+                            Other,\n+                        ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n@@ -1520,7 +1532,9 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n-                        origin: Lang,\n+                        origin: Lang(\n+                            Other,\n+                        ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n@@ -1550,7 +1564,9 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n-                        origin: Lang,\n+                        origin: Lang(\n+                            Other,\n+                        ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n@@ -1580,7 +1596,9 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n-                        origin: Lang,\n+                        origin: Lang(\n+                            Test,\n+                        ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n@@ -1692,7 +1710,9 @@ fn rust_project_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n-                        origin: Lang,\n+                        origin: Lang(\n+                            Std,\n+                        ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n@@ -1722,7 +1742,9 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n-                        origin: Lang,\n+                        origin: Lang(\n+                            Other,\n+                        ),\n                         is_proc_macro: false,\n                     },\n                 },"}, {"sha": "509219f0b66586f8355467c20673a09bf1050cbd", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef92453dfec04c5d82ae86bc9e31494545854c65/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=ef92453dfec04c5d82ae86bc9e31494545854c65", "patch": "@@ -7,7 +7,7 @@ use std::{collections::VecDeque, fmt, fs, process::Command};\n use anyhow::{format_err, Context, Result};\n use base_db::{\n     CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency, Edition, Env,\n-    FileId, ProcMacro,\n+    FileId, LangCrateOrigin, ProcMacro,\n };\n use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n@@ -487,7 +487,7 @@ fn project_json_to_crate_graph(\n                     if krate.display_name.is_some() {\n                         CrateOrigin::CratesIo { repo: krate.repository.clone() }\n                     } else {\n-                        CrateOrigin::Unknown\n+                        CrateOrigin::CratesIo { repo: None }\n                     },\n                 ),\n             )\n@@ -710,7 +710,7 @@ fn detached_files_to_crate_graph(\n             Env::default(),\n             Vec::new(),\n             false,\n-            CrateOrigin::Unknown,\n+            CrateOrigin::CratesIo { repo: None },\n         );\n \n         public_deps.add(detached_file_crate, &mut crate_graph);\n@@ -908,7 +908,14 @@ fn sysroot_to_crate_graph(\n                 env,\n                 proc_macro,\n                 false,\n-                CrateOrigin::Lang,\n+                CrateOrigin::Lang(match &*sysroot[krate].name {\n+                    \"alloc\" => LangCrateOrigin::Alloc,\n+                    \"core\" => LangCrateOrigin::Core,\n+                    \"proc_macro\" => LangCrateOrigin::ProcMacro,\n+                    \"std\" => LangCrateOrigin::Std,\n+                    \"test\" => LangCrateOrigin::Test,\n+                    _ => LangCrateOrigin::Other,\n+                }),\n             );\n             Some((krate, crate_id))\n         })"}]}