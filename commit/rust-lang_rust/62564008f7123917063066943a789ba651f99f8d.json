{"sha": "62564008f7123917063066943a789ba651f99f8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNTY0MDA4ZjcxMjM5MTcwNjMwNjY5NDNhNzg5YmE2NTFmOTlmOGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-31T13:36:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-31T13:36:52Z"}, "message": "Merge #4672\n\n4672: Link docs and code r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ac2801be30223c32dbbf864ebf6c77a904edccdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac2801be30223c32dbbf864ebf6c77a904edccdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62564008f7123917063066943a789ba651f99f8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe07L0CRBK7hj4Ov3rIwAAdHIIAIgBKIkl02D0ffRVy93puX5y\nmvv+7ptiIjg/gepGZltHaony7Jdl+tE3uHjKJiWi90c4O18WZ0TZOidVF/pn3jDX\n0cUt0KsG/tNUJrwWrRYbPTp7gAEKyrYzf5Jj24e8omHl45vFjDsNEBmSixQ6LRQ9\n/Qyq4XZQxgSMNVfZz1QTtGmdCFVSxBV0vLQKNS3I35GL6zRol13UytJGUT7YEpHv\n7dVSRePlUgS+JjQpTzL6IkwPrwMTp9qvvhyRtlq/Lj9Xt/wM5bXqhaw/pYyJukJA\nVZqoCnRAeLFU3GydthCKCPDgppHydGxRqYlnIZ3wn6m4fiP2BmH6830CGM9uqR8=\n=9bAT\n-----END PGP SIGNATURE-----\n", "payload": "tree ac2801be30223c32dbbf864ebf6c77a904edccdb\nparent 26d88ac94f7c64f17a2d5df891f1f77a096fedda\nparent 899570ad7abbc644e87d8379862c1b9f940eaf07\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590932212 +0000\ncommitter GitHub <noreply@github.com> 1590932212 +0000\n\nMerge #4672\n\n4672: Link docs and code r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62564008f7123917063066943a789ba651f99f8d", "html_url": "https://github.com/rust-lang/rust/commit/62564008f7123917063066943a789ba651f99f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62564008f7123917063066943a789ba651f99f8d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26d88ac94f7c64f17a2d5df891f1f77a096fedda", "url": "https://api.github.com/repos/rust-lang/rust/commits/26d88ac94f7c64f17a2d5df891f1f77a096fedda", "html_url": "https://github.com/rust-lang/rust/commit/26d88ac94f7c64f17a2d5df891f1f77a096fedda"}, {"sha": "899570ad7abbc644e87d8379862c1b9f940eaf07", "url": "https://api.github.com/repos/rust-lang/rust/commits/899570ad7abbc644e87d8379862c1b9f940eaf07", "html_url": "https://github.com/rust-lang/rust/commit/899570ad7abbc644e87d8379862c1b9f940eaf07"}], "stats": {"total": 126, "additions": 90, "deletions": 36}, "files": [{"sha": "580ab4358e019a59f3347148772df2bffc1b6cdf", "filename": "docs/user/generated_assists.adoc", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/62564008f7123917063066943a789ba651f99f8d/docs%2Fuser%2Fgenerated_assists.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/62564008f7123917063066943a789ba651f99f8d/docs%2Fuser%2Fgenerated_assists.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_assists.adoc?ref=62564008f7123917063066943a789ba651f99f8d", "patch": "@@ -1,5 +1,6 @@\n [discrete]\n === `add_custom_impl`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/add_custom_impl.rs#L14[add_custom_impl.rs]\n \n Adds impl block for derived trait.\n \n@@ -22,6 +23,7 @@ impl Debug for S {\n \n [discrete]\n === `add_derive`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/add_derive.rs#L9[add_derive.rs]\n \n Adds a new `#[derive()]` clause to a struct or enum.\n \n@@ -45,6 +47,7 @@ struct Point {\n \n [discrete]\n === `add_explicit_type`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/add_explicit_type.rs#L9[add_explicit_type.rs]\n \n Specify type for a let binding.\n \n@@ -65,6 +68,7 @@ fn main() {\n \n [discrete]\n === `add_from_impl_for_enum`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/add_from_impl_for_enum.rs#L7[add_from_impl_for_enum.rs]\n \n Adds a From impl for an enum variant with one tuple field.\n \n@@ -87,6 +91,7 @@ impl From<u32> for A {\n \n [discrete]\n === `add_function`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/add_function.rs#L19[add_function.rs]\n \n Adds a stub function with a signature matching the function under the cursor.\n \n@@ -117,6 +122,7 @@ fn bar(arg: &str, baz: Baz) {\n \n [discrete]\n === `add_hash`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/raw_string.rs#L65[raw_string.rs]\n \n Adds a hash to a raw string literal.\n \n@@ -137,6 +143,7 @@ fn main() {\n \n [discrete]\n === `add_impl`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/add_impl.rs#L6[add_impl.rs]\n \n Adds a new inherent impl for a type.\n \n@@ -161,6 +168,7 @@ impl<T: Clone> Ctx<T> {\n \n [discrete]\n === `add_impl_default_members`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/add_missing_impl_members.rs#L64[add_missing_impl_members.rs]\n \n Adds scaffold for overriding default impl members.\n \n@@ -198,6 +206,7 @@ impl Trait for () {\n \n [discrete]\n === `add_impl_missing_members`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/add_missing_impl_members.rs#L24[add_missing_impl_members.rs]\n \n Adds scaffold for required impl members.\n \n@@ -233,6 +242,7 @@ impl Trait<u32> for () {\n \n [discrete]\n === `add_new`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/add_new.rs#L12[add_new.rs]\n \n Adds a new inherent impl for a type.\n \n@@ -258,6 +268,7 @@ impl<T: Clone> Ctx<T> {\n \n [discrete]\n === `add_turbo_fish`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/add_turbo_fish.rs#L10[add_turbo_fish.rs]\n \n Adds `::<_>` to a call of a generic method or function.\n \n@@ -280,6 +291,7 @@ fn main() {\n \n [discrete]\n === `apply_demorgan`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/apply_demorgan.rs#L5[apply_demorgan.rs]\n \n Apply [De Morgan's law](https://en.wikipedia.org/wiki/De_Morgan%27s_laws).\n This transforms expressions of the form `!l || !r` into `!(l && r)`.\n@@ -304,6 +316,7 @@ fn main() {\n \n [discrete]\n === `auto_import`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/auto_import.rs#L18[auto_import.rs]\n \n If the name is unresolved, provides all possible imports for it.\n \n@@ -326,6 +339,7 @@ fn main() {\n \n [discrete]\n === `change_lifetime_anon_to_named`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/change_lifetime_anon_to_named.rs#L9[change_lifetime_anon_to_named.rs]\n \n Change an anonymous lifetime to a named lifetime.\n \n@@ -354,6 +368,7 @@ impl<'a> Cursor<'a> {\n \n [discrete]\n === `change_return_type_to_result`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/change_return_type_to_result.rs#L8[change_return_type_to_result.rs]\n \n Change the function's return type to Result.\n \n@@ -370,6 +385,7 @@ fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\n \n [discrete]\n === `change_visibility`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/change_visibility.rs#L14[change_visibility.rs]\n \n Adds or changes existing visibility specifier.\n \n@@ -386,6 +402,7 @@ pub(crate) fn frobnicate() {}\n \n [discrete]\n === `convert_to_guarded_return`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/early_return.rs#L21[early_return.rs]\n \n Replace a large conditional with a guarded return.\n \n@@ -413,6 +430,7 @@ fn main() {\n \n [discrete]\n === `fill_match_arms`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/fill_match_arms.rs#L14[fill_match_arms.rs]\n \n Adds missing clauses to a `match` expression.\n \n@@ -442,6 +460,7 @@ fn handle(action: Action) {\n \n [discrete]\n === `fix_visibility`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/fix_visibility.rs#L13[fix_visibility.rs]\n \n Makes inaccessible item public.\n \n@@ -468,6 +487,7 @@ fn main() {\n \n [discrete]\n === `flip_binexpr`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/flip_binexpr.rs#L5[flip_binexpr.rs]\n \n Flips operands of a binary expression.\n \n@@ -488,6 +508,7 @@ fn main() {\n \n [discrete]\n === `flip_comma`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/flip_comma.rs#L5[flip_comma.rs]\n \n Flips two comma-separated items.\n \n@@ -508,6 +529,7 @@ fn main() {\n \n [discrete]\n === `flip_trait_bound`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/flip_trait_bound.rs#L9[flip_trait_bound.rs]\n \n Flips two trait bounds.\n \n@@ -524,6 +546,7 @@ fn foo<T: Copy + Clone>() { }\n \n [discrete]\n === `inline_local_variable`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/inline_local_variable.rs#L13[inline_local_variable.rs]\n \n Inlines local variable.\n \n@@ -545,6 +568,7 @@ fn main() {\n \n [discrete]\n === `introduce_variable`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/introduce_variable.rs#L14[introduce_variable.rs]\n \n Extracts subexpression into a variable.\n \n@@ -566,6 +590,7 @@ fn main() {\n \n [discrete]\n === `invert_if`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/invert_if.rs#L12[invert_if.rs]\n \n Apply invert_if\n This transforms if expressions of the form `if !x {A} else {B}` into `if x {B} else {A}`\n@@ -589,6 +614,7 @@ fn main() {\n \n [discrete]\n === `make_raw_string`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/raw_string.rs#L10[raw_string.rs]\n \n Adds `r#` to a plain string literal.\n \n@@ -609,6 +635,7 @@ fn main() {\n \n [discrete]\n === `make_usual_string`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/raw_string.rs#L39[raw_string.rs]\n \n Turns a raw string into a plain string.\n \n@@ -629,6 +656,7 @@ fn main() {\n \n [discrete]\n === `merge_imports`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/merge_imports.rs#L14[merge_imports.rs]\n \n Merges two imports with a common prefix.\n \n@@ -646,6 +674,7 @@ use std::{fmt::Formatter, io};\n \n [discrete]\n === `merge_match_arms`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/merge_match_arms.rs#L11[merge_match_arms.rs]\n \n Merges identical match arms.\n \n@@ -675,6 +704,7 @@ fn handle(action: Action) {\n \n [discrete]\n === `move_arm_cond_to_match_guard`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/move_guard.rs#L56[move_guard.rs]\n \n Moves if expression from match arm body into a guard.\n \n@@ -705,6 +735,7 @@ fn handle(action: Action) {\n \n [discrete]\n === `move_bounds_to_where_clause`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/move_bounds.rs#L10[move_bounds.rs]\n \n Moves inline type bounds to a where clause.\n \n@@ -725,6 +756,7 @@ fn apply<T, U, F>(f: F, x: T) -> U where F: FnOnce(T) -> U {\n \n [discrete]\n === `move_guard_to_arm_body`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/move_guard.rs#L8[move_guard.rs]\n \n Moves match guard into match arm body.\n \n@@ -755,6 +787,7 @@ fn handle(action: Action) {\n \n [discrete]\n === `remove_dbg`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/remove_dbg.rs#L8[remove_dbg.rs]\n \n Removes `dbg!()` macro call.\n \n@@ -775,6 +808,7 @@ fn main() {\n \n [discrete]\n === `remove_hash`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/raw_string.rs#L89[raw_string.rs]\n \n Removes a hash from a raw string literal.\n \n@@ -795,6 +829,7 @@ fn main() {\n \n [discrete]\n === `remove_mut`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/remove_mut.rs#L5[remove_mut.rs]\n \n Removes the `mut` keyword.\n \n@@ -815,6 +850,7 @@ impl Walrus {\n \n [discrete]\n === `reorder_fields`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/reorder_fields.rs#L10[reorder_fields.rs]\n \n Reorder the fields of record literals and record patterns in the same order as in\n the definition.\n@@ -834,6 +870,7 @@ const test: Foo = Foo {foo: 1, bar: 0}\n \n [discrete]\n === `replace_if_let_with_match`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/replace_if_let_with_match.rs#L13[replace_if_let_with_match.rs]\n \n Replaces `if let` with an else branch with a `match` expression.\n \n@@ -865,6 +902,7 @@ fn handle(action: Action) {\n \n [discrete]\n === `replace_let_with_if_let`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/replace_let_with_if_let.rs#L14[replace_let_with_if_let.rs]\n \n Replaces `let` with an `if-let`.\n \n@@ -892,6 +930,7 @@ fn compute() -> Option<i32> { None }\n \n [discrete]\n === `replace_qualified_name_with_use`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs#L6[replace_qualified_name_with_use.rs]\n \n Adds a use statement for a given fully-qualified name.\n \n@@ -910,6 +949,7 @@ fn process(map: HashMap<String, String>) {}\n \n [discrete]\n === `replace_unwrap_with_match`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/replace_unwrap_with_match.rs#L17[replace_unwrap_with_match.rs]\n \n Replaces `unwrap` a `match` expression. Works for Result and Option.\n \n@@ -937,6 +977,7 @@ fn main() {\n \n [discrete]\n === `split_import`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/split_import.rs#L7[split_import.rs]\n \n Wraps the tail of import into braces.\n \n@@ -953,6 +994,7 @@ use std::{collections::HashMap};\n \n [discrete]\n === `unwrap_block`\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_assists/src/handlers/unwrap_block.rs#L9[unwrap_block.rs]\n \n This assist removes if...else, for, while and loop control statements to just keep the body.\n "}, {"sha": "12812fa0be7e32f8c020a19b17fd5f468aac8bdb", "filename": "docs/user/generated_features.adoc", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/62564008f7123917063066943a789ba651f99f8d/docs%2Fuser%2Fgenerated_features.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/62564008f7123917063066943a789ba651f99f8d/docs%2Fuser%2Fgenerated_features.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_features.adoc?ref=62564008f7123917063066943a789ba651f99f8d", "patch": "@@ -1,5 +1,5 @@\n === Expand Macro Recursively\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/expand_macro.rs[expand_macro.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/expand_macro.rs#L15[expand_macro.rs]\n \n Shows the full macro expansion of the macro at current cursor.\n \n@@ -11,7 +11,7 @@ Shows the full macro expansion of the macro at current cursor.\n \n \n === Extend Selection\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/extend_selection.rs[extend_selection.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/extend_selection.rs#L15[extend_selection.rs]\n \n Extends the current selection to the encompassing syntactic construct\n (expression, statement, item, module, etc). It works with multiple cursors.\n@@ -24,7 +24,7 @@ Extends the current selection to the encompassing syntactic construct\n \n \n === File Structure\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/display/structure.rs[structure.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/display/structure.rs#L17[structure.rs]\n \n Provides a tree of the symbols defined in the file. Can be used to\n \n@@ -40,7 +40,7 @@ Provides a tree of the symbols defined in the file. Can be used to\n \n \n === Go to Definition\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_definition.rs[goto_definition.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_definition.rs#L18[goto_definition.rs]\n \n Navigates to the definition of an identifier.\n \n@@ -52,7 +52,7 @@ Navigates to the definition of an identifier.\n \n \n === Go to Implementation\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_implementation.rs[goto_implementation.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_implementation.rs#L7[goto_implementation.rs]\n \n Navigates to the impl block of structs, enums or traits. Also implemented as a code lens.\n \n@@ -64,7 +64,7 @@ Navigates to the impl block of structs, enums or traits. Also implemented as a c\n \n \n === Go to Type Definition\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_type_definition.rs[goto_type_definition.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_type_definition.rs#L6[goto_type_definition.rs]\n \n Navigates to the type of an identifier.\n \n@@ -76,14 +76,14 @@ Navigates to the type of an identifier.\n \n \n === Hover\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/hover.rs[hover.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/hover.rs#L63[hover.rs]\n \n Shows additional information, like type of an expression or documentation for definition when \"focusing\" code.\n Focusing is usually hovering with a mouse, but can also be triggered with a shortcut.\n \n \n === Inlay Hints\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/inlay_hints.rs[inlay_hints.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/inlay_hints.rs#L40[inlay_hints.rs]\n \n rust-analyzer shows additional information inline with the source code.\n Editors usually render this using read-only virtual text snippets interspersed with code.\n@@ -106,7 +106,7 @@ https://github.com/rust-analyzer/rust-analyzer/issues/1623[1], https://github.co\n \n \n === Join Lines\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/join_lines.rs[join_lines.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/join_lines.rs#L12[join_lines.rs]\n \n Join selected lines into one, smartly fixing up whitespace, trailing commas, and braces.\n \n@@ -118,7 +118,7 @@ Join selected lines into one, smartly fixing up whitespace, trailing commas, and\n \n \n === Magic Completions\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/completion.rs[completion.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/completion.rs#L38[completion.rs]\n \n In addition to usual reference completion, rust-analyzer provides some \u2728magic\u2728\n completions as well:\n@@ -163,7 +163,7 @@ mod tests {\n \n \n === Matching Brace\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/matching_brace.rs[matching_brace.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/matching_brace.rs#L3[matching_brace.rs]\n \n If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n moves cursor to the matching brace. It uses the actual parser to determine\n@@ -177,7 +177,7 @@ braces, so it won't confuse generics with comparisons.\n \n \n === On Typing Assists\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/typing.rs[typing.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/typing.rs#L35[typing.rs]\n \n Some features trigger on typing certain characters:\n \n@@ -187,7 +187,7 @@ Some features trigger on typing certain characters:\n \n \n === Parent Module\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/parent_module.rs[parent_module.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/parent_module.rs#L12[parent_module.rs]\n \n Navigates to the parent module of the current module.\n \n@@ -199,7 +199,7 @@ Navigates to the parent module of the current module.\n \n \n === Run\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/runnables.rs[runnables.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/runnables.rs#L45[runnables.rs]\n \n Shows a popup suggesting to run a test/benchmark/binary **at the current cursor\n location**. Super useful for repeatedly running just a single test. Do bind this\n@@ -213,7 +213,7 @@ to a shortcut!\n \n \n === Semantic Syntax Highlighting\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/syntax_highlighting.rs[syntax_highlighting.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/syntax_highlighting.rs#L33[syntax_highlighting.rs]\n \n rust-analyzer highlights the code semantically.\n For example, `bar` in `foo::Bar` might be colored differently depending on whether `Bar` is an enum or a trait.\n@@ -225,7 +225,7 @@ We also give special modifier for `mut` and `&mut` local variables.\n \n \n === Show Syntax Tree\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/syntax_tree.rs[syntax_tree.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/syntax_tree.rs#L9[syntax_tree.rs]\n \n Shows the parse tree of the current file. It exists mostly for debugging\n rust-analyzer itself.\n@@ -238,7 +238,7 @@ rust-analyzer itself.\n \n \n === Status\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/status.rs[status.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/status.rs#L27[status.rs]\n \n Shows internal statistic about memory usage of rust-analyzer.\n \n@@ -250,7 +250,7 @@ Shows internal statistic about memory usage of rust-analyzer.\n \n \n === Structural Seach and Replace\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/ssr.rs[ssr.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/ssr.rs#L26[ssr.rs]\n \n Search and replace with named wildcards that will match any expression.\n The syntax for a structural search replace command is `<search_pattern> ==>> <replace_pattern>`.\n@@ -275,7 +275,7 @@ String::from((y + 5).foo(z))\n \n \n === Workspace Symbol\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_db/src/symbol_index.rs[symbol_index.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_db/src/symbol_index.rs#L113[symbol_index.rs]\n \n Uses fuzzy-search to find types, modules and functions by name across your\n project and dependencies. This is **the** most useful feature, which improves code"}, {"sha": "5511c01d5487610a0ab8abef7924358f3b55cba5", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/62564008f7123917063066943a789ba651f99f8d/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62564008f7123917063066943a789ba651f99f8d/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=62564008f7123917063066943a789ba651f99f8d", "patch": "@@ -61,18 +61,18 @@ fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n }\n \n fn extract_comment_blocks(text: &str) -> Vec<Vec<String>> {\n-    do_extract_comment_blocks(text, false)\n+    do_extract_comment_blocks(text, false).into_iter().map(|(_line, block)| block).collect()\n }\n \n fn extract_comment_blocks_with_empty_lines(tag: &str, text: &str) -> Vec<CommentBlock> {\n     assert!(tag.starts_with(char::is_uppercase));\n     let tag = format!(\"{}:\", tag);\n     let mut res = Vec::new();\n-    for mut block in do_extract_comment_blocks(text, true) {\n+    for (line, mut block) in do_extract_comment_blocks(text, true) {\n         let first = block.remove(0);\n         if first.starts_with(&tag) {\n             let id = first[tag.len()..].trim().to_string();\n-            let block = CommentBlock { id, contents: block };\n+            let block = CommentBlock { id, line, contents: block };\n             res.push(block);\n         }\n     }\n@@ -81,43 +81,51 @@ fn extract_comment_blocks_with_empty_lines(tag: &str, text: &str) -> Vec<Comment\n \n struct CommentBlock {\n     id: String,\n+    line: usize,\n     contents: Vec<String>,\n }\n \n-fn do_extract_comment_blocks(text: &str, allow_blocks_with_empty_lines: bool) -> Vec<Vec<String>> {\n+fn do_extract_comment_blocks(\n+    text: &str,\n+    allow_blocks_with_empty_lines: bool,\n+) -> Vec<(usize, Vec<String>)> {\n     let mut res = Vec::new();\n \n     let prefix = \"// \";\n     let lines = text.lines().map(str::trim_start);\n \n-    let mut block = vec![];\n-    for line in lines {\n+    let mut block = (0, vec![]);\n+    for (line_num, line) in lines.enumerate() {\n         if line == \"//\" && allow_blocks_with_empty_lines {\n-            block.push(String::new());\n+            block.1.push(String::new());\n             continue;\n         }\n \n         let is_comment = line.starts_with(prefix);\n         if is_comment {\n-            block.push(line[prefix.len()..].to_string());\n-        } else if !block.is_empty() {\n-            res.push(mem::replace(&mut block, Vec::new()));\n+            block.1.push(line[prefix.len()..].to_string());\n+        } else {\n+            if !block.1.is_empty() {\n+                res.push(mem::take(&mut block));\n+            }\n+            block.0 = line_num + 2;\n         }\n     }\n-    if !block.is_empty() {\n-        res.push(mem::replace(&mut block, Vec::new()))\n+    if !block.1.is_empty() {\n+        res.push(block)\n     }\n     res\n }\n \n #[derive(Debug)]\n struct Location {\n     file: PathBuf,\n+    line: usize,\n }\n \n impl Location {\n-    fn new(file: PathBuf) -> Self {\n-        Self { file }\n+    fn new(file: PathBuf, line: usize) -> Self {\n+        Self { file, line }\n     }\n }\n \n@@ -128,8 +136,9 @@ impl fmt::Display for Location {\n         let name = self.file.file_name().unwrap();\n         write!(\n             f,\n-            \"https://github.com/rust-analyzer/rust-analyzer/blob/master/{}[{}]\",\n+            \"https://github.com/rust-analyzer/rust-analyzer/blob/master/{}#L{}[{}]\",\n             path,\n+            self.line,\n             name.to_str().unwrap()\n         )\n     }"}, {"sha": "6c1be53503dc42ef878072d1581639556a77ad51", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62564008f7123917063066943a789ba651f99f8d/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62564008f7123917063066943a789ba651f99f8d/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=62564008f7123917063066943a789ba651f99f8d", "patch": "@@ -64,7 +64,7 @@ impl Assist {\n                 assert_eq!(lines.next().unwrap().as_str(), \"->\");\n                 assert_eq!(lines.next().unwrap().as_str(), \"```\");\n                 let after = take_until(lines.by_ref(), \"```\");\n-                let location = Location::new(path.to_path_buf());\n+                let location = Location::new(path.to_path_buf(), block.line);\n                 acc.push(Assist { id, location, doc, before, after })\n             }\n \n@@ -90,6 +90,7 @@ impl fmt::Display for Assist {\n         writeln!(\n             f,\n             \"[discrete]\\n=== `{}`\n+**Source:** {}\n \n {}\n \n@@ -101,6 +102,7 @@ impl fmt::Display for Assist {\n ```rust\n {}```\",\n             self.id,\n+            self.location,\n             self.doc,\n             hide_hash_comments(&before),\n             hide_hash_comments(&after)"}, {"sha": "31bc3839d0715183057f10227802e59e55093ec7", "filename": "xtask/src/codegen/gen_feature_docs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62564008f7123917063066943a789ba651f99f8d/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62564008f7123917063066943a789ba651f99f8d/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs?ref=62564008f7123917063066943a789ba651f99f8d", "patch": "@@ -40,7 +40,8 @@ impl Feature {\n                 let id = block.id;\n                 assert!(is_valid_feature_name(&id), \"invalid feature name: {:?}\", id);\n                 let doc = block.contents.join(\"\\n\");\n-                acc.push(Feature { id, location: Location::new(path.clone()), doc })\n+                let location = Location::new(path.clone(), block.line);\n+                acc.push(Feature { id, location, doc })\n             }\n \n             Ok(())"}]}