{"sha": "c73d5ce8ab0033d88027e6ab3db956731daf544e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3M2Q1Y2U4YWIwMDMzZDg4MDI3ZTZhYjNkYjk1NjczMWRhZjU0NGU=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-14T22:42:40Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-15T05:23:37Z"}, "message": "Use str::from_utf8_lossy() in os::args(), add os::args_as_bytes()\n\nos::args() was using str::raw::from_c_str(), which would assert if the\nC-string wasn't valid UTF-8. Switch to using from_utf8_lossy() instead,\nand add a separate function os::args_as_bytes() that returns the ~[u8]\nbyte-vectors instead.", "tree": {"sha": "c250557bbb8be9072ecd5e3b02b042cf1d23330a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c250557bbb8be9072ecd5e3b02b042cf1d23330a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c73d5ce8ab0033d88027e6ab3db956731daf544e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c73d5ce8ab0033d88027e6ab3db956731daf544e", "html_url": "https://github.com/rust-lang/rust/commit/c73d5ce8ab0033d88027e6ab3db956731daf544e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c73d5ce8ab0033d88027e6ab3db956731daf544e/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cc8eb7b8e57a09652f18c466c37946e24ae8021", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc8eb7b8e57a09652f18c466c37946e24ae8021", "html_url": "https://github.com/rust-lang/rust/commit/8cc8eb7b8e57a09652f18c466c37946e24ae8021"}], "stats": {"total": 75, "additions": 50, "deletions": 25}, "files": [{"sha": "69d51025234c8040532845f096b4e97ba7f7b143", "filename": "src/libstd/os.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c73d5ce8ab0033d88027e6ab3db956731daf544e/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73d5ce8ab0033d88027e6ab3db956731daf544e/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=c73d5ce8ab0033d88027e6ab3db956731daf544e", "patch": "@@ -53,6 +53,8 @@ use ptr::RawPtr;\n \n #[cfg(unix)]\n use c_str::ToCStr;\n+#[cfg(windows)]\n+use str::OwnedStr;\n \n /// Delegates to the libc close() function, returning the same return value.\n pub fn close(fd: int) -> int {\n@@ -722,10 +724,12 @@ pub fn get_exit_status() -> int {\n }\n \n #[cfg(target_os = \"macos\")]\n-unsafe fn load_argc_and_argv(argc: int, argv: **c_char) -> ~[~str] {\n+unsafe fn load_argc_and_argv(argc: int, argv: **c_char) -> ~[~[u8]] {\n+    use c_str::CString;\n+\n     let mut args = ~[];\n     for i in range(0u, argc as uint) {\n-        args.push(str::raw::from_c_str(*argv.offset(i as int)));\n+        args.push(CString::new(*argv.offset(i as int), false).as_bytes_no_nul().to_owned())\n     }\n     args\n }\n@@ -736,7 +740,7 @@ unsafe fn load_argc_and_argv(argc: int, argv: **c_char) -> ~[~str] {\n  * Returns a list of the command line arguments.\n  */\n #[cfg(target_os = \"macos\")]\n-fn real_args() -> ~[~str] {\n+fn real_args_as_bytes() -> ~[~[u8]] {\n     unsafe {\n         let (argc, argv) = (*_NSGetArgc() as int,\n                             *_NSGetArgv() as **c_char);\n@@ -747,7 +751,7 @@ fn real_args() -> ~[~str] {\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"freebsd\")]\n-fn real_args() -> ~[~str] {\n+fn real_args_as_bytes() -> ~[~[u8]] {\n     use rt;\n \n     match rt::args::clone() {\n@@ -756,6 +760,11 @@ fn real_args() -> ~[~str] {\n     }\n }\n \n+#[cfg(not(windows))]\n+fn real_args() -> ~[~str] {\n+    real_args_as_bytes().move_iter().map(|v| str::from_utf8_lossy(v).into_owned()).collect()\n+}\n+\n #[cfg(windows)]\n fn real_args() -> ~[~str] {\n     use vec;\n@@ -786,6 +795,11 @@ fn real_args() -> ~[~str] {\n     return args;\n }\n \n+#[cfg(windows)]\n+fn real_args_as_bytes() -> ~[~[u8]] {\n+    real_args().move_iter().map(|s| s.into_bytes()).collect()\n+}\n+\n type LPCWSTR = *u16;\n \n #[cfg(windows)]\n@@ -803,10 +817,19 @@ extern \"system\" {\n \n /// Returns the arguments which this program was started with (normally passed\n /// via the command line).\n+///\n+/// The arguments are interpreted as utf-8, with invalid bytes replaced with \\uFFFD.\n+/// See `str::from_utf8_lossy` for details.\n pub fn args() -> ~[~str] {\n     real_args()\n }\n \n+/// Returns the arguments which this program was started with (normally passed\n+/// via the command line) as byte vectors.\n+pub fn args_as_bytes() -> ~[~[u8]] {\n+    real_args_as_bytes()\n+}\n+\n #[cfg(target_os = \"macos\")]\n extern {\n     // These functions are in crt_externs.h."}, {"sha": "c417ea375fd38186218b6d3e0740321db73e42b8", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c73d5ce8ab0033d88027e6ab3db956731daf544e/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73d5ce8ab0033d88027e6ab3db956731daf544e/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=c73d5ce8ab0033d88027e6ab3db956731daf544e", "patch": "@@ -36,8 +36,8 @@ pub unsafe fn init(argc: int, argv: **u8) { realargs::init(argc, argv) }\n #[cfg(test)]      pub unsafe fn cleanup() { realargs::cleanup() }\n \n /// Take the global arguments from global storage.\n-#[cfg(not(test))] pub fn take() -> Option<~[~str]> { imp::take() }\n-#[cfg(test)]      pub fn take() -> Option<~[~str]> {\n+#[cfg(not(test))] pub fn take() -> Option<~[~[u8]]> { imp::take() }\n+#[cfg(test)]      pub fn take() -> Option<~[~[u8]]> {\n     match realargs::take() {\n         realstd::option::Some(a) => Some(a),\n         realstd::option::None => None,\n@@ -47,12 +47,12 @@ pub unsafe fn init(argc: int, argv: **u8) { realargs::init(argc, argv) }\n /// Give the global arguments to global storage.\n ///\n /// It is an error if the arguments already exist.\n-#[cfg(not(test))] pub fn put(args: ~[~str]) { imp::put(args) }\n-#[cfg(test)]      pub fn put(args: ~[~str]) { realargs::put(args) }\n+#[cfg(not(test))] pub fn put(args: ~[~[u8]]) { imp::put(args) }\n+#[cfg(test)]      pub fn put(args: ~[~[u8]]) { realargs::put(args) }\n \n /// Make a clone of the global arguments.\n-#[cfg(not(test))] pub fn clone() -> Option<~[~str]> { imp::clone() }\n-#[cfg(test)]      pub fn clone() -> Option<~[~str]> {\n+#[cfg(not(test))] pub fn clone() -> Option<~[~[u8]]> { imp::clone() }\n+#[cfg(test)]      pub fn clone() -> Option<~[~[u8]]> {\n     match realargs::clone() {\n         realstd::option::Some(a) => Some(a),\n         realstd::option::None => None,\n@@ -65,15 +65,12 @@ pub unsafe fn init(argc: int, argv: **u8) { realargs::init(argc, argv) }\n mod imp {\n     use cast;\n     use clone::Clone;\n-    #[cfg(not(test))] use libc;\n     use option::{Option, Some, None};\n     use ptr::RawPtr;\n     use iter::Iterator;\n-    #[cfg(not(test))] use str;\n     use unstable::finally::Finally;\n     use unstable::mutex::{Mutex, MUTEX_INIT};\n     use mem;\n-    #[cfg(not(test))] use vec;\n \n     static mut global_args_ptr: uint = 0;\n     static mut lock: Mutex = MUTEX_INIT;\n@@ -90,26 +87,26 @@ mod imp {\n         lock.destroy();\n     }\n \n-    pub fn take() -> Option<~[~str]> {\n+    pub fn take() -> Option<~[~[u8]]> {\n         with_lock(|| unsafe {\n             let ptr = get_global_ptr();\n             let val = mem::replace(&mut *ptr, None);\n-            val.as_ref().map(|s: &~~[~str]| (**s).clone())\n+            val.as_ref().map(|s: &~~[~[u8]]| (**s).clone())\n         })\n     }\n \n-    pub fn put(args: ~[~str]) {\n+    pub fn put(args: ~[~[u8]]) {\n         with_lock(|| unsafe {\n             let ptr = get_global_ptr();\n             rtassert!((*ptr).is_none());\n             (*ptr) = Some(~args.clone());\n         })\n     }\n \n-    pub fn clone() -> Option<~[~str]> {\n+    pub fn clone() -> Option<~[~[u8]]> {\n         with_lock(|| unsafe {\n             let ptr = get_global_ptr();\n-            (*ptr).as_ref().map(|s: &~~[~str]| (**s).clone())\n+            (*ptr).as_ref().map(|s: &~~[~[u8]]| (**s).clone())\n         })\n     }\n \n@@ -126,15 +123,20 @@ mod imp {\n         })\n     }\n \n-    fn get_global_ptr() -> *mut Option<~~[~str]> {\n+    fn get_global_ptr() -> *mut Option<~~[~[u8]]> {\n         unsafe { cast::transmute(&global_args_ptr) }\n     }\n \n     // Copied from `os`.\n     #[cfg(not(test))]\n-    unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> ~[~str] {\n+    unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> ~[~[u8]] {\n+        use c_str::CString;\n+        use {vec, libc};\n+        use vec::CloneableVector;\n+\n         vec::from_fn(argc as uint, |i| {\n-            str::raw::from_c_str(*(argv as **libc::c_char).offset(i as int))\n+            let cs = CString::new(*(argv as **libc::c_char).offset(i as int), false);\n+            cs.as_bytes_no_nul().to_owned()\n         })\n     }\n \n@@ -149,7 +151,7 @@ mod imp {\n             // Preserve the actual global state.\n             let saved_value = take();\n \n-            let expected = ~[~\"happy\", ~\"today?\"];\n+            let expected = ~[bytes!(\"happy\").to_owned(), bytes!(\"today?\").to_owned()];\n \n             put(expected.clone());\n             assert!(clone() == Some(expected.clone()));\n@@ -179,15 +181,15 @@ mod imp {\n     pub fn cleanup() {\n     }\n \n-    pub fn take() -> Option<~[~str]> {\n+    pub fn take() -> Option<~[~[u8]]> {\n         fail!()\n     }\n \n-    pub fn put(_args: ~[~str]) {\n+    pub fn put(_args: ~[~[u8]]) {\n         fail!()\n     }\n \n-    pub fn clone() -> Option<~[~str]> {\n+    pub fn clone() -> Option<~[~[u8]]> {\n         fail!()\n     }\n }"}]}