{"sha": "bc287b8f9b7711a38d97be3b619758bb05d54c45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMjg3YjhmOWI3NzExYTM4ZDk3YmUzYjYxOTc1OGJiMDVkNTRjNDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T14:23:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T15:37:36Z"}, "message": "Unconfuse expression and pattern field init shorthands", "tree": {"sha": "a9c3d129e8781451f7425e547317d82dd1ef9bed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9c3d129e8781451f7425e547317d82dd1ef9bed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc287b8f9b7711a38d97be3b619758bb05d54c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc287b8f9b7711a38d97be3b619758bb05d54c45", "html_url": "https://github.com/rust-lang/rust/commit/bc287b8f9b7711a38d97be3b619758bb05d54c45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc287b8f9b7711a38d97be3b619758bb05d54c45/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "html_url": "https://github.com/rust-lang/rust/commit/fa3c449d8f5a67865cab8d4717b3e32dca5b672a"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "4d8cd98c74cf30e861b62627c6857524a124afc5", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc287b8f9b7711a38d97be3b619758bb05d54c45/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc287b8f9b7711a38d97be3b619758bb05d54c45/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=bc287b8f9b7711a38d97be3b619758bb05d54c45", "patch": "@@ -459,7 +459,7 @@ fn highlight_element(\n                     highlight_def(db, def) | HighlightModifier::Definition\n                 }\n                 Some(NameClass::ConstReference(def)) => highlight_def(db, def),\n-                Some(NameClass::FieldShorthand { field, .. }) => {\n+                Some(NameClass::PatFieldShorthand { field, .. }) => {\n                     let mut h = HighlightTag::Field.into();\n                     if let Definition::Field(field) = field {\n                         if let VariantDef::Union(_) = field.parent_def(db) {"}, {"sha": "a2682d73ceb771a9b33f6c207bc41abcb66001c8", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bc287b8f9b7711a38d97be3b619758bb05d54c45/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc287b8f9b7711a38d97be3b619758bb05d54c45/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=bc287b8f9b7711a38d97be3b619758bb05d54c45", "patch": "@@ -83,27 +83,31 @@ pub enum NameClass {\n     Definition(Definition),\n     /// `None` in `if let None = Some(82) {}`\n     ConstReference(Definition),\n-    FieldShorthand {\n+    /// `field` in `if let Foo { field } = todo!() {}`\n+    PatFieldShorthand {\n         local: Local,\n         field: Definition,\n     },\n }\n \n impl NameClass {\n     pub fn definition(self, db: &dyn HirDatabase) -> Option<Definition> {\n-        Some(match self {\n+        let res = match self {\n             NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) => it,\n             NameClass::ConstReference(_) => return None,\n-            NameClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n-        })\n+            /// Both `local` and `field` are definitions here, but only `local`\n+            /// is the definition which is introduced by this name.\n+            NameClass::PatFieldShorthand { local, field: _ } => Definition::Local(local),\n+        };\n+        Some(res)\n     }\n \n     pub fn definition_or_reference(self, db: &dyn HirDatabase) -> Definition {\n         match self {\n             NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n-            NameClass::FieldShorthand { local: _, field } => field,\n+            NameClass::PatFieldShorthand { local: _, field } => field,\n         }\n     }\n }\n@@ -161,7 +165,7 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n                     if record_pat_field.name_ref().is_none() {\n                         if let Some(field) = sema.resolve_record_pat_field(&record_pat_field) {\n                             let field = Definition::Field(field);\n-                            return Some(NameClass::FieldShorthand { local, field });\n+                            return Some(NameClass::PatFieldShorthand { local, field });\n                         }\n                     }\n                 }"}, {"sha": "43b8560ca145bc4ad8d024747cbf426433d450e9", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc287b8f9b7711a38d97be3b619758bb05d54c45/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc287b8f9b7711a38d97be3b619758bb05d54c45/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=bc287b8f9b7711a38d97be3b619758bb05d54c45", "patch": "@@ -314,7 +314,7 @@ impl<'a> FindUsages<'a> {\n \n     fn found_name(&self, name: &ast::Name, sink: &mut dyn FnMut(Reference) -> bool) -> bool {\n         match classify_name(self.sema, name) {\n-            Some(NameClass::FieldShorthand { local: _, field }) => {\n+            Some(NameClass::PatFieldShorthand { local: _, field }) => {\n                 let reference = match self.def {\n                     Definition::Field(_) if &field == self.def => Reference {\n                         file_range: self.sema.original_range(name.syntax()),"}]}