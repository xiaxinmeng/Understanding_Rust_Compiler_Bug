{"sha": "68abd9a99976a84cca6dcb5459cc3bc279470b4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YWJkOWE5OTk3NmE4NGNjYTZkY2I1NDU5Y2MzYmMyNzk0NzBiNGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-13T02:33:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-13T02:33:41Z"}, "message": "Rollup merge of #59056 - scottmcm:even-fewer-lifetimes, r=sfackler\n\nUse lifetime contravariance to elide more lifetimes in core+alloc+std\n\nSample:\n```diff\n-    impl<'a, 'b, A: ?Sized, B: ?Sized> PartialEq<&'b mut B> for &'a mut A where A: PartialEq<B> {\n+    impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A where A: PartialEq<B> {\n         #[inline]\n-        fn eq(&self, other: &&'b mut B) -> bool { PartialEq::eq(*self, *other) }\n+        fn eq(&self, other: &&mut B) -> bool { PartialEq::eq(*self, *other) }\n         #[inline]\n-        fn ne(&self, other: &&'b mut B) -> bool { PartialEq::ne(*self, *other) }\n+        fn ne(&self, other: &&mut B) -> bool { PartialEq::ne(*self, *other) }\n     }\n```\n\n[I didn't know this worked](https://internals.rust-lang.org/t/why-can-you-use-different-unconstrained-lifetimes-to-implement-traits/9544/2?u=scottmcm) until recently, but since defining methods contravariantly in their lifetimes this way has worked back to Rust 1.0, we might as well take advantage of combining it with IHLE.", "tree": {"sha": "7439d44a0d4713408af0226368405f54a661b57c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7439d44a0d4713408af0226368405f54a661b57c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68abd9a99976a84cca6dcb5459cc3bc279470b4c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJciGwFCRBK7hj4Ov3rIwAAdHIIAHhiP5jhx6/kdBDVqF/ycC4M\neO99ZSAibKtEySROn8A8yZ2tMLd4mUOJEOUr6Pa6v8Asr9DFUhpZz1yXK4p2AvxR\nI/BQbk1912HbCnPTiGDbGgMuM/vOhzrOP2WWc154GkrsNDJhtK9pxscRbmTvPpOS\nJplaJdPG0cLN/5A8dNIb79+X/5CNdN8XEJULMLqRzO2pS6F3Yg/WkHBLrS1Uln9E\n0qNddLQuecBdhEpMRzMWtKO0V/9qKmzy4H0EL4NWC53PbHCppAYcuA/tjE2DYcVA\nszscM++9ktOTkGsG/vfKC+sZmrc8ToONCH5Swd1MC1AK/HxlDdE1U5DBXpNahC8=\n=habA\n-----END PGP SIGNATURE-----\n", "payload": "tree 7439d44a0d4713408af0226368405f54a661b57c\nparent fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44\nparent df4ea90b39c808e858e05f3b4bb05fc29f812d26\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1552444421 +0100\ncommitter GitHub <noreply@github.com> 1552444421 +0100\n\nRollup merge of #59056 - scottmcm:even-fewer-lifetimes, r=sfackler\n\nUse lifetime contravariance to elide more lifetimes in core+alloc+std\n\nSample:\n```diff\n-    impl<'a, 'b, A: ?Sized, B: ?Sized> PartialEq<&'b mut B> for &'a mut A where A: PartialEq<B> {\n+    impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A where A: PartialEq<B> {\n         #[inline]\n-        fn eq(&self, other: &&'b mut B) -> bool { PartialEq::eq(*self, *other) }\n+        fn eq(&self, other: &&mut B) -> bool { PartialEq::eq(*self, *other) }\n         #[inline]\n-        fn ne(&self, other: &&'b mut B) -> bool { PartialEq::ne(*self, *other) }\n+        fn ne(&self, other: &&mut B) -> bool { PartialEq::ne(*self, *other) }\n     }\n```\n\n[I didn't know this worked](https://internals.rust-lang.org/t/why-can-you-use-different-unconstrained-lifetimes-to-implement-traits/9544/2?u=scottmcm) until recently, but since defining methods contravariantly in their lifetimes this way has worked back to Rust 1.0, we might as well take advantage of combining it with IHLE.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68abd9a99976a84cca6dcb5459cc3bc279470b4c", "html_url": "https://github.com/rust-lang/rust/commit/68abd9a99976a84cca6dcb5459cc3bc279470b4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68abd9a99976a84cca6dcb5459cc3bc279470b4c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44", "html_url": "https://github.com/rust-lang/rust/commit/fc19f0e75b57e0306a7ca9c132e27bfac0bb3e44"}, {"sha": "df4ea90b39c808e858e05f3b4bb05fc29f812d26", "url": "https://api.github.com/repos/rust-lang/rust/commits/df4ea90b39c808e858e05f3b4bb05fc29f812d26", "html_url": "https://github.com/rust-lang/rust/commit/df4ea90b39c808e858e05f3b4bb05fc29f812d26"}], "stats": {"total": 186, "additions": 93, "deletions": 93}, "files": [{"sha": "9bce142b483f22f06c996aa8269a20eb19c7d59b", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -489,7 +489,7 @@ impl<T: ?Sized> From<Box<T>> for Pin<Box<T>> {\n }\n \n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n-impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n+impl<T: Copy> From<&[T]> for Box<[T]> {\n     /// Converts a `&[T]` into a `Box<[T]>`\n     ///\n     /// This conversion allocates on the heap\n@@ -503,15 +503,15 @@ impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n     ///\n     /// println!(\"{:?}\", boxed_slice);\n     /// ```\n-    fn from(slice: &'a [T]) -> Box<[T]> {\n+    fn from(slice: &[T]) -> Box<[T]> {\n         let mut boxed = unsafe { RawVec::with_capacity(slice.len()).into_box() };\n         boxed.copy_from_slice(slice);\n         boxed\n     }\n }\n \n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n-impl<'a> From<&'a str> for Box<str> {\n+impl From<&str> for Box<str> {\n     /// Converts a `&str` into a `Box<str>`\n     ///\n     /// This conversion allocates on the heap\n@@ -523,7 +523,7 @@ impl<'a> From<&'a str> for Box<str> {\n     /// println!(\"{}\", boxed);\n     /// ```\n     #[inline]\n-    fn from(s: &'a str) -> Box<str> {\n+    fn from(s: &str) -> Box<str> {\n         unsafe { from_boxed_utf8_unchecked(Box::from(s.as_bytes())) }\n     }\n }"}, {"sha": "68eecd97ea11ad1996f42eecbfb3441cb335d249", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -1145,15 +1145,15 @@ impl<T> From<T> for Rc<T> {\n }\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n-impl<'a, T: Clone> From<&'a [T]> for Rc<[T]> {\n+impl<T: Clone> From<&[T]> for Rc<[T]> {\n     #[inline]\n     fn from(v: &[T]) -> Rc<[T]> {\n         <Self as RcFromSlice<T>>::from_slice(v)\n     }\n }\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n-impl<'a> From<&'a str> for Rc<str> {\n+impl From<&str> for Rc<str> {\n     #[inline]\n     fn from(v: &str) -> Rc<str> {\n         let rc = Rc::<[u8]>::from(v.as_bytes());"}, {"sha": "a3e2098695f70c851478c99be85bd59947d51a6d", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -2172,9 +2172,9 @@ impl AsRef<[u8]> for String {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&'a str> for String {\n+impl From<&str> for String {\n     #[inline]\n-    fn from(s: &'a str) -> String {\n+    fn from(s: &str) -> String {\n         s.to_owned()\n     }\n }"}, {"sha": "cd62c3e05244c4399693864ee51fef8311b13c14", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -2182,25 +2182,25 @@ impl<T> AsMut<[T]> for Vec<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: Clone> From<&'a [T]> for Vec<T> {\n+impl<T: Clone> From<&[T]> for Vec<T> {\n     #[cfg(not(test))]\n-    fn from(s: &'a [T]) -> Vec<T> {\n+    fn from(s: &[T]) -> Vec<T> {\n         s.to_vec()\n     }\n     #[cfg(test)]\n-    fn from(s: &'a [T]) -> Vec<T> {\n+    fn from(s: &[T]) -> Vec<T> {\n         crate::slice::to_vec(s)\n     }\n }\n \n #[stable(feature = \"vec_from_mut\", since = \"1.19.0\")]\n-impl<'a, T: Clone> From<&'a mut [T]> for Vec<T> {\n+impl<T: Clone> From<&mut [T]> for Vec<T> {\n     #[cfg(not(test))]\n-    fn from(s: &'a mut [T]) -> Vec<T> {\n+    fn from(s: &mut [T]) -> Vec<T> {\n         s.to_vec()\n     }\n     #[cfg(test)]\n-    fn from(s: &'a mut [T]) -> Vec<T> {\n+    fn from(s: &mut [T]) -> Vec<T> {\n         crate::slice::to_vec(s)\n     }\n }\n@@ -2231,8 +2231,8 @@ impl<T> From<Vec<T>> for Box<[T]> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> From<&'a str> for Vec<u8> {\n-    fn from(s: &'a str) -> Vec<u8> {\n+impl From<&str> for Vec<u8> {\n+    fn from(s: &str) -> Vec<u8> {\n         From::from(s.as_bytes())\n     }\n }"}, {"sha": "dcd9ce6dad756b669fafdaf60ae750516095805d", "filename": "src/libcore/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -139,7 +139,7 @@ macro_rules! array_impls {\n             }\n \n             #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-            impl<'a, T> TryFrom<&'a [T]> for [T; $N] where T: Copy {\n+            impl<T> TryFrom<&[T]> for [T; $N] where T: Copy {\n                 type Error = TryFromSliceError;\n \n                 fn try_from(slice: &[T]) -> Result<[T; $N], TryFromSliceError> {"}, {"sha": "94bed3708369a6999699553eb024a8c0aa465578", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -1004,26 +1004,26 @@ mod impls {\n     // & pointers\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, 'b, A: ?Sized, B: ?Sized> PartialEq<&'b B> for &'a A where A: PartialEq<B> {\n+    impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A where A: PartialEq<B> {\n         #[inline]\n-        fn eq(&self, other: & &'b B) -> bool { PartialEq::eq(*self, *other) }\n+        fn eq(&self, other: & &B) -> bool { PartialEq::eq(*self, *other) }\n         #[inline]\n-        fn ne(&self, other: & &'b B) -> bool { PartialEq::ne(*self, *other) }\n+        fn ne(&self, other: & &B) -> bool { PartialEq::ne(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, 'b, A: ?Sized, B: ?Sized> PartialOrd<&'b B> for &'a A where A: PartialOrd<B> {\n+    impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A where A: PartialOrd<B> {\n         #[inline]\n-        fn partial_cmp(&self, other: &&'b B) -> Option<Ordering> {\n+        fn partial_cmp(&self, other: &&B) -> Option<Ordering> {\n             PartialOrd::partial_cmp(*self, *other)\n         }\n         #[inline]\n-        fn lt(&self, other: & &'b B) -> bool { PartialOrd::lt(*self, *other) }\n+        fn lt(&self, other: & &B) -> bool { PartialOrd::lt(*self, *other) }\n         #[inline]\n-        fn le(&self, other: & &'b B) -> bool { PartialOrd::le(*self, *other) }\n+        fn le(&self, other: & &B) -> bool { PartialOrd::le(*self, *other) }\n         #[inline]\n-        fn ge(&self, other: & &'b B) -> bool { PartialOrd::ge(*self, *other) }\n+        fn ge(&self, other: & &B) -> bool { PartialOrd::ge(*self, *other) }\n         #[inline]\n-        fn gt(&self, other: & &'b B) -> bool { PartialOrd::gt(*self, *other) }\n+        fn gt(&self, other: & &B) -> bool { PartialOrd::gt(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<A: ?Sized> Ord for &A where A: Ord {\n@@ -1036,26 +1036,26 @@ mod impls {\n     // &mut pointers\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, 'b, A: ?Sized, B: ?Sized> PartialEq<&'b mut B> for &'a mut A where A: PartialEq<B> {\n+    impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A where A: PartialEq<B> {\n         #[inline]\n-        fn eq(&self, other: &&'b mut B) -> bool { PartialEq::eq(*self, *other) }\n+        fn eq(&self, other: &&mut B) -> bool { PartialEq::eq(*self, *other) }\n         #[inline]\n-        fn ne(&self, other: &&'b mut B) -> bool { PartialEq::ne(*self, *other) }\n+        fn ne(&self, other: &&mut B) -> bool { PartialEq::ne(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, 'b, A: ?Sized, B: ?Sized> PartialOrd<&'b mut B> for &'a mut A where A: PartialOrd<B> {\n+    impl<A: ?Sized, B: ?Sized> PartialOrd<&mut B> for &mut A where A: PartialOrd<B> {\n         #[inline]\n-        fn partial_cmp(&self, other: &&'b mut B) -> Option<Ordering> {\n+        fn partial_cmp(&self, other: &&mut B) -> Option<Ordering> {\n             PartialOrd::partial_cmp(*self, *other)\n         }\n         #[inline]\n-        fn lt(&self, other: &&'b mut B) -> bool { PartialOrd::lt(*self, *other) }\n+        fn lt(&self, other: &&mut B) -> bool { PartialOrd::lt(*self, *other) }\n         #[inline]\n-        fn le(&self, other: &&'b mut B) -> bool { PartialOrd::le(*self, *other) }\n+        fn le(&self, other: &&mut B) -> bool { PartialOrd::le(*self, *other) }\n         #[inline]\n-        fn ge(&self, other: &&'b mut B) -> bool { PartialOrd::ge(*self, *other) }\n+        fn ge(&self, other: &&mut B) -> bool { PartialOrd::ge(*self, *other) }\n         #[inline]\n-        fn gt(&self, other: &&'b mut B) -> bool { PartialOrd::gt(*self, *other) }\n+        fn gt(&self, other: &&mut B) -> bool { PartialOrd::gt(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<A: ?Sized> Ord for &mut A where A: Ord {\n@@ -1066,18 +1066,18 @@ mod impls {\n     impl<A: ?Sized> Eq for &mut A where A: Eq {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, 'b, A: ?Sized, B: ?Sized> PartialEq<&'b mut B> for &'a A where A: PartialEq<B> {\n+    impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &A where A: PartialEq<B> {\n         #[inline]\n-        fn eq(&self, other: &&'b mut B) -> bool { PartialEq::eq(*self, *other) }\n+        fn eq(&self, other: &&mut B) -> bool { PartialEq::eq(*self, *other) }\n         #[inline]\n-        fn ne(&self, other: &&'b mut B) -> bool { PartialEq::ne(*self, *other) }\n+        fn ne(&self, other: &&mut B) -> bool { PartialEq::ne(*self, *other) }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a, 'b, A: ?Sized, B: ?Sized> PartialEq<&'b B> for &'a mut A where A: PartialEq<B> {\n+    impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &mut A where A: PartialEq<B> {\n         #[inline]\n-        fn eq(&self, other: &&'b B) -> bool { PartialEq::eq(*self, *other) }\n+        fn eq(&self, other: &&B) -> bool { PartialEq::eq(*self, *other) }\n         #[inline]\n-        fn ne(&self, other: &&'b B) -> bool { PartialEq::ne(*self, *other) }\n+        fn ne(&self, other: &&B) -> bool { PartialEq::ne(*self, *other) }\n     }\n }"}, {"sha": "b5c20582986b262368344a8df54b27b495c59f5d", "filename": "src/libcore/internal_macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibcore%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibcore%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Finternal_macros.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -37,21 +37,21 @@ macro_rules! forward_ref_binop {\n         }\n \n         #[$attr]\n-        impl<'a> $imp<&'a $u> for $t {\n+        impl $imp<&$u> for $t {\n             type Output = <$t as $imp<$u>>::Output;\n \n             #[inline]\n-            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n+            fn $method(self, other: &$u) -> <$t as $imp<$u>>::Output {\n                 $imp::$method(self, *other)\n             }\n         }\n \n         #[$attr]\n-        impl<'a, 'b> $imp<&'a $u> for &'b $t {\n+        impl $imp<&$u> for &$t {\n             type Output = <$t as $imp<$u>>::Output;\n \n             #[inline]\n-            fn $method(self, other: &'a $u) -> <$t as $imp<$u>>::Output {\n+            fn $method(self, other: &$u) -> <$t as $imp<$u>>::Output {\n                 $imp::$method(*self, *other)\n             }\n         }\n@@ -67,9 +67,9 @@ macro_rules! forward_ref_op_assign {\n     };\n     (impl $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n         #[$attr]\n-        impl<'a> $imp<&'a $u> for $t {\n+        impl $imp<&$u> for $t {\n             #[inline]\n-            fn $method(&mut self, other: &'a $u) {\n+            fn $method(&mut self, other: &$u) {\n                 $imp::$method(self, *other);\n             }\n         }"}, {"sha": "d288ca449dff3116579f923e4eaba4f503beefb0", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -2837,15 +2837,15 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n-impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n-    fn from(reference: &'a mut T) -> Self {\n+impl<T: ?Sized> From<&mut T> for Unique<T> {\n+    fn from(reference: &mut T) -> Self {\n         unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n-impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n-    fn from(reference: &'a T) -> Self {\n+impl<T: ?Sized> From<&T> for Unique<T> {\n+    fn from(reference: &T) -> Self {\n         unsafe { Unique { pointer: reference as *const T, _marker: PhantomData } }\n     }\n }\n@@ -3049,17 +3049,17 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n+impl<T: ?Sized> From<&mut T> for NonNull<T> {\n     #[inline]\n-    fn from(reference: &'a mut T) -> Self {\n+    fn from(reference: &mut T) -> Self {\n         unsafe { NonNull { pointer: reference as *mut T } }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n+impl<T: ?Sized> From<&T> for NonNull<T> {\n     #[inline]\n-    fn from(reference: &'a T) -> Self {\n+    fn from(reference: &T) -> Self {\n         unsafe { NonNull { pointer: reference as *const T } }\n     }\n }"}, {"sha": "f2111f2d9e0281f60b838fe650a2fea579b1879a", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -850,7 +850,7 @@ impl<T, S> Default for HashSet<T, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b, T, S> BitOr<&'b HashSet<T, S>> for &'a HashSet<T, S>\n+impl<T, S> BitOr<&HashSet<T, S>> for &HashSet<T, S>\n     where T: Eq + Hash + Clone,\n           S: BuildHasher + Default\n {\n@@ -882,7 +882,7 @@ impl<'a, 'b, T, S> BitOr<&'b HashSet<T, S>> for &'a HashSet<T, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b, T, S> BitAnd<&'b HashSet<T, S>> for &'a HashSet<T, S>\n+impl<T, S> BitAnd<&HashSet<T, S>> for &HashSet<T, S>\n     where T: Eq + Hash + Clone,\n           S: BuildHasher + Default\n {\n@@ -914,7 +914,7 @@ impl<'a, 'b, T, S> BitAnd<&'b HashSet<T, S>> for &'a HashSet<T, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b, T, S> BitXor<&'b HashSet<T, S>> for &'a HashSet<T, S>\n+impl<T, S> BitXor<&HashSet<T, S>> for &HashSet<T, S>\n     where T: Eq + Hash + Clone,\n           S: BuildHasher + Default\n {\n@@ -946,7 +946,7 @@ impl<'a, 'b, T, S> BitXor<&'b HashSet<T, S>> for &'a HashSet<T, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b, T, S> Sub<&'b HashSet<T, S>> for &'a HashSet<T, S>\n+impl<T, S> Sub<&HashSet<T, S>> for &HashSet<T, S>\n     where T: Eq + Hash + Clone,\n           S: BuildHasher + Default\n {"}, {"sha": "3eb289501cb0fd080ccea3d7f3df479ede4ef8eb", "filename": "src/libstd/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -337,7 +337,7 @@ impl From<String> for Box<dyn Error> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b> From<&'b str> for Box<dyn Error + Send + Sync + 'a> {\n+impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n     /// # Examples\n@@ -351,13 +351,13 @@ impl<'a, 'b> From<&'b str> for Box<dyn Error + Send + Sync + 'a> {\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n-    fn from(err: &'b str) -> Box<dyn Error + Send + Sync + 'a> {\n+    fn from(err: &str) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n-impl<'a> From<&'a str> for Box<dyn Error> {\n+impl From<&str> for Box<dyn Error> {\n     /// Converts a [`str`] into a box of dyn [`Error`].\n     ///\n     /// # Examples\n@@ -370,7 +370,7 @@ impl<'a> From<&'a str> for Box<dyn Error> {\n     /// let a_boxed_error = Box::<Error>::from(a_str_error);\n     /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n-    fn from(err: &'a str) -> Box<dyn Error> {\n+    fn from(err: &str) -> Box<dyn Error> {\n         From::from(String::from(err))\n     }\n }"}, {"sha": "ad3f45bfadaf4df0903fb4b5ec469f76fcf99053", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -690,8 +690,8 @@ impl<'a> From<Cow<'a, CStr>> for CString {\n }\n \n #[stable(feature = \"box_from_c_str\", since = \"1.17.0\")]\n-impl<'a> From<&'a CStr> for Box<CStr> {\n-    fn from(s: &'a CStr) -> Box<CStr> {\n+impl From<&CStr> for Box<CStr> {\n+    fn from(s: &CStr) -> Box<CStr> {\n         let boxed: Box<[u8]> = Box::from(s.to_bytes_with_nul());\n         unsafe { Box::from_raw(Box::into_raw(boxed) as *mut CStr) }\n     }\n@@ -767,7 +767,7 @@ impl From<CString> for Arc<CStr> {\n }\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n-impl<'a> From<&'a CStr> for Arc<CStr> {\n+impl From<&CStr> for Arc<CStr> {\n     #[inline]\n     fn from(s: &CStr) -> Arc<CStr> {\n         let arc: Arc<[u8]> = Arc::from(s.to_bytes_with_nul());\n@@ -789,7 +789,7 @@ impl From<CString> for Rc<CStr> {\n }\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n-impl<'a> From<&'a CStr> for Rc<CStr> {\n+impl From<&CStr> for Rc<CStr> {\n     #[inline]\n     fn from(s: &CStr) -> Rc<CStr> {\n         let rc: Rc<[u8]> = Rc::from(s.to_bytes_with_nul());\n@@ -1268,8 +1268,8 @@ impl ToOwned for CStr {\n }\n \n #[stable(feature = \"cstring_asref\", since = \"1.7.0\")]\n-impl<'a> From<&'a CStr> for CString {\n-    fn from(s: &'a CStr) -> CString {\n+impl From<&CStr> for CString {\n+    fn from(s: &CStr) -> CString {\n         s.to_owned()\n     }\n }"}, {"sha": "3a0590021c917bc1cdaf6e7fa69ba590c926c926", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -357,8 +357,8 @@ impl From<String> for OsString {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for OsString {\n-    fn from(s: &'a T) -> OsString {\n+impl<T: ?Sized + AsRef<OsStr>> From<&T> for OsString {\n+    fn from(s: &T) -> OsString {\n         s.as_ref().to_os_string()\n     }\n }\n@@ -421,8 +421,8 @@ impl PartialEq<OsString> for str {\n }\n \n #[stable(feature = \"os_str_str_ref_eq\", since = \"1.29.0\")]\n-impl<'a> PartialEq<&'a str> for OsString {\n-    fn eq(&self, other: &&'a str) -> bool {\n+impl PartialEq<&str> for OsString {\n+    fn eq(&self, other: &&str) -> bool {\n         **self == **other\n     }\n }\n@@ -656,8 +656,8 @@ impl OsStr {\n }\n \n #[stable(feature = \"box_from_os_str\", since = \"1.17.0\")]\n-impl<'a> From<&'a OsStr> for Box<OsStr> {\n-    fn from(s: &'a OsStr) -> Box<OsStr> {\n+impl From<&OsStr> for Box<OsStr> {\n+    fn from(s: &OsStr) -> Box<OsStr> {\n         let rw = Box::into_raw(s.inner.into_box()) as *mut OsStr;\n         unsafe { Box::from_raw(rw) }\n     }\n@@ -707,7 +707,7 @@ impl From<OsString> for Arc<OsStr> {\n }\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n-impl<'a> From<&'a OsStr> for Arc<OsStr> {\n+impl From<&OsStr> for Arc<OsStr> {\n     #[inline]\n     fn from(s: &OsStr) -> Arc<OsStr> {\n         let arc = s.inner.into_arc();\n@@ -729,7 +729,7 @@ impl From<OsString> for Rc<OsStr> {\n }\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n-impl<'a> From<&'a OsStr> for Rc<OsStr> {\n+impl From<&OsStr> for Rc<OsStr> {\n     #[inline]\n     fn from(s: &OsStr) -> Rc<OsStr> {\n         let rc = s.inner.into_rc();"}, {"sha": "ea3fcd8ce28597df108ef63dd077a81c4245240f", "filename": "src/libstd/path.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -1456,8 +1456,8 @@ impl PathBuf {\n }\n \n #[stable(feature = \"box_from_path\", since = \"1.17.0\")]\n-impl<'a> From<&'a Path> for Box<Path> {\n-    fn from(path: &'a Path) -> Box<Path> {\n+impl From<&Path> for Box<Path> {\n+    fn from(path: &Path) -> Box<Path> {\n         let boxed: Box<OsStr> = path.inner.into();\n         let rw = Box::into_raw(boxed) as *mut Path;\n         unsafe { Box::from_raw(rw) }\n@@ -1494,8 +1494,8 @@ impl Clone for Box<Path> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for PathBuf {\n-    fn from(s: &'a T) -> PathBuf {\n+impl<T: ?Sized + AsRef<OsStr>> From<&T> for PathBuf {\n+    fn from(s: &T) -> PathBuf {\n         PathBuf::from(s.as_ref().to_os_string())\n     }\n }\n@@ -1630,7 +1630,7 @@ impl From<PathBuf> for Arc<Path> {\n }\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n-impl<'a> From<&'a Path> for Arc<Path> {\n+impl From<&Path> for Arc<Path> {\n     /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: &Path) -> Arc<Path> {\n@@ -1650,7 +1650,7 @@ impl From<PathBuf> for Rc<Path> {\n }\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n-impl<'a> From<&'a Path> for Rc<Path> {\n+impl From<&Path> for Rc<Path> {\n     /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: &Path) -> Rc<Path> {"}, {"sha": "6d2a4962ab44467959c8914341a42db69339d70d", "filename": "src/libstd/sys/cloudabi/shims/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -297,10 +297,10 @@ impl Iterator for LookupHost {\n     }\n }\n \n-impl<'a> TryFrom<&'a str> for LookupHost {\n+impl TryFrom<&str> for LookupHost {\n     type Error = io::Error;\n \n-    fn try_from(_v: &'a str) -> io::Result<LookupHost> {\n+    fn try_from(_v: &str) -> io::Result<LookupHost> {\n         unsupported()\n     }\n }"}, {"sha": "dbaa140ed8a0f9c39a1aa940b6cb0c5367999ced", "filename": "src/libstd/sys/redox/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fmod.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -35,7 +35,7 @@ impl Iterator for LookupHost {\n     }\n }\n \n-impl<'a> TryFrom<&'a str> for LookupHost {\n+impl TryFrom<&str> for LookupHost {\n     type Error = io::Error;\n \n     fn try_from(s: &str) -> io::Result<LookupHost> {"}, {"sha": "e5e42e3d0b04867cb5309797df653cbaa10e0800", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -420,10 +420,10 @@ impl Iterator for LookupHost {\n     }\n }\n \n-impl<'a> TryFrom<&'a str> for LookupHost {\n+impl TryFrom<&str> for LookupHost {\n     type Error = io::Error;\n \n-    fn try_from(v: &'a str) -> io::Result<LookupHost> {\n+    fn try_from(v: &str) -> io::Result<LookupHost> {\n         LookupHost::new(v.to_owned())\n     }\n }"}, {"sha": "b9e725371a36edcd9494779549f54777e193df34", "filename": "src/libstd/sys/unix/l4re.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -447,10 +447,10 @@ pub mod net {\n     unsafe impl Send for LookupHost {}\n \n \n-    impl<'a> TryFrom<&'a str> for LookupHost {\n+    impl TryFrom<&str> for LookupHost {\n         type Error = io::Error;\n \n-        fn try_from(_v: &'a str) -> io::Result<LookupHost> {\n+        fn try_from(_v: &str) -> io::Result<LookupHost> {\n             unimpl!();\n         }\n     }"}, {"sha": "a2ea2dfbbc0326d13a12f1a86212d110354d12b5", "filename": "src/libstd/sys/wasm/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -298,10 +298,10 @@ impl Iterator for LookupHost {\n     }\n }\n \n-impl<'a> TryFrom<&'a str> for LookupHost {\n+impl TryFrom<&str> for LookupHost {\n     type Error = io::Error;\n \n-    fn try_from(_v: &'a str) -> io::Result<LookupHost> {\n+    fn try_from(_v: &str) -> io::Result<LookupHost> {\n         unsupported()\n     }\n }"}, {"sha": "b9505aaa69ba59b4785ac9546fd1c1c66bc0c639", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68abd9a99976a84cca6dcb5459cc3bc279470b4c/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=68abd9a99976a84cca6dcb5459cc3bc279470b4c", "patch": "@@ -157,7 +157,7 @@ impl Drop for LookupHost {\n     }\n }\n \n-impl<'a> TryFrom<&'a str> for LookupHost {\n+impl TryFrom<&str> for LookupHost {\n     type Error = io::Error;\n \n     fn try_from(s: &str) -> io::Result<LookupHost> {"}]}