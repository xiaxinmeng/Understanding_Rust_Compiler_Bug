{"sha": "6bd76c7ee1d81f97a797022c0f3cee01769d7178", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZDc2YzdlZTFkODFmOTdhNzk3MDIyYzBmM2NlZTAxNzY5ZDcxNzg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-25T15:08:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T07:16:58Z"}, "message": "cargo miri: factor package manifest logic into separate function", "tree": {"sha": "2b23c34184ed1fa74242b88b4fb22fd62be1c31e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b23c34184ed1fa74242b88b4fb22fd62be1c31e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bd76c7ee1d81f97a797022c0f3cee01769d7178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd76c7ee1d81f97a797022c0f3cee01769d7178", "html_url": "https://github.com/rust-lang/rust/commit/6bd76c7ee1d81f97a797022c0f3cee01769d7178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bd76c7ee1d81f97a797022c0f3cee01769d7178/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d58ca8a90677e76908bcaa0df22e1ccbd5909f", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d58ca8a90677e76908bcaa0df22e1ccbd5909f", "html_url": "https://github.com/rust-lang/rust/commit/14d58ca8a90677e76908bcaa0df22e1ccbd5909f"}], "stats": {"total": 126, "additions": 75, "deletions": 51}, "files": [{"sha": "84080538052247844747f4915081aa1bd58066cd", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bd76c7ee1d81f97a797022c0f3cee01769d7178/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6bd76c7ee1d81f97a797022c0f3cee01769d7178/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=6bd76c7ee1d81f97a797022c0f3cee01769d7178", "patch": "@@ -42,6 +42,7 @@ log = \"0.4\"\n vergen = \"3\"\n \n [features]\n+default = [\"cargo_miri\"]\n cargo_miri = [\"cargo_metadata\"]\n rustc_tests = []\n "}, {"sha": "19296238e2b2822b7bf2119f49a1a620293dfd94", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 74, "deletions": 51, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/6bd76c7ee1d81f97a797022c0f3cee01769d7178/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bd76c7ee1d81f97a797022c0f3cee01769d7178/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=6bd76c7ee1d81f97a797022c0f3cee01769d7178", "patch": "@@ -1,3 +1,5 @@\n+#![feature(inner_deref)]\n+\n extern crate cargo_metadata;\n \n use std::path::{PathBuf, Path};\n@@ -25,6 +27,13 @@ it to configure the resource limits\n available resource limits are `memory_size`, `step_limit`, `stack_limit`\n \"#;\n \n+#[derive(Copy, Clone, Debug)]\n+enum MiriCommand {\n+    Run,\n+    Test,\n+    Setup,\n+}\n+\n fn show_help() {\n     println!(\"{}\", CARGO_MIRI_HELP);\n }\n@@ -34,6 +43,54 @@ fn show_version() {\n         env!(\"CARGO_PKG_VERSION\"), env!(\"VERGEN_SHA_SHORT\"), env!(\"VERGEN_COMMIT_DATE\"));\n }\n \n+fn list_targets(mut args: impl Iterator<Item=String>) -> impl Iterator<Item=cargo_metadata::Target> {\n+    // We need to get the manifest, and then the metadata, to enumerate targets.\n+    let manifest_path_arg = args.find(|val| {\n+        val.starts_with(\"--manifest-path=\")\n+    });\n+\n+    let mut metadata = if let Ok(metadata) = cargo_metadata::metadata(\n+        manifest_path_arg.as_ref().map(AsRef::as_ref),\n+    )\n+    {\n+        metadata\n+    } else {\n+        let _ = std::io::stderr().write_fmt(format_args!(\n+            \"error: Could not obtain cargo metadata.\"\n+        ));\n+        std::process::exit(101);\n+    };\n+\n+    let manifest_path = manifest_path_arg.map(|arg| {\n+        PathBuf::from(Path::new(&arg[\"--manifest-path=\".len()..]))\n+    });\n+\n+    let current_dir = std::env::current_dir();\n+\n+    let package_index = metadata\n+        .packages\n+        .iter()\n+        .position(|package| {\n+            let package_manifest_path = Path::new(&package.manifest_path);\n+            if let Some(ref manifest_path) = manifest_path {\n+                package_manifest_path == manifest_path\n+            } else {\n+                let current_dir = current_dir.as_ref().expect(\n+                    \"could not read current directory\",\n+                );\n+                let package_manifest_directory = package_manifest_path.parent().expect(\n+                    \"could not find parent directory of package manifest\",\n+                );\n+                package_manifest_directory == current_dir\n+            }\n+        })\n+        .expect(\"could not find matching package\");\n+    let package = metadata.packages.remove(package_index);\n+\n+    // Finally we got the list of targets to build\n+    package.targets.into_iter()\n+}\n+\n fn main() {\n     // Check for version and help flags even when invoked as 'cargo-miri'\n     if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n@@ -51,61 +108,27 @@ fn main() {\n         // binary so that we come back in the other branch, and dispatch\n         // the invocations to rustc and miri, respectively.\n \n-        let test = std::env::args().nth(2).map_or(false, |text| text == \"test\");\n-        let skip = if test { 3 } else { 2 };\n-\n-        // We need to get the manifest, and then the metadata, to enumerate targets.\n-        let manifest_path_arg = std::env::args().skip(skip).find(|val| {\n-            val.starts_with(\"--manifest-path=\")\n-        });\n-\n-        let mut metadata = if let Ok(metadata) = cargo_metadata::metadata(\n-            manifest_path_arg.as_ref().map(AsRef::as_ref),\n-        )\n-        {\n-            metadata\n-        } else {\n-            let _ = std::io::stderr().write_fmt(format_args!(\n-                \"error: Could not obtain cargo metadata.\"\n-            ));\n-            std::process::exit(101);\n+        let (subcommand, skip) = match std::env::args().nth(2).deref() {\n+            Some(\"test\") => (MiriCommand::Test, 3),\n+            Some(\"run\") => (MiriCommand::Run, 3),\n+            Some(\"setup\") => (MiriCommand::Setup, 3),\n+            // Default command, if there is an option or nothing\n+            Some(s) if s.starts_with(\"-\") => (MiriCommand::Run, 2),\n+            None => (MiriCommand::Run, 2),\n+            // Unvalid command\n+            Some(s) => {\n+                eprintln!(\"Unknown command `{}`\", s);\n+                std::process::exit(1)\n+            }\n         };\n \n-        let manifest_path = manifest_path_arg.map(|arg| {\n-            PathBuf::from(Path::new(&arg[\"--manifest-path=\".len()..]))\n-        });\n-\n-        let current_dir = std::env::current_dir();\n-\n-        let package_index = metadata\n-            .packages\n-            .iter()\n-            .position(|package| {\n-                let package_manifest_path = Path::new(&package.manifest_path);\n-                if let Some(ref manifest_path) = manifest_path {\n-                    package_manifest_path == manifest_path\n-                } else {\n-                    let current_dir = current_dir.as_ref().expect(\n-                        \"could not read current directory\",\n-                    );\n-                    let package_manifest_directory = package_manifest_path.parent().expect(\n-                        \"could not find parent directory of package manifest\",\n-                    );\n-                    package_manifest_directory == current_dir\n-                }\n-            })\n-            .expect(\"could not find matching package\");\n-        let package = metadata.packages.remove(package_index);\n-\n-        // Finally we got the metadata, iterate all targets and see for which ones\n-        // we do anything.\n-        for target in package.targets {\n+        for target in list_targets(std::env::args().skip(skip)) {\n             let args = std::env::args().skip(skip);\n             let kind = target.kind.get(0).expect(\n                 \"badly formatted cargo metadata: target::kind is an empty array\",\n             );\n-            match (test, &kind[..]) {\n-                (true, \"test\") => {\n+            match (subcommand, &kind[..]) {\n+                (MiriCommand::Test, \"test\") => {\n                     // For test binaries we call `cargo rustc --test target -- <rustc args>`\n                     if let Err(code) = process(\n                         vec![\"--test\".to_string(), target.name].into_iter().chain(\n@@ -116,7 +139,7 @@ fn main() {\n                         std::process::exit(code);\n                     }\n                 }\n-                (true, \"lib\") => {\n+                (MiriCommand::Test, \"lib\") => {\n                     // For libraries we call `cargo rustc -- --test <rustc args>`\n                     // Notice now that `--test` is a rustc arg rather than a cargo arg. This tells\n                     // rustc to build a test harness which calls all #[test] functions. We don't\n@@ -131,7 +154,7 @@ fn main() {\n                         std::process::exit(code);\n                     }\n                 }\n-                (false, \"bin\") => {\n+                (MiriCommand::Run, \"bin\") => {\n                     // For ordinary binaries we call `cargo rustc --bin target -- <rustc args>`\n                     if let Err(code) = process(\n                         vec![\"--bin\".to_string(), target.name].into_iter().chain("}]}