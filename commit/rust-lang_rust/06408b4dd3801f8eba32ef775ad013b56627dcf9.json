{"sha": "06408b4dd3801f8eba32ef775ad013b56627dcf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NDA4YjRkZDM4MDFmOGViYTMyZWY3NzVhZDAxM2I1NjYyN2RjZjk=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-31T01:37:02Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T03:50:26Z"}, "message": "rustc: unbox closures used in let bindings", "tree": {"sha": "a04ba27621c974ee45e95585658a538fa413e274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a04ba27621c974ee45e95585658a538fa413e274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06408b4dd3801f8eba32ef775ad013b56627dcf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06408b4dd3801f8eba32ef775ad013b56627dcf9", "html_url": "https://github.com/rust-lang/rust/commit/06408b4dd3801f8eba32ef775ad013b56627dcf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06408b4dd3801f8eba32ef775ad013b56627dcf9/comments", "author": null, "committer": null, "parents": [{"sha": "16a4ba8fa5c717bd62a094210ad5926227d7ea95", "url": "https://api.github.com/repos/rust-lang/rust/commits/16a4ba8fa5c717bd62a094210ad5926227d7ea95", "html_url": "https://github.com/rust-lang/rust/commit/16a4ba8fa5c717bd62a094210ad5926227d7ea95"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "5dac2bafaec3d847508de229b3244ca3a169f812", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=06408b4dd3801f8eba32ef775ad013b56627dcf9", "patch": "@@ -177,7 +177,7 @@ fn extract_crate_info(e: &Env, i: &ast::ViewItem) -> Option<CrateInfo> {\n }\n \n pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n-    let err = |s: &str| {\n+    let err = |&: s: &str| {\n         match (sp, sess) {\n             (_, None) => panic!(\"{}\", s),\n             (Some(sp), Some(sess)) => sess.span_err(sp, s),"}, {"sha": "75fb6fb0cfa7ff79d3c390a09c0306351d214f1c", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=06408b4dd3801f8eba32ef775ad013b56627dcf9", "patch": "@@ -1417,7 +1417,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             encode_parent_sort(rbml_w, 't');\n \n             let trait_item = &ms[i];\n-            let encode_trait_item = |rbml_w: &mut Encoder| {\n+            let encode_trait_item = |&: rbml_w: &mut Encoder| {\n                 // If this is a static method, we've already\n                 // encoded this.\n                 if is_nonstatic_method {"}, {"sha": "6277656e03afce8e97ec780138c507075cbe03c1", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=06408b4dd3801f8eba32ef775ad013b56627dcf9", "patch": "@@ -185,7 +185,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &ast::Expr) -> bool {\n         ast::ExprBlock(ref block) => {\n             // Check all statements in the block\n             for stmt in block.stmts.iter() {\n-                let block_span_err = |span|\n+                let block_span_err = |&: span|\n                     span_err!(v.tcx.sess, span, E0016,\n                               \"blocks in constants are limited to items and \\\n                                tail expressions\");"}, {"sha": "4c5d76a2c40e57d0507faa689fc5106f21f02677", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=06408b4dd3801f8eba32ef775ad013b56627dcf9", "patch": "@@ -1012,7 +1012,7 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n         })\n     }\n \n-    let check_move: |&Pat, Option<&Pat>| = |p, sub| {\n+    let check_move = |&: p: &Pat, sub: Option<&Pat>| {\n         // check legality of moving out of the enum\n \n         // x @ Foo(..) is legal, but x @ Foo(y) isn't."}, {"sha": "8455ee3955bd06cefa8348dc34b4c3f89d859c5a", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=06408b4dd3801f8eba32ef775ad013b56627dcf9", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'tcx> ConstraintGraph<'a, 'tcx> {\n         let mut i = 0;\n         let mut node_ids = FnvHashMap::new();\n         {\n-            let add_node = |node| {\n+            let mut add_node = |&mut : node| {\n                 if let Vacant(e) = node_ids.entry(node) {\n                     e.set(i);\n                     i += 1;"}, {"sha": "cfa0d419aa3f0d53ae8f4b813edb8815e596f522", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=06408b4dd3801f8eba32ef775ad013b56627dcf9", "patch": "@@ -749,7 +749,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n     fn check_path(&mut self, span: Span, path_id: ast::NodeId, path: &ast::Path) {\n         debug!(\"privacy - path {}\", self.nodestr(path_id));\n         let orig_def = self.tcx.def_map.borrow()[path_id].clone();\n-        let ck = |tyname: &str| {\n+        let ck = |&: tyname: &str| {\n             let ck_public = |def: ast::DefId| {\n                 let name = token::get_ident(path.segments.last().unwrap().identifier);\n                 let origdid = orig_def.def_id();\n@@ -921,7 +921,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n             ast::ExprPath(..) => {\n-                let guard = |did: ast::DefId| {\n+                let guard = |&: did: ast::DefId| {\n                     let fields = ty::lookup_struct_fields(self.tcx, did);\n                     let any_priv = fields.iter().any(|f| {\n                         f.vis != ast::Public && (\n@@ -1126,7 +1126,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n     /// later on down the road...\n     fn check_sane_privacy(&self, item: &ast::Item) {\n         let tcx = self.tcx;\n-        let check_inherited = |sp: Span, vis: ast::Visibility, note: &str| {\n+        let check_inherited = |&: sp: Span, vis: ast::Visibility, note: &str| {\n             if vis != ast::Inherited {\n                 tcx.sess.span_err(sp, \"unnecessary visibility qualifier\");\n                 if note.len() > 0 {\n@@ -1206,7 +1206,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 tcx.sess.span_err(sp, \"visibility has no effect inside functions\");\n             }\n         }\n-        let check_struct = |def: &ast::StructDef| {\n+        let check_struct = |&: def: &ast::StructDef| {\n             for f in def.fields.iter() {\n                match f.node.kind {\n                     ast::NamedField(_, p) => check_inherited(tcx, f.span, p),"}, {"sha": "be89b32cdaae623abcc75a94fe56defce6bb4c6e", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=06408b4dd3801f8eba32ef775ad013b56627dcf9", "patch": "@@ -488,7 +488,7 @@ fn resolve_expr(visitor: &mut RegionResolutionVisitor, expr: &ast::Expr) {\n \n     {\n         let region_maps = &mut visitor.region_maps;\n-        let terminating = |id| {\n+        let terminating = |&: id| {\n             let scope = CodeExtent::from_node_id(id);\n             region_maps.mark_as_terminating_scope(scope)\n         };"}, {"sha": "c06a8c1569cb82098b13ff87c88505e3ca00418c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06408b4dd3801f8eba32ef775ad013b56627dcf9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=06408b4dd3801f8eba32ef775ad013b56627dcf9", "patch": "@@ -6156,7 +6156,7 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n         macro_rules! byte( ($b:expr) => { ($b as u8).hash(state) } );\n         macro_rules! hash( ($e:expr) => { $e.hash(state) } );\n \n-        let region = |state: &mut sip::SipState, r: Region| {\n+        let region = |&: state: &mut sip::SipState, r: Region| {\n             match r {\n                 ReStatic => {}\n                 ReLateBound(db, BrAnon(i)) => {\n@@ -6173,7 +6173,7 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n                 }\n             }\n         };\n-        let did = |state: &mut sip::SipState, did: DefId| {\n+        let did = |&: state: &mut sip::SipState, did: DefId| {\n             let h = if ast_util::is_local(did) {\n                 svh.clone()\n             } else {\n@@ -6182,10 +6182,10 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n             h.as_str().hash(state);\n             did.node.hash(state);\n         };\n-        let mt = |state: &mut sip::SipState, mt: mt| {\n+        let mt = |&: state: &mut sip::SipState, mt: mt| {\n             mt.mutbl.hash(state);\n         };\n-        let fn_sig = |state: &mut sip::SipState, sig: &Binder<FnSig<'tcx>>| {\n+        let fn_sig = |&: state: &mut sip::SipState, sig: &Binder<FnSig<'tcx>>| {\n             let sig = anonymize_late_bound_regions(tcx, sig);\n             for a in sig.inputs.iter() { helper(tcx, *a, svh, state); }\n             if let ty::FnConverging(output) = sig.output {"}]}