{"sha": "7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYzNiNjZmN2EzYWMwYTMzY2Y0MzViYzM1OTZmZGFjNTQyZmM1MmE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-20T10:23:59Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-20T11:47:12Z"}, "message": "Turn Obligation into something similar to chalk_ir::DomainGoal\n\nThis includes starting to make use of Chalk's `Cast` trait.", "tree": {"sha": "70a77a26ca09d8d5cd843b1cd9d59af229cd0daf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70a77a26ca09d8d5cd843b1cd9d59af229cd0daf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "html_url": "https://github.com/rust-lang/rust/commit/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7e405f6ab0c1ee10bfdd3d55a97628fe4cd6dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7e405f6ab0c1ee10bfdd3d55a97628fe4cd6dd", "html_url": "https://github.com/rust-lang/rust/commit/8e7e405f6ab0c1ee10bfdd3d55a97628fe4cd6dd"}], "stats": {"total": 221, "additions": 130, "deletions": 91}, "files": [{"sha": "30e5776712b7011653a8a3c476382560fc394fc7", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -56,8 +56,8 @@ use hir_ty::{\n     primitive::UintTy,\n     to_assoc_type_id,\n     traits::{FnTrait, Solution, SolutionVariables},\n-    AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, DebruijnIndex,\n-    InEnvironment, Interner, Obligation, ProjectionTy, Scalar, Substitution, Ty, TyDefId, TyKind,\n+    AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, Cast, DebruijnIndex,\n+    InEnvironment, Interner, ProjectionTy, Scalar, Substitution, Ty, TyDefId, TyKind,\n     TyVariableKind, WhereClause,\n };\n use itertools::Itertools;\n@@ -1767,7 +1767,7 @@ impl Type {\n         let goal = Canonical {\n             value: hir_ty::InEnvironment::new(\n                 self.ty.environment.clone(),\n-                hir_ty::Obligation::Trait(trait_ref),\n+                trait_ref.cast(&Interner),\n             ),\n             kinds: Arc::new([]),\n         };\n@@ -1789,14 +1789,15 @@ impl Type {\n         let goal = Canonical {\n             value: InEnvironment::new(\n                 self.ty.environment.clone(),\n-                Obligation::AliasEq(AliasEq {\n+                AliasEq {\n                     alias: AliasTy::Projection(ProjectionTy {\n                         associated_ty_id: to_assoc_type_id(alias.id),\n                         substitution: subst,\n                     }),\n                     ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n                         .intern(&Interner),\n-                }),\n+                }\n+                .cast(&Interner),\n             ),\n             kinds: Arc::new([TyVariableKind::General]),\n         };"}, {"sha": "23ab042c158eec81ad08d94b41937611a2bb9eee", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -6,6 +6,7 @@\n use std::iter::successors;\n \n use base_db::CrateId;\n+use chalk_ir::cast::Cast;\n use hir_def::lang_item::LangItemTarget;\n use hir_expand::name::name;\n use log::{info, warn};\n@@ -15,8 +16,8 @@ use crate::{\n     to_assoc_type_id, to_chalk_trait_id,\n     traits::{InEnvironment, Solution},\n     utils::generics,\n-    AliasEq, AliasTy, BoundVar, Canonical, DebruijnIndex, Interner, Obligation, ProjectionTy,\n-    Substitution, TraitRef, Ty, TyKind,\n+    AliasEq, AliasTy, BoundVar, Canonical, DebruijnIndex, Interner, ProjectionTy, Substitution,\n+    TraitRef, Ty, TyKind,\n };\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n@@ -74,7 +75,7 @@ fn deref_by_trait(\n     let implements_goal = Canonical {\n         kinds: ty.value.kinds.clone(),\n         value: InEnvironment {\n-            value: Obligation::Trait(trait_ref),\n+            value: trait_ref.cast(&Interner),\n             environment: ty.environment.clone(),\n         },\n     };\n@@ -92,7 +93,7 @@ fn deref_by_trait(\n             .intern(&Interner),\n     };\n \n-    let obligation = super::Obligation::AliasEq(projection);\n+    let obligation = projection.cast(&Interner);\n \n     let in_env = InEnvironment { value: obligation, environment: ty.environment };\n "}, {"sha": "bf884ae15837b14a005cae0b668102e31a5b1f51", "filename": "crates/hir_ty/src/chalk_cast.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -0,0 +1,53 @@\n+//! Implementations of the Chalk `Cast` trait for our types.\n+\n+use chalk_ir::{\n+    cast::{Cast, CastTo},\n+    interner::HasInterner,\n+};\n+\n+use crate::{AliasEq, DomainGoal, Interner, TraitRef, WhereClause};\n+\n+macro_rules! has_interner {\n+    ($t:ty) => {\n+        impl HasInterner for $t {\n+            type Interner = crate::Interner;\n+        }\n+    };\n+}\n+\n+has_interner!(WhereClause);\n+has_interner!(DomainGoal);\n+\n+impl CastTo<WhereClause> for TraitRef {\n+    fn cast_to(self, _interner: &Interner) -> WhereClause {\n+        WhereClause::Implemented(self)\n+    }\n+}\n+\n+impl CastTo<WhereClause> for AliasEq {\n+    fn cast_to(self, _interner: &Interner) -> WhereClause {\n+        WhereClause::AliasEq(self)\n+    }\n+}\n+\n+impl CastTo<DomainGoal> for WhereClause {\n+    fn cast_to(self, _interner: &Interner) -> DomainGoal {\n+        DomainGoal::Holds(self)\n+    }\n+}\n+\n+macro_rules! transitive_impl {\n+    ($a:ty, $b:ty, $c:ty) => {\n+        impl CastTo<$c> for $a {\n+            fn cast_to(self, interner: &Interner) -> $c {\n+                self.cast::<$b>(interner).cast(interner)\n+            }\n+        }\n+    };\n+}\n+\n+// In Chalk, these can be done as blanket impls, but that doesn't work here\n+// because of coherence\n+\n+transitive_impl!(TraitRef, WhereClause, DomainGoal);\n+transitive_impl!(AliasEq, WhereClause, DomainGoal);"}, {"sha": "91a2e0b5be92e7a11b0fcf7969c27ac1eb49e257", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -119,7 +119,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn trait_solve(\n         &self,\n         krate: CrateId,\n-        goal: crate::Canonical<crate::InEnvironment<crate::Obligation>>,\n+        goal: crate::Canonical<crate::InEnvironment<crate::DomainGoal>>,\n     ) -> Option<crate::traits::Solution>;\n \n     #[salsa::invoke(crate::traits::chalk::program_clauses_for_chalk_env_query)]"}, {"sha": "3845009ae7d7f45251ec5f0fd203ebdb8d31c7ca", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -19,7 +19,7 @@ use hir_expand::name::Name;\n use crate::{\n     db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx, primitive,\n     to_assoc_type_id, traits::chalk::from_chalk, utils::generics, AdtId, AliasEq, AliasTy,\n-    CallableDefId, CallableSig, ImplTraitId, Interner, Lifetime, Obligation, OpaqueTy,\n+    CallableDefId, CallableSig, DomainGoal, ImplTraitId, Interner, Lifetime, OpaqueTy,\n     ProjectionTy, Scalar, Substitution, TraitRef, Ty, TyKind, WhereClause,\n };\n \n@@ -805,22 +805,12 @@ impl HirDisplay for Lifetime {\n     }\n }\n \n-impl HirDisplay for Obligation {\n+impl HirDisplay for DomainGoal {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         match self {\n-            Obligation::Trait(tr) => {\n-                write!(f, \"Implements(\")?;\n-                tr.hir_fmt(f)?;\n-                write!(f, \")\")\n-            }\n-            Obligation::AliasEq(AliasEq { alias, ty }) => {\n-                write!(f, \"Normalize(\")?;\n-                match alias {\n-                    AliasTy::Projection(projection_ty) => projection_ty.hir_fmt(f)?,\n-                    AliasTy::Opaque(opaque) => opaque.hir_fmt(f)?,\n-                }\n-                write!(f, \" => \")?;\n-                ty.hir_fmt(f)?;\n+            DomainGoal::Holds(wc) => {\n+                write!(f, \"Holds(\")?;\n+                wc.hir_fmt(f)?;\n                 write!(f, \")\")\n             }\n         }"}, {"sha": "b9e434c78a0f0b60096ce236ecb47306b62b2851", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -18,7 +18,7 @@ use std::mem;\n use std::ops::Index;\n use std::sync::Arc;\n \n-use chalk_ir::Mutability;\n+use chalk_ir::{cast::Cast, Mutability};\n use hir_def::{\n     body::Body,\n     data::{ConstData, FunctionData, StaticData},\n@@ -37,7 +37,7 @@ use stdx::impl_from;\n use syntax::SmolStr;\n \n use super::{\n-    traits::{Guidance, Obligation, Solution},\n+    traits::{DomainGoal, Guidance, Solution},\n     InEnvironment, ProjectionTy, Substitution, TraitEnvironment, TraitRef, Ty, TypeWalk,\n };\n use crate::{\n@@ -204,7 +204,7 @@ struct InferenceContext<'a> {\n     resolver: Resolver,\n     table: unify::InferenceTable,\n     trait_env: Arc<TraitEnvironment>,\n-    obligations: Vec<Obligation>,\n+    obligations: Vec<DomainGoal>,\n     result: InferenceResult,\n     /// The return type of the function being inferred, or the closure if we're\n     /// currently within one.\n@@ -403,8 +403,8 @@ impl<'a> InferenceContext<'a> {\n                     }),\n                     ty: ty.clone(),\n                 };\n-                self.obligations.push(Obligation::Trait(trait_ref));\n-                self.obligations.push(Obligation::AliasEq(alias_eq));\n+                self.obligations.push(trait_ref.cast(&Interner));\n+                self.obligations.push(alias_eq.cast(&Interner));\n                 self.resolve_ty_as_possible(ty)\n             }\n             None => self.err_ty(),\n@@ -430,7 +430,7 @@ impl<'a> InferenceContext<'a> {\n     fn normalize_projection_ty(&mut self, proj_ty: ProjectionTy) -> Ty {\n         let var = self.table.new_type_var();\n         let alias_eq = AliasEq { alias: AliasTy::Projection(proj_ty), ty: var.clone() };\n-        let obligation = Obligation::AliasEq(alias_eq);\n+        let obligation = alias_eq.cast(&Interner);\n         self.obligations.push(obligation);\n         var\n     }"}, {"sha": "07eb965739604c860a0c9bd59592e13b81642826", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -4,12 +4,11 @@\n //!\n //! See: https://doc.rust-lang.org/nomicon/coercions.html\n \n-use chalk_ir::{Mutability, TyVariableKind};\n+use chalk_ir::{cast::Cast, Mutability, TyVariableKind};\n use hir_def::lang_item::LangItemTarget;\n \n use crate::{\n-    autoderef, to_chalk_trait_id, traits::Solution, Interner, Obligation, Substitution, TraitRef,\n-    Ty, TyKind,\n+    autoderef, to_chalk_trait_id, traits::Solution, Interner, Substitution, TraitRef, Ty, TyKind,\n };\n \n use super::{InEnvironment, InferenceContext};\n@@ -143,7 +142,7 @@ impl<'a> InferenceContext<'a> {\n             .build();\n         let trait_ref =\n             TraitRef { trait_id: to_chalk_trait_id(coerce_unsized_trait), substitution: substs };\n-        let goal = InEnvironment::new(self.trait_env.clone(), Obligation::Trait(trait_ref));\n+        let goal = InEnvironment::new(self.trait_env.clone(), trait_ref.cast(&Interner));\n \n         let canonicalizer = self.canonicalizer();\n         let canonicalized = canonicalizer.canonicalize_obligation(goal);"}, {"sha": "79bbc5dabaaba7567a7c355925251195b08fcc0e", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -3,7 +3,7 @@\n use std::iter::{repeat, repeat_with};\n use std::{mem, sync::Arc};\n \n-use chalk_ir::{Mutability, TyVariableKind};\n+use chalk_ir::{cast::Cast, Mutability, TyVariableKind};\n use hir_def::{\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n@@ -21,7 +21,7 @@ use crate::{\n     to_assoc_type_id, to_chalk_trait_id,\n     traits::{chalk::from_chalk, FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n-    AdtId, Binders, CallableDefId, FnPointer, FnSig, Interner, Obligation, Rawness, Scalar,\n+    AdtId, Binders, CallableDefId, DomainGoal, FnPointer, FnSig, Interner, Rawness, Scalar,\n     Substitution, TraitRef, Ty, TyKind,\n };\n \n@@ -90,10 +90,9 @@ impl<'a> InferenceContext<'a> {\n             Substitution::build_for_generics(&generic_params).push(ty.clone()).push(arg_ty).build();\n \n         let trait_env = Arc::clone(&self.trait_env);\n-        let implements_fn_trait = Obligation::Trait(TraitRef {\n-            trait_id: to_chalk_trait_id(fn_once_trait),\n-            substitution: substs.clone(),\n-        });\n+        let implements_fn_trait: DomainGoal =\n+            TraitRef { trait_id: to_chalk_trait_id(fn_once_trait), substitution: substs.clone() }\n+                .cast(&Interner);\n         let goal = self.canonicalizer().canonicalize_obligation(InEnvironment {\n             value: implements_fn_trait.clone(),\n             environment: trait_env,\n@@ -938,22 +937,20 @@ impl<'a> InferenceContext<'a> {\n             let generic_predicates = self.db.generic_predicates(def.into());\n             for predicate in generic_predicates.iter() {\n                 let predicate = predicate.clone().subst(parameters);\n-                if let Some(obligation) = Obligation::from_predicate(predicate) {\n-                    self.obligations.push(obligation);\n-                }\n+                self.obligations.push(predicate.cast(&Interner));\n             }\n             // add obligation for trait implementation, if this is a trait method\n             match def {\n                 CallableDefId::FunctionId(f) => {\n                     if let AssocContainerId::TraitId(trait_) = f.lookup(self.db.upcast()).container\n                     {\n-                        // construct a TraitDef\n+                        // construct a TraitRef\n                         let substs =\n                             parameters.prefix(generics(self.db.upcast(), trait_.into()).len());\n-                        self.obligations.push(Obligation::Trait(TraitRef {\n-                            trait_id: to_chalk_trait_id(trait_),\n-                            substitution: substs,\n-                        }));\n+                        self.obligations.push(\n+                            TraitRef { trait_id: to_chalk_trait_id(trait_), substitution: substs }\n+                                .cast(&Interner),\n+                        );\n                     }\n                 }\n                 CallableDefId::StructId(_) | CallableDefId::EnumVariantId(_) => {}"}, {"sha": "58cce56abb0d59cb757e7168630abf06675d53d2", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -2,6 +2,7 @@\n \n use std::iter;\n \n+use chalk_ir::cast::Cast;\n use hir_def::{\n     path::{Path, PathSegment},\n     resolver::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n@@ -256,10 +257,13 @@ impl<'a> InferenceContext<'a> {\n                             .push(ty.clone())\n                             .fill(std::iter::repeat_with(|| self.table.new_type_var()))\n                             .build();\n-                        self.obligations.push(super::Obligation::Trait(TraitRef {\n-                            trait_id: to_chalk_trait_id(trait_),\n-                            substitution: trait_substs.clone(),\n-                        }));\n+                        self.obligations.push(\n+                            TraitRef {\n+                                trait_id: to_chalk_trait_id(trait_),\n+                                substitution: trait_substs.clone(),\n+                            }\n+                            .cast(&Interner),\n+                        );\n                         Some(trait_substs)\n                     }\n                     AssocContainerId::ModuleId(_) => None,"}, {"sha": "1fc03c8f4242d7e38943bfe3094fe9aa9be364f9", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -5,7 +5,7 @@ use std::borrow::Cow;\n use chalk_ir::{FloatTy, IntTy, TyVariableKind};\n use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n \n-use super::{InferenceContext, Obligation};\n+use super::{DomainGoal, InferenceContext};\n use crate::{\n     AliasEq, AliasTy, BoundVar, Canonical, DebruijnIndex, FnPointer, InEnvironment, InferenceVar,\n     Interner, Scalar, Substitution, Ty, TyKind, TypeWalk, WhereClause,\n@@ -87,14 +87,11 @@ impl<'a, 'b> Canonicalizer<'a, 'b> {\n \n     pub(crate) fn canonicalize_obligation(\n         mut self,\n-        obligation: InEnvironment<Obligation>,\n-    ) -> Canonicalized<InEnvironment<Obligation>> {\n+        obligation: InEnvironment<DomainGoal>,\n+    ) -> Canonicalized<InEnvironment<DomainGoal>> {\n         let result = match obligation.value {\n-            Obligation::Trait(tr) => {\n-                Obligation::Trait(self.do_canonicalize(tr, DebruijnIndex::INNERMOST))\n-            }\n-            Obligation::AliasEq(alias_eq) => {\n-                Obligation::AliasEq(self.do_canonicalize(alias_eq, DebruijnIndex::INNERMOST))\n+            DomainGoal::Holds(wc) => {\n+                DomainGoal::Holds(self.do_canonicalize(wc, DebruijnIndex::INNERMOST))\n             }\n         };\n         self.into_canonicalized(InEnvironment {"}, {"sha": "c46529879d075dd44009bff686ba5fb303a86ede", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -13,6 +13,7 @@ mod op;\n mod lower;\n pub(crate) mod infer;\n pub(crate) mod utils;\n+mod chalk_cast;\n \n pub mod display;\n pub mod db;\n@@ -45,9 +46,11 @@ pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n     TyDefId, TyLoweringContext, ValueTyDefId,\n };\n-pub use traits::{AliasEq, InEnvironment, Obligation, TraitEnvironment};\n+pub use traits::{AliasEq, DomainGoal, InEnvironment, TraitEnvironment};\n \n-pub use chalk_ir::{AdtId, BoundVar, DebruijnIndex, Mutability, Safety, Scalar, TyVariableKind};\n+pub use chalk_ir::{\n+    cast::Cast, AdtId, BoundVar, DebruijnIndex, Mutability, Safety, Scalar, TyVariableKind,\n+};\n \n pub use crate::traits::chalk::Interner;\n "}, {"sha": "da6bc2a4a174ad038ce34b0fdde96a6a21efc2f0", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -6,7 +6,7 @@ use std::{iter, sync::Arc};\n \n use arrayvec::ArrayVec;\n use base_db::CrateId;\n-use chalk_ir::Mutability;\n+use chalk_ir::{cast::Cast, Mutability};\n use hir_def::{\n     lang_item::LangItemTarget, AssocContainerId, AssocItemId, FunctionId, GenericDefId, HasModule,\n     ImplId, Lookup, ModuleId, TraitId,\n@@ -767,15 +767,15 @@ fn generic_implements_goal(\n     env: Arc<TraitEnvironment>,\n     trait_: TraitId,\n     self_ty: Canonical<Ty>,\n-) -> Canonical<InEnvironment<super::Obligation>> {\n+) -> Canonical<InEnvironment<super::DomainGoal>> {\n     let mut kinds = self_ty.kinds.to_vec();\n     let substs = super::Substitution::build_for_def(db, trait_)\n         .push(self_ty.value)\n         .fill_with_bound_vars(DebruijnIndex::INNERMOST, kinds.len())\n         .build();\n     kinds.extend(iter::repeat(chalk_ir::TyVariableKind::General).take(substs.len() - 1));\n     let trait_ref = TraitRef { trait_id: to_chalk_trait_id(trait_), substitution: substs };\n-    let obligation = super::Obligation::Trait(trait_ref);\n+    let obligation = trait_ref.cast(&Interner);\n     Canonical { kinds: kinds.into(), value: InEnvironment::new(env, obligation) }\n }\n "}, {"sha": "7dadd1ffba70c0dacb658c55a2ac8f282f456e32", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -9,8 +9,8 @@ use hir_def::{lang_item::LangItemTarget, TraitId};\n use stdx::panic_context;\n \n use crate::{\n-    db::HirDatabase, AliasTy, Canonical, DebruijnIndex, HirDisplay, Substitution, TraitRef, Ty,\n-    TyKind, TypeWalk, WhereClause,\n+    db::HirDatabase, AliasTy, Canonical, DebruijnIndex, HirDisplay, Substitution, Ty, TyKind,\n+    TypeWalk, WhereClause,\n };\n \n use self::chalk::{from_chalk, Interner, ToChalk};\n@@ -88,20 +88,8 @@ impl<T> InEnvironment<T> {\n /// a certain type implements a certain trait. Proving the Obligation might\n /// result in additional information about inference variables.\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum Obligation {\n-    /// Prove that a certain type implements a trait (the type is the `Self` type\n-    /// parameter to the `TraitRef`).\n-    Trait(TraitRef),\n-    AliasEq(AliasEq),\n-}\n-\n-impl Obligation {\n-    pub fn from_predicate(predicate: WhereClause) -> Option<Obligation> {\n-        match predicate {\n-            WhereClause::Implemented(trait_ref) => Some(Obligation::Trait(trait_ref)),\n-            WhereClause::AliasEq(alias_eq) => Some(Obligation::AliasEq(alias_eq)),\n-        }\n-    }\n+pub enum DomainGoal {\n+    Holds(WhereClause),\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n@@ -136,16 +124,20 @@ impl TypeWalk for AliasEq {\n pub(crate) fn trait_solve_query(\n     db: &dyn HirDatabase,\n     krate: CrateId,\n-    goal: Canonical<InEnvironment<Obligation>>,\n+    goal: Canonical<InEnvironment<DomainGoal>>,\n ) -> Option<Solution> {\n     let _p = profile::span(\"trait_solve_query\").detail(|| match &goal.value.value {\n-        Obligation::Trait(it) => db.trait_data(it.hir_trait_id()).name.to_string(),\n-        Obligation::AliasEq(_) => \"alias_eq\".to_string(),\n+        DomainGoal::Holds(WhereClause::Implemented(it)) => {\n+            db.trait_data(it.hir_trait_id()).name.to_string()\n+        }\n+        DomainGoal::Holds(WhereClause::AliasEq(_)) => \"alias_eq\".to_string(),\n     });\n     log::info!(\"trait_solve_query({})\", goal.value.value.display(db));\n \n-    if let Obligation::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), .. }) =\n-        &goal.value.value\n+    if let DomainGoal::Holds(WhereClause::AliasEq(AliasEq {\n+        alias: AliasTy::Projection(projection_ty),\n+        ..\n+    })) = &goal.value.value\n     {\n         if let TyKind::BoundVar(_) = &projection_ty.substitution[0].interned(&Interner) {\n             // Hack: don't ask Chalk to normalize with an unknown self type, it'll say that's impossible"}, {"sha": "65feb82e591bac4e4ba770d5412dbf0734d1433b", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=7ec3b66f7a3ac0a33cf435bc3596fdac542fc52a", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     db::HirDatabase,\n     from_assoc_type_id,\n     primitive::UintTy,\n-    traits::{Canonical, Obligation},\n+    traits::{Canonical, DomainGoal},\n     AliasTy, CallableDefId, FnPointer, InEnvironment, OpaqueTy, ProjectionTy, Scalar, Substitution,\n     TraitRef, Ty, WhereClause,\n };\n@@ -422,13 +422,15 @@ impl ToChalk for AliasEq {\n     }\n }\n \n-impl ToChalk for Obligation {\n+impl ToChalk for DomainGoal {\n     type Chalk = chalk_ir::DomainGoal<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::DomainGoal<Interner> {\n         match self {\n-            Obligation::Trait(tr) => tr.to_chalk(db).cast(&Interner),\n-            Obligation::AliasEq(alias_eq) => alias_eq.to_chalk(db).cast(&Interner),\n+            DomainGoal::Holds(WhereClause::Implemented(tr)) => tr.to_chalk(db).cast(&Interner),\n+            DomainGoal::Holds(WhereClause::AliasEq(alias_eq)) => {\n+                alias_eq.to_chalk(db).cast(&Interner)\n+            }\n         }\n     }\n "}]}