{"sha": "9fadab64a2ef4ae0c1328e290642a9c6538a6022", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYWRhYjY0YTJlZjRhZTBjMTMyOGUyOTA2NDJhOWM2NTM4YTYwMjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-15T18:38:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-15T18:38:46Z"}, "message": "rustc: Introduce a stub destination-passing-style translation engine, accessible via the --dps switch for now", "tree": {"sha": "bd523503562768faaad3316f6207fb0ea14d0c69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd523503562768faaad3316f6207fb0ea14d0c69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fadab64a2ef4ae0c1328e290642a9c6538a6022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fadab64a2ef4ae0c1328e290642a9c6538a6022", "html_url": "https://github.com/rust-lang/rust/commit/9fadab64a2ef4ae0c1328e290642a9c6538a6022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fadab64a2ef4ae0c1328e290642a9c6538a6022/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917afa4cc9d323a888bb174f46c17610aeebfb2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/917afa4cc9d323a888bb174f46c17610aeebfb2b", "html_url": "https://github.com/rust-lang/rust/commit/917afa4cc9d323a888bb174f46c17610aeebfb2b"}], "stats": {"total": 201, "additions": 186, "deletions": 15}, "files": [{"sha": "9d195c44ada6ef38b387bfb3707a2801516778d8", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fadab64a2ef4ae0c1328e290642a9c6538a6022/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fadab64a2ef4ae0c1328e290642a9c6538a6022/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=9fadab64a2ef4ae0c1328e290642a9c6538a6022", "patch": "@@ -251,7 +251,10 @@ options:\n     --time-llvm-passes time the individual phases of the LLVM backend\n     --sysroot <path>   override the system root (default: rustc's directory)\n     --no-typestate     don't run the typestate pass (unsafe!)\n-    --test             build test harness\\n\\n\");\n+    --test             build test harness\n+    --dps              translate via destination-passing style (experimental)\n+\n+\");\n }\n \n fn get_os(str triple) -> session::os {\n@@ -352,6 +355,7 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n         };\n     auto cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n     auto test = opt_present(match, \"test\");\n+    auto dps = opt_present(match, \"dps\");\n     let @session::options sopts =\n         @rec(library=library,\n              static=static,\n@@ -367,7 +371,8 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n              library_search_paths=library_search_paths,\n              sysroot=sysroot,\n              cfg=cfg,\n-             test=test);\n+             test=test,\n+             dps=dps);\n     ret sopts;\n }\n \n@@ -398,7 +403,7 @@ fn opts() -> vec[getopts::opt] {\n          optopt(\"sysroot\"), optflag(\"stats\"), optflag(\"time-passes\"),\n          optflag(\"time-llvm-passes\"), optflag(\"no-typestate\"),\n          optflag(\"noverify\"), optmulti(\"cfg\"), optflag(\"test\"),\n-         optflag(\"lib\"), optflag(\"static\")];\n+         optflag(\"lib\"), optflag(\"static\"), optflag(\"dps\")];\n }\n \n fn main(vec[str] args) {"}, {"sha": "8c15b8bf0a114309a8c9f2ca904751fd02407b77", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fadab64a2ef4ae0c1328e290642a9c6538a6022/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fadab64a2ef4ae0c1328e290642a9c6538a6022/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=9fadab64a2ef4ae0c1328e290642a9c6538a6022", "patch": "@@ -40,7 +40,8 @@ type options =\n         // The crate config requested for the session, which may be combined\n         // with additional crate configurations during the compile process\n         ast::crate_cfg cfg,\n-        bool test);\n+        bool test,\n+        bool dps);\n \n type crate_metadata = rec(str name, u8[] data);\n "}, {"sha": "02a85383e353e743dbd57ee713a6449ae1682da2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9fadab64a2ef4ae0c1328e290642a9c6538a6022/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fadab64a2ef4ae0c1328e290642a9c6538a6022/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9fadab64a2ef4ae0c1328e290642a9c6538a6022", "patch": "@@ -7083,19 +7083,27 @@ fn trans_fn(@local_ctxt cx, &span sp, &ast::_fn f, ValueRef llfndecl,\n     auto lltop = bcx.llbb;\n     auto block_ty = node_id_type(cx.ccx, f.body.node.id);\n \n-    // This call to trans_block is the place where we bridge between\n-    // translation calls that don't have a return value (trans_crate,\n-    // trans_mod, trans_item, trans_obj, et cetera) and those that do\n-    // (trans_block, trans_expr, et cetera).\n-    auto rslt =\n-        if (!ty::type_is_nil(cx.ccx.tcx, block_ty) &&\n-                !ty::type_is_bot(cx.ccx.tcx, block_ty)) {\n-            trans_block(bcx, f.body, save_in(fcx.llretptr))\n-        } else { trans_block(bcx, f.body, return) };\n-    if (!is_terminated(rslt.bcx)) {\n+    if (cx.ccx.sess.get_opts().dps) {\n+        // Call into the new destination-passing-style translation engine.\n+        auto dest = trans_dps::dest_move(cx.ccx.tcx, fcx.llretptr, block_ty);\n+        bcx = trans_dps::trans_block(bcx, dest, f.body);\n+    } else {\n+        // This call to trans_block is the place where we bridge between\n+        // translation calls that don't have a return value (trans_crate,\n+        // trans_mod, trans_item, trans_obj, et cetera) and those that do\n+        // (trans_block, trans_expr, et cetera).\n+        auto rslt =\n+            if (!ty::type_is_nil(cx.ccx.tcx, block_ty) &&\n+                    !ty::type_is_bot(cx.ccx.tcx, block_ty)) {\n+                trans_block(bcx, f.body, save_in(fcx.llretptr))\n+            } else { trans_block(bcx, f.body, return) };\n+        bcx = rslt.bcx;\n+    }\n+\n+    if (!is_terminated(bcx)) {\n         // FIXME: until LLVM has a unit type, we are moving around\n         // C_nil values rather than their void type.\n-       rslt.bcx.build.RetVoid();\n+       bcx.build.RetVoid();\n     }\n \n     // Insert the mandatory first few basic blocks before lltop."}, {"sha": "f118c0ef0577099650cd8ef2a695b79d2775cf04", "filename": "src/comp/middle/trans_dps.rs", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/9fadab64a2ef4ae0c1328e290642a9c6538a6022/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fadab64a2ef4ae0c1328e290642a9c6538a6022/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs?ref=9fadab64a2ef4ae0c1328e290642a9c6538a6022", "patch": "@@ -0,0 +1,156 @@\n+// Translates individual functions in the completed AST to the LLVM IR, using\n+// destination-passing style.\n+\n+import syntax::ast;\n+import middle::trans;\n+import middle::ty;\n+import trans::block_ctxt;\n+import trans::crate_ctxt;\n+import trans::fn_ctxt;\n+import trans::local_ctxt;\n+import lib::llvm::llvm::TypeRef;\n+import lib::llvm::llvm::ValueRef;\n+import std::option::none;\n+import std::option::some;\n+\n+import type_of_node = trans::node_id_type;\n+\n+\n+// LLVM utilities\n+\n+fn llelement_type(TypeRef llty) -> TypeRef {\n+    lib::llvm::llvm::LLVMGetElementType(llty)\n+}\n+\n+\n+// Destination utilities\n+\n+tag dest_slot {\n+    dst_nil;\n+    dst_val(ValueRef);\n+}\n+\n+type dest = rec(dest_slot slot, bool move);\n+\n+fn dest_slot_for_ptr(&ty::ctxt tcx, ValueRef llptr, ty::t t) -> dest_slot {\n+    if ty::type_is_nil(tcx, t) { dst_nil } else { dst_val(llptr) }\n+}\n+\n+fn dest_copy(&ty::ctxt tcx, ValueRef llptr, ty::t t) -> dest {\n+    ret rec(slot=dest_slot_for_ptr(tcx, llptr, t), move=false);\n+}\n+\n+fn dest_move(&ty::ctxt tcx, ValueRef llptr, ty::t t) -> dest {\n+    ret rec(slot=dest_slot_for_ptr(tcx, llptr, t), move=true);\n+}\n+\n+fn dest_tmp(&@block_ctxt bcx, ty::t t) -> tup(@block_ctxt, dest) {\n+    if ty::type_is_nil(bcx_tcx(bcx), t) {\n+        ret tup(bcx, rec(slot=dst_nil, move=true));\n+    }\n+    auto r = trans::alloc_ty(bcx, t);\n+    ret tup(r.bcx, dest_move(bcx_tcx(bcx), r.val, t));\n+}\n+\n+\n+// Accessors\n+// TODO: When we have overloading, simplify these names!\n+\n+fn bcx_tcx(&@block_ctxt bcx) -> ty::ctxt { ret bcx.fcx.lcx.ccx.tcx; }\n+fn bcx_ccx(&@block_ctxt bcx) -> @crate_ctxt { ret bcx.fcx.lcx.ccx; }\n+fn bcx_lcx(&@block_ctxt bcx) -> @local_ctxt { ret bcx.fcx.lcx; }\n+fn bcx_fcx(&@block_ctxt bcx) -> @fn_ctxt { ret bcx.fcx; }\n+\n+\n+// Common operations\n+\n+fn store(&@block_ctxt bcx, &dest dest, ValueRef llsrc) -> @block_ctxt {\n+    alt (dest.slot) {\n+      dst_nil { /* no-op */ }\n+      dst_val(?lldest) { bcx.build.Store(llsrc, lldest); }\n+    }\n+    ret bcx;\n+}\n+\n+\n+// AST substructure translation, with destinations\n+\n+fn trans_expr(&@block_ctxt bcx, &dest dest, &@ast::expr expr) -> @block_ctxt {\n+    ret bcx;    // TODO\n+}\n+\n+fn trans_recv(&@block_ctxt bcx, &dest dest, &@ast::expr expr) -> @block_ctxt {\n+    ret bcx;    // TODO\n+}\n+\n+fn trans_block(&@block_ctxt cx, &dest dest, &ast::block block)\n+        -> @block_ctxt {\n+    auto bcx = cx;\n+    for each (@ast::local local in trans::block_locals(block)) {\n+        bcx = trans::alloc_local(bcx, local).bcx;\n+    }\n+\n+    for (@ast::stmt stmt in block.node.stmts) {\n+        bcx = trans_stmt(bcx, stmt);\n+\n+        // If we hit a terminator, control won't go any further so\n+        // we're in dead-code land. Stop here.\n+        if trans::is_terminated(bcx) { ret bcx; }\n+    }\n+\n+    alt (block.node.expr) {\n+      some(?e) { ret trans_expr(bcx, dest, e); }\n+      none { ret bcx; }\n+    }\n+}\n+\n+\n+// AST substructure translation, without destinations\n+\n+fn trans_init_local(&@block_ctxt bcx, &@ast::local local) -> @block_ctxt {\n+    auto llptr = bcx_fcx(bcx).lllocals.get(local.node.id);\n+\n+    auto t = type_of_node(bcx_ccx(bcx), local.node.id);\n+    trans::add_clean(bcx, llptr, t);\n+\n+    alt (local.node.init) {\n+      some(?init) {\n+        alt (init.op) {\n+          ast::init_assign {\n+            ret trans_expr(bcx, dest_copy(bcx_tcx(bcx), llptr, t), init.expr);\n+          }\n+          ast::init_move {\n+            ret trans_expr(bcx, dest_move(bcx_tcx(bcx), llptr, t), init.expr);\n+          }\n+          ast::init_recv {\n+            ret trans_recv(bcx, dest_copy(bcx_tcx(bcx), llptr, t), init.expr);\n+          }\n+        }\n+      }\n+      none {\n+        ret store(bcx, dest_copy(bcx_tcx(bcx), llptr, t),\n+                  trans_common::C_null(llelement_type(trans::val_ty(llptr))));\n+      }\n+    }\n+}\n+\n+fn trans_stmt(&@block_ctxt cx, &@ast::stmt stmt) -> @block_ctxt {\n+    auto bcx = cx;\n+    alt (stmt.node) {\n+      ast::stmt_expr(?e, _) {\n+        auto tmp_r = dest_tmp(bcx, ty::expr_ty(bcx_tcx(bcx), e));\n+        bcx = tmp_r._0; auto tmp = tmp_r._1;\n+        ret trans_expr(bcx, tmp, e);\n+      }\n+      ast::stmt_decl(?d, _) {\n+        alt (d.node) {\n+          ast::decl_local(?local) { ret trans_init_local(bcx, local); }\n+          ast::decl_item(?item) {\n+            trans::trans_item(bcx_lcx(bcx), *item);\n+            ret bcx;\n+          }\n+        }\n+      }\n+    }\n+}\n+"}, {"sha": "a64be9f168634f07803c92f3010cb732ce3c3dec", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fadab64a2ef4ae0c1328e290642a9c6538a6022/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9fadab64a2ef4ae0c1328e290642a9c6538a6022/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=9fadab64a2ef4ae0c1328e290642a9c6538a6022", "patch": "@@ -19,6 +19,7 @@ mod middle {\n     mod trans;\n     mod trans_alt;\n     mod trans_comm;\n+    mod trans_dps;\n     mod ty;\n     mod ast_map;\n     mod resolve;"}]}