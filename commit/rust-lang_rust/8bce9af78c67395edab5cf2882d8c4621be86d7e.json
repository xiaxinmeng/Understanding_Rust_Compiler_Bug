{"sha": "8bce9af78c67395edab5cf2882d8c4621be86d7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiY2U5YWY3OGM2NzM5NWVkYWI1Y2YyODgyZDhjNDYyMWJlODZkN2U=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-06T15:16:38Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-12T15:38:18Z"}, "message": "add error_occured field to ConstQualifs, fix #76064", "tree": {"sha": "d0ff48abc27fb22ccd3aa913ffd072d738a2730e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ff48abc27fb22ccd3aa913ffd072d738a2730e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bce9af78c67395edab5cf2882d8c4621be86d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bce9af78c67395edab5cf2882d8c4621be86d7e", "html_url": "https://github.com/rust-lang/rust/commit/8bce9af78c67395edab5cf2882d8c4621be86d7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bce9af78c67395edab5cf2882d8c4621be86d7e/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f5a42b073dc2bee2aa625052eb066ee07072048", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5a42b073dc2bee2aa625052eb066ee07072048", "html_url": "https://github.com/rust-lang/rust/commit/7f5a42b073dc2bee2aa625052eb066ee07072048"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "b0311400e77e25b4f9c14c23a3a9d66db928c78b", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bce9af78c67395edab5cf2882d8c4621be86d7e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bce9af78c67395edab5cf2882d8c4621be86d7e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=8bce9af78c67395edab5cf2882d8c4621be86d7e", "patch": "@@ -233,14 +233,15 @@ pub struct BorrowCheckResult<'tcx> {\n \n /// The result of the `mir_const_qualif` query.\n ///\n-/// Each field corresponds to an implementer of the `Qualif` trait in\n-/// `librustc_mir/transform/check_consts/qualifs.rs`. See that file for more information on each\n+/// Each field (except `error_occured`) corresponds to an implementer of the `Qualif` trait in\n+/// `rustc_mir/src/transform/check_consts/qualifs.rs`. See that file for more information on each\n /// `Qualif`.\n #[derive(Clone, Copy, Debug, Default, TyEncodable, TyDecodable, HashStable)]\n pub struct ConstQualifs {\n     pub has_mut_interior: bool,\n     pub needs_drop: bool,\n     pub custom_eq: bool,\n+    pub error_occured: bool,\n }\n \n /// After we borrow check a closure, we are left with various"}, {"sha": "90b610428cf7abbb19f457f12beccbea7927f8d3", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bce9af78c67395edab5cf2882d8c4621be86d7e/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bce9af78c67395edab5cf2882d8c4621be86d7e/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=8bce9af78c67395edab5cf2882d8c4621be86d7e", "patch": "@@ -9,6 +9,7 @@ use crate::interpret::{\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n+use rustc_errors::ErrorReported;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, subst::Subst, TyCtxt};\n@@ -274,6 +275,10 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                 return Err(ErrorHandled::Reported(error_reported));\n             }\n         }\n+        let qualif = tcx.mir_const_qualif_opt_const_arg(def);\n+        if qualif.error_occured {\n+            return Err(ErrorHandled::Reported(ErrorReported {}));\n+        }\n     }\n \n     let is_static = tcx.is_static(def.did);"}, {"sha": "c57b49b69ce2dc2b746b65b0d121b41c2894ab1a", "filename": "compiler/rustc_mir/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bce9af78c67395edab5cf2882d8c4621be86d7e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bce9af78c67395edab5cf2882d8c4621be86d7e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=8bce9af78c67395edab5cf2882d8c4621be86d7e", "patch": "@@ -9,11 +9,12 @@ use rustc_trait_selection::traits;\n \n use super::ConstCx;\n \n-pub fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> ConstQualifs {\n+pub fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>, error_occured: bool) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n         needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n         custom_eq: CustomEq::in_any_value_of_ty(cx, ty),\n+        error_occured,\n     }\n }\n "}, {"sha": "50617278044c674d0e0e86a13b205fdee0b03e57", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bce9af78c67395edab5cf2882d8c4621be86d7e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bce9af78c67395edab5cf2882d8c4621be86d7e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=8bce9af78c67395edab5cf2882d8c4621be86d7e", "patch": "@@ -123,7 +123,7 @@ impl Qualifs<'mir, 'tcx> {\n         has_mut_interior.get().contains(local) || self.indirectly_mutable(ccx, local, location)\n     }\n \n-    fn in_return_place(&mut self, ccx: &'mir ConstCx<'mir, 'tcx>) -> ConstQualifs {\n+    fn in_return_place(&mut self, ccx: &'mir ConstCx<'mir, 'tcx>, error_occured: bool) -> ConstQualifs {\n         // Find the `Return` terminator if one exists.\n         //\n         // If no `Return` terminator exists, this MIR is divergent. Just return the conservative\n@@ -139,7 +139,7 @@ impl Qualifs<'mir, 'tcx> {\n             .map(|(bb, _)| bb);\n \n         let return_block = match return_block {\n-            None => return qualifs::in_any_value_of_ty(ccx, ccx.body.return_ty()),\n+            None => return qualifs::in_any_value_of_ty(ccx, ccx.body.return_ty(), error_occured),\n             Some(bb) => bb,\n         };\n \n@@ -170,6 +170,7 @@ impl Qualifs<'mir, 'tcx> {\n             needs_drop: self.needs_drop(ccx, RETURN_PLACE, return_loc),\n             has_mut_interior: self.has_mut_interior(ccx, RETURN_PLACE, return_loc),\n             custom_eq,\n+            error_occured,\n         }\n     }\n }\n@@ -276,7 +277,7 @@ impl Validator<'mir, 'tcx> {\n     }\n \n     pub fn qualifs_in_return_place(&mut self) -> ConstQualifs {\n-        self.qualifs.in_return_place(self.ccx)\n+        self.qualifs.in_return_place(self.ccx, self.error_emitted)\n     }\n \n     /// Emits an error if an expression cannot be evaluated in the current context."}, {"sha": "2da764b47c0c44d89ee8984509e450212a5fcc18", "filename": "src/test/ui/consts/issue-76064.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bce9af78c67395edab5cf2882d8c4621be86d7e/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bce9af78c67395edab5cf2882d8c4621be86d7e/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs?ref=8bce9af78c67395edab5cf2882d8c4621be86d7e", "patch": "@@ -0,0 +1,3 @@\n+struct Bug([u8; panic!(1)]); //~ ERROR panicking in constants is unstable\n+\n+fn main() {}"}, {"sha": "f939ff3397504e54093cc2f48f0d8fa15965098a", "filename": "src/test/ui/consts/issue-76064.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8bce9af78c67395edab5cf2882d8c4621be86d7e/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bce9af78c67395edab5cf2882d8c4621be86d7e/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr?ref=8bce9af78c67395edab5cf2882d8c4621be86d7e", "patch": "@@ -0,0 +1,13 @@\n+error[E0658]: panicking in constants is unstable\n+  --> $DIR/issue-76064.rs:1:17\n+   |\n+LL | struct Bug([u8; panic!(1)]);\n+   |                 ^^^^^^^^^\n+   |\n+   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n+   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}