{"sha": "446ed771244812f9012ea78a48d6b932e34dad3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NmVkNzcxMjQ0ODEyZjkwMTJlYTc4YTQ4ZDZiOTMyZTM0ZGFkM2E=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-14T18:00:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-14T18:00:06Z"}, "message": "Rollup merge of #80567 - lukaslueg:intersperse_with, r=m-ou-se\n\nAdd Iterator::intersperse_with\n\nThis is a follow-up to #79479, tracking in #79524, as discussed https://github.com/rust-lang/rust/pull/79479#issuecomment-752671731.\n\n~~Note that I had to manually implement `Clone` and `Debug` because `derive` insists on placing a `Clone`-bound on the struct-definition, which is too narrow. There is a long-standing issue # for this somewhere around here :-)~~\n\nAlso, note that I refactored the guts of `Intersperse` into private functions and re-used them in `IntersperseWith`, so I also went light on duplicating all the tests.\n\nIf this is suitable to be merged, the tracking issue should be updated, since it only mentions `intersperse`.\n\nHappy New Year!\n\nr? ``@m-ou-se``", "tree": {"sha": "cf1dd35cf8e0306961d4206814e2723d796afc2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf1dd35cf8e0306961d4206814e2723d796afc2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/446ed771244812f9012ea78a48d6b932e34dad3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAIanCRBK7hj4Ov3rIwAAdHIIAGIqpUf8wZxd4V24EBEJVAev\n3yZsrP6jkdFpw1WPIQchEr+N+cglG4YlMHu0k8vPYXyQyzQLlr1LNKSTvRsyGwal\npiVaxEtRdl2MykGZ/YmIpnmGEhwY9B/EJRkB0rmq6PZu8f7y/sNKmIh5AT6mBMgw\nM+/KO5X4+pbP/vU1gDTz5Jf06Pg5SqevvONww3eNiJrljeTAMwi0CJdJftYzQhQj\naIex2bz1euk1o3hx2SXEm4rKSL7bK7jptSDUgj9OhndKotaqQ+oVc4kWrF1u9xl9\nirG395VmB645tXdUyd/ntrdDL6wMg1+ZIHHj/uIm5eT5dHkr/D0PPnuymubob3E=\n=WsXY\n-----END PGP SIGNATURE-----\n", "payload": "tree cf1dd35cf8e0306961d4206814e2723d796afc2d\nparent 3308b43ba1adfda24beae60aae192dc570c64479\nparent 9b2f085110c70a8ae92a47ce0c510db82f759992\nauthor Mara Bos <m-ou.se@m-ou.se> 1610647206 +0000\ncommitter GitHub <noreply@github.com> 1610647206 +0000\n\nRollup merge of #80567 - lukaslueg:intersperse_with, r=m-ou-se\n\nAdd Iterator::intersperse_with\n\nThis is a follow-up to #79479, tracking in #79524, as discussed https://github.com/rust-lang/rust/pull/79479#issuecomment-752671731.\n\n~~Note that I had to manually implement `Clone` and `Debug` because `derive` insists on placing a `Clone`-bound on the struct-definition, which is too narrow. There is a long-standing issue # for this somewhere around here :-)~~\n\nAlso, note that I refactored the guts of `Intersperse` into private functions and re-used them in `IntersperseWith`, so I also went light on duplicating all the tests.\n\nIf this is suitable to be merged, the tracking issue should be updated, since it only mentions `intersperse`.\n\nHappy New Year!\n\nr? ``@m-ou-se``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/446ed771244812f9012ea78a48d6b932e34dad3a", "html_url": "https://github.com/rust-lang/rust/commit/446ed771244812f9012ea78a48d6b932e34dad3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/446ed771244812f9012ea78a48d6b932e34dad3a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3308b43ba1adfda24beae60aae192dc570c64479", "url": "https://api.github.com/repos/rust-lang/rust/commits/3308b43ba1adfda24beae60aae192dc570c64479", "html_url": "https://github.com/rust-lang/rust/commit/3308b43ba1adfda24beae60aae192dc570c64479"}, {"sha": "9b2f085110c70a8ae92a47ce0c510db82f759992", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2f085110c70a8ae92a47ce0c510db82f759992", "html_url": "https://github.com/rust-lang/rust/commit/9b2f085110c70a8ae92a47ce0c510db82f759992"}], "stats": {"total": 229, "additions": 202, "deletions": 27}, "files": [{"sha": "1d01e9b5fb7dc9533cf8eefbdf7699538ee84e09", "filename": "library/core/src/iter/adapters/intersperse.rs", "status": "modified", "additions": 133, "deletions": 21, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/446ed771244812f9012ea78a48d6b932e34dad3a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446ed771244812f9012ea78a48d6b932e34dad3a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs?ref=446ed771244812f9012ea78a48d6b932e34dad3a", "patch": "@@ -1,6 +1,9 @@\n use super::Peekable;\n \n /// An iterator adapter that places a separator between all elements.\n+///\n+/// This `struct` is created by [`Iterator::intersperse`]. See its documentation\n+/// for more information.\n #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n #[derive(Debug, Clone)]\n pub struct Intersperse<I: Iterator>\n@@ -40,37 +43,146 @@ where\n         }\n     }\n \n-    fn fold<B, F>(mut self, init: B, mut f: F) -> B\n+    fn fold<B, F>(self, init: B, f: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        let mut accum = init;\n+        let separator = self.separator;\n+        intersperse_fold(self.iter, init, f, move || separator.clone(), self.needs_sep)\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        intersperse_size_hint(&self.iter, self.needs_sep)\n+    }\n+}\n+\n+/// An iterator adapter that places a separator between all elements.\n+///\n+/// This `struct` is created by [`Iterator::intersperse_with`]. See its\n+/// documentation for more information.\n+#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+pub struct IntersperseWith<I, G>\n+where\n+    I: Iterator,\n+{\n+    separator: G,\n+    iter: Peekable<I>,\n+    needs_sep: bool,\n+}\n+\n+#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+impl<I, G> crate::fmt::Debug for IntersperseWith<I, G>\n+where\n+    I: Iterator + crate::fmt::Debug,\n+    I::Item: crate::fmt::Debug,\n+    G: crate::fmt::Debug,\n+{\n+    fn fmt(&self, f: &mut crate::fmt::Formatter<'_>) -> crate::fmt::Result {\n+        f.debug_struct(\"IntersperseWith\")\n+            .field(\"separator\", &self.separator)\n+            .field(\"iter\", &self.iter)\n+            .field(\"needs_sep\", &self.needs_sep)\n+            .finish()\n+    }\n+}\n \n-        // Use `peek()` first to avoid calling `next()` on an empty iterator.\n-        if !self.needs_sep || self.iter.peek().is_some() {\n-            if let Some(x) = self.iter.next() {\n-                accum = f(accum, x);\n-            }\n+#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+impl<I, G> crate::clone::Clone for IntersperseWith<I, G>\n+where\n+    I: Iterator + crate::clone::Clone,\n+    I::Item: crate::clone::Clone,\n+    G: Clone,\n+{\n+    fn clone(&self) -> Self {\n+        IntersperseWith {\n+            separator: self.separator.clone(),\n+            iter: self.iter.clone(),\n+            needs_sep: self.needs_sep.clone(),\n         }\n+    }\n+}\n \n-        let element = &self.separator;\n+impl<I, G> IntersperseWith<I, G>\n+where\n+    I: Iterator,\n+    G: FnMut() -> I::Item,\n+{\n+    pub(in crate::iter) fn new(iter: I, separator: G) -> Self {\n+        Self { iter: iter.peekable(), separator, needs_sep: false }\n+    }\n+}\n \n-        self.iter.fold(accum, |mut accum, x| {\n-            accum = f(accum, element.clone());\n-            accum = f(accum, x);\n-            accum\n-        })\n+#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+impl<I, G> Iterator for IntersperseWith<I, G>\n+where\n+    I: Iterator,\n+    G: FnMut() -> I::Item,\n+{\n+    type Item = I::Item;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<I::Item> {\n+        if self.needs_sep && self.iter.peek().is_some() {\n+            self.needs_sep = false;\n+            Some((self.separator)())\n+        } else {\n+            self.needs_sep = true;\n+            self.iter.next()\n+        }\n+    }\n+\n+    fn fold<B, F>(self, init: B, f: F) -> B\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> B,\n+    {\n+        intersperse_fold(self.iter, init, f, self.separator, self.needs_sep)\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let (lo, hi) = self.iter.size_hint();\n-        let next_is_elem = !self.needs_sep;\n-        let lo = lo.saturating_sub(next_is_elem as usize).saturating_add(lo);\n-        let hi = match hi {\n-            Some(hi) => hi.saturating_sub(next_is_elem as usize).checked_add(hi),\n-            None => None,\n-        };\n-        (lo, hi)\n+        intersperse_size_hint(&self.iter, self.needs_sep)\n     }\n }\n+\n+fn intersperse_size_hint<I>(iter: &I, needs_sep: bool) -> (usize, Option<usize>)\n+where\n+    I: Iterator,\n+{\n+    let (lo, hi) = iter.size_hint();\n+    let next_is_elem = !needs_sep;\n+    let lo = lo.saturating_sub(next_is_elem as usize).saturating_add(lo);\n+    let hi = match hi {\n+        Some(hi) => hi.saturating_sub(next_is_elem as usize).checked_add(hi),\n+        None => None,\n+    };\n+    (lo, hi)\n+}\n+\n+fn intersperse_fold<I, B, F, G>(\n+    mut iter: Peekable<I>,\n+    init: B,\n+    mut f: F,\n+    mut separator: G,\n+    needs_sep: bool,\n+) -> B\n+where\n+    I: Iterator,\n+    F: FnMut(B, I::Item) -> B,\n+    G: FnMut() -> I::Item,\n+{\n+    let mut accum = init;\n+\n+    // Use `peek()` first to avoid calling `next()` on an empty iterator.\n+    if !needs_sep || iter.peek().is_some() {\n+        if let Some(x) = iter.next() {\n+            accum = f(accum, x);\n+        }\n+    }\n+\n+    iter.fold(accum, |mut accum, x| {\n+        accum = f(accum, separator());\n+        accum = f(accum, x);\n+        accum\n+    })\n+}"}, {"sha": "41a7b13232adf465dce0c20ce6d416ba2f92de46", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/446ed771244812f9012ea78a48d6b932e34dad3a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446ed771244812f9012ea78a48d6b932e34dad3a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=446ed771244812f9012ea78a48d6b932e34dad3a", "patch": "@@ -43,7 +43,7 @@ pub use self::flatten::Flatten;\n pub use self::copied::Copied;\n \n #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n-pub use self::intersperse::Intersperse;\n+pub use self::intersperse::{Intersperse, IntersperseWith};\n \n #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n pub use self::map_while::MapWhile;"}, {"sha": "c57ba2bf626452b80fe3e23b30e67ad5cc61500c", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/446ed771244812f9012ea78a48d6b932e34dad3a/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446ed771244812f9012ea78a48d6b932e34dad3a/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=446ed771244812f9012ea78a48d6b932e34dad3a", "patch": "@@ -395,8 +395,6 @@ pub use self::adapters::Cloned;\n pub use self::adapters::Copied;\n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n pub use self::adapters::Flatten;\n-#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n-pub use self::adapters::Intersperse;\n #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n pub use self::adapters::MapWhile;\n #[unstable(feature = \"inplace_iteration\", issue = \"none\")]\n@@ -410,6 +408,8 @@ pub use self::adapters::{\n     Chain, Cycle, Enumerate, Filter, FilterMap, FlatMap, Fuse, Inspect, Map, Peekable, Rev, Scan,\n     Skip, SkipWhile, Take, TakeWhile, Zip,\n };\n+#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+pub use self::adapters::{Intersperse, IntersperseWith};\n \n pub(crate) use self::adapters::process_results;\n "}, {"sha": "83d339d8f40a5664d97a93bca4ff222cfc871985", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/446ed771244812f9012ea78a48d6b932e34dad3a/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446ed771244812f9012ea78a48d6b932e34dad3a/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=446ed771244812f9012ea78a48d6b932e34dad3a", "patch": "@@ -8,7 +8,7 @@ use crate::ops::{Add, ControlFlow, Try};\n use super::super::TrustedRandomAccess;\n use super::super::{Chain, Cloned, Copied, Cycle, Enumerate, Filter, FilterMap, Fuse};\n use super::super::{FlatMap, Flatten};\n-use super::super::{FromIterator, Intersperse, Product, Sum, Zip};\n+use super::super::{FromIterator, Intersperse, IntersperseWith, Product, Sum, Zip};\n use super::super::{\n     Inspect, Map, MapWhile, Peekable, Rev, Scan, Skip, SkipWhile, StepBy, Take, TakeWhile,\n };\n@@ -571,16 +571,22 @@ pub trait Iterator {\n \n     /// Places a copy of `separator` between all elements.\n     ///\n+    /// In case the separator does not implement [`Clone`] or needs to be\n+    /// computed every time, use [`intersperse_with`].\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n     ///\n     /// ```\n     /// #![feature(iter_intersperse)]\n     ///\n-    /// let hello = [\"Hello\", \"World\"].iter().copied().intersperse(\" \").collect::<String>();\n-    /// assert_eq!(hello, \"Hello World\");\n+    /// let hello = [\"Hello\", \"World\", \"!\"].iter().copied().intersperse(\" \").collect::<String>();\n+    /// assert_eq!(hello, \"Hello World !\");\n     /// ```\n+    ///\n+    /// [`Clone`]: crate::clone::Clone\n+    /// [`intersperse_with`]: Iterator::intersperse_with\n     #[inline]\n     #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n     fn intersperse(self, separator: Self::Item) -> Intersperse<Self>\n@@ -591,6 +597,33 @@ pub trait Iterator {\n         Intersperse::new(self, separator)\n     }\n \n+    /// Places an element generated by `separator` between all elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_intersperse)]\n+    ///\n+    /// let src = [\"Hello\", \"to\", \"all\", \"people\", \"!!\"].iter().copied();\n+    ///\n+    /// let mut happy_emojis = [\" \u2764\ufe0f \", \" \ud83d\ude00 \"].iter().copied();\n+    /// let separator = || happy_emojis.next().unwrap_or(\" \ud83e\udd80 \");\n+    ///\n+    /// let result = src.intersperse_with(separator).collect::<String>();\n+    /// assert_eq!(result, \"Hello \u2764\ufe0f to \ud83d\ude00 all \ud83e\udd80 people \ud83e\udd80 !!\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+    fn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G>\n+    where\n+        Self: Sized,\n+        G: FnMut() -> Self::Item,\n+    {\n+        IntersperseWith::new(self, separator)\n+    }\n+\n     /// Takes a closure and creates an iterator which calls that closure on each\n     /// element.\n     ///"}, {"sha": "691767edea6d9659527696e870a23409a86cbb50", "filename": "library/core/tests/iter.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/446ed771244812f9012ea78a48d6b932e34dad3a/library%2Fcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446ed771244812f9012ea78a48d6b932e34dad3a/library%2Fcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter.rs?ref=446ed771244812f9012ea78a48d6b932e34dad3a", "patch": "@@ -3508,6 +3508,12 @@ pub fn extend_for_unit() {\n \n #[test]\n fn test_intersperse() {\n+    let v = std::iter::empty().intersperse(0u32).collect::<Vec<_>>();\n+    assert_eq!(v, vec![]);\n+\n+    let v = std::iter::once(1).intersperse(0).collect::<Vec<_>>();\n+    assert_eq!(v, vec![1]);\n+\n     let xs = [\"a\", \"\", \"b\", \"c\"];\n     let v: Vec<&str> = xs.iter().map(|x| x.clone()).intersperse(\", \").collect();\n     let text: String = v.concat();\n@@ -3520,6 +3526,9 @@ fn test_intersperse() {\n \n #[test]\n fn test_intersperse_size_hint() {\n+    let iter = std::iter::empty::<i32>().intersperse(0);\n+    assert_eq!(iter.size_hint(), (0, Some(0)));\n+\n     let xs = [\"a\", \"\", \"b\", \"c\"];\n     let mut iter = xs.iter().map(|x| x.clone()).intersperse(\", \");\n     assert_eq!(iter.size_hint(), (7, Some(7)));\n@@ -3587,3 +3596,24 @@ fn test_try_fold_specialization_intersperse_err() {\n     iter.try_for_each(|item| if item == \"b\" { None } else { Some(()) });\n     assert_eq!(iter.next(), None);\n }\n+\n+#[test]\n+fn test_intersperse_with() {\n+    #[derive(PartialEq, Debug)]\n+    struct NotClone {\n+        u: u32,\n+    }\n+    let r = vec![NotClone { u: 0 }, NotClone { u: 1 }]\n+        .into_iter()\n+        .intersperse_with(|| NotClone { u: 2 })\n+        .collect::<Vec<_>>();\n+    assert_eq!(r, vec![NotClone { u: 0 }, NotClone { u: 2 }, NotClone { u: 1 }]);\n+\n+    let mut ctr = 100;\n+    let separator = || {\n+        ctr *= 2;\n+        ctr\n+    };\n+    let r = (0..3).intersperse_with(separator).collect::<Vec<_>>();\n+    assert_eq!(r, vec![0, 200, 1, 400, 2]);\n+}"}]}