{"sha": "cf29743ea691952b2825c31ecf10618435854b29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMjk3NDNlYTY5MTk1MmIyODI1YzMxZWNmMTA2MTg0MzU4NTRiMjk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-10-21T13:47:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-21T13:47:20Z"}, "message": "Rollup merge of #45227 - frewsxcv:frewsxcv-set-nonblocking, r=sfackler\n\nExpand docs/examples for TCP `set_nonblocking` methods.\n\nPart of https://github.com/rust-lang/rust/issues/44050.", "tree": {"sha": "6789bab0e6927191c6cd74c1b409155221bfb777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6789bab0e6927191c6cd74c1b409155221bfb777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf29743ea691952b2825c31ecf10618435854b29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf29743ea691952b2825c31ecf10618435854b29", "html_url": "https://github.com/rust-lang/rust/commit/cf29743ea691952b2825c31ecf10618435854b29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf29743ea691952b2825c31ecf10618435854b29/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d532ba7c627a558410e3f21efbb149540c1461e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d532ba7c627a558410e3f21efbb149540c1461e9", "html_url": "https://github.com/rust-lang/rust/commit/d532ba7c627a558410e3f21efbb149540c1461e9"}, {"sha": "fe3ed20d8d72e4b2e4371da423d006021c7b6b97", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe3ed20d8d72e4b2e4371da423d006021c7b6b97", "html_url": "https://github.com/rust-lang/rust/commit/fe3ed20d8d72e4b2e4371da423d006021c7b6b97"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "539ff1df1876f052bb00188edce8504c289e52e3", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 66, "deletions": 7, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/cf29743ea691952b2825c31ecf10618435854b29/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf29743ea691952b2825c31ecf10618435854b29/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=cf29743ea691952b2825c31ecf10618435854b29", "patch": "@@ -498,18 +498,46 @@ impl TcpStream {\n \n     /// Moves this TCP stream into or out of nonblocking mode.\n     ///\n-    /// On Unix this corresponds to calling fcntl, and on Windows this\n-    /// corresponds to calling ioctlsocket.\n+    /// This will result in `read`, `write`, `recv` and `send` operations\n+    /// becoming nonblocking, i.e. immediately returning from their calls.\n+    /// If the IO operation is successful, `Ok` is returned and no further\n+    /// action is required. If the IO operation could not be completed and needs\n+    /// to be retried, an error with kind [`io::ErrorKind::WouldBlock`] is\n+    /// returned.\n+    ///\n+    /// On Unix platforms, calling this method corresponds to calling `fcntl`\n+    /// `FIONBIO`. On Windows calling this method corresponds to calling\n+    /// `ioctlsocket` `FIONBIO`.\n     ///\n     /// # Examples\n     ///\n+    /// Reading bytes from a TCP stream in non-blocking mode:\n+    ///\n     /// ```no_run\n+    /// use std::io::{self, Read};\n     /// use std::net::TcpStream;\n     ///\n-    /// let stream = TcpStream::connect(\"127.0.0.1:8080\")\n-    ///                        .expect(\"Couldn't connect to the server...\");\n+    /// let mut stream = TcpStream::connect(\"127.0.0.1:7878\")\n+    ///     .expect(\"Couldn't connect to the server...\");\n     /// stream.set_nonblocking(true).expect(\"set_nonblocking call failed\");\n+    ///\n+    /// # fn wait_for_fd() { unimplemented!() }\n+    /// let mut buf = vec![];\n+    /// loop {\n+    ///     match stream.read_to_end(&mut buf) {\n+    ///         Ok(_) => break,\n+    ///         Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n+    ///             // wait until network socket is ready, typically implemented\n+    ///             // via platform-specific APIs such as epoll or IOCP\n+    ///             wait_for_fd();\n+    ///         }\n+    ///         Err(e) => panic!(\"encountered IO error: {}\", e),\n+    ///     };\n+    /// };\n+    /// println!(\"bytes: {:?}\", buf);\n     /// ```\n+    ///\n+    /// [`io::ErrorKind::WouldBlock`]: ../io/enum.ErrorKind.html#variant.WouldBlock\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n@@ -780,17 +808,48 @@ impl TcpListener {\n \n     /// Moves this TCP stream into or out of nonblocking mode.\n     ///\n-    /// On Unix this corresponds to calling fcntl, and on Windows this\n-    /// corresponds to calling ioctlsocket.\n+    /// This will result in the `accept` operation becoming nonblocking,\n+    /// i.e. immediately returning from their calls. If the IO operation is\n+    /// successful, `Ok` is returned and no further action is required. If the\n+    /// IO operation could not be completed and needs to be retried, an error\n+    /// with kind [`io::ErrorKind::WouldBlock`] is returned.\n+    ///\n+    /// On Unix platforms, calling this method corresponds to calling `fcntl`\n+    /// `FIONBIO`. On Windows calling this method corresponds to calling\n+    /// `ioctlsocket` `FIONBIO`.\n     ///\n     /// # Examples\n     ///\n+    /// Bind a TCP listener to an address, listen for connections, and read\n+    /// bytes in nonblocking mode:\n+    ///\n     /// ```no_run\n+    /// use std::io;\n     /// use std::net::TcpListener;\n     ///\n-    /// let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n+    /// let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n     /// listener.set_nonblocking(true).expect(\"Cannot set non-blocking\");\n+    ///\n+    /// # fn wait_for_fd() { unimplemented!() }\n+    /// # fn handle_connection(stream: std::net::TcpStream) { unimplemented!() }\n+    /// for stream in listener.incoming() {\n+    ///     match stream {\n+    ///         Ok(s) => {\n+    ///             // do something with the TcpStream\n+    ///             handle_connection(s);\n+    ///         }\n+    ///         Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n+    ///             // wait until network socket is ready, typically implemented\n+    ///             // via platform-specific APIs such as epoll or IOCP\n+    ///             wait_for_fd();\n+    ///             continue;\n+    ///         }\n+    ///         Err(e) => panic!(\"encountered IO error: {}\", e),\n+    ///     }\n+    /// }\n     /// ```\n+    ///\n+    /// [`io::ErrorKind::WouldBlock`]: ../io/enum.ErrorKind.html#variant.WouldBlock\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)"}]}