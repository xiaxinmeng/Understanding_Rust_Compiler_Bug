{"sha": "791dbaf58402ef87c16485be8d8ee37b5aa1dda3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MWRiYWY1ODQwMmVmODdjMTY0ODViZThkOGVlMzdiNWFhMWRkYTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-26T18:27:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-26T18:27:40Z"}, "message": "disable validation code so that it all compiles against current nightly", "tree": {"sha": "e894f9bc90fed82f0e71c9c0d00f38ef556fd811", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e894f9bc90fed82f0e71c9c0d00f38ef556fd811"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/791dbaf58402ef87c16485be8d8ee37b5aa1dda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/791dbaf58402ef87c16485be8d8ee37b5aa1dda3", "html_url": "https://github.com/rust-lang/rust/commit/791dbaf58402ef87c16485be8d8ee37b5aa1dda3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/791dbaf58402ef87c16485be8d8ee37b5aa1dda3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdc7071697c8dd1d5db3621827dcb74bdcdfa4de", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc7071697c8dd1d5db3621827dcb74bdcdfa4de", "html_url": "https://github.com/rust-lang/rust/commit/fdc7071697c8dd1d5db3621827dcb74bdcdfa4de"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "01a4a8656b40fd2c57d69e74d933a02796c6e498", "filename": "src/librustc_mir/interpret/bin/miri.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/791dbaf58402ef87c16485be8d8ee37b5aa1dda3/src%2Flibrustc_mir%2Finterpret%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791dbaf58402ef87c16485be8d8ee37b5aa1dda3/src%2Flibrustc_mir%2Finterpret%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fbin%2Fmiri.rs?ref=791dbaf58402ef87c16485be8d8ee37b5aa1dda3", "patch": "@@ -202,7 +202,6 @@ fn main() {\n \n     // for auxilary builds in unit tests\n     args.push(\"-Zalways-encode-mir\".to_owned());\n-    args.push(\"-Zmir-emit-validate\".to_owned());\n \n     rustc_driver::run_compiler(&args, &mut MiriCompilerCalls(RustcDefaultCalls), None, None);\n }"}, {"sha": "331ae7e248b15e5bdf5f5a84c33d4eb894d369e8", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/791dbaf58402ef87c16485be8d8ee37b5aa1dda3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791dbaf58402ef87c16485be8d8ee37b5aa1dda3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=791dbaf58402ef87c16485be8d8ee37b5aa1dda3", "patch": "@@ -31,6 +31,8 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n     /// The virtual memory system.\n     pub(crate) memory: Memory<'a, 'tcx>,\n \n+    #[allow(dead_code)]\n+    // FIXME(@RalfJung): validation branch\n     /// Lvalues that were suspended by the validation subsystem, and will be recovered later\n     pub(crate) suspended: HashMap<DynamicLifetime, Vec<ValidationQuery<'tcx>>>,\n "}, {"sha": "461fced3c6090652f07b561d8d1ba93a0acd05fe", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/791dbaf58402ef87c16485be8d8ee37b5aa1dda3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791dbaf58402ef87c16485be8d8ee37b5aa1dda3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=791dbaf58402ef87c16485be8d8ee37b5aa1dda3", "patch": "@@ -31,6 +31,8 @@ mod range {\n     }\n \n     impl MemoryRange {\n+        #[allow(dead_code)]\n+        // FIXME(@RalfJung): validation branch\n         pub fn new(offset: u64, len: u64) -> MemoryRange {\n             assert!(len > 0);\n             MemoryRange {\n@@ -55,6 +57,8 @@ mod range {\n             left..right\n         }\n \n+        #[allow(dead_code)]\n+        // FIXME(@RalfJung): validation branch\n         pub fn contained_in(&self, offset: u64, len: u64) -> bool {\n             assert!(len > 0);\n             offset <= self.start && self.end <= (offset + len)\n@@ -135,6 +139,8 @@ impl Allocation {\n             .filter(move |&(range, _)| range.overlaps(offset, len))\n     }\n \n+    #[allow(dead_code)]\n+    // FIXME(@RalfJung): validation branch\n     fn iter_locks_mut<'a>(&'a mut self, offset: u64, len: u64) -> impl Iterator<Item=(&'a MemoryRange, &'a mut LockInfo)> + 'a {\n         self.locks.range_mut(MemoryRange::range(offset, len))\n             .filter(move |&(range, _)| range.overlaps(offset, len))\n@@ -537,6 +543,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             .map_err(|lock| EvalError::MemoryLockViolation { ptr, len, frame, access, lock })\n     }\n \n+    #[allow(dead_code)]\n+    // FIXME(@RalfJung): validation branch\n     /// Acquire the lock for the given lifetime\n     pub(crate) fn acquire_lock(&mut self, ptr: MemoryPointer, len: u64, region: Option<CodeExtent>, kind: AccessKind) -> EvalResult<'tcx> {\n         use std::collections::btree_map::Entry::*;\n@@ -565,6 +573,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         Ok(())\n     }\n \n+    #[allow(dead_code)]\n+    // FIXME(@RalfJung): validation branch\n     /// Release a write lock prematurely. If there's a read lock or someone else's lock, fail.\n     pub(crate) fn release_write_lock(&mut self, ptr: MemoryPointer, len: u64) -> EvalResult<'tcx> {\n         assert!(len > 0);"}, {"sha": "86e123233061b043029524430c99b026e314b990", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/791dbaf58402ef87c16485be8d8ee37b5aa1dda3/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791dbaf58402ef87c16485be8d8ee37b5aa1dda3/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=791dbaf58402ef87c16485be8d8ee37b5aa1dda3", "patch": "@@ -128,15 +128,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.deallocate_local(old_val)?;\n             }\n \n-            // Validity checks.\n-            Validate(op, ref lvalues) => {\n-                for operand in lvalues {\n-                    self.validation_op(op, operand)?;\n-                }\n-            }\n-            EndRegion(ce) => {\n-                self.end_region(ce)?;\n-            }\n+            // NOPs for now.\n+            EndRegion(_ce) => {}\n \n             // Defined to do nothing. These are added by optimization passes, to avoid changing the\n             // size of MIR constantly."}, {"sha": "4c9e239299dc778c3dd4a858c9e69699388d9711", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/791dbaf58402ef87c16485be8d8ee37b5aa1dda3/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791dbaf58402ef87c16485be8d8ee37b5aa1dda3/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=791dbaf58402ef87c16485be8d8ee37b5aa1dda3", "patch": "@@ -1,6 +1,9 @@\n+// code for @RalfJung's validation branch is dead for now\n+#![allow(dead_code)]\n+\n use rustc::hir::Mutability;\n use rustc::hir::Mutability::*;\n-use rustc::mir::{self, ValidationOp, ValidationOperand};\n+use rustc::mir;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::subst::Subst;\n use rustc::traits::Reveal;\n@@ -13,6 +16,23 @@ use memory::{AccessKind, LockInfo};\n use value::{PrimVal, Value};\n use lvalue::{Lvalue, LvalueExtra};\n \n+// FIXME remove this once it lands in rustc\n+#[derive(Copy, Clone, PartialEq, Eq)]\n+pub enum ValidationOp {\n+    Acquire,\n+    Release,\n+    Suspend(CodeExtent),\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct ValidationOperand<'tcx, T> {\n+    pub lval: T,\n+    pub ty: Ty<'tcx>,\n+    pub re: Option<CodeExtent>,\n+    pub mutbl: Mutability,\n+}\n+// FIXME end\n+\n pub type ValidationQuery<'tcx> = ValidationOperand<'tcx, Lvalue<'tcx>>;\n \n #[derive(Copy, Clone, Debug)]"}]}