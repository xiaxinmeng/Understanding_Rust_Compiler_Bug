{"sha": "1eb41804a28b8e9b7643a61f3c224a06aba1f433", "node_id": "C_kwDOAAsO6NoAKDFlYjQxODA0YTI4YjhlOWI3NjQzYTYxZjNjMjI0YTA2YWJhMWY0MzM", "commit": {"author": {"name": "Jacob Kiesel", "email": "kieseljake@gmail.com", "date": "2022-09-14T05:50:47Z"}, "committer": {"name": "Jacob Kiesel", "email": "kieseljake@live.com", "date": "2022-09-14T19:33:13Z"}, "message": "`bool_to_int_with_if` inverse case patch", "tree": {"sha": "11aae486a5ecfde44e29b10984b53bc75029c80e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11aae486a5ecfde44e29b10984b53bc75029c80e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eb41804a28b8e9b7643a61f3c224a06aba1f433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb41804a28b8e9b7643a61f3c224a06aba1f433", "html_url": "https://github.com/rust-lang/rust/commit/1eb41804a28b8e9b7643a61f3c224a06aba1f433", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eb41804a28b8e9b7643a61f3c224a06aba1f433/comments", "author": {"login": "Xaeroxe", "id": 6182002, "node_id": "MDQ6VXNlcjYxODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6182002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xaeroxe", "html_url": "https://github.com/Xaeroxe", "followers_url": "https://api.github.com/users/Xaeroxe/followers", "following_url": "https://api.github.com/users/Xaeroxe/following{/other_user}", "gists_url": "https://api.github.com/users/Xaeroxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xaeroxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xaeroxe/subscriptions", "organizations_url": "https://api.github.com/users/Xaeroxe/orgs", "repos_url": "https://api.github.com/users/Xaeroxe/repos", "events_url": "https://api.github.com/users/Xaeroxe/events{/privacy}", "received_events_url": "https://api.github.com/users/Xaeroxe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xaeroxe", "id": 6182002, "node_id": "MDQ6VXNlcjYxODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6182002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xaeroxe", "html_url": "https://github.com/Xaeroxe", "followers_url": "https://api.github.com/users/Xaeroxe/followers", "following_url": "https://api.github.com/users/Xaeroxe/following{/other_user}", "gists_url": "https://api.github.com/users/Xaeroxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xaeroxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xaeroxe/subscriptions", "organizations_url": "https://api.github.com/users/Xaeroxe/orgs", "repos_url": "https://api.github.com/users/Xaeroxe/repos", "events_url": "https://api.github.com/users/Xaeroxe/events{/privacy}", "received_events_url": "https://api.github.com/users/Xaeroxe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ddbc86bef837b1072159c020c35940ce52ae696", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ddbc86bef837b1072159c020c35940ce52ae696", "html_url": "https://github.com/rust-lang/rust/commit/2ddbc86bef837b1072159c020c35940ce52ae696"}], "stats": {"total": 85, "additions": 73, "deletions": 12}, "files": [{"sha": "bea74279e0335f36b8bab121292ab5d3f886e1de", "filename": "clippy_lints/src/bool_to_int_with_if.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1eb41804a28b8e9b7643a61f3c224a06aba1f433/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb41804a28b8e9b7643a61f3c224a06aba1f433/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs?ref=1eb41804a28b8e9b7643a61f3c224a06aba1f433", "patch": "@@ -55,27 +55,43 @@ fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx\n     if let ExprKind::If(check, then, Some(else_)) = expr.kind\n         && let Some(then_lit) = int_literal(then)\n         && let Some(else_lit) = int_literal(else_)\n-        && check_int_literal_equals_val(then_lit, 1)\n-        && check_int_literal_equals_val(else_lit, 0)\n     {\n+        let inverted = if\n+            check_int_literal_equals_val(then_lit, 1)\n+            && check_int_literal_equals_val(else_lit, 0) {\n+            false\n+        } else if\n+            check_int_literal_equals_val(then_lit, 0)\n+            && check_int_literal_equals_val(else_lit, 1) {\n+            true\n+        } else {\n+            // Expression isn't boolean, exit\n+            return;\n+        };\n         let mut applicability = Applicability::MachineApplicable;\n         let snippet = snippet_block_with_applicability(ctx, check.span, \"..\", None, &mut applicability);\n+\n+        let invert = if inverted { \"!\" } else { \"\" };\n+        let need_parens = should_have_parentheses(check);\n+\n         let snippet_with_braces = {\n-            let need_parens = should_have_parentheses(check);\n             let (left_paren, right_paren) = if need_parens {(\"(\", \")\")} else {(\"\", \"\")};\n-            format!(\"{left_paren}{snippet}{right_paren}\")\n+            format!(\"{invert}{left_paren}{snippet}{right_paren}\")\n         };\n \n         let ty = ctx.typeck_results().expr_ty(then_lit); // then and else must be of same type\n \n         let suggestion = {\n             let wrap_in_curly = is_else_clause(ctx.tcx, expr);\n             let (left_curly, right_curly) = if wrap_in_curly {(\"{\", \"}\")} else {(\"\", \"\")};\n+            let (left_paren, right_paren) = if inverted && need_parens {(\"(\", \")\")} else {(\"\", \"\")};\n             format!(\n-                \"{left_curly}{ty}::from({snippet}){right_curly}\"\n+                \"{left_curly}{ty}::from({invert}{left_paren}{snippet}{right_paren}){right_curly}\"\n             )\n         }; // when used in else clause if statement should be wrapped in curly braces\n \n+        let (inverted_left_paren, inverted_right_paren) = if inverted {(\"(\", \")\")} else {(\"\", \"\")};\n+\n         span_lint_and_then(ctx,\n             BOOL_TO_INT_WITH_IF,\n             expr.span,\n@@ -87,7 +103,7 @@ fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx\n                 suggestion,\n                 applicability,\n             );\n-            diag.note(format!(\"`{snippet_with_braces} as {ty}` or `{snippet_with_braces}.into()` can also be valid options\"));\n+            diag.note(format!(\"`{snippet_with_braces} as {ty}` or `{inverted_left_paren}{snippet_with_braces}{inverted_right_paren}.into()` can also be valid options\"));\n         });\n     };\n }"}, {"sha": "c48dc941b84b989d4149ad54a82307b87b63800b", "filename": "tests/ui/bool_to_int_with_if.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1eb41804a28b8e9b7643a61f3c224a06aba1f433/tests%2Fui%2Fbool_to_int_with_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1eb41804a28b8e9b7643a61f3c224a06aba1f433/tests%2Fui%2Fbool_to_int_with_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.fixed?ref=1eb41804a28b8e9b7643a61f3c224a06aba1f433", "patch": "@@ -14,6 +14,7 @@ fn main() {\n     // precedence\n     i32::from(a);\n     i32::from(!a);\n+    i32::from(!a);\n     i32::from(a || b);\n     i32::from(cond(a, b));\n     i32::from(x + y < 4);\n@@ -23,6 +24,11 @@ fn main() {\n         123\n     } else {i32::from(b)};\n \n+    // if else if inverted\n+    if a {\n+        123\n+    } else {i32::from(!b)};\n+\n     // Shouldn't lint\n \n     if a {"}, {"sha": "5d9496f01775f84505c823fa594c21c43ae78b6b", "filename": "tests/ui/bool_to_int_with_if.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1eb41804a28b8e9b7643a61f3c224a06aba1f433/tests%2Fui%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb41804a28b8e9b7643a61f3c224a06aba1f433/tests%2Fui%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.rs?ref=1eb41804a28b8e9b7643a61f3c224a06aba1f433", "patch": "@@ -17,6 +17,11 @@ fn main() {\n     } else {\n         0\n     };\n+    if a {\n+        0\n+    } else {\n+        1\n+    };\n     if !a {\n         1\n     } else {\n@@ -47,6 +52,15 @@ fn main() {\n         0\n     };\n \n+    // if else if inverted\n+    if a {\n+        123\n+    } else if b {\n+        0\n+    } else {\n+        1\n+    };\n+\n     // Shouldn't lint\n \n     if a {"}, {"sha": "cc3e0395aa4ffc04fd9e41deb5ecd3e7eee2b011", "filename": "tests/ui/bool_to_int_with_if.stderr", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1eb41804a28b8e9b7643a61f3c224a06aba1f433/tests%2Fui%2Fbool_to_int_with_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb41804a28b8e9b7643a61f3c224a06aba1f433/tests%2Fui%2Fbool_to_int_with_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.stderr?ref=1eb41804a28b8e9b7643a61f3c224a06aba1f433", "patch": "@@ -14,6 +14,18 @@ LL | |     };\n error: boolean to int conversion using if\n   --> $DIR/bool_to_int_with_if.rs:20:5\n    |\n+LL | /     if a {\n+LL | |         0\n+LL | |     } else {\n+LL | |         1\n+LL | |     };\n+   | |_____^ help: replace with from: `i32::from(!a)`\n+   |\n+   = note: `!a as i32` or `(!a).into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:25:5\n+   |\n LL | /     if !a {\n LL | |         1\n LL | |     } else {\n@@ -24,7 +36,7 @@ LL | |     };\n    = note: `!a as i32` or `!a.into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:25:5\n+  --> $DIR/bool_to_int_with_if.rs:30:5\n    |\n LL | /     if a || b {\n LL | |         1\n@@ -36,7 +48,7 @@ LL | |     };\n    = note: `(a || b) as i32` or `(a || b).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:30:5\n+  --> $DIR/bool_to_int_with_if.rs:35:5\n    |\n LL | /     if cond(a, b) {\n LL | |         1\n@@ -48,7 +60,7 @@ LL | |     };\n    = note: `cond(a, b) as i32` or `cond(a, b).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:35:5\n+  --> $DIR/bool_to_int_with_if.rs:40:5\n    |\n LL | /     if x + y < 4 {\n LL | |         1\n@@ -60,7 +72,7 @@ LL | |     };\n    = note: `(x + y < 4) as i32` or `(x + y < 4).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:44:12\n+  --> $DIR/bool_to_int_with_if.rs:49:12\n    |\n LL |       } else if b {\n    |  ____________^\n@@ -73,12 +85,25 @@ LL | |     };\n    = note: `b as i32` or `b.into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:102:5\n+  --> $DIR/bool_to_int_with_if.rs:58:12\n+   |\n+LL |       } else if b {\n+   |  ____________^\n+LL | |         0\n+LL | |     } else {\n+LL | |         1\n+LL | |     };\n+   | |_____^ help: replace with from: `{i32::from(!b)}`\n+   |\n+   = note: `!b as i32` or `(!b).into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:116:5\n    |\n LL |     if a { 1 } else { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace with from: `u8::from(a)`\n    |\n    = note: `a as u8` or `a.into()` can also be valid options\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n "}]}