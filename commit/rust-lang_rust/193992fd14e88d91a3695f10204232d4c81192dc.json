{"sha": "193992fd14e88d91a3695f10204232d4c81192dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5Mzk5MmZkMTRlODhkOTFhMzY5NWYxMDIwNDIzMmQ0YzgxMTkyZGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-18T09:45:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-18T09:52:17Z"}, "message": "move thread worker to a separate crate", "tree": {"sha": "fced7beb98137d8675e0f864c7b41c909b97ebf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fced7beb98137d8675e0f864c7b41c909b97ebf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/193992fd14e88d91a3695f10204232d4c81192dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/193992fd14e88d91a3695f10204232d4c81192dc", "html_url": "https://github.com/rust-lang/rust/commit/193992fd14e88d91a3695f10204232d4c81192dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/193992fd14e88d91a3695f10204232d4c81192dc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a1ab869b7aaa38d55e8995ec1b49e72b55a5965", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1ab869b7aaa38d55e8995ec1b49e72b55a5965", "html_url": "https://github.com/rust-lang/rust/commit/4a1ab869b7aaa38d55e8995ec1b49e72b55a5965"}], "stats": {"total": 108, "additions": 62, "deletions": 46}, "files": [{"sha": "15209184dcfc1be0549ec697bad8fb60dfce3eb6", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/193992fd14e88d91a3695f10204232d4c81192dc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/193992fd14e88d91a3695f10204232d4c81192dc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=193992fd14e88d91a3695f10204232d4c81192dc", "patch": "@@ -700,6 +700,7 @@ dependencies = [\n  \"tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_worker 0.1.0\",\n  \"threadpool 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 2.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1116,6 +1117,15 @@ dependencies = [\n  \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"thread_worker\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"crossbeam-channel 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"threadpool\"\n version = \"1.7.1\""}, {"sha": "30a8d35cd3a7c9592b55f388ada37acb2c2ef08f", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=193992fd14e88d91a3695f10204232d4c81192dc", "patch": "@@ -26,6 +26,7 @@ text_unit = { version = \"0.1.2\", features = [\"serde\"] }\n smol_str = { version = \"0.1.5\", features = [\"serde\"] }\n rustc-hash = \"1.0\"\n \n+thread_worker = { path = \"../thread_worker\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "1d7258c359ba2acc406cf6f66f29889411ec7136", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=193992fd14e88d91a3695f10204232d4c81192dc", "patch": "@@ -5,7 +5,6 @@ mod path_map;\n mod project_model;\n pub mod req;\n mod server_world;\n-pub mod thread_watcher;\n mod vfs;\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;"}, {"sha": "eab82ee8599a9db42b1e06d25944b38a91a434a2", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=193992fd14e88d91a3695f10204232d4c81192dc", "patch": "@@ -10,6 +10,7 @@ use gen_lsp_server::{\n use languageserver_types::NumberOrString;\n use ra_analysis::{Canceled, FileId, LibraryData};\n use rayon;\n+use thread_worker::Worker;\n use threadpool::ThreadPool;\n use rustc_hash::FxHashSet;\n use serde::{de::DeserializeOwned, Serialize};\n@@ -21,7 +22,6 @@ use crate::{\n     project_model::{workspace_loader, CargoWorkspace},\n     req,\n     server_world::{ServerWorld, ServerWorldState},\n-    thread_watcher::Worker,\n     vfs::{self, FileEvent},\n     Result,\n };\n@@ -92,8 +92,8 @@ pub fn main_loop(\n     let ws_res = ws_watcher.stop();\n \n     main_res?;\n-    fs_res?;\n-    ws_res?;\n+    fs_res.map_err(|_| format_err!(\"fs watcher died\"))?;\n+    ws_res.map_err(|_| format_err!(\"ws watcher died\"))?;\n \n     Ok(())\n }"}, {"sha": "b881f8b6f305ebb7bcc6a311f5001effe8d7363c", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=193992fd14e88d91a3695f10204232d4c81192dc", "patch": "@@ -4,11 +4,9 @@ use cargo_metadata::{metadata_run, CargoOpt};\n use ra_syntax::SmolStr;\n use rustc_hash::{FxHashMap, FxHashSet};\n use failure::{format_err, bail};\n+use thread_worker::{WorkerHandle, Worker};\n \n-use crate::{\n-    Result,\n-    thread_watcher::{ThreadWatcher, Worker},\n-};\n+use crate::Result;\n \n /// `CargoWorksapce` represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n@@ -199,8 +197,8 @@ impl TargetKind {\n     }\n }\n \n-pub fn workspace_loader() -> (Worker<PathBuf, Result<CargoWorkspace>>, ThreadWatcher) {\n-    Worker::<PathBuf, Result<CargoWorkspace>>::spawn(\n+pub fn workspace_loader() -> (Worker<PathBuf, Result<CargoWorkspace>>, WorkerHandle) {\n+    thread_worker::spawn::<PathBuf, Result<CargoWorkspace>, _>(\n         \"workspace loader\",\n         1,\n         |input_receiver, output_sender| {"}, {"sha": "fcf7693d86855c227e939fda9275489d68a5b74f", "filename": "crates/ra_lsp_server/src/vfs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fvfs.rs?ref=193992fd14e88d91a3695f10204232d4c81192dc", "patch": "@@ -4,8 +4,7 @@ use std::{\n };\n \n use walkdir::WalkDir;\n-\n-use crate::thread_watcher::{ThreadWatcher, Worker};\n+use thread_worker::{WorkerHandle, Worker};\n \n #[derive(Debug)]\n pub struct FileEvent {\n@@ -18,8 +17,8 @@ pub enum FileEventKind {\n     Add(String),\n }\n \n-pub fn roots_loader() -> (Worker<PathBuf, (PathBuf, Vec<FileEvent>)>, ThreadWatcher) {\n-    Worker::<PathBuf, (PathBuf, Vec<FileEvent>)>::spawn(\n+pub fn roots_loader() -> (Worker<PathBuf, (PathBuf, Vec<FileEvent>)>, WorkerHandle) {\n+    thread_worker::spawn::<PathBuf, (PathBuf, Vec<FileEvent>), _>(\n         \"roots loader\",\n         128,\n         |input_receiver, output_sender| {"}, {"sha": "07a878a2648c954481f69a6edf1a118d862cff30", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=193992fd14e88d91a3695f10204232d4c81192dc", "patch": "@@ -17,11 +17,11 @@ use languageserver_types::{\n use serde::Serialize;\n use serde_json::{to_string_pretty, Value};\n use tempdir::TempDir;\n+use thread_worker::{WorkerHandle, Worker};\n use test_utils::{parse_fixture, find_mismatch};\n \n use ra_lsp_server::{\n     main_loop, req,\n-    thread_watcher::{ThreadWatcher, Worker},\n };\n \n pub fn project(fixture: &str) -> Server {\n@@ -45,13 +45,13 @@ pub struct Server {\n     messages: RefCell<Vec<RawMessage>>,\n     dir: TempDir,\n     worker: Option<Worker<RawMessage, RawMessage>>,\n-    watcher: Option<ThreadWatcher>,\n+    watcher: Option<WorkerHandle>,\n }\n \n impl Server {\n     fn new(dir: TempDir, files: Vec<(PathBuf, String)>) -> Server {\n         let path = dir.path().to_path_buf();\n-        let (worker, watcher) = Worker::<RawMessage, RawMessage>::spawn(\n+        let (worker, watcher) = thread_worker::spawn::<RawMessage, RawMessage, _>(\n             \"test server\",\n             128,\n             move |mut msg_receiver, mut msg_sender| {"}, {"sha": "62d66a1a3ddadcd17d9f033819b47b678a2954c5", "filename": "crates/thread_worker/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fthread_worker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fthread_worker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fthread_worker%2FCargo.toml?ref=193992fd14e88d91a3695f10204232d4c81192dc", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+edition = \"2018\"\n+name = \"thread_worker\"\n+version = \"0.1.0\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+\n+[dependencies]\n+drop_bomb = \"0.1.0\"\n+crossbeam-channel = \"0.2.4\"\n+log = \"0.4.3\"\n+"}, {"sha": "e558559ef20b4edae24aa3665e8f8055d050a77c", "filename": "crates/thread_worker/src/lib.rs", "status": "renamed", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fthread_worker%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/193992fd14e88d91a3695f10204232d4c81192dc/crates%2Fthread_worker%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fthread_worker%2Fsrc%2Flib.rs?ref=193992fd14e88d91a3695f10204232d4c81192dc", "patch": "@@ -1,28 +1,35 @@\n+//! Small utility to correctly spawn crossbeam-channel based worker threads.\n+\n use std::thread;\n \n use crossbeam_channel::{bounded, unbounded, Receiver, Sender};\n use drop_bomb::DropBomb;\n-use failure::format_err;\n-\n-use crate::Result;\n \n pub struct Worker<I, O> {\n     pub inp: Sender<I>,\n     pub out: Receiver<O>,\n }\n \n-impl<I, O> Worker<I, O> {\n-    pub fn spawn<F>(name: &'static str, buf: usize, f: F) -> (Self, ThreadWatcher)\n-    where\n-        F: FnOnce(Receiver<I>, Sender<O>) + Send + 'static,\n-        I: Send + 'static,\n-        O: Send + 'static,\n-    {\n-        let (worker, inp_r, out_s) = worker_chan(buf);\n-        let watcher = ThreadWatcher::spawn(name, move || f(inp_r, out_s));\n-        (worker, watcher)\n-    }\n+pub struct WorkerHandle {\n+    name: &'static str,\n+    thread: thread::JoinHandle<()>,\n+    bomb: DropBomb,\n+}\n \n+pub fn spawn<I, O, F>(name: &'static str, buf: usize, f: F) -> (Worker<I, O>, WorkerHandle)\n+where\n+    F: FnOnce(Receiver<I>, Sender<O>) + Send + 'static,\n+    I: Send + 'static,\n+    O: Send + 'static,\n+{\n+    let (worker, inp_r, out_s) = worker_chan(buf);\n+    let watcher = WorkerHandle::spawn(name, move || f(inp_r, out_s));\n+    (worker, watcher)\n+}\n+\n+impl<I, O> Worker<I, O> {\n+    /// Stops the worker. Returns the message receiver to fetch results which\n+    /// have become ready before the worker is stopped.\n     pub fn stop(self) -> Receiver<O> {\n         self.out\n     }\n@@ -32,30 +39,21 @@ impl<I, O> Worker<I, O> {\n     }\n }\n \n-pub struct ThreadWatcher {\n-    name: &'static str,\n-    thread: thread::JoinHandle<()>,\n-    bomb: DropBomb,\n-}\n-\n-impl ThreadWatcher {\n-    fn spawn(name: &'static str, f: impl FnOnce() + Send + 'static) -> ThreadWatcher {\n+impl WorkerHandle {\n+    fn spawn(name: &'static str, f: impl FnOnce() + Send + 'static) -> WorkerHandle {\n         let thread = thread::spawn(f);\n-        ThreadWatcher {\n+        WorkerHandle {\n             name,\n             thread,\n-            bomb: DropBomb::new(format!(\"ThreadWatcher {} was not stopped\", name)),\n+            bomb: DropBomb::new(format!(\"WorkerHandle {} was not stopped\", name)),\n         }\n     }\n \n-    pub fn stop(mut self) -> Result<()> {\n+    pub fn stop(mut self) -> thread::Result<()> {\n         log::info!(\"waiting for {} to finish ...\", self.name);\n         let name = self.name;\n         self.bomb.defuse();\n-        let res = self\n-            .thread\n-            .join()\n-            .map_err(|_| format_err!(\"ThreadWatcher {} died\", name));\n+        let res = self.thread.join();\n         match &res {\n             Ok(()) => log::info!(\"... {} terminated with ok\", name),\n             Err(_) => log::error!(\"... {} terminated with err\", name),", "previous_filename": "crates/ra_lsp_server/src/thread_watcher.rs"}]}