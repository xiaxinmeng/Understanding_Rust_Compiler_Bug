{"sha": "388fca81f6605ce32a79d484723262f0e50965e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OGZjYTgxZjY2MDVjZTMyYTc5ZDQ4NDcyMzI2MmYwZTUwOTY1ZTQ=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-27T00:13:10Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-04T13:31:55Z"}, "message": "Cleanup compile.rs.", "tree": {"sha": "7d042a315d3344a93a5664b41f5e59bcc08b122c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d042a315d3344a93a5664b41f5e59bcc08b122c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/388fca81f6605ce32a79d484723262f0e50965e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/388fca81f6605ce32a79d484723262f0e50965e4", "html_url": "https://github.com/rust-lang/rust/commit/388fca81f6605ce32a79d484723262f0e50965e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/388fca81f6605ce32a79d484723262f0e50965e4/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b44cbc39fc591cfc0339ad641be393c4a2612f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b44cbc39fc591cfc0339ad641be393c4a2612f1", "html_url": "https://github.com/rust-lang/rust/commit/5b44cbc39fc591cfc0339ad641be393c4a2612f1"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "61840d81b52e2d20f41a5c5f4b66e0ad0fe6e423", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/388fca81f6605ce32a79d484723262f0e50965e4/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388fca81f6605ce32a79d484723262f0e50965e4/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=388fca81f6605ce32a79d484723262f0e50965e4", "patch": "@@ -50,7 +50,7 @@ pub fn std(build: &Build, target: &str, compiler: &Compiler) {\n     let mut cargo = build.cargo(compiler, Mode::Libstd, target, \"build\");\n     let mut features = build.std_features();\n \n-    if let Ok(target) = env::var(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n+    if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n         cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n     }\n \n@@ -199,7 +199,7 @@ pub fn test(build: &Build, target: &str, compiler: &Compiler) {\n     let out_dir = build.cargo_out(compiler, Mode::Libtest, target);\n     build.clear_if_dirty(&out_dir, &libstd_stamp(build, compiler, target));\n     let mut cargo = build.cargo(compiler, Mode::Libtest, target, \"build\");\n-    if let Ok(target) = env::var(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n+    if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n         cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n     }\n     cargo.arg(\"--manifest-path\")\n@@ -247,7 +247,7 @@ pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n     cargo.env(\"CFG_RELEASE\", build.rust_release())\n          .env(\"CFG_RELEASE_CHANNEL\", &build.config.channel)\n          .env(\"CFG_VERSION\", build.rust_version())\n-         .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or(PathBuf::new()));\n+         .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or_default());\n \n     if compiler.stage == 0 {\n         cargo.env(\"CFG_LIBDIR_RELATIVE\", \"lib\");\n@@ -385,7 +385,7 @@ pub fn assemble_rustc(build: &Build, stage: u32, host: &str) {\n     let rustc = out_dir.join(exe(\"rustc\", host));\n     let bindir = sysroot.join(\"bin\");\n     t!(fs::create_dir_all(&bindir));\n-    let compiler = build.compiler_path(&Compiler::new(stage, host));\n+    let compiler = build.compiler_path(&target_compiler);\n     let _ = fs::remove_file(&compiler);\n     copy(&rustc, &compiler);\n \n@@ -407,6 +407,8 @@ fn add_to_sysroot(sysroot_dst: &Path, stamp: &Path) {\n     t!(fs::create_dir_all(&sysroot_dst));\n     let mut contents = Vec::new();\n     t!(t!(File::open(stamp)).read_to_end(&mut contents));\n+    // This is the method we use for extracting paths from the stamp file passed to us. See\n+    // run_cargo for more information (in this file).\n     for part in contents.split(|b| *b == 0) {\n         if part.is_empty() {\n             continue"}]}