{"sha": "a66214b34effe1ad7f4351a1b920cf3a8f98d3c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NjIxNGIzNGVmZmUxYWQ3ZjQzNTFhMWI5MjBjZjNhOGY5OGQzYzA=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-02T06:36:20Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-02T06:36:20Z"}, "message": "Fix import strategy of `macro_use` and its test", "tree": {"sha": "21c38c3888edbf0d17b59a4c09494788cea61d1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c38c3888edbf0d17b59a4c09494788cea61d1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl1suGQACgkQztOS3gxI\nPQAHdA/8C/qNT8fuWmzXM3p2/OJBDKlZZpqvDMH6nt6sq8aZPnZROrv07R2QY/Oh\npnV1Kv39QEYHbLPIxhph75vach4n7CpCi8Yq59LNYw5ppx+CDEBAO0RMG25J3iDW\nB4zxEnNC//tT/w236tJ9aRrKE/3uFLnMY+1XgZLJ7KQ0Oh064c53Gs2AlK5jeCH8\nBBSn7ratr4scFaFWeqfAyiHIkwOPds+kCPF95u2Fr+RE1HuzLNRoy4OQ46o8pkNd\nnoaErH8/LnyH/7E8IsuFs0nV8cDnkCd1VRpA0PybDZBvts3csenkJePAL6c+qzPF\nFjDpqg25QLy180ZZJ1lcdyj2ZBt/CXeFevqySDRHaFMqxJGItI3hmj8ywQgXDCZS\nWlTnSgirSuRmntylvT8QH0fHeHCXFMOqBXzsQb7P3ssEUYAMw2Ejzni39TieULYj\ny12fJUedcQTqhZ+RD56vqzqEQFHlOzsyz512NCN52QSCPCZOzeje/4OFZsdsI3Iv\nUT3gXxcqMV2s0KM8xkvXohkgsJbeIOrD2fko8POwHIQjkJV2iTCMFHgkvUhXEHzh\nXyn/H9FagfRyPwmH/wtExvTYRFdE9zB9184el7wMvbhC98kdn2jtLfkKW9ShrTi+\nGmPlLsgG8Rx6QHjJDvP6cNslmTU1EVXbVqXbKAqw4Br+4EY7/ZM=\n=4Y/e\n-----END PGP SIGNATURE-----", "payload": "tree 21c38c3888edbf0d17b59a4c09494788cea61d1c\nparent dfa758f6a9146fbcb5109e7294d0a8e561c77913\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1567406180 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1567406180 +0800\n\nFix import strategy of `macro_use` and its test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0", "html_url": "https://github.com/rust-lang/rust/commit/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0/comments", "author": null, "committer": null, "parents": [{"sha": "dfa758f6a9146fbcb5109e7294d0a8e561c77913", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa758f6a9146fbcb5109e7294d0a8e561c77913", "html_url": "https://github.com/rust-lang/rust/commit/dfa758f6a9146fbcb5109e7294d0a8e561c77913"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "2e1d35c8cb51dda9f9eca4d628fe1d9bdee2c437", "filename": "crates/ra_hir/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=a66214b34effe1ad7f4351a1b920cf3a8f98d3c0", "patch": "@@ -11,4 +11,5 @@ test_utils::marks!(\n     match_ergonomics_ref\n     trait_resolution_on_fn_type\n     infer_while_let\n+    macro_rules_from_other_crates_are_visible_with_macro_use\n );"}, {"sha": "f69179bf683a9a891f4bffb9c6dd67b3f749de02", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=a66214b34effe1ad7f4351a1b920cf3a8f98d3c0", "patch": "@@ -101,6 +101,8 @@ pub struct CrateDefMap {\n     /// However, do we want to put it as a global variable?\n     poison_macros: FxHashSet<MacroDefId>,\n \n+    exported_macros: FxHashMap<Name, MacroDefId>,\n+\n     diagnostics: Vec<DefDiagnostic>,\n }\n \n@@ -245,6 +247,7 @@ impl CrateDefMap {\n                 root,\n                 modules,\n                 poison_macros: FxHashSet::default(),\n+                exported_macros: FxHashMap::default(),\n                 diagnostics: Vec::new(),\n             }\n         };"}, {"sha": "dbd68723673f8267f653392cdbf8383db32df16e", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=a66214b34effe1ad7f4351a1b920cf3a8f98d3c0", "patch": "@@ -157,6 +157,10 @@ where\n         // crate root, even if the parent modules is **not** visible.\n         if export {\n             self.update(self.def_map.root, None, &[(name.clone(), def.clone())]);\n+\n+            // Exported macros are collected in crate level ready for\n+            // glob import with `#[macro_use]`.\n+            self.def_map.exported_macros.insert(name.clone(), macro_id);\n         }\n         self.update(module_id, None, &[(name.clone(), def)]);\n         self.global_macro_scope.insert(name, macro_id);\n@@ -295,20 +299,18 @@ where\n                         }\n                     }\n \n-                    // `#[macro_use] extern crate` glob import macros\n+                    // `#[macro_use] extern crate` glob imports all macros exported,\n+                    // ignoring their scopes\n                     if import.is_extern_crate && import.is_macro_use {\n                         if let Some(ModuleDef::Module(m)) =\n                             def.a().and_then(|item| item.take_types())\n                         {\n+                            tested_by!(macro_rules_from_other_crates_are_visible_with_macro_use);\n+\n                             let item_map = self.db.crate_def_map(m.krate);\n-                            let scope = &item_map[m.module_id].scope;\n-                            let macros = scope\n-                                .macros\n-                                .iter()\n-                                .map(|(name, res)| (name.clone(), Either::B(*res)))\n-                                .collect::<Vec<_>>();\n-\n-                            self.update(module_id, Some(import_id), &macros);\n+                            for (name, &macro_id) in &item_map.exported_macros {\n+                                self.define_macro(module_id, name.clone(), macro_id, false);\n+                            }\n                         }\n                     }\n \n@@ -877,6 +879,7 @@ mod tests {\n                 root,\n                 modules,\n                 poison_macros: FxHashSet::default(),\n+                exported_macros: FxHashMap::default(),\n                 diagnostics: Vec::new(),\n             }\n         };"}, {"sha": "cfddf3029942c38988e2a27e53ff2f9efd4ba503", "filename": "crates/ra_hir/src/nameres/tests/macros.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=a66214b34effe1ad7f4351a1b920cf3a8f98d3c0", "patch": "@@ -140,6 +140,7 @@ fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n \n #[test]\n fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n+    covers!(macro_rules_from_other_crates_are_visible_with_macro_use);\n     let map = def_map_with_crate_graph(\n         \"\n         //- /main.rs\n@@ -160,6 +161,13 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n                 $(struct $i { field: u32 } )*\n             }\n         }\n+\n+        mod priv_mod {\n+            #[macro_export]\n+            macro_rules! baz {\n+                () => {};\n+            }\n+        }\n         \",\n         crate_graph! {\n             \"main\": (\"/main.rs\", [\"foo\"]),\n@@ -171,13 +179,15 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n    \u22eeBar: t v\n    \u22eeFoo: t v\n    \u22eebar: t\n+   \u22eebaz: m\n    \u22eefoo: t\n    \u22eestructs: m\n    \u22ee\n    \u22eecrate::bar\n    \u22eeBar: t v\n    \u22eeFoo: t v\n    \u22eebar: t\n+   \u22eebaz: m\n    \u22eefoo: t\n    \u22eestructs: m\n     \"###);"}]}