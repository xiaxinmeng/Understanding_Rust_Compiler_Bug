{"sha": "37f100312183364d52fe1468dc81a693783e4387", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZjEwMDMxMjE4MzM2NGQ1MmZlMTQ2OGRjODFhNjkzNzgzZTQzODc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-09-29T21:30:43Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-05T10:04:53Z"}, "message": "Updates to .stderr output in ui tests from earlier changes.", "tree": {"sha": "5e7b8596ca1b03c3ac9afa85f53f513de3481fe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7b8596ca1b03c3ac9afa85f53f513de3481fe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f100312183364d52fe1468dc81a693783e4387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f100312183364d52fe1468dc81a693783e4387", "html_url": "https://github.com/rust-lang/rust/commit/37f100312183364d52fe1468dc81a693783e4387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f100312183364d52fe1468dc81a693783e4387/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80bc17108eedeb5f529ef380337e8ad48babab64", "url": "https://api.github.com/repos/rust-lang/rust/commits/80bc17108eedeb5f529ef380337e8ad48babab64", "html_url": "https://github.com/rust-lang/rust/commit/80bc17108eedeb5f529ef380337e8ad48babab64"}], "stats": {"total": 145, "additions": 90, "deletions": 55}, "files": [{"sha": "e0b7fc4eb905451ccc32be5023b989ad6d616176", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `c_shortest` dropped here while still borrowed\n-   | borrow later used here, when `dt` is dropped\n+   | borrow might be used here, when `dt` is dropped and runs the `Drop` code for type `other::Dt`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "97c1caa87f5c5e9d997397335f842ef4ab4c0fe8", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `c_shortest` dropped here while still borrowed\n-   | borrow later used here, when `dt` is dropped\n+   | borrow might be used here, when `dt` is dropped and runs the `Drop` code for type `Dt`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "4a6e42ef94a85dad316386acce2d4f4802bd03db", "filename": "src/test/ui/dropck/dropck-eyepatch.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `c_shortest` dropped here while still borrowed\n-   | borrow later used here, when `dt` is dropped\n+   | borrow might be used here, when `dt` is dropped and runs the `Drop` code for type `Dt`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "b828a16756101d27f9ed66cdccabbb85013e5209", "filename": "src/test/ui/dropck/dropck-union.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `v` dropped here while still borrowed\n-   | borrow later used here, when `v` is dropped\n+   | borrow might be used here, when `v` is dropped and runs the `Drop` code for type `Wrap`\n \n error: aborting due to previous error\n "}, {"sha": "54a46f612b9ed645be11e7a1c7c787b842a1c7f3", "filename": "src/test/ui/error-codes/E0597.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `y` dropped here while still borrowed\n-   | borrow later used here, when `x` is dropped\n+   | borrow might be used here, when `x` is dropped and runs the `Drop` code for type `Foo`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "9d1a52a8335433845b91259c589bdfd71f62c432", "filename": "src/test/ui/generator/borrowing.nll.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -2,10 +2,17 @@ error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:18:18\n    |\n LL |         unsafe { (|| yield &a).resume() }\n-   |                  ^^^^^^^^^^^^^ borrowed value does not live long enough\n+   |                  ^^^^^^^^^^^^^\n+   |                  |\n+   |                  borrowed value does not live long enough\n+   |                  a temporary with access to the borrow is created here ...\n LL |         //~^ ERROR: `a` does not live long enough\n LL |     };\n-   |     - `a` dropped here while still borrowed\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for generator\n+   |     |\n+   |     `a` dropped here while still borrowed\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:24:9"}, {"sha": "2b95a5caf6da07b7667785355da936cd3eadb029", "filename": "src/test/ui/generator/dropck.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `*cell` dropped here while still borrowed\n-   | borrow later used here, when `gen` is dropped\n+   | borrow might be used here, when `gen` is dropped and runs the destructor for generator\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -27,7 +27,7 @@ LL |   }\n    |   -\n    |   |\n    |   `ref_` dropped here while still borrowed\n-   |   borrow later used here, when `gen` is dropped\n+   |   borrow might be used here, when `gen` is dropped and runs the destructor for generator\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "023021eccb9312fdfab048c54a3e3918db4b4dd5", "filename": "src/test/ui/issues/issue-18783.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -11,7 +11,7 @@ LL |     c.push(Box::new(|| y = 0));\n    |                     second mutable borrow occurs here\n LL | //~^ ERROR cannot borrow `y` as mutable more than once at a time\n LL | }\n-   | - first borrow later used here, when `c` is dropped\n+   | - first borrow might be used here, when `c` is dropped and runs the destructor for type `std::cell::RefCell<std::vec::Vec<std::boxed::Box<dyn std::ops::FnMut()>>>`\n \n error[E0499]: cannot borrow `y` as mutable more than once at a time\n   --> $DIR/issue-18783.rs:26:29\n@@ -26,7 +26,7 @@ LL |     Push::push(&c, Box::new(|| y = 0));\n    |                             second mutable borrow occurs here\n LL | //~^ ERROR cannot borrow `y` as mutable more than once at a time\n LL | }\n-   | - first borrow later used here, when `c` is dropped\n+   | - first borrow might be used here, when `c` is dropped and runs the destructor for type `std::cell::RefCell<std::vec::Vec<std::boxed::Box<dyn std::ops::FnMut()>>>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "116cb3be6b50ce4f098e637ae49dcd1cffdcfe80", "filename": "src/test/ui/issues/issue-47646.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -3,9 +3,15 @@ error[E0502]: cannot borrow `heap` as immutable because it is also borrowed as m\n    |\n LL |     let borrow = heap.peek_mut();\n    |                  ---- mutable borrow occurs here\n-...\n+LL | \n+LL |     match (borrow, ()) {\n+   |           ------------ a temporary with access to the mutable borrow is created here ...\n+LL |         (Some(_), ()) => {\n LL |             println!(\"{:?}\", heap); //~ ERROR cannot borrow `heap` as immutable\n    |                              ^^^^ immutable borrow occurs here\n+...\n+LL |     };\n+   |      - ... and the mutable borrow might be used here, when that temporary is dropped and runs the destructor for type `(std::option::Option<std::collections::binary_heap::PeekMut<'_, i32>>, ())`\n \n error: aborting due to previous error\n "}, {"sha": "60862d0f22952ad4004d5cda200c105761377bbb", "filename": "src/test/ui/nll/drop-no-may-dangle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL |         v[0] += 1; //~ ERROR cannot assign to `v[..]` because it is borrowe\n    |         ^^^^^^^^^ assignment to borrowed `v[..]` occurs here\n ...\n LL | }\n-   | - borrow later used here, when `p` is dropped\n+   | - borrow might be used here, when `p` is dropped and runs the `Drop` code for type `WrapMayNotDangle`\n \n error[E0506]: cannot assign to `v[..]` because it is borrowed\n   --> $DIR/drop-no-may-dangle.rs:33:5\n@@ -19,7 +19,7 @@ LL |     let p: WrapMayNotDangle<&usize> = WrapMayNotDangle { value: &v[0] };\n LL |     v[0] += 1; //~ ERROR cannot assign to `v[..]` because it is borrowed\n    |     ^^^^^^^^^ assignment to borrowed `v[..]` occurs here\n LL | }\n-   | - borrow later used here, when `p` is dropped\n+   | - borrow might be used here, when `p` is dropped and runs the `Drop` code for type `WrapMayNotDangle`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fc5417ac80c44377608f12cab1895e5f788435aa", "filename": "src/test/ui/nll/maybe-initialized-drop-implicit-fragment-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL |     // FIXME ^ Should not error in the future with implicit dtors, only manually implemented ones\n LL | }\n-   | - borrow later used here, when `foo` is dropped\n+   | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "6ae026fb169b068e817d0e9ef9d79ab907ca75fe", "filename": "src/test/ui/nll/maybe-initialized-drop-with-fragment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -7,7 +7,7 @@ LL |     let wrap = Wrap { p: &mut x };\n LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL | }\n-   | - borrow later used here, when `foo` is dropped\n+   | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "dd16e9a0e840cad997c5c911f27dbb54c93f9a90", "filename": "src/test/ui/nll/maybe-initialized-drop-with-uninitialized-fragments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL |     // FIXME ^ This currently errors and it should not.\n LL | }\n-   | - borrow later used here, when `foo` is dropped\n+   | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "e8f427826ba33a65630a30c870d5d3cfc712e81f", "filename": "src/test/ui/nll/maybe-initialized-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -6,7 +6,7 @@ LL |     let wrap = Wrap { p: &mut x };\n LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL | }\n-   | - borrow later used here, when `wrap` is dropped\n+   | - borrow might be used here, when `wrap` is dropped and runs the `Drop` code for type `Wrap`\n \n error: aborting due to previous error\n "}, {"sha": "99a839f76d33cf87eceed63eafa1da4f6e361f15", "filename": "src/test/ui/span/destructor-restrictions.nll.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -2,9 +2,16 @@ error[E0597]: `*a` does not live long enough\n   --> $DIR/destructor-restrictions.rs:18:10\n    |\n LL |         *a.borrow() + 1\n-   |          ^ borrowed value does not live long enough\n+   |          ^---------\n+   |          |\n+   |          borrowed value does not live long enough\n+   |          a temporary with access to the borrow is created here ...\n LL |     }; //~^ ERROR `*a` does not live long enough\n-   |     - `*a` dropped here while still borrowed\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::cell::Ref<'_, i32>`\n+   |     |\n+   |     `*a` dropped here while still borrowed\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n \n error: aborting due to previous error\n "}, {"sha": "52d4007f3f8f6cd84df7ce1a33ee4e5b5e294347", "filename": "src/test/ui/span/dropck-object-cycle.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `*m` dropped here while still borrowed\n-   | borrow later used here, when `m` is dropped\n+   | borrow might be used here, when `m` is dropped and runs the destructor for type `std::boxed::Box<dyn Trait<'_>>`\n \n error: aborting due to previous error\n "}, {"sha": "32abfd81f53a6a281b90537621e4d4fd32563ab0", "filename": "src/test/ui/span/dropck_arr_cycle_checked.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `b2` dropped here while still borrowed\n-   | borrow later used here, when `b1` is dropped\n+   | borrow might be used here, when `b1` is dropped and runs the destructor for type `B<'_>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -22,7 +22,7 @@ LL | }\n    | -\n    | |\n    | `b3` dropped here while still borrowed\n-   | borrow later used here, when `b1` is dropped\n+   | borrow might be used here, when `b1` is dropped and runs the destructor for type `B<'_>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -36,7 +36,7 @@ LL | }\n    | -\n    | |\n    | `b1` dropped here while still borrowed\n-   | borrow later used here, when `b1` is dropped\n+   | borrow might be used here, when `b1` is dropped and runs the destructor for type `B<'_>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0c5c49c80de5d412f95be002e67379b41a8ee4d0", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `d2` dropped here while still borrowed\n-   | borrow later used here, when `d1` is dropped\n+   | borrow might be used here, when `d1` is dropped and runs the `Drop` code for type `D`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -22,7 +22,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `d1` is dropped\n+   | borrow might be used here, when `d1` is dropped and runs the `Drop` code for type `D`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fb68262b0ae2a0e6b7059d3a0a7829b2f0e06a0e", "filename": "src/test/ui/span/dropck_misc_variants.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `bomb` dropped here while still borrowed\n-   | borrow later used here, when `_w` is dropped\n+   | borrow might be used here, when `_w` is dropped and runs the destructor for type `Wrap<&[&str]>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -21,7 +21,7 @@ LL | }\n    | -\n    | |\n    | `v` dropped here while still borrowed\n-   | borrow later used here, when `_w` is dropped\n+   | borrow might be used here, when `_w` is dropped and runs the destructor for closure\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "ad62936b870c849f39d731bb87971b5f27af62bb", "filename": "src/test/ui/span/dropck_vec_cycle_checked.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `c2` dropped here while still borrowed\n-   | borrow later used here, when `c1` is dropped\n+   | borrow might be used here, when `c1` is dropped and runs the destructor for type `C<'_>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -22,7 +22,7 @@ LL | }\n    | -\n    | |\n    | `c3` dropped here while still borrowed\n-   | borrow later used here, when `c1` is dropped\n+   | borrow might be used here, when `c1` is dropped and runs the destructor for type `C<'_>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -36,7 +36,7 @@ LL | }\n    | -\n    | |\n    | `c1` dropped here while still borrowed\n-   | borrow later used here, when `c1` is dropped\n+   | borrow might be used here, when `c1` is dropped and runs the destructor for type `C<'_>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9e82884b95440f9a03be65136a8d0229778f418b", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.nll.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -2,17 +2,32 @@ error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:20:5\n    |\n LL |     y.borrow().clone()\n-   |     ^ borrowed value does not live long enough\n+   |     ^---------\n+   |     |\n+   |     borrowed value does not live long enough\n+   |     a temporary with access to the borrow is created here ...\n LL | }\n-   | - `y` dropped here while still borrowed\n+   | -\n+   | |\n+   | `y` dropped here while still borrowed\n+   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::cell::Ref<'_, std::string::String>`\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:27:9\n    |\n LL |         y.borrow().clone()\n-   |         ^ borrowed value does not live long enough\n+   |         ^---------\n+   |         |\n+   |         borrowed value does not live long enough\n+   |         a temporary with access to the borrow is created here ...\n LL |     };\n-   |     - `y` dropped here while still borrowed\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::cell::Ref<'_, std::string::String>`\n+   |     |\n+   |     `y` dropped here while still borrowed\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fb995990f167ba1fb3451ffa968d5116c8709458", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `_d` is dropped\n+   | borrow might be used here, when `_d` is dropped and runs the `Drop` code for type `D_Child`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "5eaff66e72ea22974bb1f4985d08263cf3d41207", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `_d` is dropped\n+   | borrow might be used here, when `_d` is dropped and runs the `Drop` code for type `D_HasSelfMethod`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -20,7 +20,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `_d` is dropped\n+   | borrow might be used here, when `_d` is dropped and runs the `Drop` code for type `D_HasMethodWithSelfArg`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -33,7 +33,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `_d` is dropped\n+   | borrow might be used here, when `_d` is dropped and runs the `Drop` code for type `D_HasType`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "26c74b653a11b592db92c3f97b2ae6d1267bb125", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `d1` dropped here while still borrowed\n-   | borrow later used here, when `d2` is dropped\n+   | borrow might be used here, when `d2` is dropped and runs the `Drop` code for type `D`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "9801f92ce64469f96c3b7f2e537678114e558433", "filename": "src/test/ui/span/issue-25199.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `container` dropped here while still borrowed\n-   | borrow later used here, when `container` is dropped\n+   | borrow might be used here, when `container` is dropped and runs the destructor for type `Container<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "79d9dab17769b1589689e0a172012635d9805389", "filename": "src/test/ui/span/issue-26656.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -7,7 +7,7 @@ LL | }\n    | -\n    | |\n    | `ticking` dropped here while still borrowed\n-   | borrow later used here, when `zook` is dropped\n+   | borrow might be used here, when `zook` is dropped and runs the `Drop` code for type `Zook`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "77bb311c61a403766de36f96a7375ce40f3833bd", "filename": "src/test/ui/span/issue-29106.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -7,7 +7,7 @@ LL |     }\n    |     -\n    |     |\n    |     `x` dropped here while still borrowed\n-   |     borrow later used here, when `y` is dropped\n+   |     borrow might be used here, when `y` is dropped and runs the `Drop` code for type `std::sync::Arc`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -20,7 +20,7 @@ LL |     }\n    |     -\n    |     |\n    |     `x` dropped here while still borrowed\n-   |     borrow later used here, when `y` is dropped\n+   |     borrow might be used here, when `y` is dropped and runs the `Drop` code for type `std::rc::Rc`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "bc3a31b843fbce661a8936647e7554afcc4e3084", "filename": "src/test/ui/span/issue28498-reject-ex1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | here, drop of `foo` needs exclusive access to `foo.data`, because the type `Foo<Concrete<'_>>` implements the `Drop` trait\n-   | borrow later used here, when `foo` is dropped\n+   | borrow might be used here, when `foo` is dropped and runs the `Drop` code for type `Foo`\n    |\n    = note: consider using a `let` binding to create a longer lived value\n "}, {"sha": "21508303afc2105e7172abe380d58e82d254f4d1", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `first_dropped` dropped here while still borrowed\n-   | borrow later used here, when `foo1` is dropped\n+   | borrow might be used here, when `foo1` is dropped and runs the `Drop` code for type `Foo`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "752f96988db0ef7e6e24e6a58bda1f77ad7ff66a", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `first_dropped` dropped here while still borrowed\n-   | borrow later used here, when `foo1` is dropped\n+   | borrow might be used here, when `foo1` is dropped and runs the `Drop` code for type `Foo`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "7bf55c8e9973d10179a848b2dcecfd849234cb15", "filename": "src/test/ui/span/issue28498-reject-trait-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `first_dropped` dropped here while still borrowed\n-   | borrow later used here, when `foo1` is dropped\n+   | borrow might be used here, when `foo1` is dropped and runs the `Drop` code for type `Foo`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "fd789e79e9133438cc8abf39f5e7f80faf892d17", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -7,7 +7,7 @@ LL |         let ss: &isize = &id(1);\n LL |     }\n    |     - temporary value is freed at the end of this statement\n LL | }\n-   | - borrow later used here, when `blah` is dropped\n+   | - borrow might be used here, when `blah` is dropped and runs the destructor for type `std::boxed::Box<dyn Foo>`\n    |\n    = note: consider using a `let` binding to create a longer lived value\n "}, {"sha": "c17f502b77902a11d0507bf90364998e128bf862", "filename": "src/test/ui/span/send-is-not-static-std-sync.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -62,7 +62,7 @@ LL |     }\n    |     - `z` dropped here while still borrowed\n ...\n LL | }\n-   | - borrow later used here, when `tx` is dropped\n+   | - borrow might be used here, when `tx` is dropped and runs the `Drop` code for type `std::sync::mpsc::Sender`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "7ad7a1b0bcdb7ef5bd729a89dd4ee643788e8fcd", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `c2` dropped here while still borrowed\n-   | borrow later used here, when `c1` is dropped\n+   | borrow might be used here, when `c1` is dropped and runs the destructor for type `C<'_>`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -22,7 +22,7 @@ LL | }\n    | -\n    | |\n    | `c1` dropped here while still borrowed\n-   | borrow later used here, when `c1` is dropped\n+   | borrow might be used here, when `c1` is dropped and runs the destructor for type `C<'_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "562544c79165dd33bacfb73689e73a5e373f397e", "filename": "src/test/ui/span/vec_refs_data_with_early_death.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -8,7 +8,7 @@ LL | }\n    | -\n    | |\n    | `x` dropped here while still borrowed\n-   | borrow later used here, when `v` is dropped\n+   | borrow might be used here, when `v` is dropped and runs the `Drop` code for type `Bag`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n \n@@ -22,7 +22,7 @@ LL | }\n    | -\n    | |\n    | `y` dropped here while still borrowed\n-   | borrow later used here, when `v` is dropped\n+   | borrow might be used here, when `v` is dropped and runs the `Drop` code for type `Bag`\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n "}, {"sha": "ad01f84cd2c142c06c7f8f72ccf512a04cff495e", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f100312183364d52fe1468dc81a693783e4387/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.nll.stderr?ref=37f100312183364d52fe1468dc81a693783e4387", "patch": "@@ -10,7 +10,7 @@ LL | }\n    | -\n    | |\n    | `factorial` dropped here while still borrowed\n-   | borrow later used here, when `factorial` is dropped\n+   | borrow might be used here, when `factorial` is dropped and runs the destructor for type `std::option::Option<std::boxed::Box<dyn std::ops::Fn(u32) -> u32>>`\n \n error[E0506]: cannot assign to `factorial` because it is borrowed\n   --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:30:5"}]}