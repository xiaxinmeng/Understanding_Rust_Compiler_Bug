{"sha": "ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMDgzMGQ3NDk4NTI0NmMyZTJiYmQyOGU3ZDhjMGVmMDcyZTI0NTg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-10-25T23:27:14Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-09T23:44:45Z"}, "message": "rustc: use an Expr instead of a Block for function bodies.", "tree": {"sha": "1b8e0487cbe5169aa52415f882f572dc664ffe1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b8e0487cbe5169aa52415f882f572dc664ffe1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "html_url": "https://github.com/rust-lang/rust/commit/ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49772fbf5dc1137a031086999b20ab7b961f3655", "url": "https://api.github.com/repos/rust-lang/rust/commits/49772fbf5dc1137a031086999b20ab7b961f3655", "html_url": "https://github.com/rust-lang/rust/commit/49772fbf5dc1137a031086999b20ab7b961f3655"}], "stats": {"total": 541, "additions": 169, "deletions": 372}, "files": [{"sha": "22c7d14be29d205dbe172c7a96ca322605d7df6d", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -33,25 +33,25 @@ struct LoopScope {\n }\n \n pub fn construct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           blk: &hir::Block) -> CFG {\n+                           body: &hir::Expr) -> CFG {\n     let mut graph = graph::Graph::new();\n     let entry = graph.add_node(CFGNodeData::Entry);\n \n     // `fn_exit` is target of return exprs, which lies somewhere\n-    // outside input `blk`. (Distinguishing `fn_exit` and `block_exit`\n+    // outside input `body`. (Distinguishing `fn_exit` and `body_exit`\n     // also resolves chicken-and-egg problem that arises if you try to\n-    // have return exprs jump to `block_exit` during construction.)\n+    // have return exprs jump to `body_exit` during construction.)\n     let fn_exit = graph.add_node(CFGNodeData::Exit);\n-    let block_exit;\n+    let body_exit;\n \n     let mut cfg_builder = CFGBuilder {\n         graph: graph,\n         fn_exit: fn_exit,\n         tcx: tcx,\n         loop_scopes: Vec::new()\n     };\n-    block_exit = cfg_builder.block(blk, entry);\n-    cfg_builder.add_contained_edge(block_exit, fn_exit);\n+    body_exit = cfg_builder.expr(body, entry);\n+    cfg_builder.add_contained_edge(body_exit, fn_exit);\n     let CFGBuilder {graph, ..} = cfg_builder;\n     CFG {graph: graph,\n          entry: entry,"}, {"sha": "43434b884c8d4b7e55b96c41c678565362ad7ef4", "filename": "src/librustc/cfg/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fmod.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -59,8 +59,8 @@ pub type CFGEdge = graph::Edge<CFGEdgeData>;\n \n impl CFG {\n     pub fn new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                         blk: &hir::Block) -> CFG {\n-        construct::construct(tcx, blk)\n+                         body: &hir::Expr) -> CFG {\n+        construct::construct(tcx, body)\n     }\n \n     pub fn node_is_reachable(&self, id: ast::NodeId) -> bool {"}, {"sha": "ec09877ae121cdfeba73bc638f2ecf3492afee51", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -672,120 +672,6 @@ extern \"C\" {\n ```\n \"##,\n \n-E0269: r##\"\n-A returned value was expected but not all control paths return one.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0269\n-fn abracada_FAIL() -> String {\n-    \"this won't work\".to_string();\n-    // error: not all control paths return a value\n-}\n-```\n-\n-In the previous code, the function is supposed to return a `String`, however,\n-the code returns nothing (because of the ';'). Another erroneous code would be:\n-\n-```compile_fail\n-fn abracada_FAIL(b: bool) -> u32 {\n-    if b {\n-        0\n-    } else {\n-        \"a\" // It fails because an `u32` was expected and something else is\n-            // returned.\n-    }\n-}\n-```\n-\n-It is advisable to find out what the unhandled cases are and check for them,\n-returning an appropriate value or panicking if necessary. Check if you need\n-to remove a semicolon from the last expression, like in the first erroneous\n-code example.\n-\"##,\n-\n-E0270: r##\"\n-Rust lets you define functions which are known to never return, i.e. are\n-'diverging', by marking its return type as `!`.\n-\n-For example, the following functions never return:\n-\n-```no_run\n-fn foo() -> ! {\n-    loop {}\n-}\n-\n-fn bar() -> ! {\n-    foo() // foo() is diverging, so this will diverge too\n-}\n-\n-fn baz() -> ! {\n-    panic!(); // this macro internally expands to a call to a diverging function\n-}\n-```\n-\n-Such functions can be used in a place where a value is expected without\n-returning a value of that type, for instance:\n-\n-```no_run\n-fn foo() -> ! {\n-    loop {}\n-}\n-\n-let x = 3;\n-\n-let y = match x {\n-    1 => 1,\n-    2 => 4,\n-    _ => foo() // diverging function called here\n-};\n-\n-println!(\"{}\", y)\n-```\n-\n-If the third arm of the match block is reached, since `foo()` doesn't ever\n-return control to the match block, it is fine to use it in a place where an\n-integer was expected. The `match` block will never finish executing, and any\n-point where `y` (like the print statement) is needed will not be reached.\n-\n-However, if we had a diverging function that actually does finish execution:\n-\n-```ignore\n-fn foo() -> ! {\n-    loop {break;}\n-}\n-```\n-\n-Then we would have an unknown value for `y` in the following code:\n-\n-```no_run\n-fn foo() -> ! {\n-    loop {}\n-}\n-\n-let x = 3;\n-\n-let y = match x {\n-    1 => 1,\n-    2 => 4,\n-    _ => foo()\n-};\n-\n-println!(\"{}\", y);\n-```\n-\n-In the previous example, the print statement was never reached when the\n-wildcard match arm was hit, so we were okay with `foo()` not returning an\n-integer that we could set to `y`. But in this example, `foo()` actually does\n-return control, so the print statement will be executed with an uninitialized\n-value.\n-\n-Obviously we cannot have functions which are allowed to be used in such\n-positions and yet can return control. So, if you are defining a function that\n-returns `!`, make sure that there is no way for it to actually finish\n-executing.\n-\"##,\n-\n E0271: r##\"\n This is because of a type mismatch between the associated type of some\n trait (e.g. `T::Bar`, where `T` implements `trait Quux { type Bar; }`)"}, {"sha": "9932e5fe6862305cd366b9fd34f38ced1191f38d", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -138,7 +138,7 @@ pub trait Visitor<'v> : Sized {\n     fn visit_where_predicate(&mut self, predicate: &'v WherePredicate) {\n         walk_where_predicate(self, predicate)\n     }\n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, id: NodeId) {\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Expr, s: Span, id: NodeId) {\n         walk_fn(self, fk, fd, b, s, id)\n     }\n     fn visit_trait_item(&mut self, ti: &'v TraitItem) {\n@@ -635,13 +635,13 @@ pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'\n pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n                                    function_kind: FnKind<'v>,\n                                    function_declaration: &'v FnDecl,\n-                                   function_body: &'v Block,\n+                                   function_body: &'v Expr,\n                                    _span: Span,\n                                    id: NodeId) {\n     visitor.visit_id(id);\n     walk_fn_decl(visitor, function_declaration);\n     walk_fn_kind(visitor, function_kind);\n-    visitor.visit_block(function_body)\n+    visitor.visit_expr(function_body)\n }\n \n pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem) {\n@@ -925,7 +925,7 @@ impl<'v> Visitor<'v> for IdRangeComputingVisitor {\n /// Computes the id range for a single fn body, ignoring nested items.\n pub fn compute_id_range_for_fn_body(fk: FnKind,\n                                     decl: &FnDecl,\n-                                    body: &Block,\n+                                    body: &Expr,\n                                     sp: Span,\n                                     id: NodeId)\n                                     -> IdRange {"}, {"sha": "b985298e47cc2f8ed0d7ccecab551a0edae0e99f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -595,12 +595,13 @@ impl<'a> LoweringContext<'a> {\n                 hir::ItemConst(self.lower_ty(t), self.lower_expr(e))\n             }\n             ItemKind::Fn(ref decl, unsafety, constness, abi, ref generics, ref body) => {\n+                let body = self.lower_block(body);\n                 hir::ItemFn(self.lower_fn_decl(decl),\n                             self.lower_unsafety(unsafety),\n                             self.lower_constness(constness),\n                             abi,\n                             self.lower_generics(generics),\n-                            self.lower_block(body))\n+                            self.expr_block(body, ThinVec::new()))\n             }\n             ItemKind::Mod(ref m) => hir::ItemMod(self.lower_mod(m)),\n             ItemKind::ForeignMod(ref nm) => hir::ItemForeignMod(self.lower_foreign_mod(nm)),\n@@ -665,7 +666,10 @@ impl<'a> LoweringContext<'a> {\n                     }\n                     TraitItemKind::Method(ref sig, ref body) => {\n                         hir::MethodTraitItem(this.lower_method_sig(sig),\n-                                             body.as_ref().map(|x| this.lower_block(x)))\n+                                             body.as_ref().map(|x| {\n+                            let body = this.lower_block(x);\n+                            this.expr_block(body, ThinVec::new())\n+                        }))\n                     }\n                     TraitItemKind::Type(ref bounds, ref default) => {\n                         hir::TypeTraitItem(this.lower_bounds(bounds),\n@@ -691,8 +695,9 @@ impl<'a> LoweringContext<'a> {\n                         hir::ImplItemKind::Const(this.lower_ty(ty), this.lower_expr(expr))\n                     }\n                     ImplItemKind::Method(ref sig, ref body) => {\n+                        let body = this.lower_block(body);\n                         hir::ImplItemKind::Method(this.lower_method_sig(sig),\n-                                                  this.lower_block(body))\n+                                                  this.expr_block(body, ThinVec::new()))\n                     }\n                     ImplItemKind::Type(ref ty) => hir::ImplItemKind::Type(this.lower_ty(ty)),\n                     ImplItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),\n@@ -1110,7 +1115,7 @@ impl<'a> LoweringContext<'a> {\n                     self.with_parent_def(e.id, |this| {\n                         hir::ExprClosure(this.lower_capture_clause(capture_clause),\n                                          this.lower_fn_decl(decl),\n-                                         this.lower_block(body),\n+                                         this.lower_expr(body),\n                                          fn_decl_span)\n                     })\n                 }"}, {"sha": "325a90ea91e0ec25b18cd60d50f9c3fa4a548a66", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -21,11 +21,9 @@\n //! nested within a uniquely determined `FnLike`), and users can ask\n //! for the `Code` associated with a particular NodeId.\n \n-pub use self::Code::*;\n-\n use hir as ast;\n use hir::map::{self, Node};\n-use hir::{Block, FnDecl};\n+use hir::{Expr, FnDecl};\n use hir::intravisit::FnKind;\n use syntax::abi;\n use syntax::ast::{Attribute, Name, NodeId};\n@@ -50,7 +48,7 @@ pub trait MaybeFnLike { fn is_fn_like(&self) -> bool; }\n /// Components shared by fn-like things (fn items, methods, closures).\n pub struct FnParts<'a> {\n     pub decl: &'a FnDecl,\n-    pub body: &'a Block,\n+    pub body: &'a Expr,\n     pub kind: FnKind<'a>,\n     pub span: Span,\n     pub id:   NodeId,\n@@ -77,29 +75,32 @@ impl MaybeFnLike for ast::Expr {\n     }\n }\n \n-/// Carries either an FnLikeNode or a Block, as these are the two\n+/// Carries either an FnLikeNode or a Expr, as these are the two\n /// constructs that correspond to \"code\" (as in, something from which\n /// we can construct a control-flow graph).\n #[derive(Copy, Clone)]\n pub enum Code<'a> {\n-    FnLikeCode(FnLikeNode<'a>),\n-    BlockCode(&'a Block),\n+    FnLike(FnLikeNode<'a>),\n+    Expr(&'a Expr),\n }\n \n impl<'a> Code<'a> {\n     pub fn id(&self) -> NodeId {\n         match *self {\n-            FnLikeCode(node) => node.id(),\n-            BlockCode(block) => block.id,\n+            Code::FnLike(node) => node.id(),\n+            Code::Expr(block) => block.id,\n         }\n     }\n \n-    /// Attempts to construct a Code from presumed FnLike or Block node input.\n-    pub fn from_node(node: Node) -> Option<Code> {\n-        if let map::NodeBlock(block) = node {\n-            Some(BlockCode(block))\n-        } else {\n-            FnLikeNode::from_node(node).map(|fn_like| FnLikeCode(fn_like))\n+    /// Attempts to construct a Code from presumed FnLike or Expr node input.\n+    pub fn from_node(map: &map::Map<'a>, id: NodeId) -> Option<Code<'a>> {\n+        match map.get(id) {\n+            map::NodeBlock(_) => {\n+                //  Use the parent, hopefully an expression node.\n+                Code::from_node(map, map.get_parent_node(id))\n+            }\n+            map::NodeExpr(expr) => Some(Code::Expr(expr)),\n+            node => FnLikeNode::from_node(node).map(Code::FnLike)\n         }\n     }\n }\n@@ -114,7 +115,7 @@ struct ItemFnParts<'a> {\n     abi:      abi::Abi,\n     vis:      &'a ast::Visibility,\n     generics: &'a ast::Generics,\n-    body:     &'a Block,\n+    body:     &'a Expr,\n     id:       NodeId,\n     span:     Span,\n     attrs:    &'a [Attribute],\n@@ -124,14 +125,14 @@ struct ItemFnParts<'a> {\n /// for use when implementing FnLikeNode operations.\n struct ClosureParts<'a> {\n     decl: &'a FnDecl,\n-    body: &'a Block,\n+    body: &'a Expr,\n     id: NodeId,\n     span: Span,\n     attrs: &'a [Attribute],\n }\n \n impl<'a> ClosureParts<'a> {\n-    fn new(d: &'a FnDecl, b: &'a Block, id: NodeId, s: Span, attrs: &'a [Attribute]) -> Self {\n+    fn new(d: &'a FnDecl, b: &'a Expr, id: NodeId, s: Span, attrs: &'a [Attribute]) -> Self {\n         ClosureParts {\n             decl: d,\n             body: b,\n@@ -171,9 +172,9 @@ impl<'a> FnLikeNode<'a> {\n         }\n     }\n \n-    pub fn body(self) -> &'a Block {\n+    pub fn body(self) -> &'a Expr {\n         self.handle(|i: ItemFnParts<'a>|  &*i.body,\n-                    |_, _, _: &'a ast::MethodSig, _, body: &'a ast::Block, _, _|  body,\n+                    |_, _, _: &'a ast::MethodSig, _, body: &'a ast::Expr, _, _|  body,\n                     |c: ClosureParts<'a>| c.body)\n     }\n \n@@ -214,7 +215,7 @@ impl<'a> FnLikeNode<'a> {\n                   Name,\n                   &'a ast::MethodSig,\n                   Option<&'a ast::Visibility>,\n-                  &'a ast::Block,\n+                  &'a ast::Expr,\n                   Span,\n                   &'a [Attribute])\n                   -> A,"}, {"sha": "e23a721da08a693371e891c9c841d23818a3ae00", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -211,7 +211,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     }\n \n     fn visit_fn(&mut self, fk: intravisit::FnKind<'ast>, fd: &'ast FnDecl,\n-                b: &'ast Block, s: Span, id: NodeId) {\n+                b: &'ast Expr, s: Span, id: NodeId) {\n         assert_eq!(self.parent_node, id);\n         intravisit::walk_fn(self, fk, fd, b, s, id);\n     }"}, {"sha": "6b5b8101a146ca57fd92184ab0300bd74030e905", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -904,7 +904,7 @@ pub enum Expr_ {\n     /// A closure (for example, `move |a, b, c| {a + b + c}`).\n     ///\n     /// The final span is the span of the argument block `|...|`\n-    ExprClosure(CaptureClause, P<FnDecl>, P<Block>, Span),\n+    ExprClosure(CaptureClause, P<FnDecl>, P<Expr>, Span),\n     /// A block (`{ ... }`)\n     ExprBlock(P<Block>),\n \n@@ -1035,7 +1035,7 @@ pub enum TraitItem_ {\n     /// must contain a value)\n     ConstTraitItem(P<Ty>, Option<P<Expr>>),\n     /// A method with an optional body\n-    MethodTraitItem(MethodSig, Option<P<Block>>),\n+    MethodTraitItem(MethodSig, Option<P<Expr>>),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type\n     TypeTraitItem(TyParamBounds, Option<P<Ty>>),\n@@ -1060,7 +1060,7 @@ pub enum ImplItemKind {\n     /// of the expression\n     Const(P<Ty>, P<Expr>),\n     /// A method implementation with the given signature and body\n-    Method(MethodSig, P<Block>),\n+    Method(MethodSig, P<Expr>),\n     /// An associated type\n     Type(P<Ty>),\n }\n@@ -1501,7 +1501,7 @@ pub enum Item_ {\n     /// A `const` item\n     ItemConst(P<Ty>, P<Expr>),\n     /// A function declaration\n-    ItemFn(P<FnDecl>, Unsafety, Constness, Abi, Generics, P<Block>),\n+    ItemFn(P<FnDecl>, Unsafety, Constness, Abi, Generics, P<Expr>),\n     /// A module\n     ItemMod(Mod),\n     /// An external module"}, {"sha": "2c4ffb853c1f3af157a3d5e4d57e45a3e80191f0", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -713,7 +713,9 @@ impl<'a> State<'a> {\n                               typarams,\n                               &item.vis)?;\n                 word(&mut self.s, \" \")?;\n-                self.print_block_with_attrs(&body, &item.attrs)?;\n+                self.end()?; // need to close a box\n+                self.end()?; // need to close a box\n+                self.print_expr(&body)?;\n             }\n             hir::ItemMod(ref _mod) => {\n                 self.head(&visibility_qualified(&item.vis, \"mod\"))?;\n@@ -1002,7 +1004,9 @@ impl<'a> State<'a> {\n                 self.print_method_sig(ti.name, sig, &hir::Inherited)?;\n                 if let Some(ref body) = *body {\n                     self.nbsp()?;\n-                    self.print_block_with_attrs(body, &ti.attrs)?;\n+                    self.end()?; // need to close a box\n+                    self.end()?; // need to close a box\n+                    self.print_expr(body)?;\n                 } else {\n                     word(&mut self.s, \";\")?;\n                 }\n@@ -1034,7 +1038,9 @@ impl<'a> State<'a> {\n                 self.head(\"\")?;\n                 self.print_method_sig(ii.name, sig, &ii.vis)?;\n                 self.nbsp()?;\n-                self.print_block_with_attrs(body, &ii.attrs)?;\n+                self.end()?; // need to close a box\n+                self.end()?; // need to close a box\n+                self.print_expr(body)?;\n             }\n             hir::ImplItemKind::Type(ref ty) => {\n                 self.print_associated_type(ii.name, None, Some(ty))?;\n@@ -1402,26 +1408,10 @@ impl<'a> State<'a> {\n                 self.print_fn_block_args(&decl)?;\n                 space(&mut self.s)?;\n \n-                let default_return = match decl.output {\n-                    hir::DefaultReturn(..) => true,\n-                    _ => false,\n-                };\n+                // this is a bare expression\n+                self.print_expr(body)?;\n+                self.end()?; // need to close a box\n \n-                if !default_return || !body.stmts.is_empty() || body.expr.is_none() {\n-                    self.print_block_unclosed(&body)?;\n-                } else {\n-                    // we extract the block, so as not to create another set of boxes\n-                    match body.expr.as_ref().unwrap().node {\n-                        hir::ExprBlock(ref blk) => {\n-                            self.print_block_unclosed(&blk)?;\n-                        }\n-                        _ => {\n-                            // this is a bare expression\n-                            self.print_expr(body.expr.as_ref().map(|e| &**e).unwrap())?;\n-                            self.end()?; // need to close a box\n-                        }\n-                    }\n-                }\n                 // a box will be closed by print_expr, but we didn't want an overall\n                 // wrapper so we closed the corresponding opening. so create an\n                 // empty box to satisfy the close."}, {"sha": "f44f82860077e21498288a59f723c02962d33ad0", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -838,7 +838,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     }\n \n     fn visit_fn(&mut self, fk: hir_visit::FnKind<'v>, decl: &'v hir::FnDecl,\n-                body: &'v hir::Block, span: Span, id: ast::NodeId) {\n+                body: &'v hir::Expr, span: Span, id: ast::NodeId) {\n         run_lints!(self, check_fn, late_passes, fk, decl, body, span, id);\n         hir_visit::walk_fn(self, fk, decl, body, span, id);\n         run_lints!(self, check_fn_post, late_passes, fk, decl, body, span, id);"}, {"sha": "6f7102229f8d6150ecef22853b687cfe78b26216", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -151,9 +151,9 @@ pub trait LateLintPass: LintPass {\n     fn check_ty(&mut self, _: &LateContext, _: &hir::Ty) { }\n     fn check_generics(&mut self, _: &LateContext, _: &hir::Generics) { }\n     fn check_fn(&mut self, _: &LateContext,\n-        _: FnKind, _: &hir::FnDecl, _: &hir::Block, _: Span, _: ast::NodeId) { }\n+        _: FnKind, _: &hir::FnDecl, _: &hir::Expr, _: Span, _: ast::NodeId) { }\n     fn check_fn_post(&mut self, _: &LateContext,\n-        _: FnKind, _: &hir::FnDecl, _: &hir::Block, _: Span, _: ast::NodeId) { }\n+        _: FnKind, _: &hir::FnDecl, _: &hir::Expr, _: Span, _: ast::NodeId) { }\n     fn check_trait_item(&mut self, _: &LateContext, _: &hir::TraitItem) { }\n     fn check_trait_item_post(&mut self, _: &LateContext, _: &hir::TraitItem) { }\n     fn check_impl_item(&mut self, _: &LateContext, _: &hir::ImplItem) { }"}, {"sha": "1ec3d0db8e0aa3a4a57efcc6371a48a70d1c4b75", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -498,7 +498,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n impl<'a, 'tcx, O:DataFlowOperator+Clone+'static> DataFlowContext<'a, 'tcx, O> {\n //                                ^^^^^^^^^^^^^ only needed for pretty printing\n-    pub fn propagate(&mut self, cfg: &cfg::CFG, blk: &hir::Block) {\n+    pub fn propagate(&mut self, cfg: &cfg::CFG, body: &hir::Expr) {\n         //! Performs the data flow analysis.\n \n         if self.bits_per_id == 0 {\n@@ -524,17 +524,17 @@ impl<'a, 'tcx, O:DataFlowOperator+Clone+'static> DataFlowContext<'a, 'tcx, O> {\n         debug!(\"Dataflow result for {}:\", self.analysis_name);\n         debug!(\"{}\", {\n             let mut v = Vec::new();\n-            self.pretty_print_to(box &mut v, blk).unwrap();\n+            self.pretty_print_to(box &mut v, body).unwrap();\n             String::from_utf8(v).unwrap()\n         });\n     }\n \n     fn pretty_print_to<'b>(&self, wr: Box<io::Write + 'b>,\n-                           blk: &hir::Block) -> io::Result<()> {\n+                           body: &hir::Expr) -> io::Result<()> {\n         let mut ps = pprust::rust_printer_annotated(wr, self, None);\n         ps.cbox(pprust::indent_unit)?;\n         ps.ibox(0)?;\n-        ps.print_block(blk)?;\n+        ps.print_expr(body)?;\n         pp::eof(&mut ps.s)\n     }\n }"}, {"sha": "a32d5542a79e24136311c2a465cef6ca125e7446", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -567,7 +567,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n                     self.warn_dead_code(impl_item.id, impl_item.span,\n                                         impl_item.name, \"method\");\n                 }\n-                intravisit::walk_block(self, body)\n+                intravisit::walk_expr(self, body)\n             }\n             hir::ImplItemKind::Type(..) => {}\n         }\n@@ -576,11 +576,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n     // Overwrite so that we don't warn the trait item itself.\n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n         match trait_item.node {\n-            hir::ConstTraitItem(_, Some(ref expr)) => {\n-                intravisit::walk_expr(self, expr)\n-            }\n+            hir::ConstTraitItem(_, Some(ref body))|\n             hir::MethodTraitItem(_, Some(ref body)) => {\n-                intravisit::walk_block(self, body)\n+                intravisit::walk_expr(self, body)\n             }\n             hir::ConstTraitItem(_, None) |\n             hir::MethodTraitItem(_, None) |"}, {"sha": "5634e2012c971209c9d0afbce238f3ddcb6cfaa3", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -94,7 +94,7 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n     fn visit_fn(&mut self, fn_kind: FnKind<'v>, fn_decl: &'v hir::FnDecl,\n-                block: &'v hir::Block, span: Span, id: ast::NodeId) {\n+                block: &'v hir::Expr, span: Span, id: ast::NodeId) {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n             FnKind::ItemFn(_, _, unsafety, ..) =>"}, {"sha": "711a131a68e17b26a98ad0c78ea329ced968de9a", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -290,14 +290,14 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n     pub fn walk_fn(&mut self,\n                    decl: &hir::FnDecl,\n-                   body: &hir::Block) {\n+                   body: &hir::Expr) {\n         self.walk_arg_patterns(decl, body);\n-        self.walk_block(body);\n+        self.consume_expr(body);\n     }\n \n     fn walk_arg_patterns(&mut self,\n                          decl: &hir::FnDecl,\n-                         body: &hir::Block) {\n+                         body: &hir::Expr) {\n         for arg in &decl.inputs {\n             let arg_ty = return_if_err!(self.mc.infcx.node_ty(arg.pat.id));\n "}, {"sha": "7dbf9aa74144d4a4254aba531afbde1ca8ab4cb1", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ItemVisitor<'a, 'tcx> {\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,\n-                b: &'v hir::Block, s: Span, id: ast::NodeId) {\n+                b: &'v hir::Expr, s: Span, id: ast::NodeId) {\n         if let FnKind::Closure(..) = fk {\n             span_bug!(s, \"intrinsicck: closure outside of function\")\n         }"}, {"sha": "a654d65bc67961af65392e9a8abf56b26f921555", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 22, "deletions": 71, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -123,10 +123,9 @@ use std::io::prelude::*;\n use std::io;\n use std::rc::Rc;\n use syntax::ast::{self, NodeId};\n-use syntax::codemap::original_sp;\n use syntax::parse::token::keywords;\n use syntax::ptr::P;\n-use syntax_pos::{BytePos, Span};\n+use syntax_pos::Span;\n \n use hir::Expr;\n use hir;\n@@ -187,7 +186,7 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt) -> String {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for IrMaps<'a, 'tcx> {\n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,\n-                b: &'v hir::Block, s: Span, id: NodeId) {\n+                b: &'v hir::Expr, s: Span, id: NodeId) {\n         visit_fn(self, fk, fd, b, s, id);\n     }\n     fn visit_local(&mut self, l: &hir::Local) { visit_local(self, l); }\n@@ -352,9 +351,9 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for Liveness<'a, 'tcx> {\n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,\n-                b: &'v hir::Block, s: Span, n: NodeId) {\n-        check_fn(self, fk, fd, b, s, n);\n+    fn visit_fn(&mut self, _: FnKind<'v>, _: &'v hir::FnDecl,\n+                _: &'v hir::Expr, _: Span, _: NodeId) {\n+        // do not check contents of nested fns\n     }\n     fn visit_local(&mut self, l: &hir::Local) {\n         check_local(self, l);\n@@ -370,7 +369,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Liveness<'a, 'tcx> {\n fn visit_fn(ir: &mut IrMaps,\n             fk: FnKind,\n             decl: &hir::FnDecl,\n-            body: &hir::Block,\n+            body: &hir::Expr,\n             sp: Span,\n             id: ast::NodeId) {\n     debug!(\"visit_fn\");\n@@ -405,10 +404,10 @@ fn visit_fn(ir: &mut IrMaps,\n \n     // compute liveness\n     let mut lsets = Liveness::new(&mut fn_maps, specials);\n-    let entry_ln = lsets.compute(decl, body);\n+    let entry_ln = lsets.compute(body);\n \n     // check for various error conditions\n-    lsets.visit_block(body);\n+    lsets.visit_expr(body);\n     lsets.check_ret(id, sp, fk, entry_ln, body);\n     lsets.warn_about_unused_args(decl, entry_ln);\n }\n@@ -821,17 +820,23 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n     // _______________________________________________________________________\n \n-    fn compute(&mut self, decl: &hir::FnDecl, body: &hir::Block) -> LiveNode {\n+    fn compute(&mut self, body: &hir::Expr) -> LiveNode {\n         // if there is a `break` or `again` at the top level, then it's\n         // effectively a return---this only occurs in `for` loops,\n         // where the body is really a closure.\n \n-        debug!(\"compute: using id for block, {}\", block_to_string(body));\n+        debug!(\"compute: using id for body, {}\", expr_to_string(body));\n \n         let exit_ln = self.s.exit_ln;\n-        let entry_ln: LiveNode =\n-            self.with_loop_nodes(body.id, exit_ln, exit_ln,\n-              |this| this.propagate_through_fn_block(decl, body));\n+        let entry_ln: LiveNode = self.with_loop_nodes(body.id, exit_ln, exit_ln, |this| {\n+            // the fallthrough exit is only for those cases where we do not\n+            // explicitly return:\n+            let s = this.s;\n+            this.init_from_succ(s.fallthrough_ln, s.exit_ln);\n+            this.acc(s.fallthrough_ln, s.clean_exit_var, ACC_READ);\n+\n+            this.propagate_through_expr(body, s.fallthrough_ln)\n+        });\n \n         // hack to skip the loop unless debug! is enabled:\n         debug!(\"^^ liveness computation results for body {} (entry={:?})\",\n@@ -846,20 +851,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         entry_ln\n     }\n \n-    fn propagate_through_fn_block(&mut self, _: &hir::FnDecl, blk: &hir::Block)\n-                                  -> LiveNode {\n-        // the fallthrough exit is only for those cases where we do not\n-        // explicitly return:\n-        let s = self.s;\n-        self.init_from_succ(s.fallthrough_ln, s.exit_ln);\n-        if blk.expr.is_none() {\n-            self.acc(s.fallthrough_ln, s.no_ret_var, ACC_READ)\n-        }\n-        self.acc(s.fallthrough_ln, s.clean_exit_var, ACC_READ);\n-\n-        self.propagate_through_block(blk, s.fallthrough_ln)\n-    }\n-\n     fn propagate_through_block(&mut self, blk: &hir::Block, succ: LiveNode)\n                                -> LiveNode {\n         let succ = self.propagate_through_opt_expr(blk.expr.as_ref().map(|e| &**e), succ);\n@@ -1448,15 +1439,6 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n     }\n }\n \n-fn check_fn(_v: &Liveness,\n-            _fk: FnKind,\n-            _decl: &hir::FnDecl,\n-            _body: &hir::Block,\n-            _sp: Span,\n-            _id: NodeId) {\n-    // do not check contents of nested fns\n-}\n-\n impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn fn_ret(&self, id: NodeId) -> ty::Binder<Ty<'tcx>> {\n         let fn_ty = self.ir.tcx.tables().node_id_to_type(id);\n@@ -1472,7 +1454,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                  sp: Span,\n                  _fk: FnKind,\n                  entry_ln: LiveNode,\n-                 body: &hir::Block)\n+                 body: &hir::Expr)\n     {\n         // within the fn body, late-bound regions are liberated\n         // and must outlive the *call-site* of the function.\n@@ -1481,13 +1463,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.ir.tcx.region_maps.call_site_extent(id, body.id),\n                 &self.fn_ret(id));\n \n-        if fn_ret.is_never() {\n-            // FIXME(durka) this rejects code like `fn foo(x: !) -> ! { x }`\n-            if self.live_on_entry(entry_ln, self.s.clean_exit_var).is_some() {\n-                span_err!(self.ir.tcx.sess, sp, E0270,\n-                          \"computation may converge in a function marked as diverging\");\n-            }\n-        } else if self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() {\n+        if !fn_ret.is_never() && self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() {\n             let param_env = ParameterEnvironment::for_item(self.ir.tcx, id);\n             let t_ret_subst = fn_ret.subst(self.ir.tcx, &param_env.free_substs);\n             let is_nil = self.ir.tcx.infer_ctxt(None, Some(param_env),\n@@ -1498,32 +1474,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n             // for nil return types, it is ok to not return a value expl.\n             if !is_nil {\n-                let ends_with_stmt = match body.expr {\n-                    None if !body.stmts.is_empty() =>\n-                        match body.stmts.last().unwrap().node {\n-                            hir::StmtSemi(ref e, _) => {\n-                                self.ir.tcx.tables().expr_ty(&e) == fn_ret\n-                            },\n-                            _ => false\n-                        },\n-                    _ => false\n-                };\n-                let mut err = struct_span_err!(self.ir.tcx.sess,\n-                                               sp,\n-                                               E0269,\n-                                               \"not all control paths return a value\");\n-                if ends_with_stmt {\n-                    let last_stmt = body.stmts.last().unwrap();\n-                    let original_span = original_sp(self.ir.tcx.sess.codemap(),\n-                                                    last_stmt.span, sp);\n-                    let span_semicolon = Span {\n-                        lo: original_span.hi - BytePos(1),\n-                        hi: original_span.hi,\n-                        expn_id: original_span.expn_id\n-                    };\n-                    err.span_help(span_semicolon, \"consider removing this semicolon:\");\n-                }\n-                err.emit();\n+                span_bug!(sp, \"not all control paths return a value\");\n             }\n         }\n     }"}, {"sha": "7868e700f2701c0c03cb1e2ed6005d83aa4dba12", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -248,9 +248,9 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n         match *node {\n             ast_map::NodeItem(item) => {\n                 match item.node {\n-                    hir::ItemFn(.., ref search_block) => {\n+                    hir::ItemFn(.., ref body) => {\n                         if item_might_be_inlined(&item) {\n-                            intravisit::walk_block(self, &search_block)\n+                            self.visit_expr(body);\n                         }\n                     }\n \n@@ -278,11 +278,9 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::MethodTraitItem(_, None) => {\n                         // Keep going, nothing to get exported\n                     }\n-                    hir::ConstTraitItem(_, Some(ref expr)) => {\n-                        self.visit_expr(&expr);\n-                    }\n+                    hir::ConstTraitItem(_, Some(ref body)) |\n                     hir::MethodTraitItem(_, Some(ref body)) => {\n-                        intravisit::walk_block(self, body);\n+                        self.visit_expr(body);\n                     }\n                     hir::TypeTraitItem(..) => {}\n                 }\n@@ -295,7 +293,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ImplItemKind::Method(ref sig, ref body) => {\n                         let did = self.tcx.map.get_parent_did(search_item);\n                         if method_might_be_inlined(self.tcx, sig, impl_item, did) {\n-                            intravisit::walk_block(self, body)\n+                            self.visit_expr(body)\n                         }\n                     }\n                     hir::ImplItemKind::Type(_) => {}"}, {"sha": "34a6a547d9440fb84a391ff851152b6fb3602e61", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -490,12 +490,7 @@ impl RegionMaps {\n         // if there's one. Static items, for instance, won't\n         // have an enclosing scope, hence no scope will be\n         // returned.\n-        let expr_extent = self.node_extent(expr_id);\n-        // For some reason, the expr's scope itself is skipped here.\n-        let mut id = match scope_map[expr_extent.0 as usize].into_option() {\n-            Some(i) => i,\n-            _ => return None\n-        };\n+        let mut id = self.node_extent(expr_id);\n \n         while let Some(p) = scope_map[id.0 as usize].into_option() {\n             match code_extents[p.0 as usize] {\n@@ -1086,7 +1081,7 @@ fn resolve_item(visitor: &mut RegionResolutionVisitor, item: &hir::Item) {\n fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n               kind: FnKind,\n               decl: &hir::FnDecl,\n-              body: &hir::Block,\n+              body: &hir::Expr,\n               sp: Span,\n               id: ast::NodeId) {\n     debug!(\"region::resolve_fn(id={:?}, \\\n@@ -1128,7 +1123,7 @@ fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n         parent: fn_decl_scope,\n         var_parent: fn_decl_scope\n     };\n-    visitor.visit_block(body);\n+    visitor.visit_expr(body);\n \n     // Restore context we had at the start.\n     visitor.cx = outer_cx;\n@@ -1191,7 +1186,7 @@ impl<'a, 'v> Visitor<'v> for RegionResolutionVisitor<'a> {\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,\n-                b: &'v Block, s: Span, n: NodeId) {\n+                b: &'v Expr, s: Span, n: NodeId) {\n         resolve_fn(self, fk, fd, b, s, n);\n     }\n     fn visit_arm(&mut self, a: &Arm) {"}, {"sha": "292d9592ceb0cf0bc60a978e49d95244397760f8", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'v>, decl: &'v hir::FnDecl,\n-                b: &'v hir::Block, s: Span, fn_id: ast::NodeId) {\n+                b: &'v hir::Expr, s: Span, fn_id: ast::NodeId) {\n         match fk {\n             FnKind::ItemFn(_, generics, ..) => {\n                 self.visit_early_late(fn_id,decl, generics, |this| {\n@@ -403,7 +403,7 @@ fn signal_shadowing_problem(sess: &Session, name: ast::Name, orig: Original, sha\n \n // Adds all labels in `b` to `ctxt.labels_in_fn`, signalling a warning\n // if one of the label shadows a lifetime or another label.\n-fn extract_labels(ctxt: &mut LifetimeContext, b: &hir::Block) {\n+fn extract_labels(ctxt: &mut LifetimeContext, b: &hir::Expr) {\n     struct GatherLabels<'a> {\n         sess: &'a Session,\n         scope: Scope<'a>,\n@@ -415,7 +415,7 @@ fn extract_labels(ctxt: &mut LifetimeContext, b: &hir::Block) {\n         scope: ctxt.scope,\n         labels_in_fn: &mut ctxt.labels_in_fn,\n     };\n-    gather.visit_block(b);\n+    gather.visit_expr(b);\n     return;\n \n     impl<'v, 'a> Visitor<'v> for GatherLabels<'a> {\n@@ -493,7 +493,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     fn add_scope_and_walk_fn<'b>(&mut self,\n                                  fk: FnKind,\n                                  fd: &hir::FnDecl,\n-                                 fb: &'b hir::Block,\n+                                 fb: &'b hir::Expr,\n                                  _span: Span,\n                                  fn_id: ast::NodeId) {\n \n@@ -516,7 +516,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         extract_labels(self, fb);\n \n         self.with(FnScope { fn_id: fn_id, body_id: fb.id, s: self.scope },\n-                  |_old_scope, this| this.visit_block(fb))\n+                  |_old_scope, this| this.visit_expr(fb))\n     }\n \n     fn with<F>(&mut self, wrap_scope: ScopeChain, f: F) where"}, {"sha": "5ed628d7dcae5f8be847efa4e5c71043bfd67c3f", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -190,7 +190,7 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                      all_loans: &[Loan<'tcx>],\n                                      fn_id: ast::NodeId,\n                                      decl: &hir::FnDecl,\n-                                     body: &hir::Block) {\n+                                     body: &hir::Expr) {\n     debug!(\"check_loans(body id={})\", body.id);\n \n     let param_env = ty::ParameterEnvironment::for_item(bccx.tcx, fn_id);"}, {"sha": "8f2afa7f808227d1f2eef48a54505112c7c9db01", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -42,7 +42,7 @@ mod move_error;\n pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                     fn_id: NodeId,\n                                     decl: &hir::FnDecl,\n-                                    body: &hir::Block)\n+                                    body: &hir::Expr)\n                                     -> (Vec<Loan<'tcx>>,\n                                         move_data::MoveData<'tcx>) {\n     let mut glcx = GatherLoanCtxt {"}, {"sha": "836832de5b9c40f52d55daba45721962135764a7", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -58,7 +58,7 @@ pub struct MoveDataParamEnv<'tcx> {\n pub fn borrowck_mir(bcx: &mut BorrowckCtxt,\n                     fk: FnKind,\n                     _decl: &hir::FnDecl,\n-                    body: &hir::Block,\n+                    body: &hir::Expr,\n                     _sp: Span,\n                     id: ast::NodeId,\n                     attributes: &[ast::Attribute]) {"}, {"sha": "fb842f70a54a15bc71e68829d326f53704607bd2", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -47,9 +47,7 @@ use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n \n use rustc::hir;\n-use rustc::hir::{FnDecl, Block};\n-use rustc::hir::intravisit;\n-use rustc::hir::intravisit::{Visitor, FnKind};\n+use rustc::hir::intravisit::{self, Visitor, FnKind};\n \n pub mod check_loans;\n \n@@ -65,8 +63,8 @@ pub struct LoanDataFlowOperator;\n pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator>;\n \n impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,\n-                b: &'v Block, s: Span, id: ast::NodeId) {\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,\n+                b: &'v hir::Expr, s: Span, id: ast::NodeId) {\n         match fk {\n             FnKind::ItemFn(..) |\n             FnKind::Method(..) => {\n@@ -159,7 +157,7 @@ pub struct AnalysisData<'a, 'tcx: 'a> {\n fn borrowck_fn(this: &mut BorrowckCtxt,\n                fk: FnKind,\n                decl: &hir::FnDecl,\n-               body: &hir::Block,\n+               body: &hir::Expr,\n                sp: Span,\n                id: ast::NodeId,\n                attributes: &[ast::Attribute]) {\n@@ -200,7 +198,7 @@ fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n                                           fk: FnKind,\n                                           decl: &hir::FnDecl,\n                                           cfg: &cfg::CFG,\n-                                          body: &hir::Block,\n+                                          body: &hir::Expr,\n                                           sp: Span,\n                                           id: ast::NodeId)\n                                           -> AnalysisData<'a, 'tcx>"}, {"sha": "32bda5e11620ac2429a3dd22be4257b4dc18adf4", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -656,7 +656,7 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n                cfg: &cfg::CFG,\n                id_range: IdRange,\n                decl: &hir::FnDecl,\n-               body: &hir::Block)\n+               body: &hir::Expr)\n                -> FlowedMoveData<'a, 'tcx> {\n         let mut dfcx_moves =\n             DataFlowContext::new(tcx,"}, {"sha": "e0e8a215919217c126c940138e8bf06278c1b85c", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for OuterVisitor<'a, 'tcx> {\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,\n-                b: &'v hir::Block, s: Span, id: ast::NodeId) {\n+                b: &'v hir::Expr, s: Span, id: ast::NodeId) {\n         if let FnKind::Closure(..) = fk {\n             span_bug!(s, \"check_match: closure outside of function\")\n         }\n@@ -113,7 +113,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MatchVisitor<'a, 'tcx> {\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,\n-                b: &'v hir::Block, s: Span, n: ast::NodeId) {\n+                b: &'v hir::Expr, s: Span, n: ast::NodeId) {\n         intravisit::walk_fn(self, fk, fd, b, s, n);\n \n         for input in &fd.inputs {"}, {"sha": "ee6c27655d68c4d270bb5cfed8900b9ee975e43c", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -857,11 +857,10 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n               callee => signal!(e, CallOn(callee)),\n           };\n           let (decl, result) = if let Some(fn_like) = lookup_const_fn_by_id(tcx, did) {\n-              (fn_like.decl(), &fn_like.body().expr)\n+              (fn_like.decl(), fn_like.body())\n           } else {\n               signal!(e, NonConstPath)\n           };\n-          let result = result.as_ref().expect(\"const fn has no result expression\");\n           assert_eq!(decl.inputs.len(), args.len());\n \n           let mut call_args = DefIdMap();"}, {"sha": "ecbf28c1082f989e2e58f19d2065efe38095e6ea", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -701,8 +701,8 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n                                        mut out: W)\n                                        -> io::Result<()> {\n     let cfg = match code {\n-        blocks::BlockCode(block) => cfg::CFG::new(tcx, &block),\n-        blocks::FnLikeCode(fn_like) => cfg::CFG::new(tcx, &fn_like.body()),\n+        blocks::Code::Expr(expr) => cfg::CFG::new(tcx, expr),\n+        blocks::Code::FnLike(fn_like) => cfg::CFG::new(tcx, fn_like.body()),\n     };\n     let labelled_edges = mode != PpFlowGraphMode::UnlabelledEdges;\n     let lcfg = LabelledCFG {\n@@ -717,12 +717,12 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n             let r = dot::render(&lcfg, &mut out);\n             return expand_err_details(r);\n         }\n-        blocks::BlockCode(_) => {\n+        blocks::Code::Expr(_) => {\n             tcx.sess.err(\"--pretty flowgraph with -Z flowgraph-print annotations requires \\\n                           fn-like node id.\");\n             return Ok(());\n         }\n-        blocks::FnLikeCode(fn_like) => {\n+        blocks::Code::FnLike(fn_like) => {\n             let (bccx, analysis_data) =\n                 borrowck::build_borrowck_dataflow_data_for_fn(tcx, fn_like.to_fn_parts(), &cfg);\n \n@@ -990,8 +990,7 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                     tcx.sess.fatal(&format!(\"--pretty flowgraph couldn't find id: {}\", nodeid))\n                 });\n \n-                let code = blocks::Code::from_node(node);\n-                match code {\n+                match blocks::Code::from_node(&tcx.map, nodeid) {\n                     Some(code) => {\n                         let variants = gather_flowgraph_variants(tcx.sess);\n "}, {"sha": "e095bde18fd853d786263293c2fe954c732835aa", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -250,7 +250,7 @@ impl LateLintPass for NonSnakeCase {\n                 cx: &LateContext,\n                 fk: FnKind,\n                 _: &hir::FnDecl,\n-                _: &hir::Block,\n+                _: &hir::Expr,\n                 span: Span,\n                 id: ast::NodeId) {\n         match fk {"}, {"sha": "192d7be6774afe45ad20d304b38aae4ad022be2a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -222,7 +222,7 @@ impl LateLintPass for UnsafeCode {\n                 cx: &LateContext,\n                 fk: FnKind,\n                 _: &hir::FnDecl,\n-                _: &hir::Block,\n+                _: &hir::Expr,\n                 span: Span,\n                 _: ast::NodeId) {\n         match fk {\n@@ -812,7 +812,7 @@ impl LateLintPass for UnconditionalRecursion {\n                 cx: &LateContext,\n                 fn_kind: FnKind,\n                 _: &hir::FnDecl,\n-                blk: &hir::Block,\n+                blk: &hir::Expr,\n                 sp: Span,\n                 id: ast::NodeId) {\n         let method = match fn_kind {"}, {"sha": "0668d362037dd3450a3f98c37086cde0f35b1eba", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -99,7 +99,7 @@ impl LateLintPass for UnusedMut {\n                 cx: &LateContext,\n                 _: FnKind,\n                 decl: &hir::FnDecl,\n-                _: &hir::Block,\n+                _: &hir::Expr,\n                 _: Span,\n                 _: ast::NodeId) {\n         for a in &decl.inputs {"}, {"sha": "902798ec980061fe0bcfdf6276b45b7bbd65dd77", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -156,7 +156,7 @@ pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                                        fn_id: ast::NodeId,\n                                        arguments: A,\n                                        return_ty: Ty<'gcx>,\n-                                       ast_block: &'gcx hir::Block)\n+                                       ast_body: &'gcx hir::Expr)\n                                        -> (Mir<'tcx>, ScopeAuxiliaryVec)\n     where A: Iterator<Item=(Ty<'gcx>, Option<&'gcx hir::Pat>)>\n {\n@@ -166,7 +166,7 @@ pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let span = tcx.map.span(fn_id);\n     let mut builder = Builder::new(hir, span, arguments.len(), return_ty);\n \n-    let body_id = ast_block.id;\n+    let body_id = ast_body.id;\n     let call_site_extent =\n         tcx.region_maps.lookup_code_extent(\n             CodeExtentData::CallSiteScope { fn_id: fn_id, body_id: body_id });\n@@ -176,7 +176,7 @@ pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let mut block = START_BLOCK;\n     unpack!(block = builder.in_scope(call_site_extent, block, |builder| {\n         unpack!(block = builder.in_scope(arg_extent, block, |builder| {\n-            builder.args_and_body(block, return_ty, &arguments, arg_extent, ast_block)\n+            builder.args_and_body(block, &arguments, arg_extent, ast_body)\n         }));\n         // Attribute epilogue to function's closing brace\n         let fn_end = Span { lo: span.hi, ..span };\n@@ -310,10 +310,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn args_and_body(&mut self,\n                      mut block: BasicBlock,\n-                     return_ty: Ty<'tcx>,\n                      arguments: &[(Ty<'gcx>, Option<&'gcx hir::Pat>)],\n                      argument_extent: CodeExtent,\n-                     ast_block: &'gcx hir::Block)\n+                     ast_body: &'gcx hir::Expr)\n                      -> BlockAnd<()>\n     {\n         // Allocate locals for the function arguments\n@@ -342,12 +341,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             if let Some(pattern) = pattern {\n                 let pattern = Pattern::from_hir(self.hir.tcx(), pattern);\n-                scope = self.declare_bindings(scope, ast_block.span, &pattern);\n+                scope = self.declare_bindings(scope, ast_body.span, &pattern);\n                 unpack!(block = self.lvalue_into_pattern(block, pattern, &lvalue));\n             }\n \n             // Make sure we drop (parts of) the argument even when not matched on.\n-            self.schedule_drop(pattern.as_ref().map_or(ast_block.span, |pat| pat.span),\n+            self.schedule_drop(pattern.as_ref().map_or(ast_body.span, |pat| pat.span),\n                                argument_extent, &lvalue, ty);\n \n         }\n@@ -357,13 +356,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.visibility_scope = visibility_scope;\n         }\n \n-        // FIXME(#32959): temporary hack for the issue at hand\n-        let return_is_unit = return_ty.is_nil();\n-        // start the first basic block and translate the body\n-        unpack!(block = self.ast_block(&Lvalue::Local(RETURN_POINTER),\n-                return_is_unit, block, ast_block));\n-\n-        block.unit()\n+        let body = self.hir.mirror(ast_body);\n+        self.into(&Lvalue::Local(RETURN_POINTER), block, body)\n     }\n \n     fn get_unit_temp(&mut self) -> Lvalue<'tcx> {"}, {"sha": "af2f9adfc9a8ccc77aa9c4909ae2f789627db8a1", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n     fn visit_fn(&mut self,\n                 fk: FnKind<'tcx>,\n                 decl: &'tcx hir::FnDecl,\n-                body: &'tcx hir::Block,\n+                body: &'tcx hir::Expr,\n                 span: Span,\n                 id: ast::NodeId) {\n         // fetch the fully liberated fn signature (that is, all bound"}, {"sha": "7a93d4594ee998f1eef3c22becffc5e50feddcec", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -134,7 +134,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n     fn fn_like(&mut self,\n                fk: FnKind,\n                fd: &hir::FnDecl,\n-               b: &hir::Block,\n+               b: &hir::Expr,\n                s: Span,\n                fn_id: ast::NodeId)\n                -> ConstQualif {\n@@ -265,7 +265,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n     fn visit_fn(&mut self,\n                 fk: FnKind<'v>,\n                 fd: &'v hir::FnDecl,\n-                b: &'v hir::Block,\n+                b: &'v hir::Expr,\n                 s: Span,\n                 fn_id: ast::NodeId) {\n         self.fn_like(fk, fd, b, s, fn_id);"}, {"sha": "417987d9664e0f3533e651fa0d9e74b4e92db517", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -164,7 +164,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_fn(&mut self,\n                 fk: hir_visit::FnKind<'v>,\n                 fd: &'v hir::FnDecl,\n-                b: &'v hir::Block,\n+                b: &'v hir::Expr,\n                 s: Span,\n                 id: NodeId) {\n         self.record(\"FnDecl\", Id::None, fd);"}, {"sha": "e58cd893819339636d12191b447389d37fcc862b", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {\n                 self.with_context(Loop, |v| v.visit_block(&b));\n             }\n             hir::ExprClosure(.., ref b, _) => {\n-                self.with_context(Closure, |v| v.visit_block(&b));\n+                self.with_context(Closure, |v| v.visit_expr(&b));\n             }\n             hir::ExprBreak(_) => self.require_loop(\"break\", e.span),\n             hir::ExprAgain(_) => self.require_loop(\"continue\", e.span),"}, {"sha": "d55ce4c356384618062967a8f35089f8131f343b", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n     fn visit_fn(&mut self,\n                 fk: intravisit::FnKind<'v>,\n                 fd: &'v hir::FnDecl,\n-                b: &'v hir::Block,\n+                b: &'v hir::Expr,\n                 s: Span,\n                 fn_id: ast::NodeId) {\n         // FIXME (@jroesch) change this to be an inference context"}, {"sha": "af834f3f84d4775c986801a0325e855adecd4716", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -23,7 +23,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                               expr: &hir::Expr,\n                               _capture: hir::CaptureClause,\n                               decl: &'gcx hir::FnDecl,\n-                              body: &'gcx hir::Block,\n+                              body: &'gcx hir::Expr,\n                               expected: Expectation<'tcx>)\n                               -> Ty<'tcx> {\n         debug!(\"check_expr_closure(expr={:?},expected={:?})\",\n@@ -44,7 +44,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                      expr: &hir::Expr,\n                      opt_kind: Option<ty::ClosureKind>,\n                      decl: &'gcx hir::FnDecl,\n-                     body: &'gcx hir::Block,\n+                     body: &'gcx hir::Expr,\n                      expected_sig: Option<ty::FnSig<'tcx>>)\n                      -> Ty<'tcx> {\n         let expr_def_id = self.tcx.map.local_def_id(expr.id);"}, {"sha": "725862022c59a15d94428397e7e3fa172ab2c68f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -534,7 +534,7 @@ pub fn check_drop_impls(ccx: &CrateCtxt) -> CompileResult {\n \n fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                            decl: &'tcx hir::FnDecl,\n-                           body: &'tcx hir::Block,\n+                           body: &'tcx hir::Expr,\n                            fn_id: ast::NodeId,\n                            span: Span) {\n     let raw_fty = ccx.tcx.lookup_item_type(ccx.tcx.map.local_def_id(fn_id)).ty;\n@@ -558,7 +558,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         let fcx = check_fn(&inh, fn_ty.unsafety, fn_id, &fn_sig, decl, fn_id, body);\n \n         fcx.select_all_obligations_and_apply_defaults();\n-        fcx.closure_analyze_fn(body);\n+        fcx.closure_analyze(body);\n         fcx.select_obligations_where_possible();\n         fcx.check_casts();\n         fcx.select_all_obligations_or_error(); // Casts can introduce new obligations.\n@@ -654,7 +654,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n \n     // Don't descend into the bodies of nested closures\n     fn visit_fn(&mut self, _: intravisit::FnKind<'gcx>, _: &'gcx hir::FnDecl,\n-                _: &'gcx hir::Block, _: Span, _: ast::NodeId) { }\n+                _: &'gcx hir::Expr, _: Span, _: ast::NodeId) { }\n }\n \n /// Helper used by check_bare_fn and check_expr_fn. Does the grungy work of checking a function\n@@ -669,7 +669,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n                             fn_sig: &ty::FnSig<'tcx>,\n                             decl: &'gcx hir::FnDecl,\n                             fn_id: ast::NodeId,\n-                            body: &'gcx hir::Block)\n+                            body: &'gcx hir::Expr)\n                             -> FnCtxt<'a, 'gcx, 'tcx>\n {\n     let mut fn_sig = fn_sig.clone();\n@@ -709,18 +709,12 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n             fcx.write_ty(input.id, arg_ty);\n         }\n \n-        visit.visit_block(body);\n+        visit.visit_expr(body);\n     }\n \n     inherited.tables.borrow_mut().liberated_fn_sigs.insert(fn_id, fn_sig);\n \n-    // FIXME(aburka) do we need this special case? and should it be is_uninhabited?\n-    let expected = if fcx.ret_ty.is_never() {\n-        NoExpectation\n-    } else {\n-        ExpectHasType(fcx.ret_ty)\n-    };\n-    fcx.check_block_with_expected(body, expected);\n+    fcx.check_expr_coercable_to_type(body, fcx.ret_ty);\n \n     fcx\n }\n@@ -1198,7 +1192,7 @@ fn check_const_with_type<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n         fcx.check_expr_coercable_to_type(expr, expected_type);\n \n         fcx.select_all_obligations_and_apply_defaults();\n-        fcx.closure_analyze_const(expr);\n+        fcx.closure_analyze(expr);\n         fcx.select_obligations_where_possible();\n         fcx.check_casts();\n         fcx.select_all_obligations_or_error();"}, {"sha": "d4e5e9a5bb355f5b0520b77f2574c23d6ff598dd", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -142,13 +142,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn regionck_fn(&self,\n                        fn_id: ast::NodeId,\n                        decl: &hir::FnDecl,\n-                       blk: &hir::Block) {\n+                       body: &hir::Expr) {\n         debug!(\"regionck_fn(id={})\", fn_id);\n-        let mut rcx = RegionCtxt::new(self, RepeatingScope(blk.id), blk.id, Subject(fn_id));\n+        let mut rcx = RegionCtxt::new(self, RepeatingScope(body.id), body.id, Subject(fn_id));\n \n         if self.err_count_since_creation() == 0 {\n             // regionck assumes typeck succeeded\n-            rcx.visit_fn_body(fn_id, decl, blk, self.tcx.map.span(fn_id));\n+            rcx.visit_fn_body(fn_id, decl, body, self.tcx.map.span(fn_id));\n         }\n \n         rcx.free_region_map.relate_free_regions_from_predicates(\n@@ -268,7 +268,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n     fn visit_fn_body(&mut self,\n                      id: ast::NodeId, // the id of the fn itself\n                      fn_decl: &hir::FnDecl,\n-                     body: &hir::Block,\n+                     body: &hir::Expr,\n                      span: Span)\n     {\n         // When we enter a function, we can derive\n@@ -305,7 +305,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         self.relate_free_regions(&fn_sig_tys[..], body.id, span);\n         self.link_fn_args(self.tcx.region_maps.node_extent(body.id),\n                           &fn_decl.inputs[..]);\n-        self.visit_block(body);\n+        self.visit_expr(body);\n         self.visit_region_obligations(body.id);\n \n         let call_site_scope = self.call_site_scope.unwrap();\n@@ -480,7 +480,7 @@ impl<'a, 'gcx, 'tcx, 'v> Visitor<'v> for RegionCtxt<'a, 'gcx, 'tcx> {\n     // regions, until regionck, as described in #3238.\n \n     fn visit_fn(&mut self, _fk: intravisit::FnKind<'v>, fd: &'v hir::FnDecl,\n-                b: &'v hir::Block, span: Span, id: ast::NodeId) {\n+                b: &'v hir::Expr, span: Span, id: ast::NodeId) {\n         self.visit_fn_body(id, fd, b, span)\n     }\n \n@@ -825,7 +825,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n \n     fn check_expr_fn_block(&mut self,\n                            expr: &hir::Expr,\n-                           body: &hir::Block) {\n+                           body: &hir::Expr) {\n         let repeating_scope = self.set_repeating_scope(body.id);\n         intravisit::walk_expr(self, expr);\n         self.set_repeating_scope(repeating_scope);"}, {"sha": "2fea86cb212070844afd79696d14dc6c1100b609", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -57,18 +57,7 @@ use rustc::util::nodemap::NodeMap;\n // PUBLIC ENTRY POINTS\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n-    pub fn closure_analyze_fn(&self, body: &hir::Block) {\n-        let mut seed = SeedBorrowKind::new(self);\n-        seed.visit_block(body);\n-\n-        let mut adjust = AdjustBorrowKind::new(self, seed.temp_closure_kinds);\n-        adjust.visit_block(body);\n-\n-        // it's our job to process these.\n-        assert!(self.deferred_call_resolutions.borrow().is_empty());\n-    }\n-\n-    pub fn closure_analyze_const(&self, body: &hir::Expr) {\n+    pub fn closure_analyze(&self, body: &hir::Expr) {\n         let mut seed = SeedBorrowKind::new(self);\n         seed.visit_expr(body);\n \n@@ -110,7 +99,7 @@ impl<'a, 'gcx, 'tcx> SeedBorrowKind<'a, 'gcx, 'tcx> {\n     fn check_closure(&mut self,\n                      expr: &hir::Expr,\n                      capture_clause: hir::CaptureClause,\n-                     _body: &hir::Block)\n+                     _body: &hir::Expr)\n     {\n         let closure_def_id = self.fcx.tcx.map.local_def_id(expr.id);\n         if !self.fcx.tables.borrow().closure_kinds.contains_key(&closure_def_id) {\n@@ -164,7 +153,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                        id: ast::NodeId,\n                        span: Span,\n                        decl: &hir::FnDecl,\n-                       body: &hir::Block) {\n+                       body: &hir::Expr) {\n         /*!\n          * Analysis starting point.\n          */\n@@ -497,7 +486,7 @@ impl<'a, 'gcx, 'tcx, 'v> Visitor<'v> for AdjustBorrowKind<'a, 'gcx, 'tcx> {\n     fn visit_fn(&mut self,\n                 fn_kind: intravisit::FnKind<'v>,\n                 decl: &'v hir::FnDecl,\n-                body: &'v hir::Block,\n+                body: &'v hir::Expr,\n                 span: Span,\n                 id: ast::NodeId)\n     {"}, {"sha": "2c1a9a7b17748a78c1eaa4e2aed7181c3bd7aad5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -347,7 +347,7 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n \n     fn check_item_fn(&mut self,\n                      item: &hir::Item,\n-                     body: &hir::Block)\n+                     body: &hir::Expr)\n     {\n         self.for_item(item).with_fcx(|fcx, this| {\n             let free_substs = &fcx.parameter_environment.free_substs;"}, {"sha": "9f3214a0d813e6e88d392810727b598a751178f3", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0830d74985246c2e2bbd28e7d8c0ef072e2458/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=ff0830d74985246c2e2bbd28e7d8c0ef072e2458", "patch": "@@ -49,11 +49,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn resolve_type_vars_in_fn(&self,\n                                    decl: &hir::FnDecl,\n-                                   blk: &hir::Block,\n+                                   body: &hir::Expr,\n                                    item_id: ast::NodeId) {\n         assert_eq!(self.writeback_errors.get(), false);\n         let mut wbcx = WritebackCx::new(self);\n-        wbcx.visit_block(blk);\n+        wbcx.visit_expr(body);\n         for arg in &decl.inputs {\n             wbcx.visit_node_id(ResolvingPattern(arg.pat.span), arg.id);\n             wbcx.visit_pat(&arg.pat);"}]}