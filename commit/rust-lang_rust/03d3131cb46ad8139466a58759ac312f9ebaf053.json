{"sha": "03d3131cb46ad8139466a58759ac312f9ebaf053", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZDMxMzFjYjQ2YWQ4MTM5NDY2YTU4NzU5YWMzMTJmOWViYWYwNTM=", "commit": {"author": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2021-08-18T13:56:25Z"}, "committer": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2021-09-03T00:44:39Z"}, "message": "Extend unnecessary_unwrap to look for expect in addition to unwrap\n\nCloses #7581", "tree": {"sha": "0fd362009e13057f36f293ca9abdd721b432bdfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fd362009e13057f36f293ca9abdd721b432bdfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03d3131cb46ad8139466a58759ac312f9ebaf053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03d3131cb46ad8139466a58759ac312f9ebaf053", "html_url": "https://github.com/rust-lang/rust/commit/03d3131cb46ad8139466a58759ac312f9ebaf053", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03d3131cb46ad8139466a58759ac312f9ebaf053/comments", "author": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8c2c7b712c273f13258de8b87b233918d8726b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c2c7b712c273f13258de8b87b233918d8726b9", "html_url": "https://github.com/rust-lang/rust/commit/a8c2c7b712c273f13258de8b87b233918d8726b9"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "42738bc3e1fbb8871e0efbdedb6c1dbbe46c72ff", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03d3131cb46ad8139466a58759ac312f9ebaf053/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d3131cb46ad8139466a58759ac312f9ebaf053/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=03d3131cb46ad8139466a58759ac312f9ebaf053", "patch": "@@ -172,8 +172,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n             if_chain! {\n                 if let ExprKind::MethodCall(method_name, _, args, _) = expr.kind;\n                 if let ExprKind::Path(QPath::Resolved(None, path)) = args[0].kind;\n-                if [sym::unwrap, sym!(unwrap_err)].contains(&method_name.ident.name);\n-                let call_to_unwrap = method_name.ident.name == sym::unwrap;\n+                if [sym::unwrap, sym::expect, sym!(unwrap_err)].contains(&method_name.ident.name);\n+                let call_to_unwrap = [sym::unwrap, sym::expect].contains(&method_name.ident.name);\n                 if let Some(unwrappable) = self.unwrappables.iter()\n                     .find(|u| u.ident.res == path.res);\n                 // Span contexts should not differ with the conditional branch"}, {"sha": "ee3fdfabe9d8a8e255d5966ce924cb87f2744ae7", "filename": "tests/ui/checked_unwrap/simple_conditionals.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03d3131cb46ad8139466a58759ac312f9ebaf053/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d3131cb46ad8139466a58759ac312f9ebaf053/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs?ref=03d3131cb46ad8139466a58759ac312f9ebaf053", "patch": "@@ -37,8 +37,10 @@ fn main() {\n     let x = Some(());\n     if x.is_some() {\n         x.unwrap(); // unnecessary\n+        x.expect(\"an error message\"); // unnecessary\n     } else {\n         x.unwrap(); // will panic\n+        x.expect(\"an error message\"); // will panic\n     }\n     if x.is_none() {\n         x.unwrap(); // will panic\n@@ -52,9 +54,11 @@ fn main() {\n     let mut x: Result<(), ()> = Ok(());\n     if x.is_ok() {\n         x.unwrap(); // unnecessary\n+        x.expect(\"an error message\"); // unnecessary\n         x.unwrap_err(); // will panic\n     } else {\n         x.unwrap(); // will panic\n+        x.expect(\"an error message\"); // will panic\n         x.unwrap_err(); // unnecessary\n     }\n     if x.is_err() {"}, {"sha": "7127ff89b31db607baaf17c0e082f45f15cac58d", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/03d3131cb46ad8139466a58759ac312f9ebaf053/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03d3131cb46ad8139466a58759ac312f9ebaf053/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=03d3131cb46ad8139466a58759ac312f9ebaf053", "patch": "@@ -12,8 +12,17 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: you checked before that `expect()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n+  --> $DIR/simple_conditionals.rs:40:9\n+   |\n+LL |     if x.is_some() {\n+   |        ----------- the check is happening here\n+LL |         x.unwrap(); // unnecessary\n+LL |         x.expect(\"an error message\"); // unnecessary\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: this call to `unwrap()` will always panic\n-  --> $DIR/simple_conditionals.rs:41:9\n+  --> $DIR/simple_conditionals.rs:42:9\n    |\n LL |     if x.is_some() {\n    |        ----------- because of this check\n@@ -27,16 +36,25 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: this call to `expect()` will always panic\n+  --> $DIR/simple_conditionals.rs:43:9\n+   |\n+LL |     if x.is_some() {\n+   |        ----------- because of this check\n+...\n+LL |         x.expect(\"an error message\"); // will panic\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: this call to `unwrap()` will always panic\n-  --> $DIR/simple_conditionals.rs:44:9\n+  --> $DIR/simple_conditionals.rs:46:9\n    |\n LL |     if x.is_none() {\n    |        ----------- because of this check\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n-  --> $DIR/simple_conditionals.rs:46:9\n+  --> $DIR/simple_conditionals.rs:48:9\n    |\n LL |     if x.is_none() {\n    |        ----------- the check is happening here\n@@ -58,33 +76,51 @@ LL |     m!(x);\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n-  --> $DIR/simple_conditionals.rs:54:9\n+  --> $DIR/simple_conditionals.rs:56:9\n    |\n LL |     if x.is_ok() {\n    |        --------- the check is happening here\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n+error: you checked before that `expect()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n+  --> $DIR/simple_conditionals.rs:57:9\n+   |\n+LL |     if x.is_ok() {\n+   |        --------- the check is happening here\n+LL |         x.unwrap(); // unnecessary\n+LL |         x.expect(\"an error message\"); // unnecessary\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: this call to `unwrap_err()` will always panic\n-  --> $DIR/simple_conditionals.rs:55:9\n+  --> $DIR/simple_conditionals.rs:58:9\n    |\n LL |     if x.is_ok() {\n    |        --------- because of this check\n-LL |         x.unwrap(); // unnecessary\n+...\n LL |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: this call to `unwrap()` will always panic\n-  --> $DIR/simple_conditionals.rs:57:9\n+  --> $DIR/simple_conditionals.rs:60:9\n    |\n LL |     if x.is_ok() {\n    |        --------- because of this check\n ...\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n+error: this call to `expect()` will always panic\n+  --> $DIR/simple_conditionals.rs:61:9\n+   |\n+LL |     if x.is_ok() {\n+   |        --------- because of this check\n+...\n+LL |         x.expect(\"an error message\"); // will panic\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n-  --> $DIR/simple_conditionals.rs:58:9\n+  --> $DIR/simple_conditionals.rs:62:9\n    |\n LL |     if x.is_ok() {\n    |        --------- the check is happening here\n@@ -93,15 +129,15 @@ LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: this call to `unwrap()` will always panic\n-  --> $DIR/simple_conditionals.rs:61:9\n+  --> $DIR/simple_conditionals.rs:65:9\n    |\n LL |     if x.is_err() {\n    |        ---------- because of this check\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n-  --> $DIR/simple_conditionals.rs:62:9\n+  --> $DIR/simple_conditionals.rs:66:9\n    |\n LL |     if x.is_err() {\n    |        ---------- the check is happening here\n@@ -110,7 +146,7 @@ LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n-  --> $DIR/simple_conditionals.rs:64:9\n+  --> $DIR/simple_conditionals.rs:68:9\n    |\n LL |     if x.is_err() {\n    |        ---------- the check is happening here\n@@ -119,13 +155,13 @@ LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: this call to `unwrap_err()` will always panic\n-  --> $DIR/simple_conditionals.rs:65:9\n+  --> $DIR/simple_conditionals.rs:69:9\n    |\n LL |     if x.is_err() {\n    |        ---------- because of this check\n ...\n LL |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 17 previous errors\n "}]}