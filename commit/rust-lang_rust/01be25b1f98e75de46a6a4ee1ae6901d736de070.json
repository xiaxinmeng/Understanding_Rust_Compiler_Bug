{"sha": "01be25b1f98e75de46a6a4ee1ae6901d736de070", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYmUyNWIxZjk4ZTc1ZGU0NmE2YTRlZTFhZTY5MDFkNzM2ZGUwNzA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-05-06T04:15:48Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-05-06T04:15:48Z"}, "message": "Use crate/index pair for def ids", "tree": {"sha": "bd3af615cded9806e673f1efb03ad52027a36073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd3af615cded9806e673f1efb03ad52027a36073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01be25b1f98e75de46a6a4ee1ae6901d736de070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01be25b1f98e75de46a6a4ee1ae6901d736de070", "html_url": "https://github.com/rust-lang/rust/commit/01be25b1f98e75de46a6a4ee1ae6901d736de070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01be25b1f98e75de46a6a4ee1ae6901d736de070/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca6062d25bfb57fde3c2d17bba047d0458505d7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6062d25bfb57fde3c2d17bba047d0458505d7b", "html_url": "https://github.com/rust-lang/rust/commit/ca6062d25bfb57fde3c2d17bba047d0458505d7b"}], "stats": {"total": 380, "additions": 201, "deletions": 179}, "files": [{"sha": "ac658af4006b1fe089bd8de4d5f701af12a81214", "filename": "src/librustc_save_analysis/csv_dumper.rs", "status": "modified", "additions": 100, "deletions": 56, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/01be25b1f98e75de46a6a4ee1ae6901d736de070/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01be25b1f98e75de46a6a4ee1ae6901d736de070/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs?ref=01be25b1f98e75de46a6a4ee1ae6901d736de070", "patch": "@@ -60,8 +60,8 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn enum_data(&mut self, data: EnumData) {\n-        let id = data.id.to_string();\n-        let scope = data.scope.to_string();\n+        let id = data.id.index.as_u32().to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"qualname\", &data.qualname),\n@@ -73,9 +73,9 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn extern_crate(&mut self, data: ExternCrateData) {\n-        let id = data.id.to_string();\n+        let id = data.id.index.as_u32().to_string();\n         let crate_num = data.crate_num.to_string();\n-        let scope = data.scope.to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"name\", &data.name),\n@@ -88,50 +88,68 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn impl_data(&mut self, data: ImplData) {\n-        let id = data.id.to_string();\n-        let ref_id = data.self_ref.unwrap_or(Id::null()).to_string();\n-        let trait_id = data.trait_ref.unwrap_or(Id::null()).to_string();\n-        let scope = data.scope.to_string();\n+        let self_ref = data.self_ref.unwrap_or(null_def_id());\n+        let trait_ref = data.trait_ref.unwrap_or(null_def_id());\n+\n+        let id = data.id.index.as_u32().to_string();\n+        let ref_id = self_ref.index.as_usize().to_string();\n+        let ref_id_crate = self_ref.krate.to_string();\n+        let trait_id = trait_ref.index.as_usize().to_string();\n+        let trait_id_crate = trait_ref.krate.to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"refid\", &ref_id),\n+            (\"refidcrate\", &ref_id_crate),\n             (\"traitid\", &trait_id),\n+            (\"traitidcrate\", &trait_id_crate),\n             (\"scopeid\", &scope)\n         ]);\n \n         self.record(\"impl\", data.span, values);\n     }\n \n     fn inheritance(&mut self, data: InheritanceData) {\n-        let base_id = data.base_id.to_string();\n-        let deriv_id = data.deriv_id.to_string();\n-        let values = make_values_str(&[\n-            (\"base\", &base_id),\n-            (\"derived\", &deriv_id),\n-        ]);\n+       let base_id = data.base_id.index.as_usize().to_string();\n+       let base_crate = data.base_id.krate.to_string();\n+       let deriv_id = data.deriv_id.index.as_u32().to_string();\n+       let deriv_crate = data.deriv_id.krate.to_string();\n+       let values = make_values_str(&[\n+           (\"base\", &base_id),\n+           (\"basecrate\", &base_crate),\n+           (\"derived\", &deriv_id),\n+           (\"derivedcrate\", &deriv_crate)\n+       ]);\n \n        self.record(\"inheritance\", data.span, values);\n     }\n \n     fn function(&mut self, data: FunctionData) {\n-        let id = data.id.to_string();\n-        let decl_id = data.declaration.unwrap_or(Id::null()).to_string();\n-        let scope = data.scope.to_string();\n+        let (decl_id, decl_crate) = match data.declaration {\n+            Some(id) => (id.index.as_usize().to_string(), id.krate.to_string()),\n+            None => (String::new(), String::new())\n+        };\n+\n+        let id = data.id.index.as_u32().to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"qualname\", &data.qualname),\n             (\"declid\", &decl_id),\n+            (\"declidcrate\", &decl_crate),\n             (\"scopeid\", &scope)\n         ]);\n \n         self.record(\"function\", data.span, values);\n     }\n \n     fn function_ref(&mut self, data: FunctionRefData) {\n-        let ref_id = data.ref_id.to_string();\n-        let scope = data.scope.to_string();\n+        let ref_id = data.ref_id.index.as_usize().to_string();\n+        let ref_crate = data.ref_id.krate.to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"refid\", &ref_id),\n+            (\"refidcrate\", &ref_crate),\n             (\"qualname\", \"\"),\n             (\"scopeid\", &scope)\n         ]);\n@@ -140,11 +158,13 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn function_call(&mut self, data: FunctionCallData) {\n-        let ref_id = data.ref_id.to_string();\n+        let ref_id = data.ref_id.index.as_usize().to_string();\n+        let ref_crate = data.ref_id.krate.to_string();\n         let qualname = String::new();\n-        let scope = data.scope.to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"refid\", &ref_id),\n+            (\"refidcrate\", &ref_crate),\n             (\"qualname\", &qualname),\n             (\"scopeid\", &scope)\n         ]);\n@@ -153,8 +173,8 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn method(&mut self, data: MethodData) {\n-        let id = data.id.to_string();\n-        let scope = data.scope.to_string();\n+        let id = data.id.index.as_u32().to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"qualname\", &data.qualname),\n@@ -165,12 +185,21 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn method_call(&mut self, data: MethodCallData) {\n-        let decl_id = data.decl_id.unwrap_or(Id::null()).to_string();\n-        let ref_id = data.ref_id.unwrap_or(Id::null()).to_string();\n-        let scope = data.scope.to_string();\n+        let (dcn, dck) = match data.decl_id {\n+            Some(declid) => (declid.index.as_usize().to_string(), declid.krate.to_string()),\n+            None => (String::new(), String::new()),\n+        };\n+\n+        let ref_id = data.ref_id.unwrap_or(null_def_id());\n+\n+        let def_id = ref_id.index.as_usize().to_string();\n+        let def_crate = ref_id.krate.to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n-            (\"refid\", &ref_id),\n-            (\"declid\", &decl_id),\n+            (\"refid\", &def_id),\n+            (\"refidcrate\", &def_crate),\n+            (\"declid\", &dcn),\n+            (\"declidcrate\", &dck),\n             (\"scopeid\", &scope)\n         ]);\n \n@@ -187,7 +216,7 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn macro_use(&mut self, data: MacroUseData) {\n-        let scope = data.scope.to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"callee_name\", &data.name),\n             (\"qualname\", &data.qualname),\n@@ -198,8 +227,8 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn mod_data(&mut self, data: ModData) {\n-        let id = data.id.to_string();\n-        let scope = data.scope.to_string();\n+        let id = data.id.index.as_u32().to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"qualname\", &data.qualname),\n@@ -211,11 +240,15 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn mod_ref(&mut self, data: ModRefData) {\n-        let ref_id = data.ref_id.unwrap_or(Id::null()).to_string();\n+        let (ref_id, ref_crate) = match data.ref_id {\n+            Some(rid) => (rid.index.as_usize().to_string(), rid.krate.to_string()),\n+            None => (0.to_string(), 0.to_string())\n+        };\n \n-        let scope = data.scope.to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"refid\", &ref_id),\n+            (\"refidcrate\", &ref_crate),\n             (\"qualname\", &data.qualname),\n             (\"scopeid\", &scope)\n         ]);\n@@ -224,9 +257,9 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn struct_data(&mut self, data: StructData) {\n-        let id = data.id.to_string();\n-        let ctor_id = data.ctor_id.to_string();\n-        let scope = data.scope.to_string();\n+        let id = data.id.index.as_u32().to_string();\n+        let ctor_id = data.ctor_id.index.as_u32().to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"ctor_id\", &ctor_id),\n@@ -239,8 +272,8 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn struct_variant(&mut self, data: StructVariantData) {\n-        let id = data.id.to_string();\n-        let scope = data.scope.to_string();\n+        let id = data.id.index.as_u32().to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"ctor_id\", &id),\n@@ -254,8 +287,8 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn trait_data(&mut self, data: TraitData) {\n-        let id = data.id.to_string();\n-        let scope = data.scope.to_string();\n+        let id = data.id.index.as_u32().to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"qualname\", &data.qualname),\n@@ -267,8 +300,8 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn tuple_variant(&mut self, data: TupleVariantData) {\n-        let id = data.id.to_string();\n-        let scope = data.scope.to_string();\n+        let id = data.id.index.as_u32().to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"name\", &data.name),\n@@ -282,10 +315,15 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn type_ref(&mut self, data: TypeRefData) {\n-        let ref_id = data.ref_id.unwrap_or(Id::null()).to_string();\n-        let scope = data.scope.to_string();\n+        let (ref_id, ref_crate) = match data.ref_id {\n+            Some(id) => (id.index.as_usize().to_string(), id.krate.to_string()),\n+            None => (0.to_string(), 0.to_string())\n+        };\n+\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"refid\", &ref_id),\n+            (\"refidcrate\", &ref_crate),\n             (\"qualname\", &data.qualname),\n             (\"scopeid\", &scope)\n         ]);\n@@ -294,7 +332,7 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn typedef(&mut self, data: TypedefData) {\n-        let id = data.id.to_string();\n+        let id = data.id.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"qualname\", &data.qualname),\n@@ -305,12 +343,16 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn use_data(&mut self, data: UseData) {\n-        let id = data.id.to_string();\n-        let mod_id = data.mod_id.unwrap_or(Id::null()).to_string();\n-        let scope = data.scope.to_string();\n+        let mod_id = data.mod_id.unwrap_or(null_def_id());\n+\n+        let id = data.id.index.as_u32().to_string();\n+        let ref_id = mod_id.index.as_usize().to_string();\n+        let ref_crate = mod_id.krate.to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n-            (\"mod_id\", &mod_id),\n+            (\"refid\", &ref_id),\n+            (\"refidcrate\", &ref_crate),\n             (\"name\", &data.name),\n             (\"scopeid\", &scope)\n         ]);\n@@ -321,8 +363,8 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     fn use_glob(&mut self, data: UseGlobData) {\n         let names = data.names.join(\", \");\n \n-        let id = data.id.to_string();\n-        let scope = data.scope.to_string();\n+        let id = data.id.index.as_u32().to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"value\", &names),\n@@ -333,8 +375,8 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn variable(&mut self, data: VariableData) {\n-        let id = data.id.to_string();\n-        let scope = data.scope.to_string();\n+        let id = data.id.index.as_u32().to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n             (\"id\", &id),\n             (\"name\", &data.name),\n@@ -348,10 +390,12 @@ impl<'b, W: Write + 'b> Dump for CsvDumper<'b, W> {\n     }\n \n     fn variable_ref(&mut self, data: VariableRefData) {\n-        let id = data.ref_id.to_string();\n-        let scope = data.scope.to_string();\n+        let ref_id = data.ref_id.index.as_usize().to_string();\n+        let ref_crate = data.ref_id.krate.to_string();\n+        let scope = data.scope.index.as_u32().to_string();\n         let values = make_values_str(&[\n-            (\"id\", &id),\n+            (\"refid\", &ref_id),\n+            (\"refidcrate\", &ref_crate),\n             (\"qualname\", \"\"),\n             (\"scopeid\", &scope)\n         ]);"}, {"sha": "db4bd1d6d730821623532854f454183f60b70a33", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 101, "deletions": 123, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/01be25b1f98e75de46a6a4ee1ae6901d736de070/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01be25b1f98e75de46a6a4ee1ae6901d736de070/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=01be25b1f98e75de46a6a4ee1ae6901d736de070", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt::{self, Display, Formatter};\n-\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n use syntax::ast::{CrateNum, NodeId};\n@@ -24,32 +22,12 @@ pub trait Lower {\n     fn lower(self, tcx: &TyCtxt) -> Self::Target;\n }\n \n-// We use a newtype to enforce conversion of all NodeIds (which are u32s as well)\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable)]\n-pub struct Id(u32);\n-\n-impl Id {\n-    pub fn from_def_id(id: DefId) -> Id {\n-        Id(id.index.as_u32())\n-    }\n-\n-    // FIXME: this function is called with non-local NodeIds. This means that they\n-    // cannot be mapped to a DefId. We should remove those calls. In the meantime,\n-    // we return a \"null Id\" when the NodeId is invalid.\n-    pub fn from_node_id(id: NodeId, map: &Map) -> Id {\n-        map.opt_local_def_id(id).map(|id| Id(id.index.as_u32()))\n-                                .unwrap_or(Id::null())\n-    }\n-\n-    pub fn null() -> Id {\n-        Id(u32::max_value())\n-    }\n+fn make_def_id(id: NodeId, map: &Map) -> DefId {\n+    map.opt_local_def_id(id).unwrap_or(null_def_id())\n }\n \n-impl Display for Id {\n-    fn fmt(&self, f: &mut Formatter) -> fmt::Result {\n-        self.0.fmt(f)\n-    }\n+pub fn null_def_id() -> DefId {\n+    DefId { krate: u32::max_value(), index: DefIndex::from_u32(u32::max_value()) }\n }\n \n #[derive(Clone, Debug, RustcEncodable)]\n@@ -106,49 +84,49 @@ impl Lower for data::CratePreludeData {\n /// Data for enum declarations.\n #[derive(Clone, Debug, RustcEncodable)]\n pub struct EnumData {\n-    pub id: Id,\n+    pub id: DefId,\n     pub value: String,\n     pub qualname: String,\n     pub span: SpanData,\n-    pub scope: Id,\n+    pub scope: DefId,\n }\n \n impl Lower for data::EnumData {\n     type Target = EnumData;\n \n     fn lower(self, tcx: &TyCtxt) -> EnumData {\n         EnumData {\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             value: self.value,\n             qualname: self.qualname,\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n         }\n     }\n }\n \n /// Data for extern crates.\n #[derive(Debug, RustcEncodable)]\n pub struct ExternCrateData {\n-    pub id: Id,\n+    pub id: DefId,\n     pub name: String,\n     pub crate_num: CrateNum,\n     pub location: String,\n     pub span: SpanData,\n-    pub scope: Id,\n+    pub scope: DefId,\n }\n \n impl Lower for data::ExternCrateData {\n     type Target = ExternCrateData;\n \n     fn lower(self, tcx: &TyCtxt) -> ExternCrateData {\n         ExternCrateData {\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             name: self.name,\n             crate_num: self.crate_num,\n             location: self.location,\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n         }\n     }\n }\n@@ -157,8 +135,8 @@ impl Lower for data::ExternCrateData {\n #[derive(Debug, RustcEncodable)]\n pub struct FunctionCallData {\n     pub span: SpanData,\n-    pub scope: Id,\n-    pub ref_id: Id,\n+    pub scope: DefId,\n+    pub ref_id: DefId,\n }\n \n impl Lower for data::FunctionCallData {\n@@ -167,34 +145,34 @@ impl Lower for data::FunctionCallData {\n     fn lower(self, tcx: &TyCtxt) -> FunctionCallData {\n         FunctionCallData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n-            ref_id: Id::from_def_id(self.ref_id),\n+            scope: make_def_id(self.scope, &tcx.map),\n+            ref_id: self.ref_id,\n         }\n     }\n }\n \n /// Data for all kinds of functions and methods.\n #[derive(Clone, Debug, RustcEncodable)]\n pub struct FunctionData {\n-    pub id: Id,\n+    pub id: DefId,\n     pub name: String,\n     pub qualname: String,\n-    pub declaration: Option<Id>,\n+    pub declaration: Option<DefId>,\n     pub span: SpanData,\n-    pub scope: Id,\n+    pub scope: DefId,\n }\n \n impl Lower for data::FunctionData {\n     type Target = FunctionData;\n \n     fn lower(self, tcx: &TyCtxt) -> FunctionData {\n         FunctionData {\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             name: self.name,\n             qualname: self.qualname,\n-            declaration: self.declaration.map(Id::from_def_id),\n+            declaration: self.declaration,\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n         }\n     }\n }\n@@ -203,8 +181,8 @@ impl Lower for data::FunctionData {\n #[derive(Debug, RustcEncodable)]\n pub struct FunctionRefData {\n     pub span: SpanData,\n-    pub scope: Id,\n-    pub ref_id: Id,\n+    pub scope: DefId,\n+    pub ref_id: DefId,\n }\n \n impl Lower for data::FunctionRefData {\n@@ -213,39 +191,39 @@ impl Lower for data::FunctionRefData {\n     fn lower(self, tcx: &TyCtxt) -> FunctionRefData {\n         FunctionRefData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n-            ref_id: Id::from_def_id(self.ref_id),\n+            scope: make_def_id(self.scope, &tcx.map),\n+            ref_id: self.ref_id,\n         }\n     }\n }\n #[derive(Debug, RustcEncodable)]\n pub struct ImplData {\n-    pub id: Id,\n+    pub id: DefId,\n     pub span: SpanData,\n-    pub scope: Id,\n-    pub trait_ref: Option<Id>,\n-    pub self_ref: Option<Id>,\n+    pub scope: DefId,\n+    pub trait_ref: Option<DefId>,\n+    pub self_ref: Option<DefId>,\n }\n \n impl Lower for data::ImplData {\n     type Target = ImplData;\n \n     fn lower(self, tcx: &TyCtxt) -> ImplData {\n         ImplData {\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n-            trait_ref: self.trait_ref.map(Id::from_def_id),\n-            self_ref: self.self_ref.map(Id::from_def_id),\n+            scope: make_def_id(self.scope, &tcx.map),\n+            trait_ref: self.trait_ref,\n+            self_ref: self.self_ref,\n         }\n     }\n }\n \n #[derive(Debug, RustcEncodable)]\n pub struct InheritanceData {\n     pub span: SpanData,\n-    pub base_id: Id,\n-    pub deriv_id: Id\n+    pub base_id: DefId,\n+    pub deriv_id: DefId\n }\n \n impl Lower for data::InheritanceData {\n@@ -254,8 +232,8 @@ impl Lower for data::InheritanceData {\n     fn lower(self, tcx: &TyCtxt) -> InheritanceData {\n         InheritanceData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            base_id: Id::from_def_id(self.base_id),\n-            deriv_id: Id::from_node_id(self.deriv_id, &tcx.map)\n+            base_id: self.base_id,\n+            deriv_id: make_def_id(self.deriv_id, &tcx.map)\n         }\n     }\n }\n@@ -289,7 +267,7 @@ pub struct MacroUseData {\n     // Because macro expansion happens before ref-ids are determined,\n     // we use the callee span to reference the associated macro definition.\n     pub callee_span: SpanData,\n-    pub scope: Id,\n+    pub scope: DefId,\n     pub imported: bool,\n }\n \n@@ -302,7 +280,7 @@ impl Lower for data::MacroUseData {\n             name: self.name,\n             qualname: self.qualname,\n             callee_span: SpanData::from_span(self.callee_span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n             imported: self.imported,\n         }\n     }\n@@ -312,9 +290,9 @@ impl Lower for data::MacroUseData {\n #[derive(Debug, RustcEncodable)]\n pub struct MethodCallData {\n     pub span: SpanData,\n-    pub scope: Id,\n-    pub ref_id: Option<Id>,\n-    pub decl_id: Option<Id>,\n+    pub scope: DefId,\n+    pub ref_id: Option<DefId>,\n+    pub decl_id: Option<DefId>,\n }\n \n impl Lower for data::MethodCallData {\n@@ -323,20 +301,20 @@ impl Lower for data::MethodCallData {\n     fn lower(self, tcx: &TyCtxt) -> MethodCallData {\n         MethodCallData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n-            ref_id: self.ref_id.map(Id::from_def_id),\n-            decl_id: self.decl_id.map(Id::from_def_id),\n+            scope: make_def_id(self.scope, &tcx.map),\n+            ref_id: self.ref_id,\n+            decl_id: self.decl_id,\n         }\n     }\n }\n \n /// Data for method declarations (methods with a body are treated as functions).\n #[derive(Clone, Debug, RustcEncodable)]\n pub struct MethodData {\n-    pub id: Id,\n+    pub id: DefId,\n     pub qualname: String,\n     pub span: SpanData,\n-    pub scope: Id,\n+    pub scope: DefId,\n }\n \n impl Lower for data::MethodData {\n@@ -345,8 +323,8 @@ impl Lower for data::MethodData {\n     fn lower(self, tcx: &TyCtxt) -> MethodData {\n         MethodData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             qualname: self.qualname,\n         }\n     }\n@@ -355,11 +333,11 @@ impl Lower for data::MethodData {\n /// Data for modules.\n #[derive(Debug, RustcEncodable)]\n pub struct ModData {\n-    pub id: Id,\n+    pub id: DefId,\n     pub name: String,\n     pub qualname: String,\n     pub span: SpanData,\n-    pub scope: Id,\n+    pub scope: DefId,\n     pub filename: String,\n }\n \n@@ -368,11 +346,11 @@ impl Lower for data::ModData {\n \n     fn lower(self, tcx: &TyCtxt) -> ModData {\n         ModData {\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             name: self.name,\n             qualname: self.qualname,\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n             filename: self.filename,\n         }\n     }\n@@ -382,8 +360,8 @@ impl Lower for data::ModData {\n #[derive(Debug, RustcEncodable)]\n pub struct ModRefData {\n     pub span: SpanData,\n-    pub scope: Id,\n-    pub ref_id: Option<Id>,\n+    pub scope: DefId,\n+    pub ref_id: Option<DefId>,\n     pub qualname: String\n }\n \n@@ -393,8 +371,8 @@ impl Lower for data::ModRefData {\n     fn lower(self, tcx: &TyCtxt) -> ModRefData {\n         ModRefData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n-            ref_id: self.ref_id.map(Id::from_def_id),\n+            scope: make_def_id(self.scope, &tcx.map),\n+            ref_id: self.ref_id,\n             qualname: self.qualname,\n         }\n     }\n@@ -403,10 +381,10 @@ impl Lower for data::ModRefData {\n #[derive(Debug, RustcEncodable)]\n pub struct StructData {\n     pub span: SpanData,\n-    pub id: Id,\n-    pub ctor_id: Id,\n+    pub id: DefId,\n+    pub ctor_id: DefId,\n     pub qualname: String,\n-    pub scope: Id,\n+    pub scope: DefId,\n     pub value: String\n }\n \n@@ -416,10 +394,10 @@ impl Lower for data::StructData {\n     fn lower(self, tcx: &TyCtxt) -> StructData {\n         StructData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            id: Id::from_node_id(self.id, &tcx.map),\n-            ctor_id: Id::from_node_id(self.ctor_id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n+            ctor_id: make_def_id(self.ctor_id, &tcx.map),\n             qualname: self.qualname,\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n             value: self.value\n         }\n     }\n@@ -428,11 +406,11 @@ impl Lower for data::StructData {\n #[derive(Debug, RustcEncodable)]\n pub struct StructVariantData {\n     pub span: SpanData,\n-    pub id: Id,\n+    pub id: DefId,\n     pub qualname: String,\n     pub type_value: String,\n     pub value: String,\n-    pub scope: Id\n+    pub scope: DefId\n }\n \n impl Lower for data::StructVariantData {\n@@ -441,21 +419,21 @@ impl Lower for data::StructVariantData {\n     fn lower(self, tcx: &TyCtxt) -> StructVariantData {\n         StructVariantData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             qualname: self.qualname,\n             type_value: self.type_value,\n             value: self.value,\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n         }\n     }\n }\n \n #[derive(Debug, RustcEncodable)]\n pub struct TraitData {\n     pub span: SpanData,\n-    pub id: Id,\n+    pub id: DefId,\n     pub qualname: String,\n-    pub scope: Id,\n+    pub scope: DefId,\n     pub value: String\n }\n \n@@ -465,9 +443,9 @@ impl Lower for data::TraitData {\n     fn lower(self, tcx: &TyCtxt) -> TraitData {\n         TraitData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             qualname: self.qualname,\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n             value: self.value,\n         }\n     }\n@@ -476,12 +454,12 @@ impl Lower for data::TraitData {\n #[derive(Debug, RustcEncodable)]\n pub struct TupleVariantData {\n     pub span: SpanData,\n-    pub id: Id,\n+    pub id: DefId,\n     pub name: String,\n     pub qualname: String,\n     pub type_value: String,\n     pub value: String,\n-    pub scope: Id,\n+    pub scope: DefId,\n }\n \n impl Lower for data::TupleVariantData {\n@@ -490,20 +468,20 @@ impl Lower for data::TupleVariantData {\n     fn lower(self, tcx: &TyCtxt) -> TupleVariantData {\n         TupleVariantData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             name: self.name,\n             qualname: self.qualname,\n             type_value: self.type_value,\n             value: self.value,\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n         }\n     }\n }\n \n /// Data for a typedef.\n #[derive(Debug, RustcEncodable)]\n pub struct TypedefData {\n-    pub id: Id,\n+    pub id: DefId,\n     pub span: SpanData,\n     pub qualname: String,\n     pub value: String,\n@@ -514,7 +492,7 @@ impl Lower for data::TypedefData {\n \n     fn lower(self, tcx: &TyCtxt) -> TypedefData {\n         TypedefData {\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n             qualname: self.qualname,\n             value: self.value,\n@@ -526,8 +504,8 @@ impl Lower for data::TypedefData {\n #[derive(Clone, Debug, RustcEncodable)]\n pub struct TypeRefData {\n     pub span: SpanData,\n-    pub scope: Id,\n-    pub ref_id: Option<Id>,\n+    pub scope: DefId,\n+    pub ref_id: Option<DefId>,\n     pub qualname: String,\n }\n \n@@ -537,65 +515,65 @@ impl Lower for data::TypeRefData {\n     fn lower(self, tcx: &TyCtxt) -> TypeRefData {\n         TypeRefData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n-            ref_id: self.ref_id.map(Id::from_def_id),\n+            scope: make_def_id(self.scope, &tcx.map),\n+            ref_id: self.ref_id,\n             qualname: self.qualname,\n         }\n     }\n }\n \n #[derive(Debug, RustcEncodable)]\n pub struct UseData {\n-    pub id: Id,\n+    pub id: DefId,\n     pub span: SpanData,\n     pub name: String,\n-    pub mod_id: Option<Id>,\n-    pub scope: Id\n+    pub mod_id: Option<DefId>,\n+    pub scope: DefId\n }\n \n impl Lower for data::UseData {\n     type Target = UseData;\n \n     fn lower(self, tcx: &TyCtxt) -> UseData {\n         UseData {\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n             name: self.name,\n-            mod_id: self.mod_id.map(Id::from_def_id),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            mod_id: self.mod_id,\n+            scope: make_def_id(self.scope, &tcx.map),\n         }\n     }\n }\n \n #[derive(Debug, RustcEncodable)]\n pub struct UseGlobData {\n-    pub id: Id,\n+    pub id: DefId,\n     pub span: SpanData,\n     pub names: Vec<String>,\n-    pub scope: Id\n+    pub scope: DefId\n }\n \n impl Lower for data::UseGlobData {\n     type Target = UseGlobData;\n \n     fn lower(self, tcx: &TyCtxt) -> UseGlobData {\n         UseGlobData {\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n             names: self.names,\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n         }\n     }\n }\n \n /// Data for local and global variables (consts and statics).\n #[derive(Debug, RustcEncodable)]\n pub struct VariableData {\n-    pub id: Id,\n+    pub id: DefId,\n     pub name: String,\n     pub qualname: String,\n     pub span: SpanData,\n-    pub scope: Id,\n+    pub scope: DefId,\n     pub value: String,\n     pub type_value: String,\n }\n@@ -605,11 +583,11 @@ impl Lower for data::VariableData {\n \n     fn lower(self, tcx: &TyCtxt) -> VariableData {\n         VariableData {\n-            id: Id::from_node_id(self.id, &tcx.map),\n+            id: make_def_id(self.id, &tcx.map),\n             name: self.name,\n             qualname: self.qualname,\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n+            scope: make_def_id(self.scope, &tcx.map),\n             value: self.value,\n             type_value: self.type_value,\n         }\n@@ -622,8 +600,8 @@ impl Lower for data::VariableData {\n pub struct VariableRefData {\n     pub name: String,\n     pub span: SpanData,\n-    pub scope: Id,\n-    pub ref_id: Id,\n+    pub scope: DefId,\n+    pub ref_id: DefId,\n }\n \n impl Lower for data::VariableRefData {\n@@ -633,8 +611,8 @@ impl Lower for data::VariableRefData {\n         VariableRefData {\n             name: self.name,\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-            scope: Id::from_node_id(self.scope, &tcx.map),\n-            ref_id: Id::from_def_id(self.ref_id),\n+            scope: make_def_id(self.scope, &tcx.map),\n+            ref_id: self.ref_id,\n         }\n     }\n }"}]}