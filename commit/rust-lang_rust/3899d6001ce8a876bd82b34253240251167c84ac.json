{"sha": "3899d6001ce8a876bd82b34253240251167c84ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OTlkNjAwMWNlOGE4NzZiZDgyYjM0MjUzMjQwMjUxMTY3Yzg0YWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T17:28:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T17:28:34Z"}, "message": "Auto merge of #5878 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? @ghost\n\nchangelog: none", "tree": {"sha": "25a3b4d7a69c37c686ebaefc6b7b486faabca2ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25a3b4d7a69c37c686ebaefc6b7b486faabca2ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3899d6001ce8a876bd82b34253240251167c84ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3899d6001ce8a876bd82b34253240251167c84ac", "html_url": "https://github.com/rust-lang/rust/commit/3899d6001ce8a876bd82b34253240251167c84ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3899d6001ce8a876bd82b34253240251167c84ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d4c3379d355c436342113a302421faf3990fb29", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4c3379d355c436342113a302421faf3990fb29", "html_url": "https://github.com/rust-lang/rust/commit/2d4c3379d355c436342113a302421faf3990fb29"}, {"sha": "fd87cdb357b801b1fab465f0be595386a3f84134", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd87cdb357b801b1fab465f0be595386a3f84134", "html_url": "https://github.com/rust-lang/rust/commit/fd87cdb357b801b1fab465f0be595386a3f84134"}], "stats": {"total": 133, "additions": 52, "deletions": 81}, "files": [{"sha": "6ce36fd2360e1e9569cb748e566a3b38ce57ef4a", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 36, "deletions": 45, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=3899d6001ce8a876bd82b34253240251167c84ac", "patch": "@@ -2,6 +2,7 @@ use crate::utils::{implements_trait, is_entrypoint_fn, is_type_diagnostic_item,\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_ast::ast::{AttrKind, Attribute};\n+use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -249,62 +250,53 @@ fn lint_for_missing_headers<'tcx>(\n     }\n }\n \n-/// Cleanup documentation decoration (`///` and such).\n+/// Cleanup documentation decoration.\n ///\n /// We can't use `rustc_ast::attr::AttributeMethods::with_desugared_doc` or\n /// `rustc_ast::parse::lexer::comments::strip_doc_comment_decoration` because we\n /// need to keep track of\n /// the spans but this function is inspired from the later.\n #[allow(clippy::cast_possible_truncation)]\n #[must_use]\n-pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(usize, Span)>) {\n+pub fn strip_doc_comment_decoration(doc: &str, comment_kind: CommentKind, span: Span) -> (String, Vec<(usize, Span)>) {\n     // one-line comments lose their prefix\n-    const ONELINERS: &[&str] = &[\"///!\", \"///\", \"//!\", \"//\"];\n-    for prefix in ONELINERS {\n-        if comment.starts_with(*prefix) {\n-            let doc = &comment[prefix.len()..];\n-            let mut doc = doc.to_owned();\n-            doc.push('\\n');\n-            return (\n-                doc.to_owned(),\n-                vec![(doc.len(), span.with_lo(span.lo() + BytePos(prefix.len() as u32)))],\n-            );\n-        }\n+    if comment_kind == CommentKind::Line {\n+        let mut doc = doc.to_owned();\n+        doc.push('\\n');\n+        let len = doc.len();\n+        // +3 skips the opening delimiter\n+        return (doc, vec![(len, span.with_lo(span.lo() + BytePos(3)))]);\n     }\n \n-    if comment.starts_with(\"/*\") {\n-        let doc = &comment[3..comment.len() - 2];\n-        let mut sizes = vec![];\n-        let mut contains_initial_stars = false;\n-        for line in doc.lines() {\n-            let offset = line.as_ptr() as usize - comment.as_ptr() as usize;\n-            debug_assert_eq!(offset as u32 as usize, offset);\n-            contains_initial_stars |= line.trim_start().starts_with('*');\n-            // +1 for the newline\n-            sizes.push((line.len() + 1, span.with_lo(span.lo() + BytePos(offset as u32))));\n-        }\n-        if !contains_initial_stars {\n-            return (doc.to_string(), sizes);\n-        }\n-        // remove the initial '*'s if any\n-        let mut no_stars = String::with_capacity(doc.len());\n-        for line in doc.lines() {\n-            let mut chars = line.chars();\n-            while let Some(c) = chars.next() {\n-                if c.is_whitespace() {\n-                    no_stars.push(c);\n-                } else {\n-                    no_stars.push(if c == '*' { ' ' } else { c });\n-                    break;\n-                }\n+    let mut sizes = vec![];\n+    let mut contains_initial_stars = false;\n+    for line in doc.lines() {\n+        let offset = line.as_ptr() as usize - doc.as_ptr() as usize;\n+        debug_assert_eq!(offset as u32 as usize, offset);\n+        contains_initial_stars |= line.trim_start().starts_with('*');\n+        // +1 adds the newline, +3 skips the opening delimiter\n+        sizes.push((line.len() + 1, span.with_lo(span.lo() + BytePos(3 + offset as u32))));\n+    }\n+    if !contains_initial_stars {\n+        return (doc.to_string(), sizes);\n+    }\n+    // remove the initial '*'s if any\n+    let mut no_stars = String::with_capacity(doc.len());\n+    for line in doc.lines() {\n+        let mut chars = line.chars();\n+        while let Some(c) = chars.next() {\n+            if c.is_whitespace() {\n+                no_stars.push(c);\n+            } else {\n+                no_stars.push(if c == '*' { ' ' } else { c });\n+                break;\n             }\n-            no_stars.push_str(chars.as_str());\n-            no_stars.push('\\n');\n         }\n-        return (no_stars, sizes);\n+        no_stars.push_str(chars.as_str());\n+        no_stars.push('\\n');\n     }\n \n-    panic!(\"not a doc-comment: {}\", comment);\n+    (no_stars, sizes)\n }\n \n #[derive(Copy, Clone)]\n@@ -318,9 +310,8 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n     let mut spans = vec![];\n \n     for attr in attrs {\n-        if let AttrKind::DocComment(ref comment) = attr.kind {\n-            let comment = comment.to_string();\n-            let (comment, current_spans) = strip_doc_comment_decoration(&comment, attr.span);\n+        if let AttrKind::DocComment(comment_kind, comment) = attr.kind {\n+            let (comment, current_spans) = strip_doc_comment_decoration(&comment.as_str(), comment_kind, attr.span);\n             spans.extend_from_slice(&current_spans);\n             doc.push_str(&comment);\n         } else if attr.has_name(sym!(doc)) {"}, {"sha": "28b276967bc3f0160d0fbf2e20bc2670ab91c997", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=3899d6001ce8a876bd82b34253240251167c84ac", "patch": "@@ -239,7 +239,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 return;\n             }\n             if cx.access_levels.is_exported(item.hir_id)\n-                && !is_proc_macro(&item.attrs)\n+                && !is_proc_macro(cx.sess(), &item.attrs)\n                 && attr_by_name(&item.attrs, \"no_mangle\").is_none()\n             {\n                 check_must_use_candidate(\n@@ -262,7 +262,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n                 check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n             } else if cx.access_levels.is_exported(item.hir_id)\n-                && !is_proc_macro(&item.attrs)\n+                && !is_proc_macro(cx.sess(), &item.attrs)\n                 && trait_ref_of_method(cx, item.hir_id).is_none()\n             {\n                 check_must_use_candidate(\n@@ -294,7 +294,8 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 let body = cx.tcx.hir().body(eid);\n                 Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id);\n \n-                if attr.is_none() && cx.access_levels.is_exported(item.hir_id) && !is_proc_macro(&item.attrs) {\n+                if attr.is_none() && cx.access_levels.is_exported(item.hir_id) && !is_proc_macro(cx.sess(), &item.attrs)\n+                {\n                     check_must_use_candidate(\n                         cx,\n                         &sig.decl,"}, {"sha": "4e49bdbdd21bd02a8b04c50f3bfd1ed991eced46", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=3899d6001ce8a876bd82b34253240251167c84ac", "patch": "@@ -102,7 +102,7 @@ fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants\n                 \"this seems like a manual implementation of the non-exhaustive pattern\",\n                 |diag| {\n                     if_chain! {\n-                        if !attr::contains_name(&item.attrs, sym!(non_exhaustive));\n+                        if !item.attrs.iter().any(|attr| attr.has_name(sym!(non_exhaustive)));\n                         let header_span = cx.sess.source_map().span_until_char(item.span, '{');\n                         if let Some(snippet) = snippet_opt(cx, header_span);\n                         then {\n@@ -154,7 +154,7 @@ fn check_manual_non_exhaustive_struct(cx: &EarlyContext<'_>, item: &Item, data:\n                 \"this seems like a manual implementation of the non-exhaustive pattern\",\n                 |diag| {\n                     if_chain! {\n-                        if !attr::contains_name(&item.attrs, sym!(non_exhaustive));\n+                        if !item.attrs.iter().any(|attr| attr.has_name(sym!(non_exhaustive)));\n                         let header_span = find_header_span(cx, item, data);\n                         if let Some(snippet) = snippet_opt(cx, header_span);\n                         then {"}, {"sha": "603440c0f83763963e1bde30b9245b7a669c70f0", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=3899d6001ce8a876bd82b34253240251167c84ac", "patch": "@@ -2,7 +2,6 @@ use crate::utils::{span_lint, span_lint_and_then};\n use rustc_ast::ast::{\n     Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, MacCall, Pat, PatKind,\n };\n-use rustc_ast::attr;\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -385,7 +384,7 @@ impl EarlyLintPass for NonExpressiveNames {\n }\n \n fn do_check(lint: &mut NonExpressiveNames, cx: &EarlyContext<'_>, attrs: &[Attribute], decl: &FnDecl, blk: &Block) {\n-    if !attr::contains_name(attrs, sym!(test)) {\n+    if !attrs.iter().any(|attr| attr.has_name(sym!(test))) {\n         let mut visitor = SimilarNamesLocalVisitor {\n             names: Vec::new(),\n             cx,"}, {"sha": "74ccd9235de85d847daf593d4cc3a0018db586b1", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=3899d6001ce8a876bd82b34253240251167c84ac", "patch": "@@ -60,13 +60,14 @@ declare_lint_pass!(TabsInDocComments => [TABS_IN_DOC_COMMENTS]);\n \n impl TabsInDocComments {\n     fn warn_if_tabs_in_doc(cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n-        if let ast::AttrKind::DocComment(comment) = attr.kind {\n+        if let ast::AttrKind::DocComment(_, comment) = attr.kind {\n             let comment = comment.as_str();\n \n             for (lo, hi) in get_chunks_of_tabs(&comment) {\n+                // +3 skips the opening delimiter\n                 let new_span = Span::new(\n-                    attr.span.lo() + BytePos(lo),\n-                    attr.span.lo() + BytePos(hi),\n+                    attr.span.lo() + BytePos(3 + lo),\n+                    attr.span.lo() + BytePos(3 + hi),\n                     attr.span.ctxt(),\n                 );\n                 span_lint_and_sugg("}, {"sha": "ad02bc5fd8e7dba9d784c048e4edea729cc59cbb", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=3899d6001ce8a876bd82b34253240251167c84ac", "patch": "@@ -506,7 +506,7 @@ pub fn eq_attr(l: &Attribute, r: &Attribute) -> bool {\n     use AttrKind::*;\n     l.style == r.style\n         && match (&l.kind, &r.kind) {\n-            (DocComment(l), DocComment(r)) => l == r,\n+            (DocComment(l1, l2), DocComment(r1, r2)) => l1 == r1 && l2 == r2,\n             (Normal(l), Normal(r)) => eq_path(&l.path, &r.path) && eq_mac_args(&l.args, &r.args),\n             _ => false,\n         }"}, {"sha": "407527251da225d4d2b454c8f5eb77f5a84b7812", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=3899d6001ce8a876bd82b34253240251167c84ac", "patch": "@@ -1,5 +1,4 @@\n use rustc_ast::ast;\n-use rustc_ast::expand::is_proc_macro_attr;\n use rustc_errors::Applicability;\n use rustc_session::Session;\n use std::str::FromStr;\n@@ -126,6 +125,6 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n \n /// Return true if the attributes contain any of `proc_macro`,\n /// `proc_macro_derive` or `proc_macro_attribute`, false otherwise\n-pub fn is_proc_macro(attrs: &[ast::Attribute]) -> bool {\n-    attrs.iter().any(is_proc_macro_attr)\n+pub fn is_proc_macro(sess: &Session, attrs: &[ast::Attribute]) -> bool {\n+    attrs.iter().any(|attr| sess.is_proc_macro_attr(attr))\n }"}, {"sha": "9f967d59c8bedebce54caa718ef96cc0d9b1b9e4", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3899d6001ce8a876bd82b34253240251167c84ac/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3899d6001ce8a876bd82b34253240251167c84ac", "patch": "@@ -931,7 +931,7 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n /// Checks for the `#[automatically_derived]` attribute all `#[derive]`d\n /// implementations have.\n pub fn is_automatically_derived(attrs: &[ast::Attribute]) -> bool {\n-    attr::contains_name(attrs, sym!(automatically_derived))\n+    attrs.iter().any(|attr| attr.has_name(sym!(automatically_derived)))\n }\n \n /// Remove blocks around an expression."}, {"sha": "2b3f9be2dfb9b030da728450f37fc3fac103268d", "filename": "tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3899d6001ce8a876bd82b34253240251167c84ac/tests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3899d6001ce8a876bd82b34253240251167c84ac/tests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.stderr?ref=3899d6001ce8a876bd82b34253240251167c84ac", "patch": "@@ -1,23 +1,3 @@\n-error: this operation will panic at runtime\n-  --> $DIR/indexing_slicing_index.rs:11:5\n-   |\n-LL |     x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-   |     ^^^^ index out of bounds: the len is 4 but the index is 4\n-   |\n-   = note: `#[deny(unconditional_panic)]` on by default\n-\n-error: this operation will panic at runtime\n-  --> $DIR/indexing_slicing_index.rs:12:5\n-   |\n-LL |     x[1 << 3]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-   |     ^^^^^^^^^ index out of bounds: the len is 4 but the index is 8\n-\n-error: this operation will panic at runtime\n-  --> $DIR/indexing_slicing_index.rs:27:5\n-   |\n-LL |     x[N]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-   |     ^^^^ index out of bounds: the len is 4 but the index is 15\n-\n error: indexing may panic.\n   --> $DIR/indexing_slicing_index.rs:10:5\n    |\n@@ -75,5 +55,5 @@ LL |     v[M];\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 7 previous errors\n "}]}