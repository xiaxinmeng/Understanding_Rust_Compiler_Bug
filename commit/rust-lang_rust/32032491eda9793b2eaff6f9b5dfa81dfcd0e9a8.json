{"sha": "32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMDMyNDkxZWRhOTc5M2IyZWFmZjZmOWI1ZGZhODFkZmNkMGU5YTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-23T23:42:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-23T23:42:05Z"}, "message": "core: Un-legacy-export stackwalk, cmath", "tree": {"sha": "42516a077ae345892469c5f3e12cd8946df1e5b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42516a077ae345892469c5f3e12cd8946df1e5b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8", "html_url": "https://github.com/rust-lang/rust/commit/32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb34138cd02563892fb317a7ed4a9537f18e4371", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb34138cd02563892fb317a7ed4a9537f18e4371", "html_url": "https://github.com/rust-lang/rust/commit/cb34138cd02563892fb317a7ed4a9537f18e4371"}], "stats": {"total": 68, "additions": 28, "deletions": 40}, "files": [{"sha": "11f26c24b94f470ad572fb7b5c888923d208dddf", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8", "patch": "@@ -3,16 +3,10 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-export c_float;\n-export c_double;\n-\n // uncomment once #1433 is fixed\n // FIXME (#1433): export c_float_math_consts;\n // FIXME (#1433): export c_double_math_consts;\n \n-export c_float_targ_consts;\n-export c_double_targ_consts;\n-\n use libc::c_int;\n use libc::c_float;\n use libc::c_double;\n@@ -22,8 +16,7 @@ use libc::c_double;\n \n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n-extern mod c_double {\n-    #[legacy_exports];\n+pub extern mod c_double {\n \n     // Alpabetically sorted by link_name\n \n@@ -98,8 +91,7 @@ extern mod c_double {\n \n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n-extern mod c_float {\n-    #[legacy_exports];\n+pub extern mod c_float {\n \n     // Alpabetically sorted by link_name\n \n@@ -167,36 +159,34 @@ extern mod c_float {\n \n // FIXME obtain machine float/math constants automatically (Issue #1986)\n \n-mod c_float_targ_consts {\n-    #[legacy_exports];\n-    const radix: uint = 2u;\n-    const mantissa_digits: uint = 24u;\n-    const digits: uint = 6u;\n-    const min_exp: uint = -125u;\n-    const max_exp: uint = 128u;\n-    const min_10_exp: int = -37;\n-    const max_10_exp: int = 38;\n+pub mod c_float_targ_consts {\n+    pub const radix: uint = 2u;\n+    pub const mantissa_digits: uint = 24u;\n+    pub const digits: uint = 6u;\n+    pub const min_exp: uint = -125u;\n+    pub const max_exp: uint = 128u;\n+    pub const min_10_exp: int = -37;\n+    pub const max_10_exp: int = 38;\n     // FIXME (#1433): this is wrong, replace with hexadecimal (%a) constants\n     // below.\n-    const min_value: f32 = 1.175494e-38_f32;\n-    const max_value: f32 = 3.402823e+38_f32;\n-    const epsilon: f32 = 0.000000_f32;\n+    pub const min_value: f32 = 1.175494e-38_f32;\n+    pub const max_value: f32 = 3.402823e+38_f32;\n+    pub const epsilon: f32 = 0.000000_f32;\n }\n \n-mod c_double_targ_consts {\n-    #[legacy_exports];\n-    const radix: uint = 2u;\n-    const mantissa_digits: uint = 53u;\n-    const digits: uint = 15u;\n-    const min_exp: uint = -1021u;\n-    const max_exp: uint = 1024u;\n-    const min_10_exp: int = -307;\n-    const max_10_exp: int = 308;\n+pub mod c_double_targ_consts {\n+    pub const radix: uint = 2u;\n+    pub const mantissa_digits: uint = 53u;\n+    pub const digits: uint = 15u;\n+    pub const min_exp: uint = -1021u;\n+    pub const max_exp: uint = 1024u;\n+    pub const min_10_exp: int = -307;\n+    pub const max_10_exp: int = 308;\n     // FIXME (#1433): this is wrong, replace with hexadecimal (%a) constants\n     // below.\n-    const min_value: f64 = 2.225074e-308_f64;\n-    const max_value: f64 = 1.797693e+308_f64;\n-    const epsilon: f64 = 2.220446e-16_f64;\n+    pub const min_value: f64 = 2.225074e-308_f64;\n+    pub const max_value: f64 = 1.797693e+308_f64;\n+    pub const epsilon: f64 = 2.220446e-16_f64;\n }\n \n /*"}, {"sha": "9568294c7babb1cdc7e7d40758c387933c73670a", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8", "patch": "@@ -340,9 +340,7 @@ mod rt;\n mod unicode;\n #[legacy_exports]\n mod private;\n-#[legacy_exports]\n mod cmath;\n-#[legacy_exports]\n mod stackwalk;\n \n // Local Variables:"}, {"sha": "4cc91b8b425fa125b5dd526c691962c1994d9ea7", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=32032491eda9793b2eaff6f9b5dfa81dfcd0e9a8", "patch": "@@ -8,19 +8,19 @@ use cast::reinterpret_cast;\n use ptr::offset;\n use sys::size_of;\n \n-type Word = uint;\n+pub type Word = uint;\n \n-struct Frame {\n+pub struct Frame {\n     fp: *Word\n }\n \n-fn Frame(fp: *Word) -> Frame {\n+pub fn Frame(fp: *Word) -> Frame {\n     Frame {\n         fp: fp\n     }\n }\n \n-fn walk_stack(visit: fn(Frame) -> bool) {\n+pub fn walk_stack(visit: fn(Frame) -> bool) {\n \n     debug!(\"beginning stack walk\");\n "}]}