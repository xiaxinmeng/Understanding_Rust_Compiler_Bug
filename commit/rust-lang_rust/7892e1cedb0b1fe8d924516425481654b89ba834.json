{"sha": "7892e1cedb0b1fe8d924516425481654b89ba834", "node_id": "C_kwDOAAsO6NoAKDc4OTJlMWNlZGIwYjFmZThkOTI0NTE2NDI1NDgxNjU0Yjg5YmE4MzQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-04T19:28:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-04T19:59:24Z"}, "message": "Move statement_index increment out of statement() function\n\nThat function is called by const_prop, where updating the index like that is totally meaningless.", "tree": {"sha": "5c9419adb3acea9a67d8efc9112397696ad7c6bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c9419adb3acea9a67d8efc9112397696ad7c6bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7892e1cedb0b1fe8d924516425481654b89ba834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7892e1cedb0b1fe8d924516425481654b89ba834", "html_url": "https://github.com/rust-lang/rust/commit/7892e1cedb0b1fe8d924516425481654b89ba834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7892e1cedb0b1fe8d924516425481654b89ba834/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e00fb0d8911dfdf9cb9583adcc05d55bef4d34f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e00fb0d8911dfdf9cb9583adcc05d55bef4d34f", "html_url": "https://github.com/rust-lang/rust/commit/9e00fb0d8911dfdf9cb9583adcc05d55bef4d34f"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "c511581371b878cbf924792e9e7e20a652fca02a", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7892e1cedb0b1fe8d924516425481654b89ba834/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7892e1cedb0b1fe8d924516425481654b89ba834/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=7892e1cedb0b1fe8d924516425481654b89ba834", "patch": "@@ -55,33 +55,33 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         let basic_block = &self.body().basic_blocks()[loc.block];\n \n-        let old_frames = self.frame_idx();\n \n         if let Some(stmt) = basic_block.statements.get(loc.statement_index) {\n-            assert_eq!(old_frames, self.frame_idx());\n+            let old_frames = self.frame_idx();\n             self.statement(stmt)?;\n+            // Make sure we are not updating `statement_index` of the wrong frame.\n+            assert_eq!(old_frames, self.frame_idx());\n+            // Advance the program counter.\n+            self.frame_mut().loc.as_mut().unwrap().statement_index += 1;\n             return Ok(true);\n         }\n \n         M::before_terminator(self)?;\n \n         let terminator = basic_block.terminator();\n-        assert_eq!(old_frames, self.frame_idx());\n         self.terminator(terminator)?;\n         Ok(true)\n     }\n \n     /// Runs the interpretation logic for the given `mir::Statement` at the current frame and\n-    /// statement counter. This also moves the statement counter forward.\n+    /// statement counter.\n+    ///\n+    /// This does NOT move the statement counter forward, the caller has to do that!\n     pub fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> InterpResult<'tcx> {\n         info!(\"{:?}\", stmt);\n \n         use rustc_middle::mir::StatementKind::*;\n \n-        // Some statements (e.g., box) push new stack frames.\n-        // We have to record the stack frame number *before* executing the statement.\n-        let frame_idx = self.frame_idx();\n-\n         match &stmt.kind {\n             Assign(box (place, rvalue)) => self.eval_rvalue_into_place(rvalue, *place)?,\n \n@@ -144,7 +144,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Nop => {}\n         }\n \n-        self.stack_mut()[frame_idx].loc.as_mut().unwrap().statement_index += 1;\n         Ok(())\n     }\n \n@@ -300,6 +299,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n+    /// Evaluate the given terminator. Will also adjust the stack frame and statement position accordingly.\n     fn terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> InterpResult<'tcx> {\n         info!(\"{:?}\", terminator.kind);\n "}]}