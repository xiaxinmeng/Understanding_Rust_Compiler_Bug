{"sha": "5b0155515505f0898d21d2dc49dd30e32a916264", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMDE1NTUxNTUwNWYwODk4ZDIxZDJkYzQ5ZGQzMGUzMmE5MTYyNjQ=", "commit": {"author": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2013-07-27T17:46:58Z"}, "committer": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2013-08-02T22:46:11Z"}, "message": "Sha2: Rearrage traits / impls / structs.\n\nThe code was arranged so that the core Sha2 code came first, and then\nall of the various implementation of Digest followed along later. The\nproblem is that the Sha512 compression function code is far away from\nthe Sha512 Digest implementation, so, if you are trying to read over\nthe code, you need to scroll all around the file for no good reason. The\ncode was rearranged so that all of the Sha512 code is in one place and\nall of the Sha256 code is in another and so that all impls for a struct\nare near the definition of that struct.", "tree": {"sha": "8207f0256410ab5b981ea5df15b706c82ce23f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8207f0256410ab5b981ea5df15b706c82ce23f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0155515505f0898d21d2dc49dd30e32a916264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0155515505f0898d21d2dc49dd30e32a916264", "html_url": "https://github.com/rust-lang/rust/commit/5b0155515505f0898d21d2dc49dd30e32a916264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0155515505f0898d21d2dc49dd30e32a916264/comments", "author": null, "committer": null, "parents": [{"sha": "a1bbd18dc1f5bf94b5cd4a0ff65c322c57467ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1bbd18dc1f5bf94b5cd4a0ff65c322c57467ebd", "html_url": "https://github.com/rust-lang/rust/commit/a1bbd18dc1f5bf94b5cd4a0ff65c322c57467ebd"}], "stats": {"total": 505, "additions": 257, "deletions": 248}, "files": [{"sha": "14618b157c4558653ba48615145d07bdfba065da", "filename": "src/libextra/crypto/sha2.rs", "status": "modified", "additions": 257, "deletions": 248, "changes": 505, "blob_url": "https://github.com/rust-lang/rust/blob/5b0155515505f0898d21d2dc49dd30e32a916264/src%2Flibextra%2Fcrypto%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0155515505f0898d21d2dc49dd30e32a916264/src%2Flibextra%2Fcrypto%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha2.rs?ref=5b0155515505f0898d21d2dc49dd30e32a916264", "patch": "@@ -10,6 +10,7 @@\n \n use digest::Digest;\n \n+\n // BitCounter is a specialized structure intended simply for counting the\n // number of bits that have been processed by the SHA-2 512 family of functions.\n // It does very little overflow checking since such checking is not necessary\n@@ -43,6 +44,7 @@ impl BitCounter {\n     }\n }\n \n+\n // A structure that represents that state of a digest computation\n // for the SHA-2 512 family of digest functions\n struct Engine512 {\n@@ -333,6 +335,231 @@ static K64: [u64, ..80] = [\n     0x4cc5d4becb3e42b6, 0x597f299cfc657e2a, 0x5fcb6fab3ad6faec, 0x6c44198c4a475817\n ];\n \n+\n+struct Sha512 {\n+    priv engine: Engine512\n+}\n+\n+impl Sha512 {\n+    /**\n+     * Construct an new instance of a SHA-512 digest.\n+     */\n+    pub fn new() -> Sha512 {\n+        Sha512 {\n+            engine: Engine512 {\n+                input_buffer: [0u8, ..8],\n+                input_buffer_idx: 0,\n+                bit_counter: BitCounter { high_bit_count: 0, low_byte_count: 0 },\n+                H0: 0x6a09e667f3bcc908u64,\n+                H1: 0xbb67ae8584caa73bu64,\n+                H2: 0x3c6ef372fe94f82bu64,\n+                H3: 0xa54ff53a5f1d36f1u64,\n+                H4: 0x510e527fade682d1u64,\n+                H5: 0x9b05688c2b3e6c1fu64,\n+                H6: 0x1f83d9abfb41bd6bu64,\n+                H7: 0x5be0cd19137e2179u64,\n+                W: [0u64, ..80],\n+                W_idx: 0,\n+                finished: false,\n+            }\n+        }\n+    }\n+}\n+\n+impl Digest for Sha512 {\n+    fn input(&mut self, d: &[u8]) {\n+        self.engine.input_vec(d);\n+    }\n+\n+    fn result(&mut self, out: &mut [u8]) {\n+        self.engine.result_512(out)\n+    }\n+\n+    fn reset(&mut self) {\n+        self.engine.reset();\n+\n+        self.engine.H0 = 0x6a09e667f3bcc908u64;\n+        self.engine.H1 = 0xbb67ae8584caa73bu64;\n+        self.engine.H2 = 0x3c6ef372fe94f82bu64;\n+        self.engine.H3 = 0xa54ff53a5f1d36f1u64;\n+        self.engine.H4 = 0x510e527fade682d1u64;\n+        self.engine.H5 = 0x9b05688c2b3e6c1fu64;\n+        self.engine.H6 = 0x1f83d9abfb41bd6bu64;\n+        self.engine.H7 = 0x5be0cd19137e2179u64;\n+    }\n+\n+    fn output_bits(&self) -> uint { 512 }\n+}\n+\n+\n+struct Sha384 {\n+    priv engine: Engine512\n+}\n+\n+impl Sha384 {\n+    /**\n+     * Construct an new instance of a SHA-384 digest.\n+     */\n+    pub fn new() -> Sha384 {\n+        Sha384 {\n+            engine: Engine512 {\n+                input_buffer: [0u8, ..8],\n+                input_buffer_idx: 0,\n+                bit_counter: BitCounter { high_bit_count: 0, low_byte_count: 0 },\n+                H0: 0xcbbb9d5dc1059ed8u64,\n+                H1: 0x629a292a367cd507u64,\n+                H2: 0x9159015a3070dd17u64,\n+                H3: 0x152fecd8f70e5939u64,\n+                H4: 0x67332667ffc00b31u64,\n+                H5: 0x8eb44a8768581511u64,\n+                H6: 0xdb0c2e0d64f98fa7u64,\n+                H7: 0x47b5481dbefa4fa4u64,\n+                W: [0u64, ..80],\n+                W_idx: 0,\n+                finished: false,\n+            }\n+        }\n+    }\n+}\n+\n+impl Digest for Sha384 {\n+    fn input(&mut self, d: &[u8]) {\n+        self.engine.input_vec(d);\n+    }\n+\n+    fn result(&mut self, out: &mut [u8]) {\n+        self.engine.result_384(out)\n+    }\n+\n+    fn reset(&mut self) {\n+        self.engine.reset();\n+\n+        self.engine.H0 = 0xcbbb9d5dc1059ed8u64;\n+        self.engine.H1 = 0x629a292a367cd507u64;\n+        self.engine.H2 = 0x9159015a3070dd17u64;\n+        self.engine.H3 = 0x152fecd8f70e5939u64;\n+        self.engine.H4 = 0x67332667ffc00b31u64;\n+        self.engine.H5 = 0x8eb44a8768581511u64;\n+        self.engine.H6 = 0xdb0c2e0d64f98fa7u64;\n+        self.engine.H7 = 0x47b5481dbefa4fa4u64;\n+    }\n+\n+    fn output_bits(&self) -> uint { 384 }\n+}\n+\n+\n+struct Sha512Trunc256 {\n+    priv engine: Engine512\n+}\n+\n+impl Sha512Trunc256 {\n+    /**\n+     * Construct an new instance of a SHA-512/256 digest.\n+     */\n+    pub fn new() -> Sha512Trunc256 {\n+        Sha512Trunc256 {\n+            engine: Engine512 {\n+                input_buffer: [0u8, ..8],\n+                input_buffer_idx: 0,\n+                bit_counter: BitCounter { high_bit_count: 0, low_byte_count: 0 },\n+                H0: 0x22312194fc2bf72cu64,\n+                H1: 0x9f555fa3c84c64c2u64,\n+                H2: 0x2393b86b6f53b151u64,\n+                H3: 0x963877195940eabdu64,\n+                H4: 0x96283ee2a88effe3u64,\n+                H5: 0xbe5e1e2553863992u64,\n+                H6: 0x2b0199fc2c85b8aau64,\n+                H7: 0x0eb72ddc81c52ca2u64,\n+                W: [0u64, ..80],\n+                W_idx: 0,\n+                finished: false,\n+            }\n+        }\n+    }\n+}\n+\n+impl Digest for Sha512Trunc256 {\n+    fn input(&mut self, d: &[u8]) {\n+        self.engine.input_vec(d);\n+    }\n+\n+    fn result(&mut self, out: &mut [u8]) {\n+        self.engine.result_256(out)\n+    }\n+\n+    fn reset(&mut self) {\n+        self.engine.reset();\n+\n+        self.engine.H0 = 0x22312194fc2bf72cu64;\n+        self.engine.H1 = 0x9f555fa3c84c64c2u64;\n+        self.engine.H2 = 0x2393b86b6f53b151u64;\n+        self.engine.H3 = 0x963877195940eabdu64;\n+        self.engine.H4 = 0x96283ee2a88effe3u64;\n+        self.engine.H5 = 0xbe5e1e2553863992u64;\n+        self.engine.H6 = 0x2b0199fc2c85b8aau64;\n+        self.engine.H7 = 0x0eb72ddc81c52ca2u64;\n+    }\n+\n+    fn output_bits(&self) -> uint { 256 }\n+}\n+\n+\n+struct Sha512Trunc224 {\n+    priv engine: Engine512\n+}\n+\n+impl Sha512Trunc224 {\n+    /**\n+     * Construct an new instance of a SHA-512/224 digest.\n+     */\n+    pub fn new() -> Sha512Trunc224 {\n+        Sha512Trunc224 {\n+            engine: Engine512 {\n+                input_buffer: [0u8, ..8],\n+                input_buffer_idx: 0,\n+                bit_counter: BitCounter { high_bit_count: 0, low_byte_count: 0 },\n+                H0: 0x8c3d37c819544da2u64,\n+                H1: 0x73e1996689dcd4d6u64,\n+                H2: 0x1dfab7ae32ff9c82u64,\n+                H3: 0x679dd514582f9fcfu64,\n+                H4: 0x0f6d2b697bd44da8u64,\n+                H5: 0x77e36f7304c48942u64,\n+                H6: 0x3f9d85a86a1d36c8u64,\n+                H7: 0x1112e6ad91d692a1u64,\n+                W: [0u64, ..80],\n+                W_idx: 0,\n+                finished: false,\n+            }\n+        }\n+    }\n+}\n+\n+impl Digest for Sha512Trunc224 {\n+    fn input(&mut self, d: &[u8]) {\n+        self.engine.input_vec(d);\n+    }\n+\n+    fn result(&mut self, out: &mut [u8]) {\n+        self.engine.result_224(out)\n+    }\n+\n+    fn reset(&mut self) {\n+        self.engine.reset();\n+\n+        self.engine.H0 = 0x8c3d37c819544da2u64;\n+        self.engine.H1 = 0x73e1996689dcd4d6u64;\n+        self.engine.H2 = 0x1dfab7ae32ff9c82u64;\n+        self.engine.H3 = 0x679dd514582f9fcfu64;\n+        self.engine.H4 = 0x0f6d2b697bd44da8u64;\n+        self.engine.H5 = 0x77e36f7304c48942u64;\n+        self.engine.H6 = 0x3f9d85a86a1d36c8u64;\n+        self.engine.H7 = 0x1112e6ad91d692a1u64;\n+    }\n+\n+    fn output_bits(&self) -> uint { 224 }\n+}\n+\n+\n // A structure that represents that state of a digest computation\n // for the SHA-2 256 family of digest functions\n struct Engine256 {\n@@ -593,134 +820,11 @@ static K32: [u32, ..64] = [\n     0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n ];\n \n-struct Sha512 {\n-    priv engine: Engine512\n-}\n-\n-struct Sha384 {\n-    priv engine: Engine512\n-}\n-\n-struct Sha512Trunc256 {\n-    priv engine: Engine512\n-}\n-\n-struct Sha512Trunc224 {\n-    priv engine: Engine512\n-}\n \n struct Sha256 {\n     priv engine: Engine256\n }\n \n-struct Sha224 {\n-    priv engine: Engine256\n-}\n-\n-impl Sha512 {\n-    /**\n-     * Construct an new instance of a SHA-512 digest.\n-     */\n-    pub fn new() -> Sha512 {\n-        Sha512 {\n-            engine: Engine512 {\n-                input_buffer: [0u8, ..8],\n-                input_buffer_idx: 0,\n-                bit_counter: BitCounter { high_bit_count: 0, low_byte_count: 0 },\n-                H0: 0x6a09e667f3bcc908u64,\n-                H1: 0xbb67ae8584caa73bu64,\n-                H2: 0x3c6ef372fe94f82bu64,\n-                H3: 0xa54ff53a5f1d36f1u64,\n-                H4: 0x510e527fade682d1u64,\n-                H5: 0x9b05688c2b3e6c1fu64,\n-                H6: 0x1f83d9abfb41bd6bu64,\n-                H7: 0x5be0cd19137e2179u64,\n-                W: [0u64, ..80],\n-                W_idx: 0,\n-                finished: false,\n-            }\n-        }\n-    }\n-}\n-\n-impl Sha384 {\n-    /**\n-     * Construct an new instance of a SHA-384 digest.\n-     */\n-    pub fn new() -> Sha384 {\n-        Sha384 {\n-            engine: Engine512 {\n-                input_buffer: [0u8, ..8],\n-                input_buffer_idx: 0,\n-                bit_counter: BitCounter { high_bit_count: 0, low_byte_count: 0 },\n-                H0: 0xcbbb9d5dc1059ed8u64,\n-                H1: 0x629a292a367cd507u64,\n-                H2: 0x9159015a3070dd17u64,\n-                H3: 0x152fecd8f70e5939u64,\n-                H4: 0x67332667ffc00b31u64,\n-                H5: 0x8eb44a8768581511u64,\n-                H6: 0xdb0c2e0d64f98fa7u64,\n-                H7: 0x47b5481dbefa4fa4u64,\n-                W: [0u64, ..80],\n-                W_idx: 0,\n-                finished: false,\n-            }\n-        }\n-    }\n-}\n-\n-impl Sha512Trunc256 {\n-    /**\n-     * Construct an new instance of a SHA-512/256 digest.\n-     */\n-    pub fn new() -> Sha512Trunc256 {\n-        Sha512Trunc256 {\n-            engine: Engine512 {\n-                input_buffer: [0u8, ..8],\n-                input_buffer_idx: 0,\n-                bit_counter: BitCounter { high_bit_count: 0, low_byte_count: 0 },\n-                H0: 0x22312194fc2bf72cu64,\n-                H1: 0x9f555fa3c84c64c2u64,\n-                H2: 0x2393b86b6f53b151u64,\n-                H3: 0x963877195940eabdu64,\n-                H4: 0x96283ee2a88effe3u64,\n-                H5: 0xbe5e1e2553863992u64,\n-                H6: 0x2b0199fc2c85b8aau64,\n-                H7: 0x0eb72ddc81c52ca2u64,\n-                W: [0u64, ..80],\n-                W_idx: 0,\n-                finished: false,\n-            }\n-        }\n-    }\n-}\n-\n-impl Sha512Trunc224 {\n-    /**\n-     * Construct an new instance of a SHA-512/224 digest.\n-     */\n-    pub fn new() -> Sha512Trunc224 {\n-        Sha512Trunc224 {\n-            engine: Engine512 {\n-                input_buffer: [0u8, ..8],\n-                input_buffer_idx: 0,\n-                bit_counter: BitCounter { high_bit_count: 0, low_byte_count: 0 },\n-                H0: 0x8c3d37c819544da2u64,\n-                H1: 0x73e1996689dcd4d6u64,\n-                H2: 0x1dfab7ae32ff9c82u64,\n-                H3: 0x679dd514582f9fcfu64,\n-                H4: 0x0f6d2b697bd44da8u64,\n-                H5: 0x77e36f7304c48942u64,\n-                H6: 0x3f9d85a86a1d36c8u64,\n-                H7: 0x1112e6ad91d692a1u64,\n-                W: [0u64, ..80],\n-                W_idx: 0,\n-                finished: false,\n-            }\n-        }\n-    }\n-}\n-\n impl Sha256 {\n     /**\n      * Construct an new instance of a SHA-256 digest.\n@@ -747,6 +851,36 @@ impl Sha256 {\n     }\n }\n \n+impl Digest for Sha256 {\n+    fn input(&mut self, d: &[u8]) {\n+        self.engine.input_vec(d);\n+    }\n+\n+    fn result(&mut self, out: &mut [u8]) {\n+        self.engine.result_256(out)\n+    }\n+\n+    fn reset(&mut self) {\n+        self.engine.reset();\n+\n+        self.engine.H0 = 0x6a09e667u32;\n+        self.engine.H1 = 0xbb67ae85u32;\n+        self.engine.H2 = 0x3c6ef372u32;\n+        self.engine.H3 = 0xa54ff53au32;\n+        self.engine.H4 = 0x510e527fu32;\n+        self.engine.H5 = 0x9b05688cu32;\n+        self.engine.H6 = 0x1f83d9abu32;\n+        self.engine.H7 = 0x5be0cd19u32;\n+    }\n+\n+    fn output_bits(&self) -> uint { 256 }\n+}\n+\n+\n+struct Sha224 {\n+    priv engine: Engine256\n+}\n+\n impl Sha224 {\n     /**\n      * Construct an new instance of a SHA-224 digest.\n@@ -773,131 +907,6 @@ impl Sha224 {\n     }\n }\n \n-impl Digest for Sha512 {\n-    fn input(&mut self, d: &[u8]) {\n-        self.engine.input_vec(d);\n-    }\n-\n-    fn result(&mut self, out: &mut [u8]) {\n-        self.engine.result_512(out)\n-    }\n-\n-    fn reset(&mut self) {\n-        self.engine.reset();\n-\n-        self.engine.H0 = 0x6a09e667f3bcc908u64;\n-        self.engine.H1 = 0xbb67ae8584caa73bu64;\n-        self.engine.H2 = 0x3c6ef372fe94f82bu64;\n-        self.engine.H3 = 0xa54ff53a5f1d36f1u64;\n-        self.engine.H4 = 0x510e527fade682d1u64;\n-        self.engine.H5 = 0x9b05688c2b3e6c1fu64;\n-        self.engine.H6 = 0x1f83d9abfb41bd6bu64;\n-        self.engine.H7 = 0x5be0cd19137e2179u64;\n-    }\n-\n-    fn output_bits(&self) -> uint { 512 }\n-}\n-\n-impl Digest for Sha384 {\n-    fn input(&mut self, d: &[u8]) {\n-        self.engine.input_vec(d);\n-    }\n-\n-    fn result(&mut self, out: &mut [u8]) {\n-        self.engine.result_384(out)\n-    }\n-\n-    fn reset(&mut self) {\n-        self.engine.reset();\n-\n-        self.engine.H0 = 0xcbbb9d5dc1059ed8u64;\n-        self.engine.H1 = 0x629a292a367cd507u64;\n-        self.engine.H2 = 0x9159015a3070dd17u64;\n-        self.engine.H3 = 0x152fecd8f70e5939u64;\n-        self.engine.H4 = 0x67332667ffc00b31u64;\n-        self.engine.H5 = 0x8eb44a8768581511u64;\n-        self.engine.H6 = 0xdb0c2e0d64f98fa7u64;\n-        self.engine.H7 = 0x47b5481dbefa4fa4u64;\n-    }\n-\n-    fn output_bits(&self) -> uint { 384 }\n-}\n-\n-impl Digest for Sha512Trunc256 {\n-    fn input(&mut self, d: &[u8]) {\n-        self.engine.input_vec(d);\n-    }\n-\n-    fn result(&mut self, out: &mut [u8]) {\n-        self.engine.result_256(out)\n-    }\n-\n-    fn reset(&mut self) {\n-        self.engine.reset();\n-\n-        self.engine.H0 = 0x22312194fc2bf72cu64;\n-        self.engine.H1 = 0x9f555fa3c84c64c2u64;\n-        self.engine.H2 = 0x2393b86b6f53b151u64;\n-        self.engine.H3 = 0x963877195940eabdu64;\n-        self.engine.H4 = 0x96283ee2a88effe3u64;\n-        self.engine.H5 = 0xbe5e1e2553863992u64;\n-        self.engine.H6 = 0x2b0199fc2c85b8aau64;\n-        self.engine.H7 = 0x0eb72ddc81c52ca2u64;\n-    }\n-\n-    fn output_bits(&self) -> uint { 256 }\n-}\n-\n-impl Digest for Sha512Trunc224 {\n-    fn input(&mut self, d: &[u8]) {\n-        self.engine.input_vec(d);\n-    }\n-\n-    fn result(&mut self, out: &mut [u8]) {\n-        self.engine.result_224(out)\n-    }\n-\n-    fn reset(&mut self) {\n-        self.engine.reset();\n-\n-        self.engine.H0 = 0x8c3d37c819544da2u64;\n-        self.engine.H1 = 0x73e1996689dcd4d6u64;\n-        self.engine.H2 = 0x1dfab7ae32ff9c82u64;\n-        self.engine.H3 = 0x679dd514582f9fcfu64;\n-        self.engine.H4 = 0x0f6d2b697bd44da8u64;\n-        self.engine.H5 = 0x77e36f7304c48942u64;\n-        self.engine.H6 = 0x3f9d85a86a1d36c8u64;\n-        self.engine.H7 = 0x1112e6ad91d692a1u64;\n-    }\n-\n-    fn output_bits(&self) -> uint { 224 }\n-}\n-\n-impl Digest for Sha256 {\n-    fn input(&mut self, d: &[u8]) {\n-        self.engine.input_vec(d);\n-    }\n-\n-    fn result(&mut self, out: &mut [u8]) {\n-        self.engine.result_256(out)\n-    }\n-\n-    fn reset(&mut self) {\n-        self.engine.reset();\n-\n-        self.engine.H0 = 0x6a09e667u32;\n-        self.engine.H1 = 0xbb67ae85u32;\n-        self.engine.H2 = 0x3c6ef372u32;\n-        self.engine.H3 = 0xa54ff53au32;\n-        self.engine.H4 = 0x510e527fu32;\n-        self.engine.H5 = 0x9b05688cu32;\n-        self.engine.H6 = 0x1f83d9abu32;\n-        self.engine.H7 = 0x5be0cd19u32;\n-    }\n-\n-    fn output_bits(&self) -> uint { 256 }\n-}\n-\n impl Digest for Sha224 {\n     fn input(&mut self, d: &[u8]) {\n         self.engine.input_vec(d);"}]}