{"sha": "d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMjk0ZTBjZTJjZTc4ZTRhNjM0ZmJmYTY4Y2IyYmM0ZDUwYWZjNmU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-11T08:00:06Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-18T15:11:34Z"}, "message": "allow unary operations and ignore StorageLive/Dead stmts", "tree": {"sha": "f32d9289e39c862d70cb15bd15b38e3e20118cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f32d9289e39c862d70cb15bd15b38e3e20118cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e", "html_url": "https://github.com/rust-lang/rust/commit/d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a277822a536eff72d562e75fb6046add63d4926", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a277822a536eff72d562e75fb6046add63d4926", "html_url": "https://github.com/rust-lang/rust/commit/5a277822a536eff72d562e75fb6046add63d4926"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "f0e51511732767e17410fd4e8bd90ec2048becec", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e", "patch": "@@ -174,6 +174,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         }\n     }\n \n+    /// We do not allow all binary operations in abstract consts, so filter disallowed ones.\n     fn check_binop(op: mir::BinOp) -> bool {\n         use mir::BinOp::*;\n         match op {\n@@ -183,6 +184,15 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         }\n     }\n \n+    /// While we currently allow all unary operations, we still want to explicitly guard against\n+    /// future changes here.\n+    fn check_unop(op: mir::UnOp) -> bool {\n+        use mir::UnOp::*;\n+        match op {\n+            Not | Neg => true,\n+        }\n+    }\n+\n     fn build_statement(&mut self, stmt: &mir::Statement<'tcx>) -> Option<()> {\n         debug!(\"AbstractConstBuilder: stmt={:?}\", stmt);\n         match stmt.kind {\n@@ -191,28 +201,37 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 match *rvalue {\n                     Rvalue::Use(ref operand) => {\n                         self.locals[local] = self.operand_to_node(operand)?;\n+                        Some(())\n                     }\n                     Rvalue::BinaryOp(op, ref lhs, ref rhs) if Self::check_binop(op) => {\n                         let lhs = self.operand_to_node(lhs)?;\n                         let rhs = self.operand_to_node(rhs)?;\n                         self.locals[local] = self.nodes.push(Node::Binop(op, lhs, rhs));\n                         if op.is_checkable() {\n                             bug!(\"unexpected unchecked checkable binary operation\");\n+                        } else {\n+                            Some(())\n                         }\n                     }\n                     Rvalue::CheckedBinaryOp(op, ref lhs, ref rhs) if Self::check_binop(op) => {\n                         let lhs = self.operand_to_node(lhs)?;\n                         let rhs = self.operand_to_node(rhs)?;\n                         self.locals[local] = self.nodes.push(Node::Binop(op, lhs, rhs));\n                         self.checked_op_locals.insert(local);\n+                        Some(())\n                     }\n-                    _ => return None,\n+                    Rvalue::UnaryOp(op, ref operand) if Self::check_unop(op) => {\n+                        let operand = self.operand_to_node(operand)?;\n+                        self.locals[local] = self.nodes.push(Node::UnaryOp(op, operand));\n+                        Some(())\n+                    }\n+                    _ => None,\n                 }\n             }\n-            _ => return None,\n+            // These are not actually relevant for us here, so we can ignore them.\n+            StatementKind::StorageLive(_) | StatementKind::StorageDead(_) => Some(()),\n+            _ => None,\n         }\n-\n-        Some(())\n     }\n \n     fn build_terminator("}, {"sha": "8e0768b1c9595d5625b05ff5379a04c66d636c2b", "filename": "src/test/ui/const-generics/const_evaluatable_checked/unop.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Funop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Funop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Funop.rs?ref=d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const B: bool>;\n+\n+fn test<const N: usize>() -> Foo<{ !(N > 10) }> where Foo<{ !(N > 10) }>: Sized {\n+    Foo\n+}\n+\n+fn main() {\n+    let _: Foo<false> = test::<12>();\n+    let _: Foo<true> = test::<9>();\n+}"}]}