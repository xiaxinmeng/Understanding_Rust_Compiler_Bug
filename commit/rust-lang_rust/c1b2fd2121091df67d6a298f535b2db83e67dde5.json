{"sha": "c1b2fd2121091df67d6a298f535b2db83e67dde5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYjJmZDIxMjEwOTFkZjY3ZDZhMjk4ZjUzNWIyZGI4M2U2N2RkZTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-04T23:49:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-04T23:49:44Z"}, "message": "Rollup merge of #71881 - IsaacWoods:master, r=petrochenkov\n\nCorrectly handle UEFI targets as Windows-like when emitting sections for LLVM bitcode\n\nThis handles UEFI handles when emitting inline assembly for sections containing LLVM bitcode. See details in #71880. I have locally confirmed that this change fixes compilation of projects using the `x86_64-unknown-uefi` target compiling with `cargo-xbuild`, but I am not very familiar with LLVM bitcode so this may not be the correct approach.\n\nr? @alexcrichton as they wrote the initial LLVM bitcode emitting code?", "tree": {"sha": "4e1f57e299d1eb2b5c72ed1668d3f094e0aaa245", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e1f57e299d1eb2b5c72ed1668d3f094e0aaa245"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b2fd2121091df67d6a298f535b2db83e67dde5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesKoZCRBK7hj4Ov3rIwAAdHIIAHh33W54n3GMpwLFqrGl9JZS\nLY7D0JHhusVqj0ggFZUraOZAcob3cJQKOQo2vIXlS7aT1p/huqaa7JOqcVuqIpYp\nfwwvvyaSclY3pVO61BJ05AGcjx4VmK0guyWY6Bvf2OPlCgW+8A5GUuJ0GPn/UjLw\nxY/rrnhfkcq8fwWfnsbB0KG5aEj4g8WjeWgjLN/p0Xa9novENaZ/izny6mYczR7U\nG3+JQ8eKwdpBp/B6+M16LL2JoCUdRVJoES+jViB2n6mw3s5Lh53/47Ub2qEBRsDu\nJUF4M5x2Zi35CWjyvy6Yyezxxt0fKAdVcSOodMZqh9/LkPl8BlgJw8A1zDc/AIg=\n=bjol\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e1f57e299d1eb2b5c72ed1668d3f094e0aaa245\nparent faccb0f07a50f1b19644938723f6cd2c6c5877c8\nparent 6e77729ed5af41f87ffe8c8b7bd949b8b1d44f83\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588636184 +0200\ncommitter GitHub <noreply@github.com> 1588636184 +0200\n\nRollup merge of #71881 - IsaacWoods:master, r=petrochenkov\n\nCorrectly handle UEFI targets as Windows-like when emitting sections for LLVM bitcode\n\nThis handles UEFI handles when emitting inline assembly for sections containing LLVM bitcode. See details in #71880. I have locally confirmed that this change fixes compilation of projects using the `x86_64-unknown-uefi` target compiling with `cargo-xbuild`, but I am not very familiar with LLVM bitcode so this may not be the correct approach.\n\nr? @alexcrichton as they wrote the initial LLVM bitcode emitting code?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b2fd2121091df67d6a298f535b2db83e67dde5", "html_url": "https://github.com/rust-lang/rust/commit/c1b2fd2121091df67d6a298f535b2db83e67dde5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b2fd2121091df67d6a298f535b2db83e67dde5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faccb0f07a50f1b19644938723f6cd2c6c5877c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/faccb0f07a50f1b19644938723f6cd2c6c5877c8", "html_url": "https://github.com/rust-lang/rust/commit/faccb0f07a50f1b19644938723f6cd2c6c5877c8"}, {"sha": "6e77729ed5af41f87ffe8c8b7bd949b8b1d44f83", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e77729ed5af41f87ffe8c8b7bd949b8b1d44f83", "html_url": "https://github.com/rust-lang/rust/commit/6e77729ed5af41f87ffe8c8b7bd949b8b1d44f83"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "394e2f332cb216d8fd9b3ef3ee370fc1cce0a7eb", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1b2fd2121091df67d6a298f535b2db83e67dde5/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b2fd2121091df67d6a298f535b2db83e67dde5/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=c1b2fd2121091df67d6a298f535b2db83e67dde5", "patch": "@@ -853,7 +853,9 @@ unsafe fn embed_bitcode(\n         || cgcx.opts.target_triple.triple().starts_with(\"asmjs\")\n     {\n         // nothing to do here\n-    } else if cgcx.opts.target_triple.triple().contains(\"windows\") {\n+    } else if cgcx.opts.target_triple.triple().contains(\"windows\")\n+        || cgcx.opts.target_triple.triple().contains(\"uefi\")\n+    {\n         let asm = \"\n             .section .llvmbc,\\\"n\\\"\n             .section .llvmcmd,\\\"n\\\""}]}