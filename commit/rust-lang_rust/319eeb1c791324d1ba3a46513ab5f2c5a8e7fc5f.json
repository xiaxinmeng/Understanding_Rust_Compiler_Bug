{"sha": "319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOWVlYjFjNzkxMzI0ZDFiYTNhNDY1MTNhYjVmMmM1YThlN2ZjNWY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-01T07:13:36Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-03T20:55:10Z"}, "message": "rename map -> oldmap and mark it as deprecated\n\nLinearMap is quite a bit faster, and is fully owned/sendable without\nrequiring copies. The older std::map also doesn't use explicit self and\nrelies on mutable fields.", "tree": {"sha": "6152371bb8ab7f805491575ea44f4840644aaa2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6152371bb8ab7f805491575ea44f4840644aaa2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "html_url": "https://github.com/rust-lang/rust/commit/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df31373406d7edae286f0cf38d497204eb0d35e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/df31373406d7edae286f0cf38d497204eb0d35e7", "html_url": "https://github.com/rust-lang/rust/commit/df31373406d7edae286f0cf38d497204eb0d35e7"}], "stats": {"total": 461, "additions": 230, "deletions": 231}, "files": [{"sha": "5d532c613b5b293fdb12f7f3b8e9099bbd3d42c5", "filename": "doc/rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -448,10 +448,10 @@ expression context, the final namespace qualifier is omitted.\n Two examples of paths with type arguments:\n \n ~~~~\n-# use std::map;\n+# use std::oldmap;\n # fn f() {\n # fn id<T:Copy>(t: T) -> T { t }\n-type t = map::HashMap<int,~str>;  // Type arguments used in a type expression\n+type t = oldmap::HashMap<int,~str>;  // Type arguments used in a type expression\n let x = id::<int>(10);           // Type arguments used in a call expression\n # }\n ~~~~"}, {"sha": "df2618c74e1a41b5ab36db350b4c8f0920e6f435", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -1791,7 +1791,7 @@ illegal to copy and pass by value.\n Generic `type`, `struct`, and `enum` declarations follow the same pattern:\n \n ~~~~\n-# use std::map::HashMap;\n+# use std::oldmap::HashMap;\n type Set<T> = HashMap<T, ()>;\n \n struct Stack<T> {"}, {"sha": "8b606445c0b805e1b941ad8ea24332c2b2a0d1eb", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -53,8 +53,8 @@ use core::io::WriterUtil;\n use core::result::{Ok, Err};\n use core::hashmap::linear::LinearMap;\n use std::getopts::{optflag, optopt, opt_present};\n-use std::map::HashMap;\n-use std::{map, json, tempfile, term, sort, getopts};\n+use std::oldmap::HashMap;\n+use std::{oldmap, json, tempfile, term, sort, getopts};\n use syntax::codemap::span;\n use syntax::diagnostic::span_handler;\n use syntax::diagnostic;\n@@ -110,9 +110,9 @@ pub struct Cargo {\n     libdir: Path,\n     workdir: Path,\n     sourcedir: Path,\n-    sources: map::HashMap<~str, @Source>,\n+    sources: oldmap::HashMap<~str, @Source>,\n     mut current_install: ~str,\n-    dep_cache: map::HashMap<~str, bool>,\n+    dep_cache: oldmap::HashMap<~str, bool>,\n     opts: Options\n }\n \n@@ -490,7 +490,7 @@ pub fn parse_source(name: ~str, j: &json::Json) -> @Source {\n }\n \n pub fn try_parse_sources(filename: &Path,\n-                         sources: map::HashMap<~str, @Source>) {\n+                         sources: oldmap::HashMap<~str, @Source>) {\n     if !os::path_exists(filename)  { return; }\n     let c = io::read_whole_file_str(filename);\n     match json::from_str(c.get()) {"}, {"sha": "22923cb7290423c715596abccb0946a1834b7ea0", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -36,7 +36,7 @@ use core::ptr;\n use core::run;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::sha1::sha1;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};"}, {"sha": "f6a5fec75aded03fe56ef50ad7e02cefc0632a49", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -18,8 +18,8 @@ use core::os;\n use core::uint;\n use core::util;\n use core::vec;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n \n pure fn not_win32(os: session::os) -> bool {\n   match os {\n@@ -187,7 +187,7 @@ pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n }\n \n pub fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n-    let set = map::HashMap();\n+    let set = oldmap::HashMap();\n     let mut minimized = ~[];\n     for rpaths.each |rpath| {\n         let s = rpath.to_str();"}, {"sha": "05d77a688a014853e4664978205426a28d1c20fd", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -35,7 +35,7 @@ use std::getopts::groups::{optopt, optmulti, optflag, optflagopt, getopts};\n use std::getopts::groups;\n use std::getopts::{opt_present};\n use std::getopts;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std;\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "e114a18f4fd382b42675b5ea66ec335d76ad3dc1", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -20,7 +20,7 @@ use core::ptr;\n use core::str;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub type Opcode = u32;\n pub type Bool = c_uint;"}, {"sha": "66956489a27ef5a486c7ce2ead8335aa94c17333", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -30,7 +30,7 @@ use syntax::parse::token::ident_interner;\n use syntax::print::pprust;\n use syntax::visit;\n use syntax::{ast, ast_util};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n // Traverses an AST, reading all the information about use'd crates and extern\n // libraries necessary for later resolving, typechecking, linking, etc."}, {"sha": "59cc7d1dba603fae1982db774b4bc3ce873b0935", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -23,7 +23,7 @@ use core::dvec::DVec;\n use core::vec;\n use reader = std::ebml::reader;\n use std::ebml;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::codemap::dummy_sp;"}, {"sha": "fd0d96485f8ca9683920ee7984b3d3dc1d3124c1", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -21,8 +21,8 @@ use metadata::decoder;\n use core::option;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use std;\n use syntax::{ast, attr};\n use syntax::parse::token::ident_interner;\n@@ -31,7 +31,7 @@ use syntax::parse::token::ident_interner;\n // local crate numbers (as generated during this session). Each external\n // crate may refer to types in other external crates, and each has their\n // own crate numbers.\n-pub type cnum_map = map::HashMap<ast::crate_num, ast::crate_num>;\n+pub type cnum_map = oldmap::HashMap<ast::crate_num, ast::crate_num>;\n \n pub type crate_metadata = @{name: ~str,\n                             data: @~[u8],\n@@ -46,24 +46,24 @@ pub type crate_metadata = @{name: ~str,\n pub enum CStore { private(cstore_private), }\n \n type cstore_private =\n-    @{metas: map::HashMap<ast::crate_num, crate_metadata>,\n+    @{metas: oldmap::HashMap<ast::crate_num, crate_metadata>,\n       use_crate_map: use_crate_map,\n       mut used_crate_files: ~[Path],\n       mut used_libraries: ~[~str],\n       mut used_link_args: ~[~str],\n       intr: @ident_interner};\n \n // Map from node_id's of local use statements to crate numbers\n-type use_crate_map = map::HashMap<ast::node_id, ast::crate_num>;\n+type use_crate_map = oldmap::HashMap<ast::node_id, ast::crate_num>;\n \n // Internal method to retrieve the data from the cstore\n pure fn p(cstore: CStore) -> cstore_private {\n     match cstore { private(p) => p }\n }\n \n pub fn mk_cstore(intr: @ident_interner) -> CStore {\n-    let meta_cache = map::HashMap();\n-    let crate_map = map::HashMap();\n+    let meta_cache = oldmap::HashMap();\n+    let crate_map = oldmap::HashMap();\n     return private(@{metas: meta_cache,\n                      use_crate_map: crate_map,\n                      mut used_crate_files: ~[],"}, {"sha": "c3c7c969cd87a05af5abba7b622fc26aa56e195b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -36,8 +36,8 @@ use core::str;\n use core::vec;\n use std::ebml::reader;\n use std::ebml;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use std::serialize::Decodable;\n use syntax::ast_map;\n use syntax::attr;"}, {"sha": "0d289c17e2d4f72c076921dc62f5b48f7a132f4f", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -36,9 +36,9 @@ use core::str;\n use core::to_bytes::IterBytes;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::serialize::Encodable;\n-use std::{ebml, map};\n+use std::{ebml, oldmap};\n use std;\n use syntax::ast::*;\n use syntax::ast;\n@@ -52,7 +52,7 @@ use syntax;\n use writer = std::ebml::writer;\n \n // used by astencode:\n-type abbrev_map = map::HashMap<ty::t, tyencode::ty_abbrev>;\n+type abbrev_map = oldmap::HashMap<ty::t, tyencode::ty_abbrev>;\n \n pub type encode_inlined_item = fn@(ecx: @encode_ctxt,\n                                    ebml_w: writer::Encoder,"}, {"sha": "5dd499dfd63d7a125c434ccb2794e2d50192c081", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -27,7 +27,7 @@ use core::vec;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::codemap::{respan, dummy_sp};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n // Compact string representation for ty::t values. API ty_str &\n // parse_from_str. Extra parameters are for converting to/from def_ids in the"}, {"sha": "7b347f988083661a42e3319f11a5e28264e558c2", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -20,7 +20,7 @@ use core::io::WriterUtil;\n use core::io;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::diagnostic::span_handler;\n use syntax::print::pprust::*;"}, {"sha": "2fc592e131e61a282a057fcb16904547087cc27e", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -31,7 +31,7 @@ use std::ebml::reader::get_doc;\n use std::ebml::reader;\n use std::ebml::writer::Encoder;\n use std::ebml;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::prettyprint;\n use std::serialize;\n use std::serialize::{Encodable, EncoderHelpers, DecoderHelpers};"}, {"sha": "ee05af27feb251ffa917d14f0d3aefb046f0fa65", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -35,7 +35,7 @@ use core::cmp;\n use core::dvec::DVec;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n use syntax::ast_util;"}, {"sha": "ad7a2d773536d068f76ea3a58f18f43010794537", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -33,7 +33,7 @@ use util::ppaux::{expr_repr, region_to_str};\n use core::dvec;\n use core::hashmap::linear::LinearSet;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n use syntax::codemap::span;"}, {"sha": "b160c2e5a146d3a72f4c46b469e100b1e692a047", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -241,7 +241,7 @@ use core::io;\n use core::result::{Result, Ok, Err};\n use std::list::{List, Cons, Nil};\n use std::list;\n-use std::map::{HashMap, Set};\n+use std::oldmap::{HashMap, Set};\n use syntax::ast::{mutability, m_mutbl, m_imm, m_const};\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "2909881c30e862ffca4d5373a8ac6144501df438", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -18,7 +18,7 @@ use util::ppaux;\n \n use core::dvec::DVec;\n use core::option;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::codemap;\n use syntax::{visit, ast_util, ast_map};"}, {"sha": "5942466c54ec0ce2a77b340f5a56669a901ca5e5", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -23,7 +23,7 @@ use core::cmp;\n use core::option;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::sort;\n use syntax::ast::*;\n use syntax::ast_util::{variant_def_ids, unguarded_pat, walk_pat};"}, {"sha": "3705375e1b8c3fd23e00797584438e1f34f3a93b", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -18,7 +18,7 @@ use middle::ty;\n use core::int;\n use core::option::*;\n use core::vec;\n-use std::map::*;\n+use std::oldmap::*;\n use syntax::codemap::span;\n use syntax::print::pprust::path_to_str;\n use syntax::{ast, ast_util, visit};"}, {"sha": "09232a2a0c52f5d9a08701422c662c6788f2f6ec", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -24,7 +24,7 @@ use util::ppaux::{ty_to_str, tys_to_str};\n use core::option;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::codemap::{span, spanned};\n use syntax::print::pprust::expr_to_str;"}, {"sha": "24f6ec71788f07bd6559b870cb0c924a6ee7f8f1", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -33,7 +33,7 @@ use syntax::visit::{default_simple_visitor, mk_simple_visitor, SimpleVisitor};\n use syntax::visit::{visit_crate, visit_item};\n \n use core::ptr;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use str_eq = str::eq;\n \n pub enum LangItem {"}, {"sha": "133eb59d0cfae0329e66d441f15ee1e5adcb8de4", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -32,8 +32,8 @@ use core::u32;\n use core::u64;\n use core::uint;\n use core::vec;\n-use std::map::{Map, HashMap};\n-use std::map;\n+use std::oldmap::{Map, HashMap};\n+use std::oldmap;\n use std::oldsmallintmap::{Map, SmallIntMap};\n use std::oldsmallintmap;\n use syntax::ast_util::{path_to_ident};\n@@ -233,7 +233,7 @@ pub fn get_lint_dict() -> lint_dict {\n            default: warn}),\n         */\n     ];\n-    map::hash_from_vec(v)\n+    oldmap::hash_from_vec(v)\n }\n \n // This is a highly not-optimal set of data structure decisions."}, {"sha": "d14d58122a75907a899f445de11d1248d5f0176c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -119,7 +119,7 @@ use core::ptr;\n use core::to_str;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::codemap::span;\n use syntax::parse::token::special_idents;"}, {"sha": "a9b5b0f00f7e72a424e2d330ebdedb66dfb2c6cd", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -217,7 +217,7 @@ use util::ppaux;\n use util::common::indenter;\n \n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::ast_util;\n use syntax::visit;"}, {"sha": "c39d750a5814a4508acb678926e2bb42dfb62a3d", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -18,7 +18,7 @@ use syntax::ast_util::{path_to_ident, walk_pat};\n use syntax::fold;\n use syntax::fold::*;\n use syntax::codemap::{span, respan};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub type PatIdMap = HashMap<ident, node_id>;\n "}, {"sha": "e304112a25929c975a4646ebdbc0f50703c44084", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -32,7 +32,7 @@ use core::dvec::DVec;\n use core::vec;\n use std::list;\n use std::list::list;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast_map;\n use syntax::codemap::span;\n use syntax::print::pprust;"}, {"sha": "e74a87c450db47b95049540a76a64e71185f3518", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -79,7 +79,7 @@ use str::{connect, split_str};\n use vec::pop;\n \n use std::list::{Cons, List, Nil};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use str_eq = str::eq;\n \n // Definition mapping"}, {"sha": "a64231b335f1e9094e981ce395fd10499a7a2b22", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -164,7 +164,7 @@ use util::common::indenter;\n \n use core::dvec::DVec;\n use core::dvec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::def_id;\n use syntax::ast;\n use syntax::ast_util::{dummy_sp, path_to_ident};"}, {"sha": "1429a4d62fc53550cc38fd1c86bf0e6cccd2537c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -75,9 +75,9 @@ use core::libc::{c_uint, c_ulonglong};\n use core::option::{is_none, is_some};\n use core::option;\n use core::uint;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::oldsmallintmap;\n-use std::{map, time, list};\n+use std::{oldmap, time, list};\n use syntax::ast_map::{path, path_elt_to_str, path_mod, path_name};\n use syntax::ast_util::{def_id_of_def, local_def, path_to_ident};\n use syntax::attr;\n@@ -3016,7 +3016,7 @@ pub fn trans_crate(sess: session::Session,\n               monomorphized: HashMap(),\n               monomorphizing: HashMap(),\n               type_use_cache: HashMap(),\n-              vtables: map::HashMap(),\n+              vtables: oldmap::HashMap(),\n               const_cstr_cache: HashMap(),\n               const_globals: HashMap(),\n               const_values: HashMap(),"}, {"sha": "7923643358026ada337091c835c1eb9ae5eb28f2", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -22,7 +22,7 @@ use core::cast;\n use core::libc;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::codemap;\n \n pub fn terminate(cx: block, _: &str) {"}, {"sha": "9a115acbd8dde28496324b60d5a44dfca9ee7f45", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -28,7 +28,7 @@ use middle::trans::type_of::*;\n use util::ppaux::ty_to_str;\n \n use core::libc::c_uint;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util;"}, {"sha": "f21a3150a1c386201ffd5dbeef3745835ac2c2ad", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -53,7 +53,7 @@ use core::str;\n use core::to_bytes;\n use core::vec::raw::to_ptr;\n use core::vec;\n-use std::map::{HashMap, Set};\n+use std::oldmap::{HashMap, Set};\n use syntax::ast::ident;\n use syntax::ast_map::path;\n use syntax::codemap::span;"}, {"sha": "c13899007803edc62296ff5f352031c0bc8039ac", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -26,8 +26,8 @@ use util::ppaux::ty_to_str;\n use core::libc;\n use core::option;\n use core::sys;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use syntax::ast::Ty;\n use syntax::codemap::{span, CharPos};\n use syntax::parse::token::ident_interner;\n@@ -111,7 +111,7 @@ pub type debug_ctxt = {\n };\n \n pub fn mk_ctxt(+crate: ~str, intr: @ident_interner) -> debug_ctxt {\n-    {llmetadata: map::HashMap(),\n+    {llmetadata: oldmap::HashMap(),\n      names: new_namegen(intr),\n      crate_file: crate}\n }"}, {"sha": "dc131fd027f69bc31ef0c1a3fe81b742b6717bb3", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -33,7 +33,7 @@ use middle::typeck;\n use util::ppaux::{ty_to_str, tys_to_str};\n \n use core::libc::c_uint;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast_map::{path, path_mod, path_name, node_id_to_str};\n use syntax::ast_util::local_def;\n use syntax::print::pprust::expr_to_str;"}, {"sha": "d1c2aeb64598f5afe8f1868d7af7ba88ac925508", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -22,7 +22,7 @@ use middle::ty;\n use middle::typeck;\n \n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::ast_util::def_id_of_def;\n use syntax::attr;"}, {"sha": "1150413dabedcdc11ad81216320775e0d7751546", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -24,7 +24,7 @@ use middle::trans::meth;\n use middle::trans::type_of::*;\n use util::ppaux::ty_to_str;\n \n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::def_id;\n use syntax::ast;\n "}, {"sha": "4f0e59b723ec4507d172e0e4958abb6635573b51", "filename": "src/librustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -26,7 +26,7 @@ use util::ppaux::ty_to_str;\n use core::dvec::DVec;\n use core::option::is_some;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::codemap::dummy_sp;\n use syntax::codemap::span;"}, {"sha": "cab3344556c7bb63a502c20e380df5826b730396", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -17,7 +17,7 @@ use middle::trans::expr;\n use middle::trans::machine;\n use util::ppaux;\n \n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n \n pub fn type_of_explicit_arg(ccx: @crate_ctxt, arg: ty::arg) -> TypeRef {"}, {"sha": "350b1393c33336b90291ab222dfbfff38cb7de12", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -38,7 +38,7 @@ use core::uint;\n use core::vec;\n use std::list::{List, Cons, Nil};\n use std::list;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::ast_map;\n use syntax::ast_util;"}, {"sha": "e8d2a807ffe087cf38db21abd8d8cd23afd0aaf2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -41,8 +41,8 @@ use core::result;\n use core::to_bytes;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n-use std::{map, oldsmallintmap};\n+use std::oldmap::HashMap;\n+use std::{oldmap, oldsmallintmap};\n use syntax::ast::*;\n use syntax::ast_util::{is_local, local_def};\n use syntax::ast_util;\n@@ -790,11 +790,11 @@ pub type node_type_table = @oldsmallintmap::SmallIntMap<t>;\n \n fn mk_rcache() -> creader_cache {\n     type val = {cnum: int, pos: uint, len: uint};\n-    return map::HashMap();\n+    return oldmap::HashMap();\n }\n \n-pub fn new_ty_hash<V: Copy>() -> map::HashMap<t, V> {\n-    map::HashMap()\n+pub fn new_ty_hash<V: Copy>() -> oldmap::HashMap<t, V> {\n+    oldmap::HashMap()\n }\n \n pub fn mk_ctxt(s: session::Session,\n@@ -822,7 +822,7 @@ pub fn mk_ctxt(s: session::Session,\n         }\n     }\n \n-    let interner = map::HashMap();\n+    let interner = oldmap::HashMap();\n     let vecs_implicitly_copyable =\n         get_lint_level(s.lint_settings.default_settings,\n                        lint::vecs_implicitly_copyable) == allow;\n@@ -839,9 +839,9 @@ pub fn mk_ctxt(s: session::Session,\n         region_map: region_map,\n         region_paramd_items: region_paramd_items,\n         node_types: @oldsmallintmap::mk(),\n-        node_type_substs: map::HashMap(),\n+        node_type_substs: oldmap::HashMap(),\n         items: amap,\n-        intrinsic_defs: map::HashMap(),\n+        intrinsic_defs: oldmap::HashMap(),\n         freevars: freevars,\n         tcache: HashMap(),\n         rcache: mk_rcache(),\n@@ -1745,7 +1745,7 @@ pub fn type_needs_unwind_cleanup(cx: ctxt, ty: t) -> bool {\n }\n \n fn type_needs_unwind_cleanup_(cx: ctxt, ty: t,\n-                              tycache: map::HashMap<t, ()>,\n+                              tycache: oldmap::HashMap<t, ()>,\n                               encountered_box: bool) -> bool {\n \n     // Prevent infinite recursion\n@@ -2795,7 +2795,7 @@ impl sty : to_bytes::IterBytes {\n }\n \n pub fn br_hashmap<V:Copy>() -> HashMap<bound_region, V> {\n-    map::HashMap()\n+    oldmap::HashMap()\n }\n \n pub fn node_id_to_type(cx: ctxt, id: ast::node_id) -> t {"}, {"sha": "84b41823ee151c75f216e89ccfffd12126aea7ca", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -20,7 +20,7 @@ use middle::typeck::check::{structure_of, valid_range_bounds};\n use middle::typeck::require_same_types;\n \n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_util::walk_pat;\n use syntax::ast_util;"}, {"sha": "5f0d8bbd8fc5c72af778b248b2bb1cec9bd0e69d", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -101,7 +101,7 @@ use core::dvec::DVec;\n use core::result;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast::{def_id, sty_by_ref, sty_value, sty_region, sty_box};\n use syntax::ast::{sty_uniq, sty_static, node_id, by_copy, by_ref};\n use syntax::ast::{m_const, m_mutbl, m_imm};"}, {"sha": "6f1e7f782149b22c99a626223e8e431e8b737289", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -115,8 +115,8 @@ use core::result;\n use core::str;\n use core::vec;\n use std::list::Nil;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use syntax::ast::{provided, required, ty_i};\n use syntax::ast;\n use syntax::ast_map;\n@@ -209,9 +209,9 @@ pub fn blank_inherited(ccx: @crate_ctxt) -> @inherited {\n     @inherited {\n         infcx: infer::new_infer_ctxt(ccx.tcx),\n         locals: HashMap(),\n-        node_types: map::HashMap(),\n-        node_type_substs: map::HashMap(),\n-        adjustments: map::HashMap()\n+        node_types: oldmap::HashMap(),\n+        node_type_substs: oldmap::HashMap(),\n+        adjustments: oldmap::HashMap()\n     }\n }\n "}, {"sha": "2ced5cd5a32102985bb8a516ed4a5f8ae01d9f79", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -28,7 +28,7 @@ use core::result;\n use core::uint;\n use core::vec;\n use result::{Result, Ok, Err};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;"}, {"sha": "003150a78cf4a364cc59d3cccec3dc53c2caec20", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -28,7 +28,7 @@ use util::ppaux;\n \n use core::result::{Result, Ok, Err};\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::codemap::span;\n use syntax::print::pprust::pat_to_str;"}, {"sha": "c5bbb9bfe6d0d209d70fa328b7adf9058255dc38", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -63,7 +63,7 @@ use core::uint::range;\n use core::uint;\n use core::vec::{len, push};\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub struct UniversalQuantificationResult {\n     monotype: t,"}, {"sha": "6140390a24e127f5ea05587ebac98510a4bdb09e", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -280,7 +280,7 @@ use core::result::{Result, Ok, Err, map_vec, map_vec2, iter_vec2};\n use core::result;\n use core::vec;\n use std::list::Nil;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::oldsmallintmap;\n use syntax::ast::{ret_style, purity};\n use syntax::ast::{m_const, m_imm, m_mutbl};"}, {"sha": "b1988b53aad80de3ea835045a726175c2bb76726", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -559,7 +559,7 @@ use core::uint;\n use core::vec;\n use result::Result;\n use result::{Ok, Err};\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::cell::{Cell, empty_cell};\n use std::list::{List, Nil, Cons};\n use syntax::codemap::span;"}, {"sha": "416dcbcd30a1b9dddcb152d0c333a1b66959b19c", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -30,7 +30,7 @@ use std::getopts::groups;\n use std::getopts::{opt_present};\n use std::getopts;\n use std::getopts;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::codemap::dummy_sp;\n use syntax::parse::parse_crate_from_source_str;\n use syntax::{ast, attr, parse};"}, {"sha": "d292f04caa4066d23eb68f25b8758c85045d9415", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -67,8 +67,8 @@ use core::result;\n use core::vec;\n use std::list::{List, Nil, Cons};\n use std::list;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use std::oldsmallintmap;\n use syntax::ast::{provided, required};\n use syntax::ast_map::node_id_to_str;\n@@ -377,8 +377,8 @@ pub fn check_crate(tcx: ty::ctxt,\n \n     let ccx = @crate_ctxt_(crate_ctxt__ {\n         trait_map: trait_map,\n-        method_map: map::HashMap(),\n-        vtable_map: map::HashMap(),\n+        method_map: oldmap::HashMap(),\n+        vtable_map: oldmap::HashMap(),\n         coherence_info: @coherence::CoherenceInfo(),\n         tcx: tcx\n     });"}, {"sha": "7abf020cbeba64201f9e32395f2642631ce21593", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -136,7 +136,7 @@ pub mod lib {\n use result::{Ok, Err};\n use io::ReaderUtil;\n use std::getopts;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use getopts::{opt_present};\n use getopts::groups;\n use syntax::codemap;"}, {"sha": "85f4ba94e5a9bd541f3a2191b66a357140aeecb8", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -19,7 +19,7 @@ use syntax;\n use core::option;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn indent<R>(op: fn() -> R) -> R {\n     // Use in conjunction with the log post-processor like `src/etc/indenter`"}, {"sha": "2ed2d3ea5d7fe255bfe49d4a4cc448a8bf6656b0", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -36,7 +36,7 @@ use syntax::ast_map;\n \n use core::str;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn note_and_explain_region(cx: ctxt,\n                                prefix: ~str,"}, {"sha": "dc818865b90bdba8d31c230cf1f312671ca7cf8b", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -32,7 +32,7 @@ use rustc::driver::session::{basic_options, options};\n use rustc::driver::session;\n use rustc::front;\n use rustc::metadata::filesearch;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::codemap;"}, {"sha": "0e70900520d2ceeac3083de98c4ed70513467c05", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -31,7 +31,7 @@ use core::option;\n use core::vec;\n use syntax::ast;\n use syntax::ast_map;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::par;\n \n pub fn mk_pass() -> Pass {"}, {"sha": "f039bb74583e56a8e1cbcb6d828d4bd779b66bdd", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -19,7 +19,7 @@ use fold;\n use pass::Pass;\n \n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn mk_pass() -> Pass {\n     Pass {"}, {"sha": "4ab40530cfb875ff5f8ef5c84f30b788d90597b4", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -22,7 +22,7 @@ use fold;\n use pass::Pass;\n \n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::par;\n use syntax::ast;\n use syntax::print::pprust;"}, {"sha": "231705e890e8c8a47713fe9d53faa0cecd8d32c0", "filename": "src/libstd/oldmap.rs", "status": "renamed", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! A map type\n+//! A map type - **deprecated**, use `core::hashmap` instead\n #[forbid(deprecated_mode)];\n \n use core::cmp::Eq;\n@@ -46,7 +46,7 @@ pub mod util {\n // FIXME (#2344): package this up and export it as a datatype usable for\n // external code that doesn't want to pay the cost of a box.\n pub mod chained {\n-    use map::util;\n+    use super::util;\n \n     use core::io;\n     use core::ops;\n@@ -431,20 +431,20 @@ pub fn hash_from_vec<K: Eq IterBytes Hash Const Copy, V: Copy>(\n \n #[cfg(test)]\n mod tests {\n-    use map;\n-\n     use core::option::None;\n     use core::option;\n     use core::uint;\n \n+    use super::*;\n+\n     #[test]\n     fn test_simple() {\n         debug!(\"*** starting test_simple\");\n         pure fn eq_uint(x: &uint, y: &uint) -> bool { *x == *y }\n         pure fn uint_id(x: &uint) -> uint { *x }\n         debug!(\"uint -> uint\");\n-        let hm_uu: map::HashMap<uint, uint> =\n-            map::HashMap::<uint, uint>();\n+        let hm_uu: HashMap<uint, uint> =\n+            HashMap::<uint, uint>();\n         assert (hm_uu.insert(10u, 12u));\n         assert (hm_uu.insert(11u, 13u));\n         assert (hm_uu.insert(12u, 14u));\n@@ -459,8 +459,8 @@ mod tests {\n         let eleven: ~str = ~\"eleven\";\n         let twelve: ~str = ~\"twelve\";\n         debug!(\"str -> uint\");\n-        let hm_su: map::HashMap<~str, uint> =\n-            map::HashMap::<~str, uint>();\n+        let hm_su: HashMap<~str, uint> =\n+            HashMap::<~str, uint>();\n         assert (hm_su.insert(~\"ten\", 12u));\n         assert (hm_su.insert(eleven, 13u));\n         assert (hm_su.insert(~\"twelve\", 14u));\n@@ -473,8 +473,8 @@ mod tests {\n         assert (!hm_su.insert(~\"twelve\", 12u));\n         assert (hm_su.get(~\"twelve\") == 12u);\n         debug!(\"uint -> str\");\n-        let hm_us: map::HashMap<uint, ~str> =\n-            map::HashMap::<uint, ~str>();\n+        let hm_us: HashMap<uint, ~str> =\n+            HashMap::<uint, ~str>();\n         assert (hm_us.insert(10u, ~\"twelve\"));\n         assert (hm_us.insert(11u, ~\"thirteen\"));\n         assert (hm_us.insert(12u, ~\"fourteen\"));\n@@ -486,8 +486,8 @@ mod tests {\n         assert (!hm_us.insert(12u, ~\"twelve\"));\n         assert hm_us.get(12u) == ~\"twelve\";\n         debug!(\"str -> str\");\n-        let hm_ss: map::HashMap<~str, ~str> =\n-            map::HashMap::<~str, ~str>();\n+        let hm_ss: HashMap<~str, ~str> =\n+            HashMap::<~str, ~str>();\n         assert (hm_ss.insert(ten, ~\"twelve\"));\n         assert (hm_ss.insert(eleven, ~\"thirteen\"));\n         assert (hm_ss.insert(twelve, ~\"fourteen\"));\n@@ -512,8 +512,8 @@ mod tests {\n         pure fn eq_uint(x: &uint, y: &uint) -> bool { *x == *y }\n         pure fn uint_id(x: &uint) -> uint { *x }\n         debug!(\"uint -> uint\");\n-        let hm_uu: map::HashMap<uint, uint> =\n-            map::HashMap::<uint, uint>();\n+        let hm_uu: HashMap<uint, uint> =\n+            HashMap::<uint, uint>();\n         let mut i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm_uu.insert(i, i * i));\n@@ -537,8 +537,8 @@ mod tests {\n             i += 1u;\n         }\n         debug!(\"str -> str\");\n-        let hm_ss: map::HashMap<~str, ~str> =\n-            map::HashMap::<~str, ~str>();\n+        let hm_ss: HashMap<~str, ~str> =\n+            HashMap::<~str, ~str>();\n         i = 0u;\n         while i < num_to_insert {\n             assert hm_ss.insert(uint::to_str(i, 2u), uint::to_str(i * i, 2u));\n@@ -576,8 +576,8 @@ mod tests {\n     fn test_removal() {\n         debug!(\"*** starting test_removal\");\n         let num_to_insert: uint = 64u;\n-        let hm: map::HashMap<uint, uint> =\n-            map::HashMap::<uint, uint>();\n+        let hm: HashMap<uint, uint> =\n+            HashMap::<uint, uint>();\n         let mut i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm.insert(i, i * i));\n@@ -637,7 +637,7 @@ mod tests {\n     #[test]\n     fn test_contains_key() {\n         let key = ~\"k\";\n-        let map = map::HashMap::<~str, ~str>();\n+        let map = HashMap::<~str, ~str>();\n         assert (!map.contains_key(key));\n         map.insert(key, ~\"val\");\n         assert (map.contains_key(key));\n@@ -646,7 +646,7 @@ mod tests {\n     #[test]\n     fn test_find() {\n         let key = ~\"k\";\n-        let map = map::HashMap::<~str, ~str>();\n+        let map = HashMap::<~str, ~str>();\n         assert (option::is_none(&map.find(key)));\n         map.insert(key, ~\"val\");\n         assert (option::get(map.find(key)) == ~\"val\");\n@@ -655,7 +655,7 @@ mod tests {\n     #[test]\n     fn test_clear() {\n         let key = ~\"k\";\n-        let map = map::HashMap::<~str, ~str>();\n+        let map = HashMap::<~str, ~str>();\n         map.insert(key, ~\"val\");\n         assert (map.size() == 1);\n         assert (map.contains_key(key));\n@@ -666,7 +666,7 @@ mod tests {\n \n     #[test]\n     fn test_hash_from_vec() {\n-        let map = map::hash_from_vec(~[\n+        let map = hash_from_vec(~[\n             (~\"a\", 1),\n             (~\"b\", 2),\n             (~\"c\", 3)\n@@ -679,7 +679,7 @@ mod tests {\n \n     #[test]\n     fn test_update_with_key() {\n-        let map = map::HashMap::<~str, uint>();\n+        let map = HashMap::<~str, uint>();\n \n         // given a new key, initialize it with this new count, given\n         // given an existing key, add more to its count", "previous_filename": "src/libstd/map.rs"}, {"sha": "65122bea7506e5a3926d093c6b9fab0c8bffb0fd", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -79,7 +79,7 @@ pub mod bitv;\n pub mod deque;\n pub mod fun_treemap;\n pub mod list;\n-pub mod map;\n+pub mod oldmap;\n pub mod priority_queue;\n pub mod rope;\n pub mod smallintmap;"}, {"sha": "e6a4639ad80684f732b775a4044686e4b2496d9d", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -25,8 +25,8 @@ use core::cmp;\n use core::either;\n use core::str;\n use core::vec;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use std;\n \n pub enum path_elt {\n@@ -106,7 +106,7 @@ pub enum ast_node {\n     node_struct_ctor(@struct_def, @item, @path),\n }\n \n-pub type map = std::map::HashMap<node_id, ast_node>;\n+pub type map = std::oldmap::HashMap<node_id, ast_node>;\n pub struct ctx {\n     map: map,\n     mut path: path,\n@@ -134,7 +134,7 @@ pub fn mk_ast_map_visitor() -> vt {\n \n pub fn map_crate(diag: span_handler, c: crate) -> map {\n     let cx = ctx {\n-        map: std::map::HashMap(),\n+        map: std::oldmap::HashMap(),\n         mut path: ~[],\n         mut local_id: 0u,\n         diag: diag,"}, {"sha": "690bac48075d176da0f56e620aa7bcd4609f6495", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -24,8 +24,8 @@ use core::either::Either;\n use core::either;\n use core::option;\n use core::vec;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n use std;\n \n /* Constructors */\n@@ -358,7 +358,7 @@ pub fn find_inline_attr(attrs: &[ast::attribute]) -> inline_attr {\n \n pub fn require_unique_names(diagnostic: span_handler,\n                             metas: &[@ast::meta_item]) {\n-    let map = map::HashMap();\n+    let map = oldmap::HashMap();\n     for metas.each |meta| {\n         let name = get_meta_item_name(*meta);\n "}, {"sha": "03aa0cde811025573ea94e8393a5249ab4d60a58", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -98,8 +98,8 @@ use ext::base::*;\n use parse;\n \n use core::vec;\n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::HashMap;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {"}, {"sha": "3efae9559656b16585fc6062800dbee62d123a5e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -20,7 +20,7 @@ use parse::{parser, token};\n \n use core::io;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n // new-style macro! tt code:\n //"}, {"sha": "227a86e0766fd3ccb19af9cc9f9a8411e9106e9f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -20,7 +20,7 @@ use parse::{parser, parse_expr_from_source_str, new_parser_from_tts};\n \n use core::option;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn expand_expr(exts: HashMap<~str, SyntaxExtension>, cx: ext_ctxt,\n                    e: expr_, s: span, fld: ast_fold,"}, {"sha": "3ef176d62bbf69044281a7f28e9abbd3ac8a584b", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -26,7 +26,7 @@ use core::option;\n use core::str;\n use core::uint;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n only by calling out to the main rust parser for named nonterminals (which it"}, {"sha": "31172cbfa85275016c4baf4eb01b8ac34f439133", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -26,7 +26,7 @@ use parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n use print;\n \n use core::io;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                          arg: ~[ast::token_tree]) -> base::MacResult {"}, {"sha": "6bf90617a6e96e0fa943135bb4baec9ca7972fb3", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -22,7 +22,7 @@ use parse::lexer::TokenAndSpan;\n use core::option;\n use core::vec;\n use std;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n enum tt_frame_up { /* to break a circularity */\n     tt_frame_up(Option<tt_frame>)\n@@ -44,7 +44,7 @@ pub type tt_reader = @{\n     interner: @ident_interner,\n     mut cur: tt_frame,\n     /* for MBE-style macro transcription */\n-    interpolations: std::map::HashMap<ident, @named_match>,\n+    interpolations: std::oldmap::HashMap<ident, @named_match>,\n     mut repeat_idx: ~[uint],\n     mut repeat_len: ~[uint],\n     /* cached: */\n@@ -56,14 +56,14 @@ pub type tt_reader = @{\n  *  `src` contains no `tt_seq`s and `tt_nonterminal`s, `interp` can (and\n  *  should) be none. */\n pub fn new_tt_reader(sp_diag: span_handler, itr: @ident_interner,\n-                     interp: Option<std::map::HashMap<ident,@named_match>>,\n+                     interp: Option<std::oldmap::HashMap<ident,@named_match>>,\n                      src: ~[ast::token_tree])\n                   -> tt_reader {\n     let r = @{sp_diag: sp_diag, interner: itr,\n               mut cur: @{readme: src, mut idx: 0u, dotdotdoted: false,\n                          sep: None, up: tt_frame_up(option::None)},\n               interpolations: match interp { /* just a convienience */\n-                None => std::map::HashMap(),\n+                None => std::oldmap::HashMap(),\n                 Some(x) => x\n               },\n               mut repeat_idx: ~[],"}, {"sha": "d82a5a1803949b037824546d2b2fb116d296fd15", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -18,7 +18,7 @@ use parse::token;\n \n use core::option::{None, Option, Some};\n use core::option;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub type seq_sep = {\n     sep: Option<token::Token>,"}, {"sha": "3c7250112ab1f74a0128314bc0419671c1923681", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -87,7 +87,7 @@ use core::either;\n use core::result::Result;\n use core::vec::push;\n use core::vec;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n #[deriving_eq]\n enum restriction {"}, {"sha": "6897068a6bfd9a6feb03ea0019d66f987bc2e5f6", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -21,7 +21,7 @@ use core::char;\n use core::cmp;\n use core::str;\n use core::task;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n #[auto_encode]\n #[auto_decode]"}, {"sha": "19b938ccd687a47e097e9992353f2144b299bb79", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -15,13 +15,13 @@\n use core::prelude::*;\n \n use core::dvec::DVec;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n \n pub type hash_interner<T> = {map: HashMap<T, uint>, vect: DVec<T>};\n \n pub fn mk<T:Eq IterBytes Hash Const Copy>() -> Interner<T> {\n-    let m = map::HashMap::<T, uint>();\n+    let m = oldmap::HashMap::<T, uint>();\n     let hi: hash_interner<T> =\n         {map: m, vect: DVec()};\n     move ((move hi) as Interner::<T>)"}, {"sha": "748c209229c29b965a9813775089d65acf8c6136", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -14,7 +14,7 @@\n extern mod std;\n \n use core::dvec::*;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub type header_map = HashMap<~str, @DVec<@~str>>;\n "}, {"sha": "baf78c5112b4554ea396512319692d942541bd88", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n extern mod std;\n-use std::map;\n+use std::oldmap;\n use std::treemap::TreeMap;\n use core::hashmap::linear::*;\n use core::io::WriterUtil;\n@@ -35,7 +35,7 @@ fn timed(result: &mut float,\n fn old_int_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n \n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         do timed(&mut results.sequential_ints) {\n             for uint::range(0, num_keys) |i| {\n                 map.insert(i, i+1);\n@@ -48,7 +48,7 @@ fn old_int_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     }\n \n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         do timed(&mut results.random_ints) {\n             for uint::range(0, num_keys) |i| {\n                 map.insert(rng.next() as uint, i);\n@@ -57,7 +57,7 @@ fn old_int_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     }\n \n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         for uint::range(0, num_keys) |i| {\n             map.insert(i, i);;\n         }\n@@ -72,7 +72,7 @@ fn old_int_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n \n fn old_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         do timed(&mut results.sequential_strings) {\n             for uint::range(0, num_keys) |i| {\n                 let s = uint::to_str(i, 10);\n@@ -87,7 +87,7 @@ fn old_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     }\n \n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         do timed(&mut results.random_strings) {\n             for uint::range(0, num_keys) |i| {\n                 let s = uint::to_str(rng.next() as uint, 10);\n@@ -97,7 +97,7 @@ fn old_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     }\n \n     {\n-        let map = map::HashMap();\n+        let map = oldmap::HashMap();\n         for uint::range(0, num_keys) |i| {\n             map.insert(uint::to_str(i, 10), i);\n         }\n@@ -309,7 +309,7 @@ fn main() {\n         let mut results = empty_results();\n         old_int_benchmarks(rng, num_keys, &mut results);\n         old_str_benchmarks(rng, num_keys, &mut results);\n-        write_results(\"std::map::HashMap\", &results);\n+        write_results(\"std::oldmap::HashMap\", &results);\n     }\n \n     {"}, {"sha": "32b6c49189882cb29a10cb84f57d96ecad9bbfa1", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -13,8 +13,8 @@\n extern mod std;\n \n use std::time::precise_time_s;\n-use std::map;\n-use std::map::{Map, HashMap};\n+use std::oldmap;\n+use std::oldmap::{Map, HashMap};\n \n use io::{Reader, ReaderUtil};\n \n@@ -75,12 +75,12 @@ fn read_line() {\n fn str_set() {\n     let r = rand::Rng();\n \n-    let s = map::HashMap();\n+    let s = oldmap::HashMap();\n \n     for int::range(0, 1000) |_i| {\n-        map::set_add(s, r.gen_str(10));\n+        oldmap::set_add(s, r.gen_str(10));\n     }\n-    \n+\n     let mut found = 0;\n     for int::range(0, 1000) |_i| {\n         match s.find(r.gen_str(10)) {\n@@ -93,7 +93,7 @@ fn str_set() {\n fn vec_plus() {\n     let r = rand::Rng();\n \n-    let mut v = ~[]; \n+    let mut v = ~[];\n     let mut i = 0;\n     while i < 1500 {\n         let rv = vec::from_elem(r.gen_uint_range(0, i + 1), i);"}, {"sha": "ea9bd8781a24cee6de50f501713199eac3f9c8f7", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -19,9 +19,9 @@ An implementation of the Graph500 Breadth First Search problem in Rust.\n extern mod std;\n use std::arc;\n use std::time;\n-use std::map;\n-use std::map::Map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::Map;\n+use std::oldmap::HashMap;\n use std::deque;\n use std::deque::Deque;\n use std::par;\n@@ -41,15 +41,15 @@ fn make_edges(scale: uint, edgefactor: uint) -> ~[(node_id, node_id)] {\n         let A = 0.57;\n         let B = 0.19;\n         let C = 0.19;\n- \n+\n         if scale == 0u {\n             (i, j)\n         }\n         else {\n             let i = i * 2i64;\n             let j = j * 2i64;\n             let scale = scale - 1u;\n-            \n+\n             let x = r.gen_float();\n \n             if x < A {\n@@ -80,26 +80,26 @@ fn make_edges(scale: uint, edgefactor: uint) -> ~[(node_id, node_id)] {\n \n fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n     let graph = do vec::from_fn(N) |_i| {\n-        map::HashMap::<node_id, ()>()\n+        oldmap::HashMap::<node_id, ()>()\n     };\n \n     do vec::each(edges) |e| {\n         match *e {\n             (i, j) => {\n-                map::set_add(graph[i], j);\n-                map::set_add(graph[j], i);\n+                oldmap::set_add(graph[i], j);\n+                oldmap::set_add(graph[j], i);\n             }\n         }\n         true\n     }\n \n     do graph.map() |v| {\n-        map::vec_from_set(*v)\n+        oldmap::vec_from_set(*v)\n     }\n }\n \n fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n-    let keys = map::HashMap::<node_id, ()>();\n+    let keys = oldmap::HashMap::<node_id, ()>();\n     let r = rand::Rng();\n \n     while keys.size() < n {\n@@ -108,10 +108,10 @@ fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n         if graph[k].len() > 0u && vec::any(graph[k], |i| {\n             *i != k as node_id\n         }) {\n-            map::set_add(keys, k as node_id);\n+            oldmap::set_add(keys, k as node_id);\n         }\n     }\n-    map::vec_from_set(keys)\n+    oldmap::vec_from_set(keys)\n }\n \n /**\n@@ -120,7 +120,7 @@ fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n  * Nodes that are unreachable have a parent of -1.\n  */\n fn bfs(graph: graph, key: node_id) -> bfs_result {\n-    let marks : ~[mut node_id] \n+    let marks : ~[mut node_id]\n         = vec::cast_to_mut(vec::from_elem(vec::len(graph), -1i64));\n \n     let Q = deque::create();\n@@ -300,7 +300,7 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n }\n \n /// Performs at least some of the validation in the Graph500 spec.\n-fn validate(edges: ~[(node_id, node_id)], \n+fn validate(edges: ~[(node_id, node_id)],\n             root: node_id, tree: bfs_result) -> bool {\n     // There are 5 things to test. Below is code for each of them.\n \n@@ -336,7 +336,7 @@ fn validate(edges: ~[(node_id, node_id)],\n             path.len() as int\n         }\n     };\n-    \n+\n     if !status { return status }\n \n     // 2. Each tree edge connects vertices whose BFS levels differ by\n@@ -366,7 +366,7 @@ fn validate(edges: ~[(node_id, node_id)],\n         abs(level[u] - level[v]) <= 1\n     };\n \n-    if !status { return status }    \n+    if !status { return status }\n \n     // 4. The BFS tree spans an entire connected component's vertices.\n \n@@ -388,7 +388,7 @@ fn validate(edges: ~[(node_id, node_id)],\n         }\n     };\n \n-    if !status { return status }    \n+    if !status { return status }\n \n     // If we get through here, all the tests passed!\n     true\n@@ -440,44 +440,44 @@ fn main() {\n             let start = time::precise_time_s();\n             let bfs_tree = bfs(copy graph, *root);\n             let stop = time::precise_time_s();\n-            \n+\n             //total_seq += stop - start;\n \n             io::stdout().write_line(\n                 fmt!(\"Sequential BFS completed in %? seconds.\",\n                      stop - start));\n-            \n+\n             if do_validate {\n                 let start = time::precise_time_s();\n                 assert(validate(copy edges, *root, bfs_tree));\n                 let stop = time::precise_time_s();\n-                \n+\n                 io::stdout().write_line(\n                     fmt!(\"Validation completed in %? seconds.\",\n                          stop - start));\n             }\n-            \n+\n             let start = time::precise_time_s();\n             let bfs_tree = bfs2(copy graph, *root);\n             let stop = time::precise_time_s();\n-            \n+\n             total_seq += stop - start;\n-            \n+\n             io::stdout().write_line(\n                 fmt!(\"Alternate Sequential BFS completed in %? seconds.\",\n                      stop - start));\n-            \n+\n             if do_validate {\n                 let start = time::precise_time_s();\n                 assert(validate(copy edges, *root, bfs_tree));\n                 let stop = time::precise_time_s();\n-                \n+\n                 io::stdout().write_line(\n                     fmt!(\"Validation completed in %? seconds.\",\n                          stop - start));\n             }\n         }\n-        \n+\n         let start = time::precise_time_s();\n         let bfs_tree = pbfs(graph_arc, *root);\n         let stop = time::precise_time_s();\n@@ -491,7 +491,7 @@ fn main() {\n             let start = time::precise_time_s();\n             assert(validate(copy edges, *root, bfs_tree));\n             let stop = time::precise_time_s();\n-            \n+\n             io::stdout().write_line(fmt!(\"Validation completed in %? seconds.\",\n                                          stop - start));\n         }"}, {"sha": "6de8d13529a58ee04d89d11f8eff73d29fc039de", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -11,8 +11,8 @@\n // chameneos\n \n extern mod std;\n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::HashMap;\n use std::sort;\n use std::cell::Cell;\n use core::pipes::*;"}, {"sha": "2ffbe02840e1e63a2a5cef7a58b1ec15687debe1", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -14,15 +14,15 @@\n #[legacy_modes];\n \n extern mod std;\n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::HashMap;\n use std::sort;\n use io::ReaderUtil;\n use pipes::{stream, Port, Chan};\n use cmp::Ord;\n \n // given a map, print a sorted version of it\n-fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str { \n+fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str {\n    fn pct(xx: uint, yy: uint) -> float {\n       return (xx as float) * 100f / (yy as float);\n    }\n@@ -95,13 +95,13 @@ fn windows_with_carry(bb: &[u8], nn: uint,\n       ii += 1u;\n    }\n \n-   return vec::slice(bb, len - (nn - 1u), len); \n+   return vec::slice(bb, len - (nn - 1u), len);\n }\n \n fn make_sequence_processor(sz: uint, from_parent: pipes::Port<~[u8]>,\n                            to_parent: pipes::Chan<~str>) {\n-   \n-   let freqs: HashMap<~[u8], uint> = map::HashMap();\n+\n+   let freqs: HashMap<~[u8], uint> = oldmap::HashMap();\n    let mut carry: ~[u8] = ~[];\n    let mut total: uint = 0u;\n \n@@ -118,7 +118,7 @@ fn make_sequence_processor(sz: uint, from_parent: pipes::Port<~[u8]>,\n       });\n    }\n \n-   let buffer = match sz { \n+   let buffer = match sz {\n        1u => { sort_and_fmt(freqs, total) }\n        2u => { sort_and_fmt(freqs, total) }\n        3u => { fmt!(\"%u\\t%s\", find(freqs, ~\"GGT\"), ~\"GGT\") }\n@@ -165,11 +165,11 @@ fn main() {\n         do task::spawn_with(move from_parent) |move to_parent_, from_parent| {\n             make_sequence_processor(sz, from_parent, to_parent_);\n         };\n-        \n+\n         move to_child\n     });\n-         \n-   \n+\n+\n    // latch stores true after we've started\n    // reading the sequence of interest\n    let mut proc_mode = false;"}, {"sha": "1969160bfd8fa2de6879c0344b0a88749bb00b31", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -22,7 +22,7 @@\n \n extern mod std;\n use io::WriterUtil;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n struct cmplx {\n     re: f64,"}, {"sha": "55cbb1cbdcab165282dd9a082c0cd1249ec51de4", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -10,8 +10,8 @@\n \n //buggy.rs\n extern mod std;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n \n fn main() {\n     let buggy_map :HashMap<uint, &uint> ="}, {"sha": "3f49709420882992089ee5014650cf6a83713c43", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: mismatched types\n extern mod std;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::bitv;\n \n type fn_info = {vars: HashMap<uint, var_info>};"}, {"sha": "a504e374b95053e94cf9d1013b9a7163d2cc81cf", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -11,12 +11,12 @@\n // error-pattern:fail\n \n extern mod std;\n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::HashMap;\n \n fn main() {\n     let count = @mut 0u;\n-    let map = map::HashMap();\n+    let map = oldmap::HashMap();\n     let mut arr = ~[];\n     for uint::range(0u, 10u) |i| {\n         arr += ~[@~\"key stuff\"];"}, {"sha": "4b4eb1fc774b5eeb8e4eb735857b4a40c498387d", "filename": "src/test/run-pass/class-impl-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -12,7 +12,7 @@\n // xfail-fast\n \n extern mod std;\n-use std::map::*;\n+use std::oldmap::*;\n \n class cat : map<int, bool> {\n   priv {"}, {"sha": "6d2fb9843652ed140d54e6fc97bf5273da9da8eb", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n \n extern mod std;\n-use std::map::*;\n+use std::oldmap::*;\n use vec::*;\n use dvec::{dvec, extensions};\n "}, {"sha": "e3c4703432fecd979a9c7e79e7b980e824e16d1f", "filename": "src/test/run-pass/class-trait-bounded-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n \n extern mod std;\n-use std::map::{map, hashmap, int_hash};\n+use std::oldmap::{map, hashmap, int_hash};\n \n class keys<K: Copy, V: Copy, M: Copy map<K,V>>\n     : iter::base_iter<K> {"}, {"sha": "f81b33105e63eacb4d71a24b6487f00abee79c46", "filename": "src/test/run-pass/duplicate-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fduplicate-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fduplicate-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fduplicate-use.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n extern mod std;\n \n-use list = std::map::chained;\n+use list = std::oldmap::chained;\n use std::list;\n \n pub fn main() {"}, {"sha": "2a7843bdccd2246f250559ed16bec0d20a747779", "filename": "src/test/run-pass/extern-mod-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n extern mod std;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn main() {\n     io::println(\"Hello world!\");"}, {"sha": "43e2bee644a75c3a9a1e2470db6478efdef5ab1c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -18,15 +18,15 @@\n \n extern mod std;\n \n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap;\n+use std::oldmap::HashMap;\n use core::pipes::*;\n \n pub fn map(filename: ~str, emit: map_reduce::putter) { emit(filename, ~\"1\"); }\n \n mod map_reduce {\n-    use std::map;\n-    use std::map::HashMap;\n+    use std::oldmap;\n+    use std::oldmap::HashMap;\n     use core::pipes::*;\n \n     pub type putter = fn@(~str, ~str);\n@@ -44,9 +44,9 @@ mod map_reduce {\n     }\n \n     fn map_task(ctrl: SharedChan<ctrl_proto>, input: ~str) {\n-        let intermediates = map::HashMap();\n+        let intermediates = oldmap::HashMap();\n \n-        fn emit(im: map::HashMap<~str, int>, ctrl: SharedChan<ctrl_proto>, key: ~str,\n+        fn emit(im: oldmap::HashMap<~str, int>, ctrl: SharedChan<ctrl_proto>, key: ~str,\n                 val: ~str) {\n             let mut c;\n             match im.find(copy key) {\n@@ -75,9 +75,9 @@ mod map_reduce {\n         // This task becomes the master control task. It spawns others\n         // to do the rest.\n \n-        let mut reducers: map::HashMap<~str, int>;\n+        let mut reducers: oldmap::HashMap<~str, int>;\n \n-        reducers = map::HashMap();\n+        reducers = oldmap::HashMap();\n \n         start_mappers(ctrl_chan, copy inputs);\n "}, {"sha": "fb61e34f351e691a6753c51b62ad3f26d0710163", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -11,11 +11,10 @@\n // except according to those terms.\n \n extern mod std;\n-use std::map;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n pub fn main() {\n-    let m = map::HashMap();\n+    let m = HashMap();\n     m.insert(str::to_bytes(~\"foo\"), str::to_bytes(~\"bar\"));\n     log(error, m);\n }"}, {"sha": "79c884f869f3fe604424acd99de50d3f2d50f5c0", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -15,8 +15,8 @@ extern mod req;\n extern mod std;\n \n use req::*;\n-use std::map::*;\n-use std::map::HashMap;\n+use std::oldmap::*;\n+use std::oldmap::HashMap;\n \n pub fn main() {\n   let v = ~[@~\"hi\"];"}, {"sha": "9fe88227c4435ba4b04f3bf7517e716dbcdb2c37", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -13,9 +13,9 @@\n // Minimized version of issue-2804.rs. Both check that callee IDs don't\n // clobber the previous node ID in a macro expr\n extern mod std;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n \n-fn add_interfaces(managed_ip: ~str, device: std::map::HashMap<~str, int>)  {\n+fn add_interfaces(managed_ip: ~str, device: std::oldmap::HashMap<~str, int>)  {\n      error!(\"%s, %?\", managed_ip, device[~\"interfaces\"]);\n }\n "}, {"sha": "613652ec8524d5deb7dca938d79c46677c907f6b", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -12,7 +12,7 @@\n \n extern mod std;\n use io::WriterUtil;\n-use std::map::HashMap;\n+use std::oldmap::HashMap;\n use std::json;\n \n enum object\n@@ -60,7 +60,7 @@ fn add_interface(store: int, managed_ip: ~str, data: std::json::Json) -> (~str,\n     }\n }\n \n-fn add_interfaces(store: int, managed_ip: ~str, device: std::map::HashMap<~str, std::json::Json>) -> ~[(~str, object)]\n+fn add_interfaces(store: int, managed_ip: ~str, device: std::oldmap::HashMap<~str, std::json::Json>) -> ~[(~str, object)]\n {\n     match device[~\"interfaces\"]\n     {"}, {"sha": "32f7d2ee07cee255bc081cdf8407a3a276440659", "filename": "src/test/run-pass/issue-3026.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3026.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -11,8 +11,8 @@\n // except according to those terms.\n \n extern mod std;\n-use std::map::HashMap;\n-use std::map;\n+use std::oldmap::HashMap;\n+use std::oldmap;\n \n pub fn main() {\n     let buggy_map :HashMap<uint, &uint> = HashMap::<uint, &uint>();"}, {"sha": "aff0b4fc71e589b906b1801c158dbb8ee532118d", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -14,7 +14,7 @@\n extern mod std;\n \n use core::io::{WriterUtil};\n-use std::map::*;\n+use std::oldmap::*;\n \n #[cfg(test)]\n fn check_strs(actual: &str, expected: &str) -> bool"}, {"sha": "5cfb5809feb7187ba8e7b89a04356675a18468d6", "filename": "src/test/run-pass/issue-4092.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-4092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f/src%2Ftest%2Frun-pass%2Fissue-4092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4092.rs?ref=319eeb1c791324d1ba3a46513ab5f2c5a8e7fc5f", "patch": "@@ -11,6 +11,6 @@\n extern mod std;\n \n pub fn main() {\n-    let x = std::map::HashMap();\n+    let x = std::oldmap::HashMap();\n     x.insert((@\"abc\", 0), 0);\n }"}]}