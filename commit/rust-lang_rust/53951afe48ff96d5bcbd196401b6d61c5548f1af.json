{"sha": "53951afe48ff96d5bcbd196401b6d61c5548f1af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOTUxYWZlNDhmZjk2ZDViY2JkMTk2NDAxYjZkNjFjNTU0OGYxYWY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-15T14:48:17Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-19T18:02:52Z"}, "message": "librustc: convert lint_dict to take @~strs as keys", "tree": {"sha": "3549b1889d31c6c14ce3d1e04613bc39528aeebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3549b1889d31c6c14ce3d1e04613bc39528aeebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53951afe48ff96d5bcbd196401b6d61c5548f1af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53951afe48ff96d5bcbd196401b6d61c5548f1af", "html_url": "https://github.com/rust-lang/rust/commit/53951afe48ff96d5bcbd196401b6d61c5548f1af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53951afe48ff96d5bcbd196401b6d61c5548f1af/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04334c1ae0fe4a0cd532097d9074d842ddfcb079", "url": "https://api.github.com/repos/rust-lang/rust/commits/04334c1ae0fe4a0cd532097d9074d842ddfcb079", "html_url": "https://github.com/rust-lang/rust/commit/04334c1ae0fe4a0cd532097d9074d842ddfcb079"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "61838c50ce4f10f26bae6129761bdb6b9ea44080", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53951afe48ff96d5bcbd196401b6d61c5548f1af/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53951afe48ff96d5bcbd196401b6d61c5548f1af/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=53951afe48ff96d5bcbd196401b6d61c5548f1af", "patch": "@@ -541,11 +541,11 @@ pub fn build_session_options(+binary: ~str,\n         let flags = vec::append(getopts::opt_strs(matches, level_short),\n                                 getopts::opt_strs(matches, level_name));\n         for flags.each |lint_name| {\n-            let lint_name = str::replace(*lint_name, ~\"-\", ~\"_\");\n+            let lint_name = @str::replace(*lint_name, ~\"-\", ~\"_\");\n             match lint_dict.find(&lint_name) {\n               None => {\n                 early_error(demitter, fmt!(\"unknown %s flag: %s\",\n-                                           level_name, lint_name));\n+                                           level_name, *lint_name));\n               }\n               Some(lint) => {\n                 lint_opts.push((lint.lint, *level));"}, {"sha": "191e17ed15a7d610e418526ed79e233a912d739c", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/53951afe48ff96d5bcbd196401b6d61c5548f1af/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53951afe48ff96d5bcbd196401b6d61c5548f1af/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=53951afe48ff96d5bcbd196401b6d61c5548f1af", "patch": "@@ -117,117 +117,117 @@ type lint_spec = @{lint: lint,\n                    desc: &static/str,\n                    default: level};\n \n-pub type lint_dict = HashMap<~str,lint_spec>;\n+pub type lint_dict = HashMap<@~str, lint_spec>;\n \n /*\n   Pass names should not contain a '-', as the compiler normalizes\n   '-' to '_' in command-line flags\n  */\n pub fn get_lint_dict() -> lint_dict {\n     let v = ~[\n-        (~\"ctypes\",\n+        (@~\"ctypes\",\n          @{lint: ctypes,\n            desc: \"proper use of core::libc types in foreign modules\",\n            default: warn}),\n \n-        (~\"unused_imports\",\n+        (@~\"unused_imports\",\n          @{lint: unused_imports,\n            desc: \"imports that are never used\",\n            default: allow}),\n \n-        (~\"while_true\",\n+        (@~\"while_true\",\n          @{lint: while_true,\n            desc: \"suggest using loop { } instead of while(true) { }\",\n            default: warn}),\n \n-        (~\"path_statement\",\n+        (@~\"path_statement\",\n          @{lint: path_statement,\n            desc: \"path statements with no effect\",\n            default: warn}),\n \n-        (~\"unrecognized_lint\",\n+        (@~\"unrecognized_lint\",\n          @{lint: unrecognized_lint,\n            desc: \"unrecognized lint attribute\",\n            default: warn}),\n \n-        (~\"non_implicitly_copyable_typarams\",\n+        (@~\"non_implicitly_copyable_typarams\",\n          @{lint: non_implicitly_copyable_typarams,\n            desc: \"passing non implicitly copyable types as copy type params\",\n            default: warn}),\n \n-        (~\"vecs_implicitly_copyable\",\n+        (@~\"vecs_implicitly_copyable\",\n          @{lint: vecs_implicitly_copyable,\n            desc: \"make vecs and strs not implicitly copyable \\\n                   (only checked at top level)\",\n            default: warn}),\n \n-        (~\"implicit_copies\",\n+        (@~\"implicit_copies\",\n          @{lint: implicit_copies,\n            desc: \"implicit copies of non implicitly copyable data\",\n            default: warn}),\n \n-        (~\"deprecated_mode\",\n+        (@~\"deprecated_mode\",\n          @{lint: deprecated_mode,\n            desc: \"warn about deprecated uses of modes\",\n            default: warn}),\n \n-        (~\"deprecated_pattern\",\n+        (@~\"deprecated_pattern\",\n          @{lint: deprecated_pattern,\n            desc: \"warn about deprecated uses of pattern bindings\",\n            default: allow}),\n \n-        (~\"non_camel_case_types\",\n+        (@~\"non_camel_case_types\",\n          @{lint: non_camel_case_types,\n            desc: \"types, variants and traits should have camel case names\",\n            default: allow}),\n \n-        (~\"managed_heap_memory\",\n+        (@~\"managed_heap_memory\",\n          @{lint: managed_heap_memory,\n            desc: \"use of managed (@ type) heap memory\",\n            default: allow}),\n \n-        (~\"owned_heap_memory\",\n+        (@~\"owned_heap_memory\",\n          @{lint: owned_heap_memory,\n            desc: \"use of owned (~ type) heap memory\",\n            default: allow}),\n \n-        (~\"heap_memory\",\n+        (@~\"heap_memory\",\n          @{lint: heap_memory,\n            desc: \"use of any (~ type or @ type) heap memory\",\n            default: allow}),\n \n-        (~\"structural_records\",\n+        (@~\"structural_records\",\n          @{lint: structural_records,\n            desc: \"use of any structural records\",\n            default: deny}),\n \n-        (~\"legacy modes\",\n+        (@~\"legacy modes\",\n          @{lint: legacy_modes,\n            desc: \"allow legacy modes\",\n            default: forbid}),\n \n-        (~\"type_limits\",\n+        (@~\"type_limits\",\n          @{lint: type_limits,\n            desc: \"comparisons made useless by limits of the types involved\",\n            default: warn}),\n \n-        (~\"default_methods\",\n+        (@~\"default_methods\",\n          @{lint: default_methods,\n            desc: \"allow default methods\",\n            default: deny}),\n \n-        (~\"deprecated_self\",\n+        (@~\"deprecated_self\",\n          @{lint: deprecated_self,\n            desc: \"warn about deprecated uses of `self`\",\n            default: warn}),\n \n         /* FIXME(#3266)--make liveness warnings lintable\n-        (~\"unused_variable\",\n+        (@~\"unused_variable\",\n          @{lint: unused_variable,\n            desc: \"detect variables which are not used in any way\",\n            default: warn}),\n \n-        (~\"dead_assignment\",\n+        (@~\"dead_assignment\",\n          @{lint: dead_assignment,\n            desc: \"detect assignments that will never be read\",\n            default: warn}),\n@@ -344,9 +344,14 @@ impl ctxt {\n             }\n         }\n \n-        for triples.each |pair| {\n-            let (meta, level, lintname) = /*bad*/copy *pair;\n-            match self.dict.find(&*lintname) {\n+        for triples.each |triple| {\n+            // FIXME(#3874): it would be nicer to write this...\n+            // let (meta, level, lintname) = /*bad*/copy *pair;\n+            let (meta, level, lintname) = match *triple {\n+                (ref meta, level, lintname) => (meta, level, lintname)\n+            };\n+\n+            match self.dict.find(&lintname) {\n               None => {\n                 self.span_lint(\n                     new_ctxt.get_level(unrecognized_lint),"}, {"sha": "b1ac8bb2d5c4eb13f70624dc90f7f3e5d2926467", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53951afe48ff96d5bcbd196401b6d61c5548f1af/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/53951afe48ff96d5bcbd196401b6d61c5548f1af/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=53951afe48ff96d5bcbd196401b6d61c5548f1af", "patch": "@@ -187,7 +187,7 @@ Available lint options:\n     io::println(fmt!(\"    %s  %7.7s  %s\\n\",\n                      padded(max_key, ~\"----\"), ~\"-------\", ~\"-------\"));\n     for lint_dict.each |&k, &v| {\n-        let k = str::replace(k, ~\"_\", ~\"-\");\n+        let k = str::replace(*k, ~\"_\", ~\"-\");\n         io::println(fmt!(\"    %s  %7.7s  %s\",\n                          padded(max_key, k),\n                          match v.default {"}]}