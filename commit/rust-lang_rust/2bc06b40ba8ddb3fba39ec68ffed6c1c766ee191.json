{"sha": "2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYzA2YjQwYmE4ZGRiM2ZiYTM5ZWM2OGZmZWQ2YzFjNzY2ZWUxOTE=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-07-10T14:35:59Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-07-10T14:35:59Z"}, "message": "Implement SIMD arithmetics", "tree": {"sha": "754ca1835805fa9d5b907dc7fd08ccdc6c9d6ef0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/754ca1835805fa9d5b907dc7fd08ccdc6c9d6ef0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191", "html_url": "https://github.com/rust-lang/rust/commit/2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5e9194836cab666163cf97cfbea6a323edad882", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e9194836cab666163cf97cfbea6a323edad882", "html_url": "https://github.com/rust-lang/rust/commit/b5e9194836cab666163cf97cfbea6a323edad882"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "118eeeeec1f2ccda61fff4961d623be2d8d8f90a", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191", "patch": "@@ -1380,11 +1380,16 @@ fn trans_eager_binop(bcx: block,\n     let rhs = rhs_datum.to_appropriate_llval(bcx);\n     let rhs_t = rhs_datum.ty;\n \n-    let intype = {\n+    let mut intype = {\n         if ty::type_is_bot(lhs_t) { rhs_t }\n         else { lhs_t }\n     };\n+    let tcx = bcx.tcx();\n+    if ty::type_is_simd(tcx, intype) {\n+        intype = ty::simd_type(tcx, intype);\n+    }\n     let is_float = ty::type_is_fp(intype);\n+    let signed = ty::type_is_signed(intype);\n \n     let rhs = base::cast_shift_expr_rhs(bcx, op, lhs, rhs);\n \n@@ -1409,7 +1414,7 @@ fn trans_eager_binop(bcx: block,\n             // Only zero-check integers; fp /0 is NaN\n             bcx = base::fail_if_zero(bcx, binop_expr.span,\n                                      op, rhs, rhs_t);\n-            if ty::type_is_signed(intype) {\n+            if signed {\n                 SDiv(bcx, lhs, rhs)\n             } else {\n                 UDiv(bcx, lhs, rhs)\n@@ -1423,7 +1428,7 @@ fn trans_eager_binop(bcx: block,\n             // Only zero-check integers; fp %0 is NaN\n             bcx = base::fail_if_zero(bcx, binop_expr.span,\n                                      op, rhs, rhs_t);\n-            if ty::type_is_signed(intype) {\n+            if signed {\n                 SRem(bcx, lhs, rhs)\n             } else {\n                 URem(bcx, lhs, rhs)\n@@ -1435,7 +1440,7 @@ fn trans_eager_binop(bcx: block,\n       ast::bitxor => Xor(bcx, lhs, rhs),\n       ast::shl => Shl(bcx, lhs, rhs),\n       ast::shr => {\n-        if ty::type_is_signed(intype) {\n+        if signed {\n             AShr(bcx, lhs, rhs)\n         } else { LShr(bcx, lhs, rhs) }\n       }"}, {"sha": "5a02449cee91ef00d69df01cc5436a0e1264d4c0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191", "patch": "@@ -1661,7 +1661,8 @@ fn type_is_newtype_immediate(cx: ctxt, ty: t) -> bool {\n pub fn type_is_immediate(cx: ctxt, ty: t) -> bool {\n     return type_is_scalar(ty) || type_is_boxed(ty) ||\n         type_is_unique(ty) || type_is_region_ptr(ty) ||\n-        type_is_newtype_immediate(cx, ty);\n+        type_is_newtype_immediate(cx, ty) ||\n+        type_is_simd(cx, ty);\n }\n \n pub fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n@@ -4074,7 +4075,7 @@ pub fn struct_fields(cx: ctxt, did: ast::def_id, substs: &substs)\n     }\n }\n \n-pub fn is_binopable(_cx: ctxt, ty: t, op: ast::binop) -> bool {\n+pub fn is_binopable(cx: ctxt, ty: t, op: ast::binop) -> bool {\n     static tycat_other: int = 0;\n     static tycat_bool: int = 1;\n     static tycat_int: int = 2;\n@@ -4114,7 +4115,10 @@ pub fn is_binopable(_cx: ctxt, ty: t, op: ast::binop) -> bool {\n         }\n     }\n \n-    fn tycat(ty: t) -> int {\n+    fn tycat(cx: ctxt, ty: t) -> int {\n+        if type_is_simd(cx, ty) {\n+            return tycat(cx, simd_type(cx, ty))\n+        }\n         match get(ty).sty {\n           ty_bool => tycat_bool,\n           ty_int(_) | ty_uint(_) | ty_infer(IntVar(_)) => tycat_int,\n@@ -4139,7 +4143,7 @@ pub fn is_binopable(_cx: ctxt, ty: t, op: ast::binop) -> bool {\n     /*bot*/     ~[f, f, f, f, f, f, f, f],\n     /*struct*/  ~[t, t, t, t, f, f, t, t]];\n \n-    return tbl[tycat(ty)][opcat(op)];\n+    return tbl[tycat(cx, ty)][opcat(op)];\n }\n \n pub fn ty_params_to_tys(tcx: ty::ctxt, generics: &ast::Generics) -> ~[t] {"}, {"sha": "1e6c8b07fa0ee3b6baab0532d739a35597a245df", "filename": "src/test/run-pass/simd-binop.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=2bc06b40ba8ddb3fba39ec68ffed6c1c766ee191", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::unstable::simd::{i32x4, f32x4};\n+\n+fn test_int(e: i32) -> i32 {\n+    let v = i32x4(e, 0i32, 0i32, 0i32);\n+    let i32x4(e2, _, _, _) = v * v + v - v;\n+    e2\n+}\n+\n+fn test_float(e: f32) -> f32 {\n+    let v = f32x4(e, 0f32, 0f32, 0f32);\n+    let f32x4(e2, _, _, _) = v * v + v - v;\n+    e2\n+}\n+\n+fn main() {\n+    assert_eq!(test_int(3i32), 9i32);\n+    assert_eq!(test_float(3f32), 9f32);\n+}"}]}