{"sha": "15e55f5df5e13dd7867d86df6bc26c49b7d77944", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZTU1ZjVkZjVlMTNkZDc4NjdkODZkZjZiYzI2YzQ5YjdkNzc5NDQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-24T18:25:59Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-24T18:56:48Z"}, "message": "Deprecates 4 lints\n\nNamely STR_TO_STRING, STRING_TO_STRING, UNSTABLE_AS_SLICE and\nUNSTABLE_AS_MUT_SLICE.", "tree": {"sha": "b54dd975124230f7ba7261b2615f8c7ec4b0554f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b54dd975124230f7ba7261b2615f8c7ec4b0554f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15e55f5df5e13dd7867d86df6bc26c49b7d77944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15e55f5df5e13dd7867d86df6bc26c49b7d77944", "html_url": "https://github.com/rust-lang/rust/commit/15e55f5df5e13dd7867d86df6bc26c49b7d77944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15e55f5df5e13dd7867d86df6bc26c49b7d77944/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68b2f12adf35d007c17dcdee4e2447db2c44c43e", "url": "https://api.github.com/repos/rust-lang/rust/commits/68b2f12adf35d007c17dcdee4e2447db2c44c43e", "html_url": "https://github.com/rust-lang/rust/commit/68b2f12adf35d007c17dcdee4e2447db2c44c43e"}], "stats": {"total": 286, "additions": 115, "deletions": 171}, "files": [{"sha": "b3e6937604db723088295062b80f776c331f3eea", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15e55f5df5e13dd7867d86df6bc26c49b7d77944/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/15e55f5df5e13dd7867d86df6bc26c49b7d77944/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=15e55f5df5e13dd7867d86df6bc26c49b7d77944", "patch": "@@ -14,7 +14,7 @@ Table of contents:\n * [License](#license)\n \n ##Lints\n-There are 138 lints included in this crate:\n+There are 134 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -124,11 +124,9 @@ name\n [single_char_pattern](https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern)                           | warn    | using a single-character str where a char could be used, e.g. `_.split(\"x\")`\n [single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                                         | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n [single_match_else](https://github.com/Manishearth/rust-clippy/wiki#single_match_else)                               | allow   | a match statement with a two arms where the second arm's pattern is a wildcard; recommends `if let` instead\n-[str_to_string](https://github.com/Manishearth/rust-clippy/wiki#str_to_string)                                       | warn    | using `to_string()` on a str, which should be `to_owned()`\n [string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                             | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n [string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                               | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n [string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                           | warn    | calling `as_bytes` on a string literal; suggests using a byte string literal instead\n-[string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                                 | warn    | calling `String::to_string` which is inefficient\n [suspicious_assignment_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting) | warn    | suspicious formatting of `*=`, `-=` or `!=`\n [suspicious_else_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_else_formatting)             | warn    | suspicious formatting of `else if`\n [temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                         | warn    | assignments to temporaries\n@@ -140,8 +138,6 @@ name\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n [unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)                     | warn    | an argument is passed as a mutable reference although the function/method only demands an immutable reference\n [unneeded_field_pattern](https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern)                     | warn    | Struct fields are bound to a wildcard instead of using `..`\n-[unstable_as_mut_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_mut_slice)                       | warn    | as_mut_slice is not stable and can be replaced by &mut v[..]see https://github.com/rust-lang/rust/issues/27729\n-[unstable_as_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_slice)                               | warn    | as_slice is not stable and can be replaced by & v[..]see https://github.com/rust-lang/rust/issues/27729\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                                     | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n [unused_label](https://github.com/Manishearth/rust-clippy/wiki#unused_label)                                         | warn    | unused label\n [unused_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes)                                 | warn    | unused lifetimes in function definitions"}, {"sha": "abdb6297b9eec7402d325e5758278395c64d803f", "filename": "src/deprecated_lints.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/15e55f5df5e13dd7867d86df6bc26c49b7d77944/src%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e55f5df5e13dd7867d86df6bc26c49b7d77944/src%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdeprecated_lints.rs?ref=15e55f5df5e13dd7867d86df6bc26c49b7d77944", "patch": "@@ -0,0 +1,44 @@\n+macro_rules! declare_deprecated_lint {\n+    (pub $name: ident, $_reason: expr) => {\n+        declare_lint!(pub $name, Allow, \"deprecated lint\")\n+    }\n+}\n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** This used to check for `Vec::as_slice`, which was unstable with good\n+/// stable alternatives. `Vec::as_slice` has now been stabilized.\n+declare_deprecated_lint! {\n+    pub UNSTABLE_AS_SLICE,\n+    \"`Vec::as_slice` has been stabilized in 1.7\"\n+}\n+\n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** This used to check for `Vec::as_mut_slice`, which was unstable with good\n+/// stable alternatives. `Vec::as_mut_slice` has now been stabilized.\n+declare_deprecated_lint! {\n+    pub UNSTABLE_AS_MUT_SLICE,\n+    \"`Vec::as_mut_slice` has been stabilized in 1.7\"\n+}\n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n+/// of type `&str`. This is not unidiomatic and with specialization coming, `to_string` could be\n+/// specialized to be as efficient as `to_owned`.\n+declare_deprecated_lint! {\n+    pub STR_TO_STRING,\n+    \"using `str::to_string` is common even today and specialization will likely happen soon\"\n+}\n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** This used to check for `.to_string()` method calls on values\n+/// of type `String`. This is not unidiomatic and with specialization coming, `to_string` could be\n+/// specialized to be as efficient as `clone`.\n+declare_deprecated_lint! {\n+    pub STRING_TO_STRING,\n+    \"using `string::to_string` is common even today and specialization will likely happen soon\"\n+}"}, {"sha": "ffa66fd581b05453ca8034d7b41bf62a59ad76b6", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/15e55f5df5e13dd7867d86df6bc26c49b7d77944/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e55f5df5e13dd7867d86df6bc26c49b7d77944/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=15e55f5df5e13dd7867d86df6bc26c49b7d77944", "patch": "@@ -81,7 +81,6 @@ pub mod mut_mut;\n pub mod mut_reference;\n pub mod mutex_atomic;\n pub mod needless_bool;\n-pub mod needless_features;\n pub mod needless_update;\n pub mod new_without_default;\n pub mod no_effect;\n@@ -141,6 +140,13 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         }\n     };\n \n+    let mut store = reg.sess.lint_store.borrow_mut();\n+    store.register_removed(\"unstable_as_slice\", \"`Vec::as_slice` has been stabilized in 1.7\");\n+    store.register_removed(\"unstable_as_mut_slice\", \"`Vec::as_mut_slice` has been stabilized in 1.7\");\n+    store.register_removed(\"str_to_string\", \"using `str::to_string` is common even today and specialization will likely happen soon\");\n+    store.register_removed(\"string_to_string\", \"using `string::to_string` is common even today and specialization will likely happen soon\");\n+    // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n+\n     reg.register_late_lint_pass(box types::TypePass);\n     reg.register_late_lint_pass(box misc::TopLevelRefPass);\n     reg.register_late_lint_pass(box misc::CmpNan);\n@@ -185,7 +191,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box open_options::NonSensicalOpenOptions);\n     reg.register_late_lint_pass(box zero_div_zero::ZeroDivZeroPass);\n     reg.register_late_lint_pass(box mutex_atomic::MutexAtomic);\n-    reg.register_late_lint_pass(box needless_features::NeedlessFeaturesPass);\n     reg.register_late_lint_pass(box needless_update::NeedlessUpdatePass);\n     reg.register_late_lint_pass(box no_effect::NoEffectPass);\n     reg.register_late_lint_pass(box map_clone::MapClonePass);\n@@ -308,8 +313,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         methods::SEARCH_IS_SOME,\n         methods::SHOULD_IMPLEMENT_TRAIT,\n         methods::SINGLE_CHAR_PATTERN,\n-        methods::STR_TO_STRING,\n-        methods::STRING_TO_STRING,\n         methods::WRONG_SELF_CONVENTION,\n         minmax::MIN_MAX,\n         misc::CMP_NAN,\n@@ -326,8 +329,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         mutex_atomic::MUTEX_ATOMIC,\n         needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,\n-        needless_features::UNSTABLE_AS_MUT_SLICE,\n-        needless_features::UNSTABLE_AS_SLICE,\n         needless_update::NEEDLESS_UPDATE,\n         new_without_default::NEW_WITHOUT_DEFAULT,\n         no_effect::NO_EFFECT,"}, {"sha": "95bbdd441c964858b74abf1f2701a031360f79ac", "filename": "src/methods.rs", "status": "modified", "additions": 2, "deletions": 51, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/15e55f5df5e13dd7867d86df6bc26c49b7d77944/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e55f5df5e13dd7867d86df6bc26c49b7d77944/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=15e55f5df5e13dd7867d86df6bc26c49b7d77944", "patch": "@@ -6,13 +6,13 @@ use rustc::middle::subst::{Subst, TypeSpace};\n use rustc::middle::ty;\n use rustc_front::hir::*;\n use std::borrow::Cow;\n-use std::{fmt, iter};\n+use std::fmt;\n use syntax::codemap::Span;\n use syntax::ptr::P;\n use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, match_path, match_trait_method,\n             match_type, method_chain_args, return_ty, same_tys, snippet, snippet_opt, span_lint,\n             span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n-use utils::{BTREEMAP_ENTRY_PATH, DEFAULT_TRAIT_PATH, HASHMAP_ENTRY_PATH, OPTION_PATH, RESULT_PATH, STRING_PATH,\n+use utils::{BTREEMAP_ENTRY_PATH, DEFAULT_TRAIT_PATH, HASHMAP_ENTRY_PATH, OPTION_PATH, RESULT_PATH,\n             VEC_PATH};\n use utils::MethodArgs;\n \n@@ -45,31 +45,6 @@ declare_lint! {\n     \"using `Result.unwrap()`, which might be better handled\"\n }\n \n-/// **What it does:** This lint checks for `.to_string()` method calls on values of type `&str`.\n-///\n-/// **Why is this bad?** This uses the whole formatting machinery just to clone a string. Using `.to_owned()` is lighter on resources. You can also consider using a [`Cow<'a, str>`](http://doc.rust-lang.org/std/borrow/enum.Cow.html) instead in some cases.\n-///\n-/// **Known problems:** None\n-///\n-/// **Example:** `s.to_string()` where `s: &str`\n-declare_lint! {\n-    pub STR_TO_STRING, Warn,\n-    \"using `to_string()` on a str, which should be `to_owned()`\"\n-}\n-\n-/// **What it does:** This lint checks for `.to_string()` method calls on values of type `String`.\n-///\n-/// **Why is this bad?** This is an non-efficient way to clone a `String`, `.clone()` should be used\n-/// instead. `String` implements `ToString` mostly for generics.\n-///\n-/// **Known problems:** None\n-///\n-/// **Example:** `s.to_string()` where `s: String`\n-declare_lint! {\n-    pub STRING_TO_STRING, Warn,\n-    \"calling `String::to_string` which is inefficient\"\n-}\n-\n /// **What it does:** This lint checks for methods that should live in a trait implementation of a `std` trait (see [llogiq's blog post](http://llogiq.github.io/2015/07/30/traits.html) for further information) instead of an inherent implementation.\n ///\n /// **Why is this bad?** Implementing the traits improve ergonomics for users of the code, often with very little cost. Also people seeing a `mul(..)` method may expect `*` to work equally, so you should have good reason to disappoint them.\n@@ -315,8 +290,6 @@ impl LintPass for MethodsPass {\n         lint_array!(EXTEND_FROM_SLICE,\n                     OPTION_UNWRAP_USED,\n                     RESULT_UNWRAP_USED,\n-                    STR_TO_STRING,\n-                    STRING_TO_STRING,\n                     SHOULD_IMPLEMENT_TRAIT,\n                     WRONG_SELF_CONVENTION,\n                     WRONG_PUB_SELF_CONVENTION,\n@@ -343,8 +316,6 @@ impl LateLintPass for MethodsPass {\n                 // Chain calls\n                 if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n                     lint_unwrap(cx, expr, arglists[0]);\n-                } else if let Some(arglists) = method_chain_args(expr, &[\"to_string\"]) {\n-                    lint_to_string(cx, expr, arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"ok\", \"expect\"]) {\n                     lint_ok_expect(cx, expr, arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"map\", \"unwrap_or\"]) {\n@@ -640,26 +611,6 @@ fn lint_unwrap(cx: &LateContext, expr: &Expr, unwrap_args: &MethodArgs) {\n     }\n }\n \n-#[allow(ptr_arg)]\n-// Type of MethodArgs is potentially a Vec\n-/// lint use of `to_string()` for `&str`s and `String`s\n-fn lint_to_string(cx: &LateContext, expr: &Expr, to_string_args: &MethodArgs) {\n-    let (obj_ty, ptr_depth) = walk_ptrs_ty_depth(cx.tcx.expr_ty(&to_string_args[0]));\n-\n-    if obj_ty.sty == ty::TyStr {\n-        let mut arg_str = snippet(cx, to_string_args[0].span, \"_\");\n-        if ptr_depth > 1 {\n-            arg_str = Cow::Owned(format!(\"({}{})\", iter::repeat('*').take(ptr_depth - 1).collect::<String>(), arg_str));\n-        }\n-        span_lint(cx, STR_TO_STRING, expr.span, &format!(\"`{}.to_owned()` is faster\", arg_str));\n-    } else if match_type(cx, obj_ty, &STRING_PATH) {\n-        span_lint(cx,\n-                  STRING_TO_STRING,\n-                  expr.span,\n-                  \"`String::to_string` is an inefficient way to clone a `String`; use `clone()` instead\");\n-    }\n-}\n-\n #[allow(ptr_arg)]\n // Type of MethodArgs is potentially a Vec\n /// lint use of `ok().expect()` for `Result`s"}, {"sha": "f80ac48320ec995e5dc232e1024ddcc806be38a0", "filename": "src/needless_features.rs", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/68b2f12adf35d007c17dcdee4e2447db2c44c43e/src%2Fneedless_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b2f12adf35d007c17dcdee4e2447db2c44c43e/src%2Fneedless_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_features.rs?ref=68b2f12adf35d007c17dcdee4e2447db2c44c43e", "patch": "@@ -1,68 +0,0 @@\n-//! Checks for usage of nightly features that have simple stable equivalents\n-//!\n-//! This lint is **warn** by default\n-\n-use rustc::lint::*;\n-use rustc_front::hir::*;\n-use utils::span_lint;\n-use utils;\n-\n-/// **What it does:** This lint checks for usage of the `as_slice(..)` function, which is unstable.\n-///\n-/// **Why is this bad?** Using this function doesn't make your code better, but it will preclude it from building with stable Rust.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:** `x.as_slice(..)`\n-declare_lint! {\n-    pub UNSTABLE_AS_SLICE,\n-    Warn,\n-    \"as_slice is not stable and can be replaced by & v[..]\\\n-see https://github.com/rust-lang/rust/issues/27729\"\n-}\n-\n-/// **What it does:** This lint checks for usage of the `as_mut_slice(..)` function, which is unstable.\n-///\n-/// **Why is this bad?** Using this function doesn't make your code better, but it will preclude it from building with stable Rust.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:** `x.as_mut_slice(..)`\n-declare_lint! {\n-    pub UNSTABLE_AS_MUT_SLICE,\n-    Warn,\n-    \"as_mut_slice is not stable and can be replaced by &mut v[..]\\\n-see https://github.com/rust-lang/rust/issues/27729\"\n-}\n-\n-#[derive(Copy,Clone)]\n-pub struct NeedlessFeaturesPass;\n-\n-impl LintPass for NeedlessFeaturesPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNSTABLE_AS_SLICE, UNSTABLE_AS_MUT_SLICE)\n-    }\n-}\n-\n-impl LateLintPass for NeedlessFeaturesPass {\n-    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n-        if let ExprMethodCall(ref name, _, _) = expr.node {\n-            if name.node.as_str() == \"as_slice\" && check_paths(cx, expr) {\n-                span_lint(cx,\n-                          UNSTABLE_AS_SLICE,\n-                          expr.span,\n-                          \"used as_slice() from the 'convert' nightly feature. Use &[..] instead\");\n-            }\n-            if name.node.as_str() == \"as_mut_slice\" && check_paths(cx, expr) {\n-                span_lint(cx,\n-                          UNSTABLE_AS_MUT_SLICE,\n-                          expr.span,\n-                          \"used as_mut_slice() from the 'convert' nightly feature. Use &mut [..] instead\");\n-            }\n-        }\n-    }\n-}\n-\n-fn check_paths(cx: &LateContext, expr: &Expr) -> bool {\n-    utils::match_impl_method(cx, expr, &[\"collections\", \"vec\", \"Vec<T>\"])\n-}"}, {"sha": "eb4070d8fd6c0cdcec6cc7645e27cd367079a35c", "filename": "tests/compile-fail/cmp_owned.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15e55f5df5e13dd7867d86df6bc26c49b7d77944/tests%2Fcompile-fail%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e55f5df5e13dd7867d86df6bc26c49b7d77944/tests%2Fcompile-fail%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_owned.rs?ref=15e55f5df5e13dd7867d86df6bc26c49b7d77944", "patch": "@@ -3,7 +3,6 @@\n \n #[deny(cmp_owned)]\n fn main() {\n-    #[allow(str_to_string)]\n     fn with_to_string(x : &str) {\n         x != \"foo\".to_string();\n         //~^ ERROR this creates an owned instance just for comparison. Consider using `x != \"foo\"` to compare without allocation"}, {"sha": "edbdeb2e55a71b1ffbf867be59a1eac8949b747e", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15e55f5df5e13dd7867d86df6bc26c49b7d77944/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e55f5df5e13dd7867d86df6bc26c49b7d77944/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=15e55f5df5e13dd7867d86df6bc26c49b7d77944", "patch": "@@ -296,12 +296,6 @@ fn main() {\n     let res: Result<i32, ()> = Ok(0);\n     let _ = res.unwrap();  //~ERROR used unwrap() on a Result\n \n-    let _ = \"str\".to_string();  //~ERROR `\"str\".to_owned()` is faster\n-\n-    let v = &\"str\";\n-    let string = v.to_string();  //~ERROR `(*v).to_owned()` is faster\n-    let _again = string.to_string();  //~ERROR `String::to_string` is an inefficient way to clone a `String`; use `clone()` instead\n-\n     res.ok().expect(\"disaster!\"); //~ERROR called `ok().expect()`\n     // the following should not warn, since `expect` isn't implemented unless\n     // the error type implements `Debug`"}, {"sha": "c5c82c7072b75439ae38f74c8ca7939b6678e996", "filename": "tests/compile-fail/needless_features.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/68b2f12adf35d007c17dcdee4e2447db2c44c43e/tests%2Fcompile-fail%2Fneedless_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b2f12adf35d007c17dcdee4e2447db2c44c43e/tests%2Fcompile-fail%2Fneedless_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_features.rs?ref=68b2f12adf35d007c17dcdee4e2447db2c44c43e", "patch": "@@ -1,28 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(clippy)]\n-\n-fn test_as_slice() {\n-    let v = vec![1];\n-    v.as_slice(); //~ERROR used as_slice() from the 'convert' nightly feature. Use &[..]\n-\n-    let mut v2 = vec![1];\n-    v2.as_mut_slice(); //~ERROR used as_mut_slice() from the 'convert' nightly feature. Use &mut [..]\n-}\n-\n-struct ShouldWork;\n-\n-impl ShouldWork {\n-    fn as_slice(&self) -> &ShouldWork { self }\n-}\n-\n-fn test_should_work() {\n-    let sw = ShouldWork;\n-    sw.as_slice();\n-}\n-\n-fn main() {\n-    test_as_slice();\n-    test_should_work();\n-}"}, {"sha": "70223bfd8674ce26f47a6ddf8670c4ac284ae453", "filename": "tests/run-pass/deprecated.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15e55f5df5e13dd7867d86df6bc26c49b7d77944/tests%2Frun-pass%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e55f5df5e13dd7867d86df6bc26c49b7d77944/tests%2Frun-pass%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdeprecated.rs?ref=15e55f5df5e13dd7867d86df6bc26c49b7d77944", "patch": "@@ -0,0 +1,12 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[warn(str_to_string)]\n+//~^WARNING: warning: lint str_to_string has been removed: using `str::to_string`\n+#[warn(string_to_string)]\n+//~^WARNING: warning: lint string_to_string has been removed: using `string::to_string`\n+#[warn(unstable_as_slice)]\n+//~^WARNING: warning: lint unstable_as_slice has been removed: `Vec::as_slice` has been stabilized\n+#[warn(unstable_as_mut_slice)]\n+//~^WARNING: warning: lint unstable_as_mut_slice has been removed: `Vec::as_mut_slice` has been stabilized\n+fn main() {}"}, {"sha": "b16b4b67fad546efbe983256e7b6c9f41fa0ac95", "filename": "util/update_lints.py", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/15e55f5df5e13dd7867d86df6bc26c49b7d77944/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/15e55f5df5e13dd7867d86df6bc26c49b7d77944/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=15e55f5df5e13dd7867d86df6bc26c49b7d77944", "patch": "@@ -13,14 +13,20 @@\n     pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n     (?P<level>Forbid|Deny|Warn|Allow) \\s*,\\s*\n     \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n-''', re.X | re.S)\n+''', re.VERBOSE | re.DOTALL)\n+\n+declare_deprecated_lint_re = re.compile(r'''\n+    declare_deprecated_lint! \\s* [{(] \\s*\n+    pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n+    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n+''', re.VERBOSE | re.DOTALL)\n \n nl_escape_re = re.compile(r'\\\\\\n\\s*')\n \n wiki_link = 'https://github.com/Manishearth/rust-clippy/wiki'\n \n \n-def collect(lints, fn):\n+def collect(lints, deprecated_lints, fn):\n     \"\"\"Collect all lints from a file.\n \n     Adds entries to the lints list as `(module, name, level, desc)`.\n@@ -35,6 +41,13 @@ def collect(lints, fn):\n                       match.group('level').lower(),\n                       desc.replace('\\\\\"', '\"')))\n \n+    for match in declare_deprecated_lint_re.finditer(code):\n+        # remove \\-newline escapes from description string\n+        desc = nl_escape_re.sub('', match.group('desc'))\n+        deprecated_lints.append((os.path.splitext(os.path.basename(fn))[0],\n+                                match.group('name').lower(),\n+                                desc.replace('\\\\\"', '\"')))\n+\n \n def gen_table(lints, link=None):\n     \"\"\"Write lint table in Markdown format.\"\"\"\n@@ -67,6 +80,13 @@ def gen_mods(lints):\n         yield 'pub mod %s;\\n' % module\n \n \n+def gen_deprecated(lints):\n+    \"\"\"Declare deprecated lints\"\"\"\n+\n+    for lint in lints:\n+        yield '    store.register_removed(\"%s\", \"%s\");\\n' % (lint[1], lint[2])\n+\n+\n def replace_region(fn, region_start, region_end, callback,\n                    replace_start=True, write_back=True):\n     \"\"\"Replace a region in a file delimited by two lines matching regexes.\n@@ -107,6 +127,7 @@ def replace_region(fn, region_start, region_end, callback,\n \n def main(print_only=False, check=False):\n     lints = []\n+    deprecated_lints = []\n \n     # check directory\n     if not os.path.isfile('src/lib.rs'):\n@@ -117,7 +138,7 @@ def main(print_only=False, check=False):\n     for root, dirs, files in os.walk('src'):\n         for fn in files:\n             if fn.endswith('.rs'):\n-                collect(lints, os.path.join(root, fn))\n+                collect(lints, deprecated_lints, os.path.join(root, fn))\n \n     if print_only:\n         sys.stdout.writelines(gen_table(lints))\n@@ -147,6 +168,13 @@ def main(print_only=False, check=False):\n         lambda: gen_group(lints, levels=('warn', 'deny')),\n         replace_start=False, write_back=not check)\n \n+    # same for \"deprecated\" lint collection\n+    changed |= replace_region(\n+            'src/lib.rs', r'let mut store', r'end deprecated lints',\n+            lambda: gen_deprecated(deprecated_lints),\n+            replace_start=False,\n+            write_back=not check)\n+\n     # same for \"clippy_pedantic\" lint collection\n     changed |= replace_region(\n         'src/lib.rs', r'reg.register_lint_group\\(\"clippy_pedantic\"', r'\\]\\);',"}, {"sha": "5040a28bca0aaf9834070013604c054441afef77", "filename": "util/update_wiki.py", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/15e55f5df5e13dd7867d86df6bc26c49b7d77944/util%2Fupdate_wiki.py", "raw_url": "https://github.com/rust-lang/rust/raw/15e55f5df5e13dd7867d86df6bc26c49b7d77944/util%2Fupdate_wiki.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_wiki.py?ref=15e55f5df5e13dd7867d86df6bc26c49b7d77944", "patch": "@@ -51,6 +51,10 @@ def parse_file(d, f):\n                         last_comment.append(line[3:])\n                 elif line.startswith(\"declare_lint!\"):\n                     comment = False\n+                    deprecated = False\n+                elif line.startswith(\"declare_deprecated_lint!\"):\n+                    comment = False\n+                    deprecated = True\n                 else:\n                     last_comment = []\n             if not comment:\n@@ -60,14 +64,18 @@ def parse_file(d, f):\n                 if m:\n                     name = m.group(1).lower()\n \n-                    while True:\n+                    # Intentionally either a never looping or infinite loop\n+                    while not deprecated:\n                         m = re.search(level_re, line)\n                         if m:\n                             level = m.group(0)\n                             break\n \n                         line = next(rs)\n \n+                    if deprecated:\n+                        level = \"Deprecated\"\n+\n                     print(\"found %s with level %s in %s\" % (name, level, f))\n                     d[name] = (level, last_comment)\n                     last_comment = []\n@@ -107,14 +115,21 @@ def parse_file(d, f):\n \"\"\"\n \n \n+def level_message(level):\n+    if level == \"Deprecated\":\n+        return \"\\n**Those lints are deprecated**:\\n\\n\"\n+    else:\n+        return \"\\n**Those lints are %s by default**:\\n\\n\" % level\n+\n+\n def write_wiki_page(d, c, f):\n     keys = list(d.keys())\n     keys.sort()\n     with open(f, \"w\") as w:\n         w.write(PREFIX)\n \n-        for level in ('Deny', 'Warn', 'Allow'):\n-            w.write(\"\\n**Those lints are %s by default**:\\n\\n\" % level)\n+        for level in ('Deny', 'Warn', 'Allow', 'Deprecated'):\n+            w.write(level_message(level))\n             for k in keys:\n                 if d[k][0] == level:\n                     w.write(\"[`%s`](#%s)\\n\" % (k, k))"}]}