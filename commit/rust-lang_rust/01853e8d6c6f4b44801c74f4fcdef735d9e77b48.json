{"sha": "01853e8d6c6f4b44801c74f4fcdef735d9e77b48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxODUzZThkNmM2ZjRiNDQ4MDFjNzRmNGZjZGVmNzM1ZDllNzdiNDg=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-09T21:25:48Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-22T20:47:31Z"}, "message": "find scope for `Declaration` item", "tree": {"sha": "e26cd5c77688edd40a56dd140483eb56819ca6bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e26cd5c77688edd40a56dd140483eb56819ca6bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01853e8d6c6f4b44801c74f4fcdef735d9e77b48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01853e8d6c6f4b44801c74f4fcdef735d9e77b48", "html_url": "https://github.com/rust-lang/rust/commit/01853e8d6c6f4b44801c74f4fcdef735d9e77b48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01853e8d6c6f4b44801c74f4fcdef735d9e77b48/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "121aa35f12d282066651d906ea9a8b2da8209605", "url": "https://api.github.com/repos/rust-lang/rust/commits/121aa35f12d282066651d906ea9a8b2da8209605", "html_url": "https://github.com/rust-lang/rust/commit/121aa35f12d282066651d906ea9a8b2da8209605"}], "stats": {"total": 132, "additions": 86, "deletions": 46}, "files": [{"sha": "fefd59cdd805e5e0cb53b3656c5d5697f82c811a", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01853e8d6c6f4b44801c74f4fcdef735d9e77b48/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01853e8d6c6f4b44801c74f4fcdef735d9e77b48/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=01853e8d6c6f4b44801c74f4fcdef735d9e77b48", "patch": "@@ -207,7 +207,7 @@ fn named_target(file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget>\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::covers;\n+    // use test_utils::covers;\n \n     use crate::mock_analysis::analysis_and_position;\n "}, {"sha": "2dc3f0944abc530186ace3052ea0ad13956a16c8", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01853e8d6c6f4b44801c74f4fcdef735d9e77b48/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01853e8d6c6f4b44801c74f4fcdef735d9e77b48/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=01853e8d6c6f4b44801c74f4fcdef735d9e77b48", "patch": "@@ -41,6 +41,7 @@ mod matching_brace;\n mod display;\n mod inlay_hints;\n mod wasm_shims;\n+mod search_scope;\n \n #[cfg(test)]\n mod marks;"}, {"sha": "6d1eb153fa6754fdf0511f47db93577f30e20d63", "filename": "crates/ra_ide_api/src/name_kind.rs", "status": "modified", "additions": 20, "deletions": 45, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/01853e8d6c6f4b44801c74f4fcdef735d9e77b48/crates%2Fra_ide_api%2Fsrc%2Fname_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01853e8d6c6f4b44801c74f4fcdef735d9e77b48/crates%2Fra_ide_api%2Fsrc%2Fname_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fname_kind.rs?ref=01853e8d6c6f4b44801c74f4fcdef735d9e77b48", "patch": "@@ -2,8 +2,8 @@\n \n use hir::{\n     db::AstDatabase, Adt, AssocItem, DefWithBody, Either, EnumVariant, FromSource, HasSource,\n-    HirFileId, MacroDef, ModuleDef, ModuleSource, Path, PathResolution, SourceAnalyzer,\n-    StructField, Ty, VariantDef,\n+    HirFileId, MacroDef, Module, ModuleDef, ModuleSource, Path, PathResolution, Source,\n+    SourceAnalyzer, StructField, Ty, VariantDef,\n };\n use ra_db::FileId;\n use ra_syntax::{ast, ast::VisibilityOwner, AstNode, AstPtr};\n@@ -22,8 +22,8 @@ pub enum NameKind {\n }\n \n pub(crate) struct Declaration {\n-    visibility: Option<ast::Visibility>,\n-    container: ModuleSource,\n+    pub visibility: Option<ast::Visibility>,\n+    pub container: Module,\n     pub item: NameKind,\n }\n \n@@ -80,16 +80,9 @@ pub(crate) fn classify_name_ref(\n         }\n     }\n \n+    let ast = ModuleSource::from_child_node(db, file_id, &parent);\n     let file_id = file_id.into();\n-    let container = parent.ancestors().find_map(|node| {\n-        if let Some(it) = ast::Module::cast(node.clone()) {\n-            Some(ModuleSource::Module(it))\n-        } else if let Some(it) = ast::SourceFile::cast(node.clone()) {\n-            Some(ModuleSource::SourceFile(it))\n-        } else {\n-            None\n-        }\n-    })?;\n+    let container = Module::from_definition(db, Source { file_id, ast })?;\n \n     if let Some(macro_call) =\n         parent.parent().and_then(|node| node.parent()).and_then(ast::MacroCall::cast)\n@@ -117,7 +110,7 @@ pub(crate) fn classify_name_ref(\n         }\n         PathResolution::SelfType(impl_block) => {\n             let ty = impl_block.target_ty(db);\n-            let container = impl_block.module().definition_source(db).ast;\n+            let container = impl_block.module();\n             Some(Declaration { item: NameKind::SelfType(ty), container, visibility: None })\n         }\n         PathResolution::AssocItem(assoc) => Some(assoc.declaration(db)),\n@@ -184,7 +177,7 @@ fn decl_from_pat(\n         }\n     })?;\n     let item = NameKind::Pat((def, pat));\n-    let container = def.module(db).definition_source(db).ast;\n+    let container = def.module(db);\n     Some(Declaration { item, container, visibility: None })\n }\n \n@@ -195,7 +188,7 @@ impl HasDeclaration for StructField {\n     fn declaration(self, db: &RootDatabase) -> Declaration {\n         let item = NameKind::FieldAccess(self);\n         let parent = self.parent_def(db);\n-        let container = parent.module(db).definition_source(db).ast;\n+        let container = parent.module(db);\n         let visibility = match parent {\n             VariantDef::Struct(s) => s.source(db).ast.visibility(),\n             VariantDef::EnumVariant(e) => e.source(db).ast.parent_enum().visibility(),\n@@ -225,7 +218,7 @@ impl HasDeclaration for AssocItem {\n \n     fn declaration(self, db: &RootDatabase) -> Declaration {\n         let item = NameKind::AssocItem(self);\n-        let container = self.module(db).definition_source(db).ast;\n+        let container = self.module(db);\n         let visibility = match self {\n             AssocItem::Function(f) => f.source(db).ast.visibility(),\n             AssocItem::Const(c) => c.source(db).ast.visibility(),\n@@ -255,43 +248,25 @@ impl HasDeclaration for ModuleDef {\n     type Ref = ast::Path;\n \n     fn declaration(self, db: &RootDatabase) -> Declaration {\n-        // FIXME: use macro\n         let (container, visibility) = match self {\n             ModuleDef::Module(it) => {\n-                let container =\n-                    it.parent(db).or_else(|| Some(it)).unwrap().definition_source(db).ast;\n+                let container = it.parent(db).or_else(|| Some(it)).unwrap();\n                 let visibility = it.declaration_source(db).and_then(|s| s.ast.visibility());\n                 (container, visibility)\n             }\n             ModuleDef::EnumVariant(it) => {\n-                let container = it.module(db).definition_source(db).ast;\n+                let container = it.module(db);\n                 let visibility = it.source(db).ast.parent_enum().visibility();\n                 (container, visibility)\n             }\n-            ModuleDef::Function(it) => {\n-                (it.module(db).definition_source(db).ast, it.source(db).ast.visibility())\n-            }\n-            ModuleDef::Const(it) => {\n-                (it.module(db).definition_source(db).ast, it.source(db).ast.visibility())\n-            }\n-            ModuleDef::Static(it) => {\n-                (it.module(db).definition_source(db).ast, it.source(db).ast.visibility())\n-            }\n-            ModuleDef::Trait(it) => {\n-                (it.module(db).definition_source(db).ast, it.source(db).ast.visibility())\n-            }\n-            ModuleDef::TypeAlias(it) => {\n-                (it.module(db).definition_source(db).ast, it.source(db).ast.visibility())\n-            }\n-            ModuleDef::Adt(Adt::Struct(it)) => {\n-                (it.module(db).definition_source(db).ast, it.source(db).ast.visibility())\n-            }\n-            ModuleDef::Adt(Adt::Union(it)) => {\n-                (it.module(db).definition_source(db).ast, it.source(db).ast.visibility())\n-            }\n-            ModuleDef::Adt(Adt::Enum(it)) => {\n-                (it.module(db).definition_source(db).ast, it.source(db).ast.visibility())\n-            }\n+            ModuleDef::Function(it) => (it.module(db), it.source(db).ast.visibility()),\n+            ModuleDef::Const(it) => (it.module(db), it.source(db).ast.visibility()),\n+            ModuleDef::Static(it) => (it.module(db), it.source(db).ast.visibility()),\n+            ModuleDef::Trait(it) => (it.module(db), it.source(db).ast.visibility()),\n+            ModuleDef::TypeAlias(it) => (it.module(db), it.source(db).ast.visibility()),\n+            ModuleDef::Adt(Adt::Struct(it)) => (it.module(db), it.source(db).ast.visibility()),\n+            ModuleDef::Adt(Adt::Union(it)) => (it.module(db), it.source(db).ast.visibility()),\n+            ModuleDef::Adt(Adt::Enum(it)) => (it.module(db), it.source(db).ast.visibility()),\n             ModuleDef::BuiltinType(..) => unreachable!(),\n         };\n         let item = NameKind::Def(self);"}, {"sha": "1cf1aed3746cce2f45de681d2d0901d1d12b6f00", "filename": "crates/ra_ide_api/src/search_scope.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/01853e8d6c6f4b44801c74f4fcdef735d9e77b48/crates%2Fra_ide_api%2Fsrc%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01853e8d6c6f4b44801c74f4fcdef735d9e77b48/crates%2Fra_ide_api%2Fsrc%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsearch_scope.rs?ref=01853e8d6c6f4b44801c74f4fcdef735d9e77b48", "patch": "@@ -0,0 +1,64 @@\n+use hir::{DefWithBody, HasSource, ModuleSource};\n+use ra_db::{FileId, SourceDatabase};\n+use ra_syntax::{AstNode, TextRange};\n+\n+use crate::{\n+    db::RootDatabase,\n+    name_kind::{Declaration, NameKind},\n+};\n+\n+pub struct SearchScope {\n+    pub scope: Vec<(FileId, Option<TextRange>)>,\n+}\n+\n+impl Declaration {\n+    pub fn scope(self, db: &RootDatabase) -> Option<SearchScope> {\n+        let module_src = self.container.definition_source(db);\n+        let file_id = module_src.file_id.original_file(db);\n+\n+        if let NameKind::Pat((def, _)) = self.item {\n+            let range = match def {\n+                DefWithBody::Function(f) => f.source(db).ast.syntax().text_range(),\n+                DefWithBody::Const(c) => c.source(db).ast.syntax().text_range(),\n+                DefWithBody::Static(s) => s.source(db).ast.syntax().text_range(),\n+            };\n+            return Some(SearchScope { scope: vec![(file_id, Some(range))] });\n+        }\n+\n+        if let Some(vis) = self.visibility {\n+            let source_root_id = db.file_source_root(file_id);\n+            let source_root = db.source_root(source_root_id);\n+            let mut files = source_root.walk().map(|id| (id.into(), None)).collect::<Vec<_>>();\n+\n+            if vis.syntax().text() == \"pub(crate)\" {\n+                return Some(SearchScope { scope: files });\n+            }\n+            if vis.syntax().text() == \"pub\" {\n+                let krate = self.container.krate(db).unwrap();\n+                let crate_graph = db.crate_graph();\n+\n+                for crate_id in crate_graph.iter() {\n+                    let mut crate_deps = crate_graph.dependencies(crate_id);\n+\n+                    if crate_deps.any(|dep| dep.crate_id() == krate.crate_id()) {\n+                        let root_file = crate_graph.crate_root(crate_id);\n+                        let source_root_id = db.file_source_root(root_file);\n+                        let source_root = db.source_root(source_root_id);\n+                        files.extend(source_root.walk().map(|id| (id.into(), None)));\n+                    }\n+                }\n+\n+                return Some(SearchScope { scope: files });\n+            }\n+            // FIXME: extend to \"pub(super)\" and \"pub(in path)\" cases,\n+            // then remove `Option`\n+            return None;\n+        }\n+\n+        let range = match module_src.ast {\n+            ModuleSource::Module(m) => Some(m.syntax().text_range()),\n+            ModuleSource::SourceFile(_) => None,\n+        };\n+        Some(SearchScope { scope: vec![(file_id, range)] })\n+    }\n+}"}]}