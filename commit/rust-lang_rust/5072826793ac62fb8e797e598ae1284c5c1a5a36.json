{"sha": "5072826793ac62fb8e797e598ae1284c5c1a5a36", "node_id": "C_kwDOAAsO6NoAKDUwNzI4MjY3OTNhYzYyZmI4ZTc5N2U1OThhZTEyODRjNWMxYTVhMzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-11T05:50:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-11T05:50:41Z"}, "message": "Auto merge of #110170 - JohnTitor:rollup-hdramer, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #109527 (Set up standard library path substitution in rust-gdb and gdbgui)\n - #109752 (Stall auto trait assembly in new solver for int/float vars)\n - #109860 (Add support for RISC-V relax target feature)\n - #109923 (Update `error [E0449]: unnecessary visibility qualifier` to be more clear)\n - #110070 (The `wrapping_neg` example for unsigned types shouldn't use `i8`)\n - #110146 (fix(doc): do not parse inline when output is json for external crate)\n - #110147 (Add regression test for #104916)\n - #110149 (Update books)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a62cb2a518001e1c13b4ebb1d21e701ea6561c92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a62cb2a518001e1c13b4ebb1d21e701ea6561c92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5072826793ac62fb8e797e598ae1284c5c1a5a36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5072826793ac62fb8e797e598ae1284c5c1a5a36", "html_url": "https://github.com/rust-lang/rust/commit/5072826793ac62fb8e797e598ae1284c5c1a5a36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5072826793ac62fb8e797e598ae1284c5c1a5a36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b80ee3969fcaeb2bfb4e82808b725964d2356448", "url": "https://api.github.com/repos/rust-lang/rust/commits/b80ee3969fcaeb2bfb4e82808b725964d2356448", "html_url": "https://github.com/rust-lang/rust/commit/b80ee3969fcaeb2bfb4e82808b725964d2356448"}, {"sha": "48e14bbb5ac11cf2e93c437f28f848dbcdc706ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/48e14bbb5ac11cf2e93c437f28f848dbcdc706ca", "html_url": "https://github.com/rust-lang/rust/commit/48e14bbb5ac11cf2e93c437f28f848dbcdc706ca"}], "stats": {"total": 555, "additions": 381, "deletions": 174}, "files": [{"sha": "a349fe6a3c44b4586d428d2484a5d49e6364de8d", "filename": "compiler/rustc_ast_passes/messages.ftl", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_ast_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_ast_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fmessages.ftl?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -17,9 +17,10 @@ ast_passes_keyword_lifetime =\n ast_passes_invalid_label =\n     invalid label name `{$name}`\n \n-ast_passes_invalid_visibility =\n-    unnecessary visibility qualifier\n-    .implied = `pub` not permitted here because it's implied\n+ast_passes_visibility_not_permitted =\n+    visibility qualifiers are not permitted here\n+    .enum_variant = enum variants and their fields always share the visibility of the enum they are in\n+    .trait_impl = trait items always share the visibility of their trait\n     .individual_impl_items = place qualifiers on individual impl items instead\n     .individual_foreign_items = place qualifiers on individual foreign items instead\n "}, {"sha": "e7cdfeca6f9b69142170451c7d7b71b44d7672f2", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -240,16 +240,12 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn invalid_visibility(&self, vis: &Visibility, note: Option<errors::InvalidVisibilityNote>) {\n+    fn visibility_not_permitted(&self, vis: &Visibility, note: errors::VisibilityNotPermittedNote) {\n         if let VisibilityKind::Inherited = vis.kind {\n             return;\n         }\n \n-        self.session.emit_err(errors::InvalidVisibility {\n-            span: vis.span,\n-            implied: vis.kind.is_pub().then_some(vis.span),\n-            note,\n-        });\n+        self.session.emit_err(errors::VisibilityNotPermitted { span: vis.span, note });\n     }\n \n     fn check_decl_no_pat(decl: &FnDecl, mut report_err: impl FnMut(Span, Option<Ident>, bool)) {\n@@ -819,7 +815,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 items,\n             }) => {\n                 self.with_in_trait_impl(true, Some(*constness), |this| {\n-                    this.invalid_visibility(&item.vis, None);\n+                    this.visibility_not_permitted(\n+                        &item.vis,\n+                        errors::VisibilityNotPermittedNote::TraitImpl,\n+                    );\n                     if let TyKind::Err = self_ty.kind {\n                         this.err_handler().emit_err(errors::ObsoleteAuto { span: item.span });\n                     }\n@@ -866,9 +865,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         only_trait: only_trait.then_some(()),\n                     };\n \n-                self.invalid_visibility(\n+                self.visibility_not_permitted(\n                     &item.vis,\n-                    Some(errors::InvalidVisibilityNote::IndividualImplItems),\n+                    errors::VisibilityNotPermittedNote::IndividualImplItems,\n                 );\n                 if let &Unsafe::Yes(span) = unsafety {\n                     self.err_handler().emit_err(errors::InherentImplCannotUnsafe {\n@@ -924,9 +923,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ItemKind::ForeignMod(ForeignMod { abi, unsafety, .. }) => {\n                 let old_item = mem::replace(&mut self.extern_mod, Some(item));\n-                self.invalid_visibility(\n+                self.visibility_not_permitted(\n                     &item.vis,\n-                    Some(errors::InvalidVisibilityNote::IndividualForeignItems),\n+                    errors::VisibilityNotPermittedNote::IndividualForeignItems,\n                 );\n                 if let &Unsafe::Yes(span) = unsafety {\n                     self.err_handler().emit_err(errors::UnsafeItem { span, kind: \"extern block\" });\n@@ -940,9 +939,15 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ItemKind::Enum(def, _) => {\n                 for variant in &def.variants {\n-                    self.invalid_visibility(&variant.vis, None);\n+                    self.visibility_not_permitted(\n+                        &variant.vis,\n+                        errors::VisibilityNotPermittedNote::EnumVariant,\n+                    );\n                     for field in variant.data.fields() {\n-                        self.invalid_visibility(&field.vis, None);\n+                        self.visibility_not_permitted(\n+                            &field.vis,\n+                            errors::VisibilityNotPermittedNote::EnumVariant,\n+                        );\n                     }\n                 }\n             }\n@@ -1301,7 +1306,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n \n         if ctxt == AssocCtxt::Trait || self.in_trait_impl {\n-            self.invalid_visibility(&item.vis, None);\n+            self.visibility_not_permitted(&item.vis, errors::VisibilityNotPermittedNote::TraitImpl);\n             if let AssocItemKind::Fn(box Fn { sig, .. }) = &item.kind {\n                 self.check_trait_fn_not_const(sig.header.constness);\n             }"}, {"sha": "27bbd237961a932db7b3b5e7a8493cd0e9d21e99", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -42,18 +42,20 @@ pub struct InvalidLabel {\n }\n \n #[derive(Diagnostic)]\n-#[diag(ast_passes_invalid_visibility, code = \"E0449\")]\n-pub struct InvalidVisibility {\n+#[diag(ast_passes_visibility_not_permitted, code = \"E0449\")]\n+pub struct VisibilityNotPermitted {\n     #[primary_span]\n     pub span: Span,\n-    #[label(ast_passes_implied)]\n-    pub implied: Option<Span>,\n     #[subdiagnostic]\n-    pub note: Option<InvalidVisibilityNote>,\n+    pub note: VisibilityNotPermittedNote,\n }\n \n #[derive(Subdiagnostic)]\n-pub enum InvalidVisibilityNote {\n+pub enum VisibilityNotPermittedNote {\n+    #[note(ast_passes_enum_variant)]\n+    EnumVariant,\n+    #[note(ast_passes_trait_impl)]\n+    TraitImpl,\n     #[note(ast_passes_individual_impl_items)]\n     IndividualImplItems,\n     #[note(ast_passes_individual_foreign_items)]"}, {"sha": "611dd3d1cd18a6a535b790a123c6861592828e71", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -251,6 +251,7 @@ const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"e\", Some(sym::riscv_target_feature)),\n     (\"f\", Some(sym::riscv_target_feature)),\n     (\"m\", Some(sym::riscv_target_feature)),\n+    (\"relax\", Some(sym::riscv_target_feature)),\n     (\"v\", Some(sym::riscv_target_feature)),\n     (\"zba\", Some(sym::riscv_target_feature)),\n     (\"zbb\", Some(sym::riscv_target_feature)),"}, {"sha": "a5876e0752842715e8f7dc36266cd5df7200dbb8", "filename": "compiler/rustc_error_codes/src/error_codes/E0449.md", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0449.md", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0449.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0449.md?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,4 +1,6 @@\n-A visibility qualifier was used when it was unnecessary.\n+A visibility qualifier was used where one is not permitted. Visibility\n+qualifiers are not permitted on enum variants, trait items, impl blocks, and\n+extern blocks, as they already share the visibility of the parent item.\n \n Erroneous code examples:\n \n@@ -9,15 +11,18 @@ trait Foo {\n     fn foo();\n }\n \n-pub impl Bar {} // error: unnecessary visibility qualifier\n+enum Baz {\n+    pub Qux, // error: visibility qualifiers are not permitted here\n+}\n+\n+pub impl Bar {} // error: visibility qualifiers are not permitted here\n \n-pub impl Foo for Bar { // error: unnecessary visibility qualifier\n-    pub fn foo() {} // error: unnecessary visibility qualifier\n+pub impl Foo for Bar { // error: visibility qualifiers are not permitted here\n+    pub fn foo() {} // error: visibility qualifiers are not permitted here\n }\n ```\n \n-To fix this error, please remove the visibility qualifier when it is not\n-required. Example:\n+To fix this error, simply remove the visibility qualifier. Example:\n \n ```\n struct Bar;\n@@ -26,12 +31,18 @@ trait Foo {\n     fn foo();\n }\n \n+enum Baz {\n+    // Enum variants share the visibility of the enum they are in, so\n+    // `pub` is not allowed here\n+    Qux,\n+}\n+\n // Directly implemented methods share the visibility of the type itself,\n-// so `pub` is unnecessary here\n+// so `pub` is not allowed here\n impl Bar {}\n \n-// Trait methods share the visibility of the trait, so `pub` is\n-// unnecessary in either case\n+// Trait methods share the visibility of the trait, so `pub` is not\n+// allowed in either case\n impl Foo for Bar {\n     fn foo() {}\n }"}, {"sha": "1a566e87dc8e3fe34aa610fb87b8c15b1dc705e3", "filename": "compiler/rustc_trait_selection/src/solve/assembly/structural_traits.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -24,21 +24,19 @@ pub(in crate::solve) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n         | ty::FnDef(..)\n         | ty::FnPtr(_)\n         | ty::Error(_)\n-        | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n         | ty::Never\n         | ty::Char => Ok(vec![]),\n \n-        // Treat this like `struct str([u8]);`\n+        // Treat `str` like it's defined as `struct str([u8]);`\n         ty::Str => Ok(vec![tcx.mk_slice(tcx.types.u8)]),\n \n         ty::Dynamic(..)\n         | ty::Param(..)\n         | ty::Foreign(..)\n         | ty::Alias(ty::Projection, ..)\n-        | ty::Placeholder(..) => Err(NoSolution),\n-\n-        ty::Bound(..)\n-        | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+        | ty::Placeholder(..)\n+        | ty::Bound(..)\n+        | ty::Infer(_) => {\n             bug!(\"unexpected type `{ty}`\")\n         }\n "}, {"sha": "cb7cf9b936cfe3ca963e9d0f82eeab2daabb9ba2", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 60, "deletions": 18, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -147,24 +147,66 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        // This differs from the current stable behavior and\n-        // fixes #84857. Due to breakage found via crater, we\n-        // currently instead lint patterns which can be used to\n-        // exploit this unsoundness on stable, see #93367 for\n-        // more details.\n-        //\n-        // Using `TreatProjections::NextSolverLookup` is fine here because\n-        // `instantiate_constituent_tys_for_auto_trait` returns nothing for\n-        // projection types anyways. So it doesn't really matter what we do\n-        // here, and this is faster.\n-        if let Some(def_id) = ecx.tcx().find_map_relevant_impl(\n-            goal.predicate.def_id(),\n-            goal.predicate.self_ty(),\n-            TreatProjections::NextSolverLookup,\n-            Some,\n-        ) {\n-            debug!(?def_id, ?goal, \"disqualified auto-trait implementation\");\n-            return Err(NoSolution);\n+        let self_ty = goal.predicate.self_ty();\n+        match *self_ty.kind() {\n+            // Stall int and float vars until they are resolved to a concrete\n+            // numerical type. That's because the check for impls below treats\n+            // int vars as matching any impl. Even if we filtered such impls,\n+            // we probably don't want to treat an `impl !AutoTrait for i32` as\n+            // disqualifying the built-in auto impl for `i64: AutoTrait` either.\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n+                return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n+            }\n+\n+            // These types cannot be structurally decomposed into constitutent\n+            // types, and therefore have no builtin impl.\n+            ty::Dynamic(..)\n+            | ty::Param(..)\n+            | ty::Foreign(..)\n+            | ty::Alias(ty::Projection, ..)\n+            | ty::Placeholder(..) => return Err(NoSolution),\n+\n+            ty::Infer(_) | ty::Bound(_, _) => bug!(\"unexpected type `{self_ty}`\"),\n+\n+            // For rigid types, we only register a builtin auto implementation\n+            // if there is no implementation that could ever apply to the self\n+            // type.\n+            //\n+            // This differs from the current stable behavior and fixes #84857.\n+            // Due to breakage found via crater, we currently instead lint\n+            // patterns which can be used to exploit this unsoundness on stable,\n+            // see #93367 for more details.\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Str\n+            | ty::Array(_, _)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(_, _, _)\n+            | ty::FnDef(_, _)\n+            | ty::FnPtr(_)\n+            | ty::Closure(_, _)\n+            | ty::Generator(_, _, _)\n+            | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(_, _)\n+            | ty::Never\n+            | ty::Tuple(_)\n+            | ty::Error(_)\n+            | ty::Adt(_, _)\n+            | ty::Alias(ty::Opaque, _) => {\n+                if let Some(def_id) = ecx.tcx().find_map_relevant_impl(\n+                    goal.predicate.def_id(),\n+                    goal.predicate.self_ty(),\n+                    TreatProjections::NextSolverLookup,\n+                    Some,\n+                ) {\n+                    debug!(?def_id, ?goal, \"disqualified auto-trait implementation\");\n+                    return Err(NoSolution);\n+                }\n+            }\n         }\n \n         ecx.probe_and_evaluate_goal_for_constituent_tys("}, {"sha": "114deeea387677709d8062e382f6d339b2f37850", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1363,12 +1363,11 @@ macro_rules! uint_impl {\n         ///\n         /// Basic usage:\n         ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `i8` is used here.\n-        ///\n         /// ```\n-        /// assert_eq!(100i8.wrapping_neg(), -100);\n-        /// assert_eq!((-128i8).wrapping_neg(), -128);\n+        #[doc = concat!(\"assert_eq!(0_\", stringify!($SelfT), \".wrapping_neg(), 0);\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.wrapping_neg(), 1);\")]\n+        #[doc = concat!(\"assert_eq!(13_\", stringify!($SelfT), \".wrapping_neg(), (!13) + 1);\")]\n+        #[doc = concat!(\"assert_eq!(42_\", stringify!($SelfT), \".wrapping_neg(), !(42 - 1));\")]\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]"}, {"sha": "c06006157b14b3d47b5c716fc392b77f3b2e21ce", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1 +1 @@\n-Subproject commit 0510ca84c2ce6bf93c4ccf9248756e9e4fd00b12\n+Subproject commit c06006157b14b3d47b5c716fc392b77f3b2e21ce"}, {"sha": "1f8dc727e94ae4ef92adf70df979521a1ea1143e", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1 +1 @@\n-Subproject commit 3c47807a3131b3c7cacb508f52632078d253cd0a\n+Subproject commit 1f8dc727e94ae4ef92adf70df979521a1ea1143e"}, {"sha": "31961fe22521a779070a44a8f30a2b00a20b6212", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1 +1 @@\n-Subproject commit ba84bf35d0f17d404003349309201654d25f61af\n+Subproject commit 31961fe22521a779070a44a8f30a2b00a20b6212"}, {"sha": "6337ed17fb8dcd918d78b7d97d213e923530337c", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1 +1 @@\n-Subproject commit fca8af6c154c6cde2512f1331cf2704f214a818e\n+Subproject commit 6337ed17fb8dcd918d78b7d97d213e923530337c"}, {"sha": "d812f7a802b1c18da052ff2c284cde7cf8a5a792", "filename": "src/etc/rust-gdb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Fetc%2Frust-gdb", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Fetc%2Frust-gdb", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-gdb?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -13,6 +13,8 @@ fi\n # Find out where the pretty printer Python module is\n RUSTC_SYSROOT=\"$(\"$RUSTC\" --print=sysroot)\"\n GDB_PYTHON_MODULE_DIRECTORY=\"$RUSTC_SYSROOT/lib/rustlib/etc\"\n+# Get the commit hash for path remapping\n+RUSTC_COMMIT_HASH=\"$(\"$RUSTC\" -vV | sed -n 's/commit-hash: \\(\\w*\\)/\\1/p')\"\n \n # Run GDB with the additional arguments that load the pretty printers\n # Set the environment variable `RUST_GDB` to overwrite the call to a\n@@ -21,4 +23,6 @@ RUST_GDB=\"${RUST_GDB:-gdb}\"\n PYTHONPATH=\"$PYTHONPATH:$GDB_PYTHON_MODULE_DIRECTORY\" exec ${RUST_GDB} \\\n   --directory=\"$GDB_PYTHON_MODULE_DIRECTORY\" \\\n   -iex \"add-auto-load-safe-path $GDB_PYTHON_MODULE_DIRECTORY\" \\\n+  -iex \"set substitute-path /rustc/$RUSTC_COMMIT_HASH $RUSTC_SYSROOT/lib/rustlib/src/rust\" \\\n   \"$@\"\n+ \n\\ No newline at end of file"}, {"sha": "e7bafcc99b81db73b6732f603f20047390f4613f", "filename": "src/etc/rust-gdbgui", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Fetc%2Frust-gdbgui", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Fetc%2Frust-gdbgui", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-gdbgui?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -42,6 +42,8 @@ fi\n # Find out where the pretty printer Python module is\n RUSTC_SYSROOT=\"$(\"$RUSTC\" --print=sysroot)\"\n GDB_PYTHON_MODULE_DIRECTORY=\"$RUSTC_SYSROOT/lib/rustlib/etc\"\n+# Get the commit hash for path remapping\n+RUSTC_COMMIT_HASH=\"$(\"$RUSTC\" -vV | sed -n 's/commit-hash: \\(\\w*\\)/\\1/p')\"\n \n # Set the environment variable `RUST_GDB` to overwrite the call to a\n # different/specific command (defaults to `gdb`).\n@@ -53,7 +55,9 @@ RUST_GDBGUI=\"${RUST_GDBGUI:-gdbgui}\"\n \n # These arguments get passed through to GDB and make it load the\n # Rust pretty printers.\n-GDB_ARGS=\"--directory=\\\"$GDB_PYTHON_MODULE_DIRECTORY\\\" -iex \\\"add-auto-load-safe-path $GDB_PYTHON_MODULE_DIRECTORY\\\"\"\n+GDB_ARGS=\"--directory=\\\"$GDB_PYTHON_MODULE_DIRECTORY\\\"\" \\\n+   \"-iex \\\"add-auto-load-safe-path $GDB_PYTHON_MODULE_DIRECTORY\\\"\" \\\n+   \"-iex \\\"set substitute-path /rustc/$RUSTC_COMMIT_HASH $RUSTC_SYSROOT/lib/rustlib/src/rust\\\"\"\n \n # Finally we execute gdbgui.\n PYTHONPATH=\"$PYTHONPATH:$GDB_PYTHON_MODULE_DIRECTORY\" \\"}, {"sha": "b3df12a9df13bbe28a2f6eb3f9c506014c7b4136", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -2381,7 +2381,8 @@ fn clean_extern_crate<'tcx>(\n                     Some(l) => attr::list_contains_name(&l, sym::inline),\n                     None => false,\n                 }\n-        });\n+        })\n+        && !cx.output_format.is_json();\n \n     let krate_owner_def_id = krate.owner_id.to_def_id();\n     if please_inline {"}, {"sha": "cd97766752d28541bc1ae80db1746ff99e7de14a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -2019,7 +2019,7 @@ impl Variant {\n \n #[derive(Clone, Debug)]\n pub(crate) struct Discriminant {\n-    // In the case of cross crate re-exports, we don't have the nessesary information\n+    // In the case of cross crate re-exports, we don't have the necessary information\n     // to reconstruct the expression of the discriminant, only the value.\n     pub(super) expr: Option<BodyId>,\n     pub(super) value: DefId,"}, {"sha": "6c48f5aa01f9860817968a996a199dd2ba10c208", "filename": "tests/rustdoc-ui/intra-doc/auxiliary/inner-crate-enum.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Finner-crate-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Finner-crate-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Finner-crate-enum.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -0,0 +1,3 @@\n+pub enum O {\n+    L = -1,\n+}"}, {"sha": "363dd7f64c22564c3e47e4d8535cba45b2adfb19", "filename": "tests/rustdoc-ui/intra-doc/inline-external-enum.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Frustdoc-ui%2Fintra-doc%2Finline-external-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Frustdoc-ui%2Fintra-doc%2Finline-external-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Finline-external-enum.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+// aux-build: inner-crate-enum.rs\n+// compile-flags:-Z unstable-options --output-format json\n+\n+#[doc(inline)]\n+pub extern crate inner_crate_enum;\n+\n+fn main() {}"}, {"sha": "3361fa011ed8e98c560fb18108bf967ab2cc3060", "filename": "tests/ui/associated-type-bounds/issue-104916.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fassociated-type-bounds%2Fissue-104916.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fassociated-type-bounds%2Fissue-104916.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fissue-104916.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -0,0 +1,14 @@\n+#![feature(associated_type_bounds)]\n+\n+trait B {\n+    type AssocType;\n+}\n+\n+fn f()\n+where\n+    dyn for<'j> B<AssocType: 'j>:,\n+    //~^ ERROR: associated type bounds are only allowed in where clauses and function signatures\n+{\n+}\n+\n+fn main() {}"}, {"sha": "35435962ffe9d8953f1d9b17b05798596f2c3b22", "filename": "tests/ui/associated-type-bounds/issue-104916.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fassociated-type-bounds%2Fissue-104916.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fassociated-type-bounds%2Fissue-104916.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fissue-104916.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -0,0 +1,8 @@\n+error: associated type bounds are only allowed in where clauses and function signatures, not in bounds\n+  --> $DIR/issue-104916.rs:9:19\n+   |\n+LL |     dyn for<'j> B<AssocType: 'j>:,\n+   |                   ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "cf41bcce8c20231248c9facc2154b16fd4647235", "filename": "tests/ui/error-codes/E0449.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Ferror-codes%2FE0449.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Ferror-codes%2FE0449.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0449.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,22 +1,26 @@\n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/E0449.rs:7:1\n    |\n LL | pub impl Bar {}\n-   | ^^^ `pub` not permitted here because it's implied\n+   | ^^^\n    |\n    = note: place qualifiers on individual impl items instead\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/E0449.rs:9:1\n    |\n LL | pub impl Foo for Bar {\n-   | ^^^ `pub` not permitted here because it's implied\n+   | ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/E0449.rs:10:5\n    |\n LL |     pub fn foo() {}\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2298ad240d5609d78ab131f44a9b34a39ccb335d", "filename": "tests/ui/issues/issue-28433.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fissues%2Fissue-28433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fissues%2Fissue-28433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-28433.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,9 +1,9 @@\n enum Bird {\n     pub Duck,\n-    //~^ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility qualifiers are not permitted here\n     Goose,\n     pub(crate) Dove\n-    //~^ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility qualifiers are not permitted here\n }\n \n "}, {"sha": "5fb8a89621c2d530cae324389e074e280db0192c", "filename": "tests/ui/issues/issue-28433.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fissues%2Fissue-28433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fissues%2Fissue-28433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-28433.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,14 +1,18 @@\n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/issue-28433.rs:2:5\n    |\n LL |     pub Duck,\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: enum variants and their fields always share the visibility of the enum they are in\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/issue-28433.rs:5:5\n    |\n LL |     pub(crate) Dove\n    |     ^^^^^^^^^^\n+   |\n+   = note: enum variants and their fields always share the visibility of the enum they are in\n \n error: aborting due to 2 previous errors\n "}, {"sha": "403160f1253a4f3ef947e1abdd0c4c9b9370a82b", "filename": "tests/ui/parser/assoc-static-semantic-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -31,7 +31,7 @@ trait T {\n     //~| ERROR a static item cannot be `default`\n     pub(crate) default static TD: u8;\n     //~^ ERROR associated `static` items are not allowed\n-    //~| ERROR unnecessary visibility qualifier\n+    //~| ERROR visibility qualifiers are not permitted here\n     //~| ERROR a static item cannot be `default`\n }\n \n@@ -47,6 +47,6 @@ impl T for S {\n     pub default static TD: u8;\n     //~^ ERROR associated `static` items are not allowed\n     //~| ERROR associated constant in `impl` without body\n-    //~| ERROR unnecessary visibility qualifier\n+    //~| ERROR visibility qualifiers are not permitted here\n     //~| ERROR a static item cannot be `default`\n }"}, {"sha": "8178bd223732669d6bd43c00a65487430a21afeb", "filename": "tests/ui/parser/assoc-static-semantic-fail.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -134,11 +134,13 @@ LL |     pub(crate) default static ID: u8;\n    |                                     |\n    |                                     help: provide a definition for the constant: `= <expr>;`\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/assoc-static-semantic-fail.rs:32:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n error: associated constant in `impl` without body\n   --> $DIR/assoc-static-semantic-fail.rs:41:5\n@@ -156,11 +158,13 @@ LL |     pub default static TD: u8;\n    |                              |\n    |                              help: provide a definition for the constant: `= <expr>;`\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/assoc-static-semantic-fail.rs:47:5\n    |\n LL |     pub default static TD: u8;\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/assoc-static-semantic-fail.rs:3:12"}, {"sha": "d1058ceb2a1c421cc79b9cbb96b466520b12ee2d", "filename": "tests/ui/parser/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdefault.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -14,7 +14,7 @@ impl Foo for u8 {\n }\n \n impl Foo for u16 {\n-    pub default fn foo<T: Default>() -> T { //~ ERROR unnecessary visibility qualifier\n+    pub default fn foo<T: Default>() -> T { //~ ERROR visibility qualifiers are not permitted here\n         T::default()\n     }\n }"}, {"sha": "e6330f368d91707cd7af7d27e81bce0dac544b1e", "filename": "tests/ui/parser/default.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdefault.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -17,11 +17,13 @@ LL |     default pub fn foo<T: Default>() -> T { T::default() }\n LL | }\n    | - item list ends here\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/default.rs:17:5\n    |\n LL |     pub default fn foo<T: Default>() -> T {\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/default.rs:3:12"}, {"sha": "7953e12ecdb8e4e55b525ecff204c1d51350e4d1", "filename": "tests/ui/parser/trait-pub-assoc-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-assoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-assoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftrait-pub-assoc-const.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,6 +1,6 @@\n trait Foo {\n     pub const Foo: u32;\n-    //~^ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility qualifiers are not permitted here\n }\n \n fn main() {}"}, {"sha": "c14a2f2eea527b4d862760eaf83f878abee9c43f", "filename": "tests/ui/parser/trait-pub-assoc-const.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-assoc-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-assoc-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftrait-pub-assoc-const.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,8 +1,10 @@\n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/trait-pub-assoc-const.rs:2:5\n    |\n LL |     pub const Foo: u32;\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n error: aborting due to previous error\n "}, {"sha": "5d9434edc10558f13e6ad6a3208cee86ba8a1266", "filename": "tests/ui/parser/trait-pub-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftrait-pub-assoc-ty.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,6 +1,6 @@\n trait Foo {\n     pub type Foo;\n-    //~^ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility qualifiers are not permitted here\n }\n \n fn main() {}"}, {"sha": "7f6e7350ca7a2df0ee6f1de86e0306c93eb96875", "filename": "tests/ui/parser/trait-pub-assoc-ty.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftrait-pub-assoc-ty.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,8 +1,10 @@\n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/trait-pub-assoc-ty.rs:2:5\n    |\n LL |     pub type Foo;\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n error: aborting due to previous error\n "}, {"sha": "c8f33e782e2343d98c10902722c8731c63221639", "filename": "tests/ui/parser/trait-pub-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftrait-pub-method.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,6 +1,6 @@\n trait Foo {\n     pub fn foo();\n-    //~^ ERROR unnecessary visibility qualifier\n+    //~^ ERROR visibility qualifiers are not permitted here\n }\n \n fn main() {}"}, {"sha": "2bf1d468a8535af19f65ead8f19a754f88d812d0", "filename": "tests/ui/parser/trait-pub-method.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fparser%2Ftrait-pub-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftrait-pub-method.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,8 +1,10 @@\n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/trait-pub-method.rs:2:5\n    |\n LL |     pub fn foo();\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n error: aborting due to previous error\n "}, {"sha": "5c926dee05b21392f387b2990ffab83985275b3b", "filename": "tests/ui/privacy/issue-29161.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fissue-29161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fissue-29161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fissue-29161.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -2,7 +2,7 @@ mod a {\n     struct A;\n \n     impl Default for A {\n-        pub fn default() -> A { //~ ERROR unnecessary visibility qualifier\n+        pub fn default() -> A { //~ ERROR visibility qualifiers are not permitted here\n             A\n         }\n     }"}, {"sha": "1a6c80499a1bf1f5d596c434f82cf1c403312f40", "filename": "tests/ui/privacy/issue-29161.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fissue-29161.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fissue-29161.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fissue-29161.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,8 +1,10 @@\n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/issue-29161.rs:5:9\n    |\n LL |         pub fn default() -> A {\n-   |         ^^^ `pub` not permitted here because it's implied\n+   |         ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n error[E0603]: struct `A` is private\n   --> $DIR/issue-29161.rs:13:8"}, {"sha": "32c5b801fda83dcf38b9811ad6d19fcc09bfa85f", "filename": "tests/ui/privacy/priv-in-bad-locations.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fpriv-in-bad-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fpriv-in-bad-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fpriv-in-bad-locations.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,4 +1,4 @@\n-pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n+pub extern \"C\" { //~ ERROR visibility qualifiers are not permitted here\n     pub fn bar();\n }\n \n@@ -8,10 +8,10 @@ trait A {\n \n struct B;\n \n-pub impl B {} //~ ERROR unnecessary visibility qualifier\n+pub impl B {} //~ ERROR visibility qualifiers are not permitted here\n \n-pub impl A for B { //~ ERROR unnecessary visibility qualifier\n-    pub fn foo(&self) {} //~ ERROR unnecessary visibility qualifier\n+pub impl A for B { //~ ERROR visibility qualifiers are not permitted here\n+    pub fn foo(&self) {} //~ ERROR visibility qualifiers are not permitted here\n }\n \n pub fn main() {}"}, {"sha": "70dab5bfe13dff7728b0ef8f0204581b042f4b49", "filename": "tests/ui/privacy/priv-in-bad-locations.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fpriv-in-bad-locations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fpriv-in-bad-locations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fpriv-in-bad-locations.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,30 +1,34 @@\n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/priv-in-bad-locations.rs:1:1\n    |\n LL | pub extern \"C\" {\n-   | ^^^ `pub` not permitted here because it's implied\n+   | ^^^\n    |\n    = note: place qualifiers on individual foreign items instead\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/priv-in-bad-locations.rs:11:1\n    |\n LL | pub impl B {}\n-   | ^^^ `pub` not permitted here because it's implied\n+   | ^^^\n    |\n    = note: place qualifiers on individual impl items instead\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/priv-in-bad-locations.rs:13:1\n    |\n LL | pub impl A for B {\n-   | ^^^ `pub` not permitted here because it's implied\n+   | ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/priv-in-bad-locations.rs:14:5\n    |\n LL |     pub fn foo(&self) {}\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6622089dda6d7ef9b624755c3f42404ce86ace45", "filename": "tests/ui/privacy/privacy-sanity.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fprivacy-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fprivacy-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivacy-sanity.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -10,17 +10,17 @@ pub struct S {\n }\n struct Ts(pub u8);\n \n-pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n-    pub fn f() {} //~ ERROR unnecessary visibility qualifier\n-    pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n-    pub type T = u8; //~ ERROR unnecessary visibility qualifier\n+pub impl Tr for S {  //~ ERROR visibility qualifiers are not permitted here\n+    pub fn f() {} //~ ERROR visibility qualifiers are not permitted here\n+    pub const C: u8 = 0; //~ ERROR visibility qualifiers are not permitted here\n+    pub type T = u8; //~ ERROR visibility qualifiers are not permitted here\n }\n-pub impl S { //~ ERROR unnecessary visibility qualifier\n+pub impl S { //~ ERROR visibility qualifiers are not permitted here\n     pub fn f() {}\n     pub const C: u8 = 0;\n     // pub type T = u8;\n }\n-pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n+pub extern \"C\" { //~ ERROR visibility qualifiers are not permitted here\n     pub fn f();\n     pub static St: u8;\n }\n@@ -36,17 +36,17 @@ const MAIN: u8 = {\n     }\n     struct Ts(pub u8);\n \n-    pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n-        pub fn f() {} //~ ERROR unnecessary visibility qualifier\n-        pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n-        pub type T = u8; //~ ERROR unnecessary visibility qualifier\n+    pub impl Tr for S {  //~ ERROR visibility qualifiers are not permitted here\n+        pub fn f() {} //~ ERROR visibility qualifiers are not permitted here\n+        pub const C: u8 = 0; //~ ERROR visibility qualifiers are not permitted here\n+        pub type T = u8; //~ ERROR visibility qualifiers are not permitted here\n     }\n-    pub impl S { //~ ERROR unnecessary visibility qualifier\n+    pub impl S { //~ ERROR visibility qualifiers are not permitted here\n         pub fn f() {}\n         pub const C: u8 = 0;\n         // pub type T = u8;\n     }\n-    pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n+    pub extern \"C\" { //~ ERROR visibility qualifiers are not permitted here\n         pub fn f();\n         pub static St: u8;\n     }\n@@ -65,17 +65,17 @@ fn main() {\n     }\n     struct Ts(pub u8);\n \n-    pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n-        pub fn f() {} //~ ERROR unnecessary visibility qualifier\n-        pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n-        pub type T = u8; //~ ERROR unnecessary visibility qualifier\n+    pub impl Tr for S {  //~ ERROR visibility qualifiers are not permitted here\n+        pub fn f() {} //~ ERROR visibility qualifiers are not permitted here\n+        pub const C: u8 = 0; //~ ERROR visibility qualifiers are not permitted here\n+        pub type T = u8; //~ ERROR visibility qualifiers are not permitted here\n     }\n-    pub impl S { //~ ERROR unnecessary visibility qualifier\n+    pub impl S { //~ ERROR visibility qualifiers are not permitted here\n         pub fn f() {}\n         pub const C: u8 = 0;\n         // pub type T = u8;\n     }\n-    pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n+    pub extern \"C\" { //~ ERROR visibility qualifiers are not permitted here\n         pub fn f();\n         pub static St: u8;\n     }"}, {"sha": "a537f8c190103a77b61b3e74adef2a1fad988103", "filename": "tests/ui/privacy/privacy-sanity.stderr", "status": "modified", "additions": 60, "deletions": 36, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fprivacy-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fprivacy-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivacy-sanity.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,120 +1,144 @@\n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:13:1\n    |\n LL | pub impl Tr for S {\n-   | ^^^ `pub` not permitted here because it's implied\n+   | ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:14:5\n    |\n LL |     pub fn f() {}\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:15:5\n    |\n LL |     pub const C: u8 = 0;\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:16:5\n    |\n LL |     pub type T = u8;\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:18:1\n    |\n LL | pub impl S {\n-   | ^^^ `pub` not permitted here because it's implied\n+   | ^^^\n    |\n    = note: place qualifiers on individual impl items instead\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:23:1\n    |\n LL | pub extern \"C\" {\n-   | ^^^ `pub` not permitted here because it's implied\n+   | ^^^\n    |\n    = note: place qualifiers on individual foreign items instead\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:39:5\n    |\n LL |     pub impl Tr for S {\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:40:9\n    |\n LL |         pub fn f() {}\n-   |         ^^^ `pub` not permitted here because it's implied\n+   |         ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:41:9\n    |\n LL |         pub const C: u8 = 0;\n-   |         ^^^ `pub` not permitted here because it's implied\n+   |         ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:42:9\n    |\n LL |         pub type T = u8;\n-   |         ^^^ `pub` not permitted here because it's implied\n+   |         ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:44:5\n    |\n LL |     pub impl S {\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n    |\n    = note: place qualifiers on individual impl items instead\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:49:5\n    |\n LL |     pub extern \"C\" {\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n    |\n    = note: place qualifiers on individual foreign items instead\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:68:5\n    |\n LL |     pub impl Tr for S {\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:69:9\n    |\n LL |         pub fn f() {}\n-   |         ^^^ `pub` not permitted here because it's implied\n+   |         ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:70:9\n    |\n LL |         pub const C: u8 = 0;\n-   |         ^^^ `pub` not permitted here because it's implied\n+   |         ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:71:9\n    |\n LL |         pub type T = u8;\n-   |         ^^^ `pub` not permitted here because it's implied\n+   |         ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:73:5\n    |\n LL |     pub impl S {\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n    |\n    = note: place qualifiers on individual impl items instead\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/privacy-sanity.rs:78:5\n    |\n LL |     pub extern \"C\" {\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n    |\n    = note: place qualifiers on individual foreign items instead\n "}, {"sha": "e4b671142f9f0250355d484fcd6d085c0d612a9f", "filename": "tests/ui/privacy/useless-pub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fuseless-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fuseless-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fuseless-pub.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -5,12 +5,12 @@ pub trait E {\n }\n \n impl E for A {\n-    pub fn foo(&self) {} //~ ERROR: unnecessary visibility qualifier\n+    pub fn foo(&self) {} //~ ERROR: visibility qualifiers are not permitted here\n }\n \n enum Foo {\n-    V1 { pub f: i32 }, //~ ERROR unnecessary visibility qualifier\n-    V2(pub i32), //~ ERROR unnecessary visibility qualifier\n+    V1 { pub f: i32 }, //~ ERROR visibility qualifiers are not permitted here\n+    V2(pub i32), //~ ERROR visibility qualifiers are not permitted here\n }\n \n fn main() {}"}, {"sha": "73497e3fed5bfb399fde8a3e7fce78bb3fe16709", "filename": "tests/ui/privacy/useless-pub.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fuseless-pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Fprivacy%2Fuseless-pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fuseless-pub.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,20 +1,26 @@\n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/useless-pub.rs:8:5\n    |\n LL |     pub fn foo(&self) {}\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^\n+   |\n+   = note: trait items always share the visibility of their trait\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/useless-pub.rs:12:10\n    |\n LL |     V1 { pub f: i32 },\n-   |          ^^^ `pub` not permitted here because it's implied\n+   |          ^^^\n+   |\n+   = note: enum variants and their fields always share the visibility of the enum they are in\n \n-error[E0449]: unnecessary visibility qualifier\n+error[E0449]: visibility qualifiers are not permitted here\n   --> $DIR/useless-pub.rs:13:8\n    |\n LL |     V2(pub i32),\n-   |        ^^^ `pub` not permitted here because it's implied\n+   |        ^^^\n+   |\n+   = note: enum variants and their fields always share the visibility of the enum they are in\n \n error: aborting due to 3 previous errors\n "}, {"sha": "083aa90e1f64eb2aca849cfd92f5f451730243fe", "filename": "tests/ui/traits/new-solver/int-var-is-send.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-is-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-is-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-is-send.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn needs_send(_: impl Send) {}\n+\n+fn main() {\n+    needs_send(1);\n+}"}, {"sha": "a3ab7836c193b54bc0178a4249de1adb6cd022bf", "filename": "tests/ui/traits/new-solver/stall-num-var-auto-trait.fallback.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.fallback.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/stall-num-var-auto-trait.rs:18:15\n+   |\n+LL |     needs_foo(x);\n+   |     --------- ^ the trait `Foo` is not implemented for `i32`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `needs_foo`\n+  --> $DIR/stall-num-var-auto-trait.rs:14:22\n+   |\n+LL | fn needs_foo(x: impl Foo) {}\n+   |                      ^^^ required by this bound in `needs_foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0539c3a4292febfb75c96e31ee18968190d2de97", "filename": "tests/ui/traits/new-solver/stall-num-var-auto-trait.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -0,0 +1,25 @@\n+// compile-flags: -Ztrait-solver=next\n+// revisions: fallback constrain\n+//[constrain] check-pass\n+\n+// Tests that we stall the `{integer}: Foo` obligation until after we\n+// constrain the int type (or fallback occurs).\n+\n+#![feature(negative_impls, auto_traits)]\n+\n+auto trait Foo {}\n+\n+impl !Foo for i32 {}\n+\n+fn needs_foo(x: impl Foo) {}\n+\n+fn main() {\n+    let mut x = 0;\n+    needs_foo(x);\n+    //[fallback]~^ ERROR the trait bound `i32: Foo` is not satisfied\n+\n+    #[cfg(constrain)]\n+    {\n+        x = 1u64;\n+    }\n+}"}]}