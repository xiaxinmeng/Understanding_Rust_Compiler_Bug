{"sha": "910ec42566c08819de7732bea910fa53f99fd530", "node_id": "C_kwDOAAsO6NoAKDkxMGVjNDI1NjZjMDg4MTlkZTc3MzJiZWE5MTBmYTUzZjk5ZmQ1MzA", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-06-19T22:58:08Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-07-06T19:24:53Z"}, "message": "Fixes to make stdarch tests compile", "tree": {"sha": "c4b816373bc8bc2225cac1c2c6f36dd7e55fa0c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b816373bc8bc2225cac1c2c6f36dd7e55fa0c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910ec42566c08819de7732bea910fa53f99fd530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910ec42566c08819de7732bea910fa53f99fd530", "html_url": "https://github.com/rust-lang/rust/commit/910ec42566c08819de7732bea910fa53f99fd530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910ec42566c08819de7732bea910fa53f99fd530/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1777cdd644c67d82f306142ef77cce6f33719f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/1777cdd644c67d82f306142ef77cce6f33719f54", "html_url": "https://github.com/rust-lang/rust/commit/1777cdd644c67d82f306142ef77cce6f33719f54"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "2f688fd66b2adfffae26ebbe32b7d777675b9c2c", "filename": "src/base.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/910ec42566c08819de7732bea910fa53f99fd530/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec42566c08819de7732bea910fa53f99fd530/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=910ec42566c08819de7732bea910fa53f99fd530", "patch": "@@ -83,15 +83,33 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol, supports_\n         context.add_command_line_option(\"-mavx2\");\n         // FIXME(antoyo): the following causes an illegal instruction on vmovdqu64 in std_example on my CPU.\n         // Only add if the CPU supports it.\n-        /*context.add_command_line_option(\"-mavx512f\");\n+        context.add_command_line_option(\"-mavx512f\");\n         context.add_command_line_option(\"-msha\");\n         context.add_command_line_option(\"-mpclmul\");\n         context.add_command_line_option(\"-mfma\");\n         context.add_command_line_option(\"-mfma4\");\n         context.add_command_line_option(\"-mavx512vpopcntdq\");\n         context.add_command_line_option(\"-mavx512vl\");\n         context.add_command_line_option(\"-m64\");\n-        context.add_command_line_option(\"-mbmi\");*/\n+        context.add_command_line_option(\"-mbmi\");\n+        context.add_command_line_option(\"-mgfni\");\n+        context.add_command_line_option(\"-mavxvnni\");\n+        context.add_command_line_option(\"-mavx512vnni\");\n+        context.add_command_line_option(\"-mavx512bw\");\n+        context.add_command_line_option(\"-mf16c\");\n+        context.add_command_line_option(\"-mavx512bitalg\");\n+        context.add_command_line_option(\"-maes\");\n+        context.add_command_line_option(\"-mxsavec\");\n+        context.add_command_line_option(\"-mbmi2\");\n+        context.add_command_line_option(\"-mavx512bf16\");\n+        context.add_command_line_option(\"-mrtm\");\n+        context.add_command_line_option(\"-mvaes\");\n+        context.add_command_line_option(\"-mvpclmulqdq\");\n+        context.add_command_line_option(\"-mavx\");\n+        context.add_command_line_option(\"-mavx512vbmi2\");\n+        context.add_command_line_option(\"-mavx512vbmi\");\n+        context.add_command_line_option(\"-mavx512ifma\");\n+        context.add_command_line_option(\"-mavx512cd\");\n         for arg in &tcx.sess.opts.cg.llvm_args {\n             context.add_command_line_option(arg);\n         }"}, {"sha": "08930387ccb29acb53fa0ac3e8a5a16c9155d2b1", "filename": "src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/910ec42566c08819de7732bea910fa53f99fd530/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec42566c08819de7732bea910fa53f99fd530/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=910ec42566c08819de7732bea910fa53f99fd530", "patch": "@@ -213,7 +213,7 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n \n                 let actual_ty = actual_val.get_type();\n                 if expected_ty != actual_ty {\n-                    if !actual_ty.is_vector() && !expected_ty.is_vector() && actual_ty.is_integral() && expected_ty.is_integral() {\n+                    if !actual_ty.is_vector() && !expected_ty.is_vector() && (actual_ty.is_integral() && expected_ty.is_integral()) || (actual_ty.get_pointee().is_some() && expected_ty.get_pointee().is_some()) {\n                         self.context.new_cast(None, actual_val, expected_ty)\n                     }\n                     else if on_stack_param_indices.contains(&index) {"}, {"sha": "e0e35bea782b93133da408f3fe95a01a1de34a7a", "filename": "src/common.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/910ec42566c08819de7732bea910fa53f99fd530/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910ec42566c08819de7732bea910fa53f99fd530/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=910ec42566c08819de7732bea910fa53f99fd530", "patch": "@@ -177,8 +177,18 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                 }\n \n                 let value = self.const_uint_big(self.type_ix(bitsize), data);\n-                // TODO(bjorn3): assert size is correct\n-                self.const_bitcast(value, ty)\n+                let bytesize = layout.size(self).bytes();\n+                if bitsize > 1 && ty.is_integral() && bytesize as u32 == ty.get_size() {\n+                    // NOTE: since the intrinsic _xabort is called with a bitcast, which\n+                    // is non-const, but expects a constant, do a normal cast instead of a bitcast.\n+                    // FIXME(antoyo): fix bitcast to work in constant contexts.\n+                    // TODO: perhaps only use bitcast for pointers?\n+                    self.context.new_cast(None, value, ty)\n+                }\n+                else {\n+                    // TODO(bjorn3): assert size is correct\n+                    self.const_bitcast(value, ty)\n+                }\n             }\n             Scalar::Ptr(ptr, _size) => {\n                 let (alloc_id, offset) = ptr.into_parts();"}]}