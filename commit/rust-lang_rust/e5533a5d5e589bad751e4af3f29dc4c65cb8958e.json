{"sha": "e5533a5d5e589bad751e4af3f29dc4c65cb8958e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NTMzYTVkNWU1ODliYWQ3NTFlNGFmM2YyOWRjNGM2NWNiODk1OGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-09T19:49:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-09T19:49:52Z"}, "message": "rt: Compare exterior vectors", "tree": {"sha": "569b12ec29b02b8bce112162e6ec2f524f976de8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/569b12ec29b02b8bce112162e6ec2f524f976de8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5533a5d5e589bad751e4af3f29dc4c65cb8958e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5533a5d5e589bad751e4af3f29dc4c65cb8958e", "html_url": "https://github.com/rust-lang/rust/commit/e5533a5d5e589bad751e4af3f29dc4c65cb8958e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5533a5d5e589bad751e4af3f29dc4c65cb8958e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d74d22eda5f9bcf88103853b614664750538897", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d74d22eda5f9bcf88103853b614664750538897", "html_url": "https://github.com/rust-lang/rust/commit/0d74d22eda5f9bcf88103853b614664750538897"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "6e6d8fd4b09107c6352196aed06e0bb5a67cc9b8", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e5533a5d5e589bad751e4af3f29dc4c65cb8958e/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e5533a5d5e589bad751e4af3f29dc4c65cb8958e/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=e5533a5d5e589bad751e4af3f29dc4c65cb8958e", "patch": "@@ -851,7 +851,9 @@ class data : public ctxt< data<T,U> > {\n protected:\n     void walk_variant(bool align, tag_info &tinfo, uint32_t variant);\n \n+    static std::pair<uint8_t *,uint8_t *> get_evec_data_range(uint8_t *dp);\n     static std::pair<uint8_t *,uint8_t *> get_ivec_data_range(uint8_t *dp);\n+    static std::pair<ptr_pair,ptr_pair> get_evec_data_range(ptr_pair &dp);\n     static std::pair<ptr_pair,ptr_pair> get_ivec_data_range(ptr_pair &dp);\n \n public:\n@@ -920,6 +922,13 @@ data<T,U>::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id) {\n                                          variant_ptr_and_end);\n }\n \n+template<typename T,typename U>\n+std::pair<uint8_t *,uint8_t *>\n+data<T,U>::get_evec_data_range(uint8_t *dp) {\n+    rust_vec *vp = bump_dp<rust_vec *>(dp);\n+    return std::make_pair(vp->data, vp->data + vp->fill);\n+}\n+\n template<typename T,typename U>\n std::pair<uint8_t *,uint8_t *>\n data<T,U>::get_ivec_data_range(uint8_t *dp) {\n@@ -945,6 +954,16 @@ data<T,U>::get_ivec_data_range(uint8_t *dp) {\n     return std::make_pair(start, end);\n }\n \n+template<typename T,typename U>\n+std::pair<ptr_pair,ptr_pair>\n+data<T,U>::get_evec_data_range(ptr_pair &dp) {\n+    std::pair<uint8_t *,uint8_t *> fst = get_evec_data_range(dp.fst);\n+    std::pair<uint8_t *,uint8_t *> snd = get_evec_data_range(dp.snd);\n+    ptr_pair start(fst.first, snd.first);\n+    ptr_pair end(fst.second, snd.second);\n+    return std::make_pair(start, end);\n+}\n+\n template<typename T,typename U>\n std::pair<ptr_pair,ptr_pair>\n data<T,U>::get_ivec_data_range(ptr_pair &dp) {\n@@ -1010,16 +1029,19 @@ class cmp : public data<cmp,ptr_pair> {\n     friend class data<cmp,ptr_pair>;\n \n private:\n-    template<typename T>\n-    void cmp_number(const data_pair<T> &nums) {\n-        result = (nums.fst < nums.snd) ? -1 : (nums.fst == nums.snd) ? 0 : 1;\n-    }\n+    void walk_vec(bool align, bool is_pod,\n+                  const std::pair<ptr_pair,ptr_pair> &data_range);\n \n     void walk_subcontext(bool align, cmp &sub) {\n         sub.walk(align);\n         result = sub.result;\n     }\n \n+    template<typename T>\n+    void cmp_number(const data_pair<T> &nums) {\n+        result = (nums.fst < nums.snd) ? -1 : (nums.fst == nums.snd) ? 0 : 1;\n+    }\n+\n public:\n     int result;\n \n@@ -1048,7 +1070,14 @@ class cmp : public data<cmp,ptr_pair> {\n                          in_dp),\n       result(0) {}\n \n-    void walk_ivec(bool align, bool is_pod, size_align &elem_sa);\n+    void walk_evec(bool align, bool is_pod, uint16_t sp_size) {\n+        return walk_vec(align, is_pod, get_evec_data_range(dp));\n+    }\n+\n+    void walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n+        return walk_vec(align, is_pod, get_ivec_data_range(dp));\n+    }\n+\n     void walk_tag(bool align, tag_info &tinfo,\n                   const data_pair<uint32_t> &tag_variants);\n     void walk_box(bool align);\n@@ -1069,9 +1098,8 @@ void cmp::cmp_number<int32_t>(const data_pair<int32_t> &nums) {\n }\n \n void\n-cmp::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n-    std::pair<ptr_pair,ptr_pair> data_range = get_ivec_data_range(dp);\n-\n+cmp::walk_vec(bool align, bool is_pod,\n+              const std::pair<ptr_pair,ptr_pair> &data_range) {\n     cmp sub(*this, data_range.first);\n     ptr_pair data_end = data_range.second;\n     while (!result && sub.dp < data_end) {"}]}