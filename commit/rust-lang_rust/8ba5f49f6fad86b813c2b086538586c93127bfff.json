{"sha": "8ba5f49f6fad86b813c2b086538586c93127bfff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYTVmNDlmNmZhZDg2YjgxM2MyYjA4NjUzODU4NmM5MzEyN2JmZmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-09T07:23:51Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T04:53:38Z"}, "message": "Adjust and document 'Pat::to_ty' accordingly.", "tree": {"sha": "d878e2d61443cadb2e545c4326dc78554abcd486", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d878e2d61443cadb2e545c4326dc78554abcd486"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ba5f49f6fad86b813c2b086538586c93127bfff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba5f49f6fad86b813c2b086538586c93127bfff", "html_url": "https://github.com/rust-lang/rust/commit/8ba5f49f6fad86b813c2b086538586c93127bfff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ba5f49f6fad86b813c2b086538586c93127bfff/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b02941f2a679381d15a7c735d0c644935c9a62b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02941f2a679381d15a7c735d0c644935c9a62b0", "html_url": "https://github.com/rust-lang/rust/commit/b02941f2a679381d15a7c735d0c644935c9a62b0"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "a7453f4f9dac2b8d389c4134bce1b5bdf5ae67f5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ba5f49f6fad86b813c2b086538586c93127bfff/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba5f49f6fad86b813c2b086538586c93127bfff/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8ba5f49f6fad86b813c2b086538586c93127bfff", "patch": "@@ -519,21 +519,28 @@ impl fmt::Debug for Pat {\n }\n \n impl Pat {\n+    /// Attempt reparsing the pattern as a type.\n+    /// This is intended for use by diagnostics.\n     pub(super) fn to_ty(&self) -> Option<P<Ty>> {\n         let node = match &self.node {\n+            // In a type expression `_` is an inference variable.\n             PatKind::Wild => TyKind::Infer,\n+            // An IDENT pattern with no binding mode would be valid as path to a type. E.g. `u32`.\n             PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None) => {\n                 TyKind::Path(None, Path::from_ident(*ident))\n             }\n             PatKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n             PatKind::Mac(mac) => TyKind::Mac(mac.clone()),\n+            // `&mut? P` can be reinterpreted as `&mut? T` where `T` is `P` reparsed as a type.\n             PatKind::Ref(pat, mutbl) => pat\n                 .to_ty()\n                 .map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?,\n-            PatKind::Slice(pats, None, _) if pats.len() == 1 => {\n-                pats[0].to_ty().map(TyKind::Slice)?\n-            }\n-            PatKind::Tuple(pats, None) => {\n+            // A slice/array pattern `[P]` can be reparsed as `[T]`, an unsized array,\n+            // when `P` can be reparsed as a type `T`.\n+            PatKind::Slice(pats) if pats.len() == 1 => pats[0].to_ty().map(TyKind::Slice)?,\n+            // A tuple pattern `(P0, .., Pn)` can be reparsed as `(T0, .., Tn)`\n+            // assuming `T0` to `Tn` are all syntactically valid as types.\n+            PatKind::Tuple(pats) => {\n                 let mut tys = Vec::with_capacity(pats.len());\n                 // FIXME(#48994) - could just be collected into an Option<Vec>\n                 for pat in pats {"}]}