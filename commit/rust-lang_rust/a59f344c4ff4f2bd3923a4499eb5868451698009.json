{"sha": "a59f344c4ff4f2bd3923a4499eb5868451698009", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OWYzNDRjNGZmNGYyYmQzOTIzYTQ0OTllYjU4Njg0NTE2OTgwMDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-30T16:24:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-30T16:24:31Z"}, "message": "internal: improve consistency\n\nLet's have only one place where we start delayed ops", "tree": {"sha": "9c8d2834adf3ce6257673f833c5b7a00888c3f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c8d2834adf3ce6257673f833c5b7a00888c3f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59f344c4ff4f2bd3923a4499eb5868451698009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59f344c4ff4f2bd3923a4499eb5868451698009", "html_url": "https://github.com/rust-lang/rust/commit/a59f344c4ff4f2bd3923a4499eb5868451698009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59f344c4ff4f2bd3923a4499eb5868451698009/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6317292cd52de5119f712be5346051d454f508ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/6317292cd52de5119f712be5346051d454f508ad", "html_url": "https://github.com/rust-lang/rust/commit/6317292cd52de5119f712be5346051d454f508ad"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "a60056cfbed818cf9b7fa5845cd47d0e2f708858", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a59f344c4ff4f2bd3923a4499eb5868451698009/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59f344c4ff4f2bd3923a4499eb5868451698009/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=a59f344c4ff4f2bd3923a4499eb5868451698009", "patch": "@@ -427,23 +427,6 @@ impl GlobalState {\n             if !was_quiescent || state_changed {\n                 // Ensure that only one cache priming task can run at a time\n                 self.prime_caches_queue.request_op();\n-                if self.prime_caches_queue.should_start_op() {\n-                    self.task_pool.handle.spawn_with_sender({\n-                        let analysis = self.snapshot().analysis;\n-                        move |sender| {\n-                            sender.send(Task::PrimeCaches(PrimeCachesProgress::Begin)).unwrap();\n-                            let res = analysis.prime_caches(|progress| {\n-                                let report = PrimeCachesProgress::Report(progress);\n-                                sender.send(Task::PrimeCaches(report)).unwrap();\n-                            });\n-                            sender\n-                                .send(Task::PrimeCaches(PrimeCachesProgress::End {\n-                                    cancelled: res.is_err(),\n-                                }))\n-                                .unwrap();\n-                        }\n-                    });\n-                }\n \n                 // Refresh semantic tokens if the client supports it.\n                 if self.config.semantic_tokens_refresh() {\n@@ -494,6 +477,24 @@ impl GlobalState {\n         }\n         self.fetch_build_data_if_needed();\n \n+        if self.prime_caches_queue.should_start_op() {\n+            self.task_pool.handle.spawn_with_sender({\n+                let analysis = self.snapshot().analysis;\n+                move |sender| {\n+                    sender.send(Task::PrimeCaches(PrimeCachesProgress::Begin)).unwrap();\n+                    let res = analysis.prime_caches(|progress| {\n+                        let report = PrimeCachesProgress::Report(progress);\n+                        sender.send(Task::PrimeCaches(report)).unwrap();\n+                    });\n+                    sender\n+                        .send(Task::PrimeCaches(PrimeCachesProgress::End {\n+                            cancelled: res.is_err(),\n+                        }))\n+                        .unwrap();\n+                }\n+            });\n+        }\n+\n         self.report_new_status_if_needed();\n \n         let loop_duration = loop_start.elapsed();"}]}