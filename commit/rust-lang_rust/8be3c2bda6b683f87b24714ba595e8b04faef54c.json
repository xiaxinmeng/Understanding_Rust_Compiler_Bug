{"sha": "8be3c2bda6b683f87b24714ba595e8b04faef54c", "node_id": "C_kwDOAAsO6NoAKDhiZTNjMmJkYTZiNjgzZjg3YjI0NzE0YmE1OTVlOGIwNGZhZWY1NGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-24T21:10:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-24T21:10:51Z"}, "message": "Auto merge of #107932 - petrochenkov:onlyexport, r=jyn514\n\nrustdoc: Skip doc link resolution for non-exported items", "tree": {"sha": "e62745b744cf51c45e47a6c8322e86de9d82d425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e62745b744cf51c45e47a6c8322e86de9d82d425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8be3c2bda6b683f87b24714ba595e8b04faef54c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8be3c2bda6b683f87b24714ba595e8b04faef54c", "html_url": "https://github.com/rust-lang/rust/commit/8be3c2bda6b683f87b24714ba595e8b04faef54c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8be3c2bda6b683f87b24714ba595e8b04faef54c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a933042e4e07ee9d9c20897d4fab595766fef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a933042e4e07ee9d9c20897d4fab595766fef6", "html_url": "https://github.com/rust-lang/rust/commit/80a933042e4e07ee9d9c20897d4fab595766fef6"}, {"sha": "bec4eab3f972495df32b4861a3117ef16d73a018", "url": "https://api.github.com/repos/rust-lang/rust/commits/bec4eab3f972495df32b4861a3117ef16d73a018", "html_url": "https://github.com/rust-lang/rust/commit/bec4eab3f972495df32b4861a3117ef16d73a018"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "4ca54bab31a680b8e0ea2f007dd70fbc140c7c05", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8be3c2bda6b683f87b24714ba595e8b04faef54c/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be3c2bda6b683f87b24714ba595e8b04faef54c/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=8be3c2bda6b683f87b24714ba595e8b04faef54c", "patch": "@@ -4236,7 +4236,10 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             {\n                 return;\n             }\n-            ResolveDocLinks::Exported if !maybe_exported.eval(self.r) => {\n+            ResolveDocLinks::Exported\n+                if !maybe_exported.eval(self.r)\n+                    && !rustdoc::has_primitive_or_keyword_docs(attrs) =>\n+            {\n                 return;\n             }\n             ResolveDocLinks::ExportedMetadata"}, {"sha": "44a27bbc175e19125af854285a9d34d8c7c30462", "filename": "compiler/rustc_resolve/src/rustdoc.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8be3c2bda6b683f87b24714ba595e8b04faef54c/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be3c2bda6b683f87b24714ba595e8b04faef54c/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs?ref=8be3c2bda6b683f87b24714ba595e8b04faef54c", "patch": "@@ -3,7 +3,7 @@ use rustc_ast as ast;\n use rustc_ast::util::comments::beautify_doc_string;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::def_id::DefId;\n-use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use std::{cmp, mem};\n \n@@ -339,6 +339,20 @@ pub fn inner_docs(attrs: &[ast::Attribute]) -> bool {\n     attrs.iter().find(|a| a.doc_str().is_some()).map_or(true, |a| a.style == ast::AttrStyle::Inner)\n }\n \n+/// Has `#[doc(primitive)]` or `#[doc(keyword)]`.\n+pub fn has_primitive_or_keyword_docs(attrs: &[ast::Attribute]) -> bool {\n+    for attr in attrs {\n+        if attr.has_name(sym::doc) && let Some(items) = attr.meta_item_list() {\n+            for item in items {\n+                if item.has_name(sym::primitive) || item.has_name(sym::keyword) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    false\n+}\n+\n /// Simplified version of the corresponding function in rustdoc.\n /// If the rustdoc version returns a successful result, this function must return the same result.\n /// Otherwise this function may return anything."}, {"sha": "28458f329036d6bee8fa98cd9975ca2948c3a37c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8be3c2bda6b683f87b24714ba595e8b04faef54c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be3c2bda6b683f87b24714ba595e8b04faef54c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8be3c2bda6b683f87b24714ba595e8b04faef54c", "patch": "@@ -217,13 +217,8 @@ pub(crate) fn create_config(\n \n     let crate_types =\n         if proc_macro_crate { vec![CrateType::ProcMacro] } else { vec![CrateType::Rlib] };\n-    let resolve_doc_links = if *document_private {\n-        ResolveDocLinks::All\n-    } else {\n-        // Should be `ResolveDocLinks::Exported` in theory, but for some reason rustdoc\n-        // still tries to request resolutions for links on private items.\n-        ResolveDocLinks::All\n-    };\n+    let resolve_doc_links =\n+        if *document_private { ResolveDocLinks::All } else { ResolveDocLinks::Exported };\n     let test = scrape_examples_options.map(|opts| opts.scrape_tests).unwrap_or(false);\n     // plays with error output here!\n     let sessopts = config::Options {"}, {"sha": "d98cf251e971828a01c3382a9ef593f6ab85debe", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8be3c2bda6b683f87b24714ba595e8b04faef54c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be3c2bda6b683f87b24714ba595e8b04faef54c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=8be3c2bda6b683f87b24714ba595e8b04faef54c", "patch": "@@ -15,8 +15,8 @@ use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::Mutability;\n use rustc_middle::ty::{fast_reject::TreatProjections, Ty, TyCtxt};\n use rustc_middle::{bug, ty};\n-use rustc_resolve::rustdoc::MalformedGenerics;\n-use rustc_resolve::rustdoc::{prepare_to_doc_link_resolution, strip_generics_from_path};\n+use rustc_resolve::rustdoc::{has_primitive_or_keyword_docs, prepare_to_doc_link_resolution};\n+use rustc_resolve::rustdoc::{strip_generics_from_path, MalformedGenerics};\n use rustc_session::lint::Lint;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -899,6 +899,15 @@ fn preprocessed_markdown_links(s: &str) -> Vec<PreprocessedMarkdownLink> {\n \n impl LinkCollector<'_, '_> {\n     fn resolve_links(&mut self, item: &Item) {\n+        if !self.cx.render_options.document_private\n+            && let Some(def_id) = item.item_id.as_def_id()\n+            && let Some(def_id) = def_id.as_local()\n+            && !self.cx.tcx.effective_visibilities(()).is_exported(def_id)\n+            && !has_primitive_or_keyword_docs(&item.attrs.other_attrs) {\n+            // Skip link resolution for non-exported items.\n+            return;\n+        }\n+\n         // We want to resolve in the lexical scope of the documentation.\n         // In the presence of re-exports, this is not the same as the module of the item.\n         // Rather than merging all documentation into one, resolve it one attribute at a time"}, {"sha": "6afcad4f92117373d52db0e1e3376125ea2020a4", "filename": "tests/rustdoc-ui/intra-doc/reachable-non-exported.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8be3c2bda6b683f87b24714ba595e8b04faef54c/tests%2Frustdoc-ui%2Fintra-doc%2Freachable-non-exported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be3c2bda6b683f87b24714ba595e8b04faef54c/tests%2Frustdoc-ui%2Fintra-doc%2Freachable-non-exported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Freachable-non-exported.rs?ref=8be3c2bda6b683f87b24714ba595e8b04faef54c", "patch": "@@ -0,0 +1,13 @@\n+// The structure is reachable, but not exported, so rustdoc\n+// doesn't attempt to request doc link resolutions on it.\n+\n+// check-pass\n+\n+mod private {\n+    /// [core::str::FromStr]\n+    pub struct ReachableButNotExported;\n+}\n+\n+pub fn foo() -> private::ReachableButNotExported {\n+    private::ReachableButNotExported\n+}"}]}