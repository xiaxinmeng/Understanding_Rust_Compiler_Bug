{"sha": "faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjFhZmVlMTZjZmFjZjAzMThjYTJiODhiYzRmYTVlNTA3NDE4ZGQ=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-05-29T08:08:20Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-05-29T08:08:20Z"}, "message": "Further refactor optimization pass handling\n\nThis refactors pass handling to use the argument names, so it can be used\nin a similar manner to `opt`. This may be slightly less efficient than the\nprevious version, but it is much easier to maintain.\n\nIt also adds in the ability to specify a custom pipeline on the command\nline, this overrides the normal passes, however. This should completely\nclose #2396.", "tree": {"sha": "94ee9aeb94d1eecea20f9929816f237a67336def", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94ee9aeb94d1eecea20f9929816f237a67336def"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "html_url": "https://github.com/rust-lang/rust/commit/faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ad0b8ac585487b6f29dd6d97bcfb7a1742f1eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad0b8ac585487b6f29dd6d97bcfb7a1742f1eb1", "html_url": "https://github.com/rust-lang/rust/commit/4ad0b8ac585487b6f29dd6d97bcfb7a1742f1eb1"}], "stats": {"total": 817, "additions": 321, "deletions": 496}, "files": [{"sha": "c3847ee4f15c35d6faa32a845de6698892301041", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "patch": "@@ -202,6 +202,8 @@ pub mod write {\n                       output_type: output_type,\n                       output: &Path) {\n         unsafe {\n+            llvm::LLVMInitializePasses();\n+\n             let opts = sess.opts;\n             if sess.time_llvm_passes() { llvm::LLVMRustEnableTimePasses(); }\n             let td = mk_target_data(sess.targ_cfg.target_strs.data_layout);\n@@ -232,14 +234,21 @@ pub mod write {\n             let mut mpm = passes::PassManager::new(td.lltd);\n \n             if !sess.no_verify() {\n-                mpm.addPass(llvm::LLVMCreateVerifierPass());\n+                mpm.add_pass_from_name(\"verify\");\n             }\n \n-            if sess.lint_llvm() {\n-                mpm.addPass(llvm::LLVMCreateLintPass());\n-            }\n+            let passes = if sess.opts.custom_passes.len() > 0 {\n+                copy sess.opts.custom_passes\n+            } else {\n+                if sess.lint_llvm() {\n+                    mpm.add_pass_from_name(\"lint\");\n+                }\n+                passes::create_standard_passes(opts.optimize)\n+            };\n+\n \n-            passes::populatePassManager(&mut mpm, opts.optimize);\n+            debug!(\"Passes: %?\", passes);\n+            passes::populate_pass_manager(sess, &mut mpm, passes);\n \n             debug!(\"Running Module Optimization Pass\");\n             mpm.run(llmod);"}, {"sha": "2e304b93c7e4d195765a4fd2ca686c49d573d252", "filename": "src/librustc/back/passes.rs", "status": "modified", "additions": 253, "deletions": 79, "changes": 332, "blob_url": "https://github.com/rust-lang/rust/blob/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "patch": "@@ -10,7 +10,8 @@\n \n use core::prelude::*;\n \n-use driver::session;\n+use driver::session::{OptLevel, No, Less, Default, Aggressive};\n+use driver::session::{Session};\n use lib::llvm::{PassRef, ModuleRef,PassManagerRef,TargetDataRef};\n use lib::llvm::llvm;\n use lib;\n@@ -39,116 +40,289 @@ impl PassManager {\n         }\n     }\n \n-    pub fn addPass(&mut self, pass:PassRef) {\n+    pub fn add_pass(&mut self, pass:PassRef) {\n         unsafe {\n             llvm::LLVMAddPass(self.llpm, pass);\n         }\n     }\n \n+    pub fn add_pass_from_name(&mut self, name:&str) {\n+        let pass = create_pass(name).unwrap();\n+        self.add_pass(pass);\n+    }\n+\n     pub fn run(&self, md:ModuleRef) -> bool {\n         unsafe {\n             llvm::LLVMRunPassManager(self.llpm, md) == lib::llvm::True\n         }\n     }\n }\n \n+pub fn create_standard_passes(level:OptLevel) -> ~[~str] {\n+    let mut passes = ~[~\"strip-dead-prototypes\"];\n \n-pub fn populatePassManager(pm: &mut PassManager, level:session::OptLevel) {\n-    unsafe {\n-        // We add a lot of normally-unused prototypes, so always strip them\n-        // straight away, later passes will get rid of any that are optimized\n-        // away\n-        pm.addPass(llvm::LLVMCreateStripDeadPrototypesPass());\n-        if level == session::No {\n-            pm.addPass(llvm::LLVMCreateAlwaysInlinerPass());\n+    if level == No {\n+        passes.push(~\"always-inline\");\n+        return passes;\n+    }\n \n-            return;\n-        }\n+    passes.push(~\"targetlibinfo\");\n \n-        //NOTE: Add library info\n+    passes.push(~\"tbaa\");\n+    passes.push(~\"basicaa\");\n \n-        pm.addPass(llvm::LLVMCreateTypeBasedAliasAnalysisPass());\n-        pm.addPass(llvm::LLVMCreateBasicAliasAnalysisPass());\n+    passes.push(~\"early-cse\");\n \n-        pm.addPass(llvm::LLVMCreateSROAPass());\n-        pm.addPass(llvm::LLVMCreateEarlyCSEPass());\n-        pm.addPass(llvm::LLVMCreateLowerExpectIntrinsicPass());\n+    passes.push(~\"globalopt\");\n+    passes.push(~\"ipsccp\");\n+    passes.push(~\"deadargelim\");\n+    passes.push(~\"instcombine\");\n+    passes.push(~\"simplifycfg\");\n \n-        pm.addPass(llvm::LLVMCreateGlobalOptimizerPass());\n-        pm.addPass(llvm::LLVMCreateIPSCCPPass());\n-        pm.addPass(llvm::LLVMCreateDeadArgEliminationPass());\n-        pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n-        pm.addPass(llvm::LLVMCreateCFGSimplificationPass());\n+    passes.push(~\"prune-eh\");\n \n-        pm.addPass(llvm::LLVMCreatePruneEHPass());\n+    if level == Aggressive {\n+        passes.push(~\"mergefunc\");\n+    }\n \n-        if level == session::Aggressive {\n-            // Do this before inlining, since inlining might\n-            // make minor changes to functions that mean they\n-            // can't be merged, despite being almost identical\n-            pm.addPass(llvm::LLVMCreateMergeFunctionsPass());\n-        }\n+    passes.push(~\"inline\");\n \n-        match level {\n-            session::Less       => pm.addPass(llvm::LLVMCreateFunctionInliningPass(200)),\n-            session::Default    => pm.addPass(llvm::LLVMCreateFunctionInliningPass(225)),\n-            session::Aggressive => pm.addPass(llvm::LLVMCreateFunctionInliningPass(275)),\n-            session::No         => ()\n-        }\n+    passes.push(~\"functionattrs\");\n \n-        pm.addPass(llvm::LLVMCreateFunctionAttrsPass());\n+    if level == Aggressive {\n+        passes.push(~\"argpromotion\");\n+    }\n \n-        if level == session::Aggressive {\n-            pm.addPass(llvm::LLVMCreateArgumentPromotionPass());\n-        }\n+    passes.push(~\"early-cse\");\n+    passes.push(~\"simplify-libcalls\");\n+    passes.push(~\"jump-threading\");\n+    passes.push(~\"correlated-propagation\");\n+    passes.push(~\"simplifycfg\");\n+    passes.push(~\"instcombine\");\n+\n+    passes.push(~\"tailcallelim\");\n+    passes.push(~\"simplifycfg\");\n+    passes.push(~\"reassociate\");\n+    passes.push(~\"loop-rotate\");\n+    passes.push(~\"licm\");\n+\n+    passes.push(~\"lcssa\");\n+    passes.push(~\"loop-unswitch\");\n+\n+    passes.push(~\"instcombine\");\n+    passes.push(~\"indvars\");\n+    passes.push(~\"loop-idiom\");\n+    passes.push(~\"loop-deletion\");\n+\n+    if level == Aggressive {\n+        passes.push(~\"loop-vectorize\");\n+    }\n+\n+    passes.push(~\"loop-unroll\");\n+\n+    if level != Less {\n+        passes.push(~\"gvn\");\n+    }\n+\n+    passes.push(~\"memcpyopt\");\n+    passes.push(~\"sccp\");\n+\n+    passes.push(~\"instcombine\");\n+    passes.push(~\"jump-threading\");\n+    passes.push(~\"correlated-propagation\");\n+    passes.push(~\"dse\");\n+\n+    passes.push(~\"bb-vectorize\");\n+    passes.push(~\"instcombine\");\n+    passes.push(~\"early-cse\");\n+\n+    passes.push(~\"loop-unroll\");\n+\n+    passes.push(~\"adce\");\n+    passes.push(~\"simplifycfg\");\n+    passes.push(~\"instsimplify\");\n \n-        pm.addPass(llvm::LLVMCreateEarlyCSEPass());\n-        pm.addPass(llvm::LLVMCreateSimplifyLibCallsPass());\n-        pm.addPass(llvm::LLVMCreateJumpThreadingPass());\n-        pm.addPass(llvm::LLVMCreateCorrelatedValuePropagationPass());\n-        pm.addPass(llvm::LLVMCreateCFGSimplificationPass());\n-        pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n-\n-        pm.addPass(llvm::LLVMCreateTailCallEliminationPass());\n-        pm.addPass(llvm::LLVMCreateCFGSimplificationPass());\n-        pm.addPass(llvm::LLVMCreateReassociatePass());\n-        pm.addPass(llvm::LLVMCreateLoopRotatePass());\n-        pm.addPass(llvm::LLVMCreateLICMPass());\n-\n-        pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n-        pm.addPass(llvm::LLVMCreateIndVarSimplifyPass());\n-        pm.addPass(llvm::LLVMCreateLoopIdiomPass());\n-        pm.addPass(llvm::LLVMCreateLoopDeletionPass());\n-\n-        if level == session::Aggressive {\n-            pm.addPass(llvm::LLVMCreateLoopVectorizePass());\n+    if level != Less {\n+        passes.push(~\"globaldce\");\n+        passes.push(~\"constmerge\");\n+    }\n+\n+    return passes;\n+}\n+\n+pub fn populate_pass_manager(sess: Session, pm: &mut PassManager, pass_list:&[~str]) {\n+    for pass_list.each |&nm| {\n+        match create_pass(nm) {\n+            Some(p) => pm.add_pass(p),\n+            None    => sess.warn(fmt!(\"Unknown pass %s\", nm))\n         }\n-        pm.addPass(llvm::LLVMCreateLoopUnrollPass());\n+    }\n+}\n \n-        if level != session::Less {\n-            pm.addPass(llvm::LLVMCreateGVNPass());\n+pub fn create_pass(name:&str) -> Option<PassRef> {\n+    do str::as_c_str(name) |s| {\n+        unsafe {\n+            let p = llvm::LLVMCreatePass(s);\n+            if p.is_null() {\n+                None\n+            } else {\n+                Some(p)\n+            }\n         }\n-        pm.addPass(llvm::LLVMCreateMemCpyOptPass());\n-        pm.addPass(llvm::LLVMCreateSCCPPass());\n+    }\n+}\n \n-        pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n-        pm.addPass(llvm::LLVMCreateJumpThreadingPass());\n-        pm.addPass(llvm::LLVMCreateCorrelatedValuePropagationPass());\n-        pm.addPass(llvm::LLVMCreateDeadStoreEliminationPass());\n+pub fn list_passes() {\n+    io::println(\"\\nAvailable Passes:\");\n \n-        pm.addPass(llvm::LLVMCreateBBVectorizePass());\n-        pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n-        pm.addPass(llvm::LLVMCreateEarlyCSEPass());\n+    io::println(\"\\nAnalysis Passes:\");\n+    for analysis_passes.each |&(name, desc)| {\n+        io::println(fmt!(\"    %-30s -- %s\", name, desc));\n+    }\n+    io::println(\"\\nTransformation Passes:\");\n+    for transform_passes.each |&(name, desc)| {\n+        io::println(fmt!(\"    %-30s -- %s\", name, desc));\n+    }\n+    io::println(\"\\nUtility Passes:\");\n+    for utility_passes.each |&(name, desc)| {\n+        io::println(fmt!(\"    %-30s -- %s\", name, desc));\n+    }\n+}\n+\n+/** Analysis Passes */\n+pub static analysis_passes : &'static [(&'static str, &'static str)] = &'static [\n+    (\"aa-eval\",                         \"Exhausive Alias Analysis Precision Evaluator\"),\n+    (\"asan\",                            \"AddressSanitizer\"),\n+    (\"basicaa\",                         \"Basic Alias Analysis\"),\n+    (\"basiccg\",                         \"Basic CallGraph Construction\"),\n+    (\"block-freq\",                      \"Block Frequency Analysis\"),\n+    (\"cost-model\",                      \"Cost Model Analysis\"),\n+    (\"count-aa\",                        \"Count Alias Analysis Query Responses\"),\n+    (\"da\",                              \"Dependence Analysis\"),\n+    (\"debug-aa\",                        \"AA Use Debugger\"),\n+    (\"domfrontier\",                     \"Dominance Frontier Construction\"),\n+    (\"domtree\",                         \"Dominator Tree Construction\"),\n+    (\"globalsmodref-aa\",                \"Simple mod/ref analysis for globals\"),\n+    (\"instcount\",                       \"Count the various types of Instructions\"),\n+    (\"intervals\",                       \"Interval Partition Construction\"),\n+    (\"iv-users\",                        \"Induction Variable Users\"),\n+    (\"lazy-value-info\",                 \"Lazy Value Information Analysis\"),\n+    (\"libcall-aa\",                      \"LibCall Alias Analysis\"),\n+    (\"lint\",                            \"Statically lint-check LLVM IR\"),\n+    (\"loops\",                           \"Natural Loop Information\"),\n+    (\"memdep\",                          \"Memory Dependence Analysis\"),\n+    (\"module-debuginfo\",                \"Decodes module-level debug info\"),\n+    (\"profile-estimator\",               \"Estimate profiling information\"),\n+    (\"profile-loader\",                  \"Load profile information from llvmprof.out\"),\n+    (\"profile-verifier\",                \"Verify profiling information\"),\n+    (\"regions\",                         \"Detect single entry single exit regions\"),\n+    (\"scalar-evolution\",                \"Scalar Evolution Analysis\"),\n+    (\"scev-aa\",                         \"Scalar Evolution-based Alias Analysis\"),\n+    (\"tbaa\",                            \"Type-Based Alias Analysis\"),\n+    (\"tsan\",                            \"ThreadSanitizer\"),\n+];\n \n-        pm.addPass(llvm::LLVMCreateLoopUnrollPass());\n+/** Transformation Passes */\n+pub static transform_passes : &'static [(&'static str, &'static str)] = &'static [\n+    (\"adce\",                            \"Aggressive Dead Code Elimination\"),\n+    (\"always-inline\",                   \"Inliner for #[inline(always)] functions\"),\n+    (\"argpromotion\",                    \"Promote 'by reference' arguments to scalars\"),\n+    (\"bb-vectorize\",                    \"Basic-Block Vectorization\"),\n+    (\"block-placement\",                 \"Profile Guided Basic Block Placement\"),\n+    (\"bounds-checking\",                 \"Run-time bounds checking\"),\n+    (\"break-crit-edges\",                \"Break critical edges in CFG\"),\n+    (\"codegenprepare\",                  \"Optimize for code generation\"),\n+    (\"constmerge\",                      \"Merge Duplicate Global Constants\"),\n+    (\"constprop\",                       \"Simple constant propagation\"),\n+    (\"correlated-propagation\",          \"Value Propagation\"),\n+    (\"da\",                              \"Data Layout\"),\n+    (\"dce\",                             \"Dead Code Elimination\"),\n+    (\"deadargelim\",                     \"Dead Argument Elimination\"),\n+    (\"die\",                             \"Dead Instruction Elimination\"),\n+    (\"dse\",                             \"Dead Store Elimination\"),\n+    (\"early-cse\",                       \"Early CSE\"),\n+    (\"functionattrs\",                   \"Deduce function attributes\"),\n+    (\"globaldce\",                       \"Dead Global Elimination\"),\n+    (\"globalopt\",                       \"Global Variable Optimizer\"),\n+    (\"gvn\",                             \"Global Value Numbering\"),\n+    (\"indvars\",                         \"Canonicalize Induction Variables\"),\n+    (\"inline\",                          \"Function Integration/Inlining\"),\n+    (\"insert-edge-profiling\",           \"Insert instrumentation for edge profiling\"),\n+    (\"insert-gcov-profiling\",           \"Insert instrumentation for GCOV profiling\"),\n+    (\"insert-optimal-edge-profiling\",   \"Insert optimal instrumentation for edge profiling\"),\n+    (\"instcombine\",                     \"Combine redundant instructions\"),\n+    (\"instsimplify\",                    \"Remove redundant instructions\"),\n+    (\"ipconstprop\",                     \"Interprocedural constant propagation\"),\n+    (\"ipsccp\",                          \"Interprocedural Sparse Conditional Constant Propagation\"),\n+    (\"jump-threading\",                  \"Jump Threading\"),\n+    (\"lcssa\",                           \"Loop-Closed SSA Form Pass\"),\n+    (\"licm\",                            \"Loop Invariant Code Motion\"),\n+    (\"loop-deletion\",                   \"Delete dead loops\"),\n+    (\"loop-extract\",                    \"Extract loops into new functions\"),\n+    (\"loop-extract-single\",             \"Extract at most one loop into a new function\"),\n+    (\"loop-idiom\",                      \"Recognise loop idioms\"),\n+    (\"loop-instsimplify\",               \"Simplify instructions in loops\"),\n+    (\"loop-reduce\",                     \"Loop Strength Reduction\"),\n+    (\"loop-rotate\",                     \"Rotate Loops\"),\n+    (\"loop-simplify\",                   \"Canonicalize natural loops\"),\n+    (\"loop-unroll\",                     \"Unroll loops\"),\n+    (\"loop-unswitch\",                   \"Unswitch loops\"),\n+    (\"loop-vectorize\",                  \"Loop Vectorization\"),\n+    (\"lower-expect\",                    \"Lower 'expect' Intrinsics\"),\n+    (\"mem2reg\",                         \"Promote Memory to Register\"),\n+    (\"memcpyopt\",                       \"MemCpy Optimization\"),\n+    (\"mergefunc\",                       \"Merge Functions\"),\n+    (\"mergereturn\",                     \"Unify function exit nodes\"),\n+    (\"partial-inliner\",                 \"Partial Inliner\"),\n+    (\"prune-eh\",                        \"Remove unused exception handling info\"),\n+    (\"reassociate\",                     \"Reassociate expressions\"),\n+    (\"reg2mem\",                         \"Demote all values to stack slots\"),\n+    (\"scalarrepl\",                      \"Scalar Replacement of Aggregates (DT)\"),\n+    (\"scalarrepl-ssa\",                  \"Scalar Replacement of Aggregates (SSAUp)\"),\n+    (\"sccp\",                            \"Sparse Conditional Constant Propagation\"),\n+    (\"simplify-libcalls\",               \"Simplify well-known library calls\"),\n+    (\"simplifycfg\",                     \"Simplify the CFG\"),\n+    (\"sink\",                            \"Code sinking\"),\n+    (\"strip\",                           \"Strip all symbols from a module\"),\n+    (\"strip-dead-debug-info\",           \"Strip debug info for unused symbols\"),\n+    (\"strip-dead-prototypes\",           \"Strip Unused Function Prototypes\"),\n+    (\"strip-debug-declare\",             \"Strip all llvm.dbg.declare intrinsics\"),\n+    (\"strip-nondebug\",                  \"Strip all symbols, except dbg symbols, from a module\"),\n+    (\"sroa\",                            \"Scalar Replacement of Aggregates\"),\n+    (\"tailcallelim\",                    \"Tail Call Elimination\"),\n+];\n \n-        pm.addPass(llvm::LLVMCreateAggressiveDCEPass());\n-        pm.addPass(llvm::LLVMCreateCFGSimplificationPass());\n-        pm.addPass(llvm::LLVMCreateInstructionSimplifierPass());\n+/** Utility Passes */\n+static utility_passes : &'static [(&'static str, &'static str)] = &'static [\n+    (\"instnamer\",                       \"Assign names to anonymous instructions\"),\n+    (\"verify\",                          \"Module Verifier\"),\n+];\n+\n+#[test]\n+fn passes_exist() {\n+    let mut failed = ~[];\n+    unsafe { llvm::LLVMInitializePasses(); }\n+    for analysis_passes.each() |&(name,_)| {\n+        if !create_pass(name).is_some() {\n+            failed.push(name);\n+        }\n+    }\n+    for transform_passes.each() |&(name,_)| {\n+        if !create_pass(name).is_some() {\n+            failed.push(name);\n+        }\n+    }\n+    for utility_passes.each() |&(name,_)| {\n+        if !create_pass(name).is_some() {\n+            failed.push(name);\n+        }\n+    }\n \n-        if level != session::Less {\n-            pm.addPass(llvm::LLVMCreateGlobalDCEPass());\n-            pm.addPass(llvm::LLVMCreateConstantMergePass());\n+    if failed.len() > 0 {\n+        io::println(\"Some passes don't exist:\");\n+        for failed.each |&n| {\n+            io::println(fmt!(\"    %s\", n));\n         }\n+        fail!();\n     }\n }"}, {"sha": "b256caa9b744f040160a02bf60291990a1b0497b", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "patch": "@@ -677,11 +677,24 @@ pub fn build_session_options(binary: @~str,\n     let android_cross_path = getopts::opt_maybe_str(\n         matches, \"android-cross-path\");\n \n+    let custom_passes = match getopts::opt_maybe_str(matches, \"passes\") {\n+        None => ~[],\n+        Some(s) => {\n+            let mut o = ~[];\n+            for s.each_split(|c| c == ' ' || c == ',') |s| {\n+                let s = s.trim().to_owned();\n+                o.push(s);\n+            }\n+            o\n+        }\n+    };\n+\n     let sopts = @session::options {\n         crate_type: crate_type,\n         is_static: statik,\n         gc: gc,\n         optimize: opt_level,\n+        custom_passes: custom_passes,\n         debuginfo: debuginfo,\n         extra_debuginfo: extra_debuginfo,\n         lint_opts: lint_opts,\n@@ -783,6 +796,9 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n   optopt(\"o\", \"\",     \"Write output to <filename>\", \"FILENAME\"),\n   optopt(\"\", \"opt-level\",\n                         \"Optimize with possible levels 0-3\", \"LEVEL\"),\n+  optopt(\"\", \"passes\", \"Comma or space separated list of pass names to use. \\\n+                        Overrides the default passes for optimization levels,\\n\\\n+                        a value of \\\"list\\\" will list the available passes.\", \"NAMES\"),\n   optopt( \"\",  \"out-dir\",\n                         \"Write output to compiler-chosen filename\n                           in <dir>\", \"DIR\"),"}, {"sha": "25c860ab2f0a8c7932fb9d5d89b586a88e77e8af", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "patch": "@@ -129,6 +129,7 @@ pub struct options {\n     is_static: bool,\n     gc: bool,\n     optimize: OptLevel,\n+    custom_passes: ~[~str],\n     debuginfo: bool,\n     extra_debuginfo: bool,\n     lint_opts: ~[(lint::lint, lint::level)],\n@@ -304,6 +305,7 @@ pub fn basic_options() -> @options {\n         is_static: false,\n         gc: false,\n         optimize: No,\n+        custom_passes: ~[],\n         debuginfo: false,\n         extra_debuginfo: false,\n         lint_opts: ~[],"}, {"sha": "a12a8be3b11654978755c12cf622197704225d42", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 6, "deletions": 196, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "patch": "@@ -1681,9 +1681,15 @@ pub mod llvm {\n         #[fast_ffi]\n         pub unsafe fn LLVMFinalizeFunctionPassManager(FPM:PassManagerRef) -> Bool;\n \n+        #[fast_ffi]\n+        pub unsafe fn LLVMInitializePasses();\n+\n         #[fast_ffi]\n         pub unsafe fn LLVMAddPass(PM:PassManagerRef,P:PassRef);\n \n+        #[fast_ffi]\n+        pub unsafe fn LLVMCreatePass(PassName:*c_char) -> PassRef;\n+\n         /** Adds a verification pass. */\n         #[fast_ffi]\n         pub unsafe fn LLVMAddVerifierPass(PM: PassManagerRef);\n@@ -1926,202 +1932,6 @@ pub mod llvm {\n                                     AlignStack: Bool, Dialect: c_uint)\n                                  -> ValueRef;\n \n-        // LLVM Passes\n-\n-        #[fast_ffi]\n-        pub fn LLVMCreateStripSymbolsPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateStripNonDebugSymbolsPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateStripDebugDeclarePass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateStripDeadDebugInfoPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateConstantMergePass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateGlobalOptimizerPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateGlobalDCEPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateAlwaysInlinerPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreatePruneEHPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateInternalizePass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateDeadArgEliminationPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateDeadArgHackingPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateArgumentPromotionPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateIPConstantPropagationPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateIPSCCPPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLoopExtractorPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateSingleLoopExtractorPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateBlockExtractorPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateStripDeadPrototypesPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateFunctionAttrsPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateMergeFunctionsPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreatePartialInliningPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateMetaRenamerPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateBarrierNoopPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateFunctionInliningPass(Threshold:c_int) -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateEdgeProfilerPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateOptimalEdgeProfilerPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreatePathProfilerPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateGCOVProfilerPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateBoundsCheckingPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateConstantPropagationPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateSCCPPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateDeadInstEliminationPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateDeadCodeEliminationPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateDeadStoreEliminationPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateAggressiveDCEPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateSROAPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateScalarReplAggregatesPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateIndVarSimplifyPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateInstructionCombiningPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLICMPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLoopStrengthReducePass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateGlobalMergePass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLoopUnswitchPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLoopInstSimplifyPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLoopUnrollPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLoopRotatePass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLoopIdiomPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreatePromoteMemoryToRegisterPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateDemoteRegisterToMemoryPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateReassociatePass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateJumpThreadingPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateCFGSimplificationPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateBreakCriticalEdgesPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLoopSimplifyPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateTailCallEliminationPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLowerSwitchPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLowerInvokePass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateBlockPlacementPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLCSSAPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateEarlyCSEPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateGVNPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateMemCpyOptPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLoopDeletionPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateSimplifyLibCallsPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateCodeGenPreparePass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateInstructionNamerPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateSinkingPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLowerAtomicPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateCorrelatedValuePropagationPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateInstructionSimplifierPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLowerExpectIntrinsicPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateBBVectorizePass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLoopVectorizePass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateGlobalsModRefPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateAliasAnalysisCounterPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateAAEvalPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateNoAAPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateBasicAliasAnalysisPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateScalarEvolutionAliasAnalysisPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateTypeBasedAliasAnalysisPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateProfileLoaderPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateProfileMetadataLoaderPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateNoProfileInfoPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateProfileEstimatorPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateProfileVerifierPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreatePathProfileLoaderPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateNoPathProfileInfoPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreatePathProfileVerifierPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLazyValueInfoPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateDependenceAnalysisPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateCostModelAnalysisPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateInstCountPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateRegionInfoPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateModuleDebugInfoPrinterPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateLintPass() -> PassRef;\n-        #[fast_ffi]\n-        pub fn LLVMCreateVerifierPass() -> PassRef;\n     }\n }\n "}, {"sha": "bdab72c4d73b97bfc0879f34c5bac401e0b80f82", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "patch": "@@ -246,6 +246,11 @@ pub fn run_compiler(args: &~[~str], demitter: diagnostic::Emitter) {\n         return;\n     }\n \n+    if getopts::opt_maybe_str(matches, \"passes\") == Some(~\"list\") {\n+        back::passes::list_passes();\n+        return;\n+    }\n+\n     if opt_present(matches, \"v\") || opt_present(matches, \"version\") {\n         version(*binary);\n         return;"}, {"sha": "53b291ff470d196e67866277fbc5937d2adc6602", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 23, "deletions": 118, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "patch": "@@ -30,10 +30,20 @@ inline T *unwrap(LLVMPassRef P) {\n     return Q;\n }\n \n-#define WRAP_PASS(name)                             \\\n-    extern \"C\" LLVMPassRef LLVMCreate##name##Pass() {      \\\n-        return wrap(llvm::create##name##Pass());    \\\n-    }\n+extern \"C\" void LLVMInitializePasses() {\n+  PassRegistry &Registry = *PassRegistry::getPassRegistry();\n+  initializeCore(Registry);\n+  initializeCodeGen(Registry);\n+  initializeScalarOpts(Registry);\n+  initializeVectorization(Registry);\n+  initializeIPO(Registry);\n+  initializeAnalysis(Registry);\n+  initializeIPA(Registry);\n+  initializeTransformUtils(Registry);\n+  initializeInstCombine(Registry);\n+  initializeInstrumentation(Registry);\n+  initializeTarget(Registry);\n+}\n \n extern \"C\" void LLVMAddPass(LLVMPassManagerRef PM, LLVMPassRef P) {\n     PassManagerBase * pm = unwrap(PM);\n@@ -42,119 +52,14 @@ extern \"C\" void LLVMAddPass(LLVMPassManagerRef PM, LLVMPassRef P) {\n     pm->add(p);\n }\n \n-////////////////\n-// Transforms //\n-// /////////////\n-\n-// IPO Passes\n-WRAP_PASS(StripSymbols)\n-WRAP_PASS(StripNonDebugSymbols)\n-WRAP_PASS(StripDebugDeclare)\n-WRAP_PASS(StripDeadDebugInfo)\n-WRAP_PASS(ConstantMerge)\n-WRAP_PASS(GlobalOptimizer)\n-WRAP_PASS(GlobalDCE)\n-WRAP_PASS(AlwaysInliner)\n-WRAP_PASS(PruneEH)\n-WRAP_PASS(Internalize)\n-WRAP_PASS(DeadArgElimination)\n-WRAP_PASS(DeadArgHacking)\n-WRAP_PASS(ArgumentPromotion)\n-WRAP_PASS(IPConstantPropagation)\n-WRAP_PASS(IPSCCP)\n-WRAP_PASS(LoopExtractor)\n-WRAP_PASS(SingleLoopExtractor)\n-WRAP_PASS(BlockExtractor)\n-WRAP_PASS(StripDeadPrototypes)\n-WRAP_PASS(FunctionAttrs)\n-WRAP_PASS(MergeFunctions)\n-WRAP_PASS(PartialInlining)\n-WRAP_PASS(MetaRenamer)\n-WRAP_PASS(BarrierNoop)\n+extern \"C\" LLVMPassRef LLVMCreatePass(const char * PassName) {\n+    StringRef SR(PassName);\n+    PassRegistry * PR = PassRegistry::getPassRegistry();\n \n-extern \"C\" LLVMPassRef LLVMCreateFunctionInliningPass(int Threshold) {\n-    return wrap(llvm::createFunctionInliningPass(Threshold));\n+    const PassInfo * PI = PR->getPassInfo(SR);\n+    if (PI) {\n+        return wrap(PI->createPass());\n+    } else {\n+        return (LLVMPassRef)0;\n+    }\n }\n-\n-// Instrumentation Passes\n-WRAP_PASS(EdgeProfiler)\n-WRAP_PASS(OptimalEdgeProfiler)\n-WRAP_PASS(PathProfiler)\n-WRAP_PASS(GCOVProfiler)\n-WRAP_PASS(BoundsChecking)\n-\n-// Scalar Passes\n-WRAP_PASS(ConstantPropagation)\n-WRAP_PASS(SCCP)\n-WRAP_PASS(DeadInstElimination)\n-WRAP_PASS(DeadCodeElimination)\n-WRAP_PASS(DeadStoreElimination)\n-WRAP_PASS(AggressiveDCE)\n-WRAP_PASS(SROA)\n-WRAP_PASS(ScalarReplAggregates)\n-WRAP_PASS(IndVarSimplify)\n-WRAP_PASS(InstructionCombining)\n-WRAP_PASS(LICM)\n-WRAP_PASS(LoopStrengthReduce)\n-WRAP_PASS(GlobalMerge)\n-WRAP_PASS(LoopUnswitch)\n-WRAP_PASS(LoopInstSimplify)\n-WRAP_PASS(LoopUnroll)\n-WRAP_PASS(LoopRotate)\n-WRAP_PASS(LoopIdiom)\n-WRAP_PASS(PromoteMemoryToRegister)\n-WRAP_PASS(DemoteRegisterToMemory)\n-WRAP_PASS(Reassociate)\n-WRAP_PASS(JumpThreading)\n-WRAP_PASS(CFGSimplification)\n-WRAP_PASS(BreakCriticalEdges)\n-WRAP_PASS(LoopSimplify)\n-WRAP_PASS(TailCallElimination)\n-WRAP_PASS(LowerSwitch)\n-WRAP_PASS(LowerInvoke)\n-WRAP_PASS(BlockPlacement)\n-WRAP_PASS(LCSSA)\n-WRAP_PASS(EarlyCSE)\n-WRAP_PASS(GVN)\n-WRAP_PASS(MemCpyOpt)\n-WRAP_PASS(LoopDeletion)\n-WRAP_PASS(SimplifyLibCalls)\n-WRAP_PASS(CodeGenPrepare)\n-WRAP_PASS(InstructionNamer)\n-WRAP_PASS(Sinking)\n-WRAP_PASS(LowerAtomic)\n-WRAP_PASS(CorrelatedValuePropagation)\n-WRAP_PASS(InstructionSimplifier)\n-WRAP_PASS(LowerExpectIntrinsic)\n-\n-// Vectorize Passes\n-WRAP_PASS(BBVectorize)\n-WRAP_PASS(LoopVectorize)\n-\n-//////////////\n-// Analyses //\n-//////////////\n-\n-WRAP_PASS(GlobalsModRef)\n-WRAP_PASS(AliasAnalysisCounter)\n-WRAP_PASS(AAEval)\n-WRAP_PASS(NoAA)\n-WRAP_PASS(BasicAliasAnalysis)\n-WRAP_PASS(ScalarEvolutionAliasAnalysis)\n-WRAP_PASS(TypeBasedAliasAnalysis)\n-WRAP_PASS(ProfileLoader)\n-WRAP_PASS(ProfileMetadataLoader)\n-WRAP_PASS(NoProfileInfo)\n-WRAP_PASS(ProfileEstimator)\n-WRAP_PASS(ProfileVerifier)\n-WRAP_PASS(PathProfileLoader)\n-WRAP_PASS(NoPathProfileInfo)\n-WRAP_PASS(PathProfileVerifier)\n-WRAP_PASS(LazyValueInfo)\n-WRAP_PASS(DependenceAnalysis)\n-WRAP_PASS(CostModelAnalysis)\n-WRAP_PASS(InstCount)\n-WRAP_PASS(RegionInfo)\n-WRAP_PASS(ModuleDebugInfoPrinter)\n-WRAP_PASS(Lint)\n-WRAP_PASS(Verifier)"}, {"sha": "8ebdbd0f307a65ec58ffb49e447b7b1db7ca33ef", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 2, "deletions": 98, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/faf1afee16cfacf0318ca2b88bc4fa5e507418dd/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=faf1afee16cfacf0318ca2b88bc4fa5e507418dd", "patch": "@@ -584,102 +584,6 @@ LLVMConstNamedStruct\n LLVMStructCreateNamed\n LLVMStructSetBody\n LLVMInlineAsm\n+LLVMInitializePasses\n LLVMAddPass\n-\n-LLVMCreateStripSymbolsPass\n-LLVMCreateStripNonDebugSymbolsPass\n-LLVMCreateStripDebugDeclarePass\n-LLVMCreateStripDeadDebugInfoPass\n-LLVMCreateConstantMergePass\n-LLVMCreateGlobalOptimizerPass\n-LLVMCreateGlobalDCEPass\n-LLVMCreateAlwaysInlinerPass\n-LLVMCreatePruneEHPass\n-LLVMCreateInternalizePass\n-LLVMCreateDeadArgEliminationPass\n-LLVMCreateDeadArgHackingPass\n-LLVMCreateArgumentPromotionPass\n-LLVMCreateIPConstantPropagationPass\n-LLVMCreateIPSCCPPass\n-LLVMCreateLoopExtractorPass\n-LLVMCreateSingleLoopExtractorPass\n-LLVMCreateBlockExtractorPass\n-LLVMCreateStripDeadPrototypesPass\n-LLVMCreateFunctionAttrsPass\n-LLVMCreateMergeFunctionsPass\n-LLVMCreatePartialInliningPass\n-LLVMCreateMetaRenamerPass\n-LLVMCreateBarrierNoopPass\n-LLVMCreateFunctionInliningPass\n-LLVMCreateEdgeProfilerPass\n-LLVMCreateOptimalEdgeProfilerPass\n-LLVMCreatePathProfilerPass\n-LLVMCreateGCOVProfilerPass\n-LLVMCreateBoundsCheckingPass\n-LLVMCreateConstantPropagationPass\n-LLVMCreateSCCPPass\n-LLVMCreateDeadInstEliminationPass\n-LLVMCreateDeadCodeEliminationPass\n-LLVMCreateDeadStoreEliminationPass\n-LLVMCreateAggressiveDCEPass\n-LLVMCreateSROAPass\n-LLVMCreateScalarReplAggregatesPass\n-LLVMCreateIndVarSimplifyPass\n-LLVMCreateInstructionCombiningPass\n-LLVMCreateLICMPass\n-LLVMCreateLoopStrengthReducePass\n-LLVMCreateGlobalMergePass\n-LLVMCreateLoopUnswitchPass\n-LLVMCreateLoopInstSimplifyPass\n-LLVMCreateLoopUnrollPass\n-LLVMCreateLoopRotatePass\n-LLVMCreateLoopIdiomPass\n-LLVMCreatePromoteMemoryToRegisterPass\n-LLVMCreateDemoteRegisterToMemoryPass\n-LLVMCreateReassociatePass\n-LLVMCreateJumpThreadingPass\n-LLVMCreateCFGSimplificationPass\n-LLVMCreateBreakCriticalEdgesPass\n-LLVMCreateLoopSimplifyPass\n-LLVMCreateTailCallEliminationPass\n-LLVMCreateLowerSwitchPass\n-LLVMCreateLowerInvokePass\n-LLVMCreateBlockPlacementPass\n-LLVMCreateLCSSAPass\n-LLVMCreateEarlyCSEPass\n-LLVMCreateGVNPass\n-LLVMCreateMemCpyOptPass\n-LLVMCreateLoopDeletionPass\n-LLVMCreateSimplifyLibCallsPass\n-LLVMCreateCodeGenPreparePass\n-LLVMCreateInstructionNamerPass\n-LLVMCreateSinkingPass\n-LLVMCreateLowerAtomicPass\n-LLVMCreateCorrelatedValuePropagationPass\n-LLVMCreateInstructionSimplifierPass\n-LLVMCreateLowerExpectIntrinsicPass\n-LLVMCreateBBVectorizePass\n-LLVMCreateLoopVectorizePass\n-LLVMCreateGlobalsModRefPass\n-LLVMCreateAliasAnalysisCounterPass\n-LLVMCreateAAEvalPass\n-LLVMCreateNoAAPass\n-LLVMCreateBasicAliasAnalysisPass\n-LLVMCreateScalarEvolutionAliasAnalysisPass\n-LLVMCreateTypeBasedAliasAnalysisPass\n-LLVMCreateProfileLoaderPass\n-LLVMCreateProfileMetadataLoaderPass\n-LLVMCreateNoProfileInfoPass\n-LLVMCreateProfileEstimatorPass\n-LLVMCreateProfileVerifierPass\n-LLVMCreatePathProfileLoaderPass\n-LLVMCreateNoPathProfileInfoPass\n-LLVMCreatePathProfileVerifierPass\n-LLVMCreateLazyValueInfoPass\n-LLVMCreateDependenceAnalysisPass\n-LLVMCreateCostModelAnalysisPass\n-LLVMCreateInstCountPass\n-LLVMCreateRegionInfoPass\n-LLVMCreateModuleDebugInfoPrinterPass\n-LLVMCreateLintPass\n-LLVMCreateVerifierPass\n+LLVMCreatePass"}]}