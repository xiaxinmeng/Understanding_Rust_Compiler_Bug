{"sha": "68e8fe9b6e8cd1abf88822c12738a8cd8fc950a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZThmZTliNmU4Y2QxYWJmODg4MjJjMTI3MzhhOGNkOGZjOTUwYTU=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-12T21:46:28Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-13T18:41:22Z"}, "message": "Add a test case for #7065.", "tree": {"sha": "6bb0edc66ab403554abe1ac0fd5dcaa8f4b00f87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bb0edc66ab403554abe1ac0fd5dcaa8f4b00f87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68e8fe9b6e8cd1abf88822c12738a8cd8fc950a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68e8fe9b6e8cd1abf88822c12738a8cd8fc950a5", "html_url": "https://github.com/rust-lang/rust/commit/68e8fe9b6e8cd1abf88822c12738a8cd8fc950a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68e8fe9b6e8cd1abf88822c12738a8cd8fc950a5/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd019c4c26d49c9481ebc4b57134bfdc5c5e5a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd019c4c26d49c9481ebc4b57134bfdc5c5e5a97", "html_url": "https://github.com/rust-lang/rust/commit/bd019c4c26d49c9481ebc4b57134bfdc5c5e5a97"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "197e3e44105e6bf7065431d4ac15a3017f70f6a7", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/68e8fe9b6e8cd1abf88822c12738a8cd8fc950a5/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e8fe9b6e8cd1abf88822c12738a8cd8fc950a5/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=68e8fe9b6e8cd1abf88822c12738a8cd8fc950a5", "patch": "@@ -813,4 +813,66 @@ mod tests {\n \n         wp2.recv(); // complete handshake with writer\n     }\n+    #[cfg(test)]\n+    fn test_rw_write_cond_downgrade_read_race_helper() {\n+        // Tests that when a downgrader hands off the \"reader cloud\" lock\n+        // because of a contending reader, a writer can't race to get it\n+        // instead, which would result in readers_and_writers. This tests\n+        // the sync module rather than this one, but it's here because an\n+        // rwarc gives us extra shared state to help check for the race.\n+        // If you want to see this test fail, go to sync.rs and replace the\n+        // line in RWlock::write_cond() that looks like:\n+        //     \"blk(&Condvar { order: opt_lock, ..*cond })\"\n+        // with just \"blk(cond)\".\n+        let x = ~RWARC(true);\n+        let (wp, wc) = comm::stream();\n+\n+        // writer task\n+        let xw = (*x).clone();\n+        do task::spawn {\n+            do xw.write_cond |state, c| {\n+                wc.send(()); // tell downgrader it's ok to go\n+                c.wait();\n+                // The core of the test is here: the condvar reacquire path\n+                // must involve order_lock, so that it cannot race with a reader\n+                // trying to receive the \"reader cloud lock hand-off\".\n+                *state = false;\n+            }\n+        }\n+\n+        wp.recv(); // wait for writer to get in\n+\n+        do x.write_downgrade |mut write_mode| {\n+            do write_mode.write_cond |state, c| {\n+                assert!(*state);\n+                // make writer contend in the cond-reacquire path\n+                c.signal();\n+            }\n+            // make a reader task to trigger the \"reader cloud lock\" handoff\n+            let xr = (*x).clone();\n+            let (rp, rc) = comm::stream();\n+            do task::spawn {\n+                rc.send(());\n+                do xr.read |_state| { }\n+            }\n+            rp.recv(); // wait for reader task to exist\n+\n+            let read_mode = x.downgrade(write_mode);\n+            do read_mode.read |state| {\n+                // if writer mistakenly got in, make sure it mutates state\n+                // before we assert on it\n+                for 5.times { task::yield(); }\n+                // make sure writer didn't get in.\n+                assert!(*state);\n+            }\n+        }\n+    }\n+    #[test]\n+    fn test_rw_write_cond_downgrade_read_race() {\n+        // Ideally the above test case would have yield statements in it that\n+        // helped to expose the race nearly 100% of the time... but adding\n+        // yields in the intuitively-right locations made it even less likely,\n+        // and I wasn't sure why :( . This is a mediocre \"next best\" option.\n+        for 8.times { test_rw_write_cond_downgrade_read_race_helper() }\n+    }\n }"}]}