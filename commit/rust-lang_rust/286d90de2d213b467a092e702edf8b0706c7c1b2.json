{"sha": "286d90de2d213b467a092e702edf8b0706c7c1b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NmQ5MGRlMmQyMTNiNDY3YTA5MmU3MDJlZGY4YjA3MDZjN2MxYjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-30T17:12:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-30T17:12:56Z"}, "message": "Merge #7500\n\n7500: Fix ast::String::value not properly escaping in some cases r=Veykril a=Veykril\n\nFixes #7496\r\nbors r+\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "462c0d7ff8cf26f551c0137cbc4332219da0cf10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/462c0d7ff8cf26f551c0137cbc4332219da0cf10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/286d90de2d213b467a092e702edf8b0706c7c1b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFZOYCRBK7hj4Ov3rIwAAdHIIACQ+zyRwuVCER1qkD7WXV2AX\nfq5HbP/QHKPdOaNGDTLAIp/ZU1ibIxZCXOY+8D5uThxy7b9ctq7x36iJIYuTE8ik\n753is2fAVDpXCSLD+hm8oCKe0ZuHq9D54yTOCukEU7g8BTAqbgGe5S0YYc6MLJPk\n2oh4C7GHX93DPbBVbcu9/UJofiJHXVNqbby6u2q4SVfW5lDzsya6W73dvOlXl1Rl\nsJzljgpzMCH6bBh87vSEu9iqRStzrjM3gnxJ/KdEu0cL1MlCMOzMd5/C8JeAuQBZ\nFZwQVYpqxM5iCU/CD7BBAKrUXHg9eveX12TIS+z2RThxUpaRXQw4CuFfwTpA73Q=\n=hVOi\n-----END PGP SIGNATURE-----\n", "payload": "tree 462c0d7ff8cf26f551c0137cbc4332219da0cf10\nparent f408ff50130eae0eb56e7f9668e9df39f7baa6dd\nparent 6c2ce5515064011b2fde064ff18f178465383bce\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612026776 +0000\ncommitter GitHub <noreply@github.com> 1612026776 +0000\n\nMerge #7500\n\n7500: Fix ast::String::value not properly escaping in some cases r=Veykril a=Veykril\n\nFixes #7496\r\nbors r+\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/286d90de2d213b467a092e702edf8b0706c7c1b2", "html_url": "https://github.com/rust-lang/rust/commit/286d90de2d213b467a092e702edf8b0706c7c1b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/286d90de2d213b467a092e702edf8b0706c7c1b2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f408ff50130eae0eb56e7f9668e9df39f7baa6dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f408ff50130eae0eb56e7f9668e9df39f7baa6dd", "html_url": "https://github.com/rust-lang/rust/commit/f408ff50130eae0eb56e7f9668e9df39f7baa6dd"}, {"sha": "6c2ce5515064011b2fde064ff18f178465383bce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2ce5515064011b2fde064ff18f178465383bce", "html_url": "https://github.com/rust-lang/rust/commit/6c2ce5515064011b2fde064ff18f178465383bce"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "044e3e5e8494f48761cec12717ed18ebc0a3f18a", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/286d90de2d213b467a092e702edf8b0706c7c1b2/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286d90de2d213b467a092e702edf8b0706c7c1b2/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=286d90de2d213b467a092e702edf8b0706c7c1b2", "patch": "@@ -173,7 +173,7 @@ impl ast::String {\n             buf.capacity() == 0,\n         ) {\n             (Ok(c), false) => buf.push(c),\n-            (Ok(c), true) if Some(c) == text_iter.next() => (),\n+            (Ok(c), true) if char_range.len() == 1 && Some(c) == text_iter.next() => (),\n             (Ok(c), true) => {\n                 buf.reserve_exact(text.len());\n                 buf.push_str(&text[..char_range.start]);\n@@ -659,7 +659,7 @@ impl Radix {\n \n #[cfg(test)]\n mod tests {\n-    use crate::ast::{make, FloatNumber, IntNumber};\n+    use crate::ast::{self, make, FloatNumber, IntNumber};\n \n     fn check_float_suffix<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n         assert_eq!(FloatNumber { syntax: make::tokens::literal(lit) }.suffix(), expected.into());\n@@ -692,4 +692,21 @@ mod tests {\n         check_int_suffix(\"0o11u32\", \"u32\");\n         check_int_suffix(\"0xffu32\", \"u32\");\n     }\n+\n+    fn check_string_value<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n+        assert_eq!(\n+            ast::String { syntax: make::tokens::literal(&format!(\"\\\"{}\\\"\", lit)) }\n+                .value()\n+                .as_deref(),\n+            expected.into()\n+        );\n+    }\n+\n+    #[test]\n+    fn test_string_escape() {\n+        check_string_value(r\"foobar\", \"foobar\");\n+        check_string_value(r\"\\foobar\", None);\n+        check_string_value(r\"\\nfoobar\", \"\\nfoobar\");\n+        check_string_value(r\"C:\\\\Windows\\\\System32\\\\\", \"C:\\\\Windows\\\\System32\\\\\");\n+    }\n }"}]}