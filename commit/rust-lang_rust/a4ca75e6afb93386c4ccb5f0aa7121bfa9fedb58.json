{"sha": "a4ca75e6afb93386c4ccb5f0aa7121bfa9fedb58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0Y2E3NWU2YWZiOTMzODZjNGNjYjVmMGFhNzEyMWJmYTlmZWRiNTg=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-06-07T22:07:27Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-06-07T22:18:30Z"}, "message": "For consistency, use ctxt instead of ty_ctxt outside of unify.", "tree": {"sha": "9051a48f5f1dd7a398cbf056cd456c3286f7b48a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9051a48f5f1dd7a398cbf056cd456c3286f7b48a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4ca75e6afb93386c4ccb5f0aa7121bfa9fedb58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ca75e6afb93386c4ccb5f0aa7121bfa9fedb58", "html_url": "https://github.com/rust-lang/rust/commit/a4ca75e6afb93386c4ccb5f0aa7121bfa9fedb58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4ca75e6afb93386c4ccb5f0aa7121bfa9fedb58/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab69c4a98f630c9f82d5cb21e336ff3620b76d45", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab69c4a98f630c9f82d5cb21e336ff3620b76d45", "html_url": "https://github.com/rust-lang/rust/commit/ab69c4a98f630c9f82d5cb21e336ff3620b76d45"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "0200cdd30f86234494fb1eb51c62c6459272d211", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a4ca75e6afb93386c4ccb5f0aa7121bfa9fedb58/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ca75e6afb93386c4ccb5f0aa7121bfa9fedb58/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=a4ca75e6afb93386c4ccb5f0aa7121bfa9fedb58", "patch": "@@ -1542,25 +1542,25 @@ fn eq_ty(&t a, &t b) -> bool { ret a == b; }\n \n // Type lookups\n \n-fn ann_to_ty_param_substs_opt_and_ty(&ty_ctxt tcx, &ast::ann ann)\n+fn ann_to_ty_param_substs_opt_and_ty(&ctxt cx, &ast::ann ann)\n     -> ty_param_substs_opt_and_ty {\n \n     // Pull out the node type table.\n-    alt ({tcx.node_types.(ann.id)}) {\n+    alt ({cx.node_types.(ann.id)}) {\n         case (none) {\n-            tcx.sess.bug(\"ann_to_ty_param_substs_opt_and_ty() called on an \" +\n-                         \"untyped node\");\n+            cx.sess.bug(\"ann_to_ty_param_substs_opt_and_ty() called on an \" +\n+                        \"untyped node\");\n         }\n         case (some(?tpot)) { ret tpot; }\n     }\n }\n \n-fn ann_to_type(&ty_ctxt tcx, &ast::ann ann) -> t {\n-    ret ann_to_ty_param_substs_opt_and_ty(tcx, ann)._1;\n+fn ann_to_type(&ctxt cx, &ast::ann ann) -> t {\n+    ret ann_to_ty_param_substs_opt_and_ty(cx, ann)._1;\n }\n \n-fn ann_to_type_params(&ty_ctxt tcx, &ast::ann ann) -> vec[t] {\n-    alt (ann_to_ty_param_substs_opt_and_ty(tcx, ann)._0) {\n+fn ann_to_type_params(&ctxt cx, &ast::ann ann) -> vec[t] {\n+    alt (ann_to_ty_param_substs_opt_and_ty(cx, ann)._0) {\n         case (none) {\n             let vec[t] result = [];\n             ret result;\n@@ -1569,8 +1569,8 @@ fn ann_to_type_params(&ty_ctxt tcx, &ast::ann ann) -> vec[t] {\n     }\n }\n \n-fn ann_has_type_params(&ty_ctxt tcx, &ast::ann ann) -> bool {\n-    auto tpt = ann_to_ty_param_substs_opt_and_ty(tcx, ann);\n+fn ann_has_type_params(&ctxt cx, &ast::ann ann) -> bool {\n+    auto tpt = ann_to_ty_param_substs_opt_and_ty(cx, ann);\n     ret !option::is_none[vec[t]](tpt._0);\n }\n \n@@ -1765,8 +1765,8 @@ fn expr_ty_params_and_ty(&ctxt cx, &@ast::expr expr)\n             ann_to_type(cx, a));\n }\n \n-fn expr_has_ty_params(&ty_ctxt tcx, &@ast::expr expr) -> bool {\n-    ret ann_has_type_params(tcx, expr_ann(expr));\n+fn expr_has_ty_params(&ctxt cx, &@ast::expr expr) -> bool {\n+    ret ann_has_type_params(cx, expr_ann(expr));\n }\n \n fn decl_local_ty(&ctxt cx, &@ast::decl d) -> t {\n@@ -2886,19 +2886,19 @@ fn lookup_item_type(ctxt cx, ast::def_id did) -> ty_param_count_and_ty {\n     }\n }\n \n-fn ret_ty_of_fn_ty(ty_ctxt tcx, t a_ty) -> t {\n-    alt (ty::struct(tcx, a_ty)) {\n+fn ret_ty_of_fn_ty(ctxt cx, t a_ty) -> t {\n+    alt (ty::struct(cx, a_ty)) {\n         case (ty::ty_fn(_, _, ?ret_ty, _)) {\n             ret ret_ty;\n         }\n         case (_) {\n-            tcx.sess.bug(\"ret_ty_of_fn_ty() called on non-function type\");\n+            cx.sess.bug(\"ret_ty_of_fn_ty() called on non-function type\");\n         }\n     }\n }\n \n-fn ret_ty_of_fn(ty_ctxt tcx, ast::ann ann) -> t {\n-    ret ret_ty_of_fn_ty(tcx, ann_to_type(tcx, ann));\n+fn ret_ty_of_fn(ctxt cx, ast::ann ann) -> t {\n+    ret ret_ty_of_fn_ty(cx, ann_to_type(cx, ann));\n }\n \n // Local Variables:"}]}