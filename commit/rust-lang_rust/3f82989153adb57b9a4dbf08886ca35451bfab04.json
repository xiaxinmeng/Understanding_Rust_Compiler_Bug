{"sha": "3f82989153adb57b9a4dbf08886ca35451bfab04", "node_id": "C_kwDOAAsO6NoAKDNmODI5ODkxNTNhZGI1N2I5YTRkYmYwODg4NmNhMzU0NTFiZmFiMDQ", "commit": {"author": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-26T18:09:14Z"}, "committer": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-26T18:09:14Z"}, "message": "fix: make `expand_macro` multi-token mapping aware", "tree": {"sha": "e05c6a90d8a2bbbba3d834f21e8b56fda36e1406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e05c6a90d8a2bbbba3d834f21e8b56fda36e1406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f82989153adb57b9a4dbf08886ca35451bfab04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f82989153adb57b9a4dbf08886ca35451bfab04", "html_url": "https://github.com/rust-lang/rust/commit/3f82989153adb57b9a4dbf08886ca35451bfab04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f82989153adb57b9a4dbf08886ca35451bfab04/comments", "author": null, "committer": null, "parents": [{"sha": "ee1d6cffbfbecc99a70be77fe697af817ed6cfac", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1d6cffbfbecc99a70be77fe697af817ed6cfac", "html_url": "https://github.com/rust-lang/rust/commit/ee1d6cffbfbecc99a70be77fe697af817ed6cfac"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "fd9d1ff45667e8de34a8e3b0650a12f441fd9dce", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3f82989153adb57b9a4dbf08886ca35451bfab04/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f82989153adb57b9a4dbf08886ca35451bfab04/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=3f82989153adb57b9a4dbf08886ca35451bfab04", "patch": "@@ -32,19 +32,32 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n         _ => 0,\n     })?;\n \n-    let descended = sema.descend_into_macros_single(tok.clone());\n-    if let Some(attr) = descended.ancestors().find_map(ast::Attr::cast) {\n-        if let Some((path, tt)) = attr.as_simple_call() {\n-            if path == \"derive\" {\n-                let mut tt = tt.syntax().children_with_tokens().skip(1).join(\"\");\n-                tt.pop();\n-                let expansions = sema.expand_derive_macro(&attr)?;\n-                return Some(ExpandedMacro {\n-                    name: tt,\n-                    expansion: expansions.into_iter().map(insert_whitespaces).join(\"\"),\n-                });\n-            }\n+    // due to how Rust Analyzer works internally, we need to special case derive attributes,\n+    // otherwise they might not get found, e.g. here only `#[attr]` would expand:\n+    // ```\n+    // #[attr]\n+    // #[derive($0Foo)]\n+    // struct Bar;\n+    // ```\n+\n+    let derive = sema.descend_into_macros(tok.clone()).iter().find_map(|descended| {\n+        let attr = descended.ancestors().find_map(ast::Attr::cast)?;\n+        let (path, tt) = attr.as_simple_call()?;\n+        if path == \"derive\" {\n+            let mut tt = tt.syntax().children_with_tokens().skip(1).join(\"\");\n+            tt.pop();\n+            let expansions = sema.expand_derive_macro(&attr)?;\n+            return Some(ExpandedMacro {\n+                name: tt,\n+                expansion: expansions.into_iter().map(insert_whitespaces).join(\"\"),\n+            });\n+        } else {\n+            None\n         }\n+    });\n+\n+    if derive.is_some() {\n+        return derive;\n     }\n \n     // FIXME: Intermix attribute and bang! expansions\n@@ -356,6 +369,7 @@ fn main() {\n #[rustc_builtin_macro]\n pub macro Clone {}\n \n+#[doc = \"\"]\n #[derive(C$0lone)]\n struct Foo {}\n \"#,"}]}