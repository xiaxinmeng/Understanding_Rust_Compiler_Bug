{"sha": "0b9ba4977ef5b81747c8e5c623009497f9d7c99a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOWJhNDk3N2VmNWI4MTc0N2M4ZTVjNjIzMDA5NDk3ZjlkN2M5OWE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T16:55:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T16:55:08Z"}, "message": "Generate default lint groups", "tree": {"sha": "21be094bdf762405f1b472c7abd559c0691d9a3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21be094bdf762405f1b472c7abd559c0691d9a3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b9ba4977ef5b81747c8e5c623009497f9d7c99a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9ba4977ef5b81747c8e5c623009497f9d7c99a", "html_url": "https://github.com/rust-lang/rust/commit/0b9ba4977ef5b81747c8e5c623009497f9d7c99a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b9ba4977ef5b81747c8e5c623009497f9d7c99a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "343df88ac7579316a5500fa7f4a07602809af669", "url": "https://api.github.com/repos/rust-lang/rust/commits/343df88ac7579316a5500fa7f4a07602809af669", "html_url": "https://github.com/rust-lang/rust/commit/343df88ac7579316a5500fa7f4a07602809af669"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "c1643628441ca1426f025bad78cc96c0b8993850", "filename": "crates/ide_db/src/helpers/generated_lints.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0b9ba4977ef5b81747c8e5c623009497f9d7c99a/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9ba4977ef5b81747c8e5c623009497f9d7c99a/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs?ref=0b9ba4977ef5b81747c8e5c623009497f9d7c99a", "patch": "@@ -7,6 +7,7 @@ pub struct Lint {\n \n pub const DEFAULT_LINTS: &[Lint] = &[\n     Lint { label: \"----\", description: r##\"-------\"## },\n+    Lint { label: \"----\", description: r##\"lint group for: ---------\"## },\n     Lint {\n         label: \"absolute-paths-not-starting-with-crate\",\n         description: r##\"fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name\"##,\n@@ -97,6 +98,10 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"function-item-references\",\n         description: r##\"suggest casting to a function pointer when attempting to take references to function items\"##,\n     },\n+    Lint {\n+        label: \"future-incompatible\",\n+        description: r##\"lint group for: keyword-idents, anonymous-parameters, ellipsis-inclusive-range-patterns, forbidden-lint-groups, illegal-floating-point-literal-pattern, private-in-public, pub-use-of-private-extern-crate, invalid-type-param-default, const-err, unaligned-references, patterns-in-fns-without-body, missing-fragment-specifier, late-bound-lifetime-arguments, order-dependent-trait-objects, coherence-leak-check, tyvar-behind-raw-pointer, bare-trait-objects, absolute-paths-not-starting-with-crate, unstable-name-collisions, where-clauses-object-safety, proc-macro-derive-resolution-fallback, macro-expanded-macro-exports-accessed-by-absolute-paths, ill-formed-attribute-input, conflicting-repr-hints, ambiguous-associated-items, mutable-borrow-reservation-conflict, indirect-structural-match, pointer-structural-match, nontrivial-structural-match, soft-unstable, cenum-impl-drop-cast, const-evaluatable-unchecked, uninhabited-static, unsupported-naked-functions, semicolon-in-expressions-from-macros, legacy-derive-helpers, proc-macro-back-compat, array-into-iter\"##,\n+    },\n     Lint {\n         label: \"ill-formed-attribute-input\",\n         description: r##\"ill-formed attribute inputs that were previously accepted and used in practice\"##,\n@@ -222,6 +227,10 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"non-upper-case-globals\",\n         description: r##\"static constants should have uppercase identifiers\"##,\n     },\n+    Lint {\n+        label: \"nonstandard-style\",\n+        description: r##\"lint group for: non-camel-case-types, non-snake-case, non-upper-case-globals\"##,\n+    },\n     Lint {\n         label: \"nontrivial-structural-match\",\n         description: r##\"constant used in pattern of non-structural-match type and the constant's initializer expression contains values of non-structural-match types\"##,\n@@ -276,6 +285,18 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"renamed-and-removed-lints\",\n         description: r##\"lints that have been renamed or removed\"##,\n     },\n+    Lint {\n+        label: \"rust-2018-compatibility\",\n+        description: r##\"lint group for: keyword-idents, anonymous-parameters, tyvar-behind-raw-pointer, absolute-paths-not-starting-with-crate\"##,\n+    },\n+    Lint {\n+        label: \"rust-2018-idioms\",\n+        description: r##\"lint group for: bare-trait-objects, unused-extern-crates, ellipsis-inclusive-range-patterns, elided-lifetimes-in-paths, explicit-outlives-requirements\"##,\n+    },\n+    Lint {\n+        label: \"rust-2021-compatibility\",\n+        description: r##\"lint group for: ellipsis-inclusive-range-patterns, bare-trait-objects\"##,\n+    },\n     Lint {\n         label: \"semicolon-in-expressions-from-macros\",\n         description: r##\"trailing semicolon in macro body used as expression\"##,\n@@ -365,6 +386,10 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"unsupported-naked-functions\",\n         description: r##\"unsupported naked function definitions\"##,\n     },\n+    Lint {\n+        label: \"unused\",\n+        description: r##\"lint group for: unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comments, unused-extern-crates, unused-features, unused-labels, unused-parens, unused-braces, redundant-semicolons\"##,\n+    },\n     Lint {\n         label: \"unused-allocation\",\n         description: r##\"detects unnecessary allocations that can be eliminated\"##,\n@@ -443,6 +468,10 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"warnings\",\n         description: r##\"mass-change the level for lints which produce warnings\"##,\n     },\n+    Lint {\n+        label: \"warnings\",\n+        description: r##\"lint group for: all lints that are set to issue warnings\"##,\n+    },\n     Lint {\n         label: \"where-clauses-object-safety\",\n         description: r##\"checks the object safety of where clauses\"##,"}, {"sha": "b797067cd0b676af266025740035896d2af12f0a", "filename": "xtask/src/codegen/gen_lint_completions.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0b9ba4977ef5b81747c8e5c623009497f9d7c99a/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9ba4977ef5b81747c8e5c623009497f9d7c99a/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs?ref=0b9ba4977ef5b81747c8e5c623009497f9d7c99a", "patch": "@@ -1,4 +1,5 @@\n //! Generates descriptors structure for unstable feature from Unstable Book\n+use std::borrow::Cow;\n use std::fmt::Write;\n use std::path::{Path, PathBuf};\n \n@@ -38,22 +39,36 @@ pub(crate) fn generate_lint_completions() -> Result<()> {\n \n fn generate_lint_descriptor(buf: &mut String) -> Result<()> {\n     let stdout = cmd!(\"rustc -W help\").read()?;\n-    let start = stdout.find(\"----  -------  -------\").ok_or_else(|| anyhow::format_err!(\"\"))?;\n-    let end =\n-        stdout.rfind(\"Lint groups provided by rustc:\").ok_or_else(|| anyhow::format_err!(\"\"))?;\n+    let start_lints =\n+        stdout.find(\"----  -------  -------\").ok_or_else(|| anyhow::format_err!(\"\"))?;\n+    let start_lint_groups =\n+        stdout.find(\"----  ---------\").ok_or_else(|| anyhow::format_err!(\"\"))?;\n+    let end_lints =\n+        stdout.find(\"Lint groups provided by rustc:\").ok_or_else(|| anyhow::format_err!(\"\"))?;\n+    let end_lint_groups = stdout\n+        .find(\"Lint tools like Clippy can provide additional lints and lint groups.\")\n+        .ok_or_else(|| anyhow::format_err!(\"\"))?;\n     buf.push_str(r#\"pub const DEFAULT_LINTS: &[Lint] = &[\"#);\n     buf.push('\\n');\n-    let mut lints = stdout[start..end]\n+    let mut lints = stdout[start_lints..end_lints]\n         .lines()\n         .filter(|l| !l.is_empty())\n-        .flat_map(|line| {\n-            let (name, rest) = line.trim().split_once(char::is_whitespace)?;\n-            let (_default_level, description) = rest.trim().split_once(char::is_whitespace)?;\n-            Some((name.trim(), description.trim()))\n+        .map(|line| {\n+            let (name, rest) = line.trim().split_once(char::is_whitespace).unwrap();\n+            let (_default_level, description) =\n+                rest.trim().split_once(char::is_whitespace).unwrap();\n+            (name.trim(), Cow::Borrowed(description.trim()))\n         })\n         .collect::<Vec<_>>();\n+    lints.extend(stdout[start_lint_groups..end_lint_groups].lines().filter(|l| !l.is_empty()).map(\n+        |line| {\n+            let (name, lints) = line.trim().split_once(char::is_whitespace).unwrap();\n+            (name.trim(), format!(\"lint group for: {}\", lints.trim()).into())\n+        },\n+    ));\n+\n     lints.sort_by(|(ident, _), (ident2, _)| ident.cmp(ident2));\n-    lints.into_iter().for_each(|(name, description)| push_lint_completion(buf, name, description));\n+    lints.into_iter().for_each(|(name, description)| push_lint_completion(buf, name, &description));\n     buf.push_str(\"];\\n\");\n     Ok(())\n }"}]}