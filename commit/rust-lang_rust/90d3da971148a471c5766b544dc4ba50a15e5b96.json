{"sha": "90d3da971148a471c5766b544dc4ba50a15e5b96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZDNkYTk3MTE0OGE0NzFjNTc2NmI1NDRkYzRiYTUwYTE1ZTViOTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-09-17T06:37:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-09-24T01:23:22Z"}, "message": "test: Fix rustdoc and tests.", "tree": {"sha": "f96515608dd6ab7af3d4e21650f05e51d6593bf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f96515608dd6ab7af3d4e21650f05e51d6593bf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90d3da971148a471c5766b544dc4ba50a15e5b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90d3da971148a471c5766b544dc4ba50a15e5b96", "html_url": "https://github.com/rust-lang/rust/commit/90d3da971148a471c5766b544dc4ba50a15e5b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90d3da971148a471c5766b544dc4ba50a15e5b96/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "html_url": "https://github.com/rust-lang/rust/commit/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa"}], "stats": {"total": 1139, "additions": 196, "deletions": 943}, "files": [{"sha": "a8d384226a3507b90d715728aa929740305c7e3e", "filename": "doc/tutorial.md", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -1469,34 +1469,6 @@ cannot be stored in data structures or returned from\n functions. Despite these limitations, stack closures are used\n pervasively in Rust code.\n \n-## Managed closures\n-\n-When you need to store a closure in a data structure, a stack closure\n-will not do, since the compiler will refuse to let you store it. For\n-this purpose, Rust provides a type of closure that has an arbitrary\n-lifetime, written `@fn` (boxed closure, analogous to the `@` pointer\n-type described earlier). This type of closure *is* first-class.\n-\n-A managed closure does not directly access its environment, but merely\n-copies out the values that it closes over into a private data\n-structure. This means that it can not assign to these variables, and\n-cannot observe updates to them.\n-\n-This code creates a closure that adds a given string to its argument,\n-returns it from a function, and then calls it:\n-\n-~~~~\n-fn mk_appender(suffix: ~str) -> @fn(~str) -> ~str {\n-    // The compiler knows that we intend this closure to be of type @fn\n-    return |s| s + suffix;\n-}\n-\n-fn main() {\n-    let shout = mk_appender(~\"!\");\n-    println(shout(~\"hey ho, let's go\"));\n-}\n-~~~~\n-\n ## Owned closures\n \n Owned closures, written `~fn` in analogy to the `~` pointer type,"}, {"sha": "bd3ce20742ed19e26382382585b7ebec9862afff", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -162,8 +162,11 @@ mod tests {\n     }\n \n     impl Runnable for LibcFree {\n+        #[fixed_stack_segment]\n         fn run(~self) {\n-            libc::free(self.mem)\n+            unsafe {\n+                libc::free(self.mem)\n+            }\n         }\n     }\n "}, {"sha": "c9a5ca2c61c40ac8362fa5788267e0c6990a922f", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -1065,8 +1065,12 @@ mod test {\n               Err(f) => fail!(\"test_switch_implies_cfg_test: %s\", f.to_err_msg())\n             };\n         let sessopts = build_session_options(\n-            @\"rustc\", matches, diagnostic::emit);\n-        let sess = build_session(sessopts, diagnostic::emit);\n+            @\"rustc\",\n+            matches,\n+            @diagnostic::DefaultEmitter as @diagnostic::Emitter);\n+        let sess = build_session(sessopts,\n+                                 @diagnostic::DefaultEmitter as\n+                                    @diagnostic::Emitter);\n         let cfg = build_configuration(sess);\n         assert!((attr::contains_name(cfg, \"test\")));\n     }\n@@ -1083,8 +1087,12 @@ mod test {\n               }\n             };\n         let sessopts = build_session_options(\n-            @\"rustc\", matches, diagnostic::emit);\n-        let sess = build_session(sessopts, diagnostic::emit);\n+            @\"rustc\",\n+            matches,\n+            @diagnostic::DefaultEmitter as @diagnostic::Emitter);\n+        let sess = build_session(sessopts,\n+                                 @diagnostic::DefaultEmitter as\n+                                    @diagnostic::Emitter);\n         let cfg = build_configuration(sess);\n         let mut test_items = cfg.iter().filter(|m| \"test\" == m.name());\n         assert!(test_items.next().is_some());"}, {"sha": "ba5986aa4ab9db3fa81bf6e371879c235f32421e", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -118,14 +118,3 @@ fn test_owned() {\n     spawn_with_finalizer(owned);\n }\n \n-#[test]\n-fn test_managed() {\n-    let i = @mut 10;\n-    let managed: @fn() -> int = || {\n-        let r = *i;\n-        *i += 10;\n-        r\n-    };\n-    assert_eq!(do managed.finally {}, 10);\n-    assert_eq!(*i, 20);\n-}"}, {"sha": "48eb9a350f1357c4abcce7a52ff79ca10d1ccedb", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -217,7 +217,8 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n                             }));\n     syntax_expanders.insert(intern(&\"macro_rules\"),\n                             @SE(IdentTT(@SyntaxExpanderTTItem {\n-                                expander: SyntaxExpanderTTItemExpanderWithContext(ext::tt::macro_rules::add_new_extension),\n+                                expander: SyntaxExpanderTTItemExpanderWithContext(\n+                                    ext::tt::macro_rules::add_new_extension),\n                                 span: None,\n                             } as @SyntaxExpanderTTItemTrait,\n                             None)));"}, {"sha": "004a889fb4df77632d7cdec207c3c2112e0edaed", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -772,7 +772,7 @@ impl ast_fold for IdentRenamer {\n \n // given a mutable list of renames, return a tree-folder that applies those\n // renames.\n-fn renames_to_fold(renames: @mut ~[(ast::Ident,ast::Name)]) -> @ast_fold {\n+pub fn renames_to_fold(renames: @mut ~[(ast::Ident,ast::Name)]) -> @ast_fold {\n     @IdentRenamer {\n         renames: renames,\n     } as @ast_fold\n@@ -1524,7 +1524,7 @@ mod test {\n         let ident_str = @\"x\";\n         let tts = string_to_tts(ident_str);\n         let fm = fresh_mark();\n-        let marked_once = fold::fold_tts(tts,new_mark_folder(fm) as @fold::ast_fold);\n+        let marked_once = fold::fold_tts(tts,new_mark_folder(fm));\n         assert_eq!(marked_once.len(),1);\n         let marked_once_ctxt =\n             match marked_once[0] {"}, {"sha": "a25f267c45891832cc18a25d12a725607ba25fe6", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -869,7 +869,7 @@ mod test {\n     use parse::token;\n     use print::pprust;\n     use super::*;\n-    \n+\n     // this version doesn't care about getting comments or docstrings in.\n     fn fake_print_crate(s: @pprust::ps, crate: &ast::Crate) {\n         pprust::print_mod(s, &crate.module, crate.attrs);\n@@ -879,7 +879,7 @@ mod test {\n     struct ToZzIdentFolder;\n \n     impl ast_fold for ToZzIdentFolder {\n-        fn fold_ident(&self, _: ident) -> ident {\n+        fn fold_ident(&self, _: ast::Ident) -> ast::Ident {\n             token::str_to_ident(\"zz\")\n         }\n     }\n@@ -921,16 +921,5 @@ mod test {\n                                     token::get_ident_interner()),\n                      ~\"zz!zz((zz$zz:zz$(zz $zz:zz)zz+=>(zz$(zz$zz$zz)+)))\");\n     }\n-\n-    // and in cast expressions... this appears to be an existing bug.\n-    #[test] fn ident_transformation_in_types () {\n-        let zz_fold = ToZzIdentFolder;\n-        let ast = string_to_crate(@\"fn a() {let z = 13 as int;}\");\n-        assert_pred!(matches_codepattern,\n-                     \"matches_codepattern\",\n-                     pprust::to_str(&zz_fold.fold_crate(ast),fake_print_crate,\n-                                    token::get_ident_interner()),\n-                     ~\"fn zz(){let zz=13 as zz;}\");\n-    }\n }\n "}, {"sha": "350bd09826fad67c7d66950fd6ee060e63a8289c", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -14,7 +14,7 @@ pub struct Entry<A,B> {\n }\n \n pub struct alist<A,B> {\n-    eq_fn: @fn(A,A) -> bool,\n+    eq_fn: extern \"Rust\" fn(A,A) -> bool,\n     data: @mut ~[Entry<A,B>]\n }\n "}, {"sha": "cd90c9b06c4ce0ad5649fa1cb9f68812e96584dc", "filename": "src/test/auxiliary/issue4516_ty_param_lib.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn to_closure<A:'static + Clone>(x: A) -> @fn() -> A {\n-    let result: @fn() -> A = || x.clone();\n-    result\n-}"}, {"sha": "991c102e9f0b0387d2ff42457726d7849c5068fa", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -46,7 +46,6 @@ type nillist = List<()>;\n struct State {\n     box: @nillist,\n     unique: ~nillist,\n-    fn_box: @fn() -> @nillist,\n     tuple: (@nillist, ~nillist),\n     vec: ~[@nillist],\n     res: r\n@@ -79,19 +78,15 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n             State {\n                 box: @Nil,\n                 unique: ~Nil,\n-                fn_box: || @Nil::<()>,\n                 tuple: (@Nil, ~Nil),\n                 vec: ~[@Nil],\n                 res: r(@Nil)\n             }\n           }\n           Some(st) => {\n-            let fn_box = st.fn_box;\n-\n             State {\n                 box: @Cons((), st.box),\n                 unique: ~Cons((), @*st.unique),\n-                fn_box: || @Cons((), fn_box()),\n                 tuple: (@Cons((), st.tuple.first()),\n                         ~Cons((), @*st.tuple.second())),\n                 vec: st.vec + &[@Cons((), *st.vec.last())],"}, {"sha": "83baedc78927718371cb00840480a1c6c4532ca9", "filename": "src/test/compile-fail/borrowck-addr-of-upvar.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foo(x: @int) -> @fn() -> &'static int {\n-    let result: @fn() -> &'static int = || &*x;  //~ ERROR cannot root\n-    result\n-}\n-\n-fn bar(x: @int) -> @fn() -> &int {\n-    let result: @fn() -> &int = || &*x; //~ ERROR cannot root\n-    result\n-}\n-\n-fn zed(x: @int) -> @fn() -> int {\n-    let result: @fn() -> int = || *&*x;\n-    result\n-}\n-\n-fn main() {\n-}"}, {"sha": "5994b9e85d5ae97e6a3021fb012c384f6ada4d62", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -1,13 +1,13 @@\n pub fn main() {\n     let foo = ~3;\n     let _pfoo = &foo;\n-    let _f: @fn() -> int = || *foo + 5;\n+    let _f: ~fn() -> int = || *foo + 5;\n     //~^ ERROR cannot move `foo`\n \n     // FIXME(#2202) - Due to the way that borrowck treats closures,\n     // you get two error reports here.\n     let bar = ~3;\n     let _g = || { //~ ERROR capture of moved value\n-        let _h: @fn() -> int = || *bar; //~ ERROR capture of moved value\n+        let _h: ~fn() -> int = || *bar; //~ ERROR capture of moved value\n     };\n }"}, {"sha": "525f8f4a932b17a50ffd96978e6531d79d6d31e7", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n struct X {\n-    field: @fn:Send(),\n+    field: ~fn:Send(),\n }\n \n-fn foo(blk: @fn:()) -> X {\n+fn foo(blk: ~fn:()) -> X {\n     return X { field: blk }; //~ ERROR expected bounds `Send` but found no bounds\n }\n "}, {"sha": "1bffdaa682cdcd5c1ee13f78c9dd7f99074abf4e", "filename": "src/test/compile-fail/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo2.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: @fn(int) -> bool) -> bool { f(10i) }\n+fn f(f: &fn(int) -> bool) -> bool { f(10i) }\n \n fn main() {\n     assert!(do f() |i| { i == 10i } == 10i);"}, {"sha": "ab5591900346e3e273bab99489ea4d121a8b5dd5", "filename": "src/test/compile-fail/fn-variance-2.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn reproduce<T>(t: T) -> @fn() -> T {\n-    let result: @fn() -> T = || t;\n-    result\n-}\n-\n-fn main() {\n-    // type of x is the variable X,\n-    // with the lower bound @mut int\n-    let x = @mut 3;\n-\n-    // type of r is @fn() -> X\n-    let r = reproduce(x);\n-\n-    // Requires that X be a subtype of\n-    // @mut int.\n-    let f: @mut int = r();\n-\n-    // Bad.\n-    let h: @int = r(); //~ ERROR (values differ in mutability)\n-}"}, {"sha": "e42c6b658e4f7b87b5307935c361bc1702e3f940", "filename": "src/test/compile-fail/fn-variance-3.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn mk_identity<T>() -> @fn(T) -> T {\n-    let result: @fn(t: T) -> T = |t| t;\n-    result\n-}\n-\n-fn main() {\n-    // type of r is @fn(X) -> X\n-    // for some fresh X\n-    let r = mk_identity();\n-\n-    // @mut int <: X\n-    r(@mut 3);\n-\n-    // @int <: X\n-    //\n-    // Here the type check fails because @const is gone and there is no\n-    // supertype.\n-    r(@3);  //~ ERROR mismatched types\n-\n-    // Here the type check succeeds.\n-    *r(@mut 3) = 4;\n-}"}, {"sha": "0d8acaa44647bcaf14e29b56033ec4398645bf3b", "filename": "src/test/compile-fail/issue-1451.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // xfail-test\n-struct T { f: @fn() };\n-struct S { f: @fn() };\n+struct T { f: extern \"Rust\" fn() };\n+struct S { f: extern \"Rust\" fn() };\n \n fn fooS(t: S) {\n }\n@@ -22,11 +22,11 @@ fn bar() {\n }\n \n fn main() {\n-    let x: @fn() = bar;\n+    let x: extern \"Rust\" fn() = bar;\n     fooS(S {f: x});\n     fooS(S {f: bar});\n \n-    let x: @fn() = bar;\n+    let x: extern \"Rust\" fn() = bar;\n     fooT(T {f: x});\n     fooT(T {f: bar});\n }"}, {"sha": "4750f68d59b34454e9a438bd062246e562974ae4", "filename": "src/test/compile-fail/issue-1896-1.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we require managed closures to be rooted when borrowed.\n-\n-struct boxedFn<'self> { theFn: &'self fn() -> uint }\n-\n-fn createClosure (closedUint: uint) -> boxedFn {\n-    let theFn: @fn() -> uint = || closedUint;\n-    boxedFn {theFn: theFn} //~ ERROR cannot root\n-}\n-\n-fn main () {\n-    let aFn: boxedFn = createClosure(10);\n-\n-    let myInt: uint = (aFn.theFn)();\n-\n-    assert_eq!(myInt, 10);\n-}"}, {"sha": "7815fca16c69bd72898cd336f5822f0af744bd0c", "filename": "src/test/compile-fail/issue-2074.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -10,11 +10,11 @@\n \n // xfail-test\n fn main() {\n-    let one: @fn() -> uint = || {\n+    let one: &fn() -> uint = || {\n         enum r { a };\n         a as uint\n     };\n-    let two = @fn() -> uint = || {\n+    let two = &fn() -> uint = || {\n         enum r { a };\n         a as uint\n     };"}, {"sha": "8df73aef6109dfd9be3967192e4fff000e479911", "filename": "src/test/compile-fail/issue-897.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -1,3 +1,5 @@\n+// xfail-test\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "2dfdb2629f7f4f2374dda3ff41f63db30922c1d1", "filename": "src/test/compile-fail/kindck-owned.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn copy1<T:Clone>(t: T) -> @fn() -> T {\n-    let result: @fn() -> T = || t.clone();  //~ ERROR does not fulfill `'static`\n-    result\n-}\n-\n-fn copy2<T:Clone + 'static>(t: T) -> @fn() -> T {\n-    let result: @fn() -> T = || t.clone();\n-    result\n-}\n-\n-fn main() {\n-    let x = &3;\n-    copy2(&x); //~ ERROR does not fulfill `'static`\n-\n-    copy2(@3);\n-    copy2(@&x); //~ ERROR value may contain borrowed pointers\n-    //~^ ERROR does not fulfill `'static`\n-}"}, {"sha": "bfd1e12f3a6e05fce6d9ebcceae5876474ab2396", "filename": "src/test/compile-fail/lambda-mutate-nested.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Make sure that nesting a block within a @fn doesn't let us\n-// mutate upvars from a @fn.\n-fn f2(x: &fn()) { x(); }\n-\n-fn main() {\n-    let i = 0;\n-    let ctr: @fn() -> int = || { f2(|| i = i + 1 ); i };\n-    //~^ ERROR cannot assign\n-    error!(ctr());\n-    error!(ctr());\n-    error!(ctr());\n-    error!(ctr());\n-    error!(ctr());\n-    error!(i);\n-}"}, {"sha": "a848d8698a3d6d07cbe70cfc4c86f66610cac7b8", "filename": "src/test/compile-fail/lambda-mutate.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Make sure we can't write to upvars from @fns\n-fn main() {\n-    let i = 0;\n-    let ctr: @fn() -> int = || { i = i + 1; i };\n-    //~^ ERROR cannot assign\n-    error!(ctr());\n-    error!(ctr());\n-    error!(ctr());\n-    error!(ctr());\n-    error!(ctr());\n-    error!(i);\n-}"}, {"sha": "7054cb0d901ce54a9cf3d27ed224c1545e7bea0e", "filename": "src/test/compile-fail/liveness-init-in-called-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let j: @fn() -> int = || {\n+    let j: &fn() -> int = || {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };"}, {"sha": "b6c7895235b1009755f573ef98f536f1bffa223d", "filename": "src/test/compile-fail/liveness-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let f: @fn() -> int = || {\n+    let f: &fn() -> int = || {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };"}, {"sha": "5928d31a66860479ad0b0523a4cb8e946c8cbf96", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn of<T>() -> @fn(T) { fail!(); }\n-fn subtype<T>(x: @fn(T)) { fail!(); }\n+fn of<T>() -> &fn(T) { fail!(); }\n+fn subtype<T>(x: &fn(T)) { fail!(); }\n \n fn test_fn<'x,'y,'z,T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n     // Here, x, y, and z are free.  Other letters\n@@ -40,18 +40,6 @@ fn test_fn<'x,'y,'z,T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n \n     subtype::<&fn<'x,'y>(&'x T, &'y T)>(\n         of::<&fn<'a,'b>(&'a T, &'b T)>()); //~ ERROR mismatched types\n-\n-    subtype::<&fn<'x,'a>(&'x T) -> @fn(&'a T)>(\n-        of::<&fn<'x,'a>(&'x T) -> @fn(&'a T)>());\n-\n-    subtype::<&fn<'a>(&'a T) -> @fn(&'a T)>(\n-        of::<&fn<'a,'b>(&'a T) -> @fn(&'b T)>()); //~ ERROR mismatched types\n-\n-    subtype::<&fn<'a>(&'a T) -> @fn(&'a T)>(\n-        of::<&fn<'x,'b>(&'x T) -> @fn(&'b T)>()); //~ ERROR mismatched types\n-\n-    subtype::<&fn<'a,'b>(&'a T) -> @fn(&'b T)>(\n-        of::<&fn<'a>(&'a T) -> @fn(&'a T)>());\n }\n \n fn main() {}"}, {"sha": "715261d816a4e3f6998ec6d0fd36e35921b9259c", "filename": "src/test/compile-fail/regions-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -12,7 +12,7 @@\n // we reported errors in this case:\n \n fn not_ok<'b>(a: &uint, b: &'b uint) {\n-    let mut g: @fn(x: &uint) = |x: &'b uint| {};\n+    let mut g: &fn(x: &uint) = |x: &'b uint| {};\n     //~^ ERROR mismatched types\n     g(a);\n }"}, {"sha": "3ddae976ce317409f9ebc6223f519e695baa02c1", "filename": "src/test/compile-fail/regions-infer-at-fn-not-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -13,11 +13,11 @@ struct parameterized1<'self> {\n }\n \n struct not_parameterized1 {\n-    g: @fn()\n+    g: &'static fn()\n }\n \n struct not_parameterized2 {\n-    g: @fn()\n+    g: &'static fn()\n }\n \n fn take1(p: parameterized1) -> parameterized1 { p }"}, {"sha": "3fcc5184b4a7c8404df6c416ffc032249090ba4b", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -14,7 +14,7 @@\n // the normal case.\n \n struct contravariant<'self> {\n-    f: @fn() -> &'self int\n+    f: &'static fn() -> &'self int\n }\n \n fn to_same_lifetime<'r>(bi: contravariant<'r>) {"}, {"sha": "4b26e6b60216372277337a5e10f8133b174a1339", "filename": "src/test/compile-fail/regions-infer-covariance-due-to-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -13,7 +13,7 @@\n // You can upcast to a *larger region* but not a smaller one.\n \n struct covariant<'self> {\n-    f: @fn(x: &'self int) -> int\n+    f: &'static fn(x: &'self int) -> int\n }\n \n fn to_same_lifetime<'r>(bi: covariant<'r>) {"}, {"sha": "6e322b170e8c33e48481b586fa9d4338105f6559", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct invariant<'self> {\n-    f: @fn(x: @mut &'self int)\n+    f: &'static fn(x: @mut &'self int)\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "380e9b27ff9c700ae1edce8abe343dfe999460fa", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct invariant<'self> {\n-    f: @fn() -> @mut &'self int\n+    f: &'static fn() -> @mut &'self int\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "47c1f7a5757dea49dcf1a0bc0ef2caf7504401fd", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -14,12 +14,12 @@ struct direct<'self> {\n \n struct indirect1 {\n     // Here the lifetime parameter of direct is bound by the fn()\n-    g: @fn(direct)\n+    g: &'static fn(direct)\n }\n \n struct indirect2<'self> {\n     // But here it is set to 'self\n-    g: @fn(direct<'self>)\n+    g: &'static fn(direct<'self>)\n }\n \n fn take_direct(p: direct) -> direct { p } //~ ERROR mismatched types"}, {"sha": "609439d7b8e2b6205978287311074e724512579b", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn test(f: @fn(uint) -> uint) -> uint {\n-    return f(22u);\n-}\n-\n-fn main() {\n-    let f: ~fn(x: uint) -> uint = |x| 4u;\n-    info!(test(f)); //~ ERROR expected @ closure, found ~ closure\n-}"}, {"sha": "96da78a9192983cf69aea31f57807d4f48ec1c80", "filename": "src/test/debug-info/lexical-scope-in-managed-closure.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fdebug-info%2Flexical-scope-in-managed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fdebug-info%2Flexical-scope-in-managed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-managed-closure.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,77 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags:-Z extra-debug-info\n-// debugger:rbreak zzz\n-// debugger:run\n-\n-// debugger:finish\n-// debugger:print x\n-// check:$1 = false\n-// debugger:continue\n-\n-// debugger:finish\n-// debugger:print x\n-// check:$2 = false\n-// debugger:continue\n-\n-// debugger:finish\n-// debugger:print x\n-// check:$3 = 1000\n-// debugger:continue\n-\n-// debugger:finish\n-// debugger:print x\n-// check:$4 = 2.5\n-// debugger:continue\n-\n-// debugger:finish\n-// debugger:print x\n-// check:$5 = true\n-// debugger:continue\n-\n-// debugger:finish\n-// debugger:print x\n-// check:$6 = false\n-// debugger:continue\n-\n-fn main() {\n-\n-    let x = false;\n-\n-    zzz();\n-    sentinel();\n-\n-    let managed_closure: @fn(int) = |x| {\n-        zzz();\n-        sentinel();\n-\n-        let x = 2.5;\n-\n-        zzz();\n-        sentinel();\n-\n-        let x = true;\n-\n-        zzz();\n-        sentinel();\n-    };\n-\n-    zzz();\n-    sentinel();\n-\n-    managed_closure(1000);\n-\n-    zzz();\n-    sentinel();\n-}\n-\n-fn zzz() {()}\n-fn sentinel() {()}"}, {"sha": "b20f40378d3964f7430097adf2313cae94f9a0f6", "filename": "src/test/debug-info/var-captured-in-managed-closure.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags:-Z extra-debug-info\n-// debugger:rbreak zzz\n-// debugger:run\n-// debugger:finish\n-\n-// debugger:print constant\n-// check:$1 = 1\n-// debugger:print a_struct\n-// check:$2 = {a = -2, b = 3.5, c = 4}\n-// debugger:print *owned\n-// check:$3 = 5\n-// debugger:print managed->val\n-// check:$4 = 6\n-\n-#[allow(unused_variable)];\n-\n-struct Struct {\n-    a: int,\n-    b: float,\n-    c: uint\n-}\n-\n-fn main() {\n-    let constant = 1;\n-\n-    let a_struct = Struct {\n-        a: -2,\n-        b: 3.5,\n-        c: 4\n-    };\n-\n-    let owned = ~5;\n-    let managed = @6;\n-\n-    let closure: @fn() = || {\n-        zzz();\n-        do_something(&constant, &a_struct.a, owned, managed);\n-    };\n-\n-    closure();\n-}\n-\n-fn do_something(_: &int, _:&int, _:&int, _:&int) {\n-}\n-\n-fn zzz() {()}"}, {"sha": "c0f173a1a0d6a751d16c7bd7993aa1bbc58b481c", "filename": "src/test/pretty/block-arg-disambig.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,12 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn blk1(_b: &fn()) -> @fn() { return || { }; }\n-fn test1() { (do blk1 { info!(\"hi\"); })(); }"}, {"sha": "751aedb39a3a8a00ddb2f0cb72d538ac701f5c9d", "filename": "src/test/pretty/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fpretty%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fpretty%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdo1.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -10,6 +10,6 @@\n \n // pp-exact\n \n-fn f(f: @fn(int)) { f(10) }\n+fn f(f: &fn(int)) { f(10) }\n \n fn main() { do f |i| { assert!(i == 10) } }"}, {"sha": "b000c9f9137ae51447e544d65e1f2173aa48389b", "filename": "src/test/pretty/fn-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fpretty%2Ffn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Fpretty%2Ffn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffn-types.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -12,6 +12,5 @@\n \n fn from_foreign_fn(_x: extern \"Rust\" fn()) { }\n fn from_stack_closure(_x: &fn()) { }\n-fn from_box_closure(_x: @fn()) { }\n fn from_unique_closure(_x: ~fn()) { }\n fn main() { }"}, {"sha": "a94f904c4921ab21c86818f5130207dc7da4956f", "filename": "src/test/run-fail/unwind-box-fn.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-fn failfn() {\n-    fail!();\n-}\n-\n-fn main() {\n-    let y = ~0;\n-    let x: @@fn() = @|| {\n-        error!(y.clone());\n-    };\n-    failfn();\n-    error!(x);\n-}"}, {"sha": "5ea71c94e14685b09b09d49fbb034309edf1f87d", "filename": "src/test/run-fail/unwind-closure.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-closure.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:fail\n-\n-fn f(_a: @int) {\n-    fail!();\n-}\n-\n-fn main() {\n-    let b = @0;\n-    let g: @fn() = || f(b);\n-    g();\n-}"}, {"sha": "65d9fce5ff5dc8acf74499eeef0a9f1641083c16", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let cheese = ~\"roquefort\";\n     let carrots = @~\"crunchy\";\n \n-    let result: @fn(@~str, &fn(~str)) = (|tasties, macerate| {\n+    let result: &'static fn(@~str, &fn(~str)) = (|tasties, macerate| {\n         macerate((*tasties).clone());\n     });\n     result(carrots, |food| {"}, {"sha": "4352c139b620bdf8bedfb7ebb0edfd98ecdb789a", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -12,13 +12,30 @@ struct pair<A,B> {\n     a: A, b: B\n }\n \n-fn f<A:Clone + 'static>(a: A, b: u16) -> @fn() -> (A, u16) {\n-    let result: @fn() -> (A, u16) = || (a.clone(), b);\n-    result\n+trait Invokable<A> {\n+    fn f(&self) -> (A, u16);\n+}\n+\n+struct Invoker<A> {\n+    a: A,\n+    b: u16,\n+}\n+\n+impl<A:Clone> Invokable<A> for Invoker<A> {\n+    fn f(&self) -> (A, u16) {\n+        (self.a.clone(), self.b)\n+    }\n+}\n+\n+fn f<A:Clone + 'static>(a: A, b: u16) -> @Invokable<A> {\n+    @Invoker {\n+        a: a,\n+        b: b,\n+    } as @Invokable<A>\n }\n \n pub fn main() {\n-    let (a, b) = f(22_u64, 44u16)();\n+    let (a, b) = f(22_u64, 44u16).f();\n     info!(\"a=%? b=%?\", a, b);\n     assert_eq!(a, 22u64);\n     assert_eq!(b, 44u16);"}, {"sha": "9bf95968a9a211af58eab3cc663133a436a9a324", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -23,21 +23,38 @@ fn make_cycle<A:'static>(a: A) {\n     g.rec = Some(g);\n }\n \n+struct Invoker<A,B> {\n+    a: A,\n+    b: B,\n+}\n+\n+trait Invokable<A,B> {\n+    fn f(&self) -> (A, B);\n+}\n+\n+impl<A:Clone,B:Clone> Invokable<A,B> for Invoker<A,B> {\n+    fn f(&self) -> (A, B) {\n+        (self.a.clone(), self.b.clone())\n+    }\n+}\n+\n fn f<A:Send + Clone + 'static,\n      B:Send + Clone + 'static>(\n      a: A,\n      b: B)\n-     -> @fn() -> (A, B) {\n-    let result: @fn() -> (A, B) = || (a.clone(), b.clone());\n-    result\n+     -> @Invokable<A,B> {\n+    @Invoker {\n+        a: a,\n+        b: b,\n+    } as @Invokable<A,B>\n }\n \n pub fn main() {\n     let x = 22_u8;\n     let y = 44_u64;\n     let z = f(~x, y);\n     make_cycle(z);\n-    let (a, b) = z();\n+    let (a, b) = z.f();\n     info!(\"a=%u b=%u\", *a as uint, b as uint);\n     assert_eq!(*a, x);\n     assert_eq!(b, y);"}, {"sha": "6a59278982ad3fddbe30930bdf194b5900df4641", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -14,19 +14,13 @@ fn asSendfn( f : ~fn()->uint ) -> uint {\n    return f();\n }\n \n-fn asLambda( f : @fn()->uint ) -> uint {\n-   return f();\n-}\n-\n fn asBlock( f : &fn()->uint ) -> uint {\n    return f();\n }\n \n pub fn main() {\n    let x = asSendfn(|| 22u);\n    assert_eq!(x, 22u);\n-   let x = asLambda(|| 22u);\n-   assert_eq!(x, 22u);\n    let x = asBlock(|| 22u);\n    assert_eq!(x, 22u);\n }"}, {"sha": "34fa7e36d973f4ad6453b11766f27b44f212f40c", "filename": "src/test/run-pass/block-arg-used-as-lambda.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn to_lambda(f: @fn(uint) -> uint) -> @fn(uint) -> uint {\n-    return f;\n-}\n-\n-pub fn main() {\n-    let x: @fn(uint) -> uint = to_lambda(|x| x * 2u );\n-    let y = to_lambda(x);\n-\n-    let x_r = x(22u);\n-    let y_r = y(x_r);\n-\n-    assert_eq!(x_r, 44u);\n-    assert_eq!(y_r, 88u);\n-}"}, {"sha": "f6328c8c65822cd8eb8ff0d574601076ce281d0d", "filename": "src/test/run-pass/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -1,5 +1,5 @@\n pub fn main() {\n     let bar = ~3;\n-    let h: @fn() -> int = || *bar;\n+    let h: ~fn() -> int = || *bar;\n     assert_eq!(h(), 3);\n }"}, {"sha": "16728dffd19b17d5d3d7677b73f3945a82560b4d", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,7 +11,7 @@\n fn foo() -> int { 22 }\n \n pub fn main() {\n-    let mut x: ~[@fn() -> int] = ~[];\n+    let mut x: ~[extern \"Rust\" fn() -> int] = ~[];\n     x.push(foo);\n     assert_eq!((x[0])(), 22);\n }"}, {"sha": "64be8dab6e7021be8904b75de0e80a0b43da13ed", "filename": "src/test/run-pass/cap-clause-move.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,16 +11,6 @@\n use std::ptr;\n \n pub fn main() {\n-    let x = ~1;\n-    let y = ptr::to_unsafe_ptr(&(*x)) as uint;\n-    let lam_move: @fn() -> uint = || ptr::to_unsafe_ptr(&(*x)) as uint;\n-    assert_eq!(lam_move(), y);\n-\n-    let x = ~2;\n-    let y = ptr::to_unsafe_ptr(&(*x)) as uint;\n-    let lam_move: @fn() -> uint = || ptr::to_unsafe_ptr(&(*x)) as uint;\n-    assert_eq!(lam_move(), y);\n-\n     let x = ~3;\n     let y = ptr::to_unsafe_ptr(&(*x)) as uint;\n     let snd_move: ~fn() -> uint = || ptr::to_unsafe_ptr(&(*x)) as uint;"}, {"sha": "8b7967ac1501e5bfdf3ee73cd6ef846fb6c3e82a", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -16,13 +16,30 @@ struct Pair<A,B> {\n     a: A, b: B\n }\n \n-fn f<A:Clone + 'static>(a: A, b: u16) -> @fn() -> (A, u16) {\n-    let result: @fn() -> (A, u16) = || (a.clone(), b);\n-    result\n+struct Invoker<A> {\n+    a: A,\n+    b: u16,\n+}\n+\n+trait Invokable<A> {\n+    fn f(&self) -> (A, u16);\n+}\n+\n+impl<A:Clone> Invokable<A> for Invoker<A> {\n+    fn f(&self) -> (A, u16) {\n+        (self.a.clone(), self.b)\n+    }\n+}\n+\n+fn f<A:Clone + 'static>(a: A, b: u16) -> @Invokable<A> {\n+    @Invoker {\n+        a: a,\n+        b: b,\n+    } as @Invokable<A>\n }\n \n pub fn main() {\n-    let (a, b) = f(22_u64, 44u16)();\n+    let (a, b) = f(22_u64, 44u16).f();\n     info!(\"a=%? b=%?\", a, b);\n     assert_eq!(a, 22u64);\n     assert_eq!(b, 44u16);"}, {"sha": "46c0c52e0c7187831d9aa91edf52c4981b5c1e18", "filename": "src/test/run-pass/cycle-collection2.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -8,13 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo { z: @fn() }\n+struct foo {\n+    z: Option<@Invokable>,\n+}\n+\n+struct Thing {\n+    w: @mut foo,\n+}\n+\n+trait Invokable {\n+    fn f(&self);\n+}\n+\n+impl Invokable for Thing {\n+    fn f(&self) {\n+        nop_foo(self.w);\n+    }\n+}\n \n fn nop() { }\n fn nop_foo(_x : @mut foo) { }\n \n pub fn main() {\n-    let w = @mut foo{ z: || nop() };\n-    let x: @fn() = || nop_foo(w);\n-    w.z = x;\n+    let w = @mut foo {\n+        z: None,\n+    };\n+    let x = @Thing {\n+        w: w,\n+    } as @Invokable;\n+    w.z = Some(x);\n }"}, {"sha": "8b613093944c5feff2bd4e98ac1c4303522a976f", "filename": "src/test/run-pass/cycle-collection4.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct foo { z : @fn() }\n-\n-fn nop() { }\n-fn nop_foo(_y: ~[int], _x : @mut foo) { }\n-\n-pub fn main() {\n-    let w = @mut foo{ z: || nop() };\n-    let x : @fn() = || nop_foo(~[], w);\n-    w.z = x;\n-}"}, {"sha": "f724a86555c76992106028014dd18b96a1849f95", "filename": "src/test/run-pass/cycle-collection5.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct foo { z: @fn() }\n-\n-fn nop() { }\n-fn nop_foo(_y: @int, _x: @mut foo) { }\n-\n-fn o() -> @int { @10 }\n-\n-pub fn main() {\n-    let w = @mut foo { z: || nop() };\n-    let x : @fn() = || nop_foo(o(), w);\n-    w.z = x;\n-}"}, {"sha": "1f725ffb3576a3858e424767642b6077771b246b", "filename": "src/test/run-pass/do-no-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fdo-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fdo-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-no-args.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -10,9 +10,9 @@\n \n // Testing that we can drop the || in do exprs\n \n-fn f(_f: @fn() -> bool) -> bool { true }\n+fn f(_f: &fn() -> bool) -> bool { true }\n \n-fn d(_f: @fn()) { }\n+fn d(_f: &fn()) { }\n \n pub fn main() {\n     do d { }"}, {"sha": "0444b269cb34f2225cca898ef585c98eea6abc8f", "filename": "src/test/run-pass/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo1.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: @fn(int)) { f(10) }\n+fn f(f: &fn(int)) { f(10) }\n \n pub fn main() {\n     do f() |i| { assert!(i == 10) }"}, {"sha": "9feededc9800b68587a00323526e19e988f692a7", "filename": "src/test/run-pass/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo2.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: @fn(int) -> int) -> int { f(10) }\n+fn f(f: &fn(int) -> int) -> int { f(10) }\n \n pub fn main() {\n     assert_eq!(do f() |i| { i }, 10);"}, {"sha": "eeb983b455792826b08a748cc17ef504e3eae27c", "filename": "src/test/run-pass/do3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fdo3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fdo3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo3.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: @fn(int) -> int) -> int { f(10) }\n+fn f(f: &fn(int) -> int) -> int { f(10) }\n \n pub fn main() {\n     assert_eq!(do f |i| { i }, 10);"}, {"sha": "63e5c7688d345a38150a67c4753290ea546a1459", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,7 +11,7 @@\n \n \n fn test_fn() {\n-    type t = @fn() -> int;\n+    type t = &'static fn() -> int;\n     fn ten() -> int { return 10; }\n     let rs: t = { ten };\n     assert!((rs() == 10));"}, {"sha": "12b387b7eae5e6a634c61635b66d8ae4ad5178a0", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = @fn(@T, @T) -> bool;\n+type compare<T> = &'static fn(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n     let actual: @T = { expected };"}, {"sha": "cfa59d68635de986173715c850d726784bd63fc2", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,7 +11,7 @@\n \n // xfail-fast\n \n-type compare<T> = @fn(T, T) -> bool;\n+type compare<'self, T> = &'self fn(T, T) -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = { expected.clone() };"}, {"sha": "3f9c101761f8d211003d7790efa2123c042e803b", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,7 +11,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = @fn(~T, ~T) -> bool;\n+type compare<'self, T> = &'self fn(~T, ~T) -> bool;\n \n fn test_generic<T:Clone>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = { expected.clone() };"}, {"sha": "3484a4f7f5a1c307c24028e0c129f3e436fceae8", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // -*- rust -*-\n \n-type compare<T> = @fn(T, T) -> bool;\n+type compare<'self, T> = &'self fn(T, T) -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = { expected.clone() };"}, {"sha": "2f379602c6bd1cb54ab7ef9e3fd3bf62b6127abb", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -13,7 +13,7 @@\n // xfail-fast\n \n // Tests for standalone blocks as expressions with dynamic type sizes\n-type compare<T> = @fn(T, T) -> bool;\n+type compare<'self, T> = &'self fn(T, T) -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = { expected.clone() };"}, {"sha": "8bf6e658408cb8b1b9770e015c313340f7b630f5", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = @fn(@T, @T) -> bool;\n+type compare<T> = &'static fn(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, not_expected: @T, eq: compare<T>) {\n     let actual: @T = if true { expected } else { not_expected };"}, {"sha": "2c4707a87d5c5369fcfa974896c2caa7c7a02836", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // -*- rust -*-\n \n-type compare<T> = @fn(T, T) -> bool;\n+type compare<T> = &'static fn(T, T) -> bool;\n \n fn test_generic<T:Clone>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected.clone() } else { not_expected };"}, {"sha": "1bbf3a537db282083366ff501e53becde2b8f834", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -12,7 +12,7 @@\n // -*- rust -*-\n \n // Tests for if as expressions with dynamic type sizes\n-type compare<T> = @fn(T, T) -> bool;\n+type compare<T> = &'static fn(T, T) -> bool;\n \n fn test_generic<T:Clone>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected.clone() } else { not_expected };"}, {"sha": "064e33436205047e61e289bfae458ad686fc2b40", "filename": "src/test/run-pass/expr-match-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box1.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = @fn(@T, @T) -> bool;\n+type compare<T> = &'static fn(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n     let actual: @T = match true { true => { expected }, _ => fail!() };"}, {"sha": "bca06ebdbb5f3405f5757b836d0badffad7bfba4", "filename": "src/test/run-pass/expr-match-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-box2.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // -*- rust -*-\n \n-type compare<T> = @fn(T, T) -> bool;\n+type compare<T> = &'static fn(T, T) -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = match true { true => { expected.clone() }, _ => fail!(\"wat\") };"}, {"sha": "7371f8fd89b9ce28c193edbc0cb9ad7e2c4c8d05", "filename": "src/test/run-pass/expr-match-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,7 +11,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = @fn(~T, ~T) -> bool;\n+type compare<T> = &'static fn(~T, ~T) -> bool;\n \n fn test_generic<T:Clone>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = match true {"}, {"sha": "d07d40e675766c2ddae974844d25a8a507adb62e", "filename": "src/test/run-pass/expr-match-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // -*- rust -*-\n \n-type compare<T> = @fn(T, T) -> bool;\n+type compare<'self, T> = &'self fn(T, T) -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n     let actual: T = match true {"}, {"sha": "b43085d346f30416b2e89a06c56c904afd2ae165", "filename": "src/test/run-pass/expr-match-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // -*- rust -*-\n \n-type compare<T> = @fn(T, T) -> bool;\n+type compare<T> = extern \"Rust\" fn(T, T) -> bool;\n \n fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n   let actual: T = match true { true => { expected.clone() }, _ => fail!(\"wat\") };"}, {"sha": "4c28151224c6d26a9e9e16461c7a35fd3eca5146", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-fast\n-\n-fn fix_help<A, B>(f: extern fn(@fn(A) -> B, A) -> B, x: A) -> B {\n-    return f( |a| fix_help(f, a), x);\n-}\n-\n-fn fix<A, B>(f: extern fn(@fn(A) -> B, A) -> B) -> @fn(A) -> B {\n-    return |a| fix_help(f, a);\n-}\n-\n-fn fact_(f: @fn(v: int) -> int, n: int) -> int {\n-    // fun fact 0 = 1\n-    return if n == 0 { 1 } else { n * f(n - 1) };\n-}\n-\n-pub fn main() {\n-    let fact = fix(fact_);\n-    assert_eq!(fact(5), 120);\n-    assert_eq!(fact(2), 2);\n-}"}, {"sha": "c7b64fde3fd5af2f4154eb31e719dce8e12ffc99", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-fast\n-\n-fn fix_help<A:'static,B:Send>(f: extern fn(@fn(A) -> B, A) -> B, x: A) -> B {\n-    return f(|a| fix_help(f, a), x);\n-}\n-\n-fn fix<A:'static,B:Send>(f: extern fn(@fn(A) -> B, A) -> B) -> @fn(A) -> B {\n-    return |a| fix_help(f, a);\n-}\n-\n-fn fact_(f: @fn(v: int) -> int, n: int) -> int {\n-    // fun fact 0 = 1\n-    return if n == 0 { 1 } else { n * f(n - 1) };\n-}\n-\n-pub fn main() {\n-    let fact = fix(fact_);\n-    assert_eq!(fact(5), 120);\n-    assert_eq!(fact(2), 2);\n-}"}, {"sha": "dece77595bcd984943205b43bcdb56c69c10639e", "filename": "src/test/run-pass/fn-assign-managed-to-bare-1.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-1.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn add(n: int) -> @fn(int) -> int {\n-    let result: @fn(int) -> int = |m| m + n;\n-    result\n-}\n-\n-pub fn main() {\n-      assert_eq!(add(3)(4), 7);\n-      let add3 : &fn(int)->int = add(3);\n-      assert_eq!(add3(4), 7);\n-}"}, {"sha": "f8daacfa2337aa9213d024b03cec08d1a085ffa0", "filename": "src/test/run-pass/fn-assign-managed-to-bare-2.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-2.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn add(n: int) -> @fn(int) -> int {\n-    let result: @fn(int) -> int = |m| m + n;\n-    result\n-}\n-\n-pub fn main()\n-{\n-    assert_eq!(add(3)(4), 7);\n-\n-    let add1 : @fn(int)->int = add(1);\n-    assert_eq!(add1(6), 7);\n-\n-    let add2 : &(@fn(int)->int) = &add(2);\n-    assert_eq!((*add2)(5), 7);\n-\n-    let add3 : &fn(int)->int = add(3);\n-    assert_eq!(add3(4), 7);\n-}"}, {"sha": "853b44ed76cb67d7df58f7924afab8d011eab57f", "filename": "src/test/run-pass/fn-bare-coerce-to-shared.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn bare() {}\n-\n-fn likes_shared(f: @fn()) { f() }\n-\n-pub fn main() {\n-    likes_shared(bare);\n-}"}, {"sha": "ae2e353f913ba5631ece94819717d0c14250a9a1", "filename": "src/test/run-pass/fn-coerce-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct r {\n-    field: @fn()\n+struct r<'self> {\n+    field: &'self fn()\n }\n \n pub fn main() {"}, {"sha": "09e7ababa6cb6d6acff9075392e24796345f6130", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,7 +11,7 @@\n #[allow(unused_variable)];\n \n pub fn main() {\n-    // We should be able to type infer inside of @fns.\n+    // We should be able to type infer inside of &fns.\n     let _f = || {\n         let i = 10;\n     };"}, {"sha": "5011998f92949beb460cd00a4f30c1350804c788", "filename": "src/test/run-pass/fun-call-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn ho(f: @fn(int) -> int) -> int { let n: int = f(3); return n; }\n+fn ho(f: &fn(int) -> int) -> int { let n: int = f(3); return n; }\n \n fn direct(x: int) -> int { return x + 1; }\n "}, {"sha": "15286a85c01b270746b85c50bc02ff328744cdf6", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -24,7 +24,7 @@ mod map_reduce {\n     use std::str;\n     use std::task;\n \n-    pub type putter = @fn(~str, ~str);\n+    pub type putter<'self> = &'self fn(~str, ~str);\n \n     pub type mapper = extern fn(~str, putter);\n "}, {"sha": "6f2fd54bc9cbc499af7613e7eb68a38c7c521d0c", "filename": "src/test/run-pass/infer-with-expected.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Tests the passing down of expected types through boxing and\n-// wrapping in a record or tuple. (The a.x would complain about 'this\n-// type must be known in this context' if the passing down doesn't\n-// happen.)\n-\n-fn eat_tup(_r: ~@(int, @fn(Pair) -> int)) {}\n-fn eat_rec(_r: ~Rec) {}\n-\n-struct Rec<'self> { a: int, b: &'self fn(Pair) -> int }\n-struct Pair { x: int, y: int }\n-\n-pub fn main() {\n-    eat_tup(~@(10, |a| a.x ));\n-    eat_rec(~Rec{a: 10, b: |a| a.x });\n-}"}, {"sha": "4b73d83595e64c6c2ac33d71c8c46b8e75c0360f", "filename": "src/test/run-pass/issue-1516.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1516.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    let early_error: @fn(&str) -> !  = |_msg| { fail!() };\n+    let early_error: &'static fn(&str) -> !  = |_msg| { fail!() };\n }"}, {"sha": "a1ea1b9080954d03560f92487abc63425973fe13", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -18,11 +18,11 @@\n //\n // Running /usr/local/bin/rustc:\n // issue-2185.rs:24:0: 26:1 error: conflicting implementations for a trait\n-// issue-2185.rs:24 impl iterable<uint> for @fn(&fn(uint)) {\n+// issue-2185.rs:24 impl iterable<uint> for &'static fn(&fn(uint)) {\n // issue-2185.rs:25     fn iter(&self, blk: &fn(v: uint)) { self( |i| blk(i) ) }\n // issue-2185.rs:26 }\n // issue-2185.rs:20:0: 22:1 note: note conflicting implementation here\n-// issue-2185.rs:20 impl<A> iterable<A> for @fn(&fn(A)) {\n+// issue-2185.rs:20 impl<A> iterable<A> for &'static fn(&fn(A)) {\n // issue-2185.rs:21     fn iter(&self, blk: &fn(A)) { self(blk); }\n // issue-2185.rs:22 }\n //\n@@ -42,15 +42,17 @@ trait iterable<A> {\n     fn iter(&self, blk: &fn(A));\n }\n \n-impl<A> iterable<A> for @fn(&fn(A)) {\n+impl<A> iterable<A> for &'static fn(&fn(A)) {\n     fn iter(&self, blk: &fn(A)) { self(blk); }\n }\n \n-impl iterable<uint> for @fn(&fn(uint)) {\n+impl iterable<uint> for &'static fn(&fn(uint)) {\n     fn iter(&self, blk: &fn(v: uint)) { self( |i| blk(i) ) }\n }\n \n-fn filter<A,IA:iterable<A>>(self: IA, prd: @fn(A) -> bool, blk: &fn(A)) {\n+fn filter<A,IA:iterable<A>>(self: IA,\n+                            prd: &'static fn(A) -> bool,\n+                            blk: &fn(A)) {\n     do self.iter |a| {\n         if prd(a) { blk(a) }\n     }\n@@ -73,8 +75,8 @@ fn range(lo: uint, hi: uint, it: &fn(uint)) {\n }\n \n pub fn main() {\n-    let range: @fn(&fn(uint)) = |a| range(0u, 1000u, a);\n-    let filt: @fn(&fn(v: uint)) = |a| filter(\n+    let range: &'static fn(&fn(uint)) = |a| range(0u, 1000u, a);\n+    let filt: &'static fn(&fn(v: uint)) = |a| filter(\n         range,\n         |&&n: uint| n % 3u != 0u && n % 5u != 0u,\n         a);"}, {"sha": "bde18d77b9add6edf023e34e56a14b11f636ff50", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -9,12 +9,16 @@\n // except according to those terms.\n \n struct cat {\n-    meow: @fn(),\n+    meow: extern \"Rust\" fn(),\n+}\n+\n+fn meow() {\n+    error!(\"meow\")\n }\n \n fn cat() -> cat {\n     cat {\n-        meow: || error!(\"meow\")\n+        meow: meow,\n     }\n }\n "}, {"sha": "cb1ffc389089808ca828cb83c859c636b5813363", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type Connection = @fn(~[u8]);\n+type Connection = &'static fn(~[u8]);\n \n fn f() -> Option<Connection> {\n     let mock_connection: Connection = |_| {};"}, {"sha": "fc493485b794e752751e9de07c5dc4ce781203dd", "filename": "src/test/run-pass/issue-3429.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3429.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n   let x = 1;\n-  let y: @fn() -> int = || x;\n+  let y: &fn() -> int = || x;\n   let _z = y();\n }"}, {"sha": "5803c3da6cc9c5f2553a7268e2be2049159be610", "filename": "src/test/run-pass/issue-4929.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fissue-4929.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fissue-4929.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4929.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,12 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn make_adder(x: int) -> @fn(int) -> int { |y| x + y }\n-pub fn main() { }"}, {"sha": "7f988dc6489345b60b68eb156a83b215a41cbaee", "filename": "src/test/run-pass/issue-5783.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fissue-5783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fissue-5783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5783.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Issue #5783\n-// Nondeterministic behavior when referencing a closure more than once\n-\n-fn main() {\n-    let a: &fn(int) -> @fn(int) -> int = |x:int| |y:int| -> int x + y;\n-    let b = a(2);\n-    assert!(a(2)(3) == 5);\n-    assert!(b(6) == 8);\n-}"}, {"sha": "35df47df036712f6f04317148127ef10e6d98b06", "filename": "src/test/run-pass/issue4516_ty_param.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fissue4516_ty_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fissue4516_ty_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue4516_ty_param.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-fast - check-fast doesn't understand aux-build\n-// aux-build:issue4516_ty_param_lib.rs\n-\n-// Trigger a bug concerning inlining of generic functions.\n-// The def-ids in type parameters were not being correctly\n-// resolved and hence when we checked the type of the closure\n-// variable (see the library mod) to determine if the value\n-// should be moved into the closure, trans failed to find\n-// the relevant kind bounds.\n-\n-extern mod issue4516_ty_param_lib;\n-use issue4516_ty_param_lib::to_closure;\n-pub fn main() {\n-    to_closure(22)();\n-}"}, {"sha": "d55150e448e81a12d137a7172d8ee79711ce6168", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n // This should typecheck even though the type of e is not fully\n-// resolved when we finish typechecking the @fn.\n+// resolved when we finish typechecking the &fn.\n \n \n struct Refs { refs: ~[int], n: int }\n \n pub fn main() {\n     let e = @mut Refs{refs: ~[], n: 0};\n-    let _f: @fn() = || error!(e.n);\n+    let _f: &fn() = || error!(e.n);\n     e.refs.push(1);\n }"}, {"sha": "e19503240f024977fbd60ace033139df77e13362", "filename": "src/test/run-pass/lambda-no-leak.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Make sure we don't leak @fns in silly ways.\n-fn force(f: @fn()) { f() }\n-pub fn main() {\n-    let x = 7;\n-    let _f: @fn() = || error!(x);\n-    force(|| error!(x));\n-}"}, {"sha": "d014a3cf1a15cf4d1b4ed4e4aa8feaa86d903b89", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -12,10 +12,10 @@\n \n struct A { a: ~int }\n \n-fn foo() -> @fn() -> int {\n+fn foo() -> &'static fn() -> int {\n     let k = ~22;\n     let _u = A {a: k.clone()};\n-    let result: @fn() -> int = || 22;\n+    let result: &'static fn() -> int = || 22;\n     result\n }\n "}, {"sha": "079d2374a29ffe75f98df5aaa3c59452e8ee233c", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -13,7 +13,7 @@\n struct A { a: ~int }\n \n pub fn main() {\n-    fn invoke(f: @fn()) { f(); }\n+    fn invoke(f: &fn()) { f(); }\n     let k = ~22;\n     let _u = A {a: k.clone()};\n     invoke(|| error!(k.clone()) )"}, {"sha": "8e36b1138bd432074669521cddb0f4827eccdccd", "filename": "src/test/run-pass/monomorphize-trait-in-fn-at.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// test that invoking functions which require\n-// dictionaries from inside an @fn works\n-// (at one point, it didn't)\n-\n-fn mk_nil<C:ty_ops>(cx: C) -> uint {\n-    cx.mk()\n-}\n-\n-trait ty_ops {\n-    fn mk(&self) -> uint;\n-}\n-\n-impl ty_ops for () {\n-    fn mk(&self) -> uint { 22u }\n-}\n-\n-pub fn main() {\n-    let fn_env: @fn() -> uint = || mk_nil(());\n-    assert_eq!(fn_env(), 22u);\n-}"}, {"sha": "87281c2fd225314787432a573e661d0ae0348f36", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // Issue #922\n-fn f2(_thing: @fn()) { }\n+fn f2(_thing: &fn()) { }\n \n-fn f(thing: @fn()) {\n+fn f(thing: &fn()) {\n     f2(thing);\n }\n "}, {"sha": "6d6757890ad3e6e0d8af6dc9c2399b4626e840e0", "filename": "src/test/run-pass/newlambdas-ret-infer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,8 +11,6 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-fn shared() -> @fn() { return || (); }\n-\n fn unique() -> ~fn() { return || (); }\n \n pub fn main() {"}, {"sha": "17ff8ce94d90ff1841bbe694186bd97bca788528", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -11,8 +11,6 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-fn shared() -> @fn() { || () }\n-\n fn unique() -> ~fn() { || () }\n \n pub fn main() {"}, {"sha": "d9d0daa7138cdf76873eb74e76549097d5420b4e", "filename": "src/test/run-pass/newlambdas.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -14,16 +14,9 @@ fn f(i: int, f: &fn(int) -> int) -> int { f(i) }\n \n fn g(_g: &fn()) { }\n \n-fn ff() -> @fn(int) -> int {\n-    return |x| x + 1;\n-}\n-\n pub fn main() {\n     assert_eq!(f(10, |a| a), 10);\n     g(||());\n     assert_eq!(do f(10) |a| { a }, 10);\n     do g() { }\n-    let _x: @fn() -> int = || 10;\n-    let _y: @fn(int) -> int = |a| a;\n-    assert_eq!(ff()(10), 11);\n }"}, {"sha": "f8f824cd596030e8e342ffec32a0b91b3da22747", "filename": "src/test/run-pass/propagate-expected-type-through-block.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fpropagate-expected-type-through-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa/src%2Ftest%2Frun-pass%2Fpropagate-expected-type-through-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpropagate-expected-type-through-block.rs?ref=a170183ba39c32b9f85c50a379dc4f9b8bd6e0fa", "patch": "@@ -1,12 +0,0 @@\n-// Test that expected type propagates through `{}` expressions.  If it\n-// did not, then the type of `x` would not be known and a compilation\n-// error would result.\n-\n-pub fn main() {\n-    let y = ~3;\n-    let foo: @fn(&int) -> int = {\n-        let y = y.clone();\n-        |x| *x + *y\n-    };\n-    assert_eq!(foo(@22), 25);\n-}"}, {"sha": "cf6f12a06e5f803dfe518644402bc237d46cf822", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -460,9 +460,9 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n     }\n \n     fn visit_closure_ptr(&mut self, ck: uint) -> bool {\n-        self.align_to::<@fn()>();\n+        self.align_to::<(uint,uint)>();\n         if ! self.inner.visit_closure_ptr(ck) { return false; }\n-        self.bump_past::<@fn()>();\n+        self.bump_past::<(uint,uint)>();\n         true\n     }\n }"}, {"sha": "06c8aca4741645da3756fb932d864bc51d94732f", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -14,21 +14,21 @@\n #[allow(unused_variable)];\n \n // Should pass region checking.\n-fn ok(f: @fn(x: &uint)) {\n+fn ok(f: &fn(x: &uint)) {\n     // Here, g is a function that can accept a uint pointer with\n     // lifetime r, and f is a function that can accept a uint pointer\n     // with any lifetime.  The assignment g = f should be OK (i.e.,\n     // f's type should be a subtype of g's type), because f can be\n     // used in any context that expects g's type.  But this currently\n     // fails.\n-    let mut g: @fn<'r>(y: &'r uint) = |x| { };\n+    let mut g: &fn<'r>(y: &'r uint) = |x| { };\n     g = f;\n }\n \n // This version is the same as above, except that here, g's type is\n // inferred.\n-fn ok_inferred(f: @fn(x: &uint)) {\n-    let mut g: @fn<'r>(x: &'r uint) = |_| {};\n+fn ok_inferred(f: &fn(x: &uint)) {\n+    let mut g: &fn<'r>(x: &'r uint) = |_| {};\n     g = f;\n }\n "}, {"sha": "662121a09931fbc50658319a1f8701b9e99a9c1f", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3da971148a471c5766b544dc4ba50a15e5b96/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=90d3da971148a471c5766b544dc4ba50a15e5b96", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n     let _x = ~1;\n-    let lam_move: @fn() = || {};\n+    let lam_move: &fn() = || {};\n     lam_move();\n }"}]}