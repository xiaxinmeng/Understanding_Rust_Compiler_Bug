{"sha": "881bd865adcd331b8d22aa1da4d2853f0ad00f32", "node_id": "C_kwDOAAsO6NoAKDg4MWJkODY1YWRjZDMzMWI4ZDIyYWExZGE0ZDI4NTNmMGFkMDBmMzI", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-12-02T16:58:10Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-12-02T16:58:10Z"}, "message": "Rustdoc-Json: Don't include foreign traits", "tree": {"sha": "5def816fe177072f37fd45bff3bd702c3b3976ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5def816fe177072f37fd45bff3bd702c3b3976ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/881bd865adcd331b8d22aa1da4d2853f0ad00f32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/881bd865adcd331b8d22aa1da4d2853f0ad00f32", "html_url": "https://github.com/rust-lang/rust/commit/881bd865adcd331b8d22aa1da4d2853f0ad00f32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/881bd865adcd331b8d22aa1da4d2853f0ad00f32/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1b8eff4d309890fca6042c4883954049ea5599d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b8eff4d309890fca6042c4883954049ea5599d", "html_url": "https://github.com/rust-lang/rust/commit/c1b8eff4d309890fca6042c4883954049ea5599d"}], "stats": {"total": 64, "additions": 3, "deletions": 61}, "files": [{"sha": "1196f944faad2d26981b806023fe739cfaacc953", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/881bd865adcd331b8d22aa1da4d2853f0ad00f32/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881bd865adcd331b8d22aa1da4d2853f0ad00f32/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=881bd865adcd331b8d22aa1da4d2853f0ad00f32", "patch": "@@ -99,53 +99,6 @@ impl<'tcx> JsonRenderer<'tcx> {\n             })\n             .unwrap_or_default()\n     }\n-\n-    fn get_trait_items(&mut self) -> Vec<(types::Id, types::Item)> {\n-        debug!(\"Adding foreign trait items\");\n-        Rc::clone(&self.cache)\n-            .traits\n-            .iter()\n-            .filter_map(|(&id, trait_item)| {\n-                // only need to synthesize items for external traits\n-                if !id.is_local() {\n-                    for item in &trait_item.items {\n-                        trace!(\"Adding subitem to {id:?}: {:?}\", item.item_id);\n-                        self.item(item.clone()).unwrap();\n-                    }\n-                    let item_id = from_item_id(id.into(), self.tcx);\n-                    Some((\n-                        item_id.clone(),\n-                        types::Item {\n-                            id: item_id,\n-                            crate_id: id.krate.as_u32(),\n-                            name: self\n-                                .cache\n-                                .paths\n-                                .get(&id)\n-                                .unwrap_or_else(|| {\n-                                    self.cache\n-                                        .external_paths\n-                                        .get(&id)\n-                                        .expect(\"Trait should either be in local or external paths\")\n-                                })\n-                                .0\n-                                .last()\n-                                .map(|s| s.to_string()),\n-                            visibility: types::Visibility::Public,\n-                            inner: types::ItemEnum::Trait(trait_item.clone().into_tcx(self.tcx)),\n-                            span: None,\n-                            docs: Default::default(),\n-                            links: Default::default(),\n-                            attrs: Default::default(),\n-                            deprecation: Default::default(),\n-                        },\n-                    ))\n-                } else {\n-                    None\n-                }\n-            })\n-            .collect()\n-    }\n }\n \n impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n@@ -276,11 +229,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n         let e = ExternalCrate { crate_num: LOCAL_CRATE };\n \n-        // FIXME(adotinthevoid): Remove this, as it's not consistent with not\n-        // inlining foreign items.\n-        let foreign_trait_items = self.get_trait_items();\n-        let mut index = (*self.index).clone().into_inner();\n-        index.extend(foreign_trait_items);\n+        let index = (*self.index).clone().into_inner();\n \n         debug!(\"Constructing Output\");\n         // This needs to be the default HashMap for compatibility with the public interface for"}, {"sha": "55a51f739ab236c03c9e2ba0a6eb05835fa46d96", "filename": "src/test/rustdoc-json/traits/uses_extern_trait.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/881bd865adcd331b8d22aa1da4d2853f0ad00f32/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881bd865adcd331b8d22aa1da4d2853f0ad00f32/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs?ref=881bd865adcd331b8d22aa1da4d2853f0ad00f32", "patch": "@@ -1,12 +1,5 @@\n #![no_std]\n pub fn drop_default<T: core::default::Default>(_x: T) {}\n \n-// FIXME(adotinthevoid): Theses shouldn't be here\n-// @has \"$.index[*][?(@.name=='Debug')]\"\n-\n-// Debug may have several items. All we depend on here the that `fmt` is first. See\n-// https://github.com/rust-lang/rust/pull/104525#issuecomment-1331087852 for why we\n-// can't use [*].\n-\n-// @set Debug_fmt = \"$.index[*][?(@.name=='Debug')].inner.items[0]\"\n-// @has \"$.index[*][?(@.name=='fmt')].id\" $Debug_fmt\n+// @!has \"$.index[*][?(@.name=='Debug')]\"\n+// @!has \"$.index[*][?(@.name=='Default')]\""}]}