{"sha": "cc353aa17aabb315584a4af6fb86da6b1e254e4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMzUzYWExN2FhYmIzMTU1ODRhNGFmNmZiODZkYTZiMWUyNTRlNGQ=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-13T00:36:52Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-15T16:26:51Z"}, "message": "Removed old object-based chans.", "tree": {"sha": "01e897bfdebcb9df81591b1fe2815974ce54d7c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01e897bfdebcb9df81591b1fe2815974ce54d7c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc353aa17aabb315584a4af6fb86da6b1e254e4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc353aa17aabb315584a4af6fb86da6b1e254e4d", "html_url": "https://github.com/rust-lang/rust/commit/cc353aa17aabb315584a4af6fb86da6b1e254e4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc353aa17aabb315584a4af6fb86da6b1e254e4d/comments", "author": null, "committer": null, "parents": [{"sha": "7ad13392bde8b47415ecf4e685e499a2201ad278", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad13392bde8b47415ecf4e685e499a2201ad278", "html_url": "https://github.com/rust-lang/rust/commit/7ad13392bde8b47415ecf4e685e499a2201ad278"}], "stats": {"total": 215, "additions": 89, "deletions": 126}, "files": [{"sha": "b359c1d885876ba38ff8a706d0d7094904971829", "filename": "src/lib/comm.rs", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -4,7 +4,6 @@ import unsafe;\n import task;\n import task::task_id;\n \n-export chan_t;\n export _chan;\n export _port;\n \n@@ -36,44 +35,19 @@ native \"rust-intrinsic\" mod rusti {\n \n type port_id = int;\n \n-type chan_t[~T] = {\n+type _chan[~T] = {\n     task : task_id,\n     port : port_id\n };\n \n-resource chan_ptr(ch: *rustrt::rust_chan) {\n-    rustrt::drop_chan(ch);\n-}\n-\n resource port_ptr(po: *rustrt::rust_port) {\n     rustrt::drop_port(po);\n     rustrt::del_port(po);\n }\n \n-obj _chan[~T](raw_chan : @chan_ptr) {\n-    fn send(v : &T) {\n-        rustrt::chan_send(**raw_chan,\n-                          unsafe::reinterpret_cast(ptr::addr_of(v)));\n-    }\n-\n-    // Use this to get something we can send over a channel.\n-    fn unsafe_ptr() -> *u8 {\n-        rustrt::take_chan(**raw_chan);\n-        ret unsafe::reinterpret_cast(**raw_chan);\n-    }\n-}\n-\n-fn chan_from_unsafe_ptr[~T](ch : *u8) -> _chan[T] {\n-    _chan(@chan_ptr(unsafe::reinterpret_cast(ch)))\n-}\n-\n obj _port[~T](raw_port : @port_ptr) {\n-    fn mk_chan() -> _chan[T] {\n-        _chan(@chan_ptr(rustrt::new_chan(**raw_port)))\n-    }\n-\n     // FIXME: rename this to chan once chan is not a keyword.\n-    fn mk_chan2() -> chan_t[T] {\n+    fn mk_chan() -> _chan[T] {\n         {\n             task: task::get_task_id(),\n             port: rustrt::get_port_id(**raw_port)\n@@ -89,6 +63,6 @@ fn mk_port[~T]() -> _port[T] {\n     _port(@port_ptr(rustrt::new_port(sys::size_of[T]())))\n }\n \n-fn send[~T](ch : chan_t[T], data : -T) {\n+fn send[~T](ch : _chan[T], data : -T) {\n     rustrt::chan_id_send(ch.task, ch.port, data);\n }"}, {"sha": "029c18350d3ee02f7dfe8dd650840c4a52031fdb", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -10,11 +10,11 @@ import std::str;\n import std::comm;\n import std::task;\n \n-type ctx = comm::chan_t[int];\n+type ctx = comm::_chan[int];\n \n fn iotask(cx: ctx, ip: str) { assert (str::eq(ip, \"localhost\")); }\n \n fn main() {\n     let p = comm::mk_port[int]();\n-    task::_spawn(bind iotask(p.mk_chan2(), \"localhost\"));\n+    task::_spawn(bind iotask(p.mk_chan(), \"localhost\"));\n }"}, {"sha": "f4bbb1faaea47f4fe62baee1b3169ef32c9c3a0c", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -3,13 +3,13 @@\n use std;\n \n import std::comm;\n-import std::comm::chan_t;\n+import std::comm::_chan;\n import std::comm::send;\n import std::task;\n \n fn main() { test05(); }\n \n-fn test05_start(ch : chan_t[int]) {\n+fn test05_start(ch : _chan[int]) {\n     log_err ch;\n     send(ch, 10);\n     log_err \"sent 10\";\n@@ -21,7 +21,7 @@ fn test05_start(ch : chan_t[int]) {\n \n fn test05() {\n     let po = comm::mk_port[int]();\n-    let ch = po.mk_chan2();\n+    let ch = po.mk_chan();\n     task::_spawn(bind test05_start(ch));\n     let value = po.recv();\n     log_err value;"}, {"sha": "f5a3e268a85374a11e4304df416c05dd284ad609", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -1,9 +1,10 @@\n use std;\n \n-import std::task::join;\n+import std::task::_spawn;\n+import std::task::join_id;\n \n fn main() { test00(); }\n \n fn start() { log \"Started / Finished task.\"; }\n \n-fn test00() { let t: task = spawn start(); join(t); log \"Completing.\"; }\n+fn test00() { let t = _spawn(bind start()); join_id(t); log \"Completing.\"; }"}, {"sha": "82f896837cf6bc7857282f0581895e7dd511b520", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -1,16 +1,15 @@\n // xfail-stage3\n use std;\n import std::comm;\n+import std::task;\n \n-fn start(pcc: *u8) {\n-    let c = comm::chan_from_unsafe_ptr(pcc);\n+fn start(c: comm::_chan[comm::_chan[int]]) {\n     let p : comm::_port[int] = comm::mk_port();\n-    c.send(p.mk_chan().unsafe_ptr());\n+    comm::send(c, p.mk_chan());\n }\n \n fn main() {\n-    let p = comm::mk_port();\n-    let child = spawn start(p.mk_chan().unsafe_ptr());\n-    let pc = p.recv();\n-    let c : comm::_chan[int] = comm::chan_from_unsafe_ptr(pc);\n+    let p = comm::mk_port[comm::_chan[int]]();\n+    let child = task::_spawn(bind start(p.mk_chan()));\n+    let c = p.recv();\n }"}, {"sha": "64f11a41421e4e50d04a48f5387b91db3ffc7d3c", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -1,17 +1,17 @@\n use std;\n import std::task;\n import std::comm;\n+import std::comm::send;\n \n-fn start(pc: *u8, start: int, number_of_messages: int) {\n-    let c = comm::chan_from_unsafe_ptr(pc);\n+fn start(c: comm::_chan[int], start: int, number_of_messages: int) {\n     let i: int = 0;\n-    while i < number_of_messages { c.send(start + i); i += 1; }\n+    while i < number_of_messages { send(c, start + i); i += 1; }\n }\n \n fn main() {\n     log \"Check that we don't deadlock.\";\n     let p : comm::_port[int] = comm::mk_port();\n-    let a: task = spawn start(p.mk_chan().unsafe_ptr(), 0, 10);\n-    task::join(a);\n+    let a = task::_spawn(bind start(p.mk_chan(), 0, 10));\n+    task::join_id(a);\n     log \"Joined task\";\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9b43986e2edcfb5a7cd8ba3f9cba9eeffbb926f2", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -2,6 +2,7 @@\n \n use std;\n import std::comm;\n+import std::comm::send;\n import std::comm::mk_port;\n \n // Tests of ports and channels on various types\n@@ -11,7 +12,7 @@ fn test_rec() {\n     let po = comm::mk_port();\n     let ch = po.mk_chan();\n     let r0: r = {val0: 0, val1: 1u8, val2: '2'};\n-    ch.send(r0);\n+    send(ch, r0);\n     let r1: r;\n     r1 = po.recv();\n     assert (r1.val0 == 0);\n@@ -23,7 +24,7 @@ fn test_vec() {\n     let po = comm::mk_port();\n     let ch = po.mk_chan();\n     let v0: [int] = ~[0, 1, 2];\n-    ch.send(v0);\n+    send(ch, v0);\n     let v1: [int];\n     v1 = po.recv();\n     assert (v1.(0) == 0);\n@@ -37,7 +38,7 @@ fn test_str() {\n     let po = comm::mk_port();\n     let ch = po.mk_chan();\n     let s0: str = \"test\";\n-    ch.send(s0);\n+    send(ch, s0);\n     let s1: str;\n     s1 = po.recv();\n     assert (s1.(0) as u8 == 't' as u8);\n@@ -51,9 +52,9 @@ fn test_tag() {\n     tag t { tag1; tag2(int); tag3(int, u8, char); }\n     let po = comm::mk_port();\n     let ch = po.mk_chan();\n-    ch.send(tag1);\n-    ch.send(tag2(10));\n-    ch.send(tag3(10, 11u8, 'A'));\n+    send(ch, tag1);\n+    send(ch, tag2(10));\n+    send(ch, tag3(10, 11u8, 'A'));\n     // FIXME: Do port semantics really guarantee these happen in order?\n     let t1: t;\n     t1 = po.recv();\n@@ -69,13 +70,11 @@ fn test_chan() {\n     let ch = po.mk_chan();\n     let po0 = comm::mk_port();\n     let ch0 = po0.mk_chan();\n-    ch.send(ch0.unsafe_ptr());\n-    let pch1;\n-    pch1 = po.recv();\n-    let ch1 = comm::chan_from_unsafe_ptr(pch1);\n+    send(ch, ch0);\n+    let ch1 = po.recv();\n     // Does the transmitted channel still work?\n \n-    ch1.send(10);\n+    send(ch1, 10);\n     let i: int;\n     i = po0.recv();\n     assert (i == 10);"}, {"sha": "06826954fd98cde009df102d0ddd34c2b5cd47cb", "filename": "src/test/run-pass/task-comm-2.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -15,10 +15,13 @@ fn test00() {\n     let number_of_tasks: int = 8;\n \n     let i: int = 0;\n-    let tasks: [task] = ~[];\n-    while i < number_of_tasks { i = i + 1; tasks += ~[spawn start(i)]; }\n+    let tasks = [];\n+    while i < number_of_tasks {\n+        i = i + 1;\n+        tasks += [task::_spawn(bind start(i))];\n+    }\n \n-    for t: task  in tasks { task::join(t); }\n+    for t: task::task_id in tasks { task::join_id(t); }\n \n     log \"Joined all task.\";\n }"}, {"sha": "30342d877f0f157122be142b8752df3c5570a05e", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -8,7 +8,7 @@ fn test00() {\n     let r: int = 0;\n     let sum: int = 0;\n     let p = comm::mk_port();\n-    let c = p.mk_chan2();\n+    let c = p.mk_chan();\n     send(c, 1);\n     send(c, 2);\n     send(c, 3);"}, {"sha": "bb3a1e4dc70073fe0d1fdce3c6d1588ee28c7119", "filename": "src/test/run-pass/task-comm-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -10,7 +10,7 @@ fn test00() {\n     let c = p.mk_chan();\n     let number_of_messages: int = 1000;\n     let i: int = 0;\n-    while i < number_of_messages { c.send(i); i += 1; }\n+    while i < number_of_messages { comm::send(c, i+0); i += 1; }\n     i = 0;\n     while i < number_of_messages { r = p.recv(); sum += r; i += 1; }\n     assert (sum == number_of_messages * (number_of_messages - 1) / 2);"}, {"sha": "41dc6d203ad901c5b2157b5b7bfcad7e81705d08", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -1,5 +1,6 @@\n use std;\n import std::comm;\n+import std::comm::send;\n \n fn main() { test00(); }\n \n@@ -14,10 +15,10 @@ fn test00() {\n     let number_of_messages: int = 1000;\n     let i: int = 0;\n     while i < number_of_messages {\n-        c0.send(i);\n-        c1.send(i);\n-        c2.send(i);\n-        c3.send(i);\n+        send(c0, i+0);\n+        send(c1, i+0);\n+        send(c2, i+0);\n+        send(c3, i+0);\n         i += 1;\n     }\n     i = 0;"}, {"sha": "42c4e05c06001e74bf812d14778737edb9275915", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -4,10 +4,9 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(pc: *u8, start: int, number_of_messages: int) {\n-    let c = comm::chan_from_unsafe_ptr(pc);\n+fn test00_start(c: comm::_chan[int], start: int, number_of_messages: int) {\n     let i: int = 0;\n-    while i < number_of_messages { c.send(start + i); i += 1; }\n+    while i < number_of_messages { comm::send(c, start + i); i += 1; }\n }\n \n fn test00() {\n@@ -16,18 +15,18 @@ fn test00() {\n     let p = comm::mk_port();\n     let number_of_messages: int = 10;\n \n-    let t0: task =\n-        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 0,\n-                           number_of_messages);\n-    let t1: task =\n-        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 1,\n-                           number_of_messages);\n-    let t2: task =\n-        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 2,\n-                           number_of_messages);\n-    let t3: task =\n-        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 3,\n-                           number_of_messages);\n+    let t0 =\n+        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 0,\n+                                       number_of_messages));\n+    let t1 =\n+        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 1,\n+                                       number_of_messages));\n+    let t2 =\n+        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 2,\n+                                       number_of_messages));\n+    let t3 =\n+        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 3,\n+                                       number_of_messages));\n \n     let i: int = 0;\n     while i < number_of_messages {\n@@ -42,10 +41,10 @@ fn test00() {\n         i += 1;\n     }\n \n-    task::join(t0);\n-    task::join(t1);\n-    task::join(t2);\n-    task::join(t3);\n+    task::join_id(t0);\n+    task::join_id(t1);\n+    task::join_id(t2);\n+    task::join_id(t3);\n \n     assert (sum == number_of_messages * 4 * (number_of_messages * 4 - 1) / 2);\n }\n\\ No newline at end of file"}, {"sha": "8917f72157d0a7e67c9b59cfc1ea94fef55331ee", "filename": "src/test/run-pass/task-comm-8.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -4,10 +4,9 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(pc: *u8, start: int, number_of_messages: int) {\n-    let c = comm::chan_from_unsafe_ptr(pc);\n+fn test00_start(c : comm::_chan[int], start: int, number_of_messages: int) {\n     let i: int = 0;\n-    while i < number_of_messages { c.send(start + i); i += 1; }\n+    while i < number_of_messages { comm::send(c, start + i); i += 1; }\n }\n \n fn test00() {\n@@ -16,18 +15,18 @@ fn test00() {\n     let p = comm::mk_port();\n     let number_of_messages: int = 10;\n \n-    let t0: task =\n-        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 0,\n-                           number_of_messages);\n-    let t1: task =\n-        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 1,\n-                           number_of_messages);\n-    let t2: task =\n-        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 2,\n-                           number_of_messages);\n-    let t3: task =\n-        spawn test00_start(p.mk_chan().unsafe_ptr(), number_of_messages * 3,\n-                           number_of_messages);\n+    let t0 =\n+        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 0,\n+                                       number_of_messages));\n+    let t1 =\n+        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 1,\n+                                       number_of_messages));\n+    let t2 =\n+        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 2,\n+                                       number_of_messages));\n+    let t3 =\n+        task::_spawn(bind test00_start(p.mk_chan(), number_of_messages * 3,\n+                                       number_of_messages));\n \n     let i: int = 0;\n     while i < number_of_messages {\n@@ -42,10 +41,10 @@ fn test00() {\n         i += 1;\n     }\n \n-    task::join(t0);\n-    task::join(t1);\n-    task::join(t2);\n-    task::join(t3);\n+    task::join_id(t0);\n+    task::join_id(t1);\n+    task::join_id(t2);\n+    task::join_id(t3);\n \n     assert (sum == number_of_messages * 4 * (number_of_messages * 4 - 1) / 2);\n }\n\\ No newline at end of file"}, {"sha": "27ac300c1178c4e21140eec7021e6e4cb91ffc88", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -4,10 +4,9 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn test00_start(pc: *u8, number_of_messages: int) {\n-    let c = comm::chan_from_unsafe_ptr(pc);\n+fn test00_start(c: comm::_chan[int], number_of_messages: int) {\n     let i: int = 0;\n-    while i < number_of_messages { c.send(i); i += 1; }\n+    while i < number_of_messages { comm::send(c, i+0); i += 1; }\n }\n \n fn test00() {\n@@ -16,13 +15,13 @@ fn test00() {\n     let p = comm::mk_port();\n     let number_of_messages: int = 10;\n \n-    let t0: task = spawn test00_start(p.mk_chan().unsafe_ptr(),\n-                                      number_of_messages);\n+    let t0 = task::_spawn(bind test00_start(p.mk_chan(),\n+                                            number_of_messages));\n \n     let i: int = 0;\n     while i < number_of_messages { r = p.recv(); sum += r; log r; i += 1; }\n \n-    task::join(t0);\n+    task::join_id(t0);\n \n     assert (sum == number_of_messages * (number_of_messages - 1) / 2);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8478e75a5ad50e64be93050d8d2a49451ea486ce", "filename": "src/test/stdtest/comm.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Fstdtest%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc353aa17aabb315584a4af6fb86da6b1e254e4d/src%2Ftest%2Fstdtest%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fcomm.rs?ref=cc353aa17aabb315584a4af6fb86da6b1e254e4d", "patch": "@@ -9,19 +9,8 @@ fn create_port_and_chan() {\n \n #[test]\n fn send_recv() {\n-    let p = comm::mk_port();\n-    let c = p.mk_chan();\n-\n-    c.send(42);\n-    let v = p.recv();\n-    log_err v;\n-    assert(42 == v);\n-}\n-\n-#[test]\n-fn send_recv2() {\n     let p = comm::mk_port[int]();\n-    let c = p.mk_chan2();\n+    let c = p.mk_chan();\n \n     comm::send(c, 42);\n     let v = p.recv();"}]}