{"sha": "d727f9910729625039defffd4058b907ca984bb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MjdmOTkxMDcyOTYyNTAzOWRlZmZmZDQwNThiOTA3Y2E5ODRiYjk=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2015-01-10T09:14:32Z"}, "committer": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-01-19T13:22:16Z"}, "message": "lower FnMut to FnOnce since json-hack is no longer required\n\nConflicts:\n\tsrc/libserialize/serialize.rs", "tree": {"sha": "a16e68f708a619cbda3e071dc81d5587c415ff5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a16e68f708a619cbda3e071dc81d5587c415ff5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d727f9910729625039defffd4058b907ca984bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d727f9910729625039defffd4058b907ca984bb9", "html_url": "https://github.com/rust-lang/rust/commit/d727f9910729625039defffd4058b907ca984bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d727f9910729625039defffd4058b907ca984bb9/comments", "author": null, "committer": null, "parents": [{"sha": "f015a3b871a7eade289842a868f6de580740d89c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f015a3b871a7eade289842a868f6de580740d89c", "html_url": "https://github.com/rust-lang/rust/commit/f015a3b871a7eade289842a868f6de580740d89c"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "25279796c03c03d2ceb63425b9cc9c6e551d075a", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d727f9910729625039defffd4058b907ca984bb9/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d727f9910729625039defffd4058b907ca984bb9/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=d727f9910729625039defffd4058b907ca984bb9", "patch": "@@ -1059,8 +1059,8 @@ pub mod writer {\n             self.end_tag()\n         }\n \n-        fn emit_map_elt_key<F>(&mut self, _idx: uint, mut f: F) -> EncodeResult where\n-            F: FnMut(&mut Encoder<'a, W>) -> EncodeResult,\n+        fn emit_map_elt_key<F>(&mut self, _idx: uint, f: F) -> EncodeResult where\n+            F: FnOnce(&mut Encoder<'a, W>) -> EncodeResult,\n         {\n \n             try!(self.start_tag(EsMapKey as uint));"}, {"sha": "8412da3b4c557610141e2a02d97207698560389a", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d727f9910729625039defffd4058b907ca984bb9/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d727f9910729625039defffd4058b907ca984bb9/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=d727f9910729625039defffd4058b907ca984bb9", "patch": "@@ -668,8 +668,8 @@ impl<'a> ::Encoder for Encoder<'a> {\n         Ok(())\n     }\n \n-    fn emit_map_elt_key<F>(&mut self, idx: uint, mut f: F) -> EncodeResult where\n-        F: FnMut(&mut Encoder<'a>) -> EncodeResult,\n+    fn emit_map_elt_key<F>(&mut self, idx: uint, f: F) -> EncodeResult where\n+        F: FnOnce(&mut Encoder<'a>) -> EncodeResult,\n     {\n         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         if idx != 0 { try!(write!(self.writer, \",\")) }\n@@ -961,8 +961,8 @@ impl<'a> ::Encoder for PrettyEncoder<'a> {\n         Ok(())\n     }\n \n-    fn emit_map_elt_key<F>(&mut self, idx: uint, mut f: F) -> EncodeResult where\n-        F: FnMut(&mut PrettyEncoder<'a>) -> EncodeResult,\n+    fn emit_map_elt_key<F>(&mut self, idx: uint, f: F) -> EncodeResult where\n+        F: FnOnce(&mut PrettyEncoder<'a>) -> EncodeResult,\n     {\n         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         if idx == 0 {"}, {"sha": "e93d71a9dff4a1ab81fb3986b34aab207c0dc057", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d727f9910729625039defffd4058b907ca984bb9/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d727f9910729625039defffd4058b907ca984bb9/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=d727f9910729625039defffd4058b907ca984bb9", "patch": "@@ -98,7 +98,7 @@ pub trait Encoder {\n     fn emit_map<F>(&mut self, len: uint, f: F) -> Result<(), Self::Error>\n         where F: FnOnce(&mut Self) -> Result<(), Self::Error>;\n     fn emit_map_elt_key<F>(&mut self, idx: uint, f: F) -> Result<(), Self::Error>\n-        where F: FnMut(&mut Self) -> Result<(), Self::Error>;\n+        where F: FnOnce(&mut Self) -> Result<(), Self::Error>;\n     fn emit_map_elt_val<F>(&mut self, idx: uint, f: F) -> Result<(), Self::Error>\n         where F: FnOnce(&mut Self) -> Result<(), Self::Error>;\n }"}]}