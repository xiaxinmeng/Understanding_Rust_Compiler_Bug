{"sha": "8b6592ef1a29360716e49545cff42d7103366b02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNjU5MmVmMWEyOTM2MDcxNmU0OTU0NWNmZjQyZDcxMDMzNjZiMDI=", "commit": {"author": {"name": "Davis Silverman", "email": "sinistersnare@gmail.com", "date": "2014-03-16T20:46:02Z"}, "committer": {"name": "Davis Silverman", "email": "sinistersnare@gmail.com", "date": "2014-03-16T20:46:02Z"}, "message": "Asked if missing (), then asks about an anonymous function. Also added test.", "tree": {"sha": "04cdc113c38719d08d630aa4a4dc2632af36e17d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04cdc113c38719d08d630aa4a4dc2632af36e17d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b6592ef1a29360716e49545cff42d7103366b02", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6592ef1a29360716e49545cff42d7103366b02", "html_url": "https://github.com/rust-lang/rust/commit/8b6592ef1a29360716e49545cff42d7103366b02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b6592ef1a29360716e49545cff42d7103366b02/comments", "author": {"login": "sinistersnare", "id": 2153833, "node_id": "MDQ6VXNlcjIxNTM4MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2153833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinistersnare", "html_url": "https://github.com/sinistersnare", "followers_url": "https://api.github.com/users/sinistersnare/followers", "following_url": "https://api.github.com/users/sinistersnare/following{/other_user}", "gists_url": "https://api.github.com/users/sinistersnare/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinistersnare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinistersnare/subscriptions", "organizations_url": "https://api.github.com/users/sinistersnare/orgs", "repos_url": "https://api.github.com/users/sinistersnare/repos", "events_url": "https://api.github.com/users/sinistersnare/events{/privacy}", "received_events_url": "https://api.github.com/users/sinistersnare/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinistersnare", "id": 2153833, "node_id": "MDQ6VXNlcjIxNTM4MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2153833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinistersnare", "html_url": "https://github.com/sinistersnare", "followers_url": "https://api.github.com/users/sinistersnare/followers", "following_url": "https://api.github.com/users/sinistersnare/following{/other_user}", "gists_url": "https://api.github.com/users/sinistersnare/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinistersnare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinistersnare/subscriptions", "organizations_url": "https://api.github.com/users/sinistersnare/orgs", "repos_url": "https://api.github.com/users/sinistersnare/repos", "events_url": "https://api.github.com/users/sinistersnare/events{/privacy}", "received_events_url": "https://api.github.com/users/sinistersnare/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4d324334cb48198c27d782002d75eba14a6abde", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d324334cb48198c27d782002d75eba14a6abde", "html_url": "https://github.com/rust-lang/rust/commit/b4d324334cb48198c27d782002d75eba14a6abde"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "38a9119604b25f50636a6fa51deeb44878abfab3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b6592ef1a29360716e49545cff42d7103366b02/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6592ef1a29360716e49545cff42d7103366b02/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=8b6592ef1a29360716e49545cff42d7103366b02", "patch": "@@ -2317,11 +2317,13 @@ fn check_expr_with_unifier(fcx: @FnCtxt,\n                 fcx.type_error_message(\n                     expr.span,\n                     |actual| {\n-                        format!(\"attempted to take value of method `{}` on type `{}` \\\n-                                 (try writing an anonymous function)\",\n+                        format!(\"attempted to take value of method `{}` on type `{}`\",\n                                 token::get_name(field), actual)\n                     },\n                     expr_t, None);\n+\n+                tcx.sess.span_note(expr.span,\n+                    \"maybe a missing `()` to call it? If not, try an anonymous function.\");\n             }\n \n             None => {"}, {"sha": "55a178af961acf81b80e7609354432131e8a283c", "filename": "src/test/compile-fail/method-missing-call.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b6592ef1a29360716e49545cff42d7103366b02/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6592ef1a29360716e49545cff42d7103366b02/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs?ref=8b6592ef1a29360716e49545cff42d7103366b02", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests to make sure that parens are needed for method calls without arguments.\n+// outputs text to make sure either an anonymous function is provided or\n+// open-close '()' parens are given\n+\n+\n+struct Point {\n+    x: int,\n+    y: int\n+}\n+impl Point {\n+    fn new() -> Point {\n+        Point{x:0, y:0}\n+    }\n+    fn get_x(&self) -> int {\n+        self.x\n+    }\n+}\n+\n+fn main() {\n+    let point: Point = Point::new();\n+    let px: int =  point.get_x;//~ ERROR attempted to take value of method `get_x` on type `Point`\n+    //~^ NOTE maybe a missing `()` to call it? If not, try an anonymous function.\n+}\n+"}]}