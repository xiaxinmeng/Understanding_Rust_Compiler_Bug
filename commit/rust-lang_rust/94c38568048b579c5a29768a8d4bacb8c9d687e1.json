{"sha": "94c38568048b579c5a29768a8d4bacb8c9d687e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzM4NTY4MDQ4YjU3OWM1YTI5NzY4YThkNGJhY2I4YzlkNjg3ZTE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-08-09T15:00:14Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-08-09T17:50:12Z"}, "message": "A few cleanups for rustc_data_structures", "tree": {"sha": "21dfb5a800bbab52f16a2be4d23da0e5aac697b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21dfb5a800bbab52f16a2be4d23da0e5aac697b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c38568048b579c5a29768a8d4bacb8c9d687e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c38568048b579c5a29768a8d4bacb8c9d687e1", "html_url": "https://github.com/rust-lang/rust/commit/94c38568048b579c5a29768a8d4bacb8c9d687e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c38568048b579c5a29768a8d4bacb8c9d687e1/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "160187937d679d78bfc36aa39c3cb36cc5024012", "url": "https://api.github.com/repos/rust-lang/rust/commits/160187937d679d78bfc36aa39c3cb36cc5024012", "html_url": "https://github.com/rust-lang/rust/commit/160187937d679d78bfc36aa39c3cb36cc5024012"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "d3b47daa5b4b89aa7569b7167736bfe924270fb7", "filename": "src/librustc_data_structures/base_n.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fbase_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fbase_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbase_n.rs?ref=94c38568048b579c5a29768a8d4bacb8c9d687e1", "patch": "@@ -17,7 +17,7 @@ pub const MAX_BASE: usize = 64;\n pub const ALPHANUMERIC_ONLY: usize = 62;\n pub const CASE_INSENSITIVE: usize = 36;\n \n-const BASE_64: &'static [u8; MAX_BASE as usize] =\n+const BASE_64: &[u8; MAX_BASE as usize] =\n     b\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@$\";\n \n #[inline]\n@@ -37,7 +37,8 @@ pub fn push_str(mut n: u128, base: usize, output: &mut String) {\n             break;\n         }\n     }\n-    &mut s[0..index].reverse();\n+    s[0..index].reverse();\n+\n     output.push_str(str::from_utf8(&s[0..index]).unwrap());\n }\n "}, {"sha": "a63033c436528bc866e32f5877f17f86be911a32", "filename": "src/librustc_data_structures/bitslice.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fbitslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fbitslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitslice.rs?ref=94c38568048b579c5a29768a8d4bacb8c9d687e1", "patch": "@@ -75,7 +75,7 @@ fn bit_lookup(bit: usize) -> BitLookup {\n     let word = bit / word_bits;\n     let bit_in_word = bit % word_bits;\n     let bit_mask = 1 << bit_in_word;\n-    BitLookup { word: word, bit_in_word: bit_in_word, bit_mask: bit_mask }\n+    BitLookup { word, bit_in_word, bit_mask }\n }\n \n pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n@@ -105,7 +105,8 @@ pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n         sep = '|';\n     }\n     result.push(']');\n-    return result\n+\n+    result\n }\n \n #[inline]"}, {"sha": "49ab3e58812dcfb703ea926798cc610a7ed57024", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=94c38568048b579c5a29768a8d4bacb8c9d687e1", "patch": "@@ -196,7 +196,8 @@ impl<'a, C: Idx> Iterator for BitIter<'a, C> {\n         self.current >>= offset;\n         self.current >>= 1; // shift otherwise overflows for 0b1000_0000_\u2026_0000\n         self.idx += offset + 1;\n-        return Some(C::new(self.idx - 1));\n+\n+        Some(C::new(self.idx - 1))\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n@@ -299,7 +300,7 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n             let v1 = vector[write_index];\n             let v2 = v1 | vector[read_index];\n             vector[write_index] = v2;\n-            changed = changed | (v1 != v2);\n+            changed |= v1 != v2;\n         }\n         changed\n     }"}, {"sha": "3f248dadb66c14b02a556996ffacc77abb4a29bd", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=94c38568048b579c5a29768a8d4bacb8c9d687e1", "patch": "@@ -254,8 +254,8 @@ mod imp {\n     type ULONG_PTR = usize;\n \n     type LPOVERLAPPED = *mut OVERLAPPED;\n-    const LOCKFILE_EXCLUSIVE_LOCK: DWORD = 0x00000002;\n-    const LOCKFILE_FAIL_IMMEDIATELY: DWORD = 0x00000001;\n+    const LOCKFILE_EXCLUSIVE_LOCK: DWORD = 0x0000_0002;\n+    const LOCKFILE_FAIL_IMMEDIATELY: DWORD = 0x0000_0001;\n \n     const FILE_SHARE_DELETE: DWORD = 0x4;\n     const FILE_SHARE_READ: DWORD = 0x1;"}, {"sha": "e54147cbe7c8793a9e4d36925f14c5d5c296d4e7", "filename": "src/librustc_data_structures/graph/dominators/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs?ref=94c38568048b579c5a29768a8d4bacb8c9d687e1", "patch": "@@ -107,7 +107,8 @@ fn intersect<Node: Idx>(\n             node2 = immediate_dominators[node2].unwrap();\n         }\n     }\n-    return node1;\n+\n+    node1\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "baac75658686545e0eddd4f3ee84b7163b4fc7eb", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=94c38568048b579c5a29768a8d4bacb8c9d687e1", "patch": "@@ -90,7 +90,7 @@ pub const INCOMING: Direction = Direction { repr: 1 };\n \n impl NodeIndex {\n     /// Returns unique id (unique with respect to the graph holding associated node).\n-    pub fn node_id(&self) -> usize {\n+    pub fn node_id(self) -> usize {\n         self.0\n     }\n }\n@@ -187,7 +187,7 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         self.nodes[source.0].first_edge[OUTGOING.repr] = idx;\n         self.nodes[target.0].first_edge[INCOMING.repr] = idx;\n \n-        return idx;\n+        idx\n     }\n \n     pub fn edge(&self, idx: EdgeIndex) -> &Edge<E> {\n@@ -261,8 +261,8 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         DepthFirstTraversal::with_start_node(self, start, direction)\n     }\n \n-    pub fn nodes_in_postorder<'a>(\n-        &'a self,\n+    pub fn nodes_in_postorder(\n+        &self,\n         direction: Direction,\n         entry_node: NodeIndex,\n     ) -> Vec<NodeIndex> {"}, {"sha": "340fe057096d8eb2fbc1ddebcafac6c2f03aca1d", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=94c38568048b579c5a29768a8d4bacb8c9d687e1", "patch": "@@ -65,6 +65,7 @@ impl<T: Idx> rustc_serialize::Decodable for IdxSetBuf<T> {\n ///\n /// In other words, `T` is the type used to index into the bitslice\n /// this type uses to represent the set of object it holds.\n+#[repr(transparent)]\n pub struct IdxSet<T: Idx> {\n     _pd: PhantomData<fn(&T)>,\n     bits: [Word],"}, {"sha": "7ef88852685d5bd33a836f193e20bad0b6834c2b", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=94c38568048b579c5a29768a8d4bacb8c9d687e1", "patch": "@@ -573,7 +573,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         }\n \n         let mut kill_list = vec![];\n-        for (predicate, index) in self.waiting_cache.iter_mut() {\n+        for (predicate, index) in &mut self.waiting_cache {\n             let new_index = node_rewrites[index.get()];\n             if new_index >= nodes_len {\n                 kill_list.push(predicate.clone());"}, {"sha": "e1bfdf35b274e0d31ff7be040948e0319cf9d0bb", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=94c38568048b579c5a29768a8d4bacb8c9d687e1", "patch": "@@ -107,7 +107,8 @@ impl<T: PartialEq> Element<T> {\n         };\n \n         self.next = new_next;\n-        return true\n+\n+        true\n     }\n \n     fn len(&self) -> usize {"}, {"sha": "18a1e9129b34284bd6949794742d7b83bedba6ef", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c38568048b579c5a29768a8d4bacb8c9d687e1/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=94c38568048b579c5a29768a8d4bacb8c9d687e1", "patch": "@@ -77,7 +77,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n             ..\n         } = self;\n \n-        map.entry(a.clone())\n+        *map.entry(a.clone())\n            .or_insert_with(|| {\n                elements.push(a);\n \n@@ -86,7 +86,6 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n \n                Index(elements.len() - 1)\n            })\n-           .clone()\n     }\n \n     /// Applies the (partial) function to each edge and returns a new\n@@ -98,14 +97,12 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n     {\n         let mut result = TransitiveRelation::new();\n         for edge in &self.edges {\n-            let r = f(&self.elements[edge.source.0]).and_then(|source| {\n+            f(&self.elements[edge.source.0]).and_then(|source| {\n                 f(&self.elements[edge.target.0]).and_then(|target| {\n-                    Some(result.add(source, target))\n+                    result.add(source, target);\n+                    Some(())\n                 })\n-            });\n-            if r.is_none() {\n-                return None;\n-            }\n+            })?;\n         }\n         Some(result)\n     }\n@@ -372,7 +369,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n         let mut changed = true;\n         while changed {\n             changed = false;\n-            for edge in self.edges.iter() {\n+            for edge in &self.edges {\n                 // add an edge from S -> T\n                 changed |= matrix.add(edge.source.0, edge.target.0);\n "}]}