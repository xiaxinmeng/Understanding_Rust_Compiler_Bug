{"sha": "56347a173a49ef1232ced3974ccbf8e16c5da78c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MzQ3YTE3M2E0OWVmMTIzMmNlZDM5NzRjY2JmOGUxNmM1ZGE3OGM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-29T00:02:26Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-29T00:18:51Z"}, "message": "Point to disambiguator instead of whole link\n\nAnd, now that we do that, we can remove the explanatory note since the\nerror span should make it clear what the disambiguator is.", "tree": {"sha": "179a601471475414bd8e23ba9287322a6aba1a31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/179a601471475414bd8e23ba9287322a6aba1a31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56347a173a49ef1232ced3974ccbf8e16c5da78c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56347a173a49ef1232ced3974ccbf8e16c5da78c", "html_url": "https://github.com/rust-lang/rust/commit/56347a173a49ef1232ced3974ccbf8e16c5da78c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56347a173a49ef1232ced3974ccbf8e16c5da78c/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4572e7f903a3d6bd5b401e886c9e7e2ef97998f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0", "html_url": "https://github.com/rust-lang/rust/commit/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "c44514ed3cb83bc2dd4f37215bec1d2b9d721bc7", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56347a173a49ef1232ced3974ccbf8e16c5da78c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56347a173a49ef1232ced3974ccbf8e16c5da78c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=56347a173a49ef1232ced3974ccbf8e16c5da78c", "patch": "@@ -1162,6 +1162,7 @@ crate fn plain_text_summary(md: &str) -> String {\n     s\n }\n \n+#[derive(Debug)]\n crate struct MarkdownLink {\n     pub kind: LinkType,\n     pub link: String,"}, {"sha": "417637d238423f2c8510226a2444189221a460f3", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/56347a173a49ef1232ced3974ccbf8e16c5da78c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56347a173a49ef1232ced3974ccbf8e16c5da78c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=56347a173a49ef1232ced3974ccbf8e16c5da78c", "patch": "@@ -950,6 +950,7 @@ impl LinkCollector<'_, '_> {\n         }\n \n         let link = ori_link.link.replace(\"`\", \"\");\n+        let no_backticks_range = range_between_backticks(&ori_link);\n         let parts = link.split('#').collect::<Vec<_>>();\n         let (link, extra_fragment) = if parts.len() > 2 {\n             // A valid link can't have multiple #'s\n@@ -976,8 +977,10 @@ impl LinkCollector<'_, '_> {\n         let (mut path_str, disambiguator) = match Disambiguator::from_str(&link) {\n             Ok(Some((d, path))) => (path.trim(), Some(d)),\n             Ok(None) => (link.trim(), None),\n-            Err(err_msg) => {\n-                disambiguator_error(self.cx, &item, dox, ori_link.range, &err_msg);\n+            Err((err_msg, relative_range)) => {\n+                let disambiguator_range = (no_backticks_range.start + relative_range.start)\n+                    ..(no_backticks_range.start + relative_range.end);\n+                disambiguator_error(self.cx, &item, dox, disambiguator_range, &err_msg);\n                 return None;\n             }\n         };\n@@ -1491,6 +1494,27 @@ impl LinkCollector<'_, '_> {\n     }\n }\n \n+/// Get the section of a link between the backticks,\n+/// or the whole link if there aren't any backticks.\n+///\n+/// For example:\n+///\n+/// ```text\n+/// [`Foo`]\n+///   ^^^\n+/// ```\n+fn range_between_backticks(ori_link: &MarkdownLink) -> Range<usize> {\n+    let after_first_backtick_group = ori_link.link.bytes().position(|b| b != b'`').unwrap_or(0);\n+    let before_second_backtick_group = ori_link\n+        .link\n+        .bytes()\n+        .skip(after_first_backtick_group)\n+        .position(|b| b == b'`')\n+        .unwrap_or(ori_link.link.len());\n+    (ori_link.range.start + after_first_backtick_group)\n+        ..(ori_link.range.start + before_second_backtick_group)\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n /// Disambiguators for a link.\n enum Disambiguator {\n@@ -1522,7 +1546,7 @@ impl Disambiguator {\n     /// This returns `Ok(Some(...))` if a disambiguator was found,\n     /// `Ok(None)` if no disambiguator was found, or `Err(...)`\n     /// if there was a problem with the disambiguator.\n-    fn from_str(link: &str) -> Result<Option<(Self, &str)>, String> {\n+    fn from_str(link: &str) -> Result<Option<(Self, &str)>, (String, Range<usize>)> {\n         use Disambiguator::{Kind, Namespace as NS, Primitive};\n \n         let find_suffix = || {\n@@ -1558,7 +1582,7 @@ impl Disambiguator {\n                 \"value\" => NS(Namespace::ValueNS),\n                 \"macro\" => NS(Namespace::MacroNS),\n                 \"prim\" | \"primitive\" => Primitive,\n-                _ => return Err(format!(\"unknown disambiguator `{}`\", prefix)),\n+                _ => return Err((format!(\"unknown disambiguator `{}`\", prefix), 0..idx)),\n             };\n             Ok(Some((d, &rest[1..])))\n         } else {\n@@ -1994,12 +2018,7 @@ fn disambiguator_error(\n     link_range: Range<usize>,\n     msg: &str,\n ) {\n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, item, dox, &link_range, |diag, _sp| {\n-        diag.note(\n-            \"the disambiguator is the part of the link before the `@` sign, \\\n-             or a suffix such as `()` for functions\",\n-        );\n-    });\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, item, dox, &link_range, |_diag, _sp| {});\n }\n \n /// Report an ambiguity error, where there were multiple possible resolutions."}, {"sha": "2904603dfc3121118d7e58e799ba9fd86144e58d", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56347a173a49ef1232ced3974ccbf8e16c5da78c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56347a173a49ef1232ced3974ccbf8e16c5da78c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr?ref=56347a173a49ef1232ced3974ccbf8e16c5da78c", "patch": "@@ -2,39 +2,32 @@ error: unknown disambiguator `foo`\n   --> $DIR/unknown-disambiguator.rs:1:17\n    |\n LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n-   |                 ^^^^^^^^^^\n+   |                 ^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unknown-disambiguator.rs:8:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n-   = note: the disambiguator is the part of the link before the `@` sign, or a suffix such as `()` for functions\n \n error: unknown disambiguator `bar`\n-  --> $DIR/unknown-disambiguator.rs:1:34\n+  --> $DIR/unknown-disambiguator.rs:1:35\n    |\n LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n-   |                                  ^^^^^^^^^^^^^^^\n-   |\n-   = note: the disambiguator is the part of the link before the `@` sign, or a suffix such as `()` for functions\n+   |                                   ^^^\n \n error: unknown disambiguator ``\n   --> $DIR/unknown-disambiguator.rs:4:31\n    |\n LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n-   |                               ^^^^^^^^^^\n-   |\n-   = note: the disambiguator is the part of the link before the `@` sign, or a suffix such as `()` for functions\n+   |                               ^\n \n error: unknown disambiguator ``\n   --> $DIR/unknown-disambiguator.rs:4:57\n    |\n LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n-   |                                                         ^^^^^^^^^^^\n-   |\n-   = note: the disambiguator is the part of the link before the `@` sign, or a suffix such as `()` for functions\n+   |                                                         ^\n \n error: aborting due to 4 previous errors\n "}]}