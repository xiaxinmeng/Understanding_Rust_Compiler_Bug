{"sha": "16a979c106caddf665f74122d807086129e93bed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YTk3OWMxMDZjYWRkZjY2NWY3NDEyMmQ4MDcwODYxMjllOTNiZWQ=", "commit": {"author": {"name": "John Firebaugh", "email": "john.firebaugh@gmail.com", "date": "2016-10-02T23:29:20Z"}, "committer": {"name": "John Firebaugh", "email": "john.firebaugh@gmail.com", "date": "2016-10-09T17:54:56Z"}, "message": "Remove TypeOrigin::RangeExpression\n\nThis variant became unused in #30884.", "tree": {"sha": "78425ed77e3699138719450b1b5f12216eb0aca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78425ed77e3699138719450b1b5f12216eb0aca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16a979c106caddf665f74122d807086129e93bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16a979c106caddf665f74122d807086129e93bed", "html_url": "https://github.com/rust-lang/rust/commit/16a979c106caddf665f74122d807086129e93bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16a979c106caddf665f74122d807086129e93bed/comments", "author": {"login": "jfirebaugh", "id": 98601, "node_id": "MDQ6VXNlcjk4NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/98601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfirebaugh", "html_url": "https://github.com/jfirebaugh", "followers_url": "https://api.github.com/users/jfirebaugh/followers", "following_url": "https://api.github.com/users/jfirebaugh/following{/other_user}", "gists_url": "https://api.github.com/users/jfirebaugh/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfirebaugh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfirebaugh/subscriptions", "organizations_url": "https://api.github.com/users/jfirebaugh/orgs", "repos_url": "https://api.github.com/users/jfirebaugh/repos", "events_url": "https://api.github.com/users/jfirebaugh/events{/privacy}", "received_events_url": "https://api.github.com/users/jfirebaugh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jfirebaugh", "id": 98601, "node_id": "MDQ6VXNlcjk4NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/98601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfirebaugh", "html_url": "https://github.com/jfirebaugh", "followers_url": "https://api.github.com/users/jfirebaugh/followers", "following_url": "https://api.github.com/users/jfirebaugh/following{/other_user}", "gists_url": "https://api.github.com/users/jfirebaugh/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfirebaugh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfirebaugh/subscriptions", "organizations_url": "https://api.github.com/users/jfirebaugh/orgs", "repos_url": "https://api.github.com/users/jfirebaugh/repos", "events_url": "https://api.github.com/users/jfirebaugh/events{/privacy}", "received_events_url": "https://api.github.com/users/jfirebaugh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d4d0da7af77858f268a66ff144134945c880560", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4d0da7af77858f268a66ff144134945c880560", "html_url": "https://github.com/rust-lang/rust/commit/9d4d0da7af77858f268a66ff144134945c880560"}], "stats": {"total": 6, "additions": 0, "deletions": 6}, "files": [{"sha": "f061e0a6d15dbd7ed26854b5b2b55cf0da46aba2", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16a979c106caddf665f74122d807086129e93bed/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a979c106caddf665f74122d807086129e93bed/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=16a979c106caddf665f74122d807086129e93bed", "patch": "@@ -199,9 +199,6 @@ pub enum TypeOrigin {\n     // Computing common supertype of an if expression with no else counter-part\n     IfExpressionWithNoElse(Span),\n \n-    // Computing common supertype in a range expression\n-    RangeExpression(Span),\n-\n     // `where a == b`\n     EquatePredicate(Span),\n \n@@ -231,7 +228,6 @@ impl TypeOrigin {\n             },\n             &TypeOrigin::IfExpression(_) => \"if and else have incompatible types\",\n             &TypeOrigin::IfExpressionWithNoElse(_) => \"if may be missing an else clause\",\n-            &TypeOrigin::RangeExpression(_) => \"start and end of range have incompatible types\",\n             &TypeOrigin::EquatePredicate(_) => \"equality predicate not satisfied\",\n             &TypeOrigin::MainFunctionType(_) => \"main function has wrong type\",\n             &TypeOrigin::StartFunctionType(_) => \"start function has wrong type\",\n@@ -251,7 +247,6 @@ impl TypeOrigin {\n             &TypeOrigin::MatchExpressionArm(..) => \"match arms have compatible types\",\n             &TypeOrigin::IfExpression(_) => \"if and else have compatible types\",\n             &TypeOrigin::IfExpressionWithNoElse(_) => \"if missing an else returns ()\",\n-            &TypeOrigin::RangeExpression(_) => \"start and end of range have compatible types\",\n             &TypeOrigin::EquatePredicate(_) => \"equality where clause is satisfied\",\n             &TypeOrigin::MainFunctionType(_) => \"`main` function has the correct type\",\n             &TypeOrigin::StartFunctionType(_) => \"`start` function has the correct type\",\n@@ -1742,7 +1737,6 @@ impl TypeOrigin {\n             TypeOrigin::MatchExpressionArm(match_span, ..) => match_span,\n             TypeOrigin::IfExpression(span) => span,\n             TypeOrigin::IfExpressionWithNoElse(span) => span,\n-            TypeOrigin::RangeExpression(span) => span,\n             TypeOrigin::EquatePredicate(span) => span,\n             TypeOrigin::MainFunctionType(span) => span,\n             TypeOrigin::StartFunctionType(span) => span,"}]}