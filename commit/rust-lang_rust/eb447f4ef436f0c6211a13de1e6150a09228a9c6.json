{"sha": "eb447f4ef436f0c6211a13de1e6150a09228a9c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNDQ3ZjRlZjQzNmYwYzYyMTFhMTNkZTFlNjE1MGEwOTIyOGE5YzY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-24T08:31:26Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-27T06:58:00Z"}, "message": "Fix various useless derefs and slicings", "tree": {"sha": "88f3553738466c1d1807ca34febf4283f944d23e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f3553738466c1d1807ca34febf4283f944d23e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb447f4ef436f0c6211a13de1e6150a09228a9c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAljYt/gACgkQpp+NIls6\n19n+Sw/+M8CHkyDUCUo/FB723RkbqMckdSVbIeAqVuZ3uLind+s2SNCln1vrtIKt\npa/WgKhiOh2pqSVfiYsgGxg6pkhi+rlI9/jjeQ3EG2W5F61E+d6hgfxVYm8BXRoJ\njK+HHnz27+ItSKgWnLVuZDQg3BJzGKIiJj2Ug31yfE3I/LnDSyOZqxQTPDPNARlv\nQMU24CFbupTc9S8WU8WTA13dpPq5CEgBp49cvSuHJBxKKz3jcgDkr418s8Jw293r\nfCVleCmkL1MYr5bj117o5Be69AuvDNa15ibxJU81ZSABgLhlDygz3TB9uz8XKg97\nYbjgwIwbb4NwlZifzY+x3SvBCfIXz6ihm2k9tgIgNiisjX4wRdWY93tpRS0k4Nq1\nmAHQlRg5bpP6AhVg7fAZrgKCFce8P07tD0FwnVObocfIRDbGQwDpLiJ7KRP3sc5J\n6ge5RZCx/D+edBdU6hIXcaFJmwD0H6uWm583+dfs++P5m6IR69hydkzdWThphlO9\n00s+MSs5ZR4Na4XR6FtjtmXpfe+JY5uEi9HbrKEkvM5L+7X8cfPbeOObpyFR5jr6\nuGXk5Cd5iklnwY1ADPt7xDRLY4CF1rj6uBsd+za0yKC+TTnk7kF6VyyG2AVEAr7c\nTKfY2paH/6bKJ4xBex+iQEbjmL3rwTmuDu56A9SMs2ayIzvc60k=\n=5Kg3\n-----END PGP SIGNATURE-----", "payload": "tree 88f3553738466c1d1807ca34febf4283f944d23e\nparent 79feb9476d9275cb6abac88affdbfd3c922a2805\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1490344286 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1490597880 +0200\n\nFix various useless derefs and slicings"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb447f4ef436f0c6211a13de1e6150a09228a9c6", "html_url": "https://github.com/rust-lang/rust/commit/eb447f4ef436f0c6211a13de1e6150a09228a9c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb447f4ef436f0c6211a13de1e6150a09228a9c6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79feb9476d9275cb6abac88affdbfd3c922a2805", "url": "https://api.github.com/repos/rust-lang/rust/commits/79feb9476d9275cb6abac88affdbfd3c922a2805", "html_url": "https://github.com/rust-lang/rust/commit/79feb9476d9275cb6abac88affdbfd3c922a2805"}], "stats": {"total": 242, "additions": 120, "deletions": 122}, "files": [{"sha": "f8f641060c442674f4d7b9a03b8d8bcde5008fec", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -586,7 +586,7 @@ fn android_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n                       .arg(ADB_TEST_DIR));\n \n     let target_dir = format!(\"{}/{}\", ADB_TEST_DIR, target);\n-    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", &target_dir[..]]));\n+    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", &target_dir]));\n \n     for f in t!(build.sysroot_libdir(compiler, target).read_dir()) {\n         let f = t!(f);"}, {"sha": "bd28a63c5f4dfb947edce379ac569c3c1af43519", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -196,7 +196,7 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_\n     let toknum = &s[content_end + 3 .. toknum_end];\n \n     let not_found = format!(\"didn't find token {:?} in the map\", toknum);\n-    let proto_tok = tokens.get(toknum).expect(&not_found[..]);\n+    let proto_tok = tokens.get(toknum).expect(&not_found);\n \n     let nm = Symbol::intern(content);\n \n@@ -304,14 +304,14 @@ fn main() {\n     let mut token_file = File::open(&Path::new(&args.next().unwrap())).unwrap();\n     let mut token_list = String::new();\n     token_file.read_to_string(&mut token_list).unwrap();\n-    let token_map = parse_token_list(&token_list[..]);\n+    let token_map = parse_token_list(&token_list);\n \n     let stdin = std::io::stdin();\n     let lock = stdin.lock();\n     let lines = lock.lines();\n     let antlr_tokens = lines.map(|l| parse_antlr_token(l.unwrap().trim(),\n                                                        &token_map,\n-                                                       &surrogate_pairs_pos[..],\n+                                                       &surrogate_pairs_pos,\n                                                        has_bom));\n \n     for antlr_tok in antlr_tokens {"}, {"sha": "8f0488f69369e5d905c18c906e1cfa5c459e34f0", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -1376,7 +1376,7 @@ mod tests {\n         thread::spawn(move || {\n                 check_links(&n);\n                 let a: &[_] = &[&1, &2, &3];\n-                assert_eq!(a, &n.iter().collect::<Vec<_>>()[..]);\n+                assert_eq!(a, &*n.iter().collect::<Vec<_>>());\n             })\n             .join()\n             .ok()"}, {"sha": "1b2c7775185f78d9dbf9e318236f8d3e4e5c0426", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -554,7 +554,7 @@ impl<'a> LabelText<'a> {\n     pub fn to_dot_string(&self) -> String {\n         match self {\n             &LabelStr(ref s) => format!(\"\\\"{}\\\"\", s.escape_default()),\n-            &EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(&s[..])),\n+            &EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(&s)),\n             &HtmlStr(ref s) => format!(\"<{}>\", s),\n         }\n     }\n@@ -587,7 +587,7 @@ impl<'a> LabelText<'a> {\n         let mut prefix = self.pre_escaped_content().into_owned();\n         let suffix = suffix.pre_escaped_content();\n         prefix.push_str(r\"\\n\\n\");\n-        prefix.push_str(&suffix[..]);\n+        prefix.push_str(&suffix);\n         EscStr(prefix.into_cow())\n     }\n }\n@@ -878,7 +878,7 @@ mod tests {\n         type Node = Node;\n         type Edge = &'a Edge;\n         fn graph_id(&'a self) -> Id<'a> {\n-            Id::new(&self.name[..]).unwrap()\n+            Id::new(self.name).unwrap()\n         }\n         fn node_id(&'a self, n: &Node) -> Id<'a> {\n             id_name(n)"}, {"sha": "e760f7efc93d912645454213f9b42b5707836261", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -55,7 +55,7 @@ impl Fingerprint {\n impl Encodable for Fingerprint {\n     #[inline]\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        for &byte in &self.0[..] {\n+        for &byte in &self.0 {\n             s.emit_u8(byte)?;\n         }\n         Ok(())\n@@ -66,7 +66,7 @@ impl Decodable for Fingerprint {\n     #[inline]\n     fn decode<D: Decoder>(d: &mut D) -> Result<Fingerprint, D::Error> {\n         let mut result = Fingerprint([0u8; FINGERPRINT_LENGTH]);\n-        for byte in &mut result.0[..] {\n+        for byte in &mut result.0 {\n             *byte = d.read_u8()?;\n         }\n         Ok(result)"}, {"sha": "20bf241a99906e3afe1a5196fb29718bc88f9cc1", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -40,7 +40,6 @@ use std::cmp;\n use std::default::Default as StdDefault;\n use std::mem;\n use std::fmt;\n-use std::ops::Deref;\n use syntax::attr;\n use syntax::ast;\n use syntax::symbol::Symbol;\n@@ -485,7 +484,7 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n                 Allow => bug!(\"earlier conditional return should handle Allow case\")\n             };\n             let hyphen_case_lint_name = name.replace(\"_\", \"-\");\n-            if lint_flag_val.as_str().deref() == name {\n+            if lint_flag_val.as_str() == name {\n                 err.note(&format!(\"requested on the command line with `{} {}`\",\n                                   flag, hyphen_case_lint_name));\n             } else {\n@@ -496,7 +495,7 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n         },\n         Node(lint_attr_name, src) => {\n             def = Some(src);\n-            if lint_attr_name.as_str().deref() != name {\n+            if lint_attr_name.as_str() != name {\n                 let level_str = level.as_str();\n                 err.note(&format!(\"#[{}({})] implied by #[{}({})]\",\n                                   level_str, name, level_str, lint_attr_name));"}, {"sha": "4354ed6817ae96376db2640305c638b9f9567b34", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -536,7 +536,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 if !self.stability.borrow().active_features.contains(feature) {\n                     let msg = match *reason {\n                         Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n-                                               &feature.as_str(), &r),\n+                                               feature.as_str(), &r),\n                         None => format!(\"use of unstable library feature '{}'\", &feature)\n                     };\n                     emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,"}, {"sha": "b728d4d534516672e436312a336f40f627017943", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -267,11 +267,11 @@ pub fn fixup_fragment_sets<'a, 'tcx>(this: &MoveData<'tcx>, tcx: TyCtxt<'a, 'tcx\n     // First, filter out duplicates\n     moved.sort();\n     moved.dedup();\n-    debug!(\"fragments 1 moved: {:?}\", path_lps(&moved[..]));\n+    debug!(\"fragments 1 moved: {:?}\", path_lps(&moved));\n \n     assigned.sort();\n     assigned.dedup();\n-    debug!(\"fragments 1 assigned: {:?}\", path_lps(&assigned[..]));\n+    debug!(\"fragments 1 assigned: {:?}\", path_lps(&assigned));\n \n     // Second, build parents from the moved and assigned.\n     for m in &moved {\n@@ -291,14 +291,14 @@ pub fn fixup_fragment_sets<'a, 'tcx>(this: &MoveData<'tcx>, tcx: TyCtxt<'a, 'tcx\n \n     parents.sort();\n     parents.dedup();\n-    debug!(\"fragments 2 parents: {:?}\", path_lps(&parents[..]));\n+    debug!(\"fragments 2 parents: {:?}\", path_lps(&parents));\n \n     // Third, filter the moved and assigned fragments down to just the non-parents\n-    moved.retain(|f| non_member(*f, &parents[..]));\n-    debug!(\"fragments 3 moved: {:?}\", path_lps(&moved[..]));\n+    moved.retain(|f| non_member(*f, &parents));\n+    debug!(\"fragments 3 moved: {:?}\", path_lps(&moved));\n \n-    assigned.retain(|f| non_member(*f, &parents[..]));\n-    debug!(\"fragments 3 assigned: {:?}\", path_lps(&assigned[..]));\n+    assigned.retain(|f| non_member(*f, &parents));\n+    debug!(\"fragments 3 assigned: {:?}\", path_lps(&assigned));\n \n     // Fourth, build the leftover from the moved, assigned, and parents.\n     for m in &moved {\n@@ -316,16 +316,16 @@ pub fn fixup_fragment_sets<'a, 'tcx>(this: &MoveData<'tcx>, tcx: TyCtxt<'a, 'tcx\n \n     unmoved.sort();\n     unmoved.dedup();\n-    debug!(\"fragments 4 unmoved: {:?}\", frag_lps(&unmoved[..]));\n+    debug!(\"fragments 4 unmoved: {:?}\", frag_lps(&unmoved));\n \n     // Fifth, filter the leftover fragments down to its core.\n     unmoved.retain(|f| match *f {\n         AllButOneFrom(_) => true,\n-        Just(mpi) => non_member(mpi, &parents[..]) &&\n-            non_member(mpi, &moved[..]) &&\n-            non_member(mpi, &assigned[..])\n+        Just(mpi) => non_member(mpi, &parents) &&\n+            non_member(mpi, &moved) &&\n+            non_member(mpi, &assigned)\n     });\n-    debug!(\"fragments 5 unmoved: {:?}\", frag_lps(&unmoved[..]));\n+    debug!(\"fragments 5 unmoved: {:?}\", frag_lps(&unmoved));\n \n     // Swap contents back in.\n     fragments.unmoved_fragments = unmoved;"}, {"sha": "59c3e68aadab2b4f2b9182f76334af3b30e92c19", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -112,7 +112,7 @@ fn borrowck_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, body_id: hir::BodyId) {\n                                                  &flowed_moves.move_data,\n                                                  owner_id);\n \n-    check_loans::check_loans(bccx, &loan_dfcx, &flowed_moves, &all_loans[..], body);\n+    check_loans::check_loans(bccx, &loan_dfcx, &flowed_moves, &all_loans, body);\n }\n \n fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,"}, {"sha": "e3a2bfa392738586fe06cd374082d3222c6bf50d", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n                 set.push_str(\", \");\n             }\n             let loan_str = self.borrowck_ctxt.loan_path_to_string(&lp);\n-            set.push_str(&loan_str[..]);\n+            set.push_str(&loan_str);\n             saw_some = true;\n             true\n         });"}, {"sha": "c1dc5f5f7a2b8d10e0f5a99565480dfab83f9993", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -680,10 +680,10 @@ fn is_useful_specialized<'p, 'a:'p, 'tcx: 'a>(\n     }).collect();\n     let wild_patterns: Vec<_> = wild_patterns_owned.iter().collect();\n     let matrix = Matrix(m.iter().flat_map(|r| {\n-        specialize(cx, &r[..], &ctor, &wild_patterns)\n+        specialize(cx, &r, &ctor, &wild_patterns)\n     }).collect());\n     match specialize(cx, v, &ctor, &wild_patterns) {\n-        Some(v) => match is_useful(cx, &matrix, &v[..], witness) {\n+        Some(v) => match is_useful(cx, &matrix, &v, witness) {\n             UsefulWithWitness(witnesses) => UsefulWithWitness(\n                 witnesses.into_iter()\n                     .map(|witness| witness.apply_constructor(cx, &ctor, lty))"}, {"sha": "9d55281d019d9ee579a4d755e47b6303d674ec04", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -311,7 +311,7 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         for &(pat, hir_pat) in pats {\n             let v = vec![pat];\n \n-            match is_useful(cx, &seen, &v[..], LeaveOutWitness) {\n+            match is_useful(cx, &seen, &v, LeaveOutWitness) {\n                 NotUseful => {\n                     match source {\n                         hir::MatchSource::IfLetDesugar { .. } => {"}, {"sha": "c03c2890ba34c6cb4723c3eb00ed514a8bf2e5a5", "filename": "src/librustc_data_structures/accumulate_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_data_structures%2Faccumulate_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_data_structures%2Faccumulate_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Faccumulate_vec.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -91,17 +91,17 @@ impl<A: Array> Deref for AccumulateVec<A> {\n     type Target = [A::Element];\n     fn deref(&self) -> &Self::Target {\n         match *self {\n-            AccumulateVec::Array(ref v) => &v[..],\n-            AccumulateVec::Heap(ref v) => &v[..],\n+            AccumulateVec::Array(ref v) => v,\n+            AccumulateVec::Heap(ref v) => v,\n         }\n     }\n }\n \n impl<A: Array> DerefMut for AccumulateVec<A> {\n     fn deref_mut(&mut self) -> &mut [A::Element] {\n         match *self {\n-            AccumulateVec::Array(ref mut v) => &mut v[..],\n-            AccumulateVec::Heap(ref mut v) => &mut v[..],\n+            AccumulateVec::Array(ref mut v) => v,\n+            AccumulateVec::Heap(ref mut v) => v,\n         }\n     }\n }"}, {"sha": "cf54229fa7f52e59130cbd39c43ee7656c90d1f4", "filename": "src/librustc_data_structures/base_n.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_data_structures%2Fbase_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_data_structures%2Fbase_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbase_n.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -48,7 +48,7 @@ pub fn encode(n: u64, base: u64) -> String {\n #[test]\n fn test_encode() {\n     fn test(n: u64, base: u64) {\n-        assert_eq!(Ok(n), u64::from_str_radix(&encode(n, base)[..], base as u32));\n+        assert_eq!(Ok(n), u64::from_str_radix(&encode(n, base), base as u32));\n     }\n \n     for base in 2..37 {"}, {"sha": "9d97a83f693c32f7cb528def5b49ff3ac47f1178", "filename": "src/librustc_data_structures/blake2b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_data_structures%2Fblake2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_data_structures%2Fblake2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fblake2b.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -35,7 +35,7 @@ pub struct Blake2bCtx {\n impl ::std::fmt::Debug for Blake2bCtx {\n     fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {\n         try!(write!(fmt, \"hash: \"));\n-        for v in &self.h[..] {\n+        for v in &self.h {\n             try!(write!(fmt, \"{:x}\", v));\n         }\n         Ok(())"}, {"sha": "572ce98d3ae8e30a0f19a8b9a69b887c9873eb3e", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -91,13 +91,13 @@ impl<T: Idx> IdxSet<T> {\n impl<T: Idx> Deref for IdxSetBuf<T> {\n     type Target = IdxSet<T>;\n     fn deref(&self) -> &IdxSet<T> {\n-        unsafe { IdxSet::from_slice(&self.bits[..]) }\n+        unsafe { IdxSet::from_slice(&self.bits) }\n     }\n }\n \n impl<T: Idx> DerefMut for IdxSetBuf<T> {\n     fn deref_mut(&mut self) -> &mut IdxSet<T> {\n-        unsafe { IdxSet::from_slice_mut(&mut self.bits[..]) }\n+        unsafe { IdxSet::from_slice_mut(&mut self.bits) }\n     }\n }\n \n@@ -135,11 +135,11 @@ impl<T: Idx> IdxSet<T> {\n     }\n \n     pub fn words(&self) -> &[Word] {\n-        &self.bits[..]\n+        &self.bits\n     }\n \n     pub fn words_mut(&mut self) -> &mut [Word] {\n-        &mut self.bits[..]\n+        &mut self.bits\n     }\n \n     pub fn clone_from(&mut self, other: &IdxSet<T>) {"}, {"sha": "e11118901d2830072975a20c515d0448b1c71d5a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -233,7 +233,7 @@ fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>)\n // Extract input (string or file and optional path) from matches.\n fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>)> {\n     if free_matches.len() == 1 {\n-        let ifile = &free_matches[0][..];\n+        let ifile = &free_matches[0];\n         if ifile == \"-\" {\n             let mut src = String::new();\n             io::stdin().read_to_string(&mut src).unwrap();\n@@ -800,7 +800,7 @@ Available lint options:\n         for lint in lints {\n             let name = lint.name_lower().replace(\"_\", \"-\");\n             println!(\"    {}  {:7.7}  {}\",\n-                     padded(&name[..]),\n+                     padded(&name),\n                      lint.default_level.as_str(),\n                      lint.desc);\n         }\n@@ -838,7 +838,7 @@ Available lint options:\n                          .map(|x| x.to_string().replace(\"_\", \"-\"))\n                          .collect::<Vec<String>>()\n                          .join(\", \");\n-            println!(\"    {}  {}\", padded(&name[..]), desc);\n+            println!(\"    {}  {}\", padded(&name), desc);\n         }\n         println!(\"\\n\");\n     };\n@@ -945,7 +945,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n                                                  .into_iter()\n                                                  .map(|x| x.opt_group)\n                                                  .collect();\n-    let matches = match getopts::getopts(&args[..], &all_groups) {\n+    let matches = match getopts::getopts(&args, &all_groups) {\n         Ok(m) => m,\n         Err(f) => early_error(ErrorOutputType::default(), &f.to_string()),\n     };\n@@ -1084,7 +1084,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n                       format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL)];\n             for note in &xs {\n                 handler.emit(&MultiSpan::new(),\n-                             &note[..],\n+                             &note,\n                              errors::Level::Note);\n             }\n             if match env::var_os(\"RUST_BACKTRACE\") {"}, {"sha": "18dc504ca8aa913568bbf5fd48fae2c8ff5728db", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -589,7 +589,7 @@ impl UserIdentifiedItem {\n                                        -> NodesMatchingUII<'a, 'hir> {\n         match *self {\n             ItemViaNode(node_id) => NodesMatchingDirect(Some(node_id).into_iter()),\n-            ItemViaPath(ref parts) => NodesMatchingSuffix(map.nodes_matching_suffix(&parts[..])),\n+            ItemViaPath(ref parts) => NodesMatchingSuffix(map.nodes_matching_suffix(&parts)),\n         }\n     }\n \n@@ -600,7 +600,7 @@ impl UserIdentifiedItem {\n                                   user_option,\n                                   self.reconstructed_input(),\n                                   is_wrong_because);\n-            sess.fatal(&message[..])\n+            sess.fatal(&message)\n         };\n \n         let mut saw_node = ast::DUMMY_NODE_ID;\n@@ -771,7 +771,7 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n     fn expand_err_details(r: io::Result<()>) -> io::Result<()> {\n         r.map_err(|ioerr| {\n             io::Error::new(io::ErrorKind::Other,\n-                           &format!(\"graphviz::render failed: {}\", ioerr)[..])\n+                           format!(\"graphviz::render failed: {}\", ioerr))\n         })\n     }\n }"}, {"sha": "af2416f787ea4669e693fa0162bca977c6ac7ece", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n \n     pub fn t_param(&self, index: u32) -> Ty<'tcx> {\n         let name = format!(\"T{}\", index);\n-        self.infcx.tcx.mk_param(index, Symbol::intern(&name[..]))\n+        self.infcx.tcx.mk_param(index, Symbol::intern(&name))\n     }\n \n     pub fn re_early_bound(&self, index: u32, name: &'static str) -> &'tcx ty::Region {"}, {"sha": "5c20f65274f54ffbcd86a5323b3bb704dbe328fb", "filename": "src/librustc_incremental/persist/file_format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -99,9 +99,9 @@ pub fn read_file(sess: &Session, path: &Path) -> io::Result<Option<Vec<u8>>> {\n         let rustc_version_str_len = rustc_version_str_len[0] as usize;\n         let mut buffer = Vec::with_capacity(rustc_version_str_len);\n         buffer.resize(rustc_version_str_len, 0);\n-        file.read_exact(&mut buffer[..])?;\n+        file.read_exact(&mut buffer)?;\n \n-        if &buffer[..] != rustc_version().as_bytes() {\n+        if buffer != rustc_version().as_bytes() {\n             report_format_mismatch(sess, path, \"Different compiler version\");\n             return Ok(None);\n         }"}, {"sha": "c4220e9a0d3dc1420022e6a7b5b2a3c1ff9c8c98", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -88,7 +88,7 @@ impl NonCamelCaseTypes {\n             } else {\n                 format!(\"{} `{}` should have a camel case name such as `{}`\", sort, name, c)\n             };\n-            cx.span_lint(NON_CAMEL_CASE_TYPES, span, &m[..]);\n+            cx.span_lint(NON_CAMEL_CASE_TYPES, span, &m);\n         }\n     }\n }"}, {"sha": "0ee9d4a42c7f81a26c15efdb0a37ab3eb5af6b45", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -334,7 +334,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             attr.check_name(\"doc\") &&\n             match attr.meta_item_list() {\n                 None => false,\n-                Some(l) => attr::list_contains_name(&l[..], \"hidden\"),\n+                Some(l) => attr::list_contains_name(&l, \"hidden\"),\n             }\n         });\n         self.doc_hidden_stack.push(doc_hidden);"}, {"sha": "86bf209ccf8c8d92c5c841f684f356f869293b20", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             ty::TyBool => return,\n             ty::TyAdt(def, _) => {\n                 let attrs = cx.tcx.get_attrs(def.did);\n-                check_must_use(cx, &attrs[..], s.span)\n+                check_must_use(cx, &attrs, s.span)\n             }\n             _ => false,\n         };"}, {"sha": "2b945e0a3afaff2f8e7d8ffe10335be2e719bbea", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -140,7 +140,7 @@ fn main() {\n         cfg.flag(flag);\n     }\n \n-    for component in &components[..] {\n+    for component in &components {\n         let mut flag = String::from(\"-DLLVM_COMPONENT_\");\n         flag.push_str(&component.to_uppercase());\n         cfg.flag(&flag);\n@@ -173,7 +173,7 @@ fn main() {\n     if !is_crossed {\n         cmd.arg(\"--system-libs\");\n     }\n-    cmd.args(&components[..]);\n+    cmd.args(&components);\n \n     for lib in output(&mut cmd).split_whitespace() {\n         let name = if lib.starts_with(\"-l\") {"}, {"sha": "04a8b88f8a594a694537722cfda51677330f75f6", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -669,7 +669,7 @@ impl<'a> CrateLoader<'a> {\n                                   name,\n                                   config::host_triple(),\n                                   self.sess.opts.target_triple);\n-            span_fatal!(self.sess, span, E0456, \"{}\", &message[..]);\n+            span_fatal!(self.sess, span, E0456, \"{}\", &message);\n         }\n \n         let root = ekrate.metadata.get_root();"}, {"sha": "1370d69f90466b55d2d91139aa7a5f277be07a0f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -918,14 +918,14 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n                 self.encode_fields(def_id);\n             }\n             hir::ItemImpl(..) => {\n-                for &trait_item_def_id in &self.tcx.associated_item_def_ids(def_id)[..] {\n+                for &trait_item_def_id in self.tcx.associated_item_def_ids(def_id).iter() {\n                     self.record(trait_item_def_id,\n                                 EncodeContext::encode_info_for_impl_item,\n                                 trait_item_def_id);\n                 }\n             }\n             hir::ItemTrait(..) => {\n-                for &item_def_id in &self.tcx.associated_item_def_ids(def_id)[..] {\n+                for &item_def_id in self.tcx.associated_item_def_ids(def_id).iter() {\n                     self.record(item_def_id,\n                                 EncodeContext::encode_info_for_trait_item,\n                                 item_def_id);"}, {"sha": "e8bc8b01652a62a5c71161b6b8e489a21ea21a6f", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -477,15 +477,15 @@ impl<'a> Context<'a> {\n                 Some(file) => file,\n             };\n             let (hash, found_kind) =\n-                if file.starts_with(&rlib_prefix[..]) && file.ends_with(\".rlib\") {\n+                if file.starts_with(&rlib_prefix) && file.ends_with(\".rlib\") {\n                     (&file[(rlib_prefix.len())..(file.len() - \".rlib\".len())], CrateFlavor::Rlib)\n-                } else if file.starts_with(&rlib_prefix[..]) && file.ends_with(\".rmeta\") {\n+                } else if file.starts_with(&rlib_prefix) && file.ends_with(\".rmeta\") {\n                     (&file[(rlib_prefix.len())..(file.len() - \".rmeta\".len())], CrateFlavor::Rmeta)\n                 } else if file.starts_with(&dylib_prefix) &&\n                                              file.ends_with(&dypair.1) {\n                     (&file[(dylib_prefix.len())..(file.len() - dypair.1.len())], CrateFlavor::Dylib)\n                 } else {\n-                    if file.starts_with(&staticlib_prefix[..]) && file.ends_with(&staticpair.1) {\n+                    if file.starts_with(&staticlib_prefix) && file.ends_with(&staticpair.1) {\n                         staticlibs.push(CrateMismatch {\n                             path: path.to_path_buf(),\n                             got: \"static\".to_string(),"}, {"sha": "efe9963cecc7300a955394726544c1af4130cc4a", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -126,19 +126,19 @@ impl<'a> PluginLoader<'a> {\n             // inside this crate, so continue would spew \"macro undefined\"\n             // errors\n             Err(err) => {\n-                self.sess.span_fatal(span, &err[..])\n+                self.sess.span_fatal(span, &err)\n             }\n         };\n \n         unsafe {\n             let registrar =\n-                match lib.symbol(&symbol[..]) {\n+                match lib.symbol(&symbol) {\n                     Ok(registrar) => {\n                         mem::transmute::<*mut u8,PluginRegistrarFun>(registrar)\n                     }\n                     // again fatal if we can't register macros\n                     Err(err) => {\n-                        self.sess.span_fatal(span, &err[..])\n+                        self.sess.span_fatal(span, &err)\n                     }\n                 };\n "}, {"sha": "4bab135ff12f70db54b2a65ef5007de61d07dcea", "filename": "src/librustc_save_analysis/csv_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -423,7 +423,7 @@ fn make_values_str(pairs: &[(&'static str, &str)]) -> String {\n \n     let strs = pairs.map(|(f, v)| format!(\",{},\\\"{}\\\"\", f, escape(String::from(v))));\n     strs.fold(String::new(), |mut s, ss| {\n-        s.push_str(&ss[..]);\n+        s.push_str(&ss);\n         s\n     })\n }"}, {"sha": "1530708b4b8882c6361608a1936496ae90769e93", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -369,7 +369,7 @@ impl FnType {\n             match sig.inputs().last().unwrap().sty {\n                 ty::TyTuple(ref tupled_arguments, _) => {\n                     inputs = &sig.inputs()[0..sig.inputs().len() - 1];\n-                    &tupled_arguments[..]\n+                    &tupled_arguments\n                 }\n                 _ => {\n                     bug!(\"argument to function with \\\"rust-call\\\" ABI \\"}, {"sha": "5c1ced573402e07d8314d0654ee458b6bbde3a18", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -229,11 +229,11 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                  variant_fill].iter().cloned().collect();\n             match name {\n                 None => {\n-                    Type::struct_(cx, &fields[..], false)\n+                    Type::struct_(cx, &fields, false)\n                 }\n                 Some(name) => {\n                     let mut llty = Type::named_struct(cx, name);\n-                    llty.set_struct_body(&fields[..], false);\n+                    llty.set_struct_body(&fields, false);\n                     llty\n                 }\n             }\n@@ -330,7 +330,7 @@ fn struct_wrapped_nullable_bitdiscr(\n     alignment: Alignment,\n ) -> ValueRef {\n     let llptrptr = bcx.gepi(scrutinee,\n-        &discrfield.iter().map(|f| *f as usize).collect::<Vec<_>>()[..]);\n+        &discrfield.iter().map(|f| *f as usize).collect::<Vec<_>>());\n     let llptr = bcx.load(llptrptr, alignment.to_align());\n     let cmp = if nndiscr == 0 { IntEQ } else { IntNE };\n     bcx.icmp(cmp, llptr, C_null(val_ty(llptr)))\n@@ -402,7 +402,7 @@ pub fn trans_set_discr<'a, 'tcx>(bcx: &Builder<'a, 'tcx>, t: Ty<'tcx>, val: Valu\n                     base::call_memset(bcx, llptr, fill_byte, size, align, false);\n                 } else {\n                     let path = discrfield.iter().map(|&i| i as usize).collect::<Vec<_>>();\n-                    let llptrptr = bcx.gepi(val, &path[..]);\n+                    let llptrptr = bcx.gepi(val, &path);\n                     let llptrty = val_ty(llptrptr).element_type();\n                     bcx.store(C_null(llptrty), llptrptr, None);\n                 }"}, {"sha": "b6195765b27c29711856314d9afc1524b0e012e2", "filename": "src/librustc_trans/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fasm.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -77,14 +77,14 @@ pub fn trans_inline_asm<'a, 'tcx>(\n           .chain(arch_clobbers.iter().map(|s| s.to_string()))\n           .collect::<Vec<String>>().join(\",\");\n \n-    debug!(\"Asm Constraints: {}\", &all_constraints[..]);\n+    debug!(\"Asm Constraints: {}\", &all_constraints);\n \n     // Depending on how many outputs we have, the return type is different\n     let num_outputs = output_types.len();\n     let output_type = match num_outputs {\n         0 => Type::void(bcx.ccx),\n         1 => output_types[0],\n-        _ => Type::struct_(bcx.ccx, &output_types[..], false)\n+        _ => Type::struct_(bcx.ccx, &output_types, false)\n     };\n \n     let dialect = match ia.dialect {"}, {"sha": "0f908b7d0698bc48e7bd1fd529d46212c5433a0f", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -65,10 +65,10 @@ pub fn find_library(name: &str, search_paths: &[PathBuf], sess: &Session)\n \n     for path in search_paths {\n         debug!(\"looking for {} inside {:?}\", name, path);\n-        let test = path.join(&oslibname[..]);\n+        let test = path.join(&oslibname);\n         if test.exists() { return test }\n         if oslibname != unixlibname {\n-            let test = path.join(&unixlibname[..]);\n+            let test = path.join(&unixlibname);\n             if test.exists() { return test }\n         }\n     }"}, {"sha": "6d17b2f0eeda3514c3b6079c2c0d92cc7ce315ff", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -91,7 +91,7 @@ pub fn find_crate_name(sess: Option<&Session>,\n                        attrs: &[ast::Attribute],\n                        input: &Input) -> String {\n     let validate = |s: String, span: Option<Span>| {\n-        cstore::validate_crate_name(sess, &s[..], span);\n+        cstore::validate_crate_name(sess, &s, span);\n         s\n     };\n \n@@ -109,7 +109,7 @@ pub fn find_crate_name(sess: Option<&Session>,\n                     let msg = format!(\"--crate-name and #[crate_name] are \\\n                                        required to match, but `{}` != `{}`\",\n                                       s, name);\n-                    sess.span_err(attr.span, &msg[..]);\n+                    sess.span_err(attr.span, &msg);\n                 }\n             }\n             return validate(s.clone(), None);\n@@ -417,7 +417,7 @@ fn object_filenames(trans: &CrateTranslation,\n                     outputs: &OutputFilenames)\n                     -> Vec<PathBuf> {\n     trans.modules.iter().map(|module| {\n-        outputs.temp_path(OutputType::Object, Some(&module.name[..]))\n+        outputs.temp_path(OutputType::Object, Some(&module.name))\n     }).collect()\n }\n \n@@ -551,7 +551,7 @@ fn link_rlib<'a>(sess: &'a Session,\n                                                  e))\n                 }\n \n-                let bc_data_deflated = flate::deflate_bytes(&bc_data[..]);\n+                let bc_data_deflated = flate::deflate_bytes(&bc_data);\n \n                 let mut bc_file_deflated = match fs::File::create(&bc_deflated_filename) {\n                     Ok(file) => file,\n@@ -819,12 +819,12 @@ fn link_natively(sess: &Session,\n                                          pname,\n                                          prog.status))\n                     .note(&format!(\"{:?}\", &cmd))\n-                    .note(&escape_string(&output[..]))\n+                    .note(&escape_string(&output))\n                     .emit();\n                 sess.abort_if_errors();\n             }\n-            info!(\"linker stderr:\\n{}\", escape_string(&prog.stderr[..]));\n-            info!(\"linker stdout:\\n{}\", escape_string(&prog.stdout[..]));\n+            info!(\"linker stderr:\\n{}\", escape_string(&prog.stderr));\n+            info!(\"linker stdout:\\n{}\", escape_string(&prog.stdout));\n         },\n         Err(e) => {\n             sess.struct_err(&format!(\"could not exec the linker `{}`: {}\", pname, e))"}, {"sha": "e23ddd2542a808f8ae0b765c2c86a95ecafa3f45", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -61,7 +61,7 @@ pub fn run(sess: &session::Session,\n     }\n \n     let export_threshold =\n-        symbol_export::crates_export_threshold(&sess.crate_types.borrow()[..]);\n+        symbol_export::crates_export_threshold(&sess.crate_types.borrow());\n \n     let symbol_filter = &|&(ref name, level): &(String, _)| {\n         if symbol_export::is_below_threshold(level, export_threshold) {\n@@ -147,7 +147,7 @@ pub fn run(sess: &session::Session,\n                                                         bc_decoded.len() as libc::size_t) {\n                     write::llvm_err(sess.diagnostic(),\n                                     format!(\"failed to load bc of `{}`\",\n-                                            &name[..]));\n+                                            name));\n                 }\n             });\n         }"}, {"sha": "104e7bc6a52bde0cf04a013fe4ef0f4d47169a62", "filename": "src/librustc_trans/back/rpath.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Frpath.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -37,8 +37,8 @@ pub fn get_rpath_flags(config: &mut RPathConfig) -> Vec<String> {\n \n     let libs = config.used_crates.clone();\n     let libs = libs.into_iter().filter_map(|(_, l)| l.option()).collect::<Vec<_>>();\n-    let rpaths = get_rpaths(config, &libs[..]);\n-    flags.extend_from_slice(&rpaths_to_flags(&rpaths[..]));\n+    let rpaths = get_rpaths(config, &libs);\n+    flags.extend_from_slice(&rpaths_to_flags(&rpaths));\n \n     // Use DT_RUNPATH instead of DT_RPATH if available\n     if config.linker_is_gnu {\n@@ -84,14 +84,14 @@ fn get_rpaths(config: &mut RPathConfig, libs: &[PathBuf]) -> Vec<String> {\n         }\n     }\n \n-    log_rpaths(\"relative\", &rel_rpaths[..]);\n-    log_rpaths(\"fallback\", &fallback_rpaths[..]);\n+    log_rpaths(\"relative\", &rel_rpaths);\n+    log_rpaths(\"fallback\", &fallback_rpaths);\n \n     let mut rpaths = rel_rpaths;\n-    rpaths.extend_from_slice(&fallback_rpaths[..]);\n+    rpaths.extend_from_slice(&fallback_rpaths);\n \n     // Remove duplicates\n-    let rpaths = minimize_rpaths(&rpaths[..]);\n+    let rpaths = minimize_rpaths(&rpaths);\n     return rpaths;\n }\n \n@@ -177,7 +177,7 @@ fn minimize_rpaths(rpaths: &[String]) -> Vec<String> {\n     let mut set = HashSet::new();\n     let mut minimized = Vec::new();\n     for rpath in rpaths {\n-        if set.insert(&rpath[..]) {\n+        if set.insert(rpath) {\n             minimized.push(rpath.clone());\n         }\n     }"}, {"sha": "23a67ef5046eebec0a527e24a0859eff3f359dce", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -154,7 +154,7 @@ impl ExportedSymbols {\n                             cnum: CrateNum)\n                             -> &[(String, SymbolExportLevel)] {\n         match self.exports.get(&cnum) {\n-            Some(exports) => &exports[..],\n+            Some(exports) => exports,\n             None => &[]\n         }\n     }\n@@ -167,7 +167,7 @@ impl ExportedSymbols {\n     {\n         for &(ref name, export_level) in self.exported_symbols(cnum) {\n             if is_below_threshold(export_level, export_threshold) {\n-                f(&name[..], export_level)\n+                f(&name, export_level)\n             }\n         }\n     }"}, {"sha": "3ad04e10cb027d20f4a555929eb43eff1a11dd62", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -341,7 +341,7 @@ pub fn sanitize(s: &str) -> String {\n     if !result.is_empty() &&\n         result.as_bytes()[0] != '_' as u8 &&\n         ! (result.as_bytes()[0] as char).is_xid_start() {\n-        return format!(\"_{}\", &result[..]);\n+        return format!(\"_{}\", result);\n     }\n \n     return result;"}, {"sha": "5a017e4fb8a9aa07e163887f28c443960278b1da", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -105,7 +105,7 @@ impl SharedEmitter {\n                 Some(ref code) => {\n                     handler.emit_with_code(&MultiSpan::new(),\n                                            &diag.msg,\n-                                           &code[..],\n+                                           &code,\n                                            diag.lvl);\n                 },\n                 None => {\n@@ -189,8 +189,8 @@ pub fn create_target_machine(sess: &Session) -> TargetMachineRef {\n     let fdata_sections = ffunction_sections;\n \n     let code_model_arg = match sess.opts.cg.code_model {\n-        Some(ref s) => &s[..],\n-        None => &sess.target.target.options.code_model[..],\n+        Some(ref s) => &s,\n+        None => &sess.target.target.options.code_model,\n     };\n \n     let code_model = match CODE_GEN_MODEL_ARGS.iter().find(\n@@ -397,7 +397,7 @@ unsafe extern \"C\" fn inline_asm_handler(diag: SMDiagnosticRef,\n     let msg = llvm::build_string(|s| llvm::LLVMRustWriteSMDiagnosticToString(diag, s))\n         .expect(\"non-UTF8 SMDiagnostic\");\n \n-    report_inline_asm(cgcx, &msg[..], cookie);\n+    report_inline_asm(cgcx, &msg, cookie);\n }\n \n unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_void) {\n@@ -823,7 +823,7 @@ pub fn run_passes(sess: &Session,\n         if trans.modules.len() == 1 {\n             // 1) Only one codegen unit.  In this case it's no difficulty\n             //    to copy `foo.0.x` to `foo.x`.\n-            let module_name = Some(&(trans.modules[0].name)[..]);\n+            let module_name = Some(&trans.modules[0].name[..]);\n             let path = crate_output.temp_path(output_type, module_name);\n             copy_gracefully(&path,\n                             &crate_output.path(output_type));\n@@ -939,7 +939,7 @@ pub fn run_passes(sess: &Session,\n \n         if metadata_config.emit_bc && !user_wants_bitcode {\n             let path = crate_output.temp_path(OutputType::Bitcode,\n-                                              Some(&trans.metadata_module.name[..]));\n+                                              Some(&trans.metadata_module.name));\n             remove(sess, &path);\n         }\n     }"}, {"sha": "ec45c5593632ed3fddbc5bf18924ffdec73fc740", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -514,7 +514,7 @@ pub fn call_memcpy<'a, 'tcx>(b: &Builder<'a, 'tcx>,\n                                n_bytes: ValueRef,\n                                align: u32) {\n     let ccx = b.ccx;\n-    let ptr_width = &ccx.sess().target.target.target_pointer_width[..];\n+    let ptr_width = &ccx.sess().target.target.target_pointer_width;\n     let key = format!(\"llvm.memcpy.p0i8.p0i8.i{}\", ptr_width);\n     let memcpy = ccx.get_intrinsic(&key);\n     let src_ptr = b.pointercast(src, Type::i8p(ccx));\n@@ -550,7 +550,7 @@ pub fn call_memset<'a, 'tcx>(b: &Builder<'a, 'tcx>,\n                              size: ValueRef,\n                              align: ValueRef,\n                              volatile: bool) -> ValueRef {\n-    let ptr_width = &b.ccx.sess().target.target.target_pointer_width[..];\n+    let ptr_width = &b.ccx.sess().target.target.target_pointer_width;\n     let intrinsic_key = format!(\"llvm.memset.p0i8.i{}\", ptr_width);\n     let llintrinsicfn = b.ccx.get_intrinsic(&intrinsic_key);\n     let volatile = C_bool(b.ccx, volatile);\n@@ -765,7 +765,7 @@ fn write_metadata(cx: &SharedCrateContext,\n     let mut compressed = cstore.metadata_encoding_version().to_vec();\n     compressed.extend_from_slice(&flate::deflate_bytes(&metadata));\n \n-    let llmeta = C_bytes_in_context(cx.metadata_llcx(), &compressed[..]);\n+    let llmeta = C_bytes_in_context(cx.metadata_llcx(), &compressed);\n     let llconst = C_struct_in_context(cx.metadata_llcx(), &[llmeta], false);\n     let name = cx.metadata_symbol_name();\n     let buf = CString::new(name).unwrap();\n@@ -796,7 +796,7 @@ fn internalize_symbols<'a, 'tcx>(sess: &Session,\n                                  symbol_map: &SymbolMap<'tcx>,\n                                  exported_symbols: &ExportedSymbols) {\n     let export_threshold =\n-        symbol_export::crates_export_threshold(&sess.crate_types.borrow()[..]);\n+        symbol_export::crates_export_threshold(&sess.crate_types.borrow());\n \n     let exported_symbols = exported_symbols\n         .exported_symbols(LOCAL_CRATE)\n@@ -1035,7 +1035,7 @@ pub fn find_exported_symbols(tcx: TyCtxt, reachable: NodeSet) -> NodeSet {\n                 (generics.parent_types == 0 && generics.types.is_empty()) &&\n                 // Functions marked with #[inline] are only ever translated\n                 // with \"internal\" linkage and are never exported.\n-                !attr::requests_inline(&attributes[..])\n+                !attr::requests_inline(&attributes)\n             }\n \n             _ => false\n@@ -1574,7 +1574,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n                 cgus.dedup();\n                 for &(ref cgu_name, linkage) in cgus.iter() {\n                     output.push_str(\" \");\n-                    output.push_str(&cgu_name[..]);\n+                    output.push_str(&cgu_name);\n \n                     let linkage_abbrev = match linkage {\n                         llvm::Linkage::ExternalLinkage => \"External\","}, {"sha": "8b1010d89fd9fd1c03c5f0e657de371ae090529c", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -627,7 +627,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         } else {\n             let v = ixs.iter().map(|i| C_i32(self.ccx, *i as i32)).collect::<Vec<ValueRef>>();\n             self.count_insn(\"gepi\");\n-            self.inbounds_gep(base, &v[..])\n+            self.inbounds_gep(base, &v)\n         }\n     }\n \n@@ -835,8 +835,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let s = format!(\"{} ({})\",\n                             text,\n                             self.ccx.sess().codemap().span_to_string(sp));\n-            debug!(\"{}\", &s[..]);\n-            self.add_comment(&s[..]);\n+            debug!(\"{}\", s);\n+            self.add_comment(&s);\n         }\n     }\n "}, {"sha": "612e765a499b7b93f3e5483c581e85e7d779a291", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -2611,7 +2611,7 @@ fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n     if attr.is_word() {\n         Some(format!(\"{}\", name))\n     } else if let Some(v) = attr.value_str() {\n-        Some(format!(\"{} = {:?}\", name, &v.as_str()[..]))\n+        Some(format!(\"{} = {:?}\", name, v.as_str()))\n     } else if let Some(values) = attr.meta_item_list() {\n         let display: Vec<_> = values.iter().filter_map(|attr| {\n             attr.meta_item().and_then(|mi| render_attribute(mi))\n@@ -2642,7 +2642,7 @@ fn render_attributes(w: &mut fmt::Formatter, it: &clean::Item) -> fmt::Result {\n \n     for attr in &it.attrs.other_attrs {\n         let name = attr.name().unwrap();\n-        if !ATTRIBUTE_WHITELIST.contains(&&name.as_str()[..]) {\n+        if !ATTRIBUTE_WHITELIST.contains(&&*name.as_str()) {\n             continue;\n         }\n         if let Some(s) = render_attribute(&attr.meta().unwrap()) {"}, {"sha": "66f5520b8826371991822087a551cfc35277a80e", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -119,7 +119,7 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                 };\n                 let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), false);\n                 p.root_module_name = cx.current_expansion.module.mod_path.last()\n-                    .map(|id| (*id.name.as_str()).to_owned());\n+                    .map(|id| id.name.as_str().to_string());\n \n                 p.check_unknown_macro_variable();\n                 // Let the context choose how to interpret the result."}, {"sha": "9d280a413e666c5403015bcbdc9ccec310febd68", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -818,7 +818,7 @@ pub struct GatedCfg {\n \n impl GatedCfg {\n     pub fn gate(cfg: &ast::MetaItem) -> Option<GatedCfg> {\n-        let name = &*cfg.name().as_str();\n+        let name = cfg.name().as_str();\n         GATED_CFGS.iter()\n                   .position(|info| info.0 == name)\n                   .map(|idx| {\n@@ -865,8 +865,7 @@ macro_rules! gate_feature {\n impl<'a> Context<'a> {\n     fn check_attribute(&self, attr: &ast::Attribute, is_macro: bool) {\n         debug!(\"check_attribute(attr = {:?})\", attr);\n-        let name = unwrap_or!(attr.name(), return);\n-\n+        let name = unwrap_or!(attr.name(), return).as_str();\n         for &(n, ty, ref gateage) in BUILTIN_ATTRIBUTES {\n             if name == n {\n                 if let &Gated(_, ref name, ref desc, ref has_feature) = gateage {\n@@ -885,12 +884,12 @@ impl<'a> Context<'a> {\n                 return;\n             }\n         }\n-        if name.as_str().starts_with(\"rustc_\") {\n+        if name.starts_with(\"rustc_\") {\n             gate_feature!(self, rustc_attrs, attr.span,\n                           \"unless otherwise specified, attributes \\\n                            with the prefix `rustc_` \\\n                            are reserved for internal compiler diagnostics\");\n-        } else if name.as_str().starts_with(\"derive_\") {\n+        } else if name.starts_with(\"derive_\") {\n             gate_feature!(self, custom_derive, attr.span, EXPLAIN_DERIVE_UNDERSCORE);\n         } else if !attr::is_known(attr) {\n             // Only run the custom attribute lint during regular"}, {"sha": "43a9d8c5f787c77bcc993e6f5a701c668e97b95f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -5151,15 +5151,15 @@ impl<'a> Parser<'a> {\n \n     fn push_directory(&mut self, id: Ident, attrs: &[Attribute]) {\n         if let Some(path) = attr::first_attr_value_str_by_name(attrs, \"path\") {\n-            self.directory.path.push(&*path.as_str());\n+            self.directory.path.push(&path.as_str());\n             self.directory.ownership = DirectoryOwnership::Owned;\n         } else {\n-            self.directory.path.push(&*id.name.as_str());\n+            self.directory.path.push(&id.name.as_str());\n         }\n     }\n \n     pub fn submod_path_from_attr(attrs: &[ast::Attribute], dir_path: &Path) -> Option<PathBuf> {\n-        attr::first_attr_value_str_by_name(attrs, \"path\").map(|d| dir_path.join(&*d.as_str()))\n+        attr::first_attr_value_str_by_name(attrs, \"path\").map(|d| dir_path.join(&d.as_str()))\n     }\n \n     /// Returns either a path to a module, or ."}, {"sha": "6fb6db9ca0282fd09cac855a9f6f3838714694ea", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb447f4ef436f0c6211a13de1e6150a09228a9c6/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=eb447f4ef436f0c6211a13de1e6150a09228a9c6", "patch": "@@ -616,7 +616,7 @@ fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n \n fn is_test_crate(krate: &ast::Crate) -> bool {\n     match attr::find_crate_name(&krate.attrs) {\n-        Some(s) if \"test\" == &*s.as_str() => true,\n+        Some(s) if \"test\" == s.as_str() => true,\n         _ => false\n     }\n }"}]}