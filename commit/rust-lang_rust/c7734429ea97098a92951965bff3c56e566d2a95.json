{"sha": "c7734429ea97098a92951965bff3c56e566d2a95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NzM0NDI5ZWE5NzA5OGE5Mjk1MTk2NWJmZjNjNTZlNTY2ZDJhOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-15T04:14:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-15T04:14:50Z"}, "message": "Auto merge of #24431 - ruud-v-a:explain, r=alexcrichton\n\nThis resolves part of #24407.", "tree": {"sha": "6443f7be2b41f37385d3709937b9adf5f20a2d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6443f7be2b41f37385d3709937b9adf5f20a2d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7734429ea97098a92951965bff3c56e566d2a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7734429ea97098a92951965bff3c56e566d2a95", "html_url": "https://github.com/rust-lang/rust/commit/c7734429ea97098a92951965bff3c56e566d2a95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7734429ea97098a92951965bff3c56e566d2a95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e1fcead14628701e1b10b9d00c898d748db2ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e1fcead14628701e1b10b9d00c898d748db2ed", "html_url": "https://github.com/rust-lang/rust/commit/16e1fcead14628701e1b10b9d00c898d748db2ed"}, {"sha": "33dca5e3ad376e7bd1fd618d5bbd0ed3a27840f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/33dca5e3ad376e7bd1fd618d5bbd0ed3a27840f8", "html_url": "https://github.com/rust-lang/rust/commit/33dca5e3ad376e7bd1fd618d5bbd0ed3a27840f8"}], "stats": {"total": 99, "additions": 94, "deletions": 5}, "files": [{"sha": "938a74382e20e6c8c3ee6c26723b19083050087e", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 94, "deletions": 5, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/c7734429ea97098a92951965bff3c56e566d2a95/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7734429ea97098a92951965bff3c56e566d2a95/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=c7734429ea97098a92951965bff3c56e566d2a95", "patch": "@@ -112,6 +112,100 @@ reference when using guards or refactor the entire expression, perhaps by\n putting the condition inside the body of the arm.\n \"##,\n \n+E0162: r##\"\n+An if-let pattern attempts to match the pattern, and enters the body if the\n+match was succesful. If the match is irrefutable (when it cannot fail to match),\n+use a regular `let`-binding instead. For instance:\n+\n+struct Irrefutable(i32);\n+let irr = Irrefutable(0);\n+\n+// This fails to compile because the match is irrefutable.\n+if let Irrefutable(x) = irr {\n+    // This body will always be executed.\n+    foo(x);\n+}\n+\n+// Try this instead:\n+let Irrefutable(x) = irr;\n+foo(x);\n+\"##,\n+\n+E0165: r##\"\n+A while-let pattern attempts to match the pattern, and enters the body if the\n+match was succesful. If the match is irrefutable (when it cannot fail to match),\n+use a regular `let`-binding inside a `loop` instead. For instance:\n+\n+struct Irrefutable(i32);\n+let irr = Irrefutable(0);\n+\n+// This fails to compile because the match is irrefutable.\n+while let Irrefutable(x) = irr {\n+    ...\n+}\n+\n+// Try this instead:\n+loop {\n+    let Irrefutable(x) = irr;\n+    ...\n+}\n+\"##,\n+\n+E0297: r##\"\n+Patterns used to bind names must be irrefutable. That is, they must guarantee\n+that a name will be extracted in all cases. Instead of pattern matching the\n+loop variable, consider using a `match` or `if let` inside the loop body. For\n+instance:\n+\n+// This fails because `None` is not covered.\n+for Some(x) in xs {\n+    ...\n+}\n+\n+// Match inside the loop instead:\n+for item in xs {\n+    match item {\n+        Some(x) => ...\n+        None => ...\n+    }\n+}\n+\n+// Or use `if let`:\n+for item in xs {\n+    if let Some(x) = item {\n+        ...\n+    }\n+}\n+\"##,\n+\n+E0301: r##\"\n+Mutable borrows are not allowed in pattern guards, because matching cannot have\n+side effects. Side effects could alter the matched object or the environment\n+on which the match depends in such a way, that the match would not be\n+exhaustive. For instance, the following would not match any arm if mutable\n+borrows were allowed:\n+\n+match Some(()) {\n+    None => { },\n+    option if option.take().is_none() => { /* impossible, option is `Some` */ },\n+    Some(_) => { } // When the previous match failed, the option became `None`.\n+}\n+\"##,\n+\n+E0302: r##\"\n+Assignments are not allowed in pattern guards, because matching cannot have\n+side effects. Side effects could alter the matched object or the environment\n+on which the match depends in such a way, that the match would not be\n+exhaustive. For instance, the following would not match any arm if assignments\n+were allowed:\n+\n+match Some(()) {\n+    None => { },\n+    option if { option = None; false } { },\n+    Some(_) => { } // When the previous match failed, the option became `None`.\n+}\n+\"##,\n+\n E0303: r##\"\n In certain cases it is possible for sub-bindings to violate memory safety.\n Updates to the borrow checker in a future version of Rust may remove this\n@@ -165,8 +259,6 @@ register_diagnostics! {\n     E0152,\n     E0158,\n     E0161,\n-    E0162,\n-    E0165,\n     E0170,\n     E0261, // use of undeclared lifetime name\n     E0262, // illegal lifetime parameter name\n@@ -194,12 +286,9 @@ register_diagnostics! {\n     E0284, // cannot resolve type\n     E0285, // overflow evaluation builtin bounds\n     E0296, // malformed recursion limit attribute\n-    E0297, // refutable pattern in for loop binding\n     E0298, // mismatched types between arms\n     E0299, // mismatched types between arms\n     E0300, // unexpanded macro\n-    E0301, // cannot mutable borrow in a pattern guard\n-    E0302, // cannot assign in a pattern guard\n     E0304, // expected signed integer constant\n     E0305, // expected constant\n     E0306, // expected positive integer for repeat count"}]}