{"sha": "52c517383ef57f96ce1a97babc627d03329ac5e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYzUxNzM4M2VmNTdmOTZjZTFhOTdiYWJjNjI3ZDAzMzI5YWM1ZTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-08T02:48:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-08T03:59:06Z"}, "message": "improve borrowck error messages to explain regions better", "tree": {"sha": "6b35bf97dcd97bba87de0800fdd2b3882010290c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b35bf97dcd97bba87de0800fdd2b3882010290c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52c517383ef57f96ce1a97babc627d03329ac5e6", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52c517383ef57f96ce1a97babc627d03329ac5e6", "html_url": "https://github.com/rust-lang/rust/commit/52c517383ef57f96ce1a97babc627d03329ac5e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52c517383ef57f96ce1a97babc627d03329ac5e6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99af0d5480f9e0a81a1829c74db249a8c0c82c26", "url": "https://api.github.com/repos/rust-lang/rust/commits/99af0d5480f9e0a81a1829c74db249a8c0c82c26", "html_url": "https://github.com/rust-lang/rust/commit/99af0d5480f9e0a81a1829c74db249a8c0c82c26"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "6f8128b9b761ab29f7873cf6f7bbd4c08abfefcb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52c517383ef57f96ce1a97babc627d03329ac5e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c517383ef57f96ce1a97babc627d03329ac5e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=52c517383ef57f96ce1a97babc627d03329ac5e6", "patch": "@@ -2917,7 +2917,7 @@ class parser {\n                             body: d_body},\n                      span: d_s}\n                 };\n-                \n+\n                 kind = struct_variant_kind(@{\n                     traits: ~[],\n                     members: ms,"}, {"sha": "2fbfb4fe9f641ea9b8689d6bed7de6b3df2dc8e3", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52c517383ef57f96ce1a97babc627d03329ac5e6/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c517383ef57f96ce1a97babc627d03329ac5e6/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=52c517383ef57f96ce1a97babc627d03329ac5e6", "patch": "@@ -220,7 +220,7 @@ import syntax::visit;\n import syntax::ast_util;\n import syntax::ast_map;\n import syntax::codemap::span;\n-import util::ppaux::{ty_to_str, region_to_str};\n+import util::ppaux::{ty_to_str, region_to_str, explain_region};\n import std::map::{int_hash, hashmap, set};\n import std::list;\n import std::list::{list, cons, nil};\n@@ -626,16 +626,16 @@ impl to_str_methods for borrowck_ctxt {\n             ~\"rooting is not permitted\"\n           }\n           err_out_of_root_scope(super_scope, sub_scope) => {\n-            fmt!{\"managed value would have to be rooted for lifetime %s, \\\n-                  but can only be rooted for lifetime %s\",\n-                 self.region_to_str(sub_scope),\n-                 self.region_to_str(super_scope)}\n+            fmt!{\"managed value would have to be rooted for %s, \\\n+                  but can only be rooted for %s\",\n+                  explain_region(self.tcx, sub_scope),\n+                  explain_region(self.tcx, super_scope)}\n           }\n           err_out_of_scope(super_scope, sub_scope) => {\n-            fmt!{\"borrowed pointer has lifetime %s, \\\n-                  but the borrowed value only has lifetime %s\",\n-                 self.region_to_str(sub_scope),\n-                 self.region_to_str(super_scope)}\n+            fmt!{\"borrowed pointer must be valid for %s, \\\n+                  but the borrowed value is only valid for %s\",\n+                  explain_region(self.tcx, sub_scope),\n+                  explain_region(self.tcx, super_scope)}\n           }\n         }\n     }"}, {"sha": "b64c723213737f6842674e2c097724dd916f4fcd", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52c517383ef57f96ce1a97babc627d03329ac5e6/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c517383ef57f96ce1a97babc627d03329ac5e6/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=52c517383ef57f96ce1a97babc627d03329ac5e6", "patch": "@@ -27,7 +27,7 @@ import driver::session::session;\n fn explain_region(cx: ctxt, region: ty::region) -> ~str {\n     return match region {\n       re_scope(node_id) => {\n-        let scope_str = match cx.items.find(node_id) {\n+        match cx.items.find(node_id) {\n           some(ast_map::node_block(blk)) => {\n             explain_span(cx, ~\"block\", blk.span)\n           }\n@@ -42,36 +42,36 @@ fn explain_region(cx: ctxt, region: ty::region) -> ~str {\n             // this really should not happen\n             fmt!{\"unknown scope: %d.  Please report a bug.\", node_id}\n           }\n-        };\n-        fmt!{\"reference valid for the %s\", scope_str}\n+        }\n       }\n \n       re_free(id, br) => {\n         match cx.items.find(id) {\n           some(ast_map::node_block(blk)) => {\n-            fmt!{\"reference with lifetime %s as defined on %s\",\n+            fmt!{\"the lifetime %s as defined on %s\",\n                  bound_region_to_str(cx, br),\n                  explain_span(cx, ~\"the block\", blk.span)}\n           }\n           some(_) | none => {\n             // this really should not happen\n-            fmt!{\"reference with lifetime %s as defined on node %d\",\n+            fmt!{\"the lifetime %s as defined on node %d\",\n                  bound_region_to_str(cx, br), id}\n           }\n         }\n       }\n \n-      re_static => { ~\"reference to static data\" }\n+      re_static => { ~\"the static lifetime\" }\n \n-      // I believe these cases should not occur.\n+      // I believe these cases should not occur (except when debugging,\n+      // perhaps)\n       re_var(_) | re_bound(_) => {\n-        fmt!{\"reference with lifetime %?\", region}\n+        fmt!{\"lifetime %?\", region}\n       }\n     };\n \n     fn explain_span(cx: ctxt, heading: ~str, span: span) -> ~str {\n         let lo = codemap::lookup_char_pos_adj(cx.sess.codemap, span.lo);\n-        fmt!{\"%s at %u:%u\", heading, lo.line, lo.col}\n+        fmt!{\"the %s at %u:%u\", heading, lo.line, lo.col}\n     }\n }\n "}, {"sha": "cb78ca00fd2d80c51f7dff5b227cdad5b47c0d22", "filename": "src/test/compile-fail/borrowck-confuse-region.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52c517383ef57f96ce1a97babc627d03329ac5e6/src%2Ftest%2Fcompile-fail%2Fborrowck-confuse-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c517383ef57f96ce1a97babc627d03329ac5e6/src%2Ftest%2Fcompile-fail%2Fborrowck-confuse-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-confuse-region.rs?ref=52c517383ef57f96ce1a97babc627d03329ac5e6", "patch": "@@ -0,0 +1,14 @@\n+// Here we are checking that a reasonable error msg is provided.\n+//\n+// The current message is not ideal, but we used to say \"borrowed\n+// pointer has lifetime &, but the borrowed value only has lifetime &\"\n+// which is definitely no good.\n+\n+\n+fn get() -> &int {\n+    let x = 3;\n+    return &x;\n+    //~^ ERROR illegal borrow: borrowed pointer must be valid for the lifetime & as defined on the the block at 8:17, but the borrowed value is only valid for the block at 8:17\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "4342fa6e9617abd16dbd291855c8a3cfb9fc377e", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52c517383ef57f96ce1a97babc627d03329ac5e6/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c517383ef57f96ce1a97babc627d03329ac5e6/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=52c517383ef57f96ce1a97babc627d03329ac5e6", "patch": "@@ -7,7 +7,7 @@ fn foo(cond: fn() -> bool, box: fn() -> @int) {\n \n \t// Here we complain because the resulting region\n \t// of this borrow is the fn body as a whole.\n-        y = borrow(x); //~ ERROR managed value would have to be rooted for lifetime \n+        y = borrow(x); //~ ERROR illegal borrow: managed value would have to be rooted\n \n         assert *x == *y;\n         if cond() { break; }"}]}