{"sha": "1cf95059ebb6e01d4a914fbf84c9d56425265637", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZjk1MDU5ZWJiNmUwMWQ0YTkxNGZiZjg0YzlkNTY0MjUyNjU2Mzc=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-10T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-10T00:00:00Z"}, "message": "Borrow builder only once in debug derive", "tree": {"sha": "6663ceb155bc0983ee0ddeb9de03ac4ee152a1f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6663ceb155bc0983ee0ddeb9de03ac4ee152a1f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cf95059ebb6e01d4a914fbf84c9d56425265637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf95059ebb6e01d4a914fbf84c9d56425265637", "html_url": "https://github.com/rust-lang/rust/commit/1cf95059ebb6e01d4a914fbf84c9d56425265637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cf95059ebb6e01d4a914fbf84c9d56425265637/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7534b566c850f860e11735b27a988dd9eec454a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7534b566c850f860e11735b27a988dd9eec454a", "html_url": "https://github.com/rust-lang/rust/commit/f7534b566c850f860e11735b27a988dd9eec454a"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "cc6dac52d7663b13619b97b76e21fc9cba25924c", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1cf95059ebb6e01d4a914fbf84c9d56425265637/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cf95059ebb6e01d4a914fbf84c9d56425265637/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=1cf95059ebb6e01d4a914fbf84c9d56425265637", "patch": "@@ -77,16 +77,17 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n             // tuple struct/\"normal\" variant\n             let fn_path_debug_tuple = cx.std_path(&[sym::fmt, sym::Formatter, sym::debug_tuple]);\n             let expr = cx.expr_call_global(span, fn_path_debug_tuple, vec![fmt, name]);\n-            stmts.push(cx.stmt_let(span, true, builder, expr));\n+            let expr = make_mut_borrow(cx, span, expr);\n+            stmts.push(cx.stmt_let(span, false, builder, expr));\n \n             for field in fields {\n                 // Use double indirection to make sure this works for unsized types\n                 let field = cx.expr_addr_of(field.span, field.self_.clone());\n                 let field = cx.expr_addr_of(field.span, field);\n \n                 let fn_path_field = cx.std_path(&[sym::fmt, sym::DebugTuple, sym::field]);\n-                let builder_recv = make_mut_borrow(cx, span, builder_expr.clone());\n-                let expr = cx.expr_call_global(span, fn_path_field, vec![builder_recv, field]);\n+                let expr =\n+                    cx.expr_call_global(span, fn_path_field, vec![builder_expr.clone(), field]);\n \n                 // Use `let _ = expr;` to avoid triggering the\n                 // unused_results lint.\n@@ -99,7 +100,8 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n             // normal struct/struct variant\n             let fn_path_debug_struct = cx.std_path(&[sym::fmt, sym::Formatter, sym::debug_struct]);\n             let expr = cx.expr_call_global(span, fn_path_debug_struct, vec![fmt, name]);\n-            stmts.push(cx.stmt_let(DUMMY_SP, true, builder, expr));\n+            let expr = make_mut_borrow(cx, span, expr);\n+            stmts.push(cx.stmt_let(DUMMY_SP, false, builder, expr));\n \n             for field in fields {\n                 let name = cx.expr_lit(\n@@ -111,17 +113,18 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n                 let fn_path_field = cx.std_path(&[sym::fmt, sym::DebugStruct, sym::field]);\n                 let field = cx.expr_addr_of(field.span, field.self_.clone());\n                 let field = cx.expr_addr_of(field.span, field);\n-                let builder_recv = make_mut_borrow(cx, span, builder_expr.clone());\n-                let expr =\n-                    cx.expr_call_global(span, fn_path_field, vec![builder_recv, name, field]);\n+                let expr = cx.expr_call_global(\n+                    span,\n+                    fn_path_field,\n+                    vec![builder_expr.clone(), name, field],\n+                );\n                 stmts.push(stmt_let_underscore(cx, span, expr));\n             }\n             fn_path_finish = cx.std_path(&[sym::fmt, sym::DebugStruct, sym::finish]);\n         }\n     }\n \n-    let builder_recv = make_mut_borrow(cx, span, builder_expr);\n-    let expr = cx.expr_call_global(span, fn_path_finish, vec![builder_recv]);\n+    let expr = cx.expr_call_global(span, fn_path_finish, vec![builder_expr]);\n \n     stmts.push(cx.stmt_expr(expr));\n     let block = cx.block(span, stmts);"}, {"sha": "930492f24841fd4f714681e98c1b41e5d391cd84", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#7}-fmt.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 32, "deletions": 35, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1cf95059ebb6e01d4a914fbf84c9d56425265637/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%237%7D-fmt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/1cf95059ebb6e01d4a914fbf84c9d56425265637/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%237%7D-fmt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%237%7D-fmt.-------.InstrumentCoverage.0.html?ref=1cf95059ebb6e01d4a914fbf84c9d56425265637", "patch": "@@ -73,41 +73,38 @@\n 4:17-4:22: @0[2]: _3 = &amp;((*_1).0: usize)\n 4:17-4:22: @0[4]: _4 = &amp;((*_1).1: usize)\n 4:17-4:22: @0[6]: _5 = &amp;((*_1).2: usize)\n-4:17-4:22: @0[9]: _7 = &amp;mut (*_2)\n-4:17-4:22: @0[12]: _9 = const &quot;Version&quot;\n-4:17-4:22: @0[13]: _8 = &amp;(*_9)\n-4:17-4:22: @0.Call: _6 = std::fmt::Formatter::debug_struct(move _7, move _8) -&gt; [return: bb1, unwind: bb6]\n-4:17-4:22: @1[2]: FakeRead(ForLet, _6)\n-4:17-4:22: @1[7]: _12 = &amp;mut _6\n-4:17-4:22: @1[8]: _11 = &amp;mut (*_12)\n-4:17-4:22: @1[11]: _14 = const &quot;major&quot;\n-4:17-4:22: @1[12]: _13 = &amp;(*_14)\n-4:17-4:22: @1[17]: _18 = &amp;(*_3)\n-4:17-4:22: @1[18]: _17 = &amp;_18\n-4:17-4:22: @1[19]: _16 = &amp;(*_17)\n-4:17-4:22: @1[20]: _15 = move _16 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n-4:17-4:22: @1.Call: _10 = std::fmt::DebugStruct::field(move _11, move _13, move _15) -&gt; [return: bb2, unwind: bb6]\n-4:17-4:22: @2[11]: _21 = &amp;mut _6\n-4:17-4:22: @2[12]: _20 = &amp;mut (*_21)\n-4:17-4:22: @2[15]: _23 = const &quot;minor&quot;\n-4:17-4:22: @2[16]: _22 = &amp;(*_23)\n-4:17-4:22: @2[21]: _27 = &amp;(*_4)\n-4:17-4:22: @2[22]: _26 = &amp;_27\n-4:17-4:22: @2[23]: _25 = &amp;(*_26)\n-4:17-4:22: @2[24]: _24 = move _25 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n-4:17-4:22: @2.Call: _19 = std::fmt::DebugStruct::field(move _20, move _22, move _24) -&gt; [return: bb3, unwind: bb6]\n-4:17-4:22: @3[11]: _30 = &amp;mut _6\n-4:17-4:22: @3[12]: _29 = &amp;mut (*_30)\n-4:17-4:22: @3[15]: _32 = const &quot;patch&quot;\n-4:17-4:22: @3[16]: _31 = &amp;(*_32)\n-4:17-4:22: @3[21]: _36 = &amp;(*_5)\n-4:17-4:22: @3[22]: _35 = &amp;_36\n-4:17-4:22: @3[23]: _34 = &amp;(*_35)\n-4:17-4:22: @3[24]: _33 = move _34 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n-4:17-4:22: @3.Call: _28 = std::fmt::DebugStruct::field(move _29, move _31, move _33) -&gt; [return: bb4, unwind: bb6]\n-4:17-4:22: @4[10]: _38 = &amp;mut _6\n-4:17-4:22: @4[11]: _37 = &amp;mut (*_38)\n-4:17-4:22: @4.Call: _0 = std::fmt::DebugStruct::finish(move _37) -&gt; [return: bb5, unwind: bb6]\n+4:17-4:22: @0[10]: _8 = &amp;mut (*_2)\n+4:17-4:22: @0[13]: _10 = const &quot;Version&quot;\n+4:17-4:22: @0[14]: _9 = &amp;(*_10)\n+4:17-4:22: @0.Call: _7 = std::fmt::Formatter::debug_struct(move _8, move _9) -&gt; [return: bb1, unwind: bb6]\n+4:17-4:22: @1[2]: _6 = &amp;mut _7\n+4:17-4:22: @1[3]: FakeRead(ForLet, _6)\n+4:17-4:22: @1[7]: _12 = &amp;mut (*_6)\n+4:17-4:22: @1[10]: _14 = const &quot;major&quot;\n+4:17-4:22: @1[11]: _13 = &amp;(*_14)\n+4:17-4:22: @1[16]: _18 = &amp;(*_3)\n+4:17-4:22: @1[17]: _17 = &amp;_18\n+4:17-4:22: @1[18]: _16 = &amp;(*_17)\n+4:17-4:22: @1[19]: _15 = move _16 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n+4:17-4:22: @1.Call: _11 = std::fmt::DebugStruct::field(move _12, move _13, move _15) -&gt; [return: bb2, unwind: bb6]\n+4:17-4:22: @2[9]: _20 = &amp;mut (*_6)\n+4:17-4:22: @2[12]: _22 = const &quot;minor&quot;\n+4:17-4:22: @2[13]: _21 = &amp;(*_22)\n+4:17-4:22: @2[18]: _26 = &amp;(*_4)\n+4:17-4:22: @2[19]: _25 = &amp;_26\n+4:17-4:22: @2[20]: _24 = &amp;(*_25)\n+4:17-4:22: @2[21]: _23 = move _24 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n+4:17-4:22: @2.Call: _19 = std::fmt::DebugStruct::field(move _20, move _21, move _23) -&gt; [return: bb3, unwind: bb6]\n+4:17-4:22: @3[9]: _28 = &amp;mut (*_6)\n+4:17-4:22: @3[12]: _30 = const &quot;patch&quot;\n+4:17-4:22: @3[13]: _29 = &amp;(*_30)\n+4:17-4:22: @3[18]: _34 = &amp;(*_5)\n+4:17-4:22: @3[19]: _33 = &amp;_34\n+4:17-4:22: @3[20]: _32 = &amp;(*_33)\n+4:17-4:22: @3[21]: _31 = move _32 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n+4:17-4:22: @3.Call: _27 = std::fmt::DebugStruct::field(move _28, move _29, move _31) -&gt; [return: bb4, unwind: bb6]\n+4:17-4:22: @4[8]: _35 = &amp;mut (*_6)\n+4:17-4:22: @4.Call: _0 = std::fmt::DebugStruct::finish(move _35) -&gt; [return: bb5, unwind: bb6]\n 4:22-4:22: @5.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5\u298a</span>Debug<span class=\"annotation\">\u2989@0,1,2,3,4,5</span></span></span></span></div>\n </body>\n </html>"}]}