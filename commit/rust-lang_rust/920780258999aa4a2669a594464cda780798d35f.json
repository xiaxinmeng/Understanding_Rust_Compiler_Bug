{"sha": "920780258999aa4a2669a594464cda780798d35f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMDc4MDI1ODk5OWFhNGEyNjY5YTU5NDQ2NGNkYTc4MDc5OGQzNWY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-02T02:58:23Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-03T14:46:50Z"}, "message": "Remove vec::reversed, replaced by iterators.", "tree": {"sha": "170c98767bd537d4892bcf8b049eee9e78822f00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/170c98767bd537d4892bcf8b049eee9e78822f00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/920780258999aa4a2669a594464cda780798d35f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/920780258999aa4a2669a594464cda780798d35f", "html_url": "https://github.com/rust-lang/rust/commit/920780258999aa4a2669a594464cda780798d35f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/920780258999aa4a2669a594464cda780798d35f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0d696561a381e182c792acbe8f608c8be94c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0d696561a381e182c792acbe8f608c8be94c3b", "html_url": "https://github.com/rust-lang/rust/commit/de0d696561a381e182c792acbe8f608c8be94c3b"}], "stats": {"total": 54, "additions": 16, "deletions": 38}, "files": [{"sha": "338fd86ad1ee7fc89db6b86ea7af5f2e1ea2ed14", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/920780258999aa4a2669a594464cda780798d35f/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920780258999aa4a2669a594464cda780798d35f/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=920780258999aa4a2669a594464cda780798d35f", "patch": "@@ -520,10 +520,12 @@ impl ToStrRadix for BigUint {\n \n         fn fill_concat(v: &[BigDigit], radix: uint, l: uint) -> ~str {\n             if v.is_empty() { return ~\"0\" }\n-            let s = vec::reversed(v).map(|n| {\n-                let s = uint::to_str_radix(*n as uint, radix);\n-                str::from_chars(vec::from_elem(l - s.len(), '0')) + s\n-            }).concat();\n+            let mut s = str::with_capacity(v.len() * l);\n+            for v.rev_iter().advance |n| {\n+                let ss = uint::to_str_radix(*n as uint, radix);\n+                s.push_str(\"0\".repeat(l - ss.len()));\n+                s.push_str(ss);\n+            }\n             s.trim_left_chars(&'0').to_owned()\n         }\n     }\n@@ -1629,7 +1631,6 @@ mod bigint_tests {\n     use std::int;\n     use std::num::{IntConvertible, Zero, One, FromStrRadix};\n     use std::uint;\n-    use std::vec;\n \n     #[test]\n     fn test_from_biguint() {\n@@ -1646,9 +1647,11 @@ mod bigint_tests {\n \n     #[test]\n     fn test_cmp() {\n-        let vs = [ &[2], &[1, 1], &[2, 1], &[1, 1, 1] ];\n-        let mut nums = vec::reversed(vs)\n-            .map(|s| BigInt::from_slice(Minus, *s));\n+        let vs = [ &[2 as BigDigit], &[1, 1], &[2, 1], &[1, 1, 1] ];\n+        let mut nums = ~[];\n+        for vs.rev_iter().advance |s| {\n+            nums.push(BigInt::from_slice(Minus, *s));\n+        }\n         nums.push(Zero::zero());\n         nums.push_all_move(vs.map(|s| BigInt::from_slice(Plus, *s)));\n "}, {"sha": "ebd11e2f66856a3f1b1c37d4abd590c3ebe8e91e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/920780258999aa4a2669a594464cda780798d35f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920780258999aa4a2669a594464cda780798d35f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=920780258999aa4a2669a594464cda780798d35f", "patch": "@@ -41,7 +41,6 @@ use syntax::opt_vec::OptVec;\n \n use std::str;\n use std::uint;\n-use std::vec;\n use std::hashmap::{HashMap, HashSet};\n use std::util;\n \n@@ -5360,7 +5359,7 @@ impl Resolver {\n         if idents.len() == 0 {\n             return ~\"???\";\n         }\n-        return self.idents_to_str(vec::reversed(idents));\n+        return self.idents_to_str(idents.consume_rev_iter().collect::<~[ast::ident]>());\n     }\n \n     pub fn dump_module(@mut self, module_: @mut Module) {"}, {"sha": "b6d99d920e21ee3f89f5b1a1bc25c5be546e8dcf", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/920780258999aa4a2669a594464cda780798d35f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920780258999aa4a2669a594464cda780798d35f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=920780258999aa4a2669a594464cda780798d35f", "patch": "@@ -436,16 +436,6 @@ pub fn zip<T, U>(mut v: ~[T], mut u: ~[U]) -> ~[(T, U)] {\n     w\n }\n \n-/// Returns a vector with the order of elements reversed\n-pub fn reversed<T:Copy>(v: &[T]) -> ~[T] {\n-    let mut rs: ~[T] = ~[];\n-    let mut i = v.len();\n-    if i == 0 { return (rs); } else { i -= 1; }\n-    while i != 0 { rs.push(copy v[i]); i -= 1; }\n-    rs.push(copy v[0]);\n-    rs\n-}\n-\n /**\n  * Iterate over all permutations of vector `v`.\n  *\n@@ -2628,31 +2618,17 @@ mod tests {\n     }\n \n     #[test]\n-    fn reverse_and_reversed() {\n+    fn test_reverse() {\n         let mut v: ~[int] = ~[10, 20];\n         assert_eq!(v[0], 10);\n         assert_eq!(v[1], 20);\n         v.reverse();\n         assert_eq!(v[0], 20);\n         assert_eq!(v[1], 10);\n-        let v2 = reversed::<int>([10, 20]);\n-        assert_eq!(v2[0], 20);\n-        assert_eq!(v2[1], 10);\n-        v[0] = 30;\n-        assert_eq!(v2[0], 20);\n-        // Make sure they work with 0-length vectors too.\n-\n-        let v4 = reversed::<int>([]);\n-        assert_eq!(v4, ~[]);\n+\n         let mut v3: ~[int] = ~[];\n         v3.reverse();\n-    }\n-\n-    #[test]\n-    fn reversed_mut() {\n-        let v2 = reversed::<int>([10, 20]);\n-        assert_eq!(v2[0], 20);\n-        assert_eq!(v2[1], 10);\n+        assert!(v3.is_empty());\n     }\n \n     #[test]"}, {"sha": "d09ef3bc25c3a45d3ecf1a4579f1a63dafafeff9", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/920780258999aa4a2669a594464cda780798d35f/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920780258999aa4a2669a594464cda780798d35f/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=920780258999aa4a2669a594464cda780798d35f", "patch": "@@ -17,5 +17,5 @@ use std::vec::*;\n pub fn main() {\n     let mut v = from_elem(0u, 0);\n     v = append(v, ~[4, 2]);\n-    assert_eq!(reversed(v), ~[2, 4]);\n+    assert_eq!(from_fn(2, |i| 2*(i+1)), ~[2, 4]);\n }"}]}