{"sha": "90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNzgyY2I1MGJhNmQxZjJlYTk3Y2Y3NGEzYjA2ZWNhNmJlZjhiNTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-09T00:08:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-09T00:08:13Z"}, "message": "Auto merge of #76502 - Dylan-DPC:rollup-2c4zz0t, r=Dylan-DPC\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #76162 (Make duration_since documentation more clear)\n - #76355 (remove public visibility previously needed for rustfmt)\n - #76374 (Improve ayu doc source line number contrast)\n - #76379 (rustbuild: Remove `Mode::Codegen`)\n - #76389 (Fix HashMap visualizers in Visual Studio (Code))\n - #76396 (Fix typo in tracking issue template)\n - #76401 (Add help note to unconstrained const parameter)\n - #76402 (Update linker-plugin-lto.md to contain up to rust 1.46)\n - #76403 (Fix documentation for TyCtxt::all_impls)\n - #76498 (Update cargo)\n\nFailed merges:\n\n - #76458 (Add drain_filter method to HashMap and HashSet)\n\nr? `@ghost`", "tree": {"sha": "8c6c6063d8b622a8bc8078688bfc4c8137c9c33a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c6c6063d8b622a8bc8078688bfc4c8137c9c33a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "html_url": "https://github.com/rust-lang/rust/commit/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5099914a16a215794ad243df0cc7a05d91d168e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5099914a16a215794ad243df0cc7a05d91d168e0", "html_url": "https://github.com/rust-lang/rust/commit/5099914a16a215794ad243df0cc7a05d91d168e0"}, {"sha": "389321a41e61666fd68982570983c3061ab3047e", "url": "https://api.github.com/repos/rust-lang/rust/commits/389321a41e61666fd68982570983c3061ab3047e", "html_url": "https://github.com/rust-lang/rust/commit/389321a41e61666fd68982570983c3061ab3047e"}], "stats": {"total": 123, "additions": 85, "deletions": 38}, "files": [{"sha": "24f43213897130267337f92ee6fad8ae33c2bd5f", "filename": ".github/ISSUE_TEMPLATE/tracking_issue.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/.github%2FISSUE_TEMPLATE%2Ftracking_issue.md", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/.github%2FISSUE_TEMPLATE%2Ftracking_issue.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Ftracking_issue.md?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -23,7 +23,7 @@ The feature gate for the issue is `#![feature(FFF)]`.\n ### About tracking issues\n \n Tracking issues are used to record the overall progress of implementation.\n-They are also uses as hubs connecting to other relevant issues, e.g., bugs or open design questions.\n+They are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\n A tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\n Instead, open a dedicated issue for the specific matter and add the relevant feature gate label.\n "}, {"sha": "fefc0bdeb7cc26338d651762a30a19d254870e96", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -219,8 +219,7 @@ fn error_cannot_declare_mod_here<'a, T>(\n \n /// Derive a submodule path from the first found `#[path = \"path_string\"]`.\n /// The provided `dir_path` is joined with the `path_string`.\n-// Public for rustfmt usage.\n-pub fn submod_path_from_attr(\n+pub(super) fn submod_path_from_attr(\n     sess: &Session,\n     attrs: &[Attribute],\n     dir_path: &Path,"}, {"sha": "9d5b558234b3af16eb59ad54f74eea279b84c128", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -167,7 +167,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// Returns a vector containing all impls\n+    /// Returns an iterator containing all impls\n     pub fn all_impls(self, def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {\n         let TraitImpls { blanket_impls, non_blanket_impls } = self.trait_impls_of(def_id);\n "}, {"sha": "4901d6041d6f02bdc54e90b32e1b421eac9a7465", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -187,7 +187,7 @@ fn enforce_impl_params_are_constrained(\n     }\n \n     // (*) This is a horrible concession to reality. I think it'd be\n-    // better to just ban unconstrianed lifetimes outright, but in\n+    // better to just ban unconstrained lifetimes outright, but in\n     // practice people do non-hygenic macros like:\n     //\n     // ```\n@@ -207,17 +207,25 @@ fn enforce_impl_params_are_constrained(\n }\n \n fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: &str) {\n-    struct_span_err!(\n+    let mut err = struct_span_err!(\n         tcx.sess,\n         span,\n         E0207,\n         \"the {} parameter `{}` is not constrained by the \\\n         impl trait, self type, or predicates\",\n         kind,\n         name\n-    )\n-    .span_label(span, format!(\"unconstrained {} parameter\", kind))\n-    .emit();\n+    );\n+    err.span_label(span, format!(\"unconstrained {} parameter\", kind));\n+    if kind == \"const\" {\n+        err.note(\n+            \"expressions using a const parameter must map each value to a distinct output value\",\n+        );\n+        err.note(\n+            \"proving the result of expressions other than the parameter are unique is not supported\",\n+        );\n+    }\n+    err.emit();\n }\n \n /// Enforce that we do not have two items in an impl with the same name."}, {"sha": "18e38c6299b72e75906fa8d32f5948b5d6790b9f", "filename": "library/std/src/time.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -460,12 +460,13 @@ impl SystemTime {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::time::SystemTime;\n     ///\n     /// let sys_time = SystemTime::now();\n-    /// let difference = sys_time.duration_since(sys_time)\n-    ///                          .expect(\"Clock may have gone backwards\");\n+    /// let new_sys_time = SystemTime::now();\n+    /// let difference = new_sys_time.duration_since(sys_time)\n+    ///     .expect(\"Clock may have gone backwards\");\n     /// println!(\"{:?}\", difference);\n     /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]"}, {"sha": "01dbb48354825cc15713855fcb647e95b2dbff3f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -797,7 +797,7 @@ impl<'a> Builder<'a> {\n         if cmd == \"doc\" || cmd == \"rustdoc\" {\n             let my_out = match mode {\n                 // This is the intended out directory for compiler documentation.\n-                Mode::Rustc | Mode::ToolRustc | Mode::Codegen => self.compiler_doc_out(target),\n+                Mode::Rustc | Mode::ToolRustc => self.compiler_doc_out(target),\n                 Mode::Std => out_dir.join(target.triple).join(\"doc\"),\n                 _ => panic!(\"doc mode {:?} not expected\", mode),\n             };\n@@ -875,7 +875,7 @@ impl<'a> Builder<'a> {\n \n         match mode {\n             Mode::Std | Mode::ToolBootstrap | Mode::ToolStd => {}\n-            Mode::Rustc | Mode::Codegen | Mode::ToolRustc => {\n+            Mode::Rustc | Mode::ToolRustc => {\n                 // Build proc macros both for the host and the target\n                 if target != compiler.host && cmd != \"check\" {\n                     cargo.arg(\"-Zdual-proc-macros\");\n@@ -1060,7 +1060,7 @@ impl<'a> Builder<'a> {\n         }\n \n         let debuginfo_level = match mode {\n-            Mode::Rustc | Mode::Codegen => self.config.rust_debuginfo_level_rustc,\n+            Mode::Rustc => self.config.rust_debuginfo_level_rustc,\n             Mode::Std => self.config.rust_debuginfo_level_std,\n             Mode::ToolBootstrap | Mode::ToolStd | Mode::ToolRustc => {\n                 self.config.rust_debuginfo_level_tools\n@@ -1197,7 +1197,7 @@ impl<'a> Builder<'a> {\n             rustdocflags.arg(\"-Winvalid_codeblock_attributes\");\n         }\n \n-        if let Mode::Rustc | Mode::Codegen = mode {\n+        if mode == Mode::Rustc {\n             rustflags.arg(\"-Zunstable-options\");\n             rustflags.arg(\"-Wrustc::internal\");\n         }\n@@ -1360,7 +1360,7 @@ impl<'a> Builder<'a> {\n         // When we build Rust dylibs they're all intended for intermediate\n         // usage, so make sure we pass the -Cprefer-dynamic flag instead of\n         // linking all deps statically into the dylib.\n-        if let Mode::Std | Mode::Rustc | Mode::Codegen = mode {\n+        if matches!(mode, Mode::Std | Mode::Rustc) {\n             rustflags.arg(\"-Cprefer-dynamic\");\n         }\n "}, {"sha": "c1dec8ed1813172d9a4a470421fb4cfd4f0779e7", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -298,9 +298,6 @@ pub enum Mode {\n     /// Build librustc, and compiler libraries, placing output in the \"stageN-rustc\" directory.\n     Rustc,\n \n-    /// Build codegen libraries, placing output in the \"stageN-codegen\" directory\n-    Codegen,\n-\n     /// Build a tool, placing output in the \"stage0-bootstrap-tools\"\n     /// directory. This is for miscellaneous sets of tools that are built\n     /// using the bootstrap stage0 compiler in its entirety (target libraries\n@@ -570,7 +567,6 @@ impl Build {\n         let suffix = match mode {\n             Mode::Std => \"-std\",\n             Mode::Rustc => \"-rustc\",\n-            Mode::Codegen => \"-codegen\",\n             Mode::ToolBootstrap => \"-bootstrap-tools\",\n             Mode::ToolStd | Mode::ToolRustc => \"-tools\",\n         };"}, {"sha": "f7843abf4d6f2b1d7eeadb8b1159f79c83b52aed", "filename": "src/doc/rustc/src/linker-plugin-lto.md", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -100,17 +100,20 @@ LLVM. However, the approximation is usually reliable.\n \n The following table shows known good combinations of toolchain versions.\n \n-|           |  Clang 7  |  Clang 8  |  Clang 9  |\n-|-----------|-----------|-----------|-----------|\n-| Rust 1.34 |     \u2717     |     \u2713     |     \u2717     |\n-| Rust 1.35 |     \u2717     |     \u2713     |     \u2717     |\n-| Rust 1.36 |     \u2717     |     \u2713     |     \u2717     |\n-| Rust 1.37 |     \u2717     |     \u2713     |     \u2717     |\n-| Rust 1.38 |     \u2717     |     \u2717     |     \u2713     |\n-| Rust 1.39 |     \u2717     |     \u2717     |     \u2713     |\n-| Rust 1.40 |     \u2717     |     \u2717     |     \u2713     |\n-| Rust 1.41 |     \u2717     |     \u2717     |     \u2713     |\n-| Rust 1.42 |     \u2717     |     \u2717     |     \u2713     |\n-| Rust 1.43 |     \u2717     |     \u2717     |     \u2713     |\n+| Rust Version | Clang Version |\n+|--------------|---------------|\n+| Rust 1.34    |    Clang 8    |\n+| Rust 1.35    |    Clang 8    |\n+| Rust 1.36    |    Clang 8    |\n+| Rust 1.37    |    Clang 8    |\n+| Rust 1.38    |    Clang 9    |\n+| Rust 1.39    |    Clang 9    |\n+| Rust 1.40    |    Clang 9    |\n+| Rust 1.41    |    Clang 9    |\n+| Rust 1.42    |    Clang 9    |\n+| Rust 1.43    |    Clang 9    |\n+| Rust 1.44    |    Clang 9    |\n+| Rust 1.45    |    Clang 10   |\n+| Rust 1.46    |    Clang 10   |\n \n Note that the compatibility policy for this feature might change in the future."}, {"sha": "f791979800f19d28bcc924451fdb6083e3860f57", "filename": "src/etc/natvis/libstd.natvis", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Fetc%2Fnatvis%2Flibstd.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Fetc%2Fnatvis%2Flibstd.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibstd.natvis?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -41,7 +41,7 @@\n           <If Condition=\"(base.table.ctrl.pointer[i] &amp; 0x80) == 0\">\n             <!-- Bucket is populated -->\n             <Exec>n--</Exec>\n-            <Item Name=\"{static_cast&lt;tuple&lt;$T1, $T2&gt;*&gt;(base.table.ctrl.pointer)[-(i + 1)].__0}\">static_cast&lt;tuple&lt;$T1, $T2&gt;*&gt;(base.table.ctrl.pointer)[-(i + 1)].__1</Item>\n+            <Item Name=\"{((tuple&lt;$T1, $T2&gt;*)base.table.ctrl.pointer)[-(i + 1)].__0}\">((tuple&lt;$T1, $T2&gt;*)base.table.ctrl.pointer)[-(i + 1)].__1</Item>\n           </If>\n           <Exec>i++</Exec>\n         </Loop>\n@@ -65,7 +65,7 @@\n           <If Condition=\"(map.base.table.ctrl.pointer[i] &amp; 0x80) == 0\">\n             <!-- Bucket is populated -->\n             <Exec>n--</Exec>\n-            <Item>static_cast&lt;$T1*&gt;(map.base.table.ctrl.pointer)[-(i + 1)]</Item>\n+            <Item>(($T1*)map.base.table.ctrl.pointer)[-(i + 1)]</Item>\n           </If>\n           <Exec>i++</Exec>\n         </Loop>"}, {"sha": "ba79c16afd2920173a31ff726141e236cc5762ef", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -129,9 +129,10 @@ pre {\n \tcolor: #ffb44c;\n }\n \n-.line-numbers span { color: #5c6773ab; }\n+.line-numbers span { color: #5c6773; }\n .line-numbers .line-highlighted {\n-\tbackground-color: rgba(255, 236, 164, 0.06) !important;\n+\tcolor: #708090;\n+\tbackground-color: rgba(255, 236, 164, 0.06);\n \tpadding-right: 4px;\n \tborder-right: 1px solid #ffb44c;\n }"}, {"sha": "a06b99d6645ec9b073c76fd39a2ab3702ea70754", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -0,0 +1,18 @@\n+// Checks that const expressions have a useful note explaining why they can't be evaluated.\n+// The note should relate to the fact that it cannot be shown forall N that it maps 1-1 to a new\n+// type.\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Collatz<const N: Option<usize>>;\n+\n+impl <const N: usize> Collatz<{Some(N)}> {}\n+//~^ ERROR the const parameter\n+\n+struct Foo;\n+\n+impl<const N: usize> Foo {}\n+//~^ ERROR the const parameter\n+\n+fn main() {}"}, {"sha": "bba16f421535a21c23174c5868341cf8b542cc6c", "filename": "src/test/ui/const-generics/issues/issue-68366.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.stderr?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -0,0 +1,21 @@\n+error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-68366.rs:10:13\n+   |\n+LL | impl <const N: usize> Collatz<{Some(N)}> {}\n+   |             ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-68366.rs:15:12\n+   |\n+LL | impl<const N: usize> Foo {}\n+   |            ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "875e0123259b0b6299903fe4aea0a12ecde9324f", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "patch": "@@ -1 +1 @@\n-Subproject commit 126907a7cfccbe93778530e6a6bbaa3adb6c515c\n+Subproject commit 875e0123259b0b6299903fe4aea0a12ecde9324f"}]}