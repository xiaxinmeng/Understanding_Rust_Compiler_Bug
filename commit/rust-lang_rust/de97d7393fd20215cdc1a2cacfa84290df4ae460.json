{"sha": "de97d7393fd20215cdc1a2cacfa84290df4ae460", "node_id": "C_kwDOAAsO6NoAKGRlOTdkNzM5M2ZkMjAyMTVjZGMxYTJjYWNmYTg0MjkwZGY0YWU0NjA", "commit": {"author": {"name": "AngelicosPhosphoros", "email": "xuzin.timur@gmail.com", "date": "2022-05-20T12:38:04Z"}, "committer": {"name": "AngelicosPhosphoros", "email": "xuzin.timur@gmail.com", "date": "2022-05-20T15:46:24Z"}, "message": "Add complexity estimation of iterating over HashSet and HashMap\n\nIt is not obvious (at least for me) that complexity of iteration over hash tables depends on capacity and not length. Especially comparing with other containers like Vec or String. I think, this behaviour is worth mentioning.\n\nI run benchmark which tests iteration time for maps with length 50 and different capacities and get this results:\n```\ncapacity - time\n64       - 203.87 ns\n256      - 351.78 ns\n1024     - 607.87 ns\n4096     - 965.82 ns\n16384    - 3.1188 us\n```\n\nIf you want to dig why it behaves such way, you can look current implementation in [hashbrown code](https://github.com/rust-lang/hashbrown/blob/f3a9f211d06f78c5beb81ac22ea08fdc269e068f/src/raw/mod.rs#L1933).\n\nBenchmarks code would be presented in PR related to this commit.", "tree": {"sha": "05078be60065b3bc6c52efcc47a31b9ab4883b73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05078be60065b3bc6c52efcc47a31b9ab4883b73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de97d7393fd20215cdc1a2cacfa84290df4ae460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de97d7393fd20215cdc1a2cacfa84290df4ae460", "html_url": "https://github.com/rust-lang/rust/commit/de97d7393fd20215cdc1a2cacfa84290df4ae460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de97d7393fd20215cdc1a2cacfa84290df4ae460/comments", "author": {"login": "AngelicosPhosphoros", "id": 13154246, "node_id": "MDQ6VXNlcjEzMTU0MjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/13154246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AngelicosPhosphoros", "html_url": "https://github.com/AngelicosPhosphoros", "followers_url": "https://api.github.com/users/AngelicosPhosphoros/followers", "following_url": "https://api.github.com/users/AngelicosPhosphoros/following{/other_user}", "gists_url": "https://api.github.com/users/AngelicosPhosphoros/gists{/gist_id}", "starred_url": "https://api.github.com/users/AngelicosPhosphoros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AngelicosPhosphoros/subscriptions", "organizations_url": "https://api.github.com/users/AngelicosPhosphoros/orgs", "repos_url": "https://api.github.com/users/AngelicosPhosphoros/repos", "events_url": "https://api.github.com/users/AngelicosPhosphoros/events{/privacy}", "received_events_url": "https://api.github.com/users/AngelicosPhosphoros/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AngelicosPhosphoros", "id": 13154246, "node_id": "MDQ6VXNlcjEzMTU0MjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/13154246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AngelicosPhosphoros", "html_url": "https://github.com/AngelicosPhosphoros", "followers_url": "https://api.github.com/users/AngelicosPhosphoros/followers", "following_url": "https://api.github.com/users/AngelicosPhosphoros/following{/other_user}", "gists_url": "https://api.github.com/users/AngelicosPhosphoros/gists{/gist_id}", "starred_url": "https://api.github.com/users/AngelicosPhosphoros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AngelicosPhosphoros/subscriptions", "organizations_url": "https://api.github.com/users/AngelicosPhosphoros/orgs", "repos_url": "https://api.github.com/users/AngelicosPhosphoros/repos", "events_url": "https://api.github.com/users/AngelicosPhosphoros/events{/privacy}", "received_events_url": "https://api.github.com/users/AngelicosPhosphoros/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd73afadae5b0163f9285f1b5edbbd1c84fde410", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd73afadae5b0163f9285f1b5edbbd1c84fde410", "html_url": "https://github.com/rust-lang/rust/commit/cd73afadae5b0163f9285f1b5edbbd1c84fde410"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "969f5dde4f05d915c7c70943b47000df0c10624b", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/de97d7393fd20215cdc1a2cacfa84290df4ae460/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de97d7393fd20215cdc1a2cacfa84290df4ae460/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=de97d7393fd20215cdc1a2cacfa84290df4ae460", "patch": "@@ -344,6 +344,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"{key}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over keys takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn keys(&self) -> Keys<'_, K, V> {\n         Keys { inner: self.iter() }\n@@ -370,6 +375,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// vec.sort_unstable();\n     /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over keys takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[inline]\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n@@ -395,6 +405,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"{val}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over values takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn values(&self) -> Values<'_, K, V> {\n         Values { inner: self.iter() }\n@@ -422,6 +437,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"{val}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over values takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n     pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {\n         ValuesMut { inner: self.iter_mut() }\n@@ -448,6 +468,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// vec.sort_unstable();\n     /// assert_eq!(vec, [1, 2, 3]);\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over values takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[inline]\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n@@ -473,6 +498,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {key} val: {val}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over map takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, K, V> {\n@@ -503,6 +533,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {key} val: {val}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over map takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n@@ -633,6 +668,11 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// map.retain(|&k, _| k % 2 == 0);\n     /// assert_eq!(map.len(), 4);\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, this operation takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[inline]\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]"}, {"sha": "4ac0e081c2e2d2bbcac2c1ca92a8726207d6e428", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de97d7393fd20215cdc1a2cacfa84290df4ae460/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de97d7393fd20215cdc1a2cacfa84290df4ae460/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=de97d7393fd20215cdc1a2cacfa84290df4ae460", "patch": "@@ -184,6 +184,11 @@ impl<T, S> HashSet<T, S> {\n     ///     println!(\"{x}\");\n     /// }\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, iterating over set takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[inline]\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -312,6 +317,11 @@ impl<T, S> HashSet<T, S> {\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);\n     /// ```\n+    ///\n+    /// # Performance\n+    ///\n+    /// In the current implementation, this operation takes O(capacity) time\n+    /// instead of O(len) because it internally visits empty buckets too.\n     #[rustc_lint_query_instability]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)"}]}