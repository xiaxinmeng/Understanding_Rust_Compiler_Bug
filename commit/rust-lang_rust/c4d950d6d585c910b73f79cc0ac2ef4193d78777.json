{"sha": "c4d950d6d585c910b73f79cc0ac2ef4193d78777", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZDk1MGQ2ZDU4NWM5MTBiNzNmNzljYzBhYzJlZjQxOTNkNzg3Nzc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-02T19:32:44Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-03T02:35:27Z"}, "message": "Rollup merge of #33323 - birkenfeld:issue-31221, r=Manishearth\n\nmatch check: note \"catchall\" patterns in unreachable error\n\nCaught as catchall patterns are:\n\n* unconditional name bindings\n* references to them\n* tuple bindings with catchall elements\n\nFixes #31221.", "tree": {"sha": "071a99bd30d40ca68f34def864eab61abcac811b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071a99bd30d40ca68f34def864eab61abcac811b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4d950d6d585c910b73f79cc0ac2ef4193d78777", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXKA5vAAoJEDu/TT4u95+YqtEQAMs118tDa2+cONsaHHfh6Fre\nrmv05Fnrp1QHZBM2DIG6PaIYqHUmHPt9aXZShDEEuOB2J5WnB/01Ps+exLGpSqmI\nPmEMABkTukI/YdnDuABcfRBqU/ATIV3Fnv0PH8gRzHVaiqTFxsSmDB4OQiK1Ab7f\nXxRefYV94mM9xFVHI3MX6jvD1nmu+DlpugBlkT0PovMFFVOub5tjDV8OWOmQ5Ofj\nF4kFiTiSE3yq5lbBoSLcx+MVa+H0FOuaYUjcwlAmkqfSQ8eCXIA2+YGo/+905erI\nNTmNY3GxYVUocEVYiEu7HwSwtsyxzSbf0x7hOF4IB+Wmj5b62A84LL+MaOpPPZlz\nLBJaE29maibBjJFKZn1Q8+U/1hRNwffDMiklELO9UKVMD+uoVchwQe4G0nzo0dJz\ne6pFASyfMccZMpp9vqqZkbtIRUSdvWXjdLQttGZU+YJ6TvmboLPefOls3bergirz\n3fmLjI3/otKKVtiGFNvb0dWxx19TTDK/odJanOWatCjsI9toIElflmiauARV87RE\nvSlxWSd0XZSWz24R/D8OhVKf88/zglcW/hh59gIu63BcS6b8nW7RDv7vc14IUFxA\nWCJEGMTq7T3h+acuycK/+7iTmaxhNbo3d8nqqlutlyZ3ZShzvP2OV9ujiFaTwEXD\nACBnwETC8nNjCq+VkiZP\n=fFda\n-----END PGP SIGNATURE-----", "payload": "tree 071a99bd30d40ca68f34def864eab61abcac811b\nparent 1d6cc191fc65784dc533cfd3a59262cd8c299e3c\nparent b51698ad60ecad793ac745be676d3f059bea4b80\nauthor Manish Goregaokar <manishsmail@gmail.com> 1462217564 +0530\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1462242927 +0530\n\nRollup merge of #33323 - birkenfeld:issue-31221, r=Manishearth\n\nmatch check: note \"catchall\" patterns in unreachable error\n\nCaught as catchall patterns are:\n\n* unconditional name bindings\n* references to them\n* tuple bindings with catchall elements\n\nFixes #31221.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4d950d6d585c910b73f79cc0ac2ef4193d78777", "html_url": "https://github.com/rust-lang/rust/commit/c4d950d6d585c910b73f79cc0ac2ef4193d78777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4d950d6d585c910b73f79cc0ac2ef4193d78777/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d6cc191fc65784dc533cfd3a59262cd8c299e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6cc191fc65784dc533cfd3a59262cd8c299e3c", "html_url": "https://github.com/rust-lang/rust/commit/1d6cc191fc65784dc533cfd3a59262cd8c299e3c"}, {"sha": "b51698ad60ecad793ac745be676d3f059bea4b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/b51698ad60ecad793ac745be676d3f059bea4b80", "html_url": "https://github.com/rust-lang/rust/commit/b51698ad60ecad793ac745be676d3f059bea4b80"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "0207fa52d8de5ae91b5342f7e330101352fa556b", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c4d950d6d585c910b73f79cc0ac2ef4193d78777/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d950d6d585c910b73f79cc0ac2ef4193d78777/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=c4d950d6d585c910b73f79cc0ac2ef4193d78777", "patch": "@@ -341,7 +341,15 @@ fn check_arms(cx: &MatchCheckCtxt,\n                         },\n \n                         hir::MatchSource::Normal => {\n-                            span_err!(cx.tcx.sess, pat.span, E0001, \"unreachable pattern\")\n+                            let mut err = struct_span_err!(cx.tcx.sess, pat.span, E0001,\n+                                                           \"unreachable pattern\");\n+                            // if we had a catchall pattern, hint at that\n+                            for row in &seen.0 {\n+                                if pat_is_catchall(&cx.tcx.def_map.borrow(), row[0]) {\n+                                    span_note!(err, row[0].span, \"this pattern matches any value\");\n+                                }\n+                            }\n+                            err.emit();\n                         },\n \n                         hir::MatchSource::TryDesugar => {\n@@ -361,7 +369,18 @@ fn check_arms(cx: &MatchCheckCtxt,\n     }\n }\n \n-fn raw_pat<'a>(p: &'a Pat) -> &'a Pat {\n+/// Checks for common cases of \"catchall\" patterns that may not be intended as such.\n+fn pat_is_catchall(dm: &DefMap, p: &Pat) -> bool {\n+    match p.node {\n+        PatKind::Ident(_, _, None) => pat_is_binding(dm, p),\n+        PatKind::Ident(_, _, Some(ref s)) => pat_is_catchall(dm, &s),\n+        PatKind::Ref(ref s, _) => pat_is_catchall(dm, &s),\n+        PatKind::Tup(ref v) => v.iter().all(|p| pat_is_catchall(dm, &p)),\n+        _ => false\n+    }\n+}\n+\n+fn raw_pat(p: &Pat) -> &Pat {\n     match p.node {\n         PatKind::Ident(_, _, Some(ref s)) => raw_pat(&s),\n         _ => p"}, {"sha": "2b3df9ad1d83b7fe8dc02bb3fff1c65fec2bdfbd", "filename": "src/test/compile-fail/issue-31221.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c4d950d6d585c910b73f79cc0ac2ef4193d78777/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4d950d6d585c910b73f79cc0ac2ef4193d78777/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs?ref=c4d950d6d585c910b73f79cc0ac2ef4193d78777", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Enum {\n+    Var1,\n+    Var2,\n+}\n+\n+fn main() {\n+    use Enum::*;\n+    let s = Var1;\n+    match s {\n+        Var1 => (),\n+        Var3 => (),\n+        //~^ NOTE this pattern matches any value\n+        Var2 => (),\n+        //~^ ERROR unreachable pattern\n+    };\n+    match &s {\n+        &Var1 => (),\n+        &Var3 => (),\n+        //~^ NOTE this pattern matches any value\n+        &Var2 => (),\n+        //~^ ERROR unreachable pattern\n+    };\n+    let t = (Var1, Var1);\n+    match t {\n+        (Var1, b) => (),\n+        (c, d) => (),\n+        //~^ NOTE this pattern matches any value\n+        anything => ()\n+        //~^ ERROR unreachable pattern\n+    };\n+    // `_` need not emit a note, it is pretty obvious already.\n+    let t = (Var1, Var1);\n+    match t {\n+        (Var1, b) => (),\n+        _ => (),\n+        anything => ()\n+        //~^ ERROR unreachable pattern\n+    };\n+}"}]}