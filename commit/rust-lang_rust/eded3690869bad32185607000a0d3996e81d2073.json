{"sha": "eded3690869bad32185607000a0d3996e81d2073", "node_id": "C_kwDOAAsO6NoAKGVkZWQzNjkwODY5YmFkMzIxODU2MDcwMDBhMGQzOTk2ZTgxZDIwNzM", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-10-01T13:37:48Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-10-01T13:37:48Z"}, "message": "Update Cranelift\n\nThis version no longer has the old x86 backend", "tree": {"sha": "603362f9793cd3442f38bcb9606ac1ca530254af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/603362f9793cd3442f38bcb9606ac1ca530254af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eded3690869bad32185607000a0d3996e81d2073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eded3690869bad32185607000a0d3996e81d2073", "html_url": "https://github.com/rust-lang/rust/commit/eded3690869bad32185607000a0d3996e81d2073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eded3690869bad32185607000a0d3996e81d2073/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc61fb263d7f51b29d5e6b92ef583b577a849fff", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc61fb263d7f51b29d5e6b92ef583b577a849fff", "html_url": "https://github.com/rust-lang/rust/commit/bc61fb263d7f51b29d5e6b92ef583b577a849fff"}], "stats": {"total": 72, "additions": 24, "deletions": 48}, "files": [{"sha": "e2f6b92e6bab4104bbaf9a5e98e507333fe784e1", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eded3690869bad32185607000a0d3996e81d2073/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/eded3690869bad32185607000a0d3996e81d2073/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=eded3690869bad32185607000a0d3996e81d2073", "patch": "@@ -34,15 +34,15 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n [[package]]\n name = \"cranelift-bforest\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#fa108d9a86827a28c7bfb8ff98033734b2a5fd33\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#fa108d9a86827a28c7bfb8ff98033734b2a5fd33\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n dependencies = [\n  \"cranelift-bforest\",\n  \"cranelift-codegen-meta\",\n@@ -58,7 +58,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-meta\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#fa108d9a86827a28c7bfb8ff98033734b2a5fd33\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n@@ -67,17 +67,17 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-shared\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#fa108d9a86827a28c7bfb8ff98033734b2a5fd33\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n \n [[package]]\n name = \"cranelift-entity\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#fa108d9a86827a28c7bfb8ff98033734b2a5fd33\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n \n [[package]]\n name = \"cranelift-frontend\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#fa108d9a86827a28c7bfb8ff98033734b2a5fd33\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -88,7 +88,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-jit\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#fa108d9a86827a28c7bfb8ff98033734b2a5fd33\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -105,7 +105,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-module\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#fa108d9a86827a28c7bfb8ff98033734b2a5fd33\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -116,7 +116,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-native\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#fa108d9a86827a28c7bfb8ff98033734b2a5fd33\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"libc\",\n@@ -126,7 +126,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-object\"\n version = \"0.77.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#fa108d9a86827a28c7bfb8ff98033734b2a5fd33\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#bae4ec642798ff448ca88eab771b6fcea71e7884\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\","}, {"sha": "dd19dd5d2b91c02c84a7684ab0a10c64e1252ea0", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/eded3690869bad32185607000a0d3996e81d2073/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eded3690869bad32185607000a0d3996e81d2073/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=eded3690869bad32185607000a0d3996e81d2073", "patch": "@@ -10,7 +10,7 @@ use crate::prelude::*;\n use rustc_index::vec::IndexVec;\n \n use cranelift_codegen::entity::EntityRef;\n-use cranelift_codegen::ir::{LabelValueLoc, StackSlots, ValueLabel, ValueLoc};\n+use cranelift_codegen::ir::{LabelValueLoc, ValueLabel};\n use cranelift_codegen::isa::TargetIsa;\n use cranelift_codegen::ValueLocRange;\n \n@@ -67,7 +67,12 @@ impl<'tcx> DebugContext<'tcx> {\n             rustc_interface::util::version_str().unwrap_or(\"unknown version\"),\n             cranelift_codegen::VERSION,\n         );\n-        let comp_dir = tcx.sess.opts.working_dir.to_string_lossy(FileNameDisplayPreference::Remapped).into_owned();\n+        let comp_dir = tcx\n+            .sess\n+            .opts\n+            .working_dir\n+            .to_string_lossy(FileNameDisplayPreference::Remapped)\n+            .into_owned();\n         let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();\n@@ -250,7 +255,7 @@ impl<'tcx> DebugContext<'tcx> {\n \n         // FIXME make it more reliable and implement scopes before re-enabling this.\n         if false {\n-            let value_labels_ranges = context.build_value_labels_ranges(isa).unwrap();\n+            let value_labels_ranges = std::collections::HashMap::new(); // FIXME\n \n             for (local, _local_decl) in mir.local_decls.iter_enumerated() {\n                 let ty = self.tcx.subst_and_normalize_erasing_regions(\n@@ -264,7 +269,6 @@ impl<'tcx> DebugContext<'tcx> {\n                     self,\n                     isa,\n                     symbol,\n-                    context,\n                     &local_map,\n                     &value_labels_ranges,\n                     Place { local, projection: ty::List::empty() },\n@@ -283,7 +287,6 @@ fn place_location<'tcx>(\n     debug_context: &mut DebugContext<'tcx>,\n     isa: &dyn TargetIsa,\n     symbol: usize,\n-    context: &Context,\n     local_map: &IndexVec<mir::Local, CPlace<'tcx>>,\n     #[allow(rustc::default_hash_types)] value_labels_ranges: &std::collections::HashMap<\n         ValueLabel,\n@@ -306,12 +309,7 @@ fn place_location<'tcx>(\n                                 addend: i64::from(value_loc_range.start),\n                             },\n                             end: Address::Symbol { symbol, addend: i64::from(value_loc_range.end) },\n-                            data: translate_loc(\n-                                isa,\n-                                value_loc_range.loc,\n-                                &context.func.stack_slots,\n-                            )\n-                            .unwrap(),\n+                            data: translate_loc(isa, value_loc_range.loc).unwrap(),\n                         })\n                         .collect(),\n                 );\n@@ -340,34 +338,14 @@ fn place_location<'tcx>(\n             AttributeValue::Exprloc(Expression::new())\n \n             // For PointerBase::Stack:\n-            //AttributeValue::Exprloc(translate_loc(ValueLoc::Stack(*stack_slot), &context.func.stack_slots).unwrap())\n+            //AttributeValue::Exprloc(translate_loc(ValueLoc::Stack(*stack_slot)).unwrap())\n         }\n     }\n }\n \n // Adapted from https://github.com/CraneStation/wasmtime/blob/5a1845b4caf7a5dba8eda1fef05213a532ed4259/crates/debug/src/transform/expression.rs#L59-L137\n-fn translate_loc(\n-    isa: &dyn TargetIsa,\n-    loc: LabelValueLoc,\n-    stack_slots: &StackSlots,\n-) -> Option<Expression> {\n+fn translate_loc(isa: &dyn TargetIsa, loc: LabelValueLoc) -> Option<Expression> {\n     match loc {\n-        LabelValueLoc::ValueLoc(ValueLoc::Reg(reg)) => {\n-            let machine_reg = isa.map_dwarf_register(reg).unwrap();\n-            let mut expr = Expression::new();\n-            expr.op_reg(gimli::Register(machine_reg));\n-            Some(expr)\n-        }\n-        LabelValueLoc::ValueLoc(ValueLoc::Stack(ss)) => {\n-            if let Some(ss_offset) = stack_slots[ss].offset {\n-                let mut expr = Expression::new();\n-                expr.op_breg(X86_64::RBP, i64::from(ss_offset) + 16);\n-                Some(expr)\n-            } else {\n-                None\n-            }\n-        }\n-        LabelValueLoc::ValueLoc(ValueLoc::Unassigned) => unreachable!(),\n         LabelValueLoc::Reg(reg) => {\n             let machine_reg = isa.map_regalloc_reg_to_dwarf(reg).unwrap();\n             let mut expr = Expression::new();"}, {"sha": "41ac46021518b48e6d666cd2340cef327bf19c10", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eded3690869bad32185607000a0d3996e81d2073/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eded3690869bad32185607000a0d3996e81d2073/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=eded3690869bad32185607000a0d3996e81d2073", "patch": "@@ -268,16 +268,14 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::Tar\n \n     let flags = settings::Flags::new(flags_builder);\n \n-    let variant = cranelift_codegen::isa::BackendVariant::MachInst;\n-\n     let isa_builder = match sess.opts.cg.target_cpu.as_deref() {\n         Some(\"native\") => {\n-            let builder = cranelift_native::builder_with_options(variant, true).unwrap();\n+            let builder = cranelift_native::builder_with_options(true).unwrap();\n             builder\n         }\n         Some(value) => {\n             let mut builder =\n-                cranelift_codegen::isa::lookup_variant(target_triple.clone(), variant)\n+                cranelift_codegen::isa::lookup(target_triple.clone())\n                     .unwrap_or_else(|err| {\n                         sess.fatal(&format!(\"can't compile for {}: {}\", target_triple, err));\n                     });\n@@ -288,7 +286,7 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::Tar\n         }\n         None => {\n             let mut builder =\n-                cranelift_codegen::isa::lookup_variant(target_triple.clone(), variant)\n+                cranelift_codegen::isa::lookup(target_triple.clone())\n                     .unwrap_or_else(|err| {\n                         sess.fatal(&format!(\"can't compile for {}: {}\", target_triple, err));\n                     });"}]}