{"sha": "2fd0d528343009a215119857a4197a827f61214b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDBkNTI4MzQzMDA5YTIxNTExOTg1N2E0MTk3YTgyN2Y2MTIxNGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-09T09:25:14Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-09T09:25:14Z"}, "message": "Rustfmt", "tree": {"sha": "3fc7e259b8782e328f8ef76002b87411f7b89892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fc7e259b8782e328f8ef76002b87411f7b89892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd0d528343009a215119857a4197a827f61214b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd0d528343009a215119857a4197a827f61214b", "html_url": "https://github.com/rust-lang/rust/commit/2fd0d528343009a215119857a4197a827f61214b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd0d528343009a215119857a4197a827f61214b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "566803f288f18d37f05b17bbbdc746eb634af488", "url": "https://api.github.com/repos/rust-lang/rust/commits/566803f288f18d37f05b17bbbdc746eb634af488", "html_url": "https://github.com/rust-lang/rust/commit/566803f288f18d37f05b17bbbdc746eb634af488"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "38d18b4f6869936b2f467aa3af37c228972d8e22", "filename": "src/abi.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fd0d528343009a215119857a4197a827f61214b/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd0d528343009a215119857a4197a827f61214b/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=2fd0d528343009a215119857a4197a827f61214b", "patch": "@@ -237,7 +237,11 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n         let layout = fx.layout_of(ty);\n \n         if let ArgKind::Normal(ebb_param) = arg_kind {\n-            if !ssa_analyzed.get(&local).unwrap().contains(crate::analyze::Flags::NOT_SSA) {\n+            if !ssa_analyzed\n+                .get(&local)\n+                .unwrap()\n+                .contains(crate::analyze::Flags::NOT_SSA)\n+            {\n                 let var = Variable(local);\n                 fx.bcx.declare_var(var, fx.cton_type(ty).unwrap());\n                 fx.bcx.def_var(var, ebb_param);\n@@ -280,7 +284,11 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n         let ty = fx.mir.local_decls[local].ty;\n         let layout = fx.layout_of(ty);\n \n-        let place = if ssa_analyzed.get(&local).unwrap().contains(crate::analyze::Flags::NOT_SSA) {\n+        let place = if ssa_analyzed\n+            .get(&local)\n+            .unwrap()\n+            .contains(crate::analyze::Flags::NOT_SSA)\n+        {\n             let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n                 kind: StackSlotKind::ExplicitSlot,\n                 size: layout.size.bytes() as u32,"}, {"sha": "cd53a810fe420d5e32fa9615e1acd2c844dc46df", "filename": "src/analyze.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fd0d528343009a215119857a4197a827f61214b/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd0d528343009a215119857a4197a827f61214b/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=2fd0d528343009a215119857a4197a827f61214b", "patch": "@@ -1,6 +1,6 @@\n use crate::prelude::*;\n \n-use rustc::mir::{StatementKind::*};\n+use rustc::mir::StatementKind::*;\n \n bitflags! {\n     pub struct Flags: u8 {\n@@ -32,7 +32,10 @@ pub fn analyze<'a, 'tcx: 'a>(fx: &FunctionCx<'a, 'tcx>) -> HashMap<Local, Flags>\n         }\n \n         match &bb.terminator().kind {\n-            TerminatorKind::Call { destination: Some((place, _)), .. } => analyze_non_ssa_place(&mut flag_map, place),\n+            TerminatorKind::Call {\n+                destination: Some((place, _)),\n+                ..\n+            } => analyze_non_ssa_place(&mut flag_map, place),\n             _ => {}\n         }\n     }\n@@ -49,4 +52,4 @@ fn analyze_non_ssa_place(flag_map: &mut HashMap<Local, Flags>, place: &Place) {\n \n fn not_ssa<L: ::std::borrow::Borrow<Local>>(flag_map: &mut HashMap<Local, Flags>, local: L) {\n     *flag_map.get_mut(local.borrow()).unwrap() |= Flags::NOT_SSA;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "844069c04385f0b1b3690405ee380f56970019e3", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fd0d528343009a215119857a4197a827f61214b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd0d528343009a215119857a4197a827f61214b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=2fd0d528343009a215119857a4197a827f61214b", "patch": "@@ -380,10 +380,14 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &\n                             lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n                         }\n                         (TypeVariants::TyRawPtr(..), TypeVariants::TyUint(_))\n-                        | (TypeVariants::TyFnPtr(..), TypeVariants::TyUint(_)) if to_ty.sty == fx.tcx.types.usize.sty => {\n+                        | (TypeVariants::TyFnPtr(..), TypeVariants::TyUint(_))\n+                            if to_ty.sty == fx.tcx.types.usize.sty =>\n+                        {\n                             lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n                         }\n-                        (TypeVariants::TyUint(_), TypeVariants::TyRawPtr(..)) if from_ty.sty == fx.tcx.types.usize.sty => {\n+                        (TypeVariants::TyUint(_), TypeVariants::TyRawPtr(..))\n+                            if from_ty.sty == fx.tcx.types.usize.sty =>\n+                        {\n                             lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n                         }\n                         (TypeVariants::TyChar, TypeVariants::TyUint(_))"}]}