{"sha": "ec9c949946ef805ec5d70b87a15504c62361153d", "node_id": "C_kwDOAAsO6NoAKGVjOWM5NDk5NDZlZjgwNWVjNWQ3MGI4N2ExNTUwNGM2MjM2MTE1M2Q", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-10T16:08:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-10T16:13:33Z"}, "message": "Use pre-interned symbols in a couple of places", "tree": {"sha": "1128f70421dcd9f4176d40afc7ca8bfef23093a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1128f70421dcd9f4176d40afc7ca8bfef23093a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec9c949946ef805ec5d70b87a15504c62361153d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec9c949946ef805ec5d70b87a15504c62361153d", "html_url": "https://github.com/rust-lang/rust/commit/ec9c949946ef805ec5d70b87a15504c62361153d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec9c949946ef805ec5d70b87a15504c62361153d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d63a8d965e76f29a2b65c1f22a32613df1fe5c2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d63a8d965e76f29a2b65c1f22a32613df1fe5c2c", "html_url": "https://github.com/rust-lang/rust/commit/d63a8d965e76f29a2b65c1f22a32613df1fe5c2c"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "885537a212fe10197adc6f4f14c04815f38e9220", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c949946ef805ec5d70b87a15504c62361153d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c949946ef805ec5d70b87a15504c62361153d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=ec9c949946ef805ec5d70b87a15504c62361153d", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def::Res;\n use rustc_hir::definitions::DefPathData;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::DUMMY_SP;\n \n impl<'hir> LoweringContext<'_, 'hir> {\n@@ -1204,11 +1204,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n \n         let fields = self.arena.alloc_from_iter(\n-            e1.iter().map(|e| (\"start\", e)).chain(e2.iter().map(|e| (\"end\", e))).map(|(s, e)| {\n-                let expr = self.lower_expr(&e);\n-                let ident = Ident::new(Symbol::intern(s), self.lower_span(e.span));\n-                self.expr_field(ident, expr, e.span)\n-            }),\n+            e1.iter().map(|e| (sym::start, e)).chain(e2.iter().map(|e| (sym::end, e))).map(\n+                |(s, e)| {\n+                    let expr = self.lower_expr(&e);\n+                    let ident = Ident::new(s, self.lower_span(e.span));\n+                    self.expr_field(ident, expr, e.span)\n+                },\n+            ),\n         );\n \n         hir::ExprKind::Struct("}, {"sha": "e5210c5b190637217ed38cdc4dc5535fc351d0e3", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c949946ef805ec5d70b87a15504c62361153d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c949946ef805ec5d70b87a15504c62361153d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=ec9c949946ef805ec5d70b87a15504c62361153d", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::print::Print;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, Const, DefIdTree, InferConst, Ty, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_span::symbol::kw;\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n use std::borrow::Cow;\n \n struct FindHirNodeVisitor<'a, 'tcx> {\n@@ -1003,9 +1003,9 @@ impl<'tcx> TypeFolder<'tcx> for ResolvedTypeParamEraser<'tcx> {\n             | ty::Opaque(..)\n             | ty::Projection(_)\n             | ty::Never => t.super_fold_with(self),\n-            ty::Array(ty, c) => self\n-                .tcx()\n-                .mk_ty(ty::Array(self.fold_ty(ty), self.replace_infers(c, 0, Symbol::intern(\"N\")))),\n+            ty::Array(ty, c) => {\n+                self.tcx().mk_ty(ty::Array(self.fold_ty(ty), self.replace_infers(c, 0, sym::N)))\n+            }\n             // We don't want to hide type params that haven't been resolved yet.\n             // This would be the type that will be written out with the type param\n             // name in the output."}, {"sha": "478dda2009c006695308786f5570854fdab8ec40", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c949946ef805ec5d70b87a15504c62361153d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c949946ef805ec5d70b87a15504c62361153d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ec9c949946ef805ec5d70b87a15504c62361153d", "patch": "@@ -208,6 +208,7 @@ symbols! {\n         LinkedList,\n         LintPass,\n         Mutex,\n+        N,\n         None,\n         Ok,\n         Option,\n@@ -327,6 +328,7 @@ symbols! {\n         array,\n         arrays,\n         as_ptr,\n+        as_ref,\n         as_str,\n         asm,\n         asm_const,\n@@ -592,6 +594,7 @@ symbols! {\n         enable,\n         enclosing_scope,\n         encode,\n+        end,\n         env,\n         eq,\n         ermsb_target_feature,"}, {"sha": "fdf440f955c636173476f011f05664a6262cfa62", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c949946ef805ec5d70b87a15504c62361153d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c949946ef805ec5d70b87a15504c62361153d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ec9c949946ef805ec5d70b87a15504c62361153d", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::print::with_crate_prefix;\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::{source_map, FileName, MultiSpan, Span, Symbol};\n+use rustc_span::{source_map, FileName, MultiSpan, Span};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n     FulfillmentError, Obligation, ObligationCause, ObligationCauseCode,\n@@ -1524,8 +1524,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // Explicitly ignore the `Pin::as_ref()` method as `Pin` does not\n                             // implement the `AsRef` trait.\n                             let skip = skippable.contains(&did)\n-                                || ((\"Pin::new\" == *pre)\n-                                    && (Symbol::intern(\"as_ref\") == item_name.name));\n+                                || ((\"Pin::new\" == *pre) && (sym::as_ref == item_name.name));\n                             // Make sure the method is defined for the *actual* receiver: we don't\n                             // want to treat `Box<Self>` as a receiver if it only works because of\n                             // an autoderef to `&self`"}]}