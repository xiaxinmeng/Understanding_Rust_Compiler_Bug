{"sha": "84d6e8aed3af940c53e49e342575e91f502c7bd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZDZlOGFlZDNhZjk0MGM1M2U0OWUzNDI1NzVlOTFmNTAyYzdiZDQ=", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2021-07-07T03:54:54Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2021-07-07T15:52:35Z"}, "message": "Implement cfg(target_abi) (RFC 2992)\n\nAdd an `abi` field to `TargetOptions`, defaulting to \"\". Support using\n`cfg(target_abi = \"...\")` for conditional compilation on that field.\n\nGated by `feature(cfg_target_abi)`.\n\nAdd a test for `target_abi`, and a test for the feature gate.\n\nAdd `target_abi` to tidy as a platform-specific cfg.\n\nThis does not add an abi to any existing target.", "tree": {"sha": "2091248b3ab1995da65abe55c9d1e5d25c06bf6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2091248b3ab1995da65abe55c9d1e5d25c06bf6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84d6e8aed3af940c53e49e342575e91f502c7bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84d6e8aed3af940c53e49e342575e91f502c7bd4", "html_url": "https://github.com/rust-lang/rust/commit/84d6e8aed3af940c53e49e342575e91f502c7bd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84d6e8aed3af940c53e49e342575e91f502c7bd4/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54", "html_url": "https://github.com/rust-lang/rust/commit/c0bd5a584da4f26a1391163a0bdc21b34cf1ba54"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "03f064666834a28013386f570303fbb38f829dc4", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84d6e8aed3af940c53e49e342575e91f502c7bd4/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d6e8aed3af940c53e49e342575e91f502c7bd4/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=84d6e8aed3af940c53e49e342575e91f502c7bd4", "patch": "@@ -687,6 +687,9 @@ declare_features! (\n     /// Allows qualified paths in struct expressions, struct patterns and tuple struct patterns.\n     (active, more_qualified_paths, \"1.54.0\", Some(80080), None),\n \n+    /// Allows `cfg(target_abi = \"...\")`.\n+    (active, cfg_target_abi, \"1.55.0\", Some(80970), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "94075656754d6d160c728989e67606e7a225d105", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84d6e8aed3af940c53e49e342575e91f502c7bd4/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d6e8aed3af940c53e49e342575e91f502c7bd4/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=84d6e8aed3af940c53e49e342575e91f502c7bd4", "patch": "@@ -23,6 +23,7 @@ pub type GatedCfg = (Symbol, Symbol, GateFn);\n /// `cfg(...)`'s that are feature gated.\n const GATED_CFGS: &[GatedCfg] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n+    (sym::target_abi, sym::cfg_target_abi, cfg_fn!(cfg_target_abi)),\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n     (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),"}, {"sha": "b444f66258a8e8d76413f5fa4677eb86b4705866", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84d6e8aed3af940c53e49e342575e91f502c7bd4/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d6e8aed3af940c53e49e342575e91f502c7bd4/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=84d6e8aed3af940c53e49e342575e91f502c7bd4", "patch": "@@ -805,6 +805,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let wordsz = sess.target.pointer_width.to_string();\n     let os = &sess.target.os;\n     let env = &sess.target.env;\n+    let abi = &sess.target.abi;\n     let vendor = &sess.target.vendor;\n     let min_atomic_width = sess.target.min_atomic_width();\n     let max_atomic_width = sess.target.max_atomic_width();\n@@ -814,7 +815,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     });\n \n     let mut ret = FxHashSet::default();\n-    ret.reserve(6); // the minimum number of insertions\n+    ret.reserve(7); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((sym::target_os, Some(Symbol::intern(os))));\n     for fam in &sess.target.families {\n@@ -829,6 +830,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.insert((sym::target_endian, Some(Symbol::intern(end.as_str()))));\n     ret.insert((sym::target_pointer_width, Some(Symbol::intern(&wordsz))));\n     ret.insert((sym::target_env, Some(Symbol::intern(env))));\n+    ret.insert((sym::target_abi, Some(Symbol::intern(abi))));\n     ret.insert((sym::target_vendor, Some(Symbol::intern(vendor))));\n     if sess.target.has_elf_tls {\n         ret.insert((sym::target_thread_local, None));"}, {"sha": "6d14662dc777390e35b7a72336111cd653ea16d8", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84d6e8aed3af940c53e49e342575e91f502c7bd4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d6e8aed3af940c53e49e342575e91f502c7bd4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=84d6e8aed3af940c53e49e342575e91f502c7bd4", "patch": "@@ -353,6 +353,7 @@ symbols! {\n         cfg_eval,\n         cfg_panic,\n         cfg_sanitize,\n+        cfg_target_abi,\n         cfg_target_feature,\n         cfg_target_has_atomic,\n         cfg_target_thread_local,\n@@ -1199,6 +1200,7 @@ symbols! {\n         sync,\n         sync_trait,\n         t32,\n+        target_abi,\n         target_arch,\n         target_endian,\n         target_env,"}, {"sha": "aa7dbeb16f21c2201be306696dc3d21c6dc3fed9", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84d6e8aed3af940c53e49e342575e91f502c7bd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d6e8aed3af940c53e49e342575e91f502c7bd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=84d6e8aed3af940c53e49e342575e91f502c7bd4", "patch": "@@ -1025,6 +1025,9 @@ pub struct TargetOptions {\n     pub os: String,\n     /// Environment name to use for conditional compilation (`target_env`). Defaults to \"\".\n     pub env: String,\n+    /// ABI name to distinguish multiple ABIs on the same OS and architecture. For instance, `\"eabi\"`\n+    /// or `\"eabihf\"`. Defaults to \"\".\n+    pub abi: String,\n     /// Vendor name to use for conditional compilation (`target_vendor`). Defaults to \"unknown\".\n     pub vendor: String,\n     /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n@@ -1342,6 +1345,7 @@ impl Default for TargetOptions {\n             c_int_width: \"32\".to_string(),\n             os: \"none\".to_string(),\n             env: String::new(),\n+            abi: String::new(),\n             vendor: \"unknown\".to_string(),\n             linker_flavor: LinkerFlavor::Gcc,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n@@ -1919,6 +1923,7 @@ impl Target {\n         key!(c_int_width = \"target-c-int-width\");\n         key!(os);\n         key!(env);\n+        key!(abi);\n         key!(vendor);\n         key!(linker_flavor, LinkerFlavor)?;\n         key!(linker, optional);\n@@ -2152,6 +2157,7 @@ impl ToJson for Target {\n         target_option_val!(c_int_width, \"target-c-int-width\");\n         target_option_val!(os);\n         target_option_val!(env);\n+        target_option_val!(abi);\n         target_option_val!(vendor);\n         target_option_val!(linker_flavor);\n         target_option_val!(linker);"}, {"sha": "acc570fc84314ef65b1cafbb75eaff49a781e1cd", "filename": "src/test/ui/cfg/cfg-target-abi.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84d6e8aed3af940c53e49e342575e91f502c7bd4/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d6e8aed3af940c53e49e342575e91f502c7bd4/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-abi.rs?ref=84d6e8aed3af940c53e49e342575e91f502c7bd4", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+#![feature(cfg_target_abi)]\n+\n+#[cfg(target_abi = \"eabihf\")]\n+pub fn main() {\n+}\n+\n+#[cfg(not(target_abi = \"eabihf\"))]\n+pub fn main() {\n+}"}, {"sha": "f26514939800a0023316753110d62027106f54df", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-abi.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/84d6e8aed3af940c53e49e342575e91f502c7bd4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d6e8aed3af940c53e49e342575e91f502c7bd4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.rs?ref=84d6e8aed3af940c53e49e342575e91f502c7bd4", "patch": "@@ -0,0 +1,11 @@\n+#[cfg(target_abi = \"x\")] //~ ERROR `cfg(target_abi)` is experimental\n+#[cfg_attr(target_abi = \"x\", x)] //~ ERROR `cfg(target_abi)` is experimental\n+struct Foo(u64, u64);\n+\n+#[cfg(not(any(all(target_abi = \"x\"))))] //~ ERROR `cfg(target_abi)` is experimental\n+fn foo() {}\n+\n+fn main() {\n+    cfg!(target_abi = \"x\");\n+    //~^ ERROR `cfg(target_abi)` is experimental and subject to change\n+}"}, {"sha": "ed8cbcbe4f017ffb4cbfdf9b631101a4399ef609", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-abi.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/84d6e8aed3af940c53e49e342575e91f502c7bd4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84d6e8aed3af940c53e49e342575e91f502c7bd4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.stderr?ref=84d6e8aed3af940c53e49e342575e91f502c7bd4", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: `cfg(target_abi)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-abi.rs:2:12\n+   |\n+LL | #[cfg_attr(target_abi = \"x\", x)]\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #80970 <https://github.com/rust-lang/rust/issues/80970> for more information\n+   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_abi)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-abi.rs:1:7\n+   |\n+LL | #[cfg(target_abi = \"x\")]\n+   |       ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #80970 <https://github.com/rust-lang/rust/issues/80970> for more information\n+   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_abi)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-abi.rs:5:19\n+   |\n+LL | #[cfg(not(any(all(target_abi = \"x\"))))]\n+   |                   ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #80970 <https://github.com/rust-lang/rust/issues/80970> for more information\n+   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_abi)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-abi.rs:9:10\n+   |\n+LL |     cfg!(target_abi = \"x\");\n+   |          ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #80970 <https://github.com/rust-lang/rust/issues/80970> for more information\n+   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "24a100187797256866b86df0d2f5cb8d2e7fb427", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84d6e8aed3af940c53e49e342575e91f502c7bd4/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d6e8aed3af940c53e49e342575e91f502c7bd4/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=84d6e8aed3af940c53e49e342575e91f502c7bd4", "patch": "@@ -122,6 +122,7 @@ fn check_cfgs(\n \n         let contains_platform_specific_cfg = cfg.contains(\"target_os\")\n             || cfg.contains(\"target_env\")\n+            || cfg.contains(\"target_abi\")\n             || cfg.contains(\"target_vendor\")\n             || cfg.contains(\"unix\")\n             || cfg.contains(\"windows\");"}]}