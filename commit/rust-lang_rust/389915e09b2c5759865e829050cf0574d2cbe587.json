{"sha": "389915e09b2c5759865e829050cf0574d2cbe587", "node_id": "C_kwDOAAsO6NoAKDM4OTkxNWUwOWIyYzU3NTk4NjVlODI5MDUwY2YwNTc0ZDJjYmU1ODc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-05T09:15:22Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-08T15:55:37Z"}, "message": "Replace all //error-pattern comments with strict syntax and fix other comments in the same files", "tree": {"sha": "90326f4820f3ad6976ac0b221a60b6f483dc624f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90326f4820f3ad6976ac0b221a60b6f483dc624f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/389915e09b2c5759865e829050cf0574d2cbe587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/389915e09b2c5759865e829050cf0574d2cbe587", "html_url": "https://github.com/rust-lang/rust/commit/389915e09b2c5759865e829050cf0574d2cbe587", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/389915e09b2c5759865e829050cf0574d2cbe587/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd4838c15f75c693840d33b9c48ad7d6a310791", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd4838c15f75c693840d33b9c48ad7d6a310791", "html_url": "https://github.com/rust-lang/rust/commit/4bd4838c15f75c693840d33b9c48ad7d6a310791"}], "stats": {"total": 184, "additions": 94, "deletions": 90}, "files": [{"sha": "a07d8254ad3d5095887bbce8f83510bb062aea5e", "filename": "tests/fail/alloc/deallocate-bad-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-// error-pattern: has size 1 and alignment 1, but gave size 1 and alignment 2\n+//@error-pattern: has size 1 and alignment 1, but gave size 1 and alignment 2\n \n fn main() {\n     unsafe {"}, {"sha": "47aaef1935e90220ef068ff7b4dded3a433ede0e", "filename": "tests/fail/alloc/deallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-// error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n+//@error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {"}, {"sha": "1eb9bbf91ca5c2c0fb634f589164e99d782216bb", "filename": "tests/fail/alloc/deallocate-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-twice.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-// error-pattern: dereferenced after this allocation got freed\n+//@error-pattern: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {"}, {"sha": "01db2f1a225df1203900f2713d48ee82c2e6d8cb", "filename": "tests/fail/alloc/global_system_mixup.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,10 +1,10 @@\n // Make sure we detect when the `Global` and `System` allocators are mixed\n // (even when the default `Global` uses `System`).\n-// error-pattern: which is Rust heap memory, using\n+//@error-pattern: which is Rust heap memory, using\n \n-// normalize-stderr-test: \"using [A-Za-z]+ heap deallocation operation\" -> \"using PLATFORM heap deallocation operation\"\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"libc::free\\([^()]*\\)|unsafe \\{ HeapFree\\([^()]*\\) \\};\" -> \"FREE();\"\n+//@normalize-stderr-test: \"using [A-Za-z]+ heap deallocation operation\" -> \"using PLATFORM heap deallocation operation\"\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"libc::free\\([^()]*\\)|unsafe \\{ HeapFree\\([^()]*\\) \\};\" -> \"FREE();\"\n \n #![feature(allocator_api, slice_ptr_get)]\n "}, {"sha": "145c3393d677ae69616225448ac64a8786fc84cd", "filename": "tests/fail/alloc/reallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Freallocate-bad-size.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, realloc, Layout};\n \n-// error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n+//@error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {"}, {"sha": "34f1658344a5e9312505346ef677d58dde4f9965", "filename": "tests/fail/alloc/reallocate-dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Freallocate-dangling.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, realloc, Layout};\n \n-// error-pattern: dereferenced after this allocation got freed\n+//@error-pattern: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {"}, {"sha": "a97431bc2f05e77e44266a25aa7a91b0484f56ce", "filename": "tests/fail/alloc/stack_free.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Falloc%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fstack_free.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,7 +1,7 @@\n // Validation/SB changes why we fail\n-// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n-// error-pattern: which is stack variable memory, using Rust heap deallocation operation\n+//@error-pattern: which is stack variable memory, using Rust heap deallocation operation\n \n fn main() {\n     let x = 42;"}, {"sha": "ab80cdd205bca4bd7cb9e2cd7fff2a7e83a8e859", "filename": "tests/fail/concurrency/libc_pthread_create_main_terminate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: No libc on Windows\n-// error-pattern: the main thread terminated without waiting for all remaining threads\n+//@ignore-windows: No libc on Windows\n+//@error-pattern: the main thread terminated without waiting for all remaining threads\n \n // Check that we terminate the program when the main thread terminates.\n "}, {"sha": "650a42b43b5d3e915eddd658ac13b2f94cf45aee", "filename": "tests/fail/concurrency/thread-spawn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fconcurrency%2Fthread-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fconcurrency%2Fthread-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread-spawn.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,8 +1,8 @@\n-// only-windows: Only Windows is not supported.\n+//@only-windows: Only Windows is not supported.\n \n use std::thread;\n \n-// error-pattern: can't create threads on Windows\n+//@error-pattern: can't create threads on Windows\n \n fn main() {\n     thread::spawn(|| {});"}, {"sha": "7181a5979b442c244f9e7dfae973f81d41755986", "filename": "tests/fail/dangling_pointers/null_pointer_write_zst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,6 +1,6 @@\n // Some optimizations remove ZST accesses, thus masking this UB.\n-// compile-flags: -Zmir-opt-level=0\n-// error-pattern: memory access failed: null pointer is a dangling pointer\n+//@compile-flags: -Zmir-opt-level=0\n+//@error-pattern: memory access failed: null pointer is a dangling pointer\n \n #[allow(deref_nullptr)]\n fn main() {"}, {"sha": "00bb492147a8cab9ed3c306977a8642e1e1d2622", "filename": "tests/fail/fs/isolated_file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Ffs%2Fisolated_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Ffs%2Fisolated_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fisolated_file.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: File handling is not implemented yet\n-// error-pattern: `open` not available when isolation is enabled\n+//@ignore-windows: File handling is not implemented yet\n+//@error-pattern: `open` not available when isolation is enabled\n \n fn main() {\n     let _file = std::fs::File::open(\"file.txt\").unwrap();"}, {"sha": "c4ce192c449c3d9748f281653c21235c6de581ec", "filename": "tests/fail/intrinsics/copy_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflow computing total size\n+//@error-pattern: overflow computing total size\n use std::mem;\n \n fn main() {"}, {"sha": "0109bff696888b8e5e2a5c77aa3732056d01fb3a", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer to 5 bytes starting at offset 0 is out-of-bounds\n+//@error-pattern: pointer to 5 bytes starting at offset 0 is out-of-bounds\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}, {"sha": "74d391dc212086b2719f258798b6023f42c61408", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflowing in-bounds pointer arithmetic\n+//@error-pattern: overflowing in-bounds pointer arithmetic\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}, {"sha": "b54cf3dd25c03ef334c980f2366da1537bf50015", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer to 1 byte starting at offset -1 is out-of-bounds\n+//@error-pattern: pointer to 1 byte starting at offset -1 is out-of-bounds\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}, {"sha": "32974a825a54c4e8d27f32b360b9930c665f69b9", "filename": "tests/fail/intrinsics/ptr_offset_0_plus_0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,5 +1,5 @@\n-// error-pattern: null pointer is a dangling pointer\n-// compile-flags: -Zmiri-permissive-provenance\n+//@error-pattern: null pointer is a dangling pointer\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     let x = 0 as *mut i32;"}, {"sha": "f51e00746e2fd36c0a2b913dcf5e6ff0ad3746da", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_int.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,5 +1,5 @@\n-// error-pattern: is a dangling pointer\n-// compile-flags: -Zmiri-permissive-provenance\n+//@error-pattern: is a dangling pointer\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     // Can't offset an integer pointer by non-zero offset."}, {"sha": "8fc4d7fe7350b02647cd6696cd4dbdd79f25d927", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,5 +1,5 @@\n-// error-pattern: is a dangling pointer\n-// compile-flags: -Zmiri-permissive-provenance\n+//@error-pattern: is a dangling pointer\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));"}, {"sha": "829cf90c855d70a8326f3cc95ecf43f646dd990c", "filename": "tests/fail/intrinsics/ptr_offset_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflowing in-bounds pointer arithmetic\n+//@error-pattern: overflowing in-bounds pointer arithmetic\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;"}, {"sha": "f8ee7d0b5092a164d530d119da1049bedf67df20", "filename": "tests/fail/intrinsics/ptr_offset_ptr_plus_0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer at offset 32 is out-of-bounds\n+//@error-pattern: pointer at offset 32 is out-of-bounds\n \n fn main() {\n     let x = Box::into_raw(Box::new(0u32));"}, {"sha": "a5bae36d92a46d4be13b46937481b2e4eff2943a", "filename": "tests/fail/intrinsics/simd-float-to-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: cannot be represented in target type `i32`\n+//@error-pattern: cannot be represented in target type `i32`\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "e394cce9a4fe3a5adb14641d2d0445533b7df3e3", "filename": "tests/fail/intrinsics/simd-gather.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fsimd-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fsimd-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-gather.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n+//@error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "d2bc73399548b2a609c926839cc82a06cd29c949", "filename": "tests/fail/intrinsics/simd-scatter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n+//@error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "5c49dc00165c954d525df0bfbc97db52b9af28fd", "filename": "tests/fail/intrinsics/write_bytes_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflow computing total size of `write_bytes`\n+//@error-pattern: overflow computing total size of `write_bytes`\n use std::mem;\n \n fn main() {"}, {"sha": "92cc1d1d34e48af7c933ae46c36a2ca7e6a61fd9", "filename": "tests/fail/invalid_enum_tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Finvalid_enum_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Finvalid_enum_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_enum_tag.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,8 +1,8 @@\n // Validation makes this fail in the wrong place\n // Make sure we find these even with many checks disabled.\n-// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n-// error-pattern: enum value has invalid tag\n+//@error-pattern: enum value has invalid tag\n \n use std::mem;\n "}, {"sha": "d384caf81a57efcfd642664f4387ac96b43207b3", "filename": "tests/fail/memleak.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fmemleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fmemleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fmemleak.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,5 +1,5 @@\n-// error-pattern: the evaluated program leaked memory\n-// normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n+//@error-pattern: the evaluated program leaked memory\n+//@normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n \n fn main() {\n     std::mem::forget(Box::new(42));"}, {"sha": "76ecd71b011aad0ac24ed80be52049372109b2be", "filename": "tests/fail/memleak_rc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fmemleak_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fmemleak_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fmemleak_rc.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,6 +1,6 @@\n-// error-pattern: the evaluated program leaked memory\n-// stderr-per-bitwidth\n-// normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n+//@error-pattern: the evaluated program leaked memory\n+//@stderr-per-bitwidth\n+//@normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n \n use std::cell::RefCell;\n use std::rc::Rc;"}, {"sha": "290de49c82c0b09cdb83d7d5920d2abbfa1442fb", "filename": "tests/fail/memleak_rc.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fmemleak_rc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fmemleak_rc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fmemleak_rc.stderr?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -0,0 +1,11 @@\n+The following memory was leaked: ALLOC (Rust heap, size: 32, align: 8) {\n+    0x00 \u2502 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 \u2502 ................\n+    0x10 \u2502 00 00 00 00 00 00 00 00 \u257e$HEX[a1765]<TAG>\u2500\u257c \u2502 ........\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+}\n+\n+error: the evaluated program leaked memory\n+\n+note: pass `-Zmiri-ignore-leaks` to disable this check\n+\n+error: aborting due to previous error\n+"}, {"sha": "e28205040871a74fb8fb74d89746ebcf5d337d28", "filename": "tests/fail/no_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fno_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fno_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fno_main.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern: miri can only run programs that have a main function\n+//@error-pattern: miri can only run programs that have a main function\n #![no_main]"}, {"sha": "8919d51bb2f74b9ac6892eadf519d831be0e1f2e", "filename": "tests/fail/panic/double_panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fpanic%2Fdouble_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fpanic%2Fdouble_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fdouble_panic.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,6 +1,6 @@\n-// error-pattern: the program aborted\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"unsafe \\{ libc::abort\\(\\) \\}|crate::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n+//@error-pattern: the program aborted\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"unsafe \\{ libc::abort\\(\\) \\}|crate::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n \n struct Foo;\n impl Drop for Foo {"}, {"sha": "00a01ce6e81374f4582a40bd10470b89f2761c40", "filename": "tests/fail/panic/panic_abort1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fpanic%2Fpanic_abort1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fpanic%2Fpanic_abort1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort1.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,7 +1,7 @@\n-// error-pattern: the program aborted execution\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n-// compile-flags: -C panic=abort\n+//@error-pattern: the program aborted execution\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n+//@compile-flags: -C panic=abort\n \n fn main() {\n     std::panic!(\"panicking from libstd\");"}, {"sha": "dee0de96703a1969aa0e97534807bccfbc3e354d", "filename": "tests/fail/panic/panic_abort2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fpanic%2Fpanic_abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fpanic%2Fpanic_abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort2.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,7 +1,7 @@\n-// error-pattern: the program aborted execution\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n-// compile-flags: -C panic=abort\n+//@error-pattern: the program aborted execution\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n+//@compile-flags: -C panic=abort\n \n fn main() {\n     std::panic!(\"{}-panicking from libstd\", 42);"}, {"sha": "a448aab3ea4580e689d0c24147cacd7da4c0ba45", "filename": "tests/fail/panic/panic_abort3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fpanic%2Fpanic_abort3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fpanic%2Fpanic_abort3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort3.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,7 +1,7 @@\n-// error-pattern: the program aborted execution\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n-// compile-flags: -C panic=abort\n+//@error-pattern: the program aborted execution\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n+//@compile-flags: -C panic=abort\n \n fn main() {\n     core::panic!(\"panicking from libcore\");"}, {"sha": "4995dad9d71ab475ddce111aaa7c49a0c2664ff3", "filename": "tests/fail/panic/panic_abort4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fpanic%2Fpanic_abort4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fpanic%2Fpanic_abort4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort4.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,7 +1,7 @@\n-// error-pattern: the program aborted execution\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n-// compile-flags: -C panic=abort\n+//@error-pattern: the program aborted execution\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n+//@compile-flags: -C panic=abort\n \n fn main() {\n     core::panic!(\"{}-panicking from libcore\", 42);"}, {"sha": "a3510d8e89290428bf181563f5193e88f861208b", "filename": "tests/fail/provenance/ptr_invalid_offset.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,5 +1,5 @@\n-// compile-flags: -Zmiri-strict-provenance\n-// error-pattern: is a dangling pointer\n+//@compile-flags: -Zmiri-strict-provenance\n+//@error-pattern: is a dangling pointer\n #![feature(strict_provenance)]\n \n fn main() {"}, {"sha": "6478f446accc4306b08c6c579c7dfb23d23dd72c", "filename": "tests/fail/should-pass/cpp20_rwc_syncs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,6 +1,6 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-ignore-leaks\n-// error-pattern: unreachable\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-ignore-leaks\n+//@error-pattern: unreachable\n \n // https://plv.mpi-sws.org/scfix/paper.pdf\n // 2.2 Second Problem: SC Fences are Too Weak"}, {"sha": "0798f863ce110e6b8234e9c6dfd58947e76bc3ab", "filename": "tests/fail/stacked_borrows/deallocate_against_barrier1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier1.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: deallocating while item is protected\n+//@error-pattern: deallocating while item is protected\n \n fn inner(x: &mut i32, f: fn(&mut i32)) {\n     // `f` may mutate, but it may not deallocate!"}, {"sha": "23c54c8d898837ea2470e96bae15a25f9c9e1274", "filename": "tests/fail/stacked_borrows/deallocate_against_barrier2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: deallocating while item is protected\n+//@error-pattern: deallocating while item is protected\n use std::marker::PhantomPinned;\n \n pub struct NotUnpin(i32, PhantomPinned);"}, {"sha": "6e14b9af146c6366e745c7662739943cd5288221", "filename": "tests/fail/stacked_borrows/issue-miri-1050-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer to 4 bytes starting at offset 0 is out-of-bounds\n+//@error-pattern: pointer to 4 bytes starting at offset 0 is out-of-bounds\n \n fn main() {\n     unsafe {"}, {"sha": "571cb6213fec21c290a3c98ca36ceb0f800135c7", "filename": "tests/fail/stacked_borrows/issue-miri-1050-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: is a dangling pointer\n+//@error-pattern: is a dangling pointer\n use std::ptr::NonNull;\n \n fn main() {"}, {"sha": "4786cd02d954f31e32d1239f9f874d9cc80c40c6", "filename": "tests/fail/stacked_borrows/newtype_retagging.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,5 +1,5 @@\n-// compile-flags: -Zmiri-retag-fields\n-// error-pattern: incompatible item is protected\n+//@compile-flags: -Zmiri-retag-fields\n+//@error-pattern: incompatible item is protected\n struct Newtype<'a>(&'a mut i32);\n \n fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {"}, {"sha": "27e035c404bab79723f6f30aa16e522ec893364a", "filename": "tests/fail/stacked_borrows/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fvtable.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: vtable pointer does not have permission\n+//@error-pattern: vtable pointer does not have permission\n #![feature(ptr_metadata)]\n \n trait Foo {}"}, {"sha": "336b1041df0914f31db7be08031711854be152ea", "filename": "tests/fail/stacked_borrows/zst_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Zmiri-strict-provenance\n-// error-pattern: does not exist in the borrow stack\n+//@error-pattern: does not exist in the borrow stack\n \n fn main() {\n     unsafe {"}, {"sha": "d21371225e57181f5e7e9ea86dbb156044c56588", "filename": "tests/fail/uninit_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Funinit_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Funinit_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_buffer.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: memory is uninitialized at [0x4..0x10]\n+//@error-pattern: memory is uninitialized at [0x4..0x10]\n \n use std::alloc::{alloc, dealloc, Layout};\n use std::slice::from_raw_parts;"}, {"sha": "ef2bb42c65cc6cfcf91dfca98f7f506e1c82a571", "filename": "tests/fail/unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/tests%2Ffail%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funreachable.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: entering unreachable code\n+//@error-pattern: entering unreachable code\n fn main() {\n     unsafe { std::hint::unreachable_unchecked() }\n }"}, {"sha": "f7852c82e44b577480ae58cf2965a5b3f02e4fdd", "filename": "ui_test/README.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/ui_test%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/ui_test%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FREADME.md?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -7,14 +7,12 @@ A smaller version of compiletest-rs\n \n ## Supported magic comment annotations\n \n-Note that the space after `//`, when it is present, is *not* optional -- it must be exactly one.\n-\n * `// ignore-XXX` avoids running the test on targets whose triple contains `XXX`\n     * `XXX` can also be one of `64bit`, `32bit` or `16bit`\n * `// only-XXX` avoids running the test on targets whose triple **does not** contain `XXX`\n     * `XXX` can also be one of `64bit`, `32bit` or `16bit`\n * `// stderr-per-bitwidth` produces one stderr file per bitwidth, as they may differ significantly sometimes\n-* `// error-pattern: XXX` make sure the stderr output contains `XXX`\n+* `//@error-pattern: XXX` make sure the stderr output contains `XXX`\n * `//~ ERROR: XXX` make sure the stderr output contains `XXX` for an error in the line where this comment is written\n     * Also supports `HELP`, `WARN` or `NOTE` for different kind of message\n         * if one of those levels is specified explicitly, *all* diagnostics of this level or higher need an annotation. If you want to avoid this, just leave out the all caps level note entirely."}, {"sha": "569dad5a257023ee3e91a756ed95964ac41657a1", "filename": "ui_test/src/comments.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/ui_test%2Fsrc%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/ui_test%2Fsrc%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -246,7 +246,8 @@ impl Comments {\n                 );\n                 self.error_pattern = Some((args.trim().to_string(), l));\n             }\n-            _ => exit!(\"unknown command {command} with args {args}\"),\n+            // Maybe the user just left a comment explaining a command without arguments\n+            _ => self.parse_command(command, path, l),\n         }\n     }\n \n@@ -292,14 +293,8 @@ impl Comments {\n         checked!(path, l);\n         let (revision, pattern) =\n             unwrap!(pattern.split_once(']'), \"`//[` without corresponding `]`\");\n-        if pattern.starts_with('~') {\n-            self.parse_pattern_inner(\n-                &pattern[1..],\n-                fallthrough_to,\n-                Some(revision.to_owned()),\n-                path,\n-                l,\n-            )\n+        if let Some(pattern) = pattern.strip_prefix('~') {\n+            self.parse_pattern_inner(pattern, fallthrough_to, Some(revision.to_owned()), path, l)\n         } else {\n             exit!(\"revisioned pattern must have `~` following the `]`\");\n         }"}, {"sha": "21b8c54ff20fd6dde9f7c1c83cc7e69f4481ddf2", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389915e09b2c5759865e829050cf0574d2cbe587/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389915e09b2c5759865e829050cf0574d2cbe587/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=389915e09b2c5759865e829050cf0574d2cbe587", "patch": "@@ -377,7 +377,7 @@ fn check_annotations(\n ) {\n     if let Some((ref error_pattern, definition_line)) = comments.error_pattern {\n         // first check the diagnostics messages outside of our file. We check this first, so that\n-        // you can mix in-file annotations with // error-pattern annotations, even if there is overlap\n+        // you can mix in-file annotations with //@error-pattern annotations, even if there is overlap\n         // in the messages.\n         if let Some(i) = messages_from_unknown_file_or_line\n             .iter()"}]}