{"sha": "c75ccd7b4ee38ed23904d34e94ad659ce7a3c785", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NWNjZDdiNGVlMzhlZDIzOTA0ZDM0ZTk0YWQ2NTljZTdhM2M3ODU=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-05-14T02:55:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-14T02:55:08Z"}, "message": "Rollup merge of #41612 - mandeep:add-ops-generics, r=GuillaumeGomez,frewsxcv\n\nAdded generic example of std::ops::Add in doc comments\n\nWe discussed on IRC how the std::ops examples were potentially missing examples using generics. This PR adds an example to std::ops::Add that shows the use of a generic type T. I'm not sure this is ready for merge as I think the two examples now make the documentation a bit verbose, but I think it's a good starting point. I'd love to hear others thoughts on this. This is in relation to the last item in issue #29365.", "tree": {"sha": "cf528bc34b1da84bc97c5cfb6007ee9d72169ca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf528bc34b1da84bc97c5cfb6007ee9d72169ca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c75ccd7b4ee38ed23904d34e94ad659ce7a3c785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c75ccd7b4ee38ed23904d34e94ad659ce7a3c785", "html_url": "https://github.com/rust-lang/rust/commit/c75ccd7b4ee38ed23904d34e94ad659ce7a3c785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c75ccd7b4ee38ed23904d34e94ad659ce7a3c785/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93dd1cab5d1ea0ceb178db424d4c907a20584b16", "url": "https://api.github.com/repos/rust-lang/rust/commits/93dd1cab5d1ea0ceb178db424d4c907a20584b16", "html_url": "https://github.com/rust-lang/rust/commit/93dd1cab5d1ea0ceb178db424d4c907a20584b16"}, {"sha": "a2a9d1965b1aba9363f1876de3ed67c0662a294d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a9d1965b1aba9363f1876de3ed67c0662a294d", "html_url": "https://github.com/rust-lang/rust/commit/a2a9d1965b1aba9363f1876de3ed67c0662a294d"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "6942f5fb67b60069143f5ed301cffb6e0fef0961", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c75ccd7b4ee38ed23904d34e94ad659ce7a3c785/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75ccd7b4ee38ed23904d34e94ad659ce7a3c785/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=c75ccd7b4ee38ed23904d34e94ad659ce7a3c785", "patch": "@@ -235,6 +235,42 @@ pub trait Drop {\n /// }\n /// ```\n ///\n+/// Here is an example of the same `Point` struct implementing the `Add` trait\n+/// using generics.\n+///\n+/// ```\n+/// use std::ops::Add;\n+///\n+/// #[derive(Debug)]\n+/// struct Point<T> {\n+///     x: T,\n+///     y: T,\n+/// }\n+///\n+/// // Notice that the implementation uses the `Output` associated type\n+/// impl<T: Add<Output=T>> Add for Point<T> {\n+///     type Output = Point<T>;\n+///\n+///     fn add(self, other: Point<T>) -> Point<T> {\n+///         Point {\n+///             x: self.x + other.x,\n+///             y: self.y + other.y,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl<T: PartialEq> PartialEq for Point<T> {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.x == other.x && self.y == other.y\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     assert_eq!(Point { x: 1, y: 0 } + Point { x: 2, y: 3 },\n+///                Point { x: 3, y: 3 });\n+/// }\n+/// ```\n+///\n /// Note that `RHS = Self` by default, but this is not mandatory. For example,\n /// [std::time::SystemTime] implements `Add<Duration>`, which permits\n /// operations of the form `SystemTime = SystemTime + Duration`."}]}