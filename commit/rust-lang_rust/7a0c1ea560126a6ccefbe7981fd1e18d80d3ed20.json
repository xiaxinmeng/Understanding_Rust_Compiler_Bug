{"sha": "7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMGMxZWE1NjAxMjZhNmNjZWZiZTc5ODFmZDFlMThkODBkM2VkMjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-30T18:07:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-30T18:07:52Z"}, "message": "correct used_mut annotations for args, inherited case", "tree": {"sha": "09c777dc072d79d8c3644ceb50e6b840b6b93895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09c777dc072d79d8c3644ceb50e6b840b6b93895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20", "html_url": "https://github.com/rust-lang/rust/commit/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa48a170d55e3003b70626b16ccd698b5aca8269", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa48a170d55e3003b70626b16ccd698b5aca8269", "html_url": "https://github.com/rust-lang/rust/commit/aa48a170d55e3003b70626b16ccd698b5aca8269"}], "stats": {"total": 85, "additions": 24, "deletions": 61}, "files": [{"sha": "9330395c061a774814e1d2d8fa93a90e66690836", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20", "patch": "@@ -260,11 +260,21 @@ pub impl<'self> CheckLoanCtxt<'self> {\n         // and report an error otherwise.\n         match cmt.mutbl {\n             mc::McDeclared => {\n-                // OK\n+                // OK, but we have to mark arguments as requiring mut\n+                // if they are assigned (other cases are handled by liveness,\n+                // since we need to distinguish local variables assigned\n+                // once vs those assigned multiple times)\n+                match cmt.cat {\n+                    mc::cat_self(*) |\n+                    mc::cat_arg(*) => {\n+                        mark_variable_as_used_mut(self, cmt);\n+                    }\n+                    _ => {}\n+                }\n             }\n             mc::McInherited => {\n                 // OK, but we may have to add an entry to `used_mut_nodes`\n-                mark_writes_through_upvars_as_used_mut(self, cmt);\n+                mark_variable_as_used_mut(self, cmt);\n             }\n             mc::McReadOnly | mc::McImmutable => {\n                 // Subtle: liveness guarantees that immutable local\n@@ -289,33 +299,28 @@ pub impl<'self> CheckLoanCtxt<'self> {\n                 self, expr, cmt);\n         }\n \n-        fn mark_writes_through_upvars_as_used_mut(self: &CheckLoanCtxt,\n-                                                  cmt: mc::cmt) {\n+        fn mark_variable_as_used_mut(self: &CheckLoanCtxt,\n+                                     cmt: mc::cmt) {\n             //! If the mutability of the `cmt` being written is inherited\n-            //! from a local variable in another closure, liveness may\n+            //! from a local variable, liveness will\n             //! not have been able to detect that this variable's mutability\n             //! is important, so we must add the variable to the\n-            //! `used_mut_nodes` table here. This is because liveness\n-            //! does not consider closures.\n+            //! `used_mut_nodes` table here.\n \n-            let mut passed_upvar = false;\n             let mut cmt = cmt;\n             loop {\n                 debug!(\"mark_writes_through_upvars_as_used_mut(cmt=%s)\",\n                        cmt.repr(self.tcx()));\n                 match cmt.cat {\n                     mc::cat_local(id) |\n-                    mc::cat_arg(id, _) |\n+                    mc::cat_arg(id) |\n                     mc::cat_self(id) => {\n-                        if passed_upvar {\n-                            self.tcx().used_mut_nodes.insert(id);\n-                        }\n+                        self.tcx().used_mut_nodes.insert(id);\n                         return;\n                     }\n \n                     mc::cat_stack_upvar(b) => {\n                         cmt = b;\n-                        passed_upvar = true;\n                     }\n \n                     mc::cat_rvalue |\n@@ -552,7 +557,7 @@ pub impl<'self> CheckLoanCtxt<'self> {\n         match cmt.cat {\n             // Rvalues, locals, and arguments can be moved:\n             mc::cat_rvalue | mc::cat_local(_) |\n-            mc::cat_arg(_, ast::by_copy) | mc::cat_self(_) => {}\n+            mc::cat_arg(_) | mc::cat_self(_) => {}\n \n             // It seems strange to allow a move out of a static item,\n             // but what happens in practice is that you have a"}, {"sha": "4d267b7dc471cc823d9934cc21f5128d8f92e25d", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20", "patch": "@@ -255,7 +255,7 @@ impl GuaranteeLifetimeContext {\n         match cmt.guarantor().cat {\n             mc::cat_local(id) |\n             mc::cat_self(id) |\n-            mc::cat_arg(id, _) => {\n+            mc::cat_arg(id) => {\n                 self.bccx.moved_variables_set.contains(&id)\n             }\n             mc::cat_rvalue |\n@@ -292,7 +292,7 @@ impl GuaranteeLifetimeContext {\n                 ty::re_static\n             }\n             mc::cat_local(local_id) |\n-            mc::cat_arg(local_id, _) |\n+            mc::cat_arg(local_id) |\n             mc::cat_self(local_id) => {\n                 self.bccx.tcx.region_maps.encl_region(local_id)\n             }"}, {"sha": "1bc3b70ac3842f012b86ef759e289c1be5a31d2e", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20", "patch": "@@ -27,7 +27,6 @@ use util::common::indenter;\n use util::ppaux::{Repr};\n \n use core::hashmap::HashSet;\n-use core::vec;\n use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n use syntax::ast_util::id_range;\n@@ -169,20 +168,6 @@ fn gather_loans_in_expr(ex: @ast::expr,\n         visit::visit_expr(ex, self, vt);\n       }\n \n-      ast::expr_call(f, ref args, _) => {\n-        let arg_tys = ty::ty_fn_args(ty::expr_ty(self.tcx(), f));\n-        self.guarantee_arguments(ex, *args, arg_tys);\n-        visit::visit_expr(ex, self, vt);\n-      }\n-\n-      ast::expr_method_call(_, _, _, ref args, _) => {\n-        let arg_tys = ty::ty_fn_args(ty::node_id_to_type(self.tcx(),\n-                                                         ex.callee_id));\n-        self.guarantee_arguments(ex, *args, arg_tys);\n-\n-        visit::visit_expr(ex, self, vt);\n-      }\n-\n       ast::expr_match(ex_v, ref arms) => {\n         let cmt = self.bccx.cat_expr(ex_v);\n         for arms.each |arm| {\n@@ -271,30 +256,6 @@ pub impl GatherLoanCtxt {\n         assert!(id == popped);\n     }\n \n-    fn guarantee_arguments(&mut self,\n-                           call_expr: @ast::expr,\n-                           args: &[@ast::expr],\n-                           arg_tys: &[ty::arg]) {\n-        for vec::each2(args, arg_tys) |arg, arg_ty| {\n-            match ty::resolved_mode(self.tcx(), arg_ty.mode) {\n-                ast::by_ref => {\n-                    self.guarantee_by_ref_argument(call_expr, *arg);\n-                }\n-                ast::by_copy => {}\n-            }\n-        }\n-    }\n-\n-    fn guarantee_by_ref_argument(&mut self,\n-                                 call_expr: @ast::expr,\n-                                 arg_expr: @ast::expr) {\n-        // FIXME(#5074) nested method calls\n-        let scope_r = ty::re_scope(call_expr.id);\n-        let arg_cmt = self.bccx.cat_expr(arg_expr);\n-        self.guarantee_valid(arg_expr.id, arg_expr.span,\n-                             arg_cmt, m_imm, scope_r);\n-    }\n-\n     fn guarantee_adjustments(&mut self,\n                              expr: @ast::expr,\n                              adjustment: &ty::AutoAdjustment) {"}, {"sha": "0be4c67a9bc910ddd980ab4d340f0f100c49da97", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20", "patch": "@@ -15,7 +15,6 @@ use middle::borrowck::*;\n use mc = middle::mem_categorization;\n use middle::ty;\n use syntax::ast::{m_const, m_imm, m_mutbl};\n-use syntax::ast;\n use syntax::codemap::span;\n \n pub enum RestrictionResult {\n@@ -74,7 +73,7 @@ impl RestrictionsContext {\n             }\n \n             mc::cat_local(local_id) |\n-            mc::cat_arg(local_id, ast::by_copy) |\n+            mc::cat_arg(local_id) |\n             mc::cat_self(local_id) => {\n                 let lp = @LpVar(local_id);\n                 SafeIf(lp, ~[Restriction {loan_path: lp,\n@@ -114,7 +113,6 @@ impl RestrictionsContext {\n             mc::cat_copied_upvar(*) | // FIXME(#2152) allow mutation of upvars\n             mc::cat_static_item(*) |\n             mc::cat_implicit_self(*) |\n-            mc::cat_arg(_, ast::by_ref) |\n             mc::cat_deref(_, _, mc::region_ptr(m_imm, _)) |\n             mc::cat_deref(_, _, mc::gc_ptr(m_imm)) => {\n                 Safe"}, {"sha": "3f102237237276ad23c35d14eb0a33d941f62680", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=7a0c1ea560126a6ccefbe7981fd1e18d80d3ed20", "patch": "@@ -242,13 +242,12 @@ pub fn opt_loan_path(cmt: mc::cmt) -> Option<@LoanPath> {\n         mc::cat_rvalue |\n         mc::cat_static_item |\n         mc::cat_copied_upvar(_) |\n-        mc::cat_implicit_self |\n-        mc::cat_arg(_, ast::by_ref) => {\n+        mc::cat_implicit_self => {\n             None\n         }\n \n         mc::cat_local(id) |\n-        mc::cat_arg(id, ast::by_copy) |\n+        mc::cat_arg(id) |\n         mc::cat_self(id) => {\n             Some(@LpVar(id))\n         }"}]}