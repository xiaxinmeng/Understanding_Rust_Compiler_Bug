{"sha": "dccd17d23e6e67e410e41f97ba9feb7f71717627", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjY2QxN2QyM2U2ZTY3ZTQxMGU0MWY5N2JhOWZlYjdmNzE3MTc2Mjc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-03-18T06:16:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-03-18T06:16:08Z"}, "message": "Remove the newly introduced trait impls for fixed-size arrays and use &b\"...\"[..] instead.", "tree": {"sha": "057778db15201cdfd27bcf86a2ab17da17b545ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/057778db15201cdfd27bcf86a2ab17da17b545ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dccd17d23e6e67e410e41f97ba9feb7f71717627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dccd17d23e6e67e410e41f97ba9feb7f71717627", "html_url": "https://github.com/rust-lang/rust/commit/dccd17d23e6e67e410e41f97ba9feb7f71717627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dccd17d23e6e67e410e41f97ba9feb7f71717627/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2cccd07bce0477b0fd873590299eb042bc164f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2cccd07bce0477b0fd873590299eb042bc164f5", "html_url": "https://github.com/rust-lang/rust/commit/d2cccd07bce0477b0fd873590299eb042bc164f5"}], "stats": {"total": 334, "additions": 159, "deletions": 175}, "files": [{"sha": "3e8cc46e2550107d9fede430516be79e4e3b289c", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=dccd17d23e6e67e410e41f97ba9feb7f71717627", "patch": "@@ -4054,7 +4054,7 @@ fn namespace_for_item(cx: &CrateContext, def_id: ast::DefId) -> Rc<NamespaceTree\n /// .debug_gdb_scripts global is referenced, so it isn't removed by the linker.\n pub fn insert_reference_to_gdb_debug_scripts_section_global(ccx: &CrateContext) {\n     if needs_gdb_debug_scripts_section(ccx) {\n-        let empty = CString::new(b\"\").unwrap();\n+        let empty = CString::new(\"\").unwrap();\n         let gdb_debug_scripts_section_global =\n             get_or_insert_gdb_debug_scripts_section_global(ccx);\n         unsafe {"}, {"sha": "28f22468d2223656640fa0afb2d9db6401a500a5", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=dccd17d23e6e67e410e41f97ba9feb7f71717627", "patch": "@@ -11,7 +11,6 @@\n #![unstable(feature = \"std_misc\")]\n \n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n-use core::array::FixedSizeArray;\n use error::{Error, FromError};\n use fmt;\n use io;\n@@ -59,7 +58,7 @@ use vec::Vec;\n ///     fn my_printer(s: *const libc::c_char);\n /// }\n ///\n-/// let to_print = b\"Hello, world!\";\n+/// let to_print = &b\"Hello, world!\"[..];\n /// let c_to_print = CString::new(to_print).unwrap();\n /// unsafe {\n ///     my_printer(c_to_print.as_ptr());\n@@ -451,9 +450,6 @@ impl IntoBytes for String {\n impl IntoBytes for Vec<u8> {\n     fn into_bytes(self) -> Vec<u8> { self }\n }\n-impl<'a, T: FixedSizeArray<u8>> IntoBytes for &'a T {\n-    fn into_bytes(self) -> Vec<u8> { self.as_slice().to_vec() }\n-}\n \n #[cfg(test)]\n mod tests {\n@@ -473,14 +469,14 @@ mod tests {\n \n     #[test]\n     fn simple() {\n-        let s = CString::new(b\"1234\").unwrap();\n+        let s = CString::new(\"1234\").unwrap();\n         assert_eq!(s.as_bytes(), b\"1234\");\n         assert_eq!(s.as_bytes_with_nul(), b\"1234\\0\");\n     }\n \n     #[test]\n     fn build_with_zero1() {\n-        assert!(CString::new(b\"\\0\").is_err());\n+        assert!(CString::new(&b\"\\0\"[..]).is_err());\n     }\n     #[test]\n     fn build_with_zero2() {\n@@ -497,7 +493,7 @@ mod tests {\n \n     #[test]\n     fn formatted() {\n-        let s = CString::new(b\"12\").unwrap();\n+        let s = CString::new(&b\"12\"[..]).unwrap();\n         assert_eq!(format!(\"{:?}\", s), \"\\\"12\\\"\");\n     }\n "}, {"sha": "365f5e37b0b30a6413bd81f8361dbe560197fd8d", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=dccd17d23e6e67e410e41f97ba9feb7f71717627", "patch": "@@ -11,7 +11,6 @@\n use prelude::v1::*;\n use io::prelude::*;\n \n-use core::array::FixedSizeArray;\n use cmp;\n use io::{self, SeekFrom, Error, ErrorKind};\n use iter::repeat;\n@@ -73,7 +72,7 @@ macro_rules! seek {\n         fn seek(&mut self, style: SeekFrom) -> io::Result<u64> {\n             let pos = match style {\n                 SeekFrom::Start(n) => { self.pos = n; return Ok(n) }\n-                SeekFrom::End(n) => self.inner.as_slice().len() as i64 + n,\n+                SeekFrom::End(n) => self.inner.len() as i64 + n,\n                 SeekFrom::Current(n) => self.pos as i64 + n,\n             };\n \n@@ -95,7 +94,6 @@ impl<'a> io::Seek for Cursor<&'a [u8]> { seek!(); }\n impl<'a> io::Seek for Cursor<&'a mut [u8]> { seek!(); }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl io::Seek for Cursor<Vec<u8>> { seek!(); }\n-impl<'a, T: FixedSizeArray<u8>> io::Seek for Cursor<&'a T> { seek!(); }\n \n macro_rules! read {\n     () => {\n@@ -113,13 +111,12 @@ impl<'a> Read for Cursor<&'a [u8]> { read!(); }\n impl<'a> Read for Cursor<&'a mut [u8]> { read!(); }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for Cursor<Vec<u8>> { read!(); }\n-impl<'a, T: FixedSizeArray<u8>> Read for Cursor<&'a T> { read!(); }\n \n macro_rules! buffer {\n     () => {\n         fn fill_buf(&mut self) -> io::Result<&[u8]> {\n-            let amt = cmp::min(self.pos, self.inner.as_slice().len() as u64);\n-            Ok(&self.inner.as_slice()[(amt as usize)..])\n+            let amt = cmp::min(self.pos, self.inner.len() as u64);\n+            Ok(&self.inner[(amt as usize)..])\n         }\n         fn consume(&mut self, amt: usize) { self.pos += amt as u64; }\n     }\n@@ -131,7 +128,6 @@ impl<'a> BufRead for Cursor<&'a [u8]> { buffer!(); }\n impl<'a> BufRead for Cursor<&'a mut [u8]> { buffer!(); }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> BufRead for Cursor<Vec<u8>> { buffer!(); }\n-impl<'a, T: FixedSizeArray<u8>> BufRead for Cursor<&'a T> { buffer!(); }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for Cursor<&'a mut [u8]> {\n@@ -332,7 +328,7 @@ mod tests {\n \n     #[test]\n     fn test_read_char() {\n-        let b = b\"Vi\\xE1\\xBB\\x87t\";\n+        let b = &b\"Vi\\xE1\\xBB\\x87t\"[..];\n         let mut c = Cursor::new(b).chars();\n         assert_eq!(c.next(), Some(Ok('V')));\n         assert_eq!(c.next(), Some(Ok('i')));\n@@ -343,7 +339,7 @@ mod tests {\n \n     #[test]\n     fn test_read_bad_char() {\n-        let b = b\"\\x80\";\n+        let b = &b\"\\x80\"[..];\n         let mut c = Cursor::new(b).chars();\n         assert!(c.next().unwrap().is_err());\n     }"}, {"sha": "d9e8047104ad0275147817c58e728e36078a01c5", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=dccd17d23e6e67e410e41f97ba9feb7f71717627", "patch": "@@ -933,12 +933,12 @@ mod tests {\n \n     #[test]\n     fn read_until() {\n-        let mut buf = Cursor::new(b\"12\");\n+        let mut buf = Cursor::new(&b\"12\"[..]);\n         let mut v = Vec::new();\n         assert_eq!(buf.read_until(b'3', &mut v), Ok(2));\n         assert_eq!(v, b\"12\");\n \n-        let mut buf = Cursor::new(b\"1233\");\n+        let mut buf = Cursor::new(&b\"1233\"[..]);\n         let mut v = Vec::new();\n         assert_eq!(buf.read_until(b'3', &mut v), Ok(3));\n         assert_eq!(v, b\"123\");\n@@ -952,12 +952,12 @@ mod tests {\n \n     #[test]\n     fn split() {\n-        let buf = Cursor::new(b\"12\");\n+        let buf = Cursor::new(&b\"12\"[..]);\n         let mut s = buf.split(b'3');\n         assert_eq!(s.next(), Some(Ok(vec![b'1', b'2'])));\n         assert_eq!(s.next(), None);\n \n-        let buf = Cursor::new(b\"1233\");\n+        let buf = Cursor::new(&b\"1233\"[..]);\n         let mut s = buf.split(b'3');\n         assert_eq!(s.next(), Some(Ok(vec![b'1', b'2'])));\n         assert_eq!(s.next(), Some(Ok(vec![])));\n@@ -966,12 +966,12 @@ mod tests {\n \n     #[test]\n     fn read_line() {\n-        let mut buf = Cursor::new(b\"12\");\n+        let mut buf = Cursor::new(&b\"12\"[..]);\n         let mut v = String::new();\n         assert_eq!(buf.read_line(&mut v), Ok(2));\n         assert_eq!(v, \"12\");\n \n-        let mut buf = Cursor::new(b\"12\\n\\n\");\n+        let mut buf = Cursor::new(&b\"12\\n\\n\"[..]);\n         let mut v = String::new();\n         assert_eq!(buf.read_line(&mut v), Ok(3));\n         assert_eq!(v, \"12\\n\");\n@@ -985,12 +985,12 @@ mod tests {\n \n     #[test]\n     fn lines() {\n-        let buf = Cursor::new(b\"12\");\n+        let buf = Cursor::new(&b\"12\"[..]);\n         let mut s = buf.lines();\n         assert_eq!(s.next(), Some(Ok(\"12\".to_string())));\n         assert_eq!(s.next(), None);\n \n-        let buf = Cursor::new(b\"12\\n\\n\");\n+        let buf = Cursor::new(&b\"12\\n\\n\"[..]);\n         let mut s = buf.lines();\n         assert_eq!(s.next(), Some(Ok(\"12\".to_string())));\n         assert_eq!(s.next(), Some(Ok(String::new())));\n@@ -999,30 +999,30 @@ mod tests {\n \n     #[test]\n     fn read_to_end() {\n-        let mut c = Cursor::new(b\"\");\n+        let mut c = Cursor::new(&b\"\"[..]);\n         let mut v = Vec::new();\n         assert_eq!(c.read_to_end(&mut v), Ok(0));\n         assert_eq!(v, []);\n \n-        let mut c = Cursor::new(b\"1\");\n+        let mut c = Cursor::new(&b\"1\"[..]);\n         let mut v = Vec::new();\n         assert_eq!(c.read_to_end(&mut v), Ok(1));\n         assert_eq!(v, b\"1\");\n     }\n \n     #[test]\n     fn read_to_string() {\n-        let mut c = Cursor::new(b\"\");\n+        let mut c = Cursor::new(&b\"\"[..]);\n         let mut v = String::new();\n         assert_eq!(c.read_to_string(&mut v), Ok(0));\n         assert_eq!(v, \"\");\n \n-        let mut c = Cursor::new(b\"1\");\n+        let mut c = Cursor::new(&b\"1\"[..]);\n         let mut v = String::new();\n         assert_eq!(c.read_to_string(&mut v), Ok(1));\n         assert_eq!(v, \"1\");\n \n-        let mut c = Cursor::new(b\"\\xff\");\n+        let mut c = Cursor::new(&b\"\\xff\"[..]);\n         let mut v = String::new();\n         assert!(c.read_to_string(&mut v).is_err());\n     }"}, {"sha": "53b126ec00038f5ca8205abbc0cc9d2fc4055521", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=dccd17d23e6e67e410e41f97ba9feb7f71717627", "patch": "@@ -1231,7 +1231,7 @@ mod tests {\n         cmd.env(\"path\", \"foo\");\n         cmd.env(\"Path\", \"bar\");\n         let env = &cmd.env.unwrap();\n-        let val = env.get(&EnvKey(CString::new(b\"PATH\").unwrap()));\n-        assert!(val.unwrap() == &CString::new(b\"bar\").unwrap());\n+        let val = env.get(&EnvKey(CString::new(\"PATH\").unwrap()));\n+        assert!(val.unwrap() == &CString::new(\"bar\").unwrap());\n     }\n }"}, {"sha": "5fc34c0fe920a84bb665413be7029271005b3a3c", "filename": "src/libstd/old_path/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fold_path%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fold_path%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fmod.rs?ref=dccd17d23e6e67e410e41f97ba9feb7f71717627", "patch": "@@ -64,7 +64,6 @@\n #![allow(deprecated)] // seriously this is all deprecated\n #![allow(unused_imports)]\n \n-use core::array::FixedSizeArray;\n use core::marker::Sized;\n use ffi::CString;\n use clone::Clone;\n@@ -896,13 +895,6 @@ impl BytesContainer for [u8] {\n     }\n }\n \n-impl<T: FixedSizeArray<u8>> BytesContainer for T {\n-    #[inline]\n-    fn container_as_bytes(&self) -> &[u8] {\n-        self.as_slice()\n-    }\n-}\n-\n impl BytesContainer for Vec<u8> {\n     #[inline]\n     fn container_as_bytes(&self) -> &[u8] {"}, {"sha": "c42f1e6b07da5efba0c67a8cd9be572b01f45723", "filename": "src/libstd/old_path/posix.rs", "status": "modified", "additions": 93, "deletions": 93, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fold_path%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fold_path%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fposix.rs?ref=dccd17d23e6e67e410e41f97ba9feb7f71717627", "patch": "@@ -477,11 +477,11 @@ mod tests {\n     fn test_paths() {\n         let empty: &[u8] = &[];\n         t!(v: Path::new(empty), b\".\");\n-        t!(v: Path::new(b\"/\"), b\"/\");\n-        t!(v: Path::new(b\"a/b/c\"), b\"a/b/c\");\n-        t!(v: Path::new(b\"a/b/c\\xFF\"), b\"a/b/c\\xFF\");\n-        t!(v: Path::new(b\"\\xFF/../foo\\x80\"), b\"foo\\x80\");\n-        let p = Path::new(b\"a/b/c\\xFF\");\n+        t!(v: Path::new(&b\"/\"[..]), b\"/\");\n+        t!(v: Path::new(&b\"a/b/c\"[..]), b\"a/b/c\");\n+        t!(v: Path::new(&b\"a/b/c\\xFF\"[..]), b\"a/b/c\\xFF\");\n+        t!(v: Path::new(&b\"\\xFF/../foo\\x80\"[..]), b\"foo\\x80\");\n+        let p = Path::new(&b\"a/b/c\\xFF\"[..]);\n         assert!(p.as_str().is_none());\n \n         t!(s: Path::new(\"\"), \".\");\n@@ -507,18 +507,18 @@ mod tests {\n         t!(s: Path::new(\"foo/../../..\"), \"../..\");\n         t!(s: Path::new(\"foo/../../bar\"), \"../bar\");\n \n-        assert_eq!(Path::new(b\"foo/bar\").into_vec(), b\"foo/bar\");\n-        assert_eq!(Path::new(b\"/foo/../../bar\").into_vec(),\n+        assert_eq!(Path::new(&b\"foo/bar\"[..]).into_vec(), b\"foo/bar\");\n+        assert_eq!(Path::new(&b\"/foo/../../bar\"[..]).into_vec(),\n                    b\"/bar\");\n \n-        let p = Path::new(b\"foo/bar\\x80\");\n+        let p = Path::new(&b\"foo/bar\\x80\"[..]);\n         assert!(p.as_str().is_none());\n     }\n \n     #[test]\n     fn test_opt_paths() {\n-        assert!(Path::new_opt(b\"foo/bar\\0\").is_none());\n-        t!(v: Path::new_opt(b\"foo/bar\").unwrap(), b\"foo/bar\");\n+        assert!(Path::new_opt(&b\"foo/bar\\0\"[..]).is_none());\n+        t!(v: Path::new_opt(&b\"foo/bar\"[..]).unwrap(), b\"foo/bar\");\n         assert!(Path::new_opt(\"foo/bar\\0\").is_none());\n         t!(s: Path::new_opt(\"foo/bar\").unwrap(), \"foo/bar\");\n     }\n@@ -527,17 +527,17 @@ mod tests {\n     fn test_null_byte() {\n         use thread;\n         let result = thread::spawn(move|| {\n-            Path::new(b\"foo/bar\\0\");\n+            Path::new(&b\"foo/bar\\0\"[..]);\n         }).join();\n         assert!(result.is_err());\n \n         let result = thread::spawn(move|| {\n-            Path::new(\"test\").set_filename(b\"f\\0o\")\n+            Path::new(\"test\").set_filename(&b\"f\\0o\"[..])\n         }).join();\n         assert!(result.is_err());\n \n         let result = thread::spawn(move|| {\n-            Path::new(\"test\").push(b\"f\\0o\");\n+            Path::new(\"test\").push(&b\"f\\0o\"[..]);\n         }).join();\n         assert!(result.is_err());\n     }\n@@ -553,11 +553,11 @@ mod tests {\n             )\n         }\n         t!(\"foo\", display, \"foo\");\n-        t!(b\"foo\\x80\", display, \"foo\\u{FFFD}\");\n-        t!(b\"foo\\xFFbar\", display, \"foo\\u{FFFD}bar\");\n-        t!(b\"foo\\xFF/bar\", filename_display, \"bar\");\n-        t!(b\"foo/\\xFFbar\", filename_display, \"\\u{FFFD}bar\");\n-        t!(b\"/\", filename_display, \"\");\n+        t!(&b\"foo\\x80\"[..], display, \"foo\\u{FFFD}\");\n+        t!(&b\"foo\\xFFbar\"[..], display, \"foo\\u{FFFD}bar\");\n+        t!(&b\"foo\\xFF/bar\"[..], filename_display, \"bar\");\n+        t!(&b\"foo/\\xFFbar\"[..], filename_display, \"\\u{FFFD}bar\");\n+        t!(&b\"/\"[..], filename_display, \"\");\n \n         macro_rules! t {\n             ($path:expr, $exp:expr) => (\n@@ -577,11 +577,11 @@ mod tests {\n         }\n \n         t!(\"foo\", \"foo\");\n-        t!(b\"foo\\x80\", \"foo\\u{FFFD}\");\n-        t!(b\"foo\\xFFbar\", \"foo\\u{FFFD}bar\");\n-        t!(b\"foo\\xFF/bar\", \"bar\", filename);\n-        t!(b\"foo/\\xFFbar\", \"\\u{FFFD}bar\", filename);\n-        t!(b\"/\", \"\", filename);\n+        t!(&b\"foo\\x80\"[..], \"foo\\u{FFFD}\");\n+        t!(&b\"foo\\xFFbar\"[..], \"foo\\u{FFFD}bar\");\n+        t!(&b\"foo\\xFF/bar\"[..], \"bar\", filename);\n+        t!(&b\"foo/\\xFFbar\"[..], \"\\u{FFFD}bar\", filename);\n+        t!(&b\"/\"[..], \"\", filename);\n     }\n \n     #[test]\n@@ -598,13 +598,13 @@ mod tests {\n             )\n         }\n \n-        t!(b\"foo\", \"foo\", \"foo\");\n-        t!(b\"foo/bar\", \"foo/bar\", \"bar\");\n-        t!(b\"/\", \"/\", \"\");\n-        t!(b\"foo\\xFF\", \"foo\\u{FFFD}\", \"foo\\u{FFFD}\");\n-        t!(b\"foo\\xFF/bar\", \"foo\\u{FFFD}/bar\", \"bar\");\n-        t!(b\"foo/\\xFFbar\", \"foo/\\u{FFFD}bar\", \"\\u{FFFD}bar\");\n-        t!(b\"\\xFFfoo/bar\\xFF\", \"\\u{FFFD}foo/bar\\u{FFFD}\", \"bar\\u{FFFD}\");\n+        t!(&b\"foo\"[..], \"foo\", \"foo\");\n+        t!(&b\"foo/bar\"[..], \"foo/bar\", \"bar\");\n+        t!(&b\"/\"[..], \"/\", \"\");\n+        t!(&b\"foo\\xFF\"[..], \"foo\\u{FFFD}\", \"foo\\u{FFFD}\");\n+        t!(&b\"foo\\xFF/bar\"[..], \"foo\\u{FFFD}/bar\", \"bar\");\n+        t!(&b\"foo/\\xFFbar\"[..], \"foo/\\u{FFFD}bar\", \"\\u{FFFD}bar\");\n+        t!(&b\"\\xFFfoo/bar\\xFF\"[..], \"\\u{FFFD}foo/bar\\u{FFFD}\", \"bar\\u{FFFD}\");\n     }\n \n     #[test]\n@@ -632,9 +632,9 @@ mod tests {\n             );\n         }\n \n-        t!(v: b\"a/b/c\", filename, Some(&b\"c\"[..]));\n-        t!(v: b\"a/b/c\\xFF\", filename, Some(&b\"c\\xFF\"[..]));\n-        t!(v: b\"a/b\\xFF/c\", filename, Some(&b\"c\"[..]));\n+        t!(v: &b\"a/b/c\"[..], filename, Some(&b\"c\"[..]));\n+        t!(v: &b\"a/b/c\\xFF\"[..], filename, Some(&b\"c\\xFF\"[..]));\n+        t!(v: &b\"a/b\\xFF/c\"[..], filename, Some(&b\"c\"[..]));\n         t!(s: \"a/b/c\", filename, Some(\"c\"), opt);\n         t!(s: \"/a/b/c\", filename, Some(\"c\"), opt);\n         t!(s: \"a\", filename, Some(\"a\"), opt);\n@@ -644,9 +644,9 @@ mod tests {\n         t!(s: \"..\", filename, None, opt);\n         t!(s: \"../..\", filename, None, opt);\n \n-        t!(v: b\"a/b/c\", dirname, b\"a/b\");\n-        t!(v: b\"a/b/c\\xFF\", dirname, b\"a/b\");\n-        t!(v: b\"a/b\\xFF/c\", dirname, b\"a/b\\xFF\");\n+        t!(v: &b\"a/b/c\"[..], dirname, b\"a/b\");\n+        t!(v: &b\"a/b/c\\xFF\"[..], dirname, b\"a/b\");\n+        t!(v: &b\"a/b\\xFF/c\"[..], dirname, b\"a/b\\xFF\");\n         t!(s: \"a/b/c\", dirname, \"a/b\");\n         t!(s: \"/a/b/c\", dirname, \"/a/b\");\n         t!(s: \"a\", dirname, \".\");\n@@ -656,9 +656,9 @@ mod tests {\n         t!(s: \"..\", dirname, \"..\");\n         t!(s: \"../..\", dirname, \"../..\");\n \n-        t!(v: b\"hi/there.txt\", filestem, Some(&b\"there\"[..]));\n-        t!(v: b\"hi/there\\x80.txt\", filestem, Some(&b\"there\\x80\"[..]));\n-        t!(v: b\"hi/there.t\\x80xt\", filestem, Some(&b\"there\"[..]));\n+        t!(v: &b\"hi/there.txt\"[..], filestem, Some(&b\"there\"[..]));\n+        t!(v: &b\"hi/there\\x80.txt\"[..], filestem, Some(&b\"there\\x80\"[..]));\n+        t!(v: &b\"hi/there.t\\x80xt\"[..], filestem, Some(&b\"there\"[..]));\n         t!(s: \"hi/there.txt\", filestem, Some(\"there\"), opt);\n         t!(s: \"hi/there\", filestem, Some(\"there\"), opt);\n         t!(s: \"there.txt\", filestem, Some(\"there\"), opt);\n@@ -672,11 +672,11 @@ mod tests {\n         t!(s: \"..\", filestem, None, opt);\n         t!(s: \"../..\", filestem, None, opt);\n \n-        t!(v: b\"hi/there.txt\", extension, Some(&b\"txt\"[..]));\n-        t!(v: b\"hi/there\\x80.txt\", extension, Some(&b\"txt\"[..]));\n-        t!(v: b\"hi/there.t\\x80xt\", extension, Some(&b\"t\\x80xt\"[..]));\n-        t!(v: b\"hi/there\", extension, None);\n-        t!(v: b\"hi/there\\x80\", extension, None);\n+        t!(v: &b\"hi/there.txt\"[..], extension, Some(&b\"txt\"[..]));\n+        t!(v: &b\"hi/there\\x80.txt\"[..], extension, Some(&b\"txt\"[..]));\n+        t!(v: &b\"hi/there.t\\x80xt\"[..], extension, Some(&b\"t\\x80xt\"[..]));\n+        t!(v: &b\"hi/there\"[..], extension, None);\n+        t!(v: &b\"hi/there\\x80\"[..], extension, None);\n         t!(s: \"hi/there.txt\", extension, Some(\"txt\"), opt);\n         t!(s: \"hi/there\", extension, None, opt);\n         t!(s: \"there.txt\", extension, Some(\"txt\"), opt);\n@@ -756,9 +756,9 @@ mod tests {\n         t!(s: \"a/b/c\", [\"d\", \"/e\"], \"/e\");\n         t!(s: \"a/b/c\", [\"d\", \"/e\", \"f\"], \"/e/f\");\n         t!(s: \"a/b/c\", [\"d\".to_string(), \"e\".to_string()], \"a/b/c/d/e\");\n-        t!(v: b\"a/b/c\", [&b\"d\"[..], &b\"e\"[..]], b\"a/b/c/d/e\");\n-        t!(v: b\"a/b/c\", [&b\"d\"[..], &b\"/e\"[..], &b\"f\"[..]], b\"/e/f\");\n-        t!(v: b\"a/b/c\", [b\"d\".to_vec(), b\"e\".to_vec()], b\"a/b/c/d/e\");\n+        t!(v: &b\"a/b/c\"[..], [&b\"d\"[..], &b\"e\"[..]], b\"a/b/c/d/e\");\n+        t!(v: &b\"a/b/c\"[..], [&b\"d\"[..], &b\"/e\"[..], &b\"f\"[..]], b\"/e/f\");\n+        t!(v: &b\"a/b/c\"[..], [b\"d\".to_vec(), b\"e\".to_vec()], b\"a/b/c/d/e\");\n     }\n \n     #[test]\n@@ -782,15 +782,15 @@ mod tests {\n             )\n         }\n \n-        t!(b: b\"a/b/c\", b\"a/b\", true);\n-        t!(b: b\"a\", b\".\", true);\n-        t!(b: b\".\", b\".\", false);\n-        t!(b: b\"/a\", b\"/\", true);\n-        t!(b: b\"/\", b\"/\", false);\n-        t!(b: b\"a/b/c\\x80\", b\"a/b\", true);\n-        t!(b: b\"a/b\\x80/c\", b\"a/b\\x80\", true);\n-        t!(b: b\"\\xFF\", b\".\", true);\n-        t!(b: b\"/\\xFF\", b\"/\", true);\n+        t!(b: &b\"a/b/c\"[..], b\"a/b\", true);\n+        t!(b: &b\"a\"[..], b\".\", true);\n+        t!(b: &b\".\"[..], b\".\", false);\n+        t!(b: &b\"/a\"[..], b\"/\", true);\n+        t!(b: &b\"/\"[..], b\"/\", false);\n+        t!(b: &b\"a/b/c\\x80\"[..], b\"a/b\", true);\n+        t!(b: &b\"a/b\\x80/c\"[..], b\"a/b\\x80\", true);\n+        t!(b: &b\"\\xFF\"[..], b\".\", true);\n+        t!(b: &b\"/\\xFF\"[..], b\"/\", true);\n         t!(s: \"a/b/c\", \"a/b\", true);\n         t!(s: \"a\", \".\", true);\n         t!(s: \".\", \".\", false);\n@@ -800,15 +800,15 @@ mod tests {\n \n     #[test]\n     fn test_root_path() {\n-        assert_eq!(Path::new(b\"a/b/c\").root_path(), None);\n-        assert_eq!(Path::new(b\"/a/b/c\").root_path(), Some(Path::new(\"/\")));\n+        assert_eq!(Path::new(&b\"a/b/c\"[..]).root_path(), None);\n+        assert_eq!(Path::new(&b\"/a/b/c\"[..]).root_path(), Some(Path::new(\"/\")));\n     }\n \n     #[test]\n     fn test_join() {\n-        t!(v: Path::new(b\"a/b/c\").join(b\"..\"), b\"a/b\");\n-        t!(v: Path::new(b\"/a/b/c\").join(b\"d\"), b\"/a/b/c/d\");\n-        t!(v: Path::new(b\"a/\\x80/c\").join(b\"\\xFF\"), b\"a/\\x80/c/\\xFF\");\n+        t!(v: Path::new(&b\"a/b/c\"[..]).join(&b\"..\"[..]), b\"a/b\");\n+        t!(v: Path::new(&b\"/a/b/c\"[..]).join(&b\"d\"[..]), b\"/a/b/c/d\");\n+        t!(v: Path::new(&b\"a/\\x80/c\"[..]).join(&b\"\\xFF\"[..]), b\"a/\\x80/c/\\xFF\");\n         t!(s: Path::new(\"a/b/c\").join(\"..\"), \"a/b\");\n         t!(s: Path::new(\"/a/b/c\").join(\"d\"), \"/a/b/c/d\");\n         t!(s: Path::new(\"a/b\").join(\"c/d\"), \"a/b/c/d\");\n@@ -861,17 +861,17 @@ mod tests {\n         t!(s: \"a/b/c\", [\"..\", \"d\"], \"a/b/d\");\n         t!(s: \"a/b/c\", [\"d\", \"/e\", \"f\"], \"/e/f\");\n         t!(s: \"a/b/c\", [\"d\".to_string(), \"e\".to_string()], \"a/b/c/d/e\");\n-        t!(v: b\"a/b/c\", [b\"d\", b\"e\"], b\"a/b/c/d/e\");\n-        t!(v: b\"a/b/c\", [b\"d\".to_vec(), b\"e\".to_vec()], b\"a/b/c/d/e\");\n+        t!(v: &b\"a/b/c\"[..], [&b\"d\"[..], &b\"e\"[..]], b\"a/b/c/d/e\");\n+        t!(v: &b\"a/b/c\"[..], [b\"d\".to_vec(), b\"e\".to_vec()], b\"a/b/c/d/e\");\n     }\n \n     #[test]\n     fn test_with_helpers() {\n         let empty: &[u8] = &[];\n \n-        t!(v: Path::new(b\"a/b/c\").with_filename(b\"d\"), b\"a/b/d\");\n-        t!(v: Path::new(b\"a/b/c\\xFF\").with_filename(b\"\\x80\"), b\"a/b/\\x80\");\n-        t!(v: Path::new(b\"/\\xFF/foo\").with_filename(b\"\\xCD\"),\n+        t!(v: Path::new(&b\"a/b/c\"[..]).with_filename(&b\"d\"[..]), b\"a/b/d\");\n+        t!(v: Path::new(&b\"a/b/c\\xFF\"[..]).with_filename(&b\"\\x80\"[..]), b\"a/b/\\x80\");\n+        t!(v: Path::new(&b\"/\\xFF/foo\"[..]).with_filename(&b\"\\xCD\"[..]),\n               b\"/\\xFF/\\xCD\");\n         t!(s: Path::new(\"a/b/c\").with_filename(\"d\"), \"a/b/d\");\n         t!(s: Path::new(\".\").with_filename(\"foo\"), \"foo\");\n@@ -893,13 +893,13 @@ mod tests {\n         t!(s: Path::new(\"..\").with_filename(\"\"), \"..\");\n         t!(s: Path::new(\"../..\").with_filename(\"\"), \"../..\");\n \n-        t!(v: Path::new(b\"hi/there\\x80.txt\").with_extension(b\"exe\"),\n+        t!(v: Path::new(&b\"hi/there\\x80.txt\"[..]).with_extension(&b\"exe\"[..]),\n               b\"hi/there\\x80.exe\");\n-        t!(v: Path::new(b\"hi/there.txt\\x80\").with_extension(b\"\\xFF\"),\n+        t!(v: Path::new(&b\"hi/there.txt\\x80\"[..]).with_extension(&b\"\\xFF\"[..]),\n               b\"hi/there.\\xFF\");\n-        t!(v: Path::new(b\"hi/there\\x80\").with_extension(b\"\\xFF\"),\n+        t!(v: Path::new(&b\"hi/there\\x80\"[..]).with_extension(&b\"\\xFF\"[..]),\n               b\"hi/there\\x80.\\xFF\");\n-        t!(v: Path::new(b\"hi/there.\\xFF\").with_extension(empty), b\"hi/there\");\n+        t!(v: Path::new(&b\"hi/there.\\xFF\"[..]).with_extension(empty), b\"hi/there\");\n         t!(s: Path::new(\"hi/there.txt\").with_extension(\"exe\"), \"hi/there.exe\");\n         t!(s: Path::new(\"hi/there.txt\").with_extension(\"\"), \"hi/there\");\n         t!(s: Path::new(\"hi/there.txt\").with_extension(\".\"), \"hi/there..\");\n@@ -941,17 +941,17 @@ mod tests {\n             )\n         }\n \n-        t!(v: b\"a/b/c\", set_filename, with_filename, b\"d\");\n-        t!(v: b\"/\", set_filename, with_filename, b\"foo\");\n-        t!(v: b\"\\x80\", set_filename, with_filename, b\"\\xFF\");\n+        t!(v: &b\"a/b/c\"[..], set_filename, with_filename, &b\"d\"[..]);\n+        t!(v: &b\"/\"[..], set_filename, with_filename, &b\"foo\"[..]);\n+        t!(v: &b\"\\x80\"[..], set_filename, with_filename, &b\"\\xFF\"[..]);\n         t!(s: \"a/b/c\", set_filename, with_filename, \"d\");\n         t!(s: \"/\", set_filename, with_filename, \"foo\");\n         t!(s: \".\", set_filename, with_filename, \"foo\");\n         t!(s: \"a/b\", set_filename, with_filename, \"\");\n         t!(s: \"a\", set_filename, with_filename, \"\");\n \n-        t!(v: b\"hi/there.txt\", set_extension, with_extension, b\"exe\");\n-        t!(v: b\"hi/there.t\\x80xt\", set_extension, with_extension, b\"exe\\xFF\");\n+        t!(v: &b\"hi/there.txt\"[..], set_extension, with_extension, &b\"exe\"[..]);\n+        t!(v: &b\"hi/there.t\\x80xt\"[..], set_extension, with_extension, &b\"exe\\xFF\"[..]);\n         t!(s: \"hi/there.txt\", set_extension, with_extension, \"exe\");\n         t!(s: \"hi/there.\", set_extension, with_extension, \"txt\");\n         t!(s: \"hi/there\", set_extension, with_extension, \"txt\");\n@@ -983,9 +983,9 @@ mod tests {\n             )\n         }\n \n-        t!(v: Path::new(b\"a/b/c\"), Some(&b\"c\"[..]), b\"a/b\", Some(&b\"c\"[..]), None);\n-        t!(v: Path::new(b\"a/b/\\xFF\"), Some(&b\"\\xFF\"[..]), b\"a/b\", Some(&b\"\\xFF\"[..]), None);\n-        t!(v: Path::new(b\"hi/there.\\xFF\"), Some(&b\"there.\\xFF\"[..]), b\"hi\",\n+        t!(v: Path::new(&b\"a/b/c\"[..]), Some(&b\"c\"[..]), b\"a/b\", Some(&b\"c\"[..]), None);\n+        t!(v: Path::new(&b\"a/b/\\xFF\"[..]), Some(&b\"\\xFF\"[..]), b\"a/b\", Some(&b\"\\xFF\"[..]), None);\n+        t!(v: Path::new(&b\"hi/there.\\xFF\"[..]), Some(&b\"there.\\xFF\"[..]), b\"hi\",\n               Some(&b\"there\"[..]), Some(&b\"\\xFF\"[..]));\n         t!(s: Path::new(\"a/b/c\"), Some(\"c\"), Some(\"a/b\"), Some(\"c\"), None);\n         t!(s: Path::new(\".\"), None, Some(\".\"), None, None);\n@@ -1000,16 +1000,16 @@ mod tests {\n         t!(s: Path::new(\"hi/.there\"), Some(\".there\"), Some(\"hi\"), Some(\".there\"), None);\n         t!(s: Path::new(\"hi/..there\"), Some(\"..there\"), Some(\"hi\"),\n               Some(\".\"), Some(\"there\"));\n-        t!(s: Path::new(b\"a/b/\\xFF\"), None, Some(\"a/b\"), None, None);\n-        t!(s: Path::new(b\"a/b/\\xFF.txt\"), None, Some(\"a/b\"), None, Some(\"txt\"));\n-        t!(s: Path::new(b\"a/b/c.\\x80\"), None, Some(\"a/b\"), Some(\"c\"), None);\n-        t!(s: Path::new(b\"\\xFF/b\"), Some(\"b\"), None, Some(\"b\"), None);\n+        t!(s: Path::new(&b\"a/b/\\xFF\"[..]), None, Some(\"a/b\"), None, None);\n+        t!(s: Path::new(&b\"a/b/\\xFF.txt\"[..]), None, Some(\"a/b\"), None, Some(\"txt\"));\n+        t!(s: Path::new(&b\"a/b/c.\\x80\"[..]), None, Some(\"a/b\"), Some(\"c\"), None);\n+        t!(s: Path::new(&b\"\\xFF/b\"[..]), Some(\"b\"), None, Some(\"b\"), None);\n     }\n \n     #[test]\n     fn test_dir_path() {\n-        t!(v: Path::new(b\"hi/there\\x80\").dir_path(), b\"hi\");\n-        t!(v: Path::new(b\"hi\\xFF/there\").dir_path(), b\"hi\\xFF\");\n+        t!(v: Path::new(&b\"hi/there\\x80\"[..]).dir_path(), b\"hi\");\n+        t!(v: Path::new(&b\"hi\\xFF/there\"[..]).dir_path(), b\"hi\\xFF\");\n         t!(s: Path::new(\"hi/there\").dir_path(), \"hi\");\n         t!(s: Path::new(\"hi\").dir_path(), \".\");\n         t!(s: Path::new(\"/hi\").dir_path(), \"/\");\n@@ -1107,9 +1107,9 @@ mod tests {\n         t!(s: \"/a/b/c\", \"d/e/f\", false);\n         t!(s: \"a/b/c\", \"a/b\", false);\n         t!(s: \"a/b/c\", \"b\", false);\n-        t!(v: b\"a/b/c\", b\"b/c\", true);\n-        t!(v: b\"a/b/\\xFF\", b\"\\xFF\", true);\n-        t!(v: b\"a/b/\\xFF\", b\"b/\\xFF\", true);\n+        t!(v: &b\"a/b/c\"[..], &b\"b/c\"[..], true);\n+        t!(v: &b\"a/b/\\xFF\"[..], &b\"\\xFF\"[..], true);\n+        t!(v: &b\"a/b/\\xFF\"[..], &b\"b/\\xFF\"[..], true);\n     }\n \n     #[test]\n@@ -1185,9 +1185,9 @@ mod tests {\n             )\n         }\n \n-        t!(b: b\"a/b/c\", [b\"a\", b\"b\", b\"c\"]);\n-        t!(b: b\"/\\xFF/a/\\x80\", [b\"\\xFF\", b\"a\", b\"\\x80\"]);\n-        t!(b: b\"../../foo\\xCDbar\", [b\"..\", b\"..\", b\"foo\\xCDbar\"]);\n+        t!(b: &b\"a/b/c\"[..], [b\"a\", b\"b\", b\"c\"]);\n+        t!(b: &b\"/\\xFF/a/\\x80\"[..], [b\"\\xFF\", b\"a\", b\"\\x80\"]);\n+        t!(b: &b\"../../foo\\xCDbar\"[..], [b\"..\", b\"..\", b\"foo\\xCDbar\"]);\n         t!(s: \"a/b/c\", [\"a\", \"b\", \"c\"]);\n         t!(s: \"a/b/d\", [\"a\", \"b\", \"d\"]);\n         t!(s: \"a/b/cd\", [\"a\", \"b\", \"cd\"]);\n@@ -1217,9 +1217,9 @@ mod tests {\n             )\n         }\n \n-        t!(b: b\"a/b/c\", [Some(\"a\"), Some(\"b\"), Some(\"c\")]);\n-        t!(b: b\"/\\xFF/a/\\x80\", [None, Some(\"a\"), None]);\n-        t!(b: b\"../../foo\\xCDbar\", [Some(\"..\"), Some(\"..\"), None]);\n+        t!(b: &b\"a/b/c\"[..], [Some(\"a\"), Some(\"b\"), Some(\"c\")]);\n+        t!(b: &b\"/\\xFF/a/\\x80\"[..], [None, Some(\"a\"), None]);\n+        t!(b: &b\"../../foo\\xCDbar\"[..], [Some(\"..\"), Some(\"..\"), None]);\n         // str_components is a wrapper around components, so no need to do\n         // the full set of tests\n     }"}, {"sha": "6c5311d859c2d2d2f031494f34a03b03b2190450", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=dccd17d23e6e67e410e41f97ba9feb7f71717627", "patch": "@@ -1217,8 +1217,8 @@ mod tests {\n     fn test_paths() {\n         let empty: &[u8] = &[];\n         t!(v: Path::new(empty), b\".\");\n-        t!(v: Path::new(b\"\\\\\"), b\"\\\\\");\n-        t!(v: Path::new(b\"a\\\\b\\\\c\"), b\"a\\\\b\\\\c\");\n+        t!(v: Path::new(&b\"\\\\\"[..]), b\"\\\\\");\n+        t!(v: Path::new(&b\"a\\\\b\\\\c\"[..]), b\"a\\\\b\\\\c\");\n \n         t!(s: Path::new(\"\"), \".\");\n         t!(s: Path::new(\"\\\\\"), \"\\\\\");\n@@ -1250,8 +1250,8 @@ mod tests {\n         t!(s: Path::new(\"foo\\\\..\\\\..\\\\..\"), \"..\\\\..\");\n         t!(s: Path::new(\"foo\\\\..\\\\..\\\\bar\"), \"..\\\\bar\");\n \n-        assert_eq!(Path::new(b\"foo\\\\bar\").into_vec(), b\"foo\\\\bar\");\n-        assert_eq!(Path::new(b\"\\\\foo\\\\..\\\\..\\\\bar\").into_vec(), b\"\\\\bar\");\n+        assert_eq!(Path::new(&b\"foo\\\\bar\"[..]).into_vec(), b\"foo\\\\bar\");\n+        assert_eq!(Path::new(&b\"\\\\foo\\\\..\\\\..\\\\bar\"[..]).into_vec(), b\"\\\\bar\");\n \n         t!(s: Path::new(\"\\\\\\\\a\"), \"\\\\a\");\n         t!(s: Path::new(\"\\\\\\\\a\\\\\"), \"\\\\a\");\n@@ -1304,9 +1304,9 @@ mod tests {\n \n     #[test]\n     fn test_opt_paths() {\n-        assert!(Path::new_opt(b\"foo\\\\bar\\0\") == None);\n-        assert!(Path::new_opt(b\"foo\\\\bar\\x80\") == None);\n-        t!(v: Path::new_opt(b\"foo\\\\bar\").unwrap(), b\"foo\\\\bar\");\n+        assert!(Path::new_opt(&b\"foo\\\\bar\\0\"[..]) == None);\n+        assert!(Path::new_opt(&b\"foo\\\\bar\\x80\"[..]) == None);\n+        t!(v: Path::new_opt(&b\"foo\\\\bar\"[..]).unwrap(), b\"foo\\\\bar\");\n         assert!(Path::new_opt(\"foo\\\\bar\\0\") == None);\n         t!(s: Path::new_opt(\"foo\\\\bar\").unwrap(), \"foo\\\\bar\");\n     }\n@@ -1315,38 +1315,38 @@ mod tests {\n     fn test_null_byte() {\n         use thread;\n         let result = thread::spawn(move|| {\n-            Path::new(b\"foo/bar\\0\");\n+            Path::new(&b\"foo/bar\\0\"[..]);\n         }).join();\n         assert!(result.is_err());\n \n         let result = thread::spawn(move|| {\n-            Path::new(\"test\").set_filename(b\"f\\0o\")\n+            Path::new(\"test\").set_filename(&b\"f\\0o\"[..])\n         }).join();\n         assert!(result.is_err());\n \n         let result = thread::spawn(move || {\n-            Path::new(\"test\").push(b\"f\\0o\");\n+            Path::new(\"test\").push(&b\"f\\0o\"[..]);\n         }).join();\n         assert!(result.is_err());\n     }\n \n     #[test]\n     #[should_panic]\n     fn test_not_utf8_panics() {\n-        Path::new(b\"hello\\x80.txt\");\n+        Path::new(&b\"hello\\x80.txt\"[..]);\n     }\n \n     #[test]\n     fn test_display_str() {\n         let path = Path::new(\"foo\");\n         assert_eq!(path.display().to_string(), \"foo\");\n-        let path = Path::new(b\"\\\\\");\n+        let path = Path::new(&b\"\\\\\"[..]);\n         assert_eq!(path.filename_display().to_string(), \"\");\n \n         let path = Path::new(\"foo\");\n         let mo = path.display().as_cow();\n         assert_eq!(mo, \"foo\");\n-        let path = Path::new(b\"\\\\\");\n+        let path = Path::new(&b\"\\\\\"[..]);\n         let mo = path.filename_display().as_cow();\n         assert_eq!(mo, \"\");\n     }\n@@ -1397,7 +1397,7 @@ mod tests {\n             )\n         }\n \n-        t!(v: b\"a\\\\b\\\\c\", filename, Some(&b\"c\"[..]));\n+        t!(v: &b\"a\\\\b\\\\c\"[..], filename, Some(&b\"c\"[..]));\n         t!(s: \"a\\\\b\\\\c\", filename_str, \"c\");\n         t!(s: \"\\\\a\\\\b\\\\c\", filename_str, \"c\");\n         t!(s: \"a\", filename_str, \"a\");\n@@ -1430,7 +1430,7 @@ mod tests {\n         t!(s: \"\\\\\\\\.\\\\\", filename_str, None, opt);\n         t!(s: \"\\\\\\\\?\\\\a\\\\b\\\\\", filename_str, \"b\");\n \n-        t!(v: b\"a\\\\b\\\\c\", dirname, b\"a\\\\b\");\n+        t!(v: &b\"a\\\\b\\\\c\"[..], dirname, b\"a\\\\b\");\n         t!(s: \"a\\\\b\\\\c\", dirname_str, \"a\\\\b\");\n         t!(s: \"\\\\a\\\\b\\\\c\", dirname_str, \"\\\\a\\\\b\");\n         t!(s: \"a\", dirname_str, \".\");\n@@ -1461,7 +1461,7 @@ mod tests {\n         t!(s: \"\\\\\\\\.\\\\foo\", dirname_str, \"\\\\\\\\.\\\\foo\");\n         t!(s: \"\\\\\\\\?\\\\a\\\\b\\\\\", dirname_str, \"\\\\\\\\?\\\\a\");\n \n-        t!(v: b\"hi\\\\there.txt\", filestem, Some(&b\"there\"[..]));\n+        t!(v: &b\"hi\\\\there.txt\"[..], filestem, Some(&b\"there\"[..]));\n         t!(s: \"hi\\\\there.txt\", filestem_str, \"there\");\n         t!(s: \"hi\\\\there\", filestem_str, \"there\");\n         t!(s: \"there.txt\", filestem_str, \"there\");\n@@ -1476,8 +1476,8 @@ mod tests {\n         t!(s: \"..\\\\..\", filestem_str, None, opt);\n         // filestem is based on filename, so we don't need the full set of prefix tests\n \n-        t!(v: b\"hi\\\\there.txt\", extension, Some(&b\"txt\"[..]));\n-        t!(v: b\"hi\\\\there\", extension, None);\n+        t!(v: &b\"hi\\\\there.txt\"[..], extension, Some(&b\"txt\"[..]));\n+        t!(v: &b\"hi\\\\there\"[..], extension, None);\n         t!(s: \"hi\\\\there.txt\", extension_str, Some(\"txt\"), opt);\n         t!(s: \"hi\\\\there\", extension_str, None, opt);\n         t!(s: \"there.txt\", extension_str, Some(\"txt\"), opt);\n@@ -1603,9 +1603,9 @@ mod tests {\n         t!(s: \"a\\\\b\\\\c\", [\"d\", \"\\\\e\"], \"\\\\e\");\n         t!(s: \"a\\\\b\\\\c\", [\"d\", \"\\\\e\", \"f\"], \"\\\\e\\\\f\");\n         t!(s: \"a\\\\b\\\\c\", [\"d\".to_string(), \"e\".to_string()], \"a\\\\b\\\\c\\\\d\\\\e\");\n-        t!(v: b\"a\\\\b\\\\c\", [&b\"d\"[..], &b\"e\"[..]], b\"a\\\\b\\\\c\\\\d\\\\e\");\n-        t!(v: b\"a\\\\b\\\\c\", [&b\"d\"[..], &b\"\\\\e\"[..], &b\"f\"[..]], b\"\\\\e\\\\f\");\n-        t!(v: b\"a\\\\b\\\\c\", [b\"d\".to_vec(), b\"e\".to_vec()],\n+        t!(v: &b\"a\\\\b\\\\c\"[..], [&b\"d\"[..], &b\"e\"[..]], b\"a\\\\b\\\\c\\\\d\\\\e\");\n+        t!(v: &b\"a\\\\b\\\\c\"[..], [&b\"d\"[..], &b\"\\\\e\"[..], &b\"f\"[..]], b\"\\\\e\\\\f\");\n+        t!(v: &b\"a\\\\b\\\\c\"[..], [b\"d\".to_vec(), b\"e\".to_vec()],\n            b\"a\\\\b\\\\c\\\\d\\\\e\");\n     }\n \n@@ -1637,11 +1637,11 @@ mod tests {\n         t!(s: \".\", \".\", false);\n         t!(s: \"\\\\a\", \"\\\\\", true);\n         t!(s: \"\\\\\", \"\\\\\", false);\n-        t!(b: b\"a\\\\b\\\\c\", b\"a\\\\b\", true);\n-        t!(b: b\"a\", b\".\", true);\n-        t!(b: b\".\", b\".\", false);\n-        t!(b: b\"\\\\a\", b\"\\\\\", true);\n-        t!(b: b\"\\\\\", b\"\\\\\", false);\n+        t!(b: &b\"a\\\\b\\\\c\"[..], b\"a\\\\b\", true);\n+        t!(b: &b\"a\"[..], b\".\", true);\n+        t!(b: &b\".\"[..], b\".\", false);\n+        t!(b: &b\"\\\\a\"[..], b\"\\\\\", true);\n+        t!(b: &b\"\\\\\"[..], b\"\\\\\", false);\n \n         t!(s: \"C:\\\\a\\\\b\", \"C:\\\\a\", true);\n         t!(s: \"C:\\\\a\", \"C:\\\\\", true);\n@@ -1690,8 +1690,8 @@ mod tests {\n         t!(s: Path::new(\"a\\\\b\").join(\"\\\\c\\\\d\"), \"\\\\c\\\\d\");\n         t!(s: Path::new(\".\").join(\"a\\\\b\"), \"a\\\\b\");\n         t!(s: Path::new(\"\\\\\").join(\"a\\\\b\"), \"\\\\a\\\\b\");\n-        t!(v: Path::new(b\"a\\\\b\\\\c\").join(b\"..\"), b\"a\\\\b\");\n-        t!(v: Path::new(b\"\\\\a\\\\b\\\\c\").join(b\"d\"), b\"\\\\a\\\\b\\\\c\\\\d\");\n+        t!(v: Path::new(&b\"a\\\\b\\\\c\"[..]).join(&b\"..\"[..]), b\"a\\\\b\");\n+        t!(v: Path::new(&b\"\\\\a\\\\b\\\\c\"[..]).join(&b\"d\"[..]), b\"\\\\a\\\\b\\\\c\\\\d\");\n         // full join testing is covered under test_push_path, so no need for\n         // the full set of prefix tests\n     }\n@@ -1742,8 +1742,8 @@ mod tests {\n         t!(s: \"a\\\\b\\\\c\", [\"..\", \"d\"], \"a\\\\b\\\\d\");\n         t!(s: \"a\\\\b\\\\c\", [\"d\", \"\\\\e\", \"f\"], \"\\\\e\\\\f\");\n         t!(s: \"a\\\\b\\\\c\", [\"d\".to_string(), \"e\".to_string()], \"a\\\\b\\\\c\\\\d\\\\e\");\n-        t!(v: b\"a\\\\b\\\\c\", [b\"d\", b\"e\"], b\"a\\\\b\\\\c\\\\d\\\\e\");\n-        t!(v: b\"a\\\\b\\\\c\", [b\"d\".to_vec(), b\"e\".to_vec()],\n+        t!(v: &b\"a\\\\b\\\\c\"[..], [&b\"d\"[..], &b\"e\"[..]], b\"a\\\\b\\\\c\\\\d\\\\e\");\n+        t!(v: &b\"a\\\\b\\\\c\"[..], [b\"d\".to_vec(), b\"e\".to_vec()],\n            b\"a\\\\b\\\\c\\\\d\\\\e\");\n     }\n \n@@ -1855,15 +1855,15 @@ mod tests {\n             )\n         }\n \n-        t!(v: b\"a\\\\b\\\\c\", set_filename, with_filename, b\"d\");\n-        t!(v: b\"\\\\\", set_filename, with_filename, b\"foo\");\n+        t!(v: &b\"a\\\\b\\\\c\"[..], set_filename, with_filename, &b\"d\"[..]);\n+        t!(v: &b\"\\\\\"[..], set_filename, with_filename, &b\"foo\"[..]);\n         t!(s: \"a\\\\b\\\\c\", set_filename, with_filename, \"d\");\n         t!(s: \"\\\\\", set_filename, with_filename, \"foo\");\n         t!(s: \".\", set_filename, with_filename, \"foo\");\n         t!(s: \"a\\\\b\", set_filename, with_filename, \"\");\n         t!(s: \"a\", set_filename, with_filename, \"\");\n \n-        t!(v: b\"hi\\\\there.txt\", set_extension, with_extension, b\"exe\");\n+        t!(v: &b\"hi\\\\there.txt\"[..], set_extension, with_extension, &b\"exe\"[..]);\n         t!(s: \"hi\\\\there.txt\", set_extension, with_extension, \"exe\");\n         t!(s: \"hi\\\\there.\", set_extension, with_extension, \"txt\");\n         t!(s: \"hi\\\\there\", set_extension, with_extension, \"txt\");\n@@ -1898,7 +1898,7 @@ mod tests {\n             )\n         }\n \n-        t!(v: Path::new(b\"a\\\\b\\\\c\"), Some(&b\"c\"[..]), b\"a\\\\b\", Some(&b\"c\"[..]), None);\n+        t!(v: Path::new(&b\"a\\\\b\\\\c\"[..]), Some(&b\"c\"[..]), b\"a\\\\b\", Some(&b\"c\"[..]), None);\n         t!(s: Path::new(\"a\\\\b\\\\c\"), Some(\"c\"), Some(\"a\\\\b\"), Some(\"c\"), None);\n         t!(s: Path::new(\".\"), None, Some(\".\"), None, None);\n         t!(s: Path::new(\"\\\\\"), None, Some(\"\\\\\"), None, None);\n@@ -2240,7 +2240,7 @@ mod tests {\n             );\n         }\n \n-        t!(s: b\"a\\\\b\\\\c\", [\"a\", \"b\", \"c\"]);\n+        t!(s: &b\"a\\\\b\\\\c\"[..], [\"a\", \"b\", \"c\"]);\n         t!(s: \"a\\\\b\\\\c\", [\"a\", \"b\", \"c\"]);\n         t!(s: \"a\\\\b\\\\d\", [\"a\", \"b\", \"d\"]);\n         t!(s: \"a\\\\b\\\\cd\", [\"a\", \"b\", \"cd\"]);"}, {"sha": "e0810d395558ef38bd686e7bb692c455018e5494", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=dccd17d23e6e67e410e41f97ba9feb7f71717627", "patch": "@@ -32,11 +32,11 @@ fn rename_directory() {\n \n         /* Write the temp input file */\n         let fromp = CString::new(test_file.as_vec()).unwrap();\n-        let modebuf = CString::new(b\"w+b\").unwrap();\n+        let modebuf = CString::new(&b\"w+b\"[..]).unwrap();\n         let ostream = libc::fopen(fromp.as_ptr(), modebuf.as_ptr());\n         assert!((ostream as uint != 0));\n         let s = \"hello\".to_string();\n-        let buf = CString::new(b\"hello\").unwrap();\n+        let buf = CString::new(&b\"hello\"[..]).unwrap();\n         let write_len = libc::fwrite(buf.as_ptr() as *mut _,\n                                      1_usize as libc::size_t,\n                                      (s.len() + 1_usize) as libc::size_t,"}, {"sha": "60d617822cd7fd1ee6207b33df1e2b0aaf1d398e", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dccd17d23e6e67e410e41f97ba9feb7f71717627/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=dccd17d23e6e67e410e41f97ba9feb7f71717627", "patch": "@@ -28,11 +28,11 @@ pub fn main() {\n \n     unsafe {\n         // Call with just the named parameter\n-        let c = CString::new(b\"Hello World\\n\").unwrap();\n+        let c = CString::new(&b\"Hello World\\n\"[..]).unwrap();\n         check(\"Hello World\\n\", |s| sprintf(s, c.as_ptr()));\n \n         // Call with variable number of arguments\n-        let c = CString::new(b\"%d %f %c %s\\n\").unwrap();\n+        let c = CString::new(&b\"%d %f %c %s\\n\"[..]).unwrap();\n         check(\"42 42.500000 a %d %f %c %s\\n\\n\", |s| {\n             sprintf(s, c.as_ptr(), 42, 42.5f64, 'a' as c_int, c.as_ptr());\n         });\n@@ -43,11 +43,11 @@ pub fn main() {\n         // A function that takes a function pointer\n         unsafe fn call(p: unsafe extern fn(*mut c_char, *const c_char, ...) -> c_int) {\n             // Call with just the named parameter\n-            let c = CString::new(b\"Hello World\\n\").unwrap();\n+            let c = CString::new(&b\"Hello World\\n\"[..]).unwrap();\n             check(\"Hello World\\n\", |s| sprintf(s, c.as_ptr()));\n \n             // Call with variable number of arguments\n-            let c = CString::new(b\"%d %f %c %s\\n\").unwrap();\n+            let c = CString::new(&b\"%d %f %c %s\\n\"[..]).unwrap();\n             check(\"42 42.500000 a %d %f %c %s\\n\\n\", |s| {\n                 sprintf(s, c.as_ptr(), 42, 42.5f64, 'a' as c_int, c.as_ptr());\n             });"}]}