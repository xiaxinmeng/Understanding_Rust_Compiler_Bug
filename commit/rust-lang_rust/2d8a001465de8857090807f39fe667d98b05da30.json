{"sha": "2d8a001465de8857090807f39fe667d98b05da30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkOGEwMDE0NjVkZTg4NTcwOTA4MDdmMzlmZTY2N2Q5OGIwNWRhMzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T12:58:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T12:58:09Z"}, "message": "Reduce copy-paste some more", "tree": {"sha": "cf981bd010fef6c104f9829265efa65ab725d087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf981bd010fef6c104f9829265efa65ab725d087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d8a001465de8857090807f39fe667d98b05da30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8a001465de8857090807f39fe667d98b05da30", "html_url": "https://github.com/rust-lang/rust/commit/2d8a001465de8857090807f39fe667d98b05da30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d8a001465de8857090807f39fe667d98b05da30/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1234dda9ee60a19a83a9664c2e1208247566b49b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1234dda9ee60a19a83a9664c2e1208247566b49b", "html_url": "https://github.com/rust-lang/rust/commit/1234dda9ee60a19a83a9664c2e1208247566b49b"}], "stats": {"total": 96, "additions": 9, "deletions": 87}, "files": [{"sha": "8ed1599ffb1ea3624b9b776cdad58b0f4b2ba9f7", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d8a001465de8857090807f39fe667d98b05da30/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8a001465de8857090807f39fe667d98b05da30/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=2d8a001465de8857090807f39fe667d98b05da30", "patch": "@@ -366,19 +366,7 @@ impl HasModule for AssocContainerId {\n     }\n }\n \n-impl HasModule for FunctionLoc {\n-    fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n-        self.container.module(db)\n-    }\n-}\n-\n-impl HasModule for TypeAliasLoc {\n-    fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n-        self.container.module(db)\n-    }\n-}\n-\n-impl HasModule for ConstLoc {\n+impl<N: AstNode> HasModule for AssocItemLoc<N> {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         self.container.module(db)\n     }"}, {"sha": "499375b803fc2af85f6b82d5421b4df3cb43937e", "filename": "crates/ra_hir_def/src/src.rs", "status": "modified", "additions": 8, "deletions": 74, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2d8a001465de8857090807f39fe667d98b05da30/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8a001465de8857090807f39fe667d98b05da30/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs?ref=2d8a001465de8857090807f39fe667d98b05da30", "patch": "@@ -2,94 +2,28 @@\n \n use hir_expand::InFile;\n use ra_arena::map::ArenaMap;\n-use ra_syntax::ast;\n+use ra_syntax::AstNode;\n \n-use crate::{\n-    db::DefDatabase, ConstLoc, EnumLoc, FunctionLoc, ImplLoc, StaticLoc, StructLoc, TraitLoc,\n-    TypeAliasLoc, UnionLoc,\n-};\n+use crate::{db::DefDatabase, AssocItemLoc, ItemLoc};\n \n pub trait HasSource {\n     type Value;\n     fn source(&self, db: &impl DefDatabase) -> InFile<Self::Value>;\n }\n \n-impl HasSource for FunctionLoc {\n-    type Value = ast::FnDef;\n+impl<N: AstNode> HasSource for AssocItemLoc<N> {\n+    type Value = N;\n \n-    fn source(&self, db: &impl DefDatabase) -> InFile<ast::FnDef> {\n+    fn source(&self, db: &impl DefDatabase) -> InFile<N> {\n         let node = self.ast_id.to_node(db);\n         InFile::new(self.ast_id.file_id, node)\n     }\n }\n \n-impl HasSource for TypeAliasLoc {\n-    type Value = ast::TypeAliasDef;\n+impl<N: AstNode> HasSource for ItemLoc<N> {\n+    type Value = N;\n \n-    fn source(&self, db: &impl DefDatabase) -> InFile<ast::TypeAliasDef> {\n-        let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id, node)\n-    }\n-}\n-\n-impl HasSource for ConstLoc {\n-    type Value = ast::ConstDef;\n-\n-    fn source(&self, db: &impl DefDatabase) -> InFile<ast::ConstDef> {\n-        let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id, node)\n-    }\n-}\n-\n-impl HasSource for StaticLoc {\n-    type Value = ast::StaticDef;\n-\n-    fn source(&self, db: &impl DefDatabase) -> InFile<ast::StaticDef> {\n-        let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id, node)\n-    }\n-}\n-\n-impl HasSource for ImplLoc {\n-    type Value = ast::ImplBlock;\n-\n-    fn source(&self, db: &impl DefDatabase) -> InFile<ast::ImplBlock> {\n-        let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id, node)\n-    }\n-}\n-\n-impl HasSource for TraitLoc {\n-    type Value = ast::TraitDef;\n-\n-    fn source(&self, db: &impl DefDatabase) -> InFile<ast::TraitDef> {\n-        let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id, node)\n-    }\n-}\n-\n-impl HasSource for StructLoc {\n-    type Value = ast::StructDef;\n-\n-    fn source(&self, db: &impl DefDatabase) -> InFile<ast::StructDef> {\n-        let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id, node)\n-    }\n-}\n-\n-impl HasSource for UnionLoc {\n-    type Value = ast::UnionDef;\n-\n-    fn source(&self, db: &impl DefDatabase) -> InFile<ast::UnionDef> {\n-        let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id, node)\n-    }\n-}\n-\n-impl HasSource for EnumLoc {\n-    type Value = ast::EnumDef;\n-\n-    fn source(&self, db: &impl DefDatabase) -> InFile<ast::EnumDef> {\n+    fn source(&self, db: &impl DefDatabase) -> InFile<N> {\n         let node = self.ast_id.to_node(db);\n         InFile::new(self.ast_id.file_id, node)\n     }"}]}