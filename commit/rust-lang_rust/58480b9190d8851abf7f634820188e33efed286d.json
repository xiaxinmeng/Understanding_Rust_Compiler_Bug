{"sha": "58480b9190d8851abf7f634820188e33efed286d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NDgwYjkxOTBkODg1MWFiZjdmNjM0ODIwMTg4ZTMzZWZlZDI4NmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T23:01:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T23:01:43Z"}, "message": "method call scope", "tree": {"sha": "61d272628c9689071e4ea6bf5b49d0ed0f5e5789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61d272628c9689071e4ea6bf5b49d0ed0f5e5789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58480b9190d8851abf7f634820188e33efed286d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58480b9190d8851abf7f634820188e33efed286d", "html_url": "https://github.com/rust-lang/rust/commit/58480b9190d8851abf7f634820188e33efed286d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58480b9190d8851abf7f634820188e33efed286d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd282ee0c7c627120bbcd7b78c0c6b7acb3556f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd282ee0c7c627120bbcd7b78c0c6b7acb3556f", "html_url": "https://github.com/rust-lang/rust/commit/fdd282ee0c7c627120bbcd7b78c0c6b7acb3556f"}], "stats": {"total": 55, "additions": 44, "deletions": 11}, "files": [{"sha": "60b8ce919fc6bde5c9b1235ec8841deeed5f5ca7", "filename": "crates/libeditor/src/scope/fn_scope.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/58480b9190d8851abf7f634820188e33efed286d/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58480b9190d8851abf7f634820188e33efed286d/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=58480b9190d8851abf7f634820188e33efed286d", "patch": "@@ -5,7 +5,7 @@ use std::{\n \n use libsyntax2::{\n     SyntaxNodeRef, SyntaxNode, SmolStr, AstNode,\n-    ast::{self, NameOwner, LoopBodyOwner},\n+    ast::{self, NameOwner, LoopBodyOwner, ArgListOwner},\n     algo::{ancestors, generate, walk::preorder}\n };\n \n@@ -184,10 +184,10 @@ fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n             }\n         }\n         ast::Expr::CallExpr(e) => {\n-            e.arg_list().into_iter()\n-                .flat_map(|it| it.args())\n-                .chain(e.expr())\n-                .for_each(|expr| compute_expr_scopes(expr, scopes, scope));\n+            compute_call_scopes(e.expr(), e.arg_list(), scopes, scope);\n+        }\n+        ast::Expr::MethodCallExpr(e) => {\n+            compute_call_scopes(e.expr(), e.arg_list(), scopes, scope);\n         }\n         ast::Expr::MatchExpr(e) => {\n             if let Some(expr) = e.expr() {\n@@ -210,6 +210,17 @@ fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n         }\n     };\n \n+    fn compute_call_scopes(\n+        receiver: Option<ast::Expr>,\n+        arg_list: Option<ast::ArgList>,\n+        scopes: &mut FnScopes, scope: ScopeId,\n+    ) {\n+        arg_list.into_iter()\n+            .flat_map(|it| it.args())\n+            .chain(receiver)\n+            .for_each(|expr| compute_expr_scopes(expr, scopes, scope));\n+    }\n+\n     fn compute_cond_scopes(cond: ast::Condition, scopes: &mut FnScopes, scope: ScopeId) -> Option<ScopeId> {\n         if let Some(expr) = cond.expr() {\n             compute_expr_scopes(expr, scopes, scope);\n@@ -279,6 +290,16 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_metod_call_scope() {\n+        do_check(r\"\n+            fn quux() {\n+                z.f(|x| <|> );\n+            }\",\n+            &[\"x\"],\n+        );\n+    }\n+\n     #[test]\n     fn test_loop_scope() {\n         do_check(r\""}, {"sha": "11306a835f970bf55195bfd4030b87161cf26a17", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58480b9190d8851abf7f634820188e33efed286d/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58480b9190d8851abf7f634820188e33efed286d/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=58480b9190d8851abf7f634820188e33efed286d", "patch": "@@ -200,12 +200,10 @@ impl<'a> AstNode<'a> for CallExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n+impl<'a> ast::ArgListOwner<'a> for CallExpr<'a> {}\n impl<'a> CallExpr<'a> {pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n-pub fn arg_list(self) -> Option<ArgList<'a>> {\n-        super::child_opt(self)\n-    }\n }\n \n // CastExpr\n@@ -934,7 +932,11 @@ impl<'a> AstNode<'a> for MethodCallExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> MethodCallExpr<'a> {}\n+impl<'a> ast::ArgListOwner<'a> for MethodCallExpr<'a> {}\n+impl<'a> MethodCallExpr<'a> {pub fn expr(self) -> Option<Expr<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // Module\n #[derive(Debug, Clone, Copy)]"}, {"sha": "274996171cee07b4a7e2d67611f62c068cb780f1", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58480b9190d8851abf7f634820188e33efed286d/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58480b9190d8851abf7f634820188e33efed286d/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=58480b9190d8851abf7f634820188e33efed286d", "patch": "@@ -26,6 +26,12 @@ pub trait LoopBodyOwner<'a>: AstNode<'a> {\n     }\n }\n \n+pub trait ArgListOwner<'a>: AstNode<'a> {\n+    fn arg_list(self) -> Option<ArgList<'a>> {\n+        child_opt(self)\n+    }\n+}\n+\n pub trait TypeParamsOwner<'a>: AstNode<'a> {\n     fn type_param_list(self) -> Option<TypeParamList<'a>> {\n         child_opt(self)"}, {"sha": "683623a5dcbe9091f478348497519522a924232c", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58480b9190d8851abf7f634820188e33efed286d/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/58480b9190d8851abf7f634820188e33efed286d/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=58480b9190d8851abf7f634820188e33efed286d", "patch": "@@ -388,10 +388,14 @@ Grammar(\n         \"NamedFieldList\": (),\n         \"NamedField\": (),\n         \"CallExpr\": (\n-            options: [ \"Expr\", \"ArgList\" ]\n+            traits: [\"ArgListOwner\"],\n+            options: [ \"Expr\" ],\n+        ),\n+        \"MethodCallExpr\": (\n+            traits: [\"ArgListOwner\"],\n+            options: [ \"Expr\" ],\n         ),\n         \"IndexExpr\": (),\n-        \"MethodCallExpr\": (),\n         \"FieldExpr\": (),\n         \"TryExpr\": (),\n         \"CastExpr\": (),"}]}