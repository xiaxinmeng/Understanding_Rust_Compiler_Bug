{"sha": "8e754736dc2638c5948ccc908b33cf7070c7f6d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNzU0NzM2ZGMyNjM4YzU5NDhjY2M5MDhiMzNjZjcwNzBjN2Y2ZDQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-10-28T21:23:04Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "rustc_const_eval: fix compilation", "tree": {"sha": "0a2fca3c86e5acd97c1677df4e4cce27d18f1726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a2fca3c86e5acd97c1677df4e4cce27d18f1726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e754736dc2638c5948ccc908b33cf7070c7f6d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e754736dc2638c5948ccc908b33cf7070c7f6d4", "html_url": "https://github.com/rust-lang/rust/commit/8e754736dc2638c5948ccc908b33cf7070c7f6d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e754736dc2638c5948ccc908b33cf7070c7f6d4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55482e7c965a7a4280fef968cb1cdd701c04ecc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55482e7c965a7a4280fef968cb1cdd701c04ecc", "html_url": "https://github.com/rust-lang/rust/commit/f55482e7c965a7a4280fef968cb1cdd701c04ecc"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "6862518067c9773b5144cbc8738dc96005b53586", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8e754736dc2638c5948ccc908b33cf7070c7f6d4/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e754736dc2638c5948ccc908b33cf7070c7f6d4/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=8e754736dc2638c5948ccc908b33cf7070c7f6d4", "patch": "@@ -29,7 +29,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc_errors::DiagnosticBuilder;\n \n use rustc::hir::def::*;\n-use rustc::hir::intravisit::{self, Visitor, FnKind};\n+use rustc::hir::intravisit::{self, Visitor, FnKind, NestedVisitMode};\n use rustc::hir::print::pat_to_string;\n use rustc::hir::{self, Pat, PatKind};\n \n@@ -41,29 +41,29 @@ use syntax_pos::Span;\n \n struct OuterVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }\n \n-impl<'a, 'v, 'tcx> Visitor<'v> for OuterVisitor<'a, 'tcx> {\n-    fn visit_expr(&mut self, _expr: &hir::Expr) {\n+impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, _expr: &'tcx hir::Expr) {\n         return // const, static and N in [T; N] - shouldn't contain anything\n     }\n \n-    fn visit_trait_item(&mut self, item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, item: &'tcx hir::TraitItem) {\n         if let hir::ConstTraitItem(..) = item.node {\n             return // nothing worth match checking in a constant\n         } else {\n             intravisit::walk_trait_item(self, item);\n         }\n     }\n \n-    fn visit_impl_item(&mut self, item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, item: &'tcx hir::ImplItem) {\n         if let hir::ImplItemKind::Const(..) = item.node {\n             return // nothing worth match checking in a constant\n         } else {\n             intravisit::walk_impl_item(self, item);\n         }\n     }\n \n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,\n-                b: &'v hir::Expr, s: Span, id: ast::NodeId) {\n+    fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,\n+                b: hir::ExprId, s: Span, id: ast::NodeId) {\n         if let FnKind::Closure(..) = fk {\n             span_bug!(s, \"check_match: closure outside of function\")\n         }\n@@ -90,8 +90,12 @@ struct MatchVisitor<'a, 'tcx: 'a> {\n     param_env: &'a ty::ParameterEnvironment<'tcx>\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for MatchVisitor<'a, 'tcx> {\n-    fn visit_expr(&mut self, ex: &hir::Expr) {\n+impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n+        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    }\n+\n+    fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n         intravisit::walk_expr(self, ex);\n \n         match ex.node {\n@@ -102,7 +106,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MatchVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_local(&mut self, loc: &hir::Local) {\n+    fn visit_local(&mut self, loc: &'tcx hir::Local) {\n         intravisit::walk_local(self, loc);\n \n         self.check_irrefutable(&loc.pat, false);\n@@ -111,8 +115,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MatchVisitor<'a, 'tcx> {\n         self.check_patterns(false, slice::ref_slice(&loc.pat));\n     }\n \n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,\n-                b: &'v hir::Expr, s: Span, n: ast::NodeId) {\n+    fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,\n+                b: hir::ExprId, s: Span, n: ast::NodeId) {\n         intravisit::walk_fn(self, fk, fd, b, s, n);\n \n         for input in &fd.inputs {"}, {"sha": "61986efbf4fffc88c4d6ffe86a210558ff406e42", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e754736dc2638c5948ccc908b33cf7070c7f6d4/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e754736dc2638c5948ccc908b33cf7070c7f6d4/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=8e754736dc2638c5948ccc908b33cf7070c7f6d4", "patch": "@@ -868,11 +868,12 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n               Struct(_) => signal!(e, UnimplementedConstVal(\"tuple struct constructors\")),\n               callee => signal!(e, CallOn(callee)),\n           };\n-          let (decl, result) = if let Some(fn_like) = lookup_const_fn_by_id(tcx, did) {\n+          let (decl, body_id) = if let Some(fn_like) = lookup_const_fn_by_id(tcx, did) {\n               (fn_like.decl(), fn_like.body())\n           } else {\n               signal!(e, NonConstPath)\n           };\n+          let result = tcx.map.expr(body_id);\n           assert_eq!(decl.inputs.len(), args.len());\n \n           let mut call_args = DefIdMap();"}]}