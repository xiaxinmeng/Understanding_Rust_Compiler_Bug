{"sha": "20dc53208557db5672a1bcf97b3e582a95913f2c", "node_id": "C_kwDOAAsO6NoAKDIwZGM1MzIwODU1N2RiNTY3MmExYmNmOTdiM2U1ODJhOTU5MTNmMmM", "commit": {"author": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-20T07:32:21Z"}, "committer": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-20T07:32:21Z"}, "message": "Remove Ty::is_region_ptr", "tree": {"sha": "7bd3b3db32e819f1254143c44aae7c232f642d9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bd3b3db32e819f1254143c44aae7c232f642d9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20dc53208557db5672a1bcf97b3e582a95913f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20dc53208557db5672a1bcf97b3e582a95913f2c", "html_url": "https://github.com/rust-lang/rust/commit/20dc53208557db5672a1bcf97b3e582a95913f2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20dc53208557db5672a1bcf97b3e582a95913f2c/comments", "author": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da7c50c089d5db2d3ebaf227fe075bb1346bfaec", "url": "https://api.github.com/repos/rust-lang/rust/commits/da7c50c089d5db2d3ebaf227fe075bb1346bfaec", "html_url": "https://github.com/rust-lang/rust/commit/da7c50c089d5db2d3ebaf227fe075bb1346bfaec"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "a8c216407f931c01169d2b4204d386afd42c3d92", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=20dc53208557db5672a1bcf97b3e582a95913f2c", "patch": "@@ -120,9 +120,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     && !self.upvars.is_empty()\n                 {\n                     item_msg = access_place_desc;\n-                    debug_assert!(\n-                        self.body.local_decls[ty::CAPTURE_STRUCT_LOCAL].ty.is_region_ptr()\n-                    );\n+                    debug_assert!(self.body.local_decls[ty::CAPTURE_STRUCT_LOCAL].ty.is_ref());\n                     debug_assert!(is_closure_or_generator(\n                         Place::ty_from(\n                             the_place_err.local,\n@@ -470,11 +468,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             {\n                 let local_decl = &self.body.local_decls[local];\n \n-                let (pointer_sigil, pointer_desc) = if local_decl.ty.is_region_ptr() {\n-                    (\"&\", \"reference\")\n-                } else {\n-                    (\"*const\", \"pointer\")\n-                };\n+                let (pointer_sigil, pointer_desc) =\n+                    if local_decl.ty.is_ref() { (\"&\", \"reference\") } else { (\"*const\", \"pointer\") };\n \n                 match self.local_names[local] {\n                     Some(name) if !local_decl.from_compiler_desugaring() => {\n@@ -1258,7 +1253,7 @@ fn suggest_ampmut<'tcx>(\n     (\n         suggestability,\n         highlight_span,\n-        if local_decl.ty.is_region_ptr() {\n+        if local_decl.ty.is_ref() {\n             format!(\"&mut {}\", ty_mut.ty)\n         } else {\n             format!(\"*mut {}\", ty_mut.ty)"}, {"sha": "94806e0d798ed5a239c40aab8be54d771e453c53", "filename": "compiler/rustc_codegen_cranelift/src/vtable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs?ref=20dc53208557db5672a1bcf97b3e582a95913f2c", "patch": "@@ -48,9 +48,7 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n ) -> (Pointer, Value) {\n     let (ptr, vtable) = 'block: {\n         if let Abi::Scalar(_) = arg.layout().abi {\n-            'descend_newtypes: while !arg.layout().ty.is_unsafe_ptr()\n-                && !arg.layout().ty.is_region_ptr()\n-            {\n+            'descend_newtypes: while !arg.layout().ty.is_unsafe_ptr() && !arg.layout().ty.is_ref() {\n                 for i in 0..arg.layout().fields.count() {\n                     let field = arg.value_field(fx, mir::Field::new(i));\n                     if !field.layout().is_zst() {"}, {"sha": "6bad5c3eb282241ac9b9069ec14ea127cfc2a059", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=20dc53208557db5672a1bcf97b3e582a95913f2c", "patch": "@@ -917,7 +917,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         //\n                         // This is also relevant for `Pin<&mut Self>`, where we need to peel the `Pin`.\n                         'descend_newtypes: while !op.layout.ty.is_unsafe_ptr()\n-                            && !op.layout.ty.is_region_ptr()\n+                            && !op.layout.ty.is_ref()\n                         {\n                             for i in 0..op.layout.fields.count() {\n                                 let field = op.extract_field(bx, i);\n@@ -959,7 +959,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     Immediate(_) => {\n                         // See comment above explaining why we peel these newtypes\n                         'descend_newtypes: while !op.layout.ty.is_unsafe_ptr()\n-                            && !op.layout.ty.is_region_ptr()\n+                            && !op.layout.ty.is_ref()\n                         {\n                             for i in 0..op.layout.fields.count() {\n                                 let field = op.extract_field(bx, i);"}, {"sha": "23845d39a981f42582dd2be033a4bcab2e15cc9a", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=20dc53208557db5672a1bcf97b3e582a95913f2c", "patch": "@@ -1487,7 +1487,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     {\n                         let deref_kind = if checked_ty.is_box() {\n                             \"unboxing the value\"\n-                        } else if checked_ty.is_region_ptr() {\n+                        } else if checked_ty.is_ref() {\n                             \"dereferencing the borrow\"\n                         } else {\n                             \"dereferencing the type\""}, {"sha": "b219be4ae199219a6980f35b5e9070ab76298c41", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=20dc53208557db5672a1bcf97b3e582a95913f2c", "patch": "@@ -1182,7 +1182,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 .inputs()\n                                 .skip_binder()\n                                 .get(0)\n-                                .filter(|ty| ty.is_region_ptr() && !rcvr_ty.is_region_ptr())\n+                                .filter(|ty| ty.is_ref() && !rcvr_ty.is_ref())\n                                 .copied()\n                                 .unwrap_or(rcvr_ty),\n                         };"}, {"sha": "2e691ab250d8384f5150d7b9143dfc5efcfdf18b", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=20dc53208557db5672a1bcf97b3e582a95913f2c", "patch": "@@ -1913,11 +1913,6 @@ impl<'tcx> Ty<'tcx> {\n         }\n     }\n \n-    #[inline]\n-    pub fn is_region_ptr(self) -> bool {\n-        matches!(self.kind(), Ref(..))\n-    }\n-\n     #[inline]\n     pub fn is_mutable_ptr(self) -> bool {\n         matches!(\n@@ -1944,7 +1939,7 @@ impl<'tcx> Ty<'tcx> {\n     /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).\n     #[inline]\n     pub fn is_any_ptr(self) -> bool {\n-        self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()\n+        self.is_ref() || self.is_unsafe_ptr() || self.is_fn_ptr()\n     }\n \n     #[inline]"}, {"sha": "6fd9b9dbb5755f106e54cf42f4ac249e3fb159fd", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=20dc53208557db5672a1bcf97b3e582a95913f2c", "patch": "@@ -185,7 +185,7 @@ impl<'tcx> Cx<'tcx> {\n         if self.typeck_results().is_coercion_cast(source.hir_id) {\n             // Convert the lexpr to a vexpr.\n             ExprKind::Use { source: self.mirror_expr(source) }\n-        } else if self.typeck_results().expr_ty(source).is_region_ptr() {\n+        } else if self.typeck_results().expr_ty(source).is_ref() {\n             // Special cased so that we can type check that the element\n             // type of the source matches the pointed to type of the\n             // destination."}, {"sha": "ee5a7909ba3dc66c3d88c5b9238e850ccd67834a", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20dc53208557db5672a1bcf97b3e582a95913f2c/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=20dc53208557db5672a1bcf97b3e582a95913f2c", "patch": "@@ -539,7 +539,7 @@ fn make_thin_self_ptr<'tcx>(\n         // get a built-in pointer type\n         let mut fat_pointer_layout = layout;\n         'descend_newtypes: while !fat_pointer_layout.ty.is_unsafe_ptr()\n-            && !fat_pointer_layout.ty.is_region_ptr()\n+            && !fat_pointer_layout.ty.is_ref()\n         {\n             for i in 0..fat_pointer_layout.fields.count() {\n                 let field_layout = fat_pointer_layout.field(cx, i);"}]}