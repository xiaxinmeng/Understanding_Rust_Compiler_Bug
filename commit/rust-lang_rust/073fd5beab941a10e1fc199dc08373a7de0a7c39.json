{"sha": "073fd5beab941a10e1fc199dc08373a7de0a7c39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3M2ZkNWJlYWI5NDFhMTBlMWZjMTk5ZGMwODM3M2E3ZGUwYTdjMzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-02T17:22:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-02T17:22:35Z"}, "message": "rollup merge of #20385: nick29581/x-object\n\nCloses #19056", "tree": {"sha": "23795a0194518a7a01287125e7a6ccfa1b1cc563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23795a0194518a7a01287125e7a6ccfa1b1cc563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/073fd5beab941a10e1fc199dc08373a7de0a7c39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/073fd5beab941a10e1fc199dc08373a7de0a7c39", "html_url": "https://github.com/rust-lang/rust/commit/073fd5beab941a10e1fc199dc08373a7de0a7c39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/073fd5beab941a10e1fc199dc08373a7de0a7c39/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cf1992c99c0b40a6ff116fac167ce392758d9fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf1992c99c0b40a6ff116fac167ce392758d9fa", "html_url": "https://github.com/rust-lang/rust/commit/3cf1992c99c0b40a6ff116fac167ce392758d9fa"}, {"sha": "d06b7057cfd623c1acf91db5565f69405e583a47", "url": "https://api.github.com/repos/rust-lang/rust/commits/d06b7057cfd623c1acf91db5565f69405e583a47", "html_url": "https://github.com/rust-lang/rust/commit/d06b7057cfd623c1acf91db5565f69405e583a47"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "0917135bee9a1d8052e22b475405fdb5139d7f2c", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=073fd5beab941a10e1fc199dc08373a7de0a7c39", "patch": "@@ -1275,9 +1275,9 @@ pub fn each_impl<F>(cdata: Cmd, mut callback: F) where\n }\n \n pub fn each_implementation_for_type<F>(cdata: Cmd,\n-                                    id: ast::NodeId,\n-                                    mut callback: F) where\n-    F: FnMut(ast::DefId),\n+                                       id: ast::NodeId,\n+                                       mut callback: F)\n+    where F: FnMut(ast::DefId),\n {\n     let item_doc = lookup_item(id, cdata.data());\n     reader::tagged_docs(item_doc,"}, {"sha": "10383b901f38a1ad4b097946ed7d28dc47332bf7", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=073fd5beab941a10e1fc199dc08373a7de0a7c39", "patch": "@@ -1222,8 +1222,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_attributes(rbml_w, item.attrs[]);\n         encode_unsafety(rbml_w, unsafety);\n         match ty.node {\n-            ast::TyPath(ref path, _) if path.segments\n-                                                        .len() == 1 => {\n+            ast::TyPath(ref path, _) if path.segments.len() == 1 => {\n                 let ident = path.segments.last().unwrap().identifier;\n                 encode_impl_type_basename(rbml_w, ident);\n             }\n@@ -1351,6 +1350,9 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         // Encode the implementations of this trait.\n         encode_extension_implementations(ecx, rbml_w, def_id);\n \n+        // Encode inherent implementations for this trait.\n+        encode_inherent_implementations(ecx, rbml_w, def_id);\n+\n         rbml_w.end_tag();\n \n         // Now output the trait item info for each trait item.\n@@ -1453,9 +1455,6 @@ fn encode_info_for_item(ecx: &EncodeContext,\n \n             rbml_w.end_tag();\n         }\n-\n-        // Encode inherent implementations for this trait.\n-        encode_inherent_implementations(ecx, rbml_w, def_id);\n       }\n       ast::ItemMac(..) => {\n         // macros are encoded separately"}, {"sha": "e699ee2ec91452cd233f74826bef776cf3c1cbcd", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=073fd5beab941a10e1fc199dc08373a7de0a7c39", "patch": "@@ -128,7 +128,7 @@ impl ImplOrTraitItemContainer {\n     }\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Show)]\n pub enum ImplOrTraitItem<'tcx> {\n     MethodTraitItem(Rc<Method<'tcx>>),\n     TypeTraitItem(Rc<AssociatedType>),\n@@ -173,7 +173,7 @@ impl<'tcx> ImplOrTraitItem<'tcx> {\n     }\n }\n \n-#[deriving(Clone, Copy)]\n+#[deriving(Clone, Copy, Show)]\n pub enum ImplOrTraitItemId {\n     MethodTraitItemId(ast::DefId),\n     TypeTraitItemId(ast::DefId),\n@@ -232,7 +232,7 @@ impl<'tcx> Method<'tcx> {\n     }\n }\n \n-#[deriving(Clone, Copy)]\n+#[deriving(Clone, Copy, Show)]\n pub struct AssociatedType {\n     pub name: ast::Name,\n     pub vis: ast::Visibility,\n@@ -4960,10 +4960,11 @@ pub fn provided_trait_methods<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n     }\n }\n \n-/// Helper for looking things up in the various maps that are populated during typeck::collect\n-/// (e.g., `cx.impl_or_trait_items`, `cx.tcache`, etc).  All of these share the pattern that if the\n-/// id is local, it should have been loaded into the map by the `typeck::collect` phase.  If the\n-/// def-id is external, then we have to go consult the crate loading code (and cache the result for\n+/// Helper for looking things up in the various maps that are populated during\n+/// typeck::collect (e.g., `cx.impl_or_trait_items`, `cx.tcache`, etc).  All of\n+/// these share the pattern that if the id is local, it should have been loaded\n+/// into the map by the `typeck::collect` phase.  If the def-id is external,\n+/// then we have to go consult the crate loading code (and cache the result for\n /// the future).\n fn lookup_locally_or_in_crate_store<V, F>(descr: &str,\n                                           def_id: ast::DefId,\n@@ -6034,11 +6035,12 @@ pub fn populate_implementations_for_type_if_necessary(tcx: &ctxt,\n         return\n     }\n \n+    debug!(\"populate_implementations_for_type_if_necessary: searching for {}\", type_id);\n+\n     let mut inherent_impls = Vec::new();\n     csearch::each_implementation_for_type(&tcx.sess.cstore, type_id,\n             |impl_def_id| {\n-        let impl_items = csearch::get_impl_items(&tcx.sess.cstore,\n-                                                 impl_def_id);\n+        let impl_items = csearch::get_impl_items(&tcx.sess.cstore, impl_def_id);\n \n         // Record the trait->implementation mappings, if applicable.\n         let associated_traits = csearch::get_impl_trait(tcx, impl_def_id);"}, {"sha": "b8920ffde589525289b14dc1df58d696d38155fb", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=073fd5beab941a10e1fc199dc08373a7de0a7c39", "patch": "@@ -267,6 +267,8 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             return; // already visited\n         }\n \n+        debug!(\"assemble_inherent_impl_probe {}\", impl_def_id);\n+\n         let method = match impl_method(self.tcx(), impl_def_id, self.method_name) {\n             Some(m) => m,\n             None => { return; } // No method with correct name on this impl\n@@ -432,7 +434,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n     }\n \n     fn assemble_extension_candidates_for_trait(&mut self,\n-                                           trait_def_id: ast::DefId) {\n+                                               trait_def_id: ast::DefId) {\n         debug!(\"assemble_extension_candidates_for_trait: trait_def_id={}\",\n                trait_def_id.repr(self.tcx()));\n \n@@ -984,6 +986,7 @@ fn trait_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n                       -> Option<(uint, Rc<ty::Method<'tcx>>)>\n {\n     let trait_items = ty::trait_items(tcx, trait_def_id);\n+    debug!(\"trait_method; items: {}\", trait_items);\n     trait_items\n         .iter()\n         .filter(|item|"}, {"sha": "fd454509b394055aed33f8e44e70ad0d1cb0193b", "filename": "src/test/auxiliary/traitimpl.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Ftest%2Fauxiliary%2Ftraitimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Ftest%2Fauxiliary%2Ftraitimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftraitimpl.rs?ref=073fd5beab941a10e1fc199dc08373a7de0a7c39", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test inherant trait impls work cross-crait.\n+\n+pub trait Bar<'a> for ?Sized : 'a {}\n+\n+impl<'a> Bar<'a> {\n+    pub fn bar(&self) {}\n+}"}, {"sha": "003686c0bbefcfaf4659a7c50bc3b9f5652c29c3", "filename": "src/test/run-pass/trait-impl.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Ftest%2Frun-pass%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073fd5beab941a10e1fc199dc08373a7de0a7c39/src%2Ftest%2Frun-pass%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-impl.rs?ref=073fd5beab941a10e1fc199dc08373a7de0a7c39", "patch": "@@ -10,6 +10,10 @@\n \n // Test calling methods on an impl for a bare trait.\n \n+// aux-build:traitimpl.rs\n+extern crate traitimpl;\n+use traitimpl::Bar;\n+\n static mut COUNT: uint = 1;\n \n trait T {}\n@@ -25,6 +29,9 @@ impl<'a> T+'a {\n \n impl T for int {}\n \n+struct Foo;\n+impl<'a> Bar<'a> for Foo {}\n+\n fn main() {\n     let x: &T = &42i;\n \n@@ -33,4 +40,8 @@ fn main() {\n     T::bar();\n \n     unsafe { assert!(COUNT == 12); }\n+\n+    // Cross-crait case\n+    let x: &Bar = &Foo;\n+    x.bar();\n }"}]}