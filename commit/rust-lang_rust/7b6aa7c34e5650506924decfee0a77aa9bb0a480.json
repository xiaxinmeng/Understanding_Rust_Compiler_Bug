{"sha": "7b6aa7c34e5650506924decfee0a77aa9bb0a480", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNmFhN2MzNGU1NjUwNTA2OTI0ZGVjZmVlMGE3N2FhOWJiMGE0ODA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-24T08:32:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T08:32:07Z"}, "message": "Merge #2343\n\n2343: implement assist invert_if r=matklad a=bravomikekilo\n\nfix [issue 2219 invert if condition](https://github.com/rust-analyzer/rust-analyzer/issues/2219)\r\nI put the assist cursor range to `if` of the if expression, because both condition and body will be replaced. Is there any way to replace them without cover the cursor position?\r\n@matklad \n\nCo-authored-by: bravomikekilo <bmk1221@126.com>", "tree": {"sha": "8a8fc896efbf5f12ae55da28a370bdfe9e6ce445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a8fc896efbf5f12ae55da28a370bdfe9e6ce445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b6aa7c34e5650506924decfee0a77aa9bb0a480", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2kAHCRBK7hj4Ov3rIwAAdHIIAJoIftcpPvFS2P2c5zp8DUyw\ngSR0APLOFgRN3iDG3NbriiEfgA8LbC0TH7Ge5pILzfBo5fFS5UwuGqeNiHqmxsk3\nj1470+0VTfKCDCIdegXZp7U/2C9HCEn4tsRr89o0AlFHJ+p3g9GKnQpuE3/3IZoP\nRIZMbA/k89WJh0oRz8889twRJXZ7yzUpMV9gnsHfwQgPys7F7Z4MVA1iDgNMRCeu\n1+F0dqigrFOClx49gphX/8RF2uOx3I17+/avapVjzl+AzMbjAFkWGadslh9kmWdO\nfF8hkJKxk5LoYTrx1dLnKyk0deOI3AY5vjpLKcMYsKmgT3hSgsjd964m+Mx9gEg=\n=q2C9\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a8fc896efbf5f12ae55da28a370bdfe9e6ce445\nparent f2c36e5a6f5892532dec9e6523dc0944453a384f\nparent adac4fc2f21117486356063d82d79f8c3add084a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574584327 +0000\ncommitter GitHub <noreply@github.com> 1574584327 +0000\n\nMerge #2343\n\n2343: implement assist invert_if r=matklad a=bravomikekilo\n\nfix [issue 2219 invert if condition](https://github.com/rust-analyzer/rust-analyzer/issues/2219)\r\nI put the assist cursor range to `if` of the if expression, because both condition and body will be replaced. Is there any way to replace them without cover the cursor position?\r\n@matklad \n\nCo-authored-by: bravomikekilo <bmk1221@126.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6aa7c34e5650506924decfee0a77aa9bb0a480", "html_url": "https://github.com/rust-lang/rust/commit/7b6aa7c34e5650506924decfee0a77aa9bb0a480", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b6aa7c34e5650506924decfee0a77aa9bb0a480/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2c36e5a6f5892532dec9e6523dc0944453a384f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c36e5a6f5892532dec9e6523dc0944453a384f", "html_url": "https://github.com/rust-lang/rust/commit/f2c36e5a6f5892532dec9e6523dc0944453a384f"}, {"sha": "adac4fc2f21117486356063d82d79f8c3add084a", "url": "https://api.github.com/repos/rust-lang/rust/commits/adac4fc2f21117486356063d82d79f8c3add084a", "html_url": "https://github.com/rust-lang/rust/commit/adac4fc2f21117486356063d82d79f8c3add084a"}], "stats": {"total": 209, "additions": 174, "deletions": 35}, "files": [{"sha": "7c57c0560dfc6d62ada217f6e2d50bd28065ce32", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 9, "deletions": 31, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=7b6aa7c34e5650506924decfee0a77aa9bb0a480", "patch": "@@ -1,6 +1,6 @@\n+use super::invert_if::invert_boolean_expression;\n use hir::db::HirDatabase;\n use ra_syntax::ast::{self, AstNode};\n-use ra_syntax::SyntaxNode;\n \n use crate::{Assist, AssistCtx, AssistId};\n \n@@ -32,18 +32,18 @@ pub(crate) fn apply_demorgan(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n     if !cursor_in_range {\n         return None;\n     }\n-    let lhs = expr.lhs()?.syntax().clone();\n-    let lhs_range = lhs.text_range();\n-    let rhs = expr.rhs()?.syntax().clone();\n-    let rhs_range = rhs.text_range();\n-    let not_lhs = undo_negation(lhs)?;\n-    let not_rhs = undo_negation(rhs)?;\n+    let lhs = expr.lhs()?;\n+    let lhs_range = lhs.syntax().text_range();\n+    let rhs = expr.rhs()?;\n+    let rhs_range = rhs.syntax().text_range();\n+    let not_lhs = invert_boolean_expression(&lhs)?;\n+    let not_rhs = invert_boolean_expression(&rhs)?;\n \n     ctx.add_assist(AssistId(\"apply_demorgan\"), \"apply demorgan's law\", |edit| {\n         edit.target(op_range);\n         edit.replace(op_range, opposite_op);\n-        edit.replace(lhs_range, format!(\"!({}\", not_lhs));\n-        edit.replace(rhs_range, format!(\"{})\", not_rhs));\n+        edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n+        edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));\n     })\n }\n \n@@ -56,28 +56,6 @@ fn opposite_logic_op(kind: ast::BinOp) -> Option<&'static str> {\n     }\n }\n \n-// This function tries to undo unary negation, or inequality\n-fn undo_negation(node: SyntaxNode) -> Option<String> {\n-    match ast::Expr::cast(node)? {\n-        ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n-            ast::BinOp::NegatedEqualityTest => {\n-                let lhs = bin.lhs()?.syntax().text();\n-                let rhs = bin.rhs()?.syntax().text();\n-                Some(format!(\"{} == {}\", lhs, rhs))\n-            }\n-            _ => None,\n-        },\n-        ast::Expr::PrefixExpr(pe) => match pe.op_kind()? {\n-            ast::PrefixOp::Not => {\n-                let child = pe.expr()?.syntax().text();\n-                Some(String::from(child))\n-            }\n-            _ => None,\n-        },\n-        _ => None,\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "bababa3e25f38cb2e9c9f45f97a9ff043e17f40c", "filename": "crates/ra_assists/src/assists/invert_if.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs?ref=7b6aa7c34e5650506924decfee0a77aa9bb0a480", "patch": "@@ -0,0 +1,102 @@\n+use hir::db::HirDatabase;\n+use ra_syntax::ast::{self, AstNode};\n+use ra_syntax::T;\n+\n+use crate::{Assist, AssistCtx, AssistId};\n+\n+// Assist: invert_if\n+//\n+// Apply invert_if\n+// This transforms if expressions of the form `if !x {A} else {B}` into `if x {B} else {A}`\n+// This also works with `!=`. This assist can only be applied with the cursor\n+// on `if`.\n+//\n+// ```\n+// fn main() {\n+//     if<|> !y { A } else { B }\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     if y { B } else { A }\n+// }\n+// ```\n+\n+pub(crate) fn invert_if(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let if_keyword = ctx.find_token_at_offset(T![if])?;\n+    let expr = ast::IfExpr::cast(if_keyword.parent())?;\n+    let if_range = if_keyword.text_range();\n+    let cursor_in_range = ctx.frange.range.is_subrange(&if_range);\n+    if !cursor_in_range {\n+        return None;\n+    }\n+\n+    let cond = expr.condition()?.expr()?;\n+    let then_node = expr.then_branch()?.syntax().clone();\n+\n+    if let ast::ElseBranch::Block(else_block) = expr.else_branch()? {\n+        let flip_cond = invert_boolean_expression(&cond)?;\n+        let cond_range = cond.syntax().text_range();\n+        let else_node = else_block.syntax();\n+        let else_range = else_node.text_range();\n+        let then_range = then_node.text_range();\n+        return ctx.add_assist(AssistId(\"invert_if\"), \"invert if branches\", |edit| {\n+            edit.target(if_range);\n+            edit.replace(cond_range, flip_cond.syntax().text());\n+            edit.replace(else_range, then_node.text());\n+            edit.replace(then_range, else_node.text());\n+        });\n+    }\n+\n+    None\n+}\n+\n+pub(crate) fn invert_boolean_expression(expr: &ast::Expr) -> Option<ast::Expr> {\n+    match expr {\n+        ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n+            ast::BinOp::NegatedEqualityTest => bin.replace_op(T![==]).map(|it| it.into()),\n+            _ => None,\n+        },\n+        ast::Expr::PrefixExpr(pe) => match pe.op_kind()? {\n+            ast::PrefixOp::Not => pe.expr(),\n+            _ => None,\n+        },\n+        _ => None,\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn invert_if_remove_inequality() {\n+        check_assist(\n+            invert_if,\n+            \"fn f() { i<|>f x != 3 { 1 } else { 3 + 2 } }\",\n+            \"fn f() { i<|>f x == 3 { 3 + 2 } else { 1 } }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn invert_if_remove_not() {\n+        check_assist(\n+            invert_if,\n+            \"fn f() { <|>if !cond { 3 * 2 } else { 1 } }\",\n+            \"fn f() { <|>if cond { 1 } else { 3 * 2 } }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn invert_if_doesnt_apply_with_cursor_not_on_if() {\n+        check_assist_not_applicable(invert_if, \"fn f() { if !<|>cond { 3 * 2 } else { 1 } }\")\n+    }\n+\n+    #[test]\n+    fn invert_if_doesnt_apply_without_negated() {\n+        check_assist_not_applicable(invert_if, \"fn f() { i<|>f cond { 3 * 2 } else { 1 } }\")\n+    }\n+}"}, {"sha": "3c716c2d121a392f2b9db699675eaa67c16faa87", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=7b6aa7c34e5650506924decfee0a77aa9bb0a480", "patch": "@@ -341,6 +341,23 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_invert_if() {\n+    check(\n+        \"invert_if\",\n+        r#####\"\n+fn main() {\n+    if<|> !y { A } else { B }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    if y { B } else { A }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_make_raw_string() {\n     check("}, {"sha": "a372bd8b9d54ea9695c47b00144c84369253e2af", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=7b6aa7c34e5650506924decfee0a77aa9bb0a480", "patch": "@@ -97,6 +97,7 @@ mod assists {\n     mod add_impl;\n     mod add_new;\n     mod apply_demorgan;\n+    mod invert_if;\n     mod flip_comma;\n     mod flip_binexpr;\n     mod flip_trait_bound;\n@@ -122,6 +123,7 @@ mod assists {\n             add_impl::add_impl,\n             add_new::add_new,\n             apply_demorgan::apply_demorgan,\n+            invert_if::invert_if,\n             change_visibility::change_visibility,\n             fill_match_arms::fill_match_arms,\n             merge_match_arms::merge_match_arms,"}, {"sha": "95bf9db14733b0e49e433449a2e332b3e9b7f71e", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=7b6aa7c34e5650506924decfee0a77aa9bb0a480", "patch": "@@ -13,11 +13,21 @@ use crate::{\n         make::{self, tokens},\n         AstNode, TypeBoundsOwner,\n     },\n-    AstToken, Direction, InsertPosition, SmolStr, SyntaxElement,\n+    AstToken, Direction, InsertPosition, SmolStr, SyntaxElement, SyntaxKind,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n     SyntaxNode, SyntaxToken, T,\n };\n \n+impl ast::BinExpr {\n+    #[must_use]\n+    pub fn replace_op(&self, op: SyntaxKind) -> Option<ast::BinExpr> {\n+        let op_node: SyntaxElement = self.op_details()?.0.into();\n+        let to_insert: Option<SyntaxElement> = Some(tokens::op(op).into());\n+        let replace_range = RangeInclusive::new(op_node.clone(), op_node);\n+        Some(replace_children(self, replace_range, to_insert.into_iter()))\n+    }\n+}\n+\n impl ast::FnDef {\n     #[must_use]\n     pub fn with_body(&self, body: ast::Block) -> ast::FnDef {"}, {"sha": "2fd039837828185dfbe1b2e1a332d59a2478d9f7", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=7b6aa7c34e5650506924decfee0a77aa9bb0a480", "patch": "@@ -127,7 +127,7 @@ pub enum BinOp {\n }\n \n impl ast::BinExpr {\n-    fn op_details(&self) -> Option<(SyntaxToken, BinOp)> {\n+    pub fn op_details(&self) -> Option<(SyntaxToken, BinOp)> {\n         self.syntax().children_with_tokens().filter_map(|it| it.into_token()).find_map(|c| {\n             let bin_op = match c.kind() {\n                 T![||] => BinOp::BooleanOr,"}, {"sha": "40db570da0b58e0a7c416a265d7900be1ca6b41c", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6aa7c34e5650506924decfee0a77aa9bb0a480/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=7b6aa7c34e5650506924decfee0a77aa9bb0a480", "patch": "@@ -173,10 +173,21 @@ fn ast_from_text<N: AstNode>(text: &str) -> N {\n }\n \n pub mod tokens {\n-    use crate::{AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken, T};\n+    use crate::{AstNode, Parse, SourceFile, SyntaxKind, SyntaxKind::*, SyntaxToken, T};\n     use once_cell::sync::Lazy;\n \n-    static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\"));\n+    static SOURCE_FILE: Lazy<Parse<SourceFile>> =\n+        Lazy::new(|| SourceFile::parse(\"const C: () = (1 != 1, 2 == 2)\\n;\"));\n+\n+    pub fn op(op: SyntaxKind) -> SyntaxToken {\n+        SOURCE_FILE\n+            .tree()\n+            .syntax()\n+            .descendants_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == op)\n+            .unwrap()\n+    }\n \n     pub fn comma() -> SyntaxToken {\n         SOURCE_FILE"}, {"sha": "6f4c30bee3d769bc4841a88bafafa58fd25d0fa6", "filename": "docs/user/assists.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7b6aa7c34e5650506924decfee0a77aa9bb0a480/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/7b6aa7c34e5650506924decfee0a77aa9bb0a480/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=7b6aa7c34e5650506924decfee0a77aa9bb0a480", "patch": "@@ -329,6 +329,25 @@ fn main() {\n }\n ```\n \n+## `invert_if`\n+\n+Apply invert_if\n+This transforms if expressions of the form `if !x {A} else {B}` into `if x {B} else {A}`\n+This also works with `!=`. This assist can only be applied with the cursor\n+on `if`.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    if\u2503 !y { A } else { B }\n+}\n+\n+// AFTER\n+fn main() {\n+    if y { B } else { A }\n+}\n+```\n+\n ## `make_raw_string`\n \n Adds `r#` to a plain string literal."}]}