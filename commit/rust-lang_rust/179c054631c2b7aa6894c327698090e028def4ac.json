{"sha": "179c054631c2b7aa6894c327698090e028def4ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OWMwNTQ2MzFjMmI3YWE2ODk0YzMyNzY5ODA5MGUwMjhkZWY0YWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-31T01:50:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:02:01Z"}, "message": "test: Remove all borrow check write guard tests", "tree": {"sha": "2434c3777f22320b7bda633d62822dd46167582e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2434c3777f22320b7bda633d62822dd46167582e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/179c054631c2b7aa6894c327698090e028def4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/179c054631c2b7aa6894c327698090e028def4ac", "html_url": "https://github.com/rust-lang/rust/commit/179c054631c2b7aa6894c327698090e028def4ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/179c054631c2b7aa6894c327698090e028def4ac/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e516859adc2eb0638a50677f73691f50ea9aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e516859adc2eb0638a50677f73691f50ea9aca", "html_url": "https://github.com/rust-lang/rust/commit/b6e516859adc2eb0638a50677f73691f50ea9aca"}], "stats": {"total": 390, "additions": 0, "deletions": 390}, "files": [{"sha": "451f023f5fcf718f79830280d9bf6b928eb4d1bc", "filename": "src/test/compile-fail/borrowck-wg-borrow-mut-to-imm-fail-2.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-borrow-mut-to-imm-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-borrow-mut-to-imm-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-borrow-mut-to-imm-fail-2.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,5 +0,0 @@\n-fn main() {\n-    let mut b = ~3;\n-    let _x = &mut *b;\n-    let _y = &mut *b; //~ ERROR cannot borrow\n-}"}, {"sha": "c455de888a330bf9eeb9f6e6720b82e17ae3a2fc", "filename": "src/test/compile-fail/borrowck-wg-borrow-mut-to-imm-fail-3.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-borrow-mut-to-imm-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-borrow-mut-to-imm-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-borrow-mut-to-imm-fail-3.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    let mut a = ~3;\n-    let mut b = &mut a;\n-    let _c = &mut *b;\n-    let mut d = /*move*/ a; //~ ERROR cannot move out\n-    *d += 1;\n-}"}, {"sha": "e18808dfe538a2309acf8c135865fde3263183ed", "filename": "src/test/compile-fail/borrowck-wg-borrow-mut-to-imm-fail.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-borrow-mut-to-imm-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-borrow-mut-to-imm-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-borrow-mut-to-imm-fail.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,6 +0,0 @@\n-fn main() {\n-    let mut b = ~3;\n-    let _x = &mut *b;\n-    let mut y = /*move*/ b; //~ ERROR cannot move out\n-    *y += 1;\n-}"}, {"sha": "4050b4c5971a03248567583f14e6812d17f35a86", "filename": "src/test/compile-fail/borrowck-wg-move-base-2.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-move-base-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-move-base-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-wg-move-base-2.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,9 +0,0 @@\n-fn foo(x: &mut int) {\n-    let mut a = 3;\n-    let mut _y = &mut *x;\n-    let _z = &mut *_y;\n-    _y = &mut a; //~ ERROR cannot assign\n-}\n-\n-fn main() {\n-}"}, {"sha": "c9bc061995d3e847086a1455a9de1d7dec93954b", "filename": "src/test/run-fail/borrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,23 +0,0 @@\n-// error-pattern:borrowed\n-\n-// Issue #6272. Tests that freezing correctly accounts for all the\n-// implicit derefs that can occur and freezes the innermost box. See\n-// the companion test\n-//\n-//     run-pass/borrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs\n-//\n-// for a detailed explanation of what is going on here.\n-\n-#[feature(managed_boxes)];\n-\n-fn main() {\n-    let a = @mut [3i];\n-    let b = @mut [a];\n-    let c = @mut b;\n-\n-    // this should freeze `a` only\n-    let _x: &mut [int] = c[0];\n-\n-    // hence this should fail\n-    a[0] = a[0];\n-}"}, {"sha": "284882ff6f5d57347d4c6f00012416de5a13a7d7", "filename": "src/test/run-fail/borrowck-wg-fail-2.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,17 +0,0 @@\n-// error-pattern:borrowed\n-\n-// Test that write guards trigger when there is a write to a field\n-// of a frozen structure.\n-\n-#[feature(managed_boxes)];\n-\n-struct S {\n-    x: int\n-}\n-\n-fn main() {\n-    let x = @mut S { x: 3 };\n-    let _y: &S = x;\n-    let z = x;\n-    z.x = 5;\n-}"}, {"sha": "2643ed261f944ce36d39f809d829ccc5b83e2c0c", "filename": "src/test/run-fail/borrowck-wg-fail-3.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,13 +0,0 @@\n-// error-pattern:borrowed\n-\n-// Test that write guards trigger when there is a write to a directly\n-// frozen @mut box.\n-\n-#[feature(managed_boxes)];\n-\n-fn main() {\n-    let x = @mut 3;\n-    let _y: &mut int = x;\n-    let z = x;\n-    *z = 5;\n-}"}, {"sha": "4a5664d08b690c34f4b68565e2a0b888eab021ed", "filename": "src/test/run-fail/borrowck-wg-fail-object-arg.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,24 +0,0 @@\n-#[feature(managed_boxes)];\n-\n-// error-pattern:borrowed\n-\n-trait Foo {\n-    fn foo(&self, @mut int);\n-}\n-\n-impl Foo for int {\n-    fn foo(&self, x: @mut int) {\n-        *x += *self;\n-    }\n-}\n-\n-fn it_takes_two(_f: &Foo, _g: &mut Foo) {\n-}\n-\n-fn main() {\n-    let x = @mut 3_i;\n-    let y = x as @mut Foo;\n-    let z = y;\n-\n-    it_takes_two(y, z);\n-}"}, {"sha": "9e32dbf64206e6040ac9cc104efa305c5bebdac5", "filename": "src/test/run-fail/borrowck-wg-fail-object.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,23 +0,0 @@\n-#[feature(managed_boxes)];\n-\n-// error-pattern:borrowed\n-\n-trait Foo {\n-    fn foo(&self, @mut int);\n-}\n-\n-impl Foo for int {\n-    fn foo(&self, x: @mut int) {\n-        *x += *self;\n-    }\n-}\n-\n-fn main() {\n-    let x = @mut 3_i;\n-    let y = x as @mut Foo;\n-\n-    // The call to `y.foo(...)` should freeze `y` (and thus also `x`,\n-    // since `x === y`). It is thus an error when `foo` tries to\n-    // mutate `x`.\n-    y.foo(x);\n-}"}, {"sha": "e1273381e93c7370eebed0e806dde5d74daedc8f", "filename": "src/test/run-fail/borrowck-wg-fail.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,15 +0,0 @@\n-#[feature(managed_boxes)];\n-\n-// error-pattern:borrowed\n-\n-// Test that write guards trigger when mut box is frozen\n-// as part of argument coercion.\n-\n-fn f(_x: &int, y: @mut int) {\n-    *y = 2;\n-}\n-\n-fn main() {\n-    let x = @mut 3;\n-    f(x, x);\n-}"}, {"sha": "c41b9b37bb582c6a4c0eed908555338afd8dad7a", "filename": "src/test/run-fail/borrowck-wg-imm-then-mut.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-imm-then-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-imm-then-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-imm-then-mut.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,21 +0,0 @@\n-#[feature(managed_boxes)];\n-\n-// error-pattern:borrowed\n-\n-// Test that if you imm borrow then mut borrow it fails.\n-\n-fn add1(a:@mut int)\n-{\n-    add2(a); // already frozen\n-}\n-\n-fn add2(_:&mut int)\n-{\n-}\n-\n-pub fn main()\n-{\n-    let a = @mut 3;\n-    let _b = &*a; // freezes a\n-    add1(a);\n-}"}, {"sha": "aceadb0459c823439cad5de42331aa811b2ec97d", "filename": "src/test/run-fail/borrowck-wg-mut-then-imm.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-mut-then-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-mut-then-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-mut-then-imm.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,21 +0,0 @@\n-#[feature(managed_boxes)];\n-\n-// error-pattern:borrowed\n-\n-// Test that if you mut borrow then imm borrow it fails.\n-\n-fn add1(a:@mut int)\n-{\n-    add2(a); // already frozen\n-}\n-\n-fn add2(_:&int)\n-{\n-}\n-\n-pub fn main()\n-{\n-    let a = @mut 3;\n-    let _b = &mut *a; // freezes a\n-    add1(a);\n-}"}, {"sha": "d33e39e09a852f67c0fc89acec3df7b1a003f2c8", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm-slice-method.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,39 +0,0 @@\n-// error-pattern:borrowed\n-\n-// Test that write guards trigger when there is a coercion to\n-// a slice on the receiver of a method.\n-\n-#[feature(managed_boxes)];\n-\n-trait MyMutSlice {\n-    fn my_mut_slice(self) -> Self;\n-}\n-\n-impl<'a, T> MyMutSlice for &'a mut [T] {\n-    fn my_mut_slice(self) -> &'a mut [T] {\n-        self\n-    }\n-}\n-\n-trait MySlice {\n-    fn my_slice(self) -> Self;\n-}\n-\n-impl<'a, T> MySlice for &'a [T] {\n-    fn my_slice(self) -> &'a [T] {\n-        self\n-    }\n-}\n-\n-fn add(x:&mut [int], y:&[int])\n-{\n-    x[0] = x[0] + y[0];\n-}\n-\n-pub fn main()\n-{\n-    let z = @mut [1,2,3];\n-    let z2 = z;\n-    add(z.my_mut_slice(), z2.my_slice());\n-    println!(\"{}\", z[0]);\n-}"}, {"sha": "63287981bdcc89fde16502cbb7678b6905435050", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm-slices.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,18 +0,0 @@\n-// error-pattern:borrowed\n-\n-// Test that write guards trigger when arguments are coerced to slices.\n-\n-#[feature(managed_boxes)];\n-\n-fn add(x:&mut [int], y:&[int])\n-{\n-    x[0] = x[0] + y[0];\n-}\n-\n-pub fn main()\n-{\n-    let z = @mut [1,2,3];\n-    let z2 = z;\n-    add(z, z2);\n-    println!(\"{}\", z[0]);\n-}"}, {"sha": "0820b94e181c4fc1890a25579a09a9762fd585be", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,19 +0,0 @@\n-// error-pattern:borrowed\n-\n-// Test that write guards trigger when we are indexing into\n-// an @mut vector.\n-\n-#[feature(managed_boxes)];\n-\n-fn add(x:&mut int, y:&int)\n-{\n-    *x = *x + *y;\n-}\n-\n-pub fn main()\n-{\n-    let z = @mut [1,2,3];\n-    let z2 = z;\n-    add(&mut z[0], &z2[0]);\n-    println!(\"{}\", z[0]);\n-}"}, {"sha": "5ee9cd37e87b8fc74e41d1d9b364204ad5fb8751", "filename": "src/test/run-fail/borrowck-wg-two-array-indices.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,19 +0,0 @@\n-// error-pattern:borrowed\n-\n-// Test that arguments trigger when there are *two mutable* borrows\n-// of indices.\n-\n-#[feature(managed_boxes)];\n-\n-fn add(x:&mut int, y:&mut int)\n-{\n-    *x = *x + *y;\n-}\n-\n-pub fn main()\n-{\n-    let z = @mut [1,2,3];\n-    let z2 = z;\n-    add(&mut z[0], &mut z2[0]);\n-    println!(\"{}\", z[0]);\n-}"}, {"sha": "27d337a28bf89dff623dc72d14331006945c45b7", "filename": "src/test/run-pass/borrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,42 +0,0 @@\n-// Issue #6272. Tests that freezing correctly accounts for all the\n-// implicit derefs that can occur.\n-//\n-// In this particular case, the expression:\n-//\n-//    let x: &mut [int] = c[0];\n-//\n-// is seen by borrowck as this sequence of derefs\n-// and pointer offsets:\n-//\n-//    &*((**c)[0])\n-//\n-// or, written using `x.*` for `*x` (so that everything\n-// is a postfix operation):\n-//\n-//    &c.*.*.[0].*\n-//       ^    ^\n-//       |    |\n-//       b    a\n-//\n-// Here I also indicated where the evaluation yields the boxes `a` and\n-// `b`. It is important then that we only freeze the innermost box\n-// (`a`), and not the other ones (`b`, `c`).\n-//\n-// Also see the companion test:\n-//\n-// run-fail/borrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs\n-\n-#[feature(managed_boxes)];\n-\n-pub fn main() {\n-    let a = @mut 3i;\n-    let b = @mut [a];\n-    let c = @mut [3];\n-\n-    // this should freeze `a` only\n-    let _x: &mut int = a;\n-\n-    // hence these writes should not fail:\n-    b[0] = b[0];\n-    c[0] = c[0];\n-}"}, {"sha": "d721704ba55185a45c71d0489460ef8fdf8c2661", "filename": "src/test/run-pass/borrowck-wg-borrow-mut-to-imm-2.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-2.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,13 +0,0 @@\n-struct Cat;\n-\n-fn bar(_: &Cat) {\n-}\n-\n-fn foo(cat: &mut Cat) {\n-    bar(&*cat);\n-}\n-\n-pub fn main() {\n-    let mut mimi = ~Cat;\n-    foo(mimi);\n-}"}, {"sha": "dcf497e81f743deea5c3ec870aa34ff8af0e0381", "filename": "src/test/run-pass/borrowck-wg-borrow-mut-to-imm-3.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,18 +0,0 @@\n-struct Wizard {\n-    spells: ~[&'static str]\n-}\n-\n-impl Wizard {\n-    pub fn cast(&mut self) {\n-        for &spell in self.spells.iter() {\n-            println(spell);\n-        }\n-    }\n-}\n-\n-pub fn main() {\n-    let mut harry = Wizard {\n-        spells: ~[ \"expelliarmus\", \"expecto patronum\", \"incendio\" ]\n-    };\n-    harry.cast();\n-}"}, {"sha": "668f602b3d35c941770d07d920c29f7c04bdab7a", "filename": "src/test/run-pass/borrowck-wg-borrow-mut-to-imm.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,12 +0,0 @@\n-fn g(x: &Option<int>) {\n-    println(x.unwrap().to_str());\n-}\n-\n-fn f(x: &mut Option<int>) {\n-    g(&*x);\n-}\n-\n-pub fn main() {\n-    let mut x = ~Some(3);\n-    f(x);\n-}"}, {"sha": "f561dba2423274401ef1ccbcc6256b172d0ccb9b", "filename": "src/test/run-pass/borrowck-wg-simple.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-simple.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,10 +0,0 @@\n-#[feature(managed_boxes)];\n-\n-fn f(x: &int) {\n-    println(x.to_str());\n-}\n-\n-pub fn main() {\n-    let x = @mut 3;\n-    f(x);\n-}"}, {"sha": "efd0572c8c633b88a12ec286ef888549b8f8f401", "filename": "src/test/run-pass/borrowck-wg-two-imm-borrows.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e516859adc2eb0638a50677f73691f50ea9aca/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs?ref=b6e516859adc2eb0638a50677f73691f50ea9aca", "patch": "@@ -1,16 +0,0 @@\n-// Test that we can borrow the same @mut box twice, so long as both are imm.\n-\n-#[feature(managed_boxes)];\n-\n-fn add(x:&int, y:&int)\n-{\n-    *x + *y;\n-}\n-\n-pub fn main()\n-{\n-    let z = @mut [1,2,3];\n-    let z2 = z;\n-    add(&z[0], &z2[0]);\n-    println!(\"{}\", z[0]);\n-}"}]}