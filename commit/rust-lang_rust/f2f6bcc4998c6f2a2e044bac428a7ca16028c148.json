{"sha": "f2f6bcc4998c6f2a2e044bac428a7ca16028c148", "node_id": "C_kwDOAAsO6NoAKGYyZjZiY2M0OTk4YzZmMmEyZTA0NGJhYzQyOGE3Y2ExNjAyOGMxNDg", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-02-01T16:39:14Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-03-16T10:21:50Z"}, "message": "Don't allow new const panic through format flattening.\n\npanic!(\"a {}\", \"b\") is still not allowed in const,\neven if the hir flattens to panic!(\"a b\").", "tree": {"sha": "ca515130d8ac8165a049aa86af09dd5b6387b238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca515130d8ac8165a049aa86af09dd5b6387b238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2f6bcc4998c6f2a2e044bac428a7ca16028c148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f6bcc4998c6f2a2e044bac428a7ca16028c148", "html_url": "https://github.com/rust-lang/rust/commit/f2f6bcc4998c6f2a2e044bac428a7ca16028c148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d252160ea80dfa1cb26acc174a31cf94a09520", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d252160ea80dfa1cb26acc174a31cf94a09520", "html_url": "https://github.com/rust-lang/rust/commit/96d252160ea80dfa1cb26acc174a31cf94a09520"}], "stats": {"total": 83, "additions": 66, "deletions": 17}, "files": [{"sha": "e094457961ede20c8d7b366da0a9c5fd47a26944", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=f2f6bcc4998c6f2a2e044bac428a7ca16028c148", "patch": "@@ -13,9 +13,12 @@ use std::borrow::Cow;\n \n impl<'hir> LoweringContext<'_, 'hir> {\n     pub(crate) fn lower_format_args(&mut self, sp: Span, fmt: &FormatArgs) -> hir::ExprKind<'hir> {\n+        // Never call the const constructor of `fmt::Arguments` if the\n+        // format_args!() had any arguments _before_ flattening/inlining.\n+        let allow_const = fmt.arguments.all_args().is_empty();\n         let fmt = flatten_format_args(Cow::Borrowed(fmt));\n         let fmt = inline_literals(fmt);\n-        expand_format_args(self, sp, &fmt)\n+        expand_format_args(self, sp, &fmt, allow_const)\n     }\n }\n \n@@ -342,6 +345,7 @@ fn expand_format_args<'hir>(\n     ctx: &mut LoweringContext<'_, 'hir>,\n     macsp: Span,\n     fmt: &FormatArgs,\n+    allow_const: bool,\n ) -> hir::ExprKind<'hir> {\n     let mut incomplete_lit = String::new();\n     let lit_pieces =\n@@ -411,6 +415,18 @@ fn expand_format_args<'hir>(\n \n     let arguments = fmt.arguments.all_args();\n \n+    if allow_const && arguments.is_empty() && argmap.is_empty() {\n+        // Generate:\n+        //     <core::fmt::Arguments>::new_const(lit_pieces)\n+        let new = ctx.arena.alloc(ctx.expr_lang_item_type_relative(\n+            macsp,\n+            hir::LangItem::FormatArguments,\n+            sym::new_const,\n+        ));\n+        let new_args = ctx.arena.alloc_from_iter([lit_pieces]);\n+        return hir::ExprKind::Call(new, new_args);\n+    }\n+\n     // If the args array contains exactly all the original arguments once,\n     // in order, we can use a simple array instead of a `match` construction.\n     // However, if there's a yield point in any argument except the first one,"}, {"sha": "abe5af8f9e0cf137bd7ea26a7745f6b2d3591258", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f2f6bcc4998c6f2a2e044bac428a7ca16028c148", "patch": "@@ -984,6 +984,7 @@ symbols! {\n         never_type_fallback,\n         new,\n         new_binary,\n+        new_const,\n         new_debug,\n         new_display,\n         new_lower_exp,"}, {"sha": "6d764237dc8ae429c17bc19fe81c7e99fb946018", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=f2f6bcc4998c6f2a2e044bac428a7ca16028c148", "patch": "@@ -392,8 +392,31 @@ enum FlagV1 {\n }\n \n impl<'a> Arguments<'a> {\n+    #[doc(hidden)]\n+    #[inline]\n+    #[unstable(feature = \"fmt_internals\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n+    pub const fn new_const(pieces: &'a [&'static str]) -> Self {\n+        if pieces.len() > 1 {\n+            panic!(\"invalid args\");\n+        }\n+        Arguments { pieces, fmt: None, args: &[] }\n+    }\n+\n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure.\n+    #[cfg(not(bootstrap))]\n+    #[doc(hidden)]\n+    #[inline]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n+    pub fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n+        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {\n+            panic!(\"invalid args\");\n+        }\n+        Arguments { pieces, fmt: None, args }\n+    }\n+\n+    #[cfg(bootstrap)]\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n@@ -417,8 +440,7 @@ impl<'a> Arguments<'a> {\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n-    pub const fn new_v1_formatted(\n+    pub fn new_v1_formatted(\n         pieces: &'a [&'static str],\n         args: &'a [ArgumentV1<'a>],\n         fmt: &'a [rt::v1::Argument],"}, {"sha": "dd0105c0eb4fa3862c66620b7f434c41687b1b42", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=f2f6bcc4998c6f2a2e044bac428a7ca16028c148", "patch": "@@ -111,7 +111,7 @@ pub const fn panic(expr: &'static str) -> ! {\n     // truncation and padding (even though none is used here). Using\n     // Arguments::new_v1 may allow the compiler to omit Formatter::pad from the\n     // output binary, saving up to a few kilobytes.\n-    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]));\n+    panic_fmt(fmt::Arguments::new_const(&[expr]));\n }\n \n /// Like `panic`, but without unwinding and track_caller to reduce the impact on codesize.\n@@ -120,7 +120,7 @@ pub const fn panic(expr: &'static str) -> ! {\n #[lang = \"panic_nounwind\"] // needed by codegen for non-unwinding panics\n #[rustc_nounwind]\n pub fn panic_nounwind(expr: &'static str) -> ! {\n-    panic_nounwind_fmt(fmt::Arguments::new_v1(&[expr], &[]));\n+    panic_nounwind_fmt(fmt::Arguments::new_const(&[expr]));\n }\n \n #[inline]"}, {"sha": "f032ea779dd489094ba84c61f0887b6aa8e993bc", "filename": "tests/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/tests%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/tests%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=f2f6bcc4998c6f2a2e044bac428a7ca16028c148", "patch": "@@ -1,4 +1,4 @@\n-error: `Arguments::<'a>::new_v1` is not yet stable as a const fn\n+error: `Arguments::<'a>::new_const` is not yet stable as a const fn\n   --> $DIR/issue-64453.rs:4:31\n    |\n LL | static settings_dir: String = format!(\"\");"}, {"sha": "5bdb2bf19543907e9f563257b3ec0096345f5342", "filename": "tests/ui/consts/const-eval/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.rs?ref=f2f6bcc4998c6f2a2e044bac428a7ca16028c148", "patch": "@@ -1,12 +1,13 @@\n const fn failure() {\n     panic!(\"{:?}\", 0);\n     //~^ ERROR cannot call non-const formatting macro in constant functions\n+    //~| ERROR cannot call non-const fn `Arguments::<'_>::new_v1` in constant functions\n }\n \n const fn print() {\n     println!(\"{:?}\", 0);\n     //~^ ERROR cannot call non-const formatting macro in constant functions\n-    //~| ERROR `Arguments::<'a>::new_v1` is not yet stable as a const fn\n+    //~| ERROR cannot call non-const fn `Arguments::<'_>::new_v1` in constant functions\n     //~| ERROR cannot call non-const fn `_print` in constant functions\n }\n "}, {"sha": "c39920d444def348c5676fa24508a05b9504bdcf", "filename": "tests/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2f6bcc4998c6f2a2e044bac428a7ca16028c148/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=f2f6bcc4998c6f2a2e044bac428a7ca16028c148", "patch": "@@ -7,26 +7,35 @@ LL |     panic!(\"{:?}\", 0);\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error[E0015]: cannot call non-const fn `Arguments::<'_>::new_v1` in constant functions\n+  --> $DIR/format.rs:2:5\n+   |\n+LL |     panic!(\"{:?}\", 0);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error[E0015]: cannot call non-const formatting macro in constant functions\n-  --> $DIR/format.rs:7:22\n+  --> $DIR/format.rs:8:22\n    |\n LL |     println!(\"{:?}\", 0);\n    |                      ^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: `Arguments::<'a>::new_v1` is not yet stable as a const fn\n-  --> $DIR/format.rs:7:5\n+error[E0015]: cannot call non-const fn `Arguments::<'_>::new_v1` in constant functions\n+  --> $DIR/format.rs:8:5\n    |\n LL |     println!(\"{:?}\", 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: add `#![feature(const_fmt_arguments_new)]` to the crate attributes to enable\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const fn `_print` in constant functions\n-  --> $DIR/format.rs:7:5\n+  --> $DIR/format.rs:8:5\n    |\n LL |     println!(\"{:?}\", 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -63,33 +72,33 @@ LL |     panic!(\"{:?}\", 0);\n    = note: this note originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used\n-  --> $DIR/format.rs:7:14\n+  --> $DIR/format.rs:8:14\n    |\n LL |     println!(\"{:?}\", 0);\n    |              ^^^^^^\n \n note: erroneous constant used\n-  --> $DIR/format.rs:7:14\n+  --> $DIR/format.rs:8:14\n    |\n LL |     println!(\"{:?}\", 0);\n    |              ^^^^^^\n \n note: erroneous constant used\n-  --> $DIR/format.rs:7:22\n+  --> $DIR/format.rs:8:22\n    |\n LL |     println!(\"{:?}\", 0);\n    |                      ^\n    |\n    = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used\n-  --> $DIR/format.rs:7:22\n+  --> $DIR/format.rs:8:22\n    |\n LL |     println!(\"{:?}\", 0);\n    |                      ^\n    |\n    = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0015`."}]}