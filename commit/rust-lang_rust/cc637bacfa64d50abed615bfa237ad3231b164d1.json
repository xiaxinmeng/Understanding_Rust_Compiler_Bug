{"sha": "cc637bacfa64d50abed615bfa237ad3231b164d1", "node_id": "C_kwDOAAsO6NoAKGNjNjM3YmFjZmE2NGQ1MGFiZWQ2MTViZmEyMzdhZDMyMzFiMTY0ZDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-21T13:22:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-21T13:22:21Z"}, "message": "Auto merge of #9092 - tamaroning:fix-needless-match, r=llogiq\n\nFix false positives of needless_match\n\ncloses: #9084\nmade needless_match take into account arm in the form of `_ if => ...`\n\nchangelog: none", "tree": {"sha": "09a660a5ef8cf09134acdc00562f75fa81533446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09a660a5ef8cf09134acdc00562f75fa81533446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc637bacfa64d50abed615bfa237ad3231b164d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc637bacfa64d50abed615bfa237ad3231b164d1", "html_url": "https://github.com/rust-lang/rust/commit/cc637bacfa64d50abed615bfa237ad3231b164d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc637bacfa64d50abed615bfa237ad3231b164d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e19a05cbb3a23e27c9bc0eb70bbc001b55ba5a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/e19a05cbb3a23e27c9bc0eb70bbc001b55ba5a38", "html_url": "https://github.com/rust-lang/rust/commit/e19a05cbb3a23e27c9bc0eb70bbc001b55ba5a38"}, {"sha": "f7a376e4fce60826582efa91c3cfdce80158399f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a376e4fce60826582efa91c3cfdce80158399f", "html_url": "https://github.com/rust-lang/rust/commit/f7a376e4fce60826582efa91c3cfdce80158399f"}], "stats": {"total": 130, "additions": 127, "deletions": 3}, "files": [{"sha": "6f037339ec75870552a3d2867f447a012364d143", "filename": "clippy_lints/src/matches/needless_match.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cc637bacfa64d50abed615bfa237ad3231b164d1/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc637bacfa64d50abed615bfa237ad3231b164d1/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs?ref=cc637bacfa64d50abed615bfa237ad3231b164d1", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::{\n };\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n-use rustc_hir::{Arm, BindingAnnotation, Expr, ExprKind, FnRetTy, Node, Pat, PatKind, Path, QPath};\n+use rustc_hir::{Arm, BindingAnnotation, Expr, ExprKind, FnRetTy, Guard, Node, Pat, PatKind, Path, QPath};\n use rustc_lint::LateContext;\n use rustc_span::sym;\n use rustc_typeck::hir_ty_to_ty;\n@@ -65,8 +65,26 @@ pub(crate) fn check_if_let<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'_>, if_let:\n fn check_all_arms(cx: &LateContext<'_>, match_expr: &Expr<'_>, arms: &[Arm<'_>]) -> bool {\n     for arm in arms {\n         let arm_expr = peel_blocks_with_stmt(arm.body);\n+\n+        if let Some(guard_expr) = &arm.guard {\n+            match guard_expr {\n+                // gives up if `pat if expr` can have side effects\n+                Guard::If(if_cond) => {\n+                    if if_cond.can_have_side_effects() {\n+                        return false;\n+                    }\n+                },\n+                // gives up `pat if let ...` arm\n+                Guard::IfLet(_) => {\n+                    return false;\n+                },\n+            };\n+        }\n+\n         if let PatKind::Wild = arm.pat.kind {\n-            return eq_expr_value(cx, match_expr, strip_return(arm_expr));\n+            if !eq_expr_value(cx, match_expr, strip_return(arm_expr)) {\n+                return false;\n+            }\n         } else if !pat_same_as_expr(arm.pat, arm_expr) {\n             return false;\n         }"}, {"sha": "7e47406798cf9b90d96e98893ed8c66c89109406", "filename": "tests/ui/needless_match.fixed", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cc637bacfa64d50abed615bfa237ad3231b164d1/tests%2Fui%2Fneedless_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cc637bacfa64d50abed615bfa237ad3231b164d1/tests%2Fui%2Fneedless_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_match.fixed?ref=cc637bacfa64d50abed615bfa237ad3231b164d1", "patch": "@@ -207,4 +207,43 @@ impl Tr for Result<i32, i32> {\n     }\n }\n \n+mod issue9084 {\n+    fn wildcard_if() {\n+        let mut some_bool = true;\n+        let e = Some(1);\n+\n+        // should lint\n+        let _ = e;\n+\n+        // should lint\n+        let _ = e;\n+\n+        // should not lint\n+        let _ = match e {\n+            _ if some_bool => e,\n+            _ => Some(2),\n+        };\n+\n+        // should not lint\n+        let _ = match e {\n+            Some(i) => Some(i + 1),\n+            _ if some_bool => e,\n+            _ => e,\n+        };\n+\n+        // should not lint (guard has side effects)\n+        let _ = match e {\n+            Some(i) => Some(i),\n+            _ if {\n+                some_bool = false;\n+                some_bool\n+            } =>\n+            {\n+                e\n+            },\n+            _ => e,\n+        };\n+    }\n+}\n+\n fn main() {}"}, {"sha": "809c694bf400464bb4685b115010b04c63ce6147", "filename": "tests/ui/needless_match.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cc637bacfa64d50abed615bfa237ad3231b164d1/tests%2Fui%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc637bacfa64d50abed615bfa237ad3231b164d1/tests%2Fui%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_match.rs?ref=cc637bacfa64d50abed615bfa237ad3231b164d1", "patch": "@@ -244,4 +244,50 @@ impl Tr for Result<i32, i32> {\n     }\n }\n \n+mod issue9084 {\n+    fn wildcard_if() {\n+        let mut some_bool = true;\n+        let e = Some(1);\n+\n+        // should lint\n+        let _ = match e {\n+            _ if some_bool => e,\n+            _ => e,\n+        };\n+\n+        // should lint\n+        let _ = match e {\n+            Some(i) => Some(i),\n+            _ if some_bool => e,\n+            _ => e,\n+        };\n+\n+        // should not lint\n+        let _ = match e {\n+            _ if some_bool => e,\n+            _ => Some(2),\n+        };\n+\n+        // should not lint\n+        let _ = match e {\n+            Some(i) => Some(i + 1),\n+            _ if some_bool => e,\n+            _ => e,\n+        };\n+\n+        // should not lint (guard has side effects)\n+        let _ = match e {\n+            Some(i) => Some(i),\n+            _ if {\n+                some_bool = false;\n+                some_bool\n+            } =>\n+            {\n+                e\n+            },\n+            _ => e,\n+        };\n+    }\n+}\n+\n fn main() {}"}, {"sha": "28e78441c2522fcd65528069876fc567cf071b5b", "filename": "tests/ui/needless_match.stderr", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cc637bacfa64d50abed615bfa237ad3231b164d1/tests%2Fui%2Fneedless_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc637bacfa64d50abed615bfa237ad3231b164d1/tests%2Fui%2Fneedless_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_match.stderr?ref=cc637bacfa64d50abed615bfa237ad3231b164d1", "patch": "@@ -109,5 +109,26 @@ LL | |             Complex::D(E::VariantB(ea, eb), b) => Complex::D(E::VariantB(\n LL | |         };\n    | |_________^ help: replace it with: `ce`\n \n-error: aborting due to 11 previous errors\n+error: this match expression is unnecessary\n+  --> $DIR/needless_match.rs:253:17\n+   |\n+LL |           let _ = match e {\n+   |  _________________^\n+LL | |             _ if some_bool => e,\n+LL | |             _ => e,\n+LL | |         };\n+   | |_________^ help: replace it with: `e`\n+\n+error: this match expression is unnecessary\n+  --> $DIR/needless_match.rs:259:17\n+   |\n+LL |           let _ = match e {\n+   |  _________________^\n+LL | |             Some(i) => Some(i),\n+LL | |             _ if some_bool => e,\n+LL | |             _ => e,\n+LL | |         };\n+   | |_________^ help: replace it with: `e`\n+\n+error: aborting due to 13 previous errors\n "}]}