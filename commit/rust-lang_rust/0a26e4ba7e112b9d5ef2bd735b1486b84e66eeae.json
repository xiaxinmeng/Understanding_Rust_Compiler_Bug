{"sha": "0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMjZlNGJhN2UxMTJiOWQ1ZWYyYmQ3MzViMTQ4NmI4NGU2NmVlYWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-25T09:43:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-25T09:43:49Z"}, "message": "Rollup merge of #78326 - Aaron1011:fix/min-stmt-lints, r=petrochenkov\n\nSplit out statement attributes changes from #78306\n\nThis is the same as PR https://github.com/rust-lang/rust/pull/78306, but `unused_doc_comments` is modified to explicitly ignore statement items (which preserves the current behavior).\n\nThis shouldn't have any user-visible effects, so it can be landed without lang team discussion.\n\n---------\nWhen the 'early' and 'late' visitors visit an attribute target, they\nactivate any lint attributes (e.g. `#[allow]`) that apply to it.\nThis can affect warnings emitted on sibiling attributes. For example,\nthe following code does not produce an `unused_attributes` for\n`#[inline]`, since the sibiling `#[allow(unused_attributes)]` suppressed\nthe warning.\n\n```rust\ntrait Foo {\n    #[allow(unused_attributes)] #[inline] fn first();\n    #[inline] #[allow(unused_attributes)] fn second();\n}\n```\n\nHowever, we do not do this for statements - instead, the lint attributes\nonly become active when we visit the struct nested inside `StmtKind`\n(e.g. `Item`).\n\nCurrently, this is difficult to observe due to another issue - the\n`HasAttrs` impl for `StmtKind` ignores attributes for `StmtKind::Item`.\nAs a result, the `unused_doc_comments` lint will never see attributes on\nitem statements.\n\nThis commit makes two interrelated fixes to the handling of inert\n(non-proc-macro) attributes on statements:\n\n* The `HasAttr` impl for `StmtKind` now returns attributes for\n  `StmtKind::Item`, treating it just like every other `StmtKind`\n  variant. The only place relying on the old behavior was macro\n  which has been updated to explicitly ignore attributes on item\n  statements. This allows the `unused_doc_comments` lint to fire for\n  item statements.\n* The `early` and `late` lint visitors now activate lint attributes when\n  invoking the callback for `Stmt`. This ensures that a lint\n  attribute (e.g. `#[allow(unused_doc_comments)]`) can be applied to\n  sibiling attributes on an item statement.\n\nFor now, the `unused_doc_comments` lint is explicitly disabled on item\nstatements, which preserves the current behavior. The exact locatiosn\nwhere this lint should fire are being discussed in PR #78306", "tree": {"sha": "de874b2bd5404d901efa2b73503dd9117f987c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de874b2bd5404d901efa2b73503dd9117f987c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflUjVCRBK7hj4Ov3rIwAAdHIIADB6N4tJN3QvkBGIs1Q4rUFt\njuokykxj1zPOPwDf2G/lhHhP8InozxWI0sWI53WoLF66P4Wr+/Pry8U2ClOlzk9h\nGT5PULUmOD8UrG4o7mZKlIOP4QJzFiEdPF3aOYMY5zcRpMVskoSZIHWMN/nHy3nw\nEfKwpMWFnseUUFiIG7Cny+WR7iVLTycbeqqoDxzYQyaHy0itnj67Q5vfuH+pZEwC\ndHwwOxxa0Jo7J648C57FSH04R2yLHomIeWsOvoPiPbXB4eKARI0gVjbJTStGs4Sz\nfyUvaqrYSxCYIozVCrA278AYhJnSbKBrnJ/TRuBBAp4FxF/tv8p+eBo5wMU9MP8=\n=EfKz\n-----END PGP SIGNATURE-----\n", "payload": "tree de874b2bd5404d901efa2b73503dd9117f987c57\nparent 90856565124965295202aae11a33e66870f39e71\nparent ac384ac2dbb21c5a0f6189807edf4a4ac42383ed\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603619029 +0900\ncommitter GitHub <noreply@github.com> 1603619029 +0900\n\nRollup merge of #78326 - Aaron1011:fix/min-stmt-lints, r=petrochenkov\n\nSplit out statement attributes changes from #78306\n\nThis is the same as PR https://github.com/rust-lang/rust/pull/78306, but `unused_doc_comments` is modified to explicitly ignore statement items (which preserves the current behavior).\n\nThis shouldn't have any user-visible effects, so it can be landed without lang team discussion.\n\n---------\nWhen the 'early' and 'late' visitors visit an attribute target, they\nactivate any lint attributes (e.g. `#[allow]`) that apply to it.\nThis can affect warnings emitted on sibiling attributes. For example,\nthe following code does not produce an `unused_attributes` for\n`#[inline]`, since the sibiling `#[allow(unused_attributes)]` suppressed\nthe warning.\n\n```rust\ntrait Foo {\n    #[allow(unused_attributes)] #[inline] fn first();\n    #[inline] #[allow(unused_attributes)] fn second();\n}\n```\n\nHowever, we do not do this for statements - instead, the lint attributes\nonly become active when we visit the struct nested inside `StmtKind`\n(e.g. `Item`).\n\nCurrently, this is difficult to observe due to another issue - the\n`HasAttrs` impl for `StmtKind` ignores attributes for `StmtKind::Item`.\nAs a result, the `unused_doc_comments` lint will never see attributes on\nitem statements.\n\nThis commit makes two interrelated fixes to the handling of inert\n(non-proc-macro) attributes on statements:\n\n* The `HasAttr` impl for `StmtKind` now returns attributes for\n  `StmtKind::Item`, treating it just like every other `StmtKind`\n  variant. The only place relying on the old behavior was macro\n  which has been updated to explicitly ignore attributes on item\n  statements. This allows the `unused_doc_comments` lint to fire for\n  item statements.\n* The `early` and `late` lint visitors now activate lint attributes when\n  invoking the callback for `Stmt`. This ensures that a lint\n  attribute (e.g. `#[allow(unused_doc_comments)]`) can be applied to\n  sibiling attributes on an item statement.\n\nFor now, the `unused_doc_comments` lint is explicitly disabled on item\nstatements, which preserves the current behavior. The exact locatiosn\nwhere this lint should fire are being discussed in PR #78306\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "html_url": "https://github.com/rust-lang/rust/commit/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90856565124965295202aae11a33e66870f39e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/90856565124965295202aae11a33e66870f39e71", "html_url": "https://github.com/rust-lang/rust/commit/90856565124965295202aae11a33e66870f39e71"}, {"sha": "ac384ac2dbb21c5a0f6189807edf4a4ac42383ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac384ac2dbb21c5a0f6189807edf4a4ac42383ed", "html_url": "https://github.com/rust-lang/rust/commit/ac384ac2dbb21c5a0f6189807edf4a4ac42383ed"}], "stats": {"total": 116, "additions": 94, "deletions": 22}, "files": [{"sha": "70ad43ecad219a32d4ba6dae82805dee51006ed5", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -629,7 +629,8 @@ impl HasAttrs for StmtKind {\n         match *self {\n             StmtKind::Local(ref local) => local.attrs(),\n             StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => expr.attrs(),\n-            StmtKind::Empty | StmtKind::Item(..) => &[],\n+            StmtKind::Item(ref item) => item.attrs(),\n+            StmtKind::Empty => &[],\n             StmtKind::MacCall(ref mac) => mac.attrs.attrs(),\n         }\n     }\n@@ -638,7 +639,8 @@ impl HasAttrs for StmtKind {\n         match self {\n             StmtKind::Local(local) => local.visit_attrs(f),\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => expr.visit_attrs(f),\n-            StmtKind::Empty | StmtKind::Item(..) => {}\n+            StmtKind::Item(item) => item.visit_attrs(f),\n+            StmtKind::Empty => {}\n             StmtKind::MacCall(mac) => {\n                 mac.attrs.visit_attrs(f);\n             }"}, {"sha": "3e5762ab992f48a470c89d0abe6b272986beacf9", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -1357,7 +1357,8 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         // we'll expand attributes on expressions separately\n         if !stmt.is_expr() {\n             let (attr, derives, after_derive) = if stmt.is_item() {\n-                self.classify_item(&mut stmt)\n+                // FIXME: Handle custom attributes on statements (#15701)\n+                (None, vec![], false)\n             } else {\n                 // ignore derives on non-item statements so it falls through\n                 // to the unused-attributes lint"}, {"sha": "fc15bb324c1d881fa77c7b074932c82eb8109531", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -1101,11 +1101,11 @@ pub enum StmtKind<'hir> {\n     Semi(&'hir Expr<'hir>),\n }\n \n-impl StmtKind<'hir> {\n-    pub fn attrs(&self) -> &'hir [Attribute] {\n+impl<'hir> StmtKind<'hir> {\n+    pub fn attrs(&self, get_item: impl FnOnce(ItemId) -> &'hir Item<'hir>) -> &'hir [Attribute] {\n         match *self {\n             StmtKind::Local(ref l) => &l.attrs,\n-            StmtKind::Item(_) => &[],\n+            StmtKind::Item(ref item_id) => &get_item(*item_id).attrs,\n             StmtKind::Expr(ref e) | StmtKind::Semi(ref e) => &e.attrs,\n         }\n     }"}, {"sha": "e5f66611d0f9b382471319ce3776c6d8b90e5b47", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -994,7 +994,8 @@ impl EarlyLintPass for UnusedDocComment {\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &ast::Stmt) {\n         let kind = match stmt.kind {\n             ast::StmtKind::Local(..) => \"statements\",\n-            ast::StmtKind::Item(..) => \"inner items\",\n+            // Disabled pending discussion in #78306\n+            ast::StmtKind::Item(..) => return,\n             // expressions will be reported by `check_expr`.\n             ast::StmtKind::Empty\n             | ast::StmtKind::Semi(_)"}, {"sha": "9aeeb6277924ec12ce2b3c68a5737233093accfc", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -18,6 +18,7 @@ use crate::context::{EarlyContext, LintContext, LintStore};\n use crate::passes::{EarlyLintPass, EarlyLintPassObject};\n use rustc_ast as ast;\n use rustc_ast::visit as ast_visit;\n+use rustc_attr::HasAttrs;\n use rustc_session::lint::{BufferedEarlyLint, LintBuffer, LintPass};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n@@ -119,8 +120,22 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_stmt(&mut self, s: &'a ast::Stmt) {\n-        run_early_pass!(self, check_stmt, s);\n-        self.check_id(s.id);\n+        // Add the statement's lint attributes to our\n+        // current state when checking the statement itself.\n+        // This allows us to handle attributes like\n+        // `#[allow(unused_doc_comments)]`, which apply to\n+        // sibling attributes on the same target\n+        //\n+        // Note that statements get their attributes from\n+        // the AST struct that they wrap (e.g. an item)\n+        self.with_lint_attrs(s.id, s.attrs(), |cx| {\n+            run_early_pass!(cx, check_stmt, s);\n+            cx.check_id(s.id);\n+        });\n+        // The visitor for the AST struct wrapped\n+        // by the statement (e.g. `Item`) will call\n+        // `with_lint_attrs`, so do this walk\n+        // outside of the above `with_lint_attrs` call\n         ast_visit::walk_stmt(self, s);\n     }\n "}, {"sha": "015e10987118296d7094272459059efe9eb1b3bb", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -174,12 +174,13 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_stmt(&mut self, s: &'tcx hir::Stmt<'tcx>) {\n-        // statement attributes are actually just attributes on one of\n-        // - item\n-        // - local\n-        // - expression\n-        // so we keep track of lint levels there\n-        lint_callback!(self, check_stmt, s);\n+        let get_item = |id: hir::ItemId| self.context.tcx.hir().item(id.id);\n+        let attrs = &s.kind.attrs(get_item);\n+        // See `EarlyContextAndPass::visit_stmt` for an explanation\n+        // of why we call `walk_stmt` outside of `with_lint_attrs`\n+        self.with_lint_attrs(s.hir_id, attrs, |cx| {\n+            lint_callback!(cx, check_stmt, s);\n+        });\n         hir_visit::walk_stmt(self, s);\n     }\n "}, {"sha": "f36f598ade2def1c0e1d557cbf52853616c22d06", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -562,6 +562,13 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n         })\n     }\n \n+    fn visit_stmt(&mut self, e: &'tcx hir::Stmt<'tcx>) {\n+        // We will call `with_lint_attrs` when we walk\n+        // the `StmtKind`. The outer statement itself doesn't\n+        // define the lint levels.\n+        intravisit::walk_stmt(self, e);\n+    }\n+\n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n         self.with_lint_attrs(e.hir_id, &e.attrs, |builder| {\n             intravisit::walk_expr(builder, e);"}, {"sha": "106fa8c78fa286a158ea1a3d11e845a731ca2258", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -816,7 +816,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::Variant(ref v)) => Some(&v.attrs[..]),\n             Some(Node::Field(ref f)) => Some(&f.attrs[..]),\n             Some(Node::Expr(ref e)) => Some(&*e.attrs),\n-            Some(Node::Stmt(ref s)) => Some(s.kind.attrs()),\n+            Some(Node::Stmt(ref s)) => Some(s.kind.attrs(|id| self.item(id.id))),\n             Some(Node::Arm(ref a)) => Some(&*a.attrs),\n             Some(Node::GenericParam(param)) => Some(&param.attrs[..]),\n             // Unit/tuple structs/variants take the attributes straight from"}, {"sha": "5f6764c789d0061a2abcba89bd19c247d1c94dfe", "filename": "src/test/ui/lint/reasons-forbidden.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -5,6 +5,9 @@\n     //~^ NOTE `forbid` level set here\n     //~| NOTE `forbid` level set here\n     //~| NOTE `forbid` level set here\n+    //~| NOTE `forbid` level set here\n+    //~| NOTE `forbid` level set here\n+    //~| NOTE `forbid` level set here\n     reason = \"our errors & omissions insurance policy doesn't cover unsafe Rust\"\n )]\n \n@@ -17,9 +20,18 @@ fn main() {\n     //~^ ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n     //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n     //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+    //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+    //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+    //~| ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n     //~| NOTE overruled by previous forbid\n     //~| NOTE overruled by previous forbid\n     //~| NOTE overruled by previous forbid\n+    //~| NOTE overruled by previous forbid\n+    //~| NOTE overruled by previous forbid\n+    //~| NOTE overruled by previous forbid\n+    //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n+    //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n+    //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n     //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n     //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n     //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust"}, {"sha": "eed9c8d566ecda7f373333627687302df1db0066", "filename": "src/test/ui/lint/reasons-forbidden.stderr", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -1,5 +1,5 @@\n error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n-  --> $DIR/reasons-forbidden.rs:16:13\n+  --> $DIR/reasons-forbidden.rs:19:13\n    |\n LL |     unsafe_code,\n    |     ----------- `forbid` level set here\n@@ -10,7 +10,7 @@ LL |     #[allow(unsafe_code)]\n    = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n \n error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n-  --> $DIR/reasons-forbidden.rs:16:13\n+  --> $DIR/reasons-forbidden.rs:19:13\n    |\n LL |     unsafe_code,\n    |     ----------- `forbid` level set here\n@@ -21,7 +21,7 @@ LL |     #[allow(unsafe_code)]\n    = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n \n error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n-  --> $DIR/reasons-forbidden.rs:16:13\n+  --> $DIR/reasons-forbidden.rs:19:13\n    |\n LL |     unsafe_code,\n    |     ----------- `forbid` level set here\n@@ -31,6 +31,39 @@ LL |     #[allow(unsafe_code)]\n    |\n    = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n \n-error: aborting due to 3 previous errors\n+error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+  --> $DIR/reasons-forbidden.rs:19:13\n+   |\n+LL |     unsafe_code,\n+   |     ----------- `forbid` level set here\n+...\n+LL |     #[allow(unsafe_code)]\n+   |             ^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n+\n+error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+  --> $DIR/reasons-forbidden.rs:19:13\n+   |\n+LL |     unsafe_code,\n+   |     ----------- `forbid` level set here\n+...\n+LL |     #[allow(unsafe_code)]\n+   |             ^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n+\n+error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+  --> $DIR/reasons-forbidden.rs:19:13\n+   |\n+LL |     unsafe_code,\n+   |     ----------- `forbid` level set here\n+...\n+LL |     #[allow(unsafe_code)]\n+   |             ^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "7250de3a41c0430c71579b057e4e97314e9a583b", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs()) {\n+        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id.id))) {\n             return;\n         }\n         prelude();"}, {"sha": "4fbfb3be32cbff9e821171c9d3d9112a977fdd3b", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=0a26e4ba7e112b9d5ef2bd735b1486b84e66eeae", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs()) {\n+        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id.id))) {\n             return;\n         }\n         match stmt.kind {"}]}