{"sha": "46396e847d56037cbbf31dfccccbc0b45332af74", "node_id": "C_kwDOAAsO6NoAKDQ2Mzk2ZTg0N2Q1NjAzN2NiYmYzMWRmY2NjY2JjMGI0NTMzMmFmNzQ", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-09-20T18:22:14Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-08-13T08:57:22Z"}, "message": "add Vec::push_within_capacity - fallible, does not allocate", "tree": {"sha": "d9bbf925e897b5e395b0039b35430550d6c3bf7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9bbf925e897b5e395b0039b35430550d6c3bf7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46396e847d56037cbbf31dfccccbc0b45332af74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46396e847d56037cbbf31dfccccbc0b45332af74", "html_url": "https://github.com/rust-lang/rust/commit/46396e847d56037cbbf31dfccccbc0b45332af74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46396e847d56037cbbf31dfccccbc0b45332af74/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "html_url": "https://github.com/rust-lang/rust/commit/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "1dccb053f900eef7be8769b2f3f97cf28ccabec0", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/46396e847d56037cbbf31dfccccbc0b45332af74/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46396e847d56037cbbf31dfccccbc0b45332af74/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=46396e847d56037cbbf31dfccccbc0b45332af74", "patch": "@@ -1773,6 +1773,50 @@ impl<T, A: Allocator> Vec<T, A> {\n         }\n     }\n \n+    /// Appends an element if there is sufficient spare capacity, otherwise the element is returned.\n+    ///\n+    /// Unlike [`push`] method will not reallocate when there's insufficient capacity.\n+    /// The caller should use [`reserve`] or [`try_reserve`] to ensure that there is enough capacity.\n+    ///\n+    /// [`push`]: Vec::push\n+    /// [`reserve`]: Vec::reserve\n+    /// [`try_reserve`]: Vec::try_reserve\n+    ///\n+    /// # Examples\n+    ///\n+    /// A manual, panic-free alternative to FromIterator\n+    ///\n+    /// ```\n+    /// #![feature(vec_push_within_capacity, try_reserve)]\n+    ///\n+    /// use std::collections::TryReserveError;\n+    /// fn from_iter<T>(iter: impl Iterator<Item=T>) -> Result<Vec<T>, TryReserveError> {\n+    ///     let mut vec = Vec::new();\n+    ///     for value in iter {\n+    ///         if let Err(value) = vec.push_within_capacity(value) {\n+    ///             vec.try_reserve(1)?;\n+    ///             // this cannot fail, the previous line either returned or added at least 1 free slot\n+    ///             let _ = vec.push_within_capacity(value);\n+    ///         }\n+    ///     }\n+    ///     Ok(vec)\n+    /// }\n+    /// # from_iter(0..100).expect(\"please insert more memory\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"vec_push_within_capacity\", issue = \"none\")]\n+    pub fn push_within_capacity(&mut self, value: T) -> Result<(), T> {\n+        if self.len == self.buf.capacity() {\n+            return Err(value);\n+        }\n+        unsafe {\n+            let end = self.as_mut_ptr().add(self.len);\n+            ptr::write(end, value);\n+            self.len += 1;\n+        }\n+        Ok(())\n+    }\n+\n     /// Removes the last element from a vector and returns it, or [`None`] if it\n     /// is empty.\n     ///"}]}