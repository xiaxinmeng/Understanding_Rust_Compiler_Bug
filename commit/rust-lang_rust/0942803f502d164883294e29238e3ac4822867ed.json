{"sha": "0942803f502d164883294e29238e3ac4822867ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NDI4MDNmNTAyZDE2NDg4MzI5NGUyOTIzOGUzYWM0ODIyODY3ZWQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-03-13T02:19:30Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-03-13T02:19:30Z"}, "message": "Add an \"allocator\" attribute to mark functions as allocators\n\nWhen this attribute is applied to a function, its return value gets the\nnoalias attribute, which is how you tell LLVM that the function returns\na \"new\" pointer that doesn't alias anything accessible to the caller,\ni.e. it acts like a memory allocator.\n\nPlain malloc doesn't need this attribute because LLVM already knows\nabout malloc and adds the attribute itself.", "tree": {"sha": "db8ccf90663de0ca953c24f896abe519148f7754", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db8ccf90663de0ca953c24f896abe519148f7754"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0942803f502d164883294e29238e3ac4822867ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0942803f502d164883294e29238e3ac4822867ed", "html_url": "https://github.com/rust-lang/rust/commit/0942803f502d164883294e29238e3ac4822867ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0942803f502d164883294e29238e3ac4822867ed/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49f7550a25722fbdb779eef80afa85f6d802f7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/49f7550a25722fbdb779eef80afa85f6d802f7e8", "html_url": "https://github.com/rust-lang/rust/commit/49f7550a25722fbdb779eef80afa85f6d802f7e8"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "f9936b7a16a9dd4fac365ddceafb9c967f1e3ae6", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0942803f502d164883294e29238e3ac4822867ed/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0942803f502d164883294e29238e3ac4822867ed/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=0942803f502d164883294e29238e3ac4822867ed", "patch": "@@ -198,6 +198,7 @@ mod imp {\n     extern {}\n \n     extern {\n+        #[allocator]\n         fn je_mallocx(size: size_t, flags: c_int) -> *mut c_void;\n         fn je_rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n         fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;"}, {"sha": "34c0686fe37ae866698cf29db2465410a2729868", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0942803f502d164883294e29238e3ac4822867ed/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0942803f502d164883294e29238e3ac4822867ed/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=0942803f502d164883294e29238e3ac4822867ed", "patch": "@@ -69,6 +69,7 @@\n \n #![feature(no_std)]\n #![no_std]\n+#![feature(allocator)]\n #![feature(lang_items, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(optin_builtin_traits)]"}, {"sha": "83f31956815dd3d106334eec522a67a1fcf9b44b", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0942803f502d164883294e29238e3ac4822867ed/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0942803f502d164883294e29238e3ac4822867ed/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=0942803f502d164883294e29238e3ac4822867ed", "patch": "@@ -33,7 +33,7 @@ use super::ModuleTranslation;\n use back::link::{mangle_exported_name};\n use back::{link, abi};\n use lint;\n-use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n+use llvm::{AttrHelper, BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n use metadata::{csearch, encoder, loader};\n use middle::astencode;\n@@ -456,6 +456,9 @@ pub fn set_llvm_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: Val\n                                                llvm::FunctionIndex as c_uint,\n                                                llvm::ColdAttribute as uint64_t)\n             },\n+            \"allocator\" => {\n+                llvm::NoAliasAttribute.apply_llfn(llvm::ReturnIndex as c_uint, llfn);\n+            }\n             _ => used = false,\n         }\n         if used {\n@@ -903,8 +906,10 @@ pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                     ccx.sess().bug(\"unexpected intrinsic in trans_external_path\")\n                 }\n                 _ => {\n-                    foreign::register_foreign_item_fn(ccx, fn_ty.abi, t,\n-                                                      &name[..])\n+                    let llfn = foreign::register_foreign_item_fn(ccx, fn_ty.abi, t, &name[..]);\n+                    let attrs = csearch::get_item_attrs(&ccx.sess().cstore, did);\n+                    set_llvm_fn_attrs(ccx, &attrs, llfn);\n+                    llfn\n                 }\n             }\n         }\n@@ -2848,7 +2853,9 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                     let abi = ccx.tcx().map.get_foreign_abi(id);\n                     let ty = ty::node_id_to_type(ccx.tcx(), ni.id);\n                     let name = foreign::link_name(&*ni);\n-                    foreign::register_foreign_item_fn(ccx, abi, ty, &name)\n+                    let llfn = foreign::register_foreign_item_fn(ccx, abi, ty, &name);\n+                    set_llvm_fn_attrs(ccx, &ni.attrs, llfn);\n+                    llfn\n                 }\n                 ast::ForeignItemStatic(..) => {\n                     foreign::register_static(ccx, &*ni)"}, {"sha": "dfc7e7f604f3d8b4f69a9c9f4cefa657e066cf68", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0942803f502d164883294e29238e3ac4822867ed/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0942803f502d164883294e29238e3ac4822867ed/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=0942803f502d164883294e29238e3ac4822867ed", "patch": "@@ -470,8 +470,8 @@ pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &ast::ForeignMod) {\n                                                      \"foreign fn's sty isn't a bare_fn_ty?\")\n                     }\n \n-                    register_foreign_item_fn(ccx, abi, ty,\n-                                             &lname);\n+                    let llfn = register_foreign_item_fn(ccx, abi, ty, &lname);\n+                    base::set_llvm_fn_attrs(ccx, &foreign_item.attrs, llfn);\n                     // Unlike for other items, we shouldn't call\n                     // `base::update_linkage` here.  Foreign items have\n                     // special linkage requirements, which are handled"}, {"sha": "0a9980c892527a9b88bec0fecbb6f1bcf2282f56", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0942803f502d164883294e29238e3ac4822867ed/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0942803f502d164883294e29238e3ac4822867ed/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0942803f502d164883294e29238e3ac4822867ed", "patch": "@@ -83,6 +83,7 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     (\"box_syntax\", \"1.0.0\", Active),\n     (\"on_unimplemented\", \"1.0.0\", Active),\n     (\"simd_ffi\", \"1.0.0\", Active),\n+    (\"allocator\", \"1.0.0\", Active),\n \n     (\"if_let\", \"1.0.0\", Accepted),\n     (\"while_let\", \"1.0.0\", Accepted),\n@@ -230,6 +231,8 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"rustc_on_unimplemented\", Gated(\"on_unimplemented\",\n                                      \"the `#[rustc_on_unimplemented]` attribute \\\n                                       is an experimental feature\")),\n+    (\"allocator\", Gated(\"allocator\",\n+                        \"the `#[allocator]` attribute is an experimental feature\")),\n     (\"rustc_variance\", Gated(\"rustc_attrs\",\n                              \"the `#[rustc_variance]` attribute \\\n                               is an experimental feature\")),"}]}