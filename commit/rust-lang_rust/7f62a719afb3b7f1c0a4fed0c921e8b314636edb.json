{"sha": "7f62a719afb3b7f1c0a4fed0c921e8b314636edb", "node_id": "C_kwDOAAsO6NoAKDdmNjJhNzE5YWZiM2I3ZjFjMGE0ZmVkMGM5MjFlOGIzMTQ2MzZlZGI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-06T09:19:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-06T09:19:13Z"}, "message": "Rollup merge of #98968 - RalfJung:scalar-sanity, r=oli-obk\n\nassert Scalar sanity\n\nWith https://github.com/rust-lang/rust/pull/96814 having landed, finally our `Scalar` layouts have the invariants they deserve. :)", "tree": {"sha": "200c65f59cb2b65a0029283110e1dd084e013bbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/200c65f59cb2b65a0029283110e1dd084e013bbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f62a719afb3b7f1c0a4fed0c921e8b314636edb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixVOSCRBK7hj4Ov3rIwAAvk4IAGnDAq2YBlCow0rjTuDryaYn\npVzg29zEJc+NRTFl/tdrGf+U1CnW0F1zmQqYWCXwp/xl6PfCHROT9s0oCojvhEjN\ndbyBu0MF/khmxuI5D9Wum5Gr8qNki0/MVTt4yCsFhLlR5Nxf3/CN7tY9icSrmhG8\nmXwUP4Kcpx4e8pp4qPc3A+ossnZDQhzOq46k2TONCxQZAFFhRLYeJ4Vwzx9xZ+m+\nDDpSpMYnH9u4Djs3oHyeYDPuIj7SQurszGeB6a37tqVMKNTbSybDWkwYyfQ7raB8\nDRmZCYiI9+8CCQQLd35ztzf3U+kwDnb4TS/ontRzewUc8w6LIebqiBXil+J8J3I=\n=VSHw\n-----END PGP SIGNATURE-----\n", "payload": "tree 200c65f59cb2b65a0029283110e1dd084e013bbb\nparent 41e30e3371bfc15dcdcb69dc7568e7573c80ae68\nparent 2a1a718baabcc1fac08ed9a6ac3e29d5b156c532\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657099153 +0530\ncommitter GitHub <noreply@github.com> 1657099153 +0530\n\nRollup merge of #98968 - RalfJung:scalar-sanity, r=oli-obk\n\nassert Scalar sanity\n\nWith https://github.com/rust-lang/rust/pull/96814 having landed, finally our `Scalar` layouts have the invariants they deserve. :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f62a719afb3b7f1c0a4fed0c921e8b314636edb", "html_url": "https://github.com/rust-lang/rust/commit/7f62a719afb3b7f1c0a4fed0c921e8b314636edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f62a719afb3b7f1c0a4fed0c921e8b314636edb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41e30e3371bfc15dcdcb69dc7568e7573c80ae68", "url": "https://api.github.com/repos/rust-lang/rust/commits/41e30e3371bfc15dcdcb69dc7568e7573c80ae68", "html_url": "https://github.com/rust-lang/rust/commit/41e30e3371bfc15dcdcb69dc7568e7573c80ae68"}, {"sha": "2a1a718baabcc1fac08ed9a6ac3e29d5b156c532", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1a718baabcc1fac08ed9a6ac3e29d5b156c532", "html_url": "https://github.com/rust-lang/rust/commit/2a1a718baabcc1fac08ed9a6ac3e29d5b156c532"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "145d95a40ea8a5100c9caa76e807cba06ace3a79", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f62a719afb3b7f1c0a4fed0c921e8b314636edb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f62a719afb3b7f1c0a4fed0c921e8b314636edb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=7f62a719afb3b7f1c0a4fed0c921e8b314636edb", "patch": "@@ -306,9 +306,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             s.is_ptr() || (number_may_have_provenance && size == self.pointer_size())\n         };\n         if let Some(s) = scalar_layout {\n-            //FIXME(#96185): let size = s.size(self);\n-            //FIXME(#96185): assert_eq!(size, mplace.layout.size, \"abi::Scalar size does not match layout size\");\n-            let size = mplace.layout.size; //FIXME(#96185): remove this line\n+            let size = s.size(self);\n+            assert_eq!(size, mplace.layout.size, \"abi::Scalar size does not match layout size\");\n             let scalar =\n                 alloc.read_scalar(alloc_range(Size::ZERO, size), read_provenance(s, size))?;\n             return Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }));"}, {"sha": "f4dc18af23c9979f477f4992276af7267d6ca1d9", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f62a719afb3b7f1c0a4fed0c921e8b314636edb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f62a719afb3b7f1c0a4fed0c921e8b314636edb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=7f62a719afb3b7f1c0a4fed0c921e8b314636edb", "patch": "@@ -793,7 +793,7 @@ where\n                     )\n                 };\n                 let size = s.size(&tcx);\n-                //FIXME(#96185): assert_eq!(dest.layout.size, size, \"abi::Scalar size does not match layout size\");\n+                assert_eq!(size, dest.layout.size, \"abi::Scalar size does not match layout size\");\n                 alloc.write_scalar(alloc_range(Size::ZERO, size), scalar)\n             }\n             Immediate::ScalarPair(a_val, b_val) => {"}, {"sha": "f87b6e4212d29d50012cdc9112ae92734687b9f7", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f62a719afb3b7f1c0a4fed0c921e8b314636edb/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f62a719afb3b7f1c0a4fed0c921e8b314636edb/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=7f62a719afb3b7f1c0a4fed0c921e8b314636edb", "patch": "@@ -235,9 +235,8 @@ fn sanity_check_layout<'tcx>(\n     if cfg!(debug_assertions) {\n         fn check_layout_abi<'tcx>(tcx: TyCtxt<'tcx>, layout: Layout<'tcx>) {\n             match layout.abi() {\n-                Abi::Scalar(_scalar) => {\n+                Abi::Scalar(scalar) => {\n                     // No padding in scalars.\n-                    /* FIXME(#96185):\n                     assert_eq!(\n                         layout.align().abi,\n                         scalar.align(&tcx).abi,\n@@ -247,7 +246,7 @@ fn sanity_check_layout<'tcx>(\n                         layout.size(),\n                         scalar.size(&tcx),\n                         \"size mismatch between ABI and layout in {layout:#?}\"\n-                    );*/\n+                    );\n                 }\n                 Abi::Vector { count, element } => {\n                     // No padding in vectors. Alignment can be strengthened, though."}, {"sha": "3996849514412bbcadde4abd5c25e04dfeb73029", "filename": "src/test/ui/consts/const-enum-cast.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f62a719afb3b7f1c0a4fed0c921e8b314636edb/src%2Ftest%2Fui%2Fconsts%2Fconst-enum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f62a719afb3b7f1c0a4fed0c921e8b314636edb/src%2Ftest%2Fui%2Fconsts%2Fconst-enum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-enum-cast.rs?ref=7f62a719afb3b7f1c0a4fed0c921e8b314636edb", "patch": "@@ -4,6 +4,19 @@\n enum A { A1, A2 }\n enum B { B1=4, B2=2 }\n \n+#[allow(dead_code)]\n+#[repr(align(8))]\n+enum Aligned {\n+    Zero = 0,\n+    One = 1,\n+}\n+\n+// regression test for https://github.com/rust-lang/rust/issues/96185\n+const X: u8 = {\n+    let aligned = Aligned::Zero;\n+    aligned as u8\n+};\n+\n pub fn main () {\n     static c1: isize = A::A2 as isize;\n     static c2: isize = B::B2 as isize;\n@@ -23,4 +36,6 @@ pub fn main () {\n     assert_eq!(c2_2, 4);\n     assert_eq!(a1_2, 0);\n     assert_eq!(a2_2, 4);\n+\n+    assert_eq!(X, 0);\n }"}]}