{"sha": "507b626b36131f226423ca9219d4ac611f398c09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwN2I2MjZiMzYxMzFmMjI2NDIzY2E5MjE5ZDRhYzYxMWYzOThjMDk=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-08-20T16:11:15Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-08-23T16:15:12Z"}, "message": "Add `zero_prefixed_literal` lint", "tree": {"sha": "203633e5526338f76e888588fc997c64edf8ea8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/203633e5526338f76e888588fc997c64edf8ea8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/507b626b36131f226423ca9219d4ac611f398c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/507b626b36131f226423ca9219d4ac611f398c09", "html_url": "https://github.com/rust-lang/rust/commit/507b626b36131f226423ca9219d4ac611f398c09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/507b626b36131f226423ca9219d4ac611f398c09/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "html_url": "https://github.com/rust-lang/rust/commit/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "9e198b57073f672938b32ceab8ece5a601b29a36", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/507b626b36131f226423ca9219d4ac611f398c09/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/507b626b36131f226423ca9219d4ac611f398c09/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=507b626b36131f226423ca9219d4ac611f398c09", "patch": "@@ -1,6 +1,9 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.86 \u2014 ?\n+* New lint: [`zero_prefixed_literal`]\n+\n ## 0.0.85 \u2014 2016-08-19\n * Fix ICE with [`useless_attribute`]\n * [`useless_attribute`] ignores [`unused_imports`] on `use` statements\n@@ -329,5 +332,6 @@ All notable changes to this project will be documented in this file.\n [`wrong_self_convention`]: https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention\n [`wrong_transmute`]: https://github.com/Manishearth/rust-clippy/wiki#wrong_transmute\n [`zero_divided_by_zero`]: https://github.com/Manishearth/rust-clippy/wiki#zero_divided_by_zero\n+[`zero_prefixed_literal`]: https://github.com/Manishearth/rust-clippy/wiki#zero_prefixed_literal\n [`zero_width_space`]: https://github.com/Manishearth/rust-clippy/wiki#zero_width_space\n <!-- end autogenerated links to wiki -->"}, {"sha": "b294c75a756f1e392732b0daf1df418aa2172757", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/507b626b36131f226423ca9219d4ac611f398c09/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/507b626b36131f226423ca9219d4ac611f398c09/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=507b626b36131f226423ca9219d4ac611f398c09", "patch": "@@ -187,6 +187,7 @@ name\n [wrong_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention)                       | warn    | defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n [wrong_transmute](https://github.com/Manishearth/rust-clippy/wiki#wrong_transmute)                                   | warn    | transmutes that are confusing at best, undefined behaviour at worst and always useless\n [zero_divided_by_zero](https://github.com/Manishearth/rust-clippy/wiki#zero_divided_by_zero)                         | warn    | usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\n+[zero_prefixed_literal](https://github.com/Manishearth/rust-clippy/wiki#zero_prefixed_literal)                       | warn    | integer literals starting with `0`\n [zero_width_space](https://github.com/Manishearth/rust-clippy/wiki#zero_width_space)                                 | deny    | using a zero-width space in a string literal, which is confusing\n \n More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/issues) if you have ideas!"}, {"sha": "df0b0d9efffb49fe126d6aa9caecde02a5bedf08", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/507b626b36131f226423ca9219d4ac611f398c09/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507b626b36131f226423ca9219d4ac611f398c09/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=507b626b36131f226423ca9219d4ac611f398c09", "patch": "@@ -387,6 +387,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         misc_early::MIXED_CASE_HEX_LITERALS,\n         misc_early::REDUNDANT_CLOSURE_CALL,\n         misc_early::UNNEEDED_FIELD_PATTERN,\n+        misc_early::ZERO_PREFIXED_LITERAL,\n         module_inception::MODULE_INCEPTION,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,"}, {"sha": "47b6854cfa5e5cd1f8033137001c872e913e845f", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/507b626b36131f226423ca9219d4ac611f398c09/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507b626b36131f226423ca9219d4ac611f398c09/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=507b626b36131f226423ca9219d4ac611f398c09", "patch": "@@ -105,14 +105,51 @@ declare_lint! {\n     \"literals whose suffix is not separated by an underscore\"\n }\n \n+/// **What it does:** Warns if a integral constant literal starts with `0`.\n+///\n+/// **Why is this bad?** In some languages (including the infamous C language and most of its\n+/// familly), this marks an octal constant. In Rust however, this is a decimal constant. This could\n+/// be confusing for both the writer and a reader of the constant.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+///\n+/// In Rust:\n+/// ```rust\n+/// fn main() {\n+///     let a = 0123;\n+///     println!(\"{}\", a);\n+/// }\n+/// ```\n+///\n+/// prints `123`, while in C:\n+///\n+/// ```c\n+/// #include <stdio.h>\n+///\n+/// int main() {\n+///     int a = 0123;\n+///     printf(\"%d\\n\", a);\n+/// }\n+/// ```\n+///\n+/// prints `83` (as `89 == 0o123` while `123 == 0o173`).\n+declare_lint! {\n+    pub ZERO_PREFIXED_LITERAL,\n+    Warn,\n+    \"integer literals starting with `0`\"\n+}\n+\n \n #[derive(Copy, Clone)]\n pub struct MiscEarly;\n \n impl LintPass for MiscEarly {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNNEEDED_FIELD_PATTERN, DUPLICATE_UNDERSCORE_ARGUMENT, REDUNDANT_CLOSURE_CALL,\n-                    DOUBLE_NEG, MIXED_CASE_HEX_LITERALS, UNSEPARATED_LITERAL_SUFFIX)\n+                    DOUBLE_NEG, MIXED_CASE_HEX_LITERALS, UNSEPARATED_LITERAL_SUFFIX,\n+                    ZERO_PREFIXED_LITERAL)\n     }\n }\n \n@@ -220,7 +257,7 @@ impl EarlyLintPass for MiscEarly {\n             }\n             ExprKind::Lit(ref lit) => {\n                 if_let_chain! {[\n-                    let LitKind::Int(..) = lit.node,\n+                    let LitKind::Int(value, ..) = lit.node,\n                     let Some(src) = snippet_opt(cx, lit.span),\n                     let Some(firstch) = src.chars().next(),\n                     char::to_digit(firstch, 10).is_some()\n@@ -250,6 +287,15 @@ impl EarlyLintPass for MiscEarly {\n                             span_lint(cx, MIXED_CASE_HEX_LITERALS, lit.span,\n                                       \"inconsistent casing in hexadecimal literal\");\n                         }\n+                    } else if value != 0 && src.starts_with('0') {\n+                        span_lint_and_then(cx,\n+                                           ZERO_PREFIXED_LITERAL,\n+                                           lit.span,\n+                                           \"this is a decimal constant\",\n+                                           |db| {\n+                            db.span_suggestion(lit.span, \"if you mean to use a decimal constant, remove the `0` to remove confusion:\", src[1..].to_string());\n+                            db.span_suggestion(lit.span, \"if you mean to use an octal constant, use `0o`:\", format!(\"0o{}\", &src[1..]));\n+                        });\n                     }\n                 }}\n                 if_let_chain! {["}, {"sha": "91a63646998c84a009c1c66e882d92cdd82b509c", "filename": "tests/compile-fail/literals.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/507b626b36131f226423ca9219d4ac611f398c09/tests%2Fcompile-fail%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507b626b36131f226423ca9219d4ac611f398c09/tests%2Fcompile-fail%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fliterals.rs?ref=507b626b36131f226423ca9219d4ac611f398c09", "patch": "@@ -2,6 +2,7 @@\n #![plugin(clippy)]\n #![deny(mixed_case_hex_literals)]\n #![deny(unseparated_literal_suffix)]\n+#![deny(zero_prefixed_literal)]\n #![allow(dead_code)]\n \n fn main() {\n@@ -22,4 +23,13 @@ fn main() {\n     let fail5 = 1234isize;    //~ERROR integer type suffix should be separated\n     let fail6 = 1234usize;    //~ERROR integer type suffix should be separated\n     let fail7 = 1.5f32;       //~ERROR float type suffix should be separated\n+\n+    let ok9 = 0;\n+    let ok10 = 0_i64;\n+    let fail8 = 0123;\n+    //~^ERROR decimal constant\n+    //~|HELP remove the `0`\n+    //~|SUGGESTION = 123;\n+    //~|HELP use `0o`\n+    //~|SUGGESTION = 0o123;\n }"}]}