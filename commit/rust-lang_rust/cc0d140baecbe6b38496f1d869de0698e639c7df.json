{"sha": "cc0d140baecbe6b38496f1d869de0698e639c7df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMGQxNDBiYWVjYmU2YjM4NDk2ZjFkODY5ZGUwNjk4ZTYzOWM3ZGY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-11T13:55:17Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-11T14:04:17Z"}, "message": "Switch rustdoc from `clean::Stability` to `rustc_attr::Stability`\n\nThis gives greater type safety and is less work to maintain on the\nrustdoc end.", "tree": {"sha": "dc5795460f08cafc055445462f70ca3e582f266d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc5795460f08cafc055445462f70ca3e582f266d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc0d140baecbe6b38496f1d869de0698e639c7df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0d140baecbe6b38496f1d869de0698e639c7df", "html_url": "https://github.com/rust-lang/rust/commit/cc0d140baecbe6b38496f1d869de0698e639c7df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc0d140baecbe6b38496f1d869de0698e639c7df/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38f001db5e16f1e0db47c5aed80394e9df5430a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38f001db5e16f1e0db47c5aed80394e9df5430a", "html_url": "https://github.com/rust-lang/rust/commit/c38f001db5e16f1e0db47c5aed80394e9df5430a"}], "stats": {"total": 118, "additions": 59, "deletions": 59}, "files": [{"sha": "5268d3f0ab043356c4165c85e33e5211c8ce607f", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc0d140baecbe6b38496f1d869de0698e639c7df/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0d140baecbe6b38496f1d869de0698e639c7df/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=cc0d140baecbe6b38496f1d869de0698e639c7df", "patch": "@@ -9,6 +9,7 @@ use rustc_session::parse::{feature_err, ParseSess};\n use rustc_session::Session;\n use rustc_span::hygiene::Transparency;\n use rustc_span::{symbol::sym, symbol::Symbol, Span};\n+use std::cmp;\n use std::num::NonZeroU32;\n use version_check::Version;\n \n@@ -154,14 +155,27 @@ pub struct ConstStability {\n }\n \n /// The available stability levels.\n-#[derive(Encodable, Decodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n+#[derive(Encodable, Decodable, PartialEq, Copy, Clone, Debug, Eq, Hash)]\n #[derive(HashStable_Generic)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n     Unstable { reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n     Stable { since: Symbol },\n }\n \n+impl cmp::PartialOrd for StabilityLevel {\n+    // This only take into account stability, not any fields.\n+    // Therefore it is only `PartialOrd` and not `Ord`.\n+    fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {\n+        match (self, other) {\n+            (Self::Unstable { .. }, Self::Unstable { .. }) => Some(cmp::Ordering::Equal),\n+            (Self::Stable { .. }, Self::Stable { .. }) => Some(cmp::Ordering::Equal),\n+            (Self::Unstable { .. }, Self::Stable { .. }) => Some(cmp::Ordering::Less),\n+            (Self::Stable { .. }, Self::Unstable { .. }) => Some(cmp::Ordering::Greater),\n+        }\n+    }\n+}\n+\n impl StabilityLevel {\n     pub fn is_unstable(&self) -> bool {\n         matches!(self, StabilityLevel::Unstable { .. })"}, {"sha": "bb1ee7f2615143447d4961da3e64f81cc3bdaf92", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cc0d140baecbe6b38496f1d869de0698e639c7df/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0d140baecbe6b38496f1d869de0698e639c7df/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cc0d140baecbe6b38496f1d869de0698e639c7df", "patch": "@@ -19,7 +19,6 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::bug;\n use rustc_middle::middle::resolve_lifetime as rl;\n-use rustc_middle::middle::stability;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n@@ -274,7 +273,7 @@ impl Clean<Item> for doctree::Module<'_> {\n             attrs,\n             source: span.clean(cx),\n             visibility: self.vis.clean(cx),\n-            stability: cx.stability(self.id).clean(cx),\n+            stability: cx.stability(self.id),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             inner: ModuleItem(Module { is_crate: self.is_crate, items }),\n@@ -2397,24 +2396,9 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n     }\n }\n \n-impl Clean<Stability> for attr::Stability {\n-    fn clean(&self, _: &DocContext<'_>) -> Stability {\n-        Stability {\n-            level: stability::StabilityLevel::from_attr_level(&self.level),\n-            feature: self.feature.to_string(),\n-            since: match self.level {\n-                attr::Stable { ref since } => since.to_string(),\n-                _ => String::new(),\n-            },\n-            unstable_reason: match self.level {\n-                attr::Unstable { reason: Some(ref reason), .. } => Some(reason.to_string()),\n-                _ => None,\n-            },\n-            issue: match self.level {\n-                attr::Unstable { issue, .. } => issue,\n-                _ => None,\n-            },\n-        }\n+impl Clean<attr::Stability> for attr::Stability {\n+    fn clean(&self, _: &DocContext<'_>) -> attr::Stability {\n+        self.clone()\n     }\n }\n "}, {"sha": "f347ba10e181a1c99102da826488770247f13eb0", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cc0d140baecbe6b38496f1d869de0698e639c7df/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0d140baecbe6b38496f1d869de0698e639c7df/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=cc0d140baecbe6b38496f1d869de0698e639c7df", "patch": "@@ -4,7 +4,6 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n use std::lazy::SyncOnceCell as OnceCell;\n-use std::num::NonZeroU32;\n use std::rc::Rc;\n use std::sync::Arc;\n use std::{slice, vec};\n@@ -13,18 +12,18 @@ use rustc_ast::attr;\n use rustc_ast::util::comments::beautify_doc_string;\n use rustc_ast::{self as ast, AttrStyle};\n use rustc_ast::{FloatTy, IntTy, UintTy};\n+use rustc_attr::{Stability, StabilityLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Mutability;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::middle::stability;\n use rustc_middle::ty::{AssocKind, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DUMMY_SP;\n-use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol, SymbolStr};\n use rustc_span::{self, FileName};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n@@ -197,7 +196,7 @@ impl Item {\n         self.stability.as_ref().and_then(|ref s| {\n             let mut classes = Vec::with_capacity(2);\n \n-            if s.level == stability::Unstable {\n+            if s.level.is_unstable() {\n                 classes.push(\"unstable\");\n             }\n \n@@ -210,8 +209,11 @@ impl Item {\n         })\n     }\n \n-    pub fn stable_since(&self) -> Option<&str> {\n-        self.stability.as_ref().map(|s| &s.since[..])\n+    pub fn stable_since(&self) -> Option<SymbolStr> {\n+        match self.stability?.level {\n+            StabilityLevel::Stable { since, .. } => Some(since.as_str()),\n+            StabilityLevel::Unstable { .. } => None,\n+        }\n     }\n \n     pub fn is_non_exhaustive(&self) -> bool {\n@@ -1719,15 +1721,6 @@ pub struct ProcMacro {\n     pub helpers: Vec<String>,\n }\n \n-#[derive(Clone, Debug)]\n-pub struct Stability {\n-    pub level: stability::StabilityLevel,\n-    pub feature: String,\n-    pub since: String,\n-    pub unstable_reason: Option<String>,\n-    pub issue: Option<NonZeroU32>,\n-}\n-\n #[derive(Clone, Debug)]\n pub struct Deprecation {\n     pub since: Option<String>,"}, {"sha": "25ba6e49bd563d69a8b3620b7a56d8c04dfb7856", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc0d140baecbe6b38496f1d869de0698e639c7df/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0d140baecbe6b38496f1d869de0698e639c7df/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=cc0d140baecbe6b38496f1d869de0698e639c7df", "patch": "@@ -3,12 +3,13 @@ use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, Deprecation, ExternalCrate, FnDecl, FnRetTy, Generic, GenericArg,\n     GenericArgs, GenericBound, Generics, GetDefId, ImportSource, Item, ItemEnum, Lifetime,\n-    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Span, Stability, Type,\n-    TypeBinding, TypeKind, Visibility, WherePredicate,\n+    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Span, Type, TypeBinding,\n+    TypeKind, Visibility, WherePredicate,\n };\n use crate::core::DocContext;\n \n use itertools::Itertools;\n+use rustc_attr::Stability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};"}, {"sha": "36db5557b521bf1327427889b1539401ac011aec", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cc0d140baecbe6b38496f1d869de0698e639c7df/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0d140baecbe6b38496f1d869de0698e639c7df/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=cc0d140baecbe6b38496f1d869de0698e639c7df", "patch": "@@ -49,6 +49,7 @@ use std::sync::Arc;\n \n use itertools::Itertools;\n use rustc_ast_pretty::pprust;\n+use rustc_attr::StabilityLevel;\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::UnstableFeatures;\n@@ -1984,8 +1985,10 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n         let s1 = i1.stability.as_ref().map(|s| s.level);\n         let s2 = i2.stability.as_ref().map(|s| s.level);\n         match (s1, s2) {\n-            (Some(stability::Unstable), Some(stability::Stable)) => return Ordering::Greater,\n-            (Some(stability::Stable), Some(stability::Unstable)) => return Ordering::Less,\n+            (Some(a), Some(b)) => match a.partial_cmp(&b) {\n+                Some(Ordering::Equal) | None => {}\n+                Some(other) => return other,\n+            },\n             _ => {}\n         }\n         let lhs = i1.name.as_ref().map_or(\"\", |s| &**s);\n@@ -2150,10 +2153,7 @@ fn stability_tags(item: &clean::Item) -> String {\n \n     // The \"rustc_private\" crates are permanently unstable so it makes no sense\n     // to render \"unstable\" everywhere.\n-    if item\n-        .stability\n-        .as_ref()\n-        .map(|s| s.level == stability::Unstable && s.feature != \"rustc_private\")\n+    if item.stability.as_ref().map(|s| s.level.is_unstable() && s.feature != sym::rustc_private)\n         == Some(true)\n     {\n         tags += &tag_html(\"unstable\", \"\", \"Experimental\");\n@@ -2204,16 +2204,17 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n \n     // Render unstable items. But don't render \"rustc_private\" crates (internal compiler crates).\n     // Those crates are permanently unstable so it makes no sense to render \"unstable\" everywhere.\n-    if let Some(stab) = item\n+    if let Some((StabilityLevel::Unstable { reason, issue, .. }, feature)) = item\n         .stability\n         .as_ref()\n-        .filter(|stab| stab.level == stability::Unstable && stab.feature != \"rustc_private\")\n+        .filter(|stab| stab.feature != sym::rustc_private)\n+        .map(|stab| (stab.level, stab.feature))\n     {\n         let mut message =\n             \"<span class='emoji'>\ud83d\udd2c</span> This is a nightly-only experimental API.\".to_owned();\n \n-        let mut feature = format!(\"<code>{}</code>\", Escape(&stab.feature));\n-        if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, stab.issue) {\n+        let mut feature = format!(\"<code>{}</code>\", Escape(&feature.as_str()));\n+        if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, issue) {\n             feature.push_str(&format!(\n                 \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\",\n                 url = url,\n@@ -2223,13 +2224,13 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n \n         message.push_str(&format!(\" ({})\", feature));\n \n-        if let Some(unstable_reason) = &stab.unstable_reason {\n+        if let Some(unstable_reason) = reason {\n             let mut ids = cx.id_map.borrow_mut();\n             message = format!(\n                 \"<details><summary>{}</summary>{}</details>\",\n                 message,\n                 MarkdownHtml(\n-                    &unstable_reason,\n+                    &unstable_reason.as_str(),\n                     &mut ids,\n                     error_codes,\n                     cx.shared.edition,\n@@ -2355,7 +2356,7 @@ fn render_implementor(\n         implementor,\n         AssocItemLink::Anchor(None),\n         RenderMode::Normal,\n-        implementor.impl_item.stable_since(),\n+        implementor.impl_item.stable_since().as_deref(),\n         false,\n         Some(use_absolute),\n         false,\n@@ -2384,7 +2385,7 @@ fn render_impls(\n                 i,\n                 assoc_link,\n                 RenderMode::Normal,\n-                containing_item.stable_since(),\n+                containing_item.stable_since().as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -2629,7 +2630,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                     &implementor,\n                     assoc_link,\n                     RenderMode::Normal,\n-                    implementor.impl_item.stable_since(),\n+                    implementor.impl_item.stable_since().as_deref(),\n                     false,\n                     None,\n                     true,\n@@ -2780,7 +2781,11 @@ fn render_stability_since_raw(w: &mut Buffer, ver: Option<&str>, containing_ver:\n }\n \n fn render_stability_since(w: &mut Buffer, item: &clean::Item, containing_item: &clean::Item) {\n-    render_stability_since_raw(w, item.stable_since(), containing_item.stable_since())\n+    render_stability_since_raw(\n+        w,\n+        item.stable_since().as_deref(),\n+        containing_item.stable_since().as_deref(),\n+    )\n }\n \n fn render_assoc_item(\n@@ -3324,7 +3329,7 @@ fn render_assoc_items(\n                 i,\n                 AssocItemLink::Anchor(None),\n                 render_mode,\n-                containing_item.stable_since(),\n+                containing_item.stable_since().as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -3564,8 +3569,11 @@ fn render_impl(\n             );\n         }\n         write!(w, \"<a href='#{}' class='anchor'></a>\", id);\n-        let since = i.impl_item.stability.as_ref().map(|s| &s.since[..]);\n-        render_stability_since_raw(w, since, outer_version);\n+        let since = i.impl_item.stability.as_ref().and_then(|s| match s.level {\n+            StabilityLevel::Stable { since } => Some(since.as_str()),\n+            StabilityLevel::Unstable { .. } => None,\n+        });\n+        render_stability_since_raw(w, since.as_deref(), outer_version);\n         if let Some(l) = cx.src_href(&i.impl_item, cache) {\n             write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\", l, \"goto source code\");\n         }\n@@ -3626,7 +3634,7 @@ fn render_impl(\n                     write!(w, \"<code>\");\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n-                    render_stability_since_raw(w, item.stable_since(), outer_version);\n+                    render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n                     if let Some(l) = cx.src_href(item, cache) {\n                         write!(\n                             w,\n@@ -3648,7 +3656,7 @@ fn render_impl(\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code>\");\n-                render_stability_since_raw(w, item.stable_since(), outer_version);\n+                render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n                 if let Some(l) = cx.src_href(item, cache) {\n                     write!(\n                         w,"}]}