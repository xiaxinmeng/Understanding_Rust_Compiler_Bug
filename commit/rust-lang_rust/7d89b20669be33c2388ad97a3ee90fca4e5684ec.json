{"sha": "7d89b20669be33c2388ad97a3ee90fca4e5684ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkODliMjA2NjliZTMzYzIzODhhZDk3YTNlZTkwZmNhNGU1Njg0ZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-30T22:14:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-30T22:14:56Z"}, "message": "Auto merge of #42995 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\n- Successful merges: #42669, #42911, #42925, #42957, #42985, #42987\n- Failed merges: #42936", "tree": {"sha": "50bb240425e428a1e8ea354e2997d582a03f66dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50bb240425e428a1e8ea354e2997d582a03f66dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d89b20669be33c2388ad97a3ee90fca4e5684ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d89b20669be33c2388ad97a3ee90fca4e5684ec", "html_url": "https://github.com/rust-lang/rust/commit/7d89b20669be33c2388ad97a3ee90fca4e5684ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d89b20669be33c2388ad97a3ee90fca4e5684ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37849a002ed91ac2b80aeb2172364b4e19250e05", "url": "https://api.github.com/repos/rust-lang/rust/commits/37849a002ed91ac2b80aeb2172364b4e19250e05", "html_url": "https://github.com/rust-lang/rust/commit/37849a002ed91ac2b80aeb2172364b4e19250e05"}, {"sha": "bda06de5dc96c6c4af825286da1df6849a73254e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bda06de5dc96c6c4af825286da1df6849a73254e", "html_url": "https://github.com/rust-lang/rust/commit/bda06de5dc96c6c4af825286da1df6849a73254e"}], "stats": {"total": 812, "additions": 697, "deletions": 115}, "files": [{"sha": "7b486212bc4f69b282f72e22d59541a16d4f6130", "filename": "src/Cargo.lock", "status": "modified", "additions": 20, "deletions": 40, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -157,7 +157,7 @@ dependencies = [\n [[package]]\n name = \"cargo\"\n version = \"0.21.0\"\n-source = \"git+https://github.com/rust-lang/cargo#abf01e1eddb3145c83f71b469ea7bee37141e5e1\"\n+source = \"git+https://github.com/rust-lang/cargo#854bc167bbf74053f821f65cb86d506033f3d3a7\"\n replace = \"cargo 0.21.0\"\n \n [[package]]\n@@ -319,7 +319,7 @@ name = \"curl\"\n version = \"0.4.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"curl-sys 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -329,7 +329,7 @@ dependencies = [\n \n [[package]]\n name = \"curl-sys\"\n-version = \"0.3.13\"\n+version = \"0.3.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -576,7 +576,7 @@ dependencies = [\n \n [[package]]\n name = \"languageserver-types\"\n-version = \"0.10.0\"\n+version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -610,7 +610,7 @@ version = \"0.6.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"curl-sys 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -994,7 +994,7 @@ dependencies = [\n  \"aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1023,11 +1023,11 @@ dependencies = [\n  \"cargo 0.21.0 (git+https://github.com/rust-lang/cargo)\",\n  \"derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"languageserver-types 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"languageserver-types 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"racer 2.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-analysis 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-data 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-analysis 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-vfs 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-nightly 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1041,21 +1041,12 @@ dependencies = [\n \n [[package]]\n name = \"rls-analysis\"\n-version = \"0.3.2\"\n+version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-data 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"rls-data\"\n-version = \"0.4.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n+ \"rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1813,15 +1804,6 @@ dependencies = [\n  \"libc 0.2.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"thread-id\"\n-version = \"3.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"thread_local\"\n version = \"0.2.7\"\n@@ -1832,11 +1814,11 @@ dependencies = [\n \n [[package]]\n name = \"thread_local\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"thread-id 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1915,7 +1897,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"unreachable\"\n-version = \"0.1.1\"\n+version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2050,7 +2032,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8ebbb35d3dc9cd09497168f33de1acb79b265d350ab0ac34133b98f8509af1f\"\n \"checksum crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c5ea215664ca264da8a9d9c3be80d2eaf30923c259d03e870388eb927508f97\"\n \"checksum curl 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6689276ab61f97c660669a5ecc117c36875dfc1ba301c986b16c653415bdf9d7\"\n-\"checksum curl-sys 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cbd8b8d593de3bbf49252b92f398ef47f0c6c1ebdfd0f9282b9b9348aad8d71c\"\n+\"checksum curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d5481162dc4f424d088581db2f979fa7d4c238fe9794595de61d8d7522e277de\"\n \"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\"\n \"checksum derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41be6ca3b99e0c0483fb2389685448f650459c3ecbe4e18d7705d8010ec4ab8e\"\n \"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n@@ -2076,7 +2058,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum jobserver 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e28adc987f6d0521ef66ad60b055968107b164b3bb3cf3dc8474e0a380474a6\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum languageserver-types 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97c2985bfcbbcb0189cfa25e1c10c1ac7111df2b6214b652c690127aefdf4e5b\"\n+\"checksum languageserver-types 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c178b944c3187527293fb9f8a0b0db3c5fb62eb127cacd65296f651a2440f5b1\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n \"checksum libc 0.2.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f5c2b18a287cf78b4097db62e20f43cace381dc76ae5c0a3073067f78b7ddc\"\n \"checksum libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df18a822100352d9863b302faf6f8f25c0e77f0e60feb40e5dbe1238b7f13b1d\"\n@@ -2119,8 +2101,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n \"checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n-\"checksum rls-analysis 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8d77d58e8933752142b5b92e3f8ba6d6f1630be6da5627c492268a43f79ffbda\"\n-\"checksum rls-data 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"374a8fad31cc0681a7bfd8a04079dd4afd0e981d34e18a171b1a467445bdf51e\"\n+\"checksum rls-analysis 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78a05b130793ebc781c2d933299d7214a10d014fdebe5184eb652c81ba8d3184\"\n \"checksum rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e502ac679bc35e023e982506c32d0278ef89e29af1e4ad21cb70c44b525b87a9\"\n \"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n \"checksum rls-vfs 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f19246a0fda45f2fb6eb34addef2a692c044cbf1c90ec7695583450fb5f23e7\"\n@@ -2155,9 +2136,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum term_size 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2b6b55df3198cc93372e85dd2ed817f0e38ce8cc0f22eb32391bfad9c4bf209\"\n \"checksum termcolor 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a5193a56b8d82014662c4b933dea6bec851daf018a2b01722e007daaf5f9dca\"\n \"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n-\"checksum thread-id 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8df7875b676fddfadffd96deea3b1124e5ede707d4884248931077518cf1f773\"\n \"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n-\"checksum thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c85048c6260d17cf486ceae3282d9fb6b90be220bf5b28c400f5485ffc29f0c7\"\n+\"checksum thread_local 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1697c4b57aeeb7a536b647165a2825faddffb1d3bad386d507709bd51a90bb14\"\n \"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n \"checksum toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"736b60249cb25337bc196faa43ee12c705e426f3d55c214d73a4e7be06f92cb4\"\n \"checksum toml 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd86ad9ebee246fdedd610e0f6d0587b754a3d81438db930a244d0480ed7878f\"\n@@ -2169,7 +2149,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n \"checksum unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36dff09cafb4ec7c8cf0023eb0b686cb6ce65499116a12201c9e11840ca01beb\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n-\"checksum unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f2ae5ddb18e1c92664717616dd9549dde73f539f01bd7b77c2edb2446bdff91\"\n+\"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n \"checksum url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eeb819346883532a271eb626deb43c4a1bb4c4dd47c519bd78137c3e72a4fe27\"\n \"checksum url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74e7d099f1ee52f823d4bdd60c93c3602043c728f5db3b97bdb548467f7bddea\"\n \"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\""}, {"sha": "b2bd792e93ba6bc8e2de3c6e1e707130b3f6bdff", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -276,10 +276,6 @@ pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n     if build.is_rust_llvm(target) {\n         cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n     }\n-    if let Some(ref cfg_file) = build.flags.config {\n-        let cfg_path = t!(PathBuf::from(cfg_file).canonicalize());\n-        cargo.env(\"CFG_LLVM_TOML\", cfg_path.into_os_string());\n-    }\n     cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n     let target_config = build.config.target_config.get(target);\n     if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {"}, {"sha": "ebeb5f6a1de51d2f72f5404d65de360f5c7cdae7", "filename": "src/doc/unstable-book/src/library-features/iterator-for-each.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fiterator-for-each.md?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -1,8 +1,8 @@\n # `iterator_for_each`\n \n-The tracking issue for this feature is: [#TBD]\n+The tracking issue for this feature is: [#42986]\n \n-[#TBD]: https://github.com/rust-lang/rust/issues/TBD\n+[#42986]: https://github.com/rust-lang/rust/issues/42986\n \n ------------------------\n "}, {"sha": "d9887094fefb2f767e2b8e202093d233c733ddc0", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -522,7 +522,7 @@ pub trait Iterator {\n     ///       .for_each(|(i, x)| println!(\"{}:{}\", i, x));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iterator_for_each\", issue = \"0\")]\n+    #[unstable(feature = \"iterator_for_each\", issue = \"42986\")]\n     fn for_each<F>(self, mut f: F) where\n         Self: Sized, F: FnMut(Self::Item),\n     {"}, {"sha": "035640b9710e27302007af8ef3d286f6e267c7a4", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -1946,6 +1946,44 @@ Maybe you just misspelled the lint name or the lint doesn't exist anymore.\n Either way, try to update/remove it in order to fix the error.\n \"##,\n \n+E0621: r##\"\n+This error code indicates a mismatch between the function signature (i.e.,\n+the parameter types and the return type) and the function body. Most of\n+the time, this indicates that the function signature needs to be changed to\n+match the body, but it may be that the body needs to be changed to match\n+the signature.\n+\n+Specifically, one or more of the parameters contain borrowed data that\n+needs to have a named lifetime in order for the body to type-check. Most of\n+the time, this is because the borrowed data is being returned from the\n+function, as in this example:\n+\n+```compile_fail,E0621\n+fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 { // explicit lifetime required\n+                                             // in the type of `y`\n+    if x > y { x } else { y }\n+}\n+```\n+\n+Here, the function is returning data borrowed from either x or y, but the\n+'a annotation indicates that it is returning data only from x. We can make\n+the signature match the body by changing the type of y to &'a i32, like so:\n+\n+```\n+fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n+    if x > y { x } else { y }\n+}\n+```\n+\n+Alternatively, you could change the body not to return data from y:\n+\n+```\n+fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n+    x\n+}\n+```\n+\"##,\n+\n }\n \n "}, {"sha": "82bbb4a1bf5159db048cf4d43fc2af7309ed3fc6", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -72,9 +72,11 @@ use ty::error::TypeError;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n use errors::{DiagnosticBuilder, DiagnosticStyledString};\n-\n mod note;\n+\n mod need_type_info;\n+mod named_anon_conflict;\n+\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn note_and_explain_region(self,\n@@ -255,34 +257,48 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    pub fn report_region_errors(&self,\n-                                errors: &Vec<RegionResolutionError<'tcx>>) {\n+\n+    pub fn report_region_errors(&self, errors: &Vec<RegionResolutionError<'tcx>>) {\n         debug!(\"report_region_errors(): {} errors to start\", errors.len());\n \n         // try to pre-process the errors, which will group some of them\n         // together into a `ProcessedErrors` group:\n         let errors = self.process_errors(errors);\n \n-        debug!(\"report_region_errors: {} errors after preprocessing\", errors.len());\n+        debug!(\"report_region_errors: {} errors after preprocessing\",\n+               errors.len());\n \n         for error in errors {\n+\n             debug!(\"report_region_errors: error = {:?}\", error);\n-            match error.clone() {\n-                ConcreteFailure(origin, sub, sup) => {\n-                    self.report_concrete_failure(origin, sub, sup).emit();\n-                }\n \n-                GenericBoundFailure(kind, param_ty, sub) => {\n-                    self.report_generic_bound_failure(kind, param_ty, sub);\n-                }\n+            if !self.try_report_named_anon_conflict(&error){\n+\n+               match error.clone() {\n+                  // These errors could indicate all manner of different\n+                  // problems with many different solutions. Rather\n+                  // than generate a \"one size fits all\" error, what we\n+                  // attempt to do is go through a number of specific\n+                  // scenarios and try to find the best way to present\n+                  // the error. If all of these fails, we fall back to a rather\n+                  // general bit of code that displays the error information\n+                  ConcreteFailure(origin, sub, sup) => {\n+\n+                      self.report_concrete_failure(origin, sub, sup).emit();\n+                  }\n \n-                SubSupConflict(var_origin,\n+                  GenericBoundFailure(kind, param_ty, sub) => {\n+                      self.report_generic_bound_failure(kind, param_ty, sub);\n+                  }\n+\n+                  SubSupConflict(var_origin,\n                                sub_origin, sub_r,\n                                sup_origin, sup_r) => {\n-                    self.report_sub_sup_conflict(var_origin,\n+                      self.report_sub_sup_conflict(var_origin,\n                                                  sub_origin, sub_r,\n                                                  sup_origin, sup_r);\n-                }\n+                  }\n+               }\n             }\n         }\n     }"}, {"sha": "ccbc5cdb862f98eb96f26880a857b7091d3cbef9", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,199 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Error Reporting for Anonymous Region Lifetime Errors.\n+use hir;\n+use infer::InferCtxt;\n+use ty::{self, Region};\n+use infer::region_inference::RegionResolutionError::*;\n+use infer::region_inference::RegionResolutionError;\n+use hir::map as hir_map;\n+use hir::def_id::DefId;\n+\n+impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n+    // This method walks the Type of the function body arguments using\n+    // `fold_regions()` function and returns the\n+    // &hir::Arg of the function argument corresponding to the anonymous\n+    // region and the Ty corresponding to the named region.\n+    // Currently only the case where the function declaration consists of\n+    // one named region and one anonymous region is handled.\n+    // Consider the example `fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32`\n+    // Here, we would return the hir::Arg for y, we return the type &'a\n+    // i32, which is the type of y but with the anonymous region replaced\n+    // with 'a, the corresponding bound region and is_first which is true if\n+    // the hir::Arg is the first argument in the function declaration.\n+    fn find_arg_with_anonymous_region\n+        (&self,\n+         anon_region: Region<'tcx>,\n+         named_region: Region<'tcx>)\n+         -> Option<(&hir::Arg, ty::Ty<'tcx>, ty::BoundRegion, bool)> {\n+\n+        match *anon_region {\n+            ty::ReFree(ref free_region) => {\n+\n+                let id = free_region.scope;\n+                let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n+                let body_id = self.tcx.hir.maybe_body_owned_by(node_id).unwrap();\n+                let body = self.tcx.hir.body(body_id);\n+                if let Some(tables) = self.in_progress_tables {\n+                    body.arguments\n+                        .iter()\n+                        .enumerate()\n+                        .filter_map(|(index, arg)| {\n+                            let ty = tables.borrow().node_id_to_type(arg.id);\n+                            let mut found_anon_region = false;\n+                            let new_arg_ty = self.tcx\n+                                .fold_regions(&ty, &mut false, |r, _| if *r == *anon_region {\n+                                    found_anon_region = true;\n+                                    named_region\n+                                } else {\n+                                    r\n+                                });\n+                            if found_anon_region {\n+                                let is_first = index == 0;\n+                                Some((arg, new_arg_ty, free_region.bound_region, is_first))\n+                            } else {\n+                                None\n+                            }\n+                        })\n+                        .next()\n+                } else {\n+                    None\n+                }\n+            }\n+            _ => None,\n+\n+        }\n+    }\n+\n+    // This method generates the error message for the case when\n+    // the function arguments consist of a named region and an anonymous\n+    // region and corresponds to `ConcreteFailure(..)`\n+    pub fn try_report_named_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n+\n+        let (span, sub, sup) = match *error {\n+            ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),\n+            _ => return false, // inapplicable\n+        };\n+\n+        // Determine whether the sub and sup consist of one named region ('a)\n+        // and one anonymous (elided) region. If so, find the parameter arg\n+        // where the anonymous region appears (there must always be one; we\n+        // only introduced anonymous regions in parameters) as well as a\n+        // version new_ty of its type where the anonymous region is replaced\n+        // with the named one.\n+        let (named, (arg, new_ty, br, is_first), scope_def_id) =\n+            if sub.is_named_region() && self.is_suitable_anonymous_region(sup).is_some() {\n+                (sub,\n+                 self.find_arg_with_anonymous_region(sup, sub).unwrap(),\n+                 self.is_suitable_anonymous_region(sup).unwrap())\n+            } else if sup.is_named_region() && self.is_suitable_anonymous_region(sub).is_some() {\n+                (sup,\n+                 self.find_arg_with_anonymous_region(sub, sup).unwrap(),\n+                 self.is_suitable_anonymous_region(sub).unwrap())\n+            } else {\n+                return false; // inapplicable\n+            };\n+\n+        // Here, we check for the case where the anonymous region\n+        // is in the return type.\n+        // FIXME(#42703) - Need to handle certain cases here.\n+        let ret_ty = self.tcx.type_of(scope_def_id);\n+        match ret_ty.sty {\n+            ty::TyFnDef(_, _) => {\n+                let sig = ret_ty.fn_sig(self.tcx);\n+                let late_bound_regions = self.tcx\n+                    .collect_referenced_late_bound_regions(&sig.output());\n+                if late_bound_regions.iter().any(|r| *r == br) {\n+                    return false;\n+                } else {\n+                }\n+            }\n+            _ => {}\n+        }\n+\n+        // Here we check for the case where anonymous region\n+        // corresponds to self and if yes, we display E0312.\n+        // FIXME(#42700) - Need to format self properly to\n+        // enable E0621 for it.\n+        if is_first &&\n+           self.tcx\n+               .opt_associated_item(scope_def_id)\n+               .map(|i| i.method_has_self_argument)\n+               .unwrap_or(false) {\n+            return false;\n+        }\n+\n+        let (error_var, span_label_var) = if let Some(simple_name) = arg.pat.simple_name() {\n+            (format!(\"the type of `{}`\", simple_name), format!(\"the type of `{}`\", simple_name))\n+        } else {\n+            (format!(\"parameter type\"), format!(\"type\"))\n+        };\n+\n+\n+        struct_span_err!(self.tcx.sess,\n+                         span,\n+                         E0621,\n+                         \"explicit lifetime required in {}\",\n+                         error_var)\n+                .span_label(arg.pat.span,\n+                            format!(\"consider changing {} to `{}`\", span_label_var, new_ty))\n+                .span_label(span, format!(\"lifetime `{}` required\", named))\n+                .emit();\n+\n+        return true;\n+\n+    }\n+\n+    // This method returns whether the given Region is Anonymous\n+    // and returns the DefId corresponding to the region.\n+    pub fn is_suitable_anonymous_region(&self, region: Region<'tcx>) -> Option<DefId> {\n+\n+        match *region {\n+            ty::ReFree(ref free_region) => {\n+                match free_region.bound_region {\n+                    ty::BrAnon(..) => {\n+                        let anonymous_region_binding_scope = free_region.scope;\n+                        let node_id = self.tcx\n+                            .hir\n+                            .as_local_node_id(anonymous_region_binding_scope)\n+                            .unwrap();\n+                        match self.tcx.hir.find(node_id) {\n+                            Some(hir_map::NodeItem(..)) |\n+                            Some(hir_map::NodeTraitItem(..)) => {\n+                                // proceed ahead //\n+                            }\n+                            Some(hir_map::NodeImplItem(..)) => {\n+                                let container_id = self.tcx\n+                                    .associated_item(anonymous_region_binding_scope)\n+                                    .container\n+                                    .id();\n+                                if self.tcx.impl_trait_ref(container_id).is_some() {\n+                                    // For now, we do not try to target impls of traits. This is\n+                                    // because this message is going to suggest that the user\n+                                    // change the fn signature, but they may not be free to do so,\n+                                    // since the signature must match the trait.\n+                                    //\n+                                    // FIXME(#42706) -- in some cases, we could do better here.\n+                                    return None;\n+                                }\n+                            }\n+                            _ => return None, // inapplicable\n+                            // we target only top-level functions\n+                        }\n+                        return Some(anonymous_region_binding_scope);\n+                    }\n+                    _ => None,\n+                }\n+            }\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "5cb1606da6708bac132f6ea39d5ec936f2df412c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -38,7 +38,6 @@ use errors::DiagnosticBuilder;\n use syntax_pos::{self, Span, DUMMY_SP};\n use util::nodemap::FxHashMap;\n use arena::DroplessArena;\n-\n use self::combine::CombineFields;\n use self::higher_ranked::HrMatchResult;\n use self::region_inference::{RegionVarBindings, RegionSnapshot};\n@@ -1077,6 +1076,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                region_map,\n                                                free_regions);\n         let errors = self.region_vars.resolve_regions(&region_rels);\n+\n         if !self.is_tainted_by_errors() {\n             // As a heuristic, just skip reporting region errors\n             // altogether if other errors have been reported while"}, {"sha": "452775e9e13379f45c0c74ffbfde85ad42b2ba51", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -990,6 +990,20 @@ impl RegionKind {\n \n         flags\n     }\n+\n+    // This method returns whether the given Region is Named\n+    pub fn is_named_region(&self) -> bool {\n+\n+        match *self {\n+            ty::ReFree(ref free_region) => {\n+                match free_region.bound_region {\n+                    ty::BrNamed(..) => true,\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        }\n+    }\n }\n \n /// Type utilities"}, {"sha": "cb7721affe761778b2856826cfe31be29f698804", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -32,4 +32,5 @@ fn main() {\n             .build_target(\"asan\")\n             .build();\n     }\n+    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n }"}, {"sha": "3f0f5369607e527eb6ddb16050cfa79c52bae6d9", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -60,11 +60,7 @@ fn main() {\n         });\n \n     println!(\"cargo:rerun-if-changed={}\", llvm_config.display());\n-\n-    if let Some(cfg_toml) = env::var_os(\"CFG_LLVM_TOML\") {\n-        let cfg_path = PathBuf::from(cfg_toml);\n-        println!(\"cargo:rerun-if-changed={}\", cfg_path.display());\n-    }\n+    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n \n     // Test whether we're cross-compiling LLVM. This is a pretty rare case\n     // currently where we're producing an LLVM for a different platform than"}, {"sha": "3d2ae480de6df3716abbd915b396120ba137f771", "filename": "src/librustc_lsan/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -32,4 +32,5 @@ fn main() {\n             .build_target(\"lsan\")\n             .build();\n     }\n+    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n }"}, {"sha": "7e2a82dd0ab94aa47f3b02e747c01aa0fe77050c", "filename": "src/librustc_msan/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -32,4 +32,5 @@ fn main() {\n             .build_target(\"msan\")\n             .build();\n     }\n+    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n }"}, {"sha": "641d9c3647d390e570585f27cf0433ccb04f88f0", "filename": "src/librustc_tsan/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -32,4 +32,5 @@ fn main() {\n             .build_target(\"tsan\")\n             .build();\n     }\n+    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n }"}, {"sha": "96643ae72abadc5c7beaade2ff465137743c0a17", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -37,7 +37,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     match it.node {\n         hir::ForeignItemFn(..) => {}\n         _ => {\n-            struct_span_err!(tcx.sess, it.span, E0619,\n+            struct_span_err!(tcx.sess, it.span, E0622,\n                              \"intrinsic must be a function\")\n                 .span_label(it.span, \"expected a function\")\n                 .emit();"}, {"sha": "37f6f3753d7b4fea373fba03fb68c68b3323b797", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -4726,6 +4726,26 @@ let x = &[1_usize, 2] as &[usize]; // ok!\n ```\n \"##,\n \n+E0622: r##\"\n+An intrinsic was declared without being a function.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0622\n+#![feature(intrinsics)]\n+extern \"rust-intrinsic\" {\n+    pub static breakpoint : unsafe extern \"rust-intrinsic\" fn();\n+    // error: intrinsic must be a function\n+}\n+\n+fn main() { unsafe { breakpoint(); } }\n+```\n+\n+An intrinsic is a function available for use in a given programming language\n+whose implementation is handled specially by the compiler. In order to fix this\n+error, just declare a function.\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "88994b284c90dced81a4592873f405756d2c82d6", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -653,15 +653,29 @@ impl OpenOptions {\n     /// # Errors\n     ///\n     /// This function will return an error under a number of different\n-    /// circumstances, to include but not limited to:\n-    ///\n-    /// * Opening a file that does not exist without setting `create` or\n-    ///   `create_new`.\n-    /// * Attempting to open a file with access that the user lacks\n-    ///   permissions for\n-    /// * Filesystem-level errors (full disk, etc)\n-    /// * Invalid combinations of open options (truncate without write access,\n-    ///   no access mode set, etc)\n+    /// circumstances. Some of these error conditions are listed here, together\n+    /// with their [`ErrorKind`]. The mapping to [`ErrorKind`]s is not part of\n+    /// the compatiblity contract of the function, especially the `Other` kind\n+    /// might change to more specific kinds in the future.\n+    ///\n+    /// * [`NotFound`]: The specified file does not exist and neither `create`\n+    ///   or `create_new` is set.\n+    /// * [`NotFound`]: One of the directory components of the file path does\n+    ///   not exist.\n+    /// * [`PermissionDenied`]: The user lacks permission to get the specified\n+    ///   access rights for the file.\n+    /// * [`PermissionDenied`]: The user lacks permission to open one of the\n+    ///   directory components of the specified path.\n+    /// * [`AlreadyExists`]: `create_new` was specified and the file already\n+    ///   exists.\n+    /// * [`InvalidInput`]: Invalid combinations of open options (truncate\n+    ///   without write access, no access mode set, etc.).\n+    /// * [`Other`]: One of the directory components of the specified file path\n+    ///   was not, in fact, a directory.\n+    /// * [`Other`]: Filesystem-level errors: full disk, write permission\n+    ///   requested on a read-only file system, exceeded disk quota, too many\n+    ///   open files, too long filename, too many symbolic links in the\n+    ///   specified path (Unix-like systems only), etc.\n     ///\n     /// # Examples\n     ///\n@@ -670,6 +684,13 @@ impl OpenOptions {\n     ///\n     /// let file = OpenOptions::new().open(\"foo.txt\");\n     /// ```\n+    ///\n+    /// [`ErrorKind`]: ../io/enum.ErrorKind.html\n+    /// [`AlreadyExists`]: ../io/enum.ErrorKind.html#variant.AlreadyExists\n+    /// [`InvalidInput`]: ../io/enum.ErrorKind.html#variant.InvalidInput\n+    /// [`NotFound`]: ../io/enum.ErrorKind.html#variant.NotFound\n+    /// [`Other`]: ../io/enum.ErrorKind.html#variant.Other\n+    /// [`PermissionDenied`]: ../io/enum.ErrorKind.html#variant.PermissionDenied\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn open<P: AsRef<Path>>(&self, path: P) -> io::Result<File> {\n         self._open(path.as_ref())"}, {"sha": "a5a5ff7218dcfe26150499924ba76594dfe2fded", "filename": "src/test/compile-fail/E0619.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fcompile-fail%2FE0619.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fcompile-fail%2FE0619.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0619.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -16,3 +16,4 @@ fn main() {\n         _ => {}\n     }\n }\n+"}, {"sha": "980461bedae55446604d8c635416d466aa1faf00", "filename": "src/test/compile-fail/E0621-does-not-trigger-for-closures.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fcompile-fail%2FE0621-does-not-trigger-for-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fcompile-fail%2FE0621-does-not-trigger-for-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0621-does-not-trigger-for-closures.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we give the generic E0495 when one of the free regions is\n+// bound in a closure (rather than suggesting a change to the signature\n+// of the closure, which is not specified in `foo` but rather in `invoke`).\n+\n+// FIXME - This might be better as a UI test, but the finer details\n+// of the error seem to vary on different machines.\n+fn invoke<'a, F>(x: &'a i32, f: F) -> &'a i32\n+where F: FnOnce(&'a i32, &i32) -> &'a i32\n+{\n+    let y = 22;\n+    f(x, &y)\n+}\n+\n+fn foo<'a>(x: &'a i32) {\n+    invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n+}\n+\n+fn main() {}"}, {"sha": "f2bde5b03648be1db5d6f97e97103f7a17911150", "filename": "src/test/compile-fail/E0622.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fcompile-fail%2FE0622.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fcompile-fail%2FE0622.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0622.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -11,6 +11,6 @@\n #![feature(intrinsics)]\n extern \"rust-intrinsic\" {\n     pub static breakpoint : unsafe extern \"rust-intrinsic\" fn();\n-    //~^ ERROR intrinsic must be a function\n+    //~^ ERROR intrinsic must be a function [E0622]\n }\n fn main() { unsafe { breakpoint(); } }", "previous_filename": "src/test/compile-fail/invalid-intrinsic.rs"}, {"sha": "a1716c4e797922d00a34bfa3b59499a7e185137f", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+    if x > y { x } else { y }\n+}\n+\n+fn main() { }"}, {"sha": "4d8c5e039af418846ed2476fe098e08ce4ddc445", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.stderr?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,10 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex1-return-one-existing-name-if-else-2.rs:12:16\n+   |\n+11 | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   |            - consider changing the type of `x` to `&'a i32`\n+12 |     if x > y { x } else { y }\n+   |                ^ lifetime `'a` required\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "7bd32d8761705d073c4859cd8922350227a26dc4", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<'a>((x, y): (&'a i32, &i32)) -> &'a i32 {\n+    if x > y { x } else { y }\n+}\n+\n+fn main () { }"}, {"sha": "07b276601f47cef82517949e2908b28265b3f0ea", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-3.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.stderr?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,10 @@\n+error[E0621]: explicit lifetime required in parameter type\n+  --> $DIR/ex1-return-one-existing-name-if-else-3.rs:12:27\n+   |\n+11 | fn foo<'a>((x, y): (&'a i32, &i32)) -> &'a i32 {\n+   |            ------ consider changing type to `(&'a i32, &'a i32)`\n+12 |     if x > y { x } else { y }\n+   |                           ^ lifetime `'a` required\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "8849f7084b3cde174c71cd38664f968048849e1d", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+\n+fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   if x > y { x } else { y }\n+   }\n+}\n+\n+fn main() { }"}, {"sha": "2adf0cd762c59b342f855438fbe5b3310b256f61", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,10 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-2.rs:14:15\n+   |\n+13 | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   |            - consider changing the type of `x` to `&'a i32`\n+14 |    if x > y { x } else { y }\n+   |               ^ lifetime `'a` required\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "362290ff3fa7d9cd5f7e52229e3648ca0939d67c", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+  field: i32\n+}\n+\n+impl Foo {\n+  fn foo<'a>(&'a self, x: &i32) -> &i32 {\n+\n+    if true { &self.field } else { x }\n+\n+  }\n+\n+}\n+\n+fn main() { }"}, {"sha": "15825017d15c3edd9aada9447f00ee275a5435e9", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-3.rs:18:36\n+   |\n+16 |   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n+   |                        - consider changing the type of `x` to `&'a i32`\n+17 | \n+18 |     if true { &self.field } else { x }\n+   |                                    ^ lifetime `'a` required\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "36d956a39966f53a88721bcf2014ac0ec9dcb76c", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+\n+    fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32;\n+\n+}\n+\n+impl Foo for () {\n+\n+    fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+\n+        if x > y { x } else { y }\n+\n+    }\n+\n+}\n+\n+fn main() {}"}, {"sha": "15ecca618052e25ce49b1b907b04dbda29e0a7c8", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,27 @@\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:21:20\n+   |\n+21 |         if x > y { x } else { y }\n+   |                    ^\n+   |\n+note: ...the reference is valid for the lifetime 'a as defined on the method body at 19:5...\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:19:5\n+   |\n+19 | /     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+20 | |\n+21 | |         if x > y { x } else { y }\n+22 | |\n+23 | |     }\n+   | |_____^\n+note: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the method body at 19:5\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:19:5\n+   |\n+19 | /     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+20 | |\n+21 | |         if x > y { x } else { y }\n+22 | |\n+23 | |     }\n+   | |_____^\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "892a6dcd1e9346bf414746f577dac32d9ea6ec40", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else.stderr", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -1,23 +1,10 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/ex1-return-one-existing-name-if-else.rs:12:27\n    |\n+11 | fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n+   |                        - consider changing the type of `y` to `&'a i32`\n 12 |     if x > y { x } else { y }\n-   |                           ^\n-   |\n-note: ...the reference is valid for the lifetime 'a as defined on the function body at 11:1...\n-  --> $DIR/ex1-return-one-existing-name-if-else.rs:11:1\n-   |\n-11 | / fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n-12 | |     if x > y { x } else { y }\n-13 | | }\n-   | |_^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the function body at 11:1\n-  --> $DIR/ex1-return-one-existing-name-if-else.rs:11:1\n-   |\n-11 | / fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n-12 | |     if x > y { x } else { y }\n-13 | | }\n-   | |_^\n+   |                           ^ lifetime `'a` required\n \n error: aborting due to previous error(s)\n "}, {"sha": "96b733be9b4eb5c4adf22a89f4cf6846ad561f04", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+  field: i32\n+}\n+\n+impl Foo {\n+  fn foo<'a>(&self, x: &'a i32) -> &i32 {\n+\n+    x\n+\n+  }\n+\n+}\n+\n+fn main() { }"}, {"sha": "471b3401827d8106050281770a56350fa5b091d4", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,27 @@\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:18:5\n+   |\n+18 |     x\n+   |     ^\n+   |\n+note: ...the reference is valid for the anonymous lifetime #1 defined on the method body at 16:3...\n+  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:16:3\n+   |\n+16 | /   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n+17 | |\n+18 | |     x\n+19 | |\n+20 | |   }\n+   | |___^\n+note: ...but the borrowed content is only valid for the lifetime 'a as defined on the method body at 16:3\n+  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:16:3\n+   |\n+16 | /   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n+17 | |\n+18 | |     x\n+19 | |\n+20 | |   }\n+   | |___^\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "a8ce60c47b6f528ed26e096339080a584af5f600", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-self-is-anon.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    field: i32,\n+}\n+\n+impl Foo {\n+    fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n+\n+        if true { x } else { self }\n+\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "46fc43eaf5756fa0524dca41aab65e33f554f38b", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,27 @@\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:18:30\n+   |\n+18 |         if true { x } else { self }\n+   |                              ^^^^\n+   |\n+note: ...the reference is valid for the lifetime 'a as defined on the method body at 16:5...\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:16:5\n+   |\n+16 | /     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n+17 | |\n+18 | |         if true { x } else { self }\n+19 | |\n+20 | |     }\n+   | |_____^\n+note: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the method body at 16:5\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:16:5\n+   |\n+16 | /     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n+17 | |\n+18 | |         if true { x } else { self }\n+19 | |\n+20 | |     }\n+   | |_____^\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "dd34e1aa6d9d227e7377d4d58dd850eeeeea87c9", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.rs?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Ref<'a, T: 'a> {\n+    data: &'a T\n+}\n+\n+fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n+    y.push(x);\n+}\n+\n+fn main() { }"}, {"sha": "ea696c51d62188ece63e4d106e3b6f612d02e005", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.stderr?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -0,0 +1,10 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex2a-push-one-existing-name-2.rs:16:12\n+   |\n+15 | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n+   |            - consider changing the type of `x` to `Ref<'a, i32>`\n+16 |     y.push(x);\n+   |            ^ lifetime `'a` required\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "1630ae32ba6bf65d7f48bbfac1e4e726a70ba66a", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name.stderr", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d89b20669be33c2388ad97a3ee90fca4e5684ec/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -1,25 +1,10 @@\n-error[E0308]: mismatched types\n+error[E0621]: explicit lifetime required in the type of `y`\n   --> $DIR/ex2a-push-one-existing-name.rs:16:12\n    |\n+15 | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n+   |                                       - consider changing the type of `y` to `Ref<'a, i32>`\n 16 |     x.push(y);\n-   |            ^ lifetime mismatch\n-   |\n-   = note: expected type `Ref<'a, _>`\n-              found type `Ref<'_, _>`\n-note: the anonymous lifetime #2 defined on the function body at 15:1...\n-  --> $DIR/ex2a-push-one-existing-name.rs:15:1\n-   |\n-15 | / fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n-16 | |     x.push(y);\n-17 | | }\n-   | |_^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the function body at 15:1\n-  --> $DIR/ex2a-push-one-existing-name.rs:15:1\n-   |\n-15 | / fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n-16 | |     x.push(y);\n-17 | | }\n-   | |_^\n+   |            ^ lifetime `'a` required\n \n error: aborting due to previous error(s)\n "}, {"sha": "4c0a8b63d61942349c18727409b2a600446e02d6", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=7d89b20669be33c2388ad97a3ee90fca4e5684ec", "patch": "@@ -1 +1 @@\n-Subproject commit d26fd6f089a4e7f1216a03a6d604bee33b2301dc\n+Subproject commit 4c0a8b63d61942349c18727409b2a600446e02d6"}]}