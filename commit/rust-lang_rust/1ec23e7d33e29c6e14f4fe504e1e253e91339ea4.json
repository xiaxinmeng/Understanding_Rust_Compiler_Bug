{"sha": "1ec23e7d33e29c6e14f4fe504e1e253e91339ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzIzZTdkMzNlMjljNmUxNGY0ZmU1MDRlMWUyNTNlOTEzMzllYTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-14T10:27:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-14T10:27:38Z"}, "message": "Merge #5757\n\n5757: Document the most important CI invariant\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d96cabce4ac49b214880679bce019ef3b963f579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d96cabce4ac49b214880679bce019ef3b963f579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNmcaCRBK7hj4Ov3rIwAAdHIIAJ0hcR15Q0n+mF1R+4l/trU4\ndi+1wOhcrcXZAsq1E1guAjhMBGTpGTnbEsmSwvs29pEPyABq7/512hHUuSzx6Uq+\nAFtgGElnXuTXobnivCOUpM7ez8WYlxDKGZ11ZdjBHc9eB95ztsPEN8QhoAymjDqW\nkKIud3hBFZ4RKPHY7cIpUzLl3w2SN8nuw7NJnM0i44XwPAsrstCz0TnJAy15Y+BZ\n8Hl2wy0vxTQzpT/wMZOg9zmkW84WaBX6uuEw6VkZxFgyFvlP+6S9vEChah5Yt4T0\nnoCoHMwy/A/Fe8xeOhsifZc0pNaNRwA5JGV3phPDZihx7Mbx6qBO9NhexXd55Pw=\n=WVc9\n-----END PGP SIGNATURE-----\n", "payload": "tree d96cabce4ac49b214880679bce019ef3b963f579\nparent 674af600f105abe1dcb6c7654058e7df5a402429\nparent 200161c734e996e68f74d242d96d89b561a6dd17\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597400858 +0000\ncommitter GitHub <noreply@github.com> 1597400858 +0000\n\nMerge #5757\n\n5757: Document the most important CI invariant\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4", "html_url": "https://github.com/rust-lang/rust/commit/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "674af600f105abe1dcb6c7654058e7df5a402429", "url": "https://api.github.com/repos/rust-lang/rust/commits/674af600f105abe1dcb6c7654058e7df5a402429", "html_url": "https://github.com/rust-lang/rust/commit/674af600f105abe1dcb6c7654058e7df5a402429"}, {"sha": "200161c734e996e68f74d242d96d89b561a6dd17", "url": "https://api.github.com/repos/rust-lang/rust/commits/200161c734e996e68f74d242d96d89b561a6dd17", "html_url": "https://github.com/rust-lang/rust/commit/200161c734e996e68f74d242d96d89b561a6dd17"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "36edddc7005b7cf5b69de7c6bfe6d841618897b0", "filename": "docs/dev/README.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=1ec23e7d33e29c6e14f4fe504e1e253e91339ea4", "patch": "@@ -165,6 +165,11 @@ In general, API is centered around UI concerns -- the result of the call is what\n The results are 100% Rust specific though.\n Shout outs to LSP developers for popularizing the idea that \"UI\" is a good place to draw a boundary at.\n \n+## CI\n+\n+CI does not test rust-analyzer, CI is a core part of rust-analyzer, and is maintained with above average standard of quality.\n+CI is reproducible -- it can only be broken by changes to files in this repository, any dependence on externalities is a bug.\n+\n # Code Style & Review Process\n \n Do see [./style.md](./style.md)."}, {"sha": "963a6d73d05aa9e97da34a9c9eef9142215047ec", "filename": "docs/dev/style.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=1ec23e7d33e29c6e14f4fe504e1e253e91339ea4", "patch": "@@ -65,7 +65,7 @@ There are many benefits to this:\n It also makes sense to format snippets more compactly (for example, by placing enum definitions like `enum E { Foo, Bar }` on a single line),\n as long as they are still readable.\n \n-## Order of Imports\n+# Order of Imports\n \n Separate import groups with blank lines.\n Use one `use` per crate.\n@@ -91,7 +91,7 @@ use super::{}\n Module declarations come before the imports.\n Order them in \"suggested reading order\" for a person new to the code base.\n \n-## Import Style\n+# Import Style\n \n Qualify items from `hir` and `ast`.\n \n@@ -112,7 +112,7 @@ Avoid local `use MyEnum::*` imports.\n \n Prefer `use crate::foo::bar` to `use super::bar`.\n \n-## Order of Items\n+# Order of Items\n \n Optimize for the reader who sees the file for the first time, and wants to get a general idea about what's going on.\n People read things from top to bottom, so place most important things first.\n@@ -143,20 +143,20 @@ struct Foo {\n }\n ```\n \n-## Variable Naming\n+# Variable Naming\n \n Use boring and long names for local variables ([yay code completion](https://github.com/rust-analyzer/rust-analyzer/pull/4162#discussion_r417130973)).\n The default name is a lowercased name of the type: `global_state: GlobalState`.\n Avoid ad-hoc acronyms and contractions, but use the ones that exist consistently (`db`, `ctx`, `acc`).\n The default name for \"result of the function\" local variable is `res`.\n The default name for \"I don't really care about the name\" variable is `it`.\n \n-## Collection types\n+# Collection types\n \n Prefer `rustc_hash::FxHashMap` and `rustc_hash::FxHashSet` instead of the ones in `std::collections`.\n They use a hasher that's slightly faster and using them consistently will reduce code size by some small amount.\n \n-## Preconditions\n+# Preconditions\n \n Express function preconditions in types and force the caller to provide them (rather than checking in callee):\n \n@@ -176,7 +176,7 @@ fn frobnicate(walrus: Option<Walrus>) {\n }\n ```\n \n-## Premature Pessimization\n+# Premature Pessimization\n \n Avoid writing code which is slower than it needs to be.\n Don't allocate a `Vec` where an iterator would do, don't allocate strings needlessly.\n@@ -197,12 +197,12 @@ if words.len() != 2 {\n }\n ```\n \n-## Documentation\n+# Documentation\n \n For `.md` and `.adoc` files, prefer a sentence-per-line format, don't wrap lines.\n If the line is too long, you want to split the sentence in two :-)\n \n-## Commit Style\n+# Commit Style\n \n We don't have specific rules around git history hygiene.\n Maintaining clean git history is encouraged, but not enforced."}]}