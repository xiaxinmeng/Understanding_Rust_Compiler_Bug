{"sha": "3e009b9424d51997af0e7433404dc2f0381af76c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMDA5Yjk0MjRkNTE5OTdhZjBlNzQzMzQwNGRjMmYwMzgxYWY3NmM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-01T20:18:17Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-01T20:19:20Z"}, "message": "Implement more `hir` typed node comparison", "tree": {"sha": "345e9b295c95397cd32fa14fa3a38fb3e7aa1a64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/345e9b295c95397cd32fa14fa3a38fb3e7aa1a64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e009b9424d51997af0e7433404dc2f0381af76c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJX8BpTAAoJEF5CfHlMukXoq0AQAJMa3P5TUzM2FGGB1ELc6I5f\ntdXNSyCHeiFYUC35I0boGYr0liGb1pS3IonxUbZfRI9/Q2XM9JeWulTi2YcDseT5\nfGf60SytZYlmGwop1BUxcsvSgCpj5VSfDXDeXpIJmrr051sh1G6TYOhARHlaFN7N\nL17UJlCjbYm31JRxu8hG2sf3a62LWyXl8utrDfT43yq6uoDq9oy3iW4mWRDy8fe3\nzAB1m7KT49bvR0eMcjdyiIjl5qiZG5G/aROZeRPQ6ZfWFAD+GHjlSaElKTNM5pq0\n5gzoA5ownMqTOUenrz8LIqWtx1W+svguRbn/ds2VNFSEWQcZcYvoT3ppAghbYhnp\npQlQtrFb3uqlu5ZlNFqT8GzUkUv/p9BcvHZ7Nd0NBUA6GP8Jxnd6YyrKmRZddwzn\nyjBlH6fL+PxNAfiU2rhpDV2GYH9817H3GouBzUsEGyHYrVcqRafbdSx8PWRAX6X8\ndNuYCoZE8S6Wh7caTHiYUkjrJBx4Km3WJoAJusvjO07PGtJpOVyFqGm3NXbZ8zaU\nhFYqgN4UPhgTlrHJg2zcXGwtGkgGKtXNcJ/7GX6mP3CFFUdyXCO4OG/DCRLeM7Dg\nkYsN7A/Szz0r4NdiG1em60oP+onXeYrjlzboAJioHF1IT4RhlFgsAhfbf54A+OJb\nSw43JC5b7P5rZ3L9pJzS\n=kbLv\n-----END PGP SIGNATURE-----", "payload": "tree 345e9b295c95397cd32fa14fa3a38fb3e7aa1a64\nparent 84269478b02c6a4bbfa3844e2edeb4a59d29fd4c\nauthor mcarton <cartonmartin+git@gmail.com> 1475353097 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1475353160 +0200\n\nImplement more `hir` typed node comparison\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e009b9424d51997af0e7433404dc2f0381af76c", "html_url": "https://github.com/rust-lang/rust/commit/3e009b9424d51997af0e7433404dc2f0381af76c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e009b9424d51997af0e7433404dc2f0381af76c/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84269478b02c6a4bbfa3844e2edeb4a59d29fd4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/84269478b02c6a4bbfa3844e2edeb4a59d29fd4c", "html_url": "https://github.com/rust-lang/rust/commit/84269478b02c6a4bbfa3844e2edeb4a59d29fd4c"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "680994a6a237fee3098b343b3291be4827f5d57d", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3e009b9424d51997af0e7433404dc2f0381af76c/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e009b9424d51997af0e7433404dc2f0381af76c/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=3e009b9424d51997af0e7433404dc2f0381af76c", "patch": "@@ -37,8 +37,8 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         match (&left.node, &right.node) {\n             (&StmtDecl(ref l, _), &StmtDecl(ref r, _)) => {\n                 if let (&DeclLocal(ref l), &DeclLocal(ref r)) = (&l.node, &r.node) {\n-                    // TODO: tys\n-                    l.ty.is_none() && r.ty.is_none() && both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n+                    both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r)) &&\n+                    both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                 } else {\n                     false\n                 }\n@@ -106,8 +106,8 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             }\n             (&ExprMethodCall(ref l_name, ref l_tys, ref l_args),\n              &ExprMethodCall(ref r_name, ref r_tys, ref r_args)) => {\n-                // TODO: tys\n-                !self.ignore_fn && l_name.node == r_name.node && l_tys.is_empty() && r_tys.is_empty() &&\n+                !self.ignore_fn && l_name.node == r_name.node &&\n+                over(l_tys, r_tys, |l, r| self.eq_ty(l, r)) &&\n                 self.eq_exprs(l_args, r_args)\n             }\n             (&ExprRepeat(ref le, ref ll), &ExprRepeat(ref re, ref rl)) => self.eq_expr(le, re) && self.eq_expr(ll, rl),\n@@ -138,6 +138,10 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         left.name.node == right.name.node && self.eq_expr(&left.expr, &right.expr)\n     }\n \n+    fn eq_lifetime(&self, left: &Lifetime, right: &Lifetime) -> bool {\n+        left.name == right.name\n+    }\n+\n     /// Check whether two patterns are the same.\n     pub fn eq_pat(&self, left: &Pat, right: &Pat) -> bool {\n         match (&left.node, &right.node) {\n@@ -169,12 +173,33 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     }\n \n     fn eq_path(&self, left: &Path, right: &Path) -> bool {\n+        left.global == right.global &&\n+        over(&left.segments, &right.segments, |l, r| self.eq_path_segment(l, r))\n+    }\n+\n+    fn eq_path_parameters(&self, left: &PathParameters, right: &PathParameters) -> bool {\n+        match (left, right) {\n+            (&AngleBracketedParameters(ref left), &AngleBracketedParameters(ref right)) => {\n+                over(&left.lifetimes, &right.lifetimes, |l, r| self.eq_lifetime(l, r)) &&\n+                over(&left.types, &right.types, |l, r| self.eq_ty(l, r)) &&\n+                over(&left.bindings, &right.bindings, |l, r| self.eq_type_binding(l, r))\n+            }\n+            (&ParenthesizedParameters(ref left), &ParenthesizedParameters(ref right)) => {\n+                over(&left.inputs, &right.inputs, |l, r| self.eq_ty(l, r)) &&\n+                both(&left.output, &right.output, |l, r| self.eq_ty(l, r))\n+            }\n+            (&AngleBracketedParameters(_), &ParenthesizedParameters(_)) |\n+            (&ParenthesizedParameters(_), &AngleBracketedParameters(_)) => {\n+                false\n+            }\n+        }\n+    }\n+\n+    fn eq_path_segment(&self, left: &PathSegment, right: &PathSegment) -> bool {\n         // The == of idents doesn't work with different contexts,\n         // we have to be explicit about hygiene\n-        left.global == right.global &&\n-        over(&left.segments,\n-             &right.segments,\n-             |l, r| l.name.as_str() == r.name.as_str() && l.parameters == r.parameters)\n+        left.name.as_str() == right.name.as_str() &&\n+        self.eq_path_parameters(&left.parameters, &right.parameters)\n     }\n \n     fn eq_qself(&self, left: &QSelf, right: &QSelf) -> bool {\n@@ -199,6 +224,10 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             _ => false,\n         }\n     }\n+\n+    fn eq_type_binding(&self, left: &TypeBinding, right: &TypeBinding) -> bool {\n+        left.name == right.name && self.eq_ty(&left.ty, &right.ty)\n+    }\n }\n \n fn swap_binop<'a>(binop: BinOp_, lhs: &'a Expr, rhs: &'a Expr) -> Option<(BinOp_, &'a Expr, &'a Expr)> {"}]}