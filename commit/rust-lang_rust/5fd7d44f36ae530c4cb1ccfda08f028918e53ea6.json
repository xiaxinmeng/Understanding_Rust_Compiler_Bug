{"sha": "5fd7d44f36ae530c4cb1ccfda08f028918e53ea6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZDdkNDRmMzZhZTUzMGM0Y2IxY2NmZGEwOGYwMjg5MThlNTNlYTY=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-08-11T19:02:01Z"}, "committer": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-08-11T19:02:01Z"}, "message": "Refactor if_chain\n\nCo-authored-by: Philipp Krones <hello@philkrones.com>", "tree": {"sha": "4784d0adfbabef86b01211ef4e7d51b3e4d98bcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4784d0adfbabef86b01211ef4e7d51b3e4d98bcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fd7d44f36ae530c4cb1ccfda08f028918e53ea6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENfZy0Nd1FLYaZCRY7vypMUgEJlUFAl1QZmcACgkQ7vypMUgE\nJlWfgBAAhnoZybSJMNJu0kxX6grLlK+PBIzKR0eDw2xeR4gOtdx0nRH/R6PZbcLc\ncMYQhON04EXTN+rejUqf/keNpQ8080ed/C4M7b8Bx2a5wUFnaHRLWHK+dMVG/vi3\npwQylmnBpu0quohGfwvAC1P45lC201WLloNYAWWJkecxmZHpRkXUjuQ9r/iHlZvm\nF9JNyb1KHY1Gh82Lu8FTJwQ1UJF3KWlsIM6OGFyk8HRLDKL0HD3xWlBsLRz5IXqT\nMgFzRTBu5jjQg+1z4p6KeLHj7QDxgp1hNaaCtLcc/sgMI3P30HWcqBVf5ponOu1c\nvBNEq+742u1klTz2tT0Tcc9MIYdR5SO4uZP070RMOSkAOcGkGHsdKaPt0lVTziEQ\n309JHEEOqk+LXq9WRB3locxBgu/Zoxjrvz7ACz8f6dyKXNlS6eh86Hqrwj0uzp6N\n4WasUSR7FeJDq7KQlfnqo9VdFLpQNy16PMgtyj4r4h7NABGnvwIZZeR88SVSfVGs\nEHxwRxg3OWCjiVRcIBQ3zfYJyK+TyG1O++rv84KGhQ4wUbTbtHErRlI5MbL7Vyyc\n3ufDWOsoA7Z34AKhFa9TgUluBDV3hQfkL1x/oxOcD3NiTn0HwQ2fDJfqzMvo/7qQ\nG7kfeatfGBuz0JlVb+d1K0Vg+10Wa813Is9NJ4rbPRoroy8jfVA=\n=5uUo\n-----END PGP SIGNATURE-----", "payload": "tree 4784d0adfbabef86b01211ef4e7d51b3e4d98bcb\nparent b651f19eb87db789f8fd24a7791add446d869630\nauthor Jeremy Stucki <jeremy@myelin.ch> 1565550121 +0200\ncommitter Jeremy Stucki <jeremy@myelin.ch> 1565550121 +0200\n\nRefactor if_chain\n\nCo-authored-by: Philipp Krones <hello@philkrones.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd7d44f36ae530c4cb1ccfda08f028918e53ea6", "html_url": "https://github.com/rust-lang/rust/commit/5fd7d44f36ae530c4cb1ccfda08f028918e53ea6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fd7d44f36ae530c4cb1ccfda08f028918e53ea6/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b651f19eb87db789f8fd24a7791add446d869630", "url": "https://api.github.com/repos/rust-lang/rust/commits/b651f19eb87db789f8fd24a7791add446d869630", "html_url": "https://github.com/rust-lang/rust/commit/b651f19eb87db789f8fd24a7791add446d869630"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "dc5c579b7e5757d509dc459b7f835ccf2a1cfbd0", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7d44f36ae530c4cb1ccfda08f028918e53ea6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7d44f36ae530c4cb1ccfda08f028918e53ea6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5fd7d44f36ae530c4cb1ccfda08f028918e53ea6", "patch": "@@ -2174,38 +2174,39 @@ fn lint_flat_map_identity<'a, 'tcx>(\n         if match_trait_method(cx, expr, &paths::ITERATOR);\n \n         if flat_map_args.len() == 2;\n-        if let hir::ExprKind::Closure(_, _, body_id, _, _) = flat_map_args[1].node;\n-        let body = cx.tcx.hir().body(body_id);\n-\n-        if body.arguments.len() == 1;\n-        if let hir::PatKind::Binding(_, _, binding_ident, _) = body.arguments[0].pat.node;\n-        if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = body.value.node;\n-\n-        if path.segments.len() == 1;\n-        if path.segments[0].ident.as_str() == binding_ident.as_str();\n \n         then {\n-            let msg = \"called `flat_map(|x| x)` on an `Iterator`. \\\n-                       This can be simplified by calling `flatten().`\";\n-            span_lint(cx, FLAT_MAP_IDENTITY, expr.span, msg);\n-        }\n-    }\n+            if_chain! {\n+                if let hir::ExprKind::Closure(_, _, body_id, _, _) = flat_map_args[1].node;\n+                let body = cx.tcx.hir().body(body_id);\n \n-    if_chain! {\n-        if match_trait_method(cx, expr, &paths::ITERATOR);\n+                if body.arguments.len() == 1;\n+                if let hir::PatKind::Binding(_, _, binding_ident, _) = body.arguments[0].pat.node;\n+                if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = body.value.node;\n \n-        if flat_map_args.len() == 2;\n+                if path.segments.len() == 1;\n+                if path.segments[0].ident.as_str() == binding_ident.as_str();\n \n-        let expr = &flat_map_args[1];\n+                then {\n+                    let msg = \"called `flat_map(|x| x)` on an `Iterator`. \\\n+                               This can be simplified by calling `flatten().`\";\n+                    span_lint(cx, FLAT_MAP_IDENTITY, expr.span, msg);\n+                }\n+            }\n \n-        if let hir::ExprKind::Path(ref qpath) = expr.node;\n+            if_chain! {\n+                let expr = &flat_map_args[1];\n \n-        if match_qpath(qpath, &paths::STD_CONVERT_IDENTITY);\n+                if let hir::ExprKind::Path(ref qpath) = expr.node;\n \n-        then {\n-            let msg = \"called `flat_map(std::convert::identity)` on an `Iterator`. \\\n-                       This can be simplified by calling `flatten().`\";\n-            span_lint(cx, FLAT_MAP_IDENTITY, expr.span, msg);\n+                if match_qpath(qpath, &paths::STD_CONVERT_IDENTITY);\n+\n+                then {\n+                    let msg = \"called `flat_map(std::convert::identity)` on an `Iterator`. \\\n+                               This can be simplified by calling `flatten().`\";\n+                    span_lint(cx, FLAT_MAP_IDENTITY, expr.span, msg);\n+                }\n+            }\n         }\n     }\n }"}]}