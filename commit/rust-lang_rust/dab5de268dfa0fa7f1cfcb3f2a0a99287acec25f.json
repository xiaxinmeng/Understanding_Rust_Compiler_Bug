{"sha": "dab5de268dfa0fa7f1cfcb3f2a0a99287acec25f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYjVkZTI2OGRmYTBmYTdmMWNmY2IzZjJhMGE5OTI4N2FjZWMyNWY=", "commit": {"author": {"name": "Christopher Kendell", "email": "ckendell@outlook.com", "date": "2014-04-04T23:26:33Z"}, "committer": {"name": "Christopher Kendell", "email": "ckendell@outlook.com", "date": "2014-04-04T23:26:33Z"}, "message": "Removed all instance of `@` in code examples.", "tree": {"sha": "f352feb3ca23f8e43a6dc3e99c5f396f3317d70e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f352feb3ca23f8e43a6dc3e99c5f396f3317d70e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab5de268dfa0fa7f1cfcb3f2a0a99287acec25f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab5de268dfa0fa7f1cfcb3f2a0a99287acec25f", "html_url": "https://github.com/rust-lang/rust/commit/dab5de268dfa0fa7f1cfcb3f2a0a99287acec25f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab5de268dfa0fa7f1cfcb3f2a0a99287acec25f/comments", "author": {"login": "ckendell", "id": 1816984, "node_id": "MDQ6VXNlcjE4MTY5ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1816984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckendell", "html_url": "https://github.com/ckendell", "followers_url": "https://api.github.com/users/ckendell/followers", "following_url": "https://api.github.com/users/ckendell/following{/other_user}", "gists_url": "https://api.github.com/users/ckendell/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckendell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckendell/subscriptions", "organizations_url": "https://api.github.com/users/ckendell/orgs", "repos_url": "https://api.github.com/users/ckendell/repos", "events_url": "https://api.github.com/users/ckendell/events{/privacy}", "received_events_url": "https://api.github.com/users/ckendell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ckendell", "id": 1816984, "node_id": "MDQ6VXNlcjE4MTY5ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1816984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckendell", "html_url": "https://github.com/ckendell", "followers_url": "https://api.github.com/users/ckendell/followers", "following_url": "https://api.github.com/users/ckendell/following{/other_user}", "gists_url": "https://api.github.com/users/ckendell/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckendell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckendell/subscriptions", "organizations_url": "https://api.github.com/users/ckendell/orgs", "repos_url": "https://api.github.com/users/ckendell/repos", "events_url": "https://api.github.com/users/ckendell/events{/privacy}", "received_events_url": "https://api.github.com/users/ckendell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51ea4fb17f8a6c37220b971dd8c7f343f9fdcea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/51ea4fb17f8a6c37220b971dd8c7f343f9fdcea2", "html_url": "https://github.com/rust-lang/rust/commit/51ea4fb17f8a6c37220b971dd8c7f343f9fdcea2"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "d0463ca17d3e0c0e0395332333fc08db3ec5b545", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dab5de268dfa0fa7f1cfcb3f2a0a99287acec25f/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/dab5de268dfa0fa7f1cfcb3f2a0a99287acec25f/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=dab5de268dfa0fa7f1cfcb3f2a0a99287acec25f", "patch": "@@ -1520,7 +1520,7 @@ can sometimes make code awkward and parenthesis-filled.\n # struct Point { x: f64, y: f64 }\n # enum Shape { Rectangle(Point, Point) }\n # impl Shape { fn area(&self) -> int { 0 } }\n-let start = @Point { x: 10.0, y: 20.0 };\n+let start = ~Point { x: 10.0, y: 20.0 };\n let end = ~Point { x: (*start).x + 100.0, y: (*start).y + 100.0 };\n let rect = &Rectangle(*start, *end);\n let area = (*rect).area();\n@@ -1534,7 +1534,7 @@ dot), so in most cases, explicitly dereferencing the receiver is not necessary.\n # struct Point { x: f64, y: f64 }\n # enum Shape { Rectangle(Point, Point) }\n # impl Shape { fn area(&self) -> int { 0 } }\n-let start = @Point { x: 10.0, y: 20.0 };\n+let start = ~Point { x: 10.0, y: 20.0 };\n let end = ~Point { x: start.x + 100.0, y: start.y + 100.0 };\n let rect = &Rectangle(*start, *end);\n let area = rect.area();\n@@ -1546,7 +1546,7 @@ something silly like\n \n ~~~\n # struct Point { x: f64, y: f64 }\n-let point = &@~Point { x: 10.0, y: 20.0 };\n+let point = &~Point { x: 10.0, y: 20.0 };\n println!(\"{:f}\", point.x);\n ~~~\n \n@@ -1907,7 +1907,6 @@ to a reference.\n // As with typical function arguments, owned pointers\n // are automatically converted to references\n \n-(@s).draw_reference();\n (~s).draw_reference();\n \n // Unlike typical function arguments, the self value will\n@@ -1918,7 +1917,7 @@ s.draw_reference();\n (& &s).draw_reference();\n \n // ... and dereferenced and borrowed\n-(&@~s).draw_reference();\n+(&~s).draw_reference();\n ~~~\n \n Implementations may also define standalone (sometimes called \"static\")\n@@ -2403,7 +2402,7 @@ that, like strings and vectors, objects have dynamic size and may\n only be referred to via one of the pointer types.\n Other pointer types work as well.\n Casts to traits may only be done with compatible pointers so,\n-for example, an `@Circle` may not be cast to an `~Drawable`.\n+for example, an `&Circle` may not be cast to an `~Drawable`.\n \n ~~~\n # type Circle = int; type Rectangle = int;\n@@ -2506,8 +2505,8 @@ use std::f64::consts::PI;\n # impl Circle for CircleStruct { fn radius(&self) -> f64 { (self.area() / PI).sqrt() } }\n # impl Shape for CircleStruct { fn area(&self) -> f64 { PI * square(self.radius) } }\n \n-let concrete = @CircleStruct{center:Point{x:3.0,y:4.0},radius:5.0};\n-let mycircle: @Circle = concrete as @Circle;\n+let concrete = ~CircleStruct{center:Point{x:3.0,y:4.0},radius:5.0};\n+let mycircle: ~Circle = concrete as ~Circle;\n let nonsense = mycircle.radius() * mycircle.area();\n ~~~\n "}]}