{"sha": "7c2db89ce4951014a7fbec62ae81bda9abcf3657", "node_id": "C_kwDOAAsO6NoAKDdjMmRiODljZTQ5NTEwMTRhN2ZiZWM2MmFlODFiZGE5YWJjZjM2NTc", "commit": {"author": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2022-11-22T05:29:00Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T02:51:37Z"}, "message": "Add LLVM KCFI support to the Rust compiler\n\nThis commit adds LLVM Kernel Control Flow Integrity (KCFI) support to\nthe Rust compiler. It initially provides forward-edge control flow\nprotection for operating systems kernels for Rust-compiled code only by\naggregating function pointers in groups identified by their return and\nparameter types. (See llvm/llvm-project@cff5bef.)\n\nForward-edge control flow protection for C or C++ and Rust -compiled\ncode \"mixed binaries\" (i.e., for when C or C++ and Rust -compiled code\nshare the same virtual address space) will be provided in later work as\npart of this project by identifying C char and integer type uses at the\ntime types are encoded (see Type metadata in the design document in the\ntracking issue #89653).\n\nLLVM KCFI can be enabled with -Zsanitizer=kcfi.\n\nCo-authored-by: bjorn3 <17426603+bjorn3@users.noreply.github.com>", "tree": {"sha": "dfc35d72b3cd4666cd219f69e8ca3eb37bf7b453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfc35d72b3cd4666cd219f69e8ca3eb37bf7b453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c2db89ce4951014a7fbec62ae81bda9abcf3657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2db89ce4951014a7fbec62ae81bda9abcf3657", "html_url": "https://github.com/rust-lang/rust/commit/7c2db89ce4951014a7fbec62ae81bda9abcf3657", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c2db89ce4951014a7fbec62ae81bda9abcf3657/comments", "author": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43f868b1c3efa4fcf2526e9600c0f047c19a3eb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/43f868b1c3efa4fcf2526e9600c0f047c19a3eb7", "html_url": "https://github.com/rust-lang/rust/commit/43f868b1c3efa4fcf2526e9600c0f047c19a3eb7"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "eacd76c6ea0e6591474da03b3392a5a1f80f55c3", "filename": "src/type_.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c2db89ce4951014a7fbec62ae81bda9abcf3657/src%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c2db89ce4951014a7fbec62ae81bda9abcf3657/src%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_.rs?ref=7c2db89ce4951014a7fbec62ae81bda9abcf3657", "patch": "@@ -300,4 +300,8 @@ impl<'gcc, 'tcx> TypeMembershipMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         // Unsupported.\n         self.context.new_rvalue_from_int(self.int_type, 0)\n     }\n+\n+    fn set_kcfi_type_metadata(&self, _function: RValue<'gcc>, _kcfi_typeid: u32) {\n+        // Unsupported.\n+    }\n }"}]}