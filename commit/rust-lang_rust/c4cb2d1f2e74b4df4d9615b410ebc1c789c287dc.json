{"sha": "c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0Y2IyZDFmMmU3NGI0ZGY0ZDk2MTViNDEwZWJjMWM3ODljMjg3ZGM=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-08-22T05:20:00Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-08-22T05:20:00Z"}, "message": "Add [T]::swap_with_slice\n\nThe safe version of a method from ptr, like [T]::copy_from_slice", "tree": {"sha": "0ca7bece42e436e7aab0f7d12ee7aedda67d2c83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ca7bece42e436e7aab0f7d12ee7aedda67d2c83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc", "html_url": "https://github.com/rust-lang/rust/commit/c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8df670b6a60f245d266dbd0b650a549b7b806bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/8df670b6a60f245d266dbd0b650a549b7b806bac", "html_url": "https://github.com/rust-lang/rust/commit/8df670b6a60f245d266dbd0b650a549b7b806bac"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "4e91be365e2b91ec4afa9be0e7671d6bcb642a77", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc", "patch": "@@ -121,7 +121,7 @@\n #![feature(unsize)]\n #![feature(allocator_internals)]\n \n-#![cfg_attr(not(test), feature(fused, fn_traits, placement_new_protocol))]\n+#![cfg_attr(not(test), feature(fused, fn_traits, placement_new_protocol, swap_with_slice))]\n #![cfg_attr(test, feature(test, box_heap))]\n \n // Allow testing this library"}, {"sha": "cbf242e884a70cda7258c98aa969b1f783b028ba", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc", "patch": "@@ -1461,6 +1461,31 @@ impl<T> [T] {\n         core_slice::SliceExt::copy_from_slice(self, src)\n     }\n \n+    /// Swaps all elements in `self` with those in `src`.\n+    ///\n+    /// The length of `src` must be the same as `self`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if the two slices have different lengths.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(swap_with_slice)]\n+    ///\n+    /// let mut src = [1, 2, 3];\n+    /// let mut dst = [7, 8, 9];\n+    ///\n+    /// src.swap_with_slice(&mut dst);\n+    /// assert_eq!(src, [7, 8, 9]);\n+    /// assert_eq!(dst, [1, 2, 3]);\n+    /// ```\n+    #[unstable(feature = \"swap_with_slice\", issue = \"44030\")]\n+    pub fn swap_with_slice(&mut self, src: &mut [T]) {\n+        core_slice::SliceExt::swap_with_slice(self, src)\n+    }\n+\n     /// Copies `self` into a new `Vec`.\n     ///\n     /// # Examples"}, {"sha": "31d8266510a1ea652cb400e407829307f90938b5", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=c4cb2d1f2e74b4df4d9615b410ebc1c789c287dc", "patch": "@@ -212,6 +212,9 @@ pub trait SliceExt {\n     #[stable(feature = \"copy_from_slice\", since = \"1.9.0\")]\n     fn copy_from_slice(&mut self, src: &[Self::Item]) where Self::Item: Copy;\n \n+    #[unstable(feature = \"swap_with_slice\", issue = \"44030\")]\n+    fn swap_with_slice(&mut self, src: &mut [Self::Item]);\n+\n     #[stable(feature = \"sort_unstable\", since = \"1.20.0\")]\n     fn sort_unstable(&mut self)\n         where Self::Item: Ord;\n@@ -673,6 +676,16 @@ impl<T> SliceExt for [T] {\n         }\n     }\n \n+    #[inline]\n+    fn swap_with_slice(&mut self, src: &mut [T]) {\n+        assert!(self.len() == src.len(),\n+                \"destination and source slices have different lengths\");\n+        unsafe {\n+            ptr::swap_nonoverlapping(\n+                self.as_mut_ptr(), src.as_mut_ptr(), self.len());\n+        }\n+    }\n+\n     #[inline]\n     fn binary_search_by_key<'a, B, F, Q: ?Sized>(&'a self, b: &Q, mut f: F) -> Result<usize, usize>\n         where F: FnMut(&'a Self::Item) -> B,"}]}