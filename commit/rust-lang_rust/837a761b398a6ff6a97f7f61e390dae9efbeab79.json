{"sha": "837a761b398a6ff6a97f7f61e390dae9efbeab79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzN2E3NjFiMzk4YTZmZjZhOTdmN2Y2MWUzOTBkYWU5ZWZiZWFiNzk=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-07-03T21:49:21Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-07-03T21:55:14Z"}, "message": "Document the where keyword", "tree": {"sha": "5615b6fdd1379469bb27f75a32dd938898fe7bc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5615b6fdd1379469bb27f75a32dd938898fe7bc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837a761b398a6ff6a97f7f61e390dae9efbeab79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837a761b398a6ff6a97f7f61e390dae9efbeab79", "html_url": "https://github.com/rust-lang/rust/commit/837a761b398a6ff6a97f7f61e390dae9efbeab79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837a761b398a6ff6a97f7f61e390dae9efbeab79/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f844ea1e561475e6023282ef167e76bc973773ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/f844ea1e561475e6023282ef167e76bc973773ef", "html_url": "https://github.com/rust-lang/rust/commit/f844ea1e561475e6023282ef167e76bc973773ef"}], "stats": {"total": 137, "additions": 135, "deletions": 2}, "files": [{"sha": "058a89772d41076fed0c06c2604b36bdc5d2c1ee", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 135, "deletions": 2, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/837a761b398a6ff6a97f7f61e390dae9efbeab79/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837a761b398a6ff6a97f7f61e390dae9efbeab79/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=837a761b398a6ff6a97f7f61e390dae9efbeab79", "patch": "@@ -1651,9 +1651,142 @@ mod use_keyword {}\n //\n /// Add constraints that must be upheld to use an item.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `where` allows specifying constraints on lifetime and generic parameters.\n+/// The [RFC] introducing `where` contains detailed informations about the\n+/// keyword.\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// # Examples\n+///\n+/// `where` can be used for constraints with traits:\n+///\n+/// ```rust\n+/// fn new<T: Default>() -> T {\n+///     T::default()\n+/// }\n+///\n+/// fn new_where<T>() -> T\n+/// where\n+///     T: Default,\n+/// {\n+///     T::default()\n+/// }\n+///\n+/// assert_eq!(0.0, new());\n+/// assert_eq!(0.0, new_where());\n+///\n+/// assert_eq!(0, new());\n+/// assert_eq!(0, new_where());\n+/// ```\n+///\n+/// `where` can also be used for lifetimes.\n+///\n+/// This compiles because the lifetime of `longer` is superior to the lifetime\n+/// of `shorter`, thus the constraint is respected:\n+///\n+/// ```rust\n+/// fn select<'a, 'b: 'a>(s1: &'a str, s2: &'b str, second: bool) -> &'a str {\n+///     if second {\n+///         s2\n+///     } else {\n+///         s1\n+///     }\n+/// }\n+///\n+/// fn select_where<'a, 'b>(s1: &'a str, s2: &'b str, second: bool) -> &'a str\n+/// where\n+///     'b: 'a,\n+/// {\n+///     if second {\n+///         s2\n+///     } else {\n+///         s1\n+///     }\n+/// }\n+///\n+/// let outer = String::from(\"Long living ref\");\n+/// let longer = &outer;\n+/// {\n+///     let inner = String::from(\"Long living ref\");\n+///     let shorter = &inner;\n+///\n+///     assert_eq!(select(shorter, longer, false), shorter);\n+///     assert_eq!(select(shorter, longer, true), longer);\n+///\n+///     assert_eq!(select_where(shorter, longer, false), shorter);\n+///     assert_eq!(select_where(shorter, longer, true), longer);\n+/// }\n+/// ```\n+///\n+/// On the other hand, this will not compile: `shorter` does not have a lifetime\n+/// that respects the constraint imposed by the `select` and `select_where`\n+/// functions.\n+///\n+/// ```rust,compile_fail,E0597\n+/// # fn select<'a, 'b: 'a>(s1: &'a str, s2: &'b str, second: bool) -> &'a str {\n+/// #     if second {\n+/// #         s2\n+/// #     } else {\n+/// #         s1\n+/// #     }\n+/// # }\n+/// #\n+/// # fn select_where<'a, 'b>(s1: &'a str, s2: &'b str, second: bool) -> &'a str\n+/// # where\n+/// #     'b: 'a,\n+/// # {\n+/// #     if second {\n+/// #         s2\n+/// #     } else {\n+/// #         s1\n+/// #     }\n+/// # }\n+/// let outer = String::from(\"Long living ref\");\n+/// let longer = &outer;\n+/// let res1;\n+/// let res2;\n+/// {\n+///     let inner = String::from(\"Long living ref\");\n+///     let shorter = &inner;\n+///\n+///     res1 = select(longer, shorter, false);\n+///     res2 = select_where(longer, shorter, false);\n+/// }\n+/// assert_eq!(res1, &outer);\n+/// assert_eq!(res2, &outer);\n+/// ```\n+///\n+/// `where` can also be used to express more complicated constraints that cannot\n+/// be written with the `<T: Trait>` syntax:\n+///\n+/// ```rust\n+/// fn first_or_default<I>(mut i: I) -> I::Item\n+/// where\n+///     I: Iterator,\n+///     I::Item: Default,\n+/// {\n+///     i.next().unwrap_or_else(I::Item::default)\n+/// }\n+///\n+/// assert_eq!(first_or_default(vec![1, 2, 3].into_iter()), 1);\n+/// assert_eq!(first_or_default(Vec::<i32>::new().into_iter()), 0);\n+/// ```\n+///\n+/// `where` is available anywhere generic and lifetime parameters are available:\n+///\n+/// ```rust\n+/// # #![allow(dead_code)]\n+/// // The Cow type from the standard library uses where to impose constraints\n+/// // on its parameters.\n+/// pub enum Cow<'a, B>\n+/// where\n+///     B: 'a + ToOwned + ?Sized,\n+///  {\n+///     Borrowed(&'a B),\n+///     Owned(<B as ToOwned>::Owned),\n+/// }\n+/// ```\n+///\n+/// [RFC]: https://github.com/rust-lang/rfcs/blob/master/text/0135-where.md\n mod where_keyword {}\n \n // 2018 Edition keywords"}]}