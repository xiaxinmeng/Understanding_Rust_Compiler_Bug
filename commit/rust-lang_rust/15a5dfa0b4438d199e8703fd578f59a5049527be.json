{"sha": "15a5dfa0b4438d199e8703fd578f59a5049527be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTVkZmEwYjQ0MzhkMTk5ZTg3MDNmZDU3OGY1OWE1MDQ5NTI3YmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-21T05:41:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-21T05:41:13Z"}, "message": "Auto merge of #58913 - Milack27:patch_buf_reader, r=joshtriplett\n\nAdd new test case for possible bug in BufReader\n\nWhen reading a large chunk from a BufReader, if all the bytes from the buffer have been already consumed, the internal buffer is bypassed entirely. However, it is not invalidated, and it's possible to access its contents using the `seek_relative` method, because it tries to reuse the existing buffer.", "tree": {"sha": "51e15ceab136bccaf4555d033d83b3d517c39837", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51e15ceab136bccaf4555d033d83b3d517c39837"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a5dfa0b4438d199e8703fd578f59a5049527be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a5dfa0b4438d199e8703fd578f59a5049527be", "html_url": "https://github.com/rust-lang/rust/commit/15a5dfa0b4438d199e8703fd578f59a5049527be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a5dfa0b4438d199e8703fd578f59a5049527be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20958fc81f5be100fba90db91539d58fa89c948e", "url": "https://api.github.com/repos/rust-lang/rust/commits/20958fc81f5be100fba90db91539d58fa89c948e", "html_url": "https://github.com/rust-lang/rust/commit/20958fc81f5be100fba90db91539d58fa89c948e"}, {"sha": "c36d91c5cc446a4688186be1071e0e139ba9d38f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c36d91c5cc446a4688186be1071e0e139ba9d38f", "html_url": "https://github.com/rust-lang/rust/commit/c36d91c5cc446a4688186be1071e0e139ba9d38f"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "4668e3ec7eabda0a882347f1ef09d050bf713c30", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/15a5dfa0b4438d199e8703fd578f59a5049527be/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5dfa0b4438d199e8703fd578f59a5049527be/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=15a5dfa0b4438d199e8703fd578f59a5049527be", "patch": "@@ -193,6 +193,13 @@ impl<R> BufReader<R> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> R { self.inner }\n+\n+    /// Invalidates all data in the internal buffer.\n+    #[inline]\n+    fn discard_buffer(&mut self) {\n+        self.pos = 0;\n+        self.cap = 0;\n+    }\n }\n \n impl<R: Seek> BufReader<R> {\n@@ -227,6 +234,7 @@ impl<R: Read> Read for BufReader<R> {\n         // (larger than our internal buffer), bypass our internal buffer\n         // entirely.\n         if self.pos == self.cap && buf.len() >= self.buf.len() {\n+            self.discard_buffer();\n             return self.inner.read(buf);\n         }\n         let nread = {\n@@ -240,6 +248,7 @@ impl<R: Read> Read for BufReader<R> {\n     fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n         let total_len = bufs.iter().map(|b| b.len()).sum::<usize>();\n         if self.pos == self.cap && total_len >= self.buf.len() {\n+            self.discard_buffer();\n             return self.inner.read_vectored(bufs);\n         }\n         let nread = {\n@@ -325,14 +334,14 @@ impl<R: Seek> Seek for BufReader<R> {\n             } else {\n                 // seek backwards by our remainder, and then by the offset\n                 self.inner.seek(SeekFrom::Current(-remainder))?;\n-                self.pos = self.cap; // empty the buffer\n+                self.discard_buffer();\n                 result = self.inner.seek(SeekFrom::Current(n))?;\n             }\n         } else {\n             // Seeking with Start/End doesn't care about our buffer length.\n             result = self.inner.seek(pos)?;\n         }\n-        self.pos = self.cap; // empty the buffer\n+        self.discard_buffer();\n         Ok(result)\n     }\n }\n@@ -1068,6 +1077,40 @@ mod tests {\n         assert_eq!(reader.fill_buf().ok(), Some(&[2, 3][..]));\n     }\n \n+    #[test]\n+    fn test_buffered_reader_invalidated_after_read() {\n+        let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];\n+        let mut reader = BufReader::with_capacity(3, io::Cursor::new(inner));\n+\n+        assert_eq!(reader.fill_buf().ok(), Some(&[5, 6, 7][..]));\n+        reader.consume(3);\n+\n+        let mut buffer = [0, 0, 0, 0, 0];\n+        assert_eq!(reader.read(&mut buffer).ok(), Some(5));\n+        assert_eq!(buffer, [0, 1, 2, 3, 4]);\n+\n+        assert!(reader.seek_relative(-2).is_ok());\n+        let mut buffer = [0, 0];\n+        assert_eq!(reader.read(&mut buffer).ok(), Some(2));\n+        assert_eq!(buffer, [3, 4]);\n+    }\n+\n+    #[test]\n+    fn test_buffered_reader_invalidated_after_seek() {\n+        let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];\n+        let mut reader = BufReader::with_capacity(3, io::Cursor::new(inner));\n+\n+        assert_eq!(reader.fill_buf().ok(), Some(&[5, 6, 7][..]));\n+        reader.consume(3);\n+\n+        assert!(reader.seek(SeekFrom::Current(5)).is_ok());\n+\n+        assert!(reader.seek_relative(-2).is_ok());\n+        let mut buffer = [0, 0];\n+        assert_eq!(reader.read(&mut buffer).ok(), Some(2));\n+        assert_eq!(buffer, [3, 4]);\n+    }\n+\n     #[test]\n     fn test_buffered_reader_seek_underflow() {\n         // gimmick reader that yields its position modulo 256 for each byte"}]}