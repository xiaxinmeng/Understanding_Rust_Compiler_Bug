{"sha": "32e437161da5e60c660b86da9003b7f73ebb5676", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZTQzNzE2MWRhNWU2MGM2NjBiODZkYTkwMDNiN2Y3M2ViYjU2NzY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-08-11T12:01:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-08-30T06:50:38Z"}, "message": "rustc: implement a pretty mode to print ident/name's ctxt & gensyms.\n\n`--pretty expanded,hygiene` is helpful with debugging macro issues,\nsince two identifiers/names can be textually the same, but different\ninternally (resulting in weird \"undefined variable\" errors).", "tree": {"sha": "6de8bed0e2c88adc2f12927bebe94a3d4f395a06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6de8bed0e2c88adc2f12927bebe94a3d4f395a06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32e437161da5e60c660b86da9003b7f73ebb5676", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32e437161da5e60c660b86da9003b7f73ebb5676", "html_url": "https://github.com/rust-lang/rust/commit/32e437161da5e60c660b86da9003b7f73ebb5676", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32e437161da5e60c660b86da9003b7f73ebb5676/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddc8cc92c998b7d80c782d00d178c791ab564915", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc8cc92c998b7d80c782d00d178c791ab564915", "html_url": "https://github.com/rust-lang/rust/commit/ddc8cc92c998b7d80c782d00d178c791ab564915"}], "stats": {"total": 119, "additions": 116, "deletions": 3}, "files": [{"sha": "67dbc6f6a301da1f446412f0edc15b0e66d9bef2", "filename": "src/librustc/driver/pretty.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Flibrustc%2Fdriver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Flibrustc%2Fdriver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fpretty.rs?ref=32e437161da5e60c660b86da9003b7f73ebb5676", "patch": "@@ -42,6 +42,7 @@ pub enum PpSourceMode {\n     PpmTyped,\n     PpmIdentified,\n     PpmExpandedIdentified,\n+    PpmExpandedHygiene,\n }\n \n #[deriving(PartialEq, Show)]\n@@ -59,6 +60,7 @@ pub fn parse_pretty(sess: &Session, name: &str) -> (PpMode, Option<UserIdentifie\n         \"expanded\"     => PpmSource(PpmExpanded),\n         \"typed\"        => PpmSource(PpmTyped),\n         \"expanded,identified\" => PpmSource(PpmExpandedIdentified),\n+        \"expanded,hygiene\" => PpmSource(PpmExpandedHygiene),\n         \"identified\"   => PpmSource(PpmIdentified),\n         \"flowgraph\"    => PpmFlowGraph,\n         _ => {\n@@ -106,6 +108,10 @@ impl PpSourceMode {\n                 let annotation = IdentifiedAnnotation { sess: sess, ast_map: ast_map };\n                 f(&annotation, payload)\n             }\n+            PpmExpandedHygiene => {\n+                let annotation = HygieneAnnotation { sess: sess, ast_map: ast_map };\n+                f(&annotation, payload)\n+            }\n             PpmTyped => {\n                 let ast_map = ast_map.expect(\"--pretty=typed missing ast_map\");\n                 let analysis = driver::phase_3_run_analysis_passes(sess, krate, ast_map, id);\n@@ -191,6 +197,8 @@ impl pprust::PpAnn for IdentifiedAnnotation {\n             s: &mut pprust::State,\n             node: pprust::AnnNode) -> io::IoResult<()> {\n         match node {\n+            pprust::NodeIdent(_) | pprust::NodeName(_) => Ok(()),\n+\n             pprust::NodeItem(item) => {\n                 try!(pp::space(&mut s.s));\n                 s.synth_comment(item.id.to_string())\n@@ -212,6 +220,46 @@ impl pprust::PpAnn for IdentifiedAnnotation {\n     }\n }\n \n+struct HygieneAnnotation {\n+    sess: Session,\n+    ast_map: Option<ast_map::Map>,\n+}\n+\n+impl PrinterSupport for HygieneAnnotation {\n+    fn pp_ann<'a>(&'a self) -> &'a pprust::PpAnn { self as &pprust::PpAnn }\n+}\n+\n+impl SessionCarrier for HygieneAnnotation {\n+    fn sess<'a>(&'a self) -> &'a Session { &self.sess }\n+}\n+\n+impl AstMapCarrier for HygieneAnnotation {\n+    fn ast_map<'a>(&'a self) -> Option<&'a ast_map::Map> {\n+        self.ast_map.as_ref()\n+    }\n+}\n+\n+impl pprust::PpAnn for HygieneAnnotation {\n+    fn post(&self,\n+            s: &mut pprust::State,\n+            node: pprust::AnnNode) -> io::IoResult<()> {\n+        match node {\n+            pprust::NodeIdent(&ast::Ident { name: ast::Name(nm), ctxt }) => {\n+                try!(pp::space(&mut s.s));\n+                // FIXME #16420: this doesn't display the connections\n+                // between syntax contexts\n+                s.synth_comment(format!(\"{}#{}\", nm, ctxt))\n+            }\n+            pprust::NodeName(&ast::Name(nm)) => {\n+                try!(pp::space(&mut s.s));\n+                s.synth_comment(nm.to_string())\n+            }\n+            _ => Ok(())\n+        }\n+    }\n+}\n+\n+\n struct TypedAnnotation {\n     analysis: CrateAnalysis,\n }\n@@ -364,6 +412,7 @@ fn needs_ast_map(ppm: &PpMode, opt_uii: &Option<UserIdentifiedItem>) -> bool {\n \n         PpmSource(PpmExpanded) |\n         PpmSource(PpmExpandedIdentified) |\n+        PpmSource(PpmExpandedHygiene) |\n         PpmSource(PpmTyped) |\n         PpmFlowGraph => true\n     }\n@@ -376,6 +425,7 @@ fn needs_expansion(ppm: &PpMode) -> bool {\n \n         PpmSource(PpmExpanded) |\n         PpmSource(PpmExpandedIdentified) |\n+        PpmSource(PpmExpandedHygiene) |\n         PpmSource(PpmTyped) |\n         PpmFlowGraph => true\n     }"}, {"sha": "876789f99bc58722170e5275f9c05fe5be13aca2", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=32e437161da5e60c660b86da9003b7f73ebb5676", "patch": "@@ -111,6 +111,7 @@ impl<'a, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, O> {\n            ps: &mut pprust::State,\n            node: pprust::AnnNode) -> io::IoResult<()> {\n         let id = match node {\n+            pprust::NodeIdent(_) | pprust::NodeName(_) => 0,\n             pprust::NodeExpr(expr) => expr.id,\n             pprust::NodeBlock(blk) => blk.id,\n             pprust::NodeItem(_) => 0,"}, {"sha": "14ba4d73a4e9cb480b321bff87c95f5f3c04397d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=32e437161da5e60c660b86da9003b7f73ebb5676", "patch": "@@ -33,6 +33,8 @@ use std::io;\n use std::mem;\n \n pub enum AnnNode<'a> {\n+    NodeIdent(&'a ast::Ident),\n+    NodeName(&'a ast::Name),\n     NodeBlock(&'a ast::Block),\n     NodeItem(&'a ast::Item),\n     NodeExpr(&'a ast::Expr),\n@@ -1725,14 +1727,16 @@ impl<'a> State<'a> {\n     pub fn print_ident(&mut self, ident: ast::Ident) -> IoResult<()> {\n         if self.encode_idents_with_hygiene {\n             let encoded = ident.encode_with_hygiene();\n-            word(&mut self.s, encoded.as_slice())\n+            try!(word(&mut self.s, encoded.as_slice()))\n         } else {\n-            word(&mut self.s, token::get_ident(ident).get())\n+            try!(word(&mut self.s, token::get_ident(ident).get()))\n         }\n+        self.ann.post(self, NodeIdent(&ident))\n     }\n \n     pub fn print_name(&mut self, name: ast::Name) -> IoResult<()> {\n-        word(&mut self.s, token::get_name(name).get())\n+        try!(word(&mut self.s, token::get_name(name).get()));\n+        self.ann.post(self, NodeName(&name))\n     }\n \n     pub fn print_for_decl(&mut self, loc: &ast::Local,"}, {"sha": "11763446437d3f2f5e4cc50a0821dfa0e7280a07", "filename": "src/test/run-make/pretty-expanded-hygiene/Makefile", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2FMakefile?ref=32e437161da5e60c660b86da9003b7f73ebb5676", "patch": "@@ -0,0 +1,20 @@\n+-include ../tools.mk\n+\n+REPLACEMENT := s/[0-9][0-9]*\\#[0-9][0-9]*/$(shell date)/g\n+\n+all:\n+\t$(RUSTC) -o $(TMPDIR)/input.out --pretty expanded,hygiene input.rs\n+\n+\t# the name/ctxt numbers are very internals-dependent and thus\n+\t# change relatively frequently, and testing for their exact values\n+\t# them will fail annoyingly, so we just check their positions\n+\t# (using a non-constant replacement like this will make it less\n+\t# likely the compiler matches whatever other dummy value we\n+\t# choose).\n+\t#\n+\t# (These need to be out-of-place because OSX/BSD & GNU sed\n+\t# differ.)\n+\tsed \"$(REPLACEMENT)\" input.pp.rs > $(TMPDIR)/input.pp.rs\n+\tsed \"$(REPLACEMENT)\" $(TMPDIR)/input.out > $(TMPDIR)/input.out.replaced\n+\n+\tdiff -u $(TMPDIR)/input.out.replaced $(TMPDIR)/input.pp.rs"}, {"sha": "bf60784ab58b9e1f748a3a8aa050d9cf43fb573e", "filename": "src/test/run-make/pretty-expanded-hygiene/input.pp.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs?ref=32e437161da5e60c660b86da9003b7f73ebb5676", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+// minimal junk\n+#![no_std]\n+\n+\n+fn bar /* 62#0 */() { let x /* 59#2 */ = 1; y /* 61#4 */ + x /* 59#5 */ }"}, {"sha": "c9d603c2e1cfbf180b442b2bc4c6a70a1d4587da", "filename": "src/test/run-make/pretty-expanded-hygiene/input.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e437161da5e60c660b86da9003b7f73ebb5676/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs?ref=32e437161da5e60c660b86da9003b7f73ebb5676", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+// minimal junk\n+#![no_std]\n+\n+macro_rules! foo {\n+    ($x: ident) => { y + $x }\n+}\n+\n+fn bar() {\n+    let x = 1;\n+    foo!(x)\n+}"}]}