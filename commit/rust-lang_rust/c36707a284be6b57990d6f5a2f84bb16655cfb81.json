{"sha": "c36707a284be6b57990d6f5a2f84bb16655cfb81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNjcwN2EyODRiZTZiNTc5OTBkNmY1YTJmODRiYjE2NjU1Y2ZiODE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-23T09:01:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-23T20:42:54Z"}, "message": "Add `ScopeAuxiliaryVec`, return MIR+aux via tuple\n\nIt's nice to be able to index with a scope-id,\nbut coherence rules prevent us from implementing\n`Index<ScopeId>` for `Vec<ScopeAuxiliary>`, and I'd\nprefer that `ScopeAuxiliary` remain in librustc_mir,\njust for compilation time reasons.", "tree": {"sha": "efc5a4b120cf72a13bbe94bf56203c1c05f71685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efc5a4b120cf72a13bbe94bf56203c1c05f71685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c36707a284be6b57990d6f5a2f84bb16655cfb81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c36707a284be6b57990d6f5a2f84bb16655cfb81", "html_url": "https://github.com/rust-lang/rust/commit/c36707a284be6b57990d6f5a2f84bb16655cfb81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c36707a284be6b57990d6f5a2f84bb16655cfb81/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70d0123082913e244739d64692eec7063b9c79c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/70d0123082913e244739d64692eec7063b9c79c5", "html_url": "https://github.com/rust-lang/rust/commit/70d0123082913e244739d64692eec7063b9c79c5"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "b1286e935b68434e3831589064b9bbea7446ba13", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c36707a284be6b57990d6f5a2f84bb16655cfb81/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36707a284be6b57990d6f5a2f84bb16655cfb81/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=c36707a284be6b57990d6f5a2f84bb16655cfb81", "patch": "@@ -633,7 +633,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             span: span,\n         });\n         let index = index as u32;\n-        let extent = self.scope_auxiliary[var_scope_id.index()].extent;\n+        let extent = self.scope_auxiliary[var_scope_id].extent;\n         self.schedule_drop(span, extent, &Lvalue::Var(index), var_ty);\n         self.var_indices.insert(var_id, index);\n "}, {"sha": "c00acae7dc4758ef2bb265130d620278c0711e5c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c36707a284be6b57990d6f5a2f84bb16655cfb81/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36707a284be6b57990d6f5a2f84bb16655cfb81/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=c36707a284be6b57990d6f5a2f84bb16655cfb81", "patch": "@@ -14,7 +14,7 @@ use rustc::middle::ty::{FnOutput, Ty};\n use rustc::mir::repr::*;\n use rustc_data_structures::fnv::FnvHashMap;\n use rustc_front::hir;\n-\n+use std::ops::{Index, IndexMut};\n use syntax::ast;\n use syntax::codemap::Span;\n \n@@ -33,7 +33,7 @@ pub struct Builder<'a, 'tcx: 'a> {\n     // but these are liable to get out of date once optimization\n     // begins. They are also hopefully temporary, and will be\n     // no longer needed when we adopt graph-based regions.\n-    scope_auxiliary: Vec<ScopeAuxiliary>,\n+    scope_auxiliary: ScopeAuxiliaryVec,\n \n     // the current set of loops; see the `scope` module for more\n     // details\n@@ -85,9 +85,24 @@ pub struct Location {\n     pub statement_index: usize,\n }\n \n-pub struct MirAndScopeAuxiliary<'tcx> {\n-    pub mir: Mir<'tcx>,\n-    pub scope_auxiliary: Vec<ScopeAuxiliary>,\n+pub struct ScopeAuxiliaryVec {\n+    pub vec: Vec<ScopeAuxiliary>\n+}\n+\n+impl Index<ScopeId> for ScopeAuxiliaryVec {\n+    type Output = ScopeAuxiliary;\n+\n+    #[inline]\n+    fn index(&self, index: ScopeId) -> &ScopeAuxiliary {\n+        &self.vec[index.index()]\n+    }\n+}\n+\n+impl IndexMut<ScopeId> for ScopeAuxiliaryVec {\n+    #[inline]\n+    fn index_mut(&mut self, index: ScopeId) -> &mut ScopeAuxiliary {\n+        &mut self.vec[index.index()]\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -143,7 +158,7 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n                           argument_extent: CodeExtent,\n                           return_ty: FnOutput<'tcx>,\n                           ast_block: &'tcx hir::Block)\n-                          -> MirAndScopeAuxiliary<'tcx> {\n+                          -> (Mir<'tcx>, ScopeAuxiliaryVec) {\n     let cfg = CFG { basic_blocks: vec![] };\n \n     let mut builder = Builder {\n@@ -152,7 +167,7 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n         fn_span: span,\n         scopes: vec![],\n         scope_datas: vec![],\n-        scope_auxiliary: vec![],\n+        scope_auxiliary: ScopeAuxiliaryVec { vec: vec![] },\n         loop_scopes: vec![],\n         temp_decls: vec![],\n         var_decls: vec![],\n@@ -188,8 +203,8 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n                        true\n                    }));\n \n-    MirAndScopeAuxiliary {\n-        mir: Mir {\n+    (\n+        Mir {\n             basic_blocks: builder.cfg.basic_blocks,\n             scopes: builder.scope_datas,\n             var_decls: builder.var_decls,\n@@ -198,8 +213,8 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n             return_ty: return_ty,\n             span: span\n         },\n-        scope_auxiliary: builder.scope_auxiliary,\n-    }\n+        builder.scope_auxiliary,\n+    )\n }\n \n impl<'a,'tcx> Builder<'a,'tcx> {"}, {"sha": "00d517cc255a7d3f8d78ca3b1b34dd8c1f6c5928", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c36707a284be6b57990d6f5a2f84bb16655cfb81/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36707a284be6b57990d6f5a2f84bb16655cfb81/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=c36707a284be6b57990d6f5a2f84bb16655cfb81", "patch": "@@ -257,7 +257,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             free: None,\n             cached_block: None,\n         });\n-        self.scope_auxiliary.push(ScopeAuxiliary {\n+        self.scope_auxiliary.vec.push(ScopeAuxiliary {\n             extent: extent,\n             dom: self.cfg.current_location(entry),\n             postdoms: vec![]\n@@ -279,7 +279,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         let scope = self.scopes.pop().unwrap();\n         assert_eq!(scope.extent, extent);\n         unpack!(block = build_scope_drops(&mut self.cfg, &scope, &self.scopes, block));\n-        self.scope_auxiliary[scope.id.index()]\n+        self.scope_auxiliary[scope.id]\n             .postdoms\n             .push(self.cfg.current_location(block));\n         block.unit()\n@@ -313,7 +313,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 self.cfg.terminate(block, scope.id, span, free);\n                 block = next;\n             }\n-            self.scope_auxiliary[scope.id.index()]\n+            self.scope_auxiliary[scope.id]\n                 .postdoms\n                 .push(self.cfg.current_location(block));\n         }"}, {"sha": "006c55633f85bf7b2ecfeb03c8e3dae0692afc7f", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c36707a284be6b57990d6f5a2f84bb16655cfb81/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36707a284be6b57990d6f5a2f84bb16655cfb81/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=c36707a284be6b57990d6f5a2f84bb16655cfb81", "patch": "@@ -19,7 +19,7 @@\n extern crate syntax;\n extern crate rustc_front;\n \n-use build::{self, MirAndScopeAuxiliary};\n+use build;\n use rustc::dep_graph::DepNode;\n use rustc::mir::repr::Mir;\n use pretty;\n@@ -183,7 +183,7 @@ fn build_mir<'a,'tcx:'a>(cx: Cx<'a,'tcx>,\n     let parameter_scope =\n         cx.tcx().region_maps.lookup_code_extent(\n             CodeExtentData::ParameterScope { fn_id: fn_id, body_id: body.id });\n-    let MirAndScopeAuxiliary { mut mir, scope_auxiliary } =\n+    let (mut mir, scope_auxiliary) =\n         build::construct(cx,\n                          span,\n                          implicit_arg_tys,"}, {"sha": "834897f8eaee0d77d749a9922a11217a9c101707", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c36707a284be6b57990d6f5a2f84bb16655cfb81/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c36707a284be6b57990d6f5a2f84bb16655cfb81/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=c36707a284be6b57990d6f5a2f84bb16655cfb81", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use build::{Location, ScopeAuxiliary};\n+use build::{Location, ScopeAuxiliaryVec};\n use rustc::mir::repr::*;\n use rustc::middle::ty::{self, TyCtxt};\n use rustc_data_structures::fnv::FnvHashMap;\n@@ -39,7 +39,7 @@ pub fn dump_mir<'a, 'tcx>(tcx: &TyCtxt<'tcx>,\n                           disambiguator: &Display,\n                           node_id: NodeId,\n                           mir: &Mir<'tcx>,\n-                          auxiliary: Option<&Vec<ScopeAuxiliary>>) {\n+                          auxiliary: Option<&ScopeAuxiliaryVec>) {\n     let filters = match tcx.sess.opts.debugging_opts.dump_mir {\n         None => return,\n         Some(ref filters) => filters,\n@@ -91,12 +91,12 @@ pub fn write_mir_fn<'tcx>(tcx: &TyCtxt<'tcx>,\n                           node_id: NodeId,\n                           mir: &Mir<'tcx>,\n                           w: &mut Write,\n-                          auxiliary: Option<&Vec<ScopeAuxiliary>>)\n+                          auxiliary: Option<&ScopeAuxiliaryVec>)\n                           -> io::Result<()> {\n     // compute scope/entry exit annotations\n     let mut annotations = FnvHashMap();\n     if let Some(auxiliary) = auxiliary {\n-        for (index, auxiliary) in auxiliary.iter().enumerate() {\n+        for (index, auxiliary) in auxiliary.vec.iter().enumerate() {\n             let scope_id = ScopeId::new(index);\n \n             annotations.entry(auxiliary.dom)\n@@ -183,7 +183,7 @@ fn comment(tcx: &TyCtxt,\n \n fn write_scope_tree(tcx: &TyCtxt,\n                     mir: &Mir,\n-                    auxiliary: Option<&Vec<ScopeAuxiliary>>,\n+                    auxiliary: Option<&ScopeAuxiliaryVec>,\n                     scope_tree: &FnvHashMap<Option<ScopeId>, Vec<ScopeId>>,\n                     w: &mut Write,\n                     parent: Option<ScopeId>,\n@@ -201,7 +201,7 @@ fn write_scope_tree(tcx: &TyCtxt,\n         }\n \n         if let Some(auxiliary) = auxiliary {\n-            let extent = auxiliary[child.index()].extent;\n+            let extent = auxiliary[child].extent;\n             let data = tcx.region_maps.code_extent_data(extent);\n             writeln!(w, \"{0:1$}Extent: {2:?}\", \"\", indent, data)?;\n         }"}]}