{"sha": "2a1e11b36fe90460b139f2f6aee034f63e8252bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMWUxMWIzNmZlOTA0NjBiMTM5ZjJmNmFlZTAzNGY2M2U4MjUyYmY=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-07-12T16:56:18Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-07-12T17:31:49Z"}, "message": "complete fields in enum variants", "tree": {"sha": "8275d86d2d105a2bd2a5d601af9b6372a523107d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8275d86d2d105a2bd2a5d601af9b6372a523107d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a1e11b36fe90460b139f2f6aee034f63e8252bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1e11b36fe90460b139f2f6aee034f63e8252bf", "html_url": "https://github.com/rust-lang/rust/commit/2a1e11b36fe90460b139f2f6aee034f63e8252bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a1e11b36fe90460b139f2f6aee034f63e8252bf/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bb81d7418dbc4c295d31d261441b67dba4c0f76", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb81d7418dbc4c295d31d261441b67dba4c0f76", "html_url": "https://github.com/rust-lang/rust/commit/8bb81d7418dbc4c295d31d261441b67dba4c0f76"}], "stats": {"total": 132, "additions": 116, "deletions": 16}, "files": [{"sha": "8afdac801d5b4435709716c4ab41f8e1fb99f5e6", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a1e11b36fe90460b139f2f6aee034f63e8252bf/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1e11b36fe90460b139f2f6aee034f63e8252bf/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=2a1e11b36fe90460b139f2f6aee034f63e8252bf", "patch": "@@ -185,6 +185,13 @@ pub enum VariantDef {\n impl_froms!(VariantDef: Struct, EnumVariant);\n \n impl VariantDef {\n+    pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n+        match self {\n+            VariantDef::Struct(it) => it.fields(db),\n+            VariantDef::EnumVariant(it) => it.fields(db),\n+        }\n+    }\n+\n     pub(crate) fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n         match self {\n             VariantDef::Struct(it) => it.field(db, name),"}, {"sha": "55d1298cfda025d29bf91b6e1dfcfb89b7688630", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1e11b36fe90460b139f2f6aee034f63e8252bf/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1e11b36fe90460b139f2f6aee034f63e8252bf/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=2a1e11b36fe90460b139f2f6aee034f63e8252bf", "patch": "@@ -55,7 +55,7 @@ use crate::{\n };\n \n pub use self::{\n-    adt::AdtDef,\n+    adt::{AdtDef, VariantDef},\n     either::Either,\n     expr::ExprScopes,\n     generics::{GenericParam, GenericParams, HasGenericParams},"}, {"sha": "071c1bb1887686c56e6220544c5b92cff1f12537", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a1e11b36fe90460b139f2f6aee034f63e8252bf/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1e11b36fe90460b139f2f6aee034f63e8252bf/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=2a1e11b36fe90460b139f2f6aee034f63e8252bf", "patch": "@@ -266,6 +266,11 @@ impl SourceAnalyzer {\n         self.infer.as_ref()?.field_resolution(expr_id)\n     }\n \n+    pub fn resolve_variant(&self, struct_lit: &ast::StructLit) -> Option<crate::VariantDef> {\n+        let expr_id = self.body_source_map.as_ref()?.node_expr(struct_lit.into())?;\n+        self.infer.as_ref()?.variant_resolution(expr_id)\n+    }\n+\n     pub fn resolve_macro_call(\n         &self,\n         db: &impl HirDatabase,"}, {"sha": "5ad4f73ec1e7bbdf89ab72a1f160efe59807b758", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a1e11b36fe90460b139f2f6aee034f63e8252bf/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1e11b36fe90460b139f2f6aee034f63e8252bf/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=2a1e11b36fe90460b139f2f6aee034f63e8252bf", "patch": "@@ -113,6 +113,7 @@ pub struct InferenceResult {\n     method_resolutions: FxHashMap<ExprId, Function>,\n     /// For each field access expr, records the field it resolves to.\n     field_resolutions: FxHashMap<ExprId, StructField>,\n+    variant_resolutions: FxHashMap<ExprId, VariantDef>,\n     /// For each associated item record what it resolves to\n     assoc_resolutions: FxHashMap<ExprOrPatId, ImplItem>,\n     diagnostics: Vec<InferenceDiagnostic>,\n@@ -127,6 +128,9 @@ impl InferenceResult {\n     pub fn field_resolution(&self, expr: ExprId) -> Option<StructField> {\n         self.field_resolutions.get(&expr).copied()\n     }\n+    pub fn variant_resolution(&self, expr: ExprId) -> Option<VariantDef> {\n+        self.variant_resolutions.get(&expr).copied()\n+    }\n     pub fn assoc_resolutions_for_expr(&self, id: ExprId) -> Option<ImplItem> {\n         self.assoc_resolutions.get(&id.into()).copied()\n     }\n@@ -170,6 +174,7 @@ struct InferenceContext<'a, D: HirDatabase> {\n     obligations: Vec<Obligation>,\n     method_resolutions: FxHashMap<ExprId, Function>,\n     field_resolutions: FxHashMap<ExprId, StructField>,\n+    variant_resolutions: FxHashMap<ExprId, VariantDef>,\n     assoc_resolutions: FxHashMap<ExprOrPatId, ImplItem>,\n     type_of_expr: ArenaMap<ExprId, Ty>,\n     type_of_pat: ArenaMap<PatId, Ty>,\n@@ -183,6 +188,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         InferenceContext {\n             method_resolutions: FxHashMap::default(),\n             field_resolutions: FxHashMap::default(),\n+            variant_resolutions: FxHashMap::default(),\n             assoc_resolutions: FxHashMap::default(),\n             type_of_expr: ArenaMap::default(),\n             type_of_pat: ArenaMap::default(),\n@@ -213,6 +219,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         InferenceResult {\n             method_resolutions: self.method_resolutions,\n             field_resolutions: self.field_resolutions,\n+            variant_resolutions: self.variant_resolutions,\n             assoc_resolutions: self.assoc_resolutions,\n             type_of_expr: expr_types,\n             type_of_pat: pat_types,\n@@ -232,6 +239,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.field_resolutions.insert(expr, field);\n     }\n \n+    fn write_variant_resolution(&mut self, expr: ExprId, variant: VariantDef) {\n+        self.variant_resolutions.insert(expr, variant);\n+    }\n+\n     fn write_assoc_resolution(&mut self, id: ExprOrPatId, item: ImplItem) {\n         self.assoc_resolutions.insert(id, item);\n     }\n@@ -1069,6 +1080,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::StructLit { path, fields, spread } => {\n                 let (ty, def_id) = self.resolve_variant(path.as_ref());\n+                if let Some(variant) = def_id {\n+                    self.write_variant_resolution(tgt_expr, variant);\n+                }\n+\n                 let substs = ty.substs().unwrap_or_else(Substs::empty);\n                 for (field_idx, field) in fields.iter().enumerate() {\n                     let field_ty = def_id"}, {"sha": "b6216f857d6453dc605d025417a61942ce871545", "filename": "crates/ra_ide_api/src/completion/complete_struct_literal.rs", "status": "modified", "additions": 88, "deletions": 15, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/2a1e11b36fe90460b139f2f6aee034f63e8252bf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1e11b36fe90460b139f2f6aee034f63e8252bf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs?ref=2a1e11b36fe90460b139f2f6aee034f63e8252bf", "patch": "@@ -1,28 +1,24 @@\n-use hir::AdtDef;\n+use hir::{Substs, Ty};\n \n use crate::completion::{CompletionContext, Completions};\n \n /// Complete fields in fields literals.\n pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionContext) {\n-    let ty = match ctx.struct_lit_syntax.and_then(|it| ctx.analyzer.type_of(ctx.db, it.into())) {\n+    let (ty, variant) = match ctx.struct_lit_syntax.and_then(|it| {\n+        Some((ctx.analyzer.type_of(ctx.db, it.into())?, ctx.analyzer.resolve_variant(it)?))\n+    }) {\n         Some(it) => it,\n-        None => return,\n-    };\n-    let (adt, substs) = match ty.as_adt() {\n-        Some(res) => res,\n         _ => return,\n     };\n-    match adt {\n-        AdtDef::Struct(s) => {\n-            for field in s.fields(ctx.db) {\n-                acc.add_field(ctx, field, substs);\n-            }\n-        }\n \n-        // FIXME unions\n-        AdtDef::Union(_) => (),\n-        AdtDef::Enum(_) => (),\n+    let ty_substs = match ty {\n+        Ty::Apply(it) => it.parameters,\n+        _ => Substs::empty(),\n     };\n+\n+    for field in variant.fields(ctx.db) {\n+        acc.add_field(ctx, field, &ty_substs);\n+    }\n }\n \n #[cfg(test)]\n@@ -57,4 +53,81 @@ mod tests {\n        \u22ee]\n         \"###);\n     }\n+\n+    #[test]\n+    fn test_struct_literal_enum_variant() {\n+        let completions = complete(\n+            r\"\n+            enum E {\n+                A { a: u32 }\n+            }\n+            fn foo() {\n+                let _ = E::A { <|> }\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot_matches!(completions, @r###\"\n+       \u22ee[\n+       \u22ee    CompletionItem {\n+       \u22ee        label: \"a\",\n+       \u22ee        source_range: [119; 119),\n+       \u22ee        delete: [119; 119),\n+       \u22ee        insert: \"a\",\n+       \u22ee        kind: Field,\n+       \u22ee        detail: \"u32\",\n+       \u22ee    },\n+       \u22ee]\n+        \"###);\n+    }\n+\n+    #[test]\n+    fn test_struct_literal_two_structs() {\n+        let completions = complete(\n+            r\"\n+            struct A { a: u32 }\n+            struct B { b: u32 }\n+\n+            fn foo() {\n+               let _: A = B { <|> }\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot_matches!(completions, @r###\"\n+       \u22ee[\n+       \u22ee    CompletionItem {\n+       \u22ee        label: \"b\",\n+       \u22ee        source_range: [119; 119),\n+       \u22ee        delete: [119; 119),\n+       \u22ee        insert: \"b\",\n+       \u22ee        kind: Field,\n+       \u22ee        detail: \"u32\",\n+       \u22ee    },\n+       \u22ee]\n+        \"###);\n+    }\n+\n+    #[test]\n+    fn test_struct_literal_generic_struct() {\n+        let completions = complete(\n+            r\"\n+            struct A<T> { a: T }\n+\n+            fn foo() {\n+               let _: A<u32> = A { <|> }\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot_matches!(completions, @r###\"\n+       \u22ee[\n+       \u22ee    CompletionItem {\n+       \u22ee        label: \"a\",\n+       \u22ee        source_range: [93; 93),\n+       \u22ee        delete: [93; 93),\n+       \u22ee        insert: \"a\",\n+       \u22ee        kind: Field,\n+       \u22ee        detail: \"u32\",\n+       \u22ee    },\n+       \u22ee]\n+        \"###);\n+    }\n }"}]}