{"sha": "1832bdd7de93573464e1536e3ea17d5fd7d2888b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzJiZGQ3ZGU5MzU3MzQ2NGUxNTM2ZTNlYTE3ZDVmZDdkMjg4OGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-25T14:09:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-25T14:09:08Z"}, "message": "Auto merge of #80296 - wesleywiser:revert_missing_fragment_specifier_hard_error, r=Mark-Simulacrum\n\nRevert missing fragment specifier hard error\n\nCloses #76605\n\nReopens #40107\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "5f2e99e51bda0d127456c9c247ca5b06d5254bad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f2e99e51bda0d127456c9c247ca5b06d5254bad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1832bdd7de93573464e1536e3ea17d5fd7d2888b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1832bdd7de93573464e1536e3ea17d5fd7d2888b", "html_url": "https://github.com/rust-lang/rust/commit/1832bdd7de93573464e1536e3ea17d5fd7d2888b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1832bdd7de93573464e1536e3ea17d5fd7d2888b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab107788547c285aaaa7dced6091663a6e0eea82", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab107788547c285aaaa7dced6091663a6e0eea82", "html_url": "https://github.com/rust-lang/rust/commit/ab107788547c285aaaa7dced6091663a6e0eea82"}, {"sha": "56154a11473da93da0f5d57f4692991ae4972695", "url": "https://api.github.com/repos/rust-lang/rust/commits/56154a11473da93da0f5d57f4692991ae4972695", "html_url": "https://github.com/rust-lang/rust/commit/56154a11473da93da0f5d57f4692991ae4972695"}], "stats": {"total": 170, "additions": 135, "deletions": 35}, "files": [{"sha": "cbc4d14a65a1bf605a8515e80e4633493f6fd4c6", "filename": "compiler/rustc_expand/src/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -84,7 +84,7 @@ enum TokenTree {\n     /// e.g., `$var`\n     MetaVar(Span, Ident),\n     /// e.g., `$var:expr`. This is only used in the left hand side of MBE macros.\n-    MetaVarDecl(Span, Ident /* name to bind */, NonterminalKind),\n+    MetaVarDecl(Span, Ident /* name to bind */, Option<NonterminalKind>),\n }\n \n impl TokenTree {"}, {"sha": "0c44f5fe9e10a89f7b24faf507ca7962965739fb", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -378,6 +378,11 @@ fn nameize<I: Iterator<Item = NamedMatch>>(\n                     n_rec(sess, next_m, res.by_ref(), ret_val)?;\n                 }\n             }\n+            TokenTree::MetaVarDecl(span, _, None) => {\n+                if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {\n+                    return Err((span, \"missing fragment specifier\".to_string()));\n+                }\n+            }\n             TokenTree::MetaVarDecl(sp, bind_name, _) => match ret_val\n                 .entry(MacroRulesNormalizedIdent::new(bind_name))\n             {\n@@ -446,6 +451,7 @@ fn or_pat_mode(edition: Edition) -> OrPatNonterminalMode {\n ///\n /// A `ParseResult`. Note that matches are kept track of through the items generated.\n fn inner_parse_loop<'root, 'tt>(\n+    sess: &ParseSess,\n     cur_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,\n     next_items: &mut Vec<MatcherPosHandle<'root, 'tt>>,\n     eof_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,\n@@ -563,9 +569,16 @@ fn inner_parse_loop<'root, 'tt>(\n                     })));\n                 }\n \n+                // We need to match a metavar (but the identifier is invalid)... this is an error\n+                TokenTree::MetaVarDecl(span, _, None) => {\n+                    if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {\n+                        return Error(span, \"missing fragment specifier\".to_string());\n+                    }\n+                }\n+\n                 // We need to match a metavar with a valid ident... call out to the black-box\n                 // parser by adding an item to `bb_items`.\n-                TokenTree::MetaVarDecl(span, _, kind) => {\n+                TokenTree::MetaVarDecl(span, _, Some(kind)) => {\n                     // Built-in nonterminals never start with these tokens, so we can eliminate\n                     // them from consideration.\n                     //\n@@ -640,6 +653,7 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n         // parsing from the black-box parser done. The result is that `next_items` will contain a\n         // bunch of possible next matcher positions in `next_items`.\n         match inner_parse_loop(\n+            parser.sess,\n             &mut cur_items,\n             &mut next_items,\n             &mut eof_items,\n@@ -701,7 +715,7 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n             let nts = bb_items\n                 .iter()\n                 .map(|item| match item.top_elts.get_tt(item.idx) {\n-                    TokenTree::MetaVarDecl(_, bind, kind) => format!(\"{} ('{}')\", kind, bind),\n+                    TokenTree::MetaVarDecl(_, bind, Some(kind)) => format!(\"{} ('{}')\", kind, bind),\n                     _ => panic!(),\n                 })\n                 .collect::<Vec<String>>()\n@@ -731,7 +745,7 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n             assert_eq!(bb_items.len(), 1);\n \n             let mut item = bb_items.pop().unwrap();\n-            if let TokenTree::MetaVarDecl(span, _, kind) = item.top_elts.get_tt(item.idx) {\n+            if let TokenTree::MetaVarDecl(span, _, Some(kind)) = item.top_elts.get_tt(item.idx) {\n                 let match_cur = item.match_cur;\n                 // We use the span of the metavariable declaration to determine any\n                 // edition-specific matching behavior for non-terminals."}, {"sha": "89d375b257da570b9ee8a5d65ca054a8dc5d8356", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -401,7 +401,7 @@ pub fn compile_declarative_macro(\n     let diag = &sess.parse_sess.span_diagnostic;\n     let lhs_nm = Ident::new(sym::lhs, def.span);\n     let rhs_nm = Ident::new(sym::rhs, def.span);\n-    let tt_spec = NonterminalKind::TT;\n+    let tt_spec = Some(NonterminalKind::TT);\n \n     // Parse the macro_rules! invocation\n     let (macro_rules, body) = match &def.kind {\n@@ -578,7 +578,7 @@ fn check_lhs_no_empty_seq(sess: &ParseSess, tts: &[mbe::TokenTree]) -> bool {\n             TokenTree::Sequence(span, ref seq) => {\n                 if seq.separator.is_none()\n                     && seq.tts.iter().all(|seq_tt| match *seq_tt {\n-                        TokenTree::MetaVarDecl(_, _, NonterminalKind::Vis) => true,\n+                        TokenTree::MetaVarDecl(_, _, Some(NonterminalKind::Vis)) => true,\n                         TokenTree::Sequence(_, ref sub_seq) => {\n                             sub_seq.kleene.op == mbe::KleeneOp::ZeroOrMore\n                                 || sub_seq.kleene.op == mbe::KleeneOp::ZeroOrOne\n@@ -961,7 +961,7 @@ fn check_matcher_core(\n         // Now `last` holds the complete set of NT tokens that could\n         // end the sequence before SUFFIX. Check that every one works with `suffix`.\n         for token in &last.tokens {\n-            if let TokenTree::MetaVarDecl(_, name, kind) = *token {\n+            if let TokenTree::MetaVarDecl(_, name, Some(kind)) = *token {\n                 for next_token in &suffix_first.tokens {\n                     match is_in_follow(next_token, kind) {\n                         IsInFollow::Yes => {}\n@@ -1019,7 +1019,7 @@ fn check_matcher_core(\n }\n \n fn token_can_be_followed_by_any(tok: &mbe::TokenTree) -> bool {\n-    if let mbe::TokenTree::MetaVarDecl(_, _, kind) = *tok {\n+    if let mbe::TokenTree::MetaVarDecl(_, _, Some(kind)) = *tok {\n         frag_can_be_followed_by_any(kind)\n     } else {\n         // (Non NT's can always be followed by anything in matchers.)\n@@ -1123,7 +1123,7 @@ fn is_in_follow(tok: &mbe::TokenTree, kind: NonterminalKind) -> IsInFollow {\n                         }\n                         _ => IsInFollow::No(TOKENS),\n                     },\n-                    TokenTree::MetaVarDecl(_, _, NonterminalKind::Block) => IsInFollow::Yes,\n+                    TokenTree::MetaVarDecl(_, _, Some(NonterminalKind::Block)) => IsInFollow::Yes,\n                     _ => IsInFollow::No(TOKENS),\n                 }\n             }\n@@ -1158,7 +1158,7 @@ fn is_in_follow(tok: &mbe::TokenTree, kind: NonterminalKind) -> IsInFollow {\n                     TokenTree::MetaVarDecl(\n                         _,\n                         _,\n-                        NonterminalKind::Ident | NonterminalKind::Ty | NonterminalKind::Path,\n+                        Some(NonterminalKind::Ident | NonterminalKind::Ty | NonterminalKind::Path),\n                     ) => IsInFollow::Yes,\n                     _ => IsInFollow::No(TOKENS),\n                 }\n@@ -1171,7 +1171,8 @@ fn quoted_tt_to_string(tt: &mbe::TokenTree) -> String {\n     match *tt {\n         mbe::TokenTree::Token(ref token) => pprust::token_to_string(&token),\n         mbe::TokenTree::MetaVar(_, name) => format!(\"${}\", name),\n-        mbe::TokenTree::MetaVarDecl(_, name, kind) => format!(\"${}:{}\", name, kind),\n+        mbe::TokenTree::MetaVarDecl(_, name, Some(kind)) => format!(\"${}:{}\", name, kind),\n+        mbe::TokenTree::MetaVarDecl(_, name, None) => format!(\"${}:\", name),\n         _ => panic!(\n             \"{}\",\n             \"unexpected mbe::TokenTree::{Sequence or Delimited} \\"}, {"sha": "01b11bb979d68749ea9e558bd2a101c0a9df9691", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -3,7 +3,7 @@ use crate::mbe::{Delimited, KleeneOp, KleeneToken, SequenceRepetition, TokenTree\n \n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream;\n-use rustc_ast::NodeId;\n+use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, Ident};\n@@ -73,7 +73,7 @@ pub(super) fn parse(\n                                                 .emit();\n                                             token::NonterminalKind::Ident\n                                         });\n-                                    result.push(TokenTree::MetaVarDecl(span, ident, kind));\n+                                    result.push(TokenTree::MetaVarDecl(span, ident, Some(kind)));\n                                     continue;\n                                 }\n                                 _ => token.span,\n@@ -83,8 +83,11 @@ pub(super) fn parse(\n                     }\n                     tree => tree.as_ref().map(tokenstream::TokenTree::span).unwrap_or(start_sp),\n                 };\n-                sess.span_diagnostic.struct_span_err(span, \"missing fragment specifier\").emit();\n-                continue;\n+                if node_id != DUMMY_NODE_ID {\n+                    // Macros loaded from other crates have dummy node ids.\n+                    sess.missing_fragment_specifiers.borrow_mut().insert(span, node_id);\n+                }\n+                result.push(TokenTree::MetaVarDecl(span, ident, None));\n             }\n \n             // Not a metavar or no matchers allowed, so just return the tree"}, {"sha": "61ebd6d2198d106dd50d653052146c7936c6fdf1", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -29,6 +29,7 @@ use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType, PpMode, PpSourceMode};\n+use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n@@ -306,11 +307,27 @@ fn configure_and_expand_inner<'a>(\n             ecx.check_unused_macros();\n         });\n \n+        let mut missing_fragment_specifiers: Vec<_> = ecx\n+            .sess\n+            .parse_sess\n+            .missing_fragment_specifiers\n+            .borrow()\n+            .iter()\n+            .map(|(span, node_id)| (*span, *node_id))\n+            .collect();\n+        missing_fragment_specifiers.sort_unstable_by_key(|(span, _)| *span);\n+\n+        let recursion_limit_hit = ecx.reduced_recursion_limit.is_some();\n+\n+        for (span, node_id) in missing_fragment_specifiers {\n+            let lint = lint::builtin::MISSING_FRAGMENT_SPECIFIER;\n+            let msg = \"missing fragment specifier\";\n+            resolver.lint_buffer().buffer_lint(lint, node_id, span, msg);\n+        }\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &old_path);\n         }\n \n-        let recursion_limit_hit = ecx.reduced_recursion_limit.is_some();\n         if recursion_limit_hit {\n             // If we hit a recursion limit, exit early to avoid later passes getting overwhelmed\n             // with a large AST"}, {"sha": "1c692d4f207620197a4a3f3102cae67b8c7df5ad", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -1227,6 +1227,50 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `missing_fragment_specifier` lint is issued when an unused pattern in a\n+    /// `macro_rules!` macro definition has a meta-variable (e.g. `$e`) that is not\n+    /// followed by a fragment specifier (e.g. `:expr`).\n+    ///\n+    /// This warning can always be fixed by removing the unused pattern in the\n+    /// `macro_rules!` macro definition.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// macro_rules! foo {\n+    ///    () => {};\n+    ///    ($name) => { };\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///    foo!();\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// To fix this, remove the unused pattern from the `macro_rules!` macro definition:\n+    ///\n+    /// ```rust\n+    /// macro_rules! foo {\n+    ///     () => {};\n+    /// }\n+    /// fn main() {\n+    ///     foo!();\n+    /// }\n+    /// ```\n+    pub MISSING_FRAGMENT_SPECIFIER,\n+    Deny,\n+    \"detects missing fragment specifiers in unused `macro_rules!` patterns\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n+        edition: None,\n+    };\n+}\n+\n declare_lint! {\n     /// The `late_bound_lifetime_arguments` lint detects generic lifetime\n     /// arguments in path segments with late bound lifetime parameters.\n@@ -2827,6 +2871,7 @@ declare_lint_pass! {\n         CONST_ITEM_MUTATION,\n         SAFE_PACKED_BORROWS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n+        MISSING_FRAGMENT_SPECIFIER,\n         LATE_BOUND_LIFETIME_ARGUMENTS,\n         ORDER_DEPENDENT_TRAIT_OBJECTS,\n         COHERENCE_LEAK_CHECK,"}, {"sha": "b1a48342417308dae140af911f2f8491c396db34", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -119,6 +119,7 @@ pub struct ParseSess {\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n     pub edition: Edition,\n+    pub missing_fragment_specifiers: Lock<FxHashMap<Span, NodeId>>,\n     /// Places where raw identifiers were used. This is used for feature-gating raw identifiers.\n     pub raw_identifier_spans: Lock<Vec<Span>>,\n     /// Used to determine and report recursive module inclusions.\n@@ -152,6 +153,7 @@ impl ParseSess {\n             unstable_features: UnstableFeatures::from_environment(None),\n             config: FxHashSet::default(),\n             edition: ExpnId::root().expn_data().edition,\n+            missing_fragment_specifiers: Default::default(),\n             raw_identifier_spans: Lock::new(Vec::new()),\n             included_mod_stack: Lock::new(vec![]),\n             source_map,"}, {"sha": "3c1452d64676c68936711da2ed3b2e550c22123f", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab107788547c285aaaa7dced6091663a6e0eea82/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=ab107788547c285aaaa7dced6091663a6e0eea82", "patch": "@@ -1,3 +0,0 @@\n-# Deny-by-default lints\n-\n-This file is auto-generated by the lint-docs script."}, {"sha": "f23c7cb0dca1415d2a8c77fc3e2f54128f9512d1", "filename": "src/test/ui/lint/expansion-time.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Flint%2Fexpansion-time.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Flint%2Fexpansion-time.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fexpansion-time.rs?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -5,6 +5,10 @@ macro_rules! foo {\n     ( $($i:ident)* ) => { $($i)+ }; //~ WARN meta-variable repeats with different Kleene operator\n }\n \n+#[warn(missing_fragment_specifier)]\n+macro_rules! m { ($i) => {} } //~ WARN missing fragment specifier\n+                              //~| WARN this was previously accepted\n+\n #[warn(soft_unstable)]\n mod benches {\n     #[bench] //~ WARN use of unstable library feature 'test'"}, {"sha": "b0fc1f8e5eec76161fb2e708b5826b7ce97a469a", "filename": "src/test/ui/lint/expansion-time.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Flint%2Fexpansion-time.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Flint%2Fexpansion-time.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fexpansion-time.stderr?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -12,14 +12,28 @@ note: the lint level is defined here\n LL | #[warn(meta_variable_misuse)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n+warning: missing fragment specifier\n+  --> $DIR/expansion-time.rs:9:19\n+   |\n+LL | macro_rules! m { ($i) => {} }\n+   |                   ^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/expansion-time.rs:8:8\n+   |\n+LL | #[warn(missing_fragment_specifier)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n+\n warning: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable\n-  --> $DIR/expansion-time.rs:10:7\n+  --> $DIR/expansion-time.rs:14:7\n    |\n LL |     #[bench]\n    |       ^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/expansion-time.rs:8:8\n+  --> $DIR/expansion-time.rs:12:8\n    |\n LL | #[warn(soft_unstable)]\n    |        ^^^^^^^^^^^^^\n@@ -33,10 +47,10 @@ LL | 2\n    | ^\n    |\n note: the lint level is defined here\n-  --> $DIR/expansion-time.rs:25:8\n+  --> $DIR/expansion-time.rs:29:8\n    |\n LL | #[warn(incomplete_include)]\n    |        ^^^^^^^^^^^^^^^^^^\n \n-warning: 3 warnings emitted\n+warning: 4 warnings emitted\n "}, {"sha": "2229f2c3900c30220584e5b59d38b3015b990420", "filename": "src/test/ui/macros/issue-39404.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.rs?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -2,5 +2,6 @@\n \n macro_rules! m { ($i) => {} }\n //~^ ERROR missing fragment specifier\n+//~| WARN previously accepted\n \n fn main() {}"}, {"sha": "d2f2a823c2a6b47af00eb8b0d3aed999abb2831a", "filename": "src/test/ui/macros/issue-39404.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.stderr?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -3,6 +3,10 @@ error: missing fragment specifier\n    |\n LL | macro_rules! m { ($i) => {} }\n    |                   ^^\n+   |\n+   = note: `#[deny(missing_fragment_specifier)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n \n error: aborting due to previous error\n "}, {"sha": "b23e5c71c03f06e29245481dbfa775b0b3c57874", "filename": "src/test/ui/macros/macro-match-nonterminal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.rs?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -2,6 +2,7 @@ macro_rules! test {\n     ($a, $b) => {\n         //~^ ERROR missing fragment\n         //~| ERROR missing fragment\n+        //~| WARN this was previously accepted\n         ()\n     };\n }"}, {"sha": "674ce3434aac63fd9446e23a30c91f34fe2c3271", "filename": "src/test/ui/macros/macro-match-nonterminal.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.stderr?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -9,6 +9,10 @@ error: missing fragment specifier\n    |\n LL |     ($a, $b) => {\n    |          ^^\n+   |\n+   = note: `#[deny(missing_fragment_specifier)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "80e2d7c6545ba277512e0c9c2ad7ee0a0c70be40", "filename": "src/test/ui/parser/macro/issue-33569.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -2,7 +2,6 @@ macro_rules! foo {\n     { $+ } => { //~ ERROR expected identifier, found `+`\n                 //~^ ERROR missing fragment specifier\n         $(x)(y) //~ ERROR expected one of: `*`, `+`, or `?`\n-       //~^ ERROR attempted to repeat an expression containing no syntax variables\n     }\n }\n "}, {"sha": "b4d38d3ce4806ca8c5a6d9bf50241a3c01bdb684", "filename": "src/test/ui/parser/macro/issue-33569.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1832bdd7de93573464e1536e3ea17d5fd7d2888b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr?ref=1832bdd7de93573464e1536e3ea17d5fd7d2888b", "patch": "@@ -4,23 +4,17 @@ error: expected identifier, found `+`\n LL |     { $+ } => {\n    |        ^\n \n-error: missing fragment specifier\n-  --> $DIR/issue-33569.rs:2:8\n-   |\n-LL |     { $+ } => {\n-   |        ^\n-\n error: expected one of: `*`, `+`, or `?`\n   --> $DIR/issue-33569.rs:4:13\n    |\n LL |         $(x)(y)\n    |             ^^^\n \n-error: attempted to repeat an expression containing no syntax variables matched as repeating at this depth\n-  --> $DIR/issue-33569.rs:4:10\n+error: missing fragment specifier\n+  --> $DIR/issue-33569.rs:2:8\n    |\n-LL |         $(x)(y)\n-   |          ^^^\n+LL |     { $+ } => {\n+   |        ^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}]}