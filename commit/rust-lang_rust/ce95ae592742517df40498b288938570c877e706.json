{"sha": "ce95ae592742517df40498b288938570c877e706", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTVhZTU5Mjc0MjUxN2RmNDA0OThiMjg4OTM4NTcwYzg3N2U3MDY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-01-28T14:46:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-01-28T14:46:46Z"}, "message": "correctly implement pointers to enum variant constructors", "tree": {"sha": "19b1d46ea997627ade1ffbedfb9037452dc54dc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19b1d46ea997627ade1ffbedfb9037452dc54dc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce95ae592742517df40498b288938570c877e706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce95ae592742517df40498b288938570c877e706", "html_url": "https://github.com/rust-lang/rust/commit/ce95ae592742517df40498b288938570c877e706", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce95ae592742517df40498b288938570c877e706/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e79dbbf53ff5c5e2fd65445bddc8e033df24e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e79dbbf53ff5c5e2fd65445bddc8e033df24e0", "html_url": "https://github.com/rust-lang/rust/commit/b6e79dbbf53ff5c5e2fd65445bddc8e033df24e0"}], "stats": {"total": 64, "additions": 50, "deletions": 14}, "files": [{"sha": "ce44e34f9ed9e0c102509b1ed1da6098d1b61e8d", "filename": "src/eval_context.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce95ae592742517df40498b288938570c877e706/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95ae592742517df40498b288938570c877e706/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=ce95ae592742517df40498b288938570c877e706", "patch": "@@ -685,22 +685,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let path = discrfield.iter().skip(2).map(|&i| i as usize);\n \n         // Handle the field index for the outer non-null variant.\n-        let inner_ty = match ty.sty {\n+        let (inner_offset, inner_ty) = match ty.sty {\n             ty::TyAdt(adt_def, substs) => {\n                 let variant = &adt_def.variants[nndiscr as usize];\n                 let index = discrfield[1];\n                 let field = &variant.fields[index as usize];\n-                field.ty(self.tcx, substs)\n+                (self.get_field_offset(ty, index as usize)?, field.ty(self.tcx, substs))\n             }\n             _ => bug!(\"non-enum for StructWrappedNullablePointer: {}\", ty),\n         };\n \n-        self.field_path_offset_and_ty(inner_ty, path)\n+        self.field_path_offset_and_ty(inner_offset, inner_ty, path)\n     }\n \n-    fn field_path_offset_and_ty<I: Iterator<Item = usize>>(&self, mut ty: Ty<'tcx>, path: I) -> EvalResult<'tcx, (Size, Ty<'tcx>)> {\n-        let mut offset = Size::from_bytes(0);\n-\n+    fn field_path_offset_and_ty<I: Iterator<Item = usize>>(\n+        &self,\n+        mut offset: Size,\n+        mut ty: Ty<'tcx>,\n+        path: I,\n+    ) -> EvalResult<'tcx, (Size, Ty<'tcx>)> {\n         // Skip the initial 0 intended for LLVM GEP.\n         for field_index in path {\n             let field_offset = self.get_field_offset(ty, field_index)?;\n@@ -747,6 +750,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let bytes = field_index as u64 * self.memory.pointer_size();\n                 Ok(Size::from_bytes(bytes))\n             }\n+            StructWrappedNullablePointer { ref nonnull, .. } => {\n+                Ok(nonnull.offsets[field_index])\n+            }\n             _ => {\n                 let msg = format!(\"can't handle type: {:?}, with layout: {:?}\", ty, layout);\n                 Err(EvalError::Unimplemented(msg))\n@@ -761,6 +767,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match *layout {\n             Univariant { ref variant, .. } => Ok(variant.offsets.len()),\n             FatPointer { .. } => Ok(2),\n+            StructWrappedNullablePointer { ref nonnull, .. } => Ok(nonnull.offsets.len()),\n             _ => {\n                 let msg = format!(\"can't handle type: {:?}, with layout: {:?}\", ty, layout);\n                 Err(EvalError::Unimplemented(msg))"}, {"sha": "b2124486f4918a0c9d53d11d056f0d7a49450bea", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ce95ae592742517df40498b288938570c877e706/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95ae592742517df40498b288938570c877e706/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=ce95ae592742517df40498b288938570c877e706", "patch": "@@ -238,27 +238,46 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let (lvalue, target) = destination.expect(\"tuple struct constructors can't diverge\");\n                         let dest_ty = self.tcx.item_type(adt_def.did);\n                         let dest_layout = self.type_layout(dest_ty)?;\n-                        let disr = v.disr_val.to_u128_unchecked();\n+                        trace!(\"layout({:?}) = {:#?}\", dest_ty, dest_layout);\n                         match *dest_layout {\n                             Layout::Univariant { ref variant, .. } => {\n-                                assert_eq!(disr, 0);\n+                                let disr_val = v.disr_val.to_u128_unchecked();\n+                                assert_eq!(disr_val, 0);\n                                 let offsets = variant.offsets.iter().map(|s| s.bytes());\n \n                                 self.assign_fields(lvalue, offsets, args)?;\n                             },\n                             Layout::General { discr, ref variants, .. } => {\n-                                // FIXME: report a proper error for invalid discriminants\n-                                // right now we simply go into index out of bounds\n+                                let disr_val = v.disr_val.to_u128_unchecked();\n                                 let discr_size = discr.size().bytes();\n                                 self.assign_discr_and_fields(\n                                     lvalue,\n-                                    variants[disr as usize].offsets.iter().cloned().map(Size::bytes),\n+                                    variants[disr_val as usize].offsets.iter().cloned().map(Size::bytes),\n                                     args,\n-                                    disr,\n+                                    disr_val,\n                                     discr_size,\n                                 )?;\n                             },\n-                            Layout::StructWrappedNullablePointer { .. } |\n+                            Layout::StructWrappedNullablePointer { nndiscr, ref nonnull, ref discrfield, .. } => {\n+                                let disr_val = v.disr_val.to_u128_unchecked();\n+                                if nndiscr as u128 == disr_val {\n+                                    let offsets = nonnull.offsets.iter().map(|s| s.bytes());\n+                                    self.assign_fields(lvalue, offsets, args)?;\n+                                } else {\n+                                    for (_, ty) in args {\n+                                        assert_eq!(self.type_size(ty)?, Some(0));\n+                                    }\n+                                    let (offset, ty) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield)?;\n+\n+                                    // FIXME(solson)\n+                                    let dest = self.force_allocation(lvalue)?.to_ptr();\n+\n+                                    let dest = dest.offset(offset.bytes());\n+                                    let dest_size = self.type_size(ty)?\n+                                        .expect(\"bad StructWrappedNullablePointer discrfield\");\n+                                    self.memory.write_int(dest, 0, dest_size)?;\n+                                }\n+                            },\n                             Layout::RawNullablePointer { .. } => {\n                                 assert_eq!(args.len(), 1);\n                                 let (val, ty) = args.pop().unwrap();\n@@ -307,7 +326,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn read_discriminant_value(&self, adt_ptr: Pointer, adt_ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n         use rustc::ty::layout::Layout::*;\n         let adt_layout = self.type_layout(adt_ty)?;\n-        trace!(\"read_discriminant_value {:?}\", adt_layout);\n+        trace!(\"read_discriminant_value {:#?}\", adt_layout);\n \n         let discr_val = match *adt_layout {\n             General { discr, .. } | CEnum { discr, signed: false, .. } => {\n@@ -344,6 +363,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     fn read_nonnull_discriminant_value(&self, ptr: Pointer, nndiscr: u128, discr_size: u64) -> EvalResult<'tcx, u128> {\n+        trace!(\"read_nonnull_discriminant_value: {:?}, {}, {}\", ptr, nndiscr, discr_size);\n         let not_null = match self.memory.read_uint(ptr, discr_size) {\n             Ok(0) => false,\n             Ok(_) | Err(EvalError::ReadPointerAsBytes) => true,"}, {"sha": "44441ed1d36c88a548ce577949f72e5a75032815", "filename": "tests/run-pass/tuple_like_enum_variant_constructor_struct_pointer_opt.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce95ae592742517df40498b288938570c877e706/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_struct_pointer_opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95ae592742517df40498b288938570c877e706/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_struct_pointer_opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_struct_pointer_opt.rs?ref=ce95ae592742517df40498b288938570c877e706", "patch": "@@ -7,6 +7,13 @@ struct A<'a> {\n #[derive(Copy, Clone, PartialEq, Debug)]\n struct B<'a>(i32, &'a i32);\n \n+#[derive(Copy, Clone, PartialEq, Debug)]\n+enum C<'a> {\n+    Value(i32, &'a i32),\n+    #[allow(dead_code)]\n+    NoValue,\n+}\n+\n fn main() {\n     let x = 5;\n     let a = A { x: 99, y: &x };\n@@ -17,6 +24,8 @@ fn main() {\n     //let f: for<'a> fn(i32, &'a i32) -> B<'a> = B;\n     //assert_eq!(Some(B(42, &x)), Some(f(42, &x)));\n     assert_eq!(B(42, &x), foo(&x, B));\n+    let f = C::Value;\n+    assert_eq!(C::Value(42, &x), f(42, &x));\n }\n \n fn foo<'a, F: Fn(i32, &'a i32) -> B<'a>>(i: &'a i32, f: F) -> B<'a> {"}]}