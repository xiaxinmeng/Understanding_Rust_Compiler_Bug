{"sha": "147b854dede7b0dda933e24f6ee6c8dd30323a7e", "node_id": "C_kwDOAAsO6NoAKDE0N2I4NTRkZWRlN2IwZGRhOTMzZTI0ZjZlZTZjOGRkMzAzMjNhN2U", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T16:55:25Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-30T12:17:54Z"}, "message": "Remove TyS", "tree": {"sha": "9f415788f5820bc33ec61dfe02da9d3379fd8118", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f415788f5820bc33ec61dfe02da9d3379fd8118"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/147b854dede7b0dda933e24f6ee6c8dd30323a7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/147b854dede7b0dda933e24f6ee6c8dd30323a7e", "html_url": "https://github.com/rust-lang/rust/commit/147b854dede7b0dda933e24f6ee6c8dd30323a7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/147b854dede7b0dda933e24f6ee6c8dd30323a7e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "html_url": "https://github.com/rust-lang/rust/commit/87a04f51ba4ccf9f6b44897713edaa7c68dc580a"}], "stats": {"total": 162, "additions": 65, "deletions": 97}, "files": [{"sha": "3a0ddae1c63f3526208b690796e5a3891a8ba62c", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=147b854dede7b0dda933e24f6ee6c8dd30323a7e", "patch": "@@ -1,3 +1,5 @@\n+#![allow(rustc::usage_of_ty_tykind)]\n+\n /// This higher-order macro declares a list of types which can be allocated by `Arena`.\n ///\n /// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]` where `T` is the type\n@@ -88,7 +90,7 @@ macro_rules! arena_types {\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types\n-            [] tys: rustc_type_ir::WithCachedTypeInfo<rustc_middle::ty::TyS<'tcx>>,\n+            [] tys: rustc_type_ir::WithCachedTypeInfo<rustc_middle::ty::TyKind<'tcx>>,\n             [] predicates: rustc_type_ir::WithCachedTypeInfo<rustc_middle::ty::PredicateS<'tcx>>,\n             [] consts: rustc_middle::ty::ConstS<'tcx>,\n "}, {"sha": "f798c0a4e22925ed92e3e34a6d886dfb209c8f85", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=147b854dede7b0dda933e24f6ee6c8dd30323a7e", "patch": "@@ -1,5 +1,7 @@\n //! Type context book-keeping.\n \n+#![allow(rustc::usage_of_ty_tykind)]\n+\n use crate::arena::Arena;\n use crate::dep_graph::{DepGraph, DepKindStruct};\n use crate::hir::place::Place as HirPlace;\n@@ -20,7 +22,7 @@ use crate::ty::{\n     ClosureSizeProfileData, Const, ConstS, DefIdTree, FloatTy, FloatVar, FloatVid,\n     GenericParamDefKind, InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy,\n     PolyExistentialPredicate, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy,\n-    Region, RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut,\n+    Region, RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyVar, TyVid, TypeAndMut,\n     UintTy, Visibility,\n };\n use crate::ty::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef, UserSubsts};\n@@ -137,7 +139,7 @@ pub struct CtxtInterners<'tcx> {\n \n     // Specifically use a speedy hash algorithm for these hash sets, since\n     // they're accessed quite often.\n-    type_: InternedSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>>,\n+    type_: InternedSet<'tcx, WithCachedTypeInfo<TyKind<'tcx>>>,\n     const_lists: InternedSet<'tcx, List<ty::Const<'tcx>>>,\n     substs: InternedSet<'tcx, InternalSubsts<'tcx>>,\n     canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo<'tcx>>>,\n@@ -194,15 +196,12 @@ impl<'tcx> CtxtInterners<'tcx> {\n                     let stable_hash =\n                         self.stable_hash(&flags, sess, definitions, cstore, source_span, &kind);\n \n-                    let ty_struct = TyS {\n-                        kind,\n+                    InternedInSet(self.arena.alloc(WithCachedTypeInfo {\n+                        internee: kind,\n+                        stable_hash,\n                         flags: flags.flags,\n                         outer_exclusive_binder: flags.outer_exclusive_binder,\n-                    };\n-\n-                    InternedInSet(\n-                        self.arena.alloc(WithCachedTypeInfo { internee: ty_struct, stable_hash }),\n-                    )\n+                    }))\n                 })\n                 .0,\n         ))\n@@ -2058,7 +2057,7 @@ macro_rules! sty_debug_print {\n                 let shards = tcx.interners.type_.lock_shards();\n                 let types = shards.iter().flat_map(|shard| shard.keys());\n                 for &InternedInSet(t) in types {\n-                    let variant = match t.kind {\n+                    let variant = match t.internee {\n                         ty::Bool | ty::Char | ty::Int(..) | ty::Uint(..) |\n                             ty::Float(..) | ty::Str | ty::Never => continue,\n                         ty::Error(_) => /* unimportant */ continue,\n@@ -2168,26 +2167,26 @@ impl<'tcx, T: 'tcx + ?Sized> IntoPointer for InternedInSet<'tcx, T> {\n }\n \n #[allow(rustc::usage_of_ty_tykind)]\n-impl<'tcx> Borrow<TyKind<'tcx>> for InternedInSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>> {\n+impl<'tcx> Borrow<TyKind<'tcx>> for InternedInSet<'tcx, WithCachedTypeInfo<TyKind<'tcx>>> {\n     fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {\n-        &self.0.kind\n+        &self.0.internee\n     }\n }\n \n-impl<'tcx> PartialEq for InternedInSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>> {\n-    fn eq(&self, other: &InternedInSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>>) -> bool {\n+impl<'tcx> PartialEq for InternedInSet<'tcx, WithCachedTypeInfo<TyKind<'tcx>>> {\n+    fn eq(&self, other: &InternedInSet<'tcx, WithCachedTypeInfo<TyKind<'tcx>>>) -> bool {\n         // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n         // `x == y`.\n-        self.0.kind == other.0.kind\n+        self.0.internee == other.0.internee\n     }\n }\n \n-impl<'tcx> Eq for InternedInSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>> {}\n+impl<'tcx> Eq for InternedInSet<'tcx, WithCachedTypeInfo<TyKind<'tcx>>> {}\n \n-impl<'tcx> Hash for InternedInSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>> {\n+impl<'tcx> Hash for InternedInSet<'tcx, WithCachedTypeInfo<TyKind<'tcx>>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n-        self.0.kind.hash(s)\n+        self.0.internee.hash(s)\n     }\n }\n "}, {"sha": "667b55088ccf9e257e52984aa8cc8b7df8bb393d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 73, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=147b854dede7b0dda933e24f6ee6c8dd30323a7e", "patch": "@@ -9,6 +9,8 @@\n //!\n //! [\"The `ty` module: representing types\"]: https://rustc-dev-guide.rust-lang.org/ty.html\n \n+#![allow(rustc::usage_of_ty_tykind)]\n+\n pub use self::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n pub use self::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n pub use self::AssocItemContainer::*;\n@@ -446,89 +448,24 @@ pub struct CReaderCacheKey {\n     pub pos: usize,\n }\n \n-/// Represents a type.\n-///\n-/// IMPORTANT:\n-/// - This is a very \"dumb\" struct (with no derives and no `impls`).\n-/// - Values of this type are always interned and thus unique, and are stored\n-///   as an `Interned<TyS>`.\n-/// - `Ty` (which contains a reference to a `Interned<TyS>`) or `Interned<TyS>`\n-///   should be used everywhere instead of `TyS`. In particular, `Ty` has most\n-///   of the relevant methods.\n-#[derive(PartialEq, Eq, PartialOrd, Ord)]\n-#[allow(rustc::usage_of_ty_tykind)]\n-pub(crate) struct TyS<'tcx> {\n-    /// This field shouldn't be used directly and may be removed in the future.\n-    /// Use `Ty::kind()` instead.\n-    kind: TyKind<'tcx>,\n-\n-    /// This field provides fast access to information that is also contained\n-    /// in `kind`.\n-    ///\n-    /// This field shouldn't be used directly and may be removed in the future.\n-    /// Use `Ty::flags()` instead.\n-    flags: TypeFlags,\n-\n-    /// This field provides fast access to information that is also contained\n-    /// in `kind`.\n-    ///\n-    /// This is a kind of confusing thing: it stores the smallest\n-    /// binder such that\n-    ///\n-    /// (a) the binder itself captures nothing but\n-    /// (b) all the late-bound things within the type are captured\n-    ///     by some sub-binder.\n-    ///\n-    /// So, for a type without any late-bound things, like `u32`, this\n-    /// will be *innermost*, because that is the innermost binder that\n-    /// captures nothing. But for a type `&'D u32`, where `'D` is a\n-    /// late-bound region with De Bruijn index `D`, this would be `D + 1`\n-    /// -- the binder itself does not capture `D`, but `D` is captured\n-    /// by an inner binder.\n-    ///\n-    /// We call this concept an \"exclusive\" binder `D` because all\n-    /// De Bruijn indices within the type are contained within `0..D`\n-    /// (exclusive).\n-    outer_exclusive_binder: ty::DebruijnIndex,\n-}\n-\n /// Use this rather than `TyS`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n #[rustc_diagnostic_item = \"Ty\"]\n #[rustc_pass_by_value]\n-pub struct Ty<'tcx>(Interned<'tcx, WithCachedTypeInfo<TyS<'tcx>>>);\n+pub struct Ty<'tcx>(Interned<'tcx, WithCachedTypeInfo<TyKind<'tcx>>>);\n \n impl<'tcx> TyCtxt<'tcx> {\n     /// A \"bool\" type used in rustc_mir_transform unit tests when we\n     /// have not spun up a TyCtxt.\n     pub const BOOL_TY_FOR_UNIT_TESTING: Ty<'tcx> =\n         Ty(Interned::new_unchecked(&WithCachedTypeInfo {\n-            internee: TyS {\n-                kind: ty::Bool,\n-                flags: TypeFlags::empty(),\n-                outer_exclusive_binder: DebruijnIndex::from_usize(0),\n-            },\n+            internee: ty::Bool,\n             stable_hash: Fingerprint::ZERO,\n+            flags: TypeFlags::empty(),\n+            outer_exclusive_binder: DebruijnIndex::from_usize(0),\n         }));\n }\n \n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TyS<'tcx> {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let TyS {\n-            kind,\n-\n-            // The other fields just provide fast access to information that is\n-            // also contained in `kind`, so no need to hash them.\n-            flags: _,\n-\n-            outer_exclusive_binder: _,\n-        } = self;\n-\n-        kind.hash_stable(hcx, hasher)\n-    }\n-}\n-\n impl ty::EarlyBoundRegion {\n     /// Does this early bound region have a name? Early bound regions normally\n     /// always have names except when using anonymous lifetimes (`'_`).\n@@ -1030,7 +967,7 @@ impl<'tcx> Term<'tcx> {\n         unsafe {\n             match ptr & TAG_MASK {\n                 TYPE_TAG => TermKind::Ty(Ty(Interned::new_unchecked(\n-                    &*((ptr & !TAG_MASK) as *const WithCachedTypeInfo<ty::TyS<'tcx>>),\n+                    &*((ptr & !TAG_MASK) as *const WithCachedTypeInfo<ty::TyKind<'tcx>>),\n                 ))),\n                 CONST_TAG => TermKind::Const(ty::Const(Interned::new_unchecked(\n                     &*((ptr & !TAG_MASK) as *const ty::ConstS<'tcx>),\n@@ -1074,7 +1011,7 @@ impl<'tcx> TermKind<'tcx> {\n             TermKind::Ty(ty) => {\n                 // Ensure we can use the tag bits.\n                 assert_eq!(mem::align_of_val(&*ty.0.0) & TAG_MASK, 0);\n-                (TYPE_TAG, ty.0.0 as *const WithCachedTypeInfo<ty::TyS<'tcx>> as usize)\n+                (TYPE_TAG, ty.0.0 as *const WithCachedTypeInfo<ty::TyKind<'tcx>> as usize)\n             }\n             TermKind::Const(ct) => {\n                 // Ensure we can use the tag bits.\n@@ -2695,7 +2632,6 @@ mod size_asserts {\n     use rustc_data_structures::static_assert_size;\n     // tidy-alphabetical-start\n     static_assert_size!(PredicateS<'_>, 48);\n-    static_assert_size!(TyS<'_>, 40);\n-    static_assert_size!(WithCachedTypeInfo<TyS<'_>>, 56);\n+    static_assert_size!(WithCachedTypeInfo<TyKind<'_>>, 56);\n     // tidy-alphabetical-end\n }"}, {"sha": "a90f4f91377f3dc4f667aad7250479a7a086af8a", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=147b854dede7b0dda933e24f6ee6c8dd30323a7e", "patch": "@@ -1602,7 +1602,7 @@ impl<'tcx> Region<'tcx> {\n impl<'tcx> Ty<'tcx> {\n     #[inline(always)]\n     pub fn kind(self) -> &'tcx TyKind<'tcx> {\n-        &self.0.0.kind\n+        &self.0.0\n     }\n \n     #[inline(always)]"}, {"sha": "89901d1575ae53e3199ef1941a189d1d5b410a96", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=147b854dede7b0dda933e24f6ee6c8dd30323a7e", "patch": "@@ -85,7 +85,7 @@ impl<'tcx> GenericArgKind<'tcx> {\n             GenericArgKind::Type(ty) => {\n                 // Ensure we can use the tag bits.\n                 assert_eq!(mem::align_of_val(&*ty.0.0) & TAG_MASK, 0);\n-                (TYPE_TAG, ty.0.0 as *const WithCachedTypeInfo<ty::TyS<'tcx>> as usize)\n+                (TYPE_TAG, ty.0.0 as *const WithCachedTypeInfo<ty::TyKind<'tcx>> as usize)\n             }\n             GenericArgKind::Const(ct) => {\n                 // Ensure we can use the tag bits.\n@@ -163,7 +163,7 @@ impl<'tcx> GenericArg<'tcx> {\n                     &*((ptr & !TAG_MASK) as *const ty::RegionKind<'tcx>),\n                 ))),\n                 TYPE_TAG => GenericArgKind::Type(Ty(Interned::new_unchecked(\n-                    &*((ptr & !TAG_MASK) as *const WithCachedTypeInfo<ty::TyS<'tcx>>),\n+                    &*((ptr & !TAG_MASK) as *const WithCachedTypeInfo<ty::TyKind<'tcx>>),\n                 ))),\n                 CONST_TAG => GenericArgKind::Const(ty::Const(Interned::new_unchecked(\n                     &*((ptr & !TAG_MASK) as *const ty::ConstS<'tcx>),"}, {"sha": "4e5d424886ad8017e91627f310d848e3288a59ee", "filename": "compiler/rustc_type_ir/src/ty_info.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_type_ir%2Fsrc%2Fty_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147b854dede7b0dda933e24f6ee6c8dd30323a7e/compiler%2Frustc_type_ir%2Fsrc%2Fty_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fty_info.rs?ref=147b854dede7b0dda933e24f6ee6c8dd30323a7e", "patch": "@@ -9,9 +9,11 @@ use rustc_data_structures::{\n     stable_hasher::{HashStable, StableHasher},\n };\n \n+use crate::{DebruijnIndex, TypeFlags};\n+\n /// A helper type that you can wrap round your own type in order to automatically\n-/// cache the stable hash on creation and not recompute it whenever the stable hash\n-/// of the type is computed.\n+/// cache the stable hash, type flags and debruijn index on creation and\n+/// not recompute it whenever the information is needed.\n /// This is only done in incremental mode. You can also opt out of caching by using\n /// StableHash::ZERO for the hash, in which case the hash gets computed each time.\n /// This is useful if you have values that you intern but never (can?) use for stable\n@@ -20,6 +22,35 @@ use rustc_data_structures::{\n pub struct WithCachedTypeInfo<T> {\n     pub internee: T,\n     pub stable_hash: Fingerprint,\n+\n+    /// This field provides fast access to information that is also contained\n+    /// in `kind`.\n+    ///\n+    /// This field shouldn't be used directly and may be removed in the future.\n+    /// Use `Ty::flags()` instead.\n+    pub flags: TypeFlags,\n+\n+    /// This field provides fast access to information that is also contained\n+    /// in `kind`.\n+    ///\n+    /// This is a kind of confusing thing: it stores the smallest\n+    /// binder such that\n+    ///\n+    /// (a) the binder itself captures nothing but\n+    /// (b) all the late-bound things within the type are captured\n+    ///     by some sub-binder.\n+    ///\n+    /// So, for a type without any late-bound things, like `u32`, this\n+    /// will be *innermost*, because that is the innermost binder that\n+    /// captures nothing. But for a type `&'D u32`, where `'D` is a\n+    /// late-bound region with De Bruijn index `D`, this would be `D + 1`\n+    /// -- the binder itself does not capture `D`, but `D` is captured\n+    /// by an inner binder.\n+    ///\n+    /// We call this concept an \"exclusive\" binder `D` because all\n+    /// De Bruijn indices within the type are contained within `0..D`\n+    /// (exclusive).\n+    pub outer_exclusive_binder: DebruijnIndex,\n }\n \n impl<T: PartialEq> PartialEq for WithCachedTypeInfo<T> {"}]}