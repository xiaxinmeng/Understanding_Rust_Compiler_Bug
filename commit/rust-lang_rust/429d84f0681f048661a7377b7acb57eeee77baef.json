{"sha": "429d84f0681f048661a7377b7acb57eeee77baef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOWQ4NGYwNjgxZjA0ODY2MWE3Mzc3YjdhY2I1N2VlZWU3N2JhZWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-02T10:14:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-02T10:14:24Z"}, "message": "remove/fix outdated FIXMEs in tests", "tree": {"sha": "978d8fbfb5c3afa71f9bcaf4ece47b3ab655d94d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/978d8fbfb5c3afa71f9bcaf4ece47b3ab655d94d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/429d84f0681f048661a7377b7acb57eeee77baef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/429d84f0681f048661a7377b7acb57eeee77baef", "html_url": "https://github.com/rust-lang/rust/commit/429d84f0681f048661a7377b7acb57eeee77baef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/429d84f0681f048661a7377b7acb57eeee77baef/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "819a5bc1293ccd680c670e0bd1c92573d07bd088", "url": "https://api.github.com/repos/rust-lang/rust/commits/819a5bc1293ccd680c670e0bd1c92573d07bd088", "html_url": "https://github.com/rust-lang/rust/commit/819a5bc1293ccd680c670e0bd1c92573d07bd088"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "f4fefaad5e22ddf82cdfe74b2fc5edbe0ac05a0e", "filename": "tests/compile-fail-fullmir/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fillegal_write2.rs?ref=429d84f0681f048661a7377b7acb57eeee77baef", "patch": "@@ -1,7 +1,3 @@\n-// We fail to detect this when neither this nor libstd are optimized/have retagging.\n-// FIXME: Investigate that.\n-// compile-flags: -Zmir-opt-level=0\n-\n #![allow(unused_variables)]\n \n fn main() {"}, {"sha": "bd5e28b47e8673a94f48cf26144be28900e49f8d", "filename": "tests/compile-fail-fullmir/stacked_borrows/pointer_smuggling.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fpointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fpointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fpointer_smuggling.rs?ref=429d84f0681f048661a7377b7acb57eeee77baef", "patch": "@@ -1,5 +1,3 @@\n-#![allow(unused_variables)]\n-\n static mut PTR: *mut u8 = 0 as *mut _;\n \n fn fun1(x: &mut u8) {\n@@ -14,7 +12,8 @@ fn fun2() {\n }\n \n fn main() {\n-    let val = &mut 0; // FIXME: This should also work with a local variable, but currently it does not.\n+    let mut val = 0;\n+    let val = &mut val;\n     fun1(val);\n     *val = 2; // this invalidates any raw ptrs `fun1` might have created.\n     fun2(); // if they now use a raw ptr they break our reference"}, {"sha": "de693bd463209649db313b37f2ebceb0ef9f31dc", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=429d84f0681f048661a7377b7acb57eeee77baef", "patch": "@@ -106,7 +106,7 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n         flags.push(\"-Zmir-opt-level=1\".to_owned());\n     }\n     if !have_fullmir() {\n-        // Validation relies on the EscapeToRaw statements being emitted\n+        // FIXME: Validation relies on the EscapeToRaw statements being emitted\n         flags.push(\"-Zmiri-disable-validation\".to_owned());\n     }\n "}, {"sha": "6ef0a6330f739ba3e65062e8f288bc4b2343e031", "filename": "tests/run-pass/dst-struct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-struct.rs?ref=429d84f0681f048661a7377b7acb57eeee77baef", "patch": "@@ -127,8 +127,9 @@ pub fn main() {\n     let f2 : Box<Fat<[isize]>> = f1;\n     foo(&*f2);\n \n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let f3 : Box<Fat<[isize]>> =\n         Box::<Fat<[_; 3]>>::new(Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] });\n     foo(&*f3);\n+    let f4 : Box<Fat<[isize]>> = box Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n+    foo(&*f4);\n }"}, {"sha": "daeba060a78bf344a2f147216a27ca5046d47485", "filename": "tests/run-pass/sums.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Frun-pass%2Fsums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Frun-pass%2Fsums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsums.rs?ref=429d84f0681f048661a7377b7acb57eeee77baef", "patch": "@@ -1,6 +1,3 @@\n-// FIXME(solson): 32-bit mode doesn't test anything currently.\n-#![cfg_attr(target_pointer_width = \"32\", allow(dead_code))]\n-\n #[derive(Debug, PartialEq)]\n enum Unit { Unit(()) } // Force non-C-enum representation.\n "}, {"sha": "396846b23236e724884094e22a8f87a9d6494a30", "filename": "tests/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429d84f0681f048661a7377b7acb57eeee77baef/tests%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvec-matching-fold.rs?ref=429d84f0681f048661a7377b7acb57eeee77baef", "patch": "@@ -22,7 +22,6 @@ fn foldl<T, U, F>(values: &[T],\n         &[ref head, ref tail..] =>\n             foldl(tail, function(initial, head), function),\n         &[] => {\n-            // FIXME: call guards\n             let res = initial.clone(); res\n         }\n     }\n@@ -39,7 +38,6 @@ fn foldr<T, U, F>(values: &[T],\n         &[ref head.., ref tail] =>\n             foldr(head, function(tail, initial), function),\n         &[] => {\n-            // FIXME: call guards\n             let res = initial.clone(); res\n         }\n     }"}]}