{"sha": "06fd212d6a52e8820f39c5dac3c80dbd773df643", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZmQyMTJkNmE1MmU4ODIwZjM5YzVkYWMzYzgwZGJkNzczZGY2NDM=", "commit": {"author": {"name": "Nym Seddon", "email": "unseddd@shh.xyz", "date": "2021-01-10T14:31:02Z"}, "committer": {"name": "Nym Seddon", "email": "unseddd@shh.xyz", "date": "2021-01-10T15:12:50Z"}, "message": "Add ABI argument to `find_mir_or_eval_fn`\n\nAdd ABI argument for called function in `find_mir_or_eval_fn` and\n`call_extra_fn`. Useful for comparing with expected ABI in interpreters.\n\nRelated to [miri/1631](https://github.com/rust-lang/miri/issues/1631)", "tree": {"sha": "1cc95691668c80d6358008e9eecf85bedf1d0f60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cc95691668c80d6358008e9eecf85bedf1d0f60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06fd212d6a52e8820f39c5dac3c80dbd773df643", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCAAuFiEEumxubqYU840FDE3vfWY0J2GGP/4FAl/7GXUQHHVuc2VkZGRA\nc2hoLnh5egAKCRB9ZjQnYYY//uvvD/wNmZX3ytL0W1xMQjN6lVo2uUpk4xoqZ6zV\nxtmjp4TXzhsXT4l9rUS03k0obokgvk8plDz7s22ANoGzKTaPrAIiXzvOMri77JtS\nDdw6yw8XcYf2VUWeA8O9iyi7BuTNpLnfJ9WrjQtshUWyLdGq2Gaz26gRPXQGz5nX\nCTW83TegCqweAXNesioWXE97hSCJT++5YJ27jLD9rS7eTo/KSwcH2DHwQ6GBIZrL\ntL4v9KEnA8XbjBXI7O4T3ZFTgPEXTzjTX/Y2l1fTZzHM7z3Xhhlv8EmsKlsiX6TB\n0xb5vuHM7nevxKLKOxKkk9XqQ6/jeBCRnL7IIC7rOb8kPco7QNjwT2qzhcaPHAYL\nJSAaEJ6wD5cDfRwPBS//sljMxL2FP88fo2SoJRTMk1cZwVMbVcFNWVlxw/MbDF8B\nZHDr6CyKST+v8pP+D6r9phc+kNu3oYbkn6KW+q9+ZiyN937d4gxBh5/XPb6mfcdW\n6JsjOuTnR4G4EZYfOlF6MHmCUjJj04TWn1BgvOfnwKVhpJkLyMdHQcqSLWBvXE8e\nafsUnbXfQtXPALAEUOLObmeKR4gHj6X04tDuHgffVRd20gVrdLXg+kATojg+rL8R\ntGH5eSNmS+WKKj56bTEqmuWF4PUTWicR1hrqkfdSM12CBzS+xG0Zt+pLuVA8GZJy\ntxFcu8FPDw==\n=NkAG\n-----END PGP SIGNATURE-----", "payload": "tree 1cc95691668c80d6358008e9eecf85bedf1d0f60\nparent fd34606ddf02d1e9364e459b373a6ad665c3d8a4\nauthor Nym Seddon <unseddd@shh.xyz> 1610289062 +0000\ncommitter Nym Seddon <unseddd@shh.xyz> 1610291570 +0000\n\nAdd ABI argument to `find_mir_or_eval_fn`\n\nAdd ABI argument for called function in `find_mir_or_eval_fn` and\n`call_extra_fn`. Useful for comparing with expected ABI in interpreters.\n\nRelated to [miri/1631](https://github.com/rust-lang/miri/issues/1631)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06fd212d6a52e8820f39c5dac3c80dbd773df643", "html_url": "https://github.com/rust-lang/rust/commit/06fd212d6a52e8820f39c5dac3c80dbd773df643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06fd212d6a52e8820f39c5dac3c80dbd773df643/comments", "author": null, "committer": null, "parents": [{"sha": "fd34606ddf02d1e9364e459b373a6ad665c3d8a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd34606ddf02d1e9364e459b373a6ad665c3d8a4", "html_url": "https://github.com/rust-lang/rust/commit/fd34606ddf02d1e9364e459b373a6ad665c3d8a4"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "02a9ec4df16d556f165f05edc4b38239518a52f0", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06fd212d6a52e8820f39c5dac3c80dbd773df643/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fd212d6a52e8820f39c5dac3c80dbd773df643/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=06fd212d6a52e8820f39c5dac3c80dbd773df643", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::mir::AssertMessage;\n use rustc_session::Limit;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_target::abi::{Align, Size};\n+use rustc_target::spec::abi::Abi;\n \n use crate::interpret::{\n     self, compile_time_machine, AllocId, Allocation, Frame, ImmTy, InterpCx, InterpResult, Memory,\n@@ -203,6 +204,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n+        _abi: Abi,\n         args: &[OpTy<'tcx>],\n         _ret: Option<(PlaceTy<'tcx>, mir::BasicBlock)>,\n         _unwind: Option<mir::BasicBlock>, // unwinding is not supported in consts"}, {"sha": "a1a825b3268aea2269e91835b39e97dcf3b04354", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06fd212d6a52e8820f39c5dac3c80dbd773df643/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fd212d6a52e8820f39c5dac3c80dbd773df643/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=06fd212d6a52e8820f39c5dac3c80dbd773df643", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::def_id::DefId;\n use rustc_target::abi::Size;\n+use rustc_target::spec::abi::Abi;\n \n use super::{\n     AllocId, Allocation, AllocationExtra, CheckInAllocMsg, Frame, ImmTy, InterpCx, InterpResult,\n@@ -144,6 +145,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n@@ -154,6 +156,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn call_extra_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         fn_val: Self::ExtraFnVal,\n+        abi: Abi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n@@ -405,6 +408,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     fn call_extra_fn(\n         _ecx: &mut InterpCx<$mir, $tcx, Self>,\n         fn_val: !,\n+        _abi: Abi,\n         _args: &[OpTy<$tcx>],\n         _ret: Option<(PlaceTy<$tcx>, mir::BasicBlock)>,\n         _unwind: Option<mir::BasicBlock>,"}, {"sha": "575667f9a95258e17b6b17f4cb72643e4b0db861", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06fd212d6a52e8820f39c5dac3c80dbd773df643/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fd212d6a52e8820f39c5dac3c80dbd773df643/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=06fd212d6a52e8820f39c5dac3c80dbd773df643", "patch": "@@ -219,7 +219,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let instance = match fn_val {\n             FnVal::Instance(instance) => instance,\n             FnVal::Other(extra) => {\n-                return M::call_extra_fn(self, extra, args, ret, unwind);\n+                return M::call_extra_fn(self, extra, caller_abi, args, ret, unwind);\n             }\n         };\n \n@@ -264,10 +264,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | ty::InstanceDef::CloneShim(..)\n             | ty::InstanceDef::Item(_) => {\n                 // We need MIR for this fn\n-                let body = match M::find_mir_or_eval_fn(self, instance, args, ret, unwind)? {\n-                    Some(body) => body,\n-                    None => return Ok(()),\n-                };\n+                let body =\n+                    match M::find_mir_or_eval_fn(self, instance, caller_abi, args, ret, unwind)? {\n+                        Some(body) => body,\n+                        None => return Ok(()),\n+                    };\n \n                 self.push_stack_frame(\n                     instance,"}, {"sha": "2d6d0adf3bccd1734c54caa205f1a100ebe7221c", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06fd212d6a52e8820f39c5dac3c80dbd773df643/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fd212d6a52e8820f39c5dac3c80dbd773df643/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=06fd212d6a52e8820f39c5dac3c80dbd773df643", "patch": "@@ -25,6 +25,7 @@ use rustc_middle::ty::{\n use rustc_session::lint;\n use rustc_span::{def_id::DefId, Span};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, TargetDataLayout};\n+use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n \n use crate::const_eval::ConstEvalErr;\n@@ -187,6 +188,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::Instance<'tcx>,\n+        _abi: Abi,\n         _args: &[OpTy<'tcx>],\n         _ret: Option<(PlaceTy<'tcx>, BasicBlock)>,\n         _unwind: Option<BasicBlock>,"}]}