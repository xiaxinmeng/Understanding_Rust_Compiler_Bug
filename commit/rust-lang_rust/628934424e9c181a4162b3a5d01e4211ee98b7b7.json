{"sha": "628934424e9c181a4162b3a5d01e4211ee98b7b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyODkzNDQyNGU5YzE4MWE0MTYyYjNhNWQwMWU0MjExZWU5OGI3Yjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-26T14:29:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-26T14:29:11Z"}, "message": "Merge pull request #3087 from rust-lang-nursery/run\n\nUse the compilers exit code computation instead of rolling our own", "tree": {"sha": "6b1abcbda63e84b71a3ee8c5398bd79cc7e2d7dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b1abcbda63e84b71a3ee8c5398bd79cc7e2d7dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/628934424e9c181a4162b3a5d01e4211ee98b7b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbgrk3CRBK7hj4Ov3rIwAAdHIIAFft7ZK6Ekhzb0o2REx29xJt\n2llOsRZVsShK0NQglU2mykc+yRLBS8HLqf+9/kxGF5LN0Q5sQGdNpXjf08kpOPo5\n7yThqxwCzSgRV1DGHB3GeLbxLFwljBHazI1tQC9Vd9O5HAt5HIlCsyQz7c9waI2i\nwYFcWDgMh5yevguBbboGF18Ek5C1UkpAiz3WFq4/+JAyClLQRQjNk690Y61kViWZ\nTgpmLhjX+MyX026a/LRAD7cKkUBKS/ltztI1OuziBc+ltcXsf3s3T7Lym5I0ZsKs\nSTR9qc142iEG7ZODushjTz6liFFqkigAEvw9m2mdQyIkD3+hrfTltKZHfP4NJNs=\n=S4Ld\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b1abcbda63e84b71a3ee8c5398bd79cc7e2d7dd\nparent 9ce826ade13821a520c18197cea6a75cfb97ef09\nparent caa59e2e277128767023cfe867f54dae943af6ca\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1535293751 +0200\ncommitter GitHub <noreply@github.com> 1535293751 +0200\n\nMerge pull request #3087 from rust-lang-nursery/run\n\nUse the compilers exit code computation instead of rolling our own"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/628934424e9c181a4162b3a5d01e4211ee98b7b7", "html_url": "https://github.com/rust-lang/rust/commit/628934424e9c181a4162b3a5d01e4211ee98b7b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/628934424e9c181a4162b3a5d01e4211ee98b7b7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ce826ade13821a520c18197cea6a75cfb97ef09", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce826ade13821a520c18197cea6a75cfb97ef09", "html_url": "https://github.com/rust-lang/rust/commit/9ce826ade13821a520c18197cea6a75cfb97ef09"}, {"sha": "caa59e2e277128767023cfe867f54dae943af6ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa59e2e277128767023cfe867f54dae943af6ca", "html_url": "https://github.com/rust-lang/rust/commit/caa59e2e277128767023cfe867f54dae943af6ca"}], "stats": {"total": 216, "additions": 107, "deletions": 109}, "files": [{"sha": "6854ccbbddc0bada7cc54c58b6d14b6c644e2205", "filename": "src/driver.rs", "status": "modified", "additions": 107, "deletions": 109, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/628934424e9c181a4162b3a5d01e4211ee98b7b7/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628934424e9c181a4162b3a5d01e4211ee98b7b7/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=628934424e9c181a4162b3a5d01e4211ee98b7b7", "patch": "@@ -13,125 +13,123 @@ fn show_version() {\n }\n \n pub fn main() {\n-    use std::env;\n+    exit(rustc_driver::run(move || {\n+        use std::env;\n \n-    if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n-        show_version();\n-        return;\n-    }\n+        if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n+            show_version();\n+            exit(0);\n+        }\n \n-    let sys_root = option_env!(\"SYSROOT\")\n-        .map(String::from)\n-        .or_else(|| std::env::var(\"SYSROOT\").ok())\n-        .or_else(|| {\n-            let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-            let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-            home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n-        })\n-        .or_else(|| {\n-            Command::new(\"rustc\")\n-                .arg(\"--print\")\n-                .arg(\"sysroot\")\n-                .output()\n-                .ok()\n-                .and_then(|out| String::from_utf8(out.stdout).ok())\n-                .map(|s| s.trim().to_owned())\n-        })\n-        .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n+        let sys_root = option_env!(\"SYSROOT\")\n+            .map(String::from)\n+            .or_else(|| std::env::var(\"SYSROOT\").ok())\n+            .or_else(|| {\n+                let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+                let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+                home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n+            })\n+            .or_else(|| {\n+                Command::new(\"rustc\")\n+                    .arg(\"--print\")\n+                    .arg(\"sysroot\")\n+                    .output()\n+                    .ok()\n+                    .and_then(|out| String::from_utf8(out.stdout).ok())\n+                    .map(|s| s.trim().to_owned())\n+            })\n+            .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n \n-    // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n-    // We're invoking the compiler programmatically, so we ignore this/\n-    let mut orig_args: Vec<String> = env::args().collect();\n-    if orig_args.len() <= 1 {\n-        std::process::exit(1);\n-    }\n-    if orig_args[1] == \"rustc\" {\n-        // we still want to be able to invoke it normally though\n-        orig_args.remove(1);\n-    }\n-    // this conditional check for the --sysroot flag is there so users can call\n-    // `clippy_driver` directly\n-    // without having to pass --sysroot or anything\n-    let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n-        orig_args.clone()\n-    } else {\n-        orig_args\n-            .clone()\n-            .into_iter()\n-            .chain(Some(\"--sysroot\".to_owned()))\n-            .chain(Some(sys_root))\n-            .collect()\n-    };\n+        // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n+        // We're invoking the compiler programmatically, so we ignore this/\n+        let mut orig_args: Vec<String> = env::args().collect();\n+        if orig_args.len() <= 1 {\n+            std::process::exit(1);\n+        }\n+        if orig_args[1] == \"rustc\" {\n+            // we still want to be able to invoke it normally though\n+            orig_args.remove(1);\n+        }\n+        // this conditional check for the --sysroot flag is there so users can call\n+        // `clippy_driver` directly\n+        // without having to pass --sysroot or anything\n+        let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n+            orig_args.clone()\n+        } else {\n+            orig_args\n+                .clone()\n+                .into_iter()\n+                .chain(Some(\"--sysroot\".to_owned()))\n+                .chain(Some(sys_root))\n+                .collect()\n+        };\n \n-    // this check ensures that dependencies are built but not linted and the final\n-    // crate is\n-    // linted but not built\n-    let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n-        || orig_args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n+        // this check ensures that dependencies are built but not linted and the final\n+        // crate is\n+        // linted but not built\n+        let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n+            || orig_args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n \n-    if clippy_enabled {\n-        args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n-        if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n-            args.extend(\n-                extra_args\n-                    .split(\"__CLIPPY_HACKERY__\")\n-                    .filter(|s| !s.is_empty())\n-                    .map(str::to_owned),\n-            );\n+        if clippy_enabled {\n+            args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+            if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n+                args.extend(\n+                    extra_args\n+                        .split(\"__CLIPPY_HACKERY__\")\n+                        .filter(|s| !s.is_empty())\n+                        .map(str::to_owned),\n+                );\n+            }\n         }\n-    }\n \n-    let mut controller = CompileController::basic();\n-    if clippy_enabled {\n-        controller.after_parse.callback = Box::new(move |state| {\n-            let mut registry = rustc_plugin::registry::Registry::new(\n-                state.session,\n-                state\n-                    .krate\n-                    .as_ref()\n-                    .expect(\n-                        \"at this compilation stage \\\n-                         the crate must be parsed\",\n-                    )\n-                    .span,\n-            );\n-            registry.args_hidden = Some(Vec::new());\n+        let mut controller = CompileController::basic();\n+        if clippy_enabled {\n+            controller.after_parse.callback = Box::new(move |state| {\n+                let mut registry = rustc_plugin::registry::Registry::new(\n+                    state.session,\n+                    state\n+                        .krate\n+                        .as_ref()\n+                        .expect(\n+                            \"at this compilation stage \\\n+                            the crate must be parsed\",\n+                        )\n+                        .span,\n+                );\n+                registry.args_hidden = Some(Vec::new());\n \n-            let conf = clippy_lints::read_conf(&registry);\n-            clippy_lints::register_plugins(&mut registry, &conf);\n+                let conf = clippy_lints::read_conf(&registry);\n+                clippy_lints::register_plugins(&mut registry, &conf);\n \n-            let rustc_plugin::registry::Registry {\n-                early_lint_passes,\n-                late_lint_passes,\n-                lint_groups,\n-                llvm_passes,\n-                attributes,\n-                ..\n-            } = registry;\n-            let sess = &state.session;\n-            let mut ls = sess.lint_store.borrow_mut();\n-            for pass in early_lint_passes {\n-                ls.register_early_pass(Some(sess), true, pass);\n-            }\n-            for pass in late_lint_passes {\n-                ls.register_late_pass(Some(sess), true, pass);\n-            }\n+                let rustc_plugin::registry::Registry {\n+                    early_lint_passes,\n+                    late_lint_passes,\n+                    lint_groups,\n+                    llvm_passes,\n+                    attributes,\n+                    ..\n+                } = registry;\n+                let sess = &state.session;\n+                let mut ls = sess.lint_store.borrow_mut();\n+                for pass in early_lint_passes {\n+                    ls.register_early_pass(Some(sess), true, pass);\n+                }\n+                for pass in late_lint_passes {\n+                    ls.register_late_pass(Some(sess), true, pass);\n+                }\n \n-            for (name, to) in lint_groups {\n-                ls.register_group(Some(sess), true, name, to);\n-            }\n-            clippy_lints::register_pre_expansion_lints(sess, &mut ls, &conf);\n+                for (name, to) in lint_groups {\n+                    ls.register_group(Some(sess), true, name, to);\n+                }\n+                clippy_lints::register_pre_expansion_lints(sess, &mut ls, &conf);\n \n-            sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n-            sess.plugin_attributes.borrow_mut().extend(attributes);\n-        });\n-    }\n-    controller.compilation_done.stop = Compilation::Stop;\n+                sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n+                sess.plugin_attributes.borrow_mut().extend(attributes);\n+            });\n+        }\n+        controller.compilation_done.stop = Compilation::Stop;\n \n-    if rustc_driver::run_compiler(&args, Box::new(controller), None, None)\n-        .0\n-        .is_err()\n-    {\n-        exit(101);\n-    }\n+        let args = args;\n+        rustc_driver::run_compiler(&args, Box::new(controller), None, None)\n+    }) as i32)\n }"}]}