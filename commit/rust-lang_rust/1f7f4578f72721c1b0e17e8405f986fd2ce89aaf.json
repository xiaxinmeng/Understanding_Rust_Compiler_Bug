{"sha": "1f7f4578f72721c1b0e17e8405f986fd2ce89aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmN2Y0NTc4ZjcyNzIxYzFiMGUxN2U4NDA1Zjk4NmZkMmNlODlhYWY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-21T18:15:06Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-22T23:08:03Z"}, "message": "Filter out error predicates in type bounds as well", "tree": {"sha": "efe0fe32ff3d2cc5981206ad1a7777824cf9de05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efe0fe32ff3d2cc5981206ad1a7777824cf9de05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f7f4578f72721c1b0e17e8405f986fd2ce89aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7f4578f72721c1b0e17e8405f986fd2ce89aaf", "html_url": "https://github.com/rust-lang/rust/commit/1f7f4578f72721c1b0e17e8405f986fd2ce89aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f7f4578f72721c1b0e17e8405f986fd2ce89aaf/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4053fcfca0e33f133c53fa755c1b1bcc0b4c11bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4053fcfca0e33f133c53fa755c1b1bcc0b4c11bb", "html_url": "https://github.com/rust-lang/rust/commit/4053fcfca0e33f133c53fa755c1b1bcc0b4c11bb"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "ae316922bdea8a3df540c06642e0b4c48ca82544", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f7f4578f72721c1b0e17e8405f986fd2ce89aaf/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7f4578f72721c1b0e17e8405f986fd2ce89aaf/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=1f7f4578f72721c1b0e17e8405f986fd2ce89aaf", "patch": "@@ -958,6 +958,23 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn error_bound_chalk() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Trait {\n+    fn foo(&self) -> u32 {}\n+}\n+\n+fn test(x: (impl Trait + UnknownTrait)) {\n+    x.foo()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"u32\");\n+}\n+\n #[test]\n fn assoc_type_bindings() {\n     assert_snapshot!("}, {"sha": "555930c9bfa12afbdec21d679f39bc63b42ed8c4", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f7f4578f72721c1b0e17e8405f986fd2ce89aaf/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7f4578f72721c1b0e17e8405f986fd2ce89aaf/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=1f7f4578f72721c1b0e17e8405f986fd2ce89aaf", "patch": "@@ -129,12 +129,22 @@ impl ToChalk for Ty {\n             Ty::Bound(idx) => chalk_ir::TyData::BoundVar(idx as usize).intern(),\n             Ty::Infer(_infer_ty) => panic!(\"uncanonicalized infer ty\"),\n             Ty::Dyn(predicates) => {\n-                let where_clauses = predicates.iter().cloned().map(|p| p.to_chalk(db)).collect();\n+                let where_clauses = predicates\n+                    .iter()\n+                    .filter(|p| !p.is_error())\n+                    .cloned()\n+                    .map(|p| p.to_chalk(db))\n+                    .collect();\n                 let bounded_ty = chalk_ir::BoundedTy { bounds: make_binders(where_clauses, 1) };\n                 chalk_ir::TyData::Dyn(bounded_ty).intern()\n             }\n             Ty::Opaque(predicates) => {\n-                let where_clauses = predicates.iter().cloned().map(|p| p.to_chalk(db)).collect();\n+                let where_clauses = predicates\n+                    .iter()\n+                    .filter(|p| !p.is_error())\n+                    .cloned()\n+                    .map(|p| p.to_chalk(db))\n+                    .collect();\n                 let bounded_ty = chalk_ir::BoundedTy { bounds: make_binders(where_clauses, 1) };\n                 chalk_ir::TyData::Opaque(bounded_ty).intern()\n             }"}]}