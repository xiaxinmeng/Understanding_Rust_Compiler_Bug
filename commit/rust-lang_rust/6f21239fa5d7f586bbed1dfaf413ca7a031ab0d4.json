{"sha": "6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMjEyMzlmYTVkN2Y1ODZiYmVkMWRmYWY0MTNjYTdhMDMxYWIwZDQ=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2017-08-10T20:31:11Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2017-08-16T15:45:07Z"}, "message": "remove `extra_args` argument", "tree": {"sha": "f42e4c256064240df579ef2ede929fcffdcc8456", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f42e4c256064240df579ef2ede929fcffdcc8456"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEJ9c9OhXB85uXPmbOeLE+KEl68t8FAlmUaIMACgkQeLE+KEl6\n8t93+hAAj1VKxi5vpL2j9s3ab8yW8Xfw80bsRNUrjg+gYQbsUN62S8/vCtzWEEkg\nfoPKQvH5HgPERtw5P3bpKuXBW6DgD/78dGQfj32iroTEux1NadiyUytGB5oySShj\nGrDv95HikDtkdFObTRkokdgZYoWs7aHPRrn/CDiECVNm8Nk0FIQY94JfkHdDGZN0\nHDNs7/fH4SC1fup9FOlDe0S5q3fIDfPWeAt34AiyLFR8ELrgCdtQDyxl/VrtY0dl\nR6GQJpGkpzbSVk0hYHrNAVz8VQKaBkJuG2VPCfeladUnILRKRxGBEfQFWuS9Lvhy\nodrmpKX6Cl1q0XS50ea9AHFkeFCJGxedfn27I24z2t1GR4VDuffjEem5ege0MsmY\nWN/OFPq9ix0cJsAWgSxp6mOOpp3bEb1z4LjBw622aKHvgaS7JCqBVOZCwxgeQRug\nUElbierWQrlRwA5cG2lu9tkQEEGtdhNKPqG2Roeq7Ezb6xCpgG5v38/Ef/Lzfnkl\nnP9lNi1+XkJs7liO/CPGm6wiRavi4YcH8QojALihXXZ7uSZVmS5jyqpF3FqVsRci\nil3eH5HiuGty2DivTqGRyshbaQ4+OQnZQXQLgViXW6OaL3qgaL8qf7OKXcEMngq6\nhyId+/9gmL7ImThHdUg/BkZw6dyUHes4yuFtWKdQdLc7PkNPztY=\n=bih1\n-----END PGP SIGNATURE-----", "payload": "tree f42e4c256064240df579ef2ede929fcffdcc8456\nparent 04dee085016741016c77d958323fe4e19cea3037\nauthor Andy Russell <arussell123@gmail.com> 1502397071 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1502898307 -0400\n\nremove `extra_args` argument\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4", "html_url": "https://github.com/rust-lang/rust/commit/6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04dee085016741016c77d958323fe4e19cea3037", "url": "https://api.github.com/repos/rust-lang/rust/commits/04dee085016741016c77d958323fe4e19cea3037", "html_url": "https://github.com/rust-lang/rust/commit/04dee085016741016c77d958323fe4e19cea3037"}], "stats": {"total": 86, "additions": 38, "deletions": 48}, "files": [{"sha": "e129c39936dd78caf4776bde871f5f8de4b22b3b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 38, "deletions": 48, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6f21239fa5d7f586bbed1dfaf413ca7a031ab0d4", "patch": "@@ -1100,25 +1100,23 @@ actual:\\n\\\n     }\n \n     fn compile_test(&self) -> ProcRes {\n-        let aux_dir = self.aux_output_dir_name();\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        let mut extra_args = vec![\"-L\".to_owned(),\n-                                  aux_dir.to_str().unwrap().to_owned()];\n+        let mut rustc = self.make_compile_args(\n+            &self.testpaths.file, TargetLocation::ThisFile(self.make_exe_name()));\n+\n+        rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n+\n         match self.config.mode {\n             CompileFail | Ui => {\n                 // compile-fail and ui tests tend to have tons of unused code as\n                 // it's just testing various pieces of the compile, but we don't\n                 // want to actually assert warnings about all this code. Instead\n                 // let's just ignore unused code warnings by defaults and tests\n                 // can turn it back on if needed.\n-                extra_args.push(\"-A\".to_owned());\n-                extra_args.push(\"unused\".to_owned());\n+                rustc.args(&[\"-A\", \"unused\"]);\n             }\n             _ => {}\n         }\n \n-        let rustc = self.make_compile_args(\n-            extra_args, &self.testpaths.file, TargetLocation::ThisFile(self.make_exe_name()));\n         self.compose_and_run_compiler(rustc, None)\n     }\n \n@@ -1241,17 +1239,27 @@ actual:\\n\\\n         }\n \n         let aux_dir = self.aux_output_dir_name();\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        let extra_link_args = vec![\"-L\".to_owned(),\n-                                   aux_dir.to_str().unwrap().to_owned()];\n \n         for rel_ab in &self.props.aux_builds {\n             let aux_testpaths = self.compute_aux_test_paths(rel_ab);\n             let aux_props = self.props.from_aux_file(&aux_testpaths.file,\n                                                      self.revision,\n                                                      self.config);\n-            let mut crate_type = if aux_props.no_prefer_dynamic {\n-                Vec::new()\n+            let aux_output = {\n+                let f = self.make_lib_name(&self.testpaths.file);\n+                let parent = f.parent().unwrap();\n+                TargetLocation::ThisDirectory(parent.to_path_buf())\n+            };\n+            let aux_cx = TestCx {\n+                config: self.config,\n+                props: &aux_props,\n+                testpaths: &aux_testpaths,\n+                revision: self.revision\n+            };\n+            let mut aux_rustc = aux_cx.make_compile_args(&aux_testpaths.file, aux_output);\n+\n+            let crate_type = if aux_props.no_prefer_dynamic {\n+                None\n             } else if (self.config.target.contains(\"musl\") && !aux_props.force_host) ||\n                       self.config.target.contains(\"emscripten\") {\n                 // We primarily compile all auxiliary libraries as dynamic libraries\n@@ -1263,24 +1271,17 @@ actual:\\n\\\n                 // dynamic libraries so we just go back to building a normal library. Note,\n                 // however, that for MUSL if the library is built with `force_host` then\n                 // it's ok to be a dylib as the host should always support dylibs.\n-                vec![\"--crate-type=lib\".to_owned()]\n+                Some(\"lib\")\n             } else {\n-                vec![\"--crate-type=dylib\".to_owned()]\n-            };\n-            crate_type.extend(extra_link_args.clone());\n-            let aux_output = {\n-                let f = self.make_lib_name(&self.testpaths.file);\n-                let parent = f.parent().unwrap();\n-                TargetLocation::ThisDirectory(parent.to_path_buf())\n-            };\n-            let aux_cx = TestCx {\n-                config: self.config,\n-                props: &aux_props,\n-                testpaths: &aux_testpaths,\n-                revision: self.revision\n+                Some(\"dylib\")\n             };\n-            let aux_rustc =\n-                aux_cx.make_compile_args(crate_type, &aux_testpaths.file, aux_output);\n+\n+            if let Some(crate_type) = crate_type {\n+                aux_rustc.args(&[\"--crate-type\", crate_type]);\n+            }\n+\n+            aux_rustc.arg(\"-L\").arg(&aux_dir);\n+\n             let auxres = aux_cx.compose_and_run(aux_rustc,\n                                                 aux_cx.config.compile_lib_path.to_str().unwrap(),\n                                                 Some(aux_dir.to_str().unwrap()),\n@@ -1337,12 +1338,7 @@ actual:\\n\\\n         result\n     }\n \n-    fn make_compile_args(&self,\n-                         extra_args: Vec<String>,\n-                         input_file: &Path,\n-                         output_file: TargetLocation)\n-                         -> Command\n-    {\n+    fn make_compile_args(&self, input_file: &Path, output_file: TargetLocation) -> Command {\n         let mut rustc = Command::new(&self.config.rustc_path);\n         rustc.arg(input_file)\n             .arg(\"-L\").arg(&self.config.build_base);\n@@ -1410,8 +1406,6 @@ actual:\\n\\\n             }\n         }\n \n-        rustc.args(&extra_args);\n-\n         if !self.props.no_prefer_dynamic {\n             rustc.args(&[\"-C\", \"prefer-dynamic\"]);\n         }\n@@ -1635,17 +1629,13 @@ actual:\\n\\\n \n     fn compile_test_and_save_ir(&self) -> ProcRes {\n         let aux_dir = self.aux_output_dir_name();\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        let mut link_args = vec![\"-L\".to_owned(),\n-                                 aux_dir.to_str().unwrap().to_owned()];\n-        let llvm_args = vec![\"--emit=llvm-ir\".to_owned(),];\n-        link_args.extend(llvm_args);\n-        let rustc = self.make_compile_args(link_args,\n-                                           &self.testpaths.file,\n-                                           TargetLocation::ThisDirectory(\n-                                               self.output_base_name().parent()\n-                                                                      .unwrap()\n-                                                                      .to_path_buf()));\n+\n+        let output_file = TargetLocation::ThisDirectory(\n+            self.output_base_name().parent().unwrap().to_path_buf());\n+        let mut rustc = self.make_compile_args(&self.testpaths.file, output_file);\n+        rustc.arg(\"-L\").arg(aux_dir)\n+            .arg(\"--emit=llvm-ir\");\n+\n         self.compose_and_run_compiler(rustc, None)\n     }\n "}]}