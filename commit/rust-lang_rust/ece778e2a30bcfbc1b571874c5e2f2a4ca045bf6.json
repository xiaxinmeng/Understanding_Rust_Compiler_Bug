{"sha": "ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZTc3OGUyYTMwYmNmYmMxYjU3MTg3NGM1ZTJmMmE0Y2EwNDViZjY=", "commit": {"author": {"name": "Isaac Whitfield", "email": "iw@whitfin.io", "date": "2018-05-10T15:38:21Z"}, "committer": {"name": "Isaac Whitfield", "email": "iw@whitfin.io", "date": "2018-05-18T16:37:29Z"}, "message": "Attempt to pass CrateMetadata flags on creation", "tree": {"sha": "ec4debec5b60d707afcc2409b6b9588a65733f71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec4debec5b60d707afcc2409b6b9588a65733f71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6", "html_url": "https://github.com/rust-lang/rust/commit/ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6/comments", "author": {"login": "whitfin", "id": 5376378, "node_id": "MDQ6VXNlcjUzNzYzNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5376378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitfin", "html_url": "https://github.com/whitfin", "followers_url": "https://api.github.com/users/whitfin/followers", "following_url": "https://api.github.com/users/whitfin/following{/other_user}", "gists_url": "https://api.github.com/users/whitfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitfin/subscriptions", "organizations_url": "https://api.github.com/users/whitfin/orgs", "repos_url": "https://api.github.com/users/whitfin/repos", "events_url": "https://api.github.com/users/whitfin/events{/privacy}", "received_events_url": "https://api.github.com/users/whitfin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "whitfin", "id": 5376378, "node_id": "MDQ6VXNlcjUzNzYzNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5376378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitfin", "html_url": "https://github.com/whitfin", "followers_url": "https://api.github.com/users/whitfin/followers", "following_url": "https://api.github.com/users/whitfin/following{/other_user}", "gists_url": "https://api.github.com/users/whitfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitfin/subscriptions", "organizations_url": "https://api.github.com/users/whitfin/orgs", "repos_url": "https://api.github.com/users/whitfin/repos", "events_url": "https://api.github.com/users/whitfin/events{/privacy}", "received_events_url": "https://api.github.com/users/whitfin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "466fc6815d23dc201e26aa3210f3476443805e80", "url": "https://api.github.com/repos/rust-lang/rust/commits/466fc6815d23dc201e26aa3210f3476443805e80", "html_url": "https://github.com/rust-lang/rust/commit/466fc6815d23dc201e26aa3210f3476443805e80"}], "stats": {"total": 99, "additions": 39, "deletions": 60}, "files": [{"sha": "cc2c0e2502a3b965a2f9713f70a0c90cab2924be", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6", "patch": "@@ -11,6 +11,7 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n use cstore::{self, CStore, CrateSource, MetadataBlob};\n+use decoder::Metadata;\n use locator::{self, CratePaths};\n use schema::CrateRoot;\n use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n@@ -222,13 +223,24 @@ impl<'a> CrateLoader<'a> {\n             crate_root.def_path_table.decode((&metadata, self.sess))\n         });\n \n+        let crate_entry = crate_root\n+            .index\n+            .lookup(metadata.raw_bytes(), CRATE_DEF_INDEX)\n+            .unwrap()\n+            .decode(&metadata);\n+\n+        let crate_attrs: Vec<ast::Attribute> = crate_entry\n+            .attributes\n+            .decode((&metadata, self.sess))\n+            .collect();\n+\n         let trait_impls = crate_root\n             .impls\n             .decode((&metadata, self.sess))\n             .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))\n             .collect();\n \n-        let mut cmeta = cstore::CrateMetadata {\n+        let cmeta = cstore::CrateMetadata {\n             name,\n             extern_crate: Lock::new(None),\n             def_path_table: Lrc::new(def_path_table),\n@@ -248,17 +260,15 @@ impl<'a> CrateLoader<'a> {\n                 rlib,\n                 rmeta,\n             },\n-            compiler_builtins: None,\n-            needs_allocator: None,\n-            needs_panic_runtime: None,\n-            no_builtins: None,\n-            panic_runtime: None,\n-            profiler_runtime: None,\n-            sanitizer_runtime: None,\n+            compiler_builtins: attr::contains_name(&crate_attrs, \"compiler_builtins\"),\n+            needs_allocator: attr::contains_name(&crate_attrs, \"needs_allocator\"),\n+            needs_panic_runtime: attr::contains_name(&crate_attrs, \"needs_panic_runtime\"),\n+            no_builtins: attr::contains_name(&crate_attrs, \"no_builtins\"),\n+            panic_runtime: attr::contains_name(&crate_attrs, \"panic_runtime\"),\n+            profiler_runtime: attr::contains_name(&crate_attrs, \"profiler_runtime\"),\n+            sanitizer_runtime: attr::contains_name(&crate_attrs, \"sanitizer_runtime\"),\n         };\n \n-        cmeta.derive_attributes(self.sess);\n-\n         let cmeta = Lrc::new(cmeta);\n         self.cstore.set_crate_data(cnum, cmeta.clone());\n         (cnum, cmeta)\n@@ -651,12 +661,12 @@ impl<'a> CrateLoader<'a> {\n \n         self.cstore.iter_crate_data(|cnum, data| {\n             needs_panic_runtime = needs_panic_runtime ||\n-                                  data.needs_panic_runtime();\n-            if data.is_panic_runtime() {\n+                                  data.needs_panic_runtime;\n+            if data.panic_runtime {\n                 // Inject a dependency from all #![needs_panic_runtime] to this\n                 // #![panic_runtime] crate.\n                 self.inject_dependency_if(cnum, \"a panic runtime\",\n-                                          &|data| data.needs_panic_runtime());\n+                                          &|data| data.needs_panic_runtime);\n                 runtime_found = runtime_found || *data.dep_kind.lock() == DepKind::Explicit;\n             }\n         });\n@@ -693,7 +703,7 @@ impl<'a> CrateLoader<'a> {\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n         // and the panic strategy is indeed what we thought it was.\n-        if !data.is_panic_runtime() {\n+        if !data.panic_runtime {\n             self.sess.err(&format!(\"the crate `{}` is not a panic runtime\",\n                                    name));\n         }\n@@ -705,7 +715,7 @@ impl<'a> CrateLoader<'a> {\n \n         self.sess.injected_panic_runtime.set(Some(cnum));\n         self.inject_dependency_if(cnum, \"a panic runtime\",\n-                                  &|data| data.needs_panic_runtime());\n+                                  &|data| data.needs_panic_runtime);\n     }\n \n     fn inject_sanitizer_runtime(&mut self) {\n@@ -800,7 +810,7 @@ impl<'a> CrateLoader<'a> {\n                                        PathKind::Crate, dep_kind);\n \n                 // Sanity check the loaded crate to ensure it is indeed a sanitizer runtime\n-                if !data.is_sanitizer_runtime() {\n+                if !data.sanitizer_runtime {\n                     self.sess.err(&format!(\"the crate `{}` is not a sanitizer runtime\",\n                                            name));\n                 }\n@@ -823,7 +833,7 @@ impl<'a> CrateLoader<'a> {\n                                    PathKind::Crate, dep_kind);\n \n             // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n-            if !data.is_profiler_runtime() {\n+            if !data.profiler_runtime {\n                 self.sess.err(&format!(\"the crate `profiler_builtins` is not \\\n                                         a profiler runtime\"));\n             }\n@@ -840,7 +850,7 @@ impl<'a> CrateLoader<'a> {\n         let mut needs_allocator = attr::contains_name(&krate.attrs,\n                                                       \"needs_allocator\");\n         self.cstore.iter_crate_data(|_, data| {\n-            needs_allocator = needs_allocator || data.needs_allocator();\n+            needs_allocator = needs_allocator || data.needs_allocator;\n         });\n         if !needs_allocator {\n             self.sess.injected_allocator.set(None);"}, {"sha": "132e1e23fc4b640a4025b42f552564d5b2cb0075", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6", "patch": "@@ -13,11 +13,11 @@\n \n use schema;\n \n-use rustc::hir::def_id::{CRATE_DEF_INDEX, CrateNum, DefIndex};\n+use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n-use rustc::session::{CrateDisambiguator, Session};\n+use rustc::session::CrateDisambiguator;\n use rustc_target::spec::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::util::nodemap::{FxHashMap, NodeMap};\n@@ -87,13 +87,13 @@ pub struct CrateMetadata {\n     pub proc_macros: Option<Vec<(ast::Name, Lrc<SyntaxExtension>)>>,\n \n     // Booleans derived from attributes\n-    pub compiler_builtins: Option<bool>,\n-    pub needs_allocator: Option<bool>,\n-    pub needs_panic_runtime: Option<bool>,\n-    pub no_builtins: Option<bool>,\n-    pub panic_runtime: Option<bool>,\n-    pub profiler_runtime: Option<bool>,\n-    pub sanitizer_runtime: Option<bool>,\n+    pub compiler_builtins: bool,\n+    pub needs_allocator: bool,\n+    pub needs_panic_runtime: bool,\n+    pub no_builtins: bool,\n+    pub panic_runtime: bool,\n+    pub profiler_runtime: bool,\n+    pub sanitizer_runtime: bool,\n }\n \n pub struct CStore {\n@@ -190,17 +190,15 @@ impl CrateMetadata {\n     pub fn name(&self) -> Symbol {\n         self.root.name\n     }\n+\n     pub fn hash(&self) -> Svh {\n         self.root.hash\n     }\n+\n     pub fn disambiguator(&self) -> CrateDisambiguator {\n         self.root.disambiguator\n     }\n \n-    pub fn needs_allocator(&self) -> bool {\n-        self.needs_allocator.unwrap_or(false)\n-    }\n-\n     pub fn has_global_allocator(&self) -> bool {\n         self.root.has_global_allocator\n     }\n@@ -209,30 +207,6 @@ impl CrateMetadata {\n         self.root.has_default_lib_allocator\n     }\n \n-    pub fn is_panic_runtime(&self) -> bool {\n-        self.panic_runtime.unwrap_or(false)\n-    }\n-\n-    pub fn needs_panic_runtime(&self) -> bool {\n-        self.needs_panic_runtime.unwrap_or(false)\n-    }\n-\n-    pub fn is_compiler_builtins(&self) -> bool {\n-        self.compiler_builtins.unwrap_or(false)\n-    }\n-\n-    pub fn is_sanitizer_runtime(&self) -> bool {\n-        self.sanitizer_runtime.unwrap_or(false)\n-    }\n-\n-    pub fn is_profiler_runtime(&self) -> bool {\n-        self.profiler_runtime.unwrap_or(false)\n-    }\n-\n-    pub fn is_no_builtins(&self) -> bool {\n-        self.no_builtins.unwrap_or(false)\n-    }\n-\n     pub fn panic_strategy(&self) -> PanicStrategy {\n         self.root.panic_strategy.clone()\n     }"}, {"sha": "ac61840661b30c3b0a2bad314f8890f6275f02d4", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ece778e2a30bcfbc1b571874c5e2f2a4ca045bf6", "patch": "@@ -170,17 +170,12 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n \n     dylib_dependency_formats => { Lrc::new(cdata.get_dylib_dependency_formats()) }\n-    is_panic_runtime => { cdata.is_panic_runtime() }\n-    is_compiler_builtins => { cdata.is_compiler_builtins() }\n     has_global_allocator => { cdata.has_global_allocator() }\n-    is_sanitizer_runtime => { cdata.is_sanitizer_runtime() }\n-    is_profiler_runtime => { cdata.is_profiler_runtime() }\n     panic_strategy => { cdata.panic_strategy() }\n     extern_crate => {\n         let r = Lrc::new(*cdata.extern_crate.lock());\n         r\n     }\n-    is_no_builtins => { cdata.is_no_builtins() }\n     impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n     reachable_non_generics => {\n         let reachable_non_generics = tcx"}]}