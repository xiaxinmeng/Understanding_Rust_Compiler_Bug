{"sha": "2202891221647c9c1a1c6bd47c0b0214b364803d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMDI4OTEyMjE2NDdjOWMxYTFjNmJkNDdjMGIwMjE0YjM2NDgwM2Q=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2020-01-03T13:04:46Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2020-01-03T13:04:46Z"}, "message": "Split errors into WorkspaceError enum", "tree": {"sha": "ad860d996a05ae11783540541fee8a29bd76dfe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad860d996a05ae11783540541fee8a29bd76dfe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2202891221647c9c1a1c6bd47c0b0214b364803d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJeDzvuAAoJENWyu1zcMzS8SeYH/R44zu5lwxHH834d5ceTEEtx\n4eQHlYuzUrpODigib9BpOKKQkm4naQDjOgTJZUMHSgusyuMxwxFxFBfAxS/lLyey\noUAEUUeV18zgk54Dnm2wW2EshsCkG6KPz6A23Y+HABzlGTLn3VVD29xz2qTWHXZt\nqJB1rxTkZ9FGh+Bd9iWJtqRPv+KdLRiQ+tLnunWlhFLLTS3q6/ja78on5VXOQ4ho\nxPUFUeo97JHaGvXBPy+uiiN9XA8YHOp/5QXO5jGpE7lt5kR22h8fQPhNE8Y0xooe\n/IJubm0MYZ2WxdToptK+/sxMkvQj7k0+TuR+7PGLFpirBexxQnhumtp3EZRMwR8=\n=BjoW\n-----END PGP SIGNATURE-----", "payload": "tree ad860d996a05ae11783540541fee8a29bd76dfe1\nparent 4516c4c1447942a8f01b59a71dcf5abfa2c5e37a\nauthor Wilco Kusee <wilcokusee@gmail.com> 1578056686 +0100\ncommitter Wilco Kusee <wilcokusee@gmail.com> 1578056686 +0100\n\nSplit errors into WorkspaceError enum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2202891221647c9c1a1c6bd47c0b0214b364803d", "html_url": "https://github.com/rust-lang/rust/commit/2202891221647c9c1a1c6bd47c0b0214b364803d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2202891221647c9c1a1c6bd47c0b0214b364803d/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4516c4c1447942a8f01b59a71dcf5abfa2c5e37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4516c4c1447942a8f01b59a71dcf5abfa2c5e37a", "html_url": "https://github.com/rust-lang/rust/commit/4516c4c1447942a8f01b59a71dcf5abfa2c5e37a"}], "stats": {"total": 119, "additions": 89, "deletions": 30}, "files": [{"sha": "db55c3bb28c6636d3539d2796a70b11ec8a736f2", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2202891221647c9c1a1c6bd47c0b0214b364803d/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2202891221647c9c1a1c6bd47c0b0214b364803d/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=2202891221647c9c1a1c6bd47c0b0214b364803d", "patch": "@@ -10,7 +10,10 @@ use ra_syntax::{ast, Parse, SourceFile, TextRange, TextUnit};\n \n pub use crate::{\n     cancellation::Canceled,\n-    input::{CrateGraph, CrateId, Dependency, Edition, Env, FileId, SourceRoot, SourceRootId},\n+    input::{\n+        CrateGraph, CrateId, Dependency, Edition, Env, FileId, ParseEditionError, SourceRoot,\n+        SourceRootId,\n+    },\n };\n pub use relative_path::{RelativePath, RelativePathBuf};\n pub use salsa;"}, {"sha": "446ccfda03b16b32ad86271ed34243cb07cba92f", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2202891221647c9c1a1c6bd47c0b0214b364803d/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2202891221647c9c1a1c6bd47c0b0214b364803d/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=2202891221647c9c1a1c6bd47c0b0214b364803d", "patch": "@@ -8,7 +8,7 @@ use ra_db::Edition;\n use rustc_hash::FxHashMap;\n use serde::Deserialize;\n \n-use crate::Result;\n+use crate::WorkspaceError;\n \n /// `CargoWorkspace` represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n@@ -156,7 +156,7 @@ impl CargoWorkspace {\n     pub fn from_cargo_metadata(\n         cargo_toml: &Path,\n         cargo_features: &CargoFeatures,\n-    ) -> Result<CargoWorkspace> {\n+    ) -> Result<CargoWorkspace, WorkspaceError> {\n         let mut meta = MetadataCommand::new();\n         meta.manifest_path(cargo_toml);\n         if cargo_features.all_features {\n@@ -171,7 +171,7 @@ impl CargoWorkspace {\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent);\n         }\n-        let meta = meta.exec().map_err(|e| format!(\"cargo metadata failed: {}\", e))?;\n+        let meta = meta.exec().map_err(|e| WorkspaceError::CargoMetadataFailed(e))?;\n         let mut pkg_by_id = FxHashMap::default();\n         let mut packages = Arena::default();\n         let mut targets = Arena::default();"}, {"sha": "49710b358d042f46a82a420ec5b7e3f26316a211", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 73, "deletions": 14, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/2202891221647c9c1a1c6bd47c0b0214b364803d/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2202891221647c9c1a1c6bd47c0b0214b364803d/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=2202891221647c9c1a1c6bd47c0b0214b364803d", "patch": "@@ -5,15 +5,15 @@ mod json_project;\n mod sysroot;\n \n use std::{\n-    error::Error,\n+    fmt,\n     fs::File,\n     io::BufReader,\n     path::{Path, PathBuf},\n     process::Command,\n };\n \n use ra_cfg::CfgOptions;\n-use ra_db::{CrateGraph, CrateId, Edition, Env, FileId};\n+use ra_db::{CrateGraph, CrateId, Edition, Env, FileId, ParseEditionError};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n@@ -23,8 +23,57 @@ pub use crate::{\n     sysroot::Sysroot,\n };\n \n-// FIXME use proper error enum\n-pub type Result<T> = ::std::result::Result<T, Box<dyn Error + Send + Sync>>;\n+#[derive(Debug)]\n+pub enum WorkspaceError {\n+    CargoMetadataFailed(cargo_metadata::Error),\n+    CargoTomlNotFound(PathBuf),\n+    NoStdLib(PathBuf),\n+    OpenWorkspaceError(std::io::Error),\n+    ParseEditionError(ParseEditionError),\n+    ReadWorkspaceError(serde_json::Error),\n+    RustcCfgError,\n+    RustcError(std::io::Error),\n+    RustcOutputError(std::string::FromUtf8Error),\n+    SysrootNotFound,\n+}\n+\n+impl fmt::Display for WorkspaceError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Self::OpenWorkspaceError(err) | Self::RustcError(err) => write!(f, \"{}\", err),\n+            Self::ParseEditionError(err) => write!(f, \"{}\", err),\n+            Self::ReadWorkspaceError(err) => write!(f, \"{}\", err),\n+            Self::RustcOutputError(err) => write!(f, \"{}\", err),\n+            Self::CargoMetadataFailed(err) => write!(f, \"cargo metadata failed: {}\", err),\n+            Self::RustcCfgError => write!(f, \"failed to get rustc cfgs\"),\n+            Self::SysrootNotFound => write!(f, \"failed to locate sysroot\"),\n+            Self::CargoTomlNotFound(path) => {\n+                write!(f, \"can't find Cargo.toml at {}\", path.display())\n+            }\n+            Self::NoStdLib(sysroot) => write!(\n+                f,\n+                \"can't load standard library from sysroot\\n\\\n+                 {:?}\\n\\\n+                 try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n+                sysroot,\n+            ),\n+        }\n+    }\n+}\n+\n+impl std::error::Error for WorkspaceError {}\n+\n+impl From<ParseEditionError> for WorkspaceError {\n+    fn from(err: ParseEditionError) -> Self {\n+        Self::ParseEditionError(err.into())\n+    }\n+}\n+\n+impl From<cargo_metadata::Error> for WorkspaceError {\n+    fn from(err: cargo_metadata::Error) -> Self {\n+        Self::CargoMetadataFailed(err.into())\n+    }\n+}\n \n #[derive(Debug, Clone)]\n pub enum ProjectWorkspace {\n@@ -60,20 +109,27 @@ impl PackageRoot {\n }\n \n impl ProjectWorkspace {\n-    pub fn discover(path: &Path, cargo_features: &CargoFeatures) -> Result<ProjectWorkspace> {\n+    pub fn discover(\n+        path: &Path,\n+        cargo_features: &CargoFeatures,\n+    ) -> Result<ProjectWorkspace, WorkspaceError> {\n         ProjectWorkspace::discover_with_sysroot(path, true, cargo_features)\n     }\n \n     pub fn discover_with_sysroot(\n         path: &Path,\n         with_sysroot: bool,\n         cargo_features: &CargoFeatures,\n-    ) -> Result<ProjectWorkspace> {\n+    ) -> Result<ProjectWorkspace, WorkspaceError> {\n         match find_rust_project_json(path) {\n             Some(json_path) => {\n-                let file = File::open(json_path)?;\n+                let file =\n+                    File::open(json_path).map_err(|err| WorkspaceError::OpenWorkspaceError(err))?;\n                 let reader = BufReader::new(file);\n-                Ok(ProjectWorkspace::Json { project: from_reader(reader)? })\n+                Ok(ProjectWorkspace::Json {\n+                    project: from_reader(reader)\n+                        .map_err(|err| WorkspaceError::ReadWorkspaceError(err))?,\n+                })\n             }\n             None => {\n                 let cargo_toml = find_cargo_toml(path)?;\n@@ -350,7 +406,7 @@ fn find_rust_project_json(path: &Path) -> Option<PathBuf> {\n     None\n }\n \n-fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n+fn find_cargo_toml(path: &Path) -> Result<PathBuf, WorkspaceError> {\n     if path.ends_with(\"Cargo.toml\") {\n         return Ok(path.to_path_buf());\n     }\n@@ -362,7 +418,7 @@ fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n         }\n         curr = path.parent();\n     }\n-    Err(format!(\"can't find Cargo.toml at {}\", path.display()))?\n+    Err(WorkspaceError::CargoTomlNotFound(path.to_path_buf()))\n }\n \n pub fn get_rustc_cfg_options() -> CfgOptions {\n@@ -376,13 +432,16 @@ pub fn get_rustc_cfg_options() -> CfgOptions {\n         }\n     }\n \n-    match (|| -> Result<_> {\n+    match (|| -> Result<_, WorkspaceError> {\n         // `cfg(test)` and `cfg(debug_assertion)` are handled outside, so we suppress them here.\n-        let output = Command::new(\"rustc\").args(&[\"--print\", \"cfg\", \"-O\"]).output()?;\n+        let output = Command::new(\"rustc\")\n+            .args(&[\"--print\", \"cfg\", \"-O\"])\n+            .output()\n+            .map_err(|err| WorkspaceError::RustcError(err))?;\n         if !output.status.success() {\n-            Err(\"failed to get rustc cfgs\")?;\n+            Err(WorkspaceError::RustcCfgError)?;\n         }\n-        Ok(String::from_utf8(output.stdout)?)\n+        Ok(String::from_utf8(output.stdout).map_err(|err| WorkspaceError::RustcOutputError(err))?)\n     })() {\n         Ok(rustc_cfgs) => {\n             for line in rustc_cfgs.lines() {"}, {"sha": "24c3f47a2079e5b0dfbe29b3adc88a607413fd2b", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2202891221647c9c1a1c6bd47c0b0214b364803d/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2202891221647c9c1a1c6bd47c0b0214b364803d/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=2202891221647c9c1a1c6bd47c0b0214b364803d", "patch": "@@ -8,7 +8,7 @@ use std::{\n \n use ra_arena::{impl_arena_id, Arena, RawId};\n \n-use crate::Result;\n+use crate::WorkspaceError;\n \n #[derive(Default, Debug, Clone)]\n pub struct Sysroot {\n@@ -47,16 +47,11 @@ impl Sysroot {\n         self.crates.iter().map(|(id, _data)| id)\n     }\n \n-    pub fn discover(cargo_toml: &Path) -> Result<Sysroot> {\n+    pub fn discover(cargo_toml: &Path) -> Result<Sysroot, WorkspaceError> {\n         let src = try_find_src_path(cargo_toml)?;\n \n         if !src.exists() {\n-            Err(format!(\n-                \"can't load standard library from sysroot\\n\\\n-                 {:?}\\n\\\n-                 try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n-                src,\n-            ))?;\n+            return Err(WorkspaceError::NoStdLib(src));\n         }\n \n         let mut sysroot = Sysroot { crates: Arena::default() };\n@@ -90,19 +85,21 @@ impl Sysroot {\n     }\n }\n \n-fn try_find_src_path(cargo_toml: &Path) -> Result<PathBuf> {\n+fn try_find_src_path(cargo_toml: &Path) -> Result<PathBuf, WorkspaceError> {\n     if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n         return Ok(path.into());\n     }\n \n     let rustc_output = Command::new(\"rustc\")\n         .current_dir(cargo_toml.parent().unwrap())\n         .args(&[\"--print\", \"sysroot\"])\n-        .output()?;\n+        .output()\n+        .map_err(|err| WorkspaceError::RustcError(err))?;\n     if !rustc_output.status.success() {\n-        Err(\"failed to locate sysroot\")?;\n+        Err(WorkspaceError::SysrootNotFound)?;\n     }\n-    let stdout = String::from_utf8(rustc_output.stdout)?;\n+    let stdout = String::from_utf8(rustc_output.stdout)\n+        .map_err(|err| WorkspaceError::RustcOutputError(err))?;\n     let sysroot_path = Path::new(stdout.trim());\n     Ok(sysroot_path.join(\"lib/rustlib/src/rust/src\"))\n }"}]}