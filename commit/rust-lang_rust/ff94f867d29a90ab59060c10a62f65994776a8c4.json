{"sha": "ff94f867d29a90ab59060c10a62f65994776a8c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOTRmODY3ZDI5YTkwYWI1OTA2MGMxMGE2MmY2NTk5NDc3NmE4YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-29T19:46:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-29T19:46:46Z"}, "message": "auto merge of #15234 : pcwalton/rust/integer-fallback-and-casts, r=alexcrichton\n\nThis will break code that looks like:\r\n\r\n    let mut x = 0;\r\n    while ... {\r\n        x += 1;\r\n    }\r\n    println!(\"{}\", x);\r\n\r\nChange that code to:\r\n\r\n    let mut x = 0i;\r\n    while ... {\r\n        x += 1;\r\n    }\r\n    println!(\"{}\", x);\r\n\r\nCloses #15201.\r\n\r\n[breaking-change]\r\n\r\nr? @alexcrichton", "tree": {"sha": "2a1eb17ef28c64da19f6b3248217d113e6a2b8bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a1eb17ef28c64da19f6b3248217d113e6a2b8bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff94f867d29a90ab59060c10a62f65994776a8c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff94f867d29a90ab59060c10a62f65994776a8c4", "html_url": "https://github.com/rust-lang/rust/commit/ff94f867d29a90ab59060c10a62f65994776a8c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff94f867d29a90ab59060c10a62f65994776a8c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc5663ad55f3dc3a642c8e2c4043900783dcc9f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5663ad55f3dc3a642c8e2c4043900783dcc9f8", "html_url": "https://github.com/rust-lang/rust/commit/cc5663ad55f3dc3a642c8e2c4043900783dcc9f8"}, {"sha": "a5bb0a3a4574af88add700ace7aefc37172fa7a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5bb0a3a4574af88add700ace7aefc37172fa7a5", "html_url": "https://github.com/rust-lang/rust/commit/a5bb0a3a4574af88add700ace7aefc37172fa7a5"}], "stats": {"total": 2294, "additions": 1148, "deletions": 1146}, "files": [{"sha": "3852591da5ba2e4a4c0b40447251b727b5bd9792", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -267,12 +267,12 @@ impl<T: Send> Drop for Unique<T> {\n // A comparison between the built-in `Box` and this reimplementation\n fn main() {\n     {\n-        let mut x = box 5;\n+        let mut x = box 5i;\n         *x = 10;\n     } // `x` is freed here\n \n     {\n-        let mut y = Unique::new(5);\n+        let mut y = Unique::new(5i);\n         *y.borrow_mut() = 10;\n     } // `y` is freed here\n }\n@@ -678,7 +678,7 @@ unsafe fn deallocate(ptr: *mut u8, _size: uint, _align: uint) {\n \n #[start]\n fn main(argc: int, argv: *const *const u8) -> int {\n-    let x = box 1;\n+    let x = box 1i;\n \n     0\n }"}, {"sha": "10fd39c841bd658e12062378e33883945b1637ac", "filename": "src/doc/intro.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -133,7 +133,7 @@ Check it out:\n ```\n \n fn dangling() -> Box<int> {\n-    let i = box 1234;\n+    let i = box 1234i;\n     return i;\n }\n \n@@ -143,16 +143,16 @@ fn add_one() -> int {\n }\n ```\n \n-Now instead of a stack allocated `1234`,\n-we have a heap allocated `box 1234`.\n+Now instead of a stack allocated `1234i`,\n+we have a heap allocated `box 1234i`.\n Whereas `&` borrows a pointer to existing memory,\n creating an owned box allocates memory on the heap and places a value in it,\n giving you the sole pointer to that memory.\n You can roughly compare these two lines:\n \n ```\n // Rust\n-let i = box 1234;\n+let i = box 1234i;\n ```\n \n ```cpp"}, {"sha": "58819a3cf48ee2454d9958f85cc7aac28ebb7af1", "filename": "src/doc/rust.md", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -442,17 +442,14 @@ of integer literal suffix:\n The type of an _unsuffixed_ integer literal is determined by type inference.\n If an integer type can be _uniquely_ determined from the surrounding program\n context, the unsuffixed integer literal has that type.  If the program context\n-underconstrains the type, the unsuffixed integer literal's type is `int`; if\n-the program context overconstrains the type, it is considered a static type\n-error.\n+underconstrains the type, it is considered a static type error;\n+if the program context overconstrains the type,\n+it is also considered a static type error.\n \n Examples of integer literals of various forms:\n \n ~~~~\n-123; 0xff00;                       // type determined by program context\n-                                   // defaults to int in absence of type\n-                                   // information\n-\n+123i;                              // type int\n 123u;                              // type uint\n 123_u;                             // type uint\n 0xff_u8;                           // type u8\n@@ -469,17 +466,19 @@ A _floating-point literal_ has one of two forms:\n   second decimal literal.\n * A single _decimal literal_ followed by an _exponent_.\n \n-By default, a floating-point literal has a generic type, but will fall back to\n-`f64`. A floating-point literal may be followed (immediately, without any\n+By default, a floating-point literal has a generic type,\n+and, like integer literals, the type must be uniquely determined\n+from the context.\n+A floating-point literal may be followed (immediately, without any\n spaces) by a _floating-point suffix_, which changes the type of the literal.\n There are two floating-point suffixes: `f32`, and `f64` (the 32-bit and 64-bit\n floating point types).\n \n Examples of floating-point literals of various forms:\n \n ~~~~\n-123.0;                             // type f64\n-0.1;                               // type f64\n+123.0f64;                          // type f64\n+0.1f64;                            // type f64\n 0.1f32;                            // type f32\n 12E+99_f64;                        // type f64\n ~~~~\n@@ -2700,9 +2699,9 @@ must be a constant expression that can be evaluated at compile time, such\n as a [literal](#literals) or a [static item](#static-items).\n \n ~~~~\n-[1, 2, 3, 4];\n+[1i, 2, 3, 4];\n [\"a\", \"b\", \"c\", \"d\"];\n-[0, ..128];             // vector with 128 zeros\n+[0i, ..128];             // vector with 128 zeros\n [0u8, 0u8, 0u8, 0u8];\n ~~~~\n \n@@ -2881,7 +2880,7 @@ equals sign (`=`) and an [rvalue](#lvalues-rvalues-and-temporaries) expression.\n Evaluating an assignment expression [either copies or moves](#moved-and-copied-types) its right-hand operand to its left-hand operand.\n \n ~~~~\n-# let mut x = 0;\n+# let mut x = 0i;\n # let y = 0;\n \n x = y;\n@@ -2932,7 +2931,7 @@ paren_expr : '(' expr ')' ;\n An example of a parenthesized expression:\n \n ~~~~\n-let x = (2 + 3) * 4;\n+let x: int = (2 + 3) * 4;\n ~~~~\n \n \n@@ -3016,7 +3015,7 @@ conditional expression evaluates to `false`, the `while` expression completes.\n An example:\n \n ~~~~\n-let mut i = 0;\n+let mut i = 0u;\n \n while i < 10 {\n     println!(\"hello\");\n@@ -3262,7 +3261,7 @@ Patterns can also dereference pointers by using the `&`,\n on `x: &int` are equivalent:\n \n ~~~~\n-# let x = &3;\n+# let x = &3i;\n let y = match *x { 0 => \"zero\", _ => \"some\" };\n let z = match x { &0 => \"zero\", _ => \"some\" };\n \n@@ -3285,7 +3284,7 @@ A range of values may be specified with `..`.\n For example:\n \n ~~~~\n-# let x = 2;\n+# let x = 2i;\n \n let message = match x {\n   0 | 1  => \"not many\","}, {"sha": "5fe6a5f14c2b426d55d112a6083dbc0889ddab6e", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -262,7 +262,7 @@ write function, variable, and module names with lowercase letters, using\n underscores where they help readability, while writing types in camel case.\n \n ~~~\n-let my_variable = 100;\n+let my_variable = 100i;\n type MyType = int;     // primitive types are _not_ camel case\n ~~~\n \n@@ -276,7 +276,7 @@ write a piece of code like this:\n \n ~~~~\n # let item = \"salad\";\n-let price;\n+let price: f64;\n if item == \"salad\" {\n     price = 3.50;\n } else if item == \"muffin\" {\n@@ -290,7 +290,7 @@ But, in Rust, you don't have to repeat the name `price`:\n \n ~~~~\n # let item = \"salad\";\n-let price =\n+let price: f64 =\n     if item == \"salad\" {\n         3.50\n     } else if item == \"muffin\" {\n@@ -337,11 +337,10 @@ suffix that can be used to indicate the type of a literal: `i` for `int`,\n In the absence of an integer literal suffix, Rust will infer the\n integer type based on type annotations and function signatures in the\n surrounding program. In the absence of any type information at all,\n-Rust will assume that an unsuffixed integer literal has type\n-`int`.\n+Rust will report an error and request that the type be specified explicitly.\n \n ~~~~\n-let a = 1;       // `a` is an `int`\n+let a: int = 1;  // `a` is an `int`\n let b = 10i;     // `b` is an `int`, due to the `i` suffix\n let c = 100u;    // `c` is a `uint`\n let d = 1000i32; // `d` is an `i32`\n@@ -475,7 +474,7 @@ against each pattern in order until one matches. The matching pattern\n executes its corresponding arm.\n \n ~~~~\n-let my_number = 1;\n+let my_number = 1i;\n match my_number {\n   0     => println!(\"zero\"),\n   1 | 2 => println!(\"one or two\"),\n@@ -501,7 +500,7 @@ matches any single value. (`..`) is a different wildcard that can match\n one or more fields in an `enum` variant.\n \n ~~~\n-# let my_number = 1;\n+# let my_number = 1i;\n match my_number {\n   0 => { println!(\"zero\") }\n   _ => { println!(\"something else\") }\n@@ -584,7 +583,7 @@ keyword `break` aborts the loop, and `continue` aborts the current\n iteration and continues with the next.\n \n ~~~~\n-let mut cake_amount = 8;\n+let mut cake_amount = 8i;\n while cake_amount > 0 {\n     cake_amount -= 1;\n }\n@@ -944,7 +943,7 @@ The `box` operator performs memory allocation on the heap:\n ~~~~\n {\n     // an integer allocated on the heap\n-    let y = box 10;\n+    let y = box 10i;\n }\n // the destructor frees the heap memory as soon as `y` goes out of scope\n ~~~~\n@@ -1165,7 +1164,7 @@ let z = x;\n The mutability of a value may be changed by moving it to a new owner:\n \n ~~~~\n-let r = box 13;\n+let r = box 13i;\n let mut s = r; // box becomes mutable\n *s += 1;\n let t = s; // box becomes immutable\n@@ -1285,9 +1284,9 @@ Using the generic `List<T>` works much like before, thanks to type inference:\n #     Cons(value, box xs)\n # }\n let mut xs = Nil; // Unknown type! This is a `List<T>`, but `T` can be anything.\n-xs = prepend(xs, 10); // Here the compiler infers `xs`'s type as `List<int>`.\n-xs = prepend(xs, 15);\n-xs = prepend(xs, 20);\n+xs = prepend(xs, 10i); // Here the compiler infers `xs`'s type as `List<int>`.\n+xs = prepend(xs, 15i);\n+xs = prepend(xs, 20i);\n ~~~\n \n The code sample above demonstrates type inference making most type annotations optional. It is\n@@ -1410,12 +1409,12 @@ Beyond the properties granted by the size, an owned box behaves as a regular\n value by inheriting the mutability and lifetime of the owner:\n \n ~~~~\n-let x = 5; // immutable\n-let mut y = 5; // mutable\n+let x = 5i; // immutable\n+let mut y = 5i; // mutable\n y += 2;\n \n-let x = box 5; // immutable\n-let mut y = box 5; // mutable\n+let x = box 5i; // immutable\n+let mut y = box 5i; // mutable\n *y += 2; // the `*` operator is needed to access the contained value\n ~~~~\n \n@@ -1507,7 +1506,7 @@ freezing enforced statically at compile-time. An example of a non-`Freeze` type\n is [`RefCell<T>`][refcell].\n \n ~~~~\n-let mut x = 5;\n+let mut x = 5i;\n {\n     let y = &x; // `x` is now frozen. It cannot be modified or re-assigned.\n }\n@@ -1523,8 +1522,8 @@ Rust uses the unary star operator (`*`) to access the contents of a\n box or pointer, similarly to C.\n \n ~~~\n-let owned = box 10;\n-let borrowed = &20;\n+let owned = box 10i;\n+let borrowed = &20i;\n \n let sum = *owned + *borrowed;\n ~~~\n@@ -1534,9 +1533,9 @@ assignments. Such an assignment modifies the value that the pointer\n points to.\n \n ~~~\n-let mut owned = box 10;\n+let mut owned = box 10i;\n \n-let mut value = 20;\n+let mut value = 20i;\n let borrowed = &mut value;\n \n *owned = *borrowed + 100;\n@@ -1654,12 +1653,12 @@ Unicode code points, so they cannot be freely mutated without the ability to\n alter the length.\n \n ~~~\n-let mut xs = [1, 2, 3];\n+let mut xs = [1i, 2i, 3i];\n let view = xs.mut_slice(0, 2);\n view[0] = 5;\n \n // The type of a mutable slice is written as `&mut [T]`\n-let ys: &mut [int] = &mut [1, 2, 3];\n+let ys: &mut [int] = &mut [1i, 2i, 3i];\n ~~~\n \n Square brackets denote indexing into a slice or fixed-size vector:"}, {"sha": "38ed511c4589a5004a12b6510fff04bde660d845", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -376,14 +376,14 @@ mod tests {\n \n     #[test]\n     fn test_live() {\n-        let x = Arc::new(5);\n+        let x = Arc::new(5i);\n         let y = x.downgrade();\n         assert!(y.upgrade().is_some());\n     }\n \n     #[test]\n     fn test_dead() {\n-        let x = Arc::new(5);\n+        let x = Arc::new(5i);\n         let y = x.downgrade();\n         drop(x);\n         assert!(y.upgrade().is_none());"}, {"sha": "dc8280e9b8361844aa2cf0e1fd71a5790bde4cd9", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -329,7 +329,7 @@ mod bench {\n     #[bench]\n     fn alloc_owned_small(b: &mut Bencher) {\n         b.iter(|| {\n-            box 10\n+            box 10i\n         })\n     }\n }"}, {"sha": "e3d1c9a3216bc8252c7110d079b5b6b6f7ff2799", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -342,12 +342,12 @@ mod tests {\n         assert_eq!(hasher.hash(& &[1u8, 2u8, 3u8]), 9);\n \n         unsafe {\n-            let ptr: *const int = mem::transmute(5);\n+            let ptr: *const int = mem::transmute(5i);\n             assert_eq!(hasher.hash(&ptr), 5);\n         }\n \n         unsafe {\n-            let ptr: *mut int = mem::transmute(5);\n+            let ptr: *mut int = mem::transmute(5i);\n             assert_eq!(hasher.hash(&ptr), 5);\n         }\n     }"}, {"sha": "5e19accdd67152854d0bc355e3da11555b33ddb1", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -572,15 +572,15 @@ mod tests {\n     fn bench_push_back(b: &mut test::Bencher) {\n         let mut deq = RingBuf::new();\n         b.iter(|| {\n-            deq.push_back(0);\n+            deq.push_back(0i);\n         })\n     }\n \n     #[bench]\n     fn bench_push_front(b: &mut test::Bencher) {\n         let mut deq = RingBuf::new();\n         b.iter(|| {\n-            deq.push_front(0);\n+            deq.push_front(0i);\n         })\n     }\n \n@@ -589,7 +589,7 @@ mod tests {\n         let mut deq = RingBuf::new();\n         b.iter(|| {\n             for _ in range(0i, 65) {\n-                deq.push_front(1);\n+                deq.push_front(1i);\n             }\n         })\n     }\n@@ -651,10 +651,10 @@ mod tests {\n     #[test]\n     fn test_with_capacity() {\n         let mut d = RingBuf::with_capacity(0);\n-        d.push_back(1);\n+        d.push_back(1i);\n         assert_eq!(d.len(), 1);\n         let mut d = RingBuf::with_capacity(50);\n-        d.push_back(1);\n+        d.push_back(1i);\n         assert_eq!(d.len(), 1);\n     }\n "}, {"sha": "40cf8495a40593996e7f259d13f9fda43ef91ed8", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -17,7 +17,7 @@ Vectors are Rust's list type. Vectors contain zero or more values of\n homogeneous types:\n \n ```rust\n-let int_vector = [1,2,3];\n+let int_vector = [1i, 2i, 3i];\n let str_vector = [\"one\", \"two\", \"three\"];\n ```\n \n@@ -41,9 +41,9 @@ An example is the method `.slice(a, b)` that returns an immutable \"view\" into\n a vector or a vector slice from the index interval `[a, b)`:\n \n ```rust\n-let numbers = [0, 1, 2];\n+let numbers = [0i, 1i, 2i];\n let last_numbers = numbers.slice(1, 3);\n-// last_numbers is now &[1, 2]\n+// last_numbers is now &[1i, 2i]\n ```\n \n Traits defined for the `~[T]` type, like `OwnedVector`, can only be called\n@@ -54,9 +54,9 @@ An example is the method `.push(element)` that will add an element at the end\n of the vector:\n \n ```rust\n-let mut numbers = vec![0, 1, 2];\n+let mut numbers = vec![0i, 1i, 2i];\n numbers.push(7);\n-// numbers is now vec![0, 1, 2, 7];\n+// numbers is now vec![0i, 1i, 2i, 7i];\n ```\n \n ## Implementations of other traits\n@@ -779,7 +779,7 @@ mod tests {\n     fn test_is_empty() {\n         let xs: [int, ..0] = [];\n         assert!(xs.is_empty());\n-        assert!(![0].is_empty());\n+        assert!(![0i].is_empty());\n     }\n \n     #[test]\n@@ -1528,7 +1528,7 @@ mod tests {\n     fn test_permute_fail() {\n         let v = [(box 0i, Rc::new(0i)), (box 0i, Rc::new(0i)),\n                  (box 0i, Rc::new(0i)), (box 0i, Rc::new(0i))];\n-        let mut i = 0;\n+        let mut i = 0u;\n         for _ in v.permutations() {\n             if i == 2 {\n                 fail!()\n@@ -1870,16 +1870,16 @@ mod tests {\n     fn test_overflow_does_not_cause_segfault() {\n         let mut v = vec![];\n         v.reserve_exact(-1);\n-        v.push(1);\n+        v.push(1i);\n         v.push(2);\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_overflow_does_not_cause_segfault_managed() {\n-        let mut v = vec![Rc::new(1)];\n+        let mut v = vec![Rc::new(1i)];\n         v.reserve_exact(-1);\n-        v.push(Rc::new(2));\n+        v.push(Rc::new(2i));\n     }\n \n     #[test]\n@@ -2279,7 +2279,7 @@ mod bench {\n                 v.set_len(1024);\n             }\n             for x in v.mut_iter() {\n-                *x = 0;\n+                *x = 0i;\n             }\n             v\n         });"}, {"sha": "2d84c733b09e91136f193c84131de7ca94113798", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1103,7 +1103,7 @@ mod tests {\n         assert_eq!(\"bc\", unsafe {raw::slice_bytes(\"abc\", 1, 3)});\n         assert_eq!(\"\", unsafe {raw::slice_bytes(\"abc\", 1, 1)});\n         fn a_million_letter_a() -> String {\n-            let mut i = 0;\n+            let mut i = 0u;\n             let mut rs = String::new();\n             while i < 100000 {\n                 rs.push_str(\"aaaaaaaaaa\");\n@@ -1112,7 +1112,7 @@ mod tests {\n             rs\n         }\n         fn half_a_million_letter_a() -> String {\n-            let mut i = 0;\n+            let mut i = 0u;\n             let mut rs = String::new();\n             while i < 100000 {\n                 rs.push_str(\"aaaaa\");\n@@ -1220,7 +1220,7 @@ mod tests {\n         assert_eq!(\"\u534e\", data.slice(30, 33));\n \n         fn a_million_letter_x() -> String {\n-            let mut i = 0;\n+            let mut i = 0u;\n             let mut rs = String::new();\n             while i < 100000 {\n                 rs.push_str(\"\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\");\n@@ -1229,7 +1229,7 @@ mod tests {\n             rs\n         }\n         fn half_a_million_letter_x() -> String {\n-            let mut i = 0;\n+            let mut i = 0u;\n             let mut rs = String::new();\n             while i < 100000 {\n                 rs.push_str(\"\u534e\u534e\u534e\u534e\u534e\");"}, {"sha": "8cd65c4f5646637cd7eefe8cd8f3536466cb6b1f", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -67,10 +67,10 @@\n //!\n //! fn main() {\n //!     let shared_map: Rc<RefCell<_>> = Rc::new(RefCell::new(HashMap::new()));\n-//!     shared_map.borrow_mut().insert(\"africa\", 92388);\n-//!     shared_map.borrow_mut().insert(\"kyoto\", 11837);\n-//!     shared_map.borrow_mut().insert(\"piccadilly\", 11826);\n-//!     shared_map.borrow_mut().insert(\"marbles\", 38);\n+//!     shared_map.borrow_mut().insert(\"africa\", 92388i);\n+//!     shared_map.borrow_mut().insert(\"kyoto\", 11837i);\n+//!     shared_map.borrow_mut().insert(\"piccadilly\", 11826i);\n+//!     shared_map.borrow_mut().insert(\"marbles\", 38i);\n //! }\n //! ```\n //!\n@@ -433,35 +433,35 @@ mod test {\n \n     #[test]\n     fn double_imm_borrow() {\n-        let x = RefCell::new(0);\n+        let x = RefCell::new(0i);\n         let _b1 = x.borrow();\n         x.borrow();\n     }\n \n     #[test]\n     fn no_mut_then_imm_borrow() {\n-        let x = RefCell::new(0);\n+        let x = RefCell::new(0i);\n         let _b1 = x.borrow_mut();\n         assert!(x.try_borrow().is_none());\n     }\n \n     #[test]\n     fn no_imm_then_borrow_mut() {\n-        let x = RefCell::new(0);\n+        let x = RefCell::new(0i);\n         let _b1 = x.borrow();\n         assert!(x.try_borrow_mut().is_none());\n     }\n \n     #[test]\n     fn no_double_borrow_mut() {\n-        let x = RefCell::new(0);\n+        let x = RefCell::new(0i);\n         let _b1 = x.borrow_mut();\n         assert!(x.try_borrow_mut().is_none());\n     }\n \n     #[test]\n     fn imm_release_borrow_mut() {\n-        let x = RefCell::new(0);\n+        let x = RefCell::new(0i);\n         {\n             let _b1 = x.borrow();\n         }\n@@ -470,7 +470,7 @@ mod test {\n \n     #[test]\n     fn mut_release_borrow_mut() {\n-        let x = RefCell::new(0);\n+        let x = RefCell::new(0i);\n         {\n             let _b1 = x.borrow_mut();\n         }\n@@ -479,7 +479,7 @@ mod test {\n \n     #[test]\n     fn double_borrow_single_release_no_borrow_mut() {\n-        let x = RefCell::new(0);\n+        let x = RefCell::new(0i);\n         let _b1 = x.borrow();\n         {\n             let _b2 = x.borrow();\n@@ -490,7 +490,7 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn discard_doesnt_unborrow() {\n-        let x = RefCell::new(0);\n+        let x = RefCell::new(0i);\n         let _b = x.borrow();\n         let _ = _b;\n         let _b = x.borrow_mut();\n@@ -499,7 +499,7 @@ mod test {\n     #[test]\n     #[allow(experimental)]\n     fn clone_ref_updates_flag() {\n-        let x = RefCell::new(0);\n+        let x = RefCell::new(0i);\n         {\n             let b1 = x.borrow();\n             assert!(x.try_borrow_mut().is_none());"}, {"sha": "197997507a6c6591ff9b9d5a6c857618c9d014ab", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -86,11 +86,11 @@ pub trait Eq: PartialEq {\n #[deriving(Clone, PartialEq, Show)]\n pub enum Ordering {\n    /// An ordering where a compared value is less [than another].\n-   Less = -1,\n+   Less = -1i,\n    /// An ordering where a compared value is equal [to another].\n-   Equal = 0,\n+   Equal = 0i,\n    /// An ordering where a compared value is greater [than another].\n-   Greater = 1\n+   Greater = 1i,\n }\n \n /// Trait for types that form a [total order]("}, {"sha": "1096758a22d96939a24c644df09b398cfcbebb96", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -686,7 +686,7 @@ macro_rules! tuple (\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 try!(write!(f, \"(\"));\n                 let ($(ref $name,)*) = *self;\n-                let mut n = 0;\n+                let mut n = 0i;\n                 $(\n                     if n > 0 {\n                         try!(write!(f, \", \"));"}, {"sha": "d3edfd42febfdf2f18a132e8e9d38729017ceedc", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -388,7 +388,7 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_radix_base_too_large() {\n-        let _ = radix(55, 37);\n+        let _ = radix(55i, 37);\n     }\n }\n "}, {"sha": "c041ef5706ba294ef33a3d9466ee8fee606060d9", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -2649,10 +2649,10 @@ mod tests {\n         assert_eq!(c.enumerate().size_hint(), (uint::MAX, None));\n         assert_eq!(c.chain(vi.map(|&i| i)).size_hint(), (uint::MAX, None));\n         assert_eq!(c.zip(vi).size_hint(), (10, Some(10)));\n-        assert_eq!(c.scan(0, |_,_| Some(0)).size_hint(), (0, None));\n+        assert_eq!(c.scan(0i, |_,_| Some(0i)).size_hint(), (0, None));\n         assert_eq!(c.filter(|_| false).size_hint(), (0, None));\n-        assert_eq!(c.map(|_| 0).size_hint(), (uint::MAX, None));\n-        assert_eq!(c.filter_map(|_| Some(0)).size_hint(), (0, None));\n+        assert_eq!(c.map(|_| 0i).size_hint(), (uint::MAX, None));\n+        assert_eq!(c.filter_map(|_| Some(0i)).size_hint(), (0, None));\n \n         assert_eq!(vi.take(5).size_hint(), (5, Some(5)));\n         assert_eq!(vi.take(12).size_hint(), (10, Some(10)));\n@@ -2663,10 +2663,10 @@ mod tests {\n         assert_eq!(vi.enumerate().size_hint(), (10, Some(10)));\n         assert_eq!(vi.chain(v2.iter()).size_hint(), (13, Some(13)));\n         assert_eq!(vi.zip(v2.iter()).size_hint(), (3, Some(3)));\n-        assert_eq!(vi.scan(0, |_,_| Some(0)).size_hint(), (0, Some(10)));\n+        assert_eq!(vi.scan(0i, |_,_| Some(0i)).size_hint(), (0, Some(10)));\n         assert_eq!(vi.filter(|_| false).size_hint(), (0, Some(10)));\n         assert_eq!(vi.map(|i| i+1).size_hint(), (10, Some(10)));\n-        assert_eq!(vi.filter_map(|_| Some(0)).size_hint(), (0, Some(10)));\n+        assert_eq!(vi.filter_map(|_| Some(0i)).size_hint(), (0, Some(10)));\n     }\n \n     #[test]"}, {"sha": "39ec830179cb5279727cb91b1593a4ff04ab582d", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -475,7 +475,7 @@ mod tests {\n \n     #[test]\n     fn test_transmute_copy() {\n-        assert_eq!(1u, unsafe { ::mem::transmute_copy(&1) });\n+        assert_eq!(1u, unsafe { ::mem::transmute_copy(&1i) });\n     }\n \n     #[test]\n@@ -541,7 +541,7 @@ mod bench {\n \n     #[bench]\n     fn match_option_some(b: &mut Bencher) {\n-        let x = Some(10);\n+        let x = Some(10i);\n         b.iter(|| {\n             match x {\n                 Some(y) => y,\n@@ -552,11 +552,11 @@ mod bench {\n \n     #[bench]\n     fn match_vec_pattern(b: &mut Bencher) {\n-        let x = [1,2,3,4,5,6];\n+        let x = [1i,2,3,4,5,6];\n         b.iter(|| {\n             match x {\n-                [1,2,3,..] => 10,\n-                _ => 11\n+                [1,2,3,..] => 10i,\n+                _ => 11i,\n             }\n         });\n     }"}, {"sha": "949e6a5b9a0728024a326683191722117b7d5ea0", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -627,7 +627,7 @@ mod tests {\n     #[test]\n     fn test_get_ptr() {\n         unsafe {\n-            let x = box 0;\n+            let x = box 0i;\n             let addr_x: *const int = ::mem::transmute(&*x);\n             let opt = Some(x);\n             let y = opt.unwrap();\n@@ -750,7 +750,7 @@ mod tests {\n     #[test]\n     fn test_option_while_some() {\n         let mut i = 0i;\n-        Some(10).while_some(|j| {\n+        Some(10i).while_some(|j| {\n             i += 1;\n             if j > 0 {\n                 Some(j-1)"}, {"sha": "133353ec3d717a09a9225a332d77ae0e5b61f55a", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -588,22 +588,22 @@ fn test_repr() {\n         assert_eq!(s.as_slice(), e);\n     }\n \n-    exact_test(&10, \"10\");\n+    exact_test(&10i, \"10\");\n     exact_test(&true, \"true\");\n     exact_test(&false, \"false\");\n-    exact_test(&1.234, \"1.234f64\");\n+    exact_test(&1.234f64, \"1.234f64\");\n     exact_test(&(\"hello\"), \"\\\"hello\\\"\");\n \n-    exact_test(&(box(GC) 10), \"box(GC) 10\");\n-    exact_test(&(box 10), \"box 10\");\n-    exact_test(&(&10), \"&10\");\n-    let mut x = 10;\n+    exact_test(&(box(GC) 10i), \"box(GC) 10\");\n+    exact_test(&(box 10i), \"box 10\");\n+    exact_test(&(&10i), \"&10\");\n+    let mut x = 10i;\n     exact_test(&(&mut x), \"&mut 10\");\n \n-    exact_test(&(0 as *const ()), \"(0x0 as *const ())\");\n-    exact_test(&(0 as *mut ()), \"(0x0 as *mut ())\");\n+    exact_test(&(0i as *const()), \"(0x0 as *const ())\");\n+    exact_test(&(0i as *mut ()), \"(0x0 as *mut ())\");\n \n-    exact_test(&(1,), \"(1,)\");\n+    exact_test(&(1i,), \"(1,)\");\n     exact_test(&(&[\"hi\", \"there\"]),\n                \"&[\\\"hi\\\", \\\"there\\\"]\");\n     exact_test(&(P{a:10, b:1.234}),\n@@ -613,8 +613,8 @@ fn test_repr() {\n     exact_test(&(box P{a:10, b:1.234}),\n                \"box repr::P{a: 10, b: 1.234f64}\");\n \n-    exact_test(&(&[1, 2]), \"&[1, 2]\");\n-    exact_test(&(&mut [1, 2]), \"&mut [1, 2]\");\n+    exact_test(&(&[1i, 2i]), \"&[1, 2]\");\n+    exact_test(&(&mut [1i, 2i]), \"&mut [1, 2]\");\n \n     exact_test(&'\\'', \"'\\\\''\");\n     exact_test(&'\"', \"'\\\"'\");"}, {"sha": "7603b0a8013c75d25ad7d3a15ae86c2c5bb580d1", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1413,7 +1413,7 @@ mod test {\n \n             impl Drop for S {\n                 fn drop(&mut self) {\n-                    let _foo = box 0;\n+                    let _foo = box 0i;\n                 }\n             }\n "}, {"sha": "1b43f236e69b554b9ba877f98c393d1b617415f0", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -77,12 +77,12 @@ fn hex_float_lit_err(s: &str) -> Option<(uint, String)> {\n     if chars.next() != Some('x') {\n         return Some((i, \"Expected 'x'\".to_string()));\n     } i+=1;\n-    let mut d_len = 0;\n+    let mut d_len = 0i;\n     for _ in chars.take_while(|c| c.is_digit_radix(16)) { chars.next(); i+=1; d_len += 1;}\n     if chars.next() != Some('.') {\n         return Some((i, \"Expected '.'\".to_string()));\n     } i+=1;\n-    let mut f_len = 0;\n+    let mut f_len = 0i;\n     for _ in chars.take_while(|c| c.is_digit_radix(16)) { chars.next(); i+=1; f_len += 1;}\n     if d_len == 0 && f_len == 0 {\n         return Some((i, \"Expected digits before or after decimal \\\n@@ -92,7 +92,7 @@ fn hex_float_lit_err(s: &str) -> Option<(uint, String)> {\n         return Some((i, \"Expected 'p'\".to_string()));\n     } i+=1;\n     if chars.peek() == Some(&'-') { chars.next(); i+= 1 }\n-    let mut e_len = 0;\n+    let mut e_len = 0i;\n     for _ in chars.take_while(|c| c.is_digit()) { chars.next(); i+=1; e_len += 1}\n     if e_len == 0 {\n         return Some((i, \"Expected exponent digits\".to_string()));"}, {"sha": "b1c0d9a15069385582c6afdc2543330f8bf62a78", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1136,7 +1136,7 @@ fn waitpid(pid: pid_t, deadline: u64) -> IoResult<rtio::ProcessExit> {\n     // which will wake up the other end at some point, so we just allow this\n     // signal to be coalesced with the pending signals on the pipe.\n     extern fn sigchld_handler(_signum: libc::c_int) {\n-        let msg = 1;\n+        let msg = 1i;\n         match unsafe {\n             libc::write(WRITE_FD, &msg as *const _ as *const libc::c_void, 1)\n         } {"}, {"sha": "9011aafc009d381af47b0e15d43fde39a71cd449", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -215,7 +215,7 @@ impl Sub<BigUint, BigUint> for BigUint {\n         let zeros = ZERO_VEC.iter().cycle();\n         let (a, b) = (self.data.iter().chain(zeros.clone()), other.data.iter().chain(zeros));\n \n-        let mut borrow = 0;\n+        let mut borrow = 0i;\n         let diff: Vec<BigDigit> =  a.take(new_len).zip(b).map(|(ai, bi)| {\n             let (hi, lo) = BigDigit::from_doublebigdigit(\n                 BigDigit::base"}, {"sha": "134e7af507010db11a2f0980e1951c8b73dd2ab3", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -389,10 +389,10 @@ impl Isaac64Rng {\n                             }\n                         }}\n                     );\n-                rngstepp!(0, 21);\n-                rngstepn!(1, 5);\n-                rngstepp!(2, 12);\n-                rngstepn!(3, 33);\n+                rngstepp!(0u, 21);\n+                rngstepn!(1u, 5);\n+                rngstepp!(2u, 12);\n+                rngstepn!(3u, 33);\n             }\n         }\n "}, {"sha": "ae1a10f620663c3edcc6d9187bf17bf338cdd127", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -111,7 +111,7 @@ pub trait Rng {\n         // (3) adds more `unsafe` that needs to be checked, (4)\n         // probably doesn't give much performance gain if\n         // optimisations are on.\n-        let mut count = 0;\n+        let mut count = 0i;\n         let mut num = 0;\n         for byte in dest.mut_iter() {\n             if count == 0 {"}, {"sha": "9cde40c196088648f3192bb11e7f603481b900ca", "filename": "src/libregex/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibregex%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibregex%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse%2Fmod.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -770,7 +770,7 @@ impl<'a> Parser<'a> {\n         }\n         let start = self.chari;\n         let mut flags = self.flags;\n-        let mut sign = 1;\n+        let mut sign = 1i;\n         let mut saw_flag = false;\n         loop {\n             try!(self.noteof(\"expected non-empty set of flags or closing ')'\"))"}, {"sha": "b562d48f49d32ce7eb93b9a3ce010f962b8c3a0d", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -391,8 +391,8 @@ pub struct HeapMemory;\n \n impl HeapMemory {\n     fn check_heap_type(&self, cx: &Context, span: Span, ty: ty::t) {\n-        let mut n_box = 0;\n-        let mut n_uniq = 0;\n+        let mut n_box = 0i;\n+        let mut n_uniq = 0i;\n         ty::fold_ty(cx.tcx, ty, |t| {\n             match ty::get(t).sty {\n                 ty::ty_box(_) => {"}, {"sha": "57006d5e72b9b632b60e469c1f65ab0af8c16cdf", "filename": "src/librustc/middle/save/span_utils.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Fmiddle%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Fmiddle%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fspan_utils.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -90,7 +90,7 @@ impl<'a> SpanUtils<'a> {\n         let mut result = None;\n \n         let mut toks = self.retokenise_span(span);\n-        let mut bracket_count = 0;\n+        let mut bracket_count = 0u;\n         loop {\n             let ts = toks.next_token();\n             if ts.tok == token::EOF {\n@@ -113,7 +113,7 @@ impl<'a> SpanUtils<'a> {\n     // Return the span for the first identifier in the path.\n     pub fn span_for_first_ident(&self, span: Span) -> Option<Span> {\n         let mut toks = self.retokenise_span(span);\n-        let mut bracket_count = 0;\n+        let mut bracket_count = 0u;\n         loop {\n             let ts = toks.next_token();\n             if ts.tok == token::EOF {\n@@ -139,7 +139,7 @@ impl<'a> SpanUtils<'a> {\n         let mut toks = self.retokenise_span(span);\n         let mut prev = toks.next_token();\n         let mut result = None;\n-        let mut bracket_count = 0;\n+        let mut bracket_count = 0u;\n         let mut last_span = None;\n         while prev.tok != token::EOF {\n             last_span = None;\n@@ -187,7 +187,7 @@ impl<'a> SpanUtils<'a> {\n         let mut toks = self.retokenise_span(span);\n         let mut prev = toks.next_token();\n         let mut result = None;\n-        let mut bracket_count = 0;\n+        let mut bracket_count = 0u;\n         loop {\n             let next = toks.next_token();\n \n@@ -232,7 +232,7 @@ impl<'a> SpanUtils<'a> {\n \n         let mut toks = self.retokenise_span(span);\n         // We keep track of how many brackets we're nested in\n-        let mut bracket_count = 0;\n+        let mut bracket_count = 0i;\n         loop {\n             let ts = toks.next_token();\n             if ts.tok == token::EOF {\n@@ -291,7 +291,7 @@ impl<'a> SpanUtils<'a> {\n         let mut next = toks.next_token();\n         let mut stored_val = false;\n         let mut found_val = false;\n-        let mut bracket_count = 0;\n+        let mut bracket_count = 0u;\n         while next.tok != token::EOF {\n             if bracket_count == 1 {\n                 if next.tok == tok2 {"}, {"sha": "488dc6d99e35c7a0d6063d816250a778ccaab540", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -957,7 +957,11 @@ pub fn lltype_for_foreign_fn(ccx: &CrateContext, ty: ty::t) -> Type {\n \n fn add_argument_attributes(tys: &ForeignTypes,\n                            llfn: ValueRef) {\n-    let mut i = if tys.fn_ty.ret_ty.is_indirect() { 1 } else { 0 };\n+    let mut i = if tys.fn_ty.ret_ty.is_indirect() {\n+        1i\n+    } else {\n+        0i\n+    };\n \n     match tys.fn_ty.ret_ty.attr {\n         Some(attr) => unsafe {"}, {"sha": "d808120db99ba8cad928fc1c117fe373db489580", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -3805,7 +3805,15 @@ pub fn check_enum_variants(ccx: &CrateCtxt,\n \n                     let inh = blank_inherited_fields(ccx);\n                     let fcx = blank_fn_ctxt(ccx, &inh, rty, e.id);\n-                    let declty = ty::mk_int_var(ccx.tcx, fcx.infcx().next_int_var_id());\n+                    let declty = match hint {\n+                        attr::ReprAny | attr::ReprExtern => ty::mk_int(),\n+                        attr::ReprInt(_, attr::SignedInt(ity)) => {\n+                            ty::mk_mach_int(ity)\n+                        }\n+                        attr::ReprInt(_, attr::UnsignedInt(ity)) => {\n+                            ty::mk_mach_uint(ity)\n+                        }\n+                    };\n                     check_const_with_ty(&fcx, e.span, &*e, declty);\n                     // check_expr (from check_const pass) doesn't guarantee\n                     // that the expression is in a form that eval_const_expr can"}, {"sha": "bc02297b5b1f3cd27d89a55b4fb4890ab96cf9c7", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -247,9 +247,13 @@ pub enum fixup_err {\n \n pub fn fixup_err_to_str(f: fixup_err) -> String {\n     match f {\n-      unresolved_int_ty(_) => \"unconstrained integral type\".to_string(),\n+      unresolved_int_ty(_) => {\n+          \"cannot determine the type of this integer; add a suffix to \\\n+           specify the type explicitly\".to_string()\n+      }\n       unresolved_float_ty(_) => {\n-          \"unconstrained floating point type\".to_string()\n+          \"cannot determine the type of this number; add a suffix to specify \\\n+           the type explicitly\".to_string()\n       }\n       unresolved_ty(_) => \"unconstrained type\".to_string(),\n       cyclic_ty(_) => \"cyclic type of infinite size\".to_string(),"}, {"sha": "adfbe9de2d5bf8b72769c6784a879a16dd64b702", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 10, "deletions": 43, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -52,14 +52,12 @@ use middle::ty::{type_is_bot, IntType, UintType};\n use middle::ty;\n use middle::ty_fold;\n use middle::typeck::infer::{Bounds, cyclic_ty, fixup_err, fres, InferCtxt};\n-use middle::typeck::infer::unresolved_ty;\n-use middle::typeck::infer::unify::Root;\n+use middle::typeck::infer::{unresolved_float_ty, unresolved_int_ty};\n+use middle::typeck::infer::{unresolved_ty};\n use syntax::codemap::Span;\n use util::common::indent;\n use util::ppaux::{Repr, ty_to_str};\n \n-use syntax::ast;\n-\n pub static resolve_nested_tvar: uint = 0b0000000001;\n pub static resolve_rvar: uint        = 0b0000000010;\n pub static resolve_ivar: uint        = 0b0000000100;\n@@ -83,21 +81,18 @@ pub struct ResolveState<'a> {\n     err: Option<fixup_err>,\n     v_seen: Vec<TyVid> ,\n     type_depth: uint,\n-    span: Option<Span>,\n }\n \n pub fn resolver<'a>(infcx: &'a InferCtxt,\n                     modes: uint,\n-                    span: Option<Span>)\n-                    -> ResolveState<'a>\n-{\n+                    _: Option<Span>)\n+                    -> ResolveState<'a> {\n     ResolveState {\n         infcx: infcx,\n         modes: modes,\n         err: None,\n         v_seen: Vec::new(),\n         type_depth: 0,\n-        span: span\n     }\n }\n \n@@ -258,24 +253,10 @@ impl<'a> ResolveState<'a> {\n           Some(UintType(t)) => ty::mk_mach_uint(t),\n           None => {\n             if self.should(force_ivar) {\n-                // As a last resort, default to int and emit an error.\n-                let ty = ty::mk_int();\n-                table.borrow_mut().set(\n-                    tcx, node.key, Root(Some(IntType(ast::TyI)), node.rank));\n-\n-                match self.span {\n-                    Some(sp) => {\n-                        self.infcx.tcx.sess.span_err(\n-                            sp,\n-                            \"cannot determine the type of this integer; add \\\n-                             a suffix to specify the type explicitly\");\n-                    }\n-                    None => { }\n-                }\n-                ty\n-            } else {\n-                ty::mk_int_var(self.infcx.tcx, vid)\n+                // As a last resort, emit an error.\n+                self.err = Some(unresolved_int_ty(vid));\n             }\n+            ty::mk_int_var(self.infcx.tcx, vid)\n           }\n         }\n     }\n@@ -292,24 +273,10 @@ impl<'a> ResolveState<'a> {\n           Some(t) => ty::mk_mach_float(t),\n           None => {\n             if self.should(force_fvar) {\n-                // As a last resort, default to f64 and emit an error.\n-                let ty = ty::mk_f64();\n-                table.borrow_mut().set(\n-                    tcx, node.key, Root(Some(ast::TyF64), node.rank));\n-\n-                match self.span {\n-                    Some(sp) => {\n-                        self.infcx.tcx.sess.span_err(\n-                            sp,\n-                            \"cannot determine the type of this number; add \\\n-                             a suffix to specify the type explicitly\");\n-                    }\n-                    None => { }\n-                }\n-                ty\n-            } else {\n-                ty::mk_float_var(self.infcx.tcx, vid)\n+                // As a last resort, emit an error.\n+                self.err = Some(unresolved_float_ty(vid));\n             }\n+            ty::mk_float_var(self.infcx.tcx, vid)\n           }\n         }\n     }"}, {"sha": "fa18b6291be74140dce46cf3e5eba7f419fbc678", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -185,7 +185,7 @@ fn path(w: &mut fmt::Formatter, path: &clean::Path, print_all: bool,\n     let mut generics = String::new();\n     let last = path.segments.last().unwrap();\n     if last.lifetimes.len() > 0 || last.types.len() > 0 {\n-        let mut counter = 0;\n+        let mut counter = 0u;\n         generics.push_str(\"&lt;\");\n         for lifetime in last.lifetimes.iter() {\n             if counter > 0 { generics.push_str(\", \"); }"}, {"sha": "273505c416a3ca761d393390865a1f3bb989ef11", "filename": "src/librustrt/local_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustrt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustrt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_heap.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -335,11 +335,11 @@ mod bench {\n \n     #[bench]\n     fn alloc_managed_small(b: &mut Bencher) {\n-        b.iter(|| { box(GC) 10 });\n+        b.iter(|| { box(GC) 10i });\n     }\n \n     #[bench]\n     fn alloc_managed_big(b: &mut Bencher) {\n-        b.iter(|| { box(GC) ([10, ..1000]) });\n+        b.iter(|| { box(GC) ([10i, ..1000]) });\n     }\n }"}, {"sha": "813ea0f30f38b71afbb3655ccc7d82646ca1840c", "filename": "src/librustrt/local_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustrt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustrt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_ptr.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -172,7 +172,7 @@ pub mod compiled {\n         rtassert!(!ptr.is_null());\n         let ptr: Box<T> = mem::transmute(ptr);\n         // can't use `as`, due to type not matching with `cfg(test)`\n-        RT_TLS_PTR = mem::transmute(0);\n+        RT_TLS_PTR = mem::transmute(0u);\n         ptr\n     }\n \n@@ -189,7 +189,7 @@ pub mod compiled {\n         } else {\n             let ptr: Box<T> = mem::transmute(ptr);\n             // can't use `as`, due to type not matching with `cfg(test)`\n-            RT_TLS_PTR = mem::transmute(0);\n+            RT_TLS_PTR = mem::transmute(0u);\n             Some(ptr)\n         }\n     }"}, {"sha": "891d0d5a8e3592053b8c4ff14c08079a71b6abbb", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -560,7 +560,7 @@ mod test {\n \n     #[test]\n     fn local_heap() {\n-        let a = box(GC) 5;\n+        let a = box(GC) 5i;\n         let b = a;\n         assert!(*a == 5);\n         assert!(*b == 5);\n@@ -596,14 +596,14 @@ mod test {\n     #[test]\n     fn comm_stream() {\n         let (tx, rx) = channel();\n-        tx.send(10);\n+        tx.send(10i);\n         assert!(rx.recv() == 10);\n     }\n \n     #[test]\n     fn comm_shared_chan() {\n         let (tx, rx) = channel();\n-        tx.send(10);\n+        tx.send(10i);\n         assert!(rx.recv() == 10);\n     }\n "}, {"sha": "3b9ee31d8e5078ff8170b246562ab2fbbf091abf", "filename": "src/librustrt/thread_local_storage.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustrt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustrt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fthread_local_storage.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -100,15 +100,15 @@ mod test {\n         use std::mem::transmute;\n         unsafe {\n             let mut key = 0;\n-            let value = box 20;\n+            let value = box 20i;\n             create(&mut key);\n             set(key, transmute(value));\n             let value: Box<int> = transmute(get(key));\n-            assert_eq!(value, box 20);\n-            let value = box 30;\n+            assert_eq!(value, box 20i);\n+            let value = box 30i;\n             set(key, transmute(value));\n             let value: Box<int> = transmute(get(key));\n-            assert_eq!(value, box 30);\n+            assert_eq!(value, box 30i);\n         }\n     }\n }"}, {"sha": "45cf7ec8e5eecbbb4ce9ceb7896be4df5cc8a201", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1160,7 +1160,7 @@ mod test {\n \n         let expected = 32;\n         let mut current = 0;\n-        let mut reads = 0;\n+        let mut reads = 0u;\n \n         while current < expected {\n             let nread = stream.read(buf).ok().unwrap();"}, {"sha": "baaf1150ce0859261709abc0af5e99e45abeeb3f", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -176,7 +176,7 @@ impl Drop for Queue {\n impl Drop for State {\n     fn drop(&mut self) {\n         unsafe {\n-            uvll::uv_close(self.handle, mem::transmute(0));\n+            uvll::uv_close(self.handle, mem::transmute(0u));\n             // Note that this does *not* free the handle, that is the\n             // responsibility of the caller because the uv loop must be closed\n             // before we deallocate this uv handle."}, {"sha": "63cfbd6d9aa17b20074716547b7118b8289ffb72", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -208,7 +208,7 @@ impl<'a> FromBase64 for &'a str {\n     fn from_base64(&self) -> Result<Vec<u8>, FromBase64Error> {\n         let mut r = Vec::new();\n         let mut buf: u32 = 0;\n-        let mut modulus = 0;\n+        let mut modulus = 0i;\n \n         let mut it = self.bytes().enumerate();\n         for (idx, byte) in it {"}, {"sha": "51fab7b135458ae5e8f06adb03184f438d7c0cb5", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -104,7 +104,7 @@ impl<'a> FromHex for &'a str {\n     fn from_hex(&self) -> Result<Vec<u8>, FromHexError> {\n         // This may be an overestimate if there is any whitespace\n         let mut b = Vec::with_capacity(self.len() / 2);\n-        let mut modulus = 0;\n+        let mut modulus = 0i;\n         let mut buf = 0u8;\n \n         for (idx, byte) in self.bytes().enumerate() {"}, {"sha": "d8dd2938b34f63d0d5795fd8e01e327434eeddbe", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -3424,7 +3424,7 @@ mod tests {\n         hash_map.insert(\"a\".to_string(), 1i);\n         hash_map.insert(\"b\".to_string(), 2);\n         assert_eq!(hash_map.to_json(), object);\n-        assert_eq!(Some(15i).to_json(), Number(15 as f64));\n+        assert_eq!(Some(15i).to_json(), Number(15f64));\n         assert_eq!(None::<int>.to_json(), Null);\n     }\n "}, {"sha": "bc8447dfa2ee9dcfc8161f0cb7c9879f38048b64", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1051,7 +1051,7 @@ mod test {\n         let initial_msg =   \"food-is-yummy\";\n         let overwrite_msg =    \"-the-bar!!\";\n         let final_msg =     \"foo-the-bar!!\";\n-        let seek_idx = 3;\n+        let seek_idx = 3i;\n         let mut read_mem = [0, .. 13];\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_rt_io_file_test_seek_and_write.txt\");"}, {"sha": "e0ed8cf667b38e185089866259d642fffe08f3ed", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1816,7 +1816,7 @@ mod tests {\n     #[ignore]\n     fn test_getenv_big() {\n         let mut s = \"\".to_string();\n-        let mut i = 0;\n+        let mut i = 0i;\n         while i < 100 {\n             s.push_str(\"aaaaaaaaaa\");\n             i += 1;"}, {"sha": "195efb844a78328fe3bc0535cece16307d057492", "filename": "src/libsync/atomics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fatomics.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -143,7 +143,7 @@ impl<T> AtomicOption<T> {\n     /// Remove the value, leaving the `AtomicOption` empty.\n     #[inline]\n     pub fn take(&self, order: Ordering) -> Option<Box<T>> {\n-        unsafe { self.swap(mem::transmute(0), order) }\n+        unsafe { self.swap(mem::transmute(0u), order) }\n     }\n \n     /// Replace an empty value with a non-empty value.\n@@ -155,7 +155,7 @@ impl<T> AtomicOption<T> {\n     pub fn fill(&self, val: Box<T>, order: Ordering) -> Option<Box<T>> {\n         unsafe {\n             let val = mem::transmute(val);\n-            let expected = mem::transmute(0);\n+            let expected = mem::transmute(0u);\n             let oldval = self.p.compare_and_swap(expected, val, order);\n             if oldval == expected {\n                 None"}, {"sha": "4ab2ac97cc1574221ca42798a82f090782719f05", "filename": "src/libsync/comm/duplex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fcomm%2Fduplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fcomm%2Fduplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fduplex.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -64,7 +64,7 @@ mod test {\n         let (left, right) = duplex();\n \n         left.send(\"abc\".to_string());\n-        right.send(123);\n+        right.send(123i);\n \n         assert!(left.recv() == 123);\n         assert!(right.recv() == \"abc\".to_string());"}, {"sha": "665f94d80b237cbe3f651cb8afef226f06577564", "filename": "src/libsync/comm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fmod.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1543,7 +1543,7 @@ mod test {\n         let (tx, rx) = channel();\n         let (cdone, pdone) = channel();\n         let t = Thread::start(proc() {\n-            let mut hits = 0;\n+            let mut hits = 0u;\n             while hits < 10 {\n                 match rx.try_recv() {\n                     Ok(()) => { hits += 1; }\n@@ -1993,7 +1993,7 @@ mod sync_tests {\n         let (tx, rx) = sync_channel::<()>(0);\n         let (cdone, pdone) = channel();\n         let t = Thread::start(proc() {\n-            let mut hits = 0;\n+            let mut hits = 0u;\n             while hits < 10 {\n                 match rx.try_recv() {\n                     Ok(()) => { hits += 1; }"}, {"sha": "8d2192aeb537ed19b823b1ed62eeebb34774fd4d", "filename": "src/libsync/deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fdeque.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -30,15 +30,15 @@\n //!     let (mut worker, mut stealer) = pool.deque();\n //!\n //!     // Only the worker may push/pop\n-//!     worker.push(1);\n+//!     worker.push(1i);\n //!     worker.pop();\n //!\n //!     // Stealers take data from the other end of the deque\n-//!     worker.push(1);\n+//!     worker.push(1i);\n //!     stealer.steal();\n //!\n //!     // Stealers can be cloned to have many stealers stealing in parallel\n-//!     worker.push(1);\n+//!     worker.push(1i);\n //!     let mut stealer2 = stealer.clone();\n //!     stealer2.steal();\n "}, {"sha": "1d119bafea19955e03c2fdaaae0e83c003bedd32", "filename": "src/libsync/lock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flock.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -158,7 +158,7 @@ impl<'a> Condvar<'a> {\n /// ```\n /// use sync::{Mutex, Arc};\n ///\n-/// let mutex = Arc::new(Mutex::new(1));\n+/// let mutex = Arc::new(Mutex::new(1i));\n /// let mutex2 = mutex.clone();\n ///\n /// spawn(proc() {\n@@ -487,7 +487,7 @@ mod tests {\n \n     #[test] #[should_fail]\n     fn test_arc_condvar_poison() {\n-        let arc = Arc::new(Mutex::new(1));\n+        let arc = Arc::new(Mutex::new(1i));\n         let arc2 = arc.clone();\n         let (tx, rx) = channel();\n "}, {"sha": "ecd37e68880555dba3a43d41d955d4762e71f685", "filename": "src/libsync/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmpsc_queue.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -167,8 +167,8 @@ mod tests {\n     #[test]\n     fn test_full() {\n         let q = Queue::new();\n-        q.push(box 1);\n-        q.push(box 2);\n+        q.push(box 1i);\n+        q.push(box 2i);\n     }\n \n     #[test]"}, {"sha": "2834d404c1879e7de75b7b45577edbfbfcd01d7e", "filename": "src/libsync/spsc_queue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsync%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fspsc_queue.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -252,8 +252,8 @@ mod test {\n     #[test]\n     fn drop_full() {\n         let q = Queue::new(0);\n-        q.push(box 1);\n-        q.push(box 2);\n+        q.push(box 1i);\n+        q.push(box 2i);\n     }\n \n     #[test]\n@@ -284,7 +284,7 @@ mod test {\n                 for _ in range(0u, 100000) {\n                     loop {\n                         match b.pop() {\n-                            Some(1) => break,\n+                            Some(1i) => break,\n                             Some(_) => fail!(),\n                             None => {}\n                         }"}, {"sha": "a9cf4fbd9f0f130855ce8c67d9bc5f0ab6f58a56", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -998,7 +998,7 @@ impl<'a> State<'a> {\n \n     pub fn print_outer_attributes(&mut self,\n                                   attrs: &[ast::Attribute]) -> IoResult<()> {\n-        let mut count = 0;\n+        let mut count = 0u;\n         for attr in attrs.iter() {\n             match attr.node.style {\n                 ast::AttrOuter => {\n@@ -1016,7 +1016,7 @@ impl<'a> State<'a> {\n \n     pub fn print_inner_attributes(&mut self,\n                                   attrs: &[ast::Attribute]) -> IoResult<()> {\n-        let mut count = 0;\n+        let mut count = 0u;\n         for attr in attrs.iter() {\n             match attr.node.style {\n                 ast::AttrInner => {"}, {"sha": "43367611ab2b9bdade7c409237ccb678bc5db2cb", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -166,8 +166,8 @@ mod test {\n         let v: SmallVector<int> = SmallVector::zero();\n         assert_eq!(0, v.len());\n \n-        assert_eq!(1, SmallVector::one(1).len());\n-        assert_eq!(5, SmallVector::many(vec!(1, 2, 3, 4, 5)).len());\n+        assert_eq!(1, SmallVector::one(1i).len());\n+        assert_eq!(5, SmallVector::many(vec!(1i, 2, 3, 4, 5)).len());\n     }\n \n     #[test]\n@@ -215,7 +215,7 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_expect_one_many() {\n-        SmallVector::many(vec!(1, 2)).expect_one(\"\");\n+        SmallVector::many(vec!(1i, 2)).expect_one(\"\");\n     }\n \n     #[test]"}, {"sha": "577a1e8ea9e54957d1fef5952909c7251bac25af", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -546,7 +546,7 @@ fn get_authority(rawurl: &str) ->\n     let mut host = \"\".to_string();\n     let mut port = None;\n \n-    let mut colon_count = 0;\n+    let mut colon_count = 0u;\n     let mut pos = 0;\n     let mut begin = 2;\n     let mut end = len;"}, {"sha": "d8f96e5abd44393ce6435a24654734e173a45bc6", "filename": "src/test/auxiliary/issue-8044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-8044.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -23,5 +23,5 @@ pub fn leaf<V>(value: V) -> TreeItem<V> {\n }\n \n fn main() {\n-    BTree::<int> { node: leaf(1) };\n+    BTree::<int> { node: leaf(1i) };\n }"}, {"sha": "c0cb501735da3d8b1c6a1376993f72626c915473", "filename": "src/test/auxiliary/issue-9906.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fauxiliary%2Fissue-9906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fauxiliary%2Fissue-9906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-9906.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -22,6 +22,6 @@ mod other {\n     }\n \n     pub fn foo(){\n-        1+1;\n+        1i+1;\n     }\n }"}, {"sha": "9a452ed18f67e5baae2d742d255b7b7b8f9b04b0", "filename": "src/test/compile-fail/borrowck-anon-fields-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,7 +12,7 @@\n // anonymous fields of a tuple vs the same anonymous field.\n \n fn distinct_variant() {\n-    let mut y = (1, 2);\n+    let mut y = (1i, 2i);\n \n     let a = match y {\n         (ref mut a, _) => a\n@@ -27,7 +27,7 @@ fn distinct_variant() {\n }\n \n fn same_variant() {\n-    let mut y = (1, 2);\n+    let mut y = (1i, 2i);\n \n     let a = match y {\n         (ref mut a, _) => a"}, {"sha": "c872d0dc4b9c4aa5e0ada23002d18b5231a506d4", "filename": "src/test/compile-fail/borrowck-array-double-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn f() {\n-    let mut a = [box 0, box 1];\n+    let mut a = [box 0i, box 1i];\n     drop(a[0]);\n-    a[1] = box 2;\n+    a[1] = box 2i;\n     drop(a[0]); //~ ERROR use of moved value: `a[..]`\n }\n "}, {"sha": "0b10ccfdca193cb537093bf4f06be60e8e7cfb6d", "filename": "src/test/compile-fail/borrowck-break-uninit-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,14 +11,14 @@\n fn foo() -> int {\n     let x: int;\n \n-    while 1 != 2  {\n+    while 1i != 2  {\n         break;\n         x = 0;\n     }\n \n     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n \n-    return 17;\n+    return 17i;\n }\n \n fn main() { println!(\"{}\", foo()); }"}, {"sha": "886026e45d90f1f8c89734a3b04a0f77e2b1b572", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -21,37 +21,37 @@ fn set(x: &mut int) {\n }\n \n fn a() {\n-    let mut x = 3;\n+    let mut x = 3i;\n     let c1 = || x = 4;\n     let c2 = || x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn b() {\n-    let mut x = 3;\n+    let mut x = 3i;\n     let c1 = || set(&mut x);\n     let c2 = || get(&x); //~ ERROR cannot borrow `x`\n }\n \n fn c() {\n-    let mut x = 3;\n+    let mut x = 3i;\n     let c1 = || set(&mut x);\n     let c2 = || x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn d() {\n-    let mut x = 3;\n+    let mut x = 3i;\n     let c2 = || x * 5;\n     x = 5; //~ ERROR cannot assign\n }\n \n fn e() {\n-    let mut x = 3;\n+    let mut x = 3i;\n     let c1 = || get(&x);\n     x = 5; //~ ERROR cannot assign\n }\n \n fn f() {\n-    let mut x = box 3;\n+    let mut x = box 3i;\n     let c1 = || get(&*x);\n     *x = 5; //~ ERROR cannot assign\n }"}, {"sha": "6d382854d49f2b2b9cadf49bceb100effba039b2", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -14,7 +14,7 @@\n \n \n fn a() {\n-    let mut x = 3;\n+    let mut x = 3i;\n     let c1 = || x = 4;\n     let c2 = || x = 5; //~ ERROR cannot borrow `x` as mutable more than once\n }\n@@ -24,19 +24,19 @@ fn set(x: &mut int) {\n }\n \n fn b() {\n-    let mut x = 3;\n+    let mut x = 3i;\n     let c1 = || set(&mut x);\n     let c2 = || set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn c() {\n-    let mut x = 3;\n+    let mut x = 3i;\n     let c1 = || x = 5;\n     let c2 = || set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn d() {\n-    let mut x = 3;\n+    let mut x = 3i;\n     let c1 = || x = 5;\n     let c2 = || { let _y = || set(&mut x); }; // (nested closure)\n     //~^ ERROR cannot borrow `x` as mutable more than once"}, {"sha": "854d42219ea25b6b96e09c44378880a843402d8f", "filename": "src/test/compile-fail/borrowck-if-no-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,6 +11,6 @@\n fn foo(x: int) { println!(\"{}\", x); }\n \n fn main() {\n-    let x: int; if 1 > 2 { x = 10; }\n+    let x: int; if 1i > 2 { x = 10; }\n     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "74888cca2d4bde63648dfc8f12eaed26055dc93b", "filename": "src/test/compile-fail/borrowck-if-with-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -14,7 +14,7 @@ fn foo(x: int) { println!(\"{:?}\", x); }\n \n fn main() {\n     let x: int;\n-    if 1 > 2 {\n+    if 1i > 2 {\n         println!(\"whoops\");\n     } else {\n         x = 10;"}, {"sha": "d127e9345cde18220f32d94f0f0e9d432b8f6c06", "filename": "src/test/compile-fail/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut _a = 3;\n+    let mut _a = 3i;\n     let _b = &mut _a;\n     {\n         let _c = &*_b;"}, {"sha": "9d28b2a436f4aae19b6a10ca06530fb69f0c59d4", "filename": "src/test/compile-fail/borrowck-issue-2657-1.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n fn main() {\n-let x = Some(box 1);\n-match x {\n-  Some(ref _y) => {\n-    let _a = x; //~ ERROR cannot move\n-  }\n-  _ => {}\n-}\n+    let x = Some(box 1i);\n+    match x {\n+      Some(ref _y) => {\n+        let _a = x; //~ ERROR cannot move\n+      }\n+      _ => {}\n+    }\n }"}, {"sha": "973cf3bf8c889bf9568b2693fc77b5310f60ae30", "filename": "src/test/compile-fail/borrowck-issue-2657-2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n fn main() {\n-let x = Some(box 1);\n-match x {\n-  Some(ref y) => {\n-    let _b = *y; //~ ERROR cannot move out\n-  }\n-  _ => {}\n-}\n+    let x = Some(box 1i);\n+    match x {\n+      Some(ref y) => {\n+        let _b = *y; //~ ERROR cannot move out\n+      }\n+      _ => {}\n+    }\n }"}, {"sha": "c6020df2bc2ea4ecca23acbcd532328911375eb4", "filename": "src/test/compile-fail/borrowck-lend-flow-match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -35,20 +35,20 @@ fn guard() {\n     // Here the guard performs a borrow. This borrow \"infects\" all\n     // subsequent arms (but not the prior ones).\n \n-    let mut a = box 3;\n-    let mut b = box 4;\n+    let mut a = box 3u;\n+    let mut b = box 4u;\n     let mut w = &*a;\n-    match 22 {\n+    match 22i {\n         _ if cond() => {\n-            b = box 5;\n+            b = box 5u;\n         }\n \n         _ if link(&*b, &mut w) => {\n-            b = box 6; //~ ERROR cannot assign\n+            b = box 6u; //~ ERROR cannot assign\n         }\n \n         _ => {\n-            b = box 7; //~ ERROR cannot assign\n+            b = box 7u; //~ ERROR cannot assign\n         }\n     }\n "}, {"sha": "385111170b1268f9bb6ec5f7f1c68561d553cd70", "filename": "src/test/compile-fail/borrowck-let-suggestion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn f() {\n-    let x = [1].iter(); //~ ERROR borrowed value does not live long enough\n-                        //~^^ NOTE reference must be valid for the block\n-                        //~^^ NOTE consider using a `let` binding to increase its lifetime\n+    let x = [1i].iter(); //~ ERROR borrowed value does not live long enough\n+                         //~^^ NOTE reference must be valid for the block\n+                         //~^^ NOTE consider using a `let` binding to increase its lifetime\n }\n \n fn main() {"}, {"sha": "30430e00ef3422d35d5dd4af0b6dac9c88c7e04d", "filename": "src/test/compile-fail/borrowck-managed-pointer-deref-scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -24,10 +24,10 @@ fn foo<'a>(x: &'a Gc<int>) -> &'a int {\n }\n \n fn bar() {\n-    let a = 3;\n+    let a = 3i;\n     let mut y = &a;\n     if true {\n-        let x = box(GC) 3;\n+        let x = box(GC) 3i;\n         y = &*x; //~ ERROR `*x` does not live long enough\n     }\n }"}, {"sha": "f599f237ba672b86b9e1cf570897ecd4ccbdb960", "filename": "src/test/compile-fail/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -43,7 +43,7 @@ pub fn main() {\n         }\n     }\n \n-    match [1,2,3] {\n+    match [1i,2,3] {\n         [x,_,_] => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }"}, {"sha": "63409f5afb04c1dfa360cef193974bb7a7c8fae3", "filename": "src/test/compile-fail/borrowck-move-from-subpath-of-borrowed-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,7 +12,7 @@\n // borrowed path.\n \n fn main() {\n-    let a = box box 2;\n+    let a = box box 2i;\n     let b = &a;\n \n     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed"}, {"sha": "7962617916346bbad31b4523718a31dcda6b8c49", "filename": "src/test/compile-fail/borrowck-move-out-of-overloaded-auto-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,6 +11,6 @@\n use std::rc::Rc;\n \n pub fn main() {\n-    let _x = Rc::new(vec!(1, 2)).move_iter();\n+    let _x = Rc::new(vec!(1i, 2)).move_iter();\n     //~^ ERROR cannot move out of dereference of `&`-pointer\n }"}, {"sha": "6faa634ad00b842499424ec3b8551e836db281e2", "filename": "src/test/compile-fail/borrowck-multiple-captures.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -13,9 +13,9 @@ use std::task;\n fn borrow<T>(_: &T) { }\n \n fn different_vars_after_borrows() {\n-    let x1 = box 1;\n+    let x1 = box 1i;\n     let p1 = &x1;\n-    let x2 = box 2;\n+    let x2 = box 2i;\n     let p2 = &x2;\n     task::spawn(proc() {\n         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n@@ -26,9 +26,9 @@ fn different_vars_after_borrows() {\n }\n \n fn different_vars_after_moves() {\n-    let x1 = box 1;\n+    let x1 = box 1i;\n     drop(x1);\n-    let x2 = box 2;\n+    let x2 = box 2i;\n     drop(x2);\n     task::spawn(proc() {\n         drop(x1); //~ ERROR capture of moved value: `x1`\n@@ -37,7 +37,7 @@ fn different_vars_after_moves() {\n }\n \n fn same_var_after_borrow() {\n-    let x = box 1;\n+    let x = box 1i;\n     let p = &x;\n     task::spawn(proc() {\n         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n@@ -47,7 +47,7 @@ fn same_var_after_borrow() {\n }\n \n fn same_var_after_move() {\n-    let x = box 1;\n+    let x = box 1i;\n     drop(x);\n     task::spawn(proc() {\n         drop(x); //~ ERROR capture of moved value: `x`"}, {"sha": "5a129956487c9956069e168882fe13b99cf32cee", "filename": "src/test/compile-fail/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,7 +12,7 @@\n fn borrow(_v: &int) {}\n \n fn local() {\n-    let mut v = box 3;\n+    let mut v = box 3i;\n     borrow(v);\n }\n \n@@ -31,27 +31,27 @@ fn local_recs() {\n }\n \n fn aliased_imm() {\n-    let mut v = box 3;\n+    let mut v = box 3i;\n     let _w = &v;\n     borrow(v);\n }\n \n fn aliased_mut() {\n-    let mut v = box 3;\n+    let mut v = box 3i;\n     let _w = &mut v;\n     borrow(v); //~ ERROR cannot borrow `*v`\n }\n \n fn aliased_other() {\n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v = box 3i;\n+    let mut w = box 4i;\n     let _x = &mut w;\n     borrow(v);\n }\n \n fn aliased_other_reassign() {\n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v = box 3i;\n+    let mut w = box 4i;\n     let mut _x = &mut w;\n     _x = &mut v;\n     borrow(v); //~ ERROR cannot borrow `*v`"}, {"sha": "7b092d16eec69d9d9d0e298339265a74f757802d", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut a = [1, 2, 3, 4];\n+    let mut a = [1i, 2, 3, 4];\n     let t = match a {\n         [1, 2, ..tail] => tail,\n         _ => unreachable!()"}, {"sha": "4a56f9821065bfd51163d0d39d9eba6fa5392bd8", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,7 +10,7 @@\n \n \n fn a() {\n-    let mut vec = [box 1, box 2, box 3];\n+    let mut vec = [box 1i, box 2, box 3];\n     match vec {\n         [box ref _a, _, _] => {\n             vec[0] = box 4; //~ ERROR cannot assign\n@@ -19,7 +19,7 @@ fn a() {\n }\n \n fn b() {\n-    let mut vec = vec!(box 1, box 2, box 3);\n+    let mut vec = vec!(box 1i, box 2, box 3);\n     let vec: &mut [Box<int>] = vec.as_mut_slice();\n     match vec {\n         [.._b] => {\n@@ -29,7 +29,7 @@ fn b() {\n }\n \n fn c() {\n-    let mut vec = vec!(box 1, box 2, box 3);\n+    let mut vec = vec!(box 1i, box 2, box 3);\n     let vec: &mut [Box<int>] = vec.as_mut_slice();\n     match vec {\n         [_a,         //~ ERROR cannot move out\n@@ -47,7 +47,7 @@ fn c() {\n }\n \n fn d() {\n-    let mut vec = vec!(box 1, box 2, box 3);\n+    let mut vec = vec!(box 1i, box 2, box 3);\n     let vec: &mut [Box<int>] = vec.as_mut_slice();\n     match vec {\n         [.._a,     //~ ERROR cannot move out\n@@ -58,7 +58,7 @@ fn d() {\n }\n \n fn e() {\n-    let mut vec = vec!(box 1, box 2, box 3);\n+    let mut vec = vec!(box 1i, box 2, box 3);\n     let vec: &mut [Box<int>] = vec.as_mut_slice();\n     match vec {\n         [_a, _b, _c] => {}  //~ ERROR cannot move out"}, {"sha": "b5703e56642ad9de61a736eaf6b357f546db8e5f", "filename": "src/test/compile-fail/borrowck-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,7 +10,7 @@\n \n fn f() -> int {\n     let mut x: int;\n-    while 1 == 1 { x = 10; }\n+    while 1i == 1 { x = 10; }\n     return x; //~ ERROR use of possibly uninitialized variable: `x`\n }\n "}, {"sha": "bea025df6fc859ca5a90e7086dd2ab70ae70f33d", "filename": "src/test/compile-fail/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -21,6 +21,6 @@ impl <T: Share> Foo for T { }\n \n fn main() {\n     let (tx, rx) = channel();\n-    1193182.foo(tx);\n-    assert!(rx.recv() == 1193182);\n+    1193182i.foo(tx);\n+    assert!(rx.recv() == 1193182i);\n }"}, {"sha": "d8f771cfb5a736c8319b32c902f2792f461cf8b8", "filename": "src/test/compile-fail/const-block-non-item-statement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(macro_rules)]\n \n-static A: uint = { 1; 2 };\n+static A: uint = { 1u; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n static B: uint = { { } 2 };\n@@ -21,7 +21,7 @@ macro_rules! foo {\n }\n static C: uint = { foo!() 2 };\n \n-static D: uint = { let x = 4; 2 };\n+static D: uint = { let x = 4u; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n pub fn main() {"}, {"sha": "8de613ac03d0f1cbddf36133dec5604abec64517", "filename": "src/test/compile-fail/for-loop-refutable-pattern-error-message.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,6 +11,6 @@\n \n fn main() {\n     for\n-        &1 //~ ERROR refutable pattern in `for` loop binding\n-        in [1].iter() {}\n+        &1i //~ ERROR refutable pattern in `for` loop binding\n+        in [1i].iter() {}\n }"}, {"sha": "7c862d04d206d345c319a5c211a60b12ddc1d705", "filename": "src/test/compile-fail/integer-literal-suffix-inference-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference-2.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(_: *const ()) {}\n+\n+fn main() {\n+    let a = 3;  //~ ERROR cannot determine a type for this local variable\n+    foo(&a as *const _ as *const ());\n+}\n+"}, {"sha": "dc3db98566030d575210be006f42e125de465b8d", "filename": "src/test/compile-fail/integer-literal-suffix-inference-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference-3.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"{}\", std::mem::size_of_val(&1));\n+    //~^ ERROR cannot determine a type for this expression\n+}\n+"}, {"sha": "9141ab669bbc22fd06b809eef035f53985d44192", "filename": "src/test/compile-fail/issue-10398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = box 1;\n+    let x = box 1i;\n     let f: proc() = proc() {\n         let _a = x;\n         drop(x);"}, {"sha": "7856a5dcf7f2ef36e6fcc3b0ff8a29aed28a57e4", "filename": "src/test/compile-fail/issue-11493.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,6 +11,6 @@\n // This file must never have a trailing newline\n \n fn main() {\n-    let x = Some(3);\n-    let y = x.as_ref().unwrap_or(&5); //~ ERROR: borrowed value does not live long enough\n+    let x = Some(3i);\n+    let y = x.as_ref().unwrap_or(&5i); //~ ERROR: borrowed value does not live long enough\n }"}, {"sha": "e1acab4008a9b1a65586d8859ee05775b8a61469", "filename": "src/test/compile-fail/issue-11873.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let mut v = vec!(1);\n-    let f = || v.push(2);\n+    let mut v = vec!(1i);\n+    let f = || v.push(2i);\n     let _w = v; //~ ERROR: cannot move out of `v`\n \n     f();"}, {"sha": "5d62c25ea171b776ad56ef993509a28e90afbbdf", "filename": "src/test/compile-fail/issue-11925.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let r = {\n-        let x = box 42;\n+        let x = box 42i;\n         let f = proc() &x; //~ ERROR: `x` does not live long enough\n         f()\n     };"}, {"sha": "f824a06aed1b3912d66c3b00f6f8e736aecba81f", "filename": "src/test/compile-fail/issue-12041.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -14,7 +14,7 @@ fn main() {\n         loop {\n             let tx = tx;\n             //~^ ERROR: use of moved value: `tx`\n-            tx.send(1);\n+            tx.send(1i);\n         }\n     });\n }"}, {"sha": "c59ee328eff40ab51bbb5655a7d8c3fba834c273", "filename": "src/test/compile-fail/issue-1962.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,9 +10,9 @@\n \n // compile-flags: -D while-true\n fn main() {\n-  let mut i = 0;\n+  let mut i = 0i;\n   while true  { //~ ERROR denote infinite loops with loop\n-    i += 1;\n-    if i == 5 { break; }\n+    i += 1i;\n+    if i == 5i { break; }\n   }\n }"}, {"sha": "2445638d62e6059bc704e155d3516dc021337764", "filename": "src/test/compile-fail/issue-3707.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -14,7 +14,7 @@ struct Obj {\n \n impl Obj {\n     pub fn boom() -> bool {\n-        return 1+1 == 2\n+        return 1i+1 == 2\n     }\n     pub fn chirp(&self) {\n         self.boom(); //~ ERROR `&Obj` does not implement any method in scope named `boom`\n@@ -24,5 +24,5 @@ impl Obj {\n fn main() {\n     let o = Obj { member: 0 };\n     o.chirp();\n-    1 + 1;\n+    1i + 1;\n }"}, {"sha": "8417f7810ead2f7835c7119901a168df814694b0", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -35,7 +35,7 @@ static priv_static: int = 0; //~ ERROR: code is never used\n static used_static: int = 0;\n pub static used_static2: int = used_static;\n static USED_STATIC: int = 0;\n-static STATIC_USED_IN_ENUM_DISCRIMINANT: uint = 10;\n+static STATIC_USED_IN_ENUM_DISCRIMINANT: int = 10;\n \n pub type typ = *const UsedStruct4;\n pub struct PubStruct;\n@@ -77,7 +77,7 @@ pub fn pub_fn() {\n     let e = foo3;\n     SemiUsedStruct::la_la_la();\n \n-    let i = 1;\n+    let i = 1i;\n     match i {\n         USED_STATIC => (),\n         _ => ()"}, {"sha": "8f495645dc7ead9acee3d1789166190646a81861", "filename": "src/test/compile-fail/lint-heap-memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -21,11 +21,11 @@ struct Foo {\n struct Bar { x: Box<int> } //~ ERROR type uses owned\n \n fn main() {\n-    let _x : Bar = Bar {x : box 10}; //~ ERROR type uses owned\n+    let _x : Bar = Bar {x : box 10i}; //~ ERROR type uses owned\n \n-    box(GC) 2; //~ ERROR type uses managed\n+    box(GC) 2i; //~ ERROR type uses managed\n \n-    box 2; //~ ERROR type uses owned\n+    box 2i; //~ ERROR type uses owned\n     fn g(_: Box<Clone>) {} //~ ERROR type uses owned\n     proc() {}; //~ ERROR type uses owned\n }"}, {"sha": "d51d5b4af87a99ce05ed2f15398deb1e08b757a4", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -17,7 +17,7 @@ impl X {\n }\n \n fn foo() -> int {\n-    return (1); //~ ERROR unnecessary parentheses around `return` value\n+    return (1i); //~ ERROR unnecessary parentheses around `return` value\n }\n fn bar() -> X {\n     return (X { y: true }); //~ ERROR unnecessary parentheses around `return` value\n@@ -45,7 +45,7 @@ fn main() {\n         _ => {}\n     }\n \n-    let mut _a = (0); //~ ERROR unnecessary parentheses around assigned value\n-    _a = (0); //~ ERROR unnecessary parentheses around assigned value\n-    _a += (1); //~ ERROR unnecessary parentheses around assigned value\n+    let mut _a = (0i); //~ ERROR unnecessary parentheses around assigned value\n+    _a = (0i); //~ ERROR unnecessary parentheses around assigned value\n+    _a += (1i); //~ ERROR unnecessary parentheses around assigned value\n }"}, {"sha": "f03e748e4176d5f495371816474818d307038ed4", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -55,7 +55,7 @@ mod bar {\n     pub mod c {\n         use foo::Point;\n         use foo::Square; //~ ERROR unused import\n-        pub fn cc(p: Point) -> int { return 2 * (p.x + p.y); }\n+        pub fn cc(p: Point) -> int { return 2i * (p.x + p.y); }\n     }\n \n     #[allow(unused_imports)]\n@@ -66,8 +66,8 @@ mod bar {\n \n fn main() {\n     cal(foo::Point{x:3, y:9});\n-    let mut a = 3;\n-    let mut b = 4;\n+    let mut a = 3i;\n+    let mut b = 4i;\n     swap(&mut a, &mut b);\n     test::C.b();\n     let _a = foo();"}, {"sha": "c5281bf678185b41d152e277cc6b32907bf19865", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -18,45 +18,45 @@\n \n fn main() {\n     // negative cases\n-    let mut a = 3; //~ ERROR: variable does not need to be mutable\n-    let mut a = 2; //~ ERROR: variable does not need to be mutable\n-    let mut b = 3; //~ ERROR: variable does not need to be mutable\n-    let mut a = vec!(3); //~ ERROR: variable does not need to be mutable\n-    let (mut a, b) = (1, 2); //~ ERROR: variable does not need to be mutable\n+    let mut a = 3i; //~ ERROR: variable does not need to be mutable\n+    let mut a = 2i; //~ ERROR: variable does not need to be mutable\n+    let mut b = 3i; //~ ERROR: variable does not need to be mutable\n+    let mut a = vec!(3i); //~ ERROR: variable does not need to be mutable\n+    let (mut a, b) = (1i, 2i); //~ ERROR: variable does not need to be mutable\n \n-    match 30 {\n+    match 30i {\n         mut x => {} //~ ERROR: variable does not need to be mutable\n     }\n-    match (30, 2) {\n+    match (30i, 2i) {\n       (mut x, 1) | //~ ERROR: variable does not need to be mutable\n       (mut x, 2) |\n       (mut x, 3) => {\n       }\n       _ => {}\n     }\n \n-    let x = |mut y: int| 10; //~ ERROR: variable does not need to be mutable\n+    let x = |mut y: int| 10i; //~ ERROR: variable does not need to be mutable\n     fn what(mut foo: int) {} //~ ERROR: variable does not need to be mutable\n \n     // positive cases\n-    let mut a = 2;\n-    a = 3;\n+    let mut a = 2i;\n+    a = 3i;\n     let mut a = Vec::new();\n-    a.push(3);\n+    a.push(3i);\n     let mut a = Vec::new();\n     callback(|| {\n-        a.push(3);\n+        a.push(3i);\n     });\n-    let (mut a, b) = (1, 2);\n+    let (mut a, b) = (1i, 2i);\n     a = 34;\n \n-    match 30 {\n+    match 30i {\n         mut x => {\n-            x = 21;\n+            x = 21i;\n         }\n     }\n \n-    match (30, 2) {\n+    match (30i, 2i) {\n       (mut x, 1) |\n       (mut x, 2) |\n       (mut x, 3) => {\n@@ -65,19 +65,19 @@ fn main() {\n       _ => {}\n     }\n \n-    let x = |mut y: int| y = 32;\n-    fn nothing(mut foo: int) { foo = 37; }\n+    let x = |mut y: int| y = 32i;\n+    fn nothing(mut foo: int) { foo = 37i; }\n \n     // leading underscore should avoid the warning, just like the\n     // unused variable lint.\n-    let mut _allowed = 1;\n+    let mut _allowed = 1i;\n }\n \n fn callback(f: ||) {}\n \n // make sure the lint attribute can be turned off\n #[allow(unused_mut)]\n fn foo(mut a: int) {\n-    let mut a = 3;\n-    let mut b = vec!(2);\n+    let mut a = 3i;\n+    let mut b = vec!(2i);\n }"}, {"sha": "68dbacaae5cf43230a7722be55223215c2e3f904", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -29,40 +29,40 @@ fn f1d() {\n }\n \n fn f2() {\n-    let x = 3;\n+    let x = 3i;\n     //~^ ERROR unused variable: `x`\n }\n \n fn f3() {\n-    let mut x = 3;\n+    let mut x = 3i;\n     //~^ ERROR variable `x` is assigned to, but never used\n-    x += 4;\n+    x += 4i;\n     //~^ ERROR value assigned to `x` is never read\n }\n \n fn f3b() {\n-    let mut z = 3;\n+    let mut z = 3i;\n     //~^ ERROR variable `z` is assigned to, but never used\n     loop {\n-        z += 4;\n+        z += 4i;\n     }\n }\n \n #[allow(unused_variable)]\n fn f3c() {\n-    let mut z = 3;\n-    loop { z += 4; }\n+    let mut z = 3i;\n+    loop { z += 4i; }\n }\n \n #[allow(unused_variable)]\n #[allow(dead_assignment)]\n fn f3d() {\n-    let mut x = 3;\n-    x += 4;\n+    let mut x = 3i;\n+    x += 4i;\n }\n \n fn f4() {\n-    match Some(3) {\n+    match Some(3i) {\n       Some(i) => {\n         //~^ ERROR unused variable: `i`\n       }\n@@ -75,7 +75,7 @@ enum tri {\n }\n \n fn f4b() -> int {\n-    match a(3) {\n+    match a(3i) {\n       a(i) | b(i) | c(i) => {\n         i\n       }"}, {"sha": "17f02abc8ec89ad7bf4ab81853fd95777409e7be", "filename": "src/test/compile-fail/match-ill-type2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type2.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn main() {\n-    match 1 {\n-        1 => 1, //~ ERROR mismatched types between arms\n-        2u => 1,\n-        _ => 2,\n+    match 1i {\n+        1i => 1i,\n+        2u => 1i, //~ ERROR mismatched types\n+        _ => 2i,\n     };\n }"}, {"sha": "20adbeebdf1d70ff41f70788e9b51c8f57671303", "filename": "src/test/compile-fail/match-non-exhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmatch-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmatch-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-non-exhaustive.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    match 0 { 1 => () } //~ ERROR non-exhaustive patterns\n-    match 0 { 0 if false => () } //~ ERROR non-exhaustive patterns\n+    match 0i { 1i => () } //~ ERROR non-exhaustive patterns\n+    match 0i { 0i if false => () } //~ ERROR non-exhaustive patterns\n }"}, {"sha": "7c9c371c5267436934b911bdbbe97a30dfda1e37", "filename": "src/test/compile-fail/match-range-fail-dominate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -39,9 +39,9 @@ fn main() {\n       _ => {}\n     };\n \n-    match 1.0 {\n-      0.01 .. 6.5 => {}\n-      0.02 => {}\n+    match 1.0f64 {\n+      0.01f64 .. 6.5f64 => {}\n+      0.02f64 => {}\n       _ => {}\n     };\n }"}, {"sha": "bac9fef2b17775f9e4608079489f2cfbc1d0eacd", "filename": "src/test/compile-fail/match-vec-fixed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn a() {\n-    let v = [1, 2, 3];\n+    let v = [1i, 2, 3];\n     match v {\n         [_, _, _] => {}\n         [_, _, _] => {} //~ ERROR unreachable pattern"}, {"sha": "7a882b26db5904b38e8e65ad2e6de8334979a948", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -25,13 +25,13 @@ fn f10() {\n \n fn f20() {\n     let x = \"hi\".to_string();\n-    let _y = (x, 3);\n+    let _y = (x, 3i);\n     touch(&x); //~ ERROR use of moved value: `x`\n }\n \n fn f21() {\n-    let x = vec!(1, 2, 3);\n-    let _y = (*x.get(0), 3);\n+    let x = vec!(1i, 2, 3);\n+    let _y = (*x.get(0), 3i);\n     touch(&x);\n }\n \n@@ -62,9 +62,9 @@ fn f50(cond: bool) {\n     let x = \"hi\".to_string();\n     let y = \"ho\".to_string();\n     let _y = match cond {\n-        _ if guard(x) => 10,\n-        true => 10,\n-        false => 20,\n+        _ if guard(x) => 10i,\n+        true => 10i,\n+        false => 20i,\n     };\n     touch(&x); //~ ERROR use of moved value: `x`\n     touch(&y);"}, {"sha": "ce6e793d55d4d9c1a923f15cf0cb95d95a7cd67d", "filename": "src/test/compile-fail/mut-cant-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,7 +11,7 @@\n use std::cell::RefCell;\n \n fn main() {\n-    let m = RefCell::new(0);\n+    let m = RefCell::new(0i);\n     let mut b = m.borrow_mut();\n     let b1 = &mut *b;\n     let b2 = &mut *b; //~ ERROR cannot borrow"}, {"sha": "985bfec392c7f128dffc14bdbef6af3a7de201f8", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -13,6 +13,6 @@ use std::cell::RefCell;\n fn f<T: Share>(_: T) {}\n \n fn main() {\n-    let x = RefCell::new(0);\n+    let x = RefCell::new(0i);\n     f(x); //~ ERROR: which does not fulfill `Share`\n }"}, {"sha": "e269a736ce2577378d5374cd413962942eee37d1", "filename": "src/test/compile-fail/mut-ptr-cant-outlive-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,7 +11,7 @@\n use std::cell::RefCell;\n \n fn main() {\n-    let m = RefCell::new(0);\n+    let m = RefCell::new(0i);\n     let p;\n     {\n         let b = m.borrow();"}, {"sha": "291340e55b856b9e04cb3bc27f674fb821de2dea", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -13,7 +13,7 @@ use std::rc::Rc;\n fn bar<T: Send>(_: T) {}\n \n fn main() {\n-    let x = Rc::new(5);\n+    let x = Rc::new(5i);\n     bar(x);\n     //~^ ERROR instantiating a type parameter with an incompatible type `alloc::rc::Rc<int>`,\n     //         which does not fulfill `Send`"}, {"sha": "f49592b173587d750f366607a8f04ecd59c436ea", "filename": "src/test/compile-fail/no_share-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -14,7 +14,7 @@ use std::cell::RefCell;\n fn bar<T: Share>(_: T) {}\n \n fn main() {\n-    let x = Rc::new(RefCell::new(5));\n+    let x = Rc::new(RefCell::new(5i));\n     bar(x);\n     //~^ ERROR instantiating a type parameter with an incompatible type\n     //         `std::rc::Rc<std::cell::RefCell<int>>`, which does not fulfill `Share`"}, {"sha": "4de4af877127d1db27ef418e48ade49822a41321", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,10 +16,10 @@ fn main() {\n     match true { //~ ERROR non-exhaustive patterns: `false` not covered\n       true => {}\n     }\n-    match Some(10) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n+    match Some(10i) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n       None => {}\n     }\n-    match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, _)` not covered\n+    match (2i, 3i, 4i) { //~ ERROR non-exhaustive patterns: `(_, _, _)` not covered\n       (_, _, 4) => {}\n     }\n     match (a, a) { //~ ERROR non-exhaustive patterns: `(a, a)` not covered\n@@ -35,28 +35,28 @@ fn main() {\n       (_, a) => {}\n       (b, b) => {}\n     }\n-    let vec = vec!(Some(42), None, Some(21));\n+    let vec = vec!(Some(42i), None, Some(21i));\n     let vec: &[Option<int>] = vec.as_slice();\n     match vec { //~ ERROR non-exhaustive patterns: `[]` not covered\n         [Some(..), None, ..tail] => {}\n         [Some(..), Some(..), ..tail] => {}\n         [None] => {}\n     }\n-    let vec = vec!(1);\n+    let vec = vec!(1i);\n     let vec: &[int] = vec.as_slice();\n     match vec {\n         [_, ..tail] => (),\n         [] => ()\n     }\n-    let vec = vec!(0.5);\n+    let vec = vec!(0.5f32);\n     let vec: &[f32] = vec.as_slice();\n     match vec { //~ ERROR non-exhaustive patterns: `[_, _, _, _]` not covered\n         [0.1, 0.2, 0.3] => (),\n         [0.1, 0.2] => (),\n         [0.1] => (),\n         [] => ()\n     }\n-    let vec = vec!(Some(42), None, Some(21));\n+    let vec = vec!(Some(42i), None, Some(21i));\n     let vec: &[Option<int>] = vec.as_slice();\n     match vec {\n         [Some(..), None, ..tail] => {}"}, {"sha": "28533518a25a1be656c3e1246dba83bbd6ca4b2a", "filename": "src/test/compile-fail/refutable-pattern-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -13,6 +13,6 @@ fn func((1, (Some(1), 2..3)): (int, (Option<int>, int))) { }\n //~^ ERROR refutable pattern in function argument: `(_, _)` not covered\n \n fn main() {\n-    let (1, (Some(1), 2..3)) = (1, (None, 2));\n+    let (1i, (Some(1i), 2i..3i)) = (1i, (None, 2i));\n     //~^ ERROR refutable pattern in local binding: `(_, _)` not covered\n }"}, {"sha": "846e03d57c3ae087870b13e096dfb7c454e9ec50", "filename": "src/test/compile-fail/regionck-closure-lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -13,9 +13,9 @@ fn env<'a>(blk: |p: ||: 'a|) {\n     // the lifetime `'a`, which outlives the current\n     // block.\n \n-    let mut state = 0;\n+    let mut state = 0i;\n     let statep = &mut state;\n-    blk(|| *statep = 1); //~ ERROR cannot infer\n+    blk(|| *statep = 1i); //~ ERROR cannot infer\n }\n \n fn no_env_no_for<'a>(blk: |p: |||: 'a) {\n@@ -31,7 +31,7 @@ fn repeating_loop() {\n     // external to the loop.\n \n     let closure;\n-    let state = 0;\n+    let state = 0i;\n \n     loop {\n         closure = || state; //~ ERROR cannot infer\n@@ -47,7 +47,7 @@ fn repeating_while() {\n     // external to the loop.\n \n     let closure;\n-    let state = 0;\n+    let state = 0i;\n \n     while true {\n         closure = || state; //~ ERROR cannot infer"}, {"sha": "472df87dd2b0dd4a54f3577cd58a20a22f962a83", "filename": "src/test/compile-fail/regions-escape-loop-via-variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n fn main() {\n-    let x = 3;\n+    let x = 3i;\n \n     // Here, the variable `p` gets inferred to a type with a lifetime\n     // of the loop body.  The regionck then determines that this type\n     // is invalid.\n     let mut p = &x;\n \n     loop {\n-        let x = 1 + *p;\n+        let x = 1i + *p;\n         p = &x; //~ ERROR `x` does not live long enough\n     }\n }"}, {"sha": "22c6bdd2d504c4f0880e1a635c3a4536f8c3f0d1", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,7 +10,7 @@\n \n // The type of `y` ends up getting inferred to the type of the block.\n fn broken() {\n-    let mut x = 3;\n+    let mut x = 3i;\n     let mut _y = vec!(&mut x);\n     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed"}, {"sha": "6adc3b0aaf843b0d4a2676f6c2d85e199670e16a", "filename": "src/test/compile-fail/static-assert2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,6 +11,6 @@\n #![allow(dead_code)]\n \n #[static_assert]\n-static E: bool = 1 == 2; //~ ERROR static assertion failed\n+static E: bool = 1i == 2; //~ ERROR static assertion failed\n \n fn main() {}"}, {"sha": "c410e85655258e161857a9b248d5e5779360e1f4", "filename": "src/test/compile-fail/static-mut-not-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -19,7 +19,7 @@ fn main() {\n     // name as a variable, hence this should be an unreachable pattern situation\n     // instead of spitting out a custom error about some identifier collisions\n     // (we should allow shadowing)\n-    match 4 {\n+    match 4i {\n         a => {}\n         _ => {} //~ ERROR: unreachable pattern\n     }"}, {"sha": "d78643ccd104603c005f9cdaea3e2dea583cb855", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,8 +15,8 @@ use std::gc::GC;\n fn f<T:'static>(_: T) {}\n \n fn main() {\n-    let x = box(GC) 3;\n+    let x = box(GC) 3i;\n     f(x);\n-    let x = &3;\n+    let x = &3i;\n     f(x);   //~ ERROR instantiating a type parameter with an incompatible type\n }"}, {"sha": "72ef4a03eab72cd772ba3a2cbca6bf0ba8af809b", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -28,7 +28,7 @@ fn test<T: Share>(s: T){\n }\n \n fn main() {\n-    let us = Unsafe::new(MyShare{u: Unsafe::new(0)});\n+    let us = Unsafe::new(MyShare{u: Unsafe::new(0i)});\n     test(us);\n \n     let uns = Unsafe::new(NoShare{m: marker::NoShare});"}, {"sha": "67fbc08bd941b213938da65c6634fb72cfe9861b", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,6 +16,6 @@ fn f<T:Send>(_i: T) {\n }\n \n fn main() {\n-    let i = box box(GC) 100;\n+    let i = box box(GC) 100i;\n     f(i); //~ ERROR does not fulfill `Send`\n }"}, {"sha": "fb9a6b5201897446da23a28c9cda47f90b027202", "filename": "src/test/compile-fail/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -14,5 +14,5 @@\n fn main() {\n   loop{}\n \n-  let a = 3; //~ ERROR: unreachable statement\n+  let a = 3i; //~ ERROR: unreachable statement\n }"}, {"sha": "c5cc7e8f7163b271d4c4a97535bb173500daf6d7", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -51,8 +51,8 @@ fn f8<type X>(x1: &S<X>, x2: &S<X>) {\n \n // Test some tuples.\n fn f9<type X>(x1: Box<S<X>>, x2: Box<E<X>>) {\n-    f5(&(*x1, 34)); //~ERROR instantiating a type parameter with an incompatible type `(S<X>,int)`,\n-    f5(&(32, *x2)); //~ERROR instantiating a type parameter with an incompatible type `(int,E<X>)`,\n+    f5(&(*x1, 34i)); //~ERROR instantiating a type parameter with an incompatible type `(S<X>,int)`,\n+    f5(&(32i, *x2)); //~ERROR instantiating a type parameter with an incompatible type `(int,E<X>)`,\n }\n \n // I would like these to fail eventually."}, {"sha": "061b003b5e3f023360e1e3d64c68437eddb89d15", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -29,12 +29,12 @@ fn f2<type X: T>(x: &X) {\n fn f3<type X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1; //~ERROR variable `y` has dynamically sized type `X`\n     let y = *x2; //~ERROR variable `y` has dynamically sized type `X`\n-    let (y, z) = (*x3, 4); //~ERROR variable `y` has dynamically sized type `X`\n+    let (y, z) = (*x3, 4i); //~ERROR variable `y` has dynamically sized type `X`\n }\n fn f4<type X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1;         //~ERROR variable `y` has dynamically sized type `X`\n     let y = *x2;            //~ERROR variable `y` has dynamically sized type `X`\n-    let (y, z) = (*x3, 4); //~ERROR variable `y` has dynamically sized type `X`\n+    let (y, z) = (*x3, 4i); //~ERROR variable `y` has dynamically sized type `X`\n }\n \n fn g1<type X>(x: X) {} //~ERROR variable `x` has dynamically sized type `X`"}, {"sha": "9a179f434c275d1c2eddc725fce5804e654ef5b5", "filename": "src/test/compile-fail/vec-mut-iter-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut xs = vec!(1, 2, 3, 4);\n+    let mut xs = vec!(1i, 2, 3, 4);\n \n     for x in xs.mut_iter() {\n         xs.push(1) //~ ERROR cannot borrow `xs`"}, {"sha": "8b6d160a6c5a98d3702e33c38b8af495e8cca273", "filename": "src/test/compile-fail/warn-path-statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,6 +11,6 @@\n // compile-flags: -D path-statement\n fn main() {\n \n-    let x = 10;\n+    let x = 10i;\n     x; //~ ERROR path statement with no effect\n }"}, {"sha": "51d2f36cc78b69cd1106413824ad8b4e787638a9", "filename": "src/test/debuginfo/basic-types-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -67,7 +67,7 @@ fn main() {\n     let f32: f32 = 2.5;\n     let f64: f64 = 3.5;\n     _zzz();\n-    if 1 == 1 { _yyy(); }\n+    if 1i == 1 { _yyy(); }\n }\n \n fn _zzz() {()}"}, {"sha": "dcfe1804510ad59364b060b30591a10f29731a75", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -30,9 +30,9 @@\n use std::gc::GC;\n \n fn main() {\n-    let a = box 1;\n-    let b = box() (2, 3.5);\n-    let c = box(GC) 4;\n+    let a = box 1i;\n+    let b = box() (2i, 3.5f64);\n+    let c = box(GC) 4i;\n     let d = box(GC) false;\n     _zzz();\n }"}, {"sha": "cc241040f2bd28335f178778a57a4fa77efdc34c", "filename": "src/test/debuginfo/closure-in-generic-function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -39,8 +39,8 @@ fn some_generic_fun<T1, T2>(a: T1, b: T2) -> (T2, T1) {\n }\n \n fn main() {\n-    some_generic_fun(0.5, 10);\n-    some_generic_fun(&29, box 110);\n+    some_generic_fun(0.5f64, 10i);\n+    some_generic_fun(&29i, box 110i);\n }\n \n fn zzz() {()}"}, {"sha": "d91d98f43050ff94d0aaff74378feb050e739dbf", "filename": "src/test/debuginfo/destructured-local.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -156,7 +156,7 @@ fn main() {\n     let Struct { a: k, b: l } = Struct { a: 12, b: 13 };\n \n     // ignored tuple element\n-    let (m, _, n) = (14, 15, 16);\n+    let (m, _, n) = (14i, 15i, 16i);\n \n     // ignored struct field\n     let Struct { b: o, .. } = Struct { a: 17, b: 18 };\n@@ -169,25 +169,25 @@ fn main() {\n \n     // complex nesting\n     let ((u, v), ((w, (x, Struct { a: y, b: z})), Struct { a: ae, b: oe }), ue) =\n-        ((25, 26), ((27, (28, Struct { a: 29, b: 30})), Struct { a: 31, b: 32 }), 33);\n+        ((25i, 26i), ((27i, (28i, Struct { a: 29, b: 30})), Struct { a: 31, b: 32 }), 33i);\n \n     // reference\n-    let &aa = &(34, 35);\n+    let &aa = &(34i, 35i);\n \n     // reference\n-    let &bb = &(36, 37);\n+    let &bb = &(36i, 37i);\n \n     // contained reference\n-    let (&cc, _) = (&38, 39);\n+    let (&cc, _) = (&38i, 39i);\n \n     // unique pointer\n-    let box dd = box() (40, 41, 42);\n+    let box dd = box() (40i, 41i, 42i);\n \n     // ref binding\n-    let ref ee = (43, 44, 45);\n+    let ref ee = (43i, 44i, 45i);\n \n     // ref binding in tuple\n-    let (ref ff, gg) = (46, (47, 48));\n+    let (ref ff, gg) = (46i, (47i, 48i));\n \n     // ref binding in struct\n     let Struct { b: ref hh, .. } = Struct { a: 49, b: 50 };"}, {"sha": "535efa0b84efc8ce90c9f9da3852530f021db2b4", "filename": "src/test/debuginfo/function-arg-initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -155,7 +155,7 @@ fn non_immediate_args(a: BigStruct, b: BigStruct) {\n }\n \n fn binding(a: i64, b: u64, c: f64) {\n-    let x = 0;\n+    let x = 0i;\n }\n \n fn assignment(mut a: u64, b: u64, c: f64) {"}, {"sha": "0160a6f1879dbe3706d2d4db0cf67f161d7b6157", "filename": "src/test/debuginfo/function-prologue-stepping-no-split-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-split-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-split-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-split-stack.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -152,7 +152,7 @@ fn non_immediate_args(a: BigStruct, b: BigStruct) {\n \n #[no_split_stack]\n fn binding(a: i64, b: u64, c: f64) {\n-    let x = 0;\n+    let x = 0i;\n }\n \n #[no_split_stack]"}, {"sha": "1805405dc1ef5d16522e13edf6f1e711e2a175ee", "filename": "src/test/debuginfo/generic-functions-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-functions-nested.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -43,8 +43,8 @@\n // gdb-command:continue\n \n fn outer<TA: Clone>(a: TA) {\n-    inner(a.clone(), 1);\n-    inner(a.clone(), 2.5);\n+    inner(a.clone(), 1i);\n+    inner(a.clone(), 2.5f64);\n \n     fn inner<TX, TY>(x: TX, y: TY) {\n         zzz();"}, {"sha": "9ed1c0175a91b50cea50abee50f17e385f74e7b1", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -91,7 +91,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2_i8);\n     let _ = stack.self_by_val(-3, -4_i16);\n \n-    let owned = box Struct { x: 1234.5 };\n+    let owned = box Struct { x: 1234.5f64 };\n     let _ = owned.self_by_ref(-5, -6_i32);\n     let _ = owned.self_by_val(-7, -8_i64);\n     let _ = owned.self_owned(-9, -10.5_f32);"}, {"sha": "b62b6f186b9aa6bab0aafebb9ce676ae365045b3", "filename": "src/test/debuginfo/generic-static-method-on-struct-and-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-static-method-on-struct-and-enum.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -61,8 +61,8 @@ impl Enum {\n }\n \n fn main() {\n-    Struct::static_method(1, 2);\n-    Enum::static_method(-3, 4.5, 5);\n+    Struct::static_method(1i, 2i);\n+    Enum::static_method(-3i, 4.5f64, 5i);\n }\n \n fn zzz() {()}"}, {"sha": "7fec116b8e58255a4dab5a1f4ec630a14b6b5e93", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -72,7 +72,7 @@ fn main() {\n     // 0b01011001 = 89\n     let case3: Regular<u16, i32, u64>  = Case3 { a: 0, b: 6438275382588823897 };\n \n-    let univariant = TheOnlyCase { a: -1 };\n+    let univariant = TheOnlyCase { a: -1i };\n \n     zzz();\n }"}, {"sha": "a2c5a0973fca4f2f6bd25c6fc6301393331a7d8c", "filename": "src/test/debuginfo/generic-struct.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -31,10 +31,13 @@ struct AGenericStruct<TKey, TValue> {\n \n fn main() {\n \n-    let int_int = AGenericStruct { key: 0, value: 1 };\n-    let int_float = AGenericStruct { key: 2, value: 3.5 };\n-    let float_int = AGenericStruct { key: 4.5, value: 5 };\n-    let float_int_float = AGenericStruct { key: 6.5, value: AGenericStruct { key: 7, value: 8.5 } };\n+    let int_int = AGenericStruct { key: 0i, value: 1i };\n+    let int_float = AGenericStruct { key: 2i, value: 3.5f64 };\n+    let float_int = AGenericStruct { key: 4.5f64, value: 5i };\n+    let float_int_float = AGenericStruct {\n+        key: 6.5f64,\n+        value: AGenericStruct { key: 7i, value: 8.5f64 },\n+    };\n \n     zzz();\n }"}, {"sha": "0fb823a74cc72c11ba27d7c2e828bc60b27b71c2", "filename": "src/test/debuginfo/lexical-scope-in-for-loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-for-loop.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -55,15 +55,15 @@\n \n fn main() {\n \n-    let range = [1, 2, 3];\n+    let range = [1i, 2, 3];\n \n-    let x = 1000000; // wan meeeljen doollaars!\n+    let x = 1000000i; // wan meeeljen doollaars!\n \n     for &x in range.iter() {\n         zzz();\n         sentinel();\n \n-        let x = -1 * x;\n+        let x = -1i * x;\n \n         zzz();\n         sentinel();"}, {"sha": "6018e62af0078db154ffa225d47e02f3b1355deb", "filename": "src/test/debuginfo/lexical-scope-in-if.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -80,8 +80,8 @@\n \n fn main() {\n \n-    let x = 999;\n-    let y = -1;\n+    let x = 999i;\n+    let y = -1i;\n \n     zzz();\n     sentinel();\n@@ -90,13 +90,13 @@ fn main() {\n         zzz();\n         sentinel();\n \n-        let x = 1001;\n+        let x = 1001i;\n \n         zzz();\n         sentinel();\n \n-        let x = 1002;\n-        let y = 1003;\n+        let x = 1002i;\n+        let y = 1003i;\n         zzz();\n         sentinel();\n     } else {\n@@ -112,8 +112,8 @@ fn main() {\n         zzz();\n         sentinel();\n \n-        let x = 1004;\n-        let y = 1005;\n+        let x = 1004i;\n+        let y = 1005i;\n         zzz();\n         sentinel();\n     }"}, {"sha": "7bec677e4b1005b9e379aa2e69f06011c6967121", "filename": "src/test/debuginfo/lexical-scope-in-match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -81,21 +81,21 @@ struct Struct {\n \n fn main() {\n \n-    let shadowed = 231;\n-    let not_shadowed = 232;\n+    let shadowed = 231i;\n+    let not_shadowed = 232i;\n \n     zzz();\n     sentinel();\n \n-    match (233, 234) {\n+    match (233i, 234i) {\n         (shadowed, local_to_arm) => {\n \n             zzz();\n             sentinel();\n         }\n     }\n \n-    match (235, 236) {\n+    match (235i, 236i) {\n         // with literal\n         (235, shadowed) => {\n \n@@ -132,7 +132,7 @@ fn main() {\n         _ => {}\n     }\n \n-    match (243, 244) {\n+    match (243i, 244i) {\n         (shadowed, ref local_to_arm) => {\n \n             zzz();"}, {"sha": "0e47f2c9921fc5c74314339ee845f1faa4cc4d5d", "filename": "src/test/debuginfo/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,6 +16,6 @@\n // Nothing to do here really, just make sure it compiles. See issue #8513.\n fn main() {\n     let _ = ||();\n-    let _ = range(1u,3).map(|_| 5);\n+    let _ = range(1u,3).map(|_| 5i);\n }\n "}, {"sha": "0168eaa86c2d1d90d2647113c21a688717e49b07", "filename": "src/test/debuginfo/lexical-scope-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -55,7 +55,7 @@ fn main() {\n         zzz();\n         sentinel();\n \n-        let x = 2.5;\n+        let x = 2.5f64;\n \n         zzz();\n         sentinel();"}, {"sha": "48edd7ae12a096f4bdcd81659626c6948e510feb", "filename": "src/test/debuginfo/lexical-scope-in-unconditional-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unconditional-loop.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -84,7 +84,7 @@\n \n fn main() {\n \n-    let mut x = 0;\n+    let mut x = 0i;\n \n     loop {\n         if x >= 2 {\n@@ -108,7 +108,7 @@ fn main() {\n             zzz();\n             sentinel();\n \n-            let x = -987;\n+            let x = -987i;\n \n             zzz();\n             sentinel();"}, {"sha": "ce3b2a530e2c297f38096d3ab075944c6a8777c3", "filename": "src/test/debuginfo/lexical-scope-in-unique-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -55,7 +55,7 @@ fn main() {\n         zzz();\n         sentinel();\n \n-        let x = 2.5;\n+        let x = 2.5f64;\n \n         zzz();\n         sentinel();"}, {"sha": "d726eb6581eb2cd9778903ae570f65d29ea3fb81", "filename": "src/test/debuginfo/lexical-scope-in-while.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-while.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -84,7 +84,7 @@\n \n fn main() {\n \n-    let mut x = 0;\n+    let mut x = 0i;\n \n     while x < 2 {\n         zzz();\n@@ -104,7 +104,7 @@ fn main() {\n             zzz();\n             sentinel();\n \n-            let x = -987;\n+            let x = -987i;\n \n             zzz();\n             sentinel();"}, {"sha": "e55271239d488bbf88fadb09e10ba0aaa7450242", "filename": "src/test/debuginfo/lexical-scope-with-macro.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-with-macro.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -77,7 +77,7 @@ macro_rules! no_new_scope(\n \n macro_rules! new_scope(\n     () => ({\n-        let a = 890242;\n+        let a = 890242i;\n         zzz();\n         sentinel();\n     })\n@@ -105,8 +105,8 @@ macro_rules! dup_expr(\n \n fn main() {\n \n-    let a = trivial!(10);\n-    let b = no_new_scope!(33);\n+    let a = trivial!(10i);\n+    let b = no_new_scope!(33i);\n \n     zzz();\n     sentinel();\n@@ -116,12 +116,12 @@ fn main() {\n     zzz();\n     sentinel();\n \n-    shadow_within_macro!(100);\n+    shadow_within_macro!(100i);\n \n     zzz();\n     sentinel();\n \n-    let c = dup_expr!(10 * 20);\n+    let c = dup_expr!(10i * 20);\n \n     zzz();\n     sentinel();"}, {"sha": "2a9969dc6e90310e42fd6466dd2bec61a365dbab", "filename": "src/test/debuginfo/lexical-scopes-in-block-expression.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -227,8 +227,8 @@ fn a_function(x: int) -> int {\n \n fn main() {\n \n-    let val = -1;\n-    let ten = 10;\n+    let val = -1i;\n+    let ten = 10i;\n \n     // surrounded by struct expression\n     let point = Point {\n@@ -280,7 +280,7 @@ fn main() {\n         sentinel();\n \n         val\n-    }, 0);\n+    }, 0i);\n \n     zzz();\n     sentinel();\n@@ -355,7 +355,7 @@ fn main() {\n     sentinel();\n \n     // index expression\n-    let a_vector = [10, ..20];\n+    let a_vector = [10i, ..20];\n     let _ = a_vector[{\n         zzz();\n         sentinel();"}, {"sha": "9cda2c45131db1f4e7ae770f6d0738acc2c8c9e2", "filename": "src/test/debuginfo/limited-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -46,7 +46,7 @@ fn zzz() {()}\n \n fn some_function(a: int, b: int) {\n     let some_variable = Struct { a: 11, b: 22 };\n-    let some_other_variable = 23;\n+    let some_other_variable = 23i;\n     zzz();\n }\n "}, {"sha": "cc18ea64f383eeedeb74cbd18cf239ac3b66632a", "filename": "src/test/debuginfo/managed-pointer-within-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmanaged-pointer-within-unique.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -37,9 +37,9 @@ struct ContainsManaged {\n }\n \n fn main() {\n-    let ordinary_unique = box() (-1, -2);\n+    let ordinary_unique = box() (-1i, -2i);\n \n-    let managed_within_unique = box ContainsManaged { x: -3, y: box(GC) -4 };\n+    let managed_within_unique = box ContainsManaged { x: -3, y: box(GC) -4i };\n \n     zzz();\n }"}, {"sha": "0bac86b1e66aa346c3db94632e614fb2c3999561", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -91,7 +91,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Struct { x: 1234.5 };\n+    let owned = box Struct { x: 1234.5f64 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "9e40f03c201626a8a791c6224089e8f77af0a28b", "filename": "src/test/debuginfo/multiple-functions-equal-var-names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmultiple-functions-equal-var-names.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -31,18 +31,18 @@\n #![allow(unused_variable)]\n \n fn function_one() {\n-    let abc = 10101;\n+    let abc = 10101i;\n     zzz();\n }\n \n fn function_two() {\n-    let abc = 20202;\n+    let abc = 20202i;\n     zzz();\n }\n \n \n fn function_three() {\n-    let abc = 30303;\n+    let abc = 30303i;\n     zzz();\n }\n "}, {"sha": "ef1c69f9eb8cf50a2744ffcfc015a5f76c13afea", "filename": "src/test/debuginfo/multiple-functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmultiple-functions.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -31,18 +31,18 @@\n #![allow(unused_variable)]\n \n fn function_one() {\n-    let a = 10101;\n+    let a = 10101i;\n     zzz();\n }\n \n fn function_two() {\n-    let b = 20202;\n+    let b = 20202i;\n     zzz();\n }\n \n \n fn function_three() {\n-    let c = 30303;\n+    let c = 30303i;\n     zzz();\n }\n "}, {"sha": "8ee6d434016f0b946cdecc1e00a244d870deeee9", "filename": "src/test/debuginfo/name-shadowing-and-scope-nesting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fname-shadowing-and-scope-nesting.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -63,25 +63,25 @@ fn main() {\n     zzz();\n     sentinel();\n \n-    let x = 10;\n+    let x = 10i;\n \n     zzz();\n     sentinel();\n \n-    let x = 10.5;\n-    let y = 20;\n+    let x = 10.5f64;\n+    let y = 20i;\n \n     zzz();\n     sentinel();\n \n     {\n         let x = true;\n-        let y = 2220;\n+        let y = 2220i;\n \n         zzz();\n         sentinel();\n \n-        let x = 203203.5;\n+        let x = 203203.5f64;\n \n         zzz();\n         sentinel();"}, {"sha": "de6d6814308d8d6e0751a013909682690692ed9d", "filename": "src/test/debuginfo/option-like-enum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -72,18 +72,18 @@ struct NamedFieldsRepr<'a> {\n \n fn main() {\n \n-    let some: Option<&u32> = Some(unsafe { std::mem::transmute(0x12345678) });\n+    let some: Option<&u32> = Some(unsafe { std::mem::transmute(0x12345678u) });\n     let none: Option<&u32> = None;\n \n-    let full = Full(454545, unsafe { std::mem::transmute(0x87654321) }, 9988);\n+    let full = Full(454545, unsafe { std::mem::transmute(0x87654321u) }, 9988);\n \n-    let int_val = 0;\n+    let int_val = 0i;\n     let empty: &MoreFieldsRepr = unsafe { std::mem::transmute(&Empty) };\n \n     let droid = Droid {\n         id: 675675,\n         range: 10000001,\n-        internals: unsafe { std::mem::transmute(0x43218765) }\n+        internals: unsafe { std::mem::transmute(0x43218765u) }\n     };\n \n     let void_droid: &NamedFieldsRepr = unsafe { std::mem::transmute(&Void) };"}, {"sha": "c180d6b5bcfe7c5eadfb7af99544eb5d6bd80534", "filename": "src/test/debuginfo/shadowed-argument.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshadowed-argument.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -39,13 +39,13 @@ fn a_function(x: bool, y: bool) {\n     zzz();\n     sentinel();\n \n-    let x = 10;\n+    let x = 10i;\n \n     zzz();\n     sentinel();\n \n-    let x = 10.5;\n-    let y = 20;\n+    let x = 10.5f64;\n+    let y = 20i;\n \n     zzz();\n     sentinel();"}, {"sha": "88ef3c4879e90d41eafe019100e0987b0cd1945a", "filename": "src/test/debuginfo/shadowed-variable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fshadowed-variable.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -42,13 +42,13 @@ fn main() {\n     zzz();\n     sentinel();\n \n-    let x = 10;\n+    let x = 10i;\n \n     zzz();\n     sentinel();\n \n-    let x = 10.5;\n-    let y = 20;\n+    let x = 10.5f64;\n+    let y = 20i;\n \n     zzz();\n     sentinel();"}, {"sha": "107b64131e053d577b0e5a21ab81ae0414c7ea08", "filename": "src/test/debuginfo/simple-lexical-scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-lexical-scope.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -60,7 +60,7 @@ fn main() {\n         zzz();\n         sentinel();\n \n-        let x = 10;\n+        let x = 10i;\n \n         zzz();\n         sentinel();\n@@ -69,7 +69,7 @@ fn main() {\n             zzz();\n             sentinel();\n \n-            let x = 10.5;\n+            let x = 10.5f64;\n \n             zzz();\n             sentinel();"}, {"sha": "155865f415b6398aab09a1f6557108892a66961c", "filename": "src/test/debuginfo/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fdebuginfo%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -26,7 +26,7 @@\n static mut VECT: [i32, ..3] = [1, 2, 3];\n \n fn main() {\n-    let a = [1, 2, 3];\n+    let a = [1i, 2, 3];\n \n     unsafe {\n         VECT[0] = 4;"}, {"sha": "9433ddf1a1fc87f7cd59af5d600a719e9636a399", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -17,9 +17,9 @@\n use std::cell::Cell;\n use std::gc::GC;\n \n-fn test1() { let val = box(GC) 0; { } *val; }\n+fn test1() { let val = box(GC) 0i; { } *val; }\n \n-fn test2() -> int { let val = box(GC) 0; { } *val }\n+fn test2() -> int { let val = box(GC) 0i; { } *val }\n \n struct S { eax: int }\n \n@@ -36,13 +36,13 @@ fn test5() -> (int, int) { { } (0, 1) }\n fn test6() -> bool { { } (true || false) && true }\n \n fn test7() -> uint {\n-    let regs = box(GC) 0;\n+    let regs = box(GC) 0i;\n     match true { true => { } _ => { } }\n     (*regs < 2) as uint\n }\n \n fn test8() -> int {\n-    let val = box(GC) 0;\n+    let val = box(GC) 0i;\n     match true {\n         true => { }\n         _    => { }\n@@ -55,12 +55,12 @@ fn test8() -> int {\n }\n \n fn test9() {\n-    let regs = box(GC) Cell::new(0);\n+    let regs = box(GC) Cell::new(0i);\n     match true { true => { } _ => { } } regs.set(regs.get() + 1);\n }\n \n fn test10() -> int {\n-    let regs = box(GC) vec!(0);\n+    let regs = box(GC) vec!(0i);\n     match true { true => { } _ => { } }\n     *(*regs).get(0)\n }"}, {"sha": "85b71e4e86cc7bcb47feb1b664ccffff412ef138", "filename": "src/test/pretty/issue-929.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fissue-929.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fissue-929.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-929.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f() { if (1 == fail!()) { } else { } }\n+fn f() { if (1i == fail!()) { } else { } }\n \n fn main() { }"}, {"sha": "c03ad499478925cbea5dd7e6afa5774e96c3c5f6", "filename": "src/test/pretty/match-naked-expr-medium.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,7 +11,7 @@\n // pp-exact\n \n fn main() {\n-    let x = Some(3);\n+    let x = Some(3i);\n     let _y =\n         match x {\n             Some(_) =>"}, {"sha": "67c389f7e1f0870748224e1bb40db04f79517f48", "filename": "src/test/pretty/match-naked-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,7 +11,7 @@\n // pp-exact\n \n fn main() {\n-    let x = Some(3);\n+    let x = Some(3i);\n     let _y =\n         match x {\n             Some(_) => \"some(_)\".to_string(),"}, {"sha": "850904fe53e44551294bcbdcfb2199e554ca3a4f", "filename": "src/test/pretty/unary-op-disambig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Funary-op-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Funary-op-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Funary-op-disambig.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -18,10 +18,10 @@ fn block_nosemi() -> int { ({ 0 }) - 1 }\n \n fn if_semi() -> int { if true { f() } else { f() }; -1 }\n \n-fn if_nosemi() -> int { (if true { 0 } else { 0 }) - 1 }\n+fn if_nosemi() -> int { (if true { 0i } else { 0i }) - 1 }\n \n fn alt_semi() -> int { match true { true => { f() } _ => { } }; -1 }\n \n fn alt_no_semi() -> int { (match true { true => { 0 } _ => { 1 } }) - 1 }\n \n-fn stmt() { { f() }; -1; }\n+fn stmt() { { f() }; -1i; }"}, {"sha": "401c63efbc468572c96071d4f240a51bd651c6a3", "filename": "src/test/pretty/vec-comments.pp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fvec-comments.pp", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fvec-comments.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-comments.pp?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,25 +15,25 @@\n     let _v1 =\n         [\n          // Comment\n-         0,\n+         0i,\n          // Comment\n-         1,\n+         1i,\n          // Comment\n-         2];\n+         2i];\n     let _v2 =\n-        [0, // Comment\n-         1, // Comment\n-         2]; // Comment\n+        [0i, // Comment\n+         1i, // Comment\n+         2i]; // Comment\n     let _v3 =\n         [\n          /* Comment */\n-         0,\n+         0i,\n          /* Comment */\n-         1,\n+         1i,\n          /* Comment */\n-         2];\n+         2i];\n     let _v4 =\n-        [0, /* Comment */\n-         1, /* Comment */\n-         2]; /* Comment */\n+        [0i, /* Comment */\n+         1i, /* Comment */\n+         2i]; /* Comment */\n }"}, {"sha": "401c63efbc468572c96071d4f240a51bd651c6a3", "filename": "src/test/pretty/vec-comments.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fvec-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Fpretty%2Fvec-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-comments.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,25 +15,25 @@ fn main() {\n     let _v1 =\n         [\n          // Comment\n-         0,\n+         0i,\n          // Comment\n-         1,\n+         1i,\n          // Comment\n-         2];\n+         2i];\n     let _v2 =\n-        [0, // Comment\n-         1, // Comment\n-         2]; // Comment\n+        [0i, // Comment\n+         1i, // Comment\n+         2i]; // Comment\n     let _v3 =\n         [\n          /* Comment */\n-         0,\n+         0i,\n          /* Comment */\n-         1,\n+         1i,\n          /* Comment */\n-         2];\n+         2i];\n     let _v4 =\n-        [0, /* Comment */\n-         1, /* Comment */\n-         2]; /* Comment */\n+        [0i, /* Comment */\n+         1i, /* Comment */\n+         2i]; /* Comment */\n }"}, {"sha": "fb069e61bd2a1b571a2bd36367cbabbf74ae6ac7", "filename": "src/test/run-fail/assert-as-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fassert-as-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fassert-as-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-as-macro.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:assertion failed: 1 == 2\n+// error-pattern:assertion failed: 1i == 2\n \n fn main() {\n-    assert!(1 == 2);\n+    assert!(1i == 2);\n }"}, {"sha": "df9050e218631b15161a7ae94200ee8c2497a99d", "filename": "src/test/run-fail/bounds-check-no-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -14,6 +14,6 @@ use std::uint;\n use std::mem::size_of;\n \n fn main() {\n-    let xs = [1, 2, 3];\n+    let xs = [1i, 2, 3];\n     xs[uint::MAX / size_of::<int>() + 1];\n }"}, {"sha": "c58d30f272996dac263e14bf161e8c57baff7530", "filename": "src/test/run-fail/divide-by-zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:attempted to divide by zero\n fn main() {\n-    let y = 0;\n-    let _z = 1 / y;\n+    let y = 0i;\n+    let _z = 1i / y;\n }"}, {"sha": "4af9b82ec7e22edf440ded5f61caab38f6812cea", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -13,7 +13,7 @@\n \n // error-pattern:wooooo\n fn main() {\n-    let mut a = 1;\n-    if 1 == 1 { a = 2; }\n+    let mut a = 1i;\n+    if 1i == 1 { a = 2; }\n     fail!(format!(\"woooo{}\", \"o\"));\n }"}, {"sha": "55d86bc6493245722ce004567b6eefc7505af0f4", "filename": "src/test/run-fail/expr-if-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,4 +12,4 @@\n \n \n // error-pattern:explicit failure\n-fn main() { let _x = if false { 0 } else if true { fail!() } else { 10 }; }\n+fn main() { let _x = if false { 0i } else if true { fail!() } else { 10i }; }"}, {"sha": "d15ec3f7b486ab00150fea6c0915a37e168c1d5a", "filename": "src/test/run-fail/expr-match-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fexpr-match-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fexpr-match-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-match-fail.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,4 +12,4 @@\n \n \n // error-pattern:explicit failure\n-fn main() { let _x = match true { false => { 0 } true => { fail!() } }; }\n+fn main() { let _x = match true { false => { 0i } true => { fail!() } }; }"}, {"sha": "edb03b2d6b461ec110fe191f4c36a8d9a1b2d79c", "filename": "src/test/run-fail/fail-task-name-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     let r: Result<int,_> = TaskBuilder::new().named(\"owned name\".to_string())\n                                              .try(proc() {\n         fail!(\"test\");\n-        1\n+        1i\n     });\n     assert!(r.is_ok());\n }"}, {"sha": "0a74009977828e4ffa152f6d29131eaed7b86820", "filename": "src/test/run-fail/fail-task-name-send-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,7 +15,7 @@ fn main() {\n         ::std::task::TaskBuilder::new().named(\"send name\".into_maybe_owned())\n                                        .try(proc() {\n             fail!(\"test\");\n-            3\n+            3i\n         });\n     assert!(r.is_ok());\n }"}, {"sha": "54ccc98bcd9243d61f8c19eb01c855113358534c", "filename": "src/test/run-fail/fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Ffail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Ffail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,5 +11,5 @@\n \n \n \n-// error-pattern:1 == 2\n-fn main() { assert!((1 == 2)); }\n+// error-pattern:1i == 2\n+fn main() { assert!((1i == 2)); }"}, {"sha": "80e275019ce24494acc57e1ba71bf1ddb3f95995", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,7 +16,7 @@\n // error-pattern:so long\n fn main() {\n     let mut x = Vec::new();\n-    let y = vec!(3);\n+    let y = vec!(3i);\n     fail!(\"so long\");\n     x.push_all_move(y);\n }"}, {"sha": "544150517084c555691dc54cb9d9100ade80480c", "filename": "src/test/run-fail/mod-zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmod-zero.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:attempted remainder with a divisor of zero\n fn main() {\n-    let y = 0;\n-    let _z = 1 % y;\n+    let y = 0i;\n+    let _z = 1i % y;\n }"}, {"sha": "c4dd8802d8a841f0ca1b7a65417430f83aace6f1", "filename": "src/test/run-fail/unwind-assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-assert.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,6 +15,6 @@\n use std::gc::GC;\n \n fn main() {\n-    let _a = box(GC) 0;\n+    let _a = box(GC) 0i;\n     assert!(false);\n }"}, {"sha": "f80f25ec6ebc2aabd8f05ec35614207675349ef4", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -41,7 +41,7 @@ fn r(v: *const int) -> r {\n \n fn main() {\n     unsafe {\n-        let i1 = box 0;\n+        let i1 = box 0i;\n         let i1p = mem::transmute_copy(&i1);\n         mem::forget(i1);\n         let x = box(GC) r(i1p);"}, {"sha": "3647c553bf218a0118dddfb3d76020a7bf588340", "filename": "src/test/run-fail/unwind-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -19,6 +19,6 @@ fn failfn() {\n }\n \n fn main() {\n-    box(GC) 0;\n+    box(GC) 0i;\n     failfn();\n }"}, {"sha": "e25fe1908ba53f8cc21999329976f247e796d542", "filename": "src/test/run-fail/unwind-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-fail.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,6 +15,6 @@\n use std::gc::GC;\n \n fn main() {\n-    box(GC) 0;\n+    box(GC) 0i;\n     fail!();\n }"}, {"sha": "f6a3aa48def9b224e78d5b4b833eb7b7cddd142c", "filename": "src/test/run-fail/unwind-interleaved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,8 +15,8 @@ fn a() { }\n fn b() { fail!(); }\n \n fn main() {\n-    let _x = vec!(0);\n+    let _x = vec!(0i);\n     a();\n-    let _y = vec!(0);\n+    let _y = vec!(0i);\n     b();\n }"}, {"sha": "d77a9f911b5ef45ef8f9130ccf92e0cf7b88ff45", "filename": "src/test/run-fail/unwind-iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -22,6 +22,6 @@ fn x(it: |int|) {\n }\n \n fn main() {\n-    let a = box(GC) 0;\n+    let a = box(GC) 0i;\n     x(|_i| { } );\n }"}, {"sha": "9f00c0bc8bace24943e1303b8bccf0dad497c147", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,7 +15,7 @@\n use std::gc::{GC};\n \n fn x(it: |int|) {\n-    let _a = box(GC) 0;\n+    let _a = box(GC) 0i;\n     it(1);\n }\n "}, {"sha": "f256884b312a706bf29a597a5291f263a596efad", "filename": "src/test/run-fail/unwind-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-match.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,7 +16,7 @@\n use std::gc::GC;\n \n fn test_box() {\n-    box(GC) 0;\n+    box(GC) 0i;\n }\n fn test_str() {\n   let res = match false { true => { \"happy\".to_string() },"}, {"sha": "bebf06cf45aebd6033c3bf34497eeadb07cc5c5e", "filename": "src/test/run-fail/unwind-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-nested.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,9 +15,9 @@\n use std::gc::GC;\n \n fn main() {\n-    let _a = box(GC) 0;\n+    let _a = box(GC) 0i;\n     {\n-        let _b = box(GC) 0;\n+        let _b = box(GC) 0i;\n         {\n             fail!();\n         }"}, {"sha": "5912f8167bc4948bb631a569bc79cd528076f4c3", "filename": "src/test/run-fail/unwind-partial-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -19,7 +19,7 @@ fn f() -> Vec<int> { fail!(); }\n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns.\n fn prime() {\n-    box(GC) 0;\n+    box(GC) 0i;\n }\n \n fn partial() {"}, {"sha": "2e6eee65738927bf804908afe119ba3d532734fb", "filename": "src/test/run-fail/unwind-partial-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -19,7 +19,7 @@ fn f() -> Vec<int> { fail!(); }\n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns.\n fn prime() {\n-    box(GC) 0;\n+    box(GC) 0i;\n }\n \n fn partial() {"}, {"sha": "7ad02fcd3d75365f3914b44955dd3bd791900800", "filename": "src/test/run-fail/unwind-partial-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -19,11 +19,11 @@ fn f() -> Vec<int> { fail!(); }\n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns.\n fn prime() {\n-    box(GC) 0;\n+    box(GC) 0i;\n }\n \n fn partial() {\n-    let _x = vec!(vec!(0), f(), vec!(0));\n+    let _x = vec!(vec!(0i), f(), vec!(0i));\n }\n \n fn main() {"}, {"sha": "8d0a14306d9901749d78059f272452fc72f924d4", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -25,6 +25,6 @@ impl Drop for r {\n fn r(i: int) -> r { r { i: i } }\n \n fn main() {\n-    box(GC) 0;\n+    box(GC) 0i;\n     let _r = r(0);\n }"}, {"sha": "97f4d974d8dd68f5837c834fc2729a967b8c5fab", "filename": "src/test/run-fail/unwind-stacked.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-stacked.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,16 +15,16 @@\n use std::gc::GC;\n \n fn f() {\n-    let _a = box(GC) 0;\n+    let _a = box(GC) 0i;\n     fail!();\n }\n \n fn g() {\n-    let _b = box(GC) 0;\n+    let _b = box(GC) 0i;\n     f();\n }\n \n fn main() {\n-    let _a = box(GC) 0;\n+    let _a = box(GC) 0i;\n     g();\n }"}, {"sha": "4a7914c568aca7d17723f0fbd57e72be8804f26e", "filename": "src/test/run-fail/unwind-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -19,5 +19,5 @@ fn fold_local() -> Gc<Vec<int>> {\n }\n \n fn main() {\n-    let _lss = (fold_local(), 0);\n+    let _lss = (fold_local(), 0i);\n }"}, {"sha": "29723b127290168fea77d741ae3320f031db3d2c", "filename": "src/test/run-fail/unwind-uninitialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -20,5 +20,5 @@ fn f() {\n \n fn main() {\n     f();\n-    let _a = box(GC) 0;\n+    let _a = box(GC) 0i;\n }"}, {"sha": "233d367c4b1e16b2b7fee4b109dbe0926b4c93ab", "filename": "src/test/run-fail/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-unique.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,6 +16,6 @@ fn failfn() {\n }\n \n fn main() {\n-    box 0;\n+    box 0i;\n     failfn();\n }"}, {"sha": "a5239a6cc665b3c67f243ac15e8798424a8a01b4", "filename": "src/test/run-make/graphviz-flowgraph/f01.dot-expected.dot", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,8 +1,8 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 1\"];\n-    N3[label=\"block { 1; }\"];\n+    N2[label=\"expr 1i\"];\n+    N3[label=\"block { 1i; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N1;"}, {"sha": "f1f1a1d5472f70423a77b33a82cf2dc36ff7cded", "filename": "src/test/run-make/graphviz-flowgraph/f01.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff01.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn lit_1() {\n-    1;\n+    1i;\n }"}, {"sha": "43462862f6ea9ef28166e58f736e7f578e9a24b1", "filename": "src/test/run-make/graphviz-flowgraph/f03.dot-expected.dot", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,10 +1,10 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 3\"];\n-    N3[label=\"expr 33\"];\n-    N4[label=\"expr 3 + 33\"];\n-    N5[label=\"block { 3 + 33; }\"];\n+    N2[label=\"expr 3i\"];\n+    N3[label=\"expr 33i\"];\n+    N4[label=\"expr 3i + 33i\"];\n+    N5[label=\"block { 3i + 33i; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "1007225f2f291ece6cf5c7cf4728b1e023a154b7", "filename": "src/test/run-make/graphviz-flowgraph/f03.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn expr_add_3() {\n-    3 + 33;\n+    3i + 33i;\n }"}, {"sha": "26c858a0828cab6a71f8f910a653d921f0f9bea7", "filename": "src/test/run-make/graphviz-flowgraph/f04.dot-expected.dot", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,9 +1,9 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 4\"];\n+    N2[label=\"expr 4i\"];\n     N3[label=\"local _x\"];\n-    N4[label=\"block { let _x = 4; }\"];\n+    N4[label=\"block { let _x = 4i; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "ed2f7e25dae6ce13b58da32e7a7f0fa23ef24f6d", "filename": "src/test/run-make/graphviz-flowgraph/f04.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff04.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn pat_id_4() {\n-    let _x = 4;\n+    let _x = 4i;\n }"}, {"sha": "850d04f430f0d4302c1fbe011f051398fa4b49f1", "filename": "src/test/run-make/graphviz-flowgraph/f05.dot-expected.dot", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,13 +1,13 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 5\"];\n-    N3[label=\"expr 55\"];\n-    N4[label=\"expr (5, 55)\"];\n+    N2[label=\"expr 5i\"];\n+    N3[label=\"expr 55i\"];\n+    N4[label=\"expr (5i, 55i)\"];\n     N5[label=\"local _x\"];\n     N6[label=\"local _y\"];\n     N7[label=\"pat (_x, _y)\"];\n-    N8[label=\"block { let (_x, _y) = (5, 55); }\"];\n+    N8[label=\"block { let (_x, _y) = (5i, 55i); }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "b2591bdd08a16843b1fcff0d0486d90c9ebab96f", "filename": "src/test/run-make/graphviz-flowgraph/f05.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff05.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn pat_tup_5() {\n-    let (_x, _y) = (5, 55);\n+    let (_x, _y) = (5i, 55i);\n }"}, {"sha": "251798fc7ed889d47de3bd9265ee8eb97b061d1b", "filename": "src/test/run-make/graphviz-flowgraph/f07.dot-expected.dot", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,20 +1,20 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 7\"];\n-    N3[label=\"expr 77\"];\n-    N4[label=\"expr 777\"];\n-    N5[label=\"expr 7777\"];\n-    N6[label=\"expr [7, 77, 777, 7777]\"];\n-    N7[label=\"expr match [7, 77, 777, 7777] { [x, y, ..] => x + y }\"];\n+    N2[label=\"expr 7i\"];\n+    N3[label=\"expr 77i\"];\n+    N4[label=\"expr 777i\"];\n+    N5[label=\"expr 7777i\"];\n+    N6[label=\"expr [7i, 77i, 777i, 7777i]\"];\n+    N7[label=\"expr match [7i, 77i, 777i, 7777i] { [x, y, ..] => x + y }\"];\n     N8[label=\"local x\"];\n     N9[label=\"local y\"];\n     N10[label=\"pat ..\"];\n     N11[label=\"pat [x, y, ..]\"];\n     N12[label=\"expr x\"];\n     N13[label=\"expr y\"];\n     N14[label=\"expr x + y\"];\n-    N15[label=\"block { match [7, 77, 777, 7777] { [x, y, ..] => x + y }; }\"];\n+    N15[label=\"block { match [7i, 77i, 777i, 7777i] { [x, y, ..] => x + y }; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "fb3f2d24cddc7d0b055d5fb0db6fea43c10b9964", "filename": "src/test/run-make/graphviz-flowgraph/f07.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn pat_vec_7() {\n-    match [7, 77, 777, 7777] {\n+    match [7i, 77i, 777i, 7777i] {\n         [x, y, ..] => x + y\n     };\n }"}, {"sha": "f43beb025e34581d663af2c02c641a244dc3b220", "filename": "src/test/run-make/graphviz-flowgraph/f08.dot-expected.dot", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,18 +1,18 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 8\"];\n+    N2[label=\"expr 8i\"];\n     N3[label=\"local x\"];\n     N4[label=\"local _y\"];\n     N5[label=\"expr x\"];\n-    N6[label=\"expr 88\"];\n-    N7[label=\"expr x > 88\"];\n-    N8[label=\"expr 888\"];\n+    N6[label=\"expr 88i\"];\n+    N7[label=\"expr x > 88i\"];\n+    N8[label=\"expr 888i\"];\n     N9[label=\"expr _y\"];\n-    N10[label=\"expr _y = 888\"];\n-    N11[label=\"block { _y = 888; }\"];\n-    N12[label=\"expr if x > 88 { _y = 888; }\"];\n-    N13[label=\"block { let x = 8; let _y; if x > 88 { _y = 888; } }\"];\n+    N10[label=\"expr _y = 888i\"];\n+    N11[label=\"block { _y = 888i; }\"];\n+    N12[label=\"expr if x > 88i { _y = 888i; }\"];\n+    N13[label=\"block { let x = 8i; let _y; if x > 88i { _y = 888i; } }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "5d166e5ffcd5d6800bc5e3851bed90e3e3e9c8fb", "filename": "src/test/run-make/graphviz-flowgraph/f08.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff08.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn expr_if_onearm_8() {\n-    let x = 8; let _y;\n-    if x > 88 {\n-        _y = 888;\n+    let x = 8i; let _y;\n+    if x > 88i {\n+        _y = 888i;\n     }\n }"}, {"sha": "a3576b9c36b69b10318f9a9d779516e3a07a601d", "filename": "src/test/run-make/graphviz-flowgraph/f09.dot-expected.dot", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,25 +1,25 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 91\"];\n+    N2[label=\"expr 91i\"];\n     N3[label=\"local x\"];\n     N4[label=\"local _y\"];\n     N5[label=\"expr x\"];\n-    N6[label=\"expr 92\"];\n-    N7[label=\"expr x > 92\"];\n-    N8[label=\"expr 93\"];\n+    N6[label=\"expr 92i\"];\n+    N7[label=\"expr x > 92i\"];\n+    N8[label=\"expr 93i\"];\n     N9[label=\"expr _y\"];\n-    N10[label=\"expr _y = 93\"];\n-    N11[label=\"block { _y = 93; }\"];\n-    N12[label=\"expr 94\"];\n-    N13[label=\"expr 95\"];\n-    N14[label=\"expr 94 + 95\"];\n+    N10[label=\"expr _y = 93i\"];\n+    N11[label=\"block { _y = 93i; }\"];\n+    N12[label=\"expr 94i\"];\n+    N13[label=\"expr 95i\"];\n+    N14[label=\"expr 94i + 95i\"];\n     N15[label=\"expr _y\"];\n-    N16[label=\"expr _y = 94 + 95\"];\n-    N17[label=\"block { _y = 94 + 95; }\"];\n-    N18[label=\"expr { _y = 94 + 95; }\"];\n-    N19[label=\"expr if x > 92 { _y = 93; } else { _y = 94 + 95; }\"];\n-    N20[label=\"block { let x = 91; let _y; if x > 92 { _y = 93; } else { _y = 94 + 95; } }\"];\n+    N16[label=\"expr _y = 94i + 95i\"];\n+    N17[label=\"block { _y = 94i + 95i; }\"];\n+    N18[label=\"expr { _y = 94i + 95i; }\"];\n+    N19[label=\"expr if x > 92i { _y = 93i; } else { _y = 94i + 95i; }\"];\n+    N20[label=\"block { let x = 91i; let _y; if x > 92i { _y = 93i; } else { _y = 94i + 95i; } }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "cfe5f4f37d60fd438e23505e1a38a40951548410", "filename": "src/test/run-make/graphviz-flowgraph/f09.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff09.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n pub fn expr_if_twoarm_9() {\n-    let x = 91; let _y;\n-    if x > 92 {\n-        _y = 93;\n+    let x = 91i; let _y;\n+    if x > 92i {\n+        _y = 93i;\n     } else {\n-        _y = 94+95;\n+        _y = 94i+95i;\n     }\n }"}, {"sha": "69b5bd6f58cdf6d5cf6683f69bfc86b3ac4c9bd1", "filename": "src/test/run-make/graphviz-flowgraph/f10.dot-expected.dot", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,18 +1,18 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 10\"];\n+    N2[label=\"expr 10i\"];\n     N3[label=\"local mut x\"];\n     N4[label=\"(dummy_node)\"];\n     N5[label=\"expr x\"];\n-    N6[label=\"expr 0\"];\n-    N7[label=\"expr x > 0\"];\n-    N8[label=\"expr while x > 0 { x -= 1; }\"];\n-    N9[label=\"expr 1\"];\n+    N6[label=\"expr 0i\"];\n+    N7[label=\"expr x > 0i\"];\n+    N8[label=\"expr while x > 0i { x -= 1i; }\"];\n+    N9[label=\"expr 1i\"];\n     N10[label=\"expr x\"];\n-    N11[label=\"expr x -= 1\"];\n-    N12[label=\"block { x -= 1; }\"];\n-    N13[label=\"block { let mut x = 10; while x > 0 { x -= 1; } }\"];\n+    N11[label=\"expr x -= 1i\"];\n+    N12[label=\"block { x -= 1i; }\"];\n+    N13[label=\"block { let mut x = 10i; while x > 0i { x -= 1i; } }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "af263f0cf10db995287ba66b4793afe089ac6140", "filename": "src/test/run-make/graphviz-flowgraph/f10.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff10.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn expr_while_10() {\n-    let mut x = 10;\n-    while x > 0 {\n-        x -= 1;\n+    let mut x = 10i;\n+    while x > 0i {\n+        x -= 1i;\n     }\n }"}, {"sha": "44024cf76f31a1656df22cecadd770a33ea26e9e", "filename": "src/test/run-make/graphviz-flowgraph/f11.dot-expected.dot", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,16 +1,16 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 11\"];\n+    N2[label=\"expr 11i\"];\n     N3[label=\"local mut _x\"];\n     N4[label=\"(dummy_node)\"];\n-    N5[label=\"expr loop  { _x -= 1; }\"];\n-    N6[label=\"expr 1\"];\n+    N5[label=\"expr loop  { _x -= 1i; }\"];\n+    N6[label=\"expr 1i\"];\n     N7[label=\"expr _x\"];\n-    N8[label=\"expr _x -= 1\"];\n-    N9[label=\"block { _x -= 1; }\"];\n+    N8[label=\"expr _x -= 1i\"];\n+    N9[label=\"block { _x -= 1i; }\"];\n     N10[label=\"expr \\\"unreachable\\\"\"];\n-    N11[label=\"block { let mut _x = 11; loop  { _x -= 1; } \\\"unreachable\\\"; }\"];\n+    N11[label=\"block { let mut _x = 11i; loop  { _x -= 1i; } \\\"unreachable\\\"; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "95260c608eca4cfbc3f92b284a5771c5805abbbf", "filename": "src/test/run-make/graphviz-flowgraph/f11.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff11.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,9 +10,9 @@\n \n #[allow(unreachable_code)]\n pub fn expr_loop_11() {\n-    let mut _x = 11;\n+    let mut _x = 11i;\n     loop {\n-        _x -= 1;\n+        _x -= 1i;\n     }\n     \"unreachable\";\n }"}, {"sha": "ad257c19741b339719af363dc020188002828f12", "filename": "src/test/run-make/graphviz-flowgraph/f12.dot-expected.dot", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,23 +1,23 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 12\"];\n+    N2[label=\"expr 12i\"];\n     N3[label=\"local mut x\"];\n     N4[label=\"(dummy_node)\"];\n-    N5[label=\"expr loop  { x -= 1; if x == 2 { break ; \\\"unreachable\\\"; } }\"];\n-    N6[label=\"expr 1\"];\n+    N5[label=\"expr loop  { x -= 1i; if x == 2i { break ; \\\"unreachable\\\"; } }\"];\n+    N6[label=\"expr 1i\"];\n     N7[label=\"expr x\"];\n-    N8[label=\"expr x -= 1\"];\n+    N8[label=\"expr x -= 1i\"];\n     N9[label=\"expr x\"];\n-    N10[label=\"expr 2\"];\n-    N11[label=\"expr x == 2\"];\n+    N10[label=\"expr 2i\"];\n+    N11[label=\"expr x == 2i\"];\n     N12[label=\"expr break\"];\n     N13[label=\"(dummy_node)\"];\n     N14[label=\"expr \\\"unreachable\\\"\"];\n     N15[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N16[label=\"expr if x == 2 { break ; \\\"unreachable\\\"; }\"];\n-    N17[label=\"block { x -= 1; if x == 2 { break ; \\\"unreachable\\\"; } }\"];\n-    N18[label=\"block { let mut x = 12; loop  { x -= 1; if x == 2 { break ; \\\"unreachable\\\"; } } }\"];\n+    N16[label=\"expr if x == 2i { break ; \\\"unreachable\\\"; }\"];\n+    N17[label=\"block { x -= 1i; if x == 2i { break ; \\\"unreachable\\\"; } }\"];\n+    N18[label=\"block { let mut x = 12i; loop  { x -= 1i; if x == 2i { break ; \\\"unreachable\\\"; } } }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;\n@@ -28,7 +28,7 @@ digraph block {\n     N9 -> N10;\n     N10 -> N11;\n     N11 -> N12;\n-    N12 -> N5[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 2 { break ; \\\"unreachable\\\"; },\\lexiting scope_4 block { x -= 1; if x == 2 { break ; \\\"unreachable\\\"; } }\"];\n+    N12 -> N5[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 2i { break ; \\\"unreachable\\\"; },\\lexiting scope_4 block { x -= 1i; if x == 2i { break ; \\\"unreachable\\\"; } }\"];\n     N13 -> N14;\n     N14 -> N15;\n     N11 -> N16;"}, {"sha": "625dd8cb03ef9f294abddebb8db2d912374f894e", "filename": "src/test/run-make/graphviz-flowgraph/f12.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff12.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,9 +10,9 @@\n \n #[allow(unreachable_code)]\n pub fn expr_loop_12() {\n-    let mut x = 12;\n+    let mut x = 12i;\n     loop {\n-        x -= 1;\n-        if x == 2 { break; \"unreachable\"; }\n+        x -= 1i;\n+        if x == 2i { break; \"unreachable\"; }\n     }\n }"}, {"sha": "f8e4bd12bb031156b94d6c315e3a688327cac2ce", "filename": "src/test/run-make/graphviz-flowgraph/f14.dot-expected.dot", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,17 +1,17 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 14\"];\n+    N2[label=\"expr 14i\"];\n     N3[label=\"local x\"];\n     N4[label=\"expr x\"];\n-    N5[label=\"expr 1\"];\n-    N6[label=\"expr x > 1\"];\n+    N5[label=\"expr 1i\"];\n+    N6[label=\"expr x > 1i\"];\n     N7[label=\"expr return\"];\n     N8[label=\"(dummy_node)\"];\n     N9[label=\"expr \\\"unreachable\\\"\"];\n     N10[label=\"block { return; \\\"unreachable\\\"; }\"];\n-    N11[label=\"expr if x > 1 { return; \\\"unreachable\\\"; }\"];\n-    N12[label=\"block { let x = 14; if x > 1 { return; \\\"unreachable\\\"; } }\"];\n+    N11[label=\"expr if x > 1i { return; \\\"unreachable\\\"; }\"];\n+    N12[label=\"block { let x = 14i; if x > 1i { return; \\\"unreachable\\\"; } }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "72616f315948733468243f4f3453c56023fa701b", "filename": "src/test/run-make/graphviz-flowgraph/f14.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff14.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,8 +10,8 @@\n \n #[allow(unreachable_code)]\n pub fn expr_ret_14() {\n-    let x = 14;\n-    if x > 1 {\n+    let x = 14i;\n+    if x > 1i {\n         return;\n         \"unreachable\";\n     }"}, {"sha": "bc47d9aff81219231dd7bccf76b0e2fcad4a86ca", "filename": "src/test/run-make/graphviz-flowgraph/f15.dot-expected.dot", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,42 +1,42 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 15\"];\n+    N2[label=\"expr 15i\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"expr 151\"];\n+    N4[label=\"expr 151i\"];\n     N5[label=\"local mut y\"];\n     N6[label=\"(dummy_node)\"];\n-    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l                if y >= 2 { break ; \\\"unreachable\\\" }\\l                y -= 3;\\l            }\\l        y -= 4;\\l        x -= 5;\\l    }\\l\"];\n+    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1i { break \\'outer ; \\\"unreachable\\\" }\\l                if y >= 2i { break ; \\\"unreachable\\\" }\\l                y -= 3i;\\l            }\\l        y -= 4i;\\l        x -= 5i;\\l    }\\l\"];\n     N8[label=\"(dummy_node)\"];\n-    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l        if y >= 2 { break ; \\\"unreachable\\\" }\\l        y -= 3;\\l    }\\l\"];\n+    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1i { break \\'outer ; \\\"unreachable\\\" }\\l        if y >= 2i { break ; \\\"unreachable\\\" }\\l        y -= 3i;\\l    }\\l\"];\n     N10[label=\"expr x\"];\n-    N11[label=\"expr 1\"];\n-    N12[label=\"expr x == 1\"];\n+    N11[label=\"expr 1i\"];\n+    N12[label=\"expr x == 1i\"];\n     N13[label=\"expr break \\'outer\"];\n     N14[label=\"(dummy_node)\"];\n     N15[label=\"expr \\\"unreachable\\\"\"];\n     N16[label=\"block { break \\'outer ; \\\"unreachable\\\" }\"];\n-    N17[label=\"expr if x == 1 { break \\'outer ; \\\"unreachable\\\" }\"];\n+    N17[label=\"expr if x == 1i { break \\'outer ; \\\"unreachable\\\" }\"];\n     N18[label=\"expr y\"];\n-    N19[label=\"expr 2\"];\n-    N20[label=\"expr y >= 2\"];\n+    N19[label=\"expr 2i\"];\n+    N20[label=\"expr y >= 2i\"];\n     N21[label=\"expr break\"];\n     N22[label=\"(dummy_node)\"];\n     N23[label=\"expr \\\"unreachable\\\"\"];\n     N24[label=\"block { break ; \\\"unreachable\\\" }\"];\n-    N25[label=\"expr if y >= 2 { break ; \\\"unreachable\\\" }\"];\n-    N26[label=\"expr 3\"];\n+    N25[label=\"expr if y >= 2i { break ; \\\"unreachable\\\" }\"];\n+    N26[label=\"expr 3i\"];\n     N27[label=\"expr y\"];\n-    N28[label=\"expr y -= 3\"];\n-    N29[label=\"block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l    if y >= 2 { break ; \\\"unreachable\\\" }\\l    y -= 3;\\l}\\l\"];\n-    N30[label=\"expr 4\"];\n+    N28[label=\"expr y -= 3i\"];\n+    N29[label=\"block {\\l    if x == 1i { break \\'outer ; \\\"unreachable\\\" }\\l    if y >= 2i { break ; \\\"unreachable\\\" }\\l    y -= 3i;\\l}\\l\"];\n+    N30[label=\"expr 4i\"];\n     N31[label=\"expr y\"];\n-    N32[label=\"expr y -= 4\"];\n-    N33[label=\"expr 5\"];\n+    N32[label=\"expr y -= 4i\"];\n+    N33[label=\"expr 5i\"];\n     N34[label=\"expr x\"];\n-    N35[label=\"expr x -= 5\"];\n-    N36[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l            if y >= 2 { break ; \\\"unreachable\\\" }\\l            y -= 3;\\l        }\\l    y -= 4;\\l    x -= 5;\\l}\\l\"];\n-    N37[label=\"block {\\l    let mut x = 15;\\l    let mut y = 151;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l                    if y >= 2 { break ; \\\"unreachable\\\" }\\l                    y -= 3;\\l                }\\l            y -= 4;\\l            x -= 5;\\l        }\\l}\\l\"];\n+    N35[label=\"expr x -= 5i\"];\n+    N36[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1i { break \\'outer ; \\\"unreachable\\\" }\\l            if y >= 2i { break ; \\\"unreachable\\\" }\\l            y -= 3i;\\l        }\\l    y -= 4i;\\l    x -= 5i;\\l}\\l\"];\n+    N37[label=\"block {\\l    let mut x = 15i;\\l    let mut y = 151i;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1i { break \\'outer ; \\\"unreachable\\\" }\\l                    if y >= 2i { break ; \\\"unreachable\\\" }\\l                    y -= 3i;\\l                }\\l            y -= 4i;\\l            x -= 5i;\\l        }\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;\n@@ -47,7 +47,7 @@ digraph block {\n     N10 -> N11;\n     N11 -> N12;\n     N12 -> N13;\n-    N13 -> N7[label=\"exiting scope_0 expr break \\'outer,\\lexiting scope_1 stmt break \\'outer ;,\\lexiting scope_2 block { break \\'outer ; \\\"unreachable\\\" },\\lexiting scope_3 expr if x == 1 { break \\'outer ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if x == 1 { break \\'outer ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l    if y >= 2 { break ; \\\"unreachable\\\" }\\l    y -= 3;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l        if y >= 2 { break ; \\\"unreachable\\\" }\\l        y -= 3;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l        if y >= 2 { break ; \\\"unreachable\\\" }\\l        y -= 3;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l            if y >= 2 { break ; \\\"unreachable\\\" }\\l            y -= 3;\\l        }\\l    y -= 4;\\l    x -= 5;\\l}\\l\"];\n+    N13 -> N7[label=\"exiting scope_0 expr break \\'outer,\\lexiting scope_1 stmt break \\'outer ;,\\lexiting scope_2 block { break \\'outer ; \\\"unreachable\\\" },\\lexiting scope_3 expr if x == 1i { break \\'outer ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if x == 1i { break \\'outer ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1i { break \\'outer ; \\\"unreachable\\\" }\\l    if y >= 2i { break ; \\\"unreachable\\\" }\\l    y -= 3i;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1i { break \\'outer ; \\\"unreachable\\\" }\\l        if y >= 2i { break ; \\\"unreachable\\\" }\\l        y -= 3i;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1i { break \\'outer ; \\\"unreachable\\\" }\\l        if y >= 2i { break ; \\\"unreachable\\\" }\\l        y -= 3i;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1i { break \\'outer ; \\\"unreachable\\\" }\\l            if y >= 2i { break ; \\\"unreachable\\\" }\\l            y -= 3i;\\l        }\\l    y -= 4i;\\l    x -= 5i;\\l}\\l\"];\n     N14 -> N15;\n     N15 -> N16;\n     N12 -> N17;\n@@ -56,7 +56,7 @@ digraph block {\n     N18 -> N19;\n     N19 -> N20;\n     N20 -> N21;\n-    N21 -> N9[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\" },\\lexiting scope_3 expr if y >= 2 { break ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if y >= 2 { break ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\" }\\l    if y >= 2 { break ; \\\"unreachable\\\" }\\l    y -= 3;\\l}\\l\"];\n+    N21 -> N9[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\" },\\lexiting scope_3 expr if y >= 2i { break ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if y >= 2i { break ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1i { break \\'outer ; \\\"unreachable\\\" }\\l    if y >= 2i { break ; \\\"unreachable\\\" }\\l    y -= 3i;\\l}\\l\"];\n     N22 -> N23;\n     N23 -> N24;\n     N20 -> N25;"}, {"sha": "e5ca1de3f2d2c8bb861887cb86acb99ec761b4c8", "filename": "src/test/run-make/graphviz-flowgraph/f15.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff15.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,21 +10,21 @@\n \n #[allow(unreachable_code)]\n pub fn expr_break_label_15() {\n-    let mut x = 15;\n-    let mut y = 151;\n+    let mut x = 15i;\n+    let mut y = 151i;\n     'outer: loop {\n         'inner: loop {\n-            if x == 1 {\n+            if x == 1i {\n                 break 'outer;\n                 \"unreachable\"\n             }\n-            if y >= 2 {\n+            if y >= 2i {\n                 break;\n                 \"unreachable\"\n             }\n-            y -= 3;\n+            y -= 3i;\n         }\n-        y -= 4;\n-        x -= 5;\n+        y -= 4i;\n+        x -= 5i;\n     }\n }"}, {"sha": "9c60e19f8b073c18141831c442e583f0c9933c09", "filename": "src/test/run-make/graphviz-flowgraph/f16.dot-expected.dot", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,43 +1,43 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 16\"];\n+    N2[label=\"expr 16i\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"expr 16\"];\n+    N4[label=\"expr 16i\"];\n     N5[label=\"local mut y\"];\n     N6[label=\"(dummy_node)\"];\n-    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l                if y >= 1 { break ; \\\"unreachable\\\" }\\l                y -= 1;\\l            }\\l        y -= 1;\\l        x -= 1;\\l    }\\l\"];\n+    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1i { continue \\'outer ; \\\"unreachable\\\" }\\l                if y >= 1i { break ; \\\"unreachable\\\" }\\l                y -= 1i;\\l            }\\l        y -= 1i;\\l        x -= 1i;\\l    }\\l\"];\n     N8[label=\"(dummy_node)\"];\n-    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l        if y >= 1 { break ; \\\"unreachable\\\" }\\l        y -= 1;\\l    }\\l\"];\n+    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1i { continue \\'outer ; \\\"unreachable\\\" }\\l        if y >= 1i { break ; \\\"unreachable\\\" }\\l        y -= 1i;\\l    }\\l\"];\n     N10[label=\"expr x\"];\n-    N11[label=\"expr 1\"];\n-    N12[label=\"expr x == 1\"];\n+    N11[label=\"expr 1i\"];\n+    N12[label=\"expr x == 1i\"];\n     N13[label=\"expr continue \\'outer\"];\n     N14[label=\"(dummy_node)\"];\n     N15[label=\"expr \\\"unreachable\\\"\"];\n     N16[label=\"block { continue \\'outer ; \\\"unreachable\\\" }\"];\n-    N17[label=\"expr if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\"];\n+    N17[label=\"expr if x == 1i { continue \\'outer ; \\\"unreachable\\\" }\"];\n     N18[label=\"expr y\"];\n-    N19[label=\"expr 1\"];\n-    N20[label=\"expr y >= 1\"];\n+    N19[label=\"expr 1i\"];\n+    N20[label=\"expr y >= 1i\"];\n     N21[label=\"expr break\"];\n     N22[label=\"(dummy_node)\"];\n     N23[label=\"expr \\\"unreachable\\\"\"];\n     N24[label=\"block { break ; \\\"unreachable\\\" }\"];\n-    N25[label=\"expr if y >= 1 { break ; \\\"unreachable\\\" }\"];\n-    N26[label=\"expr 1\"];\n+    N25[label=\"expr if y >= 1i { break ; \\\"unreachable\\\" }\"];\n+    N26[label=\"expr 1i\"];\n     N27[label=\"expr y\"];\n-    N28[label=\"expr y -= 1\"];\n-    N29[label=\"block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l    if y >= 1 { break ; \\\"unreachable\\\" }\\l    y -= 1;\\l}\\l\"];\n-    N30[label=\"expr 1\"];\n+    N28[label=\"expr y -= 1i\"];\n+    N29[label=\"block {\\l    if x == 1i { continue \\'outer ; \\\"unreachable\\\" }\\l    if y >= 1i { break ; \\\"unreachable\\\" }\\l    y -= 1i;\\l}\\l\"];\n+    N30[label=\"expr 1i\"];\n     N31[label=\"expr y\"];\n-    N32[label=\"expr y -= 1\"];\n-    N33[label=\"expr 1\"];\n+    N32[label=\"expr y -= 1i\"];\n+    N33[label=\"expr 1i\"];\n     N34[label=\"expr x\"];\n-    N35[label=\"expr x -= 1\"];\n-    N36[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l            if y >= 1 { break ; \\\"unreachable\\\" }\\l            y -= 1;\\l        }\\l    y -= 1;\\l    x -= 1;\\l}\\l\"];\n+    N35[label=\"expr x -= 1i\"];\n+    N36[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1i { continue \\'outer ; \\\"unreachable\\\" }\\l            if y >= 1i { break ; \\\"unreachable\\\" }\\l            y -= 1i;\\l        }\\l    y -= 1i;\\l    x -= 1i;\\l}\\l\"];\n     N37[label=\"expr \\\"unreachable\\\"\"];\n-    N38[label=\"block {\\l    let mut x = 16;\\l    let mut y = 16;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l                    if y >= 1 { break ; \\\"unreachable\\\" }\\l                    y -= 1;\\l                }\\l            y -= 1;\\l            x -= 1;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N38[label=\"block {\\l    let mut x = 16i;\\l    let mut y = 16i;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1i { continue \\'outer ; \\\"unreachable\\\" }\\l                    if y >= 1i { break ; \\\"unreachable\\\" }\\l                    y -= 1i;\\l                }\\l            y -= 1i;\\l            x -= 1i;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;\n@@ -48,7 +48,7 @@ digraph block {\n     N10 -> N11;\n     N11 -> N12;\n     N12 -> N13;\n-    N13 -> N6[label=\"exiting scope_0 expr continue \\'outer,\\lexiting scope_1 stmt continue \\'outer ;,\\lexiting scope_2 block { continue \\'outer ; \\\"unreachable\\\" },\\lexiting scope_3 expr if x == 1 { continue \\'outer ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if x == 1 { continue \\'outer ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l    if y >= 1 { break ; \\\"unreachable\\\" }\\l    y -= 1;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l        if y >= 1 { break ; \\\"unreachable\\\" }\\l        y -= 1;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l        if y >= 1 { break ; \\\"unreachable\\\" }\\l        y -= 1;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l            if y >= 1 { break ; \\\"unreachable\\\" }\\l            y -= 1;\\l        }\\l    y -= 1;\\l    x -= 1;\\l}\\l\"];\n+    N13 -> N6[label=\"exiting scope_0 expr continue \\'outer,\\lexiting scope_1 stmt continue \\'outer ;,\\lexiting scope_2 block { continue \\'outer ; \\\"unreachable\\\" },\\lexiting scope_3 expr if x == 1i { continue \\'outer ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if x == 1i { continue \\'outer ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1i { continue \\'outer ; \\\"unreachable\\\" }\\l    if y >= 1i { break ; \\\"unreachable\\\" }\\l    y -= 1i;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1i { continue \\'outer ; \\\"unreachable\\\" }\\l        if y >= 1i { break ; \\\"unreachable\\\" }\\l        y -= 1i;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1i { continue \\'outer ; \\\"unreachable\\\" }\\l        if y >= 1i { break ; \\\"unreachable\\\" }\\l        y -= 1i;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1i { continue \\'outer ; \\\"unreachable\\\" }\\l            if y >= 1i { break ; \\\"unreachable\\\" }\\l            y -= 1i;\\l        }\\l    y -= 1i;\\l    x -= 1i;\\l}\\l\"];\n     N14 -> N15;\n     N15 -> N16;\n     N12 -> N17;\n@@ -57,7 +57,7 @@ digraph block {\n     N18 -> N19;\n     N19 -> N20;\n     N20 -> N21;\n-    N21 -> N9[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\" },\\lexiting scope_3 expr if y >= 1 { break ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if y >= 1 { break ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\" }\\l    if y >= 1 { break ; \\\"unreachable\\\" }\\l    y -= 1;\\l}\\l\"];\n+    N21 -> N9[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\" },\\lexiting scope_3 expr if y >= 1i { break ; \\\"unreachable\\\" },\\lexiting scope_4 stmt if y >= 1i { break ; \\\"unreachable\\\" },\\lexiting scope_5 block {\\l    if x == 1i { continue \\'outer ; \\\"unreachable\\\" }\\l    if y >= 1i { break ; \\\"unreachable\\\" }\\l    y -= 1i;\\l}\\l\"];\n     N22 -> N23;\n     N23 -> N24;\n     N20 -> N25;"}, {"sha": "78de99d28fccecb1a8d88621dd6d42ca474a0107", "filename": "src/test/run-make/graphviz-flowgraph/f16.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff16.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,22 +10,22 @@\n \n #[allow(unreachable_code)]\n pub fn expr_continue_label_16() {\n-    let mut x = 16;\n-    let mut y = 16;\n+    let mut x = 16i;\n+    let mut y = 16i;\n     'outer: loop {\n         'inner: loop {\n-            if x == 1 {\n+            if x == 1i {\n                 continue 'outer;\n                 \"unreachable\"\n             }\n-            if y >= 1 {\n+            if y >= 1i {\n                 break;\n                 \"unreachable\"\n             }\n-            y -= 1;\n+            y -= 1i;\n         }\n-        y -= 1;\n-        x -= 1;\n+        y -= 1i;\n+        x -= 1i;\n     }\n     \"unreachable\";\n }"}, {"sha": "d3e098a71f2874be8657bfda9a68a960bd1f341a", "filename": "src/test/run-make/graphviz-flowgraph/f17.dot-expected.dot", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,12 +1,12 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 1\"];\n-    N3[label=\"expr 7\"];\n-    N4[label=\"expr 17\"];\n-    N5[label=\"expr [1, 7, 17]\"];\n+    N2[label=\"expr 1i\"];\n+    N3[label=\"expr 7i\"];\n+    N4[label=\"expr 17i\"];\n+    N5[label=\"expr [1i, 7i, 17i]\"];\n     N6[label=\"local _v\"];\n-    N7[label=\"block { let _v = [1, 7, 17]; }\"];\n+    N7[label=\"block { let _v = [1i, 7i, 17i]; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "23ce212c0af4855fc166604c4c73e7f492cbdde4", "filename": "src/test/run-make/graphviz-flowgraph/f17.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff17.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn expr_vec_17() {\n-    let _v = [1, 7, 17];\n+    let _v = [1i, 7i, 17i];\n }"}, {"sha": "716ec469fb0013c5c9df3d8b31ceb9069e3e3b84", "filename": "src/test/run-make/graphviz-flowgraph/f20.dot-expected.dot", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,15 +1,15 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 2\"];\n-    N3[label=\"expr 0\"];\n-    N4[label=\"expr 20\"];\n-    N5[label=\"expr [2, 0, 20]\"];\n+    N2[label=\"expr 2u\"];\n+    N3[label=\"expr 0u\"];\n+    N4[label=\"expr 20u\"];\n+    N5[label=\"expr [2u, 0u, 20u]\"];\n     N6[label=\"local v\"];\n     N7[label=\"expr v\"];\n-    N8[label=\"expr 20\"];\n-    N9[label=\"expr v[20]\"];\n-    N10[label=\"block { let v = [2, 0, 20]; v[20]; }\"];\n+    N8[label=\"expr 20u\"];\n+    N9[label=\"expr v[20u]\"];\n+    N10[label=\"block { let v = [2u, 0u, 20u]; v[20u]; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "7110ebe2b542978aed814ef097090e2b0927a906", "filename": "src/test/run-make/graphviz-flowgraph/f20.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn expr_index_20() {\n-    let v = [2, 0, 20];\n-    v[20];\n+    let v = [2u, 0u, 20u];\n+    v[20u];\n }"}, {"sha": "2bbc3e7e5c8f0088578d3da453d57a068fde414c", "filename": "src/test/run-make/graphviz-flowgraph/f21.dot-expected.dot", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,40 +1,40 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 15\"];\n+    N2[label=\"expr 15i\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"expr 151\"];\n+    N4[label=\"expr 151i\"];\n     N5[label=\"local mut y\"];\n     N6[label=\"(dummy_node)\"];\n-    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { return; \\\"unreachable\\\"; }\\l                y -= 3;\\l                x -= 5;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n+    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2i { return; \\\"unreachable\\\"; }\\l                y -= 3i;\\l                x -= 5i;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n     N8[label=\"(dummy_node)\"];\n-    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        y -= 3;\\l        x -= 5;\\l    }\\l\"];\n+    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2i { return; \\\"unreachable\\\"; }\\l        y -= 3i;\\l        x -= 5i;\\l    }\\l\"];\n     N10[label=\"expr x\"];\n-    N11[label=\"expr 1\"];\n-    N12[label=\"expr x == 1\"];\n+    N11[label=\"expr 1i\"];\n+    N12[label=\"expr x == 1i\"];\n     N13[label=\"expr break \\'outer\"];\n     N14[label=\"(dummy_node)\"];\n     N15[label=\"expr \\\"unreachable\\\"\"];\n     N16[label=\"block { break \\'outer ; \\\"unreachable\\\"; }\"];\n-    N17[label=\"expr if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\"];\n+    N17[label=\"expr if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\"];\n     N18[label=\"expr y\"];\n-    N19[label=\"expr 2\"];\n-    N20[label=\"expr y >= 2\"];\n+    N19[label=\"expr 2i\"];\n+    N20[label=\"expr y >= 2i\"];\n     N21[label=\"expr return\"];\n     N22[label=\"(dummy_node)\"];\n     N23[label=\"expr \\\"unreachable\\\"\"];\n     N24[label=\"block { return; \\\"unreachable\\\"; }\"];\n-    N25[label=\"expr if y >= 2 { return; \\\"unreachable\\\"; }\"];\n-    N26[label=\"expr 3\"];\n+    N25[label=\"expr if y >= 2i { return; \\\"unreachable\\\"; }\"];\n+    N26[label=\"expr 3i\"];\n     N27[label=\"expr y\"];\n-    N28[label=\"expr y -= 3\"];\n-    N29[label=\"expr 5\"];\n+    N28[label=\"expr y -= 3i\"];\n+    N29[label=\"expr 5i\"];\n     N30[label=\"expr x\"];\n-    N31[label=\"expr x -= 5\"];\n-    N32[label=\"block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2 { return; \\\"unreachable\\\"; }\\l    y -= 3;\\l    x -= 5;\\l}\\l\"];\n+    N31[label=\"expr x -= 5i\"];\n+    N32[label=\"block {\\l    if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2i { return; \\\"unreachable\\\"; }\\l    y -= 3i;\\l    x -= 5i;\\l}\\l\"];\n     N33[label=\"expr \\\"unreachable\\\"\"];\n-    N34[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2 { return; \\\"unreachable\\\"; }\\l            y -= 3;\\l            x -= 5;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n-    N35[label=\"block {\\l    let mut x = 15;\\l    let mut y = 151;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2 { return; \\\"unreachable\\\"; }\\l                    y -= 3;\\l                    x -= 5;\\l                }\\l            \\\"unreachable\\\";\\l        }\\l}\\l\"];\n+    N34[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2i { return; \\\"unreachable\\\"; }\\l            y -= 3i;\\l            x -= 5i;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N35[label=\"block {\\l    let mut x = 15i;\\l    let mut y = 151i;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2i { return; \\\"unreachable\\\"; }\\l                    y -= 3i;\\l                    x -= 5i;\\l                }\\l            \\\"unreachable\\\";\\l        }\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;\n@@ -45,7 +45,7 @@ digraph block {\n     N10 -> N11;\n     N11 -> N12;\n     N12 -> N13;\n-    N13 -> N7[label=\"exiting scope_0 expr break \\'outer,\\lexiting scope_1 stmt break \\'outer ;,\\lexiting scope_2 block { break \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 1 { break \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if x == 1 { break \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2 { return; \\\"unreachable\\\"; }\\l    y -= 3;\\l    x -= 5;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        y -= 3;\\l        x -= 5;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        y -= 3;\\l        x -= 5;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2 { return; \\\"unreachable\\\"; }\\l            y -= 3;\\l            x -= 5;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N13 -> N7[label=\"exiting scope_0 expr break \\'outer,\\lexiting scope_1 stmt break \\'outer ;,\\lexiting scope_2 block { break \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 1i { break \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if x == 1i { break \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2i { return; \\\"unreachable\\\"; }\\l    y -= 3i;\\l    x -= 5i;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2i { return; \\\"unreachable\\\"; }\\l        y -= 3i;\\l        x -= 5i;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2i { return; \\\"unreachable\\\"; }\\l        y -= 3i;\\l        x -= 5i;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2i { return; \\\"unreachable\\\"; }\\l            y -= 3i;\\l            x -= 5i;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n     N14 -> N15;\n     N15 -> N16;\n     N12 -> N17;\n@@ -54,7 +54,7 @@ digraph block {\n     N18 -> N19;\n     N19 -> N20;\n     N20 -> N21;\n-    N21 -> N1[label=\"exiting scope_0 expr \\'inner:\\l    loop  {\\l        if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        y -= 3;\\l        x -= 5;\\l    }\\l,\\lexiting scope_1 expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { break \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { return; \\\"unreachable\\\"; }\\l                y -= 3;\\l                x -= 5;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n+    N21 -> N1[label=\"exiting scope_0 expr \\'inner:\\l    loop  {\\l        if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2i { return; \\\"unreachable\\\"; }\\l        y -= 3i;\\l        x -= 5i;\\l    }\\l,\\lexiting scope_1 expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1i { break \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2i { return; \\\"unreachable\\\"; }\\l                y -= 3i;\\l                x -= 5i;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n     N22 -> N23;\n     N23 -> N24;\n     N20 -> N25;"}, {"sha": "bff2da2506107d74e5db8691b0c5eb33fa54030a", "filename": "src/test/run-make/graphviz-flowgraph/f21.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff21.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,20 +10,20 @@\n \n #[allow(unreachable_code)]\n pub fn expr_break_label_21() {\n-    let mut x = 15;\n-    let mut y = 151;\n+    let mut x = 15i;\n+    let mut y = 151i;\n     'outer: loop {\n         'inner: loop {\n-            if x == 1 {\n+            if x == 1i {\n                 break 'outer;\n                 \"unreachable\";\n             }\n-            if y >= 2 {\n+            if y >= 2i {\n                 return;\n                 \"unreachable\";\n             }\n-            y -= 3;\n-            x -= 5;\n+            y -= 3i;\n+            x -= 5i;\n         }\n         \"unreachable\";\n     }"}, {"sha": "8ecddba21fcc1180fc83c9f16b835005569e9382", "filename": "src/test/run-make/graphviz-flowgraph/f22.dot-expected.dot", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,41 +1,41 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 15\"];\n+    N2[label=\"expr 15i\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"expr 151\"];\n+    N4[label=\"expr 151i\"];\n     N5[label=\"local mut y\"];\n     N6[label=\"(dummy_node)\"];\n-    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { return; \\\"unreachable\\\"; }\\l                x -= 1;\\l                y -= 3;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n+    N7[label=\"expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2i { return; \\\"unreachable\\\"; }\\l                x -= 1i;\\l                y -= 3i;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n     N8[label=\"(dummy_node)\"];\n-    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        x -= 1;\\l        y -= 3;\\l    }\\l\"];\n+    N9[label=\"expr \\'inner:\\l    loop  {\\l        if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2i { return; \\\"unreachable\\\"; }\\l        x -= 1i;\\l        y -= 3i;\\l    }\\l\"];\n     N10[label=\"expr x\"];\n-    N11[label=\"expr 1\"];\n-    N12[label=\"expr x == 1\"];\n+    N11[label=\"expr 1i\"];\n+    N12[label=\"expr x == 1i\"];\n     N13[label=\"expr continue \\'outer\"];\n     N14[label=\"(dummy_node)\"];\n     N15[label=\"expr \\\"unreachable\\\"\"];\n     N16[label=\"block { continue \\'outer ; \\\"unreachable\\\"; }\"];\n-    N17[label=\"expr if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\"];\n+    N17[label=\"expr if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\"];\n     N18[label=\"expr y\"];\n-    N19[label=\"expr 2\"];\n-    N20[label=\"expr y >= 2\"];\n+    N19[label=\"expr 2i\"];\n+    N20[label=\"expr y >= 2i\"];\n     N21[label=\"expr return\"];\n     N22[label=\"(dummy_node)\"];\n     N23[label=\"expr \\\"unreachable\\\"\"];\n     N24[label=\"block { return; \\\"unreachable\\\"; }\"];\n-    N25[label=\"expr if y >= 2 { return; \\\"unreachable\\\"; }\"];\n-    N26[label=\"expr 1\"];\n+    N25[label=\"expr if y >= 2i { return; \\\"unreachable\\\"; }\"];\n+    N26[label=\"expr 1i\"];\n     N27[label=\"expr x\"];\n-    N28[label=\"expr x -= 1\"];\n-    N29[label=\"expr 3\"];\n+    N28[label=\"expr x -= 1i\"];\n+    N29[label=\"expr 3i\"];\n     N30[label=\"expr y\"];\n-    N31[label=\"expr y -= 3\"];\n-    N32[label=\"block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2 { return; \\\"unreachable\\\"; }\\l    x -= 1;\\l    y -= 3;\\l}\\l\"];\n+    N31[label=\"expr y -= 3i\"];\n+    N32[label=\"block {\\l    if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2i { return; \\\"unreachable\\\"; }\\l    x -= 1i;\\l    y -= 3i;\\l}\\l\"];\n     N33[label=\"expr \\\"unreachable\\\"\"];\n-    N34[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2 { return; \\\"unreachable\\\"; }\\l            x -= 1;\\l            y -= 3;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N34[label=\"block {\\l    \\'inner:\\l        loop  {\\l            if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2i { return; \\\"unreachable\\\"; }\\l            x -= 1i;\\l            y -= 3i;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n     N35[label=\"expr \\\"unreachable\\\"\"];\n-    N36[label=\"block {\\l    let mut x = 15;\\l    let mut y = 151;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2 { return; \\\"unreachable\\\"; }\\l                    x -= 1;\\l                    y -= 3;\\l                }\\l            \\\"unreachable\\\";\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N36[label=\"block {\\l    let mut x = 15i;\\l    let mut y = 151i;\\l    \\'outer:\\l        loop  {\\l            \\'inner:\\l                loop  {\\l                    if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\\l                    if y >= 2i { return; \\\"unreachable\\\"; }\\l                    x -= 1i;\\l                    y -= 3i;\\l                }\\l            \\\"unreachable\\\";\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;\n@@ -46,7 +46,7 @@ digraph block {\n     N10 -> N11;\n     N11 -> N12;\n     N12 -> N13;\n-    N13 -> N6[label=\"exiting scope_0 expr continue \\'outer,\\lexiting scope_1 stmt continue \\'outer ;,\\lexiting scope_2 block { continue \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 1 { continue \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if x == 1 { continue \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2 { return; \\\"unreachable\\\"; }\\l    x -= 1;\\l    y -= 3;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        x -= 1;\\l        y -= 3;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        x -= 1;\\l        y -= 3;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2 { return; \\\"unreachable\\\"; }\\l            x -= 1;\\l            y -= 3;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n+    N13 -> N6[label=\"exiting scope_0 expr continue \\'outer,\\lexiting scope_1 stmt continue \\'outer ;,\\lexiting scope_2 block { continue \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 1i { continue \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if x == 1i { continue \\'outer ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\\l    if y >= 2i { return; \\\"unreachable\\\"; }\\l    x -= 1i;\\l    y -= 3i;\\l}\\l,\\lexiting scope_6 expr \\'inner:\\l    loop  {\\l        if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2i { return; \\\"unreachable\\\"; }\\l        x -= 1i;\\l        y -= 3i;\\l    }\\l,\\lexiting scope_7 stmt \\'inner:\\l    loop  {\\l        if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2i { return; \\\"unreachable\\\"; }\\l        x -= 1i;\\l        y -= 3i;\\l    }\\l,\\lexiting scope_8 block {\\l    \\'inner:\\l        loop  {\\l            if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\\l            if y >= 2i { return; \\\"unreachable\\\"; }\\l            x -= 1i;\\l            y -= 3i;\\l        }\\l    \\\"unreachable\\\";\\l}\\l\"];\n     N14 -> N15;\n     N15 -> N16;\n     N12 -> N17;\n@@ -55,7 +55,7 @@ digraph block {\n     N18 -> N19;\n     N19 -> N20;\n     N20 -> N21;\n-    N21 -> N1[label=\"exiting scope_0 expr \\'inner:\\l    loop  {\\l        if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2 { return; \\\"unreachable\\\"; }\\l        x -= 1;\\l        y -= 3;\\l    }\\l,\\lexiting scope_1 expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1 { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2 { return; \\\"unreachable\\\"; }\\l                x -= 1;\\l                y -= 3;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n+    N21 -> N1[label=\"exiting scope_0 expr \\'inner:\\l    loop  {\\l        if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\\l        if y >= 2i { return; \\\"unreachable\\\"; }\\l        x -= 1i;\\l        y -= 3i;\\l    }\\l,\\lexiting scope_1 expr \\'outer:\\l    loop  {\\l        \\'inner:\\l            loop  {\\l                if x == 1i { continue \\'outer ; \\\"unreachable\\\"; }\\l                if y >= 2i { return; \\\"unreachable\\\"; }\\l                x -= 1i;\\l                y -= 3i;\\l            }\\l        \\\"unreachable\\\";\\l    }\\l\"];\n     N22 -> N23;\n     N23 -> N24;\n     N20 -> N25;"}, {"sha": "a6e3d571debabf7b54e43800daecdf5cba8cf181", "filename": "src/test/run-make/graphviz-flowgraph/f22.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff22.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,20 +10,20 @@\n \n #[allow(unreachable_code)]\n pub fn expr_break_label_21() {\n-    let mut x = 15;\n-    let mut y = 151;\n+    let mut x = 15i;\n+    let mut y = 151i;\n     'outer: loop {\n         'inner: loop {\n-            if x == 1 {\n+            if x == 1i {\n                 continue 'outer;\n                 \"unreachable\";\n             }\n-            if y >= 2 {\n+            if y >= 2i {\n                 return;\n                 \"unreachable\";\n             }\n-            x -= 1;\n-            y -= 3;\n+            x -= 1i;\n+            y -= 3i;\n         }\n         \"unreachable\";\n     }"}, {"sha": "718d4687ef99087ad0f10af1e89c71e40dc25c48", "filename": "src/test/run-make/graphviz-flowgraph/f23.dot-expected.dot", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,48 +1,48 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 23\"];\n+    N2[label=\"expr 23i\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"expr 23\"];\n+    N4[label=\"expr 23i\"];\n     N5[label=\"local mut y\"];\n-    N6[label=\"expr 23\"];\n+    N6[label=\"expr 23i\"];\n     N7[label=\"local mut z\"];\n     N8[label=\"(dummy_node)\"];\n     N9[label=\"expr x\"];\n-    N10[label=\"expr 0\"];\n-    N11[label=\"expr x > 0\"];\n-    N12[label=\"expr while x > 0 {\\l    x -= 1;\\l    while y > 0 {\\l        y -= 1;\\l        while z > 0 { z -= 1; }\\l        if x > 10 { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n-    N13[label=\"expr 1\"];\n+    N10[label=\"expr 0i\"];\n+    N11[label=\"expr x > 0i\"];\n+    N12[label=\"expr while x > 0i {\\l    x -= 1i;\\l    while y > 0i {\\l        y -= 1i;\\l        while z > 0i { z -= 1i; }\\l        if x > 10i { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n+    N13[label=\"expr 1i\"];\n     N14[label=\"expr x\"];\n-    N15[label=\"expr x -= 1\"];\n+    N15[label=\"expr x -= 1i\"];\n     N16[label=\"(dummy_node)\"];\n     N17[label=\"expr y\"];\n-    N18[label=\"expr 0\"];\n-    N19[label=\"expr y > 0\"];\n-    N20[label=\"expr while y > 0 {\\l    y -= 1;\\l    while z > 0 { z -= 1; }\\l    if x > 10 { return; \\\"unreachable\\\"; }\\l}\\l\"];\n-    N21[label=\"expr 1\"];\n+    N18[label=\"expr 0i\"];\n+    N19[label=\"expr y > 0i\"];\n+    N20[label=\"expr while y > 0i {\\l    y -= 1i;\\l    while z > 0i { z -= 1i; }\\l    if x > 10i { return; \\\"unreachable\\\"; }\\l}\\l\"];\n+    N21[label=\"expr 1i\"];\n     N22[label=\"expr y\"];\n-    N23[label=\"expr y -= 1\"];\n+    N23[label=\"expr y -= 1i\"];\n     N24[label=\"(dummy_node)\"];\n     N25[label=\"expr z\"];\n-    N26[label=\"expr 0\"];\n-    N27[label=\"expr z > 0\"];\n-    N28[label=\"expr while z > 0 { z -= 1; }\"];\n-    N29[label=\"expr 1\"];\n+    N26[label=\"expr 0i\"];\n+    N27[label=\"expr z > 0i\"];\n+    N28[label=\"expr while z > 0i { z -= 1i; }\"];\n+    N29[label=\"expr 1i\"];\n     N30[label=\"expr z\"];\n-    N31[label=\"expr z -= 1\"];\n-    N32[label=\"block { z -= 1; }\"];\n+    N31[label=\"expr z -= 1i\"];\n+    N32[label=\"block { z -= 1i; }\"];\n     N33[label=\"expr x\"];\n-    N34[label=\"expr 10\"];\n-    N35[label=\"expr x > 10\"];\n+    N34[label=\"expr 10i\"];\n+    N35[label=\"expr x > 10i\"];\n     N36[label=\"expr return\"];\n     N37[label=\"(dummy_node)\"];\n     N38[label=\"expr \\\"unreachable\\\"\"];\n     N39[label=\"block { return; \\\"unreachable\\\"; }\"];\n-    N40[label=\"expr if x > 10 { return; \\\"unreachable\\\"; }\"];\n-    N41[label=\"block { y -= 1; while z > 0 { z -= 1; } if x > 10 { return; \\\"unreachable\\\"; } }\"];\n-    N42[label=\"block {\\l    x -= 1;\\l    while y > 0 {\\l        y -= 1;\\l        while z > 0 { z -= 1; }\\l        if x > 10 { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n-    N43[label=\"block {\\l    let mut x = 23;\\l    let mut y = 23;\\l    let mut z = 23;\\l    while x > 0 {\\l        x -= 1;\\l        while y > 0 {\\l            y -= 1;\\l            while z > 0 { z -= 1; }\\l            if x > 10 { return; \\\"unreachable\\\"; }\\l        }\\l    }\\l}\\l\"];\n+    N40[label=\"expr if x > 10i { return; \\\"unreachable\\\"; }\"];\n+    N41[label=\"block { y -= 1i; while z > 0i { z -= 1i; } if x > 10i { return; \\\"unreachable\\\"; } }\"];\n+    N42[label=\"block {\\l    x -= 1i;\\l    while y > 0i {\\l        y -= 1i;\\l        while z > 0i { z -= 1i; }\\l        if x > 10i { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n+    N43[label=\"block {\\l    let mut x = 23i;\\l    let mut y = 23i;\\l    let mut z = 23i;\\l    while x > 0i {\\l        x -= 1i;\\l        while y > 0i {\\l            y -= 1i;\\l            while z > 0i { z -= 1i; }\\l            if x > 10i { return; \\\"unreachable\\\"; }\\l        }\\l    }\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;\n@@ -79,7 +79,7 @@ digraph block {\n     N33 -> N34;\n     N34 -> N35;\n     N35 -> N36;\n-    N36 -> N1[label=\"exiting scope_0 expr while y > 0 {\\l    y -= 1;\\l    while z > 0 { z -= 1; }\\l    if x > 10 { return; \\\"unreachable\\\"; }\\l}\\l,\\lexiting scope_1 expr while x > 0 {\\l    x -= 1;\\l    while y > 0 {\\l        y -= 1;\\l        while z > 0 { z -= 1; }\\l        if x > 10 { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n+    N36 -> N1[label=\"exiting scope_0 expr while y > 0i {\\l    y -= 1i;\\l    while z > 0i { z -= 1i; }\\l    if x > 10i { return; \\\"unreachable\\\"; }\\l}\\l,\\lexiting scope_1 expr while x > 0i {\\l    x -= 1i;\\l    while y > 0i {\\l        y -= 1i;\\l        while z > 0i { z -= 1i; }\\l        if x > 10i { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n     N37 -> N38;\n     N38 -> N39;\n     N35 -> N40;"}, {"sha": "73bcc288ca7a265b099260477f95a5b321bf9194", "filename": "src/test/run-make/graphviz-flowgraph/f23.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff23.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,19 +10,19 @@\n \n #[allow(unreachable_code)]\n pub fn expr_while_23() {\n-    let mut x = 23;\n-    let mut y = 23;\n-    let mut z = 23;\n+    let mut x = 23i;\n+    let mut y = 23i;\n+    let mut z = 23i;\n \n-    while x > 0 {\n-        x -= 1;\n+    while x > 0i {\n+        x -= 1i;\n \n-        while y > 0 {\n-            y -= 1;\n+        while y > 0i {\n+            y -= 1i;\n \n-            while z > 0 { z -= 1; }\n+            while z > 0i { z -= 1i; }\n \n-            if x > 10 {\n+            if x > 10i {\n                 return;\n                 \"unreachable\";\n             }"}, {"sha": "646d98a54a7860bc4b38233ecd98749688cc2d1e", "filename": "src/test/run-make/graphviz-flowgraph/f24.dot-expected.dot", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,63 +1,63 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 24\"];\n+    N2[label=\"expr 24i\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"expr 24\"];\n+    N4[label=\"expr 24i\"];\n     N5[label=\"local mut y\"];\n-    N6[label=\"expr 24\"];\n+    N6[label=\"expr 24i\"];\n     N7[label=\"local mut z\"];\n     N8[label=\"(dummy_node)\"];\n-    N9[label=\"expr loop  {\\l    if x == 0 { break ; \\\"unreachable\\\"; }\\l    x -= 1;\\l    loop  {\\l        if y == 0 { break ; \\\"unreachable\\\"; }\\l        y -= 1;\\l        loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l        if x > 10 { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n+    N9[label=\"expr loop  {\\l    if x == 0i { break ; \\\"unreachable\\\"; }\\l    x -= 1i;\\l    loop  {\\l        if y == 0i { break ; \\\"unreachable\\\"; }\\l        y -= 1i;\\l        loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l        if x > 10i { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n     N10[label=\"expr x\"];\n-    N11[label=\"expr 0\"];\n-    N12[label=\"expr x == 0\"];\n+    N11[label=\"expr 0i\"];\n+    N12[label=\"expr x == 0i\"];\n     N13[label=\"expr break\"];\n     N14[label=\"(dummy_node)\"];\n     N15[label=\"expr \\\"unreachable\\\"\"];\n     N16[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N17[label=\"expr if x == 0 { break ; \\\"unreachable\\\"; }\"];\n-    N18[label=\"expr 1\"];\n+    N17[label=\"expr if x == 0i { break ; \\\"unreachable\\\"; }\"];\n+    N18[label=\"expr 1i\"];\n     N19[label=\"expr x\"];\n-    N20[label=\"expr x -= 1\"];\n+    N20[label=\"expr x -= 1i\"];\n     N21[label=\"(dummy_node)\"];\n-    N22[label=\"expr loop  {\\l    if y == 0 { break ; \\\"unreachable\\\"; }\\l    y -= 1;\\l    loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l    if x > 10 { return; \\\"unreachable\\\"; }\\l}\\l\"];\n+    N22[label=\"expr loop  {\\l    if y == 0i { break ; \\\"unreachable\\\"; }\\l    y -= 1i;\\l    loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l    if x > 10i { return; \\\"unreachable\\\"; }\\l}\\l\"];\n     N23[label=\"expr y\"];\n-    N24[label=\"expr 0\"];\n-    N25[label=\"expr y == 0\"];\n+    N24[label=\"expr 0i\"];\n+    N25[label=\"expr y == 0i\"];\n     N26[label=\"expr break\"];\n     N27[label=\"(dummy_node)\"];\n     N28[label=\"expr \\\"unreachable\\\"\"];\n     N29[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N30[label=\"expr if y == 0 { break ; \\\"unreachable\\\"; }\"];\n-    N31[label=\"expr 1\"];\n+    N30[label=\"expr if y == 0i { break ; \\\"unreachable\\\"; }\"];\n+    N31[label=\"expr 1i\"];\n     N32[label=\"expr y\"];\n-    N33[label=\"expr y -= 1\"];\n+    N33[label=\"expr y -= 1i\"];\n     N34[label=\"(dummy_node)\"];\n-    N35[label=\"expr loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n+    N35[label=\"expr loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\"];\n     N36[label=\"expr z\"];\n-    N37[label=\"expr 0\"];\n-    N38[label=\"expr z == 0\"];\n+    N37[label=\"expr 0i\"];\n+    N38[label=\"expr z == 0i\"];\n     N39[label=\"expr break\"];\n     N40[label=\"(dummy_node)\"];\n     N41[label=\"expr \\\"unreachable\\\"\"];\n     N42[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N43[label=\"expr if z == 0 { break ; \\\"unreachable\\\"; }\"];\n-    N44[label=\"expr 1\"];\n+    N43[label=\"expr if z == 0i { break ; \\\"unreachable\\\"; }\"];\n+    N44[label=\"expr 1i\"];\n     N45[label=\"expr z\"];\n-    N46[label=\"expr z -= 1\"];\n-    N47[label=\"block { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n+    N46[label=\"expr z -= 1i\"];\n+    N47[label=\"block { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\"];\n     N48[label=\"expr x\"];\n-    N49[label=\"expr 10\"];\n-    N50[label=\"expr x > 10\"];\n+    N49[label=\"expr 10i\"];\n+    N50[label=\"expr x > 10i\"];\n     N51[label=\"expr return\"];\n     N52[label=\"(dummy_node)\"];\n     N53[label=\"expr \\\"unreachable\\\"\"];\n     N54[label=\"block { return; \\\"unreachable\\\"; }\"];\n-    N55[label=\"expr if x > 10 { return; \\\"unreachable\\\"; }\"];\n-    N56[label=\"block {\\l    if y == 0 { break ; \\\"unreachable\\\"; }\\l    y -= 1;\\l    loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l    if x > 10 { return; \\\"unreachable\\\"; }\\l}\\l\"];\n-    N57[label=\"block {\\l    if x == 0 { break ; \\\"unreachable\\\"; }\\l    x -= 1;\\l    loop  {\\l        if y == 0 { break ; \\\"unreachable\\\"; }\\l        y -= 1;\\l        loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l        if x > 10 { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n-    N58[label=\"block {\\l    let mut x = 24;\\l    let mut y = 24;\\l    let mut z = 24;\\l    loop  {\\l        if x == 0 { break ; \\\"unreachable\\\"; }\\l        x -= 1;\\l        loop  {\\l            if y == 0 { break ; \\\"unreachable\\\"; }\\l            y -= 1;\\l            loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l            if x > 10 { return; \\\"unreachable\\\"; }\\l        }\\l    }\\l}\\l\"];\n+    N55[label=\"expr if x > 10i { return; \\\"unreachable\\\"; }\"];\n+    N56[label=\"block {\\l    if y == 0i { break ; \\\"unreachable\\\"; }\\l    y -= 1i;\\l    loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l    if x > 10i { return; \\\"unreachable\\\"; }\\l}\\l\"];\n+    N57[label=\"block {\\l    if x == 0i { break ; \\\"unreachable\\\"; }\\l    x -= 1i;\\l    loop  {\\l        if y == 0i { break ; \\\"unreachable\\\"; }\\l        y -= 1i;\\l        loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l        if x > 10i { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n+    N58[label=\"block {\\l    let mut x = 24i;\\l    let mut y = 24i;\\l    let mut z = 24i;\\l    loop  {\\l        if x == 0i { break ; \\\"unreachable\\\"; }\\l        x -= 1i;\\l        loop  {\\l            if y == 0i { break ; \\\"unreachable\\\"; }\\l            y -= 1i;\\l            loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l            if x > 10i { return; \\\"unreachable\\\"; }\\l        }\\l    }\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;\n@@ -69,7 +69,7 @@ digraph block {\n     N10 -> N11;\n     N11 -> N12;\n     N12 -> N13;\n-    N13 -> N9[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if x == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if x == 0 { break ; \\\"unreachable\\\"; }\\l    x -= 1;\\l    loop  {\\l        if y == 0 { break ; \\\"unreachable\\\"; }\\l        y -= 1;\\l        loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l        if x > 10 { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n+    N13 -> N9[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if x == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if x == 0i { break ; \\\"unreachable\\\"; }\\l    x -= 1i;\\l    loop  {\\l        if y == 0i { break ; \\\"unreachable\\\"; }\\l        y -= 1i;\\l        loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l        if x > 10i { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n     N14 -> N15;\n     N15 -> N16;\n     N12 -> N17;\n@@ -82,7 +82,7 @@ digraph block {\n     N23 -> N24;\n     N24 -> N25;\n     N25 -> N26;\n-    N26 -> N22[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if y == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if y == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if y == 0 { break ; \\\"unreachable\\\"; }\\l    y -= 1;\\l    loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l    if x > 10 { return; \\\"unreachable\\\"; }\\l}\\l\"];\n+    N26 -> N22[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if y == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if y == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if y == 0i { break ; \\\"unreachable\\\"; }\\l    y -= 1i;\\l    loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l    if x > 10i { return; \\\"unreachable\\\"; }\\l}\\l\"];\n     N27 -> N28;\n     N28 -> N29;\n     N25 -> N30;\n@@ -95,7 +95,7 @@ digraph block {\n     N36 -> N37;\n     N37 -> N38;\n     N38 -> N39;\n-    N39 -> N35[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if z == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if z == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n+    N39 -> N35[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if z == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if z == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\"];\n     N40 -> N41;\n     N41 -> N42;\n     N38 -> N43;\n@@ -109,7 +109,7 @@ digraph block {\n     N48 -> N49;\n     N49 -> N50;\n     N50 -> N51;\n-    N51 -> N1[label=\"exiting scope_0 expr loop  {\\l    if y == 0 { break ; \\\"unreachable\\\"; }\\l    y -= 1;\\l    loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l    if x > 10 { return; \\\"unreachable\\\"; }\\l}\\l,\\lexiting scope_1 expr loop  {\\l    if x == 0 { break ; \\\"unreachable\\\"; }\\l    x -= 1;\\l    loop  {\\l        if y == 0 { break ; \\\"unreachable\\\"; }\\l        y -= 1;\\l        loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l        if x > 10 { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n+    N51 -> N1[label=\"exiting scope_0 expr loop  {\\l    if y == 0i { break ; \\\"unreachable\\\"; }\\l    y -= 1i;\\l    loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l    if x > 10i { return; \\\"unreachable\\\"; }\\l}\\l,\\lexiting scope_1 expr loop  {\\l    if x == 0i { break ; \\\"unreachable\\\"; }\\l    x -= 1i;\\l    loop  {\\l        if y == 0i { break ; \\\"unreachable\\\"; }\\l        y -= 1i;\\l        loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l        if x > 10i { return; \\\"unreachable\\\"; }\\l    }\\l}\\l\"];\n     N52 -> N53;\n     N53 -> N54;\n     N50 -> N55;"}, {"sha": "afba1d202c927b5a407c2f0ee1916302ecc01d70", "filename": "src/test/run-make/graphviz-flowgraph/f24.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff24.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,24 +10,24 @@\n \n #[allow(unreachable_code)]\n pub fn expr_while_24() {\n-    let mut x = 24;\n-    let mut y = 24;\n-    let mut z = 24;\n+    let mut x = 24i;\n+    let mut y = 24i;\n+    let mut z = 24i;\n \n     loop {\n-        if x == 0 { break; \"unreachable\"; }\n-        x -= 1;\n+        if x == 0i { break; \"unreachable\"; }\n+        x -= 1i;\n \n         loop {\n-            if y == 0 { break; \"unreachable\"; }\n-            y -= 1;\n+            if y == 0i { break; \"unreachable\"; }\n+            y -= 1i;\n \n             loop {\n-                if z == 0 { break; \"unreachable\"; }\n-                z -= 1;\n+                if z == 0i { break; \"unreachable\"; }\n+                z -= 1i;\n             }\n \n-            if x > 10 {\n+            if x > 10i {\n                 return;\n                 \"unreachable\";\n             }"}, {"sha": "11b9c7ef05ecbf5bfbc05d6ce218c43157e42662", "filename": "src/test/run-make/graphviz-flowgraph/f25.dot-expected.dot", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.dot-expected.dot?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -1,63 +1,63 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 25\"];\n+    N2[label=\"expr 25i\"];\n     N3[label=\"local mut x\"];\n-    N4[label=\"expr 25\"];\n+    N4[label=\"expr 25i\"];\n     N5[label=\"local mut y\"];\n-    N6[label=\"expr 25\"];\n+    N6[label=\"expr 25i\"];\n     N7[label=\"local mut z\"];\n     N8[label=\"(dummy_node)\"];\n-    N9[label=\"expr \\'a:\\l    loop  {\\l        if x == 0 { break ; \\\"unreachable\\\"; }\\l        x -= 1;\\l        \\'a:\\l            loop  {\\l                if y == 0 { break ; \\\"unreachable\\\"; }\\l                y -= 1;\\l                \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l                if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l            }\\l    }\\l\"];\n+    N9[label=\"expr \\'a:\\l    loop  {\\l        if x == 0i { break ; \\\"unreachable\\\"; }\\l        x -= 1i;\\l        \\'a:\\l            loop  {\\l                if y == 0i { break ; \\\"unreachable\\\"; }\\l                y -= 1i;\\l                \\'a: loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l                if x > 10i { continue \\'a ; \\\"unreachable\\\"; }\\l            }\\l    }\\l\"];\n     N10[label=\"expr x\"];\n-    N11[label=\"expr 0\"];\n-    N12[label=\"expr x == 0\"];\n+    N11[label=\"expr 0i\"];\n+    N12[label=\"expr x == 0i\"];\n     N13[label=\"expr break\"];\n     N14[label=\"(dummy_node)\"];\n     N15[label=\"expr \\\"unreachable\\\"\"];\n     N16[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N17[label=\"expr if x == 0 { break ; \\\"unreachable\\\"; }\"];\n-    N18[label=\"expr 1\"];\n+    N17[label=\"expr if x == 0i { break ; \\\"unreachable\\\"; }\"];\n+    N18[label=\"expr 1i\"];\n     N19[label=\"expr x\"];\n-    N20[label=\"expr x -= 1\"];\n+    N20[label=\"expr x -= 1i\"];\n     N21[label=\"(dummy_node)\"];\n-    N22[label=\"expr \\'a:\\l    loop  {\\l        if y == 0 { break ; \\\"unreachable\\\"; }\\l        y -= 1;\\l        \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l        if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l    }\\l\"];\n+    N22[label=\"expr \\'a:\\l    loop  {\\l        if y == 0i { break ; \\\"unreachable\\\"; }\\l        y -= 1i;\\l        \\'a: loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l        if x > 10i { continue \\'a ; \\\"unreachable\\\"; }\\l    }\\l\"];\n     N23[label=\"expr y\"];\n-    N24[label=\"expr 0\"];\n-    N25[label=\"expr y == 0\"];\n+    N24[label=\"expr 0i\"];\n+    N25[label=\"expr y == 0i\"];\n     N26[label=\"expr break\"];\n     N27[label=\"(dummy_node)\"];\n     N28[label=\"expr \\\"unreachable\\\"\"];\n     N29[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N30[label=\"expr if y == 0 { break ; \\\"unreachable\\\"; }\"];\n-    N31[label=\"expr 1\"];\n+    N30[label=\"expr if y == 0i { break ; \\\"unreachable\\\"; }\"];\n+    N31[label=\"expr 1i\"];\n     N32[label=\"expr y\"];\n-    N33[label=\"expr y -= 1\"];\n+    N33[label=\"expr y -= 1i\"];\n     N34[label=\"(dummy_node)\"];\n-    N35[label=\"expr \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n+    N35[label=\"expr \\'a: loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\"];\n     N36[label=\"expr z\"];\n-    N37[label=\"expr 0\"];\n-    N38[label=\"expr z == 0\"];\n+    N37[label=\"expr 0i\"];\n+    N38[label=\"expr z == 0i\"];\n     N39[label=\"expr break\"];\n     N40[label=\"(dummy_node)\"];\n     N41[label=\"expr \\\"unreachable\\\"\"];\n     N42[label=\"block { break ; \\\"unreachable\\\"; }\"];\n-    N43[label=\"expr if z == 0 { break ; \\\"unreachable\\\"; }\"];\n-    N44[label=\"expr 1\"];\n+    N43[label=\"expr if z == 0i { break ; \\\"unreachable\\\"; }\"];\n+    N44[label=\"expr 1i\"];\n     N45[label=\"expr z\"];\n-    N46[label=\"expr z -= 1\"];\n-    N47[label=\"block { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n+    N46[label=\"expr z -= 1i\"];\n+    N47[label=\"block { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\"];\n     N48[label=\"expr x\"];\n-    N49[label=\"expr 10\"];\n-    N50[label=\"expr x > 10\"];\n+    N49[label=\"expr 10i\"];\n+    N50[label=\"expr x > 10i\"];\n     N51[label=\"expr continue \\'a\"];\n     N52[label=\"(dummy_node)\"];\n     N53[label=\"expr \\\"unreachable\\\"\"];\n     N54[label=\"block { continue \\'a ; \\\"unreachable\\\"; }\"];\n-    N55[label=\"expr if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\"];\n-    N56[label=\"block {\\l    if y == 0 { break ; \\\"unreachable\\\"; }\\l    y -= 1;\\l    \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l    if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l}\\l\"];\n-    N57[label=\"block {\\l    if x == 0 { break ; \\\"unreachable\\\"; }\\l    x -= 1;\\l    \\'a:\\l        loop  {\\l            if y == 0 { break ; \\\"unreachable\\\"; }\\l            y -= 1;\\l            \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l            if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l        }\\l}\\l\"];\n-    N58[label=\"block {\\l    let mut x = 25;\\l    let mut y = 25;\\l    let mut z = 25;\\l    \\'a:\\l        loop  {\\l            if x == 0 { break ; \\\"unreachable\\\"; }\\l            x -= 1;\\l            \\'a:\\l                loop  {\\l                    if y == 0 { break ; \\\"unreachable\\\"; }\\l                    y -= 1;\\l                    \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l                    if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l                }\\l        }\\l}\\l\"];\n+    N55[label=\"expr if x > 10i { continue \\'a ; \\\"unreachable\\\"; }\"];\n+    N56[label=\"block {\\l    if y == 0i { break ; \\\"unreachable\\\"; }\\l    y -= 1i;\\l    \\'a: loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l    if x > 10i { continue \\'a ; \\\"unreachable\\\"; }\\l}\\l\"];\n+    N57[label=\"block {\\l    if x == 0i { break ; \\\"unreachable\\\"; }\\l    x -= 1i;\\l    \\'a:\\l        loop  {\\l            if y == 0i { break ; \\\"unreachable\\\"; }\\l            y -= 1i;\\l            \\'a: loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l            if x > 10i { continue \\'a ; \\\"unreachable\\\"; }\\l        }\\l}\\l\"];\n+    N58[label=\"block {\\l    let mut x = 25i;\\l    let mut y = 25i;\\l    let mut z = 25i;\\l    \\'a:\\l        loop  {\\l            if x == 0i { break ; \\\"unreachable\\\"; }\\l            x -= 1i;\\l            \\'a:\\l                loop  {\\l                    if y == 0i { break ; \\\"unreachable\\\"; }\\l                    y -= 1i;\\l                    \\'a:\\l                        loop  {\\l                            if z == 0i { break ; \\\"unreachable\\\"; }\\l                            z -= 1i;\\l                        }\\l                    if x > 10i { continue \\'a ; \\\"unreachable\\\"; }\\l                }\\l        }\\l}\\l\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;\n@@ -69,7 +69,7 @@ digraph block {\n     N10 -> N11;\n     N11 -> N12;\n     N12 -> N13;\n-    N13 -> N9[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if x == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if x == 0 { break ; \\\"unreachable\\\"; }\\l    x -= 1;\\l    \\'a:\\l        loop  {\\l            if y == 0 { break ; \\\"unreachable\\\"; }\\l            y -= 1;\\l            \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l            if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l        }\\l}\\l\"];\n+    N13 -> N9[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if x == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if x == 0i { break ; \\\"unreachable\\\"; }\\l    x -= 1i;\\l    \\'a:\\l        loop  {\\l            if y == 0i { break ; \\\"unreachable\\\"; }\\l            y -= 1i;\\l            \\'a: loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l            if x > 10i { continue \\'a ; \\\"unreachable\\\"; }\\l        }\\l}\\l\"];\n     N14 -> N15;\n     N15 -> N16;\n     N12 -> N17;\n@@ -82,7 +82,7 @@ digraph block {\n     N23 -> N24;\n     N24 -> N25;\n     N25 -> N26;\n-    N26 -> N22[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if y == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if y == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if y == 0 { break ; \\\"unreachable\\\"; }\\l    y -= 1;\\l    \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l    if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l}\\l\"];\n+    N26 -> N22[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if y == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if y == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block {\\l    if y == 0i { break ; \\\"unreachable\\\"; }\\l    y -= 1i;\\l    \\'a: loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l    if x > 10i { continue \\'a ; \\\"unreachable\\\"; }\\l}\\l\"];\n     N27 -> N28;\n     N28 -> N29;\n     N25 -> N30;\n@@ -95,7 +95,7 @@ digraph block {\n     N36 -> N37;\n     N37 -> N38;\n     N38 -> N39;\n-    N39 -> N35[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if z == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if z == 0 { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\"];\n+    N39 -> N35[label=\"exiting scope_0 expr break,\\lexiting scope_1 stmt break ;,\\lexiting scope_2 block { break ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if z == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_4 stmt if z == 0i { break ; \\\"unreachable\\\"; },\\lexiting scope_5 block { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\"];\n     N40 -> N41;\n     N41 -> N42;\n     N38 -> N43;\n@@ -109,7 +109,7 @@ digraph block {\n     N48 -> N49;\n     N49 -> N50;\n     N50 -> N51;\n-    N51 -> N21[label=\"exiting scope_0 expr continue \\'a,\\lexiting scope_1 stmt continue \\'a ;,\\lexiting scope_2 block { continue \\'a ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x > 10 { continue \\'a ; \\\"unreachable\\\"; },\\lexiting scope_4 block {\\l    if y == 0 { break ; \\\"unreachable\\\"; }\\l    y -= 1;\\l    \\'a: loop  { if z == 0 { break ; \\\"unreachable\\\"; } z -= 1; }\\l    if x > 10 { continue \\'a ; \\\"unreachable\\\"; }\\l}\\l\"];\n+    N51 -> N21[label=\"exiting scope_0 expr continue \\'a,\\lexiting scope_1 stmt continue \\'a ;,\\lexiting scope_2 block { continue \\'a ; \\\"unreachable\\\"; },\\lexiting scope_3 expr if x > 10i { continue \\'a ; \\\"unreachable\\\"; },\\lexiting scope_4 block {\\l    if y == 0i { break ; \\\"unreachable\\\"; }\\l    y -= 1i;\\l    \\'a: loop  { if z == 0i { break ; \\\"unreachable\\\"; } z -= 1i; }\\l    if x > 10i { continue \\'a ; \\\"unreachable\\\"; }\\l}\\l\"];\n     N52 -> N53;\n     N53 -> N54;\n     N50 -> N55;"}, {"sha": "933f95f228cd907f6c2c3f4d9f67a620fba2c313", "filename": "src/test/run-make/graphviz-flowgraph/f25.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff25.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,24 +10,24 @@\n \n #[allow(unreachable_code)]\n pub fn expr_while_25() {\n-    let mut x = 25;\n-    let mut y = 25;\n-    let mut z = 25;\n+    let mut x = 25i;\n+    let mut y = 25i;\n+    let mut z = 25i;\n \n     'a: loop {\n-        if x == 0 { break; \"unreachable\"; }\n-        x -= 1;\n+        if x == 0i { break; \"unreachable\"; }\n+        x -= 1i;\n \n         'a: loop {\n-            if y == 0 { break; \"unreachable\"; }\n-            y -= 1;\n+            if y == 0i { break; \"unreachable\"; }\n+            y -= 1i;\n \n             'a: loop {\n-                if z == 0 { break; \"unreachable\"; }\n-                z -= 1;\n+                if z == 0i { break; \"unreachable\"; }\n+                z -= 1i;\n             }\n \n-            if x > 10 {\n+            if x > 10i {\n                 continue 'a;\n                 \"unreachable\";\n             }"}, {"sha": "9fe78cc2553e742ac3263245433bed9fedede75d", "filename": "src/test/run-make/static-unwinding/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -25,7 +25,7 @@ fn main() {\n     task::try(proc() {\n         let _a = A;\n         lib::callback(|| fail!());\n-        1\n+        1i\n     });\n \n     unsafe {"}, {"sha": "5167764dd2860c153f7352f480e0997c67300524", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,6 +16,6 @@ struct Triple { x: int, y: int, z: int }\n fn f<T,U>(x: T, y: U) -> Pair<T, U> { return Pair {a: x, b: y}; }\n \n pub fn main() {\n-    println!(\"{:?}\", f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n+    println!(\"{:?}\", f(Triple {x: 3, y: 4, z: 5}, 4i).a.x);\n     println!(\"{:?}\", f(5i, 6i).a);\n }"}, {"sha": "1c156f6551c8d2264a07241aac146d5ad7c7c164", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -21,6 +21,6 @@ impl <T: Send> Foo for T { }\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    1193182.foo(tx);\n-    assert!(rx.recv() == 1193182);\n+    1193182i.foo(tx);\n+    assert!(rx.recv() == 1193182i);\n }"}, {"sha": "d94547a4ddac64aa785fff0939fdf8f74fb2d054", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -36,7 +36,7 @@ pub fn main() {\n   let mut kitty = cat(1000u, 2, vec!(\"tabby\".to_string()));\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n-  nyan.speak(vec!(1,2,3));\n+  nyan.speak(vec!(1i,2,3));\n   assert_eq!(nyan.meow_count(), 55u);\n   kitty.speak(vec!(\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()));\n   assert_eq!(kitty.meow_count(), 1004u);"}, {"sha": "35c69705925651f4aba1646f90cc3cfd30eec90a", "filename": "src/test/run-pass/cleanup-rvalue-scopes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -110,7 +110,7 @@ pub fn main() {\n     end_of_block!(ref _x, AddFlags(1));\n     end_of_block!(AddFlags { bits: ref _x }, AddFlags(1));\n     end_of_block!(&AddFlags { bits }, &AddFlags(1));\n-    end_of_block!((_, ref _y), (AddFlags(1), 22));\n+    end_of_block!((_, ref _y), (AddFlags(1), 22i));\n     end_of_block!(box ref _x, box AddFlags(1));\n     end_of_block!(box _x, box AddFlags(1));\n     end_of_block!(_, { { check_flags(0); &AddFlags(1) } });\n@@ -120,7 +120,7 @@ pub fn main() {\n     // LHS does not create a ref binding, so temporary lives as long\n     // as statement, and we do not move the AddFlags out:\n     end_of_stmt!(_, AddFlags(1));\n-    end_of_stmt!((_, _), (AddFlags(1), 22));\n+    end_of_stmt!((_, _), (AddFlags(1), 22i));\n \n     // `&` operator appears inside an arg to a function,\n     // so it is not prolonged:"}, {"sha": "c14f430e709837fcc051a9820ec1af40727c3fca", "filename": "src/test/run-pass/const-binops.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -53,28 +53,28 @@ static V: int = 1 << 3;\n static W: int = 1024 >> 4;\n static X: uint = 1024 >> 4;\n \n-static Y: bool = 1 == 1;\n-static Z: bool = 1.0 == 1.0;\n+static Y: bool = 1i == 1;\n+static Z: bool = 1.0f64 == 1.0;\n \n-static AA: bool = 1 <= 2;\n-static AB: bool = -1 <= 2;\n-static AC: bool = 1.0 <= 2.0;\n+static AA: bool = 1i <= 2;\n+static AB: bool = -1i <= 2;\n+static AC: bool = 1.0f64 <= 2.0;\n \n-static AD: bool = 1 < 2;\n-static AE: bool = -1 < 2;\n-static AF: bool = 1.0 < 2.0;\n+static AD: bool = 1i < 2;\n+static AE: bool = -1i < 2;\n+static AF: bool = 1.0f64 < 2.0;\n \n-static AG: bool = 1 != 2;\n-static AH: bool = -1 != 2;\n-static AI: bool = 1.0 != 2.0;\n+static AG: bool = 1i != 2;\n+static AH: bool = -1i != 2;\n+static AI: bool = 1.0f64 != 2.0;\n \n-static AJ: bool = 2 >= 1;\n-static AK: bool = 2 >= -2;\n-static AL: bool = 1.0 >= -2.0;\n+static AJ: bool = 2i >= 1;\n+static AK: bool = 2i >= -2;\n+static AL: bool = 1.0f64 >= -2.0;\n \n-static AM: bool = 2 > 1;\n-static AN: bool = 2 > -2;\n-static AO: bool = 1.0 > -2.0;\n+static AM: bool = 2i > 1;\n+static AN: bool = 2i > -2;\n+static AO: bool = 1.0f64 > -2.0;\n \n pub fn main() {\n     assert_eq!(A, -1);"}, {"sha": "08912419b5c9fe530f375263ea7d0594f80f90cd", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -23,5 +23,5 @@ pub fn main() {\n     foo(F{field: 42});\n     foo((1, 2u));\n     foo(@1);*/\n-    foo(box 1);\n+    foo(box 1i);\n }"}, {"sha": "9a93873f53865bf27a38c149897fb0e359ab27b6", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -22,5 +22,5 @@ impl<T> ::std::ops::Drop for S<T> {\n }\n \n pub fn main() {\n-    let _x = S { x: 1 };\n+    let _x = S { x: 1i };\n }"}, {"sha": "b9efdeb3bedf523ecaaca9e47d6f9486a47b8335", "filename": "src/test/run-pass/early-ret-binop-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn wsucc(n: int) -> int { 0 + { return n + 1 } }\n+fn wsucc(n: int) -> int { 0i + { return n + 1 } }\n pub fn main() { }"}, {"sha": "63f32ae702b178a9ad6d8b19d443cc3bf2673e25", "filename": "src/test/run-pass/else-if.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Felse-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Felse-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Felse-if.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,20 +11,20 @@\n \n \n pub fn main() {\n-    if 1 == 2 {\n+    if 1i == 2 {\n         assert!((false));\n-    } else if 2 == 3 {\n+    } else if 2i == 3 {\n         assert!((false));\n-    } else if 3 == 4 { assert!((false)); } else { assert!((true)); }\n-    if 1 == 2 { assert!((false)); } else if 2 == 2 { assert!((true)); }\n-    if 1 == 2 {\n+    } else if 3i == 4 { assert!((false)); } else { assert!((true)); }\n+    if 1i == 2 { assert!((false)); } else if 2i == 2 { assert!((true)); }\n+    if 1i == 2 {\n         assert!((false));\n-    } else if 2 == 2 {\n-        if 1 == 1 {\n+    } else if 2i == 2 {\n+        if 1i == 1 {\n             assert!((true));\n-        } else { if 2 == 1 { assert!((false)); } else { assert!((false)); } }\n+        } else { if 2i == 1 { assert!((false)); } else { assert!((false)); } }\n     }\n-    if 1 == 2 {\n+    if 1i == 2 {\n         assert!((false));\n-    } else { if 1 == 2 { assert!((false)); } else { assert!((true)); } }\n+    } else { if 1i == 2 { assert!((false)); } else { assert!((true)); } }\n }"}, {"sha": "5fe8bb27e15492d55b3c3d7c3861c174b64b4a68", "filename": "src/test/run-pass/enum-discr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discr.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n enum Animal {\n-    Cat = 0u,\n-    Dog = 1u,\n-    Horse = 2u,\n-    Snake = 3u\n+    Cat = 0,\n+    Dog = 1,\n+    Horse = 2,\n+    Snake = 3,\n }\n \n enum Hero {"}, {"sha": "ccbc5d12191e805b0f33cfe7eceb332303cb3e05", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -23,8 +23,8 @@ macro_rules! check {\n             static C: E = V;\n             pub fn check() {\n                 assert_eq!(size_of::<E>(), size_of::<$t>());\n-                assert_eq!(V as $t, $v);\n-                assert_eq!(C as $t, $v);\n+                assert_eq!(V as $t, $v as $t);\n+                assert_eq!(C as $t, $v as $t);\n                 assert_eq!(format!(\"{:?}\", V), \"V\".to_string());\n                 assert_eq!(format!(\"{:?}\", C), \"V\".to_string());\n             }\n@@ -40,17 +40,13 @@ pub fn main() {\n     check!(d, u16, 0xe8d8);\n     check!(e, u32, 0x17273747);\n     check!(f, u32, 0xe8d8c8b8);\n-    check!(g, u64, 0x1727374757677787u64);\n-    check!(h, u64, 0xe8d8c8b8a8988878u64);\n \n     check!(z, i8, 0x17);\n     check!(y, i8, -0x17);\n     check!(x, i16, 0x1727);\n     check!(w, i16, -0x1727);\n     check!(v, i32, 0x17273747);\n     check!(u, i32, -0x17273747);\n-    check!(t, i64, 0x1727374757677787);\n-    check!(s, i64, -0x1727374757677787);\n \n     enum Simple { A, B }\n     assert_eq!(::std::mem::size_of::<Simple>(), 1);"}, {"sha": "da35ffb52959b678c7be727a8fd3a8c8878d0027", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -20,8 +20,8 @@ use std::gc::{Gc, GC};\n \n enum List<X> { Nil, Cons(X, Gc<List<X>>) }\n pub fn main() {\n-    match Cons(10, box(GC) Nil) {\n-        Cons(10, _) => {}\n+    match Cons(10i, box(GC) Nil) {\n+        Cons(10i, _) => {}\n         Nil => {}\n         _ => fail!()\n     }"}, {"sha": "b04f5e11042c8b5d7918a9afddc29f6d8c1aaa71", "filename": "src/test/run-pass/enum-vec-initializer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,9 +16,9 @@ static BAR:uint = Bunny as uint;\n static BAR2:uint = BAR;\n \n pub fn main() {\n-    let _v = [0, .. Bunny as uint];\n-    let _v = [0, .. BAR];\n-    let _v = [0, .. BAR2];\n+    let _v = [0i, .. Bunny as uint];\n+    let _v = [0i, .. BAR];\n+    let _v = [0i, .. BAR2];\n     static BAR3:uint = BAR2;\n-    let _v = [0, .. BAR3];\n+    let _v = [0i, .. BAR3];\n }"}, {"sha": "5652cdea8790efcf9e40f25398b61334968c7e9b", "filename": "src/test/run-pass/expr-block-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-box.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,4 +12,4 @@\n \n use std::gc::GC;\n \n-pub fn main() { let x = { box(GC) 100 }; assert!((*x == 100)); }\n+pub fn main() { let x = { box(GC) 100i }; assert!((*x == 100)); }"}, {"sha": "050ecebb2a1a92a12dc85549423af0a6fff7a729", "filename": "src/test/run-pass/expr-block-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -13,4 +13,4 @@\n use std::gc::GC;\n \n // Regression test for issue #388\n-pub fn main() { let _x = { { box(GC) 10 } }; }\n+pub fn main() { let _x = { { box(GC) 10i } }; }"}, {"sha": "0dff989002f5b73930a73de80d45f1a8272fd2fc", "filename": "src/test/run-pass/expr-block-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,4 +11,4 @@\n \n \n \n-pub fn main() { let x = { box 100 }; assert!((*x == 100)); }\n+pub fn main() { let x = { box 100i }; assert!((*x == 100)); }"}, {"sha": "7b08251967e329aef037bf8fb16dd2432ed73389", "filename": "src/test/run-pass/expr-empty-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-empty-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-empty-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-empty-ret.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,7 +12,7 @@\n \n fn f() {\n     let _x = match true {\n-        true => { 10 }\n+        true => { 10i }\n         false => { return }\n     };\n }"}, {"sha": "8e56011e6dcec71da8d7416d2600fd5cfa852404", "filename": "src/test/run-pass/expr-if-fail-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,7 +12,7 @@\n // expression results in fail.\n pub fn main() {\n     let _x = if true {\n-        10\n+        10i\n     } else {\n         if true { fail!() } else { fail!() }\n     };"}, {"sha": "e9f116fcdd4259a78ad6e443f0e8f6347f25d04d", "filename": "src/test/run-pass/expr-if-fail.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -8,15 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test_if_fail() { let x = if false { fail!() } else { 10 }; assert!((x == 10)); }\n+fn test_if_fail() {\n+    let x = if false { fail!() } else { 10i };\n+    assert!((x == 10));\n+}\n \n fn test_else_fail() {\n     let x = if true { 10i } else { fail!() };\n     assert_eq!(x, 10i);\n }\n \n fn test_elseif_fail() {\n-    let x = if false { 0 } else if false { fail!() } else { 10i };\n+    let x = if false { 0i } else if false { fail!() } else { 10i };\n     assert_eq!(x, 10i);\n }\n "}, {"sha": "0d23098d8fc77b94634726296da3765a9e671c11", "filename": "src/test/run-pass/expr-match-fail-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,7 +16,7 @@\n pub fn main() {\n     let _x =\n         match true {\n-          true => { 10 }\n+          true => { 10i }\n           false => { match true { true => { fail!() } false => { fail!() } } }\n         };\n }"}, {"sha": "09df423d2dadc97d7df945c0bc5849e91d5553f9", "filename": "src/test/run-pass/floatlits.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Ffloatlits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Ffloatlits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloatlits.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,10 +11,10 @@\n \n \n pub fn main() {\n-    let f = 4.999999999999;\n-    assert!((f > 4.90));\n-    assert!((f < 5.0));\n-    let g = 4.90000000001e-10;\n-    assert!((g > 5e-11));\n-    assert!((g < 5e-9));\n+    let f = 4.999999999999f64;\n+    assert!((f > 4.90f64));\n+    assert!((f < 5.0f64));\n+    let g = 4.90000000001e-10f64;\n+    assert!((g > 5e-11f64));\n+    assert!((g < 5e-9f64));\n }"}, {"sha": "80d3527736f40b9de881f4ce43bedf98eda37976", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -13,6 +13,6 @@\n pub fn main() {\n     // We should be able to type infer inside of ||s.\n     let _f = || {\n-        let i = 10;\n+        let i = 10i;\n     };\n }"}, {"sha": "d9d3e3202609724cf92367ab344a84fc3c532cc7", "filename": "src/test/run-pass/foreach-external-iterators-break.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1,..100];\n-    let mut y = 0;\n+    let x = [1i,..100];\n+    let mut y = 0i;\n     for i in x.iter() {\n         if y > 10 {\n             break;"}, {"sha": "f4d38dfcfc329e3373a829656a2a4b430c1df2d3", "filename": "src/test/run-pass/foreach-external-iterators-nested.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1,..100];\n-    let y = [2,..100];\n-    let mut p = 0;\n-    let mut q = 0;\n+    let x = [1i,..100];\n+    let y = [2i,..100];\n+    let mut p = 0i;\n+    let mut q = 0i;\n     for i in x.iter() {\n         for j in y.iter() {\n             p += *j;"}, {"sha": "684a9b81fb256f72efa7d5009c90fac1d6e84495", "filename": "src/test/run-pass/foreach-external-iterators.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1,..100];\n-    let mut y = 0;\n+    let x = [1i,..100];\n+    let mut y = 0i;\n     for i in x.iter() {\n         y += *i\n     }"}, {"sha": "9dd52dfb6da0e42894be3b10692ed8ad9c665d33", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -22,7 +22,7 @@ extern {\n pub fn main() {\n     unsafe {\n         Thread::start(proc() {\n-            let i = &100;\n+            let i = &100i;\n             rust_dbg_call(callback, mem::transmute(i));\n         }).join();\n     }\n@@ -31,6 +31,6 @@ pub fn main() {\n extern fn callback(data: libc::uintptr_t) {\n     unsafe {\n         let data: *const int = mem::transmute(data);\n-        assert_eq!(*data, 100);\n+        assert_eq!(*data, 100i);\n     }\n }"}, {"sha": "ac97a2aa9e85482bc1568b72e1cee634c57b2dd5", "filename": "src/test/run-pass/generic-ivec-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,4 +10,4 @@\n \n enum wrapper<T> { wrapped(T), }\n \n-pub fn main() { let _w = wrapped(vec!(1, 2, 3, 4, 5)); }\n+pub fn main() { let _w = wrapped(vec!(1i, 2, 3, 4, 5)); }"}, {"sha": "4402dd35d0965b8b1c28748a57c91fa173d0e2b0", "filename": "src/test/run-pass/generic-ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -13,4 +13,4 @@\n use std::gc::{Gc, GC};\n \n fn f<T>(_v: Gc<T>) { }\n-pub fn main() { f(box(GC) vec!(1, 2, 3, 4, 5)); }\n+pub fn main() { f(box(GC) vec!(1i, 2, 3, 4, 5)); }"}, {"sha": "7d011e57671de80d12f8e829304ebd599852296e", "filename": "src/test/run-pass/generic-tag-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,4 +12,4 @@\n \n enum clam<T> { a(T), }\n \n-pub fn main() { let _c = a(3); }\n+pub fn main() { let _c = a(3i); }"}, {"sha": "5bfbe4bf5a01da6b1d018ff7ceea0cafd79d0c91", "filename": "src/test/run-pass/guards.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,14 +12,14 @@ struct Pair { x: int, y: int }\n \n pub fn main() {\n     let a: int =\n-        match 10 { x if x < 7 => { 1 } x if x < 11 => { 2 } 10 => { 3 } _ => { 4 } };\n+        match 10i { x if x < 7 => { 1i } x if x < 11 => { 2i } 10 => { 3i } _ => { 4i } };\n     assert_eq!(a, 2);\n \n     let b: int =\n         match (Pair {x: 10, y: 20}) {\n-          x if x.x < 5 && x.y < 5 => { 1 }\n-          Pair {x: x, y: y} if x == 10 && y == 20 => { 2 }\n-          Pair {x: _x, y: _y} => { 3 }\n+          x if x.x < 5 && x.y < 5 => { 1i }\n+          Pair {x: x, y: y} if x == 10 && y == 20 => { 2i }\n+          Pair {x: _x, y: _y} => { 3i }\n         };\n     assert_eq!(b, 2);\n }"}, {"sha": "eb81f82a146f74cb425ae27acf0a1d8b71fd105e", "filename": "src/test/run-pass/hygiene-dodging-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -14,7 +14,7 @@ mod x {\n \n pub fn main(){\n     // should *not* shadow the module x:\n-    let x = 9;\n+    let x = 9i;\n     // use it to avoid warnings:\n     x+3;\n     assert_eq!(x::g(),14);"}, {"sha": "27c63d425bf387a872ef925608d06217d360f7fb", "filename": "src/test/run-pass/ignore-all-the-things.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -21,28 +21,28 @@ pub fn main() {\n     //let (a, b, ..) = (5, 5, 5, 5);\n     //let (.., c, d) = (5, 5, 5, 5);\n     let Bar{b: b, ..} = Bar{a: 5, b: 5, c: 5, d: 5};\n-    match [5, 5, 5, 5] {\n+    match [5i, 5, 5, 5] {\n         [..] => { }\n     }\n-    match [5, 5, 5, 5] {\n+    match [5i, 5, 5, 5] {\n         [a, ..] => { }\n     }\n-    match [5, 5, 5, 5] {\n+    match [5i, 5, 5, 5] {\n         [.., b] => { }\n     }\n-    match [5, 5, 5, 5] {\n+    match [5i, 5, 5, 5] {\n         [a, .., b] => { }\n     }\n-    match [5, 5, 5] {\n+    match [5i, 5, 5] {\n         [..] => { }\n     }\n-    match [5, 5, 5] {\n+    match [5i, 5, 5] {\n         [a, ..] => { }\n     }\n-    match [5, 5, 5] {\n+    match [5i, 5, 5] {\n         [.., a] => { }\n     }\n-    match [5, 5, 5] {\n+    match [5i, 5, 5] {\n         [a, .., b] => { }\n     }\n }"}, {"sha": "19300569d2050cd6c24e37babcf38f959efe5376", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,11 +12,11 @@\n \n pub fn main() {\n     use std::mem::replace;\n-    let mut x = 5;\n+    let mut x = 5i;\n     replace(&mut x, 6);\n     {\n         use std::mem::*;\n-        let mut y = 6;\n+        let mut y = 6i;\n         swap(&mut x, &mut y);\n     }\n }"}, {"sha": "0639d7320896bae349dad2523c4a0da69e0d5b83", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,4 +16,4 @@ mod zed {\n     pub fn bar() { println!(\"bar\"); }\n }\n \n-pub fn main() { let _zed = 42; bar(); }\n+pub fn main() { let _zed = 42i; bar(); }"}, {"sha": "a7b2a46f0c3a450d4a4c2ec34bb79cccc93e1964", "filename": "src/test/run-pass/inferred-suffix-in-pattern-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = 2;\n+    let x = 2i;\n     let x_message = match x {\n       0 .. 1     => { \"not many\".to_string() }\n       _          => { \"lots\".to_string() }"}, {"sha": "5d4f6458cf9bcaa8d92307c5bbb326c65eddd058", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -36,15 +36,15 @@ fn r(i: Gc<Cell<int>>) -> r {\n }\n \n fn test_box() {\n-    let i = box(GC) Cell::new(0);\n+    let i = box(GC) Cell::new(0i);\n     {\n         let _a = box(GC) r(i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_rec() {\n-    let i = box(GC) Cell::new(0);\n+    let i = box(GC) Cell::new(0i);\n     {\n         let _a = Box {x: r(i)};\n     }\n@@ -56,31 +56,31 @@ fn test_tag() {\n         t0(r),\n     }\n \n-    let i = box(GC) Cell::new(0);\n+    let i = box(GC) Cell::new(0i);\n     {\n         let _a = t0(r(i));\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_tup() {\n-    let i = box(GC) Cell::new(0);\n+    let i = box(GC) Cell::new(0i);\n     {\n-        let _a = (r(i), 0);\n+        let _a = (r(i), 0i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_unique() {\n-    let i = box(GC) Cell::new(0);\n+    let i = box(GC) Cell::new(0i);\n     {\n         let _a = box r(i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_box_rec() {\n-    let i = box(GC) Cell::new(0);\n+    let i = box(GC) Cell::new(0i);\n     {\n         let _a = box(GC) Box {\n             x: r(i)"}, {"sha": "a4ef77df311256a8bad53744bd536cab8c6b4aff", "filename": "src/test/run-pass/issue-10638.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-10638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-10638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10638.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -13,6 +13,6 @@ pub fn main() {\n     ////////////////// still not a doc comment\n     /////**** nope, me neither */\n     /*** And neither am I! */\n-    5;\n+    5i;\n     /*****! certainly not I */\n }"}, {"sha": "ad3a050dde9e9835bb3dce4c5ee797d916853122", "filename": "src/test/run-pass/issue-1257.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1257.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main () {\n   let mut line = \"\".to_string();\n-  let mut i = 0;\n+  let mut i = 0i;\n   while line != \"exit\".to_string() {\n     line = if i == 9 { \"exit\".to_string() } else { \"notexit\".to_string() };\n     i += 1;"}, {"sha": "e1634e44847ee4b33357ce207d0fdec8c9eff860", "filename": "src/test/run-pass/issue-13027.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13027.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -27,80 +27,80 @@ pub fn main() {\n }\n \n fn lit_shadow_range() {\n-    assert_eq!(2i, match 1 {\n-        1 if false => 1,\n+    assert_eq!(2i, match 1i {\n+        1 if false => 1i,\n         1..2 => 2,\n         _ => 3\n     });\n \n     let x = 0i;\n     assert_eq!(2i, match x+1 {\n-        0 => 0,\n+        0 => 0i,\n         1 if false => 1,\n         1..2 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2i, match val() {\n-        1 if false => 1,\n+        1 if false => 1i,\n         1..2 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2i, match CONST {\n-        0 => 0,\n+        0 => 0i,\n         1 if false => 1,\n         1..2 => 2,\n         _ => 3\n     });\n \n     // value is out of the range of second arm, should match wildcard pattern\n-    assert_eq!(3i, match 3 {\n-        1 if false => 1,\n+    assert_eq!(3i, match 3i {\n+        1 if false => 1i,\n         1..2 => 2,\n         _ => 3\n     });\n }\n \n fn range_shadow_lit() {\n-    assert_eq!(2i, match 1 {\n-        1..2 if false => 1,\n+    assert_eq!(2i, match 1i {\n+        1..2 if false => 1i,\n         1 => 2,\n         _ => 3\n     });\n \n     let x = 0i;\n     assert_eq!(2i, match x+1 {\n-        0 => 0,\n+        0 => 0i,\n         1..2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2i, match val() {\n-        1..2 if false => 1,\n+        1..2 if false => 1i,\n         1 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2i, match CONST {\n-        0 => 0,\n+        0 => 0i,\n         1..2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n     // ditto\n-    assert_eq!(3i, match 3 {\n-        1..2 if false => 1,\n+    assert_eq!(3i, match 3i {\n+        1..2 if false => 1i,\n         1 => 2,\n         _ => 3\n     });\n }\n \n fn range_shadow_range() {\n-    assert_eq!(2i, match 1 {\n-        0..2 if false => 1,\n+    assert_eq!(2i, match 1i {\n+        0..2 if false => 1i,\n         1..3 => 2,\n         _ => 3,\n     });\n@@ -127,43 +127,43 @@ fn range_shadow_range() {\n     });\n \n     // ditto\n-    assert_eq!(3i, match 5 {\n-        0..2 if false => 1,\n+    assert_eq!(3i, match 5i {\n+        0..2 if false => 1i,\n         1..3 => 2,\n         _ => 3,\n     });\n }\n \n fn multi_pats_shadow_lit() {\n-    assert_eq!(2i, match 1 {\n-        100 => 0,\n+    assert_eq!(2i, match 1i {\n+        100 => 0i,\n         0 | 1..10 if false => 1,\n         1 => 2,\n         _ => 3,\n     });\n }\n \n fn multi_pats_shadow_range() {\n-    assert_eq!(2i, match 1 {\n-        100 => 0,\n+    assert_eq!(2i, match 1i {\n+        100 => 0i,\n         0 | 1..10 if false => 1,\n         1..3 => 2,\n         _ => 3,\n     });\n }\n \n fn lit_shadow_multi_pats() {\n-    assert_eq!(2i, match 1 {\n-        100 => 0,\n+    assert_eq!(2i, match 1i {\n+        100 => 0i,\n         1 if false => 1,\n         0 | 1..10 => 2,\n         _ => 3,\n     });\n }\n \n fn range_shadow_multi_pats() {\n-    assert_eq!(2i, match 1 {\n-        100 => 0,\n+    assert_eq!(2i, match 1i {\n+        100 => 0i,\n         1..3 if false => 1,\n         0 | 1..10 => 2,\n         _ => 3,\n@@ -182,5 +182,5 @@ fn misc() {\n         [Bar(_, pred)] if !pred => 2i,\n         _ => 0i,\n     };\n-    assert_eq!(2, r);\n+    assert_eq!(2i, r);\n }"}, {"sha": "d8f8b979ad06366156df960e8ab4711b3aacd13e", "filename": "src/test/run-pass/issue-13494.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13494.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -29,9 +29,9 @@ fn helper(rx: Receiver<Sender<()>>) {\n fn test() {\n     let (tx, rx) = channel();\n     spawn(proc() { helper(rx) });\n-    let (snd, rcv) = channel();\n+    let (snd, rcv) = channel::<int>();\n     for _ in range(1i, 100000i) {\n-        snd.send(1);\n+        snd.send(1i);\n         let (tx2, rx2) = channel();\n         tx.send(tx2);\n         select! {"}, {"sha": "8176262abd918fc8ed47143923f7223b16588d6e", "filename": "src/test/run-pass/issue-1460.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1460.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,5 +10,5 @@\n \n \n pub fn main() {\n-    {|i| if 1 == i { }};\n+    {|i| if 1i == i { }};\n }"}, {"sha": "378fd4a222e388a6617e7d48be60b5f859abb73a", "filename": "src/test/run-pass/issue-15221.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-15221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-15221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15221.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -17,7 +17,7 @@ macro_rules! outer (\n     ($e:pat ) => (inner!($e)))\n \n fn main() {\n-    let outer!(g1) = 13;\n+    let outer!(g1) = 13i;\n     g1;\n }\n "}, {"sha": "d9d4120d4f40506e715e2b675776841a509a9d43", "filename": "src/test/run-pass/issue-2216.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2216.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     'foo: loop {\n         'bar: loop {\n             'quux: loop {\n-                if 1 == 2 {\n+                if 1i == 2 {\n                     break 'foo;\n                 }\n                 else {"}, {"sha": "41cf3eaf7e31a1cd4086f1ec45c8560c3e95c2a0", "filename": "src/test/run-pass/issue-2383.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2383.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,5 +15,5 @@ use std::collections::Deque;\n \n pub fn main() {\n     let mut q = RingBuf::new();\n-    q.push_back(10);\n+    q.push_back(10i);\n }"}, {"sha": "8c8b9d5df1359b6829aa8f9b9abce40451878758", "filename": "src/test/run-pass/issue-2428.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-2428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-2428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2428.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let _foo = 100;\n+    let _foo = 100i;\n     static quux: int = 5;\n \n     enum Stuff {"}, {"sha": "11ebf014bc65e6ce1c97a258303f0b398fad1803", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -21,5 +21,5 @@ fn deadcode() {\n }\n \n pub fn main() {\n-    let _ = perform_hax(box 42);\n+    let _ = perform_hax(box 42i);\n }"}, {"sha": "1a5b175cffcee5e402a53aaec1c415a646883526", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -21,5 +21,5 @@ fn deadcode() {\n }\n \n pub fn main() {\n-    perform_hax(box 42);\n+    perform_hax(box 42i);\n }"}, {"sha": "ef49d0a170f882256c3947c56b3f43cfde9e080f", "filename": "src/test/run-pass/issue-333.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-333.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,4 +12,4 @@ fn quux<T>(x: T) -> T { let f = id::<T>; return f(x); }\n \n fn id<T>(x: T) -> T { return x; }\n \n-pub fn main() { assert!((quux(10) == 10)); }\n+pub fn main() { assert!((quux(10i) == 10i)); }"}, {"sha": "eb422c9a8b99b4f5ca3b85e662dd5e1b8f9834f4", "filename": "src/test/run-pass/issue-3500.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-3500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-3500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3500.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = &Some(1);\n+    let x = &Some(1i);\n     match x {\n         &Some(_) => (),\n         &None => (),"}, {"sha": "063b2d703014774f7eeff6f75834117487619622", "filename": "src/test/run-pass/issue-3878.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3878.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,6 +11,6 @@\n #![allow(path_statement)]\n \n pub fn main() {\n-    let y = box 1;\n+    let y = box 1i;\n     y;\n }"}, {"sha": "447bf3b4b267e8f11d1fe16eb5f5497eb2423faa", "filename": "src/test/run-pass/issue-4387.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-4387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-4387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4387.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    let _foo = [0, ..2*4];\n+    let _foo = [0i, ..2*4];\n }"}, {"sha": "e1ecf47e9260b1281f371acb9a746e2c468a432b", "filename": "src/test/run-pass/issue-6117.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6117.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -15,7 +15,7 @@ use std::gc::GC;\n enum Either<T, U> { Left(T), Right(U) }\n \n pub fn main() {\n-    match Left(box(GC) 17) {\n+    match Left(box(GC) 17i) {\n         Right(()) => {}\n         _ => {}\n     }"}, {"sha": "6512db3b1c58a0f47767ce08a47d4722aea3e83f", "filename": "src/test/run-pass/issue-6318.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6318.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -21,7 +21,7 @@ impl Foo for Struct {}\n \n pub fn main() {\n     match A(box Struct as Box<Foo>) {\n-        A(_a) => 0,\n+        A(_a) => 0i,\n     };\n }\n "}, {"sha": "e5949e23467b08e1a23e39f1180108c919f28ab8", "filename": "src/test/run-pass/issue-8044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-8044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-8044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8044.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -14,5 +14,5 @@ extern crate minimal = \"issue-8044\";\n use minimal::{BTree, leaf};\n \n pub fn main() {\n-    BTree::<int> { node: leaf(1) };\n+    BTree::<int> { node: leaf(1i) };\n }"}, {"sha": "e4f4db6ea63b710e878e3ce11b1071576a4e1c5c", "filename": "src/test/run-pass/issue-8498.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8498.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,22 +9,22 @@\n // except according to those terms.\n \n pub fn main() {\n-    match &[(box 5,box 7)] {\n+    match &[(box 5i,box 7i)] {\n         ps => {\n            let (ref y, _) = ps[0];\n            assert!(**y == 5);\n         }\n     }\n \n-    match Some(&[(box 5,)]) {\n+    match Some(&[(box 5i,)]) {\n         Some(ps) => {\n            let (ref y,) = ps[0];\n            assert!(**y == 5);\n         }\n         None => ()\n     }\n \n-    match Some(&[(box 5,box 7)]) {\n+    match Some(&[(box 5i,box 7i)]) {\n         Some(ps) => {\n            let (ref y, ref z) = ps[0];\n            assert!(**y == 5);"}, {"sha": "99ab83ec62073123afe4ef28cd0cc8e82dfa4674", "filename": "src/test/run-pass/issue-868.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-868.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,7 +11,7 @@\n fn f<T>(g: || -> T) -> T { g() }\n \n pub fn main() {\n-  let _x = f( | | { 10 });\n+  let _x = f( | | { 10i });\n     // used to be: cannot determine a type for this expression\n     f(| | { });\n     // ditto"}, {"sha": "e787962bb813edd53b9dead43aff400574df5aa5", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -19,7 +19,7 @@ fn assert_repr_eq<T>(obj : T, expected : String) {\n }\n \n pub fn main() {\n-    let abc = [1, 2, 3];\n+    let abc = [1i, 2, 3];\n     let tf = [true, false];\n     let x  = [(), ()];\n     let slice = x.slice(0,1);"}, {"sha": "2fb96f593efa102377b1bcdca535d56b7d7bad7b", "filename": "src/test/run-pass/issue-8983.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-8983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-8983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8983.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,6 +16,6 @@ fn main() {\n     fn f(_: proc()) {}\n     fn eat<T>(_: T) {}\n \n-    let x = box(GC) 1;\n+    let x = box(GC) 1i;\n     f(proc() { eat(x) });\n }"}, {"sha": "dd12ea8b76523f7fd6c811db262e1e5e1f13589d", "filename": "src/test/run-pass/issue-9906.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-9906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-9906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9906.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -14,5 +14,5 @@ extern crate testmod = \"issue-9906\";\n \n pub fn main() {\n     testmod::foo();\n-    testmod::FooBar::new(1);\n+    testmod::FooBar::new(1i);\n }"}, {"sha": "aa86f488906e68dcc7ac658f0232f4b3d1749827", "filename": "src/test/run-pass/issue-9942.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-9942.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fissue-9942.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9942.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    static S: uint = 23 as uint; [0, ..S]; ()\n+    static S: uint = 23 as uint; [0i, ..S]; ()\n }"}, {"sha": "885f266ca3d95e9f0544ce5467d06770fdd5b2dc", "filename": "src/test/run-pass/keyword-changes-2012-07-31.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkeyword-changes-2012-07-31.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -19,7 +19,7 @@ mod foo {\n }\n \n fn bar() -> int {\n-    match 0 {\n-      _ => { 0 }\n+    match 0i {\n+      _ => { 0i }\n     }\n }"}, {"sha": "366b3c41328fde93223ec9298d64c1c8b427ad01", "filename": "src/test/run-pass/lazy-and-or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-and-or.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -13,7 +13,7 @@ extern crate debug;\n fn incr(x: &mut int) -> bool { *x += 1; assert!((false)); return false; }\n \n pub fn main() {\n-    let x = 1 == 2 || 3 == 3;\n+    let x = 1i == 2 || 3i == 3;\n     assert!((x));\n     let mut y: int = 10;\n     println!(\"{:?}\", x || incr(&mut y));"}, {"sha": "cd8be550d511beaac3d2ff15a6abb15a1e41b6b9", "filename": "src/test/run-pass/lazy-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Flazy-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Flazy-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-init.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,4 +12,4 @@\n \n fn foo(x: int) { println!(\"{}\", x); }\n \n-pub fn main() { let mut x: int; if 1 > 2 { x = 12; } else { x = 10; } foo(x); }\n+pub fn main() { let mut x: int; if 1i > 2 { x = 12; } else { x = 10; } foo(x); }"}, {"sha": "7d30b22867c0561fa322f3394d307dbdd849b797", "filename": "src/test/run-pass/long-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Flong-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Flong-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flong-while.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -14,6 +14,6 @@ pub fn main() {\n     let mut i: int = 0;\n     while i < 1000000 {\n         i += 1;\n-        let x = 3;\n+        let x = 3i;\n     }\n }"}, {"sha": "4fe73188b45aaf809fffa733b1c1001a8ebe03f6", "filename": "src/test/run-pass/loop-diverges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Floop-diverges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Floop-diverges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-diverges.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -16,5 +16,5 @@ fn forever() -> ! {\n }\n \n pub fn main() {\n-  if (1 == 2) { forever(); }\n+  if (1i == 2) { forever(); }\n }"}, {"sha": "46d4fa460fe2b280d710d85b4dc8ede6409adffd", "filename": "src/test/run-pass/loop-label-shadowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Floop-label-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Floop-label-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-label-shadowing.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     let mut foo = Vec::new();\n-    'foo: for i in [1, 2, 3].iter() {\n+    'foo: for i in [1i, 2, 3].iter() {\n         foo.push(i);\n     }\n }"}, {"sha": "14aee4c3be81d001e25ab0dc0a5d5ccb1ed0a597", "filename": "src/test/run-pass/loop-no-reinit-needed-post-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Floop-no-reinit-needed-post-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Floop-no-reinit-needed-post-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-no-reinit-needed-post-bot.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -17,7 +17,7 @@ fn my_fail() -> ! { loop {} }\n \n pub fn step(f: bool) {\n     let mut g = S;\n-    let mut i = 0;\n+    let mut i = 0i;\n     loop\n     {\n         if i > 10 { break; } else { i += 1; }"}, {"sha": "f3c299bd1f9138c9a9469b8fcc076f417d11fc02", "filename": "src/test/run-pass/match-bot-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmatch-bot-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmatch-bot-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-bot-2.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // n.b. This was only ever failing with optimization disabled.\n-fn a() -> int { match return 1 { 2 => 3, _ => fail!() } }\n+fn a() -> int { match return 1i { 2i => 3i, _ => fail!() } }\n pub fn main() { a(); }"}, {"sha": "170a3513a1a3536c93f58eeac01f1792cacfdc18", "filename": "src/test/run-pass/match-naked-record-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmatch-naked-record-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmatch-naked-record-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-naked-record-expr.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,7 +11,7 @@\n struct X { x: int }\n \n pub fn main() {\n-    let _x = match 0 {\n+    let _x = match 0i {\n       _ => X {\n         x: 0\n       }.x"}, {"sha": "21c31b621835e37275d2eafb54da8bc183d05ea4", "filename": "src/test/run-pass/match-naked-record.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmatch-naked-record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmatch-naked-record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-naked-record.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -11,7 +11,7 @@\n struct X { x: int }\n \n pub fn main() {\n-    let _x = match 0 {\n+    let _x = match 0i {\n       _ => X {\n         x: 0\n       }"}, {"sha": "2169e996577bf89756a9f515749638e19cc85ab9", "filename": "src/test/run-pass/match-pipe-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -10,7 +10,7 @@\n \n fn test1() {\n     // from issue 6338\n-    match ((1, \"a\".to_string()), (2, \"b\".to_string())) {\n+    match ((1i, \"a\".to_string()), (2i, \"b\".to_string())) {\n         ((1, a), (2, b)) | ((2, b), (1, a)) => {\n                 assert_eq!(a, \"a\".to_string());\n                 assert_eq!(b, \"b\".to_string());"}, {"sha": "7421ae9588407f8f74fc4fb1e5e6cbab8c069919", "filename": "src/test/run-pass/match-range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -26,15 +26,15 @@ pub fn main() {\n       'a'..'z' => {}\n       _ => fail!(\"should suppport char ranges\")\n     }\n-    match -3 {\n+    match -3i {\n       -7..5 => {}\n       _ => fail!(\"should match signed range\")\n     }\n-    match 3.0 {\n+    match 3.0f64 {\n       1.0..5.0 => {}\n       _ => fail!(\"should match float range\")\n     }\n-    match -1.5 {\n+    match -1.5f64 {\n       -3.6..3.6 => {}\n       _ => fail!(\"should match negative float range\")\n     }"}, {"sha": "201abeba073883e6b8abca3e418263dca6ed535b", "filename": "src/test/run-pass/multi-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmulti-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff94f867d29a90ab59060c10a62f65994776a8c4/src%2Ftest%2Frun-pass%2Fmulti-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti-let.rs?ref=ff94f867d29a90ab59060c10a62f65994776a8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = 10;\n+    let x = 10i;\n     let y = x;\n     assert!((y == 10));\n }"}]}