{"sha": "c990309f61a18be4a5d12aa4f0d9dcf8f2e004d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OTAzMDlmNjFhMThiZTRhNWQxMmFhNGYwZDlkY2Y4ZjJlMDA0ZDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-10T09:52:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-10T09:52:43Z"}, "message": "rustfmt to pacify the mercilous tidy", "tree": {"sha": "ca7383b9b5b1aebec25d6296fbdc00465c303706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca7383b9b5b1aebec25d6296fbdc00465c303706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c990309f61a18be4a5d12aa4f0d9dcf8f2e004d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c990309f61a18be4a5d12aa4f0d9dcf8f2e004d5", "html_url": "https://github.com/rust-lang/rust/commit/c990309f61a18be4a5d12aa4f0d9dcf8f2e004d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c990309f61a18be4a5d12aa4f0d9dcf8f2e004d5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "434d59a2c960dee2a17ae2625c8844986d580d7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/434d59a2c960dee2a17ae2625c8844986d580d7e", "html_url": "https://github.com/rust-lang/rust/commit/434d59a2c960dee2a17ae2625c8844986d580d7e"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "0b777575df32d6e930e4e74be81551d89c90e8c1", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c990309f61a18be4a5d12aa4f0d9dcf8f2e004d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c990309f61a18be4a5d12aa4f0d9dcf8f2e004d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=c990309f61a18be4a5d12aa4f0d9dcf8f2e004d5", "patch": "@@ -317,8 +317,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n \n             // Add `end(X)` into the set for X.\n-            self.liveness_constraints\n-                .add_element(variable, variable, &Cause::UniversalRegion(variable));\n+            self.liveness_constraints.add_element(\n+                variable,\n+                variable,\n+                &Cause::UniversalRegion(variable),\n+            );\n         }\n     }\n \n@@ -841,7 +844,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             sup_region, sub_region, point\n         );\n \n-        let inferred_values = self.inferred_values.as_ref().expect(\"values for regions not yet inferred\");\n+        let inferred_values = self.inferred_values\n+            .as_ref()\n+            .expect(\"values for regions not yet inferred\");\n \n         debug!(\n             \"eval_outlives: sup_region's value = {:?}\",\n@@ -858,10 +863,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // now). Therefore, the sup-region outlives the sub-region if,\n         // for each universal region R1 in the sub-region, there\n         // exists some region R2 in the sup-region that outlives R1.\n-        let universal_outlives =\n-            inferred_values.universal_regions_outlived_by(sub_region)\n+        let universal_outlives = inferred_values\n+            .universal_regions_outlived_by(sub_region)\n             .all(|r1| {\n-                inferred_values.universal_regions_outlived_by(sup_region)\n+                inferred_values\n+                    .universal_regions_outlived_by(sup_region)\n                     .any(|r2| self.universal_regions.outlives(r2, r1))\n             });\n "}, {"sha": "e914be52db08c83776f95e929b1b950d77d4dda7", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c990309f61a18be4a5d12aa4f0d9dcf8f2e004d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c990309f61a18be4a5d12aa4f0d9dcf8f2e004d5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=c990309f61a18be4a5d12aa4f0d9dcf8f2e004d5", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n use borrow_check::nll::region_infer::TrackCauses;\n+use rustc::mir::{BasicBlock, Location, Mir};\n+use rustc::ty::RegionVid;\n use rustc_data_structures::bitvec::SparseBitMatrix;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc::mir::{BasicBlock, Location, Mir};\n-use rustc::ty::RegionVid;\n use std::fmt::Debug;\n use std::rc::Rc;\n \n@@ -233,7 +233,12 @@ impl RegionValues {\n \n     /// Adds the given element to the value for the given region. Returns true if\n     /// the element is newly added (i.e., was not already present).\n-    pub(super) fn add_element<E: ToElementIndex>(&mut self, r: RegionVid, elem: E, cause: &Cause) -> bool {\n+    pub(super) fn add_element<E: ToElementIndex>(\n+        &mut self,\n+        r: RegionVid,\n+        elem: E,\n+        cause: &Cause,\n+    ) -> bool {\n         let i = self.elements.index(elem);\n         self.add_internal(r, i, |_| cause.clone())\n     }"}]}