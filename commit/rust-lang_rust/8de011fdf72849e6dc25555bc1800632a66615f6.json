{"sha": "8de011fdf72849e6dc25555bc1800632a66615f6", "node_id": "C_kwDOAAsO6NoAKDhkZTAxMWZkZjcyODQ5ZTZkYzI1NTU1YmMxODAwNjMyYTY2NjE1ZjY", "commit": {"author": {"name": "Eric Wu", "email": "eric.dianhao.wu@gmail.com", "date": "2023-01-02T02:23:32Z"}, "committer": {"name": "Eric Wu", "email": "eric.dianhao.wu@gmail.com", "date": "2023-01-02T02:41:46Z"}, "message": "don't lint field_reassign when field in closure\n\nThis commit makes the ContainsName struct visit all interior\nexpressions, which means that ContainsName will return true\neven if `name` is used in a closure within `expr`.", "tree": {"sha": "71c69a9f0c11b34b31036c980614e045e2f93f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c69a9f0c11b34b31036c980614e045e2f93f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8de011fdf72849e6dc25555bc1800632a66615f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8de011fdf72849e6dc25555bc1800632a66615f6", "html_url": "https://github.com/rust-lang/rust/commit/8de011fdf72849e6dc25555bc1800632a66615f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8de011fdf72849e6dc25555bc1800632a66615f6/comments", "author": {"login": "EricWu2003", "id": 41087951, "node_id": "MDQ6VXNlcjQxMDg3OTUx", "avatar_url": "https://avatars.githubusercontent.com/u/41087951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EricWu2003", "html_url": "https://github.com/EricWu2003", "followers_url": "https://api.github.com/users/EricWu2003/followers", "following_url": "https://api.github.com/users/EricWu2003/following{/other_user}", "gists_url": "https://api.github.com/users/EricWu2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/EricWu2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EricWu2003/subscriptions", "organizations_url": "https://api.github.com/users/EricWu2003/orgs", "repos_url": "https://api.github.com/users/EricWu2003/repos", "events_url": "https://api.github.com/users/EricWu2003/events{/privacy}", "received_events_url": "https://api.github.com/users/EricWu2003/received_events", "type": "User", "site_admin": false}, "committer": {"login": "EricWu2003", "id": 41087951, "node_id": "MDQ6VXNlcjQxMDg3OTUx", "avatar_url": "https://avatars.githubusercontent.com/u/41087951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EricWu2003", "html_url": "https://github.com/EricWu2003", "followers_url": "https://api.github.com/users/EricWu2003/followers", "following_url": "https://api.github.com/users/EricWu2003/following{/other_user}", "gists_url": "https://api.github.com/users/EricWu2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/EricWu2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EricWu2003/subscriptions", "organizations_url": "https://api.github.com/users/EricWu2003/orgs", "repos_url": "https://api.github.com/users/EricWu2003/repos", "events_url": "https://api.github.com/users/EricWu2003/events{/privacy}", "received_events_url": "https://api.github.com/users/EricWu2003/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a85e480dd15bca2231550a936398f30f97eb5d53", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85e480dd15bca2231550a936398f30f97eb5d53", "html_url": "https://github.com/rust-lang/rust/commit/a85e480dd15bca2231550a936398f30f97eb5d53"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "f10c35cde52a1e9b0eed124ae7b1609efbc3d625", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8de011fdf72849e6dc25555bc1800632a66615f6/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de011fdf72849e6dc25555bc1800632a66615f6/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=8de011fdf72849e6dc25555bc1800632a66615f6", "patch": "@@ -525,7 +525,11 @@ fn check_for_warn_of_moved_symbol(cx: &LateContext<'_>, symbols: &[(HirId, Symbo\n             .iter()\n             .filter(|&&(_, name)| !name.as_str().starts_with('_'))\n             .any(|&(_, name)| {\n-                let mut walker = ContainsName { name, result: false };\n+                let mut walker = ContainsName {\n+                    name,\n+                    result: false,\n+                    cx,\n+                };\n \n                 // Scan block\n                 block"}, {"sha": "55f6121a09d2eb16fe501ae676c400925fddfd44", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8de011fdf72849e6dc25555bc1800632a66615f6/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de011fdf72849e6dc25555bc1800632a66615f6/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=8de011fdf72849e6dc25555bc1800632a66615f6", "patch": "@@ -170,7 +170,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                 // find out if and which field was set by this `consecutive_statement`\n                 if let Some((field_ident, assign_rhs)) = field_reassigned_by_stmt(consecutive_statement, binding_name) {\n                     // interrupt and cancel lint if assign_rhs references the original binding\n-                    if contains_name(binding_name, assign_rhs) {\n+                    if contains_name(binding_name, assign_rhs, cx) {\n                         cancel_lint = true;\n                         break;\n                     }"}, {"sha": "3bca93d80aa7f7540dfdecd9243f32bda0ed8c06", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8de011fdf72849e6dc25555bc1800632a66615f6/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de011fdf72849e6dc25555bc1800632a66615f6/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=8de011fdf72849e6dc25555bc1800632a66615f6", "patch": "@@ -81,7 +81,7 @@ pub(super) fn check<'tcx>(\n \n                 let skip = if starts_at_zero {\n                     String::new()\n-                } else if visitor.indexed_mut.contains(&indexed) && contains_name(indexed, start) {\n+                } else if visitor.indexed_mut.contains(&indexed) && contains_name(indexed, start, cx) {\n                     return;\n                 } else {\n                     format!(\".skip({})\", snippet(cx, start.span, \"..\"))\n@@ -109,7 +109,7 @@ pub(super) fn check<'tcx>(\n \n                     if is_len_call(end, indexed) || is_end_eq_array_len(cx, end, limits, indexed_ty) {\n                         String::new()\n-                    } else if visitor.indexed_mut.contains(&indexed) && contains_name(indexed, take_expr) {\n+                    } else if visitor.indexed_mut.contains(&indexed) && contains_name(indexed, take_expr, cx) {\n                         return;\n                     } else {\n                         match limits {"}, {"sha": "b2175c5cb169aee7ed42a8922a8feaba54559fb7", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8de011fdf72849e6dc25555bc1800632a66615f6/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de011fdf72849e6dc25555bc1800632a66615f6/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=8de011fdf72849e6dc25555bc1800632a66615f6", "patch": "@@ -116,6 +116,8 @@ use crate::consts::{constant, Constant};\n use crate::ty::{can_partially_move_ty, expr_sig, is_copy, is_recursively_primitive_type, ty_is_fn_once_param};\n use crate::visitors::for_each_expr;\n \n+use rustc_middle::hir::nested_filter;\n+\n #[macro_export]\n macro_rules! extract_msrv_attr {\n     ($context:ident) => {\n@@ -1253,22 +1255,33 @@ pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n     }\n }\n \n-pub struct ContainsName {\n+pub struct ContainsName<'a, 'tcx> {\n+    pub cx: &'a LateContext<'tcx>,\n     pub name: Symbol,\n     pub result: bool,\n }\n \n-impl<'tcx> Visitor<'tcx> for ContainsName {\n+impl<'a, 'tcx> Visitor<'tcx> for ContainsName<'a, 'tcx> {\n+    type NestedFilter = nested_filter::All;\n+\n     fn visit_name(&mut self, name: Symbol) {\n         if self.name == name {\n             self.result = true;\n         }\n     }\n+\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n+    }\n }\n \n /// Checks if an `Expr` contains a certain name.\n-pub fn contains_name(name: Symbol, expr: &Expr<'_>) -> bool {\n-    let mut cn = ContainsName { name, result: false };\n+pub fn contains_name<'tcx>(name: Symbol, expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) -> bool {\n+    let mut cn = ContainsName {\n+        name,\n+        result: false,\n+        cx,\n+    };\n     cn.visit_expr(expr);\n     cn.result\n }"}, {"sha": "1f989bb1220525f35807d6d1195ea875707b0e1e", "filename": "tests/ui/field_reassign_with_default.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8de011fdf72849e6dc25555bc1800632a66615f6/tests%2Fui%2Ffield_reassign_with_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de011fdf72849e6dc25555bc1800632a66615f6/tests%2Fui%2Ffield_reassign_with_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.rs?ref=8de011fdf72849e6dc25555bc1800632a66615f6", "patch": "@@ -247,3 +247,24 @@ mod issue6312 {\n         }\n     }\n }\n+\n+struct Collection {\n+    items: Vec<i32>,\n+    len: usize,\n+}\n+\n+impl Default for Collection {\n+    fn default() -> Self {\n+        Self {\n+            items: vec![1, 2, 3],\n+            len: 0,\n+        }\n+    }\n+}\n+\n+#[allow(clippy::redundant_closure_call)]\n+fn issue10136() {\n+    let mut c = Collection::default();\n+    // don't lint, since c.items was used to calculate this value\n+    c.len = (|| c.items.len())();\n+}"}]}