{"sha": "b5fffdc12be138ddf5fbd0f20d31026597d86d4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZmZmZGMxMmJlMTM4ZGRmNWZiZDBmMjBkMzEwMjY1OTdkODZkNGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-19T15:26:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-19T15:26:44Z"}, "message": "Rollup merge of #79164 - varkor:unbraced-single-segment-const-arguments, r=petrochenkov\n\nPermit standalone generic parameters as const generic arguments in macros\n\nFixes https://github.com/rust-lang/rust/issues/79127.\n\nr? ```@petrochenkov```", "tree": {"sha": "d00a739e36f57744c29dc246dfbadce5ed44cf3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00a739e36f57744c29dc246dfbadce5ed44cf3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5fffdc12be138ddf5fbd0f20d31026597d86d4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfto60CRBK7hj4Ov3rIwAAdHIIAEzXuZ7Z85vo6spxwcJFqpDC\nkKl+oh7n9/A9VJJTifIeMRCSh5e3zatZAE9hjZkB+zheVMCU8fay8MsxUhACyIE0\nsDPiga2GZt8dwxcx8LFchIXefq0aB7NmJ0NtAvJkTzoeX5iC1y/sx62pREi4OVLP\nGJlpnvrIv/hAfginfrP6TCaZaPtdjYCJ44fVWG7Ss1MpkPZ8YhpEvgwWvvI5QRV8\n4gW7kVuWe5T9NI5gEdYk/brxk6NMw5eOBEGxTgfiuKQ2zZEQc9F96Fbt7EgpNLvD\n0kwSJSgQICe9jh9VU0tuT3IujFPC3yAopfWViH5vAX7mrbgqKmUWU3MV9UbdHGA=\n=HH3v\n-----END PGP SIGNATURE-----\n", "payload": "tree d00a739e36f57744c29dc246dfbadce5ed44cf3a\nparent de622725480148f41e3c1cf0f52aeb230e5e1159\nparent 85bc9538920850e5bd7c1023c9ffbf5e8e69be6a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605799604 +0100\ncommitter GitHub <noreply@github.com> 1605799604 +0100\n\nRollup merge of #79164 - varkor:unbraced-single-segment-const-arguments, r=petrochenkov\n\nPermit standalone generic parameters as const generic arguments in macros\n\nFixes https://github.com/rust-lang/rust/issues/79127.\n\nr? ```@petrochenkov```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fffdc12be138ddf5fbd0f20d31026597d86d4e", "html_url": "https://github.com/rust-lang/rust/commit/b5fffdc12be138ddf5fbd0f20d31026597d86d4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5fffdc12be138ddf5fbd0f20d31026597d86d4e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de622725480148f41e3c1cf0f52aeb230e5e1159", "url": "https://api.github.com/repos/rust-lang/rust/commits/de622725480148f41e3c1cf0f52aeb230e5e1159", "html_url": "https://github.com/rust-lang/rust/commit/de622725480148f41e3c1cf0f52aeb230e5e1159"}, {"sha": "85bc9538920850e5bd7c1023c9ffbf5e8e69be6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a", "html_url": "https://github.com/rust-lang/rust/commit/85bc9538920850e5bd7c1023c9ffbf5e8e69be6a"}], "stats": {"total": 75, "additions": 51, "deletions": 24}, "files": [{"sha": "350a372a684cc5e7b6f829f1e13026c0f61a37c7", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5fffdc12be138ddf5fbd0f20d31026597d86d4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fffdc12be138ddf5fbd0f20d31026597d86d4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=b5fffdc12be138ddf5fbd0f20d31026597d86d4e", "patch": "@@ -1808,9 +1808,13 @@ impl<'a> Parser<'a> {\n         return Ok(false); // Don't continue.\n     }\n \n-    /// Handle a generic const argument that had not been enclosed in braces, and suggest enclosing\n-    /// it braces. In this situation, unlike in `handle_ambiguous_unbraced_const_arg`, this is\n-    /// almost certainly a const argument, so we always offer a suggestion.\n+    /// Attempt to parse a generic const argument that has not been enclosed in braces.\n+    /// There are a limited number of expressions that are permitted without being encoded\n+    /// in braces:\n+    /// - Literals.\n+    /// - Single-segment paths (i.e. standalone generic const parameters).\n+    /// All other expressions that can be parsed will emit an error suggesting the expression be\n+    /// wrapped in braces.\n     pub fn handle_unambiguous_unbraced_const_arg(&mut self) -> PResult<'a, P<Expr>> {\n         let start = self.token.span;\n         let expr = self.parse_expr_res(Restrictions::CONST_EXPR, None).map_err(|mut err| {"}, {"sha": "d64fd59b0a6574501dd7f79e81bb1a0339136f1f", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5fffdc12be138ddf5fbd0f20d31026597d86d4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fffdc12be138ddf5fbd0f20d31026597d86d4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=b5fffdc12be138ddf5fbd0f20d31026597d86d4e", "patch": "@@ -489,13 +489,21 @@ impl<'a> Parser<'a> {\n     /// - An expression surrounded in `{}`.\n     /// - A literal.\n     /// - A numeric literal prefixed by `-`.\n+    /// - A single-segment path.\n     pub(super) fn expr_is_valid_const_arg(&self, expr: &P<rustc_ast::Expr>) -> bool {\n         match &expr.kind {\n             ast::ExprKind::Block(_, _) | ast::ExprKind::Lit(_) => true,\n             ast::ExprKind::Unary(ast::UnOp::Neg, expr) => match &expr.kind {\n                 ast::ExprKind::Lit(_) => true,\n                 _ => false,\n             },\n+            // We can only resolve single-segment paths at the moment, because multi-segment paths\n+            // require type-checking: see `visit_generic_arg` in `src/librustc_resolve/late.rs`.\n+            ast::ExprKind::Path(None, path)\n+                if path.segments.len() == 1 && path.segments[0].args.is_none() =>\n+            {\n+                true\n+            }\n             _ => false,\n         }\n     }"}, {"sha": "3c9d4c9b4700f24f96be6d2840f46b391b147ea3", "filename": "src/test/ui/const-generics/macro_rules-braces.full.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5fffdc12be138ddf5fbd0f20d31026597d86d4e/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5fffdc12be138ddf5fbd0f20d31026597d86d4e/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr?ref=b5fffdc12be138ddf5fbd0f20d31026597d86d4e", "patch": "@@ -1,16 +1,16 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:34:17\n+  --> $DIR/macro_rules-braces.rs:49:17\n    |\n-LL |     let _: baz!(N);\n-   |                 ^\n+LL |     let _: baz!(m::P);\n+   |                 ^^^^\n    |\n help: enclose the `const` expression in braces\n    |\n-LL |     let _: baz!({ N });\n-   |                 ^   ^\n+LL |     let _: baz!({ m::P });\n+   |                 ^      ^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:54:17\n+  --> $DIR/macro_rules-braces.rs:69:17\n    |\n LL |     let _: baz!(10 + 7);\n    |                 ^^^^^^\n@@ -21,7 +21,7 @@ LL |     let _: baz!({ 10 + 7 });\n    |                 ^        ^\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:10:13\n+  --> $DIR/macro_rules-braces.rs:16:13\n    |\n LL |             [u8; $x]\n    |             ^^^^^^^^\n@@ -33,7 +33,7 @@ LL |     let _: foo!({{ N }});\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:15:13\n+  --> $DIR/macro_rules-braces.rs:21:13\n    |\n LL |             [u8; { $x }]\n    |             ^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL |     let _: bar!({ N });\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:20:13\n+  --> $DIR/macro_rules-braces.rs:26:13\n    |\n LL |             Foo<$x>\n    |             ^^^^^^^\n@@ -57,7 +57,7 @@ LL |     let _: baz!({{ N }});\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:25:13\n+  --> $DIR/macro_rules-braces.rs:31:13\n    |\n LL |             Foo<{ $x }>\n    |             ^^^^^^^^^^^"}, {"sha": "c6425edc10f159f4ff559c8299447af79c756122", "filename": "src/test/ui/const-generics/macro_rules-braces.min.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5fffdc12be138ddf5fbd0f20d31026597d86d4e/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5fffdc12be138ddf5fbd0f20d31026597d86d4e/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr?ref=b5fffdc12be138ddf5fbd0f20d31026597d86d4e", "patch": "@@ -1,16 +1,16 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:34:17\n+  --> $DIR/macro_rules-braces.rs:49:17\n    |\n-LL |     let _: baz!(N);\n-   |                 ^\n+LL |     let _: baz!(m::P);\n+   |                 ^^^^\n    |\n help: enclose the `const` expression in braces\n    |\n-LL |     let _: baz!({ N });\n-   |                 ^   ^\n+LL |     let _: baz!({ m::P });\n+   |                 ^      ^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:54:17\n+  --> $DIR/macro_rules-braces.rs:69:17\n    |\n LL |     let _: baz!(10 + 7);\n    |                 ^^^^^^\n@@ -21,31 +21,31 @@ LL |     let _: baz!({ 10 + 7 });\n    |                 ^        ^\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:31:20\n+  --> $DIR/macro_rules-braces.rs:37:20\n    |\n LL |     let _: foo!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:33:19\n+  --> $DIR/macro_rules-braces.rs:41:19\n    |\n LL |     let _: bar!({ N });\n    |                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:36:20\n+  --> $DIR/macro_rules-braces.rs:46:20\n    |\n LL |     let _: baz!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:38:19\n+  --> $DIR/macro_rules-braces.rs:51:19\n    |\n LL |     let _: biz!({ N });\n    |                   ^ cannot perform const operation using `N`"}, {"sha": "c6b43bec243f4d46c6a85f805833840d14fed8aa", "filename": "src/test/ui/const-generics/macro_rules-braces.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b5fffdc12be138ddf5fbd0f20d31026597d86d4e/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fffdc12be138ddf5fbd0f20d31026597d86d4e/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs?ref=b5fffdc12be138ddf5fbd0f20d31026597d86d4e", "patch": "@@ -3,6 +3,12 @@\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(min, feature(min_const_generics))]\n \n+mod m {\n+    pub const P: usize = 0;\n+}\n+\n+const Q: usize = 0;\n+\n fn test<const N: usize>() {\n     struct Foo<const M: usize>;\n     macro_rules! foo {\n@@ -29,13 +35,22 @@ fn test<const N: usize>() {\n     let _: foo!(N);\n     let _: foo!({ N });\n     let _: foo!({{ N }}); //[min]~ ERROR generic parameters may not\n+    let _: foo!(Q);\n+    let _: foo!(m::P);\n     let _: bar!(N);\n     let _: bar!({ N }); //[min]~ ERROR generic parameters may not\n-    let _: baz!(N); //~ ERROR expressions must be enclosed in braces\n+    let _: bar!(Q);\n+    let _: bar!(m::P);\n+    let _: baz!(N);\n     let _: baz!({ N });\n     let _: baz!({{ N }}); //[min]~ ERROR generic parameters may not\n+    let _: baz!(Q);\n+    let _: baz!({ m::P });\n+    let _: baz!(m::P); //~ ERROR expressions must be enclosed in braces\n     let _: biz!(N);\n     let _: biz!({ N }); //[min]~ ERROR generic parameters may not\n+    let _: biz!(Q);\n+    let _: biz!(m::P);\n     let _: foo!(3);\n     let _: foo!({ 3 });\n     let _: foo!({{ 3 }});"}]}