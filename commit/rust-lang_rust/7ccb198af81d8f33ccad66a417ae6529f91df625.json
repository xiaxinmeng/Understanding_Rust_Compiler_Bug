{"sha": "7ccb198af81d8f33ccad66a417ae6529f91df625", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjY2IxOThhZjgxZDhmMzNjY2FkNjZhNDE3YWU2NTI5ZjkxZGY2MjU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-09-05T13:51:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-09-05T13:51:26Z"}, "message": "Remove duplicated import merge logic", "tree": {"sha": "4ca7178f474eab6656a6acb482fffdf2f2b464ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca7178f474eab6656a6acb482fffdf2f2b464ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ccb198af81d8f33ccad66a417ae6529f91df625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ccb198af81d8f33ccad66a417ae6529f91df625", "html_url": "https://github.com/rust-lang/rust/commit/7ccb198af81d8f33ccad66a417ae6529f91df625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ccb198af81d8f33ccad66a417ae6529f91df625/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d201317c67eb1310ff775cf2164c9f4731c72c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/d201317c67eb1310ff775cf2164c9f4731c72c83", "html_url": "https://github.com/rust-lang/rust/commit/d201317c67eb1310ff775cf2164c9f4731c72c83"}], "stats": {"total": 120, "additions": 43, "deletions": 77}, "files": [{"sha": "da084d5fbdb8ef2737902ee3bc8520209e8ed1bf", "filename": "crates/assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 36, "deletions": 75, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/7ccb198af81d8f33ccad66a417ae6529f91df625/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ccb198af81d8f33ccad66a417ae6529f91df625/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=7ccb198af81d8f33ccad66a417ae6529f91df625", "patch": "@@ -1,14 +1,14 @@\n-use std::iter::successors;\n-\n use syntax::{\n-    algo::{neighbor, skip_trivia_token, SyntaxRewriter},\n-    ast::{self, edit::AstNodeEdit, make},\n-    AstNode, Direction, InsertPosition, SyntaxElement, T,\n+    algo::{neighbor, SyntaxRewriter},\n+    ast, AstNode,\n };\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n-    utils::next_prev,\n+    utils::{\n+        insert_use::{try_merge_imports, try_merge_trees},\n+        next_prev, MergeBehaviour,\n+    },\n     AssistId, AssistKind,\n };\n \n@@ -30,23 +30,22 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     let mut offset = ctx.offset();\n \n     if let Some(use_item) = tree.syntax().parent().and_then(ast::Use::cast) {\n-        let (merged, to_delete) = next_prev()\n-            .filter_map(|dir| neighbor(&use_item, dir))\n-            .filter_map(|it| Some((it.clone(), it.use_tree()?)))\n-            .find_map(|(use_item, use_tree)| {\n-                Some((try_merge_trees(&tree, &use_tree)?, use_item))\n+        let (merged, to_delete) =\n+            next_prev().filter_map(|dir| neighbor(&use_item, dir)).find_map(|use_item2| {\n+                try_merge_imports(&use_item, &use_item2, MergeBehaviour::Full).zip(Some(use_item2))\n             })?;\n \n-        rewriter.replace_ast(&tree, &merged);\n+        rewriter.replace_ast(&use_item, &merged);\n         rewriter += to_delete.remove();\n \n         if to_delete.syntax().text_range().end() < offset {\n             offset -= to_delete.syntax().text_range().len();\n         }\n     } else {\n-        let (merged, to_delete) = next_prev()\n-            .filter_map(|dir| neighbor(&tree, dir))\n-            .find_map(|use_tree| Some((try_merge_trees(&tree, &use_tree)?, use_tree.clone())))?;\n+        let (merged, to_delete) =\n+            next_prev().filter_map(|dir| neighbor(&tree, dir)).find_map(|use_tree| {\n+                try_merge_trees(&tree, &use_tree, MergeBehaviour::Full).zip(Some(use_tree))\n+            })?;\n \n         rewriter.replace_ast(&tree, &merged);\n         rewriter += to_delete.remove();\n@@ -67,66 +66,6 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     )\n }\n \n-fn try_merge_trees(old: &ast::UseTree, new: &ast::UseTree) -> Option<ast::UseTree> {\n-    let lhs_path = old.path()?;\n-    let rhs_path = new.path()?;\n-\n-    let (lhs_prefix, rhs_prefix) = common_prefix(&lhs_path, &rhs_path)?;\n-\n-    let lhs = old.split_prefix(&lhs_prefix);\n-    let rhs = new.split_prefix(&rhs_prefix);\n-\n-    let should_insert_comma = lhs\n-        .use_tree_list()?\n-        .r_curly_token()\n-        .and_then(|it| skip_trivia_token(it.prev_token()?, Direction::Prev))\n-        .map(|it| it.kind() != T![,])\n-        .unwrap_or(true);\n-\n-    let mut to_insert: Vec<SyntaxElement> = Vec::new();\n-    if should_insert_comma {\n-        to_insert.push(make::token(T![,]).into());\n-        to_insert.push(make::tokens::single_space().into());\n-    }\n-    to_insert.extend(\n-        rhs.use_tree_list()?\n-            .syntax()\n-            .children_with_tokens()\n-            .filter(|it| it.kind() != T!['{'] && it.kind() != T!['}']),\n-    );\n-    let use_tree_list = lhs.use_tree_list()?;\n-    let pos = InsertPosition::Before(use_tree_list.r_curly_token()?.into());\n-    let use_tree_list = use_tree_list.insert_children(pos, to_insert);\n-    Some(lhs.with_use_tree_list(use_tree_list))\n-}\n-\n-fn common_prefix(lhs: &ast::Path, rhs: &ast::Path) -> Option<(ast::Path, ast::Path)> {\n-    let mut res = None;\n-    let mut lhs_curr = first_path(&lhs);\n-    let mut rhs_curr = first_path(&rhs);\n-    loop {\n-        match (lhs_curr.segment(), rhs_curr.segment()) {\n-            (Some(lhs), Some(rhs)) if lhs.syntax().text() == rhs.syntax().text() => (),\n-            _ => break,\n-        }\n-        res = Some((lhs_curr.clone(), rhs_curr.clone()));\n-\n-        match (lhs_curr.parent_path(), rhs_curr.parent_path()) {\n-            (Some(lhs), Some(rhs)) => {\n-                lhs_curr = lhs;\n-                rhs_curr = rhs;\n-            }\n-            _ => break,\n-        }\n-    }\n-\n-    res\n-}\n-\n-fn first_path(path: &ast::Path) -> ast::Path {\n-    successors(Some(path.clone()), |it| it.qualifier()).last().unwrap()\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -188,6 +127,28 @@ use std::{fmt::{Display, self}};\n         );\n     }\n \n+    #[test]\n+    fn skip_pub1() {\n+        check_assist_not_applicable(\n+            merge_imports,\n+            r\"\n+pub use std::fmt<|>::Debug;\n+use std::fmt::Display;\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn skip_pub_last() {\n+        check_assist_not_applicable(\n+            merge_imports,\n+            r\"\n+use std::fmt<|>::Debug;\n+pub use std::fmt::Display;\n+\",\n+        );\n+    }\n+\n     #[test]\n     fn test_merge_nested() {\n         check_assist("}, {"sha": "a920e12c58a39cd42bb2eda7eb237bca7a9e60bb", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ccb198af81d8f33ccad66a417ae6529f91df625/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ccb198af81d8f33ccad66a417ae6529f91df625/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=7ccb198af81d8f33ccad66a417ae6529f91df625", "patch": "@@ -143,8 +143,13 @@ pub(crate) fn try_merge_imports(\n     new: &ast::Use,\n     merge_behaviour: MergeBehaviour,\n ) -> Option<ast::Use> {\n-    // don't merge into re-exports\n-    if old.visibility().and_then(|vis| vis.pub_token()).is_some() {\n+    // don't merge imports with different visibilities\n+    if old\n+        .visibility()\n+        .and_then(|vis| vis.pub_token())\n+        .or_else(|| new.visibility().and_then(|vis| vis.pub_token()))\n+        .is_some()\n+    {\n         return None;\n     }\n     let old_tree = old.use_tree()?;"}]}