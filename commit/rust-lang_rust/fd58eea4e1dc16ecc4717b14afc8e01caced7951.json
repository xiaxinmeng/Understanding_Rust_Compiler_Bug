{"sha": "fd58eea4e1dc16ecc4717b14afc8e01caced7951", "node_id": "C_kwDOAAsO6NoAKGZkNThlZWE0ZTFkYzE2ZWNjNDcxN2IxNGFmYzhlMDFjYWNlZDc5NTE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-13T21:13:14Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-24T15:57:14Z"}, "message": "resolve: Do not cache nearest parent mod in `ModuleData`", "tree": {"sha": "14d945cca3a131e0c9b064d2780638f5f547d9df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14d945cca3a131e0c9b064d2780638f5f547d9df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd58eea4e1dc16ecc4717b14afc8e01caced7951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd58eea4e1dc16ecc4717b14afc8e01caced7951", "html_url": "https://github.com/rust-lang/rust/commit/fd58eea4e1dc16ecc4717b14afc8e01caced7951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd58eea4e1dc16ecc4717b14afc8e01caced7951/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0648eab3686f100c7ab9b0d38472c740079cce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0648eab3686f100c7ab9b0d38472c740079cce4", "html_url": "https://github.com/rust-lang/rust/commit/a0648eab3686f100c7ab9b0d38472c740079cce4"}], "stats": {"total": 93, "additions": 36, "deletions": 57}, "files": [{"sha": "32d298e91d5b11e278847984ebf46cdf50d5dc83", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fd58eea4e1dc16ecc4717b14afc8e01caced7951/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd58eea4e1dc16ecc4717b14afc8e01caced7951/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=fd58eea4e1dc16ecc4717b14afc8e01caced7951", "patch": "@@ -146,7 +146,6 @@ impl<'a> Resolver<'a> {\n         let module = self.arenas.alloc_module(ModuleData::new(\n             parent,\n             kind,\n-            def_id,\n             self.cstore().module_expansion_untracked(def_id, &self.session),\n             self.cstore().get_span_untracked(def_id, &self.session),\n         ));\n@@ -274,7 +273,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         self.r.visibilities[&def_id.expect_local()]\n                     }\n                     // Otherwise, the visibility is restricted to the nearest parent `mod` item.\n-                    _ => ty::Visibility::Restricted(self.parent_scope.module.nearest_parent_mod),\n+                    _ => ty::Visibility::Restricted(self.parent_scope.module.nearest_parent_mod()),\n                 })\n             }\n             ast::VisibilityKind::Restricted { ref path, id, .. } => {\n@@ -773,13 +772,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     no_implicit_prelude: parent.no_implicit_prelude || {\n                         self.r.session.contains_name(&item.attrs, sym::no_implicit_prelude)\n                     },\n-                    ..ModuleData::new(\n-                        Some(parent),\n-                        module_kind,\n-                        def_id,\n-                        expansion.to_expn_id(),\n-                        item.span,\n-                    )\n+                    ..ModuleData::new(Some(parent), module_kind, expansion.to_expn_id(), item.span)\n                 });\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.r.module_map.insert(local_def_id, module);\n@@ -814,13 +807,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n             ItemKind::Enum(_, _) => {\n                 let module_kind = ModuleKind::Def(DefKind::Enum, def_id, ident.name);\n-                let module = self.r.new_module(\n-                    parent,\n-                    module_kind,\n-                    parent.nearest_parent_mod,\n-                    expansion.to_expn_id(),\n-                    item.span,\n-                );\n+                let module =\n+                    self.r.new_module(parent, module_kind, expansion.to_expn_id(), item.span);\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.parent_scope.module = module;\n             }\n@@ -889,13 +877,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             ItemKind::Trait(..) => {\n                 // Add all the items within to a new module.\n                 let module_kind = ModuleKind::Def(DefKind::Trait, def_id, ident.name);\n-                let module = self.r.new_module(\n-                    parent,\n-                    module_kind,\n-                    parent.nearest_parent_mod,\n-                    expansion.to_expn_id(),\n-                    item.span,\n-                );\n+                let module =\n+                    self.r.new_module(parent, module_kind, expansion.to_expn_id(), item.span);\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.parent_scope.module = module;\n             }\n@@ -935,7 +918,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             let module = self.r.new_module(\n                 parent,\n                 ModuleKind::Block(block.id),\n-                parent.nearest_parent_mod,\n                 expansion.to_expn_id(),\n                 block.span,\n             );\n@@ -956,7 +938,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 let module = self.r.new_module(\n                     parent,\n                     ModuleKind::Def(kind, def_id, ident.name),\n-                    def_id,\n                     expansion.to_expn_id(),\n                     span,\n                 );"}, {"sha": "c92353ab7c00893076918006ba3507cd78d240c8", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd58eea4e1dc16ecc4717b14afc8e01caced7951/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd58eea4e1dc16ecc4717b14afc8e01caced7951/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=fd58eea4e1dc16ecc4717b14afc8e01caced7951", "patch": "@@ -1872,7 +1872,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             if this.should_report_errs() {\n                 let (err, candidates) = this.smart_resolve_report_errors(path, span, source, res);\n \n-                let def_id = this.parent_scope.module.nearest_parent_mod;\n+                let def_id = this.parent_scope.module.nearest_parent_mod();\n                 let instead = res.is_some();\n                 let suggestion =\n                     if res.is_none() { this.report_missing_type_error(path) } else { None };\n@@ -1940,7 +1940,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             drop(parent_err);\n \n-            let def_id = this.parent_scope.module.nearest_parent_mod;\n+            let def_id = this.parent_scope.module.nearest_parent_mod();\n \n             if this.should_report_errs() {\n                 this.r.use_injections.push(UseError {"}, {"sha": "4486f379cd940753777a84997908acc8eece490c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fd58eea4e1dc16ecc4717b14afc8e01caced7951/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd58eea4e1dc16ecc4717b14afc8e01caced7951/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=fd58eea4e1dc16ecc4717b14afc8e01caced7951", "patch": "@@ -40,7 +40,8 @@ use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefPathHash, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefPathHash, LocalDefId};\n+use rustc_hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::TraitCandidate;\n use rustc_index::vec::IndexVec;\n@@ -505,10 +506,6 @@ pub struct ModuleData<'a> {\n     /// What kind of module this is, because this may not be a `mod`.\n     kind: ModuleKind,\n \n-    /// The [`DefId`] of the nearest `mod` item ancestor (which may be this module).\n-    /// This may be the crate root.\n-    nearest_parent_mod: DefId,\n-\n     /// Mapping between names and their (possibly in-progress) resolutions in this module.\n     /// Resolutions in modules from other crates are not populated until accessed.\n     lazy_resolutions: Resolutions<'a>,\n@@ -536,19 +533,16 @@ pub struct ModuleData<'a> {\n type Module<'a> = &'a ModuleData<'a>;\n \n impl<'a> ModuleData<'a> {\n-    fn new(\n-        parent: Option<Module<'a>>,\n-        kind: ModuleKind,\n-        nearest_parent_mod: DefId,\n-        expansion: ExpnId,\n-        span: Span,\n-    ) -> Self {\n+    fn new(parent: Option<Module<'a>>, kind: ModuleKind, expansion: ExpnId, span: Span) -> Self {\n+        let is_foreign = match kind {\n+            ModuleKind::Def(_, def_id, _) => !def_id.is_local(),\n+            ModuleKind::Block(_) => false,\n+        };\n         ModuleData {\n             parent,\n             kind,\n-            nearest_parent_mod,\n             lazy_resolutions: Default::default(),\n-            populate_on_access: Cell::new(!nearest_parent_mod.is_local()),\n+            populate_on_access: Cell::new(is_foreign),\n             unexpanded_invocations: Default::default(),\n             no_implicit_prelude: false,\n             glob_importers: RefCell::new(Vec::new()),\n@@ -623,6 +617,15 @@ impl<'a> ModuleData<'a> {\n         }\n     }\n \n+    /// The [`DefId`] of the nearest `mod` item ancestor (which may be this module).\n+    /// This may be the crate root.\n+    fn nearest_parent_mod(&self) -> DefId {\n+        match self.kind {\n+            ModuleKind::Def(DefKind::Mod, def_id, _) => def_id,\n+            _ => self.parent.expect(\"non-root module without parent\").nearest_parent_mod(),\n+        }\n+    }\n+\n     fn is_ancestor_of(&self, mut other: &Self) -> bool {\n         while !ptr::eq(self, other) {\n             if let Some(parent) = other.parent {\n@@ -1260,18 +1263,12 @@ impl<'a> Resolver<'a> {\n         let root_module_kind = ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty);\n         let graph_root = arenas.alloc_module(ModuleData {\n             no_implicit_prelude: session.contains_name(&krate.attrs, sym::no_implicit_prelude),\n-            ..ModuleData::new(None, root_module_kind, root_def_id, ExpnId::root(), krate.span)\n+            ..ModuleData::new(None, root_module_kind, ExpnId::root(), krate.span)\n         });\n         let empty_module_kind = ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty);\n         let empty_module = arenas.alloc_module(ModuleData {\n             no_implicit_prelude: true,\n-            ..ModuleData::new(\n-                Some(graph_root),\n-                empty_module_kind,\n-                root_def_id,\n-                ExpnId::root(),\n-                DUMMY_SP,\n-            )\n+            ..ModuleData::new(Some(graph_root), empty_module_kind, ExpnId::root(), DUMMY_SP)\n         });\n         let mut module_map = FxHashMap::default();\n         module_map.insert(root_local_def_id, graph_root);\n@@ -1636,11 +1633,10 @@ impl<'a> Resolver<'a> {\n         &self,\n         parent: Module<'a>,\n         kind: ModuleKind,\n-        nearest_parent_mod: DefId,\n         expn_id: ExpnId,\n         span: Span,\n     ) -> Module<'a> {\n-        let module = ModuleData::new(Some(parent), kind, nearest_parent_mod, expn_id, span);\n+        let module = ModuleData::new(Some(parent), kind, expn_id, span);\n         self.arenas.alloc_module(module)\n     }\n \n@@ -2167,7 +2163,9 @@ impl<'a> Resolver<'a> {\n                 return self.graph_root;\n             }\n         };\n-        let module = self.get_module(DefId { index: CRATE_DEF_INDEX, ..module.nearest_parent_mod });\n+        let module =\n+            self.get_module(module.def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id());\n+\n         debug!(\n             \"resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})\",\n             ident,\n@@ -2179,10 +2177,10 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {\n-        let mut module = self.get_module(module.nearest_parent_mod);\n+        let mut module = self.get_module(module.nearest_parent_mod());\n         while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {\n             let parent = module.parent.unwrap_or_else(|| self.macro_def_scope(ctxt.remove_mark()));\n-            module = self.get_module(parent.nearest_parent_mod);\n+            module = self.get_module(parent.nearest_parent_mod());\n         }\n         module\n     }\n@@ -2896,7 +2894,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {\n-        vis.is_accessible_from(module.nearest_parent_mod, self)\n+        vis.is_accessible_from(module.nearest_parent_mod(), self)\n     }\n \n     fn set_binding_parent_module(&mut self, binding: &'a NameBinding<'a>, module: Module<'a>) {\n@@ -2920,7 +2918,7 @@ impl<'a> Resolver<'a> {\n             self.binding_parent_modules.get(&PtrKey(modularized)),\n         ) {\n             (Some(macro_rules), Some(modularized)) => {\n-                macro_rules.nearest_parent_mod == modularized.nearest_parent_mod\n+                macro_rules.nearest_parent_mod() == modularized.nearest_parent_mod()\n                     && modularized.is_ancestor_of(macro_rules)\n             }\n             _ => false,"}, {"sha": "5624f8bdb8579d811f1ed9027c34b9531c6b8474", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd58eea4e1dc16ecc4717b14afc8e01caced7951/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd58eea4e1dc16ecc4717b14afc8e01caced7951/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=fd58eea4e1dc16ecc4717b14afc8e01caced7951", "patch": "@@ -305,7 +305,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                 fast_print_path(path),\n                 res.opt_def_id(),\n                 res.opt_def_id().map(|macro_def_id| {\n-                    self.macro_def_scope_from_def_id(macro_def_id).nearest_parent_mod\n+                    self.macro_def_scope_from_def_id(macro_def_id).nearest_parent_mod()\n                 }),\n             ),\n             self.create_stable_hashing_context(),"}]}