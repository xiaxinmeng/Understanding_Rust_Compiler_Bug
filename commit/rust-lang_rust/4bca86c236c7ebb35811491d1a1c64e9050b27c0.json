{"sha": "4bca86c236c7ebb35811491d1a1c64e9050b27c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiY2E4NmMyMzZjN2ViYjM1ODExNDkxZDFhMWM2NGU5MDUwYjI3YzA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-26T14:10:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-26T14:11:33Z"}, "message": "Use malloc in mini_core::allocate", "tree": {"sha": "18c5d4fa8ab69d055bb3851436bbe2c289d106ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c5d4fa8ab69d055bb3851436bbe2c289d106ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bca86c236c7ebb35811491d1a1c64e9050b27c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bca86c236c7ebb35811491d1a1c64e9050b27c0", "html_url": "https://github.com/rust-lang/rust/commit/4bca86c236c7ebb35811491d1a1c64e9050b27c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bca86c236c7ebb35811491d1a1c64e9050b27c0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fbff29a4a0bbd8362958d20e4ca8fba185330cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbff29a4a0bbd8362958d20e4ca8fba185330cb", "html_url": "https://github.com/rust-lang/rust/commit/4fbff29a4a0bbd8362958d20e4ca8fba185330cb"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "8b21d62ea54075f0be2f2f0410594258f79f49ab", "filename": "example/mini_core.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4bca86c236c7ebb35811491d1a1c64e9050b27c0/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bca86c236c7ebb35811491d1a1c64e9050b27c0/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=4bca86c236c7ebb35811491d1a1c64e9050b27c0", "patch": "@@ -51,6 +51,7 @@ unsafe impl Copy for isize {}\n unsafe impl Copy for char {}\n unsafe impl<'a, T: ?Sized> Copy for &'a T {}\n unsafe impl<T: ?Sized> Copy for *const T {}\n+unsafe impl<T: ?Sized> Copy for *mut T {}\n \n #[lang = \"sync\"]\n pub unsafe trait Sync {}\n@@ -118,6 +119,14 @@ impl Add for u8 {\n     }\n }\n \n+impl Add for usize {\n+    type Output = Self;\n+\n+    fn add(self, rhs: Self) -> Self {\n+        self + rhs\n+    }\n+}\n+\n #[lang = \"sub\"]\n pub trait Sub<RHS = Self> {\n     type Output;\n@@ -172,6 +181,33 @@ impl PartialEq for u8 {\n     }\n }\n \n+impl PartialEq for u16 {\n+    fn eq(&self, other: &u16) -> bool {\n+        (*self) == (*other)\n+    }\n+    fn ne(&self, other: &u16) -> bool {\n+        (*self) != (*other)\n+    }\n+}\n+\n+impl PartialEq for u32 {\n+    fn eq(&self, other: &u32) -> bool {\n+        (*self) == (*other)\n+    }\n+    fn ne(&self, other: &u32) -> bool {\n+        (*self) != (*other)\n+    }\n+}\n+\n+impl PartialEq for usize {\n+    fn eq(&self, other: &usize) -> bool {\n+        (*self) == (*other)\n+    }\n+    fn ne(&self, other: &usize) -> bool {\n+        (*self) != (*other)\n+    }\n+}\n+\n impl PartialEq for char {\n     fn eq(&self, other: &char) -> bool {\n         (*self) == (*other)\n@@ -230,7 +266,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n }\n \n #[lang = \"panic\"]\n-pub fn panic(_expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n+pub fn panic(&(_msg, _file, _line, _col): &(&'static str, &'static str, u32, u32)) -> ! {\n     unsafe {\n         intrinsics::abort();\n     }\n@@ -254,11 +290,12 @@ pub struct Box<T: ?Sized>(*mut T);\n \n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n \n-static mut MY_TINY_HEAP: [u8; 16] = [0xff; 16];\n-\n #[lang = \"exchange_malloc\"]\n+// Make it available to jited mini_core_hello_world\n+// FIXME remove next line when jit supports linking rlibs\n+#[inline(always)]\n unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n-    &mut MY_TINY_HEAP as *mut [u8; 16] as *mut u8\n+    libc::malloc(size)\n }\n \n #[lang = \"drop\"]\n@@ -281,6 +318,17 @@ pub mod intrinsics {\n     }\n }\n \n+pub mod libc {\n+    #[link(name = \"c\")]\n+    extern \"C\" {\n+        pub fn puts(s: *const u8);\n+        pub fn malloc(size: usize) -> *mut u8;\n+        pub fn memcpy(dst: *mut u8, src: *const u8, size: usize);\n+        pub fn memmove(dst: *mut u8, src: *const u8, size: usize);\n+        pub fn strncpy(dst: *mut u8, src: *const u8, size: usize);\n+    }\n+}\n+\n #[lang = \"index\"]\n pub trait Index<Idx: ?Sized> {\n     type Output: ?Sized;"}, {"sha": "1ddd203e02886f511671d7c8780f338f5ef0ae74", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bca86c236c7ebb35811491d1a1c64e9050b27c0/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bca86c236c7ebb35811491d1a1c64e9050b27c0/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=4bca86c236c7ebb35811491d1a1c64e9050b27c0", "patch": "@@ -7,11 +7,7 @@\n extern crate mini_core;\n \n use mini_core::*;\n-\n-#[link(name = \"c\")]\n-extern \"C\" {\n-    fn puts(s: *const u8);\n-}\n+use mini_core::libc::*;\n \n unsafe extern \"C\" fn my_puts(s: *const u8) {\n     puts(s);\n@@ -132,13 +128,9 @@ fn main() {\n         let ptr: *const u8 = hello as *const [u8] as *const u8;\n         puts(ptr);\n \n-        // TODO remove when jit supports linking rlibs\n-        #[cfg(not(jit))]\n-        {\n-            let world: Box<&str> = box \"World!\\0\";\n-            puts(*world as *const str as *const u8);\n-            world as Box<SomeTrait>;\n-        }\n+        let world: Box<&str> = box \"World!\\0\";\n+        puts(*world as *const str as *const u8);\n+        world as Box<SomeTrait>;\n \n         assert_eq!(intrinsics::size_of_val(hello) as u8, 6);\n "}]}