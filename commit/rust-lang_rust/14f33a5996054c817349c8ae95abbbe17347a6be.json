{"sha": "14f33a5996054c817349c8ae95abbbe17347a6be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZjMzYTU5OTYwNTRjODE3MzQ5YzhhZTk1YWJiYmUxNzM0N2E2YmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-30T18:51:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-30T18:51:13Z"}, "message": "Auto merge of #30778 - fhahn:issue-21195-expect-help, r=nikomatsakis\n\nThis is a PR for #21195. It changes the way unspecified `help` and `\u01f9ote` messages are handled in compile-fail tests as suggested by @oli-obk in the issue: if there are some `note` or `help` annotations, there must be annotations for all `help` or `note` messages of this test. Maybe it makes also sense to add an option to specify that the this test should fail if there are unspecified `help` or `note` messages.\n\nWith this change, the following tests fail:\n\n    [compile-fail] compile-fail/changing-crates.rs\n    [compile-fail] compile-fail/default_ty_param_conflict_cross_crate.rs\n    [compile-fail] compile-fail/lifetime-inference-give-expl-lifetime-param.rs\n    [compile-fail] compile-fail/privacy1.rs\n    [compile-fail] compile-fail/svh-change-lit.rs\n    [compile-fail] compile-fail/svh-change-significant-cfg.rs\n    [compile-fail] compile-fail/svh-change-trait-bound.rs\n    [compile-fail] compile-fail/svh-change-type-arg.rs\n    [compile-fail] compile-fail/svh-change-type-ret.rs\n    [compile-fail] compile-fail/svh-change-type-static.rs\n    [compile-fail] compile-fail/svh-use-trait.rs\n\nI'll add the missing annotations if we decide to accept this change.", "tree": {"sha": "e34a52b52f29db4568470083d07d0225f28dd51c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e34a52b52f29db4568470083d07d0225f28dd51c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14f33a5996054c817349c8ae95abbbe17347a6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14f33a5996054c817349c8ae95abbbe17347a6be", "html_url": "https://github.com/rust-lang/rust/commit/14f33a5996054c817349c8ae95abbbe17347a6be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14f33a5996054c817349c8ae95abbbe17347a6be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "449e8bf3048d144fd5b82dd1a1a1060ff86b2877", "url": "https://api.github.com/repos/rust-lang/rust/commits/449e8bf3048d144fd5b82dd1a1a1060ff86b2877", "html_url": "https://github.com/rust-lang/rust/commit/449e8bf3048d144fd5b82dd1a1a1060ff86b2877"}, {"sha": "526965aee54166dfba1b14b9bc475da8abcd66a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/526965aee54166dfba1b14b9bc475da8abcd66a3", "html_url": "https://github.com/rust-lang/rust/commit/526965aee54166dfba1b14b9bc475da8abcd66a3"}], "stats": {"total": 78, "additions": 63, "deletions": 15}, "files": [{"sha": "4abc4cce7273b077d41f3edbf1d05f6e2f3aada9", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -929,6 +929,13 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError>,\n         format!(\"{}:{}:\", testfile.display(), ee.line)\n     }).collect::<Vec<String>>();\n \n+    let (expect_help, expect_note) =\n+        expected_errors.iter()\n+                        .fold((false, false),\n+                              |(acc_help, acc_note), ee|\n+                                  (acc_help || ee.kind == \"help:\", acc_note ||\n+                                   ee.kind == \"note:\"));\n+\n     fn prefix_matches(line: &str, prefix: &str) -> bool {\n         use std::ascii::AsciiExt;\n         // On windows just translate all '\\' path separators to '/'\n@@ -992,8 +999,8 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError>,\n             was_expected = true;\n         }\n \n-        if !was_expected && is_compiler_error_or_warning(line) {\n-            fatal_proc_rec(&format!(\"unexpected compiler error or warning: '{}'\",\n+        if !was_expected && is_unexpected_compiler_message(line, expect_help, expect_note) {\n+            fatal_proc_rec(&format!(\"unexpected compiler message: '{}'\",\n                                     line),\n                           proc_res);\n         }\n@@ -1009,16 +1016,15 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError>,\n     }\n }\n \n-fn is_compiler_error_or_warning(line: &str) -> bool {\n+fn is_unexpected_compiler_message(line: &str, expect_help: bool, expect_note: bool) -> bool {\n     let mut c = Path::new(line).components();\n     let line = match c.next() {\n         Some(Component::Prefix(_)) => c.as_path().to_str().unwrap(),\n         _ => line,\n     };\n \n     let mut i = 0;\n-    return\n-        scan_until_char(line, ':', &mut i) &&\n+    return scan_until_char(line, ':', &mut i) &&\n         scan_char(line, ':', &mut i) &&\n         scan_integer(line, &mut i) &&\n         scan_char(line, ':', &mut i) &&\n@@ -1030,7 +1036,10 @@ fn is_compiler_error_or_warning(line: &str) -> bool {\n         scan_integer(line, &mut i) &&\n         scan_char(line, ' ', &mut i) &&\n         (scan_string(line, \"error\", &mut i) ||\n-         scan_string(line, \"warning\", &mut i));\n+         scan_string(line, \"warning\", &mut i) ||\n+         (expect_help && scan_string(line, \"help\", &mut i)) ||\n+         (expect_note && scan_string(line, \"note\", &mut i))\n+        );\n }\n \n fn scan_until_char(haystack: &str, needle: char, idx: &mut usize) -> bool {"}, {"sha": "0b420158488229de571db0d9458c2c96f4526cec", "filename": "src/test/compile-fail/changing-crates.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fchanging-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fchanging-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fchanging-crates.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -8,13 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-msvc FIXME #31306\n+\n // note that these aux-build directives must be in this order\n // aux-build:changing-crates-a1.rs\n // aux-build:changing-crates-b.rs\n // aux-build:changing-crates-a2.rs\n \n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n-//~^ NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: crate `a` path #1:\n+//~| NOTE: crate `b` path #1:\n \n fn main() {}"}, {"sha": "fc2c49d65affec7d5c67006a2848e501206e5ce2", "filename": "src/test/compile-fail/default_ty_param_conflict_cross_crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -26,4 +26,5 @@ fn main() {\n     meh(foo);\n     //~^ ERROR: mismatched types:\n     //~| NOTE: conflicting type parameter defaults `bool` and `char`\n+    //~| NOTE:  ...that was applied to an unconstrained type variable here\n }"}, {"sha": "e32ed1c42a09088e421b6c12ea59feec6a27ad8a", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -49,6 +49,7 @@ struct Baz<'x> {\n \n impl<'a> Baz<'a> {\n     fn baz2<'b>(&self, x: &isize) -> (&'b isize, &'b isize) {\n+         //~^ HELP: parameter as shown: fn baz2<'b>(&self, x: &'b isize) -> (&'a isize, &'a isize)\n         // The lifetime that gets assigned to `x` seems somewhat random.\n         // I have disabled this test for the time being. --pcwalton\n         (self.bar, x) //~ ERROR: cannot infer"}, {"sha": "495cdc3fe62e287062ee83fb588bc3e16439fc08", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -129,12 +129,17 @@ mod foo {\n         ::bar::baz::foo(); //~ ERROR: function `foo` is inaccessible\n                            //~^ NOTE: module `baz` is private\n         ::bar::baz::bar(); //~ ERROR: function `bar` is inaccessible\n+                           //~^ NOTE: module `baz` is private\n     }\n \n     fn test2() {\n         use bar::baz::{foo, bar};\n         //~^ ERROR: function `foo` is inaccessible\n-        //~^^ ERROR: function `bar` is inaccessible\n+        //~| NOTE: module `baz` is private\n+        //~| ERROR: function `bar` is inaccessible\n+        //~| NOTE: module `baz` is private\n+\n+\n         foo();\n         bar();\n     }"}, {"sha": "eb92bcf065d3f582150d8683af12cb422d41a45a", "filename": "src/test/compile-fail/svh-change-lit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-lit.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -8,14 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-msvc FIXME #31306\n+\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs\n // aux-build:svh-a-change-lit.rs\n \n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n-//~^ NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: crate `a` path #1:\n+//~| NOTE: crate `b` path #1:\n \n fn main() {\n     b::foo()"}, {"sha": "7c9e0d3a92c98517406dc658fcbd0a0c333ff6d8", "filename": "src/test/compile-fail/svh-change-significant-cfg.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-significant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-significant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-significant-cfg.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -8,14 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-msvc FIXME #31306\n+\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs\n // aux-build:svh-a-change-significant-cfg.rs\n \n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n-//~^ NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: crate `a` path #1:\n+//~| NOTE: crate `b` path #1:\n \n fn main() {\n     b::foo()"}, {"sha": "1e6a7232904a8b344260e157bd76d8df8bfd2aab", "filename": "src/test/compile-fail/svh-change-trait-bound.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-trait-bound.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -8,14 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-msvc FIXME #31306\n+\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs\n // aux-build:svh-a-change-trait-bound.rs\n \n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n-//~^ NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: crate `a` path #1:\n+//~| NOTE: crate `b` path #1:\n \n fn main() {\n     b::foo()"}, {"sha": "73c35ee6f82ca6b89438d63f89f54ab5ec9c888d", "filename": "src/test/compile-fail/svh-change-type-arg.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-arg.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -8,14 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-msvc FIXME #31306\n+\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs\n // aux-build:svh-a-change-type-arg.rs\n \n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n-//~^ NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: crate `a` path #1:\n+//~| NOTE: crate `b` path #1:\n \n fn main() {\n     b::foo()"}, {"sha": "b8908e2cbd1e506d549f99cd051d2be27828c863", "filename": "src/test/compile-fail/svh-change-type-ret.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-ret.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -8,14 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-msvc FIXME #31306\n+\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs\n // aux-build:svh-a-change-type-ret.rs\n \n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n-//~^ NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: crate `a` path #1:\n+//~| NOTE: crate `b` path #1:\n \n fn main() {\n     b::foo()"}, {"sha": "291e441aa5e2dc800ac24203324fa64cc03e7667", "filename": "src/test/compile-fail/svh-change-type-static.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-static.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -8,14 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-msvc FIXME #31306\n+\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs\n // aux-build:svh-a-change-type-static.rs\n \n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n-//~^ NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: crate `a` path #1:\n+//~| NOTE: crate `b` path #1:\n \n fn main() {\n     b::foo()"}, {"sha": "ed816a93c52d230ec59382fd76bf9059cba8c2a1", "filename": "src/test/compile-fail/svh-use-trait.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f33a5996054c817349c8ae95abbbe17347a6be/src%2Ftest%2Fcompile-fail%2Fsvh-use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-use-trait.rs?ref=14f33a5996054c817349c8ae95abbbe17347a6be", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-msvc FIXME #31306\n+\n // note that these aux-build directives must be in this order\n // aux-build:svh-uta-base.rs\n // aux-build:svh-utb.rs\n@@ -20,7 +22,9 @@\n \n extern crate uta;\n extern crate utb; //~ ERROR: found possibly newer version of crate `uta` which `utb` depends\n-//~^ NOTE: perhaps this crate needs to be recompiled\n+//~| NOTE: perhaps this crate needs to be recompiled?\n+//~| NOTE: crate `uta` path #1:\n+//~| NOTE: crate `utb` path #1:\n \n fn main() {\n     utb::foo()"}]}