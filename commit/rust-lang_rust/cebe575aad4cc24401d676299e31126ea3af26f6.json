{"sha": "cebe575aad4cc24401d676299e31126ea3af26f6", "node_id": "C_kwDOAAsO6NoAKGNlYmU1NzVhYWQ0Y2MyNDQwMWQ2NzYyOTllMzExMjZlYTNhZjI2ZjY", "commit": {"author": {"name": "InfRandomness", "email": "infrandomness@gmail.com", "date": "2022-03-29T17:19:16Z"}, "committer": {"name": "infrandomness", "email": "infrandomness@gmail.com", "date": "2022-04-06T17:25:58Z"}, "message": "Add .err().expect() lint", "tree": {"sha": "5dbb8a3762fb66e13dbedd2c7687a38a965cafdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dbb8a3762fb66e13dbedd2c7687a38a965cafdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cebe575aad4cc24401d676299e31126ea3af26f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cebe575aad4cc24401d676299e31126ea3af26f6", "html_url": "https://github.com/rust-lang/rust/commit/cebe575aad4cc24401d676299e31126ea3af26f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cebe575aad4cc24401d676299e31126ea3af26f6/comments", "author": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "committer": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30019d1d052f824cb31185881b71f7dba967bd96", "url": "https://api.github.com/repos/rust-lang/rust/commits/30019d1d052f824cb31185881b71f7dba967bd96", "html_url": "https://github.com/rust-lang/rust/commit/30019d1d052f824cb31185881b71f7dba967bd96"}], "stats": {"total": 143, "additions": 137, "deletions": 6}, "files": [{"sha": "887f5c1cb3b4f2e26f2b0fb96371090c38b909cb", "filename": "clippy_lints/src/methods/err_expect.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cebe575aad4cc24401d676299e31126ea3af26f6/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebe575aad4cc24401d676299e31126ea3af26f6/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs?ref=cebe575aad4cc24401d676299e31126ea3af26f6", "patch": "@@ -0,0 +1,59 @@\n+use super::ERR_EXPECT;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::{meets_msrv, msrvs, ty::is_type_diagnostic_item};\n+use rustc_errors::Applicability;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_middle::ty::Ty;\n+use rustc_semver::RustcVersion;\n+use rustc_span::{sym, Span};\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    _expr: &rustc_hir::Expr<'_>,\n+    recv: &rustc_hir::Expr<'_>,\n+    msrv: Option<&RustcVersion>,\n+    expect_span: Span,\n+    err_span: Span,\n+) {\n+    if_chain! {\n+        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n+        // Test the version to make sure the lint can be showed (expect_err has been introduced in rust 1.17.0 : https://github.com/rust-lang/rust/pull/38982)\n+        if meets_msrv(msrv, &msrvs::EXPECT_ERR);\n+\n+        // Grabs the `Result<T, E>` type\n+        let result_type = cx.typeck_results().expr_ty(recv);\n+        // Tests if the T type in a `Result<T, E>` is not None\n+        if let Some(data_type) = get_data_type(cx, result_type);\n+        // Tests if the T type in a `Result<T, E>` implements debug\n+        if has_debug_impl(data_type, cx);\n+\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                ERR_EXPECT,\n+                err_span.to(expect_span),\n+                \"called `.err().expect()` on a `Result` value\",\n+                \"try\",\n+                \"expect_err\".to_string(),\n+                Applicability::MachineApplicable\n+        );\n+        }\n+    };\n+}\n+\n+/// Given a `Result<T, E>` type, return its data (`T`).\n+fn get_data_type<'a>(cx: &LateContext<'_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n+    match ty.kind() {\n+        ty::Adt(_, substs) if is_type_diagnostic_item(cx, ty, sym::Result) => substs.types().next(),\n+        _ => None,\n+    }\n+}\n+\n+/// Given a type, very if the Debug trait has been impl'd\n+fn has_debug_impl<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n+    cx.tcx\n+        .get_diagnostic_item(sym::Debug)\n+        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n+}"}, {"sha": "4475f8eaf5972e4db719ba8fb78a84ddba6f6f9c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cebe575aad4cc24401d676299e31126ea3af26f6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebe575aad4cc24401d676299e31126ea3af26f6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=cebe575aad4cc24401d676299e31126ea3af26f6", "patch": "@@ -9,6 +9,7 @@ mod chars_next_cmp_with_unwrap;\n mod clone_on_copy;\n mod clone_on_ref_ptr;\n mod cloned_instead_of_copied;\n+mod err_expect;\n mod expect_fun_call;\n mod expect_used;\n mod extend_with_drain;\n@@ -362,6 +363,29 @@ declare_clippy_lint! {\n     \"using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `.err().expect()` calls on the `Result` type.\n+    ///\n+    /// ### Why is this bad?\n+    /// `.expect_err()` can be called directly to avoid the extra type conversion from `ok()`.\n+    ///\n+    /// ### Example\n+    /// ```should_panic\n+    /// let x: Result<u32, &str> = Ok(10);\n+    /// x.err().expect(\"Testing err().expect()\");\n+    /// ```\n+    /// Use instead:\n+    /// ```should_panic\n+    /// let x: Result<u32, &str> = Ok(10);\n+    /// x.expect_err(\"Testing expect_err\");\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub ERR_EXPECT,\n+    style,\n+    r#\"using `.err().expect(\"\")` when `.expect_err(\"\")` can be used\"#\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for usages of `_.unwrap_or_else(Default::default)` on `Option` and\n@@ -2168,6 +2192,7 @@ impl_lint_pass!(Methods => [\n     NEEDLESS_SPLITN,\n     UNNECESSARY_TO_OWNED,\n     UNNECESSARY_JOIN,\n+    ERR_EXPECT,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2431,8 +2456,10 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n             },\n             (\"expect\", [_]) => match method_call(recv) {\n                 Some((\"ok\", [recv], _)) => ok_expect::check(cx, expr, recv),\n+                Some((\"err\", [recv], err_span)) => err_expect::check(cx, expr, recv, msrv, span, err_span),\n                 _ => expect_used::check(cx, expr, recv),\n             },\n+\n             (\"extend\", [arg]) => {\n                 string_extend_chars::check(cx, expr, recv, arg);\n                 extend_with_drain::check(cx, expr, recv, arg);\n@@ -2574,6 +2601,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                     unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\");\n                 },\n             },\n+\n             _ => {},\n         }\n     }"}, {"sha": "0bb818e207907b532533becf93a922286a39840c", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cebe575aad4cc24401d676299e31126ea3af26f6/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebe575aad4cc24401d676299e31126ea3af26f6/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=cebe575aad4cc24401d676299e31126ea3af26f6", "patch": "@@ -156,7 +156,7 @@ define_Conf! {\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),\n-    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS.\n+    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, EXPECT_ERR.\n     ///\n     /// The minimum rust version that the project supports\n     (msrv: Option<String> = None),"}, {"sha": "12191109b8c94e78942be7ec37d56e97134c277e", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cebe575aad4cc24401d676299e31126ea3af26f6/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebe575aad4cc24401d676299e31126ea3af26f6/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=cebe575aad4cc24401d676299e31126ea3af26f6", "patch": "@@ -30,6 +30,6 @@ msrv_aliases! {\n     1,34,0 { TRY_FROM }\n     1,30,0 { ITERATOR_FIND_MAP, TOOL_ATTRIBUTES }\n     1,28,0 { FROM_BOOL }\n-    1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST }\n+    1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST, EXPECT_ERR }\n     1,16,0 { STR_REPEAT }\n }"}, {"sha": "7e18d70bae4007313c76d384005d255fd921a2d9", "filename": "tests/ui/err_expect.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cebe575aad4cc24401d676299e31126ea3af26f6/tests%2Fui%2Ferr_expect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cebe575aad4cc24401d676299e31126ea3af26f6/tests%2Fui%2Ferr_expect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferr_expect.fixed?ref=cebe575aad4cc24401d676299e31126ea3af26f6", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+struct MyTypeNonDebug;\n+\n+#[derive(Debug)]\n+struct MyTypeDebug;\n+\n+fn main() {\n+    let test_debug: Result<MyTypeDebug, u32> = Ok(MyTypeDebug);\n+    test_debug.expect_err(\"Testing debug type\");\n+\n+    let test_non_debug: Result<MyTypeNonDebug, u32> = Ok(MyTypeNonDebug);\n+    test_non_debug.err().expect(\"Testing non debug type\");\n+}"}, {"sha": "bf8c3c9fb8c98f680adfaeb6a9e9f2fa30fc437a", "filename": "tests/ui/err_expect.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cebe575aad4cc24401d676299e31126ea3af26f6/tests%2Fui%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebe575aad4cc24401d676299e31126ea3af26f6/tests%2Fui%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferr_expect.rs?ref=cebe575aad4cc24401d676299e31126ea3af26f6", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+struct MyTypeNonDebug;\n+\n+#[derive(Debug)]\n+struct MyTypeDebug;\n+\n+fn main() {\n+    let test_debug: Result<MyTypeDebug, u32> = Ok(MyTypeDebug);\n+    test_debug.err().expect(\"Testing debug type\");\n+\n+    let test_non_debug: Result<MyTypeNonDebug, u32> = Ok(MyTypeNonDebug);\n+    test_non_debug.err().expect(\"Testing non debug type\");\n+}"}, {"sha": "ffd97e00a5c09fa21dc16efa4ce028df4704e521", "filename": "tests/ui/err_expect.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cebe575aad4cc24401d676299e31126ea3af26f6/tests%2Fui%2Ferr_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cebe575aad4cc24401d676299e31126ea3af26f6/tests%2Fui%2Ferr_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferr_expect.stderr?ref=cebe575aad4cc24401d676299e31126ea3af26f6", "patch": "@@ -0,0 +1,10 @@\n+error: called `.err().expect()` on a `Result` value\n+  --> $DIR/err_expect.rs:10:16\n+   |\n+LL |     test_debug.err().expect(\"Testing debug type\");\n+   |                ^^^^^^^^^^^^ help: try: `expect_err`\n+   |\n+   = note: `-D clippy::err-expect` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7666d01ffe127bd5a8836c418047e31aed0c2499", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cebe575aad4cc24401d676299e31126ea3af26f6/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebe575aad4cc24401d676299e31126ea3af26f6/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=cebe575aad4cc24401d676299e31126ea3af26f6", "patch": "@@ -145,6 +145,11 @@ fn int_from_bool() -> u8 {\n     true as u8\n }\n \n+fn err_expect() {\n+    let x: Result<u32, &str> = Ok(10);\n+    x.err().expect(\"Testing expect_err\");\n+}\n+\n fn main() {\n     filter_map_next();\n     checked_conversion();\n@@ -162,6 +167,7 @@ fn main() {\n     missing_const_for_fn();\n     unnest_or_patterns();\n     int_from_bool();\n+    err_expect();\n }\n \n mod just_under_msrv {"}, {"sha": "9ed6308f11530a954e4c8dcdad092f800ec24080", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cebe575aad4cc24401d676299e31126ea3af26f6/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cebe575aad4cc24401d676299e31126ea3af26f6/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=cebe575aad4cc24401d676299e31126ea3af26f6", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:186:24\n+  --> $DIR/min_rust_version_attr.rs:192:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:185:9\n+  --> $DIR/min_rust_version_attr.rs:191:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL ~             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:198:24\n+  --> $DIR/min_rust_version_attr.rs:204:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:197:9\n+  --> $DIR/min_rust_version_attr.rs:203:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}