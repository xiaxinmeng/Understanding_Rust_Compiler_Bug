{"sha": "fe1769566b757a4870b0c390f970ad70f2b35c9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTc2OTU2NmI3NTdhNDg3MGIwYzM5MGY5NzBhZDcwZjJiMzVjOWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-02T12:29:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-02T12:29:13Z"}, "message": "Merge pull request #556 from Nemo157/skip-embedded-targets\n\nSkip testing targets that don't ship libstd", "tree": {"sha": "91f6538d51eb6d49ade948e2ac7f72c3c654c81e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91f6538d51eb6d49ade948e2ac7f72c3c654c81e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe1769566b757a4870b0c390f970ad70f2b35c9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcA9AZCRBK7hj4Ov3rIwAAdHIIAHI5EgxTlYRUPAfwWc32qBNb\nVcerctWQKfRpn5VaxRN5LOnYF/qHuJ400XQBAxpONpE7mCJrlsv+Kr5oCgQUPVwB\n1nZvR6FdrUZ5nR1vckIHRz7a2Jpq3ZKsj7445AqKRTyD34bm05DkQLbldz5WPP1Q\nVz9nWqsoGzy+ma+a3nakuFMsYDyTLjiSFFsc/3gGQugXFpLqmprhdVNE+Q0RgL8a\nFyAf2saszrCL8tjZFNN8H/pPO0iiJOSlzg6N4zIW8zzaeo+8mQihogmC5FucmBiP\nZ5tGLTCOTqAk9KgYrWcd3b/hn9lMjMCOzoV4eVTwX1k8FXoELBJBXJI5sl0b3i8=\n=xRrg\n-----END PGP SIGNATURE-----\n", "payload": "tree 91f6538d51eb6d49ade948e2ac7f72c3c654c81e\nparent 819a5bc1293ccd680c670e0bd1c92573d07bd088\nparent 7e9be4c08237dc7893fde607b4663e3fc132673a\nauthor Ralf Jung <post@ralfj.de> 1543753753 +0100\ncommitter GitHub <noreply@github.com> 1543753753 +0100\n\nMerge pull request #556 from Nemo157/skip-embedded-targets\n\nSkip testing targets that don't ship libstd"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1769566b757a4870b0c390f970ad70f2b35c9c", "html_url": "https://github.com/rust-lang/rust/commit/fe1769566b757a4870b0c390f970ad70f2b35c9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe1769566b757a4870b0c390f970ad70f2b35c9c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "819a5bc1293ccd680c670e0bd1c92573d07bd088", "url": "https://api.github.com/repos/rust-lang/rust/commits/819a5bc1293ccd680c670e0bd1c92573d07bd088", "html_url": "https://github.com/rust-lang/rust/commit/819a5bc1293ccd680c670e0bd1c92573d07bd088"}, {"sha": "7e9be4c08237dc7893fde607b4663e3fc132673a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9be4c08237dc7893fde607b4663e3fc132673a", "html_url": "https://github.com/rust-lang/rust/commit/7e9be4c08237dc7893fde607b4663e3fc132673a"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "859890aba9f2e679e546a6f5dac210a374b4d80d", "filename": "tests/compiletest.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fe1769566b757a4870b0c390f970ad70f2b35c9c/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1769566b757a4870b0c390f970ad70f2b35c9c/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=fe1769566b757a4870b0c390f970ad70f2b35c9c", "patch": "@@ -124,16 +124,33 @@ fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {\n     path.metadata().map(|m| m.is_dir()).unwrap_or(false)\n }\n \n-fn for_all_targets<F: FnMut(String)>(sysroot: &Path, mut f: F) {\n+fn target_has_std<P: Into<PathBuf>>(path: P) -> bool {\n+    let mut path = path.into();\n+    path.push(\"lib\");\n+    std::fs::read_dir(path)\n+        .expect(\"invalid target\")\n+        .map(|entry| entry.unwrap())\n+        .filter(|entry| entry.file_type().unwrap().is_file())\n+        .filter_map(|entry| entry.file_name().into_string().ok())\n+        .any(|file_name| file_name.starts_with(\"libstd\") && file_name.ends_with(\".rlib\"))\n+}\n+\n+\n+fn for_all_targets<F: FnMut(String)>(sysroot: &Path, f: F) {\n     let target_dir = sysroot.join(\"lib\").join(\"rustlib\");\n-    for entry in std::fs::read_dir(target_dir).expect(\"invalid sysroot\") {\n-        let entry = entry.unwrap();\n-        if !is_target_dir(entry.path()) {\n-            continue;\n-        }\n-        let target = entry.file_name().into_string().unwrap();\n-        f(target);\n+    let mut targets = std::fs::read_dir(target_dir)\n+        .expect(\"invalid sysroot\")\n+        .map(|entry| entry.unwrap())\n+        .filter(|entry| is_target_dir(entry.path()))\n+        .filter(|entry| target_has_std(entry.path()))\n+        .map(|entry| entry.file_name().into_string().unwrap())\n+        .peekable();\n+\n+    if targets.peek().is_none() {\n+        panic!(\"No valid targets found\");\n     }\n+\n+    targets.for_each(f);\n }\n \n fn get_sysroot() -> PathBuf {"}]}