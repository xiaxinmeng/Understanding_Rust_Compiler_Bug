{"sha": "c690c82ad42a15417996a087ef072fd2d8c2fe3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2OTBjODJhZDQyYTE1NDE3OTk2YTA4N2VmMDcyZmQyZDhjMmZlM2E=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-18T16:33:37Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-20T09:42:52Z"}, "message": "use if let instead of single match arm expressions to compact code and reduce nesting (clippy::single_match)", "tree": {"sha": "bad049185f6a9362c5b340a24188322d81b09d18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bad049185f6a9362c5b340a24188322d81b09d18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c690c82ad42a15417996a087ef072fd2d8c2fe3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c690c82ad42a15417996a087ef072fd2d8c2fe3a", "html_url": "https://github.com/rust-lang/rust/commit/c690c82ad42a15417996a087ef072fd2d8c2fe3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c690c82ad42a15417996a087ef072fd2d8c2fe3a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10b3595ba6a4c658c9dea105488fc562c815e434", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b3595ba6a4c658c9dea105488fc562c815e434", "html_url": "https://github.com/rust-lang/rust/commit/10b3595ba6a4c658c9dea105488fc562c815e434"}], "stats": {"total": 86, "additions": 28, "deletions": 58}, "files": [{"sha": "441cfeea20a48d3a78894264e7d0eaff76dd3d7c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=c690c82ad42a15417996a087ef072fd2d8c2fe3a", "patch": "@@ -488,18 +488,16 @@ impl<'tcx> Visitor<'tcx> for HirTraitObjectVisitor {\n     }\n \n     fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {\n-        match t.kind {\n-            TyKind::TraitObject(\n-                poly_trait_refs,\n-                Lifetime { name: LifetimeName::ImplicitObjectLifetimeDefault, .. },\n-            ) => {\n-                for ptr in poly_trait_refs {\n-                    if Some(self.1) == ptr.trait_ref.trait_def_id() {\n-                        self.0.push(ptr.span);\n-                    }\n+        if let TyKind::TraitObject(\n+            poly_trait_refs,\n+            Lifetime { name: LifetimeName::ImplicitObjectLifetimeDefault, .. },\n+        ) = t.kind\n+        {\n+            for ptr in poly_trait_refs {\n+                if Some(self.1) == ptr.trait_ref.trait_def_id() {\n+                    self.0.push(ptr.span);\n                 }\n             }\n-            _ => {}\n         }\n         walk_ty(self, t);\n     }"}, {"sha": "2a950dcdf23fe3d9796eb7224310801172dd7292", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=c690c82ad42a15417996a087ef072fd2d8c2fe3a", "patch": "@@ -832,14 +832,11 @@ fn foo(&self) -> Self::T { String::new() }\n                 kind: hir::ItemKind::Impl { items, .. }, ..\n             })) => {\n                 for item in &items[..] {\n-                    match item.kind {\n-                        hir::AssocItemKind::Type => {\n-                            if self.type_of(self.hir().local_def_id(item.id.hir_id)) == found {\n-                                db.span_label(item.span, \"expected this associated type\");\n-                                return true;\n-                            }\n+                    if let hir::AssocItemKind::Type = item.kind {\n+                        if self.type_of(self.hir().local_def_id(item.id.hir_id)) == found {\n+                            db.span_label(item.span, \"expected this associated type\");\n+                            return true;\n                         }\n-                        _ => {}\n                     }\n                 }\n             }"}, {"sha": "c9cc9bfc9fa263ad80a49b996cae750bbf8d9e5c", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c690c82ad42a15417996a087ef072fd2d8c2fe3a", "patch": "@@ -2125,17 +2125,10 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n     // Iterate all local crate items no matter where they are defined.\n     let hir = tcx.hir();\n     for item in hir.krate().items.values() {\n-        if item.ident.name.as_str().is_empty() {\n+        if item.ident.name.as_str().is_empty() || matches!(item.kind, ItemKind::Use(_, _)) {\n             continue;\n         }\n \n-        match item.kind {\n-            ItemKind::Use(_, _) => {\n-                continue;\n-            }\n-            _ => {}\n-        }\n-\n         if let Some(local_def_id) = hir.definitions().opt_hir_id_to_local_def_id(item.hir_id) {\n             let def_id = local_def_id.to_def_id();\n             let ns = tcx.def_kind(def_id).ns().unwrap_or(Namespace::TypeNS);"}, {"sha": "7510c43243b1d40b5838e39d9eadfe1ec61b0414", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=c690c82ad42a15417996a087ef072fd2d8c2fe3a", "patch": "@@ -242,11 +242,8 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n             }\n             TerminatorKind::InlineAsm { ref operands, .. } => {\n                 for (index, op) in operands.iter().enumerate() {\n-                    match op {\n-                        InlineAsmOperand::Const { .. } => {\n-                            self.candidates.push(Candidate::InlineAsm { bb: location.block, index })\n-                        }\n-                        _ => {}\n+                    if let InlineAsmOperand::Const { .. } = op {\n+                        self.candidates.push(Candidate::InlineAsm { bb: location.block, index })\n                     }\n                 }\n             }\n@@ -612,12 +609,9 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 let operand_ty = operand.ty(self.body, self.tcx);\n                 let cast_in = CastTy::from_ty(operand_ty).expect(\"bad input type for cast\");\n                 let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n-                match (cast_in, cast_out) {\n-                    (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n-                        // ptr-to-int casts are not possible in consts and thus not promotable\n-                        return Err(Unpromotable);\n-                    }\n-                    _ => {}\n+                if let (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) = (cast_in, cast_out) {\n+                    // ptr-to-int casts are not possible in consts and thus not promotable\n+                    return Err(Unpromotable);\n                 }\n             }\n "}, {"sha": "6233549dc8579782ade27903fb81e0c783e199aa", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=c690c82ad42a15417996a087ef072fd2d8c2fe3a", "patch": "@@ -149,12 +149,9 @@ impl<'a> TokenTreesReader<'a> {\n                             }\n                         }\n \n-                        match (open_brace, delim) {\n-                            //only add braces\n-                            (DelimToken::Brace, DelimToken::Brace) => {\n-                                self.matching_block_spans.push((open_brace_span, close_brace_span));\n-                            }\n-                            _ => {}\n+                        //only add braces\n+                        if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {\n+                            self.matching_block_spans.push((open_brace_span, close_brace_span));\n                         }\n \n                         if self.open_braces.is_empty() {"}, {"sha": "556bf69c9315ea782ccd28fd5ed656f1937722af", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=c690c82ad42a15417996a087ef072fd2d8c2fe3a", "patch": "@@ -527,12 +527,9 @@ impl<'a> Parser<'a> {\n \n         // fill character\n         if let Some(&(_, c)) = self.cur.peek() {\n-            match self.cur.clone().nth(1) {\n-                Some((_, '>' | '<' | '^')) => {\n-                    spec.fill = Some(c);\n-                    self.cur.next();\n-                }\n-                _ => {}\n+            if let Some((_, '>' | '<' | '^')) = self.cur.clone().nth(1) {\n+                spec.fill = Some(c);\n+                self.cur.next();\n             }\n         }\n         // Alignment"}, {"sha": "677cf27cde71cbd353f523530413dd49546b70e4", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=c690c82ad42a15417996a087ef072fd2d8c2fe3a", "patch": "@@ -534,11 +534,8 @@ impl<'a> ModuleData<'a> {\n                 if ns != TypeNS {\n                     return;\n                 }\n-                match binding.res() {\n-                    Res::Def(DefKind::Trait | DefKind::TraitAlias, _) => {\n-                        collected_traits.push((name, binding))\n-                    }\n-                    _ => (),\n+                if let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = binding.res() {\n+                    collected_traits.push((name, binding))\n                 }\n             });\n             *traits = Some(collected_traits.into_boxed_slice());"}, {"sha": "091d488138e464528c69fe9fb36b08d6153ff3d4", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c690c82ad42a15417996a087ef072fd2d8c2fe3a/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=c690c82ad42a15417996a087ef072fd2d8c2fe3a", "patch": "@@ -152,11 +152,8 @@ impl SymbolMangler<'tcx> {\n         let _ = write!(self.out, \"{}\", ident.len());\n \n         // Write a separating `_` if necessary (leading digit or `_`).\n-        match ident.chars().next() {\n-            Some('_' | '0'..='9') => {\n-                self.push(\"_\");\n-            }\n-            _ => {}\n+        if let Some('_' | '0'..='9') = ident.chars().next() {\n+            self.push(\"_\");\n         }\n \n         self.push(ident);"}]}