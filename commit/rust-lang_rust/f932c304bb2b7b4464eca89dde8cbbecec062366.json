{"sha": "f932c304bb2b7b4464eca89dde8cbbecec062366", "node_id": "C_kwDOAAsO6NoAKGY5MzJjMzA0YmIyYjdiNDQ2NGVjYTg5ZGRlOGNiYmVjZWMwNjIzNjY", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-02-18T10:17:07Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-03-04T18:23:06Z"}, "message": "lint for casting raw pointers to slices with different element sizes", "tree": {"sha": "d3cac105f32cefd07252bafeb22dc5eb45755ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3cac105f32cefd07252bafeb22dc5eb45755ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f932c304bb2b7b4464eca89dde8cbbecec062366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f932c304bb2b7b4464eca89dde8cbbecec062366", "html_url": "https://github.com/rust-lang/rust/commit/f932c304bb2b7b4464eca89dde8cbbecec062366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f932c304bb2b7b4464eca89dde8cbbecec062366/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53189ad190f313cbad28f8138a04e734ac052cfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/53189ad190f313cbad28f8138a04e734ac052cfc", "html_url": "https://github.com/rust-lang/rust/commit/53189ad190f313cbad28f8138a04e734ac052cfc"}], "stats": {"total": 274, "additions": 267, "deletions": 7}, "files": [{"sha": "c024dbd9a0ff739cae43661aa1033b6e7c4e6b53", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -3076,6 +3076,7 @@ Released 2018-09-13\n [`cast_ptr_alignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_ptr_alignment\n [`cast_ref_to_mut`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_ref_to_mut\n [`cast_sign_loss`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\n+[`cast_slice_different_sizes`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_slice_different_sizes\n [`char_lit_as_u8`]: https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8\n [`chars_last_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#chars_last_cmp\n [`chars_next_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#chars_next_cmp"}, {"sha": "3608c1654d5c71196b209cc0c1c47617a16556b8", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -0,0 +1,117 @@\n+use clippy_utils::{diagnostics::span_lint_and_then, meets_msrv, msrvs, source::snippet_opt};\n+use if_chain::if_chain;\n+use rustc_ast::Mutability;\n+use rustc_hir::{Expr, ExprKind, Node};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, layout::LayoutOf, Ty, TypeAndMut};\n+use rustc_semver::RustcVersion;\n+\n+use super::CAST_SLICE_DIFFERENT_SIZES;\n+\n+fn is_child_of_cast(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    let map = cx.tcx.hir();\n+    if_chain! {\n+        if let Some(parent_id) = map.find_parent_node(expr.hir_id);\n+        if let Some(parent) = map.find(parent_id);\n+        then {\n+            let expr = match parent {\n+                Node::Block(block) => {\n+                    if let Some(parent_expr) = block.expr {\n+                        parent_expr\n+                    } else {\n+                        return false;\n+                    }\n+                },\n+                Node::Expr(expr) => expr,\n+                _ => return false,\n+            };\n+\n+            matches!(expr.kind, ExprKind::Cast(..))\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Option<RustcVersion>) {\n+    // suggestion is invalid if `ptr::slice_from_raw_parts` does not exist\n+    if !meets_msrv(msrv.as_ref(), &msrvs::PTR_SLICE_RAW_PARTS) {\n+        return;\n+    }\n+\n+    // if this cast is the child of another cast expression then don't emit something for it, the full\n+    // chain will be analyzed\n+    if is_child_of_cast(cx, expr) {\n+        return;\n+    }\n+\n+    if let Some((from_slice_ty, to_slice_ty)) = expr_cast_chain_tys(cx, expr) {\n+        if let (Ok(from_layout), Ok(to_layout)) = (cx.layout_of(from_slice_ty.ty), cx.layout_of(to_slice_ty.ty)) {\n+            let from_size = from_layout.size.bytes();\n+            let to_size = to_layout.size.bytes();\n+            if from_size != to_size && from_size != 0 && to_size != 0 {\n+                span_lint_and_then(\n+                    cx,\n+                    CAST_SLICE_DIFFERENT_SIZES,\n+                    expr.span,\n+                    &format!(\n+                        \"casting between raw pointers to `[{}]` (element size {}) and `[{}]` (element size {}) does not adjust the count\",\n+                        from_slice_ty, from_size, to_slice_ty, to_size,\n+                    ),\n+                    |diag| {\n+                        let cast_expr = match expr.kind {\n+                            ExprKind::Cast(cast_expr, ..) => cast_expr,\n+                            _ => unreachable!(\"expr should be a cast as checked by expr_cast_chain_tys\"),\n+                        };\n+                        let ptr_snippet = snippet_opt(cx, cast_expr.span).unwrap();\n+\n+                        let (mutbl_fn_str, mutbl_ptr_str) = match to_slice_ty.mutbl {\n+                            Mutability::Mut => (\"_mut\", \"mut\"),\n+                            Mutability::Not => (\"\", \"const\"),\n+                        };\n+                        let sugg = format!(\n+                            \"core::ptr::slice_from_raw_parts{mutbl_fn_str}({ptr_snippet} as *{mutbl_ptr_str} {to_slice_ty}, ..)\"\n+                        );\n+\n+                        diag.span_suggestion(\n+                            expr.span,\n+                            &format!(\"replace with `ptr::slice_from_raw_parts{mutbl_fn_str}`\"),\n+                            sugg,\n+                            rustc_errors::Applicability::HasPlaceholders,\n+                        );\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+/// Returns the type T of the pointed to *const [T] or *mut [T] and the mutability of the slice if\n+/// the type is one of those slices\n+fn get_raw_slice_ty_mut(ty: Ty<'_>) -> Option<TypeAndMut<'_>> {\n+    match ty.kind() {\n+        ty::RawPtr(TypeAndMut { ty: slice_ty, mutbl }) => match slice_ty.kind() {\n+            ty::Slice(ty) => Some(TypeAndMut { ty: *ty, mutbl: *mutbl }),\n+            _ => None,\n+        },\n+        _ => None,\n+    }\n+}\n+\n+/// Returns the pair (original ptr T, final ptr U) if the expression is composed of casts\n+/// Returns None if the expr is not a Cast\n+fn expr_cast_chain_tys<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<(TypeAndMut<'tcx>, TypeAndMut<'tcx>)> {\n+    if let ExprKind::Cast(cast_expr, _cast_to_hir_ty) = expr.peel_blocks().kind {\n+        let cast_to = cx.typeck_results().expr_ty(expr);\n+        let to_slice_ty = get_raw_slice_ty_mut(cast_to)?;\n+        if let Some((inner_from_ty, _inner_to_ty)) = expr_cast_chain_tys(cx, cast_expr) {\n+            Some((inner_from_ty, to_slice_ty))\n+        } else {\n+            let cast_from = cx.typeck_results().expr_ty(cast_expr);\n+            let from_slice_ty = get_raw_slice_ty_mut(cast_from)?;\n+            Some((from_slice_ty, to_slice_ty))\n+        }\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "6a0eabd089d021b3165d8a09b9922ea596fe9820", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -5,6 +5,7 @@ mod cast_precision_loss;\n mod cast_ptr_alignment;\n mod cast_ref_to_mut;\n mod cast_sign_loss;\n+mod cast_slice_different_sizes;\n mod char_lit_as_u8;\n mod fn_to_numeric_cast;\n mod fn_to_numeric_cast_any;\n@@ -409,6 +410,50 @@ declare_clippy_lint! {\n     \"casts from an enum type to an integral type which will truncate the value\"\n }\n \n+declare_clippy_lint! {\n+    /// Checks for `as` casts between raw pointers to slices with differently sized elements.\n+    ///\n+    /// ### Why is this bad?\n+    /// The produced raw pointer to a slice does not update its length metadata. The produced\n+    /// pointer will point to a different number of bytes than the original pointer because the\n+    /// length metadata of a raw slice pointer is in elements rather than bytes.\n+    /// Producing a slice reference from the raw pointer will either create a slice with\n+    /// less data (which can be surprising) or create a slice with more data and cause Undefined Behavior.\n+    ///\n+    /// ### Example\n+    /// // Missing data\n+    /// ```rust\n+    /// let a = [1_i32, 2, 3, 4];\n+    /// let p = &a as *const [i32] as *const [u8];\n+    /// unsafe {\n+    ///     println!(\"{:?}\", &*p);\n+    /// }\n+    /// ```\n+    /// // Undefined Behavior (note: also potential alignment issues)\n+    /// ```rust\n+    /// let a = [1_u8, 2, 3, 4];\n+    /// let p = &a as *const [u8] as *const [u32];\n+    /// unsafe {\n+    ///     println!(\"{:?}\", &*p);\n+    /// }\n+    /// ```\n+    /// Instead use `ptr::slice_from_raw_parts` to construct a slice from a data pointer and the correct length\n+    /// ```rust\n+    /// let a = [1_i32, 2, 3, 4];\n+    /// let old_ptr = &a as *const [i32];\n+    /// // The data pointer is cast to a pointer to the target `u8` not `[u8]`\n+    /// // The length comes from the known length of 4 i32s times the 4 bytes per i32\n+    /// let new_ptr = core::ptr::slice_from_raw_parts(old_ptr as *const u8, 16);\n+    /// unsafe {\n+    ///     println!(\"{:?}\", &*new_ptr);\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub CAST_SLICE_DIFFERENT_SIZES,\n+    correctness,\n+    \"casting using `as` between raw pointers to slices of types with different sizes\"\n+}\n+\n pub struct Casts {\n     msrv: Option<RustcVersion>,\n }\n@@ -428,6 +473,7 @@ impl_lint_pass!(Casts => [\n     CAST_LOSSLESS,\n     CAST_REF_TO_MUT,\n     CAST_PTR_ALIGNMENT,\n+    CAST_SLICE_DIFFERENT_SIZES,\n     UNNECESSARY_CAST,\n     FN_TO_NUMERIC_CAST_ANY,\n     FN_TO_NUMERIC_CAST,\n@@ -478,6 +524,8 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n         cast_ref_to_mut::check(cx, expr);\n         cast_ptr_alignment::check(cx, expr);\n         char_lit_as_u8::check(cx, expr);\n+        ptr_as_ptr::check(cx, expr, &self.msrv);\n+        cast_slice_different_sizes::check(cx, expr, &self.msrv);\n     }\n \n     extract_msrv_attr!(LateContext);"}, {"sha": "f69c4e98719a17bf844d90df599bbb430974f6bc", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -25,6 +25,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(booleans::NONMINIMAL_BOOL),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n     LintId::of(casts::CAST_REF_TO_MUT),\n+    LintId::of(casts::CAST_SLICE_DIFFERENT_SIZES),\n     LintId::of(casts::CHAR_LIT_AS_U8),\n     LintId::of(casts::FN_TO_NUMERIC_CAST),\n     LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),"}, {"sha": "df63f84463dba27345e320748c0b8117dff9d840", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -13,6 +13,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n     LintId::of(booleans::LOGIC_BUG),\n     LintId::of(casts::CAST_REF_TO_MUT),\n+    LintId::of(casts::CAST_SLICE_DIFFERENT_SIZES),\n     LintId::of(copies::IFS_SAME_COND),\n     LintId::of(copies::IF_SAME_THEN_ELSE),\n     LintId::of(derive::DERIVE_HASH_XOR_EQ),"}, {"sha": "89629b41525ea382cf68d9907787819588d73754", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -77,6 +77,7 @@ store.register_lints(&[\n     casts::CAST_PTR_ALIGNMENT,\n     casts::CAST_REF_TO_MUT,\n     casts::CAST_SIGN_LOSS,\n+    casts::CAST_SLICE_DIFFERENT_SIZES,\n     casts::CHAR_LIT_AS_U8,\n     casts::FN_TO_NUMERIC_CAST,\n     casts::FN_TO_NUMERIC_CAST_ANY,"}, {"sha": "fce93153d96ec1841eae99b5ec3b584e22c2e261", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -20,7 +20,7 @@ msrv_aliases! {\n     1,46,0 { CONST_IF_MATCH }\n     1,45,0 { STR_STRIP_PREFIX }\n     1,43,0 { LOG2_10, LOG10_2 }\n-    1,42,0 { MATCHES_MACRO, SLICE_PATTERNS }\n+    1,42,0 { MATCHES_MACRO, SLICE_PATTERNS, PTR_SLICE_RAW_PARTS }\n     1,41,0 { RE_REBALANCING_COHERENCE, RESULT_MAP_OR_ELSE }\n     1,40,0 { MEM_TAKE, NON_EXHAUSTIVE, OPTION_AS_DEREF }\n     1,38,0 { POINTER_CAST }"}, {"sha": "cfe1cca2eba9490ffb277a4d18dc21a71910ffeb", "filename": "tests/ui/cast_slice_different_sizes.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/tests%2Fui%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/tests%2Fui%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_slice_different_sizes.rs?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -0,0 +1,39 @@\n+fn main() {\n+    let x: [i32; 3] = [1_i32, 2, 3];\n+    let r_x = &x;\n+    // Check casting through multiple bindings\n+    // Because it's separate, it does not check the cast back to something of the same size\n+    let a = r_x as *const [i32];\n+    let b = a as *const [u8];\n+    let c = b as *const [u32];\n+\n+    // loses data\n+    let loss = r_x as *const [i32] as *const [u8];\n+\n+    // Cast back to same size but different type loses no data, just type conversion\n+    // This is weird code but there's no reason for this lint specifically to fire *twice* on it\n+    let restore = r_x as *const [i32] as *const [u8] as *const [u32];\n+\n+    // Check casting through blocks is detected\n+    let loss_block_1 = { r_x as *const [i32] } as *const [u8];\n+    let loss_block_2 = {\n+        let _ = ();\n+        r_x as *const [i32]\n+    } as *const [u8];\n+\n+    // Check that resores of the same size are detected through blocks\n+    let restore_block_1 = { r_x as *const [i32] } as *const [u8] as *const [u32];\n+    let restore_block_2 = { ({ r_x as *const [i32] }) as *const [u8] } as *const [u32];\n+    let restore_block_3 = {\n+        let _ = ();\n+        ({\n+            let _ = ();\n+            r_x as *const [i32]\n+        }) as *const [u8]\n+    } as *const [u32];\n+\n+    // Check that the result of a long chain of casts is detected\n+    let long_chain_loss = r_x as *const [i32] as *const [u32] as *const [u16] as *const [i8] as *const [u8];\n+    let long_chain_restore =\n+        r_x as *const [i32] as *const [u32] as *const [u16] as *const [i8] as *const [u8] as *const [u32];\n+}"}, {"sha": "a37cec7cb3be0935e00772d85edc5d339e45005c", "filename": "tests/ui/cast_slice_different_sizes.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/tests%2Fui%2Fcast_slice_different_sizes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/tests%2Fui%2Fcast_slice_different_sizes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_slice_different_sizes.stderr?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -0,0 +1,52 @@\n+error: casting between raw pointers to `[i32]` (element size 4) and `[u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:7:13\n+   |\n+LL |     let b = a as *const [u8];\n+   |             ^^^^^^^^^^^^^^^^ help: replace with `ptr::slice_from_raw_parts`: `core::ptr::slice_from_raw_parts(a as *const u8, ..)`\n+   |\n+   = note: `#[deny(clippy::cast_slice_different_sizes)]` on by default\n+\n+error: casting between raw pointers to `[u8]` (element size 1) and `[u32]` (element size 4) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:8:13\n+   |\n+LL |     let c = b as *const [u32];\n+   |             ^^^^^^^^^^^^^^^^^ help: replace with `ptr::slice_from_raw_parts`: `core::ptr::slice_from_raw_parts(b as *const u32, ..)`\n+\n+error: casting between raw pointers to `[i32]` (element size 4) and `[u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:11:16\n+   |\n+LL |     let loss = r_x as *const [i32] as *const [u8];\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with `ptr::slice_from_raw_parts`: `core::ptr::slice_from_raw_parts(r_x as *const [i32] as *const u8, ..)`\n+\n+error: casting between raw pointers to `[i32]` (element size 4) and `[u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:18:24\n+   |\n+LL |     let loss_block_1 = { r_x as *const [i32] } as *const [u8];\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with `ptr::slice_from_raw_parts`: `core::ptr::slice_from_raw_parts({ r_x as *const [i32] } as *const u8, ..)`\n+\n+error: casting between raw pointers to `[i32]` (element size 4) and `[u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:19:24\n+   |\n+LL |       let loss_block_2 = {\n+   |  ________________________^\n+LL | |         let _ = ();\n+LL | |         r_x as *const [i32]\n+LL | |     } as *const [u8];\n+   | |____________________^\n+   |\n+help: replace with `ptr::slice_from_raw_parts`\n+   |\n+LL ~     let loss_block_2 = core::ptr::slice_from_raw_parts({\n+LL +         let _ = ();\n+LL +         r_x as *const [i32]\n+LL ~     } as *const u8, ..);\n+   |\n+\n+error: casting between raw pointers to `[i32]` (element size 4) and `[u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:36:27\n+   |\n+LL |     let long_chain_loss = r_x as *const [i32] as *const [u32] as *const [u16] as *const [i8] as *const [u8];\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with `ptr::slice_from_raw_parts`: `core::ptr::slice_from_raw_parts(r_x as *const [i32] as *const [u32] as *const [u16] as *const [i8] as *const u8, ..)`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "b425cdd6cbfd441d45b3cacce9a3f2c60daa5b7e", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -25,8 +25,8 @@ fn main() {\n     let slice_ptr = &[0, 1, 2, 3] as *const [i32];\n \n     // ... or pointer_kind(T) = pointer_kind(U_0); ptr-ptr-cast\n-    let _ptr_to_unsized_transmute = unsafe { slice_ptr as *const [u16] };\n-    let _ptr_to_unsized = slice_ptr as *const [u16];\n+    let _ptr_to_unsized_transmute = unsafe { slice_ptr as *const [u32] };\n+    let _ptr_to_unsized = slice_ptr as *const [u32];\n     // TODO: We could try testing vtable casts here too, but maybe\n     // we should wait until std::raw::TraitObject is stabilized?\n "}, {"sha": "8fd57c5965279d96766ee8748195cca562277399", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -25,8 +25,8 @@ fn main() {\n     let slice_ptr = &[0, 1, 2, 3] as *const [i32];\n \n     // ... or pointer_kind(T) = pointer_kind(U_0); ptr-ptr-cast\n-    let _ptr_to_unsized_transmute = unsafe { transmute::<*const [i32], *const [u16]>(slice_ptr) };\n-    let _ptr_to_unsized = slice_ptr as *const [u16];\n+    let _ptr_to_unsized_transmute = unsafe { transmute::<*const [i32], *const [u32]>(slice_ptr) };\n+    let _ptr_to_unsized = slice_ptr as *const [u32];\n     // TODO: We could try testing vtable casts here too, but maybe\n     // we should wait until std::raw::TraitObject is stabilized?\n "}, {"sha": "d9b64a0ed7b02060d55d6b14f13709f5dd87545c", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f932c304bb2b7b4464eca89dde8cbbecec062366/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f932c304bb2b7b4464eca89dde8cbbecec062366/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr?ref=f932c304bb2b7b4464eca89dde8cbbecec062366", "patch": "@@ -17,8 +17,8 @@ LL |     let _ptr_i8_transmute = unsafe { transmute::<*const i32, *const i8>(ptr\n error: transmute from a pointer to a pointer\n   --> $DIR/transmutes_expressible_as_ptr_casts.rs:28:46\n    |\n-LL |     let _ptr_to_unsized_transmute = unsafe { transmute::<*const [i32], *const [u16]>(slice_ptr) };\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `slice_ptr as *const [u16]`\n+LL |     let _ptr_to_unsized_transmute = unsafe { transmute::<*const [i32], *const [u32]>(slice_ptr) };\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `slice_ptr as *const [u32]`\n \n error: transmute from `*const i32` to `usize` which could be expressed as a pointer cast instead\n   --> $DIR/transmutes_expressible_as_ptr_casts.rs:34:50"}]}