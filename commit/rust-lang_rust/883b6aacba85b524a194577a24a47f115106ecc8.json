{"sha": "883b6aacba85b524a194577a24a47f115106ecc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4M2I2YWFjYmE4NWI1MjRhMTk0NTc3YTI0YTQ3ZjExNTEwNmVjYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-10T06:52:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-10T06:52:45Z"}, "message": "Auto merge of #67039 - xfix:manually-implement-pin-traits, r=nikomatsakis\n\nUse deref target in Pin trait implementations\n\nUsing deref target instead of pointer itself avoids providing access to `&Rc<T>` for malicious implementations, which would allow calling `Rc::get_mut`.\n\nThis is a breaking change necessary due to unsoundness, however the impact of it should be minimal.\n\nThis only fixes the issue with malicious `PartialEq` implementations, other `Pin` soundness issues are still here.\n\nSee <https://internals.rust-lang.org/t/unsoundness-in-pin/11311/73> for more details.", "tree": {"sha": "f612108193f92950225c24be00eb89075f42fb84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f612108193f92950225c24be00eb89075f42fb84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/883b6aacba85b524a194577a24a47f115106ecc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/883b6aacba85b524a194577a24a47f115106ecc8", "html_url": "https://github.com/rust-lang/rust/commit/883b6aacba85b524a194577a24a47f115106ecc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/883b6aacba85b524a194577a24a47f115106ecc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "975e83a32ad8c2c894391711d227786614d61a50", "url": "https://api.github.com/repos/rust-lang/rust/commits/975e83a32ad8c2c894391711d227786614d61a50", "html_url": "https://github.com/rust-lang/rust/commit/975e83a32ad8c2c894391711d227786614d61a50"}, {"sha": "61d9c001465f14be10b519fbb3030f5cebe22199", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d9c001465f14be10b519fbb3030f5cebe22199", "html_url": "https://github.com/rust-lang/rust/commit/61d9c001465f14be10b519fbb3030f5cebe22199"}], "stats": {"total": 98, "additions": 81, "deletions": 17}, "files": [{"sha": "6a0c5bbebc1c6cf1270be42fd7217858831a35bf", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/883b6aacba85b524a194577a24a47f115106ecc8/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883b6aacba85b524a194577a24a47f115106ecc8/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=883b6aacba85b524a194577a24a47f115106ecc8", "patch": "@@ -376,6 +376,7 @@\n \n use crate::cmp::{self, PartialEq, PartialOrd};\n use crate::fmt;\n+use crate::hash::{Hash, Hasher};\n use crate::marker::{Sized, Unpin};\n use crate::ops::{CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Receiver};\n \n@@ -390,55 +391,78 @@ use crate::ops::{CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Receiver};\n /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n /// [`pin` module]: ../../std/pin/index.html\n //\n-// Note: the derives below, and the explicit `PartialEq` and `PartialOrd`\n-// implementations, are allowed because they all only use `&P`, so they cannot move\n-// the value behind `pointer`.\n+// Note: the `Clone` derive below causes unsoundness as it's possible to implement\n+// `Clone` for mutable references.\n+// See <https://internals.rust-lang.org/t/unsoundness-in-pin/11311> for more details.\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n #[lang = \"pin\"]\n #[fundamental]\n #[repr(transparent)]\n-#[derive(Copy, Clone, Hash, Eq, Ord)]\n+#[derive(Copy, Clone)]\n pub struct Pin<P> {\n     pointer: P,\n }\n \n-#[stable(feature = \"pin_partialeq_partialord_impl_applicability\", since = \"1.34.0\")]\n-impl<P, Q> PartialEq<Pin<Q>> for Pin<P>\n+// The following implementations aren't derived in order to avoid soundness\n+// issues. `&self.pointer` should not be accessible to untrusted trait\n+// implementations.\n+//\n+// See <https://internals.rust-lang.org/t/unsoundness-in-pin/11311/73> for more details.\n+\n+#[stable(feature = \"pin_trait_impls\", since = \"1.41.0\")]\n+impl<P: Deref, Q: Deref> PartialEq<Pin<Q>> for Pin<P>\n where\n-    P: PartialEq<Q>,\n+    P::Target: PartialEq<Q::Target>,\n {\n     fn eq(&self, other: &Pin<Q>) -> bool {\n-        self.pointer == other.pointer\n+        P::Target::eq(self, other)\n     }\n \n     fn ne(&self, other: &Pin<Q>) -> bool {\n-        self.pointer != other.pointer\n+        P::Target::ne(self, other)\n     }\n }\n \n-#[stable(feature = \"pin_partialeq_partialord_impl_applicability\", since = \"1.34.0\")]\n-impl<P, Q> PartialOrd<Pin<Q>> for Pin<P>\n+#[stable(feature = \"pin_trait_impls\", since = \"1.41.0\")]\n+impl<P: Deref<Target: Eq>> Eq for Pin<P> {}\n+\n+#[stable(feature = \"pin_trait_impls\", since = \"1.41.0\")]\n+impl<P: Deref, Q: Deref> PartialOrd<Pin<Q>> for Pin<P>\n where\n-    P: PartialOrd<Q>,\n+    P::Target: PartialOrd<Q::Target>,\n {\n     fn partial_cmp(&self, other: &Pin<Q>) -> Option<cmp::Ordering> {\n-        self.pointer.partial_cmp(&other.pointer)\n+        P::Target::partial_cmp(self, other)\n     }\n \n     fn lt(&self, other: &Pin<Q>) -> bool {\n-        self.pointer < other.pointer\n+        P::Target::lt(self, other)\n     }\n \n     fn le(&self, other: &Pin<Q>) -> bool {\n-        self.pointer <= other.pointer\n+        P::Target::le(self, other)\n     }\n \n     fn gt(&self, other: &Pin<Q>) -> bool {\n-        self.pointer > other.pointer\n+        P::Target::gt(self, other)\n     }\n \n     fn ge(&self, other: &Pin<Q>) -> bool {\n-        self.pointer >= other.pointer\n+        P::Target::ge(self, other)\n+    }\n+}\n+\n+#[stable(feature = \"pin_trait_impls\", since = \"1.41.0\")]\n+impl<P: Deref<Target: Ord>> Ord for Pin<P> {\n+    fn cmp(&self, other: &Self) -> cmp::Ordering {\n+        P::Target::cmp(self, other)\n+    }\n+}\n+\n+#[stable(feature = \"pin_trait_impls\", since = \"1.41.0\")]\n+impl<P: Deref<Target: Hash>> Hash for Pin<P> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        P::Target::hash(self, state);\n     }\n }\n "}, {"sha": "a496e58a79bdd08f5b63596d9c758b0d78164bb0", "filename": "src/test/ui/issues/issue-67039-unsound-pin-partialeq.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/883b6aacba85b524a194577a24a47f115106ecc8/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883b6aacba85b524a194577a24a47f115106ecc8/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.rs?ref=883b6aacba85b524a194577a24a47f115106ecc8", "patch": "@@ -0,0 +1,27 @@\n+// Pin's PartialEq implementation allowed to access the pointer allowing for\n+// unsoundness by using Rc::get_mut to move value within Rc.\n+// See https://internals.rust-lang.org/t/unsoundness-in-pin/11311/73 for more details.\n+\n+use std::ops::Deref;\n+use std::pin::Pin;\n+use std::rc::Rc;\n+\n+struct Apple;\n+\n+impl Deref for Apple {\n+    type Target = Apple;\n+    fn deref(&self) -> &Apple {\n+        &Apple\n+    }\n+}\n+\n+impl PartialEq<Rc<Apple>> for Apple {\n+    fn eq(&self, _rc: &Rc<Apple>) -> bool {\n+        unreachable!()\n+    }\n+}\n+\n+fn main() {\n+    let _ = Pin::new(Apple) == Rc::pin(Apple);\n+    //~^ ERROR type mismatch resolving\n+}"}, {"sha": "3330d60242f1b7178d269ecfa54f86470d9aa2dc", "filename": "src/test/ui/issues/issue-67039-unsound-pin-partialeq.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/883b6aacba85b524a194577a24a47f115106ecc8/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883b6aacba85b524a194577a24a47f115106ecc8/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr?ref=883b6aacba85b524a194577a24a47f115106ecc8", "patch": "@@ -0,0 +1,13 @@\n+error[E0271]: type mismatch resolving `<std::rc::Rc<Apple> as std::ops::Deref>::Target == std::rc::Rc<Apple>`\n+  --> $DIR/issue-67039-unsound-pin-partialeq.rs:25:29\n+   |\n+LL |     let _ = Pin::new(Apple) == Rc::pin(Apple);\n+   |                             ^^ expected struct `Apple`, found struct `std::rc::Rc`\n+   |\n+   = note: expected type `Apple`\n+            found struct `std::rc::Rc<Apple>`\n+   = note: required because of the requirements on the impl of `std::cmp::PartialEq<std::pin::Pin<std::rc::Rc<Apple>>>` for `std::pin::Pin<Apple>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}]}