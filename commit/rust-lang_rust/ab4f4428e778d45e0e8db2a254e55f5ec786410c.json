{"sha": "ab4f4428e778d45e0e8db2a254e55f5ec786410c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNGY0NDI4ZTc3OGQ0NWUwZThkYjJhMjU0ZTU1ZjVlYzc4NjQxMGM=", "commit": {"author": {"name": "Bryan Tan", "email": "techniux@gmail.com", "date": "2017-04-03T23:09:19Z"}, "committer": {"name": "Bryan Tan", "email": "techniux@gmail.com", "date": "2017-04-03T23:09:19Z"}, "message": "Fix styling issues", "tree": {"sha": "b558567e1464c8b23ba03729bd19406c9e394813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b558567e1464c8b23ba03729bd19406c9e394813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab4f4428e778d45e0e8db2a254e55f5ec786410c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab4f4428e778d45e0e8db2a254e55f5ec786410c", "html_url": "https://github.com/rust-lang/rust/commit/ab4f4428e778d45e0e8db2a254e55f5ec786410c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab4f4428e778d45e0e8db2a254e55f5ec786410c/comments", "author": {"login": "Technius", "id": 1066652, "node_id": "MDQ6VXNlcjEwNjY2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1066652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Technius", "html_url": "https://github.com/Technius", "followers_url": "https://api.github.com/users/Technius/followers", "following_url": "https://api.github.com/users/Technius/following{/other_user}", "gists_url": "https://api.github.com/users/Technius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Technius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Technius/subscriptions", "organizations_url": "https://api.github.com/users/Technius/orgs", "repos_url": "https://api.github.com/users/Technius/repos", "events_url": "https://api.github.com/users/Technius/events{/privacy}", "received_events_url": "https://api.github.com/users/Technius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Technius", "id": 1066652, "node_id": "MDQ6VXNlcjEwNjY2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1066652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Technius", "html_url": "https://github.com/Technius", "followers_url": "https://api.github.com/users/Technius/followers", "following_url": "https://api.github.com/users/Technius/following{/other_user}", "gists_url": "https://api.github.com/users/Technius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Technius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Technius/subscriptions", "organizations_url": "https://api.github.com/users/Technius/orgs", "repos_url": "https://api.github.com/users/Technius/repos", "events_url": "https://api.github.com/users/Technius/events{/privacy}", "received_events_url": "https://api.github.com/users/Technius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dab8e8121f4a2ba6322417ba7644f3a06973a785", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab8e8121f4a2ba6322417ba7644f3a06973a785", "html_url": "https://github.com/rust-lang/rust/commit/dab8e8121f4a2ba6322417ba7644f3a06973a785"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "0da65a4f2e12f2c9ed8d256d583515612a888092", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ab4f4428e778d45e0e8db2a254e55f5ec786410c/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab4f4428e778d45e0e8db2a254e55f5ec786410c/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=ab4f4428e778d45e0e8db2a254e55f5ec786410c", "patch": "@@ -23,12 +23,12 @@\n //!\n //! These channels come in two flavors:\n //!\n-//! 1. An asynchronous, infinitely buffered channel. The [`channel()`] function\n+//! 1. An asynchronous, infinitely buffered channel. The [`channel`] function\n //!    will return a `(Sender, Receiver)` tuple where all sends will be\n //!    **asynchronous** (they never block). The channel conceptually has an\n //!    infinite buffer.\n //!\n-//! 2. A synchronous, bounded channel. The [`sync_channel()`] function will\n+//! 2. A synchronous, bounded channel. The [`sync_channel`] function will\n //!    return a `(SyncSender, Receiver)` tuple where the storage for pending\n //!    messages is a pre-allocated buffer of a fixed size. All sends will be\n //!    **synchronous** by blocking until there is buffer space available. Note\n@@ -39,8 +39,8 @@\n //! [`SyncSender`]: ../../../std/sync/mpsc/struct.SyncSender.html\n //! [`Receiver`]: ../../../std/sync/mpsc/struct.Receiver.html\n //! [`send`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n-//! [`channel()`]: ../../../std/sync/mpsc/fn.channel.html\n-//! [`sync_channel()`]: ../../../std/sync/mpsc/fn.sync_channel.html\n+//! [`channel`]: ../../../std/sync/mpsc/fn.channel.html\n+//! [`sync_channel`]: ../../../std/sync/mpsc/fn.sync_channel.html\n //!\n //! ## Disconnection\n //!\n@@ -51,12 +51,12 @@\n //!\n //! Once half of a channel has been deallocated, most operations can no longer\n //! continue to make progress, so [`Err`] will be returned. Many applications\n-//! will continue to [`unwrap()`] the results returned from this module,\n+//! will continue to [`unwrap`] the results returned from this module,\n //! instigating a propagation of failure among threads if one unexpectedly dies.\n //!\n //! [`Result`]: ../../../std/result/enum.Result.html\n //! [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n-//! [`unwrap()`]: ../../../std/result/enum.Result.html#method.unwrap\n+//! [`unwrap`]: ../../../std/result/enum.Result.html#method.unwrap\n //!\n //! # Examples\n //!\n@@ -310,12 +310,15 @@ mod spsc_queue;\n /// use std::sync::mpsc::channel;\n /// use std::thread;\n /// use std::time::Duration;\n+///\n /// let (send, recv) = channel();\n+///\n /// thread::spawn(move || {\n ///     send.send(\"Hello world!\").unwrap();\n ///     thread::sleep(Duration::from_secs(2)); // block for two seconds\n ///     send.send(\"Delayed for 2 seconds\").unwrap();\n /// });\n+///\n /// println!(\"{}\", recv.recv().unwrap()); // Received immediately\n /// println!(\"Waiting...\");\n /// println!(\"{}\", recv.recv().unwrap()); // Received after 2 seconds\n@@ -384,18 +387,23 @@ pub struct IntoIter<T> {\n /// ```rust\n /// use std::sync::mpsc::channel;\n /// use std::thread;\n+///\n /// let (sender, receiver) = channel();\n /// let sender2 = sender.clone();\n+///\n /// // First thread owns sender\n /// thread::spawn(move || {\n ///     sender.send(1).unwrap();\n /// });\n+///\n /// // Second thread owns sender2\n /// thread::spawn(move || {\n ///     sender2.send(2).unwrap();\n /// });\n+///\n /// let msg = receiver.recv().unwrap();\n /// let msg2 = receiver.recv().unwrap();\n+///\n /// assert_eq!(3, msg + msg2);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1097,12 +1105,15 @@ impl<T> Receiver<T> {\n     /// ```rust\n     /// use std::sync::mpsc::channel;\n     /// use std::thread;\n+    ///\n     /// let (send, recv) = channel();\n+    ///\n     /// thread::spawn(move || {\n     ///     send.send(1u8).unwrap();\n     ///     send.send(2u8).unwrap();\n     ///     send.send(3u8).unwrap();\n     /// });\n+    ///\n     /// for x in recv.iter() {\n     ///     println!(\"Got: {}\", x);\n     /// }"}]}