{"sha": "86911fd8f610eb59e0f90909323f48229965c06c", "node_id": "C_kwDOAAsO6NoAKDg2OTExZmQ4ZjYxMGViNTllMGY5MDkwOTMyM2Y0ODIyOTk2NWMwNmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-15T15:54:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-15T15:54:47Z"}, "message": "Auto merge of #2368 - RalfJung:debug, r=oli-obk\n\nMake \"./miri {build,run,test}\" use debug assertions but \"./miri install\" not\n\nThis makes `./miri run`/`./miri test` use the full set of debug assertions (including the rather expensive ones that check consistency of the Stacked Borrows cache), but `./miri install` installs a Miri *without* those debug assertions.\n\nThat's the same behavior as cargo, and helps catch Miri bugs with the test suite while making installed Miri usable for larger runs.", "tree": {"sha": "731df37f0a5c0142401b295a96ca667781391abf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/731df37f0a5c0142401b295a96ca667781391abf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86911fd8f610eb59e0f90909323f48229965c06c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86911fd8f610eb59e0f90909323f48229965c06c", "html_url": "https://github.com/rust-lang/rust/commit/86911fd8f610eb59e0f90909323f48229965c06c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86911fd8f610eb59e0f90909323f48229965c06c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b79801d23543598ff1dac39d386a338592616e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b79801d23543598ff1dac39d386a338592616e3", "html_url": "https://github.com/rust-lang/rust/commit/7b79801d23543598ff1dac39d386a338592616e3"}, {"sha": "d6cbe5d014c8c02ed4077ee702d34ea442c62e47", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6cbe5d014c8c02ed4077ee702d34ea442c62e47", "html_url": "https://github.com/rust-lang/rust/commit/d6cbe5d014c8c02ed4077ee702d34ea442c62e47"}], "stats": {"total": 117, "additions": 56, "deletions": 61}, "files": [{"sha": "a2a880f8e308c60fc095cbc8fda34788b6d20cfd", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86911fd8f610eb59e0f90909323f48229965c06c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/86911fd8f610eb59e0f90909323f48229965c06c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=86911fd8f610eb59e0f90909323f48229965c06c", "patch": "@@ -54,6 +54,7 @@ harness = false\n \n [features]\n default = [\"stack-cache\"]\n-# Will be enabled on CI via `--all-features`.\n-expensive-debug-assertions = []\n stack-cache = []\n+\n+[profile.dev]\n+opt-level = 2 # because it's too slow otherwise"}, {"sha": "8c63a57a4f490a6727061871ac79bc085ffcb45f", "filename": "ci.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86911fd8f610eb59e0f90909323f48229965c06c/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/86911fd8f610eb59e0f90909323f48229965c06c/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=86911fd8f610eb59e0f90909323f48229965c06c", "patch": "@@ -5,11 +5,11 @@ set -x\n # Determine configuration\n export RUSTFLAGS=\"-D warnings\"\n export CARGO_INCREMENTAL=0\n-export CARGO_EXTRA_FLAGS=\"--all-features\" # in particular, expensive-debug-assertions\n+export CARGO_EXTRA_FLAGS=\"--all-features\"\n \n # Prepare\n echo \"Build and install miri\"\n-CARGO_EXTRA_FLAGS=\"\" ./miri install # implicitly locked -- and the *installed* Miri does *not* get the expensive-debug-assertions feature\n+./miri install # implicitly locked\n ./miri build --all-targets --locked # the build that all the `./miri test` below will use\n echo\n "}, {"sha": "7b53b802db62a535db03580a69ca1b96e02c2e64", "filename": "miri", "status": "modified", "additions": 26, "deletions": 50, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/86911fd8f610eb59e0f90909323f48229965c06c/miri", "raw_url": "https://github.com/rust-lang/rust/raw/86911fd8f610eb59e0f90909323f48229965c06c/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=86911fd8f610eb59e0f90909323f48229965c06c", "patch": "@@ -6,7 +6,8 @@ USAGE=$(cat <<\"EOF\"\n ./miri install <flags>:\n Installs the miri driver and cargo-miri. <flags> are passed to `cargo\n install`. Sets up the rpath such that the installed binary should work in any\n-working directory.\n+working directory. However, the rustup toolchain when invoking `cargo miri`\n+needs to be the same one used for `./miri install`.\n \n ./miri build <flags>:\n Just build miri. <flags> are passed to `cargo build`.\n@@ -22,10 +23,6 @@ to the final `cargo test` invocation.\n Build miri, set up a sysroot and then run the driver with the given <flags>.\n (Also respects MIRIFLAGS environment variable.)\n \n-The commands above also exist in a \"-debug\" variant (e.g. \"./miri run-debug\n-<flags>\") which uses debug builds instead of release builds, for faster build\n-times and slower execution times.\n-\n ./miri fmt <flags>:\n Format all sources and tests. <flags> are passed to `rustfmt`.\n \n@@ -99,40 +96,21 @@ fi\n \n # Prepare flags for cargo and rustc.\n CARGO=\"cargo +$TOOLCHAIN\"\n-if [ -z \"$CARGO_INCREMENTAL\" ]; then\n-    # Default CARGO_INCREMENTAL to 1.\n-    export CARGO_INCREMENTAL=1\n-fi\n if [ -z \"$CARGO_TARGET_DIR\" ]; then\n     # Share target dir between `miri` and `cargo-miri`.\n     export CARGO_TARGET_DIR=\"$MIRIDIR/target\"\n fi\n # We set the rpath so that Miri finds the private rustc libraries it needs.\n-# We enable debug-assertions to get tracing.\n-# We enable line-only debuginfo for backtraces.\n-export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$LIBDIR -C debug-assertions -C debuginfo=1 $RUSTFLAGS\"\n-# Determine flags passed to all cargo invocations.\n-# This is a bit more annoying that one would hope due to\n-# <https://github.com/rust-lang/cargo/issues/6992>.\n-case \"$COMMAND\" in\n-*-debug)\n-    CARGO_INSTALL_FLAGS=\"--target $TARGET --debug $CARGO_EXTRA_FLAGS\"\n-    CARGO_BUILD_FLAGS=\"--target $TARGET $CARGO_EXTRA_FLAGS\"\n-    ;;\n-*)\n-    CARGO_INSTALL_FLAGS=\"--target $TARGET $CARGO_EXTRA_FLAGS\"\n-    CARGO_BUILD_FLAGS=\"--target $TARGET --release $CARGO_EXTRA_FLAGS\"\n-    ;;\n-esac\n+export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$LIBDIR $RUSTFLAGS\"\n \n ## Helper functions\n \n # Build a sysroot and set MIRI_SYSROOT to use it. Arguments are passed to `cargo miri setup`.\n build_sysroot() {\n     # Build once, for the user to see.\n-    $CARGO run $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -- miri setup \"$@\"\n+    $CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -- miri setup \"$@\"\n     # Call again, to just set env var.\n-    export MIRI_SYSROOT=\"$($CARGO run $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -q -- miri setup --print-sysroot \"$@\")\"\n+    export MIRI_SYSROOT=\"$($CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -q -- miri setup --print-sysroot \"$@\")\"\n }\n \n # Prepare and set MIRI_SYSROOT. Respects `MIRI_TEST_TARGET` and takes into account\n@@ -154,37 +132,35 @@ find_sysroot() {\n \n # Run command.\n case \"$COMMAND\" in\n-install|install-debug)\n+install)\n     # \"--locked\" to respect the Cargo.lock file if it exists,\n     # \"--offline\" to avoid querying the registry (for yanked packages).\n-    $CARGO install $CARGO_INSTALL_FLAGS --path \"$MIRIDIR\" --force --locked --offline \"$@\"\n-    $CARGO install $CARGO_INSTALL_FLAGS --path \"$MIRIDIR\"/cargo-miri --force --locked --offline \"$@\"\n+    $CARGO install $CARGO_EXTRA_FLAGS --path \"$MIRIDIR\" --force --locked --offline \"$@\"\n+    $CARGO install $CARGO_EXTRA_FLAGS --path \"$MIRIDIR\"/cargo-miri --force --locked --offline \"$@\"\n     ;;\n-check|check-debug)\n+check)\n     # Check, and let caller control flags.\n-    $CARGO check $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n-    $CARGO check $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n+    $CARGO check $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n+    $CARGO check $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n     ;;\n-build|build-debug)\n+build)\n     # Build, and let caller control flags.\n-    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n-    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n+    $CARGO build $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n+    $CARGO build $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n     ;;\n-test|test-debug|bless|bless-debug)\n+test|bless)\n     # First build and get a sysroot.\n-    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n+    $CARGO build $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n     find_sysroot\n-    case \"$COMMAND\" in\n-    bless|bless-debug)\n+    if [ \"$COMMAND\" = \"bless\" ]; then\n         export MIRI_BLESS=\"Gesundheit\"\n-        ;;\n-    esac\n+    fi\n     # Then test, and let caller control flags.\n     # Only in root project and ui_test as `cargo-miri` has no tests.\n-    $CARGO test $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n-    $CARGO test $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml \"$@\"\n+    $CARGO test $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n+    $CARGO test $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml \"$@\"\n     ;;\n-run|run-debug)\n+run)\n     # Scan for \"--target\" to overwrite the \"MIRI_TEST_TARGET\" env var so\n     # that we set the MIRI_SYSROOT up the right way.\n     FOUND_TARGET_OPT=0\n@@ -202,19 +178,19 @@ run|run-debug)\n         MIRIFLAGS=\"$MIRIFLAGS --target $MIRI_TEST_TARGET\"\n     fi\n     # First build and get a sysroot.\n-    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n+    $CARGO build $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n     find_sysroot\n     # Then run the actual command.\n-    exec $CARGO run $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- --sysroot \"$MIRI_SYSROOT\" $MIRIFLAGS \"$@\"\n+    exec $CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- --sysroot \"$MIRI_SYSROOT\" $MIRIFLAGS \"$@\"\n     ;;\n fmt)\n     find \"$MIRIDIR\" -not \\( -name target -prune \\) -name '*.rs' \\\n         | xargs rustfmt +$TOOLCHAIN --edition=2021 --config-path \"$MIRIDIR/rustfmt.toml\" \"$@\"\n     ;;\n clippy)\n-    $CARGO clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n-    $CARGO clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml --all-targets \"$@\"\n-    $CARGO clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n+    $CARGO clippy $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n+    $CARGO clippy $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml --all-targets \"$@\"\n+    $CARGO clippy $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n     ;;\n *)\n     if [ -n \"$COMMAND\" ]; then"}, {"sha": "50d3f8c9b20eaadf525c74d7e6f321438ad3e66f", "filename": "src/concurrency/range_object_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86911fd8f610eb59e0f90909323f48229965c06c/src%2Fconcurrency%2Frange_object_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86911fd8f610eb59e0f90909323f48229965c06c/src%2Fconcurrency%2Frange_object_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Frange_object_map.rs?ref=86911fd8f610eb59e0f90909323f48229965c06c", "patch": "@@ -117,11 +117,11 @@ impl<T> RangeObjectMap<T> {\n         self.v.insert(pos, Elem { range, data });\n         // If we aren't the first element, then our start must be greater than the preivous element's end\n         if pos > 0 {\n-            debug_assert!(self.v[pos - 1].range.end() <= range.start);\n+            assert!(self.v[pos - 1].range.end() <= range.start);\n         }\n         // If we aren't the last element, then our end must be smaller than next element's start\n         if pos < self.v.len() - 1 {\n-            debug_assert!(range.end() <= self.v[pos + 1].range.start);\n+            assert!(range.end() <= self.v[pos + 1].range.start);\n         }\n     }\n "}, {"sha": "c77ea63b0873f1eb3f83c338e10e158129ca6cca", "filename": "src/range_map.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86911fd8f610eb59e0f90909323f48229965c06c/src%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86911fd8f610eb59e0f90909323f48229965c06c/src%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frange_map.rs?ref=86911fd8f610eb59e0f90909323f48229965c06c", "patch": "@@ -77,6 +77,10 @@ impl<T> RangeMap<T> {\n         };\n         // The first offset that is not included any more.\n         let end = offset + len;\n+        assert!(\n+            end <= self.v.last().unwrap().range.end,\n+            \"iterating beyond the bounds of this RangeMap\"\n+        );\n         slice\n             .iter()\n             .take_while(move |elem| elem.range.start < end)\n@@ -279,4 +283,18 @@ mod tests {\n         assert_eq!(map.v.len(), 5);\n         assert_eq!(to_vec(&map, 10, 10), vec![23, 42, 23, 23, 23, 19, 19, 19, 19, 19]);\n     }\n+\n+    #[test]\n+    #[should_panic]\n+    fn out_of_range_iter_mut() {\n+        let mut map = RangeMap::<i32>::new(Size::from_bytes(20), -1);\n+        let _ = map.iter_mut(Size::from_bytes(11), Size::from_bytes(11));\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn out_of_range_iter() {\n+        let map = RangeMap::<i32>::new(Size::from_bytes(20), -1);\n+        let _ = map.iter(Size::from_bytes(11), Size::from_bytes(11));\n+    }\n }"}, {"sha": "bc7ffd4faea55bd8588a32a69bcf809617723fc2", "filename": "src/stacked_borrows/stack.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86911fd8f610eb59e0f90909323f48229965c06c/src%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86911fd8f610eb59e0f90909323f48229965c06c/src%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fstack.rs?ref=86911fd8f610eb59e0f90909323f48229965c06c", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> Stack {\n     /// Panics if any of the caching mechanisms have broken,\n     /// - The StackCache indices don't refer to the parallel items,\n     /// - There are no Unique items outside of first_unique..last_unique\n-    #[cfg(feature = \"expensive-debug-assertions\")]\n+    #[cfg(debug_assertions)]\n     fn verify_cache_consistency(&self) {\n         // Only a full cache needs to be valid. Also see the comments in find_granting_cache\n         // and set_unknown_bottom.\n@@ -115,7 +115,7 @@ impl<'tcx> Stack {\n         tag: SbTagExtra,\n         exposed_tags: &FxHashSet<SbTag>,\n     ) -> Result<Option<usize>, ()> {\n-        #[cfg(feature = \"expensive-debug-assertions\")]\n+        #[cfg(debug_assertions)]\n         self.verify_cache_consistency();\n \n         let SbTagExtra::Concrete(tag) = tag else {\n@@ -247,7 +247,7 @@ impl<'tcx> Stack {\n         // This primes the cache for the next access, which is almost always the just-added tag.\n         self.cache.add(new_idx, new);\n \n-        #[cfg(feature = \"expensive-debug-assertions\")]\n+        #[cfg(debug_assertions)]\n         self.verify_cache_consistency();\n     }\n \n@@ -325,7 +325,7 @@ impl<'tcx> Stack {\n             self.unique_range.end = self.unique_range.end.min(disable_start + 1);\n         }\n \n-        #[cfg(feature = \"expensive-debug-assertions\")]\n+        #[cfg(debug_assertions)]\n         self.verify_cache_consistency();\n \n         Ok(())\n@@ -380,7 +380,7 @@ impl<'tcx> Stack {\n             self.unique_range = 0..0;\n         }\n \n-        #[cfg(feature = \"expensive-debug-assertions\")]\n+        #[cfg(debug_assertions)]\n         self.verify_cache_consistency();\n         Ok(())\n     }"}]}