{"sha": "befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1", "node_id": "C_kwDOAAsO6NoAKGJlZmRmYjVjNzExM2IzZDgyZDk3M2IxYWNmZGNjMmIwZDljMTRhYjE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-09-28T19:48:58Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-09-28T20:02:45Z"}, "message": "Improve error messages for bad type constraints\n\nCo-authored-by: Esteban Kuber <esteban@kuber.com.ar>", "tree": {"sha": "7f534baa92c6a38aabb23987876c0e5a4fb520f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f534baa92c6a38aabb23987876c0e5a4fb520f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1", "html_url": "https://github.com/rust-lang/rust/commit/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7c1306b43895a97c0675c6d854afa468a22aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7c1306b43895a97c0675c6d854afa468a22aad", "html_url": "https://github.com/rust-lang/rust/commit/8a7c1306b43895a97c0675c6d854afa468a22aad"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "c7d080a80fe6f843c07895d292f16ae33e501ccd", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1", "patch": "@@ -495,25 +495,28 @@ impl<'a> Parser<'a> {\n             None => {\n                 let after_eq = eq.shrink_to_hi();\n                 let before_next = self.token.span.shrink_to_lo();\n-                let the_type_placeholder = if matches!(self.token.kind, token::Comma | token::Gt) {\n-                    \" TheType\"\n-                } else {\n-                    \" TheType \"\n-                };\n-                self.struct_span_err(after_eq.to(before_next), \"missing type to the right of `=`\")\n-                    .span_suggestion(\n+                let mut err = self\n+                    .struct_span_err(after_eq.to(before_next), \"missing type to the right of `=`\");\n+                if matches!(self.token.kind, token::Comma | token::Gt) {\n+                    err.span_suggestion(\n                         self.sess.source_map().next_point(eq).to(before_next),\n                         \"to constrain the associated type, add a type after `=`\",\n-                        the_type_placeholder.to_string(),\n+                        \" TheType\".to_string(),\n                         Applicability::HasPlaceholders,\n-                    )\n-                    .span_suggestion(\n+                    );\n+                    err.span_suggestion(\n                         eq.to(before_next),\n                         &format!(\"remove the `=` if `{}` is a type\", ident),\n                         String::new(),\n                         Applicability::MaybeIncorrect,\n                     )\n-                    .emit();\n+                } else {\n+                    err.span_label(\n+                        self.token.span,\n+                        &format!(\"expected type, found {}\", super::token_descr(&self.token)),\n+                    )\n+                };\n+                return Err(err);\n             }\n         }\n         Ok(self.mk_ty(span, ast::TyKind::Err))\n@@ -584,6 +587,12 @@ impl<'a> Parser<'a> {\n                 \"expected lifetime, type, or constant, found keyword `const`\",\n             );\n             if self.check_const_arg() {\n+                err.span_suggestion_verbose(\n+                    start.until(self.token.span),\n+                    \"the `const` keyword is only needed in the definition of the type\",\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                );\n                 err.emit();\n                 GenericArg::Const(self.parse_const_arg()?)\n             } else {"}, {"sha": "ddddd86ab9c06b3f79997f791dabd0f6572652a6", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-assoc.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr?ref=befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1", "patch": "@@ -3,6 +3,12 @@ error: expected lifetime, type, or constant, found keyword `const`\n    |\n LL | impl Foo<const 3> for Bar {\n    |          ^^^^^\n+   |\n+help: the `const` keyword is only needed in the definition of the type\n+   |\n+LL - impl Foo<const 3> for Bar {\n+LL + impl Foo<3> for Bar {\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "0ec6762b6e282596a17524ccc5a877def103e2a3", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs?ref=befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1", "patch": "@@ -8,7 +8,6 @@ const T: usize = 42;\n \n impl Foo<N = type 3> for Bar {\n //~^ERROR missing type to the right of `=`\n-//~^^ERROR found keyword `type`\n     fn do_x(&self) -> [u8; 3] {\n         [0u8; 3]\n     }"}, {"sha": "f0d0d90c774f8a5981dddb63ff0ef20059b52059", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-type.stderr", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr?ref=befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1", "patch": "@@ -2,23 +2,7 @@ error: missing type to the right of `=`\n   --> $DIR/issue-89013-type.rs:9:13\n    |\n LL | impl Foo<N = type 3> for Bar {\n-   |             ^\n-   |\n-help: to constrain the associated type, add a type after `=`\n-   |\n-LL | impl Foo<N = TheType type 3> for Bar {\n-   |              +++++++\n-help: remove the `=` if `N` is a type\n-   |\n-LL - impl Foo<N = type 3> for Bar {\n-LL + impl Foo<N type 3> for Bar {\n-   | \n-\n-error: expected one of `,`, `>`, a const expression, lifetime, or type, found keyword `type`\n-  --> $DIR/issue-89013-type.rs:9:14\n-   |\n-LL | impl Foo<N = type 3> for Bar {\n-   |              ^^^^ expected one of `,`, `>`, a const expression, lifetime, or type\n+   |             ^---- expected type, found keyword `type`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "a60e17aef589ab54f93c75f0d83380d49155727f", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr?ref=befdfb5c7113b3d82d973b1acfdcc2b0d9c14ab1", "patch": "@@ -3,6 +3,12 @@ error: expected lifetime, type, or constant, found keyword `const`\n    |\n LL | impl Foo<N = const 3> for Bar {\n    |              ^^^^^\n+   |\n+help: the `const` keyword is only needed in the definition of the type\n+   |\n+LL - impl Foo<N = const 3> for Bar {\n+LL + impl Foo<N = 3> for Bar {\n+   | \n \n error: cannot constrain an associated constant to a value\n   --> $DIR/issue-89013.rs:9:10"}]}