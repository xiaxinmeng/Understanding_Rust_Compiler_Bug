{"sha": "1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNTgzNjdhNmQ2MGQzZTJhOGM2OGQ2MjEyYTgwMDc5OTJiMWRiZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-22T12:29:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-22T12:29:30Z"}, "message": "Auto merge of #87366 - GuillaumeGomez:rollup-7muueab, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #87270 (Don't display <table> in item summary)\n - #87281 (Normalize generic_ty before checking if bound is met)\n - #87288 (rustdoc: Restore --default-theme, etc, by restoring varname escaping)\n - #87307 (Allow combining -Cprofile-generate and -Cpanic=unwind when targeting MSVC.)\n - #87343 (Regression fix to avoid further beta backports: Remove unsound TrustedRandomAccess implementations)\n - #87357 (Update my name/email in .mailmap)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6f92df24a03ad09f494a72e1be383c947e400568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f92df24a03ad09f494a72e1be383c947e400568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "html_url": "https://github.com/rust-lang/rust/commit/1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f913a4fe901d6aeb84941fa06c17916d4e6d1dd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f913a4fe901d6aeb84941fa06c17916d4e6d1dd7", "html_url": "https://github.com/rust-lang/rust/commit/f913a4fe901d6aeb84941fa06c17916d4e6d1dd7"}, {"sha": "ab9ea543f8637e0e01cef5e71d6e314999049b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9ea543f8637e0e01cef5e71d6e314999049b28", "html_url": "https://github.com/rust-lang/rust/commit/ab9ea543f8637e0e01cef5e71d6e314999049b28"}], "stats": {"total": 306, "additions": 144, "deletions": 162}, "files": [{"sha": "3b8d19dc4e2baa6b96eb4a24e597a87975d77300", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -175,6 +175,7 @@ Lennart Kudling <github@kudling.de>\n L\u00e9o Lanteri Thauvin <leseulartichaut@gmail.com>\n L\u00e9o Lanteri Thauvin <leseulartichaut@gmail.com> <38361244+LeSeulArtichaut@users.noreply.github.com>\n L\u00e9o Testard <leo.testard@gmail.com>\n+Lily Ballard <lily@ballards.net> <kevin@sb.org>\n Lindsey Kuper <lindsey@composition.al> <lindsey@rockstargirl.org>\n Lindsey Kuper <lindsey@composition.al> <lkuper@mozilla.com>\n Luke Metz <luke.metz@students.olin.edu>"}, {"sha": "dedfe45aca49bd807af07a9b573d245375e98bbd", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -40,6 +40,7 @@ members = [\n exclude = [\n   \"build\",\n   \"compiler/rustc_codegen_cranelift\",\n+  \"src/test/rustdoc-gui\",\n   # HACK(eddyb) This hardcodes the fact that our CI uses `/checkout/obj`.\n   \"obj\",\n   # The `x` binary is a thin wrapper that calls `x.py`, which initializes"}, {"sha": "869fd225d5114766625630418f73d2b61023dd1c", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -638,6 +638,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             let sub = var_data.normalize(self.tcx(), verify.region);\n \n             let verify_kind_ty = verify.kind.to_ty(self.tcx());\n+            let verify_kind_ty = var_data.normalize(self.tcx(), verify_kind_ty);\n             if self.bound_is_met(&verify.bound, var_data, verify_kind_ty, sub) {\n                 continue;\n             }"}, {"sha": "86d495c3353b3bdfb9adf5562a06dbf0fd9f27bb", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -1,7 +1,7 @@\n use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n-use crate::config::{self, CrateType, OutputType, PrintRequest, SwitchWithOptPath};\n+use crate::config::{self, CrateType, OutputType, SwitchWithOptPath};\n use crate::filesearch;\n use crate::lint::{self, LintId};\n use crate::parse::ParseSess;\n@@ -1440,25 +1440,6 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         }\n     }\n \n-    // PGO does not work reliably with panic=unwind on Windows. Let's make it\n-    // an error to combine the two for now. It always runs into an assertions\n-    // if LLVM is built with assertions, but without assertions it sometimes\n-    // does not crash and will probably generate a corrupted binary.\n-    // We should only display this error if we're actually going to run PGO.\n-    // If we're just supposed to print out some data, don't show the error (#61002).\n-    if sess.opts.cg.profile_generate.enabled()\n-        && sess.target.is_like_msvc\n-        && sess.panic_strategy() == PanicStrategy::Unwind\n-        && sess.opts.prints.iter().all(|&p| p == PrintRequest::NativeStaticLibs)\n-    {\n-        sess.err(\n-            \"Profile-guided optimization does not yet work in conjunction \\\n-                  with `-Cpanic=unwind` on Windows when targeting MSVC. \\\n-                  See issue #61002 <https://github.com/rust-lang/rust/issues/61002> \\\n-                  for more information.\",\n-        );\n-    }\n-\n     // Sanitizers can only be used on platforms that we know have working sanitizer codegen.\n     let supported_sanitizers = sess.target.options.supported_sanitizers;\n     let unsupported_sanitizers = sess.opts.debugging_opts.sanitizer - supported_sanitizers;"}, {"sha": "612f7e6eb4da8c213c2c36b93e34c7d905074c29", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -1,5 +1,5 @@\n use core::fmt;\n-use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n+use core::iter::{FusedIterator, TrustedLen};\n \n use super::VecDeque;\n \n@@ -36,23 +36,6 @@ impl<T> Iterator for IntoIter<T> {\n         let len = self.inner.len();\n         (len, Some(len))\n     }\n-\n-    #[inline]\n-    #[doc(hidden)]\n-    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n-    where\n-        Self: TrustedRandomAccess,\n-    {\n-        // Safety: The TrustedRandomAccess contract requires that callers only pass an index\n-        // that is in bounds.\n-        // Additionally Self: TrustedRandomAccess is only implemented for T: Copy which means even\n-        // multiple repeated reads of the same index would be safe and the\n-        // values are !Drop, thus won't suffer from double drops.\n-        unsafe {\n-            let idx = self.inner.wrap_add(self.inner.tail, idx);\n-            self.inner.buffer_read(idx)\n-        }\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -75,14 +58,3 @@ impl<T> FusedIterator for IntoIter<T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T> TrustedLen for IntoIter<T> {}\n-\n-#[doc(hidden)]\n-#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-// T: Copy as approximation for !Drop since get_unchecked does not update the pointers\n-// and thus we can't implement drop-handling\n-unsafe impl<T> TrustedRandomAccess for IntoIter<T>\n-where\n-    T: Copy,\n-{\n-    const MAY_HAVE_SIDE_EFFECT: bool = false;\n-}"}, {"sha": "61ab1b1faff89826be67617085c9a6e0def438ae", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     fmt,\n-    iter::{self, ExactSizeIterator, FusedIterator, TrustedLen, TrustedRandomAccess},\n+    iter::{self, ExactSizeIterator, FusedIterator, TrustedLen},\n     mem::{self, MaybeUninit},\n     ops::Range,\n     ptr,\n@@ -130,19 +130,6 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n     fn last(mut self) -> Option<Self::Item> {\n         self.next_back()\n     }\n-\n-    #[inline]\n-    #[doc(hidden)]\n-    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n-    where\n-        Self: TrustedRandomAccess,\n-    {\n-        // SAFETY: Callers are only allowed to pass an index that is in bounds\n-        // Additionally Self: TrustedRandomAccess is only implemented for T: Copy which means even\n-        // multiple repeated reads of the same index would be safe and the\n-        // values are !Drop, thus won't suffer from double drops.\n-        unsafe { self.data.get_unchecked(self.alive.start + idx).assume_init_read() }\n-    }\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n@@ -197,17 +184,6 @@ impl<T, const N: usize> FusedIterator for IntoIter<T, N> {}\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n unsafe impl<T, const N: usize> TrustedLen for IntoIter<T, N> {}\n \n-#[doc(hidden)]\n-#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-// T: Copy as approximation for !Drop since get_unchecked does not update the pointers\n-// and thus we can't implement drop-handling\n-unsafe impl<T, const N: usize> TrustedRandomAccess for IntoIter<T, N>\n-where\n-    T: Copy,\n-{\n-    const MAY_HAVE_SIDE_EFFECT: bool = false;\n-}\n-\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n impl<T: Clone, const N: usize> Clone for IntoIter<T, N> {\n     fn clone(&self) -> Self {"}, {"sha": "31f18d81c7c0fb403892b9eebdde35e19699e406", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -907,18 +907,27 @@ impl Step for RustdocGUI {\n         // We remove existing folder to be sure there won't be artifacts remaining.\n         let _ = fs::remove_dir_all(&out_dir);\n \n-        let src_path = \"src/test/rustdoc-gui/src\";\n+        let src_path = builder.build.src.join(\"src/test/rustdoc-gui/src\");\n         // We generate docs for the libraries present in the rustdoc-gui's src folder.\n-        let mut cargo = Command::new(&builder.initial_cargo);\n-        cargo\n-            .arg(\"doc\")\n-            .arg(\"--workspace\")\n-            .arg(\"--target-dir\")\n-            .arg(&out_dir)\n-            .env(\"RUSTDOC\", builder.rustdoc(self.compiler))\n-            .env(\"RUSTC\", builder.rustc(self.compiler))\n-            .current_dir(&builder.build.src.join(src_path));\n-        builder.run(&mut cargo);\n+        for entry in src_path.read_dir().expect(\"read_dir call failed\") {\n+            if let Ok(entry) = entry {\n+                let path = entry.path();\n+\n+                if !path.is_dir() {\n+                    continue;\n+                }\n+\n+                let mut cargo = Command::new(&builder.initial_cargo);\n+                cargo\n+                    .arg(\"doc\")\n+                    .arg(\"--target-dir\")\n+                    .arg(&out_dir)\n+                    .env(\"RUSTDOC\", builder.rustdoc(self.compiler))\n+                    .env(\"RUSTC\", builder.rustc(self.compiler))\n+                    .current_dir(path);\n+                builder.run(&mut cargo);\n+            }\n+        }\n \n         // We now run GUI tests.\n         let mut command = Command::new(&nodejs);"}, {"sha": "abd1fd2bf39a29c13702beaf484680ae232f53f8", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -459,7 +459,31 @@ impl Options {\n                 })\n                 .collect(),\n         ];\n-        let default_settings = default_settings.into_iter().flatten().collect();\n+        let default_settings = default_settings\n+            .into_iter()\n+            .flatten()\n+            .map(\n+                // The keys here become part of `data-` attribute names in the generated HTML.  The\n+                // browser does a strange mapping when converting them into attributes on the\n+                // `dataset` property on the DOM HTML Node:\n+                //   https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset\n+                //\n+                // The original key values we have are the same as the DOM storage API keys and the\n+                // command line options, so contain `-`.  Our Javascript needs to be able to look\n+                // these values up both in `dataset` and in the storage API, so it needs to be able\n+                // to convert the names back and forth.  Despite doing this kebab-case to\n+                // StudlyCaps transformation automatically, the JS DOM API does not provide a\n+                // mechanism for doing the just transformation on a string.  So we want to avoid\n+                // the StudlyCaps representation in the `dataset` property.\n+                //\n+                // We solve this by replacing all the `-`s with `_`s.  We do that here, when we\n+                // generate the `data-` attributes, and in the JS, when we look them up.  (See\n+                // `getSettingValue` in `storage.js.`) Converting `-` to `_` is simple in JS.\n+                //\n+                // The values will be HTML-escaped by the default Tera escaping.\n+                |(k, v)| (k.replace('-', \"_\"), v),\n+            )\n+            .collect();\n \n         let test_args = matches.opt_strs(\"test-args\");\n         let test_args: Vec<String> ="}, {"sha": "908e292d968efbb045a2bb474a540a1e1e0cc06d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -57,7 +57,7 @@ pub(crate) fn opts() -> Options {\n \n /// A subset of [`opts()`] used for rendering summaries.\n pub(crate) fn summary_opts() -> Options {\n-    Options::ENABLE_STRIKETHROUGH | Options::ENABLE_SMART_PUNCTUATION\n+    Options::ENABLE_STRIKETHROUGH | Options::ENABLE_SMART_PUNCTUATION | Options::ENABLE_TABLES\n }\n \n /// When `to_string` is called, this struct will emit the HTML corresponding to\n@@ -522,6 +522,10 @@ fn check_if_allowed_tag(t: &Tag<'_>) -> bool {\n     )\n }\n \n+fn is_forbidden_tag(t: &Tag<'_>) -> bool {\n+    matches!(t, Tag::CodeBlock(_) | Tag::Table(_) | Tag::TableHead | Tag::TableRow | Tag::TableCell)\n+}\n+\n impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n     type Item = Event<'a>;\n \n@@ -535,14 +539,17 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n         if let Some(event) = self.inner.next() {\n             let mut is_start = true;\n             let is_allowed_tag = match event {\n-                Event::Start(Tag::CodeBlock(_)) | Event::End(Tag::CodeBlock(_)) => {\n-                    return None;\n-                }\n                 Event::Start(ref c) => {\n+                    if is_forbidden_tag(c) {\n+                        return None;\n+                    }\n                     self.depth += 1;\n                     check_if_allowed_tag(c)\n                 }\n                 Event::End(ref c) => {\n+                    if is_forbidden_tag(c) {\n+                        return None;\n+                    }\n                     self.depth -= 1;\n                     is_start = false;\n                     check_if_allowed_tag(c)"}, {"sha": "78ed17e6899e9aa17c0d526b7f93ba64cf3d51a2", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -22,6 +22,8 @@ function getSettingValue(settingName) {\n         return current;\n     }\n     if (settingsDataset !== null) {\n+        // See the comment for `default_settings.into_iter()` etc. in\n+        // `Options::from_matches` in `librustdoc/config.rs`.\n         var def = settingsDataset[settingName.replace(/-/g,'_')];\n         if (def !== undefined) {\n             return def;"}, {"sha": "05c2d2fc0d8c1cd354521ff7b9d2169dc7123ce9", "filename": "src/test/codegen/pgo-instrumentation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -1,8 +1,7 @@\n // Test that `-Cprofile-generate` creates expected instrumentation artifacts in LLVM IR.\n-// Compiling with `-Cpanic=abort` because PGO+unwinding isn't supported on all platforms.\n \n // needs-profiler-support\n-// compile-flags: -Cprofile-generate -Ccodegen-units=1 -Cpanic=abort\n+// compile-flags: -Cprofile-generate -Ccodegen-units=1\n \n // CHECK: @__llvm_profile_raw_version =\n // CHECK-DAG: @__profc_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = {{.*}}global"}, {"sha": "9773e3f1fdfc4b8c8949e94f2c936674171da94b", "filename": "src/test/run-make-fulldeps/pgo-branch-weights/Makefile", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-branch-weights%2FMakefile?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -6,19 +6,6 @@\n \n -include ../tools.mk\n \n-# This test makes sure that instrumented binaries record the right counts for\n-# functions being called and branches being taken. We run an instrumented binary\n-# with an argument that causes a know path through the program and then check\n-# that the expected counts get added to the use-phase LLVM IR.\n-\n-# LLVM doesn't support instrumenting binaries that use SEH:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMMON_FLAGS=-Cpanic=abort\n-endif\n-\n # For some very small programs GNU ld seems to not properly handle\n # instrumentation sections correctly. Neither Gold nor LLD have that problem.\n ifeq ($(UNAME),Linux)"}, {"sha": "a7d5c561632574b485db2251f2cec14c8152da85", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/Makefile", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -8,14 +8,6 @@\n \n COMPILE_FLAGS=-Copt-level=3 -Clto=fat -Cprofile-generate=\"$(TMPDIR)\"\n \n-# LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMPILE_FLAGS+= -Cpanic=abort\n-endif\n-\n all:\n \t$(RUSTC) $(COMPILE_FLAGS) test.rs\n \t$(call RUN,test) || exit 1"}, {"sha": "425bfc28a9766d058b44aa1b18750867e8138093", "filename": "src/test/run-make-fulldeps/pgo-gen-no-imp-symbols/Makefile", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -4,14 +4,6 @@\n \n COMPILE_FLAGS=-O -Ccodegen-units=1 -Cprofile-generate=\"$(TMPDIR)\"\n \n-# LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMPILE_FLAGS+= -Cpanic=abort\n-endif\n-\n all:\n \t$(RUSTC) $(COMPILE_FLAGS) --emit=llvm-ir test.rs\n \t# We expect symbols starting with \"__llvm_profile_\"."}, {"sha": "6533355be34182e3bc1dd7033de138f7bdf27664", "filename": "src/test/run-make-fulldeps/pgo-gen/Makefile", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -8,14 +8,6 @@\n \n COMPILE_FLAGS=-g -Cprofile-generate=\"$(TMPDIR)\"\n \n-# LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMPILE_FLAGS+= -Cpanic=abort\n-endif\n-\n all:\n \t$(RUSTC) $(COMPILE_FLAGS) test.rs\n \t$(call RUN,test) || exit 1"}, {"sha": "c0195dcbb31be047bb1d16677c6c8b76c231f65e", "filename": "src/test/run-make-fulldeps/pgo-indirect-call-promotion/Makefile", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-indirect-call-promotion%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-indirect-call-promotion%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-indirect-call-promotion%2FMakefile?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -6,20 +6,6 @@\n \n -include ../tools.mk\n \n-# This test makes sure that indirect call promotion is performed. The test\n-# programs calls the same function a thousand times through a function pointer.\n-# Only PGO data provides the information that it actually always is the same\n-# function. We verify that the indirect call promotion pass inserts a check\n-# whether it can make a direct call instead of the indirect call.\n-\n-# LLVM doesn't support instrumenting binaries that use SEH:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMMON_FLAGS=-Cpanic=abort\n-endif\n-\n all:\n \t# We don't compile `opaque` with either optimizations or instrumentation.\n \t# We don't compile `opaque` with either optimizations or instrumentation."}, {"sha": "d7863c9c587a50481b18b08b765b8fee1c00ebe0", "filename": "src/test/run-make-fulldeps/pgo-use/Makefile", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -18,14 +18,6 @@\n \n COMMON_FLAGS=-Copt-level=2 -Ccodegen-units=1 -Cllvm-args=-disable-preinline\n \n-# LLVM doesn't support instrumenting binaries that use SEH:\n-# https://github.com/rust-lang/rust/issues/61002\n-#\n-# Things work fine with -Cpanic=abort though.\n-ifdef IS_MSVC\n-COMMON_FLAGS+= -Cpanic=abort\n-endif\n-\n ifeq ($(UNAME),Darwin)\n # macOS does not have the `tac` command, but `tail -r` does the same thing\n TAC := tail -r"}, {"sha": "68b674a11f2f57ded62e11017b400a7b85b42cb8", "filename": "src/test/rustdoc-gui/default-settings.goml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fdefault-settings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fdefault-settings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdefault-settings.goml?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -0,0 +1,8 @@\n+// This test ensures that the default settings are correctly applied.\n+//\n+// The \"settings\" crate uses \"ayu\" as default setting, which is what we will\n+// check.\n+goto: file://|DOC_PATH|/settings/index.html\n+// Wait a bit to be sure the default theme is applied.\n+wait-for: 1000\n+assert-css: (\"body\", {\"background-color\": \"rgb(15, 20, 25)\"})"}, {"sha": "6bf4e288c437746b57503a09361bfa3aa07df69c", "filename": "src/test/rustdoc-gui/item-summary-table.goml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fitem-summary-table.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fitem-summary-table.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-summary-table.goml?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -0,0 +1,6 @@\n+// This test ensures that <table> elements aren't display in items summary.\n+goto: file://|DOC_PATH|/lib2/summary_table/index.html\n+// We check that we picked the right item first.\n+assert-text: (\".item-table .item-left\", \"Foo\")\n+// Then we check that its summary is empty.\n+assert-text: (\".item-table .item-right\", \"\")"}, {"sha": "9c8c0c636f07fac38c91cf153cae9939dd75cfed", "filename": "src/test/rustdoc-gui/src/Cargo.toml", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f913a4fe901d6aeb84941fa06c17916d4e6d1dd7/src%2Ftest%2Frustdoc-gui%2Fsrc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f913a4fe901d6aeb84941fa06c17916d4e6d1dd7/src%2Ftest%2Frustdoc-gui%2Fsrc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2FCargo.toml?ref=f913a4fe901d6aeb84941fa06c17916d4e6d1dd7", "patch": "@@ -1,6 +0,0 @@\n-[workspace]\n-members = [\n-    \"test_docs\",\n-    \"lib2\",\n-    \"implementors\",\n-]"}, {"sha": "a5873ceb3256aa1bba532855545b43f5494fe8b8", "filename": "src/test/rustdoc-gui/src/lib2/Cargo.lock", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.lock?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -12,7 +12,3 @@ version = \"0.1.0\"\n dependencies = [\n  \"implementors\",\n ]\n-\n-[[package]]\n-name = \"test_docs\"\n-version = \"0.1.0\"", "previous_filename": "src/test/rustdoc-gui/src/Cargo.lock"}, {"sha": "2e37f3f667a02f9ae583ede9650964a0e720d1fd", "filename": "src/test/rustdoc-gui/src/lib2/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.toml?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -7,4 +7,4 @@ edition = \"2018\"\n path = \"lib.rs\"\n \n [dependencies]\n-implementors = { path = \"../implementors\" }\n+implementors = { path = \"./implementors\" }"}, {"sha": "cad99a991a2c82add0969447aeca4b636b5d8619", "filename": "src/test/rustdoc-gui/src/lib2/implementors/Cargo.lock", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2FCargo.lock?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -0,0 +1,7 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"implementors\"\n+version = \"0.1.0\""}, {"sha": "7ef1052c49fd2e0a360336cdb241a26a4bc8e7dc", "filename": "src/test/rustdoc-gui/src/lib2/implementors/Cargo.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2FCargo.toml?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "previous_filename": "src/test/rustdoc-gui/src/implementors/Cargo.toml"}, {"sha": "4b2f6962e30c50498ea7bdd381c8bbc77bc6c389", "filename": "src/test/rustdoc-gui/src/lib2/implementors/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "previous_filename": "src/test/rustdoc-gui/src/implementors/lib.rs"}, {"sha": "36373d24971c992a76d2532f0ff8dbad6ac29552", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -66,3 +66,10 @@ pub mod long_table {\n     /// I wanna sqdkfnqds f dsqf qds f dsqf dsq f dsq f qds f qds f qds f dsqq f dsf sqdf dsq fds f dsq f dq f ds fq sd fqds f dsq f sqd fsq df sd fdsqfqsd fdsq f dsq f dsqfd s dfq\n     pub struct Foo;\n }\n+\n+pub mod summary_table {\n+    /// | header 1 | header 2 |\n+    /// | -------- | -------- |\n+    /// | content | content |\n+    pub struct Foo;\n+}"}, {"sha": "bbb8d11a2ede87a67b8da8c628d71a6da9273826", "filename": "src/test/rustdoc-gui/src/settings/.cargo/config.toml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2F.cargo%2Fconfig.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2F.cargo%2Fconfig.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2F.cargo%2Fconfig.toml?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -0,0 +1,2 @@\n+[build]\n+rustdocflags = [\"--default-theme\", \"ayu\"]"}, {"sha": "6f0de1ac1e85b41b9b21764fc8df8b50e9a55187", "filename": "src/test/rustdoc-gui/src/settings/Cargo.lock", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2FCargo.lock?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -0,0 +1,7 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"settings\"\n+version = \"0.1.0\""}, {"sha": "c8a211a47cafc9a393cd1a9d1873be0d17a2152a", "filename": "src/test/rustdoc-gui/src/settings/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2FCargo.toml?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"settings\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+\n+[lib]\n+path = \"lib.rs\""}, {"sha": "b76b4321d62aa8e066b24d213c79ccc8230b8d7b", "filename": "src/test/rustdoc-gui/src/settings/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fsettings%2Flib.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -0,0 +1 @@\n+pub fn foo() {}"}, {"sha": "6b80f6e88ef13e118a10eacef6c30b95c5102183", "filename": "src/test/rustdoc-gui/src/test_docs/Cargo.lock", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2FCargo.lock?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -0,0 +1,7 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"test_docs\"\n+version = \"0.1.0\""}, {"sha": "ecb8f0b3b4876e48ac8722c51806c7ad10bc3826", "filename": "src/test/rustdoc/default-theme.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc%2Fdefault-theme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Frustdoc%2Fdefault-theme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdefault-theme.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: --default-theme ayu\n+\n+// @has default_theme/index.html\n+// @has - '//script[@id=\"default-settings\"]/@data-theme' 'ayu'\n+// @has - '//script[@id=\"default-settings\"]/@data-use_system_theme' 'false'\n+\n+pub fn whatever() {}"}, {"sha": "7f399c4f9a2db7cc09d9143455d2a87295209a39", "filename": "src/test/ui/generic-associated-types/issue-81487.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81487.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81487.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81487.rs?ref=1158367a6d60d3e2a8c68d6212a8007992b1dbf0", "patch": "@@ -0,0 +1,19 @@\n+// build-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait Trait {\n+    type Ref<'a>;\n+}\n+\n+impl Trait for () {\n+    type Ref<'a> = &'a i8;\n+}\n+\n+struct RefRef<'a, T: Trait>(&'a <T as Trait>::Ref<'a>);\n+\n+fn wrap<'a, T: Trait>(reff: &'a <T as Trait>::Ref<'a>) -> RefRef<'a, T> {\n+    RefRef(reff)\n+}\n+\n+fn main() {}"}]}