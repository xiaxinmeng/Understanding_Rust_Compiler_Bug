{"sha": "f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZjc4MGM5NDIyZjAzOGFlNzhlNzJhOTliMWNhMmEwZDdiMzkyYmM=", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2020-11-07T23:26:14Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2020-11-08T12:00:35Z"}, "message": "Add let_underscore_drop", "tree": {"sha": "8de0cea1a46e40758688b34fc2d6537e95d36d63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8de0cea1a46e40758688b34fc2d6537e95d36d63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "html_url": "https://github.com/rust-lang/rust/commit/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d5f45adee883c565062fbb44de7ea29918539d", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d5f45adee883c565062fbb44de7ea29918539d", "html_url": "https://github.com/rust-lang/rust/commit/96d5f45adee883c565062fbb44de7ea29918539d"}], "stats": {"total": 113, "additions": 111, "deletions": 2}, "files": [{"sha": "816d25bcd93eb1fe5628ceeb530ea04248f8d402", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "patch": "@@ -1787,6 +1787,7 @@ Released 2018-09-13\n [`len_without_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n [`len_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n [`let_and_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n+[`let_underscore_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop\n [`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value"}, {"sha": "9c7fd634547676a9c74582ae71f7967bb08dd6ee", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n+use crate::utils::{implements_trait, is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = <expr>`\n@@ -58,7 +58,40 @@ declare_clippy_lint! {\n     \"non-binding let on a synchronization lock\"\n }\n \n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `let _ = <expr>`\n+    /// where expr has a type that implements `Drop`\n+    ///\n+    /// **Why is this bad?** This statement immediately drops the initializer\n+    /// expression instead of extending its lifetime to the end of the scope, which\n+    /// is often not intended. To extend the expression's lifetime to the end of the\n+    /// scope, use an underscore-prefixed name instead (i.e. _var). If you want to\n+    /// explicitly drop the expression, `std::mem::drop` conveys your intention\n+    /// better and is less error-prone.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// struct Droppable;\n+    /// impl Drop for Droppable {\n+    ///     fn drop(&mut self) {}\n+    /// }\n+    /// let _ = Droppable;\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// let _droppable = Droppable;\n+    /// ```\n+    pub LET_UNDERSCORE_DROP,\n+    correctness,\n+    \"non-binding let on a type that implements `Drop`\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_DROP]);\n \n const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n     &paths::MUTEX_GUARD,\n@@ -84,6 +117,15 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n \n                     GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n                 });\n+                let implements_drop = cx.tcx.lang_items().drop_trait().map_or(false, |drop_trait|\n+                    init_ty.walk().any(|inner| match inner.unpack() {\n+                        GenericArgKind::Type(inner_ty) => {\n+                            implements_trait(cx, inner_ty, drop_trait, &[])\n+                        },\n+\n+                        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+                    })\n+                );\n                 if contains_sync_guard {\n                     span_lint_and_help(\n                         cx,\n@@ -94,6 +136,16 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n                     )\n+                } else if implements_drop {\n+                    span_lint_and_help(\n+                        cx,\n+                        LET_UNDERSCORE_DROP,\n+                        local.span,\n+                        \"non-binding let on a type that implements `Drop`\",\n+                        None,\n+                        \"consider using an underscore-prefixed named \\\n+                            binding or dropping explicitly with `std::mem::drop`\"\n+                    )\n                 } else if is_must_use_ty(cx, cx.typeck_results().expr_ty(init)) {\n                     span_lint_and_help(\n                         cx,"}, {"sha": "b44e28b4596f632f2065c4ee566db8d1091b72ef", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "patch": "@@ -622,6 +622,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n+        &let_underscore::LET_UNDERSCORE_DROP,\n         &let_underscore::LET_UNDERSCORE_LOCK,\n         &let_underscore::LET_UNDERSCORE_MUST_USE,\n         &lifetimes::EXTRA_UNUSED_LIFETIMES,\n@@ -1383,6 +1384,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&len_zero::COMPARISON_TO_EMPTY),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n+        LintId::of(&let_underscore::LET_UNDERSCORE_DROP),\n         LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n         LintId::of(&lifetimes::EXTRA_UNUSED_LIFETIMES),\n         LintId::of(&lifetimes::NEEDLESS_LIFETIMES),\n@@ -1809,6 +1811,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&infinite_iter::INFINITE_ITER),\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n         LintId::of(&inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n+        LintId::of(&let_underscore::LET_UNDERSCORE_DROP),\n         LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n         LintId::of(&literal_representation::MISTYPED_LITERAL_SUFFIXES),\n         LintId::of(&loops::FOR_LOOPS_OVER_FALLIBLES),"}, {"sha": "8b5e6cc916f9d374a4282e8e922be186cc31e9c4", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "patch": "@@ -1117,6 +1117,13 @@ vec![\n         deprecation: None,\n         module: \"returns\",\n     },\n+    Lint {\n+        name: \"let_underscore_drop\",\n+        group: \"correctness\",\n+        desc: \"non-binding let on a type that implements `Drop`\",\n+        deprecation: None,\n+        module: \"let_underscore\",\n+    },\n     Lint {\n         name: \"let_underscore_lock\",\n         group: \"correctness\","}, {"sha": "98593edb9c591216f7f5380b99917489811e8fef", "filename": "tests/ui/let_underscore_drop.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/tests%2Fui%2Flet_underscore_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/tests%2Fui%2Flet_underscore_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_drop.rs?ref=f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "patch": "@@ -0,0 +1,19 @@\n+#![warn(clippy::let_underscore_drop)]\n+\n+struct Droppable;\n+\n+impl Drop for Droppable {\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {\n+    let unit = ();\n+    let boxed = Box::new(());\n+    let droppable = Droppable;\n+    let optional = Some(Droppable);\n+\n+    let _ = ();\n+    let _ = Box::new(());\n+    let _ = Droppable;\n+    let _ = Some(Droppable);\n+}"}, {"sha": "6dc8904c4fe9567efc1ac225943dc1ed77f9c998", "filename": "tests/ui/let_underscore_drop.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/tests%2Fui%2Flet_underscore_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1f780c9422f038ae78e72a99b1ca2a0d7b392bc/tests%2Fui%2Flet_underscore_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_drop.stderr?ref=f1f780c9422f038ae78e72a99b1ca2a0d7b392bc", "patch": "@@ -0,0 +1,27 @@\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:16:5\n+   |\n+LL |     let _ = Box::new(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:17:5\n+   |\n+LL |     let _ = Droppable;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding let on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:18:5\n+   |\n+LL |     let _ = Some(Droppable);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 3 previous errors\n+"}]}