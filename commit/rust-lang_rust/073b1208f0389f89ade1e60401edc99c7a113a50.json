{"sha": "073b1208f0389f89ade1e60401edc99c7a113a50", "node_id": "C_kwDOAAsO6NoAKDA3M2IxMjA4ZjAzODlmODlhZGUxZTYwNDAxZWRjOTljN2ExMTNhNTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-27T10:46:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-27T10:46:45Z"}, "message": "Rollup merge of #91266 - jam1garner:fmt-ptr-fix, r=dtolnay\n\nUse non-generic inner function for pointer formatting\n\nPreviously, despite the implementation being type-unaware, `fmt::Pointer`'s implementation for `*const T` in monomorphized. This affects:\n\n* `fmt::Debug` for `*const T`\n* `fmt::Debug` for `*mut T`\n* `fmt::Pointer` for `*const T`\n* `fmt::Pointer` for `*mut T`\n\nAnd since the implementation is non-trivial, this results in a large amount of LLVM bitcode being generated. For example, with a large bindgen project with Debug implementations enabled, it will generate a lot of calls to `fmt::Debug for *const T`, which in turn will perform codegen for a copy of this function for every type.\n\nFor example, in a real-world bindgen'd header I've been testing with (4,189,245 lines of bindgen Rust with layout tests disabled) the difference between a slightly old nightly (`rustc 1.58.0-nightly (e249ce6b2 2021-10-30)`) and this PR:\n\n<details>\n<summary>Nightly (Click to Expand)</summary>\n\n```\n  Lines           Copies         Function name\n  -----           ------         -------------\n  7256000 (100%)  216544 (100%)  (TOTAL)\n  1815449 (25.0%)  24206 (11.2%) <*const T as core::fmt::Pointer>::fmt\n   300248 (4.1%)   29579 (13.7%) <&T as core::fmt::Debug>::fmt\n   290328 (4.0%)   24194 (11.2%) <*mut T as core::fmt::Pointer>::fmt\n   217746 (3.0%)   24194 (11.2%) <*mut T as core::fmt::Debug>::fmt\n   123329 (1.7%)    1486 (0.7%)  core::fmt::builders::DebugList::entries\n    72790 (1.0%)    1486 (0.7%)  core::slice::iter::Iter<T>::post_inc_start\n    71313 (1.0%)    1486 (0.7%)  core::slice::iter::Iter<T>::new\n    68329 (0.9%)    1486 (0.7%)  <core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next\n    38636 (0.5%)    1486 (0.7%)  <[T] as core::fmt::Debug>::fmt\n    26874 (0.4%)    1493 (0.7%)  core::array::<impl core::fmt::Debug for [T; N]>::fmt\n    22290 (0.3%)    1486 (0.7%)  core::slice::index::<impl core::ops::index::Index<I> for [T]>::index\n    19407 (0.3%)    1493 (0.7%)  core::array::<impl core::ops::index::Index<I> for [T; N]>::index\n    19318 (0.3%)    1486 (0.7%)  core::slice::<impl [T]>::iter\n    17832 (0.2%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::offset\n    17832 (0.2%)    1486 (0.7%)  core::ptr::mut_ptr::<impl *mut T>::offset\n    16346 (0.2%)    1486 (0.7%)  <core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index\n    13374 (0.2%)    1486 (0.7%)  <I as core::iter::traits::collect::IntoIterator>::into_iter\n    13374 (0.2%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::add\n    13371 (0.2%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::is_null\n    13371 (0.2%)    1486 (0.7%)  core::ptr::mut_ptr::<impl *mut T>::is_null\n    11888 (0.2%)    1486 (0.7%)  core::slice::<impl [T]>::as_ptr\n    11879 (0.2%)    1486 (0.7%)  core::ptr::non_null::NonNull<T>::new_unchecked\n     7421 (0.1%)    1486 (0.7%)  core::ptr::non_null::NonNull<T>::as_ptr\n\n```\n\n</details>\n\n<details>\n<summary>This PR (Click to Expand)</summary>\n\n```\n   Lines           Copies         Function name\n  -----           ------         -------------\n  5684504 (100%)  216542 (100%)  (TOTAL)\n   300248 (5.3%)   29579 (13.7%) <&T as core::fmt::Debug>::fmt\n   290328 (5.1%)   24194 (11.2%) <*mut T as core::fmt::Pointer>::fmt\n   266265 (4.7%)   24206 (11.2%) <*const T as core::fmt::Pointer>::fmt\n   217746 (3.8%)   24194 (11.2%) <*mut T as core::fmt::Debug>::fmt\n   101039 (1.8%)    1486 (0.7%)  core::fmt::builders::DebugList::entries\n    72790 (1.3%)    1486 (0.7%)  core::slice::iter::Iter<T>::post_inc_start\n    71313 (1.3%)    1486 (0.7%)  core::slice::iter::Iter<T>::new\n    68329 (1.2%)    1486 (0.7%)  <core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next\n    38636 (0.7%)    1486 (0.7%)  <[T] as core::fmt::Debug>::fmt\n    26874 (0.5%)    1493 (0.7%)  core::array::<impl core::fmt::Debug for [T; N]>::fmt\n    22290 (0.4%)    1486 (0.7%)  core::slice::index::<impl core::ops::index::Index<I> for [T]>::index\n    19407 (0.3%)    1493 (0.7%)  core::array::<impl core::ops::index::Index<I> for [T; N]>::index\n    19318 (0.3%)    1486 (0.7%)  core::slice::<impl [T]>::iter\n    17832 (0.3%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::offset\n    17832 (0.3%)    1486 (0.7%)  core::ptr::mut_ptr::<impl *mut T>::offset\n    16346 (0.3%)    1486 (0.7%)  <core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index\n    13374 (0.2%)    1486 (0.7%)  <I as core::iter::traits::collect::IntoIterator>::into_iter\n    13374 (0.2%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::add\n    13371 (0.2%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::is_null\n    13371 (0.2%)    1486 (0.7%)  core::ptr::mut_ptr::<impl *mut T>::is_null\n    11888 (0.2%)    1486 (0.7%)  core::slice::<impl [T]>::as_ptr\n    11879 (0.2%)    1486 (0.7%)  core::ptr::non_null::NonNull<T>::new_unchecked\n     7421 (0.1%)    1486 (0.7%)  core::ptr::non_null::NonNull<T>::as_ptr\n\n```\n\n</details>\n\nOutput generated using `cargo llvm-lines` version 0.4.12.\n\nSummary of differences:\n\n| rustc Version | Total LLVM line count | `*const T as fmt::Pointer` LLVM lines | Compilation Time |\n|-|-|-|-|\n| `nightly` | 7256000 | 1815449 (25.0% of binary) | 537.014 |\n| PR | 5684504 (-21.65%) | 266265 (4.7% of binary) (-85.3% from nightly) | 502.990 |\n\nThis results in a pretty noticeable as the majority of rustc's time is spent in either codegen or LLVM, in this case, and is significantly improved by disabling derives for `fmt::Debug`, as it prevents generating all this LLVM IR to be handled.\n\nHere's a run time comparison with nightly on the same codebase (commit 454cc5fb built from source vs 37c8f25 from my PR built from source):\n\n<details>\n<summary>nightly (Click to Expand)</summary>\n\n```\ntime:   2.370; rss:   56MB -> 1118MB (+1062MB)\tparse_crate\ntime:   0.000; rss: 1118MB -> 1118MB (   +0MB)\tattributes_injection\ntime:   0.000; rss: 1118MB -> 1118MB (   +0MB)\tincr_comp_prepare_session_directory\ntime:   0.000; rss: 1118MB -> 1118MB (   +0MB)\tincr_comp_garbage_collect_session_directories\ntime:   0.000; rss: 1120MB -> 1120MB (   +0MB)\tplugin_loading\ntime:   0.000; rss: 1120MB -> 1120MB (   +0MB)\tplugin_registration\ntime:   0.000; rss: 1120MB -> 1120MB (   +0MB)\tcrate_injection\ntime:  13.897; rss: 1120MB -> 3147MB (+2027MB)\texpand_crate\ntime:   0.002; rss: 3147MB -> 3147MB (   +0MB)\tcheck_unused_macros\ntime:  13.900; rss: 1120MB -> 3147MB (+2027MB)\tmacro_expand_crate\ntime:   0.002; rss: 3147MB -> 3147MB (   +0MB)\tmaybe_building_test_harness\ntime:   0.503; rss: 3147MB -> 3147MB (   +0MB)\tAST_validation\ntime:   0.000; rss: 3147MB -> 3147MB (   +0MB)\tmaybe_create_a_macro_crate\ntime:   0.002; rss: 3147MB -> 3147MB (   +0MB)\tfinalize_imports\ntime:   0.502; rss: 3147MB -> 3153MB (   +6MB)\tfinalize_macro_resolutions\ntime:   4.478; rss: 3153MB -> 3574MB ( +420MB)\tlate_resolve_crate\ntime:   0.000; rss: 3574MB -> 3574MB (   +0MB)\tresolve_main\ntime:   0.332; rss: 3574MB -> 3574MB (   +0MB)\tresolve_check_unused\ntime:   0.000; rss: 3574MB -> 3574MB (   +0MB)\tresolve_report_errors\ntime:   0.279; rss: 3574MB -> 3574MB (   +0MB)\tresolve_postprocess\ntime:   5.595; rss: 3147MB -> 3574MB ( +427MB)\tresolve_crate\ntime:   0.382; rss: 3574MB -> 3574MB (   +0MB)\tcomplete_gated_feature_checking\ntime:  20.526; rss: 1120MB -> 3574MB (+2454MB)\tconfigure_and_expand\ntime:   0.000; rss: 3574MB -> 3574MB (   +0MB)\tprepare_outputs\ntime:   0.000; rss: 3574MB -> 3574MB (   +0MB)\tblocked_on_dep_graph_loading\ntime:  65.992; rss: 3574MB -> 6317MB (+2743MB)\thir_lowering\ntime:   1.117; rss: 6317MB -> 6323MB (   +6MB)\tearly_lint_checks\ntime:   1.447; rss: 6323MB -> 6271MB (  -52MB)\tdrop_ast\ntime:   0.002; rss: 5838MB -> 5838MB (   +0MB)\tsetup_global_ctxt\ntime:   0.000; rss: 5843MB -> 5843MB (   +0MB)\tlooking_for_entry_point\ntime:   0.313; rss: 5843MB -> 5844MB (   +1MB)\tlooking_for_derive_registrar\ntime:   9.652; rss: 5843MB -> 6065MB ( +222MB)\tmisc_checking_1\ntime:   9.713; rss: 6065MB -> 6769MB ( +704MB)\ttype_collecting\ntime:   0.665; rss: 6769MB -> 6769MB (   +0MB)\timpl_wf_inference\ntime:   0.064; rss: 6769MB -> 6769MB (   +0MB)\tunsafety_checking\ntime:   3.095; rss: 6769MB -> 6792MB (  +23MB)\tcoherence_checking\ntime:  21.282; rss: 6792MB -> 7546MB ( +754MB)\twf_checking\ntime:   5.404; rss: 7546MB -> 7681MB ( +135MB)\titem_types_checking\ntime:  79.665; rss: 7681MB -> 8075MB ( +394MB)\titem_bodies_checking\ntime: 120.166; rss: 6065MB -> 8081MB (+2016MB)\ttype_check_crate\ntime:   2.038; rss: 8081MB -> 8085MB (   +4MB)\tmatch_checking\ntime:   1.300; rss: 8085MB -> 8113MB (  +28MB)\tliveness_and_intrinsic_checking\ntime:   3.338; rss: 8081MB -> 8113MB (  +32MB)\tmisc_checking_2\ntime:  68.612; rss: 8113MB -> 9285MB (+1172MB)\tMIR_borrow_checking\ntime:   0.622; rss: 9285MB -> 9301MB (  +17MB)\tMIR_effect_checking\ntime:   0.000; rss: 9301MB -> 9301MB (   +0MB)\tlayout_testing\ntime:   4.331; rss: 9383MB -> 9510MB ( +127MB)\tdeath_checking\ntime:   0.032; rss: 9510MB -> 9510MB (   +0MB)\tunused_lib_feature_checking\ntime:   4.444; rss: 9510MB -> 9568MB (  +58MB)\tcrate_lints\ntime:  59.563; rss: 9568MB -> 9576MB (   +8MB)\tmodule_lints\ntime:  64.006; rss: 9510MB -> 9576MB (  +66MB)\tlint_checking\ntime:   4.127; rss: 9576MB -> 9639MB (  +62MB)\tprivacy_checking_modules\ntime:  77.984; rss: 9301MB -> 9639MB ( +337MB)\tmisc_checking_3\ntime:   0.311; rss: 10357MB -> 10357MB (   +0MB)\tmonomorphization_collector_root_collections\ntime:  14.051; rss: 10357MB -> 10573MB ( +217MB)\tmonomorphization_collector_graph_walk\ntime:   1.759; rss: 10573MB -> 10652MB (  +79MB)\tpartition_and_assert_distinct_symbols\ntime:  28.518; rss: 9639MB -> 10711MB (+1072MB)\tgenerate_crate_metadata\ntime:   0.000; rss: 10711MB -> 10711MB (   +0MB)\tfind_cgu_reuse\ntime:  63.408; rss: 10711MB -> 12272MB (+1560MB)\tcodegen_to_LLVM_IR\ntime:  64.916; rss: 10711MB -> 12267MB (+1556MB)\tcodegen_crate\ntime:   0.000; rss: 12261MB -> 12261MB (   +0MB)\tassert_dep_graph\ntime:   0.000; rss: 12261MB -> 12261MB (   +0MB)\tcheck_dirty_clean\ntime:   0.664; rss: 12230MB -> 12210MB (  -20MB)\tencode_query_results_for(rustc_query_impl::queries::type_of)\ntime:   2.111; rss: 12210MB -> 12043MB ( -167MB)\tencode_query_results_for(rustc_query_impl::queries::generics_of)\ntime:   0.108; rss: 12043MB -> 12057MB (  +14MB)\tencode_query_results_for(rustc_query_impl::queries::predicates_of)\ntime:   0.004; rss: 12057MB -> 12059MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::mir_const_qualif)\ntime:   0.665; rss: 12059MB -> 12121MB (  +62MB)\tencode_query_results_for(rustc_query_impl::queries::mir_for_ctfe)\ntime:  16.149; rss: 12121MB -> 12148MB (  +28MB)\tencode_query_results_for(rustc_query_impl::queries::optimized_mir)\ntime:   0.000; rss: 12148MB -> 12148MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::covered_file_name)\ntime:   0.000; rss: 12148MB -> 12148MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::covered_code_regions)\ntime:   0.010; rss: 12148MB -> 12150MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::promoted_mir)\ntime:   0.052; rss: 12150MB -> 12155MB (   +4MB)\tencode_query_results_for(rustc_query_impl::queries::unsafety_check_result)\ntime:   0.003; rss: 12155MB -> 12156MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::thir_check_unsafety)\ntime:  11.428; rss: 12156MB -> 11748MB ( -408MB)\tencode_query_results_for(rustc_query_impl::queries::typeck)\ntime:   0.000; rss: 11748MB -> 11748MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::diagnostic_only_typeck)\ntime:   0.094; rss: 11748MB -> 11756MB (   +8MB)\tencode_query_results_for(rustc_query_impl::queries::used_trait_imports)\ntime:   0.272; rss: 11756MB -> 11778MB (  +22MB)\tencode_query_results_for(rustc_query_impl::queries::mir_borrowck)\ntime:   0.054; rss: 11778MB -> 11778MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::eval_to_allocation_raw)\ntime:   0.005; rss: 11778MB -> 11779MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::eval_to_const_value_raw)\ntime:   0.021; rss: 11779MB -> 11784MB (   +5MB)\tencode_query_results_for(rustc_query_impl::queries::check_match)\ntime:   0.041; rss: 11784MB -> 11786MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::symbol_name)\ntime:   0.743; rss: 11786MB -> 11815MB (  +29MB)\tencode_query_results_for(rustc_query_impl::queries::codegen_fn_attrs)\ntime:   0.043; rss: 11815MB -> 11816MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::codegen_fulfill_obligation)\ntime:   0.674; rss: 11816MB -> 11840MB (  +25MB)\tencode_query_results_for(rustc_query_impl::queries::specialization_graph_of)\ntime:   0.000; rss: 11840MB -> 11840MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::adt_drop_tys)\ntime:   0.000; rss: 11840MB -> 11840MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::adt_significant_drop_tys)\ntime:   0.005; rss: 11840MB -> 11841MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::unused_generic_params)\ntime:  33.153; rss: 12232MB -> 11841MB ( -390MB)\tencode_query_results\ntime:  88.943; rss: 11955MB -> 11783MB ( -173MB)\tLLVM_passes(crate)\ntime:  38.854; rss: 12259MB -> 10095MB (-2164MB)\tincr_comp_serialize_result_cache\ntime:  39.030; rss: 12261MB -> 10095MB (-2166MB)\tincr_comp_persist_result_cache\ntime:   0.000; rss: 10095MB -> 10095MB (   +0MB)\tincr_comp_persist_dep_graph\ntime:  39.064; rss: 12257MB -> 10095MB (-2162MB)\tserialize_dep_graph\ntime:  19.047; rss: 10095MB -> 10307MB ( +212MB)\tfree_global_ctxt\ntime:   0.000; rss: 10307MB -> 10307MB (   +0MB)\tjoin_worker_thread\ntime:   0.519; rss: 10307MB -> 10307MB (   +0MB)\tcopy_all_cgu_workproducts_to_incr_comp_cache_dir\ntime:   0.522; rss: 10307MB -> 10307MB (   +0MB)\tfinish_ongoing_codegen\ntime:   0.000; rss: 10307MB -> 10307MB (   +0MB)\tllvm_dump_timing_file\ntime:   0.002; rss: 10307MB -> 10307MB (   +0MB)\tserialize_work_products\ntime:   0.001; rss: 9542MB -> 9542MB (   +0MB)\tincr_comp_finalize_session_directory\ntime:   0.000; rss: 9542MB -> 9542MB (   +0MB)\tlink_binary_check_files_are_writeable\ntime:   7.835; rss: 9542MB -> 9544MB (   +2MB)\tlink_rlib\ntime:   0.000; rss: 9544MB -> 9544MB (   +0MB)\tlink_binary_remove_temps\ntime:   7.872; rss: 9542MB -> 9544MB (   +2MB)\tlink_binary\ntime:   7.944; rss: 9542MB -> 9201MB ( -341MB)\tlink_crate\ntime:   8.495; rss: 10307MB -> 9201MB (-1106MB)\tlink\ntime: 537.014; rss:   33MB -> 3715MB (+3682MB)\ttotal\n```\n\n</details>\n\n<details>\n<summary>This PR (Click to Expand)</summary>\n\n```\ntime:   2.379; rss:   51MB -> 1116MB (+1064MB)\tparse_crate\ntime:   0.003; rss: 1116MB -> 1116MB (   +0MB)\tattributes_injection\ntime:   0.002; rss: 1116MB -> 1116MB (   +0MB)\tincr_comp_prepare_session_directory\ntime:   0.000; rss: 1116MB -> 1116MB (   +0MB)\tincr_comp_garbage_collect_session_directories\ntime:   0.000; rss: 1116MB -> 1116MB (   +0MB)\tplugin_loading\ntime:   0.000; rss: 1116MB -> 1116MB (   +0MB)\tplugin_registration\ntime:   0.003; rss: 1118MB -> 1118MB (   +0MB)\tcrate_injection\ntime:  13.376; rss: 1118MB -> 3143MB (+2025MB)\texpand_crate\ntime:   0.002; rss: 3143MB -> 3143MB (   +0MB)\tcheck_unused_macros\ntime:  13.379; rss: 1118MB -> 3143MB (+2025MB)\tmacro_expand_crate\ntime:   0.002; rss: 3143MB -> 3143MB (   +0MB)\tmaybe_building_test_harness\ntime:   0.479; rss: 3143MB -> 3143MB (   +0MB)\tAST_validation\ntime:   0.002; rss: 3143MB -> 3143MB (   +0MB)\tmaybe_create_a_macro_crate\ntime:   0.005; rss: 3143MB -> 3143MB (   +0MB)\tfinalize_imports\ntime:   0.520; rss: 3143MB -> 3125MB (  -18MB)\tfinalize_macro_resolutions\ntime:   4.446; rss: 3125MB -> 3577MB ( +453MB)\tlate_resolve_crate\ntime:   0.000; rss: 3577MB -> 3577MB (   +0MB)\tresolve_main\ntime:   0.336; rss: 3577MB -> 3577MB (   +0MB)\tresolve_check_unused\ntime:   0.000; rss: 3577MB -> 3577MB (   +0MB)\tresolve_report_errors\ntime:   0.295; rss: 3577MB -> 3578MB (   +0MB)\tresolve_postprocess\ntime:   5.602; rss: 3143MB -> 3578MB ( +435MB)\tresolve_crate\ntime:   0.388; rss: 3578MB -> 3578MB (   +0MB)\tcomplete_gated_feature_checking\ntime:  20.014; rss: 1116MB -> 3578MB (+2462MB)\tconfigure_and_expand\ntime:   0.000; rss: 3578MB -> 3578MB (   +0MB)\tprepare_outputs\ntime:   0.000; rss: 3578MB -> 3578MB (   +0MB)\tblocked_on_dep_graph_loading\ntime:  64.219; rss: 3578MB -> 6313MB (+2736MB)\thir_lowering\ntime:   1.102; rss: 6313MB -> 6319MB (   +6MB)\tearly_lint_checks\ntime:   1.426; rss: 6319MB -> 6268MB (  -52MB)\tdrop_ast\ntime:   0.005; rss: 5834MB -> 5836MB (   +2MB)\tsetup_global_ctxt\ntime:   0.000; rss: 5838MB -> 5838MB (   +0MB)\tlooking_for_entry_point\ntime:   0.292; rss: 5838MB -> 5840MB (   +1MB)\tlooking_for_derive_registrar\ntime:   9.553; rss: 5838MB -> 6060MB ( +222MB)\tmisc_checking_1\ntime:   9.949; rss: 6060MB -> 6764MB ( +704MB)\ttype_collecting\ntime:   0.630; rss: 6764MB -> 6764MB (   +0MB)\timpl_wf_inference\ntime:   0.060; rss: 6764MB -> 6764MB (   +0MB)\tunsafety_checking\ntime:   3.054; rss: 6764MB -> 6787MB (  +23MB)\tcoherence_checking\ntime:  20.702; rss: 6787MB -> 7533MB ( +746MB)\twf_checking\ntime:   5.194; rss: 7533MB -> 7668MB ( +135MB)\titem_types_checking\ntime:  74.677; rss: 7668MB -> 8062MB ( +394MB)\titem_bodies_checking\ntime: 114.497; rss: 6060MB -> 8068MB (+2008MB)\ttype_check_crate\ntime:   1.891; rss: 8068MB -> 8072MB (   +4MB)\tmatch_checking\ntime:   1.292; rss: 8072MB -> 8100MB (  +28MB)\tliveness_and_intrinsic_checking\ntime:   3.183; rss: 8068MB -> 8100MB (  +32MB)\tmisc_checking_2\ntime:  68.845; rss: 8100MB -> 9279MB (+1179MB)\tMIR_borrow_checking\ntime:   0.587; rss: 9279MB -> 9295MB (  +17MB)\tMIR_effect_checking\ntime:   0.000; rss: 9295MB -> 9295MB (   +0MB)\tlayout_testing\ntime:   4.443; rss: 9377MB -> 9504MB ( +127MB)\tdeath_checking\ntime:   0.034; rss: 9504MB -> 9504MB (   +0MB)\tunused_lib_feature_checking\ntime:   4.409; rss: 9504MB -> 9562MB (  +58MB)\tcrate_lints\ntime:  56.490; rss: 9562MB -> 9571MB (   +8MB)\tmodule_lints\ntime:  60.900; rss: 9504MB -> 9571MB (  +66MB)\tlint_checking\ntime:   4.147; rss: 9571MB -> 9633MB (  +62MB)\tprivacy_checking_modules\ntime:  75.094; rss: 9295MB -> 9633MB ( +337MB)\tmisc_checking_3\ntime:   0.315; rss: 10357MB -> 10357MB (   +0MB)\tmonomorphization_collector_root_collections\ntime:  14.501; rss: 10357MB -> 10571MB ( +215MB)\tmonomorphization_collector_graph_walk\ntime:   1.763; rss: 10571MB -> 10661MB (  +89MB)\tpartition_and_assert_distinct_symbols\ntime:  29.035; rss: 9633MB -> 10706MB (+1073MB)\tgenerate_crate_metadata\ntime:   0.000; rss: 10706MB -> 10706MB (   +0MB)\tfind_cgu_reuse\ntime:  30.913; rss: 10706MB -> 12150MB (+1444MB)\tcodegen_to_LLVM_IR\ntime:  31.108; rss: 10706MB -> 12150MB (+1444MB)\tcodegen_crate\ntime:   0.000; rss: 12150MB -> 12150MB (   +0MB)\tassert_dep_graph\ntime:   0.000; rss: 12150MB -> 12150MB (   +0MB)\tcheck_dirty_clean\ntime:   0.416; rss: 12152MB -> 12199MB (  +46MB)\tencode_query_results_for(rustc_query_impl::queries::type_of)\ntime:   1.259; rss: 12199MB -> 12211MB (  +12MB)\tencode_query_results_for(rustc_query_impl::queries::generics_of)\ntime:   0.095; rss: 12211MB -> 12193MB (  -18MB)\tencode_query_results_for(rustc_query_impl::queries::predicates_of)\ntime:   0.005; rss: 12193MB -> 12195MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::mir_const_qualif)\ntime:   0.828; rss: 12195MB -> 12208MB (  +14MB)\tencode_query_results_for(rustc_query_impl::queries::mir_for_ctfe)\ntime:  17.880; rss: 12208MB -> 11987MB ( -222MB)\tencode_query_results_for(rustc_query_impl::queries::optimized_mir)\ntime:   0.000; rss: 11987MB -> 11987MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::covered_file_name)\ntime:   0.000; rss: 11987MB -> 11987MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::covered_code_regions)\ntime:   0.007; rss: 11987MB -> 11988MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::promoted_mir)\ntime:   0.049; rss: 11988MB -> 11992MB (   +4MB)\tencode_query_results_for(rustc_query_impl::queries::unsafety_check_result)\ntime:   0.002; rss: 11992MB -> 11994MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::thir_check_unsafety)\ntime:  38.049; rss: 11994MB -> 12093MB (  +99MB)\tencode_query_results_for(rustc_query_impl::queries::typeck)\ntime:   0.000; rss: 12093MB -> 12093MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::diagnostic_only_typeck)\ntime:   0.024; rss: 12093MB -> 12095MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::used_trait_imports)\ntime:   0.372; rss: 12095MB -> 12053MB (  -42MB)\tencode_query_results_for(rustc_query_impl::queries::mir_borrowck)\ntime:   0.015; rss: 12053MB -> 12053MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::eval_to_allocation_raw)\ntime:   0.005; rss: 12053MB -> 12054MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::eval_to_const_value_raw)\ntime:   0.003; rss: 12054MB -> 12056MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::check_match)\ntime:   0.037; rss: 12056MB -> 11899MB ( -157MB)\tencode_query_results_for(rustc_query_impl::queries::symbol_name)\ntime:   0.667; rss: 11899MB -> 11708MB ( -191MB)\tencode_query_results_for(rustc_query_impl::queries::codegen_fn_attrs)\ntime:   0.045; rss: 11708MB -> 11709MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::codegen_fulfill_obligation)\ntime:   0.295; rss: 11709MB -> 11734MB (  +25MB)\tencode_query_results_for(rustc_query_impl::queries::specialization_graph_of)\ntime:   0.000; rss: 11734MB -> 11734MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::adt_drop_tys)\ntime:   0.000; rss: 11734MB -> 11734MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::adt_significant_drop_tys)\ntime:   0.005; rss: 11734MB -> 11734MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::unused_generic_params)\ntime:  60.063; rss: 12152MB -> 11734MB ( -418MB)\tencode_query_results\ntime:  76.745; rss: 12007MB -> 11699MB ( -308MB)\tLLVM_passes(crate)\ntime:  61.634; rss: 12150MB -> 10557MB (-1593MB)\tincr_comp_serialize_result_cache\ntime:  61.637; rss: 12150MB -> 10557MB (-1593MB)\tincr_comp_persist_result_cache\ntime:   0.001; rss: 10557MB -> 10557MB (   +0MB)\tincr_comp_persist_dep_graph\ntime:  61.641; rss: 12150MB -> 10557MB (-1593MB)\tserialize_dep_graph\ntime:  15.601; rss: 10557MB -> 10242MB ( -315MB)\tfree_global_ctxt\ntime:   0.000; rss: 10242MB -> 10242MB (   +0MB)\tjoin_worker_thread\ntime:   0.368; rss: 10242MB -> 10242MB (   +0MB)\tcopy_all_cgu_workproducts_to_incr_comp_cache_dir\ntime:   0.375; rss: 10242MB -> 10242MB (   +0MB)\tfinish_ongoing_codegen\ntime:   0.000; rss: 10242MB -> 10242MB (   +0MB)\tllvm_dump_timing_file\ntime:   0.002; rss: 10242MB -> 10242MB (   +0MB)\tserialize_work_products\ntime:   0.001; rss: 9668MB -> 9668MB (   +0MB)\tincr_comp_finalize_session_directory\ntime:   0.000; rss: 9668MB -> 9668MB (   +0MB)\tlink_binary_check_files_are_writeable\ntime:   1.469; rss: 9668MB -> 9671MB (   +3MB)\tlink_rlib\ntime:   0.000; rss: 9671MB -> 9671MB (   +0MB)\tlink_binary_remove_temps\ntime:   1.506; rss: 9668MB -> 9671MB (   +3MB)\tlink_binary\ntime:   1.622; rss: 9668MB -> 9329MB ( -339MB)\tlink_crate\ntime:   2.037; rss: 10242MB -> 9329MB ( -913MB)\tlink\ntime: 502.990; rss:   32MB -> 5888MB (+5855MB)\ttotal\n```\n\n</details>\n\n(6.34% decrease in runtime, results are consistent across multiple runs)", "tree": {"sha": "b594b1c0716091f87777ece63ee5481c7fb64e7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b594b1c0716091f87777ece63ee5481c7fb64e7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/073b1208f0389f89ade1e60401edc99c7a113a50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhogyVCRBK7hj4Ov3rIwAAX3gIAA9IQzrQl3uu9KsWkpC3TeVX\nJ1wyesIP2Q6wTXINjRhedSkaGyTCbmQGScmebNIZHUSRG3u93Ez3848COVyL2DuT\nPMQohcysV1G5xpUiUUhCHdxCnjbZg0QlrSRyz5wsL+cdGHkrbAlb7M+2+883Xx5Z\nDxJV2McYq1K6dyAhDTyclSGeqtE3CZEPtLMWRAucW8R1Nrain01054J1QmV9cfbq\nvhvxqNUFY/Vg1ID7oWSHtaGprHRPoFHy4Tn4tfMVLg+OKCxuGPzq0eSHGN8kY7qe\nwfUV+DqDZ1C3ewRBia+n5VIXyeS2N0aR3m2BLEv/GiegbHrNJlHDZPKvnkdyX0o=\n=rQDY\n-----END PGP SIGNATURE-----\n", "payload": "tree b594b1c0716091f87777ece63ee5481c7fb64e7b\nparent 7c5bcd548be2d2020c1476346304a1cc64078e2f\nparent 37c8f254ede23a35167018fc9b672f5f7b098f52\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638010005 +0100\ncommitter GitHub <noreply@github.com> 1638010005 +0100\n\nRollup merge of #91266 - jam1garner:fmt-ptr-fix, r=dtolnay\n\nUse non-generic inner function for pointer formatting\n\nPreviously, despite the implementation being type-unaware, `fmt::Pointer`'s implementation for `*const T` in monomorphized. This affects:\n\n* `fmt::Debug` for `*const T`\n* `fmt::Debug` for `*mut T`\n* `fmt::Pointer` for `*const T`\n* `fmt::Pointer` for `*mut T`\n\nAnd since the implementation is non-trivial, this results in a large amount of LLVM bitcode being generated. For example, with a large bindgen project with Debug implementations enabled, it will generate a lot of calls to `fmt::Debug for *const T`, which in turn will perform codegen for a copy of this function for every type.\n\nFor example, in a real-world bindgen'd header I've been testing with (4,189,245 lines of bindgen Rust with layout tests disabled) the difference between a slightly old nightly (`rustc 1.58.0-nightly (e249ce6b2 2021-10-30)`) and this PR:\n\n<details>\n<summary>Nightly (Click to Expand)</summary>\n\n```\n  Lines           Copies         Function name\n  -----           ------         -------------\n  7256000 (100%)  216544 (100%)  (TOTAL)\n  1815449 (25.0%)  24206 (11.2%) <*const T as core::fmt::Pointer>::fmt\n   300248 (4.1%)   29579 (13.7%) <&T as core::fmt::Debug>::fmt\n   290328 (4.0%)   24194 (11.2%) <*mut T as core::fmt::Pointer>::fmt\n   217746 (3.0%)   24194 (11.2%) <*mut T as core::fmt::Debug>::fmt\n   123329 (1.7%)    1486 (0.7%)  core::fmt::builders::DebugList::entries\n    72790 (1.0%)    1486 (0.7%)  core::slice::iter::Iter<T>::post_inc_start\n    71313 (1.0%)    1486 (0.7%)  core::slice::iter::Iter<T>::new\n    68329 (0.9%)    1486 (0.7%)  <core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next\n    38636 (0.5%)    1486 (0.7%)  <[T] as core::fmt::Debug>::fmt\n    26874 (0.4%)    1493 (0.7%)  core::array::<impl core::fmt::Debug for [T; N]>::fmt\n    22290 (0.3%)    1486 (0.7%)  core::slice::index::<impl core::ops::index::Index<I> for [T]>::index\n    19407 (0.3%)    1493 (0.7%)  core::array::<impl core::ops::index::Index<I> for [T; N]>::index\n    19318 (0.3%)    1486 (0.7%)  core::slice::<impl [T]>::iter\n    17832 (0.2%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::offset\n    17832 (0.2%)    1486 (0.7%)  core::ptr::mut_ptr::<impl *mut T>::offset\n    16346 (0.2%)    1486 (0.7%)  <core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index\n    13374 (0.2%)    1486 (0.7%)  <I as core::iter::traits::collect::IntoIterator>::into_iter\n    13374 (0.2%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::add\n    13371 (0.2%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::is_null\n    13371 (0.2%)    1486 (0.7%)  core::ptr::mut_ptr::<impl *mut T>::is_null\n    11888 (0.2%)    1486 (0.7%)  core::slice::<impl [T]>::as_ptr\n    11879 (0.2%)    1486 (0.7%)  core::ptr::non_null::NonNull<T>::new_unchecked\n     7421 (0.1%)    1486 (0.7%)  core::ptr::non_null::NonNull<T>::as_ptr\n\n```\n\n</details>\n\n<details>\n<summary>This PR (Click to Expand)</summary>\n\n```\n   Lines           Copies         Function name\n  -----           ------         -------------\n  5684504 (100%)  216542 (100%)  (TOTAL)\n   300248 (5.3%)   29579 (13.7%) <&T as core::fmt::Debug>::fmt\n   290328 (5.1%)   24194 (11.2%) <*mut T as core::fmt::Pointer>::fmt\n   266265 (4.7%)   24206 (11.2%) <*const T as core::fmt::Pointer>::fmt\n   217746 (3.8%)   24194 (11.2%) <*mut T as core::fmt::Debug>::fmt\n   101039 (1.8%)    1486 (0.7%)  core::fmt::builders::DebugList::entries\n    72790 (1.3%)    1486 (0.7%)  core::slice::iter::Iter<T>::post_inc_start\n    71313 (1.3%)    1486 (0.7%)  core::slice::iter::Iter<T>::new\n    68329 (1.2%)    1486 (0.7%)  <core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next\n    38636 (0.7%)    1486 (0.7%)  <[T] as core::fmt::Debug>::fmt\n    26874 (0.5%)    1493 (0.7%)  core::array::<impl core::fmt::Debug for [T; N]>::fmt\n    22290 (0.4%)    1486 (0.7%)  core::slice::index::<impl core::ops::index::Index<I> for [T]>::index\n    19407 (0.3%)    1493 (0.7%)  core::array::<impl core::ops::index::Index<I> for [T; N]>::index\n    19318 (0.3%)    1486 (0.7%)  core::slice::<impl [T]>::iter\n    17832 (0.3%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::offset\n    17832 (0.3%)    1486 (0.7%)  core::ptr::mut_ptr::<impl *mut T>::offset\n    16346 (0.3%)    1486 (0.7%)  <core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index\n    13374 (0.2%)    1486 (0.7%)  <I as core::iter::traits::collect::IntoIterator>::into_iter\n    13374 (0.2%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::add\n    13371 (0.2%)    1486 (0.7%)  core::ptr::const_ptr::<impl *const T>::is_null\n    13371 (0.2%)    1486 (0.7%)  core::ptr::mut_ptr::<impl *mut T>::is_null\n    11888 (0.2%)    1486 (0.7%)  core::slice::<impl [T]>::as_ptr\n    11879 (0.2%)    1486 (0.7%)  core::ptr::non_null::NonNull<T>::new_unchecked\n     7421 (0.1%)    1486 (0.7%)  core::ptr::non_null::NonNull<T>::as_ptr\n\n```\n\n</details>\n\nOutput generated using `cargo llvm-lines` version 0.4.12.\n\nSummary of differences:\n\n| rustc Version | Total LLVM line count | `*const T as fmt::Pointer` LLVM lines | Compilation Time |\n|-|-|-|-|\n| `nightly` | 7256000 | 1815449 (25.0% of binary) | 537.014 |\n| PR | 5684504 (-21.65%) | 266265 (4.7% of binary) (-85.3% from nightly) | 502.990 |\n\nThis results in a pretty noticeable as the majority of rustc's time is spent in either codegen or LLVM, in this case, and is significantly improved by disabling derives for `fmt::Debug`, as it prevents generating all this LLVM IR to be handled.\n\nHere's a run time comparison with nightly on the same codebase (commit 454cc5fb built from source vs 37c8f25 from my PR built from source):\n\n<details>\n<summary>nightly (Click to Expand)</summary>\n\n```\ntime:   2.370; rss:   56MB -> 1118MB (+1062MB)\tparse_crate\ntime:   0.000; rss: 1118MB -> 1118MB (   +0MB)\tattributes_injection\ntime:   0.000; rss: 1118MB -> 1118MB (   +0MB)\tincr_comp_prepare_session_directory\ntime:   0.000; rss: 1118MB -> 1118MB (   +0MB)\tincr_comp_garbage_collect_session_directories\ntime:   0.000; rss: 1120MB -> 1120MB (   +0MB)\tplugin_loading\ntime:   0.000; rss: 1120MB -> 1120MB (   +0MB)\tplugin_registration\ntime:   0.000; rss: 1120MB -> 1120MB (   +0MB)\tcrate_injection\ntime:  13.897; rss: 1120MB -> 3147MB (+2027MB)\texpand_crate\ntime:   0.002; rss: 3147MB -> 3147MB (   +0MB)\tcheck_unused_macros\ntime:  13.900; rss: 1120MB -> 3147MB (+2027MB)\tmacro_expand_crate\ntime:   0.002; rss: 3147MB -> 3147MB (   +0MB)\tmaybe_building_test_harness\ntime:   0.503; rss: 3147MB -> 3147MB (   +0MB)\tAST_validation\ntime:   0.000; rss: 3147MB -> 3147MB (   +0MB)\tmaybe_create_a_macro_crate\ntime:   0.002; rss: 3147MB -> 3147MB (   +0MB)\tfinalize_imports\ntime:   0.502; rss: 3147MB -> 3153MB (   +6MB)\tfinalize_macro_resolutions\ntime:   4.478; rss: 3153MB -> 3574MB ( +420MB)\tlate_resolve_crate\ntime:   0.000; rss: 3574MB -> 3574MB (   +0MB)\tresolve_main\ntime:   0.332; rss: 3574MB -> 3574MB (   +0MB)\tresolve_check_unused\ntime:   0.000; rss: 3574MB -> 3574MB (   +0MB)\tresolve_report_errors\ntime:   0.279; rss: 3574MB -> 3574MB (   +0MB)\tresolve_postprocess\ntime:   5.595; rss: 3147MB -> 3574MB ( +427MB)\tresolve_crate\ntime:   0.382; rss: 3574MB -> 3574MB (   +0MB)\tcomplete_gated_feature_checking\ntime:  20.526; rss: 1120MB -> 3574MB (+2454MB)\tconfigure_and_expand\ntime:   0.000; rss: 3574MB -> 3574MB (   +0MB)\tprepare_outputs\ntime:   0.000; rss: 3574MB -> 3574MB (   +0MB)\tblocked_on_dep_graph_loading\ntime:  65.992; rss: 3574MB -> 6317MB (+2743MB)\thir_lowering\ntime:   1.117; rss: 6317MB -> 6323MB (   +6MB)\tearly_lint_checks\ntime:   1.447; rss: 6323MB -> 6271MB (  -52MB)\tdrop_ast\ntime:   0.002; rss: 5838MB -> 5838MB (   +0MB)\tsetup_global_ctxt\ntime:   0.000; rss: 5843MB -> 5843MB (   +0MB)\tlooking_for_entry_point\ntime:   0.313; rss: 5843MB -> 5844MB (   +1MB)\tlooking_for_derive_registrar\ntime:   9.652; rss: 5843MB -> 6065MB ( +222MB)\tmisc_checking_1\ntime:   9.713; rss: 6065MB -> 6769MB ( +704MB)\ttype_collecting\ntime:   0.665; rss: 6769MB -> 6769MB (   +0MB)\timpl_wf_inference\ntime:   0.064; rss: 6769MB -> 6769MB (   +0MB)\tunsafety_checking\ntime:   3.095; rss: 6769MB -> 6792MB (  +23MB)\tcoherence_checking\ntime:  21.282; rss: 6792MB -> 7546MB ( +754MB)\twf_checking\ntime:   5.404; rss: 7546MB -> 7681MB ( +135MB)\titem_types_checking\ntime:  79.665; rss: 7681MB -> 8075MB ( +394MB)\titem_bodies_checking\ntime: 120.166; rss: 6065MB -> 8081MB (+2016MB)\ttype_check_crate\ntime:   2.038; rss: 8081MB -> 8085MB (   +4MB)\tmatch_checking\ntime:   1.300; rss: 8085MB -> 8113MB (  +28MB)\tliveness_and_intrinsic_checking\ntime:   3.338; rss: 8081MB -> 8113MB (  +32MB)\tmisc_checking_2\ntime:  68.612; rss: 8113MB -> 9285MB (+1172MB)\tMIR_borrow_checking\ntime:   0.622; rss: 9285MB -> 9301MB (  +17MB)\tMIR_effect_checking\ntime:   0.000; rss: 9301MB -> 9301MB (   +0MB)\tlayout_testing\ntime:   4.331; rss: 9383MB -> 9510MB ( +127MB)\tdeath_checking\ntime:   0.032; rss: 9510MB -> 9510MB (   +0MB)\tunused_lib_feature_checking\ntime:   4.444; rss: 9510MB -> 9568MB (  +58MB)\tcrate_lints\ntime:  59.563; rss: 9568MB -> 9576MB (   +8MB)\tmodule_lints\ntime:  64.006; rss: 9510MB -> 9576MB (  +66MB)\tlint_checking\ntime:   4.127; rss: 9576MB -> 9639MB (  +62MB)\tprivacy_checking_modules\ntime:  77.984; rss: 9301MB -> 9639MB ( +337MB)\tmisc_checking_3\ntime:   0.311; rss: 10357MB -> 10357MB (   +0MB)\tmonomorphization_collector_root_collections\ntime:  14.051; rss: 10357MB -> 10573MB ( +217MB)\tmonomorphization_collector_graph_walk\ntime:   1.759; rss: 10573MB -> 10652MB (  +79MB)\tpartition_and_assert_distinct_symbols\ntime:  28.518; rss: 9639MB -> 10711MB (+1072MB)\tgenerate_crate_metadata\ntime:   0.000; rss: 10711MB -> 10711MB (   +0MB)\tfind_cgu_reuse\ntime:  63.408; rss: 10711MB -> 12272MB (+1560MB)\tcodegen_to_LLVM_IR\ntime:  64.916; rss: 10711MB -> 12267MB (+1556MB)\tcodegen_crate\ntime:   0.000; rss: 12261MB -> 12261MB (   +0MB)\tassert_dep_graph\ntime:   0.000; rss: 12261MB -> 12261MB (   +0MB)\tcheck_dirty_clean\ntime:   0.664; rss: 12230MB -> 12210MB (  -20MB)\tencode_query_results_for(rustc_query_impl::queries::type_of)\ntime:   2.111; rss: 12210MB -> 12043MB ( -167MB)\tencode_query_results_for(rustc_query_impl::queries::generics_of)\ntime:   0.108; rss: 12043MB -> 12057MB (  +14MB)\tencode_query_results_for(rustc_query_impl::queries::predicates_of)\ntime:   0.004; rss: 12057MB -> 12059MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::mir_const_qualif)\ntime:   0.665; rss: 12059MB -> 12121MB (  +62MB)\tencode_query_results_for(rustc_query_impl::queries::mir_for_ctfe)\ntime:  16.149; rss: 12121MB -> 12148MB (  +28MB)\tencode_query_results_for(rustc_query_impl::queries::optimized_mir)\ntime:   0.000; rss: 12148MB -> 12148MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::covered_file_name)\ntime:   0.000; rss: 12148MB -> 12148MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::covered_code_regions)\ntime:   0.010; rss: 12148MB -> 12150MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::promoted_mir)\ntime:   0.052; rss: 12150MB -> 12155MB (   +4MB)\tencode_query_results_for(rustc_query_impl::queries::unsafety_check_result)\ntime:   0.003; rss: 12155MB -> 12156MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::thir_check_unsafety)\ntime:  11.428; rss: 12156MB -> 11748MB ( -408MB)\tencode_query_results_for(rustc_query_impl::queries::typeck)\ntime:   0.000; rss: 11748MB -> 11748MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::diagnostic_only_typeck)\ntime:   0.094; rss: 11748MB -> 11756MB (   +8MB)\tencode_query_results_for(rustc_query_impl::queries::used_trait_imports)\ntime:   0.272; rss: 11756MB -> 11778MB (  +22MB)\tencode_query_results_for(rustc_query_impl::queries::mir_borrowck)\ntime:   0.054; rss: 11778MB -> 11778MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::eval_to_allocation_raw)\ntime:   0.005; rss: 11778MB -> 11779MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::eval_to_const_value_raw)\ntime:   0.021; rss: 11779MB -> 11784MB (   +5MB)\tencode_query_results_for(rustc_query_impl::queries::check_match)\ntime:   0.041; rss: 11784MB -> 11786MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::symbol_name)\ntime:   0.743; rss: 11786MB -> 11815MB (  +29MB)\tencode_query_results_for(rustc_query_impl::queries::codegen_fn_attrs)\ntime:   0.043; rss: 11815MB -> 11816MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::codegen_fulfill_obligation)\ntime:   0.674; rss: 11816MB -> 11840MB (  +25MB)\tencode_query_results_for(rustc_query_impl::queries::specialization_graph_of)\ntime:   0.000; rss: 11840MB -> 11840MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::adt_drop_tys)\ntime:   0.000; rss: 11840MB -> 11840MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::adt_significant_drop_tys)\ntime:   0.005; rss: 11840MB -> 11841MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::unused_generic_params)\ntime:  33.153; rss: 12232MB -> 11841MB ( -390MB)\tencode_query_results\ntime:  88.943; rss: 11955MB -> 11783MB ( -173MB)\tLLVM_passes(crate)\ntime:  38.854; rss: 12259MB -> 10095MB (-2164MB)\tincr_comp_serialize_result_cache\ntime:  39.030; rss: 12261MB -> 10095MB (-2166MB)\tincr_comp_persist_result_cache\ntime:   0.000; rss: 10095MB -> 10095MB (   +0MB)\tincr_comp_persist_dep_graph\ntime:  39.064; rss: 12257MB -> 10095MB (-2162MB)\tserialize_dep_graph\ntime:  19.047; rss: 10095MB -> 10307MB ( +212MB)\tfree_global_ctxt\ntime:   0.000; rss: 10307MB -> 10307MB (   +0MB)\tjoin_worker_thread\ntime:   0.519; rss: 10307MB -> 10307MB (   +0MB)\tcopy_all_cgu_workproducts_to_incr_comp_cache_dir\ntime:   0.522; rss: 10307MB -> 10307MB (   +0MB)\tfinish_ongoing_codegen\ntime:   0.000; rss: 10307MB -> 10307MB (   +0MB)\tllvm_dump_timing_file\ntime:   0.002; rss: 10307MB -> 10307MB (   +0MB)\tserialize_work_products\ntime:   0.001; rss: 9542MB -> 9542MB (   +0MB)\tincr_comp_finalize_session_directory\ntime:   0.000; rss: 9542MB -> 9542MB (   +0MB)\tlink_binary_check_files_are_writeable\ntime:   7.835; rss: 9542MB -> 9544MB (   +2MB)\tlink_rlib\ntime:   0.000; rss: 9544MB -> 9544MB (   +0MB)\tlink_binary_remove_temps\ntime:   7.872; rss: 9542MB -> 9544MB (   +2MB)\tlink_binary\ntime:   7.944; rss: 9542MB -> 9201MB ( -341MB)\tlink_crate\ntime:   8.495; rss: 10307MB -> 9201MB (-1106MB)\tlink\ntime: 537.014; rss:   33MB -> 3715MB (+3682MB)\ttotal\n```\n\n</details>\n\n<details>\n<summary>This PR (Click to Expand)</summary>\n\n```\ntime:   2.379; rss:   51MB -> 1116MB (+1064MB)\tparse_crate\ntime:   0.003; rss: 1116MB -> 1116MB (   +0MB)\tattributes_injection\ntime:   0.002; rss: 1116MB -> 1116MB (   +0MB)\tincr_comp_prepare_session_directory\ntime:   0.000; rss: 1116MB -> 1116MB (   +0MB)\tincr_comp_garbage_collect_session_directories\ntime:   0.000; rss: 1116MB -> 1116MB (   +0MB)\tplugin_loading\ntime:   0.000; rss: 1116MB -> 1116MB (   +0MB)\tplugin_registration\ntime:   0.003; rss: 1118MB -> 1118MB (   +0MB)\tcrate_injection\ntime:  13.376; rss: 1118MB -> 3143MB (+2025MB)\texpand_crate\ntime:   0.002; rss: 3143MB -> 3143MB (   +0MB)\tcheck_unused_macros\ntime:  13.379; rss: 1118MB -> 3143MB (+2025MB)\tmacro_expand_crate\ntime:   0.002; rss: 3143MB -> 3143MB (   +0MB)\tmaybe_building_test_harness\ntime:   0.479; rss: 3143MB -> 3143MB (   +0MB)\tAST_validation\ntime:   0.002; rss: 3143MB -> 3143MB (   +0MB)\tmaybe_create_a_macro_crate\ntime:   0.005; rss: 3143MB -> 3143MB (   +0MB)\tfinalize_imports\ntime:   0.520; rss: 3143MB -> 3125MB (  -18MB)\tfinalize_macro_resolutions\ntime:   4.446; rss: 3125MB -> 3577MB ( +453MB)\tlate_resolve_crate\ntime:   0.000; rss: 3577MB -> 3577MB (   +0MB)\tresolve_main\ntime:   0.336; rss: 3577MB -> 3577MB (   +0MB)\tresolve_check_unused\ntime:   0.000; rss: 3577MB -> 3577MB (   +0MB)\tresolve_report_errors\ntime:   0.295; rss: 3577MB -> 3578MB (   +0MB)\tresolve_postprocess\ntime:   5.602; rss: 3143MB -> 3578MB ( +435MB)\tresolve_crate\ntime:   0.388; rss: 3578MB -> 3578MB (   +0MB)\tcomplete_gated_feature_checking\ntime:  20.014; rss: 1116MB -> 3578MB (+2462MB)\tconfigure_and_expand\ntime:   0.000; rss: 3578MB -> 3578MB (   +0MB)\tprepare_outputs\ntime:   0.000; rss: 3578MB -> 3578MB (   +0MB)\tblocked_on_dep_graph_loading\ntime:  64.219; rss: 3578MB -> 6313MB (+2736MB)\thir_lowering\ntime:   1.102; rss: 6313MB -> 6319MB (   +6MB)\tearly_lint_checks\ntime:   1.426; rss: 6319MB -> 6268MB (  -52MB)\tdrop_ast\ntime:   0.005; rss: 5834MB -> 5836MB (   +2MB)\tsetup_global_ctxt\ntime:   0.000; rss: 5838MB -> 5838MB (   +0MB)\tlooking_for_entry_point\ntime:   0.292; rss: 5838MB -> 5840MB (   +1MB)\tlooking_for_derive_registrar\ntime:   9.553; rss: 5838MB -> 6060MB ( +222MB)\tmisc_checking_1\ntime:   9.949; rss: 6060MB -> 6764MB ( +704MB)\ttype_collecting\ntime:   0.630; rss: 6764MB -> 6764MB (   +0MB)\timpl_wf_inference\ntime:   0.060; rss: 6764MB -> 6764MB (   +0MB)\tunsafety_checking\ntime:   3.054; rss: 6764MB -> 6787MB (  +23MB)\tcoherence_checking\ntime:  20.702; rss: 6787MB -> 7533MB ( +746MB)\twf_checking\ntime:   5.194; rss: 7533MB -> 7668MB ( +135MB)\titem_types_checking\ntime:  74.677; rss: 7668MB -> 8062MB ( +394MB)\titem_bodies_checking\ntime: 114.497; rss: 6060MB -> 8068MB (+2008MB)\ttype_check_crate\ntime:   1.891; rss: 8068MB -> 8072MB (   +4MB)\tmatch_checking\ntime:   1.292; rss: 8072MB -> 8100MB (  +28MB)\tliveness_and_intrinsic_checking\ntime:   3.183; rss: 8068MB -> 8100MB (  +32MB)\tmisc_checking_2\ntime:  68.845; rss: 8100MB -> 9279MB (+1179MB)\tMIR_borrow_checking\ntime:   0.587; rss: 9279MB -> 9295MB (  +17MB)\tMIR_effect_checking\ntime:   0.000; rss: 9295MB -> 9295MB (   +0MB)\tlayout_testing\ntime:   4.443; rss: 9377MB -> 9504MB ( +127MB)\tdeath_checking\ntime:   0.034; rss: 9504MB -> 9504MB (   +0MB)\tunused_lib_feature_checking\ntime:   4.409; rss: 9504MB -> 9562MB (  +58MB)\tcrate_lints\ntime:  56.490; rss: 9562MB -> 9571MB (   +8MB)\tmodule_lints\ntime:  60.900; rss: 9504MB -> 9571MB (  +66MB)\tlint_checking\ntime:   4.147; rss: 9571MB -> 9633MB (  +62MB)\tprivacy_checking_modules\ntime:  75.094; rss: 9295MB -> 9633MB ( +337MB)\tmisc_checking_3\ntime:   0.315; rss: 10357MB -> 10357MB (   +0MB)\tmonomorphization_collector_root_collections\ntime:  14.501; rss: 10357MB -> 10571MB ( +215MB)\tmonomorphization_collector_graph_walk\ntime:   1.763; rss: 10571MB -> 10661MB (  +89MB)\tpartition_and_assert_distinct_symbols\ntime:  29.035; rss: 9633MB -> 10706MB (+1073MB)\tgenerate_crate_metadata\ntime:   0.000; rss: 10706MB -> 10706MB (   +0MB)\tfind_cgu_reuse\ntime:  30.913; rss: 10706MB -> 12150MB (+1444MB)\tcodegen_to_LLVM_IR\ntime:  31.108; rss: 10706MB -> 12150MB (+1444MB)\tcodegen_crate\ntime:   0.000; rss: 12150MB -> 12150MB (   +0MB)\tassert_dep_graph\ntime:   0.000; rss: 12150MB -> 12150MB (   +0MB)\tcheck_dirty_clean\ntime:   0.416; rss: 12152MB -> 12199MB (  +46MB)\tencode_query_results_for(rustc_query_impl::queries::type_of)\ntime:   1.259; rss: 12199MB -> 12211MB (  +12MB)\tencode_query_results_for(rustc_query_impl::queries::generics_of)\ntime:   0.095; rss: 12211MB -> 12193MB (  -18MB)\tencode_query_results_for(rustc_query_impl::queries::predicates_of)\ntime:   0.005; rss: 12193MB -> 12195MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::mir_const_qualif)\ntime:   0.828; rss: 12195MB -> 12208MB (  +14MB)\tencode_query_results_for(rustc_query_impl::queries::mir_for_ctfe)\ntime:  17.880; rss: 12208MB -> 11987MB ( -222MB)\tencode_query_results_for(rustc_query_impl::queries::optimized_mir)\ntime:   0.000; rss: 11987MB -> 11987MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::covered_file_name)\ntime:   0.000; rss: 11987MB -> 11987MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::covered_code_regions)\ntime:   0.007; rss: 11987MB -> 11988MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::promoted_mir)\ntime:   0.049; rss: 11988MB -> 11992MB (   +4MB)\tencode_query_results_for(rustc_query_impl::queries::unsafety_check_result)\ntime:   0.002; rss: 11992MB -> 11994MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::thir_check_unsafety)\ntime:  38.049; rss: 11994MB -> 12093MB (  +99MB)\tencode_query_results_for(rustc_query_impl::queries::typeck)\ntime:   0.000; rss: 12093MB -> 12093MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::diagnostic_only_typeck)\ntime:   0.024; rss: 12093MB -> 12095MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::used_trait_imports)\ntime:   0.372; rss: 12095MB -> 12053MB (  -42MB)\tencode_query_results_for(rustc_query_impl::queries::mir_borrowck)\ntime:   0.015; rss: 12053MB -> 12053MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::eval_to_allocation_raw)\ntime:   0.005; rss: 12053MB -> 12054MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::eval_to_const_value_raw)\ntime:   0.003; rss: 12054MB -> 12056MB (   +2MB)\tencode_query_results_for(rustc_query_impl::queries::check_match)\ntime:   0.037; rss: 12056MB -> 11899MB ( -157MB)\tencode_query_results_for(rustc_query_impl::queries::symbol_name)\ntime:   0.667; rss: 11899MB -> 11708MB ( -191MB)\tencode_query_results_for(rustc_query_impl::queries::codegen_fn_attrs)\ntime:   0.045; rss: 11708MB -> 11709MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::codegen_fulfill_obligation)\ntime:   0.295; rss: 11709MB -> 11734MB (  +25MB)\tencode_query_results_for(rustc_query_impl::queries::specialization_graph_of)\ntime:   0.000; rss: 11734MB -> 11734MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::adt_drop_tys)\ntime:   0.000; rss: 11734MB -> 11734MB (   +0MB)\tencode_query_results_for(rustc_query_impl::queries::adt_significant_drop_tys)\ntime:   0.005; rss: 11734MB -> 11734MB (   +1MB)\tencode_query_results_for(rustc_query_impl::queries::unused_generic_params)\ntime:  60.063; rss: 12152MB -> 11734MB ( -418MB)\tencode_query_results\ntime:  76.745; rss: 12007MB -> 11699MB ( -308MB)\tLLVM_passes(crate)\ntime:  61.634; rss: 12150MB -> 10557MB (-1593MB)\tincr_comp_serialize_result_cache\ntime:  61.637; rss: 12150MB -> 10557MB (-1593MB)\tincr_comp_persist_result_cache\ntime:   0.001; rss: 10557MB -> 10557MB (   +0MB)\tincr_comp_persist_dep_graph\ntime:  61.641; rss: 12150MB -> 10557MB (-1593MB)\tserialize_dep_graph\ntime:  15.601; rss: 10557MB -> 10242MB ( -315MB)\tfree_global_ctxt\ntime:   0.000; rss: 10242MB -> 10242MB (   +0MB)\tjoin_worker_thread\ntime:   0.368; rss: 10242MB -> 10242MB (   +0MB)\tcopy_all_cgu_workproducts_to_incr_comp_cache_dir\ntime:   0.375; rss: 10242MB -> 10242MB (   +0MB)\tfinish_ongoing_codegen\ntime:   0.000; rss: 10242MB -> 10242MB (   +0MB)\tllvm_dump_timing_file\ntime:   0.002; rss: 10242MB -> 10242MB (   +0MB)\tserialize_work_products\ntime:   0.001; rss: 9668MB -> 9668MB (   +0MB)\tincr_comp_finalize_session_directory\ntime:   0.000; rss: 9668MB -> 9668MB (   +0MB)\tlink_binary_check_files_are_writeable\ntime:   1.469; rss: 9668MB -> 9671MB (   +3MB)\tlink_rlib\ntime:   0.000; rss: 9671MB -> 9671MB (   +0MB)\tlink_binary_remove_temps\ntime:   1.506; rss: 9668MB -> 9671MB (   +3MB)\tlink_binary\ntime:   1.622; rss: 9668MB -> 9329MB ( -339MB)\tlink_crate\ntime:   2.037; rss: 10242MB -> 9329MB ( -913MB)\tlink\ntime: 502.990; rss:   32MB -> 5888MB (+5855MB)\ttotal\n```\n\n</details>\n\n(6.34% decrease in runtime, results are consistent across multiple runs)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/073b1208f0389f89ade1e60401edc99c7a113a50", "html_url": "https://github.com/rust-lang/rust/commit/073b1208f0389f89ade1e60401edc99c7a113a50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/073b1208f0389f89ade1e60401edc99c7a113a50/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c5bcd548be2d2020c1476346304a1cc64078e2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5bcd548be2d2020c1476346304a1cc64078e2f", "html_url": "https://github.com/rust-lang/rust/commit/7c5bcd548be2d2020c1476346304a1cc64078e2f"}, {"sha": "37c8f254ede23a35167018fc9b672f5f7b098f52", "url": "https://api.github.com/repos/rust-lang/rust/commits/37c8f254ede23a35167018fc9b672f5f7b098f52", "html_url": "https://github.com/rust-lang/rust/commit/37c8f254ede23a35167018fc9b672f5f7b098f52"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "6fc3cd0b7c4adcf2abe72f363c745c08a02b1c92", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/073b1208f0389f89ade1e60401edc99c7a113a50/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073b1208f0389f89ade1e60401edc99c7a113a50/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=073b1208f0389f89ade1e60401edc99c7a113a50", "patch": "@@ -2186,28 +2186,34 @@ impl Display for char {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for *const T {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n-        let old_width = f.width;\n-        let old_flags = f.flags;\n-\n-        // The alternate flag is already treated by LowerHex as being special-\n-        // it denotes whether to prefix with 0x. We use it to work out whether\n-        // or not to zero extend, and then unconditionally set it to get the\n-        // prefix.\n-        if f.alternate() {\n-            f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);\n-\n-            if f.width.is_none() {\n-                f.width = Some((usize::BITS / 4) as usize + 2);\n+        /// Since the formatting will be identical for all pointer types, use a non-monomorphized\n+        /// implementation for the actual formatting to reduce the amount of codegen work needed\n+        fn inner(ptr: *const (), f: &mut Formatter<'_>) -> Result {\n+            let old_width = f.width;\n+            let old_flags = f.flags;\n+\n+            // The alternate flag is already treated by LowerHex as being special-\n+            // it denotes whether to prefix with 0x. We use it to work out whether\n+            // or not to zero extend, and then unconditionally set it to get the\n+            // prefix.\n+            if f.alternate() {\n+                f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);\n+\n+                if f.width.is_none() {\n+                    f.width = Some((usize::BITS / 4) as usize + 2);\n+                }\n             }\n-        }\n-        f.flags |= 1 << (FlagV1::Alternate as u32);\n+            f.flags |= 1 << (FlagV1::Alternate as u32);\n+\n+            let ret = LowerHex::fmt(&(ptr as usize), f);\n \n-        let ret = LowerHex::fmt(&(*self as *const () as usize), f);\n+            f.width = old_width;\n+            f.flags = old_flags;\n \n-        f.width = old_width;\n-        f.flags = old_flags;\n+            ret\n+        }\n \n-        ret\n+        inner(*self as *const (), f)\n     }\n }\n "}]}