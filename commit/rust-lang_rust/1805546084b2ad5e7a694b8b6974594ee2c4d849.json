{"sha": "1805546084b2ad5e7a694b8b6974594ee2c4d849", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MDU1NDYwODRiMmFkNWU3YTY5NGI4YjY5NzQ1OTRlZTJjNGQ4NDk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-05T17:59:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-07T14:02:17Z"}, "message": "Fix const generic parameter save analysis", "tree": {"sha": "ddabcf7900345b000576154526af05a165e21d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddabcf7900345b000576154526af05a165e21d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1805546084b2ad5e7a694b8b6974594ee2c4d849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1805546084b2ad5e7a694b8b6974594ee2c4d849", "html_url": "https://github.com/rust-lang/rust/commit/1805546084b2ad5e7a694b8b6974594ee2c4d849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1805546084b2ad5e7a694b8b6974594ee2c4d849/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf2f62cb98de0b255db318a3d580ce0c2e1a976d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2f62cb98de0b255db318a3d580ce0c2e1a976d", "html_url": "https://github.com/rust-lang/rust/commit/bf2f62cb98de0b255db318a3d580ce0c2e1a976d"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "72615fc8a65ac727e13e3e531aa7c0a5e117fa60", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1805546084b2ad5e7a694b8b6974594ee2c4d849/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1805546084b2ad5e7a694b8b6974594ee2c4d849/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=1805546084b2ad5e7a694b8b6974594ee2c4d849", "patch": "@@ -622,12 +622,20 @@ impl Sig for ast::Generics {\n \n         let mut defs = Vec::with_capacity(self.params.len());\n         for param in &self.params {\n-            let mut param_text = param.ident.to_string();\n+            let mut param_text = String::new();\n+            if let ast::GenericParamKind::Const { .. } = param.kind {\n+                param_text.push_str(\"const \");\n+            }\n+            param_text.push_str(&param.ident.as_str());\n             defs.push(SigElement {\n                 id: id_from_node_id(param.id, scx),\n                 start: offset + text.len(),\n-                end: offset + text.len() + param_text.len(),\n+                end: offset + text.len() + param_text.as_str().len(),\n             });\n+            if let ast::GenericParamKind::Const { ref ty } = param.kind {\n+                param_text.push_str(\": \");\n+                param_text.push_str(&pprust::ty_to_string(&ty));\n+            }\n             if !param.bounds.is_empty() {\n                 param_text.push_str(\": \");\n                 match param.kind {\n@@ -646,10 +654,8 @@ impl Sig for ast::Generics {\n                         param_text.push_str(&pprust::bounds_to_string(&param.bounds));\n                         // FIXME descend properly into bounds.\n                     }\n-                    ast::GenericParamKind::Const { ref ty } => {\n-                        param_text.push_str(&pprust::bounds_to_string(&param.bounds));\n-                        param_text.push_str(\"= \");\n-                        param_text.push_str(&pprust::ty_to_string(&ty));\n+                    ast::GenericParamKind::Const { .. } => {\n+                        // Const generics cannot contain bounds.\n                     }\n                 }\n             }"}]}