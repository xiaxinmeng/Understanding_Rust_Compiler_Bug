{"sha": "e6c43cf8b98e4837bbee1cab225621001a3f2230", "node_id": "C_kwDOAAsO6NoAKGU2YzQzY2Y4Yjk4ZTQ4MzdiYmVlMWNhYjIyNTYyMTAwMWEzZjIyMzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-16T00:18:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-16T00:18:54Z"}, "message": "Auto merge of #95685 - oxidecomputer:restore-static-dwarf, r=pnkfelix\n\nRevert \"Work around invalid DWARF bugs for fat LTO\"\n\nSince September, the toolchain has not been generating reliable DWARF\ninformation for static variables when LTO is on. This has affected\nprojects in the embedded space where the use of LTO is typical. In our\ncase, it has kept us from bumping past the 2021-09-22 nightly toolchain\nlest our debugger break. This has been a pretty dramatic regression for\npeople using debuggers and static variables. See #90357 for more info\nand a repro case.\n\nThis commit is a mechanical revert of\nd5de680e20def848751cb3c11e1182408112b1d3 from PR #89041, which caused\nthe issue. (Note on that PR that the commit's author has requested it be\nreverted.)\n\nI have locally verified that this fixes #90357 by restoring the\nfunctionality of both the repro case I posted on that bug, and debugger\nbehavior on real programs. There do not appear to be test cases for this\nin the toolchain; if I've missed them, point me at 'em and I'll update\nthem.", "tree": {"sha": "38a6772a44832c2fd1fecdf58899605be298a34b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38a6772a44832c2fd1fecdf58899605be298a34b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6c43cf8b98e4837bbee1cab225621001a3f2230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c43cf8b98e4837bbee1cab225621001a3f2230", "html_url": "https://github.com/rust-lang/rust/commit/e6c43cf8b98e4837bbee1cab225621001a3f2230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6c43cf8b98e4837bbee1cab225621001a3f2230/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c1cc82a82ebfbea731258063115992b2dd4adee", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c1cc82a82ebfbea731258063115992b2dd4adee", "html_url": "https://github.com/rust-lang/rust/commit/8c1cc82a82ebfbea731258063115992b2dd4adee"}, {"sha": "2085d6ac42c28e78ffedb559a7658b838d90b723", "url": "https://api.github.com/repos/rust-lang/rust/commits/2085d6ac42c28e78ffedb559a7658b838d90b723", "html_url": "https://github.com/rust-lang/rust/commit/2085d6ac42c28e78ffedb559a7658b838d90b723"}], "stats": {"total": 122, "additions": 95, "deletions": 27}, "files": [{"sha": "be539499b5610cce4841e965ea2fed99fed9ba76", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e6c43cf8b98e4837bbee1cab225621001a3f2230/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c43cf8b98e4837bbee1cab225621001a3f2230/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=e6c43cf8b98e4837bbee1cab225621001a3f2230", "patch": "@@ -325,20 +325,6 @@ fn fat_lto(\n         drop(linker);\n         save_temp_bitcode(cgcx, &module, \"lto.input\");\n \n-        // Fat LTO also suffers from the invalid DWARF issue similar to Thin LTO.\n-        // Here we rewrite all `DICompileUnit` pointers if there is only one `DICompileUnit`.\n-        // This only works around the problem when codegen-units = 1.\n-        // Refer to the comments in the `optimize_thin_module` function for more details.\n-        let mut cu1 = ptr::null_mut();\n-        let mut cu2 = ptr::null_mut();\n-        unsafe { llvm::LLVMRustLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2) };\n-        if !cu2.is_null() {\n-            let _timer =\n-                cgcx.prof.generic_activity_with_arg(\"LLVM_fat_lto_patch_debuginfo\", &*module.name);\n-            unsafe { llvm::LLVMRustLTOPatchDICompileUnit(llmod, cu1) };\n-            save_temp_bitcode(cgcx, &module, \"fat-lto-after-patch\");\n-        }\n-\n         // Internalize everything below threshold to help strip out more modules and such.\n         unsafe {\n             let ptr = symbols_below_threshold.as_ptr();\n@@ -769,7 +755,7 @@ pub unsafe fn optimize_thin_module(\n         // an error.\n         let mut cu1 = ptr::null_mut();\n         let mut cu2 = ptr::null_mut();\n-        llvm::LLVMRustLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2);\n+        llvm::LLVMRustThinLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2);\n         if !cu2.is_null() {\n             let msg = \"multiple source DICompileUnits found\";\n             return Err(write::llvm_err(&diag_handler, msg));\n@@ -858,7 +844,7 @@ pub unsafe fn optimize_thin_module(\n             let _timer = cgcx\n                 .prof\n                 .generic_activity_with_arg(\"LLVM_thin_lto_patch_debuginfo\", thin_module.name());\n-            llvm::LLVMRustLTOPatchDICompileUnit(llmod, cu1);\n+            llvm::LLVMRustThinLTOPatchDICompileUnit(llmod, cu1);\n             save_temp_bitcode(cgcx, &module, \"thin-lto-after-patch\");\n         }\n "}, {"sha": "0ad65e5d99bb48eeae12f61fb0c1a36e0ddd4fea", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6c43cf8b98e4837bbee1cab225621001a3f2230/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c43cf8b98e4837bbee1cab225621001a3f2230/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=e6c43cf8b98e4837bbee1cab225621001a3f2230", "patch": "@@ -2508,8 +2508,12 @@ extern \"C\" {\n         len: usize,\n         out_len: &mut usize,\n     ) -> *const u8;\n-    pub fn LLVMRustLTOGetDICompileUnit(M: &Module, CU1: &mut *mut c_void, CU2: &mut *mut c_void);\n-    pub fn LLVMRustLTOPatchDICompileUnit(M: &Module, CU: *mut c_void);\n+    pub fn LLVMRustThinLTOGetDICompileUnit(\n+        M: &Module,\n+        CU1: &mut *mut c_void,\n+        CU2: &mut *mut c_void,\n+    );\n+    pub fn LLVMRustThinLTOPatchDICompileUnit(M: &Module, CU: *mut c_void);\n \n     pub fn LLVMRustLinkerNew(M: &Module) -> &mut Linker<'_>;\n     pub fn LLVMRustLinkerAdd("}, {"sha": "be8fbf7677bcfae16a6a8a0fa9316e9499c08e15", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6c43cf8b98e4837bbee1cab225621001a3f2230/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e6c43cf8b98e4837bbee1cab225621001a3f2230/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=e6c43cf8b98e4837bbee1cab225621001a3f2230", "patch": "@@ -1715,7 +1715,7 @@ LLVMRustGetBitcodeSliceFromObjectData(const char *data,\n // Rewrite all `DICompileUnit` pointers to the `DICompileUnit` specified. See\n // the comment in `back/lto.rs` for why this exists.\n extern \"C\" void\n-LLVMRustLTOGetDICompileUnit(LLVMModuleRef Mod,\n+LLVMRustThinLTOGetDICompileUnit(LLVMModuleRef Mod,\n                                 DICompileUnit **A,\n                                 DICompileUnit **B) {\n   Module *M = unwrap(Mod);\n@@ -1733,7 +1733,7 @@ LLVMRustLTOGetDICompileUnit(LLVMModuleRef Mod,\n // Rewrite all `DICompileUnit` pointers to the `DICompileUnit` specified. See\n // the comment in `back/lto.rs` for why this exists.\n extern \"C\" void\n-LLVMRustLTOPatchDICompileUnit(LLVMModuleRef Mod, DICompileUnit *Unit) {\n+LLVMRustThinLTOPatchDICompileUnit(LLVMModuleRef Mod, DICompileUnit *Unit) {\n   Module *M = unwrap(Mod);\n \n   // If the original source module didn't have a `DICompileUnit` then try to"}, {"sha": "555d51ced7118b2a9b37a655b8073061b9ce2b5e", "filename": "src/test/debuginfo/basic-types-globals-lto.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e6c43cf8b98e4837bbee1cab225621001a3f2230/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c43cf8b98e4837bbee1cab225621001a3f2230/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs?ref=e6c43cf8b98e4837bbee1cab225621001a3f2230", "patch": "@@ -0,0 +1,81 @@\n+// Caveat - gdb doesn't know about UTF-32 character encoding and will print a\n+// rust char as only its numerical value.\n+\n+// min-lldb-version: 310\n+// min-gdb-version: 8.0\n+\n+// no-prefer-dynamic\n+// compile-flags:-g -C lto\n+// gdb-command:run\n+// gdbg-command:print 'basic_types_globals::B'\n+// gdbr-command:print B\n+// gdb-check:$1 = false\n+// gdbg-command:print 'basic_types_globals::I'\n+// gdbr-command:print I\n+// gdb-check:$2 = -1\n+// gdbg-command:print 'basic_types_globals::C'\n+// gdbr-command:print C\n+// gdbg-check:$3 = 97\n+// gdbr-check:$3 = 97\n+// gdbg-command:print/d 'basic_types_globals::I8'\n+// gdbr-command:print I8\n+// gdb-check:$4 = 68\n+// gdbg-command:print 'basic_types_globals::I16'\n+// gdbr-command:print I16\n+// gdb-check:$5 = -16\n+// gdbg-command:print 'basic_types_globals::I32'\n+// gdbr-command:print I32\n+// gdb-check:$6 = -32\n+// gdbg-command:print 'basic_types_globals::I64'\n+// gdbr-command:print I64\n+// gdb-check:$7 = -64\n+// gdbg-command:print 'basic_types_globals::U'\n+// gdbr-command:print U\n+// gdb-check:$8 = 1\n+// gdbg-command:print/d 'basic_types_globals::U8'\n+// gdbr-command:print U8\n+// gdb-check:$9 = 100\n+// gdbg-command:print 'basic_types_globals::U16'\n+// gdbr-command:print U16\n+// gdb-check:$10 = 16\n+// gdbg-command:print 'basic_types_globals::U32'\n+// gdbr-command:print U32\n+// gdb-check:$11 = 32\n+// gdbg-command:print 'basic_types_globals::U64'\n+// gdbr-command:print U64\n+// gdb-check:$12 = 64\n+// gdbg-command:print 'basic_types_globals::F32'\n+// gdbr-command:print F32\n+// gdb-check:$13 = 2.5\n+// gdbg-command:print 'basic_types_globals::F64'\n+// gdbr-command:print F64\n+// gdb-check:$14 = 3.5\n+// gdb-command:continue\n+\n+#![allow(unused_variables)]\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+\n+// N.B. These are `mut` only so they don't constant fold away.\n+static mut B: bool = false;\n+static mut I: isize = -1;\n+static mut C: char = 'a';\n+static mut I8: i8 = 68;\n+static mut I16: i16 = -16;\n+static mut I32: i32 = -32;\n+static mut I64: i64 = -64;\n+static mut U: usize = 1;\n+static mut U8: u8 = 100;\n+static mut U16: u16 = 16;\n+static mut U32: u32 = 32;\n+static mut U64: u64 = 64;\n+static mut F32: f32 = 2.5;\n+static mut F64: f64 = 3.5;\n+\n+fn main() {\n+    _zzz(); // #break\n+\n+    let a = unsafe { (B, I, C, I8, I16, I32, I64, U, U8, U16, U32, U64, F32, F64) };\n+}\n+\n+fn _zzz() {()}"}, {"sha": "a6d8c15bcdcf0f96ba61e5ab2ad72e987283fd7c", "filename": "src/test/debuginfo/basic-types-globals.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e6c43cf8b98e4837bbee1cab225621001a3f2230/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c43cf8b98e4837bbee1cab225621001a3f2230/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs?ref=e6c43cf8b98e4837bbee1cab225621001a3f2230", "patch": "@@ -1,11 +1,8 @@\n-// Caveats - gdb prints any 8-bit value (meaning rust I8 and u8 values)\n-// as its numerical value along with its associated ASCII char, there\n-// doesn't seem to be any way around this. Also, gdb doesn't know\n-// about UTF-32 character encoding and will print a rust char as only\n-// its numerical value.\n+// Caveat - gdb doesn't know about UTF-32 character encoding and will print a\n+// rust char as only its numerical value.\n \n // min-lldb-version: 310\n-// ignore-gdb // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n+// min-gdb-version: 8.0\n \n // compile-flags:-g\n // gdb-command:run\n@@ -18,7 +15,7 @@\n // gdbg-command:print 'basic_types_globals::C'\n // gdbr-command:print C\n // gdbg-check:$3 = 97\n-// gdbr-check:$3 = 97 'a'\n+// gdbr-check:$3 = 97\n // gdbg-command:print/d 'basic_types_globals::I8'\n // gdbr-command:print I8\n // gdb-check:$4 = 68"}]}