{"sha": "f31c01c713de320b4f5de7670c6fedfad48401e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMWMwMWM3MTNkZTMyMGI0ZjVkZTc2NzBjNmZlZGZhZDQ4NDAxZTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-12T14:51:55Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-18T09:49:00Z"}, "message": "Abstract LLVM building from bootstrap\n\nThis deduplicates the LLVM building functionality from compile.rs and check.rs.", "tree": {"sha": "ef8096293493b5044f166f76f7214e152d532b89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef8096293493b5044f166f76f7214e152d532b89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f31c01c713de320b4f5de7670c6fedfad48401e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f31c01c713de320b4f5de7670c6fedfad48401e4", "html_url": "https://github.com/rust-lang/rust/commit/f31c01c713de320b4f5de7670c6fedfad48401e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f31c01c713de320b4f5de7670c6fedfad48401e4/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b677346fe0e2ac2554555ce16499f0315ba934", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b677346fe0e2ac2554555ce16499f0315ba934", "html_url": "https://github.com/rust-lang/rust/commit/49b677346fe0e2ac2554555ce16499f0315ba934"}], "stats": {"total": 159, "additions": 65, "deletions": 94}, "files": [{"sha": "d7b8fa36b7f68213f951fb79adb6b8b969d056d6", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f31c01c713de320b4f5de7670c6fedfad48401e4/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f31c01c713de320b4f5de7670c6fedfad48401e4/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=f31c01c713de320b4f5de7670c6fedfad48401e4", "patch": "@@ -11,10 +11,9 @@\n //! Implementation of compiling the compiler and standard library, in \"check\" mode.\n \n use compile::{run_cargo, std_cargo, test_cargo, rustc_cargo, rustc_cargo_env, add_to_sysroot};\n-use compile::compiler_file;\n+use compile::build_codegen_backend;\n use builder::{RunConfig, Builder, ShouldRun, Step};\n use {Compiler, Mode};\n-use native;\n use cache::{INTERNER, Interned};\n use std::path::PathBuf;\n \n@@ -136,60 +135,19 @@ impl Step for CodegenBackend {\n         let build = builder.build;\n         let compiler = builder.compiler(0, build.build);\n         let target = self.target;\n+        let backend = self.backend;\n \n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"check\");\n         let mut features = build.rustc_features().to_string();\n         cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/librustc_trans/Cargo.toml\"));\n         rustc_cargo_env(build, &mut cargo);\n \n-        match &*self.backend {\n-            \"llvm\" | \"emscripten\" => {\n-                // Build LLVM for our target. This will implicitly build the\n-                // host LLVM if necessary.\n-                let llvm_config = builder.ensure(native::Llvm {\n-                    target,\n-                    emscripten: self.backend == \"emscripten\",\n-                });\n-\n-                if self.backend == \"emscripten\" {\n-                    features.push_str(\" emscripten\");\n-                }\n-\n-                // Pass down configuration from the LLVM build into the build of\n-                // librustc_llvm and librustc_trans.\n-                if build.is_rust_llvm(target) {\n-                    cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n-                }\n-                cargo.env(\"LLVM_CONFIG\", &llvm_config);\n-                if self.backend != \"emscripten\" {\n-                    let target_config = build.config.target_config.get(&target);\n-                    if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n-                        cargo.env(\"CFG_LLVM_ROOT\", s);\n-                    }\n-                }\n-                // Building with a static libstdc++ is only supported on linux right now,\n-                // not for MSVC or macOS\n-                if build.config.llvm_static_stdcpp &&\n-                   !target.contains(\"freebsd\") &&\n-                   !target.contains(\"windows\") &&\n-                   !target.contains(\"apple\") {\n-                    let file = compiler_file(build,\n-                                             build.cxx(target).unwrap(),\n-                                             target,\n-                                             \"libstdc++.a\");\n-                    cargo.env(\"LLVM_STATIC_STDCPP\", file);\n-                }\n-                if build.config.llvm_link_shared {\n-                    cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n-                }\n-            }\n-            _ => panic!(\"unknown backend: {}\", self.backend),\n-        }\n+        features += &build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n \n         let _folder = build.fold_output(|| format!(\"stage{}-rustc_trans\", compiler.stage));\n         run_cargo(build,\n                   cargo.arg(\"--features\").arg(features),\n-                  &codegen_backend_stamp(build, compiler, target, self.backend),\n+                  &codegen_backend_stamp(build, compiler, target, backend),\n                   true);\n     }\n }"}, {"sha": "9fd252e114e8843efecc5891abcba13aed46b3e0", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 61, "deletions": 48, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/f31c01c713de320b4f5de7670c6fedfad48401e4/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f31c01c713de320b4f5de7670c6fedfad48401e4/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f31c01c713de320b4f5de7670c6fedfad48401e4", "patch": "@@ -621,14 +621,15 @@ impl Step for CodegenBackend {\n     fn run(self, builder: &Builder) {\n         let compiler = self.compiler;\n         let target = self.target;\n+        let backend = self.backend;\n \n         builder.ensure(Rustc { compiler, target });\n \n         if builder.force_use_stage1(compiler, target) {\n             builder.ensure(CodegenBackend {\n                 compiler: builder.compiler(1, builder.config.build),\n                 target,\n-                backend: self.backend,\n+                backend,\n             });\n             return;\n         }\n@@ -639,52 +640,7 @@ impl Step for CodegenBackend {\n             .arg(builder.src.join(\"src/librustc_trans/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n \n-        match &*self.backend {\n-            \"llvm\" | \"emscripten\" => {\n-                // Build LLVM for our target. This will implicitly build the\n-                // host LLVM if necessary.\n-                let llvm_config = builder.ensure(native::Llvm {\n-                    target,\n-                    emscripten: self.backend == \"emscripten\",\n-                });\n-\n-                if self.backend == \"emscripten\" {\n-                    features.push_str(\" emscripten\");\n-                }\n-\n-                builder.info(&format!(\"Building stage{} codegen artifacts ({} -> {}, {})\",\n-                         compiler.stage, &compiler.host, target, self.backend));\n-\n-                // Pass down configuration from the LLVM build into the build of\n-                // librustc_llvm and librustc_trans.\n-                if builder.is_rust_llvm(target) {\n-                    cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n-                }\n-                cargo.env(\"LLVM_CONFIG\", &llvm_config);\n-                if self.backend != \"emscripten\" {\n-                    let target_config = builder.config.target_config.get(&target);\n-                    if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n-                        cargo.env(\"CFG_LLVM_ROOT\", s);\n-                    }\n-                }\n-                // Building with a static libstdc++ is only supported on linux right now,\n-                // not for MSVC or macOS\n-                if builder.config.llvm_static_stdcpp &&\n-                   !target.contains(\"freebsd\") &&\n-                   !target.contains(\"windows\") &&\n-                   !target.contains(\"apple\") {\n-                    let file = compiler_file(builder,\n-                                             builder.cxx(target).unwrap(),\n-                                             target,\n-                                             \"libstdc++.a\");\n-                    cargo.env(\"LLVM_STATIC_STDCPP\", file);\n-                }\n-                if builder.config.llvm_link_shared {\n-                    cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n-                }\n-            }\n-            _ => panic!(\"unknown backend: {}\", self.backend),\n-        }\n+        features += &build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n \n         let tmp_stamp = builder.cargo_out(compiler, Mode::Librustc, target)\n             .join(\".tmp.stamp\");\n@@ -711,12 +667,69 @@ impl Step for CodegenBackend {\n                    codegen_backend.display(),\n                    f.display());\n         }\n-        let stamp = codegen_backend_stamp(builder, compiler, target, self.backend);\n+        let stamp = codegen_backend_stamp(build, compiler, target, backend);\n         let codegen_backend = codegen_backend.to_str().unwrap();\n         t!(t!(File::create(&stamp)).write_all(codegen_backend.as_bytes()));\n     }\n }\n \n+pub fn build_codegen_backend(builder: &Builder,\n+                             cargo: &mut Command,\n+                             compiler: &Compiler,\n+                             target: Interned<String>,\n+                             backend: Interned<String>) -> String {\n+    let mut features = String::new();\n+\n+    match &*backend {\n+        \"llvm\" | \"emscripten\" => {\n+            // Build LLVM for our target. This will implicitly build the\n+            // host LLVM if necessary.\n+            let llvm_config = builder.ensure(native::Llvm {\n+                target,\n+                emscripten: backend == \"emscripten\",\n+            });\n+\n+            if backend == \"emscripten\" {\n+                features.push_str(\" emscripten\");\n+            }\n+\n+            builder.info(&format!(\"Building stage{} codegen artifacts ({} -> {}, {})\",\n+                     compiler.stage, &compiler.host, target, backend));\n+\n+            // Pass down configuration from the LLVM build into the build of\n+            // librustc_llvm and librustc_trans.\n+            if builder.is_rust_llvm(target) {\n+                cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n+            }\n+            cargo.env(\"LLVM_CONFIG\", &llvm_config);\n+            if backend != \"emscripten\" {\n+                let target_config = builder.config.target_config.get(&target);\n+                if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+                    cargo.env(\"CFG_LLVM_ROOT\", s);\n+                }\n+            }\n+            // Building with a static libstdc++ is only supported on linux right now,\n+            // not for MSVC or macOS\n+            if builder.config.llvm_static_stdcpp &&\n+               !target.contains(\"freebsd\") &&\n+               !target.contains(\"windows\") &&\n+               !target.contains(\"apple\") {\n+                let file = compiler_file(builder,\n+                                         builder.cxx(target).unwrap(),\n+                                         target,\n+                                         \"libstdc++.a\");\n+                cargo.env(\"LLVM_STATIC_STDCPP\", file);\n+            }\n+            if builder.config.llvm_link_shared {\n+                cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n+            }\n+        }\n+        _ => panic!(\"unknown backend: {}\", backend),\n+    }\n+\n+    features\n+}\n+\n /// Creates the `codegen-backends` folder for a compiler that's about to be\n /// assembled as a complete compiler.\n ///"}]}