{"sha": "a9528a28f2629c9ba34808a80c35cf03466334d4", "node_id": "C_kwDOAAsO6NoAKGE5NTI4YTI4ZjI2MjljOWJhMzQ4MDhhODBjMzVjZjAzNDY2MzM0ZDQ", "commit": {"author": {"name": "Mu001999", "email": "mu001999@outlook.com", "date": "2023-05-19T14:11:54Z"}, "committer": {"name": "Mu001999", "email": "mu001999@outlook.com", "date": "2023-05-19T14:11:54Z"}, "message": "Keep only the trait when emitting the error for `MyTrait + 'a`", "tree": {"sha": "5bf722f9fe5608f6a9d3856573ea887c16fd7027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bf722f9fe5608f6a9d3856573ea887c16fd7027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9528a28f2629c9ba34808a80c35cf03466334d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9528a28f2629c9ba34808a80c35cf03466334d4", "html_url": "https://github.com/rust-lang/rust/commit/a9528a28f2629c9ba34808a80c35cf03466334d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9528a28f2629c9ba34808a80c35cf03466334d4/comments", "author": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba6f5e3b4d60ea5a847cd4402cca594cd40b218f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6f5e3b4d60ea5a847cd4402cca594cd40b218f", "html_url": "https://github.com/rust-lang/rust/commit/ba6f5e3b4d60ea5a847cd4402cca594cd40b218f"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "bbd9c37c6fcf8bd932cdeb4e968392a92fa6a29a", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a9528a28f2629c9ba34808a80c35cf03466334d4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9528a28f2629c9ba34808a80c35cf03466334d4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=a9528a28f2629c9ba34808a80c35cf03466334d4", "patch": "@@ -288,8 +288,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mode = no_match_data.mode;\n         let tcx = self.tcx;\n         let rcvr_ty = self.resolve_vars_if_possible(rcvr_ty);\n-        let (ty_str, ty_file) = tcx.short_ty_string(rcvr_ty);\n-        let short_ty_str = with_forced_trimmed_paths!(rcvr_ty.to_string());\n+        let (mut ty_str, ty_file) = tcx.short_ty_string(rcvr_ty);\n+        let mut short_ty_str = with_forced_trimmed_paths!(rcvr_ty.to_string());\n         let is_method = mode == Mode::MethodCall;\n         let unsatisfied_predicates = &no_match_data.unsatisfied_predicates;\n         let similar_candidate = no_match_data.similar_candidate;\n@@ -328,13 +328,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         span = item_name.span;\n \n-        // Don't show generic arguments when the method can't be found in any implementation (#81576).\n-        let mut ty_str_reported = if trait_missing_method {\n-            ty_str.strip_prefix(\"dyn \").expect(\"Failed to remove the prefix dyn\").to_owned()\n-        } else {\n-            ty_str.clone()\n-        };\n+        if trait_missing_method && let ty::Dynamic(predicates, _, _) = rcvr_ty.kind() {\n+            ty_str = predicates.to_string();\n+            short_ty_str = with_forced_trimmed_paths!(predicates.to_string());\n+        }\n \n+        // Don't show generic arguments when the method can't be found in any implementation (#81576).\n+        let mut ty_str_reported = ty_str.clone();\n         if let ty::Adt(_, generics) = rcvr_ty.kind() {\n             if generics.len() > 0 {\n                 let mut autoderef = self.autoderef(span, rcvr_ty);\n@@ -383,14 +383,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if tcx.sess.source_map().is_multiline(sugg_span) {\n             err.span_label(sugg_span.with_hi(span.lo()), \"\");\n         }\n-        let mut ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n-            short_ty_str\n-        } else {\n-            ty_str\n-        };\n-        if trait_missing_method {\n-            ty_str =\n-                ty_str.strip_prefix(\"dyn \").expect(\"Failed to remove the prefix dyn\").to_owned();\n+\n+        if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n+            ty_str = short_ty_str;\n         }\n \n         if let Some(file) = ty_file {"}, {"sha": "36f3081211d2fdbfe8339d8d32d4abddb49e8d76", "filename": "tests/ui/resolve/issue-111727.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9528a28f2629c9ba34808a80c35cf03466334d4/tests%2Fui%2Fresolve%2Fissue-111727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9528a28f2629c9ba34808a80c35cf03466334d4/tests%2Fui%2Fresolve%2Fissue-111727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-111727.rs?ref=a9528a28f2629c9ba34808a80c35cf03466334d4", "patch": "@@ -0,0 +1,5 @@\n+// edition: 2021\n+\n+fn main() {\n+    std::any::Any::create(); //~ ERROR\n+}"}, {"sha": "bd748211ed321eb95d25d830f10b4b3d226cfd55", "filename": "tests/ui/resolve/issue-111727.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9528a28f2629c9ba34808a80c35cf03466334d4/tests%2Fui%2Fresolve%2Fissue-111727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9528a28f2629c9ba34808a80c35cf03466334d4/tests%2Fui%2Fresolve%2Fissue-111727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-111727.stderr?ref=a9528a28f2629c9ba34808a80c35cf03466334d4", "patch": "@@ -0,0 +1,9 @@\n+error[E0599]: no function or associated item named `create` found for trait `Any`\n+  --> $DIR/issue-111727.rs:4:20\n+   |\n+LL |     std::any::Any::create();\n+   |                    ^^^^^^ function or associated item not found in `Any`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}