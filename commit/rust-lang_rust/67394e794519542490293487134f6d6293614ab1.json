{"sha": "67394e794519542490293487134f6d6293614ab1", "node_id": "C_kwDOAAsO6NoAKDY3Mzk0ZTc5NDUxOTU0MjQ5MDI5MzQ4NzEzNGY2ZDYyOTM2MTRhYjE", "commit": {"author": {"name": "SLASHLogin", "email": "loginmlgxd@gmail.com", "date": "2022-10-30T13:33:27Z"}, "committer": {"name": "SLASHLogin", "email": "loginmlgxd@gmail.com", "date": "2022-11-09T13:56:21Z"}, "message": "Flatten diagnostic structs", "tree": {"sha": "4ef2251b4dbab68827c569c6855eb964b9b7904b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ef2251b4dbab68827c569c6855eb964b9b7904b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67394e794519542490293487134f6d6293614ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67394e794519542490293487134f6d6293614ab1", "html_url": "https://github.com/rust-lang/rust/commit/67394e794519542490293487134f6d6293614ab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67394e794519542490293487134f6d6293614ab1/comments", "author": {"login": "SLASHLogin", "id": 24846525, "node_id": "MDQ6VXNlcjI0ODQ2NTI1", "avatar_url": "https://avatars.githubusercontent.com/u/24846525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SLASHLogin", "html_url": "https://github.com/SLASHLogin", "followers_url": "https://api.github.com/users/SLASHLogin/followers", "following_url": "https://api.github.com/users/SLASHLogin/following{/other_user}", "gists_url": "https://api.github.com/users/SLASHLogin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SLASHLogin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SLASHLogin/subscriptions", "organizations_url": "https://api.github.com/users/SLASHLogin/orgs", "repos_url": "https://api.github.com/users/SLASHLogin/repos", "events_url": "https://api.github.com/users/SLASHLogin/events{/privacy}", "received_events_url": "https://api.github.com/users/SLASHLogin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SLASHLogin", "id": 24846525, "node_id": "MDQ6VXNlcjI0ODQ2NTI1", "avatar_url": "https://avatars.githubusercontent.com/u/24846525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SLASHLogin", "html_url": "https://github.com/SLASHLogin", "followers_url": "https://api.github.com/users/SLASHLogin/followers", "following_url": "https://api.github.com/users/SLASHLogin/following{/other_user}", "gists_url": "https://api.github.com/users/SLASHLogin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SLASHLogin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SLASHLogin/subscriptions", "organizations_url": "https://api.github.com/users/SLASHLogin/orgs", "repos_url": "https://api.github.com/users/SLASHLogin/repos", "events_url": "https://api.github.com/users/SLASHLogin/events{/privacy}", "received_events_url": "https://api.github.com/users/SLASHLogin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9a5329a6f88935c92b506a19db628ec2c0cf6ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a5329a6f88935c92b506a19db628ec2c0cf6ed", "html_url": "https://github.com/rust-lang/rust/commit/e9a5329a6f88935c92b506a19db628ec2c0cf6ed"}], "stats": {"total": 91, "additions": 43, "deletions": 48}, "files": [{"sha": "db3ca6a7783e12137b44fde9b0b78d8fe8746b1d", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "modified", "additions": 43, "deletions": 48, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/67394e794519542490293487134f6d6293614ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67394e794519542490293487134f6d6293614ab1/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=67394e794519542490293487134f6d6293614ab1", "patch": "@@ -3,118 +3,116 @@ use std::borrow::Cow;\n use rustc_errors::fluent;\n use rustc_errors::DiagnosticBuilder;\n use rustc_errors::ErrorGuaranteed;\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n-use rustc_session::SessionDiagnostic;\n+use rustc_errors::Handler;\n+use rustc_errors::IntoDiagnostic;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::Span;\n \n pub(crate) enum UnknownCTargetFeature<'a> {\n     UnknownFeaturePrefix { feature: &'a str },\n     UnknownFeature { feature: &'a str, rust_feature: Option<&'a str> },\n }\n \n-impl SessionDiagnostic<'_, ()> for UnknownCTargetFeature<'_> {\n-    fn into_diagnostic(\n-        self,\n-        sess: &'_ rustc_session::parse::ParseSess,\n-    ) -> DiagnosticBuilder<'_, ()> {\n+impl IntoDiagnostic<'_, ()> for UnknownCTargetFeature<'_> {\n+    fn into_diagnostic(self, sess: &'_ Handler) -> DiagnosticBuilder<'_, ()> {\n         match self {\n             UnknownCTargetFeature::UnknownFeaturePrefix { feature } => {\n-                let mut diag = sess.struct_warn(fluent::codegen_llvm::unknown_ctarget_feature);\n+                let mut diag = sess.struct_warn(fluent::codegen_llvm_unknown_ctarget_feature);\n                 diag.set_arg(\"feature\", feature);\n-                diag.note(fluent::codegen_llvm::unknown_feature_prefix);\n+                diag.note(fluent::codegen_llvm_unknown_feature_prefix);\n                 diag\n             }\n             UnknownCTargetFeature::UnknownFeature { feature, rust_feature } => {\n-                let mut diag = sess.struct_warn(fluent::codegen_llvm::unknown_ctarget_feature);\n+                let mut diag = sess.struct_warn(fluent::codegen_llvm_unknown_ctarget_feature);\n                 diag.set_arg(\"feature\", feature);\n-                diag.note(fluent::codegen_llvm::unknown_feature);\n+                diag.note(fluent::codegen_llvm_unknown_feature);\n                 if let Some(rust_feature) = rust_feature {\n-                    diag.help(fluent::codegen_llvm::rust_feature);\n+                    diag.help(fluent::codegen_llvm_rust_feature);\n                     diag.set_arg(\"rust_feature\", rust_feature);\n                 } else {\n-                    diag.note(fluent::codegen_llvm::unknown_feature_fill_request);\n+                    diag.note(fluent::codegen_llvm_unknown_feature_fill_request);\n                 }\n                 diag\n             }\n         }\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::error_creating_import_library)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_error_creating_import_library)]\n pub(crate) struct ErrorCreatingImportLibrary<'a> {\n     pub lib_name: &'a str,\n     pub error: String,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::instrument_coverage_requires_llvm_12)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_instrument_coverage_requires_llvm_12)]\n pub(crate) struct InstrumentCoverageRequiresLLVM12;\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::symbol_already_defined)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_symbol_already_defined)]\n pub(crate) struct SymbolAlreadyDefined<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub symbol_name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::branch_protection_requires_aarch64)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_branch_protection_requires_aarch64)]\n pub(crate) struct BranchProtectionRequiresAArch64;\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::layout_size_overflow)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_layout_size_overflow)]\n pub(crate) struct LayoutSizeOverflow {\n     #[primary_span]\n     pub span: Span,\n     pub error: String,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::invalid_minimum_alignment)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_invalid_minimum_alignment)]\n pub(crate) struct InvalidMinimumAlignment {\n     pub err: String,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::linkage_const_or_mut_type)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_linkage_const_or_mut_type)]\n pub(crate) struct LinkageConstOrMutType {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::sanitizer_memtag_requires_mte)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_sanitizer_memtag_requires_mte)]\n pub(crate) struct SanitizerMemtagRequiresMte;\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::archive_build_failure)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_archive_build_failure)]\n pub(crate) struct ArchiveBuildFailure {\n     pub error: std::io::Error,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::error_writing_def_file)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_error_writing_def_file)]\n pub(crate) struct ErrorWritingDEFFile {\n     pub error: std::io::Error,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::error_calling_dlltool)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_error_calling_dlltool)]\n pub(crate) struct ErrorCallingDllTool {\n     pub error: std::io::Error,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::dlltool_fail_import_library)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_dlltool_fail_import_library)]\n pub(crate) struct DlltoolFailImportLibrary<'a> {\n     pub stdout: Cow<'a, str>,\n     pub stderr: Cow<'a, str>,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(codegen_llvm::unknown_archive_kind)]\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_unknown_archive_kind)]\n pub(crate) struct UnknownArchiveKind<'a> {\n     pub kind: &'a str,\n }\n@@ -124,21 +122,18 @@ pub(crate) struct TargetFeatureDisableOrEnable<'a> {\n     pub span: Option<Span>,\n }\n \n-#[derive(SessionSubdiagnostic)]\n-#[help(codegen_llvm::missing_features)]\n+#[derive(Subdiagnostic)]\n+#[help(codegen_llvm_missing_features)]\n pub(crate) struct MissingFeatures;\n \n-impl SessionDiagnostic<'_, ErrorGuaranteed> for TargetFeatureDisableOrEnable<'_> {\n-    fn into_diagnostic(\n-        self,\n-        sess: &'_ rustc_session::parse::ParseSess,\n-    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+impl IntoDiagnostic<'_, ErrorGuaranteed> for TargetFeatureDisableOrEnable<'_> {\n+    fn into_diagnostic(self, sess: &'_ Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut diag = if let Some(span) = self.span {\n-            let mut diag = sess.struct_err(fluent::codegen_llvm::target_feature_disable_or_enable);\n+            let mut diag = sess.struct_err(fluent::codegen_llvm_target_feature_disable_or_enable);\n             diag.set_span(span);\n             diag\n         } else {\n-            sess.struct_err(fluent::codegen_llvm::target_feature_disable_or_enable)\n+            sess.struct_err(fluent::codegen_llvm_target_feature_disable_or_enable)\n         };\n         diag.set_arg(\"features\", self.features.join(\", \"));\n         diag"}]}