{"sha": "142bb27373126edf8367f526358b6c72ecf1d8df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MmJiMjczNzMxMjZlZGY4MzY3ZjUyNjM1OGI2YzcyZWNmMWQ4ZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-16T08:45:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-16T08:45:32Z"}, "message": "Auto merge of #53147 - ashtneoi:dont-suggest-ref, r=estebank\n\nFor move errors, suggest match ergonomics instead of `ref`\n\nPartially fixes issue #52423. Also makes errors and suggestions more consistent between move-from-place and move-from-value errors.\n\nLimitations:\n- Only the first pattern in a match arm can have a \"consider removing this borrow operator\" suggestion.\n- Suggestions don't always compile as-is (see the TODOs in the test for details).\n\nSorry for the really long test. I wanted to make sure I handled every case I could think of, and it turned out there were a lot of them.\n\nQuestions:\n- Is there any particular applicability I should set on those suggestions?\n- Are the notes about the `Copy` trait excessive?", "tree": {"sha": "9dc2407e9dac4eb50718baddcd89a72903f64bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dc2407e9dac4eb50718baddcd89a72903f64bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/142bb27373126edf8367f526358b6c72ecf1d8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/142bb27373126edf8367f526358b6c72ecf1d8df", "html_url": "https://github.com/rust-lang/rust/commit/142bb27373126edf8367f526358b6c72ecf1d8df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/142bb27373126edf8367f526358b6c72ecf1d8df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "996e26c23f3953a27e4e9b6f46ca474da14d3531", "url": "https://api.github.com/repos/rust-lang/rust/commits/996e26c23f3953a27e4e9b6f46ca474da14d3531", "html_url": "https://github.com/rust-lang/rust/commit/996e26c23f3953a27e4e9b6f46ca474da14d3531"}, {"sha": "0023dd9ba1f242c81042460e5ec6876bd93afdbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0023dd9ba1f242c81042460e5ec6876bd93afdbf", "html_url": "https://github.com/rust-lang/rust/commit/0023dd9ba1f242c81042460e5ec6876bd93afdbf"}], "stats": {"total": 3383, "additions": 3104, "deletions": 279}, "files": [{"sha": "8ceff303774b596a265af6a1dfac05a09589914c", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -429,8 +429,8 @@ pub enum BorrowKind {\n \n     /// Data must be immutable but not aliasable.  This kind of borrow\n     /// cannot currently be expressed by the user and is used only in\n-    /// implicit closure bindings. It is needed when you the closure\n-    /// is borrowing or mutating a mutable referent, e.g.:\n+    /// implicit closure bindings. It is needed when the closure is\n+    /// borrowing or mutating a mutable referent, e.g.:\n     ///\n     ///    let x: &mut isize = ...;\n     ///    let y = || *x += 5;\n@@ -443,7 +443,7 @@ pub enum BorrowKind {\n     ///    let y = (&mut Env { &x }, fn_ptr);  // Closure is pair of env and fn\n     ///    fn fn_ptr(env: &mut Env) { **env.x += 5; }\n     ///\n-    /// This is then illegal because you cannot mutate a `&mut` found\n+    /// This is then illegal because you cannot mutate an `&mut` found\n     /// in an aliasable location. To solve, you'd have to translate with\n     /// an `&mut` borrow:\n     ///\n@@ -523,6 +523,8 @@ pub struct VarBindingForm<'tcx> {\n     /// (b) it gives a way to separate this case from the remaining cases\n     ///     for diagnostics.\n     pub opt_match_place: Option<(Option<Place<'tcx>>, Span)>,\n+    /// Span of the pattern in which this variable was bound.\n+    pub pat_span: Span,\n }\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n@@ -540,7 +542,8 @@ CloneTypeFoldableAndLiftImpls! { BindingForm<'tcx>, }\n impl_stable_hash_for!(struct self::VarBindingForm<'tcx> {\n     binding_mode,\n     opt_ty_info,\n-    opt_match_place\n+    opt_match_place,\n+    pat_span\n });\n \n mod binding_form_impl {\n@@ -673,7 +676,7 @@ pub struct LocalDecl<'tcx> {\n     /// ROOT SCOPE\n     ///  \u2502{ argument x: &str }\n     ///  \u2502\n-    ///  \u2502 \u2502{ #[allow(unused_mut] } // this is actually split into 2 scopes\n+    ///  \u2502 \u2502{ #[allow(unused_mut)] } // this is actually split into 2 scopes\n     ///  \u2502 \u2502                        // in practice because I'm lazy.\n     ///  \u2502 \u2502\n     ///  \u2502 \u2502\u2190 x.source_info.scope\n@@ -710,6 +713,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 binding_mode: ty::BindingMode::BindByValue(_),\n                 opt_ty_info: _,\n                 opt_match_place: _,\n+                pat_span: _,\n             }))) => true,\n \n             // FIXME: might be able to thread the distinction between\n@@ -729,6 +733,7 @@ impl<'tcx> LocalDecl<'tcx> {\n                 binding_mode: ty::BindingMode::BindByValue(_),\n                 opt_ty_info: _,\n                 opt_match_place: _,\n+                pat_span: _,\n             }))) => true,\n \n             Some(ClearCrossCrate::Set(BindingForm::ImplicitSelf)) => true,\n@@ -906,7 +911,7 @@ pub enum TerminatorKind<'tcx> {\n \n     /// Drop the Place and assign the new value over it. This ensures\n     /// that the assignment to `P` occurs *even if* the destructor for\n-    /// place unwinds. Its semantics are best explained by by the\n+    /// place unwinds. Its semantics are best explained by the\n     /// elaboration:\n     ///\n     /// ```"}, {"sha": "5b08400eb112d05ddc56fe37aca367d0eb61391c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -1235,7 +1235,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     ty::BindByReference(..) => {\n                         let let_span = self.tcx.hir.span(node_id);\n                         let suggestion = suggest_ref_mut(self.tcx, let_span);\n-                        if let Some((let_span, replace_str)) = suggestion {\n+                        if let Some(replace_str) = suggestion {\n                             db.span_suggestion(\n                                 let_span,\n                                 \"use a mutable reference instead\","}, {"sha": "56ca4db098f87217f9534118238e08b1f3956a38", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 128, "deletions": 98, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::hir;\n+use core::unicode::property::Pattern_White_Space;\n use rustc::mir::*;\n use rustc::ty;\n use rustc_errors::DiagnosticBuilder;\n@@ -36,18 +36,18 @@ use util::borrowck_errors::{BorrowckErrors, Origin};\n // let (&x, &y) = (&String::new(), &String::new());\n #[derive(Debug)]\n enum GroupedMoveError<'tcx> {\n-    // Match place can't be moved from\n+    // Place expression can't be moved from,\n     // e.g. match x[0] { s => (), } where x: &[String]\n-    MovesFromMatchPlace {\n+    MovesFromPlace {\n         original_path: Place<'tcx>,\n         span: Span,\n         move_from: Place<'tcx>,\n         kind: IllegalMoveOriginKind<'tcx>,\n         binds_to: Vec<Local>,\n     },\n-    // Part of a pattern can't be moved from,\n+    // Part of a value expression can't be moved from,\n     // e.g. match &String::new() { &x => (), }\n-    MovesFromPattern {\n+    MovesFromValue {\n         original_path: Place<'tcx>,\n         span: Span,\n         move_from: MovePathIndex,\n@@ -119,6 +119,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         opt_match_place: Some((ref opt_match_place, match_span)),\n                         binding_mode: _,\n                         opt_ty_info: _,\n+                        pat_span: _,\n                     }))) = local_decl.is_user_variable\n                     {\n                         self.append_binding_error(\n@@ -155,7 +156,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         statement_span: Span,\n     ) {\n         debug!(\n-            \"append_to_grouped_errors(match_place={:?}, match_span={:?})\",\n+            \"append_binding_error(match_place={:?}, match_span={:?})\",\n             match_place, match_span\n         );\n \n@@ -166,7 +167,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             // Error with the match place\n             LookupResult::Parent(_) => {\n                 for ge in &mut *grouped_errors {\n-                    if let GroupedMoveError::MovesFromMatchPlace { span, binds_to, .. } = ge {\n+                    if let GroupedMoveError::MovesFromPlace { span, binds_to, .. } = ge {\n                         if match_span == *span {\n                             debug!(\"appending local({:?}) to list\", bind_to);\n                             if !binds_to.is_empty() {\n@@ -184,7 +185,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     (vec![bind_to], match_span)\n                 };\n-                grouped_errors.push(GroupedMoveError::MovesFromMatchPlace {\n+                grouped_errors.push(GroupedMoveError::MovesFromPlace {\n                     span,\n                     move_from: match_place.clone(),\n                     original_path,\n@@ -200,7 +201,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     _ => unreachable!(\"Probably not unreachable...\"),\n                 };\n                 for ge in &mut *grouped_errors {\n-                    if let GroupedMoveError::MovesFromPattern {\n+                    if let GroupedMoveError::MovesFromValue {\n                         span,\n                         move_from: other_mpi,\n                         binds_to,\n@@ -215,7 +216,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n                 debug!(\"found a new move error location\");\n-                grouped_errors.push(GroupedMoveError::MovesFromPattern {\n+                grouped_errors.push(GroupedMoveError::MovesFromValue {\n                     span: match_span,\n                     move_from: mpi,\n                     original_path,\n@@ -230,13 +231,13 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         let (mut err, err_span) = {\n             let (span, original_path, kind): (Span, &Place<'tcx>, &IllegalMoveOriginKind) =\n                 match error {\n-                    GroupedMoveError::MovesFromMatchPlace {\n+                    GroupedMoveError::MovesFromPlace {\n                         span,\n                         ref original_path,\n                         ref kind,\n                         ..\n                     } |\n-                    GroupedMoveError::MovesFromPattern { span, ref original_path, ref kind, .. } |\n+                    GroupedMoveError::MovesFromValue { span, ref original_path, ref kind, .. } |\n                     GroupedMoveError::OtherIllegalMove { span, ref original_path, ref kind } => {\n                         (span, original_path, kind)\n                     },\n@@ -331,111 +332,140 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         err: &mut DiagnosticBuilder<'a>,\n         span: Span,\n     ) {\n+        let snippet = self.tcx.sess.codemap().span_to_snippet(span).unwrap();\n         match error {\n-            GroupedMoveError::MovesFromMatchPlace {\n+            GroupedMoveError::MovesFromPlace {\n                 mut binds_to,\n                 move_from,\n                 ..\n             } => {\n-                // Ok to suggest a borrow, since the target can't be moved from\n-                // anyway.\n-                if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(span) {\n-                    match move_from {\n-                        Place::Projection(ref proj)\n-                            if self.suitable_to_remove_deref(proj, &snippet) =>\n-                        {\n-                            err.span_suggestion(\n-                                span,\n-                                \"consider removing this dereference operator\",\n-                                (&snippet[1..]).to_owned(),\n-                            );\n-                        }\n-                        _ => {\n-                            err.span_suggestion(\n-                                span,\n-                                \"consider using a reference instead\",\n-                                format!(\"&{}\", snippet),\n-                            );\n-                        }\n-                    }\n-\n-                    binds_to.sort();\n-                    binds_to.dedup();\n-                    for local in binds_to {\n-                        let bind_to = &self.mir.local_decls[local];\n-                        let binding_span = bind_to.source_info.span;\n-                        err.span_label(\n-                            binding_span,\n-                            format!(\n-                                \"move occurs because {} has type `{}`, \\\n-                                 which does not implement the `Copy` trait\",\n-                                bind_to.name.unwrap(),\n-                                bind_to.ty\n-                            ),\n-                        );\n-                    }\n+                let try_remove_deref = match move_from {\n+                    Place::Projection(box PlaceProjection {\n+                        elem: ProjectionElem::Deref,\n+                        ..\n+                    }) => true,\n+                    _ => false,\n+                };\n+                if try_remove_deref && snippet.starts_with('*') {\n+                    // The snippet doesn't start with `*` in (e.g.) index\n+                    // expressions `a[b]`, which roughly desugar to\n+                    // `*Index::index(&a, b)` or\n+                    // `*IndexMut::index_mut(&mut a, b)`.\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider removing the `*`\",\n+                        snippet[1..].to_owned(),\n+                    );\n+                } else {\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider borrowing here\",\n+                        format!(\"&{}\", snippet),\n+                    );\n                 }\n+\n+                binds_to.sort();\n+                binds_to.dedup();\n+                self.add_move_error_details(err, &binds_to);\n             }\n-            GroupedMoveError::MovesFromPattern { mut binds_to, .. } => {\n-                // Suggest ref, since there might be a move in\n-                // another match arm\n+            GroupedMoveError::MovesFromValue { mut binds_to, .. } => {\n                 binds_to.sort();\n                 binds_to.dedup();\n-                let mut multipart_suggestion = Vec::with_capacity(binds_to.len());\n-                for (j, local) in binds_to.into_iter().enumerate() {\n-                    let bind_to = &self.mir.local_decls[local];\n-                    let binding_span = bind_to.source_info.span;\n+                self.add_move_error_suggestions(err, &binds_to);\n+                self.add_move_error_details(err, &binds_to);\n+            }\n+            // No binding. Nothing to suggest.\n+            GroupedMoveError::OtherIllegalMove { .. } => (),\n+        }\n+    }\n \n-                    // Suggest ref mut when the user has already written mut.\n-                    let ref_kind = match bind_to.mutability {\n-                        Mutability::Not => \"ref\",\n-                        Mutability::Mut => \"ref mut\",\n-                    };\n-                    if j == 0 {\n-                        err.span_label(binding_span, format!(\"data moved here\"));\n+    fn add_move_error_suggestions(\n+        &self,\n+        err: &mut DiagnosticBuilder<'a>,\n+        binds_to: &[Local],\n+    ) {\n+        let mut suggestions: Vec<(Span, &str, String)> = Vec::new();\n+        for local in binds_to {\n+            let bind_to = &self.mir.local_decls[*local];\n+            if let Some(\n+                ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n+                    pat_span,\n+                    ..\n+                }))\n+            ) = bind_to.is_user_variable {\n+                let pat_snippet = self\n+                    .tcx.sess.codemap()\n+                    .span_to_snippet(pat_span)\n+                    .unwrap();\n+                if pat_snippet.starts_with('&') {\n+                    let pat_snippet = pat_snippet[1..].trim_left();\n+                    let suggestion;\n+                    let to_remove;\n+                    if pat_snippet.starts_with(\"mut\")\n+                        && pat_snippet[\"mut\".len()..].starts_with(Pattern_White_Space)\n+                    {\n+                        suggestion = pat_snippet[\"mut\".len()..].trim_left();\n+                        to_remove = \"&mut\";\n                     } else {\n-                        err.span_label(binding_span, format!(\"... and here\"));\n-                    }\n-                    match bind_to.name {\n-                        Some(name) => {\n-                            multipart_suggestion.push((binding_span,\n-                                                       format!(\"{} {}\", ref_kind, name)));\n-                        }\n-                        None => {\n-                            err.span_label(\n-                                span,\n-                                format!(\"Local {:?} is not suitable for ref\", bind_to),\n-                            );\n-                        }\n+                        suggestion = pat_snippet;\n+                        to_remove = \"&\";\n                     }\n+                    suggestions.push((\n+                        pat_span,\n+                        to_remove,\n+                        suggestion.to_owned(),\n+                    ));\n                 }\n-                err.multipart_suggestion(\"to prevent move, use ref or ref mut\",\n-                                         multipart_suggestion);\n             }\n-            // Nothing to suggest.\n-            GroupedMoveError::OtherIllegalMove { .. } => (),\n+        }\n+        suggestions.sort_unstable_by_key(|&(span, _, _)| span);\n+        suggestions.dedup_by_key(|&mut (span, _, _)| span);\n+        for (span, to_remove, suggestion) in suggestions {\n+            err.span_suggestion(\n+                span,\n+                &format!(\"consider removing the `{}`\", to_remove),\n+                suggestion\n+            );\n         }\n     }\n \n-    fn suitable_to_remove_deref(&self, proj: &PlaceProjection<'tcx>, snippet: &str) -> bool {\n-        let is_shared_ref = |ty: ty::Ty| match ty.sty {\n-            ty::TypeVariants::TyRef(.., hir::Mutability::MutImmutable) => true,\n-            _ => false,\n-        };\n+    fn add_move_error_details(\n+        &self,\n+        err: &mut DiagnosticBuilder<'a>,\n+        binds_to: &[Local],\n+    ) {\n+        let mut noncopy_var_spans = Vec::new();\n+        for (j, local) in binds_to.into_iter().enumerate() {\n+            let bind_to = &self.mir.local_decls[*local];\n+            let binding_span = bind_to.source_info.span;\n \n-        proj.elem == ProjectionElem::Deref && snippet.starts_with('*') && match proj.base {\n-            Place::Local(local) => {\n-                let local_decl = &self.mir.local_decls[local];\n-                // If this is a temporary, then this could be from an\n-                // overloaded * operator.\n-                local_decl.is_user_variable.is_some() && is_shared_ref(local_decl.ty)\n+            if j == 0 {\n+                err.span_label(binding_span, format!(\"data moved here\"));\n+            } else {\n+                err.span_label(binding_span, format!(\"...and here\"));\n             }\n-            Place::Promoted(_) => true,\n-            Place::Static(ref st) => is_shared_ref(st.ty),\n-            Place::Projection(ref proj) => match proj.elem {\n-                ProjectionElem::Field(_, ty) => is_shared_ref(ty),\n-                _ => false,\n-            },\n+\n+            if binds_to.len() == 1 {\n+                err.span_note(\n+                    binding_span,\n+                    &format!(\n+                        \"move occurs because `{}` has type `{}`, \\\n+                            which does not implement the `Copy` trait\",\n+                        bind_to.name.unwrap(),\n+                        bind_to.ty\n+                    ),\n+                );\n+            } else {\n+                noncopy_var_spans.push(binding_span);\n+            }\n+        }\n+\n+        if binds_to.len() > 1 {\n+            err.span_note(\n+                noncopy_var_spans,\n+                \"move occurs because these variables have types that \\\n+                    don't implement the `Copy` trait\",\n+            );\n         }\n     }\n }"}, {"sha": "f11135fc026f53acd940600a43d226a733416c30", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -329,7 +329,11 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     ClearCrossCrate::Set(mir::BindingForm::Var(mir::VarBindingForm {\n                         binding_mode: ty::BindingMode::BindByReference(_),\n                         ..\n-                    })) => suggest_ref_mut(self.tcx, local_decl.source_info.span),\n+                    })) => {\n+                        let pattern_span = local_decl.source_info.span;\n+                        suggest_ref_mut(self.tcx, pattern_span)\n+                            .map(|replacement| (pattern_span, replacement))\n+                    }\n \n                     //\n                     ClearCrossCrate::Set(mir::BindingForm::RefForGuard) => unreachable!(),"}, {"sha": "b317bb7cff0e3c9a6e0b720f0dd0b2a63e1123f9", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -321,9 +321,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         block.unit()\n     }\n \n-    /// Declares the bindings of the given pattern and returns the visibility scope\n-    /// for the bindings in this patterns, if such a scope had to be created.\n-    /// NOTE: Declaring the bindings should always be done in their drop scope.\n+    /// Declares the bindings of the given patterns and returns the visibility\n+    /// scope for the bindings in these patterns, if such a scope had to be\n+    /// created. NOTE: Declaring the bindings should always be done in their\n+    /// drop scope.\n     pub fn declare_bindings(&mut self,\n                             mut visibility_scope: Option<SourceScope>,\n                             scope_span: Span,\n@@ -356,7 +357,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let visibility_scope = visibility_scope.unwrap();\n             this.declare_binding(source_info, visibility_scope, mutability, name, mode,\n                                  num_patterns, var, ty, has_guard,\n-                                 opt_match_place.map(|(x, y)| (x.cloned(), y)));\n+                                 opt_match_place.map(|(x, y)| (x.cloned(), y)),\n+                                 patterns[0].span);\n         });\n         visibility_scope\n     }\n@@ -1181,7 +1183,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                        var_id: NodeId,\n                        var_ty: Ty<'tcx>,\n                        has_guard: ArmHasGuard,\n-                       opt_match_place: Option<(Option<Place<'tcx>>, Span)>)\n+                       opt_match_place: Option<(Option<Place<'tcx>>, Span)>,\n+                       pat_span: Span)\n     {\n         debug!(\"declare_binding(var_id={:?}, name={:?}, mode={:?}, var_ty={:?}, \\\n                 visibility_scope={:?}, source_info={:?})\",\n@@ -1207,6 +1210,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // Instead, just abandon providing diagnostic info.\n                 opt_ty_info: None,\n                 opt_match_place,\n+                pat_span,\n             }))),\n         };\n         let for_arm_body = self.local_decls.push(local.clone());"}, {"sha": "c0c431804d8c1ea52fcf1716084e06c761586e55", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -763,6 +763,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                     binding_mode,\n                                     opt_ty_info,\n                                     opt_match_place: Some((Some(place.clone()), span)),\n+                                    pat_span: span,\n                                 })))\n                             };\n                         self.var_indices.insert(var, LocalsForNode::One(local));"}, {"sha": "bda80ff562c75ede8ef6cbacc79b5982d36de066", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -35,6 +35,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(try_trait)]\n #![feature(unicode_internals)]\n #![feature(step_trait)]\n+#![feature(slice_concat_ext)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "fe6fefe89fd66b59cab4e0e5b4887eb165fbc1ce", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -31,14 +31,14 @@ pub use self::graphviz::write_node_label as write_graphviz_node_label;\n /// If possible, suggest replacing `ref` with `ref mut`.\n pub fn suggest_ref_mut<'cx, 'gcx, 'tcx>(\n     tcx: ty::TyCtxt<'cx, 'gcx, 'tcx>,\n-    pattern_span: Span,\n-) -> Option<(Span, String)> {\n-    let hi_src = tcx.sess.codemap().span_to_snippet(pattern_span).unwrap();\n+    binding_span: Span,\n+) -> Option<(String)> {\n+    let hi_src = tcx.sess.codemap().span_to_snippet(binding_span).unwrap();\n     if hi_src.starts_with(\"ref\")\n         && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)\n     {\n         let replacement = format!(\"ref mut{}\", &hi_src[\"ref\".len()..]);\n-        Some((pattern_span, replacement))\n+        Some(replacement)\n     } else {\n         None\n     }"}, {"sha": "fda6c24dc8710a8e5d97bf5bf119d843e95cb793", "filename": "src/test/ui/E0508-fail.ast.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2FE0508-fail.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2FE0508-fail.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.ast.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,12 @@\n+error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n+  --> $DIR/E0508-fail.rs:18:18\n+   |\n+LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+   |                  ^^^^^^^^\n+   |                  |\n+   |                  cannot move out of here\n+   |                  help: consider borrowing here: `&array[0]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "fda6c24dc8710a8e5d97bf5bf119d843e95cb793", "filename": "src/test/ui/E0508-fail.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2FE0508-fail.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2FE0508-fail.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.mir.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,7 +5,7 @@ LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here\n-   |                  help: consider using a reference instead: `&array[0]`\n+   |                  help: consider borrowing here: `&array[0]`\n \n error: aborting due to previous error\n "}, {"sha": "025ff874bced46e37967d70094e3af97fe79bd29", "filename": "src/test/ui/E0508.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2FE0508.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2FE0508.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,12 @@\n+error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n+  --> $DIR/E0508.rs:15:18\n+   |\n+LL |     let _value = array[0];  //~ ERROR [E0508]\n+   |                  ^^^^^^^^\n+   |                  |\n+   |                  cannot move out of here\n+   |                  help: consider borrowing here: `&array[0]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "b9de60f43f703f72c82096ffa92e995bea3c211d", "filename": "src/test/ui/access-mode-in-closures.nll.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -2,10 +2,16 @@ error[E0507]: cannot move out of borrowed content\n   --> $DIR/access-mode-in-closures.rs:19:15\n    |\n LL |         match *s { sty(v) => v } //~ ERROR cannot move out\n-   |               ^^       - move occurs because v has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n+   |               ^^       - data moved here\n    |               |\n    |               cannot move out of borrowed content\n-   |               help: consider removing this dereference operator: `s`\n+   |               help: consider removing the `*`: `s`\n+   |\n+note: move occurs because `v` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/access-mode-in-closures.rs:19:24\n+   |\n+LL |         match *s { sty(v) => v } //~ ERROR cannot move out\n+   |                        ^\n \n error: aborting due to previous error\n "}, {"sha": "25eb69ad9377dfe21b260a35ad50463847956d75", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -2,28 +2,46 @@ error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:15\n    |\n LL |     for &a in x.iter() {    //~ ERROR cannot move out\n-   |          -    ^^^^^^^^ cannot move out of borrowed content\n-   |          |\n-   |          data moved here\n-   |          help: to prevent move, use ref or ref mut: `ref a`\n+   |         --    ^^^^^^^^ cannot move out of borrowed content\n+   |         ||\n+   |         |data moved here\n+   |         help: consider removing the `&`: `a`\n+   |\n+note: move occurs because `a` has type `&mut i32`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:10\n+   |\n+LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+   |          ^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:28:15\n    |\n LL |     for &a in &f.a {  //~ ERROR cannot move out\n-   |          -    ^^^^ cannot move out of borrowed content\n-   |          |\n-   |          data moved here\n-   |          help: to prevent move, use ref or ref mut: `ref a`\n+   |         --    ^^^^ cannot move out of borrowed content\n+   |         ||\n+   |         |data moved here\n+   |         help: consider removing the `&`: `a`\n+   |\n+note: move occurs because `a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:28:10\n+   |\n+LL |     for &a in &f.a {  //~ ERROR cannot move out\n+   |          ^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:32:15\n    |\n LL |     for &a in x.iter() {    //~ ERROR cannot move out\n-   |          -    ^^^^^^^^ cannot move out of borrowed content\n-   |          |\n-   |          data moved here\n-   |          help: to prevent move, use ref or ref mut: `ref a`\n+   |         --    ^^^^^^^^ cannot move out of borrowed content\n+   |         ||\n+   |         |data moved here\n+   |         help: consider removing the `&`: `a`\n+   |\n+note: move occurs because `a` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:32:10\n+   |\n+LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+   |          ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cdbfab8bd054a1903c2d53ce953bc577d7f9faeb", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,7 +5,7 @@ LL |         let _b = *y; //~ ERROR cannot move out\n    |                  ^^\n    |                  |\n    |                  cannot move out of borrowed content\n-   |                  help: consider removing this dereference operator: `y`\n+   |                  help: consider removing the `*`: `y`\n \n error: aborting due to previous error\n "}, {"sha": "2df520a936c9d4a9975563d5eb6221917fda2853", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.nll.stderr", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,14 +5,24 @@ LL |     match *f {             //~ ERROR cannot move out of\n    |           ^^\n    |           |\n    |           cannot move out of borrowed content\n-   |           help: consider removing this dereference operator: `f`\n+   |           help: consider removing the `*`: `f`\n LL |                            //~| cannot move out\n LL |         Foo::Foo1(num1,\n-   |                   ---- move occurs because num1 has type `std::boxed::Box<u32>`, which does not implement the `Copy` trait\n+   |                   ---- data moved here\n LL |                   num2) => (),\n-   |                   ---- move occurs because num2 has type `std::boxed::Box<u32>`, which does not implement the `Copy` trait\n+   |                   ---- ...and here\n LL |         Foo::Foo2(num) => (),\n-   |                   --- move occurs because num has type `std::boxed::Box<u32>`, which does not implement the `Copy` trait\n+   |                   --- ...and here\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/borrowck-move-error-with-note.rs:23:19\n+   |\n+LL |         Foo::Foo1(num1,\n+   |                   ^^^^\n+LL |                   num2) => (),\n+   |                   ^^^^\n+LL |         Foo::Foo2(num) => (),\n+   |                   ^^^\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-error-with-note.rs:39:11\n@@ -23,12 +33,15 @@ LL |     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n LL |             f: _s,\n    |                -- data moved here\n LL |             g: _t\n-   |                -- ... and here\n-help: to prevent move, use ref or ref mut\n+   |                -- ...and here\n    |\n-LL |             f: ref _s,\n-LL |             g: ref _t\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/borrowck-move-error-with-note.rs:42:16\n    |\n+LL |             f: _s,\n+   |                ^^\n+LL |             g: _t\n+   |                ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:57:11\n@@ -37,10 +50,16 @@ LL |     match a.a {           //~ ERROR cannot move out of\n    |           ^^^\n    |           |\n    |           cannot move out of borrowed content\n-   |           help: consider using a reference instead: `&a.a`\n+   |           help: consider borrowing here: `&a.a`\n LL |                           //~| cannot move out\n LL |         n => {\n-   |         - move occurs because n has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |         - data moved here\n+   |\n+note: move occurs because `n` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-error-with-note.rs:59:9\n+   |\n+LL |         n => {\n+   |         ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f823a6f08d789485e47546b7e9fa34f4ec5f1f34", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,7 +5,7 @@ LL |     let y = *x; //~ ERROR cannot move out of dereference of raw pointer\n    |             ^^\n    |             |\n    |             cannot move out of borrowed content\n-   |             help: consider using a reference instead: `&*x`\n+   |             help: consider removing the `*`: `x`\n \n error: aborting due to previous error\n "}, {"sha": "49c2ec0dcf4e7c996e77b3f918f482664288f74f", "filename": "src/test/ui/borrowck/borrowck-move-in-irrefut-pat.ast.nll.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,8 +5,14 @@ LL | fn arg_item(&_x: &String) {}\n    |             ^--\n    |             ||\n    |             |data moved here\n-   |             |help: to prevent move, use ref or ref mut: `ref _x`\n    |             cannot move out of borrowed content\n+   |             help: consider removing the `&`: `_x`\n+   |\n+note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:16:14\n+   |\n+LL | fn arg_item(&_x: &String) {}\n+   |              ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-in-irrefut-pat.rs:21:11\n@@ -15,17 +21,29 @@ LL |     with(|&_x| ())\n    |           ^--\n    |           ||\n    |           |data moved here\n-   |           |help: to prevent move, use ref or ref mut: `ref _x`\n    |           cannot move out of borrowed content\n+   |           help: consider removing the `&`: `_x`\n+   |\n+note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:21:12\n+   |\n+LL |     with(|&_x| ())\n+   |            ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-in-irrefut-pat.rs:27:15\n    |\n LL |     let &_x = &\"hi\".to_string();\n-   |          --   ^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-   |          |\n-   |          data moved here\n-   |          help: to prevent move, use ref or ref mut: `ref _x`\n+   |         ---   ^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |         ||\n+   |         |data moved here\n+   |         help: consider removing the `&`: `_x`\n+   |\n+note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:27:10\n+   |\n+LL |     let &_x = &\"hi\".to_string();\n+   |          ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "49c2ec0dcf4e7c996e77b3f918f482664288f74f", "filename": "src/test/ui/borrowck/borrowck-move-in-irrefut-pat.mir.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.mir.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,8 +5,14 @@ LL | fn arg_item(&_x: &String) {}\n    |             ^--\n    |             ||\n    |             |data moved here\n-   |             |help: to prevent move, use ref or ref mut: `ref _x`\n    |             cannot move out of borrowed content\n+   |             help: consider removing the `&`: `_x`\n+   |\n+note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:16:14\n+   |\n+LL | fn arg_item(&_x: &String) {}\n+   |              ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-in-irrefut-pat.rs:21:11\n@@ -15,17 +21,29 @@ LL |     with(|&_x| ())\n    |           ^--\n    |           ||\n    |           |data moved here\n-   |           |help: to prevent move, use ref or ref mut: `ref _x`\n    |           cannot move out of borrowed content\n+   |           help: consider removing the `&`: `_x`\n+   |\n+note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:21:12\n+   |\n+LL |     with(|&_x| ())\n+   |            ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-in-irrefut-pat.rs:27:15\n    |\n LL |     let &_x = &\"hi\".to_string();\n-   |          --   ^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-   |          |\n-   |          data moved here\n-   |          help: to prevent move, use ref or ref mut: `ref _x`\n+   |         ---   ^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |         ||\n+   |         |data moved here\n+   |         help: consider removing the `&`: `_x`\n+   |\n+note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:27:10\n+   |\n+LL |     let &_x = &\"hi\".to_string();\n+   |          ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b9c47e6e8cfe92f410a2c2c328e164ee7049c1e9", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-deref.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,12 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-move-out-of-overloaded-deref.rs:14:14\n+   |\n+LL |     let _x = *Rc::new(\"hi\".to_string());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              cannot move out of borrowed content\n+   |              help: consider removing the `*`: `Rc::new(\"hi\".to_string())`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "34f9f035188b8d4276c21c2f5afc674365cb5f29", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.ast.nll.stderr", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.ast.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,10 +5,13 @@ LL |     match (S {f:\"foo\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n LL |         //[mir]~^ ERROR [E0509]\n LL |         S {f:_s} => {}\n-   |              --\n-   |              |\n-   |              data moved here\n-   |              help: to prevent move, use ref or ref mut: `ref _s`\n+   |              -- data moved here\n+   |\n+note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:22:14\n+   |\n+LL |         S {f:_s} => {}\n+   |              ^^\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:28:20\n@@ -17,7 +20,12 @@ LL |     let S {f:_s} = S {f:\"foo\".to_string()};\n    |              --    ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n    |              |\n    |              data moved here\n-   |              help: to prevent move, use ref or ref mut: `ref _s`\n+   |\n+note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:28:14\n+   |\n+LL |     let S {f:_s} = S {f:\"foo\".to_string()};\n+   |              ^^\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:33:19\n@@ -26,8 +34,13 @@ LL | fn move_in_fn_arg(S {f:_s}: S) {\n    |                   ^^^^^--^\n    |                   |    |\n    |                   |    data moved here\n-   |                   |    help: to prevent move, use ref or ref mut: `ref _s`\n    |                   cannot move out of here\n+   |\n+note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:33:24\n+   |\n+LL | fn move_in_fn_arg(S {f:_s}: S) {\n+   |                        ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "34f9f035188b8d4276c21c2f5afc674365cb5f29", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.mir.stderr", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.mir.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,10 +5,13 @@ LL |     match (S {f:\"foo\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n LL |         //[mir]~^ ERROR [E0509]\n LL |         S {f:_s} => {}\n-   |              --\n-   |              |\n-   |              data moved here\n-   |              help: to prevent move, use ref or ref mut: `ref _s`\n+   |              -- data moved here\n+   |\n+note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:22:14\n+   |\n+LL |         S {f:_s} => {}\n+   |              ^^\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:28:20\n@@ -17,7 +20,12 @@ LL |     let S {f:_s} = S {f:\"foo\".to_string()};\n    |              --    ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n    |              |\n    |              data moved here\n-   |              help: to prevent move, use ref or ref mut: `ref _s`\n+   |\n+note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:28:14\n+   |\n+LL |     let S {f:_s} = S {f:\"foo\".to_string()};\n+   |              ^^\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:33:19\n@@ -26,8 +34,13 @@ LL | fn move_in_fn_arg(S {f:_s}: S) {\n    |                   ^^^^^--^\n    |                   |    |\n    |                   |    data moved here\n-   |                   |    help: to prevent move, use ref or ref mut: `ref _s`\n    |                   cannot move out of here\n+   |\n+note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:33:24\n+   |\n+LL | fn move_in_fn_arg(S {f:_s}: S) {\n+   |                        ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "278c33c71e24549f00090137180e5a32f9df8d7d", "filename": "src/test/ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor.nll.stderr", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -4,10 +4,13 @@ error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n LL |     match S(\"foo\".to_string()) {\n    |           ^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n LL |         S(_s) => {}\n-   |           --\n-   |           |\n-   |           data moved here\n-   |           help: to prevent move, use ref or ref mut: `ref _s`\n+   |           -- data moved here\n+   |\n+note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:18:11\n+   |\n+LL |         S(_s) => {}\n+   |           ^^\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:24:17\n@@ -16,7 +19,12 @@ LL |     let S(_s) = S(\"foo\".to_string());\n    |           --    ^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n    |           |\n    |           data moved here\n-   |           help: to prevent move, use ref or ref mut: `ref _s`\n+   |\n+note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:24:11\n+   |\n+LL |     let S(_s) = S(\"foo\".to_string());\n+   |           ^^\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:28:19\n@@ -25,8 +33,13 @@ LL | fn move_in_fn_arg(S(_s): S) {\n    |                   ^^--^\n    |                   | |\n    |                   | data moved here\n-   |                   | help: to prevent move, use ref or ref mut: `ref _s`\n    |                   cannot move out of here\n+   |\n+note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:28:21\n+   |\n+LL | fn move_in_fn_arg(S(_s): S) {\n+   |                     ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f3430ba4e06c9038310a8f087594447e8b89dbce", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.nll.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -7,14 +7,23 @@ LL |                 &[Foo { string: a },\n    |                                 - data moved here\n ...\n LL |                   Foo { string: b }] => {\n-   |                                 - ... and here\n-help: to prevent move, use ref or ref mut\n+   |                                 - ...and here\n    |\n-LL |                 &[Foo { string: ref a },\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/borrowck-move-out-of-vec-tail.rs:30:33\n+   |\n+LL |                 &[Foo { string: a },\n+   |                                 ^\n+...\n+LL |                   Foo { string: b }] => {\n+   |                                 ^\n+help: consider removing the `&`\n+   |\n+LL |                 [Foo { string: a },\n LL |                 //~^ ERROR cannot move out of type `[Foo]`\n LL |                 //~| cannot move out\n LL |                 //~| to prevent move\n-LL |                   Foo { string: ref b }] => {\n+LL |                   Foo { string: b }] => {\n    |\n \n error: aborting due to previous error"}, {"sha": "92e10c258c269efbd9cca6855d1dcd0e351bf573", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-from-vec.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,7 +5,7 @@ LL |     let bad = v[0];\n    |               ^^^^\n    |               |\n    |               cannot move out of borrowed content\n-   |               help: consider using a reference instead: `&v[0]`\n+   |               help: consider borrowing here: `&v[0]`\n \n error: aborting due to previous error\n "}, {"sha": "d5b17119d85f52abeb645cf07b1f5b8c24f2ec8e", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.nll.stderr", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -28,10 +28,21 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n LL |     match vec {\n    |           ^^^ cannot move out of here\n LL |         &mut [_a, //~ ERROR cannot move out\n-   |               --\n-   |               |\n-   |               data moved here\n-   |               help: to prevent move, use ref or ref mut: `ref _a`\n+   |               -- data moved here\n+   |\n+note: move occurs because `_a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:44:15\n+   |\n+LL |         &mut [_a, //~ ERROR cannot move out\n+   |               ^^\n+help: consider removing the `&mut`\n+   |\n+LL |         [_a, //~ ERROR cannot move out\n+LL |             //~| cannot move out\n+LL |             //~| to prevent move\n+LL |             ..\n+LL |         ] => {\n+   |\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:57:13\n@@ -40,7 +51,7 @@ LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n-   |             help: consider using a reference instead: `&vec[0]`\n+   |             help: consider borrowing here: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:64:11\n@@ -49,10 +60,19 @@ LL |     match vec {\n    |           ^^^ cannot move out of here\n ...\n LL |          _b] => {}\n-   |          --\n-   |          |\n-   |          data moved here\n-   |          help: to prevent move, use ref or ref mut: `ref _b`\n+   |          -- data moved here\n+   |\n+note: move occurs because `_b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:67:10\n+   |\n+LL |          _b] => {}\n+   |          ^^\n+help: consider removing the `&mut`\n+   |\n+LL |         [ //~ ERROR cannot move out\n+LL |         //~^ cannot move out\n+LL |          _b] => {}\n+   |\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:70:13\n@@ -61,22 +81,26 @@ LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n-   |             help: consider using a reference instead: `&vec[0]`\n+   |             help: consider borrowing here: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:77:11\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n-   |               --  --  -- ... and here\n-   |               |   |\n-   |               |   ... and here\n-   |               data moved here\n-help: to prevent move, use ref or ref mut\n-   |\n-LL |         &mut [ref _a, ref _b, ref _c] => {}  //~ ERROR cannot move out\n-   |               ^^^^^^  ^^^^^^  ^^^^^^\n+   |         -----------------\n+   |         |     |   |   |\n+   |         |     |   |   ...and here\n+   |         |     |   ...and here\n+   |         |     data moved here\n+   |         help: consider removing the `&mut`: `[_a, _b, _c]`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:78:15\n+   |\n+LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+   |               ^^  ^^  ^^\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:82:13\n@@ -85,7 +109,7 @@ LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n-   |             help: consider using a reference instead: `&vec[0]`\n+   |             help: consider borrowing here: `&vec[0]`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "d4340938eebc14880e7b4409021344c26f733c86", "filename": "src/test/ui/borrowck/issue-51415.nll.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,8 +5,13 @@ LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n    |                                          ^^^^^-^\n    |                                          |    |\n    |                                          |    data moved here\n-   |                                          |    help: to prevent move, use ref or ref mut: `ref s`\n    |                                          cannot move out of borrowed content\n+   |\n+note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/issue-51415.rs:16:47\n+   |\n+LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n+   |                                               ^\n \n error: aborting due to previous error\n "}, {"sha": "491b5b5bd74abef53a40f7b6d0e963f9c0683bd5", "filename": "src/test/ui/by-move-pattern-binding.nll.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fby-move-pattern-binding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fby-move-pattern-binding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fby-move-pattern-binding.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,10 +5,16 @@ LL |     match &s.x {\n    |           ^^^^ cannot move out of borrowed content\n LL |         &E::Foo => {}\n LL |         &E::Bar(identifier) => f(identifier.clone())  //~ ERROR cannot move\n-   |                 ----------\n-   |                 |\n-   |                 data moved here\n-   |                 help: to prevent move, use ref or ref mut: `ref identifier`\n+   |         -------------------\n+   |         |       |\n+   |         |       data moved here\n+   |         help: consider removing the `&`: `E::Bar(identifier)`\n+   |\n+note: move occurs because `identifier` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/by-move-pattern-binding.rs:26:17\n+   |\n+LL |         &E::Bar(identifier) => f(identifier.clone())  //~ ERROR cannot move\n+   |                 ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5522e22fb1fa28089a33a6c8851a39b7b52cf70a", "filename": "src/test/ui/check-static-values-constraints.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -56,7 +56,7 @@ LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^\n    |                                             |\n    |                                             cannot move out of static item\n-   |                                             help: consider using a reference instead: `&x`\n+   |                                             help: consider borrowing here: `&x`\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:120:38"}, {"sha": "e334472f9d6e1b26cba8b06eb20fe2ccdd999cfe", "filename": "src/test/ui/codemap_tests/overlapping_spans.nll.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -4,10 +4,13 @@ error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n LL |     match (S {f:\"foo\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n LL |         S {f:_s} => {} //~ ERROR cannot move out\n-   |              --\n-   |              |\n-   |              data moved here\n-   |              help: to prevent move, use ref or ref mut: `ref _s`\n+   |              -- data moved here\n+   |\n+note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/overlapping_spans.rs:21:14\n+   |\n+LL |         S {f:_s} => {} //~ ERROR cannot move out\n+   |              ^^\n \n error: aborting due to previous error\n "}, {"sha": "8e0599370287fb886ef239e8b593c5088c94d7dd", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let.nll.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,7 +5,12 @@ LL |     let X { x: y } = x; //~ ERROR cannot move out of type\n    |                -     ^ cannot move out of here\n    |                |\n    |                data moved here\n-   |                help: to prevent move, use ref or ref mut: `ref y`\n+   |\n+note: move occurs because `y` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/disallowed-deconstructing-destructing-struct-let.rs:22:16\n+   |\n+LL |     let X { x: y } = x; //~ ERROR cannot move out of type\n+   |                ^\n \n error: aborting due to previous error\n "}, {"sha": "dd1a3ef2a2b9835c1403c0796b7475cb4b7de57d", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-match.nll.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -4,10 +4,13 @@ error[E0509]: cannot move out of type `X`, which implements the `Drop` trait\n LL |     match x {\n    |           ^ cannot move out of here\n LL |         X { x: y } => println!(\"contents: {}\", y)\n-   |                -\n-   |                |\n-   |                data moved here\n-   |                help: to prevent move, use ref or ref mut: `ref y`\n+   |                - data moved here\n+   |\n+note: move occurs because `y` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/disallowed-deconstructing-destructing-struct-match.rs:25:16\n+   |\n+LL |         X { x: y } => println!(\"contents: {}\", y)\n+   |                ^\n \n error: aborting due to previous error\n "}, {"sha": "723b083b90442839af40e1dc9526a0e60608ba5c", "filename": "src/test/ui/error-codes/E0509.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0509.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,12 @@\n+error[E0509]: cannot move out of type `DropStruct`, which implements the `Drop` trait\n+  --> $DIR/E0509.rs:26:23\n+   |\n+LL |     let fancy_field = drop_struct.fancy; //~ ERROR E0509\n+   |                       ^^^^^^^^^^^^^^^^^\n+   |                       |\n+   |                       cannot move out of here\n+   |                       help: consider borrowing here: `&drop_struct.fancy`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0509`."}, {"sha": "72d21d47d86fa765985da974e0b8b2664837d7fa", "filename": "src/test/ui/issues/issue-12567.nll.stderr", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fissues%2Fissue-12567.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fissues%2Fissue-12567.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12567.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -8,15 +8,16 @@ LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n    |                 -- data moved here\n ...\n LL |         (&[hd1, ..], &[hd2, ..])\n-   |                        --- ... and here\n-help: to prevent move, use ref or ref mut\n+   |                        --- ...and here\n    |\n-LL |         (&[], &[ref hd, ..]) | (&[hd, ..], &[])\n-LL |             => println!(\"one empty\"),\n-LL |         //~^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n-LL |         //~^^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n-LL |         (&[hd1, ..], &[ref hd2, ..])\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/issue-12567.rs:16:17\n    |\n+LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n+   |                 ^^\n+...\n+LL |         (&[hd1, ..], &[hd2, ..])\n+   |                        ^^^\n \n error[E0508]: cannot move out of type `[T]`, a non-copy slice\n   --> $DIR/issue-12567.rs:14:11\n@@ -28,15 +29,16 @@ LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n    |                 -- data moved here\n ...\n LL |         (&[hd1, ..], &[hd2, ..])\n-   |            --- ... and here\n-help: to prevent move, use ref or ref mut\n+   |            --- ...and here\n    |\n-LL |         (&[], &[ref hd, ..]) | (&[hd, ..], &[])\n-LL |             => println!(\"one empty\"),\n-LL |         //~^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n-LL |         //~^^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n-LL |         (&[ref hd1, ..], &[hd2, ..])\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/issue-12567.rs:16:17\n    |\n+LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n+   |                 ^^\n+...\n+LL |         (&[hd1, ..], &[hd2, ..])\n+   |            ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f8da3c3d5989eceb45282da4c0f45502ba96354c", "filename": "src/test/ui/issues/issue-17718-static-move.nll.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,12 @@\n+error[E0507]: cannot move out of static item\n+  --> $DIR/issue-17718-static-move.rs:16:14\n+   |\n+LL |     let _a = FOO; //~ ERROR: cannot move out of static item\n+   |              ^^^\n+   |              |\n+   |              cannot move out of static item\n+   |              help: consider borrowing here: `&FOO`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "3a6784eed67dd35d3adaaadb90b1bcd59d38ebc7", "filename": "src/test/ui/issues/issue-20801.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fissues%2Fissue-20801.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fissues%2Fissue-20801.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20801.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,7 +5,7 @@ LL |     let a = unsafe { *mut_ref() };\n    |                      ^^^^^^^^^^\n    |                      |\n    |                      cannot move out of borrowed content\n-   |                      help: consider using a reference instead: `&*mut_ref()`\n+   |                      help: consider removing the `*`: `mut_ref()`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-20801.rs:39:22\n@@ -14,7 +14,7 @@ LL |     let b = unsafe { *imm_ref() };\n    |                      ^^^^^^^^^^\n    |                      |\n    |                      cannot move out of borrowed content\n-   |                      help: consider using a reference instead: `&*imm_ref()`\n+   |                      help: consider removing the `*`: `imm_ref()`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-20801.rs:42:22\n@@ -23,7 +23,7 @@ LL |     let c = unsafe { *mut_ptr() };\n    |                      ^^^^^^^^^^\n    |                      |\n    |                      cannot move out of borrowed content\n-   |                      help: consider using a reference instead: `&*mut_ptr()`\n+   |                      help: consider removing the `*`: `mut_ptr()`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-20801.rs:45:22\n@@ -32,7 +32,7 @@ LL |     let d = unsafe { *const_ptr() };\n    |                      ^^^^^^^^^^^^\n    |                      |\n    |                      cannot move out of borrowed content\n-   |                      help: consider using a reference instead: `&*const_ptr()`\n+   |                      help: consider removing the `*`: `const_ptr()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9020d3778c3730820347651be4554a9b7d9c1f0b", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,7 +5,7 @@ LL |     let e = f.v[0]; //~ ERROR cannot move out of indexed content\n    |             ^^^^^^\n    |             |\n    |             cannot move out of borrowed content\n-   |             help: consider using a reference instead: `&f.v[0]`\n+   |             help: consider borrowing here: `&f.v[0]`\n \n error: aborting due to previous error\n "}, {"sha": "a80e9a5fe091f70343247033078fb2881a09d61d", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-2.nll.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,9 +5,15 @@ LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n    |          -  -    ^^^^\n    |          |  |    |\n    |          |  |    cannot move out of borrowed content\n-   |          |  |    help: consider using a reference instead: `&x[0]`\n-   |          |  move occurs because b has type `std::string::String`, which does not implement the `Copy` trait\n-   |          move occurs because a has type `std::string::String`, which does not implement the `Copy` trait\n+   |          |  |    help: consider borrowing here: `&x[0]`\n+   |          |  ...and here\n+   |          data moved here\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/issue-40402-2.rs:15:10\n+   |\n+LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n+   |          ^  ^\n \n error: aborting due to previous error\n "}, {"sha": "aa62b457ecdf378cef6c96e4a6256aa36293a886", "filename": "src/test/ui/moves/move-out-of-slice-1.nll.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -4,10 +4,13 @@ error[E0508]: cannot move out of type `[A]`, a non-copy slice\n LL |     match a {\n    |           ^ cannot move out of here\n LL |         box [a] => {}, //~ ERROR cannot move out of type `[A]`, a non-copy slice\n-   |              -\n-   |              |\n-   |              data moved here\n-   |              help: to prevent move, use ref or ref mut: `ref a`\n+   |              - data moved here\n+   |\n+note: move occurs because `a` has type `A`, which does not implement the `Copy` trait\n+  --> $DIR/move-out-of-slice-1.rs:18:14\n+   |\n+LL |         box [a] => {}, //~ ERROR cannot move out of type `[A]`, a non-copy slice\n+   |              ^\n \n error: aborting due to previous error\n "}, {"sha": "1f22ab148185296bbf3ca71abe0a75ca06630a3d", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.nll.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,10 +5,16 @@ LL |             match hellothere.x { //~ ERROR cannot move out\n    |                   ^^^^^^^^^^^^\n    |                   |\n    |                   cannot move out of borrowed content\n-   |                   help: consider using a reference instead: `&hellothere.x`\n+   |                   help: consider borrowing here: `&hellothere.x`\n ...\n LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n-   |                            - move occurs because x has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |                            - data moved here\n+   |\n+note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/moves-based-on-type-block-bad.rs:37:28\n+   |\n+LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n+   |                            ^\n \n error: aborting due to previous error\n "}, {"sha": "6a4c8f2e8d81570161b7d251523acb9c6483235f", "filename": "src/test/ui/nll/cannot-move-block-spans.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,7 +5,7 @@ LL |     let x = { *r }; //~ ERROR\n    |               ^^\n    |               |\n    |               cannot move out of borrowed content\n-   |               help: consider removing this dereference operator: `r`\n+   |               help: consider removing the `*`: `r`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:16:22\n@@ -14,7 +14,7 @@ LL |     let y = unsafe { *r }; //~ ERROR\n    |                      ^^\n    |                      |\n    |                      cannot move out of borrowed content\n-   |                      help: consider removing this dereference operator: `r`\n+   |                      help: consider removing the `*`: `r`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:17:26\n@@ -23,7 +23,7 @@ LL |     let z = loop { break *r; }; //~ ERROR\n    |                          ^^\n    |                          |\n    |                          cannot move out of borrowed content\n-   |                          help: consider removing this dereference operator: `r`\n+   |                          help: consider removing the `*`: `r`\n \n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:21:15\n@@ -32,7 +32,7 @@ LL |     let x = { arr[0] }; //~ ERROR\n    |               ^^^^^^\n    |               |\n    |               cannot move out of here\n-   |               help: consider using a reference instead: `&arr[0]`\n+   |               help: consider borrowing here: `&arr[0]`\n \n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:22:22\n@@ -41,7 +41,7 @@ LL |     let y = unsafe { arr[0] }; //~ ERROR\n    |                      ^^^^^^\n    |                      |\n    |                      cannot move out of here\n-   |                      help: consider using a reference instead: `&arr[0]`\n+   |                      help: consider borrowing here: `&arr[0]`\n \n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:23:26\n@@ -50,7 +50,7 @@ LL |     let z = loop { break arr[0]; }; //~ ERROR\n    |                          ^^^^^^\n    |                          |\n    |                          cannot move out of here\n-   |                          help: consider using a reference instead: `&arr[0]`\n+   |                          help: consider borrowing here: `&arr[0]`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:27:38\n@@ -59,7 +59,7 @@ LL |     let x = { let mut u = 0; u += 1; *r }; //~ ERROR\n    |                                      ^^\n    |                                      |\n    |                                      cannot move out of borrowed content\n-   |                                      help: consider removing this dereference operator: `r`\n+   |                                      help: consider removing the `*`: `r`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:28:45\n@@ -68,7 +68,7 @@ LL |     let y = unsafe { let mut u = 0; u += 1; *r }; //~ ERROR\n    |                                             ^^\n    |                                             |\n    |                                             cannot move out of borrowed content\n-   |                                             help: consider removing this dereference operator: `r`\n+   |                                             help: consider removing the `*`: `r`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:29:49\n@@ -77,7 +77,7 @@ LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; }; //~ ERROR\n    |                                                 ^^\n    |                                                 |\n    |                                                 cannot move out of borrowed content\n-   |                                                 help: consider removing this dereference operator: `r`\n+   |                                                 help: consider removing the `*`: `r`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "592768363096cae2d0d60a37ee35a0eefb81d24b", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 65, "deletions": 29, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -5,7 +5,7 @@ LL |     let b = *a;\n    |             ^^\n    |             |\n    |             cannot move out of borrowed content\n-   |             help: consider removing this dereference operator: `a`\n+   |             help: consider removing the `*`: `a`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:25:13\n@@ -14,7 +14,7 @@ LL |     let b = a[0];\n    |             ^^^^\n    |             |\n    |             cannot move out of here\n-   |             help: consider using a reference instead: `&a[0]`\n+   |             help: consider borrowing here: `&a[0]`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-errors.rs:32:13\n@@ -23,7 +23,7 @@ LL |     let s = **r;\n    |             ^^^\n    |             |\n    |             cannot move out of borrowed content\n-   |             help: consider using a reference instead: `&**r`\n+   |             help: consider removing the `*`: `*r`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-errors.rs:40:13\n@@ -32,7 +32,7 @@ LL |     let s = *r;\n    |             ^^\n    |             |\n    |             cannot move out of borrowed content\n-   |             help: consider using a reference instead: `&*r`\n+   |             help: consider removing the `*`: `r`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:45:13\n@@ -41,7 +41,7 @@ LL |     let a = [A(\"\".to_string())][0];\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             cannot move out of here\n-   |             help: consider using a reference instead: `&[A(\"\".to_string())][0]`\n+   |             help: consider borrowing here: `&[A(\"\".to_string())][0]`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-errors.rs:51:16\n@@ -50,8 +50,14 @@ LL |     let A(s) = *a;\n    |           -    ^^\n    |           |    |\n    |           |    cannot move out of borrowed content\n-   |           |    help: consider removing this dereference operator: `a`\n-   |           move occurs because s has type `std::string::String`, which does not implement the `Copy` trait\n+   |           |    help: consider removing the `*`: `a`\n+   |           data moved here\n+   |\n+note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/move-errors.rs:51:11\n+   |\n+LL |     let A(s) = *a;\n+   |           ^\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:57:19\n@@ -60,7 +66,12 @@ LL |     let C(D(s)) = c;\n    |             -     ^ cannot move out of here\n    |             |\n    |             data moved here\n-   |             help: to prevent move, use ref or ref mut: `ref s`\n+   |\n+note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/move-errors.rs:57:13\n+   |\n+LL |     let C(D(s)) = c;\n+   |             ^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-errors.rs:64:9\n@@ -75,12 +86,20 @@ LL |     match x[0] {\n    |           ^^^^\n    |           |\n    |           cannot move out of here\n-   |           help: consider using a reference instead: `&x[0]`\n+   |           help: consider borrowing here: `&x[0]`\n LL |     //~^ ERROR\n LL |         B::U(d) => (),\n-   |              - move occurs because d has type `D`, which does not implement the `Copy` trait\n+   |              - data moved here\n LL |         B::V(s) => (),\n-   |              - move occurs because s has type `std::string::String`, which does not implement the `Copy` trait\n+   |              - ...and here\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/move-errors.rs:89:14\n+   |\n+LL |         B::U(d) => (),\n+   |              ^\n+LL |         B::V(s) => (),\n+   |              ^\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:96:11\n@@ -89,10 +108,13 @@ LL |     match x {\n    |           ^ cannot move out of here\n ...\n LL |         B::U(D(s)) => (),\n-   |                -\n-   |                |\n-   |                data moved here\n-   |                help: to prevent move, use ref or ref mut: `ref s`\n+   |                - data moved here\n+   |\n+note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/move-errors.rs:99:16\n+   |\n+LL |         B::U(D(s)) => (),\n+   |                ^\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:105:11\n@@ -101,10 +123,13 @@ LL |     match x {\n    |           ^ cannot move out of here\n ...\n LL |         (D(s), &t) => (),\n-   |            -\n-   |            |\n-   |            data moved here\n-   |            help: to prevent move, use ref or ref mut: `ref s`\n+   |            - data moved here\n+   |\n+note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/move-errors.rs:108:12\n+   |\n+LL |         (D(s), &t) => (),\n+   |            ^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-errors.rs:105:11\n@@ -113,10 +138,13 @@ LL |     match x {\n    |           ^ cannot move out of borrowed content\n ...\n LL |         (D(s), &t) => (),\n-   |                 -\n-   |                 |\n-   |                 data moved here\n-   |                 help: to prevent move, use ref or ref mut: `ref t`\n+   |                 - data moved here\n+   |\n+note: move occurs because `t` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/move-errors.rs:108:17\n+   |\n+LL |         (D(s), &t) => (),\n+   |                 ^\n \n error[E0509]: cannot move out of type `F`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:115:11\n@@ -125,13 +153,15 @@ LL |     match x {\n    |           ^ cannot move out of here\n LL |     //~^ ERROR\n LL |         F(s, mut t) => (),\n-   |           -  ----- ... and here\n+   |           -  ----- ...and here\n    |           |\n    |           data moved here\n-help: to prevent move, use ref or ref mut\n    |\n-LL |         F(ref s, ref mut t) => (),\n-   |           ^^^^^  ^^^^^^^^^\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/move-errors.rs:117:11\n+   |\n+LL |         F(s, mut t) => (),\n+   |           ^  ^^^^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-errors.rs:123:11\n@@ -140,10 +170,16 @@ LL |     match *x {\n    |           ^^\n    |           |\n    |           cannot move out of borrowed content\n-   |           help: consider removing this dereference operator: `x`\n+   |           help: consider removing the `*`: `x`\n LL |     //~^ ERROR\n LL |         Ok(s) | Err(s) => (),\n-   |            - move occurs because s has type `std::string::String`, which does not implement the `Copy` trait\n+   |            - data moved here\n+   |\n+note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+  --> $DIR/move-errors.rs:125:12\n+   |\n+LL |         Ok(s) | Err(s) => (),\n+   |            ^\n \n error: aborting due to 14 previous errors\n "}, {"sha": "e6b612fed85885c1a24cae4ce2bfc59e0b3b87f3", "filename": "src/test/ui/std-uncopyable-atomics.nll.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.nll.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,39 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/std-uncopyable-atomics.rs:19:13\n+   |\n+LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+   |             ^^^\n+   |             |\n+   |             cannot move out of borrowed content\n+   |             help: consider removing the `*`: `&x`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/std-uncopyable-atomics.rs:21:13\n+   |\n+LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+   |             ^^^\n+   |             |\n+   |             cannot move out of borrowed content\n+   |             help: consider removing the `*`: `&x`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/std-uncopyable-atomics.rs:23:13\n+   |\n+LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+   |             ^^^\n+   |             |\n+   |             cannot move out of borrowed content\n+   |             help: consider removing the `*`: `&x`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/std-uncopyable-atomics.rs:25:13\n+   |\n+LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+   |             ^^^\n+   |             |\n+   |             cannot move out of borrowed content\n+   |             help: consider removing the `*`: `&x`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "dc0186e3f26bf4dcf03a8f8b2eb84b5720789a28", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,162 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+#[derive(Clone)]\n+enum Either {\n+    One(X),\n+    Two(X),\n+}\n+\n+#[derive(Clone)]\n+struct X(Y);\n+\n+#[derive(Clone)]\n+struct Y;\n+\n+\n+pub fn main() {\n+    let e = Either::One(X(Y));\n+    let mut em = Either::One(X(Y));\n+\n+    let r = &e;\n+    let rm = &mut Either::One(X(Y));\n+\n+    let x = X(Y);\n+    let mut xm = X(Y);\n+\n+    let s = &x;\n+    let sm = &mut X(Y);\n+\n+    let ve = vec![Either::One(X(Y))];\n+\n+    let vr = &ve;\n+    let vrm = &mut vec![Either::One(X(Y))];\n+\n+    let vx = vec![X(Y)];\n+\n+    let vs = &vx;\n+    let vsm = &mut vec![X(Y)];\n+\n+    // -------- test for duplicate suggestions --------\n+\n+    let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION (X(_t), X(_u))\n+    if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    match &(e.clone(), e.clone()) {\n+        //~^ ERROR cannot move\n+        &(Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        &(Either::Two(_t), Either::One(_u)) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION (Either::Two(_t), Either::One(_u))\n+        _ => (),\n+    }\n+    match &(e.clone(), e.clone()) {\n+        //~^ ERROR cannot move\n+        &(Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        | &(Either::Two(_t), Either::One(_u)) => (),\n+        // FIXME: would really like a suggestion here too\n+        _ => (),\n+    }\n+    match &(e.clone(), e.clone()) {\n+        //~^ ERROR cannot move\n+        &(Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        &(Either::Two(ref _t), Either::One(ref _u)) => (),\n+        _ => (),\n+    }\n+    match &(e.clone(), e.clone()) {\n+        //~^ ERROR cannot move\n+        &(Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        (Either::Two(_t), Either::One(_u)) => (),\n+        _ => (),\n+    }\n+    fn f5(&(X(_t), X(_u)): &(X, X)) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION (X(_t), X(_u))\n+\n+    let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION (X(_t), X(_u))\n+    if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+    match &mut (em.clone(), em.clone()) {\n+        //~^ ERROR cannot move\n+        &mut (Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        &mut (Either::Two(_t), Either::One(_u)) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::Two(_t), Either::One(_u))\n+        _ => (),\n+    }\n+    match &mut (em.clone(), em.clone()) {\n+        //~^ ERROR cannot move\n+        &mut (Either::One(_t), Either::Two(_u))\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        | &mut (Either::Two(_t), Either::One(_u)) => (),\n+        // FIXME: would really like a suggestion here too\n+        _ => (),\n+    }\n+    match &mut (em.clone(), em.clone()) {\n+        //~^ ERROR cannot move\n+        &mut (Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        &mut (Either::Two(ref _t), Either::One(ref _u)) => (),\n+        _ => (),\n+    }\n+    match &mut (em.clone(), em.clone()) {\n+        //~^ ERROR cannot move\n+        &mut (Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        &mut (Either::Two(ref mut _t), Either::One(ref mut _u)) => (),\n+        _ => (),\n+    }\n+    match &mut (em.clone(), em.clone()) {\n+        //~^ ERROR cannot move\n+        &mut (Either::One(_t), Either::Two(_u)) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION (Either::One(_t), Either::Two(_u))\n+        (Either::Two(_t), Either::One(_u)) => (),\n+        _ => (),\n+    }\n+    fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION (X(_t), X(_u))\n+}"}, {"sha": "bb3688411f718c46168acbb3c5efd9b5542c1f81", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.stderr", "status": "added", "additions": 328, "deletions": 0, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,328 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:51:27\n+   |\n+LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n+   |         ---------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |         |   |      |\n+   |         |   |      ...and here\n+   |         |   data moved here\n+   |         help: consider removing the `&`: `(X(_t), X(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:51:13\n+   |\n+LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n+   |             ^^     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:55:50\n+   |\n+LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+   |            -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |            |             |                |\n+   |            |             |                ...and here\n+   |            |             data moved here\n+   |            help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:55:26\n+   |\n+LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+   |                          ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:59:53\n+   |\n+LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+   |               -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |               |             |                |\n+   |               |             |                ...and here\n+   |               |             data moved here\n+   |               help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:59:29\n+   |\n+LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n+   |                             ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:63:11\n+   |\n+LL |     match &(e.clone(), e.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |                       --               -- ...and here\n+   |                       |\n+   |                       data moved here\n+...\n+LL |         &(Either::Two(_t), Either::One(_u)) => (),\n+   |                       -- ...and here   -- ...and here\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:65:23\n+   |\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |                       ^^               ^^\n+...\n+LL |         &(Either::Two(_t), Either::One(_u)) => (),\n+   |                       ^^               ^^\n+help: consider removing the `&`\n+   |\n+LL |         (Either::One(_t), Either::Two(_u)) => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider removing the `&`\n+   |\n+LL |         (Either::Two(_t), Either::One(_u)) => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:73:11\n+   |\n+LL |     match &(e.clone(), e.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &(Either::One(_t), Either::Two(_u))\n+   |         -----------------------------------\n+   |         |             |                |\n+   |         |             |                ...and here\n+   |         |             data moved here\n+   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:75:23\n+   |\n+LL |         &(Either::One(_t), Either::Two(_u))\n+   |                       ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:82:11\n+   |\n+LL |     match &(e.clone(), e.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |         -----------------------------------\n+   |         |             |                |\n+   |         |             |                ...and here\n+   |         |             data moved here\n+   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:84:23\n+   |\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |                       ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:90:11\n+   |\n+LL |     match &(e.clone(), e.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |         -----------------------------------\n+   |         |             |                |\n+   |         |             |                ...and here\n+   |         |             data moved here\n+   |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:92:23\n+   |\n+LL |         &(Either::One(_t), Either::Two(_u)) => (),\n+   |                       ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:103:31\n+   |\n+LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n+   |         -------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |         |       |      |\n+   |         |       |      ...and here\n+   |         |       data moved here\n+   |         help: consider removing the `&mut`: `(X(_t), X(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:103:17\n+   |\n+LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n+   |                 ^^     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:107:54\n+   |\n+LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+   |            ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |            |                 |                |\n+   |            |                 |                ...and here\n+   |            |                 data moved here\n+   |            help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:107:30\n+   |\n+LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+   |                              ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:111:57\n+   |\n+LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+   |               ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |               |                 |                |\n+   |               |                 |                ...and here\n+   |               |                 data moved here\n+   |               help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:111:33\n+   |\n+LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n+   |                                 ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:115:11\n+   |\n+LL |     match &mut (em.clone(), em.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |                           --               -- ...and here\n+   |                           |\n+   |                           data moved here\n+...\n+LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n+   |                           -- ...and here   -- ...and here\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:117:27\n+   |\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |                           ^^               ^^\n+...\n+LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n+   |                           ^^               ^^\n+help: consider removing the `&mut`\n+   |\n+LL |         (Either::One(_t), Either::Two(_u)) => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider removing the `&mut`\n+   |\n+LL |         (Either::Two(_t), Either::One(_u)) => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:125:11\n+   |\n+LL |     match &mut (em.clone(), em.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut (Either::One(_t), Either::Two(_u))\n+   |         ---------------------------------------\n+   |         |                 |                |\n+   |         |                 |                ...and here\n+   |         |                 data moved here\n+   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:127:27\n+   |\n+LL |         &mut (Either::One(_t), Either::Two(_u))\n+   |                           ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:134:11\n+   |\n+LL |     match &mut (em.clone(), em.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |         ---------------------------------------\n+   |         |                 |                |\n+   |         |                 |                ...and here\n+   |         |                 data moved here\n+   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:136:27\n+   |\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |                           ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:142:11\n+   |\n+LL |     match &mut (em.clone(), em.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |         ---------------------------------------\n+   |         |                 |                |\n+   |         |                 |                ...and here\n+   |         |                 data moved here\n+   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:144:27\n+   |\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |                           ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:150:11\n+   |\n+LL |     match &mut (em.clone(), em.clone()) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |         ---------------------------------------\n+   |         |                 |                |\n+   |         |                 |                ...and here\n+   |         |                 data moved here\n+   |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:152:27\n+   |\n+LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n+   |                           ^^               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:98:11\n+   |\n+LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n+   |           ^^^^--^^^^^--^^\n+   |           |   |      |\n+   |           |   |      ...and here\n+   |           |   data moved here\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `&`: `(X(_t), X(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:98:15\n+   |\n+LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n+   |               ^^     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/duplicate-suggestions.rs:158:11\n+   |\n+LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n+   |           ^^^^^^^^--^^^^^--^^\n+   |           |       |      |\n+   |           |       |      ...and here\n+   |           |       data moved here\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `&mut`: `(X(_t), X(_u))`\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/duplicate-suggestions.rs:158:19\n+   |\n+LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n+   |                   ^^     ^^\n+\n+error: aborting due to 17 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "8cc847e693fa71179bae68dfc2bea1cf750616e8", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,171 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+#[derive(Clone)]\n+enum Either {\n+    One(X),\n+    Two(X),\n+}\n+\n+#[derive(Clone)]\n+struct X(Y);\n+\n+#[derive(Clone)]\n+struct Y;\n+\n+fn consume_fn<F: Fn()>(_f: F) { }\n+\n+fn consume_fnmut<F: FnMut()>(_f: F) { }\n+\n+pub fn main() { }\n+\n+fn move_into_fn() {\n+    let e = Either::One(X(Y));\n+    let mut em = Either::One(X(Y));\n+\n+    let x = X(Y);\n+\n+    // -------- move into Fn --------\n+\n+    consume_fn(|| {\n+        let X(_t) = x;\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &x\n+        if let Either::One(_t) = e { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &e\n+        while let Either::One(_t) = e { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &e\n+        match e {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &e\n+            Either::One(_t)\n+            | Either::Two(_t) => (),\n+        }\n+        match e {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &e\n+            Either::One(_t) => (),\n+            Either::Two(ref _t) => (),\n+            // FIXME: should suggest removing `ref` too\n+        }\n+\n+        let X(mut _t) = x;\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &x\n+        if let Either::One(mut _t) = em { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &em\n+        while let Either::One(mut _t) = em { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &em\n+        match em {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &em\n+            Either::One(mut _t)\n+            | Either::Two(mut _t) => (),\n+        }\n+        match em {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &em\n+            Either::One(mut _t) => (),\n+            Either::Two(ref _t) => (),\n+            // FIXME: should suggest removing `ref` too\n+        }\n+    });\n+}\n+\n+fn move_into_fnmut() {\n+    let e = Either::One(X(Y));\n+    let mut em = Either::One(X(Y));\n+\n+    let x = X(Y);\n+\n+    // -------- move into FnMut --------\n+\n+    consume_fnmut(|| {\n+        let X(_t) = x;\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &x\n+        if let Either::One(_t) = e { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &e\n+        while let Either::One(_t) = e { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &e\n+        match e {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &e\n+            Either::One(_t)\n+            | Either::Two(_t) => (),\n+        }\n+        match e {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &e\n+            Either::One(_t) => (),\n+            Either::Two(ref _t) => (),\n+            // FIXME: should suggest removing `ref` too\n+        }\n+\n+        let X(mut _t) = x;\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &x\n+        if let Either::One(mut _t) = em { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &em\n+        while let Either::One(mut _t) = em { }\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &em\n+        match em {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &em\n+            Either::One(mut _t)\n+            | Either::Two(mut _t) => (),\n+        }\n+        match em {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &em\n+            Either::One(mut _t) => (),\n+            Either::Two(ref _t) => (),\n+            // FIXME: should suggest removing `ref` too\n+        }\n+        match em {\n+            //~^ ERROR cannot move\n+            //~| HELP consider borrowing here\n+            //~| SUGGESTION &em\n+            Either::One(mut _t) => (),\n+            Either::Two(ref mut _t) => (),\n+            // FIXME: should suggest removing `ref` too\n+        }\n+    });\n+}"}, {"sha": "228ec5afce635a254919779139a75d0f9dc6f5bf", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.stderr", "status": "added", "additions": 420, "deletions": 0, "changes": 420, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,420 @@\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/move-into-closure.rs:40:21\n+   |\n+LL |     let x = X(Y);\n+   |         - captured outer variable\n+...\n+LL |         let X(_t) = x;\n+   |               --    ^\n+   |               |     |\n+   |               |     cannot move out of captured variable in an `Fn` closure\n+   |               |     help: consider borrowing here: `&x`\n+   |               data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:40:15\n+   |\n+LL |         let X(_t) = x;\n+   |               ^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/move-into-closure.rs:44:34\n+   |\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |         if let Either::One(_t) = e { }\n+   |                            --    ^\n+   |                            |     |\n+   |                            |     cannot move out of captured variable in an `Fn` closure\n+   |                            |     help: consider borrowing here: `&e`\n+   |                            data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:44:28\n+   |\n+LL |         if let Either::One(_t) = e { }\n+   |                            ^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/move-into-closure.rs:48:37\n+   |\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |         while let Either::One(_t) = e { }\n+   |                               --    ^\n+   |                               |     |\n+   |                               |     cannot move out of captured variable in an `Fn` closure\n+   |                               |     help: consider borrowing here: `&e`\n+   |                               data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:48:31\n+   |\n+LL |         while let Either::One(_t) = e { }\n+   |                               ^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/move-into-closure.rs:52:15\n+   |\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |         match e {\n+   |               ^\n+   |               |\n+   |               cannot move out of captured variable in an `Fn` closure\n+   |               help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t)\n+   |                         -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:56:25\n+   |\n+LL |             Either::One(_t)\n+   |                         ^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/move-into-closure.rs:59:15\n+   |\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |         match e {\n+   |               ^\n+   |               |\n+   |               cannot move out of captured variable in an `Fn` closure\n+   |               help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t) => (),\n+   |                         -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:63:25\n+   |\n+LL |             Either::One(_t) => (),\n+   |                         ^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/move-into-closure.rs:68:25\n+   |\n+LL |     let x = X(Y);\n+   |         - captured outer variable\n+...\n+LL |         let X(mut _t) = x;\n+   |               ------    ^\n+   |               |         |\n+   |               |         cannot move out of captured variable in an `Fn` closure\n+   |               |         help: consider borrowing here: `&x`\n+   |               data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:68:15\n+   |\n+LL |         let X(mut _t) = x;\n+   |               ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/move-into-closure.rs:72:38\n+   |\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |         if let Either::One(mut _t) = em { }\n+   |                            ------    ^^\n+   |                            |         |\n+   |                            |         cannot move out of captured variable in an `Fn` closure\n+   |                            |         help: consider borrowing here: `&em`\n+   |                            data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:72:28\n+   |\n+LL |         if let Either::One(mut _t) = em { }\n+   |                            ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/move-into-closure.rs:76:41\n+   |\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |         while let Either::One(mut _t) = em { }\n+   |                               ------    ^^\n+   |                               |         |\n+   |                               |         cannot move out of captured variable in an `Fn` closure\n+   |                               |         help: consider borrowing here: `&em`\n+   |                               data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:76:31\n+   |\n+LL |         while let Either::One(mut _t) = em { }\n+   |                               ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/move-into-closure.rs:80:15\n+   |\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |         match em {\n+   |               ^^\n+   |               |\n+   |               cannot move out of captured variable in an `Fn` closure\n+   |               help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t)\n+   |                         ------ data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:84:25\n+   |\n+LL |             Either::One(mut _t)\n+   |                         ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/move-into-closure.rs:87:15\n+   |\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |         match em {\n+   |               ^^\n+   |               |\n+   |               cannot move out of captured variable in an `Fn` closure\n+   |               help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t) => (),\n+   |                         ------ data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:91:25\n+   |\n+LL |             Either::One(mut _t) => (),\n+   |                         ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/move-into-closure.rs:107:21\n+   |\n+LL |     let x = X(Y);\n+   |         - captured outer variable\n+...\n+LL |         let X(_t) = x;\n+   |               --    ^\n+   |               |     |\n+   |               |     cannot move out of captured variable in an `FnMut` closure\n+   |               |     help: consider borrowing here: `&x`\n+   |               data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:107:15\n+   |\n+LL |         let X(_t) = x;\n+   |               ^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/move-into-closure.rs:111:34\n+   |\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |         if let Either::One(_t) = e { }\n+   |                            --    ^\n+   |                            |     |\n+   |                            |     cannot move out of captured variable in an `FnMut` closure\n+   |                            |     help: consider borrowing here: `&e`\n+   |                            data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:111:28\n+   |\n+LL |         if let Either::One(_t) = e { }\n+   |                            ^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/move-into-closure.rs:115:37\n+   |\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |         while let Either::One(_t) = e { }\n+   |                               --    ^\n+   |                               |     |\n+   |                               |     cannot move out of captured variable in an `FnMut` closure\n+   |                               |     help: consider borrowing here: `&e`\n+   |                               data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:115:31\n+   |\n+LL |         while let Either::One(_t) = e { }\n+   |                               ^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/move-into-closure.rs:119:15\n+   |\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |         match e {\n+   |               ^\n+   |               |\n+   |               cannot move out of captured variable in an `FnMut` closure\n+   |               help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t)\n+   |                         -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:123:25\n+   |\n+LL |             Either::One(_t)\n+   |                         ^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/move-into-closure.rs:126:15\n+   |\n+LL |     let e = Either::One(X(Y));\n+   |         - captured outer variable\n+...\n+LL |         match e {\n+   |               ^\n+   |               |\n+   |               cannot move out of captured variable in an `FnMut` closure\n+   |               help: consider borrowing here: `&e`\n+...\n+LL |             Either::One(_t) => (),\n+   |                         -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:130:25\n+   |\n+LL |             Either::One(_t) => (),\n+   |                         ^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/move-into-closure.rs:135:25\n+   |\n+LL |     let x = X(Y);\n+   |         - captured outer variable\n+...\n+LL |         let X(mut _t) = x;\n+   |               ------    ^\n+   |               |         |\n+   |               |         cannot move out of captured variable in an `FnMut` closure\n+   |               |         help: consider borrowing here: `&x`\n+   |               data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:135:15\n+   |\n+LL |         let X(mut _t) = x;\n+   |               ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/move-into-closure.rs:139:38\n+   |\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |         if let Either::One(mut _t) = em { }\n+   |                            ------    ^^\n+   |                            |         |\n+   |                            |         cannot move out of captured variable in an `FnMut` closure\n+   |                            |         help: consider borrowing here: `&em`\n+   |                            data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:139:28\n+   |\n+LL |         if let Either::One(mut _t) = em { }\n+   |                            ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/move-into-closure.rs:143:41\n+   |\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |         while let Either::One(mut _t) = em { }\n+   |                               ------    ^^\n+   |                               |         |\n+   |                               |         cannot move out of captured variable in an `FnMut` closure\n+   |                               |         help: consider borrowing here: `&em`\n+   |                               data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:143:31\n+   |\n+LL |         while let Either::One(mut _t) = em { }\n+   |                               ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/move-into-closure.rs:147:15\n+   |\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |         match em {\n+   |               ^^\n+   |               |\n+   |               cannot move out of captured variable in an `FnMut` closure\n+   |               help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t)\n+   |                         ------ data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:151:25\n+   |\n+LL |             Either::One(mut _t)\n+   |                         ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/move-into-closure.rs:154:15\n+   |\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |         match em {\n+   |               ^^\n+   |               |\n+   |               cannot move out of captured variable in an `FnMut` closure\n+   |               help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t) => (),\n+   |                         ------ data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:158:25\n+   |\n+LL |             Either::One(mut _t) => (),\n+   |                         ^^^^^^\n+\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+  --> $DIR/move-into-closure.rs:162:15\n+   |\n+LL |     let mut em = Either::One(X(Y));\n+   |         ------ captured outer variable\n+...\n+LL |         match em {\n+   |               ^^\n+   |               |\n+   |               cannot move out of captured variable in an `FnMut` closure\n+   |               help: consider borrowing here: `&em`\n+...\n+LL |             Either::One(mut _t) => (),\n+   |                         ------ data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/move-into-closure.rs:166:25\n+   |\n+LL |             Either::One(mut _t) => (),\n+   |                         ^^^^^^\n+\n+error: aborting due to 21 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "474e88c4d53950642269b42d96f62f0731ca9747", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.rs", "status": "added", "additions": 376, "deletions": 0, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,376 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+#[derive(Clone)]\n+enum Either {\n+    One(X),\n+    Two(X),\n+}\n+\n+#[derive(Clone)]\n+struct X(Y);\n+\n+#[derive(Clone)]\n+struct Y;\n+\n+pub fn main() {\n+    let e = Either::One(X(Y));\n+    let mut em = Either::One(X(Y));\n+\n+    let r = &e;\n+    let rm = &mut Either::One(X(Y));\n+\n+    let x = X(Y);\n+    let mut xm = X(Y);\n+\n+    let s = &x;\n+    let sm = &mut X(Y);\n+\n+    let ve = vec![Either::One(X(Y))];\n+\n+    let vr = &ve;\n+    let vrm = &mut vec![Either::One(X(Y))];\n+\n+    let vx = vec![X(Y)];\n+\n+    let vs = &vx;\n+    let vsm = &mut vec![X(Y)];\n+\n+    // -------- move from Either/X place --------\n+\n+    let X(_t) = *s;\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `*`\n+    //~| SUGGESTION s\n+    if let Either::One(_t) = *r { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `*`\n+    //~| SUGGESTION r\n+    while let Either::One(_t) = *r { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `*`\n+    //~| SUGGESTION r\n+    match *r {\n+        //~^ ERROR cannot move\n+        //~| HELP consider removing the `*`\n+        //~| SUGGESTION r\n+        Either::One(_t)\n+        | Either::Two(_t) => (),\n+    }\n+    match *r {\n+        //~^ ERROR cannot move\n+        //~| HELP consider removing the `*`\n+        //~| SUGGESTION r\n+        Either::One(_t) => (),\n+        Either::Two(ref _t) => (),\n+        // FIXME: should suggest removing `ref` too\n+    }\n+\n+    let X(_t) = *sm;\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `*`\n+    //~| SUGGESTION sm\n+    if let Either::One(_t) = *rm { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `*`\n+    //~| SUGGESTION rm\n+    while let Either::One(_t) = *rm { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `*`\n+    //~| SUGGESTION rm\n+    match *rm {\n+        //~^ ERROR cannot move\n+        //~| HELP consider removing the `*`\n+        //~| SUGGESTION rm\n+        Either::One(_t)\n+        | Either::Two(_t) => (),\n+    }\n+    match *rm {\n+        //~^ ERROR cannot move\n+        //~| HELP consider removing the `*`\n+        //~| SUGGESTION rm\n+        Either::One(_t) => (),\n+        Either::Two(ref _t) => (),\n+        // FIXME: should suggest removing `ref` too\n+    }\n+    match *rm {\n+        //~^ ERROR cannot move\n+        //~| HELP consider removing the `*`\n+        //~| SUGGESTION rm\n+        Either::One(_t) => (),\n+        Either::Two(ref mut _t) => (),\n+        // FIXME: should suggest removing `ref` too\n+    }\n+\n+    let X(_t) = vs[0];\n+    //~^ ERROR cannot move\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &vs[0]\n+    if let Either::One(_t) = vr[0] { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &vr[0]\n+    while let Either::One(_t) = vr[0] { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &vr[0]\n+    match vr[0] {\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &vr[0]\n+        Either::One(_t)\n+        | Either::Two(_t) => (),\n+    }\n+    match vr[0] {\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &vr[0]\n+        Either::One(_t) => (),\n+        Either::Two(ref _t) => (),\n+        // FIXME: should suggest removing `ref` too\n+    }\n+\n+    let X(_t) = vsm[0];\n+    //~^ ERROR cannot move\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &vsm[0]\n+    if let Either::One(_t) = vrm[0] { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &vrm[0]\n+    while let Either::One(_t) = vrm[0] { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &vrm[0]\n+    match vrm[0] {\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &vrm[0]\n+        Either::One(_t)\n+        | Either::Two(_t) => (),\n+    }\n+    match vrm[0] {\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &vrm[0]\n+        Either::One(_t) => (),\n+        Either::Two(ref _t) => (),\n+        // FIXME: should suggest removing `ref` too\n+    }\n+    match vrm[0] {\n+        //~^ ERROR cannot move\n+        //~| HELP consider borrowing here\n+        //~| SUGGESTION &vrm[0]\n+        Either::One(_t) => (),\n+        Either::Two(ref mut _t) => (),\n+        // FIXME: should suggest removing `ref` too\n+    }\n+\n+    // -------- move from &Either/&X place --------\n+\n+    let &X(_t) = s;\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION X(_t)\n+    if let &Either::One(_t) = r { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION Either::One(_t)\n+    while let &Either::One(_t) = r { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION Either::One(_t)\n+    match r {\n+        //~^ ERROR cannot move\n+        &Either::One(_t)\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION Either::One(_t)\n+        | &Either::Two(_t) => (),\n+        // FIXME: would really like a suggestion here too\n+    }\n+    match r {\n+        //~^ ERROR cannot move\n+        &Either::One(_t) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION Either::One(_t)\n+        &Either::Two(ref _t) => (),\n+    }\n+    match r {\n+        //~^ ERROR cannot move\n+        &Either::One(_t) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION Either::One(_t)\n+        Either::Two(_t) => (),\n+    }\n+    fn f1(&X(_t): &X) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION X(_t)\n+\n+    let &mut X(_t) = sm;\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION X(_t)\n+    if let &mut Either::One(_t) = rm { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION Either::One(_t)\n+    while let &mut Either::One(_t) = rm { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION Either::One(_t)\n+    match rm {\n+        //~^ ERROR cannot move\n+        &mut Either::One(_t) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION Either::One(_t)\n+        &mut Either::Two(_t) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION Either::Two(_t)\n+    }\n+    match rm {\n+        //~^ ERROR cannot move\n+        &mut Either::One(_t) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION Either::One(_t)\n+        &mut Either::Two(ref _t) => (),\n+    }\n+    match rm {\n+        //~^ ERROR cannot move\n+        &mut Either::One(_t) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION Either::One(_t)\n+        &mut Either::Two(ref mut _t) => (),\n+    }\n+    match rm {\n+        //~^ ERROR cannot move\n+        &mut Either::One(_t) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION Either::One(_t)\n+        Either::Two(_t) => (),\n+    }\n+    fn f2(&mut X(_t): &mut X) { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION X(_t)\n+\n+    // -------- move from tuple of &Either/&X --------\n+\n+    // FIXME: These should have suggestions.\n+\n+    let (&X(_t),) = (&x.clone(),);\n+    //~^ ERROR cannot move\n+    if let (&Either::One(_t),) = (&e.clone(),) { }\n+    //~^ ERROR cannot move\n+    while let (&Either::One(_t),) = (&e.clone(),) { }\n+    //~^ ERROR cannot move\n+    match (&e.clone(),) {\n+        //~^ ERROR cannot move\n+        (&Either::One(_t),)\n+        | (&Either::Two(_t),) => (),\n+    }\n+    fn f3((&X(_t),): (&X,)) { }\n+    //~^ ERROR cannot move\n+\n+    let (&mut X(_t),) = (&mut xm.clone(),);\n+    //~^ ERROR cannot move\n+    if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n+    //~^ ERROR cannot move\n+    while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n+    //~^ ERROR cannot move\n+    match (&mut em.clone(),) {\n+        //~^ ERROR cannot move\n+        (&mut Either::One(_t),) => (),\n+        (&mut Either::Two(_t),) => (),\n+    }\n+    fn f4((&mut X(_t),): (&mut X,)) { }\n+    //~^ ERROR cannot move\n+\n+    // -------- move from &Either/&X value --------\n+\n+    let &X(_t) = &x;\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION X(_t)\n+    if let &Either::One(_t) = &e { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION Either::One(_t)\n+    while let &Either::One(_t) = &e { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&`\n+    //~| SUGGESTION Either::One(_t)\n+    match &e {\n+        //~^ ERROR cannot move\n+        &Either::One(_t)\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION Either::One(_t)\n+        | &Either::Two(_t) => (),\n+        // FIXME: would really like a suggestion here too\n+    }\n+    match &e {\n+        //~^ ERROR cannot move\n+        &Either::One(_t) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION Either::One(_t)\n+        &Either::Two(ref _t) => (),\n+    }\n+    match &e {\n+        //~^ ERROR cannot move\n+        &Either::One(_t) => (),\n+        //~^ HELP consider removing the `&`\n+        //~| SUGGESTION Either::One(_t)\n+        Either::Two(_t) => (),\n+    }\n+\n+    let &mut X(_t) = &mut xm;\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION X(_t)\n+    if let &mut Either::One(_t) = &mut em { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION Either::One(_t)\n+    while let &mut Either::One(_t) = &mut em { }\n+    //~^ ERROR cannot move\n+    //~| HELP consider removing the `&mut`\n+    //~| SUGGESTION Either::One(_t)\n+    match &mut em {\n+        //~^ ERROR cannot move\n+        &mut Either::One(_t)\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION Either::One(_t)\n+        | &mut Either::Two(_t) => (),\n+        // FIXME: would really like a suggestion here too\n+    }\n+    match &mut em {\n+        //~^ ERROR cannot move\n+        &mut Either::One(_t) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION Either::One(_t)\n+        &mut Either::Two(ref _t) => (),\n+    }\n+    match &mut em {\n+        //~^ ERROR cannot move\n+        &mut Either::One(_t) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION Either::One(_t)\n+        &mut Either::Two(ref mut _t) => (),\n+    }\n+    match &mut em {\n+        //~^ ERROR cannot move\n+        &mut Either::One(_t) => (),\n+        //~^ HELP consider removing the `&mut`\n+        //~| SUGGESTION Either::One(_t)\n+        Either::Two(_t) => (),\n+    }\n+}"}, {"sha": "d7a32dbfcc643b2cd633eec9f55506b1982cbcb4", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "added", "additions": 998, "deletions": 0, "changes": 998, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -0,0 +1,998 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:50:17\n+   |\n+LL |     let X(_t) = *s;\n+   |           --    ^^\n+   |           |     |\n+   |           |     cannot move out of borrowed content\n+   |           |     help: consider removing the `*`: `s`\n+   |           data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:50:11\n+   |\n+LL |     let X(_t) = *s;\n+   |           ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:54:30\n+   |\n+LL |     if let Either::One(_t) = *r { }\n+   |                        --    ^^\n+   |                        |     |\n+   |                        |     cannot move out of borrowed content\n+   |                        |     help: consider removing the `*`: `r`\n+   |                        data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:54:24\n+   |\n+LL |     if let Either::One(_t) = *r { }\n+   |                        ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:58:33\n+   |\n+LL |     while let Either::One(_t) = *r { }\n+   |                           --    ^^\n+   |                           |     |\n+   |                           |     cannot move out of borrowed content\n+   |                           |     help: consider removing the `*`: `r`\n+   |                           data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:58:27\n+   |\n+LL |     while let Either::One(_t) = *r { }\n+   |                           ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:62:11\n+   |\n+LL |     match *r {\n+   |           ^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `*`: `r`\n+...\n+LL |         Either::One(_t)\n+   |                     -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:66:21\n+   |\n+LL |         Either::One(_t)\n+   |                     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:69:11\n+   |\n+LL |     match *r {\n+   |           ^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `*`: `r`\n+...\n+LL |         Either::One(_t) => (),\n+   |                     -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:73:21\n+   |\n+LL |         Either::One(_t) => (),\n+   |                     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:78:17\n+   |\n+LL |     let X(_t) = *sm;\n+   |           --    ^^^\n+   |           |     |\n+   |           |     cannot move out of borrowed content\n+   |           |     help: consider removing the `*`: `sm`\n+   |           data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:78:11\n+   |\n+LL |     let X(_t) = *sm;\n+   |           ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:82:30\n+   |\n+LL |     if let Either::One(_t) = *rm { }\n+   |                        --    ^^^\n+   |                        |     |\n+   |                        |     cannot move out of borrowed content\n+   |                        |     help: consider removing the `*`: `rm`\n+   |                        data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:82:24\n+   |\n+LL |     if let Either::One(_t) = *rm { }\n+   |                        ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:86:33\n+   |\n+LL |     while let Either::One(_t) = *rm { }\n+   |                           --    ^^^\n+   |                           |     |\n+   |                           |     cannot move out of borrowed content\n+   |                           |     help: consider removing the `*`: `rm`\n+   |                           data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:86:27\n+   |\n+LL |     while let Either::One(_t) = *rm { }\n+   |                           ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:90:11\n+   |\n+LL |     match *rm {\n+   |           ^^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `*`: `rm`\n+...\n+LL |         Either::One(_t)\n+   |                     -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:94:21\n+   |\n+LL |         Either::One(_t)\n+   |                     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:97:11\n+   |\n+LL |     match *rm {\n+   |           ^^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `*`: `rm`\n+...\n+LL |         Either::One(_t) => (),\n+   |                     -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:101:21\n+   |\n+LL |         Either::One(_t) => (),\n+   |                     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:105:11\n+   |\n+LL |     match *rm {\n+   |           ^^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `*`: `rm`\n+...\n+LL |         Either::One(_t) => (),\n+   |                     -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:109:21\n+   |\n+LL |         Either::One(_t) => (),\n+   |                     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:114:17\n+   |\n+LL |     let X(_t) = vs[0];\n+   |           --    ^^^^^\n+   |           |     |\n+   |           |     cannot move out of borrowed content\n+   |           |     help: consider borrowing here: `&vs[0]`\n+   |           data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:114:11\n+   |\n+LL |     let X(_t) = vs[0];\n+   |           ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:118:30\n+   |\n+LL |     if let Either::One(_t) = vr[0] { }\n+   |                        --    ^^^^^\n+   |                        |     |\n+   |                        |     cannot move out of borrowed content\n+   |                        |     help: consider borrowing here: `&vr[0]`\n+   |                        data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:118:24\n+   |\n+LL |     if let Either::One(_t) = vr[0] { }\n+   |                        ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:122:33\n+   |\n+LL |     while let Either::One(_t) = vr[0] { }\n+   |                           --    ^^^^^\n+   |                           |     |\n+   |                           |     cannot move out of borrowed content\n+   |                           |     help: consider borrowing here: `&vr[0]`\n+   |                           data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:122:27\n+   |\n+LL |     while let Either::One(_t) = vr[0] { }\n+   |                           ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:126:11\n+   |\n+LL |     match vr[0] {\n+   |           ^^^^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider borrowing here: `&vr[0]`\n+...\n+LL |         Either::One(_t)\n+   |                     -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:130:21\n+   |\n+LL |         Either::One(_t)\n+   |                     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:133:11\n+   |\n+LL |     match vr[0] {\n+   |           ^^^^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider borrowing here: `&vr[0]`\n+...\n+LL |         Either::One(_t) => (),\n+   |                     -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:137:21\n+   |\n+LL |         Either::One(_t) => (),\n+   |                     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:142:17\n+   |\n+LL |     let X(_t) = vsm[0];\n+   |           --    ^^^^^^\n+   |           |     |\n+   |           |     cannot move out of borrowed content\n+   |           |     help: consider borrowing here: `&vsm[0]`\n+   |           data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:142:11\n+   |\n+LL |     let X(_t) = vsm[0];\n+   |           ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:146:30\n+   |\n+LL |     if let Either::One(_t) = vrm[0] { }\n+   |                        --    ^^^^^^\n+   |                        |     |\n+   |                        |     cannot move out of borrowed content\n+   |                        |     help: consider borrowing here: `&vrm[0]`\n+   |                        data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:146:24\n+   |\n+LL |     if let Either::One(_t) = vrm[0] { }\n+   |                        ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:150:33\n+   |\n+LL |     while let Either::One(_t) = vrm[0] { }\n+   |                           --    ^^^^^^\n+   |                           |     |\n+   |                           |     cannot move out of borrowed content\n+   |                           |     help: consider borrowing here: `&vrm[0]`\n+   |                           data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:150:27\n+   |\n+LL |     while let Either::One(_t) = vrm[0] { }\n+   |                           ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:154:11\n+   |\n+LL |     match vrm[0] {\n+   |           ^^^^^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider borrowing here: `&vrm[0]`\n+...\n+LL |         Either::One(_t)\n+   |                     -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:158:21\n+   |\n+LL |         Either::One(_t)\n+   |                     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:161:11\n+   |\n+LL |     match vrm[0] {\n+   |           ^^^^^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider borrowing here: `&vrm[0]`\n+...\n+LL |         Either::One(_t) => (),\n+   |                     -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:165:21\n+   |\n+LL |         Either::One(_t) => (),\n+   |                     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:169:11\n+   |\n+LL |     match vrm[0] {\n+   |           ^^^^^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider borrowing here: `&vrm[0]`\n+...\n+LL |         Either::One(_t) => (),\n+   |                     -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:173:21\n+   |\n+LL |         Either::One(_t) => (),\n+   |                     ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:180:18\n+   |\n+LL |     let &X(_t) = s;\n+   |         ------   ^ cannot move out of borrowed content\n+   |         |  |\n+   |         |  data moved here\n+   |         help: consider removing the `&`: `X(_t)`\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:180:12\n+   |\n+LL |     let &X(_t) = s;\n+   |            ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:184:31\n+   |\n+LL |     if let &Either::One(_t) = r { }\n+   |            ----------------   ^ cannot move out of borrowed content\n+   |            |            |\n+   |            |            data moved here\n+   |            help: consider removing the `&`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:184:25\n+   |\n+LL |     if let &Either::One(_t) = r { }\n+   |                         ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:188:34\n+   |\n+LL |     while let &Either::One(_t) = r { }\n+   |               ----------------   ^ cannot move out of borrowed content\n+   |               |            |\n+   |               |            data moved here\n+   |               help: consider removing the `&`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:188:28\n+   |\n+LL |     while let &Either::One(_t) = r { }\n+   |                            ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:192:11\n+   |\n+LL |     match r {\n+   |           ^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &Either::One(_t)\n+   |         ----------------\n+   |         |            |\n+   |         |            data moved here\n+   |         help: consider removing the `&`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:194:22\n+   |\n+LL |         &Either::One(_t)\n+   |                      ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:200:11\n+   |\n+LL |     match r {\n+   |           ^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &Either::One(_t) => (),\n+   |         ----------------\n+   |         |            |\n+   |         |            data moved here\n+   |         help: consider removing the `&`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:202:22\n+   |\n+LL |         &Either::One(_t) => (),\n+   |                      ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:207:11\n+   |\n+LL |     match r {\n+   |           ^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &Either::One(_t) => (),\n+   |         ----------------\n+   |         |            |\n+   |         |            data moved here\n+   |         help: consider removing the `&`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:209:22\n+   |\n+LL |         &Either::One(_t) => (),\n+   |                      ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:219:22\n+   |\n+LL |     let &mut X(_t) = sm;\n+   |         ----------   ^^ cannot move out of borrowed content\n+   |         |      |\n+   |         |      data moved here\n+   |         help: consider removing the `&mut`: `X(_t)`\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:219:16\n+   |\n+LL |     let &mut X(_t) = sm;\n+   |                ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:223:35\n+   |\n+LL |     if let &mut Either::One(_t) = rm { }\n+   |            --------------------   ^^ cannot move out of borrowed content\n+   |            |                |\n+   |            |                data moved here\n+   |            help: consider removing the `&mut`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:223:29\n+   |\n+LL |     if let &mut Either::One(_t) = rm { }\n+   |                             ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:227:38\n+   |\n+LL |     while let &mut Either::One(_t) = rm { }\n+   |               --------------------   ^^ cannot move out of borrowed content\n+   |               |                |\n+   |               |                data moved here\n+   |               help: consider removing the `&mut`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:227:32\n+   |\n+LL |     while let &mut Either::One(_t) = rm { }\n+   |                                ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:231:11\n+   |\n+LL |     match rm {\n+   |           ^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut Either::One(_t) => (),\n+   |                          -- data moved here\n+...\n+LL |         &mut Either::Two(_t) => (),\n+   |                          -- ...and here\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/simple.rs:233:26\n+   |\n+LL |         &mut Either::One(_t) => (),\n+   |                          ^^\n+...\n+LL |         &mut Either::Two(_t) => (),\n+   |                          ^^\n+help: consider removing the `&mut`\n+   |\n+LL |         Either::One(_t) => (),\n+   |         ^^^^^^^^^^^^^^^\n+help: consider removing the `&mut`\n+   |\n+LL |         Either::Two(_t) => (),\n+   |         ^^^^^^^^^^^^^^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:240:11\n+   |\n+LL |     match rm {\n+   |           ^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut Either::One(_t) => (),\n+   |         --------------------\n+   |         |                |\n+   |         |                data moved here\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:242:26\n+   |\n+LL |         &mut Either::One(_t) => (),\n+   |                          ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:247:11\n+   |\n+LL |     match rm {\n+   |           ^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut Either::One(_t) => (),\n+   |         --------------------\n+   |         |                |\n+   |         |                data moved here\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:249:26\n+   |\n+LL |         &mut Either::One(_t) => (),\n+   |                          ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:254:11\n+   |\n+LL |     match rm {\n+   |           ^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut Either::One(_t) => (),\n+   |         --------------------\n+   |         |                |\n+   |         |                data moved here\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:256:26\n+   |\n+LL |         &mut Either::One(_t) => (),\n+   |                          ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:270:21\n+   |\n+LL |     let (&X(_t),) = (&x.clone(),);\n+   |             --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |             |\n+   |             data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:270:13\n+   |\n+LL |     let (&X(_t),) = (&x.clone(),);\n+   |             ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:272:34\n+   |\n+LL |     if let (&Either::One(_t),) = (&e.clone(),) { }\n+   |                          --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                          |\n+   |                          data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:272:26\n+   |\n+LL |     if let (&Either::One(_t),) = (&e.clone(),) { }\n+   |                          ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:274:37\n+   |\n+LL |     while let (&Either::One(_t),) = (&e.clone(),) { }\n+   |                             --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                             |\n+   |                             data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:274:29\n+   |\n+LL |     while let (&Either::One(_t),) = (&e.clone(),) { }\n+   |                             ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:276:11\n+   |\n+LL |     match (&e.clone(),) {\n+   |           ^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         (&Either::One(_t),)\n+   |                       -- data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:278:23\n+   |\n+LL |         (&Either::One(_t),)\n+   |                       ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:284:25\n+   |\n+LL |     let (&mut X(_t),) = (&mut xm.clone(),);\n+   |                 --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                 |\n+   |                 data moved here\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:284:17\n+   |\n+LL |     let (&mut X(_t),) = (&mut xm.clone(),);\n+   |                 ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:286:38\n+   |\n+LL |     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n+   |                              --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                              |\n+   |                              data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:286:30\n+   |\n+LL |     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n+   |                              ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:288:41\n+   |\n+LL |     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n+   |                                 --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                                 |\n+   |                                 data moved here\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:288:33\n+   |\n+LL |     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n+   |                                 ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:290:11\n+   |\n+LL |     match (&mut em.clone(),) {\n+   |           ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         (&mut Either::One(_t),) => (),\n+   |                           -- data moved here\n+LL |         (&mut Either::Two(_t),) => (),\n+   |                           -- ...and here\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/simple.rs:292:27\n+   |\n+LL |         (&mut Either::One(_t),) => (),\n+   |                           ^^\n+LL |         (&mut Either::Two(_t),) => (),\n+   |                           ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:300:18\n+   |\n+LL |     let &X(_t) = &x;\n+   |         ------   ^^ cannot move out of borrowed content\n+   |         |  |\n+   |         |  data moved here\n+   |         help: consider removing the `&`: `X(_t)`\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:300:12\n+   |\n+LL |     let &X(_t) = &x;\n+   |            ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:304:31\n+   |\n+LL |     if let &Either::One(_t) = &e { }\n+   |            ----------------   ^^ cannot move out of borrowed content\n+   |            |            |\n+   |            |            data moved here\n+   |            help: consider removing the `&`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:304:25\n+   |\n+LL |     if let &Either::One(_t) = &e { }\n+   |                         ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:308:34\n+   |\n+LL |     while let &Either::One(_t) = &e { }\n+   |               ----------------   ^^ cannot move out of borrowed content\n+   |               |            |\n+   |               |            data moved here\n+   |               help: consider removing the `&`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:308:28\n+   |\n+LL |     while let &Either::One(_t) = &e { }\n+   |                            ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:312:11\n+   |\n+LL |     match &e {\n+   |           ^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &Either::One(_t)\n+   |         ----------------\n+   |         |            |\n+   |         |            data moved here\n+   |         help: consider removing the `&`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:314:22\n+   |\n+LL |         &Either::One(_t)\n+   |                      ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:320:11\n+   |\n+LL |     match &e {\n+   |           ^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &Either::One(_t) => (),\n+   |         ----------------\n+   |         |            |\n+   |         |            data moved here\n+   |         help: consider removing the `&`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:322:22\n+   |\n+LL |         &Either::One(_t) => (),\n+   |                      ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:327:11\n+   |\n+LL |     match &e {\n+   |           ^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &Either::One(_t) => (),\n+   |         ----------------\n+   |         |            |\n+   |         |            data moved here\n+   |         help: consider removing the `&`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:329:22\n+   |\n+LL |         &Either::One(_t) => (),\n+   |                      ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:335:22\n+   |\n+LL |     let &mut X(_t) = &mut xm;\n+   |         ----------   ^^^^^^^ cannot move out of borrowed content\n+   |         |      |\n+   |         |      data moved here\n+   |         help: consider removing the `&mut`: `X(_t)`\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:335:16\n+   |\n+LL |     let &mut X(_t) = &mut xm;\n+   |                ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:339:35\n+   |\n+LL |     if let &mut Either::One(_t) = &mut em { }\n+   |            --------------------   ^^^^^^^ cannot move out of borrowed content\n+   |            |                |\n+   |            |                data moved here\n+   |            help: consider removing the `&mut`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:339:29\n+   |\n+LL |     if let &mut Either::One(_t) = &mut em { }\n+   |                             ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:343:38\n+   |\n+LL |     while let &mut Either::One(_t) = &mut em { }\n+   |               --------------------   ^^^^^^^ cannot move out of borrowed content\n+   |               |                |\n+   |               |                data moved here\n+   |               help: consider removing the `&mut`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:343:32\n+   |\n+LL |     while let &mut Either::One(_t) = &mut em { }\n+   |                                ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:347:11\n+   |\n+LL |     match &mut em {\n+   |           ^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut Either::One(_t)\n+   |         --------------------\n+   |         |                |\n+   |         |                data moved here\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:349:26\n+   |\n+LL |         &mut Either::One(_t)\n+   |                          ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:355:11\n+   |\n+LL |     match &mut em {\n+   |           ^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut Either::One(_t) => (),\n+   |         --------------------\n+   |         |                |\n+   |         |                data moved here\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:357:26\n+   |\n+LL |         &mut Either::One(_t) => (),\n+   |                          ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:362:11\n+   |\n+LL |     match &mut em {\n+   |           ^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut Either::One(_t) => (),\n+   |         --------------------\n+   |         |                |\n+   |         |                data moved here\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:364:26\n+   |\n+LL |         &mut Either::One(_t) => (),\n+   |                          ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:369:11\n+   |\n+LL |     match &mut em {\n+   |           ^^^^^^^ cannot move out of borrowed content\n+LL |         //~^ ERROR cannot move\n+LL |         &mut Either::One(_t) => (),\n+   |         --------------------\n+   |         |                |\n+   |         |                data moved here\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n+   |\n+note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:371:26\n+   |\n+LL |         &mut Either::One(_t) => (),\n+   |                          ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:214:11\n+   |\n+LL |     fn f1(&X(_t): &X) { }\n+   |           ^^^--^\n+   |           |  |\n+   |           |  data moved here\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `&`: `X(_t)`\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:214:14\n+   |\n+LL |     fn f1(&X(_t): &X) { }\n+   |              ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:261:11\n+   |\n+LL |     fn f2(&mut X(_t): &mut X) { }\n+   |           ^^^^^^^--^\n+   |           |      |\n+   |           |      data moved here\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `&mut`: `X(_t)`\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:261:18\n+   |\n+LL |     fn f2(&mut X(_t): &mut X) { }\n+   |                  ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:281:11\n+   |\n+LL |     fn f3((&X(_t),): (&X,)) { }\n+   |           ^^^^--^^^\n+   |           |   |\n+   |           |   data moved here\n+   |           cannot move out of borrowed content\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:281:15\n+   |\n+LL |     fn f3((&X(_t),): (&X,)) { }\n+   |               ^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/simple.rs:295:11\n+   |\n+LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n+   |           ^^^^^^^^--^^^\n+   |           |       |\n+   |           |       data moved here\n+   |           cannot move out of borrowed content\n+   |\n+note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+  --> $DIR/simple.rs:295:19\n+   |\n+LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n+   |                   ^^\n+\n+error: aborting due to 60 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "58220ba992c7a28b7e40637c4a0807b10827b5fc", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142bb27373126edf8367f526358b6c72ecf1d8df/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=142bb27373126edf8367f526358b6c72ecf1d8df", "patch": "@@ -82,7 +82,7 @@ pub fn extract_rendered(output: &str, proc_res: &ProcRes) -> String {\n                     Err(error) => {\n                         proc_res.fatal(Some(&format!(\n                             \"failed to decode compiler output as json: \\\n-                             `{}`\\noutput: {}\\nline: {}\",\n+                             `{}`\\nline: {}\\noutput: {}\",\n                             error, line, output\n                         )));\n                     }\n@@ -114,7 +114,7 @@ fn parse_line(file_name: &str, line: &str, output: &str, proc_res: &ProcRes) ->\n             Err(error) => {\n                 proc_res.fatal(Some(&format!(\n                     \"failed to decode compiler output as json: \\\n-                     `{}`\\noutput: {}\\nline: {}\",\n+                     `{}`\\nline: {}\\noutput: {}\",\n                     error, line, output\n                 )));\n             }"}]}