{"sha": "7f02604f3dbea55b1606434e357097c7687b31cd", "node_id": "C_kwDOAAsO6NoAKDdmMDI2MDRmM2RiZWE1NWIxNjA2NDM0ZTM1NzA5N2M3Njg3YjMxY2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-17T19:07:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-17T19:07:07Z"}, "message": "Rollup merge of #92877 - Amanieu:remove_llvm_nounwind, r=Mark-Simulacrum\n\nRemove LLVMRustMarkAllFunctionsNounwind\n\nThis was originally introduced in #10916 as a way to remove all landing\npads when performing LTO. However this is no longer necessary today\nsince rustc properly marks all functions and call-sites as nounwind\nwhere appropriate.\n\nIn fact this is incorrect in the presence of `extern \"C-unwind\"` which\nmust create a landing pad when compiled with `-C panic=abort` so that\nforeign exceptions are caught and properly turned into aborts.", "tree": {"sha": "c7f1a6abc70828c292b8412466d9f0482ed8a164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f1a6abc70828c292b8412466d9f0482ed8a164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f02604f3dbea55b1606434e357097c7687b31cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5b5bCRBK7hj4Ov3rIwAAkGEIAKtpzOINoEY4eO/k2zhvEZjF\ndxGypAQaciLTfmpOYsXO1bH5+44V5COyAIuBHMkV3YqjfBzWOnYd6guLrAsiRnL9\nYXojbG/XCu22uuz98v5/yhSpuzB8MEEeXpHVy2Ny8D6nfPra69+kiUn3XdMdiP94\nY5sJgSO9gWrhuk9MOXoTozSeMyb/mg2Oj+GupaaQ6rCBzvhJ+sXBAYKHM3wu+f2M\nbU/grlLWZHXcUUHhMNSYw2xy/QyALRJsRHKhUtGJvWumga9ovM46/bfEyQWNFweU\niUnNOpG1MFjCMJUe8M1FXx71oatp/cQ4pejjIsNE+U7sQ+IqwcKM2nHDsQBd+2E=\n=LWm8\n-----END PGP SIGNATURE-----\n", "payload": "tree c7f1a6abc70828c292b8412466d9f0482ed8a164\nparent 6acb7043e74d1219e11750f28048b25f30a7ca13\nparent 606d9c0c0e54b7ed6ec962f3eb492f335c6afe81\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642446427 +0100\ncommitter GitHub <noreply@github.com> 1642446427 +0100\n\nRollup merge of #92877 - Amanieu:remove_llvm_nounwind, r=Mark-Simulacrum\n\nRemove LLVMRustMarkAllFunctionsNounwind\n\nThis was originally introduced in #10916 as a way to remove all landing\npads when performing LTO. However this is no longer necessary today\nsince rustc properly marks all functions and call-sites as nounwind\nwhere appropriate.\n\nIn fact this is incorrect in the presence of `extern \"C-unwind\"` which\nmust create a landing pad when compiled with `-C panic=abort` so that\nforeign exceptions are caught and properly turned into aborts.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f02604f3dbea55b1606434e357097c7687b31cd", "html_url": "https://github.com/rust-lang/rust/commit/7f02604f3dbea55b1606434e357097c7687b31cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f02604f3dbea55b1606434e357097c7687b31cd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6acb7043e74d1219e11750f28048b25f30a7ca13", "url": "https://api.github.com/repos/rust-lang/rust/commits/6acb7043e74d1219e11750f28048b25f30a7ca13", "html_url": "https://github.com/rust-lang/rust/commit/6acb7043e74d1219e11750f28048b25f30a7ca13"}, {"sha": "606d9c0c0e54b7ed6ec962f3eb492f335c6afe81", "url": "https://api.github.com/repos/rust-lang/rust/commits/606d9c0c0e54b7ed6ec962f3eb492f335c6afe81", "html_url": "https://github.com/rust-lang/rust/commit/606d9c0c0e54b7ed6ec962f3eb492f335c6afe81"}], "stats": {"total": 41, "additions": 1, "deletions": 40}, "files": [{"sha": "6afa649b6de325a19b40e8df10619b1002f371fd", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7f02604f3dbea55b1606434e357097c7687b31cd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f02604f3dbea55b1606434e357097c7687b31cd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=7f02604f3dbea55b1606434e357097c7687b31cd", "patch": "@@ -349,13 +349,6 @@ fn fat_lto(\n             );\n             save_temp_bitcode(cgcx, &module, \"lto.after-restriction\");\n         }\n-\n-        if cgcx.no_landing_pads {\n-            unsafe {\n-                llvm::LLVMRustMarkAllFunctionsNounwind(llmod);\n-            }\n-            save_temp_bitcode(cgcx, &module, \"lto.after-nounwind\");\n-        }\n     }\n \n     Ok(LtoModuleCodegen::Fat { module: Some(module), _serialized_bitcode: serialized_bitcode })\n@@ -770,16 +763,6 @@ pub unsafe fn optimize_thin_module(\n             return Err(write::llvm_err(&diag_handler, msg));\n         }\n \n-        // Like with \"fat\" LTO, get some better optimizations if landing pads\n-        // are disabled by removing all landing pads.\n-        if cgcx.no_landing_pads {\n-            let _timer = cgcx\n-                .prof\n-                .generic_activity_with_arg(\"LLVM_thin_lto_remove_landing_pads\", thin_module.name());\n-            llvm::LLVMRustMarkAllFunctionsNounwind(llmod);\n-            save_temp_bitcode(cgcx, &module, \"thin-lto-after-nounwind\");\n-        }\n-\n         // Up next comes the per-module local analyses that we do for Thin LTO.\n         // Each of these functions is basically copied from the LLVM\n         // implementation and then tailored to suit this implementation. Ideally"}, {"sha": "a1c7d2b4f6156d9bdb3f76f07d1e20905cd57e0a", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f02604f3dbea55b1606434e357097c7687b31cd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f02604f3dbea55b1606434e357097c7687b31cd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=7f02604f3dbea55b1606434e357097c7687b31cd", "patch": "@@ -2320,7 +2320,6 @@ extern \"C\" {\n     pub fn LLVMRustSetNormalizedTarget(M: &Module, triple: *const c_char);\n     pub fn LLVMRustAddAlwaysInlinePass(P: &PassManagerBuilder, AddLifetimes: bool);\n     pub fn LLVMRustRunRestrictionPass(M: &Module, syms: *const *const c_char, len: size_t);\n-    pub fn LLVMRustMarkAllFunctionsNounwind(M: &Module);\n \n     pub fn LLVMRustOpenArchive(path: *const c_char) -> Option<&'static mut Archive>;\n     pub fn LLVMRustArchiveIteratorNew(AR: &Archive) -> &mut ArchiveIterator<'_>;"}, {"sha": "540979ce02d8fde47e148478b5cfb5d34c7ff466", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f02604f3dbea55b1606434e357097c7687b31cd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f02604f3dbea55b1606434e357097c7687b31cd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=7f02604f3dbea55b1606434e357097c7687b31cd", "patch": "@@ -32,7 +32,7 @@ use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, FileName, InnerSpan, Pos, Span};\n-use rustc_target::spec::{MergeFunctions, PanicStrategy, SanitizerSet};\n+use rustc_target::spec::{MergeFunctions, SanitizerSet};\n \n use std::any::Any;\n use std::fs;\n@@ -313,7 +313,6 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     pub backend: B,\n     pub prof: SelfProfilerRef,\n     pub lto: Lto,\n-    pub no_landing_pads: bool,\n     pub save_temps: bool,\n     pub fewer_names: bool,\n     pub time_trace: bool,\n@@ -1039,7 +1038,6 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         crate_types: sess.crate_types().to_vec(),\n         each_linked_rlib_for_lto,\n         lto: sess.lto(),\n-        no_landing_pads: sess.panic_strategy() == PanicStrategy::Abort,\n         fewer_names: sess.fewer_names(),\n         save_temps: sess.opts.cg.save_temps,\n         time_trace: sess.opts.debugging_opts.llvm_time_trace,"}, {"sha": "7030fd53704dd74efa27fae77a252d932767997a", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f02604f3dbea55b1606434e357097c7687b31cd/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7f02604f3dbea55b1606434e357097c7687b31cd/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=7f02604f3dbea55b1606434e357097c7687b31cd", "patch": "@@ -1168,25 +1168,6 @@ extern \"C\" void LLVMRustRunRestrictionPass(LLVMModuleRef M, char **Symbols,\n   passes.run(*unwrap(M));\n }\n \n-extern \"C\" void LLVMRustMarkAllFunctionsNounwind(LLVMModuleRef M) {\n-  for (Module::iterator GV = unwrap(M)->begin(), E = unwrap(M)->end(); GV != E;\n-       ++GV) {\n-    GV->setDoesNotThrow();\n-    Function *F = dyn_cast<Function>(GV);\n-    if (F == nullptr)\n-      continue;\n-\n-    for (Function::iterator B = F->begin(), BE = F->end(); B != BE; ++B) {\n-      for (BasicBlock::iterator I = B->begin(), IE = B->end(); I != IE; ++I) {\n-        if (isa<InvokeInst>(I)) {\n-          InvokeInst *CI = cast<InvokeInst>(I);\n-          CI->setDoesNotThrow();\n-        }\n-      }\n-    }\n-  }\n-}\n-\n extern \"C\" void\n LLVMRustSetDataLayoutFromTargetMachine(LLVMModuleRef Module,\n                                        LLVMTargetMachineRef TMR) {"}]}