{"sha": "b325e4f28e0735bb951bdf9f1db1206bd3ee715b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMjVlNGYyOGUwNzM1YmI5NTFiZGY5ZjFkYjEyMDZiZDNlZTcxNWI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-12T10:30:16Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-22T13:33:59Z"}, "message": "Add feature-gates for desugaring-based `box` and placement-`in`.\n\nupdate test/compile-fail/feature-gate-box-expr.rs to reflect new feature gates.\n\nPart of what lands with Issue 22181.", "tree": {"sha": "85936fe4b2c7a27c44ceaf8b48149adb577c920b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85936fe4b2c7a27c44ceaf8b48149adb577c920b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b325e4f28e0735bb951bdf9f1db1206bd3ee715b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b325e4f28e0735bb951bdf9f1db1206bd3ee715b", "html_url": "https://github.com/rust-lang/rust/commit/b325e4f28e0735bb951bdf9f1db1206bd3ee715b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b325e4f28e0735bb951bdf9f1db1206bd3ee715b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d79bbbc4ef20a11680a004b600a90281e4c5e04a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d79bbbc4ef20a11680a004b600a90281e4c5e04a", "html_url": "https://github.com/rust-lang/rust/commit/d79bbbc4ef20a11680a004b600a90281e4c5e04a"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "d72b52615ebb188af9c7bb4f566ba1c09588f495", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b325e4f28e0735bb951bdf9f1db1206bd3ee715b/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b325e4f28e0735bb951bdf9f1db1206bd3ee715b/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=b325e4f28e0735bb951bdf9f1db1206bd3ee715b", "patch": "@@ -82,8 +82,10 @@\n #![feature(no_std)]\n #![feature(nonzero)]\n #![feature(optin_builtin_traits)]\n+#![feature(placement_in_syntax)]\n #![feature(raw)]\n #![feature(staged_api)]\n+#![feature(placement_in_syntax)]\n #![feature(unboxed_closures)]\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag, filling_drop)]"}, {"sha": "784f5eecf0be916d31b7d14e99ac5ef0456520e9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b325e4f28e0735bb951bdf9f1db1206bd3ee715b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b325e4f28e0735bb951bdf9f1db1206bd3ee715b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b325e4f28e0735bb951bdf9f1db1206bd3ee715b", "patch": "@@ -234,6 +234,7 @@\n #![feature(no_std)]\n #![feature(oom)]\n #![feature(optin_builtin_traits)]\n+#![feature(placement_in_syntax)]\n #![feature(rand)]\n #![feature(raw)]\n #![feature(reflect_marker)]"}, {"sha": "93e744287bae57274928c2973ac0f323135fea66", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b325e4f28e0735bb951bdf9f1db1206bd3ee715b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b325e4f28e0735bb951bdf9f1db1206bd3ee715b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b325e4f28e0735bb951bdf9f1db1206bd3ee715b", "patch": "@@ -56,6 +56,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n         });\n     }\n \n+    let expr_span = e.span;\n     return e.and_then(|ast::Expr {id, node, span}| match node {\n \n         // expr_mac should really be expr_ext or something; it's the\n@@ -94,6 +95,12 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             //     InPlace::finalize(place)\n             // })\n \n+            // Ensure feature-gate is enabled\n+            feature_gate::check_for_placement_in(\n+                fld.cx.ecfg.features,\n+                &fld.cx.parse_sess.span_diagnostic,\n+                expr_span);\n+\n             let value_span = value_expr.span;\n             let placer_span = placer.span;\n "}, {"sha": "8c6855036f6e9dc4058538179ec02b7207fcc7b2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b325e4f28e0735bb951bdf9f1db1206bd3ee715b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b325e4f28e0735bb951bdf9f1db1206bd3ee715b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b325e4f28e0735bb951bdf9f1db1206bd3ee715b", "patch": "@@ -80,6 +80,7 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     (\"visible_private_types\", \"1.0.0\", Active),\n     (\"slicing_syntax\", \"1.0.0\", Accepted),\n     (\"box_syntax\", \"1.0.0\", Active),\n+    (\"placement_in_syntax\", \"1.0.0\", Active),\n     (\"pushpop_unsafe\", \"1.2.0\", Active),\n     (\"on_unimplemented\", \"1.0.0\", Active),\n     (\"simd_ffi\", \"1.0.0\", Active),\n@@ -326,6 +327,8 @@ pub struct Features {\n     pub allow_trace_macros: bool,\n     pub allow_internal_unstable: bool,\n     pub allow_custom_derive: bool,\n+    pub allow_placement_in: bool,\n+    pub allow_box: bool,\n     pub allow_pushpop_unsafe: bool,\n     pub simd_ffi: bool,\n     pub unmarked_api: bool,\n@@ -350,6 +353,8 @@ impl Features {\n             allow_trace_macros: false,\n             allow_internal_unstable: false,\n             allow_custom_derive: false,\n+            allow_placement_in: false,\n+            allow_box: false,\n             allow_pushpop_unsafe: false,\n             simd_ffi: false,\n             unmarked_api: false,\n@@ -361,6 +366,29 @@ impl Features {\n     }\n }\n \n+const EXPLAIN_BOX_SYNTAX: &'static str =\n+    \"box expression syntax is experimental; you can call `Box::new` instead.\";\n+\n+const EXPLAIN_PLACEMENT_IN: &'static str =\n+    \"placement-in expression syntax is experimental and subject to change.\";\n+\n+const EXPLAIN_PUSHPOP_UNSAFE: &'static str =\n+    \"push/pop_unsafe macros are experimental and subject to change.\";\n+\n+pub fn check_for_box_syntax(f: Option<&Features>, diag: &SpanHandler, span: Span) {\n+    if let Some(&Features { allow_box: true, .. }) = f {\n+        return;\n+    }\n+    emit_feature_err(diag, \"box_syntax\", span, EXPLAIN_BOX_SYNTAX);\n+}\n+\n+pub fn check_for_placement_in(f: Option<&Features>, diag: &SpanHandler, span: Span) {\n+    if let Some(&Features { allow_placement_in: true, .. }) = f {\n+        return;\n+    }\n+    emit_feature_err(diag, \"placement_in_syntax\", span, EXPLAIN_PLACEMENT_IN);\n+}\n+\n pub fn check_for_pushpop_syntax(f: Option<&Features>, diag: &SpanHandler, span: Span) {\n     if let Some(&Features { allow_pushpop_unsafe: true, .. }) = f {\n         return;\n@@ -376,6 +404,11 @@ struct Context<'a> {\n }\n \n impl<'a> Context<'a> {\n+    fn enable_feature(&mut self, feature: &'static str) {\n+        debug!(\"enabling feature: {}\", feature);\n+        self.features.push(feature);\n+    }\n+\n     fn gate_feature(&self, feature: &str, span: Span, explain: &str) {\n         let has_feature = self.has_feature(feature);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", feature, span, has_feature);\n@@ -498,6 +531,26 @@ impl<'a, 'v> Visitor<'v> for MacroVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n         self.context.check_attribute(attr, true);\n     }\n+\n+    fn visit_expr(&mut self, e: &ast::Expr) {\n+        // Issue 22181: overloaded-`box` and placement-`in` are\n+        // implemented via a desugaring expansion, so their feature\n+        // gates go into MacroVisitor since that works pre-expansion.\n+        //\n+        // Issue 22234: we also check during expansion as well.\n+        // But we keep these checks as a pre-expansion check to catch\n+        // uses in e.g. conditionalized code.\n+\n+        if let ast::ExprBox(None, _) = e.node {\n+            self.context.gate_feature(\"box_syntax\", e.span, EXPLAIN_BOX_SYNTAX);\n+        }\n+\n+        if let ast::ExprBox(Some(_), _) = e.node {\n+            self.context.gate_feature(\"placement_in_syntax\", e.span, EXPLAIN_PLACEMENT_IN);\n+        }\n+\n+        visit::walk_expr(self, e);\n+    }\n }\n \n struct PostExpansionVisitor<'a> {\n@@ -764,7 +817,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n                     match KNOWN_FEATURES.iter()\n                                         .find(|& &(n, _, _)| name == n) {\n                         Some(&(name, _, Active)) => {\n-                            cx.features.push(name);\n+                            cx.enable_feature(name);\n                         }\n                         Some(&(_, _, Removed)) => {\n                             span_handler.span_err(mi.span, \"feature has been removed\");\n@@ -797,6 +850,8 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         allow_trace_macros: cx.has_feature(\"trace_macros\"),\n         allow_internal_unstable: cx.has_feature(\"allow_internal_unstable\"),\n         allow_custom_derive: cx.has_feature(\"custom_derive\"),\n+        allow_placement_in: cx.has_feature(\"placement_in_syntax\"),\n+        allow_box: cx.has_feature(\"box_syntax\"),\n         allow_pushpop_unsafe: cx.has_feature(\"pushpop_unsafe\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n         unmarked_api: cx.has_feature(\"unmarked_api\"),"}, {"sha": "f5c9a63b79bd60243294820d1ec7746d338228dc", "filename": "src/test/compile-fail/feature-gate-box-expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b325e4f28e0735bb951bdf9f1db1206bd3ee715b/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b325e4f28e0735bb951bdf9f1db1206bd3ee715b/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs?ref=b325e4f28e0735bb951bdf9f1db1206bd3ee715b", "patch": "@@ -17,6 +17,9 @@ fn main() {\n     let x = box () 'c'; //~ ERROR box expression syntax is experimental\n     println!(\"x: {}\", x);\n \n-    let x = box (HEAP) 'c'; //~ ERROR box expression syntax is experimental\n+    let x = box (HEAP) 'c'; //~ ERROR placement-in expression syntax is experimental\n+    println!(\"x: {}\", x);\n+\n+    let x = in HEAP { 'c' }; //~ ERROR placement-in expression syntax is experimental\n     println!(\"x: {}\", x);\n }"}]}