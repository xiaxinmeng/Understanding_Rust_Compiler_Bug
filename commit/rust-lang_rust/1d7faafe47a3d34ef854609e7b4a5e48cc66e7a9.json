{"sha": "1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkN2ZhYWZlNDdhM2QzNGVmODU0NjA5ZTdiNGE1ZTQ4Y2M2NmU3YTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-22T13:32:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-22T13:32:12Z"}, "message": "Rollup merge of #62746 - RalfJung:deprecated, r=KodrAus\n\n do not use assume_init in std::io\n\nCc https://github.com/rust-lang/rust/issues/62397", "tree": {"sha": "a3689c79a5f230b64cb6a34dd5b99e72122458b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3689c79a5f230b64cb6a34dd5b99e72122458b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdNbrdCRBK7hj4Ov3rIwAAdHIIAB51hPE0vELoq84R50DATnp7\nGMIriTbaO6I0to06EXMx1m/nbr5HnFlwzU6qTZeSyGeb0cVSETqGLFtbbab7wSSL\ncgAXPvzw20K/G0LtQaHoESp/yamaMapqcBHnPbSA9dOl5GEqYGSSXR3SdQyOxZwq\n7A/d2lTXGqK2gMGYMsCx5MfZ6l/rRmJDbJwvCpyMUTgMnFUvT/AclzEx9IdGUUqM\npjpHPbWt4Tq982J9SSzRN/v8wsx6bLhc94P0HcvFDZQbhLkDt7AfIE7VEXHTfAt8\nWmh/XiU2BNQoCyvYwdePrtOG2uT5CY9EthkLXpiAqNjgGdBYADTwZm7m/K7g8xU=\n=nOaV\n-----END PGP SIGNATURE-----\n", "payload": "tree a3689c79a5f230b64cb6a34dd5b99e72122458b6\nparent 2567af67a6a0973937bc65f89f8b002829efad7a\nparent 7c1e4054787f99dff36aa66318b7589f78dfc7d9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1563802332 +0200\ncommitter GitHub <noreply@github.com> 1563802332 +0200\n\nRollup merge of #62746 - RalfJung:deprecated, r=KodrAus\n\n do not use assume_init in std::io\n\nCc https://github.com/rust-lang/rust/issues/62397\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9", "html_url": "https://github.com/rust-lang/rust/commit/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2567af67a6a0973937bc65f89f8b002829efad7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2567af67a6a0973937bc65f89f8b002829efad7a", "html_url": "https://github.com/rust-lang/rust/commit/2567af67a6a0973937bc65f89f8b002829efad7a"}, {"sha": "7c1e4054787f99dff36aa66318b7589f78dfc7d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1e4054787f99dff36aa66318b7589f78dfc7d9", "html_url": "https://github.com/rust-lang/rust/commit/7c1e4054787f99dff36aa66318b7589f78dfc7d9"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "a2fff913ac720c1475eeb23a6a9be0d3588ff035", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9", "patch": "@@ -12,10 +12,11 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter<'_>, num: &T,\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n         let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 4]>::uninit();\n-        // FIXME(#53491): Technically, this is calling `get_mut` on an uninitialized\n-        // `MaybeUninit` (here and elsewhere in this file).  Revisit this once\n+        // FIXME(#53491): This is calling `get_mut` on an uninitialized\n+        // `MaybeUninit` (here and elsewhere in this file). Revisit this once\n         // we decided whether that is valid or not.\n-        // Using `freeze` is *not enough*; `flt2dec::Part` is an enum!\n+        // We can do this only because we are libstd and coupled to the compiler.\n+        // (FWIW, using `freeze` would not be enough; `flt2dec::Part` is an enum!)\n         let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n                                                     *num, sign, precision,\n                                                     false, buf.get_mut(), parts.get_mut());"}, {"sha": "33cc87eb795554bf1945c186d4e72819fbe866ad", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9", "patch": "@@ -2,7 +2,7 @@\n \n use crate::fmt;\n use crate::io::{self, Read, Initializer, Write, ErrorKind, BufRead, IoSlice, IoSliceMut};\n-use crate::mem;\n+use crate::mem::MaybeUninit;\n \n /// Copies the entire contents of a reader into a writer.\n ///\n@@ -43,27 +43,23 @@ use crate::mem;\n pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> io::Result<u64>\n     where R: Read, W: Write\n {\n-    let mut buf = unsafe {\n-        // This is still technically undefined behavior due to creating a reference\n-        // to uninitialized data, but within libstd we can rely on more guarantees\n-        // than if this code were in an external lib\n-\n-        // FIXME: This should probably be changed to an array of `MaybeUninit<u8>`\n-        // once the `mem::MaybeUninit` slice APIs stabilize\n-        let mut buf: mem::MaybeUninit<[u8; super::DEFAULT_BUF_SIZE]> = mem::MaybeUninit::uninit();\n-        reader.initializer().initialize(&mut *buf.as_mut_ptr());\n-        buf.assume_init()\n-    };\n+    let mut buf = MaybeUninit::<[u8; super::DEFAULT_BUF_SIZE]>::uninit();\n+    // FIXME(#53491): This is calling `get_mut` and `get_ref` on an uninitialized\n+    // `MaybeUninit`. Revisit this once we decided whether that is valid or not.\n+    // This is still technically undefined behavior due to creating a reference\n+    // to uninitialized data, but within libstd we can rely on more guarantees\n+    // than if this code were in an external lib.\n+    unsafe { reader.initializer().initialize(buf.get_mut()); }\n \n     let mut written = 0;\n     loop {\n-        let len = match reader.read(&mut buf) {\n+        let len = match reader.read(unsafe { buf.get_mut() }) {\n             Ok(0) => return Ok(written),\n             Ok(len) => len,\n             Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n             Err(e) => return Err(e),\n         };\n-        writer.write_all(&buf[..len])?;\n+        writer.write_all(unsafe { &buf.get_ref()[..len] })?;\n         written += len as u64;\n     }\n }"}, {"sha": "49fb4be39b451d3a03ccbb339284711802bb02ce", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9", "patch": "@@ -205,7 +205,7 @@\n // Don't link to std. We are std.\n #![no_std]\n \n-//#![warn(deprecated_in_future)] // FIXME: std still has quite a few uses of `mem::uninitialized`\n+#![warn(deprecated_in_future)]\n #![warn(missing_docs)]\n #![warn(missing_debug_implementations)]\n #![deny(intra_doc_link_resolution_failure)] // rustdoc is run without -D warnings\n@@ -272,6 +272,7 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(linkage)]\n+#![feature(maybe_uninit_ref)]\n #![feature(mem_take)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]"}, {"sha": "e29faf18d83e5029ecb53b83a8000c8b47fe00cc", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9", "patch": "@@ -163,6 +163,7 @@ pub use self::condvar::{Condvar, WaitTimeoutResult};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::mutex::{Mutex, MutexGuard};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(bootstrap, allow(deprecated_in_future))]\n #[allow(deprecated)]\n pub use self::once::{Once, OnceState, ONCE_INIT};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "77a52a8743d95015c56db27dfe319c76fa9f3265", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=1d7faafe47a3d34ef854609e7b4a5e48cc66e7a9", "patch": "@@ -1,4 +1,4 @@\n-#![allow(deprecated)] // mem::uninitialized\n+#![allow(deprecated_in_future)] // mem::uninitialized; becomes `deprecated` when nightly is 1.39\n \n use crate::io::ErrorKind;\n use crate::mem;"}]}