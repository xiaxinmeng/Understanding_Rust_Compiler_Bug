{"sha": "4427af082797a1e477781efd09947bb27d9b19c3", "node_id": "C_kwDOAAsO6NoAKDQ0MjdhZjA4Mjc5N2ExZTQ3Nzc4MWVmZDA5OTQ3YmIyN2Q5YjE5YzM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-31T21:18:17Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-31T21:25:08Z"}, "message": "Make external/local late-bound region registration more explicit", "tree": {"sha": "31a3f034acc0da90982ce93b791374de44181211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31a3f034acc0da90982ce93b791374de44181211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4427af082797a1e477781efd09947bb27d9b19c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4427af082797a1e477781efd09947bb27d9b19c3", "html_url": "https://github.com/rust-lang/rust/commit/4427af082797a1e477781efd09947bb27d9b19c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4427af082797a1e477781efd09947bb27d9b19c3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f27bdf175034bd0455eb960fc0dc8262484f187b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f27bdf175034bd0455eb960fc0dc8262484f187b", "html_url": "https://github.com/rust-lang/rust/commit/f27bdf175034bd0455eb960fc0dc8262484f187b"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "482e10d520b76c8b36a323f9f3caa4c219042651", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 68, "deletions": 25, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/4427af082797a1e477781efd09947bb27d9b19c3/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4427af082797a1e477781efd09947bb27d9b19c3/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=4427af082797a1e477781efd09947bb27d9b19c3", "patch": "@@ -251,13 +251,9 @@ impl<'tcx> UniversalRegions<'tcx> {\n             region_mapping.push(fr);\n         });\n \n-        for_each_late_bound_region_in_scope(\n-            tcx,\n-            tcx.local_parent(closure_def_id),\n-            |r| {\n-                region_mapping.push(r);\n-            },\n-        );\n+        for_each_late_bound_region_in_recursive_scope(tcx, tcx.local_parent(closure_def_id), |r| {\n+            region_mapping.push(r);\n+        });\n \n         assert_eq!(\n             region_mapping.len(),\n@@ -345,7 +341,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // tests, and the resulting print-outs include def-ids\n                 // and other things that are not stable across tests!\n                 // So we just include the region-vid. Annoying.\n-                for_each_late_bound_region_in_scope(tcx, def_id.expect_local(), |r| {\n+                for_each_late_bound_region_in_recursive_scope(tcx, def_id.expect_local(), |r| {\n                     err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r)));\n                 });\n             }\n@@ -359,7 +355,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // FIXME: As above, we'd like to print out the region\n                 // `r` but doing so is not stable across architectures\n                 // and so forth.\n-                for_each_late_bound_region_in_scope(tcx, def_id.expect_local(), |r| {\n+                for_each_late_bound_region_in_recursive_scope(tcx, def_id.expect_local(), |r| {\n                     err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r)));\n                 });\n             }\n@@ -430,10 +426,19 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             // fn foo<'a>() {\n             //     let c = || { let x: &'a u32 = ...; }\n             // }\n-            self.infcx.replace_late_bound_regions_with_nll_infer_vars(\n+            for_each_late_bound_region_in_recursive_scope(\n+                self.infcx.tcx,\n                 self.infcx.tcx.local_parent(self.mir_def.did),\n-                &mut indices,\n+                |r| {\n+                    debug!(?r);\n+                    if !indices.indices.contains_key(&r) {\n+                        let region_vid = self.infcx.next_nll_region_var(FR);\n+                        debug!(?region_vid);\n+                        indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+                    }\n+                },\n             );\n+\n             // Any regions created during the execution of `defining_ty` or during the above\n             // late-bound region replacement are all considered 'extern' regions\n             self.infcx.num_region_vars()\n@@ -452,7 +457,14 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         );\n         // Converse of above, if this is a function/closure then the late-bound regions declared on its\n         // signature are local.\n-        self.infcx.replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices);\n+        for_each_late_bound_region_in_item(self.infcx.tcx, self.mir_def.did, |r| {\n+            debug!(?r);\n+            if !indices.indices.contains_key(&r) {\n+                let region_vid = self.infcx.next_nll_region_var(FR);\n+                debug!(?region_vid);\n+                indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+            }\n+        });\n \n         let (unnormalized_output_ty, mut unnormalized_input_tys) =\n             inputs_and_output.split_last().unwrap();\n@@ -695,7 +707,13 @@ trait InferCtxtExt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>;\n \n-    fn replace_late_bound_regions_with_nll_infer_vars(\n+    fn replace_late_bound_regions_with_nll_infer_vars_in_recursive_scope(\n+        &self,\n+        mir_def_id: LocalDefId,\n+        indices: &mut UniversalRegionIndices<'tcx>,\n+    );\n+\n+    fn replace_late_bound_regions_with_nll_infer_vars_in_item(\n         &self,\n         mir_def_id: LocalDefId,\n         indices: &mut UniversalRegionIndices<'tcx>,\n@@ -749,12 +767,28 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     /// set of late-bound regions and checks for any that we have not yet seen, adding them to the\n     /// inputs vector.\n     #[instrument(skip(self, indices))]\n-    fn replace_late_bound_regions_with_nll_infer_vars(\n+    fn replace_late_bound_regions_with_nll_infer_vars_in_recursive_scope(\n         &self,\n         mir_def_id: LocalDefId,\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) {\n-        for_each_late_bound_region_in_scope(self.tcx, mir_def_id, |r| {\n+        for_each_late_bound_region_in_recursive_scope(self.tcx, mir_def_id, |r| {\n+            debug!(?r);\n+            if !indices.indices.contains_key(&r) {\n+                let region_vid = self.next_nll_region_var(FR);\n+                debug!(?region_vid);\n+                indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+            }\n+        });\n+    }\n+\n+    #[instrument(skip(self, indices))]\n+    fn replace_late_bound_regions_with_nll_infer_vars_in_item(\n+        &self,\n+        mir_def_id: LocalDefId,\n+        indices: &mut UniversalRegionIndices<'tcx>,\n+    ) {\n+        for_each_late_bound_region_in_item(self.tcx, mir_def_id, |r| {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = self.next_nll_region_var(FR);\n@@ -805,10 +839,10 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     }\n }\n \n-/// Iterates over the late-bound regions defined on fn_def_id and all of its\n+/// Iterates over the late-bound regions defined on `mir_def_id` and all of its\n /// parents, up to the typeck root, and invokes `f` with the liberated form\n /// of each one.\n-fn for_each_late_bound_region_in_scope<'tcx>(\n+fn for_each_late_bound_region_in_recursive_scope<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mut mir_def_id: LocalDefId,\n     mut f: impl FnMut(ty::Region<'tcx>),\n@@ -817,14 +851,7 @@ fn for_each_late_bound_region_in_scope<'tcx>(\n \n     // Walk up the tree, collecting late-bound regions until we hit the typeck root\n     loop {\n-        for bound_var in tcx.late_bound_vars(tcx.hir().local_def_id_to_hir_id(mir_def_id)) {\n-            let ty::BoundVariableKind::Region(bound_region) = bound_var else { continue; };\n-            let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n-                scope: mir_def_id.to_def_id(),\n-                bound_region,\n-            }));\n-            f(liberated_region);\n-        }\n+        for_each_late_bound_region_in_item(tcx, mir_def_id, &mut f);\n \n         if mir_def_id.to_def_id() == typeck_root_def_id {\n             break;\n@@ -833,3 +860,19 @@ fn for_each_late_bound_region_in_scope<'tcx>(\n         }\n     }\n }\n+\n+/// Iterates over the late-bound regions defined on `mir_def_id` and all of its\n+/// parents, up to the typeck root, and invokes `f` with the liberated form\n+/// of each one.\n+fn for_each_late_bound_region_in_item<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    mir_def_id: LocalDefId,\n+    mut f: impl FnMut(ty::Region<'tcx>),\n+) {\n+    for bound_var in tcx.late_bound_vars(tcx.hir().local_def_id_to_hir_id(mir_def_id)) {\n+        let ty::BoundVariableKind::Region(bound_region) = bound_var else { continue; };\n+        let liberated_region = tcx\n+            .mk_region(ty::ReFree(ty::FreeRegion { scope: mir_def_id.to_def_id(), bound_region }));\n+        f(liberated_region);\n+    }\n+}"}]}