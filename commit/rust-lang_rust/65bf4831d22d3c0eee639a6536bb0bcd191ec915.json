{"sha": "65bf4831d22d3c0eee639a6536bb0bcd191ec915", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YmY0ODMxZDIyZDNjMGVlZTYzOWE2NTM2YmIwYmNkMTkxZWM5MTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-13T21:52:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-15T21:29:03Z"}, "message": "ast/hir: `MacroDef::legacy` -> `MacroDef::macro_rules`", "tree": {"sha": "edcc4b07b4ba85547f5b17d6032964da835c5922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edcc4b07b4ba85547f5b17d6032964da835c5922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65bf4831d22d3c0eee639a6536bb0bcd191ec915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65bf4831d22d3c0eee639a6536bb0bcd191ec915", "html_url": "https://github.com/rust-lang/rust/commit/65bf4831d22d3c0eee639a6536bb0bcd191ec915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65bf4831d22d3c0eee639a6536bb0bcd191ec915/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0f5df017368dc3f7cb458fc6d5a5e0420e1d2e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f5df017368dc3f7cb458fc6d5a5e0420e1d2e5", "html_url": "https://github.com/rust-lang/rust/commit/e0f5df017368dc3f7cb458fc6d5a5e0420e1d2e5"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "68960ba9fe920c3e9a977b3d610c6d59a5f4f431", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=65bf4831d22d3c0eee639a6536bb0bcd191ec915", "patch": "@@ -1450,7 +1450,7 @@ impl MacDelimiter {\n pub struct MacroDef {\n     pub body: P<MacArgs>,\n     /// `true` if macro was defined with `macro_rules`.\n-    pub legacy: bool,\n+    pub macro_rules: bool,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, Eq, PartialEq)]"}, {"sha": "aa2968b3cbe44dc3826869a720b0c25bd7872ffa", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=65bf4831d22d3c0eee639a6536bb0bcd191ec915", "patch": "@@ -591,7 +591,7 @@ pub fn noop_visit_mac<T: MutVisitor>(mac: &mut MacCall, vis: &mut T) {\n }\n \n pub fn noop_visit_macro_def<T: MutVisitor>(macro_def: &mut MacroDef, vis: &mut T) {\n-    let MacroDef { body, legacy: _ } = macro_def;\n+    let MacroDef { body, macro_rules: _ } = macro_def;\n     visit_mac_args(body, vis);\n }\n "}, {"sha": "458cb721d48343e4f9cde7c3abdd929b676ef2fc", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=65bf4831d22d3c0eee639a6536bb0bcd191ec915", "patch": "@@ -220,8 +220,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let mut vis = self.lower_visibility(&i.vis, None);\n         let attrs = self.lower_attrs(&i.attrs);\n \n-        if let ItemKind::MacroDef(MacroDef { ref body, legacy }) = i.kind {\n-            if !legacy || attr::contains_name(&i.attrs, sym::macro_export) {\n+        if let ItemKind::MacroDef(MacroDef { ref body, macro_rules }) = i.kind {\n+            if !macro_rules || attr::contains_name(&i.attrs, sym::macro_export) {\n                 let hir_id = self.lower_node_id(i.id);\n                 let body = P(self.lower_mac_args(body));\n                 self.exported_macros.push(hir::MacroDef {\n@@ -230,7 +230,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     attrs,\n                     hir_id,\n                     span: i.span,\n-                    ast: MacroDef { body, legacy },\n+                    ast: MacroDef { body, macro_rules },\n                 });\n             } else {\n                 self.non_exported_macro_attrs.extend(attrs.iter().cloned());"}, {"sha": "2a9847c900e94173add4b5aad763e2cea937412d", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=65bf4831d22d3c0eee639a6536bb0bcd191ec915", "patch": "@@ -366,7 +366,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, trait_alias, i.span, \"trait aliases are experimental\");\n             }\n \n-            ast::ItemKind::MacroDef(ast::MacroDef { legacy: false, .. }) => {\n+            ast::ItemKind::MacroDef(ast::MacroDef { macro_rules: false, .. }) => {\n                 let msg = \"`macro` is experimental\";\n                 gate_feature_post!(&self, decl_macro, i.span, msg);\n             }"}, {"sha": "b2e6ab7c5e7772a4af5863a4caad505c228ec25b", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=65bf4831d22d3c0eee639a6536bb0bcd191ec915", "patch": "@@ -1238,7 +1238,7 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::ItemKind::MacroDef(ref macro_def) => {\n-                let (kw, has_bang) = if macro_def.legacy {\n+                let (kw, has_bang) = if macro_def.macro_rules {\n                     (\"macro_rules\", true)\n                 } else {\n                     self.print_visibility(&item.vis);"}, {"sha": "3cad3ff55d91018517d7fd5562922b94870fa12e", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=65bf4831d22d3c0eee639a6536bb0bcd191ec915", "patch": "@@ -350,8 +350,8 @@ pub fn compile_declarative_macro(\n     let tt_spec = ast::Ident::new(sym::tt, def.span);\n \n     // Parse the macro_rules! invocation\n-    let (is_legacy, body) = match &def.kind {\n-        ast::ItemKind::MacroDef(macro_def) => (macro_def.legacy, macro_def.body.inner_tokens()),\n+    let (macro_rules, body) = match &def.kind {\n+        ast::ItemKind::MacroDef(def) => (def.macro_rules, def.body.inner_tokens()),\n         _ => unreachable!(),\n     };\n \n@@ -370,7 +370,7 @@ pub fn compile_declarative_macro(\n                     mbe::TokenTree::MetaVarDecl(def.span, rhs_nm, tt_spec),\n                 ],\n                 separator: Some(Token::new(\n-                    if is_legacy { token::Semi } else { token::Comma },\n+                    if macro_rules { token::Semi } else { token::Comma },\n                     def.span,\n                 )),\n                 kleene: mbe::KleeneToken::new(mbe::KleeneOp::OneOrMore, def.span),\n@@ -382,7 +382,7 @@ pub fn compile_declarative_macro(\n             DelimSpan::dummy(),\n             Lrc::new(mbe::SequenceRepetition {\n                 tts: vec![mbe::TokenTree::token(\n-                    if is_legacy { token::Semi } else { token::Comma },\n+                    if macro_rules { token::Semi } else { token::Comma },\n                     def.span,\n                 )],\n                 separator: None,\n@@ -456,7 +456,7 @@ pub fn compile_declarative_macro(\n     // that is not lint-checked and trigger the \"failed to process buffered lint here\" bug.\n     valid &= macro_check::check_meta_variables(sess, ast::CRATE_NODE_ID, def.span, &lhses, &rhses);\n \n-    let (transparency, transparency_error) = attr::find_transparency(&def.attrs, is_legacy);\n+    let (transparency, transparency_error) = attr::find_transparency(&def.attrs, macro_rules);\n     match transparency_error {\n         Some(TransparencyError::UnknownTransparency(value, span)) => {\n             diag.span_err(span, &format!(\"unknown macro transparency: `{}`\", value))"}, {"sha": "cb4a98a6b4f46506b662e50dca56649f3387b2cc", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=65bf4831d22d3c0eee639a6536bb0bcd191ec915", "patch": "@@ -1260,7 +1260,7 @@ impl<'a> Parser<'a> {\n         };\n \n         self.sess.gated_spans.gate(sym::decl_macro, lo.to(self.prev_token.span));\n-        Ok((ident, ItemKind::MacroDef(ast::MacroDef { body, legacy: false })))\n+        Ok((ident, ItemKind::MacroDef(ast::MacroDef { body, macro_rules: false })))\n     }\n \n     /// Is this unambiguously the start of a `macro_rules! foo` item defnition?\n@@ -1280,7 +1280,7 @@ impl<'a> Parser<'a> {\n         self.eat_semi_for_macro_if_needed(&body);\n         self.complain_if_pub_macro(vis, true);\n \n-        Ok((ident, ItemKind::MacroDef(ast::MacroDef { body, legacy: true })))\n+        Ok((ident, ItemKind::MacroDef(ast::MacroDef { body, macro_rules: true })))\n     }\n \n     /// Item macro invocations or `macro_rules!` definitions need inherited visibility."}, {"sha": "5c3631687848c6eae104eb1a3221498f7c36ba37", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=65bf4831d22d3c0eee639a6536bb0bcd191ec915", "patch": "@@ -920,7 +920,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n-        if attr::find_transparency(&md.attrs, md.ast.legacy).0 != Transparency::Opaque {\n+        if attr::find_transparency(&md.attrs, md.ast.macro_rules).0 != Transparency::Opaque {\n             self.update(md.hir_id, Some(AccessLevel::Public));\n             return;\n         }"}, {"sha": "e85741c114e16389d400a24167555502bcefefd5", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bf4831d22d3c0eee639a6536bb0bcd191ec915/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=65bf4831d22d3c0eee639a6536bb0bcd191ec915", "patch": "@@ -1098,10 +1098,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn define_macro(&mut self, item: &ast::Item) -> LegacyScope<'a> {\n         let parent_scope = self.parent_scope;\n         let expansion = parent_scope.expansion;\n-        let (ext, ident, span, is_legacy) = match &item.kind {\n+        let (ext, ident, span, macro_rules) = match &item.kind {\n             ItemKind::MacroDef(def) => {\n                 let ext = Lrc::new(self.r.compile_macro(item, self.r.session.edition()));\n-                (ext, item.ident, item.span, def.legacy)\n+                (ext, item.ident, item.span, def.macro_rules)\n             }\n             ItemKind::Fn(..) => match Self::proc_macro_stub(item) {\n                 Some((macro_kind, ident, span)) => {\n@@ -1118,7 +1118,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         self.r.macro_map.insert(def_id, ext);\n         self.r.local_macro_def_scopes.insert(item.id, parent_scope.module);\n \n-        if is_legacy {\n+        if macro_rules {\n             let ident = ident.modern();\n             self.r.macro_names.insert(ident);\n             let is_macro_export = attr::contains_name(&item.attrs, sym::macro_export);"}]}