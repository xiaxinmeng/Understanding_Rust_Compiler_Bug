{"sha": "95539518ec16a4b2599f8046d51bc0e36bc9e8b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NTM5NTE4ZWMxNmE0YjI1OTlmODA0NmQ1MWJjMGUzNmJjOWU4YjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-24T11:47:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-24T11:47:53Z"}, "message": "Rustfmt", "tree": {"sha": "3a08fc13a060d41a04ddc46de01441a1eb867fb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a08fc13a060d41a04ddc46de01441a1eb867fb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95539518ec16a4b2599f8046d51bc0e36bc9e8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95539518ec16a4b2599f8046d51bc0e36bc9e8b2", "html_url": "https://github.com/rust-lang/rust/commit/95539518ec16a4b2599f8046d51bc0e36bc9e8b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89702b9917e183dbb3037abadee6da1773c68f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/89702b9917e183dbb3037abadee6da1773c68f98", "html_url": "https://github.com/rust-lang/rust/commit/89702b9917e183dbb3037abadee6da1773c68f98"}], "stats": {"total": 130, "additions": 79, "deletions": 51}, "files": [{"sha": "97f97f255622abff1023b74601ada82f704966ef", "filename": "src/base.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=95539518ec16a4b2599f8046d51bc0e36bc9e8b2", "patch": "@@ -18,9 +18,8 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n ) {\n     match mono_item {\n         MonoItem::Fn(inst) => {\n-            let _inst_guard = PrintOnPanic(|| {\n-                format!(\"{:?} {}\", inst, tcx.symbol_name(inst).as_str())\n-            });\n+            let _inst_guard =\n+                PrintOnPanic(|| format!(\"{:?} {}\", inst, tcx.symbol_name(inst).as_str()));\n             let _mir_guard = PrintOnPanic(|| {\n                 match inst.def {\n                     InstanceDef::Item(_)\n@@ -377,8 +376,9 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     if *variant_index != dataful_variant {\n                         let niche = place.place_field(fx, mir::Field::new(0));\n                         //let niche_llty = niche.layout.immediate_llvm_type(bx.cx);\n-                        let niche_value = ((variant_index.as_u32() - niche_variants.start().as_u32()) as u128)\n-                            .wrapping_add(niche_start);\n+                        let niche_value =\n+                            ((variant_index.as_u32() - niche_variants.start().as_u32()) as u128)\n+                                .wrapping_add(niche_start);\n                         // FIXME(eddyb) Check the actual primitive type here.\n                         let niche_llval = if niche_value == 0 {\n                             CValue::const_val(fx, niche.layout().ty, 0)\n@@ -606,7 +606,10 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let usize_type = fx.clif_type(fx.tcx.types.usize).unwrap();\n                     let layout = fx.layout_of(content_ty);\n                     let llsize = fx.bcx.ins().iconst(usize_type, layout.size.bytes() as i64);\n-                    let llalign = fx.bcx.ins().iconst(usize_type, layout.align.abi.bytes() as i64);\n+                    let llalign = fx\n+                        .bcx\n+                        .ins()\n+                        .iconst(usize_type, layout.align.abi.bytes() as i64);\n                     let box_layout = fx.layout_of(fx.tcx.mk_box(content_ty));\n \n                     // Allocate space:\n@@ -688,9 +691,12 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n     }\n     match layout.variants {\n         layout::Variants::Single { index } => {\n-            let discr_val = layout.ty.ty_adt_def().map_or(index.as_u32() as u128, |def| {\n-                def.discriminant_for_variant(fx.tcx, index).val\n-            });\n+            let discr_val = layout\n+                .ty\n+                .ty_adt_def()\n+                .map_or(index.as_u32() as u128, |def| {\n+                    def.discriminant_for_variant(fx.tcx, index).val\n+                });\n             return CValue::const_val(fx, dest_layout.ty, discr_val as u64 as i64);\n         }\n         layout::Variants::Tagged { .. } | layout::Variants::NicheFilling { .. } => {}"}, {"sha": "a74abc8ef24ca84e87164dd2287ff9029587b981", "filename": "src/common.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=95539518ec16a4b2599f8046d51bc0e36bc9e8b2", "patch": "@@ -389,15 +389,18 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n                 // &'a T -> &'b T is allowed\n             }\n             (ty::FnPtr(_), ty::FnPtr(_)) => {\n-                let from_sig = fx.tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &from_ty.fn_sig(fx.tcx));\n-                let to_sig = fx.tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &to_ty.fn_sig(fx.tcx));\n+                let from_sig = fx.tcx.normalize_erasing_late_bound_regions(\n+                    ParamEnv::reveal_all(),\n+                    &from_ty.fn_sig(fx.tcx),\n+                );\n+                let to_sig = fx.tcx.normalize_erasing_late_bound_regions(\n+                    ParamEnv::reveal_all(),\n+                    &to_ty.fn_sig(fx.tcx),\n+                );\n                 assert_eq!(\n-                    from_sig,\n-                    to_sig,\n+                    from_sig, to_sig,\n                     \"Can't write fn ptr with incompatible sig {:?} to place with sig {:?}\\n\\n{:#?}\",\n-                    from_sig,\n-                    to_sig,\n-                    fx,\n+                    from_sig, to_sig, fx,\n                 );\n                 // fn(&T) -> for<'l> fn(&'l T) is allowed\n             }\n@@ -577,7 +580,11 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn downcast_variant(self, fx: &FunctionCx<'a, 'tcx, impl Backend>, variant: VariantIdx) -> Self {\n+    pub fn downcast_variant(\n+        self,\n+        fx: &FunctionCx<'a, 'tcx, impl Backend>,\n+        variant: VariantIdx,\n+    ) -> Self {\n         let layout = self.layout().for_variant(fx, variant);\n         self.unchecked_cast_to(layout)\n     }"}, {"sha": "7fef96a39b4c26580936767f62707ddbd309b6d7", "filename": "src/constant.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=95539518ec16a4b2599f8046d51bc0e36bc9e8b2", "patch": "@@ -133,13 +133,23 @@ fn trans_const_place<'a, 'tcx: 'a>(\n             ty::ParamEnv::reveal_all(),\n             TransPlaceInterpreter,\n         );\n-        ecx.push_stack_frame(fx.instance, DUMMY_SP, fx.mir, None, StackPopCleanup::None { cleanup: false }).unwrap();\n-        let op = ecx.eval_operand(&Operand::Constant(Box::new(Constant {\n-            span: DUMMY_SP,\n-            ty: const_.ty,\n-            user_ty: None,\n-            literal: const_,\n-        })), None)?;\n+        ecx.push_stack_frame(\n+            fx.instance,\n+            DUMMY_SP,\n+            fx.mir,\n+            None,\n+            StackPopCleanup::None { cleanup: false },\n+        )\n+        .unwrap();\n+        let op = ecx.eval_operand(\n+            &Operand::Constant(Box::new(Constant {\n+                span: DUMMY_SP,\n+                ty: const_.ty,\n+                user_ty: None,\n+                literal: const_,\n+            })),\n+            None,\n+        )?;\n         let ptr = ecx.allocate(op.layout, MemoryKind::Stack)?;\n         ecx.copy_op(op, ptr.into())?;\n         let alloc = ecx.memory().get(ptr.to_ptr()?.alloc_id)?;"}, {"sha": "04e0af9cc40a97ed1c1aaedca65c32693d8feb96", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=95539518ec16a4b2599f8046d51bc0e36bc9e8b2", "patch": "@@ -1,22 +1,17 @@\n-#![feature(\n-    rustc_private,\n-    macro_at_most_once_rep,\n-    never_type,\n-    decl_macro,\n-)]\n+#![feature(rustc_private, macro_at_most_once_rep, never_type, decl_macro)]\n #![allow(intra_doc_link_resolution_failure)]\n \n-extern crate syntax;\n+extern crate log;\n extern crate rustc;\n extern crate rustc_allocator;\n extern crate rustc_codegen_ssa;\n extern crate rustc_codegen_utils;\n+extern crate rustc_data_structures;\n+extern crate rustc_fs_util;\n extern crate rustc_incremental;\n extern crate rustc_mir;\n extern crate rustc_target;\n-extern crate rustc_data_structures;\n-extern crate rustc_fs_util;\n-extern crate log;\n+extern crate syntax;\n \n use std::any::Any;\n use std::fs::File;\n@@ -29,10 +24,10 @@ use rustc::session::{\n     CompileIncomplete,\n };\n use rustc::ty::query::Providers;\n+use rustc_codegen_ssa::back::linker::LinkerInfo;\n+use rustc_codegen_ssa::CrateInfo;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::out_filename;\n-use rustc_codegen_ssa::CrateInfo;\n-use rustc_codegen_ssa::back::linker::LinkerInfo;\n \n use cranelift::codegen::settings;\n use cranelift_faerie::*;\n@@ -83,8 +78,8 @@ mod prelude {\n     };\n     pub use rustc_mir::monomorphize::{collector, MonoItem};\n \n-    pub use rustc_codegen_ssa::{CodegenResults, CompiledModule, ModuleKind};\n     pub use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n+    pub use rustc_codegen_ssa::{CodegenResults, CompiledModule, ModuleKind};\n \n     pub use cranelift::codegen::ir::{\n         condcodes::IntCC, function::Function, ExternalName, FuncRef, Inst, StackSlot,\n@@ -183,13 +178,14 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         match tcx.sess.opts.optimize {\n             OptLevel::No => {\n                 flags_builder.set(\"opt_level\", \"fastest\").unwrap();\n-            },\n-            OptLevel::Less | OptLevel::Default => {},\n+            }\n+            OptLevel::Less | OptLevel::Default => {}\n             OptLevel::Aggressive => {\n                 flags_builder.set(\"opt_level\", \"best\").unwrap();\n-            },\n+            }\n             OptLevel::Size | OptLevel::SizeMin => {\n-                tcx.sess.warn(\"Optimizing for size is not supported. Just ignoring the request\");\n+                tcx.sess\n+                    .warn(\"Optimizing for size is not supported. Just ignoring the request\");\n             }\n         }\n "}, {"sha": "6cc5e7b802e4d2abb94636d7d344a983b4b830a7", "filename": "src/link.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink.rs?ref=95539518ec16a4b2599f8046d51bc0e36bc9e8b2", "patch": "@@ -9,8 +9,8 @@ use rustc::session::config::{self, CrateType, DebugInfo, RUST_CGU_EXT};\n use rustc::session::search_paths::PathKind;\n use rustc::session::Session;\n use rustc_codegen_ssa::back::command::Command;\n-use rustc_codegen_ssa::back::linker::*;\n use rustc_codegen_ssa::back::link::*;\n+use rustc_codegen_ssa::back::linker::*;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n \n@@ -27,11 +27,15 @@ pub(crate) fn link_rlib(sess: &Session, res: &CodegenResults, output_name: PathB\n         if let Some(ref object_path) = module.object {\n             let object = File::open(object_path).expect(\"Someone deleted our object file\");\n             let object_len = object.metadata().unwrap().len();\n-            builder.append(\n-                &ar::Header::new((module.name.to_string() +  RUST_CGU_EXT).into_bytes(), object_len),\n-                object,\n-            )\n-            .unwrap();\n+            builder\n+                .append(\n+                    &ar::Header::new(\n+                        (module.name.to_string() + RUST_CGU_EXT).into_bytes(),\n+                        object_len,\n+                    ),\n+                    object,\n+                )\n+                .unwrap();\n         }\n     }\n "}, {"sha": "d94a852153e456ec0f2058381f0a29df34cd99e9", "filename": "src/trap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=95539518ec16a4b2599f8046d51bc0e36bc9e8b2", "patch": "@@ -1,4 +1,5 @@\n use cranelift::prelude::*;\n+\n use cranelift::codegen::ir::TrapCode;\n \n /// Trap code: user0"}, {"sha": "8333cd1344c7964944ddacf5be4cab3e07fdca81", "filename": "src/unimpl.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Funimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95539518ec16a4b2599f8046d51bc0e36bc9e8b2/src%2Funimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funimpl.rs?ref=95539518ec16a4b2599f8046d51bc0e36bc9e8b2", "patch": "@@ -21,16 +21,20 @@ pub macro unimpl($($tt:tt)*) {\n }\n \n pub fn try_unimpl(tcx: TyCtxt, log: &mut Option<File>, f: impl FnOnce()) {\n-    let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| {\n-        f()\n-    }));\n+    let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| f()));\n \n     if let Err(err) = res {\n         SPAN_STACK.with(|span_stack| {\n             match err.downcast::<NonFatal>() {\n                 Ok(non_fatal) => {\n                     if cfg!(debug_assertions) {\n-                        writeln!(log.as_mut().unwrap(), \"{} at {:?}\", &non_fatal.0, span_stack.borrow()).unwrap();\n+                        writeln!(\n+                            log.as_mut().unwrap(),\n+                            \"{} at {:?}\",\n+                            &non_fatal.0,\n+                            span_stack.borrow()\n+                        )\n+                        .unwrap();\n                     }\n                     tcx.sess.err(&non_fatal.0)\n                 }"}]}