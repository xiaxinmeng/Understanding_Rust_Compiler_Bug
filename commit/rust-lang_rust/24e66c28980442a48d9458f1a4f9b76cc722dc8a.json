{"sha": "24e66c28980442a48d9458f1a4f9b76cc722dc8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZTY2YzI4OTgwNDQyYTQ4ZDk0NThmMWE0ZjliNzZjYzcyMmRjOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-06T04:04:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-06T04:04:33Z"}, "message": "Auto merge of #55518 - alexcrichton:smaller-wasm, r=sfackler\n\nstd: Improve codegen size of accessing TLS\n\nSome code in the TLS implementation in libstd stores `Some(val)` into an\n`&mut Option<T>` (effectively) and then pulls out `&T`, but it currently\nuses `.unwrap()` which can codegen into a panic even though it can never\npanic. With sufficient optimizations enabled (like LTO) the compiler can\nsee through this but this commit helps it along in normal mode\n(`--release` with Cargo by default) to avoid codegen'ing the panic path.\n\nThis ends up improving the optimized codegen on wasm by ensuring that a\ncall to panic pulling in more file size doesn't stick around.", "tree": {"sha": "c1c32d1146a30ac22231e69f4e5cb67f2f9abe6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1c32d1146a30ac22231e69f4e5cb67f2f9abe6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24e66c28980442a48d9458f1a4f9b76cc722dc8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24e66c28980442a48d9458f1a4f9b76cc722dc8a", "html_url": "https://github.com/rust-lang/rust/commit/24e66c28980442a48d9458f1a4f9b76cc722dc8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24e66c28980442a48d9458f1a4f9b76cc722dc8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa926729e68ef03316e81c9309b670a25e37b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa926729e68ef03316e81c9309b670a25e37b48", "html_url": "https://github.com/rust-lang/rust/commit/8aa926729e68ef03316e81c9309b670a25e37b48"}, {"sha": "0c3d08e9676a7defd16b88307838f7294d28c3e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c3d08e9676a7defd16b88307838f7294d28c3e5", "html_url": "https://github.com/rust-lang/rust/commit/0c3d08e9676a7defd16b88307838f7294d28c3e5"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "0e6887a508223331201cca2a0363240d99a312dd", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=24e66c28980442a48d9458f1a4f9b76cc722dc8a", "patch": "@@ -405,6 +405,7 @@ mod platform {\n \n     #[cfg(not(target_feature = \"atomics\"))]\n     mod lock {\n+        #[inline]\n         pub fn lock() {} // no atomics, no threads, that's easy!\n     }\n }"}, {"sha": "ccbead7cc2f77f3d77d52ba20bb16e6b11feac72", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=24e66c28980442a48d9458f1a4f9b76cc722dc8a", "patch": "@@ -14,6 +14,7 @@\n \n use cell::UnsafeCell;\n use fmt;\n+use hint;\n use mem;\n \n /// A thread local storage key which owns its contents.\n@@ -275,7 +276,15 @@ impl<T: 'static> LocalKey<T> {\n         // operations a little differently and make this safe to call.\n         mem::replace(&mut *ptr, Some(value));\n \n-        (*ptr).as_ref().unwrap()\n+        // After storing `Some` we want to get a reference to the contents of\n+        // what we just stored. While we could use `unwrap` here and it should\n+        // always work it empirically doesn't seem to always get optimized away,\n+        // which means that using something like `try_with` can pull in\n+        // panicking code and cause a large size bloat.\n+        match *ptr {\n+            Some(ref x) => x,\n+            None => hint::unreachable_unchecked(),\n+        }\n     }\n \n     /// Acquires a reference to the value in this TLS key."}, {"sha": "48b530c9957254528422e007a40075a1954d4f1d", "filename": "src/test/run-make/wasm-panic-small/Makefile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile?ref=24e66c28980442a48d9458f1a4f9b76cc722dc8a", "patch": "@@ -11,6 +11,9 @@ all:\n \t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown --cfg c\n \twc -c < $(TMPDIR)/foo.wasm\n \t[ \"`wc -c < $(TMPDIR)/foo.wasm`\" -lt \"5120\" ]\n+\t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown --cfg d\n+\twc -c < $(TMPDIR)/foo.wasm\n+\t[ \"`wc -c < $(TMPDIR)/foo.wasm`\" -lt \"5120\" ]\n else\n all:\n endif"}, {"sha": "441e92976a39671283c142f531172d8cf49504f1", "filename": "src/test/run-make/wasm-panic-small/foo.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e66c28980442a48d9458f1a4f9b76cc722dc8a/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs?ref=24e66c28980442a48d9458f1a4f9b76cc722dc8a", "patch": "@@ -27,3 +27,11 @@ pub fn foo() {\n pub fn foo() {\n     panic!(\"{}\", \"a\");\n }\n+\n+#[no_mangle]\n+#[cfg(d)]\n+pub fn foo() -> usize {\n+    use std::cell::Cell;\n+    thread_local!(static A: Cell<Vec<u32>> = Cell::new(Vec::new()));\n+    A.try_with(|x| x.replace(Vec::new()).len()).unwrap_or(0)\n+}"}]}