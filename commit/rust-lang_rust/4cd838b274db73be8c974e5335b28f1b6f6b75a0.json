{"sha": "4cd838b274db73be8c974e5335b28f1b6f6b75a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZDgzOGIyNzRkYjczYmU4Yzk3NGU1MzM1YjI4ZjFiNmY2Yjc1YTA=", "commit": {"author": {"name": "David LeGare", "email": "excaliburhissheath@gmail.com", "date": "2017-05-19T02:10:15Z"}, "committer": {"name": "David LeGare", "email": "excaliburhissheath@gmail.com", "date": "2017-05-19T02:10:15Z"}, "message": "Normalize docs in windows::ffi and windows::fs\n\n- Remove `()` parens when referencing functions in docs.\n- Change some examples to be no_run instead of ignore.\n- Normalize style in examples for `OpenOptionsExt`.\n- Fix typo in windows mod docs.", "tree": {"sha": "50fa4229d9c383e9649d9996bc8873431971f10c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50fa4229d9c383e9649d9996bc8873431971f10c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cd838b274db73be8c974e5335b28f1b6f6b75a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd838b274db73be8c974e5335b28f1b6f6b75a0", "html_url": "https://github.com/rust-lang/rust/commit/4cd838b274db73be8c974e5335b28f1b6f6b75a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cd838b274db73be8c974e5335b28f1b6f6b75a0/comments", "author": {"login": "randomPoison", "id": 1900829, "node_id": "MDQ6VXNlcjE5MDA4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1900829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomPoison", "html_url": "https://github.com/randomPoison", "followers_url": "https://api.github.com/users/randomPoison/followers", "following_url": "https://api.github.com/users/randomPoison/following{/other_user}", "gists_url": "https://api.github.com/users/randomPoison/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomPoison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomPoison/subscriptions", "organizations_url": "https://api.github.com/users/randomPoison/orgs", "repos_url": "https://api.github.com/users/randomPoison/repos", "events_url": "https://api.github.com/users/randomPoison/events{/privacy}", "received_events_url": "https://api.github.com/users/randomPoison/received_events", "type": "User", "site_admin": false}, "committer": {"login": "randomPoison", "id": 1900829, "node_id": "MDQ6VXNlcjE5MDA4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1900829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomPoison", "html_url": "https://github.com/randomPoison", "followers_url": "https://api.github.com/users/randomPoison/followers", "following_url": "https://api.github.com/users/randomPoison/following{/other_user}", "gists_url": "https://api.github.com/users/randomPoison/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomPoison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomPoison/subscriptions", "organizations_url": "https://api.github.com/users/randomPoison/orgs", "repos_url": "https://api.github.com/users/randomPoison/repos", "events_url": "https://api.github.com/users/randomPoison/events{/privacy}", "received_events_url": "https://api.github.com/users/randomPoison/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5135cc854156ae149f6ad50a3b5bc36c7519e3e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5135cc854156ae149f6ad50a3b5bc36c7519e3e6", "html_url": "https://github.com/rust-lang/rust/commit/5135cc854156ae149f6ad50a3b5bc36c7519e3e6"}], "stats": {"total": 121, "additions": 64, "deletions": 57}, "files": [{"sha": "3f6c2827a3f937242b2522ccf29904545e6b39d8", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4cd838b274db73be8c974e5335b28f1b6f6b75a0/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd838b274db73be8c974e5335b28f1b6f6b75a0/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=4cd838b274db73be8c974e5335b28f1b6f6b75a0", "patch": "@@ -26,7 +26,7 @@ pub trait OsStringExt {\n     /// Creates an `OsString` from a potentially ill-formed UTF-16 slice of\n     /// 16-bit code units.\n     ///\n-    /// This is lossless: calling [`encode_wide()`] on the resulting string\n+    /// This is lossless: calling [`encode_wide`] on the resulting string\n     /// will always return the original code units.\n     ///\n     /// # Examples\n@@ -41,7 +41,7 @@ pub trait OsStringExt {\n     /// let string = OsString::from_wide(&source[..]);\n     /// ```\n     ///\n-    /// [`encode_wide()`]: ./trait.OsStrExt.html#tymethod.encode_wide\n+    /// [`encode_wide`]: ./trait.OsStrExt.html#tymethod.encode_wide\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_wide(wide: &[u16]) -> Self;\n }\n@@ -59,8 +59,8 @@ pub trait OsStrExt {\n     /// Re-encodes an `OsStr` as a wide character sequence, i.e. potentially\n     /// ill-formed UTF-16.\n     ///\n-    /// This is lossless: calling [`OsString::from_wide()`] and then\n-    /// `encode_wide()` on the result will yield the original code units.\n+    /// This is lossless: calling [`OsString::from_wide`] and then\n+    /// `encode_wide` on the result will yield the original code units.\n     /// Note that the encoding does not add a final null terminator.\n     ///\n     /// # Examples\n@@ -78,7 +78,7 @@ pub trait OsStrExt {\n     /// assert_eq!(&source[..], &result[..]);\n     /// ```\n     ///\n-    /// [`OsString::from_wide()`]: ./trait.OsStringExt.html#tymethod.from_wide\n+    /// [`OsString::from_wide`]: ./trait.OsStringExt.html#tymethod.from_wide\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn encode_wide(&self) -> EncodeWide;\n }"}, {"sha": "34f3a0196cedfa16d05ae8df0d876d0e4c917866", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 58, "deletions": 51, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/4cd838b274db73be8c974e5335b28f1b6f6b75a0/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd838b274db73be8c974e5335b28f1b6f6b75a0/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=4cd838b274db73be8c974e5335b28f1b6f6b75a0", "patch": "@@ -40,7 +40,7 @@ pub trait FileExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::fs::File;\n     /// use std::os::windows::prelude::*;\n@@ -75,7 +75,7 @@ pub trait FileExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs::File;\n     /// use std::os::windows::prelude::*;\n     ///\n@@ -120,10 +120,10 @@ pub trait OpenOptionsExt {\n     ///\n     /// ```no_run\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n+    /// use std::os::windows::prelude::*;\n     ///\n     /// // Open without read and write permission, for example if you only need\n-    /// // to call `stat()` on the file\n+    /// // to call `stat` on the file\n     /// let file = OpenOptions::new().access_mode(0).open(\"foo.txt\");\n     /// ```\n     ///\n@@ -145,13 +145,14 @@ pub trait OpenOptionsExt {\n     ///\n     /// ```no_run\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n+    /// use std::os::windows::prelude::*;\n     ///\n     /// // Do not allow others to read or modify this file while we have it open\n     /// // for writing.\n-    /// let file = OpenOptions::new().write(true)\n-    ///                              .share_mode(0)\n-    ///                              .open(\"foo.txt\");\n+    /// let file = OpenOptions::new()\n+    ///     .write(true)\n+    ///     .share_mode(0)\n+    ///     .open(\"foo.txt\");\n     /// ```\n     ///\n     /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n@@ -170,13 +171,15 @@ pub trait OpenOptionsExt {\n     ///\n     /// ```ignore\n     /// extern crate winapi;\n+    ///\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n+    /// use std::os::windows::prelude::*;\n     ///\n-    /// let mut options = OpenOptions::new();\n-    /// options.create(true).write(true);\n-    /// options.custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE);\n-    /// let file = options.open(\"foo.txt\");\n+    /// let file = OpenOptions::new()\n+    ///     .create(true)\n+    ///     .write(true)\n+    ///     .custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE)\n+    ///     .open(\"foo.txt\");\n     /// ```\n     ///\n     /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n@@ -203,12 +206,15 @@ pub trait OpenOptionsExt {\n     ///\n     /// ```ignore\n     /// extern crate winapi;\n+    ///\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n+    /// use std::os::windows::prelude::*;\n     ///\n-    /// let file = OpenOptions::new().write(true).create(true)\n-    ///                              .attributes(winapi::FILE_ATTRIBUTE_HIDDEN)\n-    ///                              .open(\"foo.txt\");\n+    /// let file = OpenOptions::new()\n+    ///     .write(true)\n+    ///     .create(true)\n+    ///     .attributes(winapi::FILE_ATTRIBUTE_HIDDEN)\n+    ///     .open(\"foo.txt\");\n     /// ```\n     ///\n     /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n@@ -226,17 +232,18 @@ pub trait OpenOptionsExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```ignore\n+    /// ```no_run\n     /// use std::fs::OpenOptions;\n-    /// use std::os::windows::fs::OpenOptionsExt;\n+    /// use std::os::windows::prelude::*;\n     ///\n-    /// let options = OpenOptions::new();\n-    /// options.write(true).create(true);\n+    /// let file = OpenOptions::new()\n+    ///     .write(true)\n+    ///     .create(true)\n     ///\n-    /// // Sets the flag value to `SecurityIdentification`.\n-    /// options.security_qos_flags(1);\n+    ///     // Sets the flag value to `SecurityIdentification`.\n+    ///     options.security_qos_flags(1)\n     ///\n-    /// let file = options.open(\"foo.txt\");\n+    ///     .open(\"foo.txt\");\n     /// ```\n     ///\n     /// [`CreateFile`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858.aspx\n@@ -289,15 +296,15 @@ pub trait MetadataExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```ignore\n+    /// ```no_run\n     /// use std::io;\n-    /// use std::io::prelude::*;\n-    /// use std::fs::File;\n+    /// use std::fs;\n     /// use std::os::windows::prelude::*;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut file = File::open(\"foo.txt\")?;\n-    /// let attributes = file.file_attributes();\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let attributes = metadata.file_attributes();\n+    /// # Ok(())\n     /// # }\n     /// ```\n     ///\n@@ -319,15 +326,15 @@ pub trait MetadataExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```ignore\n+    /// ```no_run\n     /// use std::io;\n-    /// use std::io::prelude::*;\n-    /// use std::fs::File;\n+    /// use std::fs;\n     /// use std::os::windows::prelude::*;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut file = File::open(\"foo.txt\")?;\n-    /// let creation_time = file.creation_time();\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let creation_time = metadata.creation_time();\n+    /// # Ok(())\n     /// # }\n     /// ```\n     ///\n@@ -354,15 +361,15 @@ pub trait MetadataExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```ignore\n+    /// ```no_run\n     /// use std::io;\n-    /// use std::io::prelude::*;\n-    /// use std::fs::File;\n+    /// use std::fs;\n     /// use std::os::windows::prelude::*;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut file = File::open(\"foo.txt\")?;\n-    /// let last_access_time = file.last_access_time();\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let last_access_time = metadata.last_access_time();\n+    /// # Ok(())\n     /// # }\n     /// ```\n     ///\n@@ -387,15 +394,15 @@ pub trait MetadataExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```ignore\n+    /// ```no_run\n     /// use std::io;\n-    /// use std::io::prelude::*;\n-    /// use std::fs::File;\n+    /// use std::fs;\n     /// use std::os::windows::prelude::*;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut file = File::open(\"foo.txt\")?;\n-    /// let last_write_time = file.last_write_time();\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let last_write_time = metadata.last_write_time();\n+    /// # Ok(())\n     /// # }\n     /// ```\n     ///\n@@ -410,15 +417,15 @@ pub trait MetadataExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```ignore\n+    /// ```no_run\n     /// use std::io;\n-    /// use std::io::prelude::*;\n-    /// use std::fs::File;\n+    /// use std::fs;\n     /// use std::os::windows::prelude::*;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut file = File::open(\"foo.txt\")?;\n-    /// let file_size = file.file_size();\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// let file_size = metadata.file_size();\n+    /// # Ok(())\n     /// # }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n@@ -441,7 +448,7 @@ impl MetadataExt for Metadata {\n ///\n /// # Examples\n ///\n-/// ```ignore\n+/// ```no_run\n /// use std::os::windows::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n@@ -462,7 +469,7 @@ pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)\n ///\n /// # Examples\n ///\n-/// ```ignore\n+/// ```no_run\n /// use std::os::windows::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {"}, {"sha": "11b1337a8aec0b933965d39c9cb1b070ad0a44a5", "filename": "src/libstd/sys/windows/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cd838b274db73be8c974e5335b28f1b6f6b75a0/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd838b274db73be8c974e5335b28f1b6f6b75a0/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs?ref=4cd838b274db73be8c974e5335b28f1b6f6b75a0", "patch": "@@ -13,7 +13,7 @@\n //! Provides access to platform-level information for Windows, and exposes\n //! Windows-specific idioms that would otherwise be inappropriate as part\n //! the core `std` library. These extensions allow developers to use\n-//! `std` types and idioms with Windows in a way that the noraml\n+//! `std` types and idioms with Windows in a way that the normal\n //! platform-agnostic idioms would not normally support.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}]}