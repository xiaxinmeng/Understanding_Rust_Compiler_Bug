{"sha": "b27d59d083a97e7253bcc8a040bc606ae0725fc4", "node_id": "C_kwDOAAsO6NoAKGIyN2Q1OWQwODNhOTdlNzI1M2JjYzhhMDQwYmM2MDZhZTA3MjVmYzQ", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-12-15T11:50:06Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-01-21T08:33:38Z"}, "message": "replace paths in PathSet with a dedicated TaskPath struct", "tree": {"sha": "ad67857bcd4198cc5cb86d7de4181136bb7efb63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad67857bcd4198cc5cb86d7de4181136bb7efb63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b27d59d083a97e7253bcc8a040bc606ae0725fc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmHqb+IACgkQzXazX3c0\ndp5vfBAAn7wSpA5nrHNaMMs8c00Oyjx3j1br59CC/76b749MtkTuxE4jIIcTG/Ef\nAEGeSoMkx3fGvmLlVUYnx0X1LSrcu3giSgNvEs9MWmU4Man92+BgyannoSq2p2WC\ne3wZGAsajOhCNws/TPUhr7B5KQ4Z8aLc4kGi6gyQlNUpqfrdq5JeFDgyNX9uYdtP\ntDRRC/8RhVeiqXpKtiGURsQuMW4pUCDl8w/qABOKSciP26IT88NmQTmzwWyQaLvU\nOZslR2urijkTkXxWWAzpUDqjj6KWLnoX3oIn0/2QwBUBi0HCHXh0BCzeT8Wcm90g\nEUpceGTfzGLH4vrvl/fG71vayi2dC84P4BRwmy3yfUcZaIn2qWPprvVUf7Bn+vIu\nWKWcsd+UEx2a7wU+nycM1Jvho4HoT6ap3rhLtKBEndG43pK5k++K6WFChmK+ox4B\nChzm8C+hAr6V3MLTo8V33UHKEDc84luVLbIz3N9pHzVUujd3vhQC9CWTR3wZnKgI\nhfuKAn6P+fAKU+rMEt//e/7/m4XjO5OWh0jg98YRJbPGy/ZD3nXH7bPvydvbhUAp\nFFmc8AKd3L7Cu2of4yIVwYPW0PksbGyyQyjzy3TnGIPZBHxOoF0M14Zeh4gy2lkf\nWqyibXOhTzyITjnBCrKQH0I/EHD9YK6igVkpidouTl/7loltQks=\n=FYuh\n-----END PGP SIGNATURE-----", "payload": "tree ad67857bcd4198cc5cb86d7de4181136bb7efb63\nparent 523be2e05da322daaecf1ecc8f2c0d625f5f46e3\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1639569006 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1642754018 +0100\n\nreplace paths in PathSet with a dedicated TaskPath struct\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b27d59d083a97e7253bcc8a040bc606ae0725fc4", "html_url": "https://github.com/rust-lang/rust/commit/b27d59d083a97e7253bcc8a040bc606ae0725fc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b27d59d083a97e7253bcc8a040bc606ae0725fc4/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "523be2e05da322daaecf1ecc8f2c0d625f5f46e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/523be2e05da322daaecf1ecc8f2c0d625f5f46e3", "html_url": "https://github.com/rust-lang/rust/commit/523be2e05da322daaecf1ecc8f2c0d625f5f46e3"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "c20177c92309d8de8893346bb2b6203a95ceaf8c", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b27d59d083a97e7253bcc8a040bc606ae0725fc4/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27d59d083a97e7253bcc8a040bc606ae0725fc4/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b27d59d083a97e7253bcc8a040bc606ae0725fc4", "patch": "@@ -107,6 +107,18 @@ struct StepDescription {\n     name: &'static str,\n }\n \n+#[derive(Debug, Clone, PartialOrd, Ord, PartialEq, Eq)]\n+pub struct TaskPath {\n+    pub path: PathBuf,\n+    pub module: Option<String>,\n+}\n+\n+impl TaskPath {\n+    pub fn parse(path: impl Into<PathBuf>) -> TaskPath {\n+        TaskPath { path: path.into(), module: None }\n+    }\n+}\n+\n /// Collection of paths used to match a task rule.\n #[derive(Debug, Clone, PartialOrd, Ord, PartialEq, Eq)]\n pub enum PathSet {\n@@ -115,14 +127,14 @@ pub enum PathSet {\n     /// These are generally matched as a path suffix. For example, a\n     /// command-line value of `libstd` will match if `src/libstd` is in the\n     /// set.\n-    Set(BTreeSet<PathBuf>),\n+    Set(BTreeSet<TaskPath>),\n     /// A \"suite\" of paths.\n     ///\n     /// These can match as a path suffix (like `Set`), or as a prefix. For\n     /// example, a command-line value of `src/test/ui/abi/variadic-ffi.rs`\n     /// will match `src/test/ui`. A command-line value of `ui` would also\n     /// match `src/test/ui`.\n-    Suite(PathBuf),\n+    Suite(TaskPath),\n }\n \n impl PathSet {\n@@ -132,21 +144,23 @@ impl PathSet {\n \n     fn one<P: Into<PathBuf>>(path: P) -> PathSet {\n         let mut set = BTreeSet::new();\n-        set.insert(path.into());\n+        set.insert(TaskPath::parse(path));\n         PathSet::Set(set)\n     }\n \n     fn has(&self, needle: &Path) -> bool {\n         match self {\n-            PathSet::Set(set) => set.iter().any(|p| p.ends_with(needle)),\n-            PathSet::Suite(suite) => suite.ends_with(needle),\n+            PathSet::Set(set) => set.iter().any(|p| p.path.ends_with(needle)),\n+            PathSet::Suite(suite) => suite.path.ends_with(needle),\n         }\n     }\n \n     fn path(&self, builder: &Builder<'_>) -> PathBuf {\n         match self {\n-            PathSet::Set(set) => set.iter().next().unwrap_or(&builder.build.src).to_path_buf(),\n-            PathSet::Suite(path) => PathBuf::from(path),\n+            PathSet::Set(set) => {\n+                set.iter().next().map(|p| &p.path).unwrap_or(&builder.build.src).clone()\n+            }\n+            PathSet::Suite(path) => path.path.clone(),\n         }\n     }\n }\n@@ -293,7 +307,7 @@ impl<'a> ShouldRun<'a> {\n         let mut set = BTreeSet::new();\n         for krate in self.builder.in_tree_crates(name, None) {\n             let path = krate.local_path(self.builder);\n-            set.insert(path);\n+            set.insert(TaskPath::parse(path));\n         }\n         self.paths.insert(PathSet::Set(set));\n         self\n@@ -318,19 +332,19 @@ impl<'a> ShouldRun<'a> {\n \n     // multiple aliases for the same job\n     pub fn paths(mut self, paths: &[&str]) -> Self {\n-        self.paths.insert(PathSet::Set(paths.iter().map(PathBuf::from).collect()));\n+        self.paths.insert(PathSet::Set(paths.iter().map(|p| TaskPath::parse(p)).collect()));\n         self\n     }\n \n     pub fn is_suite_path(&self, path: &Path) -> Option<&PathSet> {\n         self.paths.iter().find(|pathset| match pathset {\n-            PathSet::Suite(p) => path.starts_with(p),\n+            PathSet::Suite(p) => path.starts_with(&p.path),\n             PathSet::Set(_) => false,\n         })\n     }\n \n     pub fn suite_path(mut self, suite: &str) -> Self {\n-        self.paths.insert(PathSet::Suite(PathBuf::from(suite)));\n+        self.paths.insert(PathSet::Suite(TaskPath::parse(suite)));\n         self\n     }\n \n@@ -552,11 +566,11 @@ impl<'a> Builder<'a> {\n             match pathset {\n                 PathSet::Set(set) => {\n                     for path in set {\n-                        add_path(&path);\n+                        add_path(&path.path);\n                     }\n                 }\n                 PathSet::Suite(path) => {\n-                    add_path(&path.join(\"...\"));\n+                    add_path(&path.path.join(\"...\"));\n                 }\n             }\n         }\n@@ -1648,7 +1662,7 @@ impl<'a> Builder<'a> {\n \n         for path in &self.paths {\n             if should_run.paths.iter().any(|s| s.has(path))\n-                && !desc.is_excluded(self, &PathSet::Suite(path.clone()))\n+                && !desc.is_excluded(self, &PathSet::Suite(TaskPath::parse(path)))\n             {\n                 return true;\n             }"}]}