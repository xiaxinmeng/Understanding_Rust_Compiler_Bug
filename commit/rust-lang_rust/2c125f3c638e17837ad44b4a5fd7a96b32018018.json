{"sha": "2c125f3c638e17837ad44b4a5fd7a96b32018018", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMTI1ZjNjNjM4ZTE3ODM3YWQ0NGI0YTVmZDdhOTZiMzIwMTgwMTg=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-09-05T09:52:27Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-02T09:34:27Z"}, "message": "Add support of runnables arguments in Rust Analyzer", "tree": {"sha": "2a8e8f8992bfc2b7630e5adb00e077bd4976aebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a8e8f8992bfc2b7630e5adb00e077bd4976aebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c125f3c638e17837ad44b4a5fd7a96b32018018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c125f3c638e17837ad44b4a5fd7a96b32018018", "html_url": "https://github.com/rust-lang/rust/commit/2c125f3c638e17837ad44b4a5fd7a96b32018018", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c125f3c638e17837ad44b4a5fd7a96b32018018/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c01cd6e3ed0763f8e773c34dc76db0e39396133d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c01cd6e3ed0763f8e773c34dc76db0e39396133d", "html_url": "https://github.com/rust-lang/rust/commit/c01cd6e3ed0763f8e773c34dc76db0e39396133d"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "c5dd00706d52e7c6a4e31fb068590b7a8f51c32e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c125f3c638e17837ad44b4a5fd7a96b32018018/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c125f3c638e17837ad44b4a5fd7a96b32018018/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=2c125f3c638e17837ad44b4a5fd7a96b32018018", "patch": "@@ -38,6 +38,7 @@ pub struct Config {\n     pub cargo: CargoConfig,\n     pub rustfmt: RustfmtConfig,\n     pub flycheck: Option<FlycheckConfig>,\n+    pub runnables: RunnablesConfig,\n \n     pub inlay_hints: InlayHintsConfig,\n     pub completion: CompletionConfig,\n@@ -124,6 +125,15 @@ pub enum RustfmtConfig {\n     CustomCommand { command: String, args: Vec<String> },\n }\n \n+/// Configuration for runnable items, such as `main` function or tests.\n+#[derive(Debug, Clone, Default)]\n+pub struct RunnablesConfig {\n+    /// Stuff to be inserted before `cargo`, e.g. `RUST_LOG=info`.\n+    pub cargo_prefix: Vec<String>,\n+    /// Additional arguments for the `cargo`, e.g. `--release`.\n+    pub cargo_extra_args: Vec<String>,\n+}\n+\n #[derive(Debug, Clone, Default)]\n pub struct ClientCapsConfig {\n     pub location_link: bool,\n@@ -164,6 +174,7 @@ impl Config {\n                 extra_args: Vec::new(),\n                 features: Vec::new(),\n             }),\n+            runnables: RunnablesConfig::default(),\n \n             inlay_hints: InlayHintsConfig {\n                 type_hints: true,\n@@ -220,6 +231,10 @@ impl Config {\n             load_out_dirs_from_check: data.cargo_loadOutDirsFromCheck,\n             target: data.cargo_target.clone(),\n         };\n+        self.runnables = RunnablesConfig {\n+            cargo_prefix: data.runnables_cargoPrefix,\n+            cargo_extra_args: data.runnables_cargoExtraArgs,\n+        };\n \n         self.proc_macro_srv = if data.procMacro_enable {\n             std::env::current_exe().ok().map(|path| (path, vec![\"proc-macro\".into()]))\n@@ -474,6 +489,9 @@ config_data! {\n         notifications_cargoTomlNotFound: bool      = true,\n         procMacro_enable: bool                     = false,\n \n+        runnables_cargoPrefix: Vec<String>    = Vec::new(),\n+        runnables_cargoExtraArgs: Vec<String> = Vec::new(),\n+\n         rustfmt_extraArgs: Vec<String>               = Vec::new(),\n         rustfmt_overrideCommand: Option<Vec<String>> = None,\n "}, {"sha": "2a8eca1460abec9a8454d6ae8b169d7652dce74f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c125f3c638e17837ad44b4a5fd7a96b32018018/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c125f3c638e17837ad44b4a5fd7a96b32018018/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=2c125f3c638e17837ad44b4a5fd7a96b32018018", "patch": "@@ -491,6 +491,7 @@ pub(crate) fn handle_runnables(\n     }\n \n     // Add `cargo check` and `cargo test` for all targets of the whole package\n+    let config = &snap.config.runnables;\n     match cargo_spec {\n         Some(spec) => {\n             for &cmd in [\"check\", \"test\"].iter() {\n@@ -500,12 +501,14 @@ pub(crate) fn handle_runnables(\n                     kind: lsp_ext::RunnableKind::Cargo,\n                     args: lsp_ext::CargoRunnable {\n                         workspace_root: Some(spec.workspace_root.clone().into()),\n+                        cargo_prefix: config.cargo_prefix.clone(),\n                         cargo_args: vec![\n                             cmd.to_string(),\n                             \"--package\".to_string(),\n                             spec.package.clone(),\n                             \"--all-targets\".to_string(),\n                         ],\n+                        cargo_extra_args: config.cargo_extra_args.clone(),\n                         executable_args: Vec::new(),\n                         expect_test: None,\n                     },\n@@ -519,7 +522,9 @@ pub(crate) fn handle_runnables(\n                 kind: lsp_ext::RunnableKind::Cargo,\n                 args: lsp_ext::CargoRunnable {\n                     workspace_root: None,\n+                    cargo_prefix: config.cargo_prefix.clone(),\n                     cargo_args: vec![\"check\".to_string(), \"--workspace\".to_string()],\n+                    cargo_extra_args: config.cargo_extra_args.clone(),\n                     executable_args: Vec::new(),\n                     expect_test: None,\n                 },"}, {"sha": "72c4ebfd3c8dfe5378fa472dda7f4d1b6c5f71df", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c125f3c638e17837ad44b4a5fd7a96b32018018/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c125f3c638e17837ad44b4a5fd7a96b32018018/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=2c125f3c638e17837ad44b4a5fd7a96b32018018", "patch": "@@ -171,10 +171,14 @@ pub enum RunnableKind {\n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n pub struct CargoRunnable {\n+    // stuff before `cargo` command, e.g. `RUST_LOG=info`\n+    pub cargo_prefix: Vec<String>,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub workspace_root: Option<PathBuf>,\n     // command, --package and --lib stuff\n     pub cargo_args: Vec<String>,\n+    // user-specified additional cargo args, like `--release`.\n+    pub cargo_extra_args: Vec<String>,\n     // stuff after --\n     pub executable_args: Vec<String>,\n     #[serde(skip_serializing_if = \"Option::is_none\")]"}, {"sha": "5dca520c30764769201754ff78b6421381d1c946", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c125f3c638e17837ad44b4a5fd7a96b32018018/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c125f3c638e17837ad44b4a5fd7a96b32018018/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=2c125f3c638e17837ad44b4a5fd7a96b32018018", "patch": "@@ -740,6 +740,7 @@ pub(crate) fn runnable(\n     file_id: FileId,\n     runnable: Runnable,\n ) -> Result<lsp_ext::Runnable> {\n+    let config = &snap.config.runnables;\n     let spec = CargoTargetSpec::for_file(snap, file_id)?;\n     let workspace_root = spec.as_ref().map(|it| it.workspace_root.clone());\n     let target = spec.as_ref().map(|s| s.target.clone());\n@@ -754,7 +755,9 @@ pub(crate) fn runnable(\n         kind: lsp_ext::RunnableKind::Cargo,\n         args: lsp_ext::CargoRunnable {\n             workspace_root: workspace_root.map(|it| it.into()),\n+            cargo_prefix: config.cargo_prefix.clone(),\n             cargo_args,\n+            cargo_extra_args: config.cargo_extra_args.clone(),\n             executable_args,\n             expect_test: None,\n         },"}]}