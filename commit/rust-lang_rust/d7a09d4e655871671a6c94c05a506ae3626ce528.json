{"sha": "d7a09d4e655871671a6c94c05a506ae3626ce528", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YTA5ZDRlNjU1ODcxNjcxYTZjOTRjMDVhNTA2YWUzNjI2Y2U1Mjg=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-17T12:49:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-17T12:49:02Z"}, "message": "Rollup merge of #40503 - swgillespie:thread-hack-removal, r=sfackler\n\nstd: remove a workaround for privacy limitations\n\n`std::thread::Thread` implements a non-exported `NewThread` trait to allow for internal-only use of `Thread::new`. Nowadays we have `pub(crate)`, which accomplishes the same thing but much more idiomatically.\n\nRustdoc handles this correctly (I checked and I didn't see `Thread::new` on the rustdoc entry for `Thread` with this change), and the stage1 `rustc` emits the correct error still (I'm assuming that the stage1 compiler uses my `libstd`?):\n\n```\n$ ./build/x86_64-apple-darwin/stage1/bin/rustc test.rs\nerror: method `new` is private\n --> test.rs:4:18\n  |\n4 |     let thread = thread::Thread::new(None);\n  |                  ^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n```", "tree": {"sha": "919699b2faad4565554047dce25bcfee522346b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/919699b2faad4565554047dce25bcfee522346b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a09d4e655871671a6c94c05a506ae3626ce528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a09d4e655871671a6c94c05a506ae3626ce528", "html_url": "https://github.com/rust-lang/rust/commit/d7a09d4e655871671a6c94c05a506ae3626ce528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a09d4e655871671a6c94c05a506ae3626ce528/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aab3b97af7691636928b35350a46b393f0d6d5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aab3b97af7691636928b35350a46b393f0d6d5a", "html_url": "https://github.com/rust-lang/rust/commit/5aab3b97af7691636928b35350a46b393f0d6d5a"}, {"sha": "1545f4e2a323eb869b13f36bd05cc91ff21d5161", "url": "https://api.github.com/repos/rust-lang/rust/commits/1545f4e2a323eb869b13f36bd05cc91ff21d5161", "html_url": "https://github.com/rust-lang/rust/commit/1545f4e2a323eb869b13f36bd05cc91ff21d5161"}], "stats": {"total": 18, "additions": 4, "deletions": 14}, "files": [{"sha": "6c791cd336ded6b20ff19a5fb2715cb958f48206", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a09d4e655871671a6c94c05a506ae3626ce528/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a09d4e655871671a6c94c05a506ae3626ce528/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=d7a09d4e655871671a6c94c05a506ae3626ce528", "patch": "@@ -34,7 +34,7 @@ fn lang_start(main: *const u8, argc: isize, argv: *const *const u8) -> isize {\n     use panic;\n     use sys;\n     use sys_common;\n-    use sys_common::thread_info::{self, NewThread};\n+    use sys_common::thread_info;\n     use thread::Thread;\n \n     sys::init();\n@@ -47,7 +47,7 @@ fn lang_start(main: *const u8, argc: isize, argv: *const *const u8) -> isize {\n         // created. Note that this isn't necessary in general for new threads,\n         // but we just do this to name the main thread and to give it correct\n         // info about the stack bounds.\n-        let thread: Thread = NewThread::new(Some(\"main\".to_owned()));\n+        let thread = Thread::new(Some(\"main\".to_owned()));\n         thread_info::set(main_guard, thread);\n \n         // Store our args if necessary in a squirreled away location"}, {"sha": "5ed48ee45587190e42a047427d4b3015ac012908", "filename": "src/libstd/sys_common/thread_info.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7a09d4e655871671a6c94c05a506ae3626ce528/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a09d4e655871671a6c94c05a506ae3626ce528/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_info.rs?ref=d7a09d4e655871671a6c94c05a506ae3626ce528", "patch": "@@ -31,7 +31,7 @@ impl ThreadInfo {\n             if c.borrow().is_none() {\n                 *c.borrow_mut() = Some(ThreadInfo {\n                     stack_guard: None,\n-                    thread: NewThread::new(None),\n+                    thread: Thread::new(None),\n                 })\n             }\n             Some(f(c.borrow_mut().as_mut().unwrap()))\n@@ -54,8 +54,3 @@ pub fn set(stack_guard: Option<usize>, thread: Thread) {\n         thread: thread,\n     }));\n }\n-\n-// a hack to get around privacy restrictions; implemented by `std::thread`\n-pub trait NewThread {\n-    fn new(name: Option<String>) -> Self;\n-}"}, {"sha": "edf928d61063e2463a8a25670f2f151d0bf0463f", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7a09d4e655871671a6c94c05a506ae3626ce528/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a09d4e655871671a6c94c05a506ae3626ce528/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=d7a09d4e655871671a6c94c05a506ae3626ce528", "patch": "@@ -745,7 +745,7 @@ pub struct Thread {\n \n impl Thread {\n     // Used only internally to construct a thread object without spawning\n-    fn new(name: Option<String>) -> Thread {\n+    pub(crate) fn new(name: Option<String>) -> Thread {\n         let cname = name.map(|n| {\n             CString::new(n).expect(\"thread name may not contain interior null bytes\")\n         });\n@@ -858,11 +858,6 @@ impl fmt::Debug for Thread {\n     }\n }\n \n-// a hack to get around privacy restrictions\n-impl thread_info::NewThread for Thread {\n-    fn new(name: Option<String>) -> Thread { Thread::new(name) }\n-}\n-\n ////////////////////////////////////////////////////////////////////////////////\n // JoinHandle\n ////////////////////////////////////////////////////////////////////////////////"}]}