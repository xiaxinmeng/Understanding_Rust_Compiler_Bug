{"sha": "cc1ec49a14656ad55988e059e49d808fa268a58d", "node_id": "C_kwDOAAsO6NoAKGNjMWVjNDlhMTQ2NTZhZDU1OTg4ZTA1OWU0OWQ4MDhmYTI2OGE1OGQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-23T13:21:22Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-23T21:26:37Z"}, "message": "Rename `traits_in_crate` query to `traits`", "tree": {"sha": "8973676f422c91b92b2e7b0fbfe01a8341753e27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8973676f422c91b92b2e7b0fbfe01a8341753e27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc1ec49a14656ad55988e059e49d808fa268a58d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1ec49a14656ad55988e059e49d808fa268a58d", "html_url": "https://github.com/rust-lang/rust/commit/cc1ec49a14656ad55988e059e49d808fa268a58d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc1ec49a14656ad55988e059e49d808fa268a58d/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2ccc855e74aec03e434405eca3c247ee2432e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ccc855e74aec03e434405eca3c247ee2432e53", "html_url": "https://github.com/rust-lang/rust/commit/c2ccc855e74aec03e434405eca3c247ee2432e53"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "3520071357b184e7cb8b7cdd4862ce09dcfd0e6e", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc1ec49a14656ad55988e059e49d808fa268a58d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1ec49a14656ad55988e059e49d808fa268a58d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=cc1ec49a14656ad55988e059e49d808fa268a58d", "patch": "@@ -324,7 +324,7 @@ provide! { tcx, def_id, other, cdata,\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n \n-    traits_in_crate => { tcx.arena.alloc_from_iter(cdata.get_traits()) }\n+    traits => { tcx.arena.alloc_from_iter(cdata.get_traits()) }\n     trait_impls_in_crate => { tcx.arena.alloc_from_iter(cdata.get_trait_impls()) }\n     implementations_of_trait => { cdata.get_implementations_of_trait(tcx, other) }\n     crate_incoherent_impls => { cdata.get_incoherent_impls(tcx, other) }"}, {"sha": "10581b1847b42e6919f00d97dee185f50cf68550", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc1ec49a14656ad55988e059e49d808fa268a58d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1ec49a14656ad55988e059e49d808fa268a58d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=cc1ec49a14656ad55988e059e49d808fa268a58d", "patch": "@@ -1930,7 +1930,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_traits(&mut self) -> LazyArray<DefIndex> {\n         empty_proc_macro!(self);\n-        self.lazy_array(self.tcx.traits_in_crate(LOCAL_CRATE).iter().map(|def_id| def_id.index))\n+        self.lazy_array(self.tcx.traits(LOCAL_CRATE).iter().map(|def_id| def_id.index))\n     }\n \n     /// Encodes an index, mapping each trait to its (local) implementations.\n@@ -2321,7 +2321,7 @@ pub fn provide(providers: &mut Providers) {\n                 .get(&def_id)\n                 .expect(\"no traits in scope for a doc link\")\n         },\n-        traits_in_crate: |tcx, LocalCrate| {\n+        traits: |tcx, LocalCrate| {\n             let mut traits = Vec::new();\n             for id in tcx.hir().items() {\n                 if matches!(tcx.def_kind(id.owner_id), DefKind::Trait | DefKind::TraitAlias) {"}, {"sha": "8f05b165eb5d42c43daef144a0c1ea75aadc49b3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc1ec49a14656ad55988e059e49d808fa268a58d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1ec49a14656ad55988e059e49d808fa268a58d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=cc1ec49a14656ad55988e059e49d808fa268a58d", "patch": "@@ -36,7 +36,10 @@ use crate::traits::query::{\n     OutlivesBound,\n };\n use crate::traits::specialization_graph;\n-use crate::traits::{self, ImplSource};\n+use crate::traits::{\n+    CanonicalChalkEnvironmentAndGoal, CodegenObligationError, EvaluationResult, ImplSource,\n+    ObjectSafetyViolation, ObligationCause, OverflowError, WellFormedLoc,\n+};\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::layout::ValidityRequirement;\n use crate::ty::query::{\n@@ -1278,7 +1281,7 @@ rustc_queries! {\n \n     query codegen_select_candidate(\n         key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)\n-    ) -> Result<&'tcx ImplSource<'tcx, ()>, traits::CodegenObligationError> {\n+    ) -> Result<&'tcx ImplSource<'tcx, ()>, CodegenObligationError> {\n         cache_on_disk_if { true }\n         desc { |tcx| \"computing candidate for `{}`\", key.1 }\n     }\n@@ -1299,7 +1302,7 @@ rustc_queries! {\n         desc { |tcx| \"building specialization graph of trait `{}`\", tcx.def_path_str(trait_id) }\n         cache_on_disk_if { true }\n     }\n-    query object_safety_violations(trait_id: DefId) -> &'tcx [traits::ObjectSafetyViolation] {\n+    query object_safety_violations(trait_id: DefId) -> &'tcx [ObjectSafetyViolation] {\n         desc { |tcx| \"determining object safety of trait `{}`\", tcx.def_path_str(trait_id) }\n     }\n     query check_is_object_safe(trait_id: DefId) -> bool {\n@@ -1837,8 +1840,7 @@ rustc_queries! {\n     }\n \n     /// A list of all traits in a crate, used by rustdoc and error reporting.\n-    /// NOTE: Not named just `traits` due to a naming conflict.\n-    query traits_in_crate(_: CrateNum) -> &'tcx [DefId] {\n+    query traits(_: CrateNum) -> &'tcx [DefId] {\n         desc { \"fetching all traits in a crate\" }\n         separate_provide_extern\n     }\n@@ -1952,12 +1954,12 @@ rustc_queries! {\n     /// `infcx.predicate_must_hold()` instead.\n     query evaluate_obligation(\n         goal: CanonicalPredicateGoal<'tcx>\n-    ) -> Result<traits::EvaluationResult, traits::OverflowError> {\n+    ) -> Result<EvaluationResult, OverflowError> {\n         desc { \"evaluating trait selection obligation `{}`\", goal.value.value }\n     }\n \n     query evaluate_goal(\n-        goal: traits::CanonicalChalkEnvironmentAndGoal<'tcx>\n+        goal: CanonicalChalkEnvironmentAndGoal<'tcx>\n     ) -> Result<\n         &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n         NoSolution\n@@ -2127,8 +2129,8 @@ rustc_queries! {\n     /// all of the cases that the normal `ty::Ty`-based wfcheck does. This is fine,\n     /// because the `ty::Ty`-based wfcheck is always run.\n     query diagnostic_hir_wf_check(\n-        key: (ty::Predicate<'tcx>, traits::WellFormedLoc)\n-    ) -> &'tcx Option<traits::ObligationCause<'tcx>> {\n+        key: (ty::Predicate<'tcx>, WellFormedLoc)\n+    ) -> &'tcx Option<ObligationCause<'tcx>> {\n         arena_cache\n         eval_always\n         no_hash"}, {"sha": "b6222c3b9648ee4472e111aa5153acf71251320c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc1ec49a14656ad55988e059e49d808fa268a58d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1ec49a14656ad55988e059e49d808fa268a58d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=cc1ec49a14656ad55988e059e49d808fa268a58d", "patch": "@@ -1197,7 +1197,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {\n         iter::once(LOCAL_CRATE)\n             .chain(self.crates(()).iter().copied())\n-            .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())\n+            .flat_map(move |cnum| self.traits(cnum).iter().copied())\n     }\n \n     #[inline]"}]}