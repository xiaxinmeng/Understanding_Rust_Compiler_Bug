{"sha": "020e4e4ad981ce0518bd8e3464ac592717c41143", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMGU0ZTRhZDk4MWNlMDUxOGJkOGUzNDY0YWM1OTI3MTdjNDExNDM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T10:24:25Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T12:03:20Z"}, "message": "Rollup merge of #22383 - pnkfelix:pass-features-along-during-expansion, r=huonw\n\n Pass features along during expansion\n\nUse the set of passed features to detect uses of feature-gated macros without the corresponding feature enabled.\n\nFix #22234.\n\n----\n\nAlso, the framework this add (passing along a reference to the features in the expansion context) is a necessary precursor for landing a properly feature-gated desugaring-based overloaded-`box` and placement-`in` (#22181).\n\n----\n\nThis is fixing a bug, but since there might be code out there that is unknowingly taking advantage of that bug, I feel obligated to mark this as a:\n\n[breaking-change]", "tree": {"sha": "feca45da907af4dedc7aa930a8292a5fdf78073a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feca45da907af4dedc7aa930a8292a5fdf78073a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/020e4e4ad981ce0518bd8e3464ac592717c41143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/020e4e4ad981ce0518bd8e3464ac592717c41143", "html_url": "https://github.com/rust-lang/rust/commit/020e4e4ad981ce0518bd8e3464ac592717c41143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/020e4e4ad981ce0518bd8e3464ac592717c41143/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e892283612ea21ce5aeb3be930296623facab36", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e892283612ea21ce5aeb3be930296623facab36", "html_url": "https://github.com/rust-lang/rust/commit/0e892283612ea21ce5aeb3be930296623facab36"}, {"sha": "dc0797c0c99e7079170d0e09f82fc6f66b721932", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0797c0c99e7079170d0e09f82fc6f66b721932", "html_url": "https://github.com/rust-lang/rust/commit/dc0797c0c99e7079170d0e09f82fc6f66b721932"}], "stats": {"total": 293, "additions": 265, "deletions": 28}, "files": [{"sha": "728ff6475999800e8300c11fece1457afb946a90", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -471,9 +471,10 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                 new_path.extend(env::split_paths(&_old_path));\n                 env::set_var(\"PATH\", &env::join_paths(new_path.iter()).unwrap());\n             }\n+            let features = sess.features.borrow();\n             let cfg = syntax::ext::expand::ExpansionConfig {\n                 crate_name: crate_name.to_string(),\n-                enable_quotes: sess.features.borrow().quote,\n+                features: Some(&features),\n                 recursion_limit: sess.recursion_limit.get(),\n             };\n             let ret = syntax::ext::expand::expand_crate(&sess.parse_sess,"}, {"sha": "d8cba139fb5979b9258c5d8e6498a24e00be8f42", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -18,6 +18,7 @@ use codemap;\n use codemap::Span;\n use ext::base;\n use ext::base::*;\n+use feature_gate;\n use parse::token::InternedString;\n use parse::token;\n use ptr::P;\n@@ -48,6 +49,12 @@ static OPTIONS: &'static [&'static str] = &[\"volatile\", \"alignstack\", \"intel\"];\n \n pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                        -> Box<base::MacResult+'cx> {\n+    if !cx.ecfg.enable_asm() {\n+        feature_gate::emit_feature_err(\n+            &cx.parse_sess.span_diagnostic, \"asm\", sp, feature_gate::EXPLAIN_ASM);\n+        return DummyResult::expr(sp);\n+    }\n+\n     let mut p = cx.new_parser_from_tts(tts);\n     let mut asm = InternedString::new(\"\");\n     let mut asm_str_style = None;"}, {"sha": "8800ffd1e9b5f2eaea8611f8d8301dfdfdf9f693", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -439,7 +439,8 @@ impl BlockInfo {\n \n /// The base map of methods for expanding syntax extension\n /// AST nodes into full ASTs\n-fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n+fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n+                                        -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n     fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension {\n         NormalTT(box f, None)\n@@ -470,7 +471,7 @@ fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"deriving\"),\n                             Decorator(box ext::deriving::expand_deprecated_deriving));\n \n-    if ecfg.enable_quotes {\n+    if ecfg.enable_quotes() {\n         // Quasi-quoting expanders\n         syntax_expanders.insert(intern(\"quote_tokens\"),\n                            builtin_normal_expander(\n@@ -541,7 +542,7 @@ pub struct ExtCtxt<'a> {\n     pub parse_sess: &'a parse::ParseSess,\n     pub cfg: ast::CrateConfig,\n     pub backtrace: ExpnId,\n-    pub ecfg: expand::ExpansionConfig,\n+    pub ecfg: expand::ExpansionConfig<'a>,\n     pub use_std: bool,\n \n     pub mod_path: Vec<ast::Ident> ,\n@@ -554,7 +555,7 @@ pub struct ExtCtxt<'a> {\n \n impl<'a> ExtCtxt<'a> {\n     pub fn new(parse_sess: &'a parse::ParseSess, cfg: ast::CrateConfig,\n-               ecfg: expand::ExpansionConfig) -> ExtCtxt<'a> {\n+               ecfg: expand::ExpansionConfig<'a>) -> ExtCtxt<'a> {\n         let env = initial_syntax_expander_table(&ecfg);\n         ExtCtxt {\n             parse_sess: parse_sess,"}, {"sha": "63a8bd9ddf1b39972868aeba18fe19fbe52117fa", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -12,12 +12,21 @@ use ast;\n use codemap::Span;\n use ext::base::*;\n use ext::base;\n+use feature_gate;\n use parse::token;\n use parse::token::{str_to_ident};\n use ptr::P;\n \n pub fn expand_syntax_ext<'cx>(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                               -> Box<base::MacResult+'cx> {\n+    if !cx.ecfg.enable_concat_idents() {\n+        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+                                       \"concat_idents\",\n+                                       sp,\n+                                       feature_gate::EXPLAIN_CONCAT_IDENTS);\n+        return base::DummyResult::expr(sp);\n+    }\n+\n     let mut res_str = String::new();\n     for (i, e) in tts.iter().enumerate() {\n         if i & 1 == 1 {"}, {"sha": "6b7cecee815765f3bebd2e83f0090a5d0a1c0660", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -22,6 +22,7 @@ use attr::AttrMetaMethods;\n use codemap;\n use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use ext::base::*;\n+use feature_gate::{Features};\n use fold;\n use fold::*;\n use parse;\n@@ -1408,28 +1409,63 @@ fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n     }\n }\n \n-pub struct ExpansionConfig {\n+pub struct ExpansionConfig<'feat> {\n     pub crate_name: String,\n-    pub enable_quotes: bool,\n+    pub features: Option<&'feat Features>,\n     pub recursion_limit: usize,\n }\n \n-impl ExpansionConfig {\n-    pub fn default(crate_name: String) -> ExpansionConfig {\n+impl<'feat> ExpansionConfig<'feat> {\n+    pub fn default(crate_name: String) -> ExpansionConfig<'static> {\n         ExpansionConfig {\n             crate_name: crate_name,\n-            enable_quotes: false,\n+            features: None,\n             recursion_limit: 64,\n         }\n     }\n+\n+    pub fn enable_quotes(&self) -> bool {\n+        match self.features {\n+            Some(&Features { allow_quote: true, .. }) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn enable_asm(&self) -> bool {\n+        match self.features {\n+            Some(&Features { allow_asm: true, .. }) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn enable_log_syntax(&self) -> bool {\n+        match self.features {\n+            Some(&Features { allow_log_syntax: true, .. }) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn enable_concat_idents(&self) -> bool {\n+        match self.features {\n+            Some(&Features { allow_concat_idents: true, .. }) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn enable_trace_macros(&self) -> bool {\n+        match self.features {\n+            Some(&Features { allow_trace_macros: true, .. }) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n-pub fn expand_crate(parse_sess: &parse::ParseSess,\n-                    cfg: ExpansionConfig,\n-                    // these are the macros being imported to this crate:\n-                    imported_macros: Vec<ast::MacroDef>,\n-                    user_exts: Vec<NamedSyntaxExtension>,\n-                    c: Crate) -> Crate {\n+pub fn expand_crate<'feat>(parse_sess: &parse::ParseSess,\n+                           cfg: ExpansionConfig<'feat>,\n+                           // these are the macros being imported to this crate:\n+                           imported_macros: Vec<ast::MacroDef>,\n+                           user_exts: Vec<NamedSyntaxExtension>,\n+                           c: Crate) -> Crate {\n     let mut cx = ExtCtxt::new(parse_sess, c.config.clone(), cfg);\n     cx.use_std = std_inject::use_std(&c);\n \n@@ -1598,7 +1634,7 @@ mod test {\n     // these following tests are quite fragile, in that they don't test what\n     // *kind* of failure occurs.\n \n-    fn test_ecfg() -> ExpansionConfig {\n+    fn test_ecfg() -> ExpansionConfig<'static> {\n         ExpansionConfig::default(\"test\".to_string())\n     }\n "}, {"sha": "8173dd93f7468db4c5c2853d9e9f958cf63c264c", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -11,12 +11,20 @@\n use ast;\n use codemap;\n use ext::base;\n+use feature_gate;\n use print;\n \n pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n                               sp: codemap::Span,\n                               tts: &[ast::TokenTree])\n                               -> Box<base::MacResult+'cx> {\n+    if !cx.ecfg.enable_log_syntax() {\n+        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+                                       \"log_syntax\",\n+                                       sp,\n+                                       feature_gate::EXPLAIN_LOG_SYNTAX);\n+        return base::DummyResult::any(sp);\n+    }\n \n     cx.print_backtrace();\n "}, {"sha": "3fcc6a8d69241b7cb2bfa80258589457f176dcf5", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -12,13 +12,23 @@ use ast;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::base;\n+use feature_gate;\n use parse::token::keywords;\n \n \n pub fn expand_trace_macros(cx: &mut ExtCtxt,\n                            sp: Span,\n                            tt: &[ast::TokenTree])\n                            -> Box<base::MacResult+'static> {\n+    if !cx.ecfg.enable_trace_macros() {\n+        feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+                                       \"trace_macros\",\n+                                       sp,\n+                                       feature_gate::EXPLAIN_TRACE_MACROS);\n+        return base::DummyResult::any(sp);\n+    }\n+\n+\n     match tt {\n         [ast::TtToken(_, ref tok)] if tok.is_keyword(keywords::True) => {\n             cx.set_trace_macros(true);"}, {"sha": "3bebba15a572b2e307231dd6c1a48cfade2e8ddb", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -295,7 +295,11 @@ pub struct Features {\n     pub unboxed_closures: bool,\n     pub rustc_diagnostic_macros: bool,\n     pub visible_private_types: bool,\n-    pub quote: bool,\n+    pub allow_quote: bool,\n+    pub allow_asm: bool,\n+    pub allow_log_syntax: bool,\n+    pub allow_concat_idents: bool,\n+    pub allow_trace_macros: bool,\n     pub old_orphan_check: bool,\n     pub simd_ffi: bool,\n     pub unmarked_api: bool,\n@@ -311,7 +315,11 @@ impl Features {\n             unboxed_closures: false,\n             rustc_diagnostic_macros: false,\n             visible_private_types: false,\n-            quote: false,\n+            allow_quote: false,\n+            allow_asm: false,\n+            allow_log_syntax: false,\n+            allow_concat_idents: false,\n+            allow_trace_macros: false,\n             old_orphan_check: false,\n             simd_ffi: false,\n             unmarked_api: false,\n@@ -360,6 +368,18 @@ pub fn emit_feature_warn(diag: &SpanHandler, feature: &str, span: Span, explain:\n     }\n }\n \n+pub const EXPLAIN_ASM: &'static str =\n+    \"inline assembly is not stable enough for use and is subject to change\";\n+\n+pub const EXPLAIN_LOG_SYNTAX: &'static str =\n+    \"`log_syntax!` is not stable enough for use and is subject to change\";\n+\n+pub const EXPLAIN_CONCAT_IDENTS: &'static str =\n+    \"`concat_idents` is not stable enough for use and is subject to change\";\n+\n+pub const EXPLAIN_TRACE_MACROS: &'static str =\n+    \"`trace_macros` is not stable enough for use and is subject to change\";\n+\n struct MacroVisitor<'a> {\n     context: &'a Context<'a>\n }\n@@ -369,24 +389,28 @@ impl<'a, 'v> Visitor<'v> for MacroVisitor<'a> {\n         let ast::MacInvocTT(ref path, _, _) = mac.node;\n         let id = path.segments.last().unwrap().identifier;\n \n+        // Issue 22234: If you add a new case here, make sure to also\n+        // add code to catch the macro during or after expansion.\n+        //\n+        // We still keep this MacroVisitor (rather than *solely*\n+        // relying on catching cases during or after expansion) to\n+        // catch uses of these macros within conditionally-compiled\n+        // code, e.g. `#[cfg]`-guarded functions.\n+\n         if id == token::str_to_ident(\"asm\") {\n-            self.context.gate_feature(\"asm\", path.span, \"inline assembly is not \\\n-                stable enough for use and is subject to change\");\n+            self.context.gate_feature(\"asm\", path.span, EXPLAIN_ASM);\n         }\n \n         else if id == token::str_to_ident(\"log_syntax\") {\n-            self.context.gate_feature(\"log_syntax\", path.span, \"`log_syntax!` is not \\\n-                stable enough for use and is subject to change\");\n+            self.context.gate_feature(\"log_syntax\", path.span, EXPLAIN_LOG_SYNTAX);\n         }\n \n         else if id == token::str_to_ident(\"trace_macros\") {\n-            self.context.gate_feature(\"trace_macros\", path.span, \"`trace_macros` is not \\\n-                stable enough for use and is subject to change\");\n+            self.context.gate_feature(\"trace_macros\", path.span, EXPLAIN_TRACE_MACROS);\n         }\n \n         else if id == token::str_to_ident(\"concat_idents\") {\n-            self.context.gate_feature(\"concat_idents\", path.span, \"`concat_idents` is not \\\n-                stable enough for use and is subject to change\");\n+            self.context.gate_feature(\"concat_idents\", path.span, EXPLAIN_CONCAT_IDENTS);\n         }\n     }\n }\n@@ -710,11 +734,18 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n \n     check(&mut cx, krate);\n \n+    // FIXME (pnkfelix): Before adding the 99th entry below, change it\n+    // to a single-pass (instead of N calls to `.has_feature`).\n+\n     Features {\n         unboxed_closures: cx.has_feature(\"unboxed_closures\"),\n         rustc_diagnostic_macros: cx.has_feature(\"rustc_diagnostic_macros\"),\n         visible_private_types: cx.has_feature(\"visible_private_types\"),\n-        quote: cx.has_feature(\"quote\"),\n+        allow_quote: cx.has_feature(\"quote\"),\n+        allow_asm: cx.has_feature(\"asm\"),\n+        allow_log_syntax: cx.has_feature(\"log_syntax\"),\n+        allow_concat_idents: cx.has_feature(\"concat_idents\"),\n+        allow_trace_macros: cx.has_feature(\"trace_macros\"),\n         old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n         unmarked_api: cx.has_feature(\"unmarked_api\"),"}, {"sha": "d2ee01109f8d8f577d97db9727f3c2d3c089f398", "filename": "src/test/compile-fail/asm-gated2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Fasm-gated2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Fasm-gated2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-gated2.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    unsafe {\n+        println!(\"{}\", asm!(\"\")); //~ ERROR inline assembly is not stable\n+    }\n+}"}, {"sha": "f4d97445725cd37de1a6b5f6f57e62e78e146ad7", "filename": "src/test/compile-fail/concat_idents-gate.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const XY_1: i32 = 10;\n+\n+fn main() {\n+    const XY_2: i32 = 20;\n+    let a = concat_idents!(X, Y_1); //~ ERROR `concat_idents` is not stable\n+    let b = concat_idents!(X, Y_2); //~ ERROR `concat_idents` is not stable\n+    assert_eq!(a, 10);\n+    assert_eq!(b, 20);\n+}"}, {"sha": "d8f8f803edcc8ad053780d8f1bbe1f732e817e17", "filename": "src/test/compile-fail/concat_idents-gate2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate2.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const XY_1: i32 = 10;\n+\n+fn main() {\n+    const XY_2: i32 = 20;\n+    assert_eq!(10, concat_idents!(X, Y_1)); //~ ERROR `concat_idents` is not stable\n+    assert_eq!(20, concat_idents!(X, Y_2)); //~ ERROR `concat_idents` is not stable\n+}"}, {"sha": "bb19e97ab0fa85ec9db950293320f37cdf769326", "filename": "src/test/compile-fail/log-syntax-gate2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate2.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"{}\", log_syntax!()); //~ ERROR `log_syntax!` is not stable\n+}"}, {"sha": "6473bcece91b694f336277cea78927a1b5e8ba94", "filename": "src/test/compile-fail/trace_macros-gate.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the trace_macros feature gate is on.\n+\n+fn main() {\n+    trace_macros!(); //~ ERROR `trace_macros` is not stable\n+    trace_macros!(1); //~ ERROR `trace_macros` is not stable\n+    trace_macros!(ident); //~ ERROR `trace_macros` is not stable\n+    trace_macros!(for); //~ ERROR `trace_macros` is not stable\n+    trace_macros!(true,); //~ ERROR `trace_macros` is not stable\n+    trace_macros!(false 1); //~ ERROR `trace_macros` is not stable\n+\n+    // Errors are signalled early for the above, before expansion.\n+    // See trace_macros-gate2 and trace_macros-gate3. for examples\n+    // of the below being caught.\n+\n+    macro_rules! expando {\n+        ($x: ident) => { trace_macros!($x) }\n+    }\n+\n+    expando!(true);\n+}"}, {"sha": "71cc45e132d3385de283753010b08d1e6db467ab", "filename": "src/test/compile-fail/trace_macros-gate2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate2.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the trace_macros feature gate is on.\n+\n+fn main() {\n+    // (Infrastructure does not attempt to detect uses in macro definitions.)\n+    macro_rules! expando {\n+        ($x: ident) => { trace_macros!($x) }\n+    }\n+\n+    expando!(true); //~ ERROR `trace_macros` is not stable\n+}"}, {"sha": "66d03cf9d8046fd32b598e797b768c5d71541a21", "filename": "src/test/compile-fail/trace_macros-gate3.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020e4e4ad981ce0518bd8e3464ac592717c41143/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrace_macros-gate3.rs?ref=020e4e4ad981ce0518bd8e3464ac592717c41143", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the trace_macros feature gate is on.\n+\n+pub fn main() {\n+    println!(\"arg: {}\", trace_macros!()); //~ ERROR `trace_macros` is not stable\n+    println!(\"arg: {}\", trace_macros!(1)); //~ ERROR `trace_macros` is not stable\n+    println!(\"arg: {}\", trace_macros!(ident)); //~ ERROR `trace_macros` is not stable\n+    println!(\"arg: {}\", trace_macros!(for)); //~ ERROR `trace_macros` is not stable\n+    println!(\"arg: {}\", trace_macros!(true,)); //~ ERROR `trace_macros` is not stable\n+    println!(\"arg: {}\", trace_macros!(false 1)); //~ ERROR `trace_macros` is not stable\n+}"}]}