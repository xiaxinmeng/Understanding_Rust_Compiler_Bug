{"sha": "900efbefdda057d0a1f81302436c44646bb07f7e", "node_id": "C_kwDOAAsO6NoAKDkwMGVmYmVmZGRhMDU3ZDBhMWY4MTMwMjQzNmM0NDY0NmJiMDdmN2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-06T10:36:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-06T10:36:26Z"}, "message": "Auto merge of #14260 - Veykril:if-let-match-adjust, r=Veykril\n\nfix: Adjust `replace_match_with_if_let` applicability range\n\nIt currently trigger in the entirety of match which is less than ideal", "tree": {"sha": "81931f2e02a2085d7d561165d24a60690c979a9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81931f2e02a2085d7d561165d24a60690c979a9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/900efbefdda057d0a1f81302436c44646bb07f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/900efbefdda057d0a1f81302436c44646bb07f7e", "html_url": "https://github.com/rust-lang/rust/commit/900efbefdda057d0a1f81302436c44646bb07f7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/900efbefdda057d0a1f81302436c44646bb07f7e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a956ec9326eca09725d64d9f1b63896f93505d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a956ec9326eca09725d64d9f1b63896f93505d1", "html_url": "https://github.com/rust-lang/rust/commit/0a956ec9326eca09725d64d9f1b63896f93505d1"}, {"sha": "7be48ac32c21c949ee1bb190462d3e18fa22e0bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be48ac32c21c949ee1bb190462d3e18fa22e0bd", "html_url": "https://github.com/rust-lang/rust/commit/7be48ac32c21c949ee1bb190462d3e18fa22e0bd"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "5e31d38fbd6aeeade9602c8f3d4a0bdcf0b7c820", "filename": "crates/ide-assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/900efbefdda057d0a1f81302436c44646bb07f7e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/900efbefdda057d0a1f81302436c44646bb07f7e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=900efbefdda057d0a1f81302436c44646bb07f7e", "patch": "@@ -102,9 +102,11 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext<'\n         return None;\n     }\n \n+    let let_ = if pat_seen { \" let\" } else { \"\" };\n+\n     acc.add(\n         AssistId(\"replace_if_let_with_match\", AssistKind::RefactorRewrite),\n-        \"Replace if let with match\",\n+        format!(\"Replace if{let_} with match\"),\n         available_range,\n         move |edit| {\n             let match_expr = {\n@@ -210,8 +212,17 @@ fn make_else_arm(\n // ```\n pub(crate) fn replace_match_with_if_let(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let match_expr: ast::MatchExpr = ctx.find_node_at_offset()?;\n+    let match_arm_list = match_expr.match_arm_list()?;\n+    let available_range = TextRange::new(\n+        match_expr.syntax().text_range().start(),\n+        match_arm_list.syntax().text_range().start(),\n+    );\n+    let cursor_in_range = available_range.contains_range(ctx.selection_trimmed());\n+    if !cursor_in_range {\n+        return None;\n+    }\n \n-    let mut arms = match_expr.match_arm_list()?.arms();\n+    let mut arms = match_arm_list.arms();\n     let (first_arm, second_arm) = (arms.next()?, arms.next()?);\n     if arms.next().is_some() || first_arm.guard().is_some() || second_arm.guard().is_some() {\n         return None;\n@@ -226,10 +237,20 @@ pub(crate) fn replace_match_with_if_let(acc: &mut Assists, ctx: &AssistContext<'\n     )?;\n     let scrutinee = match_expr.expr()?;\n \n+    let let_ = match &if_let_pat {\n+        ast::Pat::LiteralPat(p)\n+            if p.literal()\n+                .map(|it| it.token().kind())\n+                .map_or(false, |it| it == T![true] || it == T![false]) =>\n+        {\n+            \"\"\n+        }\n+        _ => \" let\",\n+    };\n     let target = match_expr.syntax().text_range();\n     acc.add(\n         AssistId(\"replace_match_with_if_let\", AssistKind::RefactorRewrite),\n-        \"Replace match with if let\",\n+        format!(\"Replace match with if{let_}\"),\n         target,\n         move |edit| {\n             fn make_block_expr(expr: ast::Expr) -> ast::BlockExpr {"}]}