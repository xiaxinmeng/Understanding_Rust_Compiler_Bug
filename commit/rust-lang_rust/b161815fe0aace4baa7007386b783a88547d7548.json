{"sha": "b161815fe0aace4baa7007386b783a88547d7548", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNjE4MTVmZTBhYWNlNGJhYTcwMDczODZiNzgzYTg4NTQ3ZDc1NDg=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-07-19T21:42:54Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-07-19T21:42:54Z"}, "message": "Format if-else expressions", "tree": {"sha": "04762955ec0861c98bfe0dfae2510339e16e87c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04762955ec0861c98bfe0dfae2510339e16e87c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b161815fe0aace4baa7007386b783a88547d7548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b161815fe0aace4baa7007386b783a88547d7548", "html_url": "https://github.com/rust-lang/rust/commit/b161815fe0aace4baa7007386b783a88547d7548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b161815fe0aace4baa7007386b783a88547d7548/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e47e91013ed69e967bb3a07145e86a789c28a1b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e47e91013ed69e967bb3a07145e86a789c28a1b4", "html_url": "https://github.com/rust-lang/rust/commit/e47e91013ed69e967bb3a07145e86a789c28a1b4"}], "stats": {"total": 133, "additions": 117, "deletions": 16}, "files": [{"sha": "6d453bd5c88454576f0efbcdb43fd87ea529e264", "filename": "src/comment.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b161815fe0aace4baa7007386b783a88547d7548/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b161815fe0aace4baa7007386b783a88547d7548/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=b161815fe0aace4baa7007386b783a88547d7548", "patch": "@@ -17,9 +17,11 @@ pub fn rewrite_comment(orig: &str, block_style: bool, width: usize, offset: usiz\n     let s = orig.trim();\n \n     // Edge case: block comments. Let's not trim their lines (for now).\n-    let opener = if block_style { \"/* \" } else { \"// \" };\n-    let closer = if block_style { \" */\" } else { \"\" };\n-    let line_start = if block_style { \" * \" } else { \"// \" };\n+    let (opener, closer, line_start) = if block_style {\n+        (\"/* \", \" */\", \" * \")\n+    } else {\n+        (\"// \", \"\", \"// \")\n+    };\n \n     let max_chars = width.checked_sub(closer.len()).unwrap_or(1)\n                          .checked_sub(opener.len()).unwrap_or(1);"}, {"sha": "89846527cfff905913de629b169092e2fb04735d", "filename": "src/expr.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b161815fe0aace4baa7007386b783a88547d7548/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b161815fe0aace4baa7007386b783a88547d7548/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b161815fe0aace4baa7007386b783a88547d7548", "patch": "@@ -76,6 +76,17 @@ impl Rewrite for ast::Expr {\n                     format!(\"{}loop {}\", rewrite_label(label), result)\n                 })\n             }\n+            ast::Expr_::ExprBlock(ref block) => {\n+                block.rewrite(context, width, offset)\n+            }\n+            ast::Expr_::ExprIf(ref cond, ref if_block, ref else_block) => {\n+                rewrite_if_else(context,\n+                                cond,\n+                                if_block,\n+                                else_block.as_ref().map(|e| &**e),\n+                                width,\n+                                offset)\n+            }\n             _ => context.codemap.span_to_snippet(self.span).ok()\n         }\n     }\n@@ -108,6 +119,29 @@ fn rewrite_label(label: Option<ast::Ident>) -> String {\n     }\n }\n \n+fn rewrite_if_else(context: &RewriteContext,\n+                   cond: &ast::Expr,\n+                   if_block: &ast::Block,\n+                   else_block: Option<&ast::Expr>,\n+                   width: usize,\n+                   offset: usize)\n+                   -> Option<String> {\n+    // FIXME: missing comments between control statements and blocks\n+    let cond_string = try_opt!(cond.rewrite(context, width - 3 - 2, offset + 3));\n+    let if_block_string = try_opt!(if_block.rewrite(context, width, offset));\n+\n+    match else_block {\n+        Some(else_block) => {\n+            else_block.rewrite(context, width, offset).map(|else_block_string| {\n+                format!(\"if {} {} else {}\", cond_string, if_block_string, else_block_string)\n+            })\n+        }\n+        None => {\n+            Some(format!(\"if {} {}\", cond_string, if_block_string))\n+        }\n+    }\n+}\n+\n fn rewrite_string_lit(context: &RewriteContext,\n                       s: &str,\n                       span: Span,\n@@ -229,6 +263,8 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     let field_iter = fields.into_iter().map(StructLitField::Regular)\n                            .chain(base.into_iter().map(StructLitField::Base));\n \n+    let inner_context = &RewriteContext { block_indent: indent, ..*context };\n+\n     let items = itemize_list(context.codemap,\n                              Vec::new(),\n                              field_iter,\n@@ -250,13 +286,13 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                              |item| {\n                                  match *item {\n                                      StructLitField::Regular(ref field) => {\n-                                         rewrite_field(context, &field, h_budget, indent)\n+                                         rewrite_field(inner_context, &field, h_budget, indent)\n                                             .unwrap_or(context.codemap.span_to_snippet(field.span)\n                                                                       .unwrap())\n                                      },\n                                      StructLitField::Base(ref expr) => {\n                                          // 2 = ..\n-                                         expr.rewrite(context, h_budget - 2, indent + 2)\n+                                         expr.rewrite(inner_context, h_budget - 2, indent + 2)\n                                              .map(|s| format!(\"..{}\", s))\n                                              .unwrap_or(context.codemap.span_to_snippet(expr.span)\n                                                                        .unwrap())"}, {"sha": "66bf26b041d0c3cf85f97dcae373a350ae424311", "filename": "src/imports.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b161815fe0aace4baa7007386b783a88547d7548/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b161815fe0aace4baa7007386b783a88547d7548/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=b161815fe0aace4baa7007386b783a88547d7548", "patch": "@@ -60,7 +60,11 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         // 2 = ::\n-        let path_separation_w = if path_str.len() > 0 { 2 } else { 0 };\n+        let path_separation_w = if path_str.len() > 0 {\n+            2\n+        } else {\n+            0\n+        };\n         // 5 = \"use \" + {\n         let indent = path_str.len() + 5 + path_separation_w + vis.len();\n \n@@ -106,7 +110,11 @@ impl<'a> FmtVisitor<'a> {\n         // FIXME: Make more efficient by using a linked list? That would\n         // require changes to the signatures of itemize_list and write_list.\n         let has_self = move_self_to_front(&mut items);\n-        let first_index = if has_self { 0 } else { 1 };\n+        let first_index = if has_self {\n+            0\n+        } else {\n+            1\n+        };\n \n         if self.config.reorder_imports {\n             items[1..].sort_by(|a, b| a.item.cmp(&b.item));"}, {"sha": "34d5b8ab2c440b7aaabd0791dff06f1d9778991d", "filename": "src/issues.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b161815fe0aace4baa7007386b783a88547d7548/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b161815fe0aace4baa7007386b783a88547d7548/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=b161815fe0aace4baa7007386b783a88547d7548", "patch": "@@ -70,7 +70,11 @@ impl fmt::Display for Issue {\n             IssueType::Todo => \"TODO\",\n             IssueType::Fixme => \"FIXME\",\n         };\n-        let details = if self.missing_number { \" without issue number\" } else { \"\" };\n+        let details = if self.missing_number {\n+            \" without issue number\"\n+        } else {\n+            \"\"\n+        };\n \n         write!(fmt, \"{}{}\", msg, details)\n     }\n@@ -177,7 +181,7 @@ impl BadIssueSeeker {\n                       issue: Issue,\n                       mut part: NumberPart)\n                       -> IssueClassification {\n-        if ! issue.missing_number || c == '\\n' {\n+        if !issue.missing_number || c == '\\n' {\n             return IssueClassification::Bad(issue);\n         } else if c == ')' {\n             return if let NumberPart::CloseParen = part {"}, {"sha": "3c35b20fb3fff6c722be55a239842a220972b5a6", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b161815fe0aace4baa7007386b783a88547d7548/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b161815fe0aace4baa7007386b783a88547d7548/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=b161815fe0aace4baa7007386b783a88547d7548", "patch": "@@ -446,7 +446,11 @@ impl<'a> FmtVisitor<'a> {\n                                  + field.node.name.to_string().len()\n                                  + 1; // Open paren\n \n-                    let comma_cost = if self.config.enum_trailing_comma { 1 } else { 0 };\n+                    let comma_cost = if self.config.enum_trailing_comma {\n+                        1\n+                    } else {\n+                        0\n+                    };\n                     let budget = self.config.ideal_width - indent - comma_cost - 1; // 1 = )\n \n                     let fmt = ListFormatting {\n@@ -520,7 +524,11 @@ impl<'a> FmtVisitor<'a> {\n             ast::StructFieldKind::UnnamedField(..) => true\n         };\n \n-        let (opener, terminator) = if is_tuple { (\"(\", \")\") } else { (\" {\", \"}\") };\n+        let (opener, terminator) = if is_tuple {\n+            (\"(\", \")\")\n+        } else {\n+            (\" {\", \"}\")\n+        };\n \n         let generics_str = match generics {\n             Some(g) => self.format_generics(g,\n@@ -565,7 +573,11 @@ impl<'a> FmtVisitor<'a> {\n             result.push_str(&indentation);\n         }\n \n-        let tactic = if break_line { ListTactic::Vertical } else { ListTactic::Horizontal };\n+        let tactic = if break_line {\n+            ListTactic::Vertical\n+        } else {\n+            ListTactic::Horizontal\n+        };\n \n         // 1 = ,\n         let budget = self.config.ideal_width - offset + self.config.tab_spaces - 1;"}, {"sha": "246f7cb2dc3d9649085dc2b9cd9177629d6b6ddd", "filename": "src/utils.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b161815fe0aace4baa7007386b783a88547d7548/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b161815fe0aace4baa7007386b783a88547d7548/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=b161815fe0aace4baa7007386b783a88547d7548", "patch": "@@ -24,7 +24,9 @@ pub fn span_after(original: Span, needle: &str, codemap: &CodeMap) -> BytePos {\n \n #[inline]\n pub fn prev_char(s: &str, mut i: usize) -> usize {\n-    if i == 0 { return 0; }\n+    if i == 0 {\n+        return 0;\n+    }\n \n     i -= 1;\n     while !s.is_char_boundary(i) {\n@@ -35,7 +37,9 @@ pub fn prev_char(s: &str, mut i: usize) -> usize {\n \n #[inline]\n pub fn next_char(s: &str, mut i: usize) -> usize {\n-    if i >= s.len() { return s.len(); }\n+    if i >= s.len() {\n+        return s.len();\n+    }\n \n     while !s.is_char_boundary(i) {\n         i += 1;"}, {"sha": "d26c57ebbd007cd1b5c1a52b4168c1c0d07f264f", "filename": "tests/source/expr.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b161815fe0aace4baa7007386b783a88547d7548/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b161815fe0aace4baa7007386b783a88547d7548/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=b161815fe0aace4baa7007386b783a88547d7548", "patch": "@@ -12,5 +12,16 @@ some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 + 40000\n                                                      - 50000 * sqrt(-1),\n                                                      trivial_value);\n     (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + a +\n-             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaa)))))))))\n+             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaa)))))))));\n+\n+     if  1  + 2 > 0  { let result = 5; result } else { 4};\n+\n+    if cond() {\n+        something();\n+    } else  if different_cond() {\n+        something_else();\n+    } else {\n+        // Check subformatting\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+    }\n }"}, {"sha": "f14a56397ec834fd2d5177d31596c91228a4fe97", "filename": "tests/source/struct_lits_visual.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b161815fe0aace4baa7007386b783a88547d7548/tests%2Fsource%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b161815fe0aace4baa7007386b783a88547d7548/tests%2Fsource%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits_visual.rs?ref=b161815fe0aace4baa7007386b783a88547d7548", "patch": "@@ -22,6 +22,8 @@ fn main() {\n     Foo { a:Bar,\n           b:foo() };\n \n+    Quux { x: if cond { bar(); }, y: baz() };\n+\n     A { \n     // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n     first: item(),"}, {"sha": "3a8605b7c42927d26e485fc6322aa0536ddc30f2", "filename": "tests/target/expr.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b161815fe0aace4baa7007386b783a88547d7548/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b161815fe0aace4baa7007386b783a88547d7548/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=b161815fe0aace4baa7007386b783a88547d7548", "patch": "@@ -13,5 +13,22 @@ fn foo() -> bool {\n                                                          trivial_value);\n     (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n              a + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-             aaaaa)))))))))\n+             aaaaa)))))))));\n+\n+    if 1 + 2 > 0 {\n+        let result = 5;\n+        result\n+    } else {\n+        4\n+    };\n+\n+    if cond() {\n+        something();\n+    } else if different_cond() {\n+        something_else();\n+    } else {\n+        // Check subformatting\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+    }\n }"}, {"sha": "248839cb8698bcee85cfeb7db08f261674657388", "filename": "tests/target/struct_lits_visual.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b161815fe0aace4baa7007386b783a88547d7548/tests%2Ftarget%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b161815fe0aace4baa7007386b783a88547d7548/tests%2Ftarget%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_visual.rs?ref=b161815fe0aace4baa7007386b783a88547d7548", "patch": "@@ -35,6 +35,11 @@ fn main() {\n \n     Foo { a: Bar, b: foo() };\n \n+    Quux { x: if cond {\n+               bar();\n+           },\n+           y: baz(), };\n+\n     A { // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n         // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n         // hendrerit. Donec et mollis dolor."}]}