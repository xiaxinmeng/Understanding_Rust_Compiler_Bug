{"sha": "80891f6e4725efc72c27e4f224123ec292fdd7d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwODkxZjZlNDcyNWVmYzcyYzI3ZTRmMjI0MTIzZWMyOTJmZGQ3ZDQ=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-12T06:21:00Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-12T07:37:28Z"}, "message": "Remove some unused macros from the rust codebase\n\nRemoves unused macros from:\n  * libcore\n  * libcollections\n    The last use of these two macros was removed in commit\n    b64c9d56700e2c41207166fe8709711ff02488ff\n    when the char_range_at_reverse function was been removed.\n  * librustc_errors\n    Their last use was removed by commits\n    2f2c3e178325dc1837badcd7573c2c0905fab979\n    and 11dc974a38fd533aa692cea213305056cd3a6902.\n  * libsyntax_ext\n  * librustc_trans\n    Also, put the otry macro in back/msvc/mod.rs under the\n    same cfg argument as the places that use it.", "tree": {"sha": "4debab43e1544d893a5757551449f24a0acbe8e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4debab43e1544d893a5757551449f24a0acbe8e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80891f6e4725efc72c27e4f224123ec292fdd7d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80891f6e4725efc72c27e4f224123ec292fdd7d4", "html_url": "https://github.com/rust-lang/rust/commit/80891f6e4725efc72c27e4f224123ec292fdd7d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80891f6e4725efc72c27e4f224123ec292fdd7d4/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39bcd6f425426bfacd7de9fe0378df4bd9263d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/39bcd6f425426bfacd7de9fe0378df4bd9263d00", "html_url": "https://github.com/rust-lang/rust/commit/39bcd6f425426bfacd7de9fe0378df4bd9263d00"}], "stats": {"total": 97, "additions": 1, "deletions": 96}, "files": [{"sha": "5f4578bbeb36845ac862249368c73e4420e44063", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=80891f6e4725efc72c27e4f224123ec292fdd7d4", "patch": "@@ -176,18 +176,6 @@ impl<'a> Iterator for EncodeUtf16<'a> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a> FusedIterator for EncodeUtf16<'a> {}\n \n-// Return the initial codepoint accumulator for the first byte.\n-// The first byte is special, only want bottom 5 bits for width 2, 4 bits\n-// for width 3, and 3 bits for width 4\n-macro_rules! utf8_first_byte {\n-    ($byte:expr, $width:expr) => (($byte & (0x7F >> $width)) as u32)\n-}\n-\n-// return the value of $ch updated with continuation byte $byte\n-macro_rules! utf8_acc_cont_byte {\n-    ($ch:expr, $byte:expr) => (($ch << 6) | ($byte & 63) as u32)\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Borrow<str> for String {\n     #[inline]"}, {"sha": "b6ab1ecaf4e65643a88f325fadd305fe2428f0b1", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=80891f6e4725efc72c27e4f224123ec292fdd7d4", "patch": "@@ -104,10 +104,6 @@ mod macros;\n #[macro_use]\n mod internal_macros;\n \n-#[path = \"num/float_macros.rs\"]\n-#[macro_use]\n-mod float_macros;\n-\n #[path = \"num/int_macros.rs\"]\n #[macro_use]\n mod int_macros;"}, {"sha": "b3adef53dabeebc8a7a03ed478fb691dd7ed28d6", "filename": "src/libcore/num/float_macros.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39bcd6f425426bfacd7de9fe0378df4bd9263d00/src%2Flibcore%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bcd6f425426bfacd7de9fe0378df4bd9263d00/src%2Flibcore%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat_macros.rs?ref=39bcd6f425426bfacd7de9fe0378df4bd9263d00", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![doc(hidden)]\n-\n-macro_rules! assert_approx_eq {\n-    ($a:expr, $b:expr) => ({\n-        use num::Float;\n-        let (a, b) = (&$a, &$b);\n-        assert!((*a - *b).abs() < 1.0e-6,\n-                \"{} is not approximately equal to {}\", *a, *b);\n-    })\n-}"}, {"sha": "8b4002fe9af244e585adc451e65c8ffdbae26406", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=80891f6e4725efc72c27e4f224123ec292fdd7d4", "patch": "@@ -96,13 +96,6 @@ pub mod dec2flt;\n pub mod bignum;\n pub mod diy_float;\n \n-macro_rules! checked_op {\n-    ($U:ty, $op:path, $x:expr, $y:expr) => {{\n-        let (result, overflowed) = unsafe { $op($x as $U, $y as $U) };\n-        if overflowed { None } else { Some(result as Self) }\n-    }}\n-}\n-\n // `Int` + `SignedInt` implemented for signed integers\n macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr,"}, {"sha": "34c138eca9ee6ba905b028ac8639ef466b35ebc6", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=80891f6e4725efc72c27e4f224123ec292fdd7d4", "patch": "@@ -95,21 +95,6 @@ struct FileWithAnnotatedLines {\n     multiline_depth: usize,\n }\n \n-\n-/// Do not use this for messages that end in `\\n` \u2013 use `println_maybe_styled` instead. See\n-/// `EmitterWriter::print_maybe_styled` for details.\n-macro_rules! print_maybe_styled {\n-    ($dst: expr, $style: expr, $($arg: tt)*) => {\n-        $dst.print_maybe_styled(format_args!($($arg)*), $style, false)\n-    }\n-}\n-\n-macro_rules! println_maybe_styled {\n-    ($dst: expr, $style: expr, $($arg: tt)*) => {\n-        $dst.print_maybe_styled(format_args!($($arg)*), $style, true)\n-    }\n-}\n-\n impl EmitterWriter {\n     pub fn stderr(color_config: ColorConfig, code_map: Option<Rc<CodeMapper>>) -> EmitterWriter {\n         if color_config.use_color() {"}, {"sha": "31f3415b1ecd026424e2de1baf2444e0e7edbe7f", "filename": "src/librustc_trans/back/msvc/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fmod.rs?ref=80891f6e4725efc72c27e4f224123ec292fdd7d4", "patch": "@@ -32,6 +32,7 @@\n //! comments can also be found below leading through the various code paths.\n \n // A simple macro to make this option mess easier to read\n+#[cfg(windows)]\n macro_rules! otry {\n     ($expr:expr) => (match $expr {\n         Some(val) => val,"}, {"sha": "14b6650c49335bc0036fe2ef3b2667b0a73808ae", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=80891f6e4725efc72c27e4f224123ec292fdd7d4", "patch": "@@ -85,9 +85,6 @@ pub mod back {\n \n pub mod diagnostics;\n \n-#[macro_use]\n-mod macros;\n-\n mod abi;\n mod adt;\n mod asm;"}, {"sha": "77efcc6fb0030d9d768d644c02f30696ec91b09b", "filename": "src/librustc_trans/macros.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/39bcd6f425426bfacd7de9fe0378df4bd9263d00/src%2Flibrustc_trans%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bcd6f425426bfacd7de9fe0378df4bd9263d00/src%2Flibrustc_trans%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmacros.rs?ref=39bcd6f425426bfacd7de9fe0378df4bd9263d00", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-macro_rules! unpack_datum {\n-    ($bcx: ident, $inp: expr) => (\n-        {\n-            let db = $inp;\n-            $bcx = db.bcx;\n-            db.datum\n-        }\n-    )\n-}\n-\n-macro_rules! unpack_result {\n-    ($bcx: ident, $inp: expr) => (\n-        {\n-            let db = $inp;\n-            $bcx = db.bcx;\n-            db.val\n-        }\n-    )\n-}"}, {"sha": "31c7cc33676776487a41e6247add158c0edf673a", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80891f6e4725efc72c27e4f224123ec292fdd7d4/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=80891f6e4725efc72c27e4f224123ec292fdd7d4", "patch": "@@ -25,12 +25,6 @@ macro_rules! pathvec {\n     )\n }\n \n-macro_rules! path {\n-    ($($x:tt)*) => (\n-        ::ext::deriving::generic::ty::Path::new( pathvec![ $($x)* ] )\n-    )\n-}\n-\n macro_rules! path_local {\n     ($x:ident) => (\n         ::deriving::generic::ty::Path::new_local(stringify!($x))"}]}