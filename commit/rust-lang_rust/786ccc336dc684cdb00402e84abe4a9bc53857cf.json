{"sha": "786ccc336dc684cdb00402e84abe4a9bc53857cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NmNjYzMzNmRjNjg0Y2RiMDA0MDJlODRhYmU0YTliYzUzODU3Y2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-22T03:01:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-22T03:01:14Z"}, "message": "Auto merge of #53477 - ftilde:exec-rust-gdb-lldb, r=michaelwoerister\n\nExec gdb/lldb in rust-{gdb/lldb} wrapper scripts\n\nThis way, the process we get by executing `rust-gdb` or `rust-lldb` (eventually) is an actual `gdb` or `lldb` process and behaves accordingly. Previously (and at least to me unexpectedly) it was just a script waiting for the debugger to exit. Sending a signal (e.g. SIGINT) to the spawned process did therefore not affect the debugger process (which was just a child of the wrapper script).\n\nIn order to work around that we `exec` (according to [this](http://pubs.opengroup.org/onlinepubs/009695399/utilities/exec.html) part of the posix shell) and replace the script process with the debugger in the last line of the script. The lldb script had to be modified to not pass the configuration commands via a script file (which in my opinion is cleaner anyway).", "tree": {"sha": "4132434226fb51ce9a13b30fbb48bf290974c9b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4132434226fb51ce9a13b30fbb48bf290974c9b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/786ccc336dc684cdb00402e84abe4a9bc53857cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/786ccc336dc684cdb00402e84abe4a9bc53857cf", "html_url": "https://github.com/rust-lang/rust/commit/786ccc336dc684cdb00402e84abe4a9bc53857cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/786ccc336dc684cdb00402e84abe4a9bc53857cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a79cffb8b8330527d262bdde56387d45ac46dd44", "url": "https://api.github.com/repos/rust-lang/rust/commits/a79cffb8b8330527d262bdde56387d45ac46dd44", "html_url": "https://github.com/rust-lang/rust/commit/a79cffb8b8330527d262bdde56387d45ac46dd44"}, {"sha": "d6426e8a25baa3011b9db14aca660b39b9867578", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6426e8a25baa3011b9db14aca660b39b9867578", "html_url": "https://github.com/rust-lang/rust/commit/d6426e8a25baa3011b9db14aca660b39b9867578"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "743952a5bef89894134c7c785e11097dd2efe95d", "filename": "src/etc/rust-gdb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/786ccc336dc684cdb00402e84abe4a9bc53857cf/src%2Fetc%2Frust-gdb", "raw_url": "https://github.com/rust-lang/rust/raw/786ccc336dc684cdb00402e84abe4a9bc53857cf/src%2Fetc%2Frust-gdb", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-gdb?ref=786ccc336dc684cdb00402e84abe4a9bc53857cf", "patch": "@@ -20,7 +20,7 @@ GDB_PYTHON_MODULE_DIRECTORY=\"$RUSTC_SYSROOT/lib/rustlib/etc\"\n # Set the environment variable `RUST_GDB` to overwrite the call to a\n # different/specific command (defaults to `gdb`).\n RUST_GDB=\"${RUST_GDB:-gdb}\"\n-PYTHONPATH=\"$PYTHONPATH:$GDB_PYTHON_MODULE_DIRECTORY\" ${RUST_GDB} \\\n+PYTHONPATH=\"$PYTHONPATH:$GDB_PYTHON_MODULE_DIRECTORY\" exec ${RUST_GDB} \\\n   --directory=\"$GDB_PYTHON_MODULE_DIRECTORY\" \\\n   -iex \"add-auto-load-safe-path $GDB_PYTHON_MODULE_DIRECTORY\" \\\n   \"$@\""}, {"sha": "6a2849b55485e0ae05454ce93c96d6c518ab5bb5", "filename": "src/etc/rust-lldb", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/786ccc336dc684cdb00402e84abe4a9bc53857cf/src%2Fetc%2Frust-lldb", "raw_url": "https://github.com/rust-lang/rust/raw/786ccc336dc684cdb00402e84abe4a9bc53857cf/src%2Fetc%2Frust-lldb", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-lldb?ref=786ccc336dc684cdb00402e84abe4a9bc53857cf", "patch": "@@ -23,19 +23,16 @@ display the contents of local variables!\"\n     echo \"***\"\n fi\n \n-# Create a tempfile containing the LLDB script we want to execute on startup\n-TMPFILE=`mktemp /tmp/rust-lldb-commands.XXXXXX`\n-\n-# Make sure to delete the tempfile no matter what\n-trap \"rm -f $TMPFILE; exit\" INT TERM EXIT\n-\n # Find out where to look for the pretty printer Python module\n RUSTC_SYSROOT=`rustc --print sysroot`\n \n-# Write the LLDB script to the tempfile\n-echo \"command script import \\\"$RUSTC_SYSROOT/lib/rustlib/etc/lldb_rust_formatters.py\\\"\" >> $TMPFILE\n-echo \"type summary add --no-value --python-function lldb_rust_formatters.print_val -x \\\".*\\\" --category Rust\" >> $TMPFILE\n-echo \"type category enable Rust\" >> $TMPFILE\n+# Prepare commands that will be loaded before any file on the command line has been loaded\n+script_import=\"command script import \\\"$RUSTC_SYSROOT/lib/rustlib/etc/lldb_rust_formatters.py\\\"\"\n+category_definition=\"type summary add --no-value --python-function lldb_rust_formatters.print_val -x \\\".*\\\" --category Rust\"\n+category_enable=\"type category enable Rust\"\n \n-# Call LLDB with the script added to the argument list\n-lldb --source-before-file=\"$TMPFILE\" \"$@\"\n+# Call LLDB with the commands added to the argument list\n+exec lldb --one-line-before-file=\"$script_import\" \\\n+    --one-line-before-file=\"$category_definition\" \\\n+    --one-line-before-file=\"$category_enable\" \\\n+    \"$@\""}]}