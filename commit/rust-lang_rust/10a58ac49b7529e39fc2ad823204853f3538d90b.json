{"sha": "10a58ac49b7529e39fc2ad823204853f3538d90b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYTU4YWM0OWI3NTI5ZTM5ZmMyYWQ4MjMyMDQ4NTNmMzUzOGQ5MGI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-18T12:46:55Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-18T12:46:55Z"}, "message": "Incorporate review feedback: code formatting fixes, expand a comment.", "tree": {"sha": "a414d359ee6b54524eb7794bd2611246625fc4a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a414d359ee6b54524eb7794bd2611246625fc4a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10a58ac49b7529e39fc2ad823204853f3538d90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10a58ac49b7529e39fc2ad823204853f3538d90b", "html_url": "https://github.com/rust-lang/rust/commit/10a58ac49b7529e39fc2ad823204853f3538d90b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10a58ac49b7529e39fc2ad823204853f3538d90b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4124d8e48b9ffbd9f33819eba74baadf6cfdbe6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4124d8e48b9ffbd9f33819eba74baadf6cfdbe6c", "html_url": "https://github.com/rust-lang/rust/commit/4124d8e48b9ffbd9f33819eba74baadf6cfdbe6c"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "5e2b49bac1b2fb6619a843cbc2038d4369ad65b7", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10a58ac49b7529e39fc2ad823204853f3538d90b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a58ac49b7529e39fc2ad823204853f3538d90b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=10a58ac49b7529e39fc2ad823204853f3538d90b", "patch": "@@ -71,7 +71,8 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n     ccx: &CrateCtxt<'a, 'tcx>,\n     drop_impl_did: DefId,\n     drop_impl_ty: Ty<'tcx>,\n-    self_type_did: DefId) -> Result<(), ()>\n+    self_type_did: DefId)\n+    -> Result<(), ()>\n {\n     let tcx = ccx.tcx;\n     let drop_impl_node_id = tcx.map.as_local_node_id(drop_impl_did).unwrap();\n@@ -123,7 +124,9 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n     drop_impl_did: DefId,\n     dtor_predicates: &ty::GenericPredicates<'tcx>,\n     self_type_did: DefId,\n-    self_to_impl_substs: &Substs<'tcx>) -> Result<(), ()> {\n+    self_to_impl_substs: &Substs<'tcx>)\n+    -> Result<(), ()>\n+{\n \n     // Here is an example, analogous to that from\n     // `compare_impl_method`.\n@@ -350,7 +353,8 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'gcx, 'tcx>(\n     cx: &mut DropckContext<'a, 'b, 'gcx, 'tcx>,\n     context: TypeContext,\n     ty: Ty<'tcx>,\n-    depth: usize) -> Result<(), Error<'tcx>>\n+    depth: usize)\n+    -> Result<(), Error<'tcx>>\n {\n     let tcx = cx.rcx.tcx;\n     // Issue #22443: Watch out for overflow. While we are careful to\n@@ -531,7 +535,8 @@ enum DropckKind<'tcx> {\n /// parameters are re-mapped to `()` to reflect the destructor's\n /// \"purity\" with respect to their actual contents.\n fn has_dtor_of_interest<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                        ty: Ty<'tcx>) -> DropckKind<'tcx> {\n+                                        ty: Ty<'tcx>)\n+                                        -> DropckKind<'tcx> {\n     match ty.sty {\n         ty::TyAdt(adt_def, substs) => {\n             if !adt_def.is_dtorck(tcx) {\n@@ -574,7 +579,8 @@ fn has_dtor_of_interest<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n fn revise_self_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                   adt_def: ty::AdtDef<'tcx>,\n                                   impl_id: DefId,\n-                                  substs: &Substs<'tcx>) -> Ty<'tcx> {\n+                                  substs: &Substs<'tcx>)\n+                                  -> Ty<'tcx> {\n     // Get generics for `impl Drop` to query for `#[may_dangle]` attr.\n     let impl_bindings = tcx.lookup_generics(impl_id);\n \n@@ -592,6 +598,14 @@ fn revise_self_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n \n     // Walk `substs` + `self_substs`, build new substs appropriate for\n     // `adt_def`; each non-dangling param reuses entry from `substs`.\n+    //\n+    // Note: The manner we map from a right-hand side (i.e. Region or\n+    // Ty) for a given `def` to generic parameter associated with that\n+    // right-hand side is tightly coupled to `Drop` impl constraints.\n+    //\n+    // E.g. we know such a Ty must be `TyParam`, because a destructor\n+    // for `struct Foo<X>` is defined via `impl<Y> Drop for Foo<Y>`,\n+    // and never by (for example) `impl<Z> Drop for Foo<Vec<Z>>`.\n     let substs = Substs::for_item(\n         tcx,\n         adt_def.did,"}]}