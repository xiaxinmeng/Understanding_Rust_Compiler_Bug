{"sha": "09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "node_id": "C_kwDOAAsO6NoAKDA5ZjNlYTE2OTI4ZDdhNjFlZjg4MDViYzJhZDY5YTNiZDJmN2RiMTg", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-17T19:37:46Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-04-30T02:27:25Z"}, "message": "When encountering a binding that could be a const or unit variant, suggest the right path", "tree": {"sha": "92d0f42c519575ffe8133266bc378750ff0e4ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92d0f42c519575ffe8133266bc378750ff0e4ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "html_url": "https://github.com/rust-lang/rust/commit/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c07386b45fbc540ec8cdc1bc41ae9c062b453b", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c07386b45fbc540ec8cdc1bc41ae9c062b453b", "html_url": "https://github.com/rust-lang/rust/commit/05c07386b45fbc540ec8cdc1bc41ae9c062b453b"}], "stats": {"total": 208, "additions": 131, "deletions": 77}, "files": [{"sha": "401ffe67364ab26355235b2f5b15f4772951a983", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 71, "deletions": 19, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "patch": "@@ -134,6 +134,7 @@ impl<'a> Resolver<'a> {\n                     &candidates,\n                     instead,\n                     found_use,\n+                    false,\n                 );\n             } else if let Some((span, msg, sugg, appl)) = suggestion {\n                 err.span_suggestion(span, msg, sugg, appl);\n@@ -493,14 +494,14 @@ impl<'a> Resolver<'a> {\n     ///\n     /// This takes the error provided, combines it with the span and any additional spans inside the\n     /// error and emits it.\n-    crate fn report_error(&self, span: Span, resolution_error: ResolutionError<'_>) {\n+    crate fn report_error(&mut self, span: Span, resolution_error: ResolutionError<'a>) {\n         self.into_struct_error(span, resolution_error).emit();\n     }\n \n     crate fn into_struct_error(\n-        &self,\n+        &mut self,\n         span: Span,\n-        resolution_error: ResolutionError<'_>,\n+        resolution_error: ResolutionError<'a>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         match resolution_error {\n             ResolutionError::GenericParamsFromOuterFunction(outer_res, has_generic_params) => {\n@@ -650,7 +651,7 @@ impl<'a> Resolver<'a> {\n                 }\n                 err\n             }\n-            ResolutionError::VariableNotBoundInPattern(binding_error) => {\n+            ResolutionError::VariableNotBoundInPattern(binding_error, parent_scope) => {\n                 let BindingError { name, target, origin, could_be_path } = binding_error;\n \n                 let target_sp = target.iter().copied().collect::<Vec<_>>();\n@@ -670,13 +671,41 @@ impl<'a> Resolver<'a> {\n                 for sp in origin_sp {\n                     err.span_label(sp, \"variable not in all patterns\");\n                 }\n-                if *could_be_path {\n-                    let help_msg = format!(\n-                        \"if you meant to match on a variant or a `const` item, consider \\\n-                         making the path in the pattern qualified: `?::{}`\",\n-                        name,\n+                if could_be_path {\n+                    let import_suggestions = self.lookup_import_candidates(\n+                        Ident::with_dummy_span(name),\n+                        Namespace::ValueNS,\n+                        &parent_scope,\n+                        &|res: Res| match res {\n+                            Res::Def(\n+                                DefKind::Ctor(CtorOf::Variant, CtorKind::Const)\n+                                | DefKind::Ctor(CtorOf::Struct, CtorKind::Const)\n+                                | DefKind::Const\n+                                | DefKind::AssocConst,\n+                                _,\n+                            ) => true,\n+                            _ => false,\n+                        },\n+                    );\n+\n+                    if import_suggestions.is_empty() {\n+                        let help_msg = format!(\n+                            \"if you meant to match on a variant or a `const` item, consider \\\n+                             making the path in the pattern qualified: `path::to::ModOrType::{}`\",\n+                            name,\n+                        );\n+                        err.span_help(span, &help_msg);\n+                    }\n+                    show_candidates(\n+                        &self.definitions,\n+                        self.session,\n+                        &mut err,\n+                        Some(span),\n+                        &import_suggestions,\n+                        false,\n+                        true,\n+                        true,\n                     );\n-                    err.span_help(span, &help_msg);\n                 }\n                 err\n             }\n@@ -1022,7 +1051,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     crate fn report_vis_error(\n-        &self,\n+        &mut self,\n         vis_resolution_error: VisResolutionError<'_>,\n     ) -> ErrorGuaranteed {\n         match vis_resolution_error {\n@@ -1455,6 +1484,7 @@ impl<'a> Resolver<'a> {\n             &import_suggestions,\n             false,\n             true,\n+            false,\n         );\n \n         if macro_kind == MacroKind::Derive && (ident.name == sym::Send || ident.name == sym::Sync) {\n@@ -2402,6 +2432,7 @@ fn show_candidates(\n     candidates: &[ImportSuggestion],\n     instead: bool,\n     found_use: bool,\n+    is_pattern: bool,\n ) {\n     if candidates.is_empty() {\n         return;\n@@ -2428,20 +2459,34 @@ fn show_candidates(\n     }\n \n     if !accessible_path_strings.is_empty() {\n-        let (determiner, kind) = if accessible_path_strings.len() == 1 {\n-            (\"this\", accessible_path_strings[0].1)\n+        let (determiner, kind, name) = if accessible_path_strings.len() == 1 {\n+            (\"this\", accessible_path_strings[0].1, format!(\" `{}`\", accessible_path_strings[0].0))\n         } else {\n-            (\"one of these\", \"items\")\n+            (\"one of these\", \"items\", String::new())\n         };\n \n         let instead = if instead { \" instead\" } else { \"\" };\n-        let mut msg = format!(\"consider importing {} {}{}\", determiner, kind, instead);\n+        let mut msg = if is_pattern {\n+            format!(\n+                \"if you meant to match on {}{}{}, use the full path in the pattern\",\n+                kind, instead, name\n+            )\n+        } else {\n+            format!(\"consider importing {} {}{}\", determiner, kind, instead)\n+        };\n \n         for note in accessible_path_strings.iter().flat_map(|cand| cand.3.as_ref()) {\n             err.note(note);\n         }\n \n-        if let Some(span) = use_placement_span {\n+        if let (true, Some(span)) = (is_pattern, use_placement_span) {\n+            err.span_suggestions(\n+                span,\n+                &msg,\n+                accessible_path_strings.into_iter().map(|a| a.0),\n+                Applicability::MaybeIncorrect,\n+            );\n+        } else if let Some(span) = use_placement_span {\n             for candidate in &mut accessible_path_strings {\n                 // produce an additional newline to separate the new use statement\n                 // from the directly following item.\n@@ -2453,7 +2498,7 @@ fn show_candidates(\n                 span,\n                 &msg,\n                 accessible_path_strings.into_iter().map(|a| a.0),\n-                Applicability::Unspecified,\n+                Applicability::MaybeIncorrect,\n             );\n         } else {\n             msg.push(':');\n@@ -2468,9 +2513,16 @@ fn show_candidates(\n     } else {\n         assert!(!inaccessible_path_strings.is_empty());\n \n+        let prefix = if is_pattern { \"you might have meant to match on \" } else { \"\" };\n         if inaccessible_path_strings.len() == 1 {\n             let (name, descr, def_id, note) = &inaccessible_path_strings[0];\n-            let msg = format!(\"{} `{}` exists but is inaccessible\", descr, name);\n+            let msg = format!(\n+                \"{}{} `{}`{} exists but is inaccessible\",\n+                prefix,\n+                descr,\n+                name,\n+                if is_pattern { \", which\" } else { \"\" }\n+            );\n \n             if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n                 let span = definitions.def_span(local_def_id);\n@@ -2496,7 +2548,7 @@ fn show_candidates(\n                 \"item\".to_string()\n             };\n \n-            let mut msg = format!(\"these {}s exist but are inaccessible\", descr);\n+            let mut msg = format!(\"{}these {}s exist but are inaccessible\", prefix, descr);\n             let mut has_colon = false;\n \n             let mut spans = Vec::new();"}, {"sha": "aafef3e3137119821d32339eefb152aa442bda57", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "patch": "@@ -1422,7 +1422,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n     /// Searches the current set of local scopes for labels. Returns the `NodeId` of the resolved\n     /// label and reports an error if the label is not found or is unreachable.\n-    fn resolve_label(&self, mut label: Ident) -> Option<NodeId> {\n+    fn resolve_label(&mut self, mut label: Ident) -> Option<NodeId> {\n         let mut suggestion = None;\n \n         // Preserve the original span so that errors contain \"in this macro invocation\"\n@@ -1442,14 +1442,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             let ident = label.normalize_to_macro_rules();\n             if let Some((ident, id)) = rib.bindings.get_key_value(&ident) {\n+                let definition_span = ident.span;\n                 return if self.is_label_valid_from_rib(i) {\n                     Some(*id)\n                 } else {\n                     self.report_error(\n                         original_span,\n                         ResolutionError::UnreachableLabel {\n                             name: label.name,\n-                            definition_span: ident.span,\n+                            definition_span,\n                             suggestion,\n                         },\n                     );\n@@ -2135,7 +2136,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         span: Span,\n         err: F,\n     ) where\n-        F: FnOnce(Ident, &str, Option<Symbol>) -> ResolutionError<'_>,\n+        F: FnOnce(Ident, String, Option<Symbol>) -> ResolutionError<'a>,\n     {\n         // If there is a TraitRef in scope for an impl, then the method must be in the trait.\n         let Some((module, _)) = &self.current_trait_ref else { return; };\n@@ -2159,7 +2160,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // We could not find the method: report an error.\n             let candidate = self.find_similarly_named_assoc_item(ident.name, kind);\n             let path = &self.current_trait_ref.as_ref().unwrap().1.path;\n-            self.report_error(span, err(ident, &path_names_to_string(path), candidate));\n+            let path_names = path_names_to_string(path);\n+            self.report_error(span, err(ident, path_names, candidate));\n             return;\n         };\n \n@@ -2183,13 +2185,14 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             AssocItemKind::TyAlias(..) => (rustc_errors::error_code!(E0325), \"type\"),\n             AssocItemKind::MacCall(..) => span_bug!(span, \"unexpanded macro\"),\n         };\n+        let trait_path = path_names_to_string(path);\n         self.report_error(\n             span,\n             ResolutionError::TraitImplMismatch {\n                 name: ident.name,\n                 kind,\n                 code,\n-                trait_path: path_names_to_string(path),\n+                trait_path,\n                 trait_item_span: binding.span,\n             },\n         );\n@@ -2304,16 +2307,16 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         }\n \n         // 3) Report all missing variables we found.\n-        let mut missing_vars = missing_vars.iter_mut().collect::<Vec<_>>();\n-        missing_vars.sort_by_key(|(sym, _err)| sym.as_str());\n+        let mut missing_vars = missing_vars.into_iter().collect::<Vec<_>>();\n+        missing_vars.sort_by_key(|&(sym, ref _err)| sym);\n \n-        for (name, mut v) in missing_vars {\n-            if inconsistent_vars.contains_key(name) {\n+        for (name, mut v) in missing_vars.into_iter() {\n+            if inconsistent_vars.contains_key(&name) {\n                 v.could_be_path = false;\n             }\n             self.report_error(\n                 *v.origin.iter().next().unwrap(),\n-                ResolutionError::VariableNotBoundInPattern(v),\n+                ResolutionError::VariableNotBoundInPattern(v, self.parent_scope),\n             );\n         }\n \n@@ -2815,7 +2818,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     /// A wrapper around [`Resolver::report_error`].\n     ///\n     /// This doesn't emit errors for function bodies if this is rustdoc.\n-    fn report_error(&self, span: Span, resolution_error: ResolutionError<'_>) {\n+    fn report_error(&mut self, span: Span, resolution_error: ResolutionError<'a>) {\n         if self.should_report_errs() {\n             self.r.report_error(span, resolution_error);\n         }"}, {"sha": "dbc4f337ad3b55a33d4a6aeaaad1a283b838a7c2", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "patch": "@@ -201,13 +201,13 @@ enum ResolutionError<'a> {\n     /// parameter list.\n     NameAlreadyUsedInParameterList(Symbol, Span),\n     /// Error E0407: method is not a member of trait.\n-    MethodNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n+    MethodNotMemberOfTrait(Ident, String, Option<Symbol>),\n     /// Error E0437: type is not a member of trait.\n-    TypeNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n+    TypeNotMemberOfTrait(Ident, String, Option<Symbol>),\n     /// Error E0438: const is not a member of trait.\n-    ConstNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n+    ConstNotMemberOfTrait(Ident, String, Option<Symbol>),\n     /// Error E0408: variable `{}` is not bound in all patterns.\n-    VariableNotBoundInPattern(&'a BindingError),\n+    VariableNotBoundInPattern(BindingError, ParentScope<'a>),\n     /// Error E0409: variable `{}` is bound in inconsistent ways within the same match arm.\n     VariableBoundWithDifferentMode(Symbol, Span),\n     /// Error E0415: identifier is bound more than once in this parameter list."}, {"sha": "356763fab5e3b35e2b612bfa6905940c693cef68", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "patch": "@@ -643,6 +643,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             });\n             let pre = if in_match { \"in the same arm, \" } else { \"\" };\n             err.note(&format!(\"{}a binding must have the same type in all alternatives\", pre));\n+            // FIXME: check if `var_ty` and `ty` can be made the same type by adding or removing\n+            // `ref` or `&` to the pattern.\n             err.emit();\n         }\n     }"}, {"sha": "8fafa275b5c2736d007b97af3122beb4ec19de36", "filename": "src/test/ui/or-patterns/missing-bindings.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmissing-bindings.stderr?ref=09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "patch": "@@ -103,6 +103,22 @@ LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n    |            |\n    |            pattern doesn't bind `c`\n \n+error[E0408]: variable `d` is not bound in all patterns\n+  --> $DIR/missing-bindings.rs:45:33\n+   |\n+LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n+   |                            -    ^^^^ pattern doesn't bind `d`\n+   |                            |\n+   |                            variable not in all patterns\n+\n+error[E0408]: variable `e` is not bound in all patterns\n+  --> $DIR/missing-bindings.rs:45:10\n+   |\n+LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n+   |          ^^^^^^^^^^^^^^^^^^^^     - variable not in all patterns\n+   |          |\n+   |          pattern doesn't bind `e`\n+\n error[E0408]: variable `a` is not bound in all patterns\n   --> $DIR/missing-bindings.rs:45:33\n    |\n@@ -127,22 +143,6 @@ LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n    |                        |\n    |                        variable not in all patterns\n \n-error[E0408]: variable `d` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:45:33\n-   |\n-LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n-   |                            -    ^^^^ pattern doesn't bind `d`\n-   |                            |\n-   |                            variable not in all patterns\n-\n-error[E0408]: variable `e` is not bound in all patterns\n-  --> $DIR/missing-bindings.rs:45:10\n-   |\n-LL |     let (A(A(a, b) | B(c), d) | B(e)) = Y;\n-   |          ^^^^^^^^^^^^^^^^^^^^     - variable not in all patterns\n-   |          |\n-   |          pattern doesn't bind `e`\n-\n error[E0408]: variable `a` is not bound in all patterns\n   --> $DIR/missing-bindings.rs:61:29\n    |"}, {"sha": "989d2d4523099c4ba2066f1fd82e3caa866e3645", "filename": "src/test/ui/resolve/resolve-inconsistent-names.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.rs?ref=09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "patch": "@@ -2,9 +2,9 @@\n \n enum E { A, B, c }\n \n-mod m {\n+pub mod m {\n     const CONST1: usize = 10;\n-    const Const2: usize = 20;\n+    pub const Const2: usize = 20;\n }\n \n fn main() {\n@@ -22,15 +22,14 @@ fn main() {\n         //~| ERROR variable `B` is bound inconsistently\n         //~| ERROR mismatched types\n         //~| ERROR variable `c` is not bound in all patterns\n-        //~| HELP consider making the path in the pattern qualified: `?::A`\n+        //~| HELP if you meant to match on unit variant `E::A`, use the full path in the pattern\n     }\n \n     let z = (10, 20);\n     match z {\n         (CONST1, _) | (_, Const2) => ()\n         //~^ ERROR variable `CONST1` is not bound in all patterns\n-        //~| HELP consider making the path in the pattern qualified: `?::CONST1`\n         //~| ERROR variable `Const2` is not bound in all patterns\n-        //~| HELP consider making the path in the pattern qualified: `?::Const2`\n+        //~| HELP if you meant to match on constant `m::Const2`, use the full path in the pattern\n     }\n }"}, {"sha": "9de191f7d327ac40294239a30b81795d05f134b3", "filename": "src/test/ui/resolve/resolve-inconsistent-names.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr?ref=09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "patch": "@@ -23,11 +23,10 @@ LL |         (A, B) | (ref B, c) | (c, A) => ()\n    |          |       pattern doesn't bind `A`\n    |          variable not in all patterns\n    |\n-help: if you meant to match on a variant or a `const` item, consider making the path in the pattern qualified: `?::A`\n-  --> $DIR/resolve-inconsistent-names.rs:19:10\n+help: if you meant to match on unit variant `E::A`, use the full path in the pattern\n    |\n-LL |         (A, B) | (ref B, c) | (c, A) => ()\n-   |          ^\n+LL |         (E::A, B) | (ref B, c) | (c, A) => ()\n+   |          ~~~~\n \n error[E0408]: variable `B` is not bound in all patterns\n   --> $DIR/resolve-inconsistent-names.rs:19:31\n@@ -63,11 +62,11 @@ LL |         (CONST1, _) | (_, Const2) => ()\n    |          |\n    |          variable not in all patterns\n    |\n-help: if you meant to match on a variant or a `const` item, consider making the path in the pattern qualified: `?::CONST1`\n-  --> $DIR/resolve-inconsistent-names.rs:30:10\n+note: you might have meant to match on constant `m::CONST1`, which exists but is inaccessible\n+  --> $DIR/resolve-inconsistent-names.rs:6:5\n    |\n-LL |         (CONST1, _) | (_, Const2) => ()\n-   |          ^^^^^^\n+LL |     const CONST1: usize = 10;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible\n \n error[E0408]: variable `Const2` is not bound in all patterns\n   --> $DIR/resolve-inconsistent-names.rs:30:9\n@@ -77,11 +76,10 @@ LL |         (CONST1, _) | (_, Const2) => ()\n    |         |\n    |         pattern doesn't bind `Const2`\n    |\n-help: if you meant to match on a variant or a `const` item, consider making the path in the pattern qualified: `?::Const2`\n-  --> $DIR/resolve-inconsistent-names.rs:30:27\n+help: if you meant to match on constant `m::Const2`, use the full path in the pattern\n    |\n-LL |         (CONST1, _) | (_, Const2) => ()\n-   |                           ^^^^^^\n+LL |         (CONST1, _) | (_, m::Const2) => ()\n+   |                           ~~~~~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-names.rs:19:19"}, {"sha": "25c35fd5479f933ce4db6a3563e32ce0a152045e", "filename": "src/test/ui/span/issue-39698.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/src%2Ftest%2Fui%2Fspan%2Fissue-39698.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18/src%2Ftest%2Fui%2Fspan%2Fissue-39698.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39698.stderr?ref=09f3ea16928d7a61ef8805bc2ad69a3bd2f7db18", "patch": "@@ -1,3 +1,13 @@\n+error[E0408]: variable `d` is not bound in all patterns\n+  --> $DIR/issue-39698.rs:10:37\n+   |\n+LL |         T::T1(a, d) | T::T2(d, b) | T::T3(c) | T::T4(a) => { println!(\"{:?}\", a); }\n+   |                  -          -       ^^^^^^^^   ^^^^^^^^ pattern doesn't bind `d`\n+   |                  |          |       |\n+   |                  |          |       pattern doesn't bind `d`\n+   |                  |          variable not in all patterns\n+   |                  variable not in all patterns\n+\n error[E0408]: variable `a` is not bound in all patterns\n   --> $DIR/issue-39698.rs:10:23\n    |\n@@ -28,16 +38,6 @@ LL |         T::T1(a, d) | T::T2(d, b) | T::T3(c) | T::T4(a) => { println!(\"{:?}\n    |         |             pattern doesn't bind `c`\n    |         pattern doesn't bind `c`\n \n-error[E0408]: variable `d` is not bound in all patterns\n-  --> $DIR/issue-39698.rs:10:37\n-   |\n-LL |         T::T1(a, d) | T::T2(d, b) | T::T3(c) | T::T4(a) => { println!(\"{:?}\", a); }\n-   |                  -          -       ^^^^^^^^   ^^^^^^^^ pattern doesn't bind `d`\n-   |                  |          |       |\n-   |                  |          |       pattern doesn't bind `d`\n-   |                  |          variable not in all patterns\n-   |                  variable not in all patterns\n-\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0408`."}]}