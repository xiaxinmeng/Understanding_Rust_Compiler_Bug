{"sha": "69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "node_id": "C_kwDOAAsO6NoAKDY5ZGI5MWI4YjI1ZGU1MTYzM2FjOWYwODljZDdmYjEwYTU4YzJiMmE", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2021-12-26T02:21:54Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-03-27T12:11:49Z"}, "message": "Change advance(_back)_by to return `usize` instead of `Result<(), usize>`\n\nA successful advance is now signalled by returning `0` and other values now represent the remaining number\nof steps that couldn't be advanced as opposed to the amount of steps that have been advanced during a partial advance_by.\n\nThis simplifies adapters a bit, replacing some `match`/`if` with arithmetic. Whether this is beneficial overall depends\non whether `advance_by` is mostly used as a building-block for other iterator methods and adapters or whether\nwe also see uses by users where `Result` might be more useful.", "tree": {"sha": "2bb072195a1a0744f33624b96a1343d12a2452c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bb072195a1a0744f33624b96a1343d12a2452c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "html_url": "https://github.com/rust-lang/rust/commit/69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0600714ab1a4cb2d1a88cd0660b9f9a2c07309", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0600714ab1a4cb2d1a88cd0660b9f9a2c07309", "html_url": "https://github.com/rust-lang/rust/commit/7a0600714ab1a4cb2d1a88cd0660b9f9a2c07309"}], "stats": {"total": 667, "additions": 315, "deletions": 352}, "files": [{"sha": "8ba963b790d89ad69948e9b4da5b032afc8a40e0", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -54,14 +54,14 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         if self.inner.len < n {\n             let len = self.inner.len;\n             self.inner.clear();\n-            Err(len)\n+            len - n\n         } else {\n             self.inner.drain(..n);\n-            Ok(())\n+            0\n         }\n     }\n \n@@ -182,14 +182,14 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         let len = self.inner.len;\n         if len >= n {\n             self.inner.truncate(len - n);\n-            Ok(())\n+            0\n         } else {\n             self.inner.clear();\n-            Err(len)\n+            n - len\n         }\n     }\n "}, {"sha": "5b91c1635f0d6dfcf00054f1d1e2710af5341c56", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -55,13 +55,13 @@ impl<'a, T> Iterator for Iter<'a, T> {\n         }\n     }\n \n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let m = match self.i1.advance_by(n) {\n-            Ok(_) => return Ok(()),\n-            Err(m) => m,\n-        };\n+    fn advance_by(&mut self, n: usize) -> usize {\n+        let remaining = self.i1.advance_by(n);\n+        if remaining == 0 {\n+            return 0;\n+        }\n         mem::swap(&mut self.i1, &mut self.i2);\n-        self.i1.advance_by(n - m).map_err(|o| o + m)\n+        self.i1.advance_by(remaining)\n     }\n \n     #[inline]\n@@ -125,14 +125,13 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n         }\n     }\n \n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let m = match self.i2.advance_back_by(n) {\n-            Ok(_) => return Ok(()),\n-            Err(m) => m,\n-        };\n-\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n+        let remaining = self.i2.advance_back_by(n);\n+        if remaining == 0 {\n+            return 0;\n+        }\n         mem::swap(&mut self.i1, &mut self.i2);\n-        self.i2.advance_back_by(n - m).map_err(|o| m + o)\n+        self.i2.advance_back_by(remaining)\n     }\n \n     fn rfold<Acc, F>(self, accum: Acc, mut f: F) -> Acc"}, {"sha": "848cb3649c852be6e623fe535c221f99a51d4c6d", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -47,13 +47,13 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n         }\n     }\n \n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let m = match self.i1.advance_by(n) {\n-            Ok(_) => return Ok(()),\n-            Err(m) => m,\n-        };\n+    fn advance_by(&mut self, n: usize) -> usize {\n+        let remaining = self.i1.advance_by(n);\n+        if remaining == 0 {\n+            return 0;\n+        }\n         mem::swap(&mut self.i1, &mut self.i2);\n-        self.i1.advance_by(n - m).map_err(|o| o + m)\n+        self.i1.advance_by(remaining)\n     }\n \n     #[inline]\n@@ -117,14 +117,13 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n         }\n     }\n \n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let m = match self.i2.advance_back_by(n) {\n-            Ok(_) => return Ok(()),\n-            Err(m) => m,\n-        };\n-\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n+        let remaining = self.i2.advance_back_by(n);\n+        if remaining == 0 {\n+            return 0;\n+        }\n         mem::swap(&mut self.i1, &mut self.i2);\n-        self.i2.advance_back_by(n - m).map_err(|o| m + o)\n+        self.i2.advance_back_by(remaining)\n     }\n \n     fn rfold<Acc, F>(self, accum: Acc, mut f: F) -> Acc"}, {"sha": "504ca4333bed5c9e8709be2c6ab44c646d4412d5", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -213,7 +213,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         let step_size = self.len().min(n);\n         let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);\n         if T::IS_ZST {\n@@ -227,10 +227,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         unsafe {\n             ptr::drop_in_place(to_drop);\n         }\n-        if step_size < n {\n-            return Err(step_size);\n-        }\n-        Ok(())\n+        n - step_size\n     }\n \n     #[inline]\n@@ -313,7 +310,7 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         let step_size = self.len().min(n);\n         if T::IS_ZST {\n             // SAFETY: same as for advance_by()\n@@ -327,10 +324,7 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n         unsafe {\n             ptr::drop_in_place(to_drop);\n         }\n-        if step_size < n {\n-            return Err(step_size);\n-        }\n-        Ok(())\n+        n - step_size\n     }\n }\n "}, {"sha": "e00af189fbfedefb1e6b9d598c66bb8f7a22083b", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -1,4 +1,5 @@\n use core::alloc::{Allocator, Layout};\n+use core::assert_eq;\n use core::iter::IntoIterator;\n use core::ptr::NonNull;\n use std::alloc::System;\n@@ -1062,21 +1063,21 @@ fn test_into_iter_leak() {\n \n #[test]\n fn test_into_iter_advance_by() {\n-    let mut i = [1, 2, 3, 4, 5].into_iter();\n-    i.advance_by(0).unwrap();\n-    i.advance_back_by(0).unwrap();\n+    let mut i = vec![1, 2, 3, 4, 5].into_iter();\n+    assert_eq!(i.advance_by(0), 0);\n+    assert_eq!(i.advance_back_by(0), 0);\n     assert_eq!(i.as_slice(), [1, 2, 3, 4, 5]);\n \n-    i.advance_by(1).unwrap();\n-    i.advance_back_by(1).unwrap();\n+    assert_eq!(i.advance_by(1), 0);\n+    assert_eq!(i.advance_back_by(1), 0);\n     assert_eq!(i.as_slice(), [2, 3, 4]);\n \n-    assert_eq!(i.advance_back_by(usize::MAX), Err(3));\n+    assert_eq!(i.advance_back_by(usize::MAX), usize::MAX - 3);\n \n-    assert_eq!(i.advance_by(usize::MAX), Err(0));\n+    assert_eq!(i.advance_by(usize::MAX), usize::MAX);\n \n-    i.advance_by(0).unwrap();\n-    i.advance_back_by(0).unwrap();\n+    assert_eq!(i.advance_by(0), 0);\n+    assert_eq!(i.advance_back_by(0), 0);\n \n     assert_eq!(i.len(), 0);\n }\n@@ -1124,7 +1125,7 @@ fn test_into_iter_zst() {\n     for _ in vec![C; 5].into_iter().rev() {}\n \n     let mut it = vec![C, C].into_iter();\n-    it.advance_by(1).unwrap();\n+    assert_eq!(it.advance_by(1), 0);\n     drop(it);\n \n     let mut it = vec![C, C].into_iter();"}, {"sha": "2d853dd6684ecf7c406f5217bc2f212f7cef5d75", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -284,20 +284,19 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n         self.next_back()\n     }\n \n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let original_len = self.len();\n-\n+    fn advance_by(&mut self, n: usize) -> usize {\n         // This also moves the start, which marks them as conceptually \"dropped\",\n         // so if anything goes bad then our drop impl won't double-free them.\n         let range_to_drop = self.alive.take_prefix(n);\n+        let remaining = n - range_to_drop.len();\n \n         // SAFETY: These elements are currently initialized, so it's fine to drop them.\n         unsafe {\n             let slice = self.data.get_unchecked_mut(range_to_drop);\n             ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(slice));\n         }\n \n-        if n > original_len { Err(original_len) } else { Ok(()) }\n+        remaining\n     }\n }\n \n@@ -334,20 +333,19 @@ impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N> {\n         })\n     }\n \n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let original_len = self.len();\n-\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         // This also moves the end, which marks them as conceptually \"dropped\",\n         // so if anything goes bad then our drop impl won't double-free them.\n         let range_to_drop = self.alive.take_suffix(n);\n+        let remaining = n - range_to_drop.len();\n \n         // SAFETY: These elements are currently initialized, so it's fine to drop them.\n         unsafe {\n             let slice = self.data.get_unchecked_mut(range_to_drop);\n             ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(slice));\n         }\n \n-        if n > original_len { Err(original_len) } else { Ok(()) }\n+        remaining\n     }\n }\n "}, {"sha": "ff28e5760d0d683f3777b8b20433986e3bc84aea", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -26,7 +26,7 @@ impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         I::advance_by(self.0, n)\n     }\n \n@@ -62,7 +62,7 @@ impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         I::advance_back_by(self.0, n)\n     }\n "}, {"sha": "965a33de1cdb21806a7b177900d00246955b7c57", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 22, "deletions": 32, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -95,38 +95,33 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let mut rem = n;\n-\n+    fn advance_by(&mut self, mut n: usize) -> usize {\n         if let Some(ref mut a) = self.a {\n-            match a.advance_by(rem) {\n-                Ok(()) => return Ok(()),\n-                Err(k) => rem -= k,\n+            n = a.advance_by(n);\n+            if n == 0 {\n+                return n;\n             }\n             self.a = None;\n         }\n \n         if let Some(ref mut b) = self.b {\n-            match b.advance_by(rem) {\n-                Ok(()) => return Ok(()),\n-                Err(k) => rem -= k,\n-            }\n+            n = b.advance_by(n);\n             // we don't fuse the second iterator\n         }\n \n-        if rem == 0 { Ok(()) } else { Err(n - rem) }\n+        n\n     }\n \n     #[inline]\n     fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n         if let Some(ref mut a) = self.a {\n-            match a.advance_by(n) {\n-                Ok(()) => match a.next() {\n-                    None => n = 0,\n+            n = match a.advance_by(n) {\n+                0 => match a.next() {\n+                    None => 0,\n                     x => return x,\n                 },\n-                Err(k) => n -= k,\n-            }\n+                k => k,\n+            };\n \n             self.a = None;\n         }\n@@ -186,38 +181,33 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let mut rem = n;\n-\n+    fn advance_back_by(&mut self, mut n: usize) -> usize {\n         if let Some(ref mut b) = self.b {\n-            match b.advance_back_by(rem) {\n-                Ok(()) => return Ok(()),\n-                Err(k) => rem -= k,\n+            n = b.advance_back_by(n);\n+            if n == 0 {\n+                return n;\n             }\n             self.b = None;\n         }\n \n         if let Some(ref mut a) = self.a {\n-            match a.advance_back_by(rem) {\n-                Ok(()) => return Ok(()),\n-                Err(k) => rem -= k,\n-            }\n+            n = a.advance_back_by(n);\n             // we don't fuse the second iterator\n         }\n \n-        if rem == 0 { Ok(()) } else { Err(n - rem) }\n+        n\n     }\n \n     #[inline]\n     fn nth_back(&mut self, mut n: usize) -> Option<Self::Item> {\n         if let Some(ref mut b) = self.b {\n-            match b.advance_back_by(n) {\n-                Ok(()) => match b.next_back() {\n-                    None => n = 0,\n+            n = match b.advance_back_by(n) {\n+                0 => match b.next_back() {\n+                    None => 0,\n                     x => return x,\n                 },\n-                Err(k) => n -= k,\n-            }\n+                k => k,\n+            };\n \n             self.b = None;\n         }"}, {"sha": "7533de588db5fdbad5df6f3685ae3cf6c9cd3920", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -89,7 +89,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         self.it.advance_by(n)\n     }\n \n@@ -130,7 +130,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         self.it.advance_back_by(n)\n     }\n }"}, {"sha": "2d1fcf667bf201423dd09b2e2662088da535dc65", "filename": "library/core/src/iter/adapters/cycle.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -81,23 +81,22 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let mut rem = n;\n-        match self.iter.advance_by(rem) {\n-            ret @ Ok(_) => return ret,\n-            Err(advanced) => rem -= advanced,\n+    fn advance_by(&mut self, n: usize) -> usize {\n+        let mut n = self.iter.advance_by(n);\n+        if n == 0 {\n+            return n;\n         }\n \n-        while rem > 0 {\n+        while n > 0 {\n             self.iter = self.orig.clone();\n-            match self.iter.advance_by(rem) {\n-                ret @ Ok(_) => return ret,\n-                Err(0) => return Err(n - rem),\n-                Err(advanced) => rem -= advanced,\n+            let rem = self.iter.advance_by(n);\n+            if rem == n {\n+                return n;\n             }\n+            n = rem;\n         }\n \n-        Ok(())\n+        0\n     }\n \n     // No `fold` override, because `fold` doesn't make much sense for `Cycle`,"}, {"sha": "30017d13a6c018ed17813457ce38825e0a208270", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -114,17 +114,10 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        match self.iter.advance_by(n) {\n-            ret @ Ok(_) => {\n-                self.count += n;\n-                ret\n-            }\n-            ret @ Err(advanced) => {\n-                self.count += advanced;\n-                ret\n-            }\n-        }\n+    fn advance_by(&mut self, n: usize) -> usize {\n+        let n = self.iter.advance_by(n);\n+        self.count += n;\n+        n\n     }\n \n     #[rustc_inherit_overflow_checks]\n@@ -208,7 +201,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         // we do not need to update the count since that only tallies the number of items\n         // consumed from the front. consuming items from the back can never reduce that.\n         self.iter.advance_back_by(n)"}, {"sha": "980c4bebc9718897485526e3f5156203acef9a88", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -75,7 +75,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         self.inner.advance_by(n)\n     }\n \n@@ -120,7 +120,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         self.inner.advance_back_by(n)\n     }\n }\n@@ -236,7 +236,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         self.inner.advance_by(n)\n     }\n \n@@ -281,7 +281,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         self.inner.advance_back_by(n)\n     }\n }\n@@ -552,19 +552,19 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: Iterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_by(n) {\n-                Ok(()) => ControlFlow::Break(()),\n-                Err(advanced) => ControlFlow::Continue(n - advanced),\n+                0 => ControlFlow::Break(()),\n+                remaining => ControlFlow::Continue(remaining),\n             }\n         }\n \n         match self.iter_try_fold(n, advance) {\n-            ControlFlow::Continue(remaining) if remaining > 0 => Err(n - remaining),\n-            _ => Ok(()),\n+            ControlFlow::Continue(remaining) => remaining,\n+            _ => 0,\n         }\n     }\n \n@@ -642,19 +642,19 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: DoubleEndedIterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_back_by(n) {\n-                Ok(()) => ControlFlow::Break(()),\n-                Err(advanced) => ControlFlow::Continue(n - advanced),\n+                0 => ControlFlow::Break(()),\n+                remaining => ControlFlow::Continue(remaining),\n             }\n         }\n \n         match self.iter_try_rfold(n, advance) {\n-            ControlFlow::Continue(remaining) if remaining > 0 => Err(n - remaining),\n-            _ => Ok(()),\n+            ControlFlow::Continue(remaining) => remaining,\n+            _ => 0,\n         }\n     }\n }"}, {"sha": "b64baf838a2e21255d77e7d11ff21ca14fe9a29b", "filename": "library/core/src/iter/adapters/rev.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -38,7 +38,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         self.iter.advance_back_by(n)\n     }\n \n@@ -83,7 +83,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         self.iter.advance_by(n)\n     }\n "}, {"sha": "bb32e19b542f4645541ce4311b7c01f13b96b0dc", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -128,34 +128,21 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let mut rem = n;\n-        let step_one = self.n.saturating_add(rem);\n-\n-        match self.iter.advance_by(step_one) {\n-            Ok(_) => {\n-                rem -= step_one - self.n;\n-                self.n = 0;\n-            }\n-            Err(advanced) => {\n-                let advanced_without_skip = advanced.saturating_sub(self.n);\n-                self.n = self.n.saturating_sub(advanced);\n-                return if n == 0 { Ok(()) } else { Err(advanced_without_skip) };\n-            }\n-        }\n-\n-        // step_one calculation may have saturated\n-        if unlikely(rem > 0) {\n-            return match self.iter.advance_by(rem) {\n-                ret @ Ok(_) => ret,\n-                Err(advanced) => {\n-                    rem -= advanced;\n-                    Err(n - rem)\n-                }\n-            };\n+    fn advance_by(&mut self, mut n: usize) -> usize {\n+        let skip_inner = self.n;\n+        let skip_and_advance = skip_inner.saturating_add(n);\n+\n+        let remainder = self.iter.advance_by(skip_and_advance);\n+        let advanced_inner = skip_and_advance - remainder;\n+        n -= advanced_inner.saturating_sub(skip_inner);\n+        self.n = self.n.saturating_sub(advanced_inner);\n+\n+        // skip_and_advance may have saturated\n+        if unlikely(remainder == 0 && n > 0) {\n+            n = self.iter.advance_by(n);\n         }\n \n-        Ok(())\n+        n\n     }\n }\n \n@@ -209,13 +196,13 @@ where\n     impl_fold_via_try_fold! { rfold -> try_rfold }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         let min = crate::cmp::min(self.len(), n);\n-        return match self.iter.advance_back_by(min) {\n-            ret @ Ok(_) if n <= min => ret,\n-            Ok(_) => Err(min),\n-            _ => panic!(\"ExactSizeIterator contract violation\"),\n+        let rem = self.iter.advance_back_by(min);\n+        if rem != 0 {\n+            panic!(\"ExactSizeIterator contract violation\");\n         };\n+        n - min\n     }\n }\n "}, {"sha": "12e2395fe680aa2c94a1677a3510dccf03c5d9c3", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -121,18 +121,12 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         let min = self.n.min(n);\n-        match self.iter.advance_by(min) {\n-            Ok(_) => {\n-                self.n -= min;\n-                if min < n { Err(min) } else { Ok(()) }\n-            }\n-            ret @ Err(advanced) => {\n-                self.n -= advanced;\n-                ret\n-            }\n-        }\n+        let rem = self.iter.advance_by(min);\n+        let advanced = min - rem;\n+        self.n -= advanced;\n+        n - advanced\n     }\n }\n \n@@ -223,7 +217,7 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         // The amount by which the inner iterator needs to be shortened for it to be\n         // at most as long as the take() amount.\n         let trim_inner = self.iter.len().saturating_sub(self.n);\n@@ -232,12 +226,11 @@ where\n         // about having to advance more than usize::MAX here.\n         let advance_by = trim_inner.saturating_add(n);\n \n-        let advanced = match self.iter.advance_back_by(advance_by) {\n-            Ok(_) => advance_by - trim_inner,\n-            Err(advanced) => advanced - trim_inner,\n-        };\n-        self.n -= advanced;\n-        return if advanced < n { Err(advanced) } else { Ok(()) };\n+        let remainder = self.iter.advance_back_by(advance_by);\n+        let advanced_by_inner = advance_by - remainder;\n+        let advanced_by = advanced_by_inner - trim_inner;\n+        self.n -= advanced_by;\n+        n - advanced_by\n     }\n }\n "}, {"sha": "63c719f8b3a35cb9a4ebc5fed539d913f179548f", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -530,12 +530,12 @@ trait RangeIteratorImpl {\n     // Iterator\n     fn spec_next(&mut self) -> Option<Self::Item>;\n     fn spec_nth(&mut self, n: usize) -> Option<Self::Item>;\n-    fn spec_advance_by(&mut self, n: usize) -> Result<(), usize>;\n+    fn spec_advance_by(&mut self, n: usize) -> usize;\n \n     // DoubleEndedIterator\n     fn spec_next_back(&mut self) -> Option<Self::Item>;\n     fn spec_nth_back(&mut self, n: usize) -> Option<Self::Item>;\n-    fn spec_advance_back_by(&mut self, n: usize) -> Result<(), usize>;\n+    fn spec_advance_back_by(&mut self, n: usize) -> usize;\n }\n \n impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A> {\n@@ -567,7 +567,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n     }\n \n     #[inline]\n-    default fn spec_advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    default fn spec_advance_by(&mut self, n: usize) -> usize {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -579,7 +579,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n         self.start =\n             Step::forward_checked(self.start.clone(), taken).expect(\"`Step` invariants not upheld\");\n \n-        if taken < n { Err(taken) } else { Ok(()) }\n+        n - taken\n     }\n \n     #[inline]\n@@ -608,7 +608,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n     }\n \n     #[inline]\n-    default fn spec_advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    default fn spec_advance_back_by(&mut self, n: usize) -> usize {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -620,7 +620,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n         self.end =\n             Step::backward_checked(self.end.clone(), taken).expect(\"`Step` invariants not upheld\");\n \n-        if taken < n { Err(taken) } else { Ok(()) }\n+        n - taken\n     }\n }\n \n@@ -651,7 +651,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n     }\n \n     #[inline]\n-    fn spec_advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn spec_advance_by(&mut self, n: usize) -> usize {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -666,7 +666,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n         // Otherwise 0 is returned which always safe to use.\n         self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };\n \n-        if taken < n { Err(taken) } else { Ok(()) }\n+        n - taken\n     }\n \n     #[inline]\n@@ -695,7 +695,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n     }\n \n     #[inline]\n-    fn spec_advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn spec_advance_back_by(&mut self, n: usize) -> usize {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -707,7 +707,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n         // SAFETY: same as the spec_advance_by() implementation\n         self.end = unsafe { Step::backward_unchecked(self.end.clone(), taken) };\n \n-        if taken < n { Err(taken) } else { Ok(()) }\n+        n - taken\n     }\n }\n \n@@ -757,7 +757,7 @@ impl<A: ~const Step + ~const Destruct> const Iterator for ops::Range<A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         self.spec_advance_by(n)\n     }\n \n@@ -836,7 +836,7 @@ impl<A: ~const Step + ~const Destruct> const DoubleEndedIterator for ops::Range<\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         self.spec_advance_back_by(n)\n     }\n }"}, {"sha": "56a6d973705c1b82e63e266317e25201030e9dfb", "filename": "library/core/src/iter/sources/repeat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -80,10 +80,10 @@ impl<A: Clone> Iterator for Repeat<A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         // Advancing an infinite iterator of a single element is a no-op.\n         let _ = n;\n-        Ok(())\n+        0\n     }\n \n     #[inline]\n@@ -109,10 +109,10 @@ impl<A: Clone> DoubleEndedIterator for Repeat<A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         // Advancing an infinite iterator of a single element is a no-op.\n         let _ = n;\n-        Ok(())\n+        0\n     }\n \n     #[inline]"}, {"sha": "918f2a36ed01d83c92e2b852df08ca79e0cf06fc", "filename": "library/core/src/iter/sources/repeat_n.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -137,18 +137,18 @@ impl<A: Clone> Iterator for RepeatN<A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, skip: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, skip: usize) -> usize {\n         let len = self.count;\n \n         if skip >= len {\n             self.take_element();\n         }\n \n         if skip > len {\n-            Err(len)\n+            skip - len\n         } else {\n             self.count = len - skip;\n-            Ok(())\n+            0\n         }\n     }\n \n@@ -178,7 +178,7 @@ impl<A: Clone> DoubleEndedIterator for RepeatN<A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         self.advance_by(n)\n     }\n "}, {"sha": "06538d61aa0dc3ee7f9fc36b885b7dd9af857bd0", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -100,10 +100,10 @@ pub trait DoubleEndedIterator: Iterator {\n     /// eagerly skip `n` elements starting from the back by calling [`next_back`] up\n     /// to `n` times until [`None`] is encountered.\n     ///\n-    /// `advance_back_by(n)` will return [`Ok(())`] if the iterator successfully advances by\n-    /// `n` elements, or [`Err(k)`] if [`None`] is encountered, where `k` is the number of\n-    /// elements the iterator is advanced by before running out of elements (i.e. the length\n-    /// of the iterator). Note that `k` is always less than `n`.\n+    /// `advance_back_by(n)` will return `0` if the iterator successfully advances by\n+    /// `n` elements, or an usize `k` if [`None`] is encountered, where `k` is remaining number\n+    /// of steps that could not be advanced because the iterator ran out.\n+    /// Note that `k` is always less than `n`.\n     ///\n     /// Calling `advance_back_by(0)` can do meaningful work, for example [`Flatten`] can advance its\n     /// outer iterator until it finds an inner iterator that is not empty, which then often\n@@ -123,24 +123,26 @@ pub trait DoubleEndedIterator: Iterator {\n     /// let a = [3, 4, 5, 6];\n     /// let mut iter = a.iter();\n     ///\n-    /// assert_eq!(iter.advance_back_by(2), Ok(()));\n+    /// assert_eq!(iter.advance_back_by(2), 0);\n     /// assert_eq!(iter.next_back(), Some(&4));\n-    /// assert_eq!(iter.advance_back_by(0), Ok(()));\n-    /// assert_eq!(iter.advance_back_by(100), Err(1)); // only `&3` was skipped\n+    /// assert_eq!(iter.advance_back_by(0), 0);\n+    /// assert_eq!(iter.advance_back_by(100), 99); // only `&3` was skipped\n     /// ```\n     ///\n     /// [`Ok(())`]: Ok\n     /// [`Err(k)`]: Err\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize>\n+    fn advance_back_by(&mut self, n: usize) -> usize\n     where\n         Self::Item: ~const Destruct,\n     {\n         for i in 0..n {\n-            self.next_back().ok_or(i)?;\n+            if self.next_back().is_none() {\n+                return n - i;\n+            }\n         }\n-        Ok(())\n+        0\n     }\n \n     /// Returns the `n`th element from the end of the iterator.\n@@ -188,7 +190,9 @@ pub trait DoubleEndedIterator: Iterator {\n     #[stable(feature = \"iter_nth_back\", since = \"1.37.0\")]\n     #[rustc_do_not_const_check]\n     fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n-        self.advance_back_by(n).ok()?;\n+        if self.advance_back_by(n) > 0 {\n+            return None;\n+        }\n         self.next_back()\n     }\n \n@@ -374,7 +378,7 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n     fn next_back(&mut self) -> Option<I::Item> {\n         (**self).next_back()\n     }\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n         (**self).advance_back_by(n)\n     }\n     fn nth_back(&mut self, n: usize) -> Option<I::Item> {"}, {"sha": "f2de040c63524e6be1d6c3b9528946187c97f4d9", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -308,10 +308,10 @@ pub trait Iterator {\n     /// This method will eagerly skip `n` elements by calling [`next`] up to `n`\n     /// times until [`None`] is encountered.\n     ///\n-    /// `advance_by(n)` will return [`Ok(())`][Ok] if the iterator successfully advances by\n-    /// `n` elements, or [`Err(k)`][Err] if [`None`] is encountered, where `k` is the number\n-    /// of elements the iterator is advanced by before running out of elements (i.e. the\n-    /// length of the iterator). Note that `k` is always less than `n`.\n+    /// `advance_by(n)` will return `0` if the iterator successfully advances by\n+    /// `n` elements, or an usize `k` if [`None`] is encountered, where `k` is remaining number\n+    /// of steps that could not be advanced because the iterator ran out.\n+    /// Note that `k` is always less than `n`.\n     ///\n     /// Calling `advance_by(0)` can do meaningful work, for example [`Flatten`]\n     /// can advance its outer iterator until it finds an inner iterator that is not empty, which\n@@ -330,21 +330,23 @@ pub trait Iterator {\n     /// let a = [1, 2, 3, 4];\n     /// let mut iter = a.iter();\n     ///\n-    /// assert_eq!(iter.advance_by(2), Ok(()));\n+    /// assert_eq!(iter.advance_by(2), 0);\n     /// assert_eq!(iter.next(), Some(&3));\n-    /// assert_eq!(iter.advance_by(0), Ok(()));\n-    /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped\n+    /// assert_eq!(iter.advance_by(0), 0);\n+    /// assert_eq!(iter.advance_by(100), 99); // only `&4` was skipped\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize>\n+    fn advance_by(&mut self, n: usize) -> usize\n     where\n         Self::Item: ~const Destruct,\n     {\n         for i in 0..n {\n-            self.next().ok_or(i)?;\n+            if self.next().is_none() {\n+                return n - i;\n+            }\n         }\n-        Ok(())\n+        0\n     }\n \n     /// Returns the `n`th element of the iterator.\n@@ -392,7 +394,9 @@ pub trait Iterator {\n     where\n         Self::Item: ~const Destruct,\n     {\n-        self.advance_by(n).ok()?;\n+        if self.advance_by(n) > 0 {\n+            return None;\n+        }\n         self.next()\n     }\n \n@@ -4013,7 +4017,7 @@ impl<I: Iterator + ?Sized> Iterator for &mut I {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (**self).size_hint()\n     }\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> usize {\n         (**self).advance_by(n)\n     }\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {"}, {"sha": "744ec3b0245288a1452b41e18100e5588e797774", "filename": "library/core/src/ops/index_range.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fops%2Findex_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fops%2Findex_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex_range.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -132,10 +132,9 @@ impl Iterator for IndexRange {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        let original_len = self.len();\n-        self.take_prefix(n);\n-        if n > original_len { Err(original_len) } else { Ok(()) }\n+    fn advance_by(&mut self, n: usize) -> usize {\n+        let taken = self.take_prefix(n);\n+        n - taken.len()\n     }\n }\n \n@@ -151,10 +150,9 @@ impl DoubleEndedIterator for IndexRange {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let original_len = self.len();\n-        self.take_suffix(n);\n-        if n > original_len { Err(original_len) } else { Ok(()) }\n+    fn advance_back_by(&mut self, n: usize) -> usize {\n+        let taken = self.take_suffix(n);\n+        n - taken.len()\n     }\n }\n "}, {"sha": "d3e9b9c2b225f532f190b1d21c0c6e3f5146de29", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -176,11 +176,11 @@ macro_rules! iterator {\n             }\n \n             #[inline]\n-            fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+            fn advance_by(&mut self, n: usize) -> usize {\n                 let advance = cmp::min(len!(self), n);\n                 // SAFETY: By construction, `advance` does not exceed `self.len()`.\n                 unsafe { self.post_inc_start(advance) };\n-                if advance == n { Ok(()) } else { Err(advance) }\n+                n - advance\n             }\n \n             #[inline]\n@@ -371,11 +371,11 @@ macro_rules! iterator {\n             }\n \n             #[inline]\n-            fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+            fn advance_back_by(&mut self, n: usize) -> usize {\n                 let advance = cmp::min(len!(self), n);\n                 // SAFETY: By construction, `advance` does not exceed `self.len()`.\n                 unsafe { self.pre_dec_end(advance) };\n-                if advance == n { Ok(()) } else { Err(advance) }\n+                n - advance\n             }\n         }\n "}, {"sha": "9b90c77e151d48ea745eb146cd1340df52264450", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -1,4 +1,4 @@\n-use core::array;\n+use core::{array, assert_eq};\n use core::convert::TryFrom;\n use core::sync::atomic::{AtomicUsize, Ordering};\n \n@@ -535,17 +535,17 @@ fn array_intoiter_advance_by() {\n     let mut it = IntoIterator::into_iter(a);\n \n     let r = it.advance_by(1);\n-    assert_eq!(r, Ok(()));\n+    assert_eq!(r, 0);\n     assert_eq!(it.len(), 99);\n     assert_eq!(counter.get(), 1);\n \n     let r = it.advance_by(0);\n-    assert_eq!(r, Ok(()));\n+    assert_eq!(r, 0);\n     assert_eq!(it.len(), 99);\n     assert_eq!(counter.get(), 1);\n \n     let r = it.advance_by(11);\n-    assert_eq!(r, Ok(()));\n+    assert_eq!(r, 0);\n     assert_eq!(it.len(), 88);\n     assert_eq!(counter.get(), 12);\n \n@@ -557,17 +557,17 @@ fn array_intoiter_advance_by() {\n     assert_eq!(counter.get(), 13);\n \n     let r = it.advance_by(123456);\n-    assert_eq!(r, Err(87));\n+    assert_eq!(r, 123456 - 87);\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n \n     let r = it.advance_by(0);\n-    assert_eq!(r, Ok(()));\n+    assert_eq!(r, 0);\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n \n     let r = it.advance_by(10);\n-    assert_eq!(r, Err(0));\n+    assert_eq!(r, 10);\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n }\n@@ -588,17 +588,17 @@ fn array_intoiter_advance_back_by() {\n     let mut it = IntoIterator::into_iter(a);\n \n     let r = it.advance_back_by(1);\n-    assert_eq!(r, Ok(()));\n+    assert_eq!(r, 0);\n     assert_eq!(it.len(), 99);\n     assert_eq!(counter.get(), 1);\n \n     let r = it.advance_back_by(0);\n-    assert_eq!(r, Ok(()));\n+    assert_eq!(r, 0);\n     assert_eq!(it.len(), 99);\n     assert_eq!(counter.get(), 1);\n \n     let r = it.advance_back_by(11);\n-    assert_eq!(r, Ok(()));\n+    assert_eq!(r, 0);\n     assert_eq!(it.len(), 88);\n     assert_eq!(counter.get(), 12);\n \n@@ -610,17 +610,17 @@ fn array_intoiter_advance_back_by() {\n     assert_eq!(counter.get(), 13);\n \n     let r = it.advance_back_by(123456);\n-    assert_eq!(r, Err(87));\n+    assert_eq!(r, 123456 - 87);\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n \n     let r = it.advance_back_by(0);\n-    assert_eq!(r, Ok(()));\n+    assert_eq!(r, 0);\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n \n     let r = it.advance_back_by(10);\n-    assert_eq!(r, Err(0));\n+    assert_eq!(r, 10);\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n }\n@@ -679,8 +679,8 @@ fn array_into_iter_fold() {\n \n     let a = [1, 2, 3, 4, 5, 6];\n     let mut it = a.into_iter();\n-    it.advance_by(1).unwrap();\n-    it.advance_back_by(2).unwrap();\n+    assert_eq!(it.advance_by(1), 0);\n+    assert_eq!(it.advance_back_by(2), 0);\n     let s = it.fold(10, |a, b| 10 * a + b);\n     assert_eq!(s, 10234);\n }\n@@ -695,8 +695,8 @@ fn array_into_iter_rfold() {\n \n     let a = [1, 2, 3, 4, 5, 6];\n     let mut it = a.into_iter();\n-    it.advance_by(1).unwrap();\n-    it.advance_back_by(2).unwrap();\n+    assert_eq!(it.advance_by(1), 0);\n+    assert_eq!(it.advance_back_by(2), 0);\n     let s = it.rfold(10, |a, b| 10 * a + b);\n     assert_eq!(s, 10432);\n }"}, {"sha": "4da9263d7ac32a4a01cc968232c9f08e87e6893f", "filename": "library/core/tests/iter/adapters/chain.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -31,28 +31,28 @@ fn test_iterator_chain_advance_by() {\n \n         for i in 0..xs.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            iter.advance_by(i).unwrap();\n+            assert_eq!(0, iter.advance_by(i));\n             assert_eq!(iter.next(), Some(&xs[i]));\n-            assert_eq!(iter.advance_by(100), Err(len - i - 1));\n-            iter.advance_by(0).unwrap();\n+            assert_eq!(iter.advance_by(100), 100 - (len - i - 1));\n+            assert_eq!(0, iter.advance_by(0));\n         }\n \n         for i in 0..ys.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            iter.advance_by(xs.len() + i).unwrap();\n+            assert_eq!(iter.advance_by(xs.len() + i), 0);\n             assert_eq!(iter.next(), Some(&ys[i]));\n-            assert_eq!(iter.advance_by(100), Err(ys.len() - i - 1));\n-            iter.advance_by(0).unwrap();\n+            assert_eq!(iter.advance_by(100), 100 - (ys.len() - i - 1));\n+            assert_eq!(iter.advance_by(0), 0);\n         }\n \n         let mut iter = xs.iter().chain(ys);\n-        iter.advance_by(len).unwrap();\n+        assert_eq!(iter.advance_by(len), 0);\n         assert_eq!(iter.next(), None);\n-        iter.advance_by(0).unwrap();\n+        assert_eq!(iter.advance_by(0), 0);\n \n         let mut iter = xs.iter().chain(ys);\n-        assert_eq!(iter.advance_by(len + 1), Err(len));\n-        iter.advance_by(0).unwrap();\n+        assert_eq!(iter.advance_by(len + 1), 1);\n+        assert_eq!(iter.advance_by(0), 0);\n     }\n \n     test_chain(&[], &[]);\n@@ -68,28 +68,28 @@ fn test_iterator_chain_advance_back_by() {\n \n         for i in 0..ys.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            iter.advance_back_by(i).unwrap();\n+            assert_eq!(iter.advance_back_by(i), 0);\n             assert_eq!(iter.next_back(), Some(&ys[ys.len() - i - 1]));\n-            assert_eq!(iter.advance_back_by(100), Err(len - i - 1));\n-            iter.advance_back_by(0).unwrap();\n+            assert_eq!(iter.advance_back_by(100), 100 - (len - i - 1));\n+            assert_eq!(iter.advance_back_by(0), 0);\n         }\n \n         for i in 0..xs.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            iter.advance_back_by(ys.len() + i).unwrap();\n+            assert_eq!(iter.advance_back_by(ys.len() + i), 0);\n             assert_eq!(iter.next_back(), Some(&xs[xs.len() - i - 1]));\n-            assert_eq!(iter.advance_back_by(100), Err(xs.len() - i - 1));\n-            iter.advance_back_by(0).unwrap();\n+            assert_eq!(iter.advance_back_by(100), 100 - (xs.len() - i - 1));\n+            assert_eq!(iter.advance_back_by(0), 0);\n         }\n \n         let mut iter = xs.iter().chain(ys);\n-        iter.advance_back_by(len).unwrap();\n+        assert_eq!(iter.advance_back_by(len), 0);\n         assert_eq!(iter.next_back(), None);\n-        iter.advance_back_by(0).unwrap();\n+        assert_eq!(iter.advance_back_by(0), 0);\n \n         let mut iter = xs.iter().chain(ys);\n-        assert_eq!(iter.advance_back_by(len + 1), Err(len));\n-        iter.advance_back_by(0).unwrap();\n+        assert_eq!(iter.advance_back_by(len + 1), 1);\n+        assert_eq!(iter.advance_back_by(0), 0);\n     }\n \n     test_chain(&[], &[]);"}, {"sha": "e8e06a8ca40f532fd6828452b4392575c5b9a3df", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -1,3 +1,4 @@\n+use core::assert_eq;\n use super::*;\n use core::iter::*;\n \n@@ -61,19 +62,19 @@ fn test_flatten_try_folds() {\n fn test_flatten_advance_by() {\n     let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n \n-    it.advance_by(5).unwrap();\n+    assert_eq!(it.advance_by(5), 0);\n     assert_eq!(it.next(), Some(5));\n-    it.advance_by(9).unwrap();\n+    assert_eq!(it.advance_by(9), 0);\n     assert_eq!(it.next(), Some(15));\n-    it.advance_back_by(4).unwrap();\n+    assert_eq!(it.advance_back_by(4), 0);\n     assert_eq!(it.next_back(), Some(35));\n-    it.advance_back_by(9).unwrap();\n+    assert_eq!(it.advance_back_by(9), 0);\n     assert_eq!(it.next_back(), Some(25));\n \n-    assert_eq!(it.advance_by(usize::MAX), Err(9));\n-    assert_eq!(it.advance_back_by(usize::MAX), Err(0));\n-    it.advance_by(0).unwrap();\n-    it.advance_back_by(0).unwrap();\n+    assert_eq!(it.advance_by(usize::MAX), usize::MAX - 9);\n+    assert_eq!(it.advance_back_by(usize::MAX), usize::MAX);\n+    assert_eq!(it.advance_by(0), 0);\n+    assert_eq!(it.advance_back_by(0), 0);\n     assert_eq!(it.size_hint(), (0, Some(0)));\n }\n \n@@ -174,19 +175,19 @@ fn test_flatten_count() {\n     let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n \n     assert_eq!(it.clone().count(), 40);\n-    it.advance_by(5).unwrap();\n+    assert_eq!(it.advance_by(5), 0);\n     assert_eq!(it.clone().count(), 35);\n-    it.advance_back_by(5).unwrap();\n+    assert_eq!(it.advance_back_by(5), 0);\n     assert_eq!(it.clone().count(), 30);\n-    it.advance_by(10).unwrap();\n+    assert_eq!(it.advance_by(10), 0);\n     assert_eq!(it.clone().count(), 20);\n-    it.advance_back_by(8).unwrap();\n+    assert_eq!(it.advance_back_by(8), 0);\n     assert_eq!(it.clone().count(), 12);\n-    it.advance_by(4).unwrap();\n+    assert_eq!(it.advance_by(4), 0);\n     assert_eq!(it.clone().count(), 8);\n-    it.advance_back_by(5).unwrap();\n+    assert_eq!(it.advance_back_by(5), 0);\n     assert_eq!(it.clone().count(), 3);\n-    it.advance_by(3).unwrap();\n+    assert_eq!(it.advance_by(3), 0);\n     assert_eq!(it.clone().count(), 0);\n }\n \n@@ -195,18 +196,18 @@ fn test_flatten_last() {\n     let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n \n     assert_eq!(it.clone().last(), Some(39));\n-    it.advance_by(5).unwrap(); // 5..40\n+    assert_eq!(it.advance_by(5), 0); // 5..40\n     assert_eq!(it.clone().last(), Some(39));\n-    it.advance_back_by(5).unwrap(); // 5..35\n+    assert_eq!(it.advance_back_by(5), 0); // 5..35\n     assert_eq!(it.clone().last(), Some(34));\n-    it.advance_by(10).unwrap(); // 15..35\n+    assert_eq!(it.advance_by(10), 0); // 15..35\n     assert_eq!(it.clone().last(), Some(34));\n-    it.advance_back_by(8).unwrap(); // 15..27\n+    assert_eq!(it.advance_back_by(8), 0); // 15..27\n     assert_eq!(it.clone().last(), Some(26));\n-    it.advance_by(4).unwrap(); // 19..27\n+    assert_eq!(it.advance_by(4), 0); // 19..27\n     assert_eq!(it.clone().last(), Some(26));\n-    it.advance_back_by(5).unwrap(); // 19..22\n+    assert_eq!(it.advance_back_by(5), 0); // 19..22\n     assert_eq!(it.clone().last(), Some(21));\n-    it.advance_by(3).unwrap(); // 22..22\n+    assert_eq!(it.advance_by(3), 0); // 22..22\n     assert_eq!(it.clone().last(), None);\n }"}, {"sha": "134dead4ad3e96458fe09c100c77eb1c3eefe273", "filename": "library/core/tests/iter/adapters/skip.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -73,13 +73,16 @@ fn test_iterator_skip_nth() {\n \n #[test]\n fn test_skip_advance_by() {\n-    assert_eq!((0..0).skip(10).advance_by(0), Ok(()));\n-    assert_eq!((0..0).skip(10).advance_by(1), Err(0));\n-    assert_eq!((0u128..(usize::MAX as u128) + 1).skip(usize::MAX).advance_by(usize::MAX), Err(1));\n-    assert_eq!((0u128..u128::MAX).skip(usize::MAX).advance_by(1), Ok(()));\n-\n-    assert_eq!((0..2).skip(1).advance_back_by(10), Err(1));\n-    assert_eq!((0..0).skip(1).advance_back_by(0), Ok(()));\n+    assert_eq!((0..0).skip(10).advance_by(0), 0);\n+    assert_eq!((0..0).skip(10).advance_by(1), 1);\n+    assert_eq!(\n+        (0u128..(usize::MAX as u128) + 1).skip(usize::MAX - 10).advance_by(usize::MAX - 5),\n+        usize::MAX - 16\n+    );\n+    assert_eq!((0u128..u128::MAX).skip(usize::MAX - 10).advance_by(20), 0);\n+\n+    assert_eq!((0..2).skip(1).advance_back_by(10), 9);\n+    assert_eq!((0..0).skip(1).advance_back_by(0), 0);\n }\n \n #[test]"}, {"sha": "8ba7f0c5f8a95688672353b569ab37158df44b66", "filename": "library/core/tests/iter/adapters/take.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -76,23 +76,23 @@ fn test_iterator_take_nth_back() {\n #[test]\n fn test_take_advance_by() {\n     let mut take = (0..10).take(3);\n-    assert_eq!(take.advance_by(2), Ok(()));\n+    assert_eq!(take.advance_by(2), 0);\n     assert_eq!(take.next(), Some(2));\n-    assert_eq!(take.advance_by(1), Err(0));\n+    assert_eq!(take.advance_by(1), 1);\n \n-    assert_eq!((0..0).take(10).advance_by(0), Ok(()));\n-    assert_eq!((0..0).take(10).advance_by(1), Err(0));\n-    assert_eq!((0..10).take(4).advance_by(5), Err(4));\n+    assert_eq!((0..0).take(10).advance_by(0), 0);\n+    assert_eq!((0..0).take(10).advance_by(1), 1);\n+    assert_eq!((0..10).take(4).advance_by(5), 1);\n \n     let mut take = (0..10).take(3);\n-    assert_eq!(take.advance_back_by(2), Ok(()));\n+    assert_eq!(take.advance_back_by(2), 0);\n     assert_eq!(take.next(), Some(0));\n-    assert_eq!(take.advance_back_by(1), Err(0));\n+    assert_eq!(take.advance_back_by(1), 1);\n \n-    assert_eq!((0..2).take(1).advance_back_by(10), Err(1));\n-    assert_eq!((0..0).take(1).advance_back_by(1), Err(0));\n-    assert_eq!((0..0).take(1).advance_back_by(0), Ok(()));\n-    assert_eq!((0..usize::MAX).take(100).advance_back_by(usize::MAX), Err(100));\n+    assert_eq!((0..2).take(1).advance_back_by(10), 9);\n+    assert_eq!((0..0).take(1).advance_back_by(1), 1);\n+    assert_eq!((0..0).take(1).advance_back_by(0), 0);\n+    assert_eq!((0..usize::MAX).take(100).advance_back_by(usize::MAX), usize::MAX - 100);\n }\n \n #[test]"}, {"sha": "d375dbf2ce4411b385b0470e02d5109877d80d19", "filename": "library/core/tests/iter/range.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Frange.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -287,25 +287,25 @@ fn test_range_step() {\n #[test]\n fn test_range_advance_by() {\n     let mut r = 0..usize::MAX;\n-    r.advance_by(0).unwrap();\n-    r.advance_back_by(0).unwrap();\n+    assert_eq!(0, r.advance_by(0));\n+    assert_eq!(0, r.advance_back_by(0));\n \n     assert_eq!(r.len(), usize::MAX);\n \n-    r.advance_by(1).unwrap();\n-    r.advance_back_by(1).unwrap();\n+    assert_eq!(0, r.advance_by(1));\n+    assert_eq!(0, r.advance_back_by(1));\n \n     assert_eq!((r.start, r.end), (1, usize::MAX - 1));\n \n-    assert_eq!(r.advance_by(usize::MAX), Err(usize::MAX - 2));\n+    assert_eq!(2, r.advance_by(usize::MAX));\n \n-    r.advance_by(0).unwrap();\n-    r.advance_back_by(0).unwrap();\n+    assert_eq!(0, r.advance_by(0));\n+    assert_eq!(0, r.advance_back_by(0));\n \n     let mut r = 0u128..u128::MAX;\n \n-    r.advance_by(usize::MAX).unwrap();\n-    r.advance_back_by(usize::MAX).unwrap();\n+    assert_eq!(0, r.advance_by(usize::MAX));\n+    assert_eq!(0, r.advance_back_by(usize::MAX));\n \n     assert_eq!((r.start, r.end), (0u128 + usize::MAX as u128, u128::MAX - usize::MAX as u128));\n }"}, {"sha": "4b446727c9a1058a954fb432e6ebb395a46322e2", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -148,13 +148,13 @@ fn test_iterator_advance_by() {\n \n     for i in 0..v.len() {\n         let mut iter = v.iter();\n-        assert_eq!(iter.advance_by(i), Ok(()));\n+        assert_eq!(iter.advance_by(i), 0);\n         assert_eq!(iter.next().unwrap(), &v[i]);\n-        assert_eq!(iter.advance_by(100), Err(v.len() - 1 - i));\n+        assert_eq!(iter.advance_by(100), 100 - (v.len() - 1 - i));\n     }\n \n-    assert_eq!(v.iter().advance_by(v.len()), Ok(()));\n-    assert_eq!(v.iter().advance_by(100), Err(v.len()));\n+    assert_eq!(v.iter().advance_by(v.len()), 0);\n+    assert_eq!(v.iter().advance_by(100), 100 - v.len());\n }\n \n #[test]\n@@ -163,13 +163,13 @@ fn test_iterator_advance_back_by() {\n \n     for i in 0..v.len() {\n         let mut iter = v.iter();\n-        assert_eq!(iter.advance_back_by(i), Ok(()));\n+        assert_eq!(iter.advance_back_by(i), 0);\n         assert_eq!(iter.next_back().unwrap(), &v[v.len() - 1 - i]);\n-        assert_eq!(iter.advance_back_by(100), Err(v.len() - 1 - i));\n+        assert_eq!(iter.advance_back_by(100), 100 - (v.len() - 1 - i));\n     }\n \n-    assert_eq!(v.iter().advance_back_by(v.len()), Ok(()));\n-    assert_eq!(v.iter().advance_back_by(100), Err(v.len()));\n+    assert_eq!(v.iter().advance_back_by(v.len()), 0);\n+    assert_eq!(v.iter().advance_back_by(100), 100 - v.len());\n }\n \n #[test]\n@@ -178,13 +178,13 @@ fn test_iterator_rev_advance_back_by() {\n \n     for i in 0..v.len() {\n         let mut iter = v.iter().rev();\n-        assert_eq!(iter.advance_back_by(i), Ok(()));\n+        assert_eq!(iter.advance_back_by(i), 0);\n         assert_eq!(iter.next_back().unwrap(), &v[i]);\n-        assert_eq!(iter.advance_back_by(100), Err(v.len() - 1 - i));\n+        assert_eq!(iter.advance_back_by(100), 100 - (v.len() - 1 - i));\n     }\n \n-    assert_eq!(v.iter().rev().advance_back_by(v.len()), Ok(()));\n-    assert_eq!(v.iter().rev().advance_back_by(100), Err(v.len()));\n+    assert_eq!(v.iter().rev().advance_back_by(v.len()), 0);\n+    assert_eq!(v.iter().rev().advance_back_by(100), 100 - v.len());\n }\n \n #[test]\n@@ -422,13 +422,13 @@ fn test_iterator_rev_advance_by() {\n \n     for i in 0..v.len() {\n         let mut iter = v.iter().rev();\n-        assert_eq!(iter.advance_by(i), Ok(()));\n+        assert_eq!(iter.advance_by(i), 0);\n         assert_eq!(iter.next().unwrap(), &v[v.len() - 1 - i]);\n-        assert_eq!(iter.advance_by(100), Err(v.len() - 1 - i));\n+        assert_eq!(iter.advance_by(100), 100 - (v.len() - 1 - i));\n     }\n \n-    assert_eq!(v.iter().rev().advance_by(v.len()), Ok(()));\n-    assert_eq!(v.iter().rev().advance_by(100), Err(v.len()));\n+    assert_eq!(v.iter().rev().advance_by(v.len()), 0);\n+    assert_eq!(v.iter().rev().advance_by(100), 100 - v.len());\n }\n \n #[test]"}, {"sha": "a675d9e13fbb17bae8c876dd87502986b7303286", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69db91b8b25de51633ac9f089cd7fb10a58c2b2a/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "patch": "@@ -142,20 +142,20 @@ fn test_iterator_advance_by() {\n \n     for i in 0..=v.len() {\n         let mut iter = v.iter();\n-        iter.advance_by(i).unwrap();\n+        assert_eq!(iter.advance_by(i), 0);\n         assert_eq!(iter.as_slice(), &v[i..]);\n     }\n \n     let mut iter = v.iter();\n-    assert_eq!(iter.advance_by(v.len() + 1), Err(v.len()));\n+    assert_eq!(iter.advance_by(v.len() + 1), 1);\n     assert_eq!(iter.as_slice(), &[]);\n \n     let mut iter = v.iter();\n-    iter.advance_by(3).unwrap();\n+    assert_eq!(iter.advance_by(3), 0);\n     assert_eq!(iter.as_slice(), &v[3..]);\n-    iter.advance_by(2).unwrap();\n+    assert_eq!(iter.advance_by(2), 0);\n     assert_eq!(iter.as_slice(), &[]);\n-    iter.advance_by(0).unwrap();\n+    assert_eq!(iter.advance_by(0), 0);\n }\n \n #[test]\n@@ -164,20 +164,20 @@ fn test_iterator_advance_back_by() {\n \n     for i in 0..=v.len() {\n         let mut iter = v.iter();\n-        iter.advance_back_by(i).unwrap();\n+        assert_eq!(iter.advance_back_by(i), 0);\n         assert_eq!(iter.as_slice(), &v[..v.len() - i]);\n     }\n \n     let mut iter = v.iter();\n-    assert_eq!(iter.advance_back_by(v.len() + 1), Err(v.len()));\n+    assert_eq!(iter.advance_back_by(v.len() + 1), 1);\n     assert_eq!(iter.as_slice(), &[]);\n \n     let mut iter = v.iter();\n-    iter.advance_back_by(3).unwrap();\n+    assert_eq!(iter.advance_back_by(3), 0);\n     assert_eq!(iter.as_slice(), &v[..v.len() - 3]);\n-    iter.advance_back_by(2).unwrap();\n+    assert_eq!(iter.advance_back_by(2), 0);\n     assert_eq!(iter.as_slice(), &[]);\n-    iter.advance_back_by(0).unwrap();\n+    assert_eq!(iter.advance_back_by(0), 0);\n }\n \n #[test]"}]}