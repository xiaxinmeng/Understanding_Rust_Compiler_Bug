{"sha": "3f83906b30798bf61513fa340524cebf6676f9db", "node_id": "C_kwDOAAsO6NoAKDNmODM5MDZiMzA3OThiZjYxNTEzZmEzNDA1MjRjZWJmNjY3NmY5ZGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-24T20:00:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-24T20:00:51Z"}, "message": "Auto merge of #98483 - dvtkrlbs:bootstrap-dist, r=jyn514\n\nDistribute bootstrap in CI\n\nThis pre-compiles bootstrap from source and adds it to the existing `rust-dev` component. There are two main goals here:\n1. Make it faster to build rust from source, both the first time and incrementally\n2. Make it easier to add non-python entrypoints, since they can call out to bootstrap directly rather than having to figure out the right flags to pre-compile it. This second part is still in a bit of flux, see the tracking issue below for more information.\n\nThere are also several changes to make bootstrap able to run on a machine other than the one it was built (particularly around `config.src` and `config.out` detection). I (`@jyn514)` am slightly concerned these will regress unless tested - maybe we should add an automated test that runs bootstrap in a chroot or something? Unclear whether the effort is worth the test coverage.\n\nHelps with https://github.com/rust-lang/rust/issues/94829.", "tree": {"sha": "c7e568db9922ce3943314d10c406923c2322db49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7e568db9922ce3943314d10c406923c2322db49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f83906b30798bf61513fa340524cebf6676f9db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f83906b30798bf61513fa340524cebf6676f9db", "html_url": "https://github.com/rust-lang/rust/commit/3f83906b30798bf61513fa340524cebf6676f9db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f83906b30798bf61513fa340524cebf6676f9db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6580010551063718462f9dfe41c9490d92994d0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6580010551063718462f9dfe41c9490d92994d0e", "html_url": "https://github.com/rust-lang/rust/commit/6580010551063718462f9dfe41c9490d92994d0e"}, {"sha": "2ef3d172c4c574bd58abca0e8bbe7548c313c60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef3d172c4c574bd58abca0e8bbe7548c313c60b", "html_url": "https://github.com/rust-lang/rust/commit/2ef3d172c4c574bd58abca0e8bbe7548c313c60b"}], "stats": {"total": 161, "additions": 122, "deletions": 39}, "files": [{"sha": "771cef6e4d0d630bd5e1f0b58b14e5845bb2b8c5", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f83906b30798bf61513fa340524cebf6676f9db/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/3f83906b30798bf61513fa340524cebf6676f9db/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=3f83906b30798bf61513fa340524cebf6676f9db", "patch": "@@ -297,7 +297,7 @@ jobs:\n             os: ubuntu-20.04-xl\n           - name: dist-x86_64-apple\n             env:\n-              SCRIPT: \"./x.py dist --host=x86_64-apple-darwin --target=x86_64-apple-darwin\"\n+              SCRIPT: \"./x.py dist bootstrap --include-default-paths --host=x86_64-apple-darwin --target=x86_64-apple-darwin\"\n               RUST_CONFIGURE_ARGS: \"--enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\"\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               MACOSX_DEPLOYMENT_TARGET: 10.7\n@@ -308,7 +308,7 @@ jobs:\n             os: macos-latest\n           - name: dist-apple-various\n             env:\n-              SCRIPT: \"./x.py dist --host='' --target=aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim\"\n+              SCRIPT: \"./x.py dist bootstrap --include-default-paths --host='' --target=aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim\"\n               RUST_CONFIGURE_ARGS: \"--enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\"\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               MACOSX_DEPLOYMENT_TARGET: 10.7\n@@ -318,7 +318,7 @@ jobs:\n             os: macos-latest\n           - name: dist-x86_64-apple-alt\n             env:\n-              SCRIPT: \"./x.py dist\"\n+              SCRIPT: \"./x.py dist bootstrap --include-default-paths\"\n               RUST_CONFIGURE_ARGS: \"--enable-extended --enable-profiler --set rust.jemalloc --set llvm.ninja=false\"\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               MACOSX_DEPLOYMENT_TARGET: 10.7\n@@ -350,7 +350,7 @@ jobs:\n             os: macos-latest\n           - name: dist-aarch64-apple\n             env:\n-              SCRIPT: \"./x.py dist --stage 2\"\n+              SCRIPT: \"./x.py dist bootstrap --include-default-paths --stage 2\"\n               RUST_CONFIGURE_ARGS: \"--build=x86_64-apple-darwin --host=aarch64-apple-darwin --target=aarch64-apple-darwin --enable-full-tools --enable-sanitizers --enable-profiler --disable-docs --set rust.jemalloc --set llvm.ninja=false\"\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               USE_XCODE_CLANG: 1\n@@ -424,33 +424,33 @@ jobs:\n           - name: dist-x86_64-msvc\n             env:\n               RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc --host=x86_64-pc-windows-msvc --target=x86_64-pc-windows-msvc --enable-full-tools --enable-profiler\"\n-              SCRIPT: PGO_HOST=x86_64-pc-windows-msvc src/ci/pgo.sh python x.py dist\n+              SCRIPT: PGO_HOST=x86_64-pc-windows-msvc src/ci/pgo.sh python x.py dist bootstrap --include-default-paths\n               DIST_REQUIRE_ALL_TOOLS: 1\n             os: windows-latest-xl\n           - name: dist-i686-msvc\n             env:\n               RUST_CONFIGURE_ARGS: \"--build=i686-pc-windows-msvc --host=i686-pc-windows-msvc --target=i686-pc-windows-msvc,i586-pc-windows-msvc --enable-full-tools --enable-profiler\"\n-              SCRIPT: python x.py dist\n+              SCRIPT: python x.py dist bootstrap --include-default-paths\n               DIST_REQUIRE_ALL_TOOLS: 1\n             os: windows-latest-xl\n           - name: dist-aarch64-msvc\n             env:\n               RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc --host=aarch64-pc-windows-msvc --enable-full-tools --enable-profiler\"\n-              SCRIPT: python x.py dist\n+              SCRIPT: python x.py dist bootstrap --include-default-paths\n               DIST_REQUIRE_ALL_TOOLS: 1\n               WINDOWS_SDK_20348_HACK: 1\n             os: windows-latest-xl\n           - name: dist-i686-mingw\n             env:\n               RUST_CONFIGURE_ARGS: \"--build=i686-pc-windows-gnu --enable-full-tools --enable-profiler --set llvm.allow-old-toolchain\"\n               NO_DOWNLOAD_CI_LLVM: 1\n-              SCRIPT: python x.py dist\n+              SCRIPT: python x.py dist bootstrap --include-default-paths\n               CUSTOM_MINGW: 1\n               DIST_REQUIRE_ALL_TOOLS: 1\n             os: windows-latest-xl\n           - name: dist-x86_64-mingw\n             env:\n-              SCRIPT: python x.py dist\n+              SCRIPT: python x.py dist bootstrap --include-default-paths\n               RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-gnu --enable-full-tools --enable-profiler --set llvm.allow-old-toolchain\"\n               NO_DOWNLOAD_CI_LLVM: 1\n               CUSTOM_MINGW: 1\n@@ -459,7 +459,7 @@ jobs:\n           - name: dist-x86_64-msvc-alt\n             env:\n               RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\"\n-              SCRIPT: python x.py dist\n+              SCRIPT: python x.py dist bootstrap --include-default-paths\n             os: windows-latest-xl\n     timeout-minutes: 600\n     runs-on: \"${{ matrix.os }}\""}, {"sha": "c33b7fc7cd6ee671bacfbaf75da28da5b0d8f165", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3f83906b30798bf61513fa340524cebf6676f9db", "patch": "@@ -724,6 +724,7 @@ impl<'a> Builder<'a> {\n                 dist::Miri,\n                 dist::LlvmTools,\n                 dist::RustDev,\n+                dist::Bootstrap,\n                 dist::Extended,\n                 // It seems that PlainSourceTarball somehow changes how some of the tools\n                 // perceive their dependencies (see #93033) which would invalidate fingerprints"}, {"sha": "a6333976f2ac2a6d04d062cf51b8d790a0aff61f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=3f83906b30798bf61513fa340524cebf6676f9db", "patch": "@@ -772,21 +772,20 @@ impl Config {\n \n         // set by build.rs\n         config.build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n+\n         let manifest_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n         // Undo `src/bootstrap`\n         config.src = manifest_dir.parent().unwrap().parent().unwrap().to_owned();\n         config.out = PathBuf::from(\"build\");\n \n-        config.initial_cargo = PathBuf::from(env!(\"CARGO\"));\n-        config.initial_rustc = PathBuf::from(env!(\"RUSTC\"));\n-\n         config\n     }\n \n     pub fn parse(args: &[String]) -> Config {\n         let flags = Flags::parse(&args);\n-\n         let mut config = Config::default_opts();\n+\n+        // Set flags.\n         config.exclude = flags.exclude.into_iter().map(|path| TaskPath::parse(path)).collect();\n         config.include_default_paths = flags.include_default_paths;\n         config.rustc_error_format = flags.rustc_error_format;\n@@ -805,7 +804,49 @@ impl Config {\n         config.llvm_profile_use = flags.llvm_profile_use;\n         config.llvm_profile_generate = flags.llvm_profile_generate;\n \n+        // Infer the rest of the configuration.\n+\n+        // Infer the source directory. This is non-trivial because we want to support a downloaded bootstrap binary,\n+        // running on a completely machine from where it was compiled.\n+        let mut cmd = Command::new(\"git\");\n+        // NOTE: we cannot support running from outside the repository because the only path we have available\n+        // is set at compile time, which can be wrong if bootstrap was downloaded from source.\n+        // We still support running outside the repository if we find we aren't in a git directory.\n+        cmd.arg(\"rev-parse\").arg(\"--show-toplevel\");\n+        // Discard stderr because we expect this to fail when building from a tarball.\n+        let output = cmd\n+            .stderr(std::process::Stdio::null())\n+            .output()\n+            .ok()\n+            .and_then(|output| if output.status.success() { Some(output) } else { None });\n+        if let Some(output) = output {\n+            let git_root = String::from_utf8(output.stdout).unwrap();\n+            // We need to canonicalize this path to make sure it uses backslashes instead of forward slashes.\n+            let git_root = PathBuf::from(git_root.trim()).canonicalize().unwrap();\n+            let s = git_root.to_str().unwrap();\n+\n+            // Bootstrap is quite bad at handling /? in front of paths\n+            config.src = match s.strip_prefix(\"\\\\\\\\?\\\\\") {\n+                Some(p) => PathBuf::from(p),\n+                None => PathBuf::from(git_root),\n+            };\n+        } else {\n+            // We're building from a tarball, not git sources.\n+            // We don't support pre-downloaded bootstrap in this case.\n+        }\n+\n+        if cfg!(test) {\n+            // Use the build directory of the original x.py invocation, so that we can set `initial_rustc` properly.\n+            config.out = Path::new(\n+                &env::var_os(\"CARGO_TARGET_DIR\").expect(\"cargo test directly is not supported\"),\n+            )\n+            .parent()\n+            .unwrap()\n+            .to_path_buf();\n+        }\n+\n         let stage0_json = t!(std::fs::read(&config.src.join(\"src\").join(\"stage0.json\")));\n+\n         config.stage0_metadata = t!(serde_json::from_slice::<Stage0Metadata>(&stage0_json));\n \n         #[cfg(test)]\n@@ -860,6 +901,7 @@ impl Config {\n         config.config = toml_path;\n \n         let build = toml.build.unwrap_or_default();\n+        let has_custom_rustc = build.rustc.is_some();\n \n         set(&mut config.initial_rustc, build.rustc.map(PathBuf::from));\n         set(&mut config.out, flags.build_dir.or_else(|| build.build_dir.map(PathBuf::from)));\n@@ -870,6 +912,12 @@ impl Config {\n             config.out = crate::util::absolute(&config.out);\n         }\n \n+        if !has_custom_rustc && !config.initial_rustc.starts_with(&config.out) {\n+            config.initial_rustc = config.out.join(config.build.triple).join(\"stage0/bin/rustc\");\n+            config.initial_cargo = config.out.join(config.build.triple).join(\"stage0/bin/cargo\");\n+        }\n+\n+        // NOTE: it's important this comes *after* we set `initial_rustc` just above.\n         if config.dry_run {\n             let dir = config.out.join(\"tmp-dry-run\");\n             t!(fs::create_dir_all(&dir));"}, {"sha": "f387496883bbc2cd32e430178ab6f3e5cd889a55", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3f83906b30798bf61513fa340524cebf6676f9db", "patch": "@@ -1879,7 +1879,7 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n         let mut cmd = Command::new(llvm_config);\n         cmd.arg(\"--libfiles\");\n         builder.verbose(&format!(\"running {:?}\", cmd));\n-        let files = output(&mut cmd);\n+        let files = if builder.config.dry_run { \"\".into() } else { output(&mut cmd) };\n         let build_llvm_out = &builder.llvm_out(builder.config.build);\n         let target_llvm_out = &builder.llvm_out(target);\n         for file in files.trim_end().split(' ') {\n@@ -2057,6 +2057,41 @@ impl Step for RustDev {\n     }\n }\n \n+// Tarball intended for internal consumption to ease rustc/std development.\n+//\n+// Should not be considered stable by end users.\n+#[derive(Clone, Debug, Eq, Hash, PartialEq)]\n+pub struct Bootstrap {\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for Bootstrap {\n+    type Output = Option<GeneratedTarball>;\n+    const DEFAULT: bool = false;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.alias(\"bootstrap\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Bootstrap { target: run.target });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n+        let target = self.target;\n+\n+        let tarball = Tarball::new(builder, \"bootstrap\", &target.triple);\n+\n+        let bootstrap_outdir = &builder.bootstrap_out;\n+        for file in &[\"bootstrap\", \"llvm-config-wrapper\", \"rustc\", \"rustdoc\", \"sccache-plus-cl\"] {\n+            tarball.add_file(bootstrap_outdir.join(exe(file, target)), \"bootstrap/bin\", 0o755);\n+        }\n+\n+        Some(tarball.generate())\n+    }\n+}\n+\n /// Tarball containing a prebuilt version of the build-manifest tool, intended to be used by the\n /// release process to avoid cloning the monorepo and building stuff.\n ///"}, {"sha": "572adeb6420ebd572525915969b945d2277497a4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=3f83906b30798bf61513fa340524cebf6676f9db", "patch": "@@ -458,19 +458,18 @@ impl Build {\n             .expect(\"failed to read src/version\");\n         let version = version.trim();\n \n-        let bootstrap_out = if std::env::var(\"BOOTSTRAP_PYTHON\").is_ok() {\n-            out.join(\"bootstrap\").join(\"debug\")\n-        } else {\n-            let workspace_target_dir = std::env::var(\"CARGO_TARGET_DIR\")\n-                .map(PathBuf::from)\n-                .unwrap_or_else(|_| src.join(\"target\"));\n-            let bootstrap_out = workspace_target_dir.join(\"debug\");\n-            if !bootstrap_out.join(\"rustc\").exists() && !cfg!(test) {\n-                // this restriction can be lifted whenever https://github.com/rust-lang/rfcs/pull/3028 is implemented\n-                panic!(\"run `cargo build --bins` before `cargo run`\")\n-            }\n-            bootstrap_out\n-        };\n+        let bootstrap_out = std::env::current_exe()\n+            .expect(\"could not determine path to running process\")\n+            .parent()\n+            .unwrap()\n+            .to_path_buf();\n+        if !bootstrap_out.join(exe(\"rustc\", config.build)).exists() && !cfg!(test) {\n+            // this restriction can be lifted whenever https://github.com/rust-lang/rfcs/pull/3028 is implemented\n+            panic!(\n+                \"`rustc` not found in {}, run `cargo build --bins` before `cargo run`\",\n+                bootstrap_out.display()\n+            )\n+        }\n \n         let mut build = Build {\n             initial_rustc: config.initial_rustc.clone(),"}, {"sha": "b960239807af80013b1ad3fdacfd4e453fb6eb18", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile?ref=3f83906b30798bf61513fa340524cebf6676f9db", "patch": "@@ -82,7 +82,7 @@ ENV RUST_CONFIGURE_ARGS \\\n ENV SCRIPT ../src/ci/pgo.sh python3 ../x.py dist \\\n     --host $HOSTS --target $HOSTS \\\n     --include-default-paths \\\n-    build-manifest\n+    build-manifest bootstrap\n ENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=clang\n \n # This is the only builder which will create source tarballs"}, {"sha": "9f401779900800143217a470819e7936e3e72943", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/3f83906b30798bf61513fa340524cebf6676f9db/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=3f83906b30798bf61513fa340524cebf6676f9db", "patch": "@@ -462,7 +462,7 @@ jobs:\n \n           - name: dist-x86_64-apple\n             env:\n-              SCRIPT: ./x.py dist --host=x86_64-apple-darwin --target=x86_64-apple-darwin\n+              SCRIPT: ./x.py dist bootstrap --include-default-paths --host=x86_64-apple-darwin --target=x86_64-apple-darwin\n               RUST_CONFIGURE_ARGS: --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               MACOSX_DEPLOYMENT_TARGET: 10.7\n@@ -474,7 +474,7 @@ jobs:\n \n           - name: dist-apple-various\n             env:\n-              SCRIPT: ./x.py dist --host='' --target=aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim\n+              SCRIPT: ./x.py dist bootstrap --include-default-paths --host='' --target=aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim\n               RUST_CONFIGURE_ARGS: --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               MACOSX_DEPLOYMENT_TARGET: 10.7\n@@ -485,7 +485,7 @@ jobs:\n \n           - name: dist-x86_64-apple-alt\n             env:\n-              SCRIPT: ./x.py dist\n+              SCRIPT: ./x.py dist bootstrap --include-default-paths\n               RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --set rust.jemalloc --set llvm.ninja=false\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               MACOSX_DEPLOYMENT_TARGET: 10.7\n@@ -515,7 +515,7 @@ jobs:\n           # This target only needs to support 11.0 and up as nothing else supports the hardware\n           - name: dist-aarch64-apple\n             env:\n-              SCRIPT: ./x.py dist --stage 2\n+              SCRIPT: ./x.py dist bootstrap --include-default-paths --stage 2\n               RUST_CONFIGURE_ARGS: >-\n                 --build=x86_64-apple-darwin\n                 --host=aarch64-apple-darwin\n@@ -659,7 +659,7 @@ jobs:\n                 --target=x86_64-pc-windows-msvc\n                 --enable-full-tools\n                 --enable-profiler\n-              SCRIPT: PGO_HOST=x86_64-pc-windows-msvc src/ci/pgo.sh python x.py dist\n+              SCRIPT: PGO_HOST=x86_64-pc-windows-msvc src/ci/pgo.sh python x.py dist bootstrap --include-default-paths\n               DIST_REQUIRE_ALL_TOOLS: 1\n             <<: *job-windows-xl\n \n@@ -671,7 +671,7 @@ jobs:\n                 --target=i686-pc-windows-msvc,i586-pc-windows-msvc\n                 --enable-full-tools\n                 --enable-profiler\n-              SCRIPT: python x.py dist\n+              SCRIPT: python x.py dist bootstrap --include-default-paths\n               DIST_REQUIRE_ALL_TOOLS: 1\n             <<: *job-windows-xl\n \n@@ -682,7 +682,7 @@ jobs:\n                 --host=aarch64-pc-windows-msvc\n                 --enable-full-tools\n                 --enable-profiler\n-              SCRIPT: python x.py dist\n+              SCRIPT: python x.py dist bootstrap --include-default-paths\n               DIST_REQUIRE_ALL_TOOLS: 1\n               # Hack around this SDK version, because it doesn't work with clang.\n               # See https://github.com/rust-lang/rust/issues/88796\n@@ -699,14 +699,14 @@ jobs:\n               # We are intentionally allowing an old toolchain on this builder (and that's\n               # incompatible with LLVM downloads today).\n               NO_DOWNLOAD_CI_LLVM: 1\n-              SCRIPT: python x.py dist\n+              SCRIPT: python x.py dist bootstrap --include-default-paths\n               CUSTOM_MINGW: 1\n               DIST_REQUIRE_ALL_TOOLS: 1\n             <<: *job-windows-xl\n \n           - name: dist-x86_64-mingw\n             env:\n-              SCRIPT: python x.py dist\n+              SCRIPT: python x.py dist bootstrap --include-default-paths\n               RUST_CONFIGURE_ARGS: >-\n                 --build=x86_64-pc-windows-gnu\n                 --enable-full-tools\n@@ -722,7 +722,7 @@ jobs:\n           - name: dist-x86_64-msvc-alt\n             env:\n               RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n-              SCRIPT: python x.py dist\n+              SCRIPT: python x.py dist bootstrap --include-default-paths\n             <<: *job-windows-xl\n \n   try:"}]}