{"sha": "c1eed627d909e897309b3d50654a592505654147", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZWVkNjI3ZDkwOWU4OTczMDliM2Q1MDY1NGE1OTI1MDU2NTQxNDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-10T16:22:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-10T16:22:38Z"}, "message": "Merge #5298\n\n5298: Better caret placement when filling match arms r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "06e3eda4397d6ab7e7de5286301ef7f36ee62d5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06e3eda4397d6ab7e7de5286301ef7f36ee62d5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1eed627d909e897309b3d50654a592505654147", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCJXOCRBK7hj4Ov3rIwAAdHIIADcwfaDJoYqM/QPGKllEHxdl\nw4YNSiodzTnEKEWIVbjyZRYSVh1Op2ogy5g+NI2GBTblUHUv0kBbK5jLxtUv9cgo\nEPBeVARzPwuhBfY6oqTwAd7AZVxvP1epx0LvqLHTK7J5HZVZ2qdfTnvUNpHtVv08\n3zNDyTA3V11Igv9TdnVutc07vNfV7+J3uSUghoxCM9W+k2be2GC1Fjs/YbLv5w6S\nHuH4gF3c1imcPF+7cpLsaLBfoHVZI58RFtN08ui9TCxBESQ8+jpxBi5q2t2bs+Fd\nQq/dR/Z2EKL0qs6TXLmz/tcW7l79iJ8sk7EqGaBC0kMZP5RHgRkikurDU5DejKg=\n=QANI\n-----END PGP SIGNATURE-----\n", "payload": "tree 06e3eda4397d6ab7e7de5286301ef7f36ee62d5b\nparent a6ac5ac7424687b0418463f27bf0c032fbf48bb8\nparent a482eb0cd85fa389a2c5188c52c9621ac1ed27c5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594398158 +0000\ncommitter GitHub <noreply@github.com> 1594398158 +0000\n\nMerge #5298\n\n5298: Better caret placement when filling match arms r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1eed627d909e897309b3d50654a592505654147", "html_url": "https://github.com/rust-lang/rust/commit/c1eed627d909e897309b3d50654a592505654147", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1eed627d909e897309b3d50654a592505654147/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6ac5ac7424687b0418463f27bf0c032fbf48bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ac5ac7424687b0418463f27bf0c032fbf48bb8", "html_url": "https://github.com/rust-lang/rust/commit/a6ac5ac7424687b0418463f27bf0c032fbf48bb8"}, {"sha": "a482eb0cd85fa389a2c5188c52c9621ac1ed27c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a482eb0cd85fa389a2c5188c52c9621ac1ed27c5", "html_url": "https://github.com/rust-lang/rust/commit/a482eb0cd85fa389a2c5188c52c9621ac1ed27c5"}], "stats": {"total": 210, "additions": 86, "deletions": 124}, "files": [{"sha": "708e1bc6ca971f8e07e2d35930e3e12c0f0358bb", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 86, "deletions": 124, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/c1eed627d909e897309b3d50654a592505654147/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1eed627d909e897309b3d50654a592505654147/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=c1eed627d909e897309b3d50654a592505654147", "patch": "@@ -115,11 +115,19 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             let old_range = match_arm_list.syntax().text_range();\n             match (first_new_arm, ctx.config.snippet_cap) {\n                 (Some(first_new_arm), Some(cap)) => {\n-                    let snippet = render_snippet(\n-                        cap,\n-                        new_arm_list.syntax(),\n-                        Cursor::Before(first_new_arm.syntax()),\n-                    );\n+                    let extend_lifetime;\n+                    let cursor = match first_new_arm\n+                        .syntax()\n+                        .descendants()\n+                        .find_map(ast::PlaceholderPat::cast)\n+                    {\n+                        Some(it) => {\n+                            extend_lifetime = it.syntax().clone();\n+                            Cursor::Replace(&extend_lifetime)\n+                        }\n+                        None => Cursor::Before(first_new_arm.syntax()),\n+                    };\n+                    let snippet = render_snippet(cap, new_arm_list.syntax(), cursor);\n                     builder.replace_snippet(cap, old_range, snippet);\n                 }\n                 _ => builder.replace(old_range, new_arm_list.to_string()),\n@@ -291,30 +299,22 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                As,\n-                Bs,\n-                Cs(Option<i32>),\n-            }\n-            fn main() {\n-                match A::As<|> {\n-                    A::Cs(_) | A::Bs => {}\n-                }\n-            }\n-            \"#,\n+enum A { As, Bs, Cs(Option<i32>) }\n+fn main() {\n+    match A::As<|> {\n+        A::Cs(_) | A::Bs => {}\n+    }\n+}\n+\"#,\n             r#\"\n-            enum A {\n-                As,\n-                Bs,\n-                Cs(Option<i32>),\n-            }\n-            fn main() {\n-                match A::As {\n-                    A::Cs(_) | A::Bs => {}\n-                    $0A::As => {}\n-                }\n-            }\n-            \"#,\n+enum A { As, Bs, Cs(Option<i32>) }\n+fn main() {\n+    match A::As {\n+        A::Cs(_) | A::Bs => {}\n+        $0A::As => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -323,47 +323,29 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                As,\n-                Bs,\n-                Cs,\n-                Ds(String),\n-                Es(B),\n-            }\n-            enum B {\n-                Xs,\n-                Ys,\n-            }\n-            fn main() {\n-                match A::As<|> {\n-                    A::Bs if 0 < 1 => {}\n-                    A::Ds(_value) => { let x = 1; }\n-                    A::Es(B::Xs) => (),\n-                }\n-            }\n-            \"#,\n+enum A { As, Bs, Cs, Ds(String), Es(B) }\n+enum B { Xs, Ys }\n+fn main() {\n+    match A::As<|> {\n+        A::Bs if 0 < 1 => {}\n+        A::Ds(_value) => { let x = 1; }\n+        A::Es(B::Xs) => (),\n+    }\n+}\n+\"#,\n             r#\"\n-            enum A {\n-                As,\n-                Bs,\n-                Cs,\n-                Ds(String),\n-                Es(B),\n-            }\n-            enum B {\n-                Xs,\n-                Ys,\n-            }\n-            fn main() {\n-                match A::As {\n-                    A::Bs if 0 < 1 => {}\n-                    A::Ds(_value) => { let x = 1; }\n-                    A::Es(B::Xs) => (),\n-                    $0A::As => {}\n-                    A::Cs => {}\n-                }\n-            }\n-            \"#,\n+enum A { As, Bs, Cs, Ds(String), Es(B) }\n+enum B { Xs, Ys }\n+fn main() {\n+    match A::As {\n+        A::Bs if 0 < 1 => {}\n+        A::Ds(_value) => { let x = 1; }\n+        A::Es(B::Xs) => (),\n+        $0A::As => {}\n+        A::Cs => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -372,32 +354,24 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                As,\n-                Bs,\n-                Cs(Option<i32>),\n-            }\n-            fn main() {\n-                match A::As<|> {\n-                    A::As(_) => {}\n-                    a @ A::Bs(_) => {}\n-                }\n-            }\n-            \"#,\n+enum A { As, Bs, Cs(Option<i32>) }\n+fn main() {\n+    match A::As<|> {\n+        A::As(_) => {}\n+        a @ A::Bs(_) => {}\n+    }\n+}\n+\"#,\n             r#\"\n-            enum A {\n-                As,\n-                Bs,\n-                Cs(Option<i32>),\n-            }\n-            fn main() {\n-                match A::As {\n-                    A::As(_) => {}\n-                    a @ A::Bs(_) => {}\n-                    $0A::Cs(_) => {}\n-                }\n-            }\n-            \"#,\n+enum A { As, Bs, Cs(Option<i32>) }\n+fn main() {\n+    match A::As {\n+        A::As(_) => {}\n+        a @ A::Bs(_) => {}\n+        A::Cs(${0:_}) => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -406,39 +380,27 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                As,\n-                Bs,\n-                Cs(String),\n-                Ds(String, String),\n-                Es { x: usize, y: usize }\n-            }\n+enum A { As, Bs, Cs(String), Ds(String, String), Es { x: usize, y: usize } }\n \n-            fn main() {\n-                let a = A::As;\n-                match a<|> {}\n-            }\n-            \"#,\n+fn main() {\n+    let a = A::As;\n+    match a<|> {}\n+}\n+\"#,\n             r#\"\n-            enum A {\n-                As,\n-                Bs,\n-                Cs(String),\n-                Ds(String, String),\n-                Es { x: usize, y: usize }\n-            }\n+enum A { As, Bs, Cs(String), Ds(String, String), Es { x: usize, y: usize } }\n \n-            fn main() {\n-                let a = A::As;\n-                match a {\n-                    $0A::As => {}\n-                    A::Bs => {}\n-                    A::Cs(_) => {}\n-                    A::Ds(_, _) => {}\n-                    A::Es { x, y } => {}\n-                }\n-            }\n-            \"#,\n+fn main() {\n+    let a = A::As;\n+    match a {\n+        $0A::As => {}\n+        A::Bs => {}\n+        A::Cs(_) => {}\n+        A::Ds(_, _) => {}\n+        A::Es { x, y } => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n@@ -778,7 +740,7 @@ fn foo(opt: Option<i32>) {\n             r#\"\n fn foo(opt: Option<i32>) {\n     match opt {\n-        $0Some(_) => {}\n+        Some(${0:_}) => {}\n         None => {}\n     }\n }"}]}