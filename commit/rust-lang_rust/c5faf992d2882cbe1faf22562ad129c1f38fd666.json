{"sha": "c5faf992d2882cbe1faf22562ad129c1f38fd666", "node_id": "C_kwDOAAsO6NoAKGM1ZmFmOTkyZDI4ODJjYmUxZmFmMjI1NjJhZDEyOWMxZjM4ZmQ2NjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-03T14:47:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-03T14:47:49Z"}, "message": "Auto merge of #8414 - MiSawa:fix/optimize-redundant-clone, r=oli-obk\n\nOptimize `redundant_clone`\n\nFixes #8412\n\nchangelog: none", "tree": {"sha": "06e2e5e47bbcdf2cb2246e2eefd3e6e63f5dc098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06e2e5e47bbcdf2cb2246e2eefd3e6e63f5dc098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5faf992d2882cbe1faf22562ad129c1f38fd666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5faf992d2882cbe1faf22562ad129c1f38fd666", "html_url": "https://github.com/rust-lang/rust/commit/c5faf992d2882cbe1faf22562ad129c1f38fd666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5faf992d2882cbe1faf22562ad129c1f38fd666/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d56f457715a603be36e454945b5b3d3ab0a7ccdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56f457715a603be36e454945b5b3d3ab0a7ccdc", "html_url": "https://github.com/rust-lang/rust/commit/d56f457715a603be36e454945b5b3d3ab0a7ccdc"}, {"sha": "6d2a04250c430d28748972b1c0a29838b24d28de", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2a04250c430d28748972b1c0a29838b24d28de", "html_url": "https://github.com/rust-lang/rust/commit/6d2a04250c430d28748972b1c0a29838b24d28de"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "1507c75ff612314236bb2b2ed5be935a9fa9088e", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c5faf992d2882cbe1faf22562ad129c1f38fd666/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5faf992d2882cbe1faf22562ad129c1f38fd666/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=c5faf992d2882cbe1faf22562ad129c1f38fd666", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{has_drop, is_copy, is_type_diagnostic_item, walk_ptrs_ty_depth};\n use clippy_utils::{fn_has_unsatisfiable_preds, match_def_path, paths};\n use if_chain::if_chain;\n-use rustc_data_structures::{fx::FxHashMap, transitive_relation::TransitiveRelation};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{def_id, Body, FnDecl, HirId};\n@@ -512,7 +512,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n /// For example, `b = &a; c = &a;` will make `b` and (transitively) `c`\n /// possible borrowers of `a`.\n struct PossibleBorrowerVisitor<'a, 'tcx> {\n-    possible_borrower: TransitiveRelation<mir::Local>,\n+    possible_borrower: TransitiveRelation,\n     body: &'a mir::Body<'tcx>,\n     cx: &'a LateContext<'tcx>,\n     possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n@@ -543,18 +543,10 @@ impl<'a, 'tcx> PossibleBorrowerVisitor<'a, 'tcx> {\n                 continue;\n             }\n \n-            let borrowers = self.possible_borrower.reachable_from(&row);\n+            let mut borrowers = self.possible_borrower.reachable_from(row, self.body.local_decls.len());\n+            borrowers.remove(mir::Local::from_usize(0));\n             if !borrowers.is_empty() {\n-                let mut bs = HybridBitSet::new_empty(self.body.local_decls.len());\n-                for &c in borrowers {\n-                    if c != mir::Local::from_usize(0) {\n-                        bs.insert(c);\n-                    }\n-                }\n-\n-                if !bs.is_empty() {\n-                    map.insert(row, bs);\n-                }\n+                map.insert(row, borrowers);\n             }\n         }\n \n@@ -644,7 +636,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n /// For exampel, `_1 = &mut _2` generate _1: {_2,...}\n /// Known Problems: not sure all borrowed are tracked\n struct PossibleOriginVisitor<'a, 'tcx> {\n-    possible_origin: TransitiveRelation<mir::Local>,\n+    possible_origin: TransitiveRelation,\n     body: &'a mir::Body<'tcx>,\n }\n \n@@ -663,18 +655,10 @@ impl<'a, 'tcx> PossibleOriginVisitor<'a, 'tcx> {\n                 continue;\n             }\n \n-            let borrowers = self.possible_origin.reachable_from(&row);\n+            let mut borrowers = self.possible_origin.reachable_from(row, self.body.local_decls.len());\n+            borrowers.remove(mir::Local::from_usize(0));\n             if !borrowers.is_empty() {\n-                let mut bs = HybridBitSet::new_empty(self.body.local_decls.len());\n-                for &c in borrowers {\n-                    if c != mir::Local::from_usize(0) {\n-                        bs.insert(c);\n-                    }\n-                }\n-\n-                if !bs.is_empty() {\n-                    map.insert(row, bs);\n-                }\n+                map.insert(row, borrowers);\n             }\n         }\n         map\n@@ -766,3 +750,28 @@ impl PossibleBorrowerMap<'_, '_> {\n         self.maybe_live.contains(local)\n     }\n }\n+\n+#[derive(Default)]\n+struct TransitiveRelation {\n+    relations: FxHashMap<mir::Local, Vec<mir::Local>>,\n+}\n+impl TransitiveRelation {\n+    fn add(&mut self, a: mir::Local, b: mir::Local) {\n+        self.relations.entry(a).or_default().push(b);\n+    }\n+\n+    fn reachable_from(&self, a: mir::Local, domain_size: usize) -> HybridBitSet<mir::Local> {\n+        let mut seen = HybridBitSet::new_empty(domain_size);\n+        let mut stack = vec![a];\n+        while let Some(u) = stack.pop() {\n+            if let Some(edges) = self.relations.get(&u) {\n+                for &v in edges {\n+                    if seen.insert(v) {\n+                        stack.push(v);\n+                    }\n+                }\n+            }\n+        }\n+        seen\n+    }\n+}"}]}