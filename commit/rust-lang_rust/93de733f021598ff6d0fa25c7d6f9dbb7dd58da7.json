{"sha": "93de733f021598ff6d0fa25c7d6f9dbb7dd58da7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZGU3MzNmMDIxNTk4ZmY2ZDBmYTI1YzdkNmY5ZGJiN2RkNThkYTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-20T12:38:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-20T12:38:50Z"}, "message": "Remove tests for -Zlower-128bit-ops", "tree": {"sha": "511a0b96e54da272987ac4b5e896cc1bef240576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/511a0b96e54da272987ac4b5e896cc1bef240576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93de733f021598ff6d0fa25c7d6f9dbb7dd58da7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93de733f021598ff6d0fa25c7d6f9dbb7dd58da7", "html_url": "https://github.com/rust-lang/rust/commit/93de733f021598ff6d0fa25c7d6f9dbb7dd58da7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93de733f021598ff6d0fa25c7d6f9dbb7dd58da7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8a1e73ff5fa0b2a085aa23d013c536c4e7c9675", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a1e73ff5fa0b2a085aa23d013c536c4e7c9675", "html_url": "https://github.com/rust-lang/rust/commit/e8a1e73ff5fa0b2a085aa23d013c536c4e7c9675"}], "stats": {"total": 375, "additions": 0, "deletions": 375}, "files": [{"sha": "1d23bac4ee2068aacdb906da98c93c9be1122f7b", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "removed", "additions": 0, "deletions": 226, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/e8a1e73ff5fa0b2a085aa23d013c536c4e7c9675/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a1e73ff5fa0b2a085aa23d013c536c4e7c9675/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=e8a1e73ff5fa0b2a085aa23d013c536c4e7c9675", "patch": "@@ -1,226 +0,0 @@\n-// asmjs can't even pass i128 as arguments or return values, so ignore it.\n-// this will hopefully be fixed by the LLVM 5 upgrade (#43370)\n-// ignore-asmjs\n-// ignore-emscripten\n-\n-// compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=yes\n-\n-static TEST_SIGNED: i128 = const_signed(-222);\n-static TEST_UNSIGNED: u128 = const_unsigned(200);\n-\n-const fn const_signed(mut x: i128) -> i128 {\n-    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n-}\n-\n-const fn const_unsigned(mut x: u128) -> u128 {\n-    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n-}\n-\n-fn test_signed(mut x: i128) -> i128 {\n-    x += 1;\n-    x -= 2;\n-    x *= 3;\n-    x /= 4;\n-    x %= 5;\n-    x <<= 6;\n-    x >>= 7;\n-    x\n-}\n-\n-fn test_unsigned(mut x: u128) -> u128 {\n-    x += 1;\n-    x -= 2;\n-    x *= 3;\n-    x /= 4;\n-    x %= 5;\n-    x <<= 6;\n-    x >>= 7;\n-    x\n-}\n-\n-fn check(x: i128, y: u128) {\n-    assert_eq!(test_signed(x), -1);\n-    assert_eq!(const_signed(x), -1);\n-    assert_eq!(TEST_SIGNED, -1);\n-    assert_eq!(test_unsigned(y), 2);\n-    assert_eq!(const_unsigned(y), 2);\n-    assert_eq!(TEST_UNSIGNED, 2);\n-}\n-\n-fn main() {\n-    check(-222, 200);\n-}\n-\n-// END RUST SOURCE\n-\n-// START rustc.const_signed.Lower128Bit.after.mir\n-//     _8 = _1;\n-//     _9 = const compiler_builtins::int::addsub::rust_i128_addo(move _8, const 1i128) -> bb10;\n-//     ...\n-//     _7 = move (_9.0: i128);\n-//     ...\n-//     _10 = const compiler_builtins::int::addsub::rust_i128_subo(move _7, const 2i128) -> bb11;\n-//     ...\n-//     _6 = move (_10.0: i128);\n-//     ...\n-//     _11 = const compiler_builtins::int::mul::rust_i128_mulo(move _6, const 3i128) -> bb12;\n-//     ...\n-//     _5 = move (_11.0: i128);\n-//     ...\n-//     _12 = Eq(const 4i128, const 0i128);\n-//     assert(!move _12, \"attempt to divide by zero\") -> bb4;\n-//     ...\n-//     _13 = Eq(const 4i128, const -1i128);\n-//     _14 = Eq(_5, const -170141183460469231731687303715884105728i128);\n-//     _15 = BitAnd(move _13, move _14);\n-//     assert(!move _15, \"attempt to divide with overflow\") -> bb5;\n-//     ...\n-//     _4 = const compiler_builtins::int::sdiv::rust_i128_div(move _5, const 4i128) -> bb13;\n-//     ...\n-//     _17 = Eq(const 5i128, const -1i128);\n-//     _18 = Eq(_4, const -170141183460469231731687303715884105728i128);\n-//     _19 = BitAnd(move _17, move _18);\n-//     assert(!move _19, \"attempt to calculate the remainder with overflow\") -> bb7;\n-//     ...\n-//     _3 = const compiler_builtins::int::sdiv::rust_i128_rem(move _4, const 5i128) -> bb15;\n-//     ...\n-//     _2 = move (_20.0: i128);\n-//     ...\n-//     _23 = const 7i32 as u128 (Misc);\n-//     _21 = const compiler_builtins::int::shift::rust_i128_shro(move _2, move _23) -> bb16;\n-//     ...\n-//     _0 = move (_21.0: i128);\n-//     ...\n-//     assert(!move (_9.1: bool), \"attempt to add with overflow\") -> bb1;\n-//     ...\n-//     assert(!move (_10.1: bool), \"attempt to subtract with overflow\") -> bb2;\n-//     ...\n-//     assert(!move (_11.1: bool), \"attempt to multiply with overflow\") -> bb3;\n-//     ...\n-//     _16 = Eq(const 5i128, const 0i128);\n-//     assert(!move _16, \"attempt to calculate the remainder with a divisor of zero\") -> bb6;\n-//     ...\n-//     assert(!move (_20.1: bool), \"attempt to shift left with overflow\") -> bb8;\n-//     ...\n-//     _22 = const 6i32 as u128 (Misc);\n-//     _20 = const compiler_builtins::int::shift::rust_i128_shlo(move _3, move _22) -> bb14;\n-//     ...\n-//     assert(!move (_21.1: bool), \"attempt to shift right with overflow\") -> bb9;\n-// END rustc.const_signed.Lower128Bit.after.mir\n-\n-// START rustc.const_unsigned.Lower128Bit.after.mir\n-//     _8 = _1;\n-//     _9 = const compiler_builtins::int::addsub::rust_u128_addo(move _8, const 1u128) -> bb8;\n-//     ...\n-//     _7 = move (_9.0: u128);\n-//     ...\n-//     _10 = const compiler_builtins::int::addsub::rust_u128_subo(move _7, const 2u128) -> bb9;\n-//     ...\n-//     _6 = move (_10.0: u128);\n-//     ...\n-//     _11 = const compiler_builtins::int::mul::rust_u128_mulo(move _6, const 3u128) -> bb10;\n-//     ...\n-//     _5 = move (_11.0: u128);\n-//     ...\n-//     _12 = Eq(const 4u128, const 0u128);\n-//     assert(!move _12, \"attempt to divide by zero\") -> bb4;\n-//     ...\n-//     _4 = const compiler_builtins::int::udiv::rust_u128_div(move _5, const 4u128) -> bb11;\n-//     ...\n-//     _3 = const compiler_builtins::int::udiv::rust_u128_rem(move _4, const 5u128) -> bb13;\n-//     ...\n-//     _2 = move (_14.0: u128);\n-//     ...\n-//     _17 = const 7i32 as u128 (Misc);\n-//     _15 = const compiler_builtins::int::shift::rust_u128_shro(move _2, move _17) -> bb14;\n-//     ...\n-//     _0 = move (_15.0: u128);\n-//     ...\n-//     assert(!move (_9.1: bool), \"attempt to add with overflow\") -> bb1;\n-//     ...\n-//     assert(!move (_10.1: bool), \"attempt to subtract with overflow\") -> bb2;\n-//     ...\n-//     assert(!move (_11.1: bool), \"attempt to multiply with overflow\") -> bb3;\n-//     ...\n-//     _13 = Eq(const 5u128, const 0u128);\n-//     assert(!move _13, \"attempt to calculate the remainder with a divisor of zero\") -> bb5;\n-//     ...\n-//     assert(!move (_14.1: bool), \"attempt to shift left with overflow\") -> bb6;\n-//     ...\n-//     _16 = const 6i32 as u128 (Misc);\n-//     _14 = const compiler_builtins::int::shift::rust_u128_shlo(move _3, move _16) -> bb12;\n-//     ...\n-//     assert(!move (_15.1: bool), \"attempt to shift right with overflow\") -> bb7;\n-// END rustc.const_unsigned.Lower128Bit.after.mir\n-\n-// START rustc.test_signed.Lower128Bit.after.mir\n-//     _2 = const compiler_builtins::int::addsub::rust_i128_addo(_1, const 1i128) -> bb10;\n-//     ...\n-//     _1 = move (_2.0: i128);\n-//     _3 = const compiler_builtins::int::addsub::rust_i128_subo(_1, const 2i128) -> bb11;\n-//     ...\n-//     _1 = move (_3.0: i128);\n-//     _4 = const compiler_builtins::int::mul::rust_i128_mulo(_1, const 3i128) -> bb12;\n-//     ...\n-//     _1 = move (_4.0: i128);\n-//     ...\n-//     _1 = const compiler_builtins::int::sdiv::rust_i128_div(_1, const 4i128) -> bb13;\n-//     ...\n-//     _1 = const compiler_builtins::int::sdiv::rust_i128_rem(_1, const 5i128) -> bb15;\n-//     ...\n-//     _1 = move (_13.0: i128);\n-//     ...\n-//     _16 = const 7i32 as u128 (Misc);\n-//     _14 = const compiler_builtins::int::shift::rust_i128_shro(_1, move _16) -> bb16;\n-//     ...\n-//     _1 = move (_14.0: i128);\n-//     ...\n-//     assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n-//     ...\n-//     assert(!move (_3.1: bool), \"attempt to subtract with overflow\") -> bb2;\n-//     ...\n-//     assert(!move (_4.1: bool), \"attempt to multiply with overflow\") -> bb3;\n-//     ...\n-//     assert(!move (_13.1: bool), \"attempt to shift left with overflow\") -> bb8;\n-//     ...\n-//     _15 = const 6i32 as u128 (Misc);\n-//     _13 = const compiler_builtins::int::shift::rust_i128_shlo(_1, move _15) -> bb14;\n-//     ...\n-//     assert(!move (_14.1: bool), \"attempt to shift right with overflow\") -> bb9;\n-// END rustc.test_signed.Lower128Bit.after.mir\n-\n-// START rustc.test_unsigned.Lower128Bit.after.mir\n-//     _2 = const compiler_builtins::int::addsub::rust_u128_addo(_1, const 1u128) -> bb8;\n-//     ...\n-//     _1 = move (_2.0: u128);\n-//     _3 = const compiler_builtins::int::addsub::rust_u128_subo(_1, const 2u128) -> bb9;\n-//     ...\n-//     _1 = move (_3.0: u128);\n-//     _4 = const compiler_builtins::int::mul::rust_u128_mulo(_1, const 3u128) -> bb10;\n-//     ...\n-//     _1 = move (_4.0: u128);\n-//     ...\n-//     _1 = const compiler_builtins::int::udiv::rust_u128_div(_1, const 4u128) -> bb11;\n-//     ...\n-//     _1 = const compiler_builtins::int::udiv::rust_u128_rem(_1, const 5u128) -> bb13;\n-//     ...\n-//     _1 = move (_7.0: u128);\n-//     ...\n-//     _10 = const 7i32 as u128 (Misc);\n-//     _8 = const compiler_builtins::int::shift::rust_u128_shro(_1, move _10) -> bb14;\n-//     ...\n-//     _1 = move (_8.0: u128);\n-//     ...\n-//     assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n-//     ...\n-//     assert(!move (_3.1: bool), \"attempt to subtract with overflow\") -> bb2;\n-//     ...\n-//     assert(!move (_4.1: bool), \"attempt to multiply with overflow\") -> bb3;\n-//     ...\n-//     assert(!move (_7.1: bool), \"attempt to shift left with overflow\") -> bb6;\n-//     ...\n-//     _9 = const 6i32 as u128 (Misc);\n-//     _7 = const compiler_builtins::int::shift::rust_u128_shlo(_1, move _9) -> bb12;\n-//     ...\n-//     assert(!move (_8.1: bool), \"attempt to shift right with overflow\") -> bb7;\n-// END rustc.test_unsigned.Lower128Bit.after.mir"}, {"sha": "7528330b030ce20b1ebf86631b5a6e7093b87594", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "removed", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/e8a1e73ff5fa0b2a085aa23d013c536c4e7c9675/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a1e73ff5fa0b2a085aa23d013c536c4e7c9675/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=e8a1e73ff5fa0b2a085aa23d013c536c4e7c9675", "patch": "@@ -1,149 +0,0 @@\n-// ignore-emscripten\n-\n-// compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=no -O\n-\n-static TEST_SIGNED: i128 = const_signed(-222);\n-static TEST_UNSIGNED: u128 = const_unsigned(200);\n-\n-const fn const_signed(mut x: i128) -> i128 {\n-    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n-}\n-\n-const fn const_unsigned(mut x: u128) -> u128 {\n-    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n-}\n-\n-fn test_signed(mut x: i128) -> i128 {\n-    x += 1;\n-    x -= 2;\n-    x *= 3;\n-    x /= 4;\n-    x %= 5;\n-    x <<= 6;\n-    x >>= 7;\n-    x\n-}\n-\n-fn test_unsigned(mut x: u128) -> u128 {\n-    x += 1;\n-    x -= 2;\n-    x *= 3;\n-    x /= 4;\n-    x %= 5;\n-    x <<= 6;\n-    x >>= 7;\n-    x\n-}\n-\n-fn check(x: i128, y: u128) {\n-    assert_eq!(test_signed(x), -1);\n-    assert_eq!(const_signed(x), -1);\n-    assert_eq!(TEST_SIGNED, -1);\n-    assert_eq!(test_unsigned(y), 2);\n-    assert_eq!(const_unsigned(y), 2);\n-    assert_eq!(TEST_UNSIGNED, 2);\n-}\n-\n-fn main() {\n-    check(-222, 200);\n-}\n-\n-// END RUST SOURCE\n-\n-// START rustc.const_signed.Lower128Bit.after.mir\n-// _7 = const compiler_builtins::int::addsub::rust_i128_add(move _8, const 1i128) -> bb7;\n-// ...\n-// _10 = Eq(const 4i128, const -1i128);\n-// _11 = Eq(_5, const -170141183460469231731687303715884105728i128);\n-// _12 = BitAnd(move _10, move _11);\n-// assert(!move _12, \"attempt to divide with overflow\") -> bb2;\n-// ...\n-// _4 = const compiler_builtins::int::sdiv::rust_i128_div(move _5, const 4i128) -> bb8;\n-// ...\n-// _14 = Eq(const 5i128, const -1i128);\n-// _15 = Eq(_4, const -170141183460469231731687303715884105728i128);\n-// _16 = BitAnd(move _14, move _15);\n-// assert(!move _16, \"attempt to calculate the remainder with overflow\") -> bb4;\n-// ...\n-// _3 = const compiler_builtins::int::sdiv::rust_i128_rem(move _4, const 5i128) -> bb11;\n-// ...\n-// _9 = Eq(const 4i128, const 0i128);\n-// assert(!move _9, \"attempt to divide by zero\") -> bb1;\n-// ...\n-// _5 = const compiler_builtins::int::mul::rust_i128_mul(move _6, const 3i128) -> bb5;\n-// ...\n-// _6 = const compiler_builtins::int::addsub::rust_i128_sub(move _7, const 2i128) -> bb6;\n-// ...\n-// _13 = Eq(const 5i128, const 0i128);\n-// assert(!move _13, \"attempt to calculate the remainder with a divisor of zero\") -> bb3;\n-// ...\n-// _17 = const 7i32 as u32 (Misc);\n-// _0 = const compiler_builtins::int::shift::rust_i128_shr(move _2, move _17) -> bb9;\n-// ...\n-// _18 = const 6i32 as u32 (Misc);\n-// _2 = const compiler_builtins::int::shift::rust_i128_shl(move _3, move _18) -> bb10;\n-// END rustc.const_signed.Lower128Bit.after.mir\n-\n-// START rustc.const_unsigned.Lower128Bit.after.mir\n-// _8 = _1;\n-// _7 = const compiler_builtins::int::addsub::rust_u128_add(move _8, const 1u128) -> bb5;\n-// ...\n-// _4 = const compiler_builtins::int::udiv::rust_u128_div(move _5, const 4u128) -> bb6;\n-// ...\n-// _3 = const compiler_builtins::int::udiv::rust_u128_rem(move _4, const 5u128) -> bb9;\n-// ...\n-// _9 = Eq(const 4u128, const 0u128);\n-// assert(!move _9, \"attempt to divide by zero\") -> bb1;\n-// ...\n-// _5 = const compiler_builtins::int::mul::rust_u128_mul(move _6, const 3u128) -> bb3;\n-// ...\n-// _6 = const compiler_builtins::int::addsub::rust_u128_sub(move _7, const 2u128) -> bb4;\n-// ...\n-// _10 = Eq(const 5u128, const 0u128);\n-// assert(!move _10, \"attempt to calculate the remainder with a divisor of zero\") -> bb2;\n-// ...\n-// return;\n-// ...\n-// _11 = const 7i32 as u32 (Misc);\n-// _0 = const compiler_builtins::int::shift::rust_u128_shr(move _2, move _11) -> bb7;\n-// ...\n-// _12 = const 6i32 as u32 (Misc);\n-// _2 = const compiler_builtins::int::shift::rust_u128_shl(move _3, move _12) -> bb8;\n-\n-// END rustc.const_unsigned.Lower128Bit.after.mir\n-\n-// START rustc.test_signed.Lower128Bit.after.mir\n-//     _1 = const compiler_builtins::int::addsub::rust_i128_add(_1, const 1i128) -> bb7;\n-//     ...\n-//     _1 = const compiler_builtins::int::sdiv::rust_i128_div(_1, const 4i128) -> bb8;\n-//     ...\n-//     _1 = const compiler_builtins::int::sdiv::rust_i128_rem(_1, const 5i128) -> bb11;\n-//     ...\n-//     _1 = const compiler_builtins::int::mul::rust_i128_mul(_1, const 3i128) -> bb5;\n-//     ...\n-//     _1 = const compiler_builtins::int::addsub::rust_i128_sub(_1, const 2i128) -> bb6;\n-//     ...\n-//     _10 = const 7i32 as u32 (Misc);\n-//     _1 = const compiler_builtins::int::shift::rust_i128_shr(_1, move _10) -> bb9;\n-//     ...\n-//     _11 = const 6i32 as u32 (Misc);\n-//     _1 = const compiler_builtins::int::shift::rust_i128_shl(_1, move _11) -> bb10;\n-// END rustc.test_signed.Lower128Bit.after.mir\n-\n-// START rustc.test_unsigned.Lower128Bit.after.mir\n-//     _1 = const compiler_builtins::int::addsub::rust_u128_add(_1, const 1u128) -> bb5;\n-//     ...\n-//     _1 = const compiler_builtins::int::udiv::rust_u128_div(_1, const 4u128) -> bb6;\n-//     ...\n-//     _1 = const compiler_builtins::int::udiv::rust_u128_rem(_1, const 5u128) -> bb9;\n-//     ...\n-//     _1 = const compiler_builtins::int::mul::rust_u128_mul(_1, const 3u128) -> bb3;\n-//     ...\n-//     _1 = const compiler_builtins::int::addsub::rust_u128_sub(_1, const 2u128) -> bb4;\n-//     ...\n-//     _4 = const 7i32 as u32 (Misc);\n-//     _1 = const compiler_builtins::int::shift::rust_u128_shr(_1, move _4) -> bb7;\n-//     ...\n-//     _5 = const 6i32 as u32 (Misc);\n-//     _1 = const compiler_builtins::int::shift::rust_u128_shl(_1, move _5) -> bb8;\n-// END rustc.test_unsigned.Lower128Bit.after.mir"}]}