{"sha": "927614ff3ea38014549e24152fd3198532919b2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNzYxNGZmM2VhMzgwMTQ1NDllMjQxNTJmZDMxOTg1MzI5MTliMmM=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-04T10:09:32Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-04T13:58:19Z"}, "message": "hir: more HirId methods", "tree": {"sha": "6019de2adc0b58ec20d131d78399149c58f5d6ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6019de2adc0b58ec20d131d78399149c58f5d6ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/927614ff3ea38014549e24152fd3198532919b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/927614ff3ea38014549e24152fd3198532919b2c", "html_url": "https://github.com/rust-lang/rust/commit/927614ff3ea38014549e24152fd3198532919b2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/927614ff3ea38014549e24152fd3198532919b2c/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "html_url": "https://github.com/rust-lang/rust/commit/4314dbaa761d463d136592ab7fc9cdae46c8cc2a"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "d35306ba353a3c7362c78d5156721a1c4acef5c5", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/927614ff3ea38014549e24152fd3198532919b2c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927614ff3ea38014549e24152fd3198532919b2c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=927614ff3ea38014549e24152fd3198532919b2c", "patch": "@@ -401,6 +401,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn describe_def_by_hir_id(&self, hir_id: HirId) -> Option<Def> {\n+        let node_id = self.hir_to_node_id(hir_id);\n+        self.describe_def(node_id)\n+    }\n+\n     fn entry_count(&self) -> usize {\n         self.map.len()\n     }\n@@ -445,6 +451,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<FnDecl> {\n+        let node_id = self.hir_to_node_id(hir_id);\n+        self.fn_decl(node_id)\n+    }\n+\n     /// Returns the `NodeId` that corresponds to the definition of\n     /// which this is the body of, i.e., a `fn`, `const` or `static`\n     /// item (possibly associated), a closure, or a `hir::AnonConst`.\n@@ -855,6 +867,12 @@ impl<'hir> Map<'hir> {\n         self.local_def_id(self.get_parent(id))\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn get_parent_did_by_hir_id(&self, id: HirId) -> DefId {\n+        let node_id = self.hir_to_node_id(id);\n+        self.get_parent_did(node_id)\n+    }\n+\n     pub fn get_foreign_abi(&self, id: NodeId) -> Abi {\n         let parent = self.get_parent(id);\n         if let Some(entry) = self.find_entry(parent) {\n@@ -868,6 +886,12 @@ impl<'hir> Map<'hir> {\n         bug!(\"expected foreign mod or inlined parent, found {}\", self.node_to_string(parent))\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn get_foreign_abi_by_hir_id(&self, id: HirId) -> Abi {\n+        let node_id = self.hir_to_node_id(id);\n+        self.get_foreign_abi(node_id)\n+    }\n+\n     pub fn expect_item(&self, id: NodeId) -> &'hir Item {\n         match self.find(id) { // read recorded by `find`\n             Some(Node::Item(item)) => item,\n@@ -888,6 +912,18 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn expect_impl_item_by_hir_id(&self, id: HirId) -> &'hir ImplItem {\n+        let node_id = self.hir_to_node_id(id);\n+        self.expect_impl_item(node_id)\n+    }\n+\n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn expect_trait_item_by_hir_id(&self, id: HirId) -> &'hir TraitItem {\n+        let node_id = self.hir_to_node_id(id);\n+        self.expect_trait_item(node_id)\n+    }\n+\n     pub fn expect_trait_item(&self, id: NodeId) -> &'hir TraitItem {\n         match self.find(id) {\n             Some(Node::TraitItem(item)) => item,\n@@ -931,6 +967,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn expect_expr_by_hir_id(&self, id: HirId) -> &'hir Expr {\n+        let node_id = self.hir_to_node_id(id);\n+        self.expect_expr(node_id)\n+    }\n+\n     /// Returns the name associated with the given NodeId's AST.\n     pub fn name(&self, id: NodeId) -> Name {\n         match self.get(id) {\n@@ -948,6 +990,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn name_by_hir_id(&self, id: HirId) -> Name {\n+        let node_id = self.hir_to_node_id(id);\n+        self.name(node_id)\n+    }\n+\n     /// Given a node ID, get a list of attributes associated with the AST\n     /// corresponding to the Node ID\n     pub fn attrs(&self, id: NodeId) -> &'hir [ast::Attribute] {\n@@ -970,6 +1018,12 @@ impl<'hir> Map<'hir> {\n         attrs.unwrap_or(&[])\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn attrs_by_hir_id(&self, id: HirId) -> &'hir [ast::Attribute] {\n+        let node_id = self.hir_to_node_id(id);\n+        self.attrs(node_id)\n+    }\n+\n     /// Returns an iterator that yields the node id's with paths that\n     /// match `parts`.  (Requires `parts` is non-empty.)\n     ///\n@@ -1019,6 +1073,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn span_by_hir_id(&self, id: HirId) -> Span {\n+        let node_id = self.hir_to_node_id(id);\n+        self.span(node_id)\n+    }\n+\n     pub fn span_if_local(&self, id: DefId) -> Option<Span> {\n         self.as_local_node_id(id).map(|id| self.span(id))\n     }"}]}