{"sha": "5cb6246c3e7ccae640eafbc238a293918b552116", "node_id": "C_kwDOAAsO6NoAKDVjYjYyNDZjM2U3Y2NhZTY0MGVhZmJjMjM4YTI5MzkxOGI1NTIxMTY", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2023-01-12T11:35:29Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2023-01-12T11:37:56Z"}, "message": "Address PR reivew", "tree": {"sha": "944fb4470c9ca1c7d6763ffe27d5f406b8c484a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/944fb4470c9ca1c7d6763ffe27d5f406b8c484a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cb6246c3e7ccae640eafbc238a293918b552116", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEwgBEOx3xlHwII7PG9cWdDmaeUwIFAmO/8RQACgkQ9cWdDmae\nUwK7WBAAgWEE3ldkcKaE6YuYRPotxFhRjLArx48lbWu49HpbNfR+0UsuBzpAmrDB\nNyCzl+dCBBtwq6dEmGITFiUBp4/5RVfcbH8ttk3CbOE+frzdSiP9Z5dnBEmEn1tA\n7qxB/o344vKr4cL2pa7N4HjvGX5wrXe4pqYxZmw2ZNd6f3C/EfYd8azgEr9K54NL\nfUaQaESGIr8jn+ABpxzbYRoVd4Ovx3VcOTFgNWkimBLwO7/D4mQC7H8eD4jIDwuq\nQxZBhgi3sVTsmJEIiH06h2qlN4dqdYyPZiHFhRcpA2yJDelITCj2cdfzpjiSuuFw\nt+fnmvxCAibzURmdivC146aq9csToUk1936iNvE2BVWi3W896dxb7dmmUGJILXha\nPXTxng8phWCAb758ioDlnruvzpkgGni+dMy87B7n8FZL+cuDjrIQkqe05C9Ia5EQ\nmMaFbuuMjVFJl5ald5nKB1CyWnL20xFdYdWPgU/XUBAcciZjy2HwzekMg8sSpAZk\nMTtUpi702FLH0O3tz29TZTiX4rrmsqh04vxiP4YhZku6zJVNRexKcf9fTM1kFtbR\nuKUMRQS6Q9yRXikV27eKiW2HxSoHghoZnHa3Xl5trVzr2iGTiJAjYmmNpeRbRx6C\nMTx61mGqH31sTOzXXGcKOrB4Cb5BhOPLRKgpjPpU5toP/NdKEZg=\n=WSvN\n-----END PGP SIGNATURE-----", "payload": "tree 944fb4470c9ca1c7d6763ffe27d5f406b8c484a1\nparent e6948c4117b608585c5aa22a7f95b6cfdc88dc48\nauthor xFrednet <xFrednet@gmail.com> 1673523329 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1673523476 +0100\n\nAddress PR reivew\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb6246c3e7ccae640eafbc238a293918b552116", "html_url": "https://github.com/rust-lang/rust/commit/5cb6246c3e7ccae640eafbc238a293918b552116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cb6246c3e7ccae640eafbc238a293918b552116/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6948c4117b608585c5aa22a7f95b6cfdc88dc48", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6948c4117b608585c5aa22a7f95b6cfdc88dc48", "html_url": "https://github.com/rust-lang/rust/commit/e6948c4117b608585c5aa22a7f95b6cfdc88dc48"}], "stats": {"total": 87, "additions": 63, "deletions": 24}, "files": [{"sha": "f3f8b8d87982e6aee6eae51bd47c6cf18fe3646a", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5cb6246c3e7ccae640eafbc238a293918b552116/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb6246c3e7ccae640eafbc238a293918b552116/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=5cb6246c3e7ccae640eafbc238a293918b552116", "patch": "@@ -8,6 +8,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n+use rustc_span::Span;\n use rustc_target::abi::IntegerType;\n \n use super::{utils, CAST_ENUM_TRUNCATION, CAST_POSSIBLE_TRUNCATION};\n@@ -76,7 +77,14 @@ fn apply_reductions(cx: &LateContext<'_>, nbits: u64, expr: &Expr<'_>, signed: b\n     }\n }\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_expr: &Expr<'_>,\n+    cast_from: Ty<'_>,\n+    cast_to: Ty<'_>,\n+    cast_to_span: Span,\n+) {\n     let msg = match (cast_from.kind(), cast_to.is_integral()) {\n         (ty::Int(_) | ty::Uint(_), true) => {\n             let from_nbits = apply_reductions(\n@@ -155,9 +163,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n         _ => return,\n     };\n \n-    let snippet = snippet(cx, expr.span, \"..\");\n-    let name_of_cast_from = snippet.split(\" as\").next().unwrap_or(\"..\");\n-    let suggestion = format!(\"{cast_to}::try_from({name_of_cast_from})\");\n+    let name_of_cast_from = snippet(cx, cast_expr.span, \"..\");\n+    let cast_to_snip = snippet(cx, cast_to_span, \"..\");\n+    let suggestion = format!(\"{cast_to_snip}::try_from({name_of_cast_from})\");\n \n     span_lint_and_then(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg, |diag| {\n         diag.help(\"if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\");"}, {"sha": "362f70d12d185344181f2e7524dcc977890488e8", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cb6246c3e7ccae640eafbc238a293918b552116/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb6246c3e7ccae640eafbc238a293918b552116/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=5cb6246c3e7ccae640eafbc238a293918b552116", "patch": "@@ -728,7 +728,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n \n             if cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n-                cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n+                cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to, cast_to_hir.span);\n                 if cast_from.is_numeric() {\n                     cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n                     cast_precision_loss::check(cx, expr, cast_from, cast_to);"}, {"sha": "8b2673c2a7fdb24f15e267a76123e4284e279696", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cb6246c3e7ccae640eafbc238a293918b552116/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb6246c3e7ccae640eafbc238a293918b552116/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=5cb6246c3e7ccae640eafbc238a293918b552116", "patch": "@@ -28,6 +28,7 @@ fn main() {\n     1i32 as u8;\n     1f64 as isize;\n     1f64 as usize;\n+    1f32 as u32 as u16;\n     // Test clippy::cast_possible_wrap\n     1u8 as i8;\n     1u16 as i16;"}, {"sha": "4af1de9aa38d354db9afdbad5172a63f7fa9132b", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 49, "deletions": 19, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5cb6246c3e7ccae640eafbc238a293918b552116/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cb6246c3e7ccae640eafbc238a293918b552116/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=5cb6246c3e7ccae640eafbc238a293918b552116", "patch": "@@ -135,52 +135,82 @@ error: casting `f64` to `usize` may lose the sign of the value\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n+error: casting `u32` to `u16` may truncate the value\n+  --> $DIR/cast.rs:31:5\n+   |\n+LL |     1f32 as u32 as u16;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u16::try_from(1f32 as u32);\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: casting `f32` to `u32` may truncate the value\n+  --> $DIR/cast.rs:31:5\n+   |\n+LL |     1f32 as u32 as u16;\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |     u32::try_from(1f32) as u16;\n+   |     ~~~~~~~~~~~~~~~~~~~\n+\n+error: casting `f32` to `u32` may lose the sign of the value\n+  --> $DIR/cast.rs:31:5\n+   |\n+LL |     1f32 as u32 as u16;\n+   |     ^^^^^^^^^^^\n+\n error: casting `u8` to `i8` may wrap around the value\n-  --> $DIR/cast.rs:32:5\n+  --> $DIR/cast.rs:33:5\n    |\n LL |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting `u16` to `i16` may wrap around the value\n-  --> $DIR/cast.rs:33:5\n+  --> $DIR/cast.rs:34:5\n    |\n LL |     1u16 as i16;\n    |     ^^^^^^^^^^^\n \n error: casting `u32` to `i32` may wrap around the value\n-  --> $DIR/cast.rs:34:5\n+  --> $DIR/cast.rs:35:5\n    |\n LL |     1u32 as i32;\n    |     ^^^^^^^^^^^\n \n error: casting `u64` to `i64` may wrap around the value\n-  --> $DIR/cast.rs:35:5\n+  --> $DIR/cast.rs:36:5\n    |\n LL |     1u64 as i64;\n    |     ^^^^^^^^^^^\n \n error: casting `usize` to `isize` may wrap around the value\n-  --> $DIR/cast.rs:36:5\n+  --> $DIR/cast.rs:37:5\n    |\n LL |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting `i32` to `u32` may lose the sign of the value\n-  --> $DIR/cast.rs:39:5\n+  --> $DIR/cast.rs:40:5\n    |\n LL |     -1i32 as u32;\n    |     ^^^^^^^^^^^^\n \n error: casting `isize` to `usize` may lose the sign of the value\n-  --> $DIR/cast.rs:41:5\n+  --> $DIR/cast.rs:42:5\n    |\n LL |     -1isize as usize;\n    |     ^^^^^^^^^^^^^^^^\n \n error: casting `i64` to `i8` may truncate the value\n-  --> $DIR/cast.rs:108:5\n+  --> $DIR/cast.rs:109:5\n    |\n LL |     (-99999999999i64).min(1) as i8; // should be linted because signed\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -192,7 +222,7 @@ LL |     i8::try_from((-99999999999i64).min(1)); // should be linted because sig\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `u8` may truncate the value\n-  --> $DIR/cast.rs:120:5\n+  --> $DIR/cast.rs:121:5\n    |\n LL |     999999u64.clamp(0, 256) as u8; // should still be linted\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -204,7 +234,7 @@ LL |     u8::try_from(999999u64.clamp(0, 256)); // should still be linted\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2` to `u8` may truncate the value\n-  --> $DIR/cast.rs:141:21\n+  --> $DIR/cast.rs:142:21\n    |\n LL |             let _ = self as u8;\n    |                     ^^^^^^^^^^\n@@ -216,15 +246,15 @@ LL |             let _ = u8::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2::B` to `u8` will truncate the value\n-  --> $DIR/cast.rs:142:21\n+  --> $DIR/cast.rs:143:21\n    |\n LL |             let _ = Self::B as u8;\n    |                     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-enum-truncation` implied by `-D warnings`\n \n error: casting `main::E5` to `i8` may truncate the value\n-  --> $DIR/cast.rs:178:21\n+  --> $DIR/cast.rs:179:21\n    |\n LL |             let _ = self as i8;\n    |                     ^^^^^^^^^^\n@@ -236,13 +266,13 @@ LL |             let _ = i8::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E5::A` to `i8` will truncate the value\n-  --> $DIR/cast.rs:179:21\n+  --> $DIR/cast.rs:180:21\n    |\n LL |             let _ = Self::A as i8;\n    |                     ^^^^^^^^^^^^^\n \n error: casting `main::E6` to `i16` may truncate the value\n-  --> $DIR/cast.rs:193:21\n+  --> $DIR/cast.rs:194:21\n    |\n LL |             let _ = self as i16;\n    |                     ^^^^^^^^^^^\n@@ -254,7 +284,7 @@ LL |             let _ = i16::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E7` to `usize` may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:208:21\n+  --> $DIR/cast.rs:209:21\n    |\n LL |             let _ = self as usize;\n    |                     ^^^^^^^^^^^^^\n@@ -266,7 +296,7 @@ LL |             let _ = usize::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E10` to `u16` may truncate the value\n-  --> $DIR/cast.rs:249:21\n+  --> $DIR/cast.rs:250:21\n    |\n LL |             let _ = self as u16;\n    |                     ^^^^^^^^^^^\n@@ -278,7 +308,7 @@ LL |             let _ = u16::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n-  --> $DIR/cast.rs:257:13\n+  --> $DIR/cast.rs:258:13\n    |\n LL |     let c = (q >> 16) as u8;\n    |             ^^^^^^^^^^^^^^^\n@@ -290,7 +320,7 @@ LL |     let c = u8::try_from((q >> 16));\n    |             ~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n-  --> $DIR/cast.rs:260:13\n+  --> $DIR/cast.rs:261:13\n    |\n LL |     let c = (q / 1000) as u8;\n    |             ^^^^^^^^^^^^^^^^\n@@ -301,5 +331,5 @@ help: ... or use `try_from` and handle the error accordingly\n LL |     let c = u8::try_from((q / 1000));\n    |             ~~~~~~~~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 33 previous errors\n+error: aborting due to 36 previous errors\n "}]}