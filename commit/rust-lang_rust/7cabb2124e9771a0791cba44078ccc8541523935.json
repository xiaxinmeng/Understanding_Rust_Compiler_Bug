{"sha": "7cabb2124e9771a0791cba44078ccc8541523935", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYWJiMjEyNGU5NzcxYTA3OTFjYmE0NDA3OGNjYzg1NDE1MjM5MzU=", "commit": {"author": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-01-27T09:23:52Z"}, "committer": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-01-27T09:26:13Z"}, "message": "Fix PEP8 for tidy", "tree": {"sha": "e7873204932ab12162691f5bad9fb5f9f1a0ffc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7873204932ab12162691f5bad9fb5f9f1a0ffc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cabb2124e9771a0791cba44078ccc8541523935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cabb2124e9771a0791cba44078ccc8541523935", "html_url": "https://github.com/rust-lang/rust/commit/7cabb2124e9771a0791cba44078ccc8541523935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cabb2124e9771a0791cba44078ccc8541523935/comments", "author": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db2039f52a0d6ccb69986058aacddacfb9ba333", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db2039f52a0d6ccb69986058aacddacfb9ba333", "html_url": "https://github.com/rust-lang/rust/commit/1db2039f52a0d6ccb69986058aacddacfb9ba333"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "f5172feb5b60f1cb288973ae9459597cebaeea02", "filename": "src/etc/tidy.py", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7cabb2124e9771a0791cba44078ccc8541523935/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/7cabb2124e9771a0791cba44078ccc8541523935/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=7cabb2124e9771a0791cba44078ccc8541523935", "patch": "@@ -8,37 +8,45 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-import sys, fileinput, subprocess, re, os\n+import sys\n+import fileinput\n+import subprocess\n+import re\n+import os\n from licenseck import *\n import snapshot\n \n-err=0\n-cols=100\n-cr_flag=\"ignore-tidy-cr\"\n-tab_flag=\"ignore-tidy-tab\"\n-linelength_flag=\"ignore-tidy-linelength\"\n+err = 0\n+cols = 100\n+cr_flag = \"ignore-tidy-cr\"\n+tab_flag = \"ignore-tidy-tab\"\n+linelength_flag = \"ignore-tidy-linelength\"\n \n # Be careful to support Python 2.4, 2.6, and 3.x here!\n-config_proc=subprocess.Popen([ \"git\", \"config\", \"core.autocrlf\" ],\n-                             stdout=subprocess.PIPE)\n-result=config_proc.communicate()[0]\n+config_proc = subprocess.Popen([\"git\", \"config\", \"core.autocrlf\"],\n+                               stdout=subprocess.PIPE)\n+result = config_proc.communicate()[0]\n+\n+true = \"true\".encode('utf8')\n+autocrlf = result.strip() == true if result is not None else False\n \n-true=\"true\".encode('utf8')\n-autocrlf=result.strip() == true if result is not None else False\n \n def report_error_name_no(name, no, s):\n     global err\n     print(\"%s:%d: %s\" % (name, no, s))\n-    err=1\n+    err = 1\n+\n \n def report_err(s):\n     report_error_name_no(fileinput.filename(), fileinput.filelineno(), s)\n \n+\n def report_warn(s):\n     print(\"%s:%d: %s\" % (fileinput.filename(),\n                          fileinput.filelineno(),\n                          s))\n \n+\n def do_license_check(name, contents):\n     if not check_license(name, contents):\n         report_error_name_no(name, 1, \"incorrect license\")\n@@ -81,13 +89,13 @@ def do_license_check(name, contents):\n                 date, rev = snapshot.curr_snapshot_rev()\n                 if not hsh.startswith(rev):\n                     report_err(\"snapshot out of date (\" + date\n-                      + \"): \" + line)\n+                               + \"): \" + line)\n             else:\n                 if \"SNAP\" in line:\n                     report_warn(\"unmatched SNAP line: \" + line)\n \n         if check_tab and ('\\t' in line and\n-            \"Makefile\" not in fileinput.filename()):\n+                          \"Makefile\" not in fileinput.filename()):\n             report_err(\"tab character\")\n         if check_cr and not autocrlf and '\\r' in line:\n             report_err(\"CR character\")"}]}