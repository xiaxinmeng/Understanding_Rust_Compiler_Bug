{"sha": "37ff4736c790f87ab957235c65e93ff8351daa80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZmY0NzM2Yzc5MGY4N2FiOTU3MjM1YzY1ZTkzZmY4MzUxZGFhODA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-03-19T17:01:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-03-19T17:04:09Z"}, "message": "wording nits", "tree": {"sha": "cf9939709e7eac0d3374209571f56bdb4f642c3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf9939709e7eac0d3374209571f56bdb4f642c3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ff4736c790f87ab957235c65e93ff8351daa80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ff4736c790f87ab957235c65e93ff8351daa80", "html_url": "https://github.com/rust-lang/rust/commit/37ff4736c790f87ab957235c65e93ff8351daa80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ff4736c790f87ab957235c65e93ff8351daa80/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e6d40a3fb1000d1105646703c60c9201f3ed5cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6d40a3fb1000d1105646703c60c9201f3ed5cc", "html_url": "https://github.com/rust-lang/rust/commit/0e6d40a3fb1000d1105646703c60c9201f3ed5cc"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "f6acc085861e630ffa0c73650a33637fadb5e65f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37ff4736c790f87ab957235c65e93ff8351daa80/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff4736c790f87ab957235c65e93ff8351daa80/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=37ff4736c790f87ab957235c65e93ff8351daa80", "patch": "@@ -1356,9 +1356,9 @@ impl TypeAliasBounds {\n \n     fn suggest_changing_assoc_types(ty: &hir::Ty, err: &mut DiagnosticBuilder) {\n         // Access to associates types should use `<T as Bound>::Assoc`, which does not need a\n-        // bound.  Let's see of this type does that.\n+        // bound.  Let's see if this type does that.\n \n-        // We use an AST visitor to walk the type.\n+        // We use a HIR visitor to walk the type.\n         use rustc::hir::intravisit::{self, Visitor};\n         use syntax::ast::NodeId;\n         struct WalkAssocTypes<'a, 'db> where 'db: 'a {\n@@ -1373,8 +1373,8 @@ impl TypeAliasBounds {\n             fn visit_qpath(&mut self, qpath: &'v hir::QPath, id: NodeId, span: Span) {\n                 if TypeAliasBounds::is_type_variable_assoc(qpath) {\n                     self.err.span_help(span,\n-                        \"use absolute paths (i.e., <T as Trait>::Assoc) to refer to associated \\\n-                         types in type aliases\");\n+                        \"use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to \\\n+                         associated types in type aliases\");\n                 }\n                 intravisit::walk_qpath(self, qpath, id, span)\n             }"}, {"sha": "2a2b0b0f26e3430ce3955c4d65e002445c80f237", "filename": "src/test/ui/type-alias-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37ff4736c790f87ab957235c65e93ff8351daa80/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ff4736c790f87ab957235c65e93ff8351daa80/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr?ref=37ff4736c790f87ab957235c65e93ff8351daa80", "patch": "@@ -46,7 +46,7 @@ LL | type T1<U: Bound> = U::Assoc; //~ WARN not enforced in type aliases\n    |            ^^^^^\n    |\n    = help: the bound will not be checked when the type alias is used, and should be removed\n-help: use absolute paths (i.e., <T as Trait>::Assoc) to refer to associated types in type aliases\n+help: use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to associated types in type aliases\n   --> $DIR/type-alias-bounds.rs:57:21\n    |\n LL | type T1<U: Bound> = U::Assoc; //~ WARN not enforced in type aliases\n@@ -59,7 +59,7 @@ LL | type T2<U> where U: Bound = U::Assoc;  //~ WARN not enforced in type aliase\n    |                  ^^^^^^^^\n    |\n    = help: the clause will not be checked when the type alias is used, and should be removed\n-help: use absolute paths (i.e., <T as Trait>::Assoc) to refer to associated types in type aliases\n+help: use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to associated types in type aliases\n   --> $DIR/type-alias-bounds.rs:58:29\n    |\n LL | type T2<U> where U: Bound = U::Assoc;  //~ WARN not enforced in type aliases"}]}