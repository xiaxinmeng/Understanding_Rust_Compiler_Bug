{"sha": "b73241aa5b0eab8aebf1600c598180bbd33be31c", "node_id": "C_kwDOAAsO6NoAKGI3MzI0MWFhNWIwZWFiOGFlYmYxNjAwYzU5ODE4MGJiZDMzYmUzMWM", "commit": {"author": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-09-30T15:16:59Z"}, "committer": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-09-30T15:16:59Z"}, "message": "Added more const_closure functionality.", "tree": {"sha": "a8ab003b577c19409da8077e8fdd4f061676a306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8ab003b577c19409da8077e8fdd4f061676a306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b73241aa5b0eab8aebf1600c598180bbd33be31c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b73241aa5b0eab8aebf1600c598180bbd33be31c", "html_url": "https://github.com/rust-lang/rust/commit/b73241aa5b0eab8aebf1600c598180bbd33be31c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b73241aa5b0eab8aebf1600c598180bbd33be31c/comments", "author": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f914b82a754c6d85c0a909ab152f5b611defef73", "url": "https://api.github.com/repos/rust-lang/rust/commits/f914b82a754c6d85c0a909ab152f5b611defef73", "html_url": "https://github.com/rust-lang/rust/commit/f914b82a754c6d85c0a909ab152f5b611defef73"}], "stats": {"total": 111, "additions": 62, "deletions": 49}, "files": [{"sha": "5033e744def0214cf0785fb91c2809c4a049295d", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b73241aa5b0eab8aebf1600c598180bbd33be31c/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73241aa5b0eab8aebf1600c598180bbd33be31c/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=b73241aa5b0eab8aebf1600c598180bbd33be31c", "patch": "@@ -1267,7 +1267,7 @@ where\n     {\n         f(v1).cmp(&f(v2))\n     }\n-    min_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n+    min_by(v1, v2, ConstFnMutClosure { data: &mut f, func: imp })\n }\n \n /// Compares and returns the maximum of two values.\n@@ -1352,7 +1352,7 @@ where\n     {\n         f(v1).cmp(&f(v2))\n     }\n-    max_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n+    max_by(v1, v2, ConstFnMutClosure { data: &mut f, func: imp })\n }\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types"}, {"sha": "23b3f87e72172faf4edf01b173e1ba6b2733a449", "filename": "library/core/src/const_closure.rs", "status": "modified", "additions": 38, "deletions": 41, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b73241aa5b0eab8aebf1600c598180bbd33be31c/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73241aa5b0eab8aebf1600c598180bbd33be31c/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=b73241aa5b0eab8aebf1600c598180bbd33be31c", "patch": "@@ -16,48 +16,45 @@ use crate::marker::Destruct;\n /// assert!(7 == cl(2));\n /// assert!(8 == cl(1));\n /// ```\n-pub(crate) struct ConstFnMutClosure<'a, CapturedData: ?Sized, Function> {\n-    data: &'a mut CapturedData,\n-    func: Function,\n+pub(crate) struct ConstFnMutClosure<CapturedData, Function> {\n+    /// The Data captured by the Closure.\n+    /// Must be either a (mutable) reference or a tuple of (mutable) references.\n+    pub data: CapturedData,\n+    /// The Function of the Closure, must be: Fn(CapturedData, ClosureArgs) -> ClosureReturn\n+    pub func: Function,\n }\n \n-impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<'a, CapturedData, Function> {\n-    /// Function for creating a new closure.\n-    ///\n-    /// `data` is the a mutable borrow of data that is captured from the environment.\n-    ///\n-    /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n-    ///   and return the return value of the closure.\n-    pub(crate) const fn new<ClosureArguments, ClosureReturnValue>(\n-        data: &'a mut CapturedData,\n-        func: Function,\n-    ) -> Self\n-    where\n-        Function: ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue,\n-    {\n-        Self { data, func }\n-    }\n-}\n-\n-impl<'a, CapturedData: ?Sized, ClosureArguments, Function, ClosureReturnValue> const\n-    FnOnce<ClosureArguments> for ConstFnMutClosure<'a, CapturedData, Function>\n-where\n-    Function:\n-        ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue + ~const Destruct,\n-{\n-    type Output = ClosureReturnValue;\n+macro_rules! impl_fn_mut_tuple {\n+    ($($var:ident)*) => {\n+      #[allow(unused_parens)]\n+      impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n+        FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+      where\n+        Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue+ ~const Destruct,\n+      {\n+        type Output = ClosureReturnValue;\n \n-    extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n-        self.call_mut(args)\n-    }\n-}\n+        extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n+          self.call_mut(args)\n+        }\n+      }\n+      #[allow(unused_parens)]\n+      impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n+        FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+      where\n+        Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue,\n+      {\n+        extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n+          #[allow(non_snake_case)]\n+          let ($($var),*) = &mut self.data;\n+          (self.func)(($($var),*), args)\n+        }\n+      }\n \n-impl<'a, CapturedData: ?Sized, ClosureArguments, Function, ClosureReturnValue> const\n-    FnMut<ClosureArguments> for ConstFnMutClosure<'a, CapturedData, Function>\n-where\n-    Function: ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue,\n-{\n-    extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n-        (self.func)(self.data, args)\n-    }\n-}\n+    };\n+  }\n+impl_fn_mut_tuple!(A);\n+impl_fn_mut_tuple!(A B);\n+impl_fn_mut_tuple!(A B C);\n+impl_fn_mut_tuple!(A B C D);\n+impl_fn_mut_tuple!(A B C D E);"}, {"sha": "02abce986cb387a4d112ddfcc17a26bf903b7296", "filename": "library/core/src/iter/adapters/array_chunks.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b73241aa5b0eab8aebf1600c598180bbd33be31c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73241aa5b0eab8aebf1600c598180bbd33be31c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs?ref=b73241aa5b0eab8aebf1600c598180bbd33be31c", "patch": "@@ -88,7 +88,11 @@ where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_fold(init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp)).0\n+        self.try_fold(\n+            init,\n+            ConstFnMutClosure { data: &mut f, func: NeverShortCircuit::wrap_mut_2_imp },\n+        )\n+        .0\n     }\n }\n \n@@ -132,7 +136,11 @@ where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_rfold(init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp)).0\n+        self.try_rfold(\n+            init,\n+            ConstFnMutClosure { data: &mut f, func: NeverShortCircuit::wrap_mut_2_imp },\n+        )\n+        .0\n     }\n }\n "}, {"sha": "f3b8cfdb47b37df1a7251cec654221baf1a6f3e6", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b73241aa5b0eab8aebf1600c598180bbd33be31c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73241aa5b0eab8aebf1600c598180bbd33be31c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=b73241aa5b0eab8aebf1600c598180bbd33be31c", "patch": "@@ -44,8 +44,12 @@ impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n         F: FnMut(B, Self::Item) -> B,\n     {\n         // `fold` needs ownership, so this can't forward directly.\n-        I::try_fold(self.0, init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp))\n-            .0\n+        I::try_fold(\n+            self.0,\n+            init,\n+            ConstFnMutClosure { data: &mut f, func: NeverShortCircuit::wrap_mut_2_imp },\n+        )\n+        .0\n     }\n \n     #[inline]\n@@ -84,7 +88,7 @@ impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n         I::try_rfold(\n             self.0,\n             init,\n-            ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp),\n+            ConstFnMutClosure { data: &mut f, func: NeverShortCircuit::wrap_mut_2_imp },\n         )\n         .0\n     }"}, {"sha": "8f8748feae42c7368d54fdbe41af3705c4f47148", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b73241aa5b0eab8aebf1600c598180bbd33be31c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73241aa5b0eab8aebf1600c598180bbd33be31c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=b73241aa5b0eab8aebf1600c598180bbd33be31c", "patch": "@@ -209,7 +209,11 @@ where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_fold(init, ConstFnMutClosure::new(&mut fold, NeverShortCircuit::wrap_mut_2_imp)).0\n+        self.try_fold(\n+            init,\n+            ConstFnMutClosure { data: &mut fold, func: NeverShortCircuit::wrap_mut_2_imp },\n+        )\n+        .0\n     }\n }\n "}]}