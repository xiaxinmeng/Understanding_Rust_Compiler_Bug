{"sha": "03a6e542126b755a9cd2f4f56144107ba0f4d1cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYTZlNTQyMTI2Yjc1NWE5Y2QyZjRmNTYxNDQxMDdiYTBmNGQxY2Q=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-07T14:28:57Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-07T14:28:57Z"}, "message": "Disallow binding by-mut-ref and by-move arguments\n\nFix bug in bound by-copy arguments.\n\nCloses #1261", "tree": {"sha": "3e939cd30c0c905760fc1827f8519bbc8acd976e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e939cd30c0c905760fc1827f8519bbc8acd976e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03a6e542126b755a9cd2f4f56144107ba0f4d1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03a6e542126b755a9cd2f4f56144107ba0f4d1cd", "html_url": "https://github.com/rust-lang/rust/commit/03a6e542126b755a9cd2f4f56144107ba0f4d1cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03a6e542126b755a9cd2f4f56144107ba0f4d1cd/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d28e0c0c0ae329705a063a025b853b292ff033a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d28e0c0c0ae329705a063a025b853b292ff033a7", "html_url": "https://github.com/rust-lang/rust/commit/d28e0c0c0ae329705a063a025b853b292ff033a7"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "63dadd347e1682649285a7e239f4b7868cc9031a", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/03a6e542126b755a9cd2f4f56144107ba0f4d1cd/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a6e542126b755a9cd2f4f56144107ba0f4d1cd/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=03a6e542126b755a9cd2f4f56144107ba0f4d1cd", "patch": "@@ -150,6 +150,7 @@ fn visit_decl(cx: @ctx, d: @decl, &&e: (), v: visit::vt<()>) {\n fn visit_expr(cx: @ctx, ex: @expr, &&e: (), v: visit::vt<()>) {\n     alt ex.node {\n       expr_call(f, args, _) { check_call(cx, f, args); }\n+      expr_bind(f, args) { check_bind(cx, f, args); }\n       expr_swap(lhs, rhs) {\n         check_lval(cx, lhs, msg_assign);\n         check_lval(cx, rhs, msg_assign);\n@@ -230,6 +231,30 @@ fn check_call(cx: @ctx, f: @expr, args: [@expr]) {\n     }\n }\n \n+fn check_bind(cx: @ctx, f: @expr, args: [option::t<@expr>]) {\n+    let arg_ts = ty::ty_fn_args(cx.tcx, ty::expr_ty(cx.tcx, f));\n+    let i = 0u;\n+    for arg in args {\n+        alt arg {\n+          some(expr) {\n+            alt (alt arg_ts[i].mode {\n+              by_mut_ref. { some(\"by mutable reference\") }\n+              by_move. { some(\"by move\") }\n+              _ { none }\n+            }) {\n+              some(name) {\n+                cx.tcx.sess.span_err(\n+                    expr.span, \"can not bind an argument passed \" + name);\n+              }\n+              none. {}\n+            }\n+          }\n+          _ {}\n+        }\n+        i += 1u;\n+    }\n+}\n+\n fn is_immutable_def(def: def) -> option::t<str> {\n     alt def {\n       def_fn(_, _) | def_mod(_) | def_native_mod(_) | def_const(_) |"}, {"sha": "107c53cfac37b51409aeef1fa7565c377f861f36", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03a6e542126b755a9cd2f4f56144107ba0f4d1cd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a6e542126b755a9cd2f4f56144107ba0f4d1cd/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=03a6e542126b755a9cd2f4f56144107ba0f4d1cd", "patch": "@@ -3462,6 +3462,12 @@ fn trans_bind_thunk(cx: @local_ctxt, sp: span, incoming_fty: ty::t,\n             bcx = bound_arg.bcx;\n             let val = bound_arg.val;\n             if out_arg.mode == ast::by_val { val = Load(bcx, val); }\n+            if out_arg.mode == ast::by_copy {\n+                let {bcx: cx, val: alloc} = alloc_ty(bcx, out_arg.ty);\n+                bcx = memmove_ty(cx, alloc, val, out_arg.ty);\n+                bcx = take_ty(bcx, alloc, out_arg.ty);\n+                val = alloc;\n+            }\n             // If the type is parameterized, then we need to cast the\n             // type we actually have to the parameterized out type.\n             if ty::type_contains_params(cx.ccx.tcx, out_arg.ty) {"}, {"sha": "3e396d3ac63c5b86ec93576e36d467c0f8c46b59", "filename": "src/libstd/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a6e542126b755a9cd2f4f56144107ba0f4d1cd/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a6e542126b755a9cd2f4f56144107ba0f4d1cd/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=03a6e542126b755a9cd2f4f56144107ba0f4d1cd", "patch": "@@ -288,7 +288,7 @@ fn spawn_inner<send T>(-data: T, f: fn(T),\n                           notify: option<comm::chan<task_notification>>)\n     -> task unsafe {\n \n-    fn wrapper<send T>(-data: *u8, f: fn(T)) unsafe {\n+    fn wrapper<send T>(data: *u8, f: fn(T)) unsafe {\n         let data: ~T = unsafe::reinterpret_cast(data);\n         f(*data);\n     }"}, {"sha": "d030971363352cbdc4af50ca8eedad32b57d7785", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/03a6e542126b755a9cd2f4f56144107ba0f4d1cd/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a6e542126b755a9cd2f4f56144107ba0f4d1cd/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=03a6e542126b755a9cd2f4f56144107ba0f4d1cd", "patch": "@@ -112,29 +112,29 @@ mod map_reduce {\n \n         send(out, chan(p));\n \n-        let ref_count = 0;\n-        let is_done = false;\n+        let state = @{mutable ref_count: 0, mutable is_done: false};\n \n-        fn get(p: port<reduce_proto>, &ref_count: int, &is_done: bool) ->\n-           option<int> {\n-            while !is_done || ref_count > 0 {\n+        fn get(p: port<reduce_proto>, state: @{mutable ref_count: int,\n+                                               mutable is_done: bool})\n+            -> option<int> {\n+            while !state.is_done || state.ref_count > 0 {\n                 alt recv(p) {\n                   emit_val(v) {\n                     // log_err #fmt(\"received %d\", v);\n                     ret some(v);\n                   }\n                   done. {\n                     // log_err \"all done\";\n-                    is_done = true;\n+                    state.is_done = true;\n                   }\n-                  ref. { ref_count += 1; }\n-                  release. { ref_count -= 1; }\n+                  ref. { state.ref_count += 1; }\n+                  release. { state.ref_count -= 1; }\n                 }\n             }\n             ret none;\n         }\n \n-        reduce(key, bind get(p, ref_count, is_done));\n+        reduce(key, bind get(p, state));\n     }\n \n     fn map_reduce(-inputs: [str]) {"}, {"sha": "2fba1ebb1961528148faf770f5ecd3d271be0702", "filename": "src/test/stdtest/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a6e542126b755a9cd2f4f56144107ba0f4d1cd/src%2Ftest%2Fstdtest%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a6e542126b755a9cd2f4f56144107ba0f4d1cd/src%2Ftest%2Fstdtest%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftreemap.rs?ref=03a6e542126b755a9cd2f4f56144107ba0f4d1cd", "patch": "@@ -39,8 +39,8 @@ fn traverse_in_order() {\n     insert(m, 2, ());\n     insert(m, 1, ());\n \n-    let n = 0;\n-    fn t(&n: int, &&k: int, &&_v: ()) { assert (n == k); n += 1; }\n+    let n = @mutable 0;\n+    fn t(n: @mutable int, &&k: int, &&_v: ()) { assert (*n == k); *n += 1; }\n     traverse(m, bind t(n, _, _));\n }\n "}]}