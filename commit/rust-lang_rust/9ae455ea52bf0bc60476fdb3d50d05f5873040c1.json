{"sha": "9ae455ea52bf0bc60476fdb3d50d05f5873040c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZTQ1NWVhNTJiZjBiYzYwNDc2ZmRiM2Q1MGQwNWY1ODczMDQwYzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-05T19:36:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-06T11:21:11Z"}, "message": "make source_root API more abstract", "tree": {"sha": "5f5adc8ffd4c29d104e646057f636def67ac2549", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f5adc8ffd4c29d104e646057f636def67ac2549"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ae455ea52bf0bc60476fdb3d50d05f5873040c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae455ea52bf0bc60476fdb3d50d05f5873040c1", "html_url": "https://github.com/rust-lang/rust/commit/9ae455ea52bf0bc60476fdb3d50d05f5873040c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bdb456d17660f3460bbf2c38315568b2f76aaa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdb456d17660f3460bbf2c38315568b2f76aaa5", "html_url": "https://github.com/rust-lang/rust/commit/3bdb456d17660f3460bbf2c38315568b2f76aaa5"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "01b96ec5869335ed89bb04122d8035903488e089", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=9ae455ea52bf0bc60476fdb3d50d05f5873040c1", "patch": "@@ -34,10 +34,11 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n             .iter()\n             .find_map(|(source_root_id, project_root)| {\n                 if project_root.is_member() {\n-                    for (rel_path, file_id) in &db.source_root(*source_root_id).files {\n+                    for file_id in db.source_root(*source_root_id).walk() {\n+                        let rel_path = db.file_relative_path(file_id);\n                         let abs_path = rel_path.to_path(project_root.path());\n                         if abs_path == path {\n-                            return Some(*file_id);\n+                            return Some(file_id);\n                         }\n                     }\n                 }"}, {"sha": "d1ee3c03680387be5a53a1cee325ce565d97c437", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=9ae455ea52bf0bc60476fdb3d50d05f5873040c1", "patch": "@@ -5,7 +5,7 @@\n /// Note that neither this module, nor any other part of the analyzer's core do\n /// actual IO. See `vfs` and `project_model` in the `ra_lsp_server` crate for how\n /// actual IO is done and lowered to input.\n-use relative_path::RelativePathBuf;\n+use relative_path::{RelativePath, RelativePathBuf};\n use rustc_hash::FxHashMap;\n \n use ra_syntax::SmolStr;\n@@ -36,7 +36,7 @@ pub struct SourceRoot {\n     /// Libraries are considered mostly immutable, this assumption is used to\n     /// optimize salsa's query structure\n     pub is_library: bool,\n-    pub files: FxHashMap<RelativePathBuf, FileId>,\n+    files: FxHashMap<RelativePathBuf, FileId>,\n }\n \n impl SourceRoot {\n@@ -46,6 +46,18 @@ impl SourceRoot {\n     pub fn new_library() -> SourceRoot {\n         SourceRoot { is_library: true, ..SourceRoot::new() }\n     }\n+    pub fn file_by_relative_path(&self, path: &RelativePath) -> Option<FileId> {\n+        self.files.get(path).copied()\n+    }\n+    pub fn insert_file(&mut self, path: RelativePathBuf, file_id: FileId) {\n+        self.files.insert(path, file_id);\n+    }\n+    pub fn remove_file(&mut self, path: &RelativePath) {\n+        self.files.remove(path);\n+    }\n+    pub fn walk(&self) -> impl Iterator<Item = FileId> + '_ {\n+        self.files.values().copied()\n+    }\n }\n \n /// `CrateGraph` is a bit of information which turns a set of text files into a"}, {"sha": "c54791b7ae08aae50466f8e4fbbc51fcd6ea75c4", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=9ae455ea52bf0bc60476fdb3d50d05f5873040c1", "patch": "@@ -12,7 +12,7 @@ pub use crate::{\n     cancellation::Canceled,\n     input::{CrateGraph, CrateId, Dependency, Edition, FileId, SourceRoot, SourceRootId},\n };\n-pub use ::salsa;\n+pub use salsa;\n \n pub trait CheckCanceled {\n     /// Aborts current query if there are pending changes.\n@@ -93,8 +93,7 @@ pub trait SourceDatabase: CheckCanceled + std::fmt::Debug {\n fn source_root_crates(db: &impl SourceDatabase, id: SourceRootId) -> Arc<Vec<CrateId>> {\n     let root = db.source_root(id);\n     let graph = db.crate_graph();\n-    let res =\n-        root.files.values().filter_map(|&it| graph.crate_id_for_crate_root(it)).collect::<Vec<_>>();\n+    let res = root.walk().filter_map(|it| graph.crate_id_for_crate_root(it)).collect::<Vec<_>>();\n     Arc::new(res)\n }\n "}, {"sha": "972f0ece59a488540c79a3ffb58ade89a2f54eda", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=9ae455ea52bf0bc60476fdb3d50d05f5873040c1", "patch": "@@ -157,7 +157,7 @@ impl MockDatabase {\n         self.set_file_text(file_id, text);\n         self.set_file_relative_path(file_id, rel_path.clone());\n         self.set_file_source_root(file_id, source_root_id);\n-        source_root.files.insert(rel_path, file_id);\n+        source_root.insert_file(rel_path, file_id);\n \n         if is_crate_root {\n             let mut crate_graph = CrateGraph::default();"}, {"sha": "de81fd422f340aeca0777e7e071e88c19f7b6b04", "filename": "crates/ra_hir/src/nameres/mod_resolution.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=9ae455ea52bf0bc60476fdb3d50d05f5873040c1", "patch": "@@ -120,10 +120,12 @@ enum OutOfLineMode {\n impl OutOfLineMode {\n     pub fn resolve(&self, source_root: Arc<SourceRoot>) -> Result<FileId, RelativePathBuf> {\n         match self {\n-            OutOfLineMode::RootOrModRs { file, directory } => match source_root.files.get(file) {\n-                None => resolve_simple_path(source_root, directory).map_err(|_| file.clone()),\n-                file_id => resolve_find_result(file_id, file),\n-            },\n+            OutOfLineMode::RootOrModRs { file, directory } => {\n+                match source_root.file_by_relative_path(file) {\n+                    None => resolve_simple_path(source_root, directory).map_err(|_| file.clone()),\n+                    file_id => resolve_find_result(file_id, file),\n+                }\n+            }\n             OutOfLineMode::FileInDirectory(path) => resolve_simple_path(source_root, path),\n             OutOfLineMode::WithAttributePath(path) => resolve_simple_path(source_root, path),\n         }\n@@ -168,11 +170,11 @@ fn resolve_simple_path(\n     source_root: Arc<SourceRoot>,\n     path: &RelativePathBuf,\n ) -> Result<FileId, RelativePathBuf> {\n-    resolve_find_result(source_root.files.get(path), path)\n+    resolve_find_result(source_root.file_by_relative_path(path), path)\n }\n \n fn resolve_find_result(\n-    file_id: Option<&FileId>,\n+    file_id: Option<FileId>,\n     path: &RelativePathBuf,\n ) -> Result<FileId, RelativePathBuf> {\n     match file_id {"}, {"sha": "89631935af2a33338ac500e5d7048b0e4c5f371d", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=9ae455ea52bf0bc60476fdb3d50d05f5873040c1", "patch": "@@ -213,11 +213,11 @@ impl RootDatabase {\n                 durability,\n             );\n             self.set_file_source_root_with_durability(add_file.file_id, root_id, durability);\n-            source_root.files.insert(add_file.path, add_file.file_id);\n+            source_root.insert_file(add_file.path, add_file.file_id);\n         }\n         for remove_file in root_change.removed {\n             self.set_file_text_with_durability(remove_file.file_id, Default::default(), durability);\n-            source_root.files.remove(&remove_file.path);\n+            source_root.remove_file(&remove_file.path);\n         }\n         self.set_source_root_with_durability(root_id, Arc::new(source_root), durability);\n     }"}, {"sha": "a5729c36887319109d2ed6da3dfc826ca270c8af", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae455ea52bf0bc60476fdb3d50d05f5873040c1/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=9ae455ea52bf0bc60476fdb3d50d05f5873040c1", "patch": "@@ -87,7 +87,7 @@ pub(crate) fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol>\n         let mut files = Vec::new();\n         for &root in db.local_roots().iter() {\n             let sr = db.source_root(root);\n-            files.extend(sr.files.values().copied())\n+            files.extend(sr.walk())\n         }\n \n         let snap = Snap(db.snapshot());"}]}