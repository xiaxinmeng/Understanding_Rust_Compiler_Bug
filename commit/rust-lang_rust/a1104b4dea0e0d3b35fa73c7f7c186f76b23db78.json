{"sha": "a1104b4dea0e0d3b35fa73c7f7c186f76b23db78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMTA0YjRkZWEwZTBkM2IzNWZhNzNjN2Y3YzE4NmY3NmIyM2RiNzg=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-10T14:34:20Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-11T06:06:57Z"}, "message": "bless ui tests", "tree": {"sha": "0e34fd78ad974874003fbea58a8f71fed0810123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e34fd78ad974874003fbea58a8f71fed0810123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78", "html_url": "https://github.com/rust-lang/rust/commit/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e64f54c86a05ddd09fc3da4e98a8d748658337", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e64f54c86a05ddd09fc3da4e98a8d748658337", "html_url": "https://github.com/rust-lang/rust/commit/c7e64f54c86a05ddd09fc3da4e98a8d748658337"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "53f72804a848d551b5227d4bfe49f70bdb7bf653", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=a1104b4dea0e0d3b35fa73c7f7c186f76b23db78", "patch": "@@ -194,6 +194,7 @@ language_item_table! {\n     ShrAssignTraitLangItem,      \"shr_assign\",         shr_assign_trait,        Target::Trait;\n     IndexTraitLangItem,          \"index\",              index_trait,             Target::Trait;\n     IndexMutTraitLangItem,       \"index_mut\",          index_mut_trait,         Target::Trait;\n+\n     UnsafeCellTypeLangItem,      \"unsafe_cell\",        unsafe_cell_type,        Target::Struct;\n     VaListTypeLangItem,          \"va_list\",            va_list,                 Target::Struct;\n "}, {"sha": "a3f8cd1ee36fe13732c91fc7d60646eec63a0851", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=a1104b4dea0e0d3b35fa73c7f7c186f76b23db78", "patch": "@@ -390,11 +390,7 @@ impl<'hir> Map<'hir> {\n     /// Given a `HirId`, returns the `BodyId` associated with it,\n     /// if the node is a body owner, otherwise returns `None`.\n     pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {\n-        if let Some(node) = self.find(hir_id) {\n-            associated_body(node)\n-        } else {\n-            bug!(\"no entry for id `{}`\", hir_id)\n-        }\n+        if let Some(node) = self.find(hir_id) { associated_body(node) } else { None }\n     }\n \n     /// Given a body owner's id, returns the `BodyId` associated with it."}, {"sha": "5e3b383ff2580bdd2a0a25da8fea596ea042c31e", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a1104b4dea0e0d3b35fa73c7f7c186f76b23db78", "patch": "@@ -1791,6 +1791,19 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let body_hir_id = obligation.cause.body_id;\n         let item_id = self.tcx.hir().get_parent_node(body_hir_id);\n \n+        let mut is_future = false;\n+        if let ty::Opaque(def_id, substs) = trait_ref.self_ty().kind {\n+            let preds = self.tcx.predicates_of(def_id).instantiate(self.tcx, substs);\n+            for p in preds.predicates {\n+                if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n+                    if Some(trait_ref.def_id()) == self.tcx.lang_items().future_trait() {\n+                        is_future = true;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n         if let Some(body_id) = self.tcx.hir().maybe_body_owned_by(item_id) {\n             let body = self.tcx.hir().body(body_id);\n             if let Some(hir::GeneratorKind::Async(_)) = body.generator_kind {\n@@ -1802,6 +1815,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     .next()\n                     .unwrap()\n                     .def_id;\n+                debug!(\"trait_ref_self_ty: {:?}\", trait_ref.self_ty());\n                 // `<T as Future>::Output`\n                 let projection_ty = ty::ProjectionTy {\n                     // `T`\n@@ -1813,7 +1827,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     item_def_id,\n                 };\n \n-                //let cause = ObligationCause::misc(span, body_hir_id);\n                 let mut selcx = SelectionContext::new(self);\n \n                 let mut obligations = vec![];\n@@ -1826,15 +1839,18 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     &mut obligations,\n                 );\n \n-                debug!(\"suggest_await_befor_try: normalized_projection_type {:?}\", normalized_ty);\n+                debug!(\n+                    \"suggest_await_befor_try: normalized_projection_type {:?}\",\n+                    self.resolve_vars_if_possible(&normalized_ty)\n+                );\n                 let try_obligation = self.mk_obligation_for_def_id(\n                     trait_ref.def_id(),\n                     normalized_ty,\n                     obligation.cause.clone(),\n                     obligation.param_env,\n                 );\n                 debug!(\"suggest_await_befor_try: try_trait_obligation {:?}\", try_obligation);\n-                if self.predicate_may_hold(&try_obligation) {\n+                if self.predicate_may_hold(&try_obligation) && is_future {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                         if snippet.ends_with('?') {\n                             err.span_suggestion("}, {"sha": "96158fc0e0496c3d76567aa2bed84aa9530e311d", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=a1104b4dea0e0d3b35fa73c7f7c186f76b23db78", "patch": "@@ -237,7 +237,10 @@ error[E0277]: the `?` operator can only be applied to values that implement `std\n   --> $DIR/incorrect-syntax-suggestions.rs:16:19\n    |\n LL |     let _ = await bar()?;\n-   |                   ^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future`\n+   |                   ^^^^^^\n+   |                   |\n+   |                   the `?` operator cannot be applied to type `impl std::future::Future`\n+   |                   help: consider using `.await` here: `bar().await?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n    = note: required by `std::ops::Try::into_result`"}, {"sha": "04a9148ae2413ed9b4f40ed7cb3be1a463a1e135", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=a1104b4dea0e0d3b35fa73c7f7c186f76b23db78", "patch": "@@ -5,7 +5,7 @@ async fn foo() -> Result<(), ()> {\n }\n \n async fn bar() -> Result<(), ()> {\n-    foo()?;\n+    foo()?; //~ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n     Ok(())\n }\n "}, {"sha": "fb1eead04e6bd507a1daed726e47b5f150edc9c0", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1104b4dea0e0d3b35fa73c7f7c186f76b23db78/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=a1104b4dea0e0d3b35fa73c7f7c186f76b23db78", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/issue-61076.rs:8:5\n+   |\n+LL |     foo()?;\n+   |     ^^^^^^\n+   |     |\n+   |     the `?` operator cannot be applied to type `impl std::future::Future`\n+   |     help: consider using `.await` here: `foo().await?`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}