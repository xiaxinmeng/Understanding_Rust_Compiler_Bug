{"sha": "479968b81259ee7bfd3897cb192ff61b59fb8a8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OTk2OGI4MTI1OWVlN2JmZDM4OTdjYjE5MmZmNjFiNTlmYjhhOGY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-07T10:45:15Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T09:05:05Z"}, "message": "explicitly handle errors in `select`", "tree": {"sha": "6b61a6b6acfb2320302dcb50229693dd8f4d1b0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b61a6b6acfb2320302dcb50229693dd8f4d1b0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/479968b81259ee7bfd3897cb192ff61b59fb8a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/479968b81259ee7bfd3897cb192ff61b59fb8a8f", "html_url": "https://github.com/rust-lang/rust/commit/479968b81259ee7bfd3897cb192ff61b59fb8a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/479968b81259ee7bfd3897cb192ff61b59fb8a8f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e873eef1e37eb45bdafda02ad4a3a4d599cee401", "url": "https://api.github.com/repos/rust-lang/rust/commits/e873eef1e37eb45bdafda02ad4a3a4d599cee401", "html_url": "https://github.com/rust-lang/rust/commit/e873eef1e37eb45bdafda02ad4a3a4d599cee401"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "70c6cbef102c53c1da1532c22b2b548b9a9870b7", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/479968b81259ee7bfd3897cb192ff61b59fb8a8f/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479968b81259ee7bfd3897cb192ff61b59fb8a8f/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=479968b81259ee7bfd3897cb192ff61b59fb8a8f", "patch": "@@ -38,6 +38,7 @@ use crate::traits::project::ProjectionCacheKeyExt;\n use rustc_ast::attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items;\n@@ -514,17 +515,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 let evaluate = |c: &'tcx ty::Const<'tcx>| {\n                     if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n-                        match self.infcx.const_eval_resolve(\n-                            obligation.param_env,\n-                            def_id,\n-                            substs,\n-                            promoted,\n-                            Some(obligation.cause.span),\n-                        ) {\n-                            Ok(val) => Ok(ty::Const::from_value(self.tcx(), val, c.ty)),\n-                            Err(ErrorHandled::TooGeneric) => Err(EvaluatedToAmbig),\n-                            Err(_) => Err(EvaluatedToErr),\n-                        }\n+                        self.infcx\n+                            .const_eval_resolve(\n+                                obligation.param_env,\n+                                def_id,\n+                                substs,\n+                                promoted,\n+                                Some(obligation.cause.span),\n+                            )\n+                            .map(|val| ty::Const::from_value(self.tcx(), val, c.ty))\n                     } else {\n                         Ok(c)\n                     }\n@@ -537,8 +536,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             Err(_) => Ok(EvaluatedToErr),\n                         }\n                     }\n-                    (Err(EvaluatedToErr), _) | (_, Err(EvaluatedToErr)) => Ok(EvaluatedToErr),\n-                    _ => Ok(EvaluatedToAmbig),\n+                    (Err(ErrorHandled::Reported(ErrorReported)), _)\n+                    | (_, Err(ErrorHandled::Reported(ErrorReported))) => Ok(EvaluatedToErr),\n+                    (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => span_bug!(\n+                        obligation.cause.span(self.tcx()),\n+                        \"ConstEquate: const_eval_resolve returned an unexpected error\"\n+                    ),\n+                    (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {\n+                        Ok(EvaluatedToAmbig)\n+                    }\n                 }\n             }\n         }"}]}