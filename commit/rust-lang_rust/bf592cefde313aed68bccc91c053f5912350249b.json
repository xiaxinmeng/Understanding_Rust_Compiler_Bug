{"sha": "bf592cefde313aed68bccc91c053f5912350249b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNTkyY2VmZGUzMTNhZWQ2OGJjY2M5MWMwNTNmNTkxMjM1MDI0OWI=", "commit": {"author": {"name": "Thomas Garcia", "email": "thomasjgarcia1@gmail.com", "date": "2016-08-05T04:33:57Z"}, "committer": {"name": "Thomas Garcia", "email": "thomasjgarcia1@gmail.com", "date": "2016-08-05T04:33:57Z"}, "message": "Made vec_deque::Drain, hash_map::Drain, and hash_set::Drain covariant", "tree": {"sha": "a534f69b0d36c59304f2271f310498b00ee7a6ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a534f69b0d36c59304f2271f310498b00ee7a6ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf592cefde313aed68bccc91c053f5912350249b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf592cefde313aed68bccc91c053f5912350249b", "html_url": "https://github.com/rust-lang/rust/commit/bf592cefde313aed68bccc91c053f5912350249b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf592cefde313aed68bccc91c053f5912350249b/comments", "author": {"login": "tomgarcia", "id": 8011577, "node_id": "MDQ6VXNlcjgwMTE1Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/8011577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomgarcia", "html_url": "https://github.com/tomgarcia", "followers_url": "https://api.github.com/users/tomgarcia/followers", "following_url": "https://api.github.com/users/tomgarcia/following{/other_user}", "gists_url": "https://api.github.com/users/tomgarcia/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomgarcia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomgarcia/subscriptions", "organizations_url": "https://api.github.com/users/tomgarcia/orgs", "repos_url": "https://api.github.com/users/tomgarcia/repos", "events_url": "https://api.github.com/users/tomgarcia/events{/privacy}", "received_events_url": "https://api.github.com/users/tomgarcia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomgarcia", "id": 8011577, "node_id": "MDQ6VXNlcjgwMTE1Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/8011577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomgarcia", "html_url": "https://github.com/tomgarcia", "followers_url": "https://api.github.com/users/tomgarcia/followers", "following_url": "https://api.github.com/users/tomgarcia/following{/other_user}", "gists_url": "https://api.github.com/users/tomgarcia/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomgarcia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomgarcia/subscriptions", "organizations_url": "https://api.github.com/users/tomgarcia/orgs", "repos_url": "https://api.github.com/users/tomgarcia/repos", "events_url": "https://api.github.com/users/tomgarcia/events{/privacy}", "received_events_url": "https://api.github.com/users/tomgarcia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40f3ee2a01ef24d57430726c098de905c7c6e04a", "url": "https://api.github.com/repos/rust-lang/rust/commits/40f3ee2a01ef24d57430726c098de905c7c6e04a", "html_url": "https://github.com/rust-lang/rust/commit/40f3ee2a01ef24d57430726c098de905c7c6e04a"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "812a67a7e78edd9107145e3dddbadc4670ee7ab3", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bf592cefde313aed68bccc91c053f5912350249b/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf592cefde313aed68bccc91c053f5912350249b/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=bf592cefde313aed68bccc91c053f5912350249b", "patch": "@@ -24,6 +24,7 @@ use core::iter::{repeat, FromIterator};\n use core::mem;\n use core::ops::{Index, IndexMut};\n use core::ptr;\n+use core::ptr::Shared;\n use core::slice;\n \n use core::hash::{Hash, Hasher};\n@@ -903,7 +904,7 @@ impl<T> VecDeque<T> {\n         self.head = drain_tail;\n \n         Drain {\n-            deque: self as *mut _,\n+            deque: unsafe { Shared::new(self as *mut _) },\n             after_tail: drain_head,\n             after_head: head,\n             iter: Iter {\n@@ -1985,7 +1986,7 @@ pub struct Drain<'a, T: 'a> {\n     after_tail: usize,\n     after_head: usize,\n     iter: Iter<'a, T>,\n-    deque: *mut VecDeque<T>,\n+    deque: Shared<VecDeque<T>>,\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n@@ -1998,7 +1999,7 @@ impl<'a, T: 'a> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n         for _ in self.by_ref() {}\n \n-        let source_deque = unsafe { &mut *self.deque };\n+        let source_deque = unsafe { &mut **self.deque };\n \n         // T = source_deque_tail; H = source_deque_head; t = drain_tail; h = drain_head\n         //"}, {"sha": "5e8633a9748246b38ad7fe66b4194ff86d912ac5", "filename": "src/libcollectionstest/vec_deque.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf592cefde313aed68bccc91c053f5912350249b/src%2Flibcollectionstest%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf592cefde313aed68bccc91c053f5912350249b/src%2Flibcollectionstest%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec_deque.rs?ref=bf592cefde313aed68bccc91c053f5912350249b", "patch": "@@ -10,6 +10,7 @@\n \n use std::collections::VecDeque;\n use std::fmt::Debug;\n+use std::collections::vec_deque::Drain;\n \n use test;\n \n@@ -999,3 +1000,8 @@ fn test_contains() {\n \n     assert!(!v.contains(&3));\n }\n+\n+#[allow(dead_code)]\n+fn assert_covariance() {\n+    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> { d }\n+}"}, {"sha": "e30cf638c6d38568dd5f2a12d30feaa0edd93cc9", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf592cefde313aed68bccc91c053f5912350249b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf592cefde313aed68bccc91c053f5912350249b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=bf592cefde313aed68bccc91c053f5912350249b", "patch": "@@ -2036,6 +2036,8 @@ fn assert_covariance() {\n     fn keys_val<'a, 'new>(v: Keys<'a, u8, &'static str>) -> Keys<'a, u8, &'new str> { v }\n     fn values_key<'a, 'new>(v: Values<'a, &'static str, u8>) -> Values<'a, &'new str, u8> { v }\n     fn values_val<'a, 'new>(v: Values<'a, u8, &'static str>) -> Values<'a, u8, &'new str> { v }\n+    fn drain<'new>(d: Drain<'static, &'static str, &'static str>)\n+        -> Drain<'new, &'new str, &'new str> { d }\n }\n \n #[cfg(test)]"}, {"sha": "837c5d8b8e18cfc9fabc4a1c611dd27eacf7cfad", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf592cefde313aed68bccc91c053f5912350249b/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf592cefde313aed68bccc91c053f5912350249b/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=bf592cefde313aed68bccc91c053f5912350249b", "patch": "@@ -1036,6 +1036,7 @@ fn assert_covariance() {\n         -> Intersection<'a, &'new str, RandomState> { v }\n     fn union<'a, 'new>(v: Union<'a, &'static str, RandomState>)\n         -> Union<'a, &'new str, RandomState> { v }\n+    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> { d }\n }\n \n #[cfg(test)]"}, {"sha": "02931e5e3890de5559348daaf5c4f8b814998570", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf592cefde313aed68bccc91c053f5912350249b/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf592cefde313aed68bccc91c053f5912350249b/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=bf592cefde313aed68bccc91c053f5912350249b", "patch": "@@ -17,7 +17,7 @@ use marker;\n use mem::{align_of, size_of};\n use mem;\n use ops::{Deref, DerefMut};\n-use ptr::{self, Unique};\n+use ptr::{self, Unique, Shared};\n \n use self::BucketState::*;\n \n@@ -754,7 +754,8 @@ impl<K, V> RawTable<K, V> {\n                 hashes_end: hashes_end,\n                 marker: marker::PhantomData,\n             },\n-            table: self,\n+            table: unsafe { Shared::new(self) },\n+            marker: marker::PhantomData,\n         }\n     }\n \n@@ -897,8 +898,9 @@ unsafe impl<K: Send, V: Send> Send for IntoIter<K, V> {}\n \n /// Iterator over the entries in a table, clearing the table.\n pub struct Drain<'a, K: 'a, V: 'a> {\n-    table: &'a mut RawTable<K, V>,\n+    table: Shared<RawTable<K, V>>,\n     iter: RawBuckets<'static, K, V>,\n+    marker: marker::PhantomData<&'a RawTable<K, V>>,\n }\n \n unsafe impl<'a, K: Sync, V: Sync> Sync for Drain<'a, K, V> {}\n@@ -973,8 +975,8 @@ impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     #[inline]\n     fn next(&mut self) -> Option<(SafeHash, K, V)> {\n         self.iter.next().map(|bucket| {\n-            self.table.size -= 1;\n             unsafe {\n+                (**self.table).size -= 1;\n                 (SafeHash { hash: ptr::replace(bucket.hash, EMPTY_BUCKET) },\n                  ptr::read(bucket.key),\n                  ptr::read(bucket.val))\n@@ -983,13 +985,15 @@ impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let size = self.table.size();\n+        let size = unsafe { (**self.table).size() };\n         (size, Some(size))\n     }\n }\n impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n     fn len(&self) -> usize {\n-        self.table.size()\n+        unsafe {\n+            (**self.table).size()\n+        }\n     }\n }\n "}]}