{"sha": "9c3b66cff74f3a21dc735294f3df319a38bc2114", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljM2I2NmNmZjc0ZjNhMjFkYzczNTI5NGYzZGYzMTlhMzhiYzIxMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T23:51:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T23:51:33Z"}, "message": "Auto merge of #84206 - Dylan-DPC:rollup-knl2jgq, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #82492 (Move `std::sys_common::alloc` to new module `std::sys::common`)\n - #84177 (Fix join_paths error display.)\n - #84185 (add more pat2021 tests)\n - #84191 (Update books)\n - #84192 (Fix typos in rustc_codegen_ssa/src/back/write.rs.)\n - #84196 (:arrow_up: rust-analyzer)\n - #84201 (rustdoc: Note that forbidding anchors in links to primitives is a bug)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "33ddf152c6c621450214e765b0c6a05dc360e819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33ddf152c6c621450214e765b0c6a05dc360e819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c3b66cff74f3a21dc735294f3df319a38bc2114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3b66cff74f3a21dc735294f3df319a38bc2114", "html_url": "https://github.com/rust-lang/rust/commit/9c3b66cff74f3a21dc735294f3df319a38bc2114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c3b66cff74f3a21dc735294f3df319a38bc2114/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16bf626a31cb5b121d0bca2baa969b4f67eb0dab", "url": "https://api.github.com/repos/rust-lang/rust/commits/16bf626a31cb5b121d0bca2baa969b4f67eb0dab", "html_url": "https://github.com/rust-lang/rust/commit/16bf626a31cb5b121d0bca2baa969b4f67eb0dab"}, {"sha": "f4549d2ee0ddd254f18cb07beb599d74e8221b44", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4549d2ee0ddd254f18cb07beb599d74e8221b44", "html_url": "https://github.com/rust-lang/rust/commit/f4549d2ee0ddd254f18cb07beb599d74e8221b44"}], "stats": {"total": 170, "additions": 153, "deletions": 17}, "files": [{"sha": "c8688faa80bc394667a22171f6bd9dc506fcf053", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -1094,7 +1094,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     //   only place where we have access to the compiler `Session`.\n     // - LLVM work can be done on any thread.\n     // - Codegen can only happen on the main thread.\n-    // - Each thread doing substantial work most be in possession of a `Token`\n+    // - Each thread doing substantial work must be in possession of a `Token`\n     //   from the `Jobserver`.\n     // - The compiler process always holds one `Token`. Any additional `Tokens`\n     //   have to be requested from the `Jobserver`.\n@@ -1146,7 +1146,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     // if possible. These two goals are at odds with each other: If memory\n     // consumption were not an issue, we could just let the main thread produce\n     // LLVM WorkItems at full speed, assuring maximal utilization of\n-    // Tokens/LLVM worker threads. However, since codegen usual is faster\n+    // Tokens/LLVM worker threads. However, since codegen is usually faster\n     // than LLVM processing, the queue of LLVM WorkItems would fill up and each\n     // WorkItem potentially holds on to a substantial amount of memory.\n     //"}, {"sha": "2a54e99020e38f1bd673e1a4d2c5106aaf7ba0a9", "filename": "library/std/src/sys/common/alloc.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -1,5 +1,3 @@\n-#![allow(dead_code)]\n-\n use crate::alloc::{GlobalAlloc, Layout, System};\n use crate::cmp;\n use crate::ptr;", "previous_filename": "library/std/src/sys_common/alloc.rs"}, {"sha": "ff64d2aa8251533488276c6f98e82ee009f4dfd6", "filename": "library/std/src/sys/common/mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fmod.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -0,0 +1,13 @@\n+// This module contains code that is shared between all platforms, mostly utility or fallback code.\n+// This explicitly does not include code that is shared between only a few platforms,\n+// such as when reusing an implementation from `unix` or `unsupported`.\n+// In those cases the desired code should be included directly using the #[path] attribute,\n+// not moved to this module.\n+//\n+// Currently `sys_common` contains a lot of code that should live in this module,\n+// ideally `sys_common` would only contain platform-independent abstractions on top of `sys`.\n+// Progress on this is tracked in #84187.\n+\n+#![allow(dead_code)]\n+\n+pub mod alloc;"}, {"sha": "50c2660ebcf1f3e2ac6b775f3585f61565da2c6a", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -22,6 +22,8 @@\n \n #![allow(missing_debug_implementations)]\n \n+mod common;\n+\n cfg_if::cfg_if! {\n     if #[cfg(target_os = \"vxworks\")] {\n         mod vxworks;"}, {"sha": "1b71905aa09b77b448cb6cb433fd2cfa54d82b52", "filename": "library/std/src/sys/unix/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -1,6 +1,6 @@\n use crate::alloc::{GlobalAlloc, Layout, System};\n use crate::ptr;\n-use crate::sys_common::alloc::{realloc_fallback, MIN_ALIGN};\n+use crate::sys::common::alloc::{realloc_fallback, MIN_ALIGN};\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {"}, {"sha": "ce2c4e88c7e5a59ce7c7671d10fb1892c248bbfc", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -223,7 +223,7 @@ where\n \n impl fmt::Display for JoinPathsError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"path segment contains separator `{}`\", PATH_SEPARATOR)\n+        write!(f, \"path segment contains separator `{}`\", char::from(PATH_SEPARATOR))\n     }\n }\n "}, {"sha": "2fe71f9f28d5c853949505c0a5a22cdd1a62b902", "filename": "library/std/src/sys/windows/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Falloc.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -5,7 +5,7 @@ use crate::ffi::c_void;\n use crate::ptr;\n use crate::sync::atomic::{AtomicPtr, Ordering};\n use crate::sys::c;\n-use crate::sys_common::alloc::{realloc_fallback, MIN_ALIGN};\n+use crate::sys::common::alloc::{realloc_fallback, MIN_ALIGN};\n \n #[cfg(test)]\n mod tests;"}, {"sha": "23a3a0e907dcf7ebc5aef1c68b0b83e7e2516cec", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -8,9 +8,11 @@\n //! rest of `std` is complex, with dependencies going in all\n //! directions: `std` depending on `sys_common`, `sys_common`\n //! depending on `sys`, and `sys` depending on `sys_common` and `std`.\n-//! Ideally `sys_common` would be split into two and the dependencies\n-//! between them all would form a dag, facilitating the extraction of\n-//! `std::sys` from the standard library.\n+//! This is because `sys_common` not only contains platform-independent code,\n+//! but also code that is shared between the different platforms in `sys`.\n+//! Ideally all that shared code should be moved to `sys::common`,\n+//! and the dependencies between `std`, `sys_common` and `sys` all would form a dag.\n+//! Progress on this is tracked in #84187.\n \n #![allow(missing_docs)]\n #![allow(missing_debug_implementations)]\n@@ -46,7 +48,6 @@ macro_rules! rtunwrap {\n     };\n }\n \n-pub mod alloc;\n pub mod at_exit_imp;\n pub mod backtrace;\n pub mod bytestring;"}, {"sha": "569c3391f5c0cc43433bc77831d17f8ff4d76602", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -1 +1 @@\n-Subproject commit d3f2ace94d51610cf3e3c265705bb8416d37f8e4\n+Subproject commit 569c3391f5c0cc43433bc77831d17f8ff4d76602"}, {"sha": "8551afbb2ca6f5ea37fe58380318b209785e4e02", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -1 +1 @@\n-Subproject commit 6fe476943afd53a9a6e91f38a6ea7bb48811d8ff\n+Subproject commit 8551afbb2ca6f5ea37fe58380318b209785e4e02"}, {"sha": "e1abb17cd94cd5a8a374b48e1bc8134a2208ed48", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -1 +1 @@\n-Subproject commit fd97729e2d82f8b08d68a31c9bfdf0c37a7fd542\n+Subproject commit e1abb17cd94cd5a8a374b48e1bc8134a2208ed48"}, {"sha": "c80f0b09fc15b9251825343be910c08531938ab2", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -1 +1 @@\n-Subproject commit 29d91f591c90dd18fdca6d23f1a9caf9c139d0d7\n+Subproject commit c80f0b09fc15b9251825343be910c08531938ab2"}, {"sha": "a9bd2bbf31e4f92b5d3d8e80b22839d0cc7a2022", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -1 +1 @@\n-Subproject commit 0687daac28939c476df51778f5a1d1aff1a3fddf\n+Subproject commit a9bd2bbf31e4f92b5d3d8e80b22839d0cc7a2022"}, {"sha": "4ce7c70d4b57e2718919182ae7b02b51d1781d69", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -1972,6 +1972,10 @@ fn anchor_failure(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>, failure: A\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"contains invalid anchor\");\n         }\n+        if let AnchorFailure::RustdocAnchorConflict(Res::Primitive(_)) = failure {\n+            diag.note(\"this restriction may be lifted in a future release\");\n+            diag.note(\"see https://github.com/rust-lang/rust/issues/83083 for more information\");\n+        }\n     });\n }\n "}, {"sha": "42a8832185ae68c2fd3d3b155ae26725c6c54058", "filename": "src/test/rustdoc-ui/intra-doc/anchors.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -9,6 +9,8 @@ note: the lint level is defined here\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this restriction may be lifted in a future release\n+   = note: see https://github.com/rust-lang/rust/issues/83083 for more information\n \n error: `Foo::f#hola` contains an anchor, but links to fields are already anchored\n   --> $DIR/anchors.rs:25:15\n@@ -33,6 +35,9 @@ error: `u32#hello` contains an anchor, but links to builtin types are already an\n    |\n LL | /// [u32#hello]\n    |      ^^^^^^^^^ contains invalid anchor\n+   |\n+   = note: this restriction may be lifted in a future release\n+   = note: see https://github.com/rust-lang/rust/issues/83083 for more information\n \n error: aborting due to 5 previous errors\n "}, {"sha": "f5a97eca21bdbcf36e58f12d50ced553af676ddb", "filename": "src/test/ui/macros/macro-pat-pattern-followed-by-or-in-2021.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -0,0 +1,20 @@\n+// edition:2021\n+#![allow(unused_macros)]\n+macro_rules! foo { ($x:pat | $y:pat) => {} } //~ ERROR `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n+macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} } //~ ERROR `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n+macro_rules! qux { ($x:pat, $y:pat) => {} } // should be ok\n+macro_rules! match_any {\n+    ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => { //~ ERROR `$pat:pat` may be followed by `|`, which is not allowed for `pat` fragments\n+        match $expr {\n+            $(\n+                $( $pat => $expr_arm, )+\n+            )+\n+        }\n+    };\n+}\n+\n+fn main() {\n+    let result: Result<i64, i32> = Err(42);\n+    let int: i64 = match_any!(result, Ok(i) | Err(i) => i.into());\n+    assert_eq!(int, 42);\n+}"}, {"sha": "a5987a25551d224940e8ba08507eec32e042b564", "filename": "src/test/ui/macros/macro-pat-pattern-followed-by-or-in-2021.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or-in-2021.stderr?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -0,0 +1,26 @@\n+error: `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n+  --> $DIR/macro-pat-pattern-followed-by-or-in-2021.rs:3:28\n+   |\n+LL | macro_rules! foo { ($x:pat | $y:pat) => {} }\n+   |                            ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: `$x:pat` is followed by `|`, which is not allowed for `pat` fragments\n+  --> $DIR/macro-pat-pattern-followed-by-or-in-2021.rs:4:32\n+   |\n+LL | macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n+   |                                ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: `$pat:pat` may be followed by `|`, which is not allowed for `pat` fragments\n+  --> $DIR/macro-pat-pattern-followed-by-or-in-2021.rs:7:36\n+   |\n+LL |     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n+   |                                    ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "54bd13d7ebce87033f93748c47f4a08f63066b83", "filename": "src/test/ui/macros/macro-pat-pattern-followed-by-or.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat-pattern-followed-by-or.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![allow(unused_macros)]\n+macro_rules! foo { ($x:pat | $y:pat) => {} } // should be ok\n+macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} } // should be ok\n+macro_rules! qux { ($x:pat, $y:pat) => {} } // should be ok\n+macro_rules! match_any {\n+    ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => { // should be ok\n+        match $expr {\n+            $(\n+                $( $pat => $expr_arm, )+\n+            )+\n+        }\n+    };\n+}\n+\n+fn main() {\n+    let result: Result<i64, i32> = Err(42);\n+    let int: i64 = match_any!(result, Ok(i) | Err(i) => i.into());\n+    assert_eq!(int, 42);\n+}"}, {"sha": "edd3f3e7646b82bdc8b16e932c4006843455f18e", "filename": "src/test/ui/macros/macro-pat2021-pattern-followed-by-or.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.rs?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -0,0 +1,21 @@\n+#![feature(edition_macro_pats)]\n+#![allow(unused_macros)]\n+macro_rules! foo { ($x:pat2021 | $y:pat2021) => {} } //~ ERROR `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n+macro_rules! baz { ($x:pat2015 | $y:pat2015) => {} } // should be ok\n+macro_rules! qux { ($x:pat2015 | $y:pat2021) => {} } // should be ok\n+macro_rules! ogg { ($x:pat2021 | $y:pat2015) => {} } //~ ERROR `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n+macro_rules! match_any {\n+    ( $expr:expr , $( $( $pat:pat2021 )|+ => $expr_arm:pat2021 ),+ ) => { //~ ERROR  `$pat:pat2021` may be followed by `|`, which is not allowed for `pat2021` fragments\n+        match $expr {\n+            $(\n+                $( $pat => $expr_arm, )+\n+            )+\n+        }\n+    };\n+}\n+\n+fn main() {\n+    let result: Result<i64, i32> = Err(42);\n+    let int: i64 = match_any!(result, Ok(i) | Err(i) => i.into());\n+    assert_eq!(int, 42);\n+}"}, {"sha": "fe0b40cd86e12e03e29c13107283e08aa13ba193", "filename": "src/test/ui/macros/macro-pat2021-pattern-followed-by-or.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c3b66cff74f3a21dc735294f3df319a38bc2114/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-pat2021-pattern-followed-by-or.stderr?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -0,0 +1,26 @@\n+error: `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n+  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:3:32\n+   |\n+LL | macro_rules! foo { ($x:pat2021 | $y:pat2021) => {} }\n+   |                                ^ not allowed after `pat2021` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: `$x:pat2021` is followed by `|`, which is not allowed for `pat2021` fragments\n+  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:6:32\n+   |\n+LL | macro_rules! ogg { ($x:pat2021 | $y:pat2015) => {} }\n+   |                                ^ not allowed after `pat2021` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: `$pat:pat2021` may be followed by `|`, which is not allowed for `pat2021` fragments\n+  --> $DIR/macro-pat2021-pattern-followed-by-or.rs:8:40\n+   |\n+LL |     ( $expr:expr , $( $( $pat:pat2021 )|+ => $expr_arm:pat2021 ),+ ) => {\n+   |                                        ^ not allowed after `pat2021` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `if` or `in`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "7be06139b632ee615fc18af04dd67947e2c794b2", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=9c3b66cff74f3a21dc735294f3df319a38bc2114", "patch": "@@ -1 +1 @@\n-Subproject commit 19e09a4a54c75312aeaac04577f2d0e067463ab6\n+Subproject commit 7be06139b632ee615fc18af04dd67947e2c794b2"}]}