{"sha": "c87ef0a2fcedaa865ff7713953824d0ea9734720", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4N2VmMGEyZmNlZGFhODY1ZmY3NzEzOTUzODI0ZDBlYTk3MzQ3MjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-09T04:36:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-09T04:36:24Z"}, "message": "Auto merge of #80749 - as-com:target-cpu-actually-native, r=nagisa\n\nMake target-cpu=native detect individual features\n\nThis PR makes target-cpu=native check for and enable/disable individual features instead of detecting and targeting a CPU by name. This brings the flag's behavior more in line with clang and gcc and ensures that the host actually supports each feature that we are compiling for.\n\nThis should resolve issues with miscompilations on e.g. \"Haswell\" Pentiums and Celerons that lack support for AVX, and also enable support for `aes` on Broadwell processors that support it. It should also resolve issues with failing to detect feature support in newer CPUs that aren't yet known by LLVM (see: #80633).\n\nFixes #54688\nFixes #48464\nFixes #38218", "tree": {"sha": "20881fcd1e9c6f9bd525434b29959eff51f3b725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20881fcd1e9c6f9bd525434b29959eff51f3b725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c87ef0a2fcedaa865ff7713953824d0ea9734720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c87ef0a2fcedaa865ff7713953824d0ea9734720", "html_url": "https://github.com/rust-lang/rust/commit/c87ef0a2fcedaa865ff7713953824d0ea9734720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c87ef0a2fcedaa865ff7713953824d0ea9734720/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26438b473883ea607b30288e461187f0fb2fe589", "url": "https://api.github.com/repos/rust-lang/rust/commits/26438b473883ea607b30288e461187f0fb2fe589", "html_url": "https://github.com/rust-lang/rust/commit/26438b473883ea607b30288e461187f0fb2fe589"}, {"sha": "80ca198212e967684557075b2f86b44e18048c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/80ca198212e967684557075b2f86b44e18048c70", "html_url": "https://github.com/rust-lang/rust/commit/80ca198212e967684557075b2f86b44e18048c70"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "68f319ade1e79b808f14ec6cb0166a3f68f7f7dd", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c87ef0a2fcedaa865ff7713953824d0ea9734720/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87ef0a2fcedaa865ff7713953824d0ea9734720/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=c87ef0a2fcedaa865ff7713953824d0ea9734720", "patch": "@@ -164,7 +164,8 @@ pub fn target_machine_factory(\n \n     let code_model = to_llvm_code_model(sess.code_model());\n \n-    let features = attributes::llvm_target_features(sess).collect::<Vec<_>>();\n+    let mut features = llvm_util::handle_native_features(sess);\n+    features.extend(attributes::llvm_target_features(sess).map(|s| s.to_owned()));\n     let mut singlethread = sess.target.singlethread;\n \n     // On the wasm target once the `atomics` feature is enabled that means that"}, {"sha": "e359d9f8c9c7754305cb06278277a329efd8e2af", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c87ef0a2fcedaa865ff7713953824d0ea9734720/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87ef0a2fcedaa865ff7713953824d0ea9734720/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=c87ef0a2fcedaa865ff7713953824d0ea9734720", "patch": "@@ -1708,6 +1708,10 @@ extern \"C\" {\n         PM: &PassManager<'_>,\n     );\n \n+    pub fn LLVMGetHostCPUFeatures() -> *mut c_char;\n+\n+    pub fn LLVMDisposeMessage(message: *mut c_char);\n+\n     // Stuff that's in llvm-wrapper/ because it's not upstream yet.\n \n     /// Opens an object file."}, {"sha": "a9d57ea8b8aa4f897bd65f44e156623ee782da5e", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c87ef0a2fcedaa865ff7713953824d0ea9734720/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87ef0a2fcedaa865ff7713953824d0ea9734720/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=c87ef0a2fcedaa865ff7713953824d0ea9734720", "patch": "@@ -8,7 +8,7 @@ use rustc_session::config::PrintRequest;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n-use std::ffi::CString;\n+use std::ffi::{CStr, CString};\n \n use std::slice;\n use std::str;\n@@ -221,6 +221,37 @@ pub fn target_cpu(sess: &Session) -> &str {\n     handle_native(name)\n }\n \n+pub fn handle_native_features(sess: &Session) -> Vec<String> {\n+    match sess.opts.cg.target_cpu {\n+        Some(ref s) => {\n+            if s != \"native\" {\n+                return vec![];\n+            }\n+\n+            let features_string = unsafe {\n+                let ptr = llvm::LLVMGetHostCPUFeatures();\n+                let features_string = if !ptr.is_null() {\n+                    CStr::from_ptr(ptr)\n+                        .to_str()\n+                        .unwrap_or_else(|e| {\n+                            bug!(\"LLVM returned a non-utf8 features string: {}\", e);\n+                        })\n+                        .to_owned()\n+                } else {\n+                    bug!(\"could not allocate host CPU features, LLVM returned a `null` string\");\n+                };\n+\n+                llvm::LLVMDisposeMessage(ptr);\n+\n+                features_string\n+            };\n+\n+            features_string.split(\",\").map(|s| s.to_owned()).collect()\n+        }\n+        None => vec![],\n+    }\n+}\n+\n pub fn tune_cpu(sess: &Session) -> Option<&str> {\n     match sess.opts.debugging_opts.tune_cpu {\n         Some(ref s) => Some(handle_native(&**s)),"}]}