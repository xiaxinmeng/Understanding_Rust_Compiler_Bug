{"sha": "1071c4c10bb24f12b65bfface2859c1fd8898575", "node_id": "C_kwDOAAsO6NoAKDEwNzFjNGMxMGJiMjRmMTJiNjViZmZhY2UyODU5YzFmZDg4OTg1NzU", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-07-05T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-08-26T12:27:08Z"}, "message": "Replace `Body::basic_blocks()` with field access", "tree": {"sha": "0e94f2b7b37f11efc886ff27073f73671c84e7d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e94f2b7b37f11efc886ff27073f73671c84e7d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1071c4c10bb24f12b65bfface2859c1fd8898575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1071c4c10bb24f12b65bfface2859c1fd8898575", "html_url": "https://github.com/rust-lang/rust/commit/1071c4c10bb24f12b65bfface2859c1fd8898575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1071c4c10bb24f12b65bfface2859c1fd8898575/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9bbac069b1c8f235bcf2415a47b783fb945b4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bbac069b1c8f235bcf2415a47b783fb945b4a7", "html_url": "https://github.com/rust-lang/rust/commit/d9bbac069b1c8f235bcf2415a47b783fb945b4a7"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "0cbb9f3ec2d80512d6277be4ab8463d07932e2bc", "filename": "src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1071c4c10bb24f12b65bfface2859c1fd8898575/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1071c4c10bb24f12b65bfface2859c1fd8898575/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=1071c4c10bb24f12b65bfface2859c1fd8898575", "patch": "@@ -26,7 +26,7 @@ pub(crate) fn analyze(fx: &FunctionCx<'_, '_, '_>) -> IndexVec<Local, SsaKind> {\n         })\n         .collect::<IndexVec<Local, SsaKind>>();\n \n-    for bb in fx.mir.basic_blocks().iter() {\n+    for bb in fx.mir.basic_blocks.iter() {\n         for stmt in bb.statements.iter() {\n             match &stmt.kind {\n                 Assign(place_and_rval) => match &place_and_rval.1 {"}, {"sha": "3011813c7035b56ae39bbc80fd1852fbae466154", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1071c4c10bb24f12b65bfface2859c1fd8898575/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1071c4c10bb24f12b65bfface2859c1fd8898575/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=1071c4c10bb24f12b65bfface2859c1fd8898575", "patch": "@@ -73,7 +73,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     // Predefine blocks\n     let start_block = bcx.create_block();\n     let block_map: IndexVec<BasicBlock, Block> =\n-        (0..mir.basic_blocks().len()).map(|_| bcx.create_block()).collect();\n+        (0..mir.basic_blocks.len()).map(|_| bcx.create_block()).collect();\n \n     // Make FunctionCx\n     let target_config = module.target_config();\n@@ -271,7 +271,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n     }\n     fx.tcx.sess.time(\"codegen prelude\", || crate::abi::codegen_fn_prelude(fx, start_block));\n \n-    for (bb, bb_data) in fx.mir.basic_blocks().iter_enumerated() {\n+    for (bb, bb_data) in fx.mir.basic_blocks.iter_enumerated() {\n         let block = fx.get_block(bb);\n         fx.bcx.switch_to_block(block);\n "}, {"sha": "e2b68f24a21dc699becffd75ff9afec81c8fa8ef", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1071c4c10bb24f12b65bfface2859c1fd8898575/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1071c4c10bb24f12b65bfface2859c1fd8898575/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=1071c4c10bb24f12b65bfface2859c1fd8898575", "patch": "@@ -505,7 +505,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                 return None;\n             }\n             let mut computed_const_val = None;\n-            for bb_data in fx.mir.basic_blocks() {\n+            for bb_data in fx.mir.basic_blocks.iter() {\n                 for stmt in &bb_data.statements {\n                     match &stmt.kind {\n                         StatementKind::Assign(local_and_rvalue) if &local_and_rvalue.0 == place => {"}]}