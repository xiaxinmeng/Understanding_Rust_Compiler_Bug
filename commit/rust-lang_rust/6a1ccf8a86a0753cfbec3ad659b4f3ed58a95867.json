{"sha": "6a1ccf8a86a0753cfbec3ad659b4f3ed58a95867", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMWNjZjhhODZhMDc1M2NmYmVjM2FkNjU5YjRmM2VkNThhOTU4Njc=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-03-17T22:11:22Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-03-17T22:11:22Z"}, "message": "fixup Cleaner Recover::replace", "tree": {"sha": "2ef67295fb9d1a9d6c503f8f6df2a95e08e4d318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ef67295fb9d1a9d6c503f8f6df2a95e08e4d318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a1ccf8a86a0753cfbec3ad659b4f3ed58a95867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a1ccf8a86a0753cfbec3ad659b4f3ed58a95867", "html_url": "https://github.com/rust-lang/rust/commit/6a1ccf8a86a0753cfbec3ad659b4f3ed58a95867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a1ccf8a86a0753cfbec3ad659b4f3ed58a95867/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef874310f2c11671e96fd700aceb9dcbc44db983", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef874310f2c11671e96fd700aceb9dcbc44db983", "html_url": "https://github.com/rust-lang/rust/commit/ef874310f2c11671e96fd700aceb9dcbc44db983"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "e149a5131fe3b21e29bf067e4cfa718a31ec962c", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6a1ccf8a86a0753cfbec3ad659b4f3ed58a95867/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1ccf8a86a0753cfbec3ad659b4f3ed58a95867/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=6a1ccf8a86a0753cfbec3ad659b4f3ed58a95867", "patch": "@@ -1313,6 +1313,7 @@ impl<'a, K, V> InternalEntry<K, V, &'a mut RawTable<K, V>> {\n         match self {\n             InternalEntry::Occupied { elem } => {\n                 Some(Occupied(OccupiedEntry {\n+                    key: Some(key),\n                     elem: elem\n                 }))\n             }\n@@ -1347,6 +1348,7 @@ pub enum Entry<'a, K: 'a, V: 'a> {\n /// A view into a single occupied location in a HashMap.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n+    key: Option<K>,\n     elem: FullBucket<K, V, &'a mut RawTable<K, V>>,\n }\n \n@@ -1552,6 +1554,12 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     pub fn remove(self) -> V {\n         pop_internal(self.elem).1\n     }\n+    /// Returns a key that was used for search.\n+    ///\n+    /// The key was retained for further use.\n+    fn take_key(&mut self) -> Option<K> {\n+        self.key.take()\n+    }\n }\n \n impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n@@ -1661,20 +1669,16 @@ impl<K, S, Q: ?Sized> super::Recover<Q> for HashMap<K, (), S>\n     }\n \n     fn replace(&mut self, key: K) -> Option<K> {\n-        let hash = self.make_hash(&key);\n         self.reserve(1);\n \n-        match search_hashed(&mut self.table, hash, |k| *k == key) {\n-            InternalEntry::Occupied { mut elem } => {\n-                Some(mem::replace(elem.read_mut().0, key))\n+        match self.entry(key) {\n+            Occupied(mut occupied) => {\n+                let key = occupied.take_key().unwrap();\n+                Some(mem::replace(occupied.elem.read_mut().0, key))\n             }\n-            other => {\n-                if let Some(Vacant(vacant)) = other.into_entry(key) {\n-                    vacant.insert(());\n-                    None\n-                } else {\n-                    unreachable!()\n-                }\n+            Vacant(vacant) => {\n+                vacant.insert(());\n+                None\n             }\n         }\n     }"}]}