{"sha": "076ec872ce122403f3c75f20c773c64b194a5891", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NmVjODcyY2UxMjI0MDNmM2M3NWYyMGM3NzNjNjRiMTk0YTU4OTE=", "commit": {"author": {"name": "Thiago Arrais", "email": "thiago.arrais@gmail.com", "date": "2020-06-10T16:52:00Z"}, "committer": {"name": "Thiago Arrais", "email": "thiago.arrais@gmail.com", "date": "2020-07-06T16:45:39Z"}, "message": "Lint for to_radians and to_degrees", "tree": {"sha": "bdd123b9dced814427184dd22c83147d0b5ff5a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd123b9dced814427184dd22c83147d0b5ff5a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/076ec872ce122403f3c75f20c773c64b194a5891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/076ec872ce122403f3c75f20c773c64b194a5891", "html_url": "https://github.com/rust-lang/rust/commit/076ec872ce122403f3c75f20c773c64b194a5891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/076ec872ce122403f3c75f20c773c64b194a5891/comments", "author": {"login": "thiagoarrais", "id": 3014, "node_id": "MDQ6VXNlcjMwMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoarrais", "html_url": "https://github.com/thiagoarrais", "followers_url": "https://api.github.com/users/thiagoarrais/followers", "following_url": "https://api.github.com/users/thiagoarrais/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoarrais/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoarrais/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoarrais/subscriptions", "organizations_url": "https://api.github.com/users/thiagoarrais/orgs", "repos_url": "https://api.github.com/users/thiagoarrais/repos", "events_url": "https://api.github.com/users/thiagoarrais/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoarrais/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thiagoarrais", "id": 3014, "node_id": "MDQ6VXNlcjMwMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoarrais", "html_url": "https://github.com/thiagoarrais", "followers_url": "https://api.github.com/users/thiagoarrais/followers", "following_url": "https://api.github.com/users/thiagoarrais/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoarrais/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoarrais/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoarrais/subscriptions", "organizations_url": "https://api.github.com/users/thiagoarrais/orgs", "repos_url": "https://api.github.com/users/thiagoarrais/repos", "events_url": "https://api.github.com/users/thiagoarrais/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoarrais/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53", "html_url": "https://github.com/rust-lang/rust/commit/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53"}], "stats": {"total": 106, "additions": 104, "deletions": 2}, "files": [{"sha": "d88e47f396cf858f4d8847d4b5c14325ac190ead", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/076ec872ce122403f3c75f20c773c64b194a5891/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076ec872ce122403f3c75f20c773c64b194a5891/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=076ec872ce122403f3c75f20c773c64b194a5891", "patch": "@@ -350,8 +350,18 @@ fn detect_hypot(cx: &LateContext<'_>, args: &[Expr<'_>]) -> Option<String> {\n \n         // check if expression of the form x.powi(2) + y.powi(2)\n         if_chain! {\n-            if let ExprKind::MethodCall(PathSegment { ident: lmethod_name, .. }, ref _lspan, ref largs, _) = add_lhs.kind;\n-            if let ExprKind::MethodCall(PathSegment { ident: rmethod_name, .. }, ref _rspan, ref rargs, _) = add_rhs.kind;\n+            if let ExprKind::MethodCall(\n+                PathSegment { ident: lmethod_name, .. },\n+                ref _lspan,\n+                ref largs,\n+                _\n+            ) = add_lhs.kind;\n+            if let ExprKind::MethodCall(\n+                PathSegment { ident: rmethod_name, .. },\n+                ref _rspan,\n+                ref rargs,\n+                _\n+            ) = add_rhs.kind;\n             if lmethod_name.as_str() == \"powi\" && rmethod_name.as_str() == \"powi\";\n             if let Some((lvalue, _)) = constant(cx, cx.tables(), &largs[1]);\n             if let Some((rvalue, _)) = constant(cx, cx.tables(), &rargs[1]);\n@@ -617,6 +627,55 @@ fn check_log_division(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     }\n }\n \n+fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    if_chain! {\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Div, ..\n+            },\n+            div_lhs,\n+            div_rhs,\n+        ) = &expr.kind;\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Mul, ..\n+            },\n+            mul_lhs,\n+            mul_rhs,\n+        ) = &div_lhs.kind;\n+        if let Some((rvalue, _)) = constant(cx, cx.tables(), div_rhs);\n+        if let Some((lvalue, _)) = constant(cx, cx.tables(), mul_rhs);\n+        then {\n+            if (F32(f32_consts::PI) == rvalue || F64(f64_consts::PI) == rvalue) &&\n+               (F32(180_f32) == lvalue || F64(180_f64) == lvalue)\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    IMPRECISE_FLOPS,\n+                    expr.span,\n+                    \"conversion to degrees can be done more accurately\",\n+                    \"consider using\",\n+                    format!(\"{}.to_degrees()\", Sugg::hir(cx, &mul_lhs, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            } else if\n+                (F32(180_f32) == rvalue || F64(180_f64) == rvalue) &&\n+                (F32(f32_consts::PI) == lvalue || F64(f64_consts::PI) == lvalue)\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    IMPRECISE_FLOPS,\n+                    expr.span,\n+                    \"conversion to radians can be done more accurately\",\n+                    \"consider using\",\n+                    format!(\"{}.to_radians()\", Sugg::hir(cx, &mul_lhs, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::MethodCall(ref path, _, args, _) = &expr.kind {\n@@ -637,6 +696,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n             check_mul_add(cx, expr);\n             check_custom_abs(cx, expr);\n             check_log_division(cx, expr);\n+            check_radians(cx, expr);\n         }\n     }\n }"}, {"sha": "64461417a6a11d3a387f6e56bd5d57b9fe61e05e", "filename": "tests/ui/floating_point_rad.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/076ec872ce122403f3c75f20c773c64b194a5891/tests%2Fui%2Ffloating_point_rad.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/076ec872ce122403f3c75f20c773c64b194a5891/tests%2Fui%2Ffloating_point_rad.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.fixed?ref=076ec872ce122403f3c75f20c773c64b194a5891", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![warn(clippy::imprecise_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let _ = x.to_degrees();\n+    let _ = x.to_radians();\n+    // Cases where the lint shouldn't be applied\n+    let _ = x * 90f32 / std::f32::consts::PI;\n+    let _ = x * std::f32::consts::PI / 90f32;\n+    let _ = x * 180f32 / std::f32::consts::E;\n+    let _ = x * std::f32::consts::E / 180f32;\n+}"}, {"sha": "9046f184b3e5203f29f4dd0932297880a53602b7", "filename": "tests/ui/floating_point_rad.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/076ec872ce122403f3c75f20c773c64b194a5891/tests%2Fui%2Ffloating_point_rad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076ec872ce122403f3c75f20c773c64b194a5891/tests%2Fui%2Ffloating_point_rad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.rs?ref=076ec872ce122403f3c75f20c773c64b194a5891", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![warn(clippy::imprecise_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let _ = x * 180f32 / std::f32::consts::PI;\n+    let _ = x * std::f32::consts::PI / 180f32;\n+    // Cases where the lint shouldn't be applied\n+    let _ = x * 90f32 / std::f32::consts::PI;\n+    let _ = x * std::f32::consts::PI / 90f32;\n+    let _ = x * 180f32 / std::f32::consts::E;\n+    let _ = x * std::f32::consts::E / 180f32;\n+}"}, {"sha": "81e8182151377d9dcb6775b31ada6cd4694d1e39", "filename": "tests/ui/floating_point_rad.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/076ec872ce122403f3c75f20c773c64b194a5891/tests%2Fui%2Ffloating_point_rad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/076ec872ce122403f3c75f20c773c64b194a5891/tests%2Fui%2Ffloating_point_rad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.stderr?ref=076ec872ce122403f3c75f20c773c64b194a5891", "patch": "@@ -0,0 +1,16 @@\n+error: conversion to degrees can be done more accurately\n+  --> $DIR/floating_point_rad.rs:6:13\n+   |\n+LL |     let _ = x * 180f32 / std::f32::consts::PI;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.to_degrees()`\n+   |\n+   = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n+\n+error: conversion to radians can be done more accurately\n+  --> $DIR/floating_point_rad.rs:7:13\n+   |\n+LL |     let _ = x * std::f32::consts::PI / 180f32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.to_radians()`\n+\n+error: aborting due to 2 previous errors\n+"}]}