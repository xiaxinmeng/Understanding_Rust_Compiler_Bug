{"sha": "bf695c487a05efecf64475ff4c34a16e90629ff1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNjk1YzQ4N2EwNWVmZWNmNjQ0NzVmZjRjMzRhMTZlOTA2MjlmZjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-03T01:14:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-03T01:14:56Z"}, "message": "Merge #8304\n\n8304: Support the new `panic!()` macro r=jonas-schievink a=jonas-schievink\n\nIncludes a minor fixup to macro 2.0 parsing.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "b02702c17749c958434ee465530555b335abe2b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b02702c17749c958434ee465530555b335abe2b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf695c487a05efecf64475ff4c34a16e90629ff1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZ8GQCRBK7hj4Ov3rIwAAdHIIAGIqYN9VJ+77s3BJADEgYQew\nOIEBQmHbWPv9oo8gzMv9CsDAcNHErcw2TcQwL+Zq91rP+4A2CtYIiTZh8ngKmzfO\nz4qCOvtYENqao383pjex0fOLDaVtopMkqj2wuDDDiK9STQyMPlwvsli3BIob/d3d\nkV15iyen/nS4HiOVF9EM7UsnrFzpL65739BWoQfOLDmuf2hvlNm/dJ/8LcJcHnwQ\nocPXKeBLUQgpem0JHIPFaWbqe3O1w2If4G6EU2N+cFtfraAre0IT/yV6e1p7UHOT\n7XNY5i00BI+5PncrTpbZHyFq+WvlW5YFbjuZ4jvQn5wAIlNO2nxB7bVzpyuJiho=\n=1UxI\n-----END PGP SIGNATURE-----\n", "payload": "tree b02702c17749c958434ee465530555b335abe2b8\nparent eb264fb81963d9ec08b2797818073e8ae2993a41\nparent 5742cdf3f1c591709e68d65c5701257cb77583db\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617412496 +0000\ncommitter GitHub <noreply@github.com> 1617412496 +0000\n\nMerge #8304\n\n8304: Support the new `panic!()` macro r=jonas-schievink a=jonas-schievink\n\nIncludes a minor fixup to macro 2.0 parsing.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf695c487a05efecf64475ff4c34a16e90629ff1", "html_url": "https://github.com/rust-lang/rust/commit/bf695c487a05efecf64475ff4c34a16e90629ff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf695c487a05efecf64475ff4c34a16e90629ff1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb264fb81963d9ec08b2797818073e8ae2993a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb264fb81963d9ec08b2797818073e8ae2993a41", "html_url": "https://github.com/rust-lang/rust/commit/eb264fb81963d9ec08b2797818073e8ae2993a41"}, {"sha": "5742cdf3f1c591709e68d65c5701257cb77583db", "url": "https://api.github.com/repos/rust-lang/rust/commits/5742cdf3f1c591709e68d65c5701257cb77583db", "html_url": "https://github.com/rust-lang/rust/commit/5742cdf3f1c591709e68d65c5701257cb77583db"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "c8f49470788bf602c101ac778e41c532095e5ae3", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=bf695c487a05efecf64475ff4c34a16e90629ff1", "patch": "@@ -1402,8 +1402,18 @@ impl ModCollector<'_, '_> {\n \n         // Case 1: builtin macros\n         if attrs.by_key(\"rustc_builtin_macro\").exists() {\n+            // `#[rustc_builtin_macro = \"builtin_name\"]` overrides the `macro_rules!` name.\n+            let name;\n+            let name = match attrs.by_key(\"rustc_builtin_macro\").string_value() {\n+                Some(it) => {\n+                    // FIXME: a hacky way to create a Name from string.\n+                    name = tt::Ident { text: it.clone(), id: tt::TokenId::unspecified() }.as_name();\n+                    &name\n+                }\n+                None => &mac.name,\n+            };\n             let krate = self.def_collector.def_map.krate;\n-            if let Some(macro_id) = find_builtin_macro(&mac.name, krate, ast_id) {\n+            if let Some(macro_id) = find_builtin_macro(name, krate, ast_id) {\n                 self.def_collector.define_macro_rules(\n                     self.module_id,\n                     mac.name.clone(),"}, {"sha": "3aa3d8997da3218657041386875d6d663f68a974", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=bf695c487a05efecf64475ff4c34a16e90629ff1", "patch": "@@ -1,10 +1,10 @@\n //! Builtin macro\n use crate::{\n     db::AstDatabase, name, quote, AstId, CrateId, EagerMacroId, LazyMacroId, MacroCallId,\n-    MacroDefId, MacroDefKind, TextSize,\n+    MacroCallLoc, MacroDefId, MacroDefKind, TextSize,\n };\n \n-use base_db::{AnchoredPath, FileId};\n+use base_db::{AnchoredPath, Edition, FileId};\n use cfg::CfgExpr;\n use either::Either;\n use mbe::{parse_exprs_with_sep, parse_to_token_tree, ExpandResult};\n@@ -111,6 +111,8 @@ register_builtin! {\n     (llvm_asm, LlvmAsm) => asm_expand,\n     (asm, Asm) => asm_expand,\n     (cfg, Cfg) => cfg_expand,\n+    (core_panic, CorePanic) => panic_expand,\n+    (std_panic, StdPanic) => panic_expand,\n \n     EAGER:\n     (compile_error, CompileError) => compile_error_expand,\n@@ -284,6 +286,25 @@ fn cfg_expand(\n     ExpandResult::ok(expanded)\n }\n \n+fn panic_expand(\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n+    tt: &tt::Subtree,\n+) -> ExpandResult<tt::Subtree> {\n+    let loc: MacroCallLoc = db.lookup_intern_macro(id);\n+    // Expand to a macro call `$crate::panic::panic_{edition}`\n+    let krate = tt::Ident { text: \"$crate\".into(), id: tt::TokenId::unspecified() };\n+    let mut call = if db.crate_graph()[loc.krate].edition == Edition::Edition2021 {\n+        quote!(#krate::panic::panic_2021!)\n+    } else {\n+        quote!(#krate::panic::panic_2015!)\n+    };\n+\n+    // Pass the original arguments\n+    call.token_trees.push(tt::TokenTree::Subtree(tt.clone()));\n+    ExpandResult::ok(call)\n+}\n+\n fn unquote_str(lit: &tt::Literal) -> Option<String> {\n     let lit = ast::make::tokens::literal(&lit.to_string());\n     let token = ast::String::cast(lit)?;"}, {"sha": "a0f8766b08a21c354b35eacfce770d32512c35a7", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=bf695c487a05efecf64475ff4c34a16e90629ff1", "patch": "@@ -208,6 +208,8 @@ pub mod known {\n         line,\n         module_path,\n         assert,\n+        core_panic,\n+        std_panic,\n         stringify,\n         concat,\n         include,"}, {"sha": "c82487ef042e681379439b42d289189a530289da", "filename": "crates/hir_expand/src/quote.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fhir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fhir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fquote.rs?ref=bf695c487a05efecf64475ff4c34a16e90629ff1", "patch": "@@ -104,6 +104,7 @@ macro_rules! __quote {\n     ( . ) => {$crate::__quote!(@PUNCT '.')};\n     ( < ) => {$crate::__quote!(@PUNCT '<')};\n     ( > ) => {$crate::__quote!(@PUNCT '>')};\n+    ( ! ) => {$crate::__quote!(@PUNCT '!')};\n \n     ( $first:tt $($tail:tt)+ ) => {\n         {"}, {"sha": "3af5bc18b8b0e547cf680043cccf2b2a5cb4a247", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=bf695c487a05efecf64475ff4c34a16e90629ff1", "patch": "@@ -220,9 +220,11 @@ impl MacroDef {\n             while src.len() > 0 {\n                 let rule = Rule::parse(&mut src, true)?;\n                 rules.push(rule);\n-                if let Err(()) = src.expect_char(';') {\n+                if let Err(()) = src.expect_any_char(&[';', ',']) {\n                     if src.len() > 0 {\n-                        return Err(ParseError::Expected(\"expected `;`\".to_string()));\n+                        return Err(ParseError::Expected(\n+                            \"expected `;` or `,` to delimit rules\".to_string(),\n+                        ));\n                     }\n                     break;\n                 }"}, {"sha": "e02d038b657775346a6816908795d58981091bf8", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=bf695c487a05efecf64475ff4c34a16e90629ff1", "patch": "@@ -662,6 +662,21 @@ macro foo {\n     .assert_expand_items(\"foo!(bar);\", \"fn bar () {}\");\n }\n \n+#[test]\n+fn test_macro_2_0_panic_2015() {\n+    parse_macro2(\n+        r#\"\n+macro panic_2015 {\n+    () => (\n+    ),\n+    (bar) => (\n+    ),\n+}\n+\"#,\n+    )\n+    .assert_expand_items(\"panic_2015!(bar);\", \"\");\n+}\n+\n #[test]\n fn test_path() {\n     parse_macro("}, {"sha": "195b8cf30b0df2bdab8afc638c0cc1f75a4360a2", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf695c487a05efecf64475ff4c34a16e90629ff1/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=bf695c487a05efecf64475ff4c34a16e90629ff1", "patch": "@@ -34,6 +34,17 @@ impl<'a> TtIter<'a> {\n         }\n     }\n \n+    pub(crate) fn expect_any_char(&mut self, chars: &[char]) -> Result<(), ()> {\n+        match self.next() {\n+            Some(tt::TokenTree::Leaf(tt::Leaf::Punct(tt::Punct { char: c, .. })))\n+                if chars.contains(c) =>\n+            {\n+                Ok(())\n+            }\n+            _ => Err(()),\n+        }\n+    }\n+\n     pub(crate) fn expect_subtree(&mut self) -> Result<&'a tt::Subtree, ()> {\n         match self.next() {\n             Some(tt::TokenTree::Subtree(it)) => Ok(it),"}]}