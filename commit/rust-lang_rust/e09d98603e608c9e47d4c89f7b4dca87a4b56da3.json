{"sha": "e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOWQ5ODYwM2U2MDhjOWU0N2Q0Yzg5ZjdiNGRjYTg3YTRiNTZkYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T23:51:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T23:51:43Z"}, "message": "auto merge of #19044 : murarth/rust/libsyntax-view-item, r=alexcrichton\n\nAllows parsing view items (`use` and `extern crate`) individually. Does not change behavior of any existing functions.\r\n\r\nCloses #19024", "tree": {"sha": "830bdec7e6fc4c19726398108bbf760a64ba0131", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/830bdec7e6fc4c19726398108bbf760a64ba0131"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "html_url": "https://github.com/rust-lang/rust/commit/e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e09d98603e608c9e47d4c89f7b4dca87a4b56da3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1628b98183bfec13e9407a905324dda047c3a550", "url": "https://api.github.com/repos/rust-lang/rust/commits/1628b98183bfec13e9407a905324dda047c3a550", "html_url": "https://github.com/rust-lang/rust/commit/1628b98183bfec13e9407a905324dda047c3a550"}, {"sha": "2293a04b4936a11fc3e09f3df8a8ab591e034f29", "url": "https://api.github.com/repos/rust-lang/rust/commits/2293a04b4936a11fc3e09f3df8a8ab591e034f29", "html_url": "https://github.com/rust-lang/rust/commit/2293a04b4936a11fc3e09f3df8a8ab591e034f29"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "3ce49b9d7a3ec00e234e492d53e3df4f103ca1b2", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e09d98603e608c9e47d4c89f7b4dca87a4b56da3/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d98603e608c9e47d4c89f7b4dca87a4b56da3/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "patch": "@@ -730,10 +730,11 @@ mod test {\n     use attr::AttrMetaMethods;\n     use parse::parser::Parser;\n     use parse::token::{str_to_ident};\n+    use print::pprust::view_item_to_string;\n     use ptr::P;\n     use util::parser_testing::{string_to_tts, string_to_parser};\n     use util::parser_testing::{string_to_expr, string_to_item};\n-    use util::parser_testing::string_to_stmt;\n+    use util::parser_testing::{string_to_stmt, string_to_view_item};\n \n     // produce a codemap::span\n     fn sp(a: u32, b: u32) -> Span {\n@@ -1083,6 +1084,30 @@ mod test {\n                             span: sp(0,21)})));\n     }\n \n+    #[test] fn parse_use() {\n+        let use_s = \"use foo::bar::baz;\";\n+        let vitem = string_to_view_item(use_s.to_string());\n+        let vitem_s = view_item_to_string(&vitem);\n+        assert_eq!(vitem_s.as_slice(), use_s);\n+\n+        let use_s = \"use foo::bar as baz;\";\n+        let vitem = string_to_view_item(use_s.to_string());\n+        let vitem_s = view_item_to_string(&vitem);\n+        assert_eq!(vitem_s.as_slice(), use_s);\n+    }\n+\n+    #[test] fn parse_extern_crate() {\n+        let ex_s = \"extern crate foo;\";\n+        let vitem = string_to_view_item(ex_s.to_string());\n+        let vitem_s = view_item_to_string(&vitem);\n+        assert_eq!(vitem_s.as_slice(), ex_s);\n+\n+        let ex_s = \"extern crate \\\"foo\\\" as bar;\";\n+        let vitem = string_to_view_item(ex_s.to_string());\n+        let vitem_s = view_item_to_string(&vitem);\n+        assert_eq!(vitem_s.as_slice(), ex_s);\n+    }\n+\n     fn get_spans_of_pat_idents(src: &str) -> Vec<Span> {\n         let item = string_to_item(src.to_string()).unwrap();\n "}, {"sha": "50b1a2204b04180b6a438b56c5e49eec9450f373", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e09d98603e608c9e47d4c89f7b4dca87a4b56da3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d98603e608c9e47d4c89f7b4dca87a4b56da3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "patch": "@@ -5620,6 +5620,14 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Parse a ViewItem, e.g. `use foo::bar` or `extern crate foo`\n+    pub fn parse_view_item(&mut self, attrs: Vec<Attribute>) -> ViewItem {\n+        match self.parse_item_or_view_item(attrs, false) {\n+            IoviViewItem(vi) => vi,\n+            _ => self.fatal(\"expected `use` or `extern crate`\"),\n+        }\n+    }\n+\n     /// Parse, e.g., \"use a::b::{z,y}\"\n     fn parse_use(&mut self) -> ViewItem_ {\n         return ViewItemUse(self.parse_view_path());"}, {"sha": "c1ea8f60b82010419243bca299fc45605ab6dd62", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e09d98603e608c9e47d4c89f7b4dca87a4b56da3/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d98603e608c9e47d4c89f7b4dca87a4b56da3/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "patch": "@@ -67,6 +67,13 @@ pub fn string_to_stmt(source_str : String) -> P<ast::Stmt> {\n     })\n }\n \n+/// Parse a string, return a view item\n+pub fn string_to_view_item (source_str : String) -> ast::ViewItem {\n+    with_error_checking_parse(source_str, |p| {\n+        p.parse_view_item(Vec::new())\n+    })\n+}\n+\n /// Parse a string, return a pat. Uses \"irrefutable\"... which doesn't\n /// (currently) affect parsing.\n pub fn string_to_pat(source_str: String) -> P<ast::Pat> {"}]}