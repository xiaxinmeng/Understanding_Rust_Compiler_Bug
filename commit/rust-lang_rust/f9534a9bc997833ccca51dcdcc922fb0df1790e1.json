{"sha": "f9534a9bc997833ccca51dcdcc922fb0df1790e1", "node_id": "C_kwDOAAsO6NoAKGY5NTM0YTliYzk5NzgzM2NjY2E1MWRjZGNjOTIyZmIwZGYxNzkwZTE", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T03:15:02Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T16:28:14Z"}, "message": "Add RISC-V inline asm support", "tree": {"sha": "cf611131e26db1e68ef2ef4d8a5ff280471a6a1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf611131e26db1e68ef2ef4d8a5ff280471a6a1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9534a9bc997833ccca51dcdcc922fb0df1790e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9534a9bc997833ccca51dcdcc922fb0df1790e1", "html_url": "https://github.com/rust-lang/rust/commit/f9534a9bc997833ccca51dcdcc922fb0df1790e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9534a9bc997833ccca51dcdcc922fb0df1790e1/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e7fa54a0e92beef60fcff84128626c4b01ef62", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e7fa54a0e92beef60fcff84128626c4b01ef62", "html_url": "https://github.com/rust-lang/rust/commit/31e7fa54a0e92beef60fcff84128626c4b01ef62"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "71fbcedd1b90d6aeb7502162bf4e164fc7610692", "filename": "src/inline_asm.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f9534a9bc997833ccca51dcdcc922fb0df1790e1/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9534a9bc997833ccca51dcdcc922fb0df1790e1/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=f9534a9bc997833ccca51dcdcc922fb0df1790e1", "patch": "@@ -497,6 +497,18 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n                 generated_asm.push_str(\"    push rbp\\n\");\n                 generated_asm.push_str(\"    mov rbp,rdi\\n\");\n             }\n+            InlineAsmArch::RiscV32 => {\n+                generated_asm.push_str(\"    addi sp, sp, -8\\n\");\n+                generated_asm.push_str(\"    sw ra, 4(sp)\\n\");\n+                generated_asm.push_str(\"    sw s0, 0(sp)\\n\");\n+                generated_asm.push_str(\"    mv s0, a0\\n\");\n+            }\n+            InlineAsmArch::RiscV64 => {\n+                generated_asm.push_str(\"    addi sp, sp, -16\\n\");\n+                generated_asm.push_str(\"    sd ra, 8(sp)\\n\");\n+                generated_asm.push_str(\"    sd s0, 0(sp)\\n\");\n+                generated_asm.push_str(\"    mv s0, a0\\n\");\n+            }\n             _ => unimplemented!(\"prologue for {:?}\", arch),\n         }\n     }\n@@ -511,6 +523,18 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n                 generated_asm.push_str(\"    pop rbp\\n\");\n                 generated_asm.push_str(\"    ret\\n\");\n             }\n+            InlineAsmArch::RiscV32 => {\n+                generated_asm.push_str(\"    lw s0, 0(sp)\\n\");\n+                generated_asm.push_str(\"    lw ra, 4(sp)\\n\");\n+                generated_asm.push_str(\"    addi sp, sp, 8\\n\");\n+                generated_asm.push_str(\"    ret\\n\");\n+            }\n+            InlineAsmArch::RiscV64 => {\n+                generated_asm.push_str(\"    ld s0, 0(sp)\\n\");\n+                generated_asm.push_str(\"    ld ra, 8(sp)\\n\");\n+                generated_asm.push_str(\"    addi sp, sp, 16\\n\");\n+                generated_asm.push_str(\"    ret\\n\");\n+            }\n             _ => unimplemented!(\"epilogue for {:?}\", arch),\n         }\n     }\n@@ -520,6 +544,9 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n             InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n                 generated_asm.push_str(\"    ud2\\n\");\n             }\n+            InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n+                generated_asm.push_str(\"    ebreak\\n\");\n+            }\n             _ => unimplemented!(\"epilogue_noreturn for {:?}\", arch),\n         }\n     }\n@@ -541,6 +568,16 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n                 reg.emit(generated_asm, InlineAsmArch::X86_64, None).unwrap();\n                 generated_asm.push('\\n');\n             }\n+            InlineAsmArch::RiscV32 => {\n+                generated_asm.push_str(\"    sw \");\n+                reg.emit(generated_asm, InlineAsmArch::RiscV32, None).unwrap();\n+                writeln!(generated_asm, \", 0x{:x}(s0)\", offset.bytes()).unwrap();\n+            }\n+            InlineAsmArch::RiscV64 => {\n+                generated_asm.push_str(\"    sd \");\n+                reg.emit(generated_asm, InlineAsmArch::RiscV64, None).unwrap();\n+                writeln!(generated_asm, \", 0x{:x}(s0)\", offset.bytes()).unwrap();\n+            }\n             _ => unimplemented!(\"save_register for {:?}\", arch),\n         }\n     }\n@@ -562,6 +599,16 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n                 reg.emit(generated_asm, InlineAsmArch::X86_64, None).unwrap();\n                 writeln!(generated_asm, \", [rbp+0x{:x}]\", offset.bytes()).unwrap();\n             }\n+            InlineAsmArch::RiscV32 => {\n+                generated_asm.push_str(\"    lw \");\n+                reg.emit(generated_asm, InlineAsmArch::RiscV32, None).unwrap();\n+                writeln!(generated_asm, \", 0x{:x}(s0)\", offset.bytes()).unwrap();\n+            }\n+            InlineAsmArch::RiscV64 => {\n+                generated_asm.push_str(\"    ld \");\n+                reg.emit(generated_asm, InlineAsmArch::RiscV64, None).unwrap();\n+                writeln!(generated_asm, \", 0x{:x}(s0)\", offset.bytes()).unwrap();\n+            }\n             _ => unimplemented!(\"restore_register for {:?}\", arch),\n         }\n     }"}]}