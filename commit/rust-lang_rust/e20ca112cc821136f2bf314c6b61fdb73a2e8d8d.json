{"sha": "e20ca112cc821136f2bf314c6b61fdb73a2e8d8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMGNhMTEyY2M4MjExMzZmMmJmMzE0YzZiNjFmZGI3M2EyZThkOGQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-24T23:35:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-24T23:35:59Z"}, "message": "Rollup merge of #71485 - arlopurcell:binary_heap_retain, r=Amanieu\n\nAdd BinaryHeap::retain as suggested in #42849\n\nThis PR implements retain for BinaryHeap as suggested in #42849.\n\nThis is my first PR for Rust, so please let me know if I should be doing anything differently, thanks!", "tree": {"sha": "7a51803c06f52b42d1306ef848044227f10ba4b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a51803c06f52b42d1306ef848044227f10ba4b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e20ca112cc821136f2bf314c6b61fdb73a2e8d8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeo3ffCRBK7hj4Ov3rIwAAdHIIAJ/kg2/V2Hhhi1GwdImEWapC\ns7prelUTaz+3V7oZNdvrnKoN7ZCbFEABsId4HZWHF2UH/QRzTGt49z1wdo1bexcT\nvGoL+Hw9ORi2gwVCTBJ6aYZd8S4Obm0Jw2/80E9c+oeaYqEAuwb3bdnIm9B6XFeA\n2pLr59vXAsczSgCaE68ij+Ff0HxW2r11RnEwLi8d3Uogw+zGwwLMnKhWSCie5lv1\n2kr27xRx/JvhDpXz/9VmHu0VuOISm363eoFpr8c9KO+U81tEJP2UUB7w+UcakEdj\nVZmi9fBMa+Tb11wSUkwb8KuqLzgjb3mZDXC5m/IguRa24zoHQYzeUCAZ7FmSVNQ=\n=oqdk\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a51803c06f52b42d1306ef848044227f10ba4b8\nparent a23d8ec8a7525ae90e7625312cc2bee83dbb7493\nparent 787eddc1ab49766204c35d2a60c3d75b6ea7413c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587771359 +0200\ncommitter GitHub <noreply@github.com> 1587771359 +0200\n\nRollup merge of #71485 - arlopurcell:binary_heap_retain, r=Amanieu\n\nAdd BinaryHeap::retain as suggested in #42849\n\nThis PR implements retain for BinaryHeap as suggested in #42849.\n\nThis is my first PR for Rust, so please let me know if I should be doing anything differently, thanks!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e20ca112cc821136f2bf314c6b61fdb73a2e8d8d", "html_url": "https://github.com/rust-lang/rust/commit/e20ca112cc821136f2bf314c6b61fdb73a2e8d8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e20ca112cc821136f2bf314c6b61fdb73a2e8d8d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a23d8ec8a7525ae90e7625312cc2bee83dbb7493", "url": "https://api.github.com/repos/rust-lang/rust/commits/a23d8ec8a7525ae90e7625312cc2bee83dbb7493", "html_url": "https://github.com/rust-lang/rust/commit/a23d8ec8a7525ae90e7625312cc2bee83dbb7493"}, {"sha": "787eddc1ab49766204c35d2a60c3d75b6ea7413c", "url": "https://api.github.com/repos/rust-lang/rust/commits/787eddc1ab49766204c35d2a60c3d75b6ea7413c", "html_url": "https://github.com/rust-lang/rust/commit/787eddc1ab49766204c35d2a60c3d75b6ea7413c"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "8e170d970bc57260d9915274ed41170f72957d50", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e20ca112cc821136f2bf314c6b61fdb73a2e8d8d/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20ca112cc821136f2bf314c6b61fdb73a2e8d8d/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=e20ca112cc821136f2bf314c6b61fdb73a2e8d8d", "patch": "@@ -665,6 +665,34 @@ impl<T: Ord> BinaryHeap<T> {\n     pub fn drain_sorted(&mut self) -> DrainSorted<'_, T> {\n         DrainSorted { inner: self }\n     }\n+\n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all elements `e` such that `f(&e)` returns\n+    /// `false`. The elements are visited in unsorted (and unspecified) order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(binary_heap_retain)]\n+    /// use std::collections::BinaryHeap;\n+    ///\n+    /// let mut heap = BinaryHeap::from(vec![-10, -5, 1, 2, 4, 13]);\n+    ///\n+    /// heap.retain(|x| x % 2 == 0); // only keep even numbers\n+    ///\n+    /// assert_eq!(heap.into_sorted_vec(), [-10, 2, 4])\n+    /// ```\n+    #[unstable(feature = \"binary_heap_retain\", issue = \"71503\")]\n+    pub fn retain<F>(&mut self, f: F)\n+    where\n+        F: FnMut(&T) -> bool,\n+    {\n+        self.data.retain(f);\n+        self.rebuild();\n+    }\n }\n \n impl<T> BinaryHeap<T> {"}, {"sha": "62084ccf53c5929f78edcd6c7e1dff45ea614de4", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e20ca112cc821136f2bf314c6b61fdb73a2e8d8d/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20ca112cc821136f2bf314c6b61fdb73a2e8d8d/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=e20ca112cc821136f2bf314c6b61fdb73a2e8d8d", "patch": "@@ -372,6 +372,14 @@ fn assert_covariance() {\n     }\n }\n \n+#[test]\n+fn test_retain() {\n+    let mut a = BinaryHeap::from(vec![-10, -5, 1, 2, 4, 13]);\n+    a.retain(|x| x % 2 == 0);\n+\n+    assert_eq!(a.into_sorted_vec(), [-10, 2, 4])\n+}\n+\n // old binaryheap failed this test\n //\n // Integrity means that all elements are present after a comparison panics,"}, {"sha": "78d49558262e36f2afecd675b8d705bbd7da96a0", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e20ca112cc821136f2bf314c6b61fdb73a2e8d8d/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20ca112cc821136f2bf314c6b61fdb73a2e8d8d/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=e20ca112cc821136f2bf314c6b61fdb73a2e8d8d", "patch": "@@ -14,6 +14,7 @@\n #![feature(binary_heap_drain_sorted)]\n #![feature(vec_remove_item)]\n #![feature(split_inclusive)]\n+#![feature(binary_heap_retain)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}]}