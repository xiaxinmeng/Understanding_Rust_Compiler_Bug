{"sha": "6116f19f7baa3c1f7ed4659aa3b9b5ec5ff8ac3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMTZmMTlmN2JhYTNjMWY3ZWQ0NjU5YWEzYjliNWVjNWZmOGFjM2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-23T15:58:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-23T16:01:47Z"}, "message": "Box::into_unique: do the reborrow-to-raw *after* destroying the Box", "tree": {"sha": "89c12bc48fa2107650c13e9ba18f7b4fb4ee3e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89c12bc48fa2107650c13e9ba18f7b4fb4ee3e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6116f19f7baa3c1f7ed4659aa3b9b5ec5ff8ac3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6116f19f7baa3c1f7ed4659aa3b9b5ec5ff8ac3e", "html_url": "https://github.com/rust-lang/rust/commit/6116f19f7baa3c1f7ed4659aa3b9b5ec5ff8ac3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6116f19f7baa3c1f7ed4659aa3b9b5ec5ff8ac3e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f688ba608923bdbf6b46ec65af2f6464b6233a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/f688ba608923bdbf6b46ec65af2f6464b6233a75", "html_url": "https://github.com/rust-lang/rust/commit/f688ba608923bdbf6b46ec65af2f6464b6233a75"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "0e40e4f371abf1c2f7919e32531dce919db5e992", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6116f19f7baa3c1f7ed4659aa3b9b5ec5ff8ac3e/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6116f19f7baa3c1f7ed4659aa3b9b5ec5ff8ac3e/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=6116f19f7baa3c1f7ed4659aa3b9b5ec5ff8ac3e", "patch": "@@ -253,15 +253,15 @@ impl<T: ?Sized> Box<T> {\n     #[unstable(feature = \"ptr_internals\", issue = \"0\", reason = \"use into_raw_non_null instead\")]\n     #[inline]\n     #[doc(hidden)]\n-    pub fn into_unique(mut b: Box<T>) -> Unique<T> {\n+    pub fn into_unique(b: Box<T>) -> Unique<T> {\n+        let mut unique = b.0;\n+        mem::forget(b);\n         // Box is kind-of a library type, but recognized as a \"unique pointer\" by\n         // Stacked Borrows.  This function here corresponds to \"reborrowing to\n         // a raw pointer\", but there is no actual reborrow here -- so\n         // without some care, the pointer we are returning here still carries\n         // the `Uniq` tag.  We round-trip through a mutable reference to avoid that.\n-        let unique = unsafe { b.0.as_mut() as *mut T };\n-        mem::forget(b);\n-        unsafe { Unique::new_unchecked(unique) }\n+        unsafe { Unique::new_unchecked(unique.as_mut() as *mut T) }\n     }\n \n     /// Consumes and leaks the `Box`, returning a mutable reference,"}]}