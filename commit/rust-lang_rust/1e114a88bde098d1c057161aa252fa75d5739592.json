{"sha": "1e114a88bde098d1c057161aa252fa75d5739592", "node_id": "C_kwDOAAsO6NoAKDFlMTE0YTg4YmRlMDk4ZDFjMDU3MTYxYWEyNTJmYTc1ZDU3Mzk1OTI", "commit": {"author": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-02-05T01:16:43Z"}, "committer": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-02-05T01:16:43Z"}, "message": "Add `slice_ranges` safety comment", "tree": {"sha": "6bcbfac98be60f65f8911ce0b929fe08a6966c7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bcbfac98be60f65f8911ce0b929fe08a6966c7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e114a88bde098d1c057161aa252fa75d5739592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e114a88bde098d1c057161aa252fa75d5739592", "html_url": "https://github.com/rust-lang/rust/commit/1e114a88bde098d1c057161aa252fa75d5739592", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e114a88bde098d1c057161aa252fa75d5739592/comments", "author": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ca25b8e49ca3442a56029f59677dfaab5b6eaf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca25b8e49ca3442a56029f59677dfaab5b6eaf5", "html_url": "https://github.com/rust-lang/rust/commit/8ca25b8e49ca3442a56029f59677dfaab5b6eaf5"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "99bd7902e694f85eaab57d5946ff9f8c649bc997", "filename": "library/alloc/src/collections/vec_deque/drain.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e114a88bde098d1c057161aa252fa75d5739592/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e114a88bde098d1c057161aa252fa75d5739592/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs?ref=1e114a88bde098d1c057161aa252fa75d5739592", "patch": "@@ -62,11 +62,10 @@ impl<'a, T, A: Allocator> Drain<'a, T, A> {\n             // We know that `self.idx + self.remaining <= deque.len <= usize::MAX`, so this won't overflow.\n             let end = start + self.remaining;\n \n-            // SAFETY: the range `start..end` lies strictly inside\n-            // the range `0..deque.original_len`. Because of this, and because\n-            // we haven't touched the elements inside this range yet,\n-            // it's guaranteed that `a_range` and `b_range` represent valid ranges into\n-            // the deques buffer.\n+            // SAFETY: `start..end` represents the range of elements that\n+            // haven't been drained yet, so they're all initialized,\n+            // and `slice::range(start..end, end) == start..end`,\n+            // so the preconditions for `slice_ranges` are met.\n             let (a_range, b_range) = deque.slice_ranges(start..end, end);\n             (deque.buffer_range(a_range), deque.buffer_range(b_range))\n         }"}, {"sha": "813430ae61535bc735f1b52723547eba30e81692", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e114a88bde098d1c057161aa252fa75d5739592/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e114a88bde098d1c057161aa252fa75d5739592/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=1e114a88bde098d1c057161aa252fa75d5739592", "patch": "@@ -1226,6 +1226,14 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// the given range. The `len` parameter should usually just be `self.len`;\n     /// the reason it's passed explicitly is that if the deque is wrapped in\n     /// a `Drain`, then `self.len` is not actually the length of the deque.\n+    ///\n+    /// # Safety\n+    ///\n+    /// This function is always safe to call. For the resulting ranges to be valid\n+    /// ranges into the physical buffer, the caller must ensure that for all possible\n+    /// values of `range` and `len`, the result of calling `slice::range(range, ..len)`\n+    /// represents a valid range into the logical buffer, and that all elements\n+    /// in that range are initialized.\n     fn slice_ranges<R>(&self, range: R, len: usize) -> (Range<usize>, Range<usize>)\n     where\n         R: RangeBounds<usize>,"}]}