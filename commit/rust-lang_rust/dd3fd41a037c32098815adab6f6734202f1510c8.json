{"sha": "dd3fd41a037c32098815adab6f6734202f1510c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkM2ZkNDFhMDM3YzMyMDk4ODE1YWRhYjZmNjczNDIwMmYxNTEwYzg=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-07T16:32:26Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-07T16:32:40Z"}, "message": "Use `span_suggestion` for `WHILE_LET_ON_ITERATOR`", "tree": {"sha": "ace127c1663060ab14198879ea84ccfa4e3aceaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ace127c1663060ab14198879ea84ccfa4e3aceaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd3fd41a037c32098815adab6f6734202f1510c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXVvcpAAoJEF5CfHlMukXoINAQAJaqHLY5nGSusC7x4pOsKmp4\nFAadp4xy2lXtyiWp16RloCEpYAjKwSJ/xPGdNhS44st1hHPqtcHBkD2I9xfR29uB\neUt05xCWA3srPCCCt8w1yZq9ZDChCEzwhj6VmBViZ6XVXoyNDQKz21Kvm0oB5T8h\nxQ9xyEhFVgSsvHEN/tbfJmHMMG7+qHVZwG7qpgoDfp28KaOelH80mHFZVlzNIEmT\nLPnP96OEHLHr5acoOl436D1/98C+ZLGMBlBZu0onxNY2fbrNohaY6Xn0ej4eZJji\ntK82r8VydZluGTcRYF32hL+9ihqDoGCC5qqqXek0DkzWJLdiqYU/EY6CaNLe5sgD\nsIsabX5eHV7R7t2gJmsM5SNoNe3N/NXWVPbGfdbpQYNjYdSsCZkeLDKcJBoztIN3\nMNnOq5qY8yMHyrpnim3lMrTmITSn0ERrr80RXw5Lg4ArAgqiwzWNmCVxfiCwxerE\nBV30mkeoaOiUf083+3TEtXZKihb7aCV0sLPkwAlz+sQKkQSUc4wGm3uVXJXJQUl7\nsf4CIoW2qBL/vyI40HaG5/UoaPmZ7Sx0lU4R1VvZhtB1e+I3Ck2aY1Yrr/At609K\nsJ31L5PruwNor2+Mm7jmKUhq26V5l0U+VQjrdi9wLO4TOR5wHO7NO86EJVU5H7oj\nFbX76i68c1SiMH3Ynx15\n=MfvW\n-----END PGP SIGNATURE-----", "payload": "tree ace127c1663060ab14198879ea84ccfa4e3aceaf\nparent 3df32cc723cc156e0ed5b507220039a52e0cbfde\nauthor mcarton <cartonmartin+git@gmail.com> 1465317146 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1465317160 +0200\n\nUse `span_suggestion` for `WHILE_LET_ON_ITERATOR`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3fd41a037c32098815adab6f6734202f1510c8", "html_url": "https://github.com/rust-lang/rust/commit/dd3fd41a037c32098815adab6f6734202f1510c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd3fd41a037c32098815adab6f6734202f1510c8/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3df32cc723cc156e0ed5b507220039a52e0cbfde", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df32cc723cc156e0ed5b507220039a52e0cbfde", "html_url": "https://github.com/rust-lang/rust/commit/3df32cc723cc156e0ed5b507220039a52e0cbfde"}], "stats": {"total": 134, "additions": 100, "deletions": 34}, "files": [{"sha": "5dcea35e5a711580724ac6eebf6e53fb9da543ee", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd3fd41a037c32098815adab6f6734202f1510c8/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3fd41a037c32098815adab6f6734202f1510c8/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=dd3fd41a037c32098815adab6f6734202f1510c8", "patch": "@@ -290,11 +290,15 @@ impl LateLintPass for LoopsPass {\n                        !is_iterator_used_after_while_let(cx, iter_expr) {\n                         let iterator = snippet(cx, method_args[0].span, \"_\");\n                         let loop_var = snippet(cx, pat_args[0].span, \"_\");\n-                        span_help_and_lint(cx,\n+                        span_lint_and_then(cx,\n                                            WHILE_LET_ON_ITERATOR,\n                                            expr.span,\n                                            \"this loop could be written as a `for` loop\",\n-                                           &format!(\"try\\nfor {} in {} {{...}}\", loop_var, iterator));\n+                                           |db| {\n+                        db.span_suggestion(expr.span,\n+                                           \"try\",\n+                                           format!(\"for {} in {} {{ .. }}\", loop_var, iterator));\n+                        });\n                     }\n                 }\n             }\n@@ -598,7 +602,7 @@ fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Ex\n                                    |db| {\n                                        db.span_suggestion(expr.span,\n                                                           \"use the corresponding method\",\n-                                                          format!(\"for {} in {}.{}() {{...}}\",\n+                                                          format!(\"for {} in {}.{}() {{ .. }}\",\n                                                                   snippet(cx, *pat_span, \"..\"),\n                                                                   snippet(cx, arg_span, \"..\"),\n                                                                   kind));"}, {"sha": "627cd888aac1a2880a7097dbc663acda9549fc39", "filename": "tests/compile-fail/absurd-extreme-comparisons.rs", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs?ref=dd3fd41a037c32098815adab6f6734202f1510c8", "patch": "@@ -8,15 +8,33 @@ fn main() {\n \n     let u: u32 = 42;\n \n-    u <= 0; //~ERROR this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n-    u <= Z; //~ERROR this comparison involving\n-    u < Z; //~ERROR this comparison involving\n-    Z >= u; //~ERROR this comparison involving\n-    Z > u; //~ERROR this comparison involving\n-    u > std::u32::MAX; //~ERROR this comparison involving\n-    u >= std::u32::MAX; //~ERROR this comparison involving\n-    std::u32::MAX < u; //~ERROR this comparison involving\n-    std::u32::MAX <= u; //~ERROR this comparison involving\n+    u <= 0;\n+    //~^ ERROR this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+    //~| HELP using u == 0 instead\n+    u <= Z;\n+    //~^ ERROR this comparison involving\n+    //~| HELP using u == Z instead\n+    u < Z;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n+    Z >= u;\n+    //~^ ERROR this comparison involving\n+    //~| HELP using Z == u instead\n+    Z > u;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n+    u > std::u32::MAX;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n+    u >= std::u32::MAX;\n+    //~^ ERROR this comparison involving\n+    //~| HELP using u == std::u32::MAX instead\n+    std::u32::MAX < u;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n+    std::u32::MAX <= u;\n+    //~^ ERROR this comparison involving\n+    //~| HELP using std::u32::MAX == u instead\n \n     1-1 > u;\n         //~^ ERROR this comparison involving\n@@ -29,13 +47,23 @@ fn main() {\n         //~| HELP because 12 - 2*6 is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == 12 - 2*6 instead\n \n     let i: i8 = 0;\n-    i < -127 - 1; //~ERROR this comparison involving\n-    std::i8::MAX >= i; //~ERROR this comparison involving\n-    3-7 < std::i32::MIN; //~ERROR this comparison involving\n+    i < -127 - 1;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n+    std::i8::MAX >= i;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always true\n+    3-7 < std::i32::MIN;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n \n     let b = false;\n-    b >= true; //~ERROR this comparison involving\n-    false > b; //~ERROR this comparison involving\n+    b >= true;\n+    //~^ ERROR this comparison involving\n+    //~| HELP using b == true instead\n+    false > b;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n \n     u > 0; // ok\n "}, {"sha": "193edebf3c4ffb8f37f5067a01120404bd43d9d1", "filename": "tests/compile-fail/booleans.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbooleans.rs?ref=dd3fd41a037c32098815adab6f6734202f1510c8", "patch": "@@ -52,29 +52,37 @@ fn equality_stuff() {\n     let c: i32 = unimplemented!();\n     let d: i32 = unimplemented!();\n     let e: i32 = unimplemented!();\n-    let _ = a == b && a != b; //~ ERROR this boolean expression contains a logic bug\n+    let _ = a == b && a != b;\n+    //~^ ERROR this boolean expression contains a logic bug\n     //~| HELP this expression can be optimized out\n     //~| HELP it would look like the following\n     //~| SUGGESTION let _ = false;\n-    let _ = a == b && c == 5 && a == b; //~ ERROR this boolean expression can be simplified\n+    let _ = a == b && c == 5 && a == b;\n+    //~^ ERROR this boolean expression can be simplified\n     //~| HELP try\n     //~| SUGGESTION let _ = a == b && c == 5;\n-    let _ = a == b && c == 5 && b == a; //~ ERROR this boolean expression can be simplified\n+    //~| HELP try\n+    //~| SUGGESTION let _ = !(c != 5 || a != b);\n+    let _ = a == b && c == 5 && b == a;\n+    //~^ ERROR this boolean expression can be simplified\n     //~| HELP try\n     //~| SUGGESTION let _ = a == b && c == 5;\n     //~| HELP try\n     //~| SUGGESTION let _ = !(c != 5 || a != b);\n-    let _ = a < b && a >= b; //~ ERROR this boolean expression contains a logic bug\n+    let _ = a < b && a >= b;\n+    //~^ ERROR this boolean expression contains a logic bug\n     //~| HELP this expression can be optimized out\n     //~| HELP it would look like the following\n     //~| SUGGESTION let _ = false;\n-    let _ = a > b && a <= b; //~ ERROR this boolean expression contains a logic bug\n+    let _ = a > b && a <= b;\n+    //~^ ERROR this boolean expression contains a logic bug\n     //~| HELP this expression can be optimized out\n     //~| HELP it would look like the following\n     //~| SUGGESTION let _ = false;\n     let _ = a > b && a == b;\n \n-    let _ = a != b || !(a != b || c == d); //~ ERROR this boolean expression can be simplified\n+    let _ = a != b || !(a != b || c == d);\n+    //~^ ERROR this boolean expression can be simplified\n     //~| HELP try\n     //~| SUGGESTION let _ = c != d || a != b;\n     //~| HELP try"}, {"sha": "34c55499612007cfcf7c2076fadd065a8502cc77", "filename": "tests/compile-fail/collapsible_if.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcollapsible_if.rs?ref=dd3fd41a037c32098815adab6f6734202f1510c8", "patch": "@@ -5,13 +5,19 @@\n fn main() {\n     let x = \"hello\";\n     let y = \"world\";\n-    if x == \"hello\" { //~ERROR this if statement can be collapsed\n+    if x == \"hello\" {\n+    //~^ ERROR this if statement can be collapsed\n+    //~| HELP try\n+    //~| SUGGESTION if x == \"hello\" && y == \"world\" {\n         if y == \"world\" {\n             println!(\"Hello world!\");\n         }\n     }\n \n-    if x == \"hello\" || x == \"world\" { //~ERROR this if statement can be collapsed\n+    if x == \"hello\" || x == \"world\" {\n+    //~^ ERROR this if statement can be collapsed\n+    //~| HELP try\n+    //~| SUGGESTION if (x == \"hello\" || x == \"world\") && (y == \"world\" || y == \"hello\") {\n         if y == \"world\" || y == \"hello\" {\n             println!(\"Hello world!\");\n         }"}, {"sha": "d35beb617e05cf0fb0e21e06e47f0104f7387617", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=dd3fd41a037c32098815adab6f6734202f1510c8", "patch": "@@ -200,11 +200,17 @@ fn main() {\n     }\n \n     // testing that the empty range lint folds constants\n-    for i in 10..5+4 { //~ERROR this range is empty so this for loop will never run\n+    for i in 10..5+4 {\n+    //~^ ERROR this range is empty so this for loop will never run\n+    //~| HELP if you are attempting to iterate over this range in reverse\n+    //~| SUGGESTION for i in (5+4..10).rev() {\n         println!(\"{}\", i);\n     }\n \n-    for i in (5+2)..(3-1) { //~ERROR this range is empty so this for loop will never run\n+    for i in (5+2)..(3-1) {\n+    //~^ ERROR this range is empty so this for loop will never run\n+    //~| HELP if you are attempting to iterate over this range in reverse\n+    //~| SUGGESTION for i in ((3-1)..(5+2)).rev() {\n         println!(\"{}\", i);\n     }\n "}, {"sha": "650b5917fdcb82581dccb4872500e7a91c9c26f0", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=dd3fd41a037c32098815adab6f6734202f1510c8", "patch": "@@ -100,28 +100,43 @@ fn single_match_know_enum() {\n fn match_bool() {\n     let test: bool = true;\n \n-    match test {  //~ ERROR you seem to be trying to match on a boolean expression\n+    match test {\n+    //~^ ERROR you seem to be trying to match on a boolean expression\n+    //~| HELP try\n+    //~| SUGGESTION if test { 0 } else { 42 };\n         true => 0,\n         false => 42,\n     };\n \n     let option = 1;\n-    match option == 1 {  //~ ERROR you seem to be trying to match on a boolean expression\n+    match option == 1 {\n+    //~^ ERROR you seem to be trying to match on a boolean expression\n+    //~| HELP try\n+    //~| SUGGESTION if option == 1 { 1 } else { 0 };\n         true => 1,\n         false => 0,\n     };\n \n-    match test { //~ ERROR you seem to be trying to match on a boolean expression\n+    match test {\n+    //~^ ERROR you seem to be trying to match on a boolean expression\n+    //~| HELP try\n+    //~^^ SUGGESTION if !test { println!(\"Noooo!\"); };\n         true => (),\n         false => { println!(\"Noooo!\"); }\n     };\n \n-    match test { //~ ERROR you seem to be trying to match on a boolean expression\n+    match test {\n+    //~^ ERROR you seem to be trying to match on a boolean expression\n+    //~| HELP try\n+    //~^^ SUGGESTION if !test { println!(\"Noooo!\"); };\n         false => { println!(\"Noooo!\"); }\n         _ => (),\n     };\n \n-    match test { //~ ERROR you seem to be trying to match on a boolean expression\n+    match test {\n+    //~^ ERROR you seem to be trying to match on a boolean expression\n+    //~| HELP try\n+    //~| SUGGESTION if test { println!(\"Yes!\"); } else { println!(\"Noooo!\"); };\n         false => { println!(\"Noooo!\"); }\n         true => { println!(\"Yes!\"); }\n     };\n@@ -216,7 +231,7 @@ fn overlapping() {\n         11 ... 50 => println!(\"0 ... 10\"),\n         _ => (),\n     }\n-    \n+\n     if let None = Some(42) {\n         // nothing\n     } else if let None = Some(42) {"}, {"sha": "21c0dcee5115d939aaac47829a9309503db0e571", "filename": "tests/compile-fail/mut_mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3fd41a037c32098815adab6f6734202f1510c8/tests%2Fcompile-fail%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_mut.rs?ref=dd3fd41a037c32098815adab6f6734202f1510c8", "patch": "@@ -40,5 +40,4 @@ fn main() {\n \n     let mut z = mut_ptr!(&mut 3u32);\n     //~^ NOTE in this expansion of mut_ptr!\n-    //~| NOTE in this expansion of mut_ptr!\n }"}]}