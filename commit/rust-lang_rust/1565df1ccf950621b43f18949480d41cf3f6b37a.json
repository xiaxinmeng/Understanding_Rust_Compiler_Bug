{"sha": "1565df1ccf950621b43f18949480d41cf3f6b37a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NjVkZjFjY2Y5NTA2MjFiNDNmMTg5NDk0ODBkNDFjZjNmNmIzN2E=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-07-16T21:22:14Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-07-16T21:22:14Z"}, "message": "btree: use pattern matching instead of unwrap", "tree": {"sha": "878ba8b997a512b48eac9f9cd72a27b3078914b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/878ba8b997a512b48eac9f9cd72a27b3078914b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1565df1ccf950621b43f18949480d41cf3f6b37a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1565df1ccf950621b43f18949480d41cf3f6b37a", "html_url": "https://github.com/rust-lang/rust/commit/1565df1ccf950621b43f18949480d41cf3f6b37a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1565df1ccf950621b43f18949480d41cf3f6b37a/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c7ee9c56f7c768be94c89f699527b44be664ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c7ee9c56f7c768be94c89f699527b44be664ab", "html_url": "https://github.com/rust-lang/rust/commit/06c7ee9c56f7c768be94c89f699527b44be664ab"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "e4605527ce55011bc64aedf178de136acef067b9", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1565df1ccf950621b43f18949480d41cf3f6b37a/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1565df1ccf950621b43f18949480d41cf3f6b37a/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=1565df1ccf950621b43f18949480d41cf3f6b37a", "patch": "@@ -365,12 +365,12 @@ impl<K: Clone + Ord, V: Clone> Leaf<K, V> {\n                 return (Node::new_leaf(self.clone().elts), false);\n             }\n             //If there is an index, insert at that index.\n-            _ => {\n-                if index.unwrap() >= self.elts.len() {\n+            Some(i) => {\n+                if i >= self.elts.len() {\n                     self.elts.push(to_insert.clone());\n                 }\n                 else {\n-                    self.elts.insert(index.unwrap(), to_insert.clone());\n+                    self.elts.insert(i, to_insert.clone());\n                 }\n             }\n         }\n@@ -526,16 +526,16 @@ impl<K: Clone + Ord, V: Clone> Branch<K, V> {\n                                          self.clone().rightmost_child),\n                         outcome);\n             }\n-            _ => {\n-                if index.unwrap() == self.elts.len() {\n+            Some(i) => {\n+                if i == self.elts.len() {\n                     let new_outcome = self.clone().rightmost_child.insert(k.clone(),\n                                                                        v.clone(),\n                                                                        ub.clone());\n                     new_branch = new_outcome.clone().val0();\n                     outcome = new_outcome.val1();\n                 }\n                 else {\n-                    let new_outcome = self.elts.get(index.unwrap()).left.clone().insert(k.clone(),\n+                    let new_outcome = self.elts.get(i).left.clone().insert(k.clone(),\n                                                                                  v.clone(),\n                                                                                  ub.clone());\n                     new_branch = new_outcome.clone().val0();\n@@ -547,11 +547,11 @@ impl<K: Clone + Ord, V: Clone> Branch<K, V> {\n                     //If we have a leaf, we do not need to resize the tree,\n                     //so we can return false.\n                     LeafNode(..) => {\n-                        if index.unwrap() == self.elts.len() {\n+                        if i == self.elts.len() {\n                             self.rightmost_child = box new_branch.clone();\n                         }\n                         else {\n-                            self.elts.get_mut(index.unwrap()).left = box new_branch.clone();\n+                            self.elts.get_mut(i).left = box new_branch.clone();\n                         }\n                         return (Node::new_branch(self.clone().elts,\n                                                  self.clone().rightmost_child),\n@@ -589,13 +589,13 @@ impl<K: Clone + Ord, V: Clone> Branch<K, V> {\n                                                      self.clone().rightmost_child),\n                                     false);\n                             }\n-                        _ => {\n-                            self.elts.insert(new_elt_index.unwrap(), new_elt);\n-                            if new_elt_index.unwrap() + 1 >= self.elts.len() {\n+                        Some(i) => {\n+                            self.elts.insert(i, new_elt);\n+                            if i + 1 >= self.elts.len() {\n                                 self.rightmost_child = branch.clone().rightmost_child;\n                             }\n                             else {\n-                                self.elts.get_mut(new_elt_index.unwrap() + 1).left =\n+                                self.elts.get_mut(i + 1).left =\n                                     branch.clone().rightmost_child;\n                             }\n                         }"}]}