{"sha": "bc647e9d33009bcf3327d298a8251630d8504e52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNjQ3ZTlkMzMwMDliY2YzMzI3ZDI5OGE4MjUxNjMwZDg1MDRlNTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-17T12:50:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-18T10:09:00Z"}, "message": "add 'raw reference' to the machine hook, and use that in ptr-to-raw casts", "tree": {"sha": "f1ff0ec236fc2ce011df2e50848efcdbc73c22be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1ff0ec236fc2ce011df2e50848efcdbc73c22be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc647e9d33009bcf3327d298a8251630d8504e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc647e9d33009bcf3327d298a8251630d8504e52", "html_url": "https://github.com/rust-lang/rust/commit/bc647e9d33009bcf3327d298a8251630d8504e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc647e9d33009bcf3327d298a8251630d8504e52/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24724efe1c590893f8d50280acb236c4b998c3d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/24724efe1c590893f8d50280acb236c4b998c3d6", "html_url": "https://github.com/rust-lang/rust/commit/24724efe1c590893f8d50280acb236c4b998c3d6"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "ebe877484c620831c703f78b061e599c2e1f4873", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=bc647e9d33009bcf3327d298a8251630d8504e52", "patch": "@@ -468,7 +468,7 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n         _ptr: Pointer<Self::PointerTag>,\n         _pointee_ty: Ty<'tcx>,\n         _pointee_size: Size,\n-        _borrow_kind: mir::BorrowKind,\n+        _borrow_kind: Option<mir::BorrowKind>,\n     ) -> EvalResult<'tcx, Self::PointerTag> {\n         Ok(())\n     }"}, {"sha": "9b11a1637c632088bb445cd150c4564ddd1c125a", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=bc647e9d33009bcf3327d298a8251630d8504e52", "patch": "@@ -38,7 +38,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx> {\n         let src_layout = src.layout;\n-        let dst_layout = dest.layout;\n         use rustc::mir::CastKind::*;\n         match kind {\n             Unsize => {\n@@ -47,7 +46,19 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n \n             Misc => {\n                 let src = self.read_value(src)?;\n-                if self.type_is_fat_ptr(src_layout.ty) {\n+\n+                if src.layout.ty.is_region_ptr() && dest.layout.ty.is_unsafe_ptr() {\n+                    // For the purpose of the \"ptr tag hooks\", treat this as creating\n+                    // a new, raw reference.\n+                    let place = self.ref_to_mplace(src)?;\n+                    let _val = self.create_ref(place, None)?;\n+                    // FIXME: The blog post said we should now also erase the tag.\n+                    // That would amount to using `_val` instead of `src` from here on.\n+                    // However, do we really want to do that?  `transmute` doesn't\n+                    // do it either and we have to support that, somehow.\n+                }\n+\n+                if self.type_is_fat_ptr(src.layout.ty) {\n                     match (*src, self.type_is_fat_ptr(dest.layout.ty)) {\n                         // pointers to extern types\n                         (Value::Scalar(_),_) |\n@@ -65,11 +76,13 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     match src_layout.variants {\n                         layout::Variants::Single { index } => {\n                             if let Some(def) = src_layout.ty.ty_adt_def() {\n+                                // Cast from a univariant enum\n+                                assert!(src.layout.is_zst());\n                                 let discr_val = def\n                                     .discriminant_for_variant(*self.tcx, index)\n                                     .val;\n                                 return self.write_scalar(\n-                                    Scalar::from_uint(discr_val, dst_layout.size),\n+                                    Scalar::from_uint(discr_val, dest.layout.size),\n                                     dest);\n                             }\n                         }\n@@ -85,7 +98,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n \n             ReifyFnPointer => {\n                 // The src operand does not matter, just its type\n-                match src_layout.ty.sty {\n+                match src.layout.ty.sty {\n                     ty::FnDef(def_id, substs) => {\n                         if self.tcx.has_attr(def_id, \"rustc_args_required_const\") {\n                             bug!(\"reifying a fn ptr that requires \\\n@@ -117,7 +130,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n \n             ClosureFnPointer => {\n                 // The src operand does not matter, just its type\n-                match src_layout.ty.sty {\n+                match src.layout.ty.sty {\n                     ty::Closure(def_id, substs) => {\n                         let substs = self.tcx.subst_and_normalize_erasing_regions(\n                             self.substs(),"}, {"sha": "8f7abea47d87d06a39f573dba1c20a114d80a7b5", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=bc647e9d33009bcf3327d298a8251630d8504e52", "patch": "@@ -201,12 +201,13 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n \n     /// Executed when evaluating the `&` operator: Creating a new reference.\n     /// This has the chance to adjust the tag.\n+    /// `borrow_kind` can be `None` in case a raw ptr is being created.\n     fn tag_reference(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer<Self::PointerTag>,\n         pointee_ty: Ty<'tcx>,\n         pointee_size: Size,\n-        borrow_kind: mir::BorrowKind,\n+        borrow_kind: Option<mir::BorrowKind>,\n     ) -> EvalResult<'tcx, Self::PointerTag>;\n \n     /// Executed when evaluating the `*` operator: Following a reference."}, {"sha": "6ee70bac583dc5d765ea0a54ffd4a0f43ecf15b8", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=bc647e9d33009bcf3327d298a8251630d8504e52", "patch": "@@ -291,7 +291,7 @@ where\n     pub fn create_ref(\n         &mut self,\n         place: MPlaceTy<'tcx, M::PointerTag>,\n-        borrow_kind: mir::BorrowKind,\n+        borrow_kind: Option<mir::BorrowKind>,\n     ) -> EvalResult<'tcx, Value<M::PointerTag>> {\n         let ptr = match place.ptr {\n             Scalar::Ptr(ptr) => {"}, {"sha": "1bab536e3e0f079d2d21eac24984f5c3e1a80b36", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=bc647e9d33009bcf3327d298a8251630d8504e52", "patch": "@@ -251,7 +251,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             Ref(_, borrow_kind, ref place) => {\n                 let src = self.eval_place(place)?;\n                 let val = self.force_allocation(src)?;\n-                let val = self.create_ref(val, borrow_kind)?;\n+                let val = self.create_ref(val, Some(borrow_kind))?;\n                 self.write_value(val, dest)?;\n             }\n "}, {"sha": "c759727f546c89b83e679aec7b88677fcbc0f848", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc647e9d33009bcf3327d298a8251630d8504e52/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=bc647e9d33009bcf3327d298a8251630d8504e52", "patch": "@@ -448,7 +448,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         let arg = OpTy {\n             op: Operand::Immediate(self.create_ref(\n                 place,\n-                mir::BorrowKind::Mut { allow_two_phase_borrow: false }\n+                None // this is a \"raw reference\"\n             )?),\n             layout: self.layout_of(self.tcx.mk_mut_ptr(place.layout.ty))?,\n         };"}]}