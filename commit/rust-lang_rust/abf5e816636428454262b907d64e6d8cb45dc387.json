{"sha": "abf5e816636428454262b907d64e6d8cb45dc387", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZjVlODE2NjM2NDI4NDU0MjYyYjkwN2Q2NGU2ZDhjYjQ1ZGMzODc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-21T12:37:31Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-27T09:44:55Z"}, "message": "Use Ranges for vars_since_snapshot", "tree": {"sha": "e39a5567517cedacf295c20023d105eb9f3df59f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e39a5567517cedacf295c20023d105eb9f3df59f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abf5e816636428454262b907d64e6d8cb45dc387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abf5e816636428454262b907d64e6d8cb45dc387", "html_url": "https://github.com/rust-lang/rust/commit/abf5e816636428454262b907d64e6d8cb45dc387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abf5e816636428454262b907d64e6d8cb45dc387/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c653be6389c5d62368ed07c60f064b6f1c037e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c653be6389c5d62368ed07c60f064b6f1c037e", "html_url": "https://github.com/rust-lang/rust/commit/a5c653be6389c5d62368ed07c60f064b6f1c037e"}], "stats": {"total": 77, "additions": 38, "deletions": 39}, "files": [{"sha": "d8107e64d28b03ace3fffa250e0410065f7fd0d1", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/abf5e816636428454262b907d64e6d8cb45dc387/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf5e816636428454262b907d64e6d8cb45dc387/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=abf5e816636428454262b907d64e6d8cb45dc387", "patch": "@@ -1,10 +1,11 @@\n-use crate::infer::type_variable::TypeVariableMap;\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt, TyVid, RegionVid};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n \n use super::InferCtxt;\n use super::RegionVariableOrigin;\n \n+use std::ops::Range;\n+\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// This rather funky routine is used while processing expected\n     /// types. What happens here is that we want to propagate a\n@@ -42,12 +43,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// regions in question are not particularly important. We will\n     /// use the expected types to guide coercions, but we will still\n     /// type-check the resulting types from those coercions against\n-    /// the actual types (`?T`, `Option<?T`) -- and remember that\n+    /// the actual types (`?T`, `Option<?T>`) -- and remember that\n     /// after the snapshot is popped, the variable `?T` is no longer\n     /// unified.\n-    pub fn fudge_regions_if_ok<T, E, F>(&self,\n-                                        origin: &RegionVariableOrigin,\n-                                        f: F) -> Result<T, E> where\n+    pub fn fudge_regions_if_ok<T, E, F>(\n+        &self,\n+        origin: &RegionVariableOrigin,\n+        f: F,\n+    ) -> Result<T, E> where\n         F: FnOnce() -> Result<T, E>,\n         T: TypeFoldable<'tcx>,\n     {\n@@ -101,8 +104,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n pub struct RegionFudger<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-    type_variables: &'a TypeVariableMap,\n-    region_vars: &'a Vec<ty::RegionVid>,\n+    type_variables: &'a Range<TyVid>,\n+    region_vars: &'a Range<RegionVid>,\n     origin: &'a RegionVariableOrigin,\n }\n \n@@ -114,25 +117,21 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFudger<'a, 'gcx, 'tcx> {\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         match ty.sty {\n             ty::Infer(ty::InferTy::TyVar(vid)) => {\n-                match self.type_variables.get(&vid) {\n-                    None => {\n-                        // This variable was created before the\n-                        // \"fudging\".  Since we refresh all type\n-                        // variables to their binding anyhow, we know\n-                        // that it is unbound, so we can just return\n-                        // it.\n-                        debug_assert!(self.infcx.type_variables.borrow_mut()\n-                                      .probe(vid)\n-                                      .is_unknown());\n-                        ty\n-                    }\n-\n-                    Some(&origin) => {\n-                        // This variable was created during the\n-                        // fudging. Recreate it with a fresh variable\n-                        // here.\n-                        self.infcx.next_ty_var(origin)\n-                    }\n+                if self.type_variables.contains(&vid) {\n+                    // This variable was created during the fudging.\n+                    // Recreate it with a fresh variable here.\n+                    let origin = self.infcx.type_variables.borrow().var_origin(vid).clone();\n+                    self.infcx.next_ty_var(origin)\n+                } else {\n+                    // This variable was created before the\n+                    // \"fudging\".  Since we refresh all type\n+                    // variables to their binding anyhow, we know\n+                    // that it is unbound, so we can just return\n+                    // it.\n+                    debug_assert!(self.infcx.type_variables.borrow_mut()\n+                                  .probe(vid)\n+                                  .is_unknown());\n+                    ty\n                 }\n             }\n             _ => ty.super_fold_with(self),\n@@ -141,12 +140,10 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFudger<'a, 'gcx, 'tcx> {\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReVar(v) if self.region_vars.contains(&v) => {\n+            ty::ReVar(vid) if self.region_vars.contains(&vid) => {\n                 self.infcx.next_region_var(self.origin.clone())\n             }\n-            _ => {\n-                r\n-            }\n+            _ => r,\n         }\n     }\n }"}, {"sha": "51d8a0edc81d3fcca4250f7b9234b843758cadf7", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abf5e816636428454262b907d64e6d8cb45dc387/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf5e816636428454262b907d64e6d8cb45dc387/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=abf5e816636428454262b907d64e6d8cb45dc387", "patch": "@@ -16,6 +16,7 @@ use crate::ty::{Region, RegionVid};\n \n use std::collections::BTreeMap;\n use std::{cmp, fmt, mem, u32};\n+use std::ops::Range;\n \n mod leak_check;\n \n@@ -840,8 +841,8 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         }\n     }\n \n-    pub fn vars_since_snapshot(&self, mark: &RegionSnapshot) -> Vec<RegionVid> {\n-        self.unification_table.vars_since_snapshot(&mark.region_snapshot).collect()\n+    pub fn vars_since_snapshot(&self, mark: &RegionSnapshot) -> Range<RegionVid> {\n+        self.unification_table.vars_since_snapshot(&mark.region_snapshot)\n     }\n \n     /// See [`RegionInference::region_constraints_added_in_snapshot`]."}, {"sha": "a5b2e591f91bbdefb40bd13443a752a4e4cca50a", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abf5e816636428454262b907d64e6d8cb45dc387/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf5e816636428454262b907d64e6d8cb45dc387/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=abf5e816636428454262b907d64e6d8cb45dc387", "patch": "@@ -1,13 +1,15 @@\n use syntax::symbol::InternedString;\n use syntax_pos::Span;\n-use crate::ty::{self, Ty};\n+use crate::ty::{self, Ty, TyVid};\n \n use std::cmp;\n use std::marker::PhantomData;\n+use std::ops::Range;\n use std::u32;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::unify as ut;\n+use ut::UnifyKey;\n \n pub struct TypeVariableTable<'tcx> {\n     values: sv::SnapshotVec<Delegate>,\n@@ -294,11 +296,9 @@ impl<'tcx> TypeVariableTable<'tcx> {\n \n     /// Returns a map from the type variables created during the\n     /// snapshot to the origin of the type variable.\n-    pub fn vars_since_snapshot(&mut self, s: &Snapshot<'tcx>) -> TypeVariableMap {\n-        self.values.values_since_snapshot(&s.snapshot).map(|idx| {\n-            let origin = self.values.get(idx).origin.clone();\n-            (ty::TyVid { index: idx as u32 }, origin)\n-        }).collect()\n+    pub fn vars_since_snapshot(&mut self, s: &Snapshot<'tcx>) -> Range<TyVid> {\n+        let range = self.values.values_since_snapshot(&s.snapshot);\n+        TyVid::from_index(range.start as u32)..TyVid::from_index(range.end as u32)\n     }\n \n     /// Finds the set of type variables that existed *before* `s`"}, {"sha": "e905c3688518bd21e0c0b207d3ffff530bd0fa68", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abf5e816636428454262b907d64e6d8cb45dc387/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf5e816636428454262b907d64e6d8cb45dc387/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=abf5e816636428454262b907d64e6d8cb45dc387", "patch": "@@ -44,6 +44,7 @@\n #![feature(non_exhaustive)]\n #![feature(proc_macro_internals)]\n #![feature(optin_builtin_traits)]\n+#![feature(range_is_empty)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_attrs)]"}]}