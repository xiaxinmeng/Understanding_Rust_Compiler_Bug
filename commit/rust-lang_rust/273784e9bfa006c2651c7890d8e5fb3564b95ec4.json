{"sha": "273784e9bfa006c2651c7890d8e5fb3564b95ec4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3Mzc4NGU5YmZhMDA2YzI2NTFjNzg5MGQ4ZTVmYjM1NjRiOTVlYzQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-14T15:24:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-18T16:20:08Z"}, "message": "Optimize include_bin! for large inputs\n\nPreviously an ExprLit was created *per byte* causing a huge increase in memory\nbloat. This adds a new `lit_binary` to contain a literal of binary data, which\nis currently only used by the include_bin! syntax extension. This massively\nspeeds up compilation times of the shootout-k-nucleotide-pipes test\n\n    before:\n        time: 469s\n        memory: 6GB\n        assertion failure in LLVM (section too large)\n\n    after:\n        time: 2.50s\n        memory: 124MB\n\nCloses #2598", "tree": {"sha": "aef326fcb9cf0e98a40c59cfbfab676e67c73f99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aef326fcb9cf0e98a40c59cfbfab676e67c73f99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/273784e9bfa006c2651c7890d8e5fb3564b95ec4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/273784e9bfa006c2651c7890d8e5fb3564b95ec4", "html_url": "https://github.com/rust-lang/rust/commit/273784e9bfa006c2651c7890d8e5fb3564b95ec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/273784e9bfa006c2651c7890d8e5fb3564b95ec4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40180cdbea708307ca66dc6debddbd5ecc1ea41c", "url": "https://api.github.com/repos/rust-lang/rust/commits/40180cdbea708307ca66dc6debddbd5ecc1ea41c", "html_url": "https://github.com/rust-lang/rust/commit/40180cdbea708307ca66dc6debddbd5ecc1ea41c"}], "stats": {"total": 80, "additions": 62, "deletions": 18}, "files": [{"sha": "72ad15dbb2874faf0d07b12b48aff182f01ae434", "filename": "doc/rust.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/273784e9bfa006c2651c7890d8e5fb3564b95ec4/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/273784e9bfa006c2651c7890d8e5fb3564b95ec4/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=273784e9bfa006c2651c7890d8e5fb3564b95ec4", "patch": "@@ -1589,7 +1589,7 @@ explain, here's a few use cases and what they would entail.\n * A crate needs a global available \"helper module\" to itself, but it doesn't\n   want to expose the helper module as a public API. To accomplish this, the root\n   of the crate's hierarchy would have a private module which then internally has\n-  a \"public api\". Because the entire crate is an ancestor of the root, then the\n+  a \"public api\". Because the entire crate is a descendant of the root, then the\n   entire local crate can access this private module through the second case.\n \n * When writing unit tests for a module, it's often a common idiom to have an\n@@ -1602,7 +1602,10 @@ In the second case, it mentions that a private item \"can be accessed\" by the\n current module and its descendants, but the exact meaning of accessing an item\n depends on what the item is. Accessing a module, for example, would mean looking\n inside of it (to import more items). On the other hand, accessing a function\n-would mean that it is invoked.\n+would mean that it is invoked. Additionally, path expressions and import\n+statements are considered to access an item in the sense that the\n+import/expression is only valid if the destination is in the current visibility\n+scope.\n \n Here's an example of a program which exemplifies the three cases outlined above.\n "}, {"sha": "3b1f409fb1861c60c7406d03f3d99d66b1b5d8f9", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=273784e9bfa006c2651c7890d8e5fb3564b95ec4", "patch": "@@ -297,6 +297,7 @@ pub enum const_val {\n     const_int(i64),\n     const_uint(u64),\n     const_str(@str),\n+    const_binary(@[u8]),\n     const_bool(bool)\n }\n \n@@ -476,6 +477,7 @@ pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n pub fn lit_to_const(lit: &lit) -> const_val {\n     match lit.node {\n       lit_str(s, _) => const_str(s),\n+      lit_binary(data) => const_binary(data),\n       lit_char(n) => const_uint(n as u64),\n       lit_int(n, _) => const_int(n),\n       lit_uint(n, _) => const_uint(n),"}, {"sha": "6c665f6f6fea3c561edb3ea27fd2421a4ac15e3d", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=273784e9bfa006c2651c7890d8e5fb3564b95ec4", "patch": "@@ -917,6 +917,24 @@ pub fn C_estr_slice(cx: &mut CrateContext, s: @str) -> ValueRef {\n     }\n }\n \n+pub fn C_binary_slice(cx: &mut CrateContext, data: &[u8]) -> ValueRef {\n+    unsafe {\n+        let len = data.len();\n+        let lldata = C_bytes(data);\n+\n+        let gsym = token::gensym(\"binary\");\n+        let g = do format!(\"binary{}\", gsym).with_c_str |buf| {\n+            llvm::LLVMAddGlobal(cx.llmod, val_ty(lldata).to_ref(), buf)\n+        };\n+        llvm::LLVMSetInitializer(g, lldata);\n+        llvm::LLVMSetGlobalConstant(g, True);\n+        lib::llvm::SetLinkage(g, lib::llvm::InternalLinkage);\n+\n+        let cs = llvm::LLVMConstPointerCast(g, Type::i8p().to_ref());\n+        C_struct([cs, C_uint(cx, len)], false)\n+    }\n+}\n+\n pub fn C_zero_byte_arr(size: uint) -> ValueRef {\n     unsafe {\n         let mut i = 0u;"}, {"sha": "ae5cc8cccdd6dc15880df75405912686b610947c", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=273784e9bfa006c2651c7890d8e5fb3564b95ec4", "patch": "@@ -71,7 +71,8 @@ pub fn const_lit(cx: &mut CrateContext, e: &ast::Expr, lit: ast::lit)\n       }\n       ast::lit_bool(b) => C_bool(b),\n       ast::lit_nil => C_nil(),\n-      ast::lit_str(s, _) => C_estr_slice(cx, s)\n+      ast::lit_str(s, _) => C_estr_slice(cx, s),\n+      ast::lit_binary(data) => C_binary_slice(cx, data),\n     }\n }\n "}, {"sha": "20a9fb8f7a944e268b7e72793282a65ba61db791", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=273784e9bfa006c2651c7890d8e5fb3564b95ec4", "patch": "@@ -4442,6 +4442,12 @@ pub fn eval_repeat_count<T: ExprTyProvider>(tcx: &T, count_expr: &ast::Expr) ->\n                                          repeat count but found boolean\");\n             return 0;\n         }\n+        const_eval::const_binary(_) => {\n+            tcx.ty_ctxt().sess.span_err(count_expr.span,\n+                                        \"expected positive integer for \\\n+                                         repeat count but found binary array\");\n+            return 0;\n+        }\n       },\n       Err(*) => {\n         tcx.ty_ctxt().sess.span_err(count_expr.span,"}, {"sha": "1d56863e60fee0439aeb490f92c738d8284165ed", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=273784e9bfa006c2651c7890d8e5fb3564b95ec4", "patch": "@@ -1020,6 +1020,10 @@ pub fn check_lit(fcx: @mut FnCtxt, lit: @ast::lit) -> ty::t {\n \n     match lit.node {\n       ast::lit_str(*) => ty::mk_estr(tcx, ty::vstore_slice(ty::re_static)),\n+      ast::lit_binary(*) => {\n+          ty::mk_evec(tcx, ty::mt{ ty: ty::mk_u8(), mutbl: ast::MutImmutable },\n+                      ty::vstore_slice(ty::re_static))\n+      }\n       ast::lit_char(_) => ty::mk_char(),\n       ast::lit_int(_, t) => ty::mk_mach_int(t),\n       ast::lit_uint(_, t) => ty::mk_mach_uint(t),"}, {"sha": "3ffe6a7085a2e65759f41eaf8266f6d2d60deac3", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=273784e9bfa006c2651c7890d8e5fb3564b95ec4", "patch": "@@ -1121,6 +1121,7 @@ impl ToSource for syntax::codemap::Span {\n fn lit_to_str(lit: &ast::lit) -> ~str {\n     match lit.node {\n         ast::lit_str(st, _) => st.to_owned(),\n+        ast::lit_binary(data) => format!(\"{:?}\", data.as_slice()),\n         ast::lit_char(c) => ~\"'\" + std::char::from_u32(c).unwrap().to_str() + \"'\",\n         ast::lit_int(i, _t) => i.to_str(),\n         ast::lit_uint(u, _t) => u.to_str(),"}, {"sha": "34b359ef3db8a84388b2de5ea8e1efa4c08787be", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=273784e9bfa006c2651c7890d8e5fb3564b95ec4", "patch": "@@ -691,6 +691,7 @@ pub type lit = Spanned<lit_>;\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum lit_ {\n     lit_str(@str, StrStyle),\n+    lit_binary(@[u8]),\n     lit_char(u32),\n     lit_int(i64, int_ty),\n     lit_uint(u64, uint_ty),"}, {"sha": "dcfeb99365a7b94aca38e7afffbf575f662e7494", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=273784e9bfa006c2651c7890d8e5fb3564b95ec4", "patch": "@@ -101,16 +101,19 @@ pub fn expand_include_str(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n }\n \n pub fn expand_include_bin(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n-    -> base::MacResult {\n+        -> base::MacResult\n+{\n+    use std::at_vec;\n+\n     let file = get_single_str_from_tts(cx, sp, tts, \"include_bin!\");\n     match io::read_whole_file(&res_rel_file(cx, sp, &Path::new(file))) {\n-      result::Ok(src) => {\n-        let u8_exprs: ~[@ast::Expr] = src.iter().map(|char| cx.expr_u8(sp, *char)).collect();\n-        base::MRExpr(cx.expr_vec(sp, u8_exprs))\n-      }\n-      result::Err(ref e) => {\n-        cx.parse_sess().span_diagnostic.handler().fatal((*e))\n-      }\n+        result::Ok(src) => {\n+            let v = at_vec::to_managed_move(src);\n+            base::MRExpr(cx.expr_lit(sp, ast::lit_binary(v)))\n+        }\n+        result::Err(ref e) => {\n+            cx.parse_sess().span_diagnostic.handler().fatal((*e))\n+        }\n     }\n }\n "}, {"sha": "0d442dca9b686ec017b422b8b168f0e0c0c3da85", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=273784e9bfa006c2651c7890d8e5fb3564b95ec4", "patch": "@@ -2092,6 +2092,14 @@ pub fn print_literal(s: @ps, lit: &ast::lit) {\n       ast::lit_bool(val) => {\n         if val { word(s.s, \"true\"); } else { word(s.s, \"false\"); }\n       }\n+      ast::lit_binary(arr) => {\n+        ibox(s, indent_unit);\n+        word(s.s, \"[\");\n+        commasep_cmnt(s, inconsistent, arr, |s, u| word(s.s, format!(\"{}\", *u)),\n+                      |_| lit.span);\n+        word(s.s, \"]\");\n+        end(s);\n+      }\n     }\n }\n "}, {"sha": "59dd0846b59aa38631c1c107d1bc411dc5916675", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273784e9bfa006c2651c7890d8e5fb3564b95ec4/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=273784e9bfa006c2651c7890d8e5fb3564b95ec4", "patch": "@@ -156,17 +156,14 @@ fn make_sequence_processor(sz: uint,\n \n // given a FASTA file on stdin, process sequence THREE\n fn main() {\n-    use std::rt::io::{Reader, Open};\n-    use std::rt::io::file::FileInfo;\n+    use std::rt::io::Reader;\n     use std::rt::io::native::stdio;\n+    use std::rt::io::mem::MemReader;\n     use std::rt::io::buffered::BufferedReader;\n \n     let rdr = if os::getenv(\"RUST_BENCH\").is_some() {\n-        // FIXME: Using this compile-time env variable is a crummy way to\n-        // get to this massive data set, but include_bin! chokes on it (#2598)\n-        let mut path = Path::new(env!(\"CFG_SRC_DIR\"));\n-        path.push(\"src/test/bench/shootout-k-nucleotide.data\");\n-        ~path.open_reader(Open).unwrap() as ~Reader\n+        let foo = include_bin!(\"shootout-k-nucleotide.data\");\n+        ~MemReader::new(foo.to_owned()) as ~Reader\n     } else {\n         ~stdio::stdin() as ~Reader\n     };"}]}