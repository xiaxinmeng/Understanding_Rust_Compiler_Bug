{"sha": "4d52b0f5507f9c1f86035fa1bbee2b53dcaa08b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNTJiMGY1NTA3ZjljMWY4NjAzNWZhMWJiZWUyYjUzZGNhYTA4YjY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-03-20T04:46:50Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-03-20T15:01:23Z"}, "message": "Utilize `if..let` over single `match` branch.", "tree": {"sha": "000d8aa0c82016139a95b57f8037de3a091cd5a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/000d8aa0c82016139a95b57f8037de3a091cd5a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d52b0f5507f9c1f86035fa1bbee2b53dcaa08b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d52b0f5507f9c1f86035fa1bbee2b53dcaa08b6", "html_url": "https://github.com/rust-lang/rust/commit/4d52b0f5507f9c1f86035fa1bbee2b53dcaa08b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d52b0f5507f9c1f86035fa1bbee2b53dcaa08b6/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77eb78a8c583e17f0cf98a433eb42aa0fc63ce4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/77eb78a8c583e17f0cf98a433eb42aa0fc63ce4f", "html_url": "https://github.com/rust-lang/rust/commit/77eb78a8c583e17f0cf98a433eb42aa0fc63ce4f"}], "stats": {"total": 61, "additions": 28, "deletions": 33}, "files": [{"sha": "0fb192bb4db216704033d9bbabe23515ec3a41b5", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4d52b0f5507f9c1f86035fa1bbee2b53dcaa08b6/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d52b0f5507f9c1f86035fa1bbee2b53dcaa08b6/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4d52b0f5507f9c1f86035fa1bbee2b53dcaa08b6", "patch": "@@ -1033,43 +1033,38 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n         cfg = cfg.stack_size(STACK_SIZE);\n     }\n \n-    match cfg.spawn(move || {\n-                 io::set_panic(box err);\n-                 f()\n-             })\n-             .unwrap()\n-             .join() {\n-        Ok(()) => {\n-            // fallthrough\n-        }\n-        Err(value) => {\n-            // Thread panicked without emitting a fatal diagnostic\n-            if !value.is::<errors::FatalError>() {\n-                let mut emitter = errors::emitter::BasicEmitter::stderr(errors::ColorConfig::Auto);\n-\n-                // a .span_bug or .bug call has already printed what\n-                // it wants to print.\n-                if !value.is::<errors::ExplicitBug>() {\n-                    emitter.emit(None, \"unexpected panic\", None, errors::Level::Bug);\n-                }\n-\n-                let xs = [\"the compiler unexpectedly panicked. this is a bug.\".to_string(),\n-                          format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL)];\n-                for note in &xs {\n-                    emitter.emit(None, &note[..], None, errors::Level::Note)\n-                }\n-                if let None = env::var_os(\"RUST_BACKTRACE\") {\n-                    emitter.emit(None,\n-                                 \"run with `RUST_BACKTRACE=1` for a backtrace\",\n-                                 None,\n-                                 errors::Level::Note);\n-                }\n+    let thread = cfg.spawn(move || {\n+         io::set_panic(box err);\n+         f()\n+     });\n+\n+     if let Err(value) = thread.unwrap().join() {\n+        // Thread panicked without emitting a fatal diagnostic\n+        if !value.is::<errors::FatalError>() {\n+            let mut emitter = errors::emitter::BasicEmitter::stderr(errors::ColorConfig::Auto);\n+\n+            // a .span_bug or .bug call has already printed what\n+            // it wants to print.\n+            if !value.is::<errors::ExplicitBug>() {\n+                emitter.emit(None, \"unexpected panic\", None, errors::Level::Bug);\n+            }\n \n-                println!(\"{}\", str::from_utf8(&data.lock().unwrap()).unwrap());\n+            let xs = [\"the compiler unexpectedly panicked. this is a bug.\".to_string(),\n+                      format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL)];\n+            for note in &xs {\n+                emitter.emit(None, &note[..], None, errors::Level::Note)\n+            }\n+            if let None = env::var_os(\"RUST_BACKTRACE\") {\n+                emitter.emit(None,\n+                             \"run with `RUST_BACKTRACE=1` for a backtrace\",\n+                             None,\n+                             errors::Level::Note);\n             }\n \n-            exit_on_err();\n+            println!(\"{}\", str::from_utf8(&data.lock().unwrap()).unwrap());\n         }\n+\n+        exit_on_err();\n     }\n }\n "}]}