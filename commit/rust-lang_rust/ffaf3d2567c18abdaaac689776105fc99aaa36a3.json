{"sha": "ffaf3d2567c18abdaaac689776105fc99aaa36a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYWYzZDI1NjdjMThhYmRhYWFjNjg5Nzc2MTA1ZmM5OWFhYTM2YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-22T20:54:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-22T20:54:05Z"}, "message": "Auto merge of #52069 - zackmdavis:elided_states_of_america\u2014and_to_the_re-pub-lic, r=nikomatsakis\n\nadd structured suggestions and fix false-positive for elided-lifetimes-in-paths lint\n\nThis adds structured suggestions to the elided-lifetimes-in-paths lint (introduced in Nov. 2017's #46254), prevents it from emitting a false-positive on anonymous (underscore) lifetimes (!), and adds it to the idioms-2018 group (#52041).\n\n~~As an aside, \"elided-lifetimes-in-paths\" seems like an unfortunate name, because it's not clear exactly what \"elided\" means. The motivation for this lint (see original issue #45992, and [RFC 2115](https://github.com/rust-lang/rfcs/blob/e978a8d3017a01d632f916140c98802505cd1324/text/2115-argument-lifetimes.md#motivation)) seems to be specifically about not supplying angle-bracketed lifetime arguments to non-`&` types, but (1) the phrase \"lifetime elision\" has historically also referred to the ability to not supply a lifetime name to `&` references, and (2) an `is_elided` method in the HIR returns true for anoymous/underscore lifetimes, which is _not_ what we're trying to lint here. (That naming confusion is almost certainly what led to the false positive addressed here.) Given that the lint is relatively new and is allow-by-default, is it too late to rename it ... um, _again_ (#50879)?~~\n\n~~This does _not_ address a couple of other false positives discovered in https://github.com/rust-lang/rust/issues/52041#issuecomment-402547901.~~\n\n![elided_states](https://user-images.githubusercontent.com/1076988/42302137-2bf9479c-7fce-11e8-8bd0-f29aefc802b6.png)\n\nr? @nikomatsakis\ncc @nrc @petrochenkov", "tree": {"sha": "d6616aac16765aa6de1b74a86e3ba8a1a92eb49a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6616aac16765aa6de1b74a86e3ba8a1a92eb49a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffaf3d2567c18abdaaac689776105fc99aaa36a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf3d2567c18abdaaac689776105fc99aaa36a3", "html_url": "https://github.com/rust-lang/rust/commit/ffaf3d2567c18abdaaac689776105fc99aaa36a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf3d2567c18abdaaac689776105fc99aaa36a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b7720399a9006d9d7b89c251fa37ead46f9db7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7720399a9006d9d7b89c251fa37ead46f9db7a", "html_url": "https://github.com/rust-lang/rust/commit/3b7720399a9006d9d7b89c251fa37ead46f9db7a"}, {"sha": "41d5c0ce1fb4618c98b3ed07d657bdedfc98c959", "url": "https://api.github.com/repos/rust-lang/rust/commits/41d5c0ce1fb4618c98b3ed07d657bdedfc98c959", "html_url": "https://github.com/rust-lang/rust/commit/41d5c0ce1fb4618c98b3ed07d657bdedfc98c959"}], "stats": {"total": 377, "additions": 324, "deletions": 53}, "files": [{"sha": "22a565bdd356f81ae7f6394b51d9becf5e47012e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ffaf3d2567c18abdaaac689776105fc99aaa36a3", "patch": "@@ -47,7 +47,8 @@ use hir::map::{DefKey, DefPathData, Definitions};\n use hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n use hir::def::{Def, PathResolution, PerNS};\n use hir::GenericArg;\n-use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES};\n+use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n+                    ELIDED_LIFETIMES_IN_PATHS};\n use middle::cstore::CrateStore;\n use rustc_data_structures::indexed_vec::IndexVec;\n use session::Session;\n@@ -1754,13 +1755,40 @@ impl<'a> LoweringContext<'a> {\n             GenericArg::Lifetime(_) => true,\n             _ => false,\n         });\n+        let first_generic_span = generic_args.args.iter().map(|a| a.span())\n+            .chain(generic_args.bindings.iter().map(|b| b.span)).next();\n         if !generic_args.parenthesized && !has_lifetimes {\n             generic_args.args =\n                 self.elided_path_lifetimes(path_span, expected_lifetimes)\n                     .into_iter()\n                     .map(|lt| GenericArg::Lifetime(lt))\n                     .chain(generic_args.args.into_iter())\n-                    .collect();\n+                .collect();\n+            if expected_lifetimes > 0 && param_mode == ParamMode::Explicit {\n+                let anon_lt_suggestion = vec![\"'_\"; expected_lifetimes].join(\", \");\n+                let no_ty_args = generic_args.args.len() == expected_lifetimes;\n+                let no_bindings = generic_args.bindings.is_empty();\n+                let (incl_angl_brckt, insertion_span, suggestion) = if no_ty_args && no_bindings {\n+                    // If there are no (non-implicit) generic args or associated-type\n+                    // bindings, our suggestion includes the angle brackets\n+                    (true, path_span.shrink_to_hi(), format!(\"<{}>\", anon_lt_suggestion))\n+                } else {\n+                    // Otherwise\u2014sorry, this is kind of gross\u2014we need to infer the\n+                    // place to splice in the `'_, ` from the generics that do exist\n+                    let first_generic_span = first_generic_span\n+                        .expect(\"already checked that type args or bindings exist\");\n+                    (false, first_generic_span.shrink_to_lo(), format!(\"{}, \", anon_lt_suggestion))\n+                };\n+                self.sess.buffer_lint_with_diagnostic(\n+                    ELIDED_LIFETIMES_IN_PATHS,\n+                    CRATE_NODE_ID,\n+                    path_span,\n+                    \"hidden lifetime parameters in types are deprecated\",\n+                    builtin::BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+                        expected_lifetimes, path_span, incl_angl_brckt, insertion_span, suggestion\n+                    )\n+                );\n+            }\n         }\n \n         hir::PathSegment::new("}, {"sha": "47c5f464131afc4b3a6d400ad266eeeea681c137", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=ffaf3d2567c18abdaaac689776105fc99aaa36a3", "patch": "@@ -254,7 +254,7 @@ declare_lint! {\n declare_lint! {\n     pub ELIDED_LIFETIMES_IN_PATHS,\n     Allow,\n-    \"hidden lifetime parameters are deprecated, try `Foo<'_>`\"\n+    \"hidden lifetime parameters in types are deprecated\"\n }\n \n declare_lint! {\n@@ -402,6 +402,7 @@ pub enum BuiltinLintDiagnostics {\n     AbsPathWithModule(Span),\n     DuplicatedMacroExports(ast::Ident, Span, Span),\n     ProcMacroDeriveResolutionFallback(Span),\n+    ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n }\n \n impl BuiltinLintDiagnostics {\n@@ -442,6 +443,41 @@ impl BuiltinLintDiagnostics {\n                 db.span_label(span, \"names from parent modules are not \\\n                                      accessible without an explicit import\");\n             }\n+            BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+                n, path_span, incl_angl_brckt, insertion_span, anon_lts\n+            ) => {\n+                let (replace_span, suggestion) = if incl_angl_brckt {\n+                    (insertion_span, anon_lts)\n+                } else {\n+                    // When possible, prefer a suggestion that replaces the whole\n+                    // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n+                    // at a point (which makes for an ugly/confusing label)\n+                    if let Ok(snippet) = sess.codemap().span_to_snippet(path_span) {\n+                        // But our spans can get out of whack due to macros; if the place we think\n+                        // we want to insert `'_` isn't even within the path expression's span, we\n+                        // should bail out of making any suggestion rather than panicking on a\n+                        // subtract-with-overflow or string-slice-out-out-bounds (!)\n+                        // FIXME: can we do better?\n+                        if insertion_span.lo().0 < path_span.lo().0 {\n+                            return;\n+                        }\n+                        let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n+                        if insertion_index > snippet.len() {\n+                            return;\n+                        }\n+                        let (before, after) = snippet.split_at(insertion_index);\n+                        (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n+                    } else {\n+                        (insertion_span, anon_lts)\n+                    }\n+                };\n+                db.span_suggestion_with_applicability(\n+                    replace_span,\n+                    &format!(\"indicate the anonymous lifetime{}\", if n >= 2 { \"s\" } else { \"\" }),\n+                    suggestion,\n+                    Applicability::MachineApplicable\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "1309540717c2b19bcd3026cff0bf99703fc85b5d", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=ffaf3d2567c18abdaaac689776105fc99aaa36a3", "patch": "@@ -609,7 +609,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // resolved the same as the `'_` in `&'_ Foo`.\n                         //\n                         // cc #48468\n-                        self.resolve_elided_lifetimes(vec![lifetime], false)\n+                        self.resolve_elided_lifetimes(vec![lifetime])\n                     }\n                     LifetimeName::Param(_) | LifetimeName::Static => {\n                         // If the user wrote an explicit name, use that.\n@@ -893,7 +893,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         if lifetime_ref.is_elided() {\n-            self.resolve_elided_lifetimes(vec![lifetime_ref], false);\n+            self.resolve_elided_lifetimes(vec![lifetime_ref]);\n             return;\n         }\n         if lifetime_ref.is_static() {\n@@ -1728,7 +1728,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             _ => None,\n         }).collect();\n         if elide_lifetimes {\n-            self.resolve_elided_lifetimes(lifetimes, true);\n+            self.resolve_elided_lifetimes(lifetimes);\n         } else {\n             lifetimes.iter().for_each(|lt| self.visit_lifetime(lt));\n         }\n@@ -2106,26 +2106,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     fn resolve_elided_lifetimes(&mut self,\n-                                lifetime_refs: Vec<&'tcx hir::Lifetime>,\n-                                deprecated: bool) {\n+                                lifetime_refs: Vec<&'tcx hir::Lifetime>) {\n         if lifetime_refs.is_empty() {\n             return;\n         }\n \n         let span = lifetime_refs[0].span;\n-        let id = lifetime_refs[0].id;\n         let mut late_depth = 0;\n         let mut scope = self.scope;\n-        if deprecated {\n-            self.tcx\n-                .struct_span_lint_node(\n-                    lint::builtin::ELIDED_LIFETIMES_IN_PATHS,\n-                    id,\n-                    span,\n-                    &format!(\"hidden lifetime parameters are deprecated, try `Foo<'_>`\"),\n-                )\n-                .emit();\n-        }\n         let error = loop {\n             match *scope {\n                 // Do not assign any resolution, it will be inferred."}, {"sha": "cab51fbd98775cbb1372f7ccc619898741b1e59a", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=ffaf3d2567c18abdaaac689776105fc99aaa36a3", "patch": "@@ -44,7 +44,8 @@ extern crate syntax_pos;\n \n use rustc::lint;\n use rustc::lint::{LateContext, LateLintPass, LintPass, LintArray};\n-use rustc::lint::builtin::{BARE_TRAIT_OBJECTS, ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE};\n+use rustc::lint::builtin::{BARE_TRAIT_OBJECTS, ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n+                           ELIDED_LIFETIMES_IN_PATHS};\n use rustc::lint::builtin::MACRO_USE_EXTERN_CRATE;\n use rustc::session;\n use rustc::util;\n@@ -195,6 +196,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNREACHABLE_PUB,\n                     UNUSED_EXTERN_CRATES,\n                     MACRO_USE_EXTERN_CRATE,\n+                    ELIDED_LIFETIMES_IN_PATHS,\n                     ELLIPSIS_INCLUSIVE_RANGE_PATTERNS);\n \n     // Guidelines for creating a future incompatibility lint:"}, {"sha": "c9381e6350f2bc64926c69a4df33f4676eacc4be", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.fixed", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.fixed?ref=ffaf3d2567c18abdaaac689776105fc99aaa36a3", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+// compile-flags: --edition 2018\n+\n+#![allow(unused)]\n+#![deny(elided_lifetimes_in_paths)]\n+//~^ NOTE lint level defined here\n+\n+use std::cell::{RefCell, Ref};\n+\n+\n+struct Foo<'a> { x: &'a u32 }\n+\n+fn foo(x: &Foo<'_>) {\n+    //~^ ERROR hidden lifetime parameters in types are deprecated\n+    //~| HELP indicate the anonymous lifetime\n+}\n+\n+fn bar(x: &Foo<'_>) {}\n+\n+\n+struct Wrapped<'a>(&'a str);\n+\n+struct WrappedWithBow<'a> {\n+    gift: &'a str\n+}\n+\n+struct MatchedSet<'a, 'b> {\n+    one: &'a str,\n+    another: &'b str,\n+}\n+\n+fn wrap_gift(gift: &str) -> Wrapped<'_> {\n+    //~^ ERROR hidden lifetime parameters in types are deprecated\n+    //~| HELP indicate the anonymous lifetime\n+    Wrapped(gift)\n+}\n+\n+fn wrap_gift_with_bow(gift: &str) -> WrappedWithBow<'_> {\n+    //~^ ERROR hidden lifetime parameters in types are deprecated\n+    //~| HELP indicate the anonymous lifetime\n+    WrappedWithBow { gift }\n+}\n+\n+fn inspect_matched_set(set: MatchedSet<'_, '_>) {\n+    //~^ ERROR hidden lifetime parameters in types are deprecated\n+    //~| HELP indicate the anonymous lifetime\n+    println!(\"{} {}\", set.one, set.another);\n+}\n+\n+macro_rules! autowrapper {\n+    ($type_name:ident, $fn_name:ident, $lt:lifetime) => {\n+        struct $type_name<$lt> {\n+            gift: &$lt str\n+        }\n+\n+        fn $fn_name(gift: &str) -> $type_name<'_> {\n+            //~^ ERROR hidden lifetime parameters in types are deprecated\n+            //~| HELP indicate the anonymous lifetime\n+            $type_name { gift }\n+        }\n+    }\n+}\n+\n+autowrapper!(Autowrapped, autowrap_gift, 'a);\n+//~^ NOTE in this expansion of autowrapper!\n+//~| NOTE in this expansion of autowrapper!\n+\n+macro_rules! anytuple_ref_ty {\n+    ($($types:ty),*) => {\n+        Ref<'_, ($($types),*)>\n+        //~^ ERROR hidden lifetime parameters in types are deprecated\n+        //~| HELP indicate the anonymous lifetime\n+    }\n+}\n+\n+fn main() {\n+    let honesty = RefCell::new((4, 'e'));\n+    let loyalty: Ref<'_, (u32, char)> = honesty.borrow();\n+    //~^ ERROR hidden lifetime parameters in types are deprecated\n+    //~| HELP indicate the anonymous lifetime\n+    let generosity = Ref::map(loyalty, |t| &t.0);\n+\n+    let laughter = RefCell::new((true, \"magic\"));\n+    let yellow: anytuple_ref_ty!(bool, &str) = laughter.borrow();\n+    //~^ NOTE in this expansion of anytuple_ref_ty!\n+    //~| NOTE in this expansion of anytuple_ref_ty!\n+}"}, {"sha": "8151dd01a98d8d8108d81ab6f0e0a4eb77764882", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.rs?ref=ffaf3d2567c18abdaaac689776105fc99aaa36a3", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+// compile-flags: --edition 2018\n+\n+#![allow(unused)]\n+#![deny(elided_lifetimes_in_paths)]\n+//~^ NOTE lint level defined here\n+\n+use std::cell::{RefCell, Ref};\n+\n+\n+struct Foo<'a> { x: &'a u32 }\n+\n+fn foo(x: &Foo) {\n+    //~^ ERROR hidden lifetime parameters in types are deprecated\n+    //~| HELP indicate the anonymous lifetime\n+}\n+\n+fn bar(x: &Foo<'_>) {}\n+\n+\n+struct Wrapped<'a>(&'a str);\n+\n+struct WrappedWithBow<'a> {\n+    gift: &'a str\n+}\n+\n+struct MatchedSet<'a, 'b> {\n+    one: &'a str,\n+    another: &'b str,\n+}\n+\n+fn wrap_gift(gift: &str) -> Wrapped {\n+    //~^ ERROR hidden lifetime parameters in types are deprecated\n+    //~| HELP indicate the anonymous lifetime\n+    Wrapped(gift)\n+}\n+\n+fn wrap_gift_with_bow(gift: &str) -> WrappedWithBow {\n+    //~^ ERROR hidden lifetime parameters in types are deprecated\n+    //~| HELP indicate the anonymous lifetime\n+    WrappedWithBow { gift }\n+}\n+\n+fn inspect_matched_set(set: MatchedSet) {\n+    //~^ ERROR hidden lifetime parameters in types are deprecated\n+    //~| HELP indicate the anonymous lifetime\n+    println!(\"{} {}\", set.one, set.another);\n+}\n+\n+macro_rules! autowrapper {\n+    ($type_name:ident, $fn_name:ident, $lt:lifetime) => {\n+        struct $type_name<$lt> {\n+            gift: &$lt str\n+        }\n+\n+        fn $fn_name(gift: &str) -> $type_name {\n+            //~^ ERROR hidden lifetime parameters in types are deprecated\n+            //~| HELP indicate the anonymous lifetime\n+            $type_name { gift }\n+        }\n+    }\n+}\n+\n+autowrapper!(Autowrapped, autowrap_gift, 'a);\n+//~^ NOTE in this expansion of autowrapper!\n+//~| NOTE in this expansion of autowrapper!\n+\n+macro_rules! anytuple_ref_ty {\n+    ($($types:ty),*) => {\n+        Ref<($($types),*)>\n+        //~^ ERROR hidden lifetime parameters in types are deprecated\n+        //~| HELP indicate the anonymous lifetime\n+    }\n+}\n+\n+fn main() {\n+    let honesty = RefCell::new((4, 'e'));\n+    let loyalty: Ref<(u32, char)> = honesty.borrow();\n+    //~^ ERROR hidden lifetime parameters in types are deprecated\n+    //~| HELP indicate the anonymous lifetime\n+    let generosity = Ref::map(loyalty, |t| &t.0);\n+\n+    let laughter = RefCell::new((true, \"magic\"));\n+    let yellow: anytuple_ref_ty!(bool, &str) = laughter.borrow();\n+    //~^ NOTE in this expansion of anytuple_ref_ty!\n+    //~| NOTE in this expansion of anytuple_ref_ty!\n+}"}, {"sha": "e7a1b42b8c9ccff504e8069e48b6d72c6f4ce3f9", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffaf3d2567c18abdaaac689776105fc99aaa36a3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr?ref=ffaf3d2567c18abdaaac689776105fc99aaa36a3", "patch": "@@ -0,0 +1,56 @@\n+error: hidden lifetime parameters in types are deprecated\n+  --> $DIR/elided-lifetimes.rs:23:12\n+   |\n+LL | fn foo(x: &Foo) {\n+   |            ^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |\n+note: lint level defined here\n+  --> $DIR/elided-lifetimes.rs:15:9\n+   |\n+LL | #![deny(elided_lifetimes_in_paths)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: hidden lifetime parameters in types are deprecated\n+  --> $DIR/elided-lifetimes.rs:42:29\n+   |\n+LL | fn wrap_gift(gift: &str) -> Wrapped {\n+   |                             ^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+\n+error: hidden lifetime parameters in types are deprecated\n+  --> $DIR/elided-lifetimes.rs:48:38\n+   |\n+LL | fn wrap_gift_with_bow(gift: &str) -> WrappedWithBow {\n+   |                                      ^^^^^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+\n+error: hidden lifetime parameters in types are deprecated\n+  --> $DIR/elided-lifetimes.rs:54:29\n+   |\n+LL | fn inspect_matched_set(set: MatchedSet) {\n+   |                             ^^^^^^^^^^- help: indicate the anonymous lifetimes: `<'_, '_>`\n+\n+error: hidden lifetime parameters in types are deprecated\n+  --> $DIR/elided-lifetimes.rs:66:36\n+   |\n+LL |         fn $fn_name(gift: &str) -> $type_name {\n+   |                                    ^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+...\n+LL | autowrapper!(Autowrapped, autowrap_gift, 'a);\n+   | --------------------------------------------- in this macro invocation\n+\n+error: hidden lifetime parameters in types are deprecated\n+  --> $DIR/elided-lifetimes.rs:88:18\n+   |\n+LL |     let loyalty: Ref<(u32, char)> = honesty.borrow();\n+   |                  ^^^^^^^^^^^^^^^^ help: indicate the anonymous lifetime: `Ref<'_, (u32, char)>`\n+\n+error: hidden lifetime parameters in types are deprecated\n+  --> $DIR/elided-lifetimes.rs:80:9\n+   |\n+LL |         Ref<($($types),*)>\n+   |         ^^^^^^^^^^^^^^^^^^ help: indicate the anonymous lifetime: `Ref<'_, ($($types),*)>`\n+...\n+LL |     let yellow: anytuple_ref_ty!(bool, &str) = laughter.borrow();\n+   |                 ---------------------------- in this macro invocation\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "3739ffe6a2648535f22c1f27fca83d3df9d744bc", "filename": "src/test/ui/in-band-lifetimes/ellided-lifetimes.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.rs?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-#![allow(warnings)]\n-#![allow(unused_variables, dead_code, unused, bad_style)]\n-#![deny(elided_lifetimes_in_paths)]\n-\n-struct Foo<'a> { x: &'a u32 }\n-fn foo(x: &Foo) {\n-    //~^ ERROR: hidden lifetime parameters are deprecated, try `Foo<'_>`\n-}\n-\n-fn main() {}"}, {"sha": "c2bd2c261ac46df8fe9a9d76685c641d417019f1", "filename": "src/test/ui/in-band-lifetimes/ellided-lifetimes.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7720399a9006d9d7b89c251fa37ead46f9db7a/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.stderr?ref=3b7720399a9006d9d7b89c251fa37ead46f9db7a", "patch": "@@ -1,14 +0,0 @@\n-error: hidden lifetime parameters are deprecated, try `Foo<'_>`\n-  --> $DIR/ellided-lifetimes.rs:15:12\n-   |\n-LL | fn foo(x: &Foo) {\n-   |            ^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/ellided-lifetimes.rs:12:9\n-   |\n-LL | #![deny(elided_lifetimes_in_paths)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}]}