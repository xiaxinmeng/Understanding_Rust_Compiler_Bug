{"sha": "cadc67e8fd942e0a3896ed0d5375444b221e60d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZGM2N2U4ZmQ5NDJlMGEzODk2ZWQwZDUzNzU0NDRiMjIxZTYwZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-28T20:12:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-28T20:12:59Z"}, "message": "Auto merge of #24777 - alexcrichton:musl, r=brson\n\nThese commits build on [some great work on reddit](http://www.reddit.com/r/rust/comments/33boew/weekend_experiment_link_rust_programs_against/) for adding MUSL support to the compiler. This goal of this PR is to enable a `--target x86_64-unknown-linux-musl` argument to the compiler to work A-OK. The outcome here is that there are 0 compile-time dependencies for a MUSL-targeting build *except for a linker*. Currently this also assumes that MUSL is being used for statically linked binaries so there is no support for dynamically linked binaries with MUSL.\r\n\r\nMUSL support largely just entailed munging around with the linker and where libs are located, and the major highlights are:\r\n\r\n* The entirety of `libc.a` is included in `liblibc.rlib` (statically included as an archive).\r\n* The entirety of `libunwind.a` is included in `libstd.rlib` (like with liblibc).\r\n* The target specification for MUSL passes a number of ... flavorful options! Each option is documented in the relevant commit.\r\n* The entire test suite currently passes with MUSL as a target, except for:\r\n  * Dynamic linking tests are all ignored as it's not supported with MUSL\r\n  * Stack overflow detection is not working MUSL yet (I'm not sure why)\r\n* There is a language change included in this PR to add a `target_env` `#[cfg]` directive. This is used to conditionally build code for only MUSL (or for linux distros not MUSL). I highly suspect that this will also be used by Windows to target MSVC instead of a MinGW-based toolchain.\r\n\r\nTo build a compiler targeting MUSL you need to follow these steps:\r\n\r\n1. Clone the current MUSL repo from `git://git.musl-libc.org/musl`. Build this as usual and install it.\r\n2. Clone and build LLVM's [libcxxabi](http://libcxxabi.llvm.org/) library. Only the `libunwind.a` artifact is needed. I have tried using upstream libunwind's source repo but I have not gotten unwinding to work with it unfortunately. Move `libunwind.a` adjacent to MUSL's `libc.a`\r\n3. Configure a Rust checkout with `--target=x86_64-unknown-linux-musl --musl-root=$MUSL_ROOT` where `MUSL_ROOT` is where you installed MUSL in step 1.\r\n\r\nI hope to improve building a copy of libunwind as it's still a little sketchy and difficult to do today, but other than that everything should \"just work\"! This PR is not intended to include 100% comprehensive support for MUSL, as future modifications will probably be necessary.", "tree": {"sha": "5c4b0a05f19b6acf2605b4cb91f9c44ba4de0b13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c4b0a05f19b6acf2605b4cb91f9c44ba4de0b13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cadc67e8fd942e0a3896ed0d5375444b221e60d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cadc67e8fd942e0a3896ed0d5375444b221e60d7", "html_url": "https://github.com/rust-lang/rust/commit/cadc67e8fd942e0a3896ed0d5375444b221e60d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cadc67e8fd942e0a3896ed0d5375444b221e60d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441b3f0c26c2e30ddb012be968141da7ce7d9d62", "url": "https://api.github.com/repos/rust-lang/rust/commits/441b3f0c26c2e30ddb012be968141da7ce7d9d62", "html_url": "https://github.com/rust-lang/rust/commit/441b3f0c26c2e30ddb012be968141da7ce7d9d62"}, {"sha": "247842b741db380fbd0e0d73f37e86f6c561ca9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/247842b741db380fbd0e0d73f37e86f6c561ca9d", "html_url": "https://github.com/rust-lang/rust/commit/247842b741db380fbd0e0d73f37e86f6c561ca9d"}], "stats": {"total": 450, "additions": 282, "deletions": 168}, "files": [{"sha": "f4e1d41276aa959cfd98e94f64a24ef0bc8c34db", "filename": "configure", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/configure", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -583,6 +583,7 @@ valopt jemalloc-root \"\" \"set directory where libjemalloc_pic.a is located\"\n valopt build \"${DEFAULT_BUILD}\" \"GNUs ./configure syntax LLVM build triple\"\n valopt android-cross-path \"/opt/ndk_standalone\" \"Android NDK standalone path\"\n valopt release-channel \"dev\" \"the name of the release channel to build\"\n+valopt musl-root \"/usr/local\" \"MUSL root installation directory\"\n \n # Many of these are saved below during the \"writing configuration\" step\n # (others are conditionally saved).\n@@ -1058,6 +1059,13 @@ do\n             fi\n             ;;\n \n+\n+        *-musl)\n+            if [ ! -f $CFG_MUSL_ROOT/lib/libc.a ]\n+            then\n+                err \"musl libc $CFG_MUSL_ROOT/lib/libc.a not found\"\n+            fi\n+            ;;\n         *)\n             ;;\n     esac"}, {"sha": "7767129a5e21821e60e477205e0ec446b15b3237", "filename": "mk/cfg/aarch64-apple-ios.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Faarch64-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Faarch64-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-apple-ios.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -20,16 +20,12 @@ CFG_GCCISH_CFLAGS_aarch64-apple-ios := -Wall -Werror -fPIC $(CFG_IOS_SDK_FLAGS_a\n CFG_GCCISH_CXXFLAGS_aarch64-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios) -I$(CFG_IOS_SDK_aarch64-apple-ios)/usr/include/c++/4.2.1\n CFG_GCCISH_LINK_FLAGS_aarch64-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_aarch64-apple-ios) -Wl,-no_compact_unwind\n CFG_GCCISH_DEF_FLAG_aarch64-apple-ios := -Wl,-exported_symbols_list,\n-CFG_GCCISH_PRE_LIB_FLAGS_aarch64-apple-ios :=\n-CFG_GCCISH_POST_LIB_FLAGS_aarch64-apple-ios :=\n-CFG_DEF_SUFFIX_aarch64-apple-ios := .darwin.def\n CFG_LLC_FLAGS_aarch64-apple-ios := -mattr=+neon,+cyclone,+fp-armv8\n CFG_INSTALL_NAME_aarch64-apple-ios = -Wl,-install_name,@rpath/$(1)\n CFG_LIBUV_LINK_FLAGS_aarch64-apple-ios =\n CFG_EXE_SUFFIX_aarch64-apple-ios :=\n CFG_WINDOWSY_aarch64-apple-ios :=\n CFG_UNIXY_aarch64-apple-ios := 1\n-CFG_PATH_MUNGE_aarch64-apple-ios := true\n CFG_LDPATH_aarch64-apple-ios :=\n CFG_RUN_aarch64-apple-ios = $(2)\n CFG_RUN_TARG_aarch64-apple-ios = $(call CFG_RUN_aarch64-apple-ios,,$(2))"}, {"sha": "d7a1405c3d0a87036bf199887ee3fea99f6c4497", "filename": "mk/cfg/aarch64-linux-android.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Faarch64-linux-android.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Faarch64-linux-android.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-linux-android.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -13,15 +13,11 @@ CFG_GCCISH_CFLAGS_aarch64-linux-android := -Wall -g -fPIC -D__aarch64__ -DANDROI\n CFG_GCCISH_CXXFLAGS_aarch64-linux-android := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_aarch64-linux-android := -shared -fPIC -ldl -g -lm -lsupc++\n CFG_GCCISH_DEF_FLAG_aarch64-linux-android := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_aarch64-linux-android := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_aarch64-linux-android := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_aarch64-linux-android := .android.def\n CFG_LLC_FLAGS_aarch64-linux-android :=\n CFG_INSTALL_NAME_aarch64-linux-android =\n CFG_EXE_SUFFIX_aarch64-linux-android :=\n CFG_WINDOWSY_aarch64-linux-android :=\n CFG_UNIXY_aarch64-linux-android := 1\n-CFG_PATH_MUNGE_aarch64-linux-android := true\n CFG_LDPATH_aarch64-linux-android :=\n CFG_RUN_aarch64-linux-android=\n CFG_RUN_TARG_aarch64-linux-android="}, {"sha": "6637423e4951a9826c7b3004d1c939a4713cad47", "filename": "mk/cfg/aarch64-unknown-linux-gnu.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -13,15 +13,11 @@ CFG_GCCISH_CFLAGS_aarch64-unknown-linux-gnu := -Wall -g -fPIC -D__aarch64__ $(CF\n CFG_GCCISH_CXXFLAGS_aarch64-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_aarch64-unknown-linux-gnu := -shared -fPIC -g\n CFG_GCCISH_DEF_FLAG_aarch64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_aarch64-unknown-linux-gnu := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_aarch64-unknown-linux-gnu := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_aarch64-unknown-linux-gnu := .linux.def\n CFG_LLC_FLAGS_aarch64-unknown-linux-gnu :=\n CFG_INSTALL_NAME_aarch64-unknown-linux-gnu =\n CFG_EXE_SUFFIX_aarch64-unknown-linux-gnu :=\n CFG_WINDOWSY_aarch64-unknown-linux-gnu :=\n CFG_UNIXY_aarch64-unknown-linux-gnu := 1\n-CFG_PATH_MUNGE_aarch64-unknown-linux-gnu := true\n CFG_LDPATH_aarch64-unknown-linux-gnu :=\n CFG_RUN_aarch64-unknown-linux-gnu=$(2)\n CFG_RUN_TARG_aarch64-unknown-linux-gnu=$(call CFG_RUN_aarch64-unknown-linux-gnu,,$(2))"}, {"sha": "fdd38ba75fe585e02d9491b2a154dcee786eec8b", "filename": "mk/cfg/arm-linux-androideabi.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Farm-linux-androideabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Farm-linux-androideabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-linux-androideabi.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -12,15 +12,11 @@ CFG_GCCISH_CFLAGS_arm-linux-androideabi := -Wall -g -fPIC -D__arm__ -DANDROID -D\n CFG_GCCISH_CXXFLAGS_arm-linux-androideabi := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_arm-linux-androideabi := -shared -fPIC -ldl -g -lm -lsupc++\n CFG_GCCISH_DEF_FLAG_arm-linux-androideabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_arm-linux-androideabi := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_arm-linux-androideabi := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_arm-linux-androideabi := .android.def\n CFG_LLC_FLAGS_arm-linux-androideabi :=\n CFG_INSTALL_NAME_arm-linux-androideabi =\n CFG_EXE_SUFFIX_arm-linux-androideabi :=\n CFG_WINDOWSY_arm-linux-androideabi :=\n CFG_UNIXY_arm-linux-androideabi := 1\n-CFG_PATH_MUNGE_arm-linux-androideabi := true\n CFG_LDPATH_arm-linux-androideabi :=\n CFG_RUN_arm-linux-androideabi=\n CFG_RUN_TARG_arm-linux-androideabi="}, {"sha": "9a91097458e90fdd101dbafc0d51e777935b78ad", "filename": "mk/cfg/arm-unknown-linux-gnueabi.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Farm-unknown-linux-gnueabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Farm-unknown-linux-gnueabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-gnueabi.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -13,15 +13,11 @@ CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__ -mfpu=vf\n CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabi := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-gnueabi := -shared -fPIC -g\n CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_arm-unknown-linux-gnueabi := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_arm-unknown-linux-gnueabi := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_arm-unknown-linux-gnueabi := .linux.def\n CFG_LLC_FLAGS_arm-unknown-linux-gnueabi :=\n CFG_INSTALL_NAME_arm-unknown-linux-gnueabi =\n CFG_EXE_SUFFIX_arm-unknown-linux-gnueabi :=\n CFG_WINDOWSY_arm-unknown-linux-gnueabi :=\n CFG_UNIXY_arm-unknown-linux-gnueabi := 1\n-CFG_PATH_MUNGE_arm-unknown-linux-gnueabi := true\n CFG_LDPATH_arm-unknown-linux-gnueabi :=\n CFG_RUN_arm-unknown-linux-gnueabi=$(2)\n CFG_RUN_TARG_arm-unknown-linux-gnueabi=$(call CFG_RUN_arm-unknown-linux-gnueabi,,$(2))"}, {"sha": "0bd661ea00db22a8b2484b8f98da1bc97e993438", "filename": "mk/cfg/arm-unknown-linux-gnueabihf.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Farm-unknown-linux-gnueabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Farm-unknown-linux-gnueabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-gnueabihf.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -13,15 +13,11 @@ CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabihf := -Wall -g -fPIC -D__arm__ $(CFLA\n CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabihf := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-gnueabihf := -shared -fPIC -g\n CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabihf := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_arm-unknown-linux-gnueabihf := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_arm-unknown-linux-gnueabihf := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_arm-unknown-linux-gnueabihf := .linux.def\n CFG_LLC_FLAGS_arm-unknown-linux-gnueabihf :=\n CFG_INSTALL_NAME_ar,-unknown-linux-gnueabihf =\n CFG_EXE_SUFFIX_arm-unknown-linux-gnueabihf :=\n CFG_WINDOWSY_arm-unknown-linux-gnueabihf :=\n CFG_UNIXY_arm-unknown-linux-gnueabihf := 1\n-CFG_PATH_MUNGE_arm-unknown-linux-gnueabihf := true\n CFG_LDPATH_arm-unknown-linux-gnueabihf :=\n CFG_RUN_arm-unknown-linux-gnueabihf=$(2)\n CFG_RUN_TARG_arm-unknown-linux-gnueabihf=$(call CFG_RUN_arm-unknown-linux-gnueabihf,,$(2))"}, {"sha": "d4696976574e94c52252701a8559f7ac0fbd6b62", "filename": "mk/cfg/armv7-apple-ios.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Farmv7-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Farmv7-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-apple-ios.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -19,15 +19,11 @@ CFG_GCCISH_CFLAGS_armv7-apple-ios := -Wall -Werror -g -fPIC $(CFG_IOS_SDK_FLAGS_\n CFG_GCCISH_CXXFLAGS_armv7-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_armv7-apple-ios) -I$(CFG_IOS_SDK_armv7-apple-ios)/usr/include/c++/4.2.1\n CFG_GCCISH_LINK_FLAGS_armv7-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_armv7-apple-ios) -Wl,-no_compact_unwind\n CFG_GCCISH_DEF_FLAG_armv7-apple-ios := -Wl,-exported_symbols_list,\n-CFG_GCCISH_PRE_LIB_FLAGS_armv7-apple-ios :=\n-CFG_GCCISH_POST_LIB_FLAGS_armv7-apple-ios :=\n-CFG_DEF_SUFFIX_armv7-apple-ios := .darwin.def\n CFG_LLC_FLAGS_armv7-apple-ios := -mattr=+vfp3,+v7,+neon -march=arm\n CFG_INSTALL_NAME_armv7-apple-ios = -Wl,-install_name,@rpath/$(1)\n CFG_EXE_SUFFIX_armv7-apple-ios :=\n CFG_WINDOWSY_armv7-apple-ios :=\n CFG_UNIXY_armv7-apple-ios := 1\n-CFG_PATH_MUNGE_armv7-apple-ios := true\n CFG_LDPATH_armv7-apple-ios :=\n CFG_RUN_armv7-apple-ios = $(2)\n CFG_RUN_TARG_armv7-apple-ios = $(call CFG_RUN_armv7-apple-ios,,$(2))"}, {"sha": "96ca07648949ff500c50b8bfac253527a1564658", "filename": "mk/cfg/armv7s-apple-ios.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Farmv7s-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Farmv7s-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7s-apple-ios.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -19,15 +19,11 @@ CFG_GCCISH_CFLAGS_armv7s-apple-ios := -Wall -Werror -g -fPIC $(CFG_IOS_SDK_FLAGS\n CFG_GCCISH_CXXFLAGS_armv7s-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios) -I$(CFG_IOS_SDK_armv7s-apple-ios)/usr/include/c++/4.2.1\n CFG_GCCISH_LINK_FLAGS_armv7s-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_armv7s-apple-ios) -Wl,-no_compact_unwind\n CFG_GCCISH_DEF_FLAG_armv7s-apple-ios := -Wl,-exported_symbols_list,\n-CFG_GCCISH_PRE_LIB_FLAGS_armv7s-apple-ios :=\n-CFG_GCCISH_POST_LIB_FLAGS_armv7s-apple-ios :=\n-CFG_DEF_SUFFIX_armv7s-apple-ios := .darwin.def\n CFG_LLC_FLAGS_armv7s-apple-ios := -mattr=+vfp4,+v7,+neon\n CFG_INSTALL_NAME_armv7s-apple-ios = -Wl,-install_name,@rpath/$(1)\n CFG_EXE_SUFFIX_armv7s-apple-ios :=\n CFG_WINDOWSY_armv7s-apple-ios :=\n CFG_UNIXY_armv7s-apple-ios := 1\n-CFG_PATH_MUNGE_armv7s-apple-ios := true\n CFG_LDPATH_armv7s-apple-ios :=\n CFG_RUN_armv7s-apple-ios = $(2)\n CFG_RUN_TARG_armv7s-apple-ios = $(call CFG_RUN_armv7s-apple-ios,,$(2))"}, {"sha": "373e2e3b65d15e6d7e39e724ede7498f2a532bf0", "filename": "mk/cfg/i386-apple-ios.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fi386-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fi386-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi386-apple-ios.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -18,15 +18,11 @@ CFG_GCCISH_CFLAGS_i386-apple-ios := -Wall -Werror -g -fPIC -m32 $(CFG_IOSSIM_FLA\n CFG_GCCISH_CXXFLAGS_i386-apple-ios := -fno-rtti $(CFG_IOSSIM_FLAGS_i386-apple-ios) -I$(CFG_IOSSIM_SDK_i386-apple-ios)/usr/include/c++/4.2.1\n CFG_GCCISH_LINK_FLAGS_i386-apple-ios := -lpthread -m32 -Wl,-no_compact_unwind -m32 -Wl,-syslibroot $(CFG_IOSSIM_SDK_i386-apple-ios)\n CFG_GCCISH_DEF_FLAG_i386-apple-ios := -Wl,-exported_symbols_list,\n-CFG_GCCISH_PRE_LIB_FLAGS_i386-apple-ios :=\n-CFG_GCCISH_POST_LIB_FLAGS_i386-apple-ios :=\n-CFG_DEF_SUFFIX_i386-apple-ios := .darwin.def\n CFG_LLC_FLAGS_i386-apple-ios =\n CFG_INSTALL_NAME_i386-apple-ios = -Wl,-install_name,@rpath/$(1)\n CFG_EXE_SUFFIX_i386-apple-ios :=\n CFG_WINDOWSY_i386-apple-ios :=\n CFG_UNIXY_i386-apple-ios := 1\n-CFG_PATH_MUNGE_i386-apple-ios = :true\n CFG_LDPATH_i386-apple-ios =\n CFG_RUN_i386-apple-ios = $(2)\n CFG_RUN_TARG_i386-apple-ios = $(call CFG_RUN_i386-apple-ios,,$(2))"}, {"sha": "7ebb492bb21fe1c9d8a50dd4ac697529d85223dc", "filename": "mk/cfg/i686-apple-darwin.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fi686-apple-darwin.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fi686-apple-darwin.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-apple-darwin.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -12,15 +12,11 @@ CFG_GCCISH_CFLAGS_i686-apple-darwin := -Wall -Werror -g -fPIC -m32 -arch i386 $(\n CFG_GCCISH_CXXFLAGS_i686-apple-darwin := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_i686-apple-darwin := -dynamiclib -pthread  -framework CoreServices -m32\n CFG_GCCISH_DEF_FLAG_i686-apple-darwin := -Wl,-exported_symbols_list,\n-CFG_GCCISH_PRE_LIB_FLAGS_i686-apple-darwin :=\n-CFG_GCCISH_POST_LIB_FLAGS_i686-apple-darwin :=\n-CFG_DEF_SUFFIX_i686-apple-darwin := .darwin.def\n CFG_LLC_FLAGS_i686-apple-darwin :=\n CFG_INSTALL_NAME_i686-apple-darwin = -Wl,-install_name,@rpath/$(1)\n CFG_EXE_SUFFIX_i686-apple-darwin :=\n CFG_WINDOWSY_i686-apple-darwin :=\n CFG_UNIXY_i686-apple-darwin := 1\n-CFG_PATH_MUNGE_i686-apple-darwin := true\n CFG_LDPATH_i686-apple-darwin :=\n CFG_RUN_i686-apple-darwin=$(2)\n CFG_RUN_TARG_i686-apple-darwin=$(call CFG_RUN_i686-apple-darwin,,$(2))"}, {"sha": "174671a9a8812a3370888a2b7730cab3d6f952d6", "filename": "mk/cfg/i686-pc-windows-gnu.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-gnu.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -13,15 +13,11 @@ CFG_GCCISH_CFLAGS_i686-pc-windows-gnu := -Wall -Werror -g -m32 -D_WIN32_WINNT=0x\n CFG_GCCISH_CXXFLAGS_i686-pc-windows-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_i686-pc-windows-gnu := -shared -g -m32\n CFG_GCCISH_DEF_FLAG_i686-pc-windows-gnu :=\n-CFG_GCCISH_PRE_LIB_FLAGS_i686-pc-windows-gnu :=\n-CFG_GCCISH_POST_LIB_FLAGS_i686-pc-windows-gnu :=\n-CFG_DEF_SUFFIX_i686-pc-windows-gnu := .windows.def\n CFG_LLC_FLAGS_i686-pc-windows-gnu :=\n CFG_INSTALL_NAME_i686-pc-windows-gnu =\n CFG_EXE_SUFFIX_i686-pc-windows-gnu := .exe\n CFG_WINDOWSY_i686-pc-windows-gnu := 1\n CFG_UNIXY_i686-pc-windows-gnu :=\n-CFG_PATH_MUNGE_i686-pc-windows-gnu :=\n CFG_LDPATH_i686-pc-windows-gnu :=\n CFG_RUN_i686-pc-windows-gnu=$(2)\n CFG_RUN_TARG_i686-pc-windows-gnu=$(call CFG_RUN_i686-pc-windows-gnu,,$(2))"}, {"sha": "88c0907f63b2ac8f8be2e4d30078d31fe75db184", "filename": "mk/cfg/i686-unknown-linux-gnu.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -12,15 +12,11 @@ CFG_GCCISH_CFLAGS_i686-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32 $(CFLAGS\n CFG_GCCISH_CXXFLAGS_i686-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_i686-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n CFG_GCCISH_DEF_FLAG_i686-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_i686-unknown-linux-gnu := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_i686-unknown-linux-gnu := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_i686-unknown-linux-gnu := .linux.def\n CFG_LLC_FLAGS_i686-unknown-linux-gnu :=\n CFG_INSTALL_NAME_i686-unknown-linux-gnu =\n CFG_EXE_SUFFIX_i686-unknown-linux-gnu =\n CFG_WINDOWSY_i686-unknown-linux-gnu :=\n CFG_UNIXY_i686-unknown-linux-gnu := 1\n-CFG_PATH_MUNGE_i686-unknown-linux-gnu := true\n CFG_LDPATH_i686-unknown-linux-gnu :=\n CFG_RUN_i686-unknown-linux-gnu=$(2)\n CFG_RUN_TARG_i686-unknown-linux-gnu=$(call CFG_RUN_i686-unknown-linux-gnu,,$(2))"}, {"sha": "ba5f6d0e756343af7fb01c1b2e398d9644f56018", "filename": "mk/cfg/mips-unknown-linux-gnu.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fmips-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fmips-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips-unknown-linux-gnu.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -12,15 +12,11 @@ CFG_GCCISH_CFLAGS_mips-unknown-linux-gnu := -Wall -g -fPIC -mips32r2 -msoft-floa\n CFG_GCCISH_CXXFLAGS_mips-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_mips-unknown-linux-gnu := -shared -fPIC -g -mips32r2 -msoft-float -mabi=32\n CFG_GCCISH_DEF_FLAG_mips-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_mips-unknown-linux-gnu := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_mips-unknown-linux-gnu := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_mips-unknown-linux-gnu := .linux.def\n CFG_LLC_FLAGS_mips-unknown-linux-gnu :=\n CFG_INSTALL_NAME_mips-unknown-linux-gnu =\n CFG_EXE_SUFFIX_mips-unknown-linux-gnu :=\n CFG_WINDOWSY_mips-unknown-linux-gnu :=\n CFG_UNIXY_mips-unknown-linux-gnu := 1\n-CFG_PATH_MUNGE_mips-unknown-linux-gnu := true\n CFG_LDPATH_mips-unknown-linux-gnu :=\n CFG_RUN_mips-unknown-linux-gnu=\n CFG_RUN_TARG_mips-unknown-linux-gnu="}, {"sha": "539038c7434606dfc4825052af1a35a431445096", "filename": "mk/cfg/mipsel-unknown-linux-gnu.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fmipsel-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fmipsel-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmipsel-unknown-linux-gnu.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -12,15 +12,11 @@ CFG_GCCISH_CFLAGS_mipsel-unknown-linux-gnu := -Wall -g -fPIC -mips32 -mabi=32 $(\n CFG_GCCISH_CXXFLAGS_mipsel-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_mipsel-unknown-linux-gnu := -shared -fPIC -g -mips32\n CFG_GCCISH_DEF_FLAG_mipsel-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_mipsel-unknown-linux-gnu := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_mipsel-unknown-linux-gnu := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_mipsel-unknown-linux-gnu := .linux.def\n CFG_LLC_FLAGS_mipsel-unknown-linux-gnu :=\n CFG_INSTALL_NAME_mipsel-unknown-linux-gnu =\n CFG_EXE_SUFFIX_mipsel-unknown-linux-gnu :=\n CFG_WINDOWSY_mipsel-unknown-linux-gnu :=\n CFG_UNIXY_mipsel-unknown-linux-gnu := 1\n-CFG_PATH_MUNGE_mipsel-unknown-linux-gnu := true\n CFG_LDPATH_mipsel-unknown-linux-gnu :=\n CFG_RUN_mipsel-unknown-linux-gnu=\n CFG_RUN_TARG_mipsel-unknown-linux-gnu="}, {"sha": "dda957673eba665d15ab266a29e89a76336d370c", "filename": "mk/cfg/powerpc-unknown-linux-gnu.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -13,15 +13,11 @@ CFG_GCCISH_CFLAGS_powerpc-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32 $(CFL\n CFG_GCCISH_CXXFLAGS_powerpc-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_powerpc-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n CFG_GCCISH_DEF_FLAG_powerpc-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_powerpc-unknown-linux-gnu := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_powerpc-unknown-linux-gnu := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_powerpc-unknown-linux-gnu := .linux.def\n CFG_LLC_FLAGS_powerpc-unknown-linux-gnu :=\n CFG_INSTALL_NAME_powerpc-unknown-linux-gnu =\n CFG_EXE_SUFFIX_powerpc-unknown-linux-gnu =\n CFG_WINDOWSY_powerpc-unknown-linux-gnu :=\n CFG_UNIXY_powerpc-unknown-linux-gnu := 1\n-CFG_PATH_MUNGE_powerpc-unknown-linux-gnu := true\n CFG_LDPATH_powerpc-unknown-linux-gnu :=\n CFG_RUN_powerpc-unknown-linux-gnu=$(2)\n CFG_RUN_TARG_powerpc-unknown-linux-gnu=$(call CFG_RUN_powerpc-unknown-linux-gnu,,$(2))"}, {"sha": "4c68d3dcf37b4424b10e06ae845bfb30e2950d57", "filename": "mk/cfg/x86_64-apple-darwin.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-apple-darwin.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-apple-darwin.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-apple-darwin.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -12,15 +12,11 @@ CFG_GCCISH_CFLAGS_x86_64-apple-darwin := -Wall -Werror -g -fPIC -m64 -arch x86_6\n CFG_GCCISH_CXXFLAGS_x86_64-apple-darwin := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-apple-darwin := -dynamiclib -pthread  -framework CoreServices -m64\n CFG_GCCISH_DEF_FLAG_x86_64-apple-darwin := -Wl,-exported_symbols_list,\n-CFG_GCCISH_PRE_LIB_FLAGS_x86_64-apple-darwin :=\n-CFG_GCCISH_POST_LIB_FLAGS_x86_64-apple-darwin :=\n-CFG_DEF_SUFFIX_x86_64-apple-darwin := .darwin.def\n CFG_LLC_FLAGS_x86_64-apple-darwin :=\n CFG_INSTALL_NAME_x86_64-apple-darwin = -Wl,-install_name,@rpath/$(1)\n CFG_EXE_SUFFIX_x86_64-apple-darwin :=\n CFG_WINDOWSY_x86_64-apple-darwin :=\n CFG_UNIXY_x86_64-apple-darwin := 1\n-CFG_PATH_MUNGE_x86_64-apple-darwin := true\n CFG_LDPATH_x86_64-apple-darwin :=\n CFG_RUN_x86_64-apple-darwin=$(2)\n CFG_RUN_TARG_x86_64-apple-darwin=$(call CFG_RUN_x86_64-apple-darwin,,$(2))"}, {"sha": "dd6080fdb0bab1ecc872a8fd9e0f1160bf37a477", "filename": "mk/cfg/x86_64-apple-ios.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-apple-ios.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -20,16 +20,12 @@ CFG_GCCISH_CFLAGS_x86_64-apple-ios := -Wall -Werror -fPIC $(CFG_IOSSIM_FLAGS_x86\n CFG_GCCISH_CXXFLAGS_x86_64-apple-ios := -fno-rtti $(CFG_IOSSIM_FLAGS_x86_64-apple-ios) -I$(CFG_IOSSIM_SDK_x86_64-apple-ios)/usr/include/c++/4.2.1\n CFG_GCCISH_LINK_FLAGS_x86_64-apple-ios := -lpthread -Wl,-no_compact_unwind -m64 -Wl,-syslibroot $(CFG_IOSSIM_SDK_x86_64-apple-ios)\n CFG_GCCISH_DEF_FLAG_x86_64-apple-ios := -Wl,-exported_symbols_list,\n-CFG_GCCISH_PRE_LIB_FLAGS_x86_64-apple-ios :=\n-CFG_GCCISH_POST_LIB_FLAGS_x86_64-apple-ios :=\n-CFG_DEF_SUFFIX_x86_64-apple-ios := .darwin.def\n CFG_LLC_FLAGS_x86_64-apple-ios :=\n CFG_INSTALL_NAME_x86_64-apple-ios = -Wl,-install_name,@rpath/$(1)\n CFG_LIBUV_LINK_FLAGS_x86_64-apple-ios :=\n CFG_EXE_SUFFIX_x86_64-apple-ios :=\n CFG_WINDOWSY_x86_64-apple-ios :=\n CFG_UNIXY_x86_64-apple-ios := 1\n-CFG_PATH_MUNGE_x86_64-apple-ios := true\n CFG_LDPATH_x86_64-apple-ios :=\n CFG_RUN_x86_64-apple-ios = $(2)\n CFG_RUN_TARG_x86_64-apple-ios = $(call CFG_RUN_x86_64-apple-ios,,$(2))"}, {"sha": "4118ea26c072b0e13587bcc293d38a5c55b56329", "filename": "mk/cfg/x86_64-pc-windows-gnu.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -13,15 +13,11 @@ CFG_GCCISH_CFLAGS_x86_64-pc-windows-gnu := -Wall -Werror -g -m64 -D_WIN32_WINNT=\n CFG_GCCISH_CXXFLAGS_x86_64-pc-windows-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-pc-windows-gnu := -shared -g -m64\n CFG_GCCISH_DEF_FLAG_x86_64-pc-windows-gnu :=\n-CFG_GCCISH_PRE_LIB_FLAGS_x86_64-pc-windows-gnu :=\n-CFG_GCCISH_POST_LIB_FLAGS_x86_64-pc-windows-gnu :=\n-CFG_DEF_SUFFIX_x86_64-pc-windows-gnu := .windows.def\n CFG_LLC_FLAGS_x86_64-pc-windows-gnu :=\n CFG_INSTALL_NAME_x86_64-pc-windows-gnu =\n CFG_EXE_SUFFIX_x86_64-pc-windows-gnu := .exe\n CFG_WINDOWSY_x86_64-pc-windows-gnu := 1\n CFG_UNIXY_x86_64-pc-windows-gnu :=\n-CFG_PATH_MUNGE_x86_64-pc-windows-gnu :=\n CFG_LDPATH_x86_64-pc-windows-gnu :=\n CFG_RUN_x86_64-pc-windows-gnu=$(2)\n CFG_RUN_TARG_x86_64-pc-windows-gnu=$(call CFG_RUN_x86_64-pc-windows-gnu,,$(2))"}, {"sha": "dd6d19f7491bb688d8f7c588392afd18c9a6a4c5", "filename": "mk/cfg/x86_64-unknown-bitrig.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -11,15 +11,11 @@ CFG_JEMALLOC_CFLAGS_x86_64-unknown-bitrig := -m64 -I/usr/include $(CFLAGS)\n CFG_GCCISH_CFLAGS_x86_64-unknown-bitrig := -Wall -Werror -fPIC -m64 -I/usr/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-bitrig := -shared -pic -pthread -m64 $(LDFLAGS)\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-bitrig := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-bitrig := -Wl,-pic -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-bitrig := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_x86_64-unknown-bitrig := .bsd.def\n CFG_LLC_FLAGS_x86_64-unknown-bitrig :=\n CFG_INSTALL_NAME_x86_64-unknown-bitrig =\n CFG_EXE_SUFFIX_x86_64-unknown-bitrig :=\n CFG_WINDOWSY_x86_64-unknown-bitrig :=\n CFG_UNIXY_x86_64-unknown-bitrig := 1\n-CFG_PATH_MUNGE_x86_64-unknown-bitrig :=\n CFG_LDPATH_x86_64-unknown-bitrig :=\n CFG_RUN_x86_64-unknown-bitrig=$(2)\n CFG_RUN_TARG_x86_64-unknown-bitrig=$(call CFG_RUN_x86_64-unknown-bitrig,,$(2))"}, {"sha": "4015293826e1a884e2a2c9975908ec09e17ef6eb", "filename": "mk/cfg/x86_64-unknown-dragonfly.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -11,15 +11,11 @@ CFG_JEMALLOC_CFLAGS_x86_64-unknown-dragonfly := -m64 -I/usr/include -I/usr/local\n CFG_GCCISH_CFLAGS_x86_64-unknown-dragonfly := -Wall -Werror -g -fPIC -m64 -I/usr/include -I/usr/local/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-dragonfly := -shared -fPIC -g -pthread  -lrt -m64\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-dragonfly := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-dragonfly := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-dragonfly := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_x86_64-unknown-dragonfly := .bsd.def\n CFG_LLC_FLAGS_x86_64-unknown-dragonfly :=\n CFG_INSTALL_NAME_x86_64-unknown-dragonfly =\n CFG_EXE_SUFFIX_x86_64-unknown-dragonfly :=\n CFG_WINDOWSY_x86_64-unknown-dragonfly :=\n CFG_UNIXY_x86_64-unknown-dragonfly := 1\n-CFG_PATH_MUNGE_x86_64-unknown-dragonfly :=\n CFG_LDPATH_x86_64-unknown-dragonfly :=\n CFG_RUN_x86_64-unknown-dragonfly=$(2)\n CFG_RUN_TARG_x86_64-unknown-dragonfly=$(call CFG_RUN_x86_64-unknown-dragonfly,,$(2))"}, {"sha": "1bd43168b4f692cf7283560803446569a275ac95", "filename": "mk/cfg/x86_64-unknown-freebsd.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -11,15 +11,11 @@ CFG_JEMALLOC_CFLAGS_x86_64-unknown-freebsd := -I/usr/local/include $(CFLAGS)\n CFG_GCCISH_CFLAGS_x86_64-unknown-freebsd := -Wall -Werror -g -fPIC -I/usr/local/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-freebsd := -shared -fPIC -g -pthread  -lrt\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-freebsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-freebsd := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-freebsd := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_x86_64-unknown-freebsd := .bsd.def\n CFG_LLC_FLAGS_x86_64-unknown-freebsd :=\n CFG_INSTALL_NAME_x86_64-unknown-freebsd =\n CFG_EXE_SUFFIX_x86_64-unknown-freebsd :=\n CFG_WINDOWSY_x86_64-unknown-freebsd :=\n CFG_UNIXY_x86_64-unknown-freebsd := 1\n-CFG_PATH_MUNGE_x86_64-unknown-freebsd :=\n CFG_LDPATH_x86_64-unknown-freebsd :=\n CFG_RUN_x86_64-unknown-freebsd=$(2)\n CFG_RUN_TARG_x86_64-unknown-freebsd=$(call CFG_RUN_x86_64-unknown-freebsd,,$(2))"}, {"sha": "044c687c9fc4c871cb3510dfbf8f7b3e3121caf4", "filename": "mk/cfg/x86_64-unknown-linux-gnu.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -12,15 +12,11 @@ CFG_GCCISH_CFLAGS_x86_64-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64\n CFG_GCCISH_CXXFLAGS_x86_64-unknown-linux-gnu := -fno-rtti\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-linux-gnu := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-linux-gnu := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_x86_64-unknown-linux-gnu := .linux.def\n CFG_LLC_FLAGS_x86_64-unknown-linux-gnu :=\n CFG_INSTALL_NAME_x86_64-unknown-linux-gnu =\n CFG_EXE_SUFFIX_x86_64-unknown-linux-gnu =\n CFG_WINDOWSY_x86_64-unknown-linux-gnu :=\n CFG_UNIXY_x86_64-unknown-linux-gnu := 1\n-CFG_PATH_MUNGE_x86_64-unknown-linux-gnu := true\n CFG_LDPATH_x86_64-unknown-linux-gnu :=\n CFG_RUN_x86_64-unknown-linux-gnu=$(2)\n CFG_RUN_TARG_x86_64-unknown-linux-gnu=$(call CFG_RUN_x86_64-unknown-linux-gnu,,$(2))"}, {"sha": "b3dea6f97cbc11a05ea751c9fb809e66c792c6ff", "filename": "mk/cfg/x86_64-unknown-linux-musl.mk", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -0,0 +1,27 @@\n+# x86_64-unknown-linux-musl configuration\n+CC_x86_64-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc\n+CXX_x86_64-unknown-linux-musl=notaprogram\n+CPP_x86_64-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc -E\n+AR_x86_64-unknown-linux-musl=$(AR)\n+CFG_LIB_NAME_x86_64-unknown-linux-musl=lib$(1).so\n+CFG_STATIC_LIB_NAME_x86_64-unknown-linux-musl=lib$(1).a\n+CFG_LIB_GLOB_x86_64-unknown-linux-musl=lib$(1)-*.so\n+CFG_JEMALLOC_CFLAGS_x86_64-unknown-linux-musl := -m64\n+CFG_GCCISH_CFLAGS_x86_64-unknown-linux-musl := -Wall -Werror -g -fPIC -m64\n+CFG_GCCISH_CXXFLAGS_x86_64-unknown-linux-musl :=\n+CFG_GCCISH_LINK_FLAGS_x86_64-unknown-linux-musl :=\n+CFG_GCCISH_DEF_FLAG_x86_64-unknown-linux-musl :=\n+CFG_LLC_FLAGS_x86_64-unknown-linux-musl :=\n+CFG_INSTALL_NAME_x86_64-unknown-linux-musl =\n+CFG_EXE_SUFFIX_x86_64-unknown-linux-musl =\n+CFG_WINDOWSY_x86_64-unknown-linux-musl :=\n+CFG_UNIXY_x86_64-unknown-linux-musl := 1\n+CFG_LDPATH_x86_64-unknown-linux-musl :=\n+CFG_RUN_x86_64-unknown-linux-musl=$(2)\n+CFG_RUN_TARG_x86_64-unknown-linux-musl=$(call CFG_RUN_x86_64-unknown-linux-musl,,$(2))\n+CFG_GNU_TRIPLE_x86_64-unknown-linux-musl := x86_64-unknown-linux-musl\n+\n+NATIVE_DEPS_libc_T_x86_64-unknown-linux-musl += libc.a\n+NATIVE_DEPS_std_T_x86_64-unknown-linux-musl += libunwind.a \\\n+\tcrt1.o crti.o crtn.o\n+INSTALLED_OBJECTS_x86_64-unknown-linux-musl += crt1.o crti.o crtn.o"}, {"sha": "261616ecf1fdaea8c14cff20c9bf49c7c44d1c30", "filename": "mk/cfg/x86_64-unknown-openbsd.mk", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -11,15 +11,11 @@ CFG_JEMALLOC_CFLAGS_x86_64-unknown-openbsd := -m64 -I/usr/include $(CFLAGS)\n CFG_GCCISH_CFLAGS_x86_64-unknown-openbsd := -Wall -Werror -g -fPIC -m64 -I/usr/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-openbsd := -shared -fPIC -g -pthread -m64\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-openbsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-openbsd := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-openbsd := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_x86_64-unknown-openbsd := .bsd.def\n CFG_LLC_FLAGS_x86_64-unknown-openbsd :=\n CFG_INSTALL_NAME_x86_64-unknown-openbsd =\n CFG_EXE_SUFFIX_x86_64-unknown-openbsd :=\n CFG_WINDOWSY_x86_64-unknown-openbsd :=\n CFG_UNIXY_x86_64-unknown-openbsd := 1\n-CFG_PATH_MUNGE_x86_64-unknown-openbsd :=\n CFG_LDPATH_x86_64-unknown-openbsd :=\n CFG_RUN_x86_64-unknown-openbsd=$(2)\n CFG_RUN_TARG_x86_64-unknown-openbsd=$(call CFG_RUN_x86_64-unknown-openbsd,,$(2))"}, {"sha": "367c25a8a6d495f5281ae94980101e70b699f0b2", "filename": "mk/crates.mk", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -123,6 +123,9 @@ ONLY_RLIB_rustc_bitflags := 1\n # Documented-by-default crates\n DOC_CRATES := std alloc collections core libc rustc_unicode\n \n+# Installed objects/libraries by default\n+INSTALLED_OBJECTS := libmorestack.a libcompiler-rt.a\n+\n ################################################################################\n # You should not need to edit below this line\n ################################################################################"}, {"sha": "9ac96aa90f6b9b9a1035b40994bbbfeb6f7784cd", "filename": "mk/main.mk", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -399,8 +399,10 @@ endif\n # Prerequisites for using the stageN compiler to build target artifacts\n TSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HSREQ$(1)_H_$(3)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/libcompiler-rt.a\n+\t$$(foreach obj,$$(INSTALLED_OBJECTS),\\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(obj)) \\\n+\t$$(foreach obj,$$(INSTALLED_OBJECTS_$(2)),\\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(obj))\n \n # Prerequisites for a working stageN compiler and libraries, for a specific\n # target"}, {"sha": "1382d160e13999063b3ac7674ab95c0de600854b", "filename": "mk/prepare.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -140,8 +140,8 @@ prepare-target-$(2)-host-$(3)-$(1)-$(4): prepare-maybe-clean-$(4) \\\n           $$(if $$(findstring $(2),$$(CFG_HOST)), \\\n             $$(foreach crate,$$(HOST_CRATES), \\\n               $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))),) \\\n-          $$(call PREPARE_LIB,libmorestack.a) \\\n-          $$(call PREPARE_LIB,libcompiler-rt.a),),),)\n+\t  $$(foreach object,$$(INSTALLED_OBJECTS) $$(INSTALLED_OBJECTS_$(2)),\\\n+\t    $$(call PREPARE_LIB,$$(object))),),),)\n endef\n \n define INSTALL_GDB_DEBUGGER_SCRIPTS_COMMANDS"}, {"sha": "bd6578d3b724b9baeffaab93ac7d40fa81215747", "filename": "mk/rt.mk", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -74,7 +74,8 @@ $$(RT_OUTPUT_DIR_$(1))/%.o: $(S)src/rt/%.ll $$(MKFILE_DEPS) \\\n \t@mkdir -p $$(@D)\n \t@$$(call E, compile: $$@)\n \t$$(Q)$$(LLC_$$(CFG_BUILD)) $$(CFG_LLC_FLAGS_$(1)) \\\n-\t    -filetype=obj -mtriple=$$(CFG_LLVM_TARGET_$(1)) -relocation-model=pic -o $$@ $$<\n+\t    -filetype=obj -mtriple=$$(CFG_LLVM_TARGET_$(1)) \\\n+\t    -relocation-model=pic -o $$@ $$<\n \n $$(RT_OUTPUT_DIR_$(1))/%.o: $(S)src/rt/%.c $$(MKFILE_DEPS)\n \t@mkdir -p $$(@D)\n@@ -110,6 +111,11 @@ $$(RT_OUTPUT_DIR_$(1))/$$(NATIVE_$(2)_$(1)): $$(OBJS_$(2)_$(1))\n \t@$$(call E, link: $$@)\n \t$$(Q)$$(AR_$(1)) rcs $$@ $$^\n \n+ifeq ($$(findstring windows,$(1)),windows)\n+$$(RT_OUTPUT_DIR_$(1))/lib$(2).a: $$(RT_OUTPUT_DIR_$(1))/$$(NATIVE_$(2)_$(1))\n+\t$$(Q)cp $$^ $$@\n+endif\n+\n endef\n \n $(foreach target,$(CFG_TARGET), \\\n@@ -221,7 +227,7 @@ COMPRT_DEPS := $(wildcard \\\n               $(S)src/compiler-rt/*/*/*/*)\n endif\n \n-COMPRT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n+COMPRT_NAME_$(1) := libcompiler-rt.a\n COMPRT_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(COMPRT_NAME_$(1))\n COMPRT_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/compiler-rt\n \n@@ -312,6 +318,19 @@ endif # endif for windowsy\n endif # endif for ios\n endif # endif for darwin\n \n+################################################################################\n+# libc/libunwind for musl\n+#\n+# When we're building a musl-like target we're going to link libc/libunwind\n+# statically into the standard library and liblibc, so we need to make sure\n+# they're in a location that we can find\n+################################################################################\n+\n+ifeq ($$(findstring musl,$(1)),musl)\n+$$(RT_OUTPUT_DIR_$(1))/%: $$(CFG_MUSL_ROOT)/lib/%\n+\tcp $$^ $$@\n+endif\n+\n endef\n \n # Instantiate template for all stages/targets"}, {"sha": "363022e8781d08bfd28ef2ca213374409a8e4010", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -25,8 +25,6 @@ endif\n RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, \\\n \tExecutionEngineWrapper.cpp RustWrapper.cpp PassWrapper.cpp)\n \n-RUSTLLVM_DEF_$(1) := $(1)/rustllvm/rustllvm$(CFG_DEF_SUFFIX_$(1))\n-\n RUSTLLVM_INCS_$(1) = $$(LLVM_EXTRA_INCDIRS_$(1)) \\\n                      -iquote $$(LLVM_INCDIR_$(1)) \\\n                      -iquote $$(S)src/rustllvm/include"}, {"sha": "319f44fd35b77c1058c4627b77640cf913ffc09f", "filename": "mk/target.mk", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -35,7 +35,9 @@ CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4) := \\\n \t\t$$(foreach dep,$$(RUST_DEPS_$(4)), \\\n \t\t  $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n \t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)), \\\n-\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),$$(dep)))\n+\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),$$(dep))) \\\n+\t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)_T_$(2)), \\\n+\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(dep))\n endef\n \n $(foreach host,$(CFG_HOST), \\\n@@ -143,14 +145,7 @@ $$(TBIN$(1)_T_$(2)_H_$(3))/:\n $$(TLIB$(1)_T_$(2)_H_$(3))/:\n \tmkdir -p $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/libcompiler-rt.a: \\\n-\t    $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),compiler-rt) \\\n-\t    | $$(TLIB$(1)_T_$(2)_H_$(3))/ $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n-\t    $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),morestack) \\\n+$$(TLIB$(1)_T_$(2)_H_$(3))/%: $$(RT_OUTPUT_DIR_$(2))/% \\\n \t    | $$(TLIB$(1)_T_$(2)_H_$(3))/ $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@"}, {"sha": "a648e51497e79dbcc726065863d61807733a50fd", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -170,6 +170,9 @@ pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n         format!(\"ignore-{}\",\n                 config.stage_id.split('-').next().unwrap())\n     }\n+    fn ignore_env(config: &Config) -> String {\n+        format!(\"ignore-{}\", util::get_env(&config.target).unwrap_or(\"<unknown>\"))\n+    }\n     fn ignore_gdb(config: &Config, line: &str) -> bool {\n         if config.mode != common::DebugInfoGdb {\n             return false;\n@@ -231,6 +234,7 @@ pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n         !parse_name_directive(ln, &ignore_target(config)) &&\n         !parse_name_directive(ln, &ignore_architecture(config)) &&\n         !parse_name_directive(ln, &ignore_stage(config)) &&\n+        !parse_name_directive(ln, &ignore_env(config)) &&\n         !(config.mode == common::Pretty && parse_name_directive(ln, \"ignore-pretty\")) &&\n         !(config.target != config.host && parse_name_directive(ln, \"ignore-cross-compile\")) &&\n         !ignore_gdb(config, ln) &&"}, {"sha": "33d4f761eea841ee7730abd6f3b98bd02f9a523a", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -1233,7 +1233,20 @@ fn compose_and_run_compiler(config: &Config, props: &TestProps,\n         let mut crate_type = if aux_props.no_prefer_dynamic {\n             Vec::new()\n         } else {\n-            vec!(\"--crate-type=dylib\".to_string())\n+            // We primarily compile all auxiliary libraries as dynamic libraries\n+            // to avoid code size bloat and large binaries as much as possible\n+            // for the test suite (otherwise including libstd statically in all\n+            // executables takes up quite a bit of space).\n+            //\n+            // For targets like MUSL, however, there is no support for dynamic\n+            // libraries so we just go back to building a normal library. Note,\n+            // however, that if the library is built with `force_host` then it's\n+            // ok to be a dylib as the host should always support dylibs.\n+            if config.target.contains(\"musl\") && !aux_props.force_host {\n+                vec!(\"--crate-type=lib\".to_string())\n+            } else {\n+                vec!(\"--crate-type=dylib\".to_string())\n+            }\n         };\n         crate_type.extend(extra_link_args.clone().into_iter());\n         let aux_args ="}, {"sha": "184d62db45114682d21ffe8303424c89e7f5405e", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -60,6 +60,10 @@ pub fn get_arch(triple: &str) -> &'static str {\n     panic!(\"Cannot determine Architecture from triple\");\n }\n \n+pub fn get_env(triple: &str) -> Option<&str> {\n+    triple.split('-').nth(3)\n+}\n+\n pub fn make_new_path(path: &str) -> String {\n     assert!(cfg!(windows));\n     // Windows just uses PATH as the library search path, so we have to"}, {"sha": "86a04a0687a5bb11b92aa8748c5556f24b520709", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -211,7 +211,9 @@ mod imp {\n     }\n \n     // -lpthread needs to occur after -ljemalloc, the earlier argument isn't enough\n-    #[cfg(all(not(windows), not(target_os = \"android\")))]\n+    #[cfg(all(not(windows),\n+              not(target_os = \"android\"),\n+              not(target_env = \"musl\")))]\n     #[link(name = \"pthread\")]\n     extern {}\n "}, {"sha": "999e7c643e576b0b4aa0a3d9f977fc133d75af88", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -140,11 +140,15 @@ pub use funcs::bsd43::*;\n \n // On NaCl, these libraries are static. Thus it would be a Bad Idea to link them\n // in when creating a test crate.\n-#[cfg(not(any(windows, all(target_os = \"nacl\", test))))]\n+#[cfg(not(any(windows, target_env = \"musl\", all(target_os = \"nacl\", test))))]\n #[link(name = \"c\")]\n #[link(name = \"m\")]\n extern {}\n \n+#[cfg(all(target_env = \"musl\", not(test)))]\n+#[link(name = \"c\", kind = \"static\")]\n+extern {}\n+\n // libnacl provides functions that require a trip through the IRT to work.\n // ie: _exit, mmap, nanosleep, etc. Anything that would otherwise require a trip\n // to the kernel."}, {"sha": "072761f2754b3723fed2c29ee2d3f623c314a404", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -621,6 +621,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let arch = &sess.target.target.arch;\n     let wordsz = &sess.target.target.target_pointer_width;\n     let os = &sess.target.target.target_os;\n+    let env = &sess.target.target.target_env;\n \n     let fam = match sess.target.target.options.is_like_windows {\n         true  => InternedString::new(\"windows\"),\n@@ -634,8 +635,8 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n          mk(InternedString::new(\"target_family\"), fam),\n          mk(InternedString::new(\"target_arch\"), intern(arch)),\n          mk(InternedString::new(\"target_endian\"), intern(end)),\n-         mk(InternedString::new(\"target_pointer_width\"),\n-            intern(wordsz))\n+         mk(InternedString::new(\"target_pointer_width\"), intern(wordsz)),\n+         mk(InternedString::new(\"target_env\"), intern(env)),\n     ];\n     if sess.opts.debug_assertions {\n         ret.push(attr::mk_word_item(InternedString::new(\"debug_assertions\")));"}, {"sha": "dd6bc672a03d996ab8d1cf390eac171cef3696e5", "filename": "src/librustc_back/target/aarch64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -22,6 +22,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"64\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"ios\".to_string(),\n+        target_env: \"\".to_string(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+cyclone\".to_string(),\n             eliminate_frame_pointer: false,"}, {"sha": "fcc901fc81f576f7da57193785e0cc4f5444168f", "filename": "src/librustc_back/target/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -24,6 +24,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"64\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"android\".to_string(),\n+        target_env: \"\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "18e67d066d03632f8c148a54c03326411364fc44", "filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -19,6 +19,7 @@ pub fn target() -> Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n+        target_env: \"gnu\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"linux\".to_string(),\n         options: base,"}, {"sha": "57712d18cbae2fd7568cb59cc67bd2ef71c23697", "filename": "src/librustc_back/target/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -31,6 +31,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n+        target_env: \"gnu\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "30015c4a7e6ff0ef1a34a6b04fd36ea956162ffd", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -23,6 +23,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n+        target_env: \"gnueabi\".to_string(),\n \n         options: TargetOptions {\n             features: \"+v6\".to_string(),"}, {"sha": "8f8c7114e6effa537c55bdeec16fa3b0ccb3a304", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -23,6 +23,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n+        target_env: \"gnueabihf\".to_string(),\n \n         options: TargetOptions {\n             features: \"+v6,+vfp2\".to_string(),"}, {"sha": "3b55993659de24c132dbbb585b7fb7832b44c9c3", "filename": "src/librustc_back/target/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -19,6 +19,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"ios\".to_string(),\n+        target_env: \"\".to_string(),\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".to_string(),\n             .. opts(Arch::Armv7)"}, {"sha": "5a67e3fe127d6f375bb7018a9ccf7b45da1ddce4", "filename": "src/librustc_back/target/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -19,6 +19,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"ios\".to_string(),\n+        target_env: \"\".to_string(),\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".to_string(),\n             .. opts(Arch::Armv7s)"}, {"sha": "a9a073e2a8c64ae3db1c0394edc549f430b38329", "filename": "src/librustc_back/target/i386_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -23,6 +23,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"ios\".to_string(),\n+        target_env: \"\".to_string(),\n         options: opts(Arch::I386)\n     }\n }"}, {"sha": "47b329982d43e29383a77083d92c556c7e835a85", "filename": "src/librustc_back/target/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -26,6 +26,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"macos\".to_string(),\n+        target_env: \"\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "9e2aa20085c3634f1dde00f97e1eb0def39a5ecf", "filename": "src/librustc_back/target/i686_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -30,6 +30,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"windows\".to_string(),\n+        target_env: \"gnu\".to_string(),\n         options: options,\n     }\n }"}, {"sha": "ecabe71ad4c6c635ef279472ac60868a6cdd38c2", "filename": "src/librustc_back/target/i686_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -22,6 +22,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"dragonfly\".to_string(),\n+        target_env: \"\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "21094ad905e90f5c281c8d451fa44fb676b97399", "filename": "src/librustc_back/target/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -22,6 +22,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "823a4a81fa4c19f98f1cf04834c7640ad9695530", "filename": "src/librustc_back/target/linux_base.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -19,12 +19,16 @@ pub fn opts() -> TargetOptions {\n         morestack: true,\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: vec!(\n-            // GNU-style linkers will use this to omit linking to libraries which\n-            // don't actually fulfill any relocations, but only for libraries which\n-            // follow this flag. Thus, use it before specifying libraries to link to.\n+        pre_link_args: vec![\n+            // We want to be able to strip as much executable code as possible\n+            // from the linker command line, and this flag indicates to the\n+            // linker that it can avoid linking in dynamic libraries that don't\n+            // actually satisfy any symbols up to that point (as with many other\n+            // resolutions the linker does). This option only applies to all\n+            // following libraries so we're sure to pass it as one of the first\n+            // arguments.\n             \"-Wl,--as-needed\".to_string(),\n-        ),\n+        ],\n         position_independent_executables: true,\n         .. Default::default()\n     }"}, {"sha": "4662ff1958ba87de61a7d1922324e047f7185f90", "filename": "src/librustc_back/target/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -22,6 +22,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"mips\".to_string(),\n         target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n         options: super::linux_base::opts()\n     }\n }"}, {"sha": "80e38c5ddea98e61cdc65bcdb8d94371b11f4373", "filename": "src/librustc_back/target/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -22,6 +22,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"mips\".to_string(),\n         target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n \n         options: super::linux_base::opts()\n     }"}, {"sha": "3a79ae3e7c01b6e8116f47904f33b769ff8b917b", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -59,32 +59,6 @@ mod dragonfly_base;\n mod bitrig_base;\n mod openbsd_base;\n \n-mod armv7_apple_ios;\n-mod armv7s_apple_ios;\n-mod i386_apple_ios;\n-\n-mod arm_linux_androideabi;\n-mod arm_unknown_linux_gnueabi;\n-mod arm_unknown_linux_gnueabihf;\n-mod aarch64_apple_ios;\n-mod aarch64_linux_android;\n-mod aarch64_unknown_linux_gnu;\n-mod i686_apple_darwin;\n-mod i686_pc_windows_gnu;\n-mod i686_unknown_dragonfly;\n-mod i686_unknown_linux_gnu;\n-mod mips_unknown_linux_gnu;\n-mod mipsel_unknown_linux_gnu;\n-mod powerpc_unknown_linux_gnu;\n-mod x86_64_apple_darwin;\n-mod x86_64_apple_ios;\n-mod x86_64_pc_windows_gnu;\n-mod x86_64_unknown_freebsd;\n-mod x86_64_unknown_dragonfly;\n-mod x86_64_unknown_bitrig;\n-mod x86_64_unknown_linux_gnu;\n-mod x86_64_unknown_openbsd;\n-\n /// Everything `rustc` knows about how to compile for a specific target.\n ///\n /// Every field here must be specified, and has no default value.\n@@ -100,6 +74,8 @@ pub struct Target {\n     pub target_pointer_width: String,\n     /// OS name to use for conditional compilation.\n     pub target_os: String,\n+    /// Environment name to use for conditional compilation.\n+    pub target_env: String,\n     /// Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\",\n     /// \"aarch64\", \"mips\", and \"powerpc\". \"mips\" includes \"mipsel\".\n     pub arch: String,\n@@ -115,14 +91,22 @@ pub struct Target {\n pub struct TargetOptions {\n     /// Linker to invoke. Defaults to \"cc\".\n     pub linker: String,\n-    /// Linker arguments that are unconditionally passed *before* any user-defined libraries.\n+    /// Linker arguments that are unconditionally passed *before* any\n+    /// user-defined libraries.\n     pub pre_link_args: Vec<String>,\n-    /// Linker arguments that are unconditionally passed *after* any user-defined libraries.\n+    /// Linker arguments that are unconditionally passed *after* any\n+    /// user-defined libraries.\n     pub post_link_args: Vec<String>,\n-    /// Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults to \"default\".\n+    /// Objects to link before and after all others, always found within the\n+    /// sysroot folder.\n+    pub pre_link_objects: Vec<String>,\n+    pub post_link_objects: Vec<String>,\n+    /// Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults\n+    /// to \"default\".\n     pub cpu: String,\n-    /// Default target features to pass to LLVM. These features will *always* be passed, and cannot\n-    /// be disabled even via `-C`. Corresponds to `llc -mattr=$features`.\n+    /// Default target features to pass to LLVM. These features will *always* be\n+    /// passed, and cannot be disabled even via `-C`. Corresponds to `llc\n+    /// -mattr=$features`.\n     pub features: String,\n     /// Whether dynamic linking is available on this target. Defaults to false.\n     pub dynamic_linking: bool,\n@@ -207,6 +191,8 @@ impl Default for TargetOptions {\n             has_rpath: false,\n             no_compiler_rt: false,\n             position_independent_executables: false,\n+            pre_link_objects: Vec::new(),\n+            post_link_objects: Vec::new(),\n         }\n     }\n }\n@@ -250,6 +236,8 @@ impl Target {\n             target_pointer_width: get_req_field(\"target-pointer-width\"),\n             arch: get_req_field(\"arch\"),\n             target_os: get_req_field(\"os\"),\n+            target_env: obj.find(\"env\").and_then(|s| s.as_string())\n+                           .map(|s| s.to_string()).unwrap_or(String::new()),\n             options: Default::default(),\n         };\n \n@@ -329,6 +317,7 @@ impl Target {\n         macro_rules! load_specific {\n             ( $($name:ident),+ ) => (\n                 {\n+                    $(mod $name;)*\n                     let target = target.replace(\"-\", \"_\");\n                     if false { }\n                     $(\n@@ -358,6 +347,7 @@ impl Target {\n             arm_unknown_linux_gnueabi,\n             arm_unknown_linux_gnueabihf,\n             aarch64_unknown_linux_gnu,\n+            x86_64_unknown_linux_musl,\n \n             arm_linux_androideabi,\n             aarch64_linux_android,"}, {"sha": "3a2b4bd16065ef38e892a78415b4d0f4cc75b39a", "filename": "src/librustc_back/target/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -21,6 +21,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "89a67da2d8bbcf9b677553c31287036004fd85b2", "filename": "src/librustc_back/target/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -25,6 +25,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"macos\".to_string(),\n+        target_env: \"\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "74491629ed8592faf1e53115f5dbfc7890756f17", "filename": "src/librustc_back/target/x86_64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -21,6 +21,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"ios\".to_string(),\n+        target_env: \"\".to_string(),\n         options: opts(Arch::X86_64)\n     }\n }"}, {"sha": "bea7d16e9dfadd83897082db1e9218f3ea2e4305", "filename": "src/librustc_back/target/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -27,6 +27,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"windows\".to_string(),\n+        target_env: \"gnu\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "201c56b2e15c682b991738e9306332b331f467e4", "filename": "src/librustc_back/target/x86_64_unknown_bitrig.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -23,6 +23,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"bitrig\".to_string(),\n+        target_env: \"\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "c590f0297b948a03648ac04b4c482d8ebb8c3935", "filename": "src/librustc_back/target/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -24,6 +24,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"dragonfly\".to_string(),\n+        target_env: \"\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "0d8ea90a2ab04921d0371cbe94f6244c273b1d15", "filename": "src/librustc_back/target/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -24,6 +24,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"freebsd\".to_string(),\n+        target_env: \"\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "ba945afc5649b38f70750eea70bda88479f72aff", "filename": "src/librustc_back/target/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -24,6 +24,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "3debad2e8f2013daef0b27cd330caf71e1808356", "filename": "src/librustc_back/target/x86_64_unknown_linux_musl.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -0,0 +1,84 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+\n+    // Make sure that the linker/gcc really don't pull in anything, including\n+    // default objects, libs, etc.\n+    base.pre_link_args.push(\"-nostdlib\".to_string());\n+    base.pre_link_args.push(\"-static\".to_string());\n+\n+    // At least when this was tested, the linker would not add the\n+    // `GNU_EH_FRAME` program header to executables generated, which is required\n+    // when unwinding to locate the unwinding information. I'm not sure why this\n+    // argument is *not* necessary for normal builds, but it can't hurt!\n+    base.pre_link_args.push(\"-Wl,--eh-frame-hdr\".to_string());\n+\n+    // There's a whole bunch of circular dependencies when dealing with MUSL\n+    // unfortunately. To put this in perspective libc is statically linked to\n+    // liblibc and libunwind is statically linked to libstd:\n+    //\n+    // * libcore depends on `fmod` which is in libc (transitively in liblibc).\n+    //   liblibc, however, depends on libcore.\n+    // * compiler-rt has personality symbols that depend on libunwind, but\n+    //   libunwind is in libstd which depends on compiler-rt.\n+    //\n+    // Recall that linkers discard libraries and object files as much as\n+    // possible, and with all the static linking and archives flying around with\n+    // MUSL the linker is super aggressively stripping out objects. For example\n+    // the first case has fmod stripped from liblibc (it's in its own object\n+    // file) so it's not there when libcore needs it. In the second example all\n+    // the unused symbols from libunwind are stripped (each is in its own object\n+    // file in libstd) before we end up linking compiler-rt which depends on\n+    // those symbols.\n+    //\n+    // To deal with these circular dependencies we just force the compiler to\n+    // link everything as a group, not stripping anything out until everything\n+    // is processed. The linker will still perform a pass to strip out object\n+    // files but it won't do so until all objects/archives have been processed.\n+    base.pre_link_args.push(\"-Wl,-(\".to_string());\n+    base.post_link_args.push(\"-Wl,-)\".to_string());\n+\n+    // When generating a statically linked executable there's generally some\n+    // small setup needed which is listed in these files. These are provided by\n+    // a musl toolchain and are linked by default by the `musl-gcc` script. Note\n+    // that `gcc` also does this by default, it just uses some different files.\n+    //\n+    // Each target directory for musl has these object files included in it so\n+    // they'll be included from there.\n+    base.pre_link_objects.push(\"crt1.o\".to_string());\n+    base.pre_link_objects.push(\"crti.o\".to_string());\n+    base.post_link_objects.push(\"crtn.o\".to_string());\n+\n+    // MUSL support doesn't currently include dynamic linking, so there's no\n+    // need for dylibs or rpath business. Additionally `-pie` is incompatible\n+    // with `-static`, so we can't pass `-pie`.\n+    base.dynamic_linking = false;\n+    base.has_rpath = false;\n+    base.position_independent_executables = false;\n+\n+    Target {\n+        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n+                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n+                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n+        llvm_target: \"x86_64-unknown-linux-musl\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musl\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "7f64259adf9f8cf0c581a0e50d7a00a014b353a0", "filename": "src/librustc_back/target/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -23,6 +23,7 @@ pub fn target() -> Target {\n         target_pointer_width: \"64\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"openbsd\".to_string(),\n+        target_env: \"\".to_string(),\n         options: base,\n     }\n }"}, {"sha": "c72072f06965096488b14541ee982668f32c3a7e", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -794,13 +794,21 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n     let pname = get_cc_prog(sess);\n     let mut cmd = Command::new(&pname[..]);\n \n+    let root = sess.target_filesearch(PathKind::Native).get_lib_path();\n     cmd.args(&sess.target.target.options.pre_link_args);\n+    for obj in &sess.target.target.options.pre_link_objects {\n+        cmd.arg(root.join(obj));\n+    }\n+\n     link_args(&mut cmd, sess, dylib, tmpdir.path(),\n               trans, obj_filename, out_filename);\n-    cmd.args(&sess.target.target.options.post_link_args);\n     if !sess.target.target.options.no_compiler_rt {\n         cmd.arg(\"-lcompiler-rt\");\n     }\n+    for obj in &sess.target.target.options.post_link_objects {\n+        cmd.arg(root.join(obj));\n+    }\n+    cmd.args(&sess.target.target.options.post_link_args);\n \n     if sess.opts.debugging_opts.print_link_args {\n         println!(\"{:?}\", &cmd);"}, {"sha": "8b90fce6fc4fc075709c354600e9d1daf4b18782", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -125,7 +125,9 @@ mod tests {\n     use path::Path;\n \n     #[test]\n-    #[cfg_attr(any(windows, target_os = \"android\"), ignore)] // FIXME #8818, #10379\n+    #[cfg_attr(any(windows,\n+                   target_os = \"android\",  // FIXME #10379\n+                   target_env = \"musl\"), ignore)]\n     fn test_loading_cosine() {\n         // The math library does not need to be loaded since it is already\n         // statically linked in"}, {"sha": "8f75ae5ef5cc8441cd5b3e687a8465687e7928f1", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -97,10 +97,15 @@ pub type _Unwind_Exception_Cleanup_Fn =\n         extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n                       exception: *mut _Unwind_Exception);\n \n-#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n+#[cfg(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n+          target_os = \"freebsd\"))]\n #[link(name = \"gcc_s\")]\n extern {}\n \n+#[cfg(all(target_os = \"linux\", target_env = \"musl\", not(test)))]\n+#[link(name = \"unwind\", kind = \"static\")]\n+extern {}\n+\n #[cfg(any(target_os = \"android\", target_os = \"openbsd\"))]\n #[link(name = \"gcc\")]\n extern {}"}, {"sha": "a7f3bc2bdc82c3a07d5d9441599f74afc9a0d819", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -24,7 +24,7 @@ extern {}\n //\n // On Linux, librt and libdl are indirect dependencies via std,\n // and binutils 2.22+ won't add them automatically\n-#[cfg(target_os = \"linux\")]\n+#[cfg(all(target_os = \"linux\", not(target_env = \"musl\")))]\n #[link(name = \"dl\")]\n #[link(name = \"pthread\")]\n extern {}"}, {"sha": "cfab9d1c51a153d988b926bf16b158629c0856fe", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -342,7 +342,10 @@ fn min_stack_size(attr: *const libc::pthread_attr_t) -> usize {\n     static mut __pthread_get_minstack: Option<F> = None;\n \n     INIT.call_once(|| {\n-        let lib = DynamicLibrary::open(None).unwrap();\n+        let lib = match DynamicLibrary::open(None) {\n+            Ok(l) => l,\n+            Err(..) => return,\n+        };\n         unsafe {\n             if let Ok(f) = lib.symbol(\"__pthread_get_minstack\") {\n                 __pthread_get_minstack = Some(mem::transmute::<*const (), F>(f));"}, {"sha": "f59eb2c03013fd5eaa53c0e5050bf9b9969edf57", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -82,7 +82,8 @@ mod inner {\n     // OpenBSD provide it via libc\n     #[cfg(not(any(target_os = \"android\",\n                   target_os = \"bitrig\",\n-                  target_os = \"openbsd\")))]\n+                  target_os = \"openbsd\",\n+                  target_env = \"musl\")))]\n     #[link(name = \"rt\")]\n     extern {}\n "}, {"sha": "bb2832b874657deb26f0b0dc983e2326e197a40b", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -356,6 +356,7 @@ mod imp {\n         use sys_common::thread_local as os;\n \n         extern {\n+            #[linkage = \"extern_weak\"]\n             static __dso_handle: *mut u8;\n             #[linkage = \"extern_weak\"]\n             static __cxa_thread_atexit_impl: *const ();"}, {"sha": "81a6fb8ff6debbe064207a60c21b646d9973d258", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -101,8 +101,8 @@ impl Noise2DContext {\n \n fn main() {\n     let symbols = [' ', '\u2591', '\u2592', '\u2593', '\u2588', '\u2588'];\n-    let mut pixels = [0f32; 256*256];\n-    let n2d = Noise2DContext::new();\n+    let mut pixels = Box::new([0f32; 256*256]);\n+    let n2d = Box::new(Noise2DContext::new());\n \n     for _ in 0..100 {\n         for y in 0..256 {"}, {"sha": "55b2b1e2e324f600aa671bd9a98771b188ccefc4", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -50,17 +50,17 @@ use std::ptr::copy;\n use std::thread;\n \n struct Tables {\n-    table8: [u8; 1 << 8],\n-    table16: [u16; 1 << 16]\n+    table8: Box<[u8; 1 << 8]>,\n+    table16: Box<[u16; 1 << 16]>,\n }\n \n impl Tables {\n     fn new() -> Tables {\n-        let mut table8 = [0;1 << 8];\n+        let mut table8 = Box::new([0;1 << 8]);\n         for (i, v) in table8.iter_mut().enumerate() {\n             *v = Tables::computed_cpl8(i as u8);\n         }\n-        let mut table16 = [0;1 << 16];\n+        let mut table16 = Box::new([0;1 << 16]);\n         for (i, v) in table16.iter_mut().enumerate() {\n             *v = (table8[i & 255] as u16) << 8 |\n                  table8[i >> 8]  as u16;"}, {"sha": "fc9f241af7f10279671b309896ba0b64bd0ce085", "filename": "src/test/run-pass-fulldeps/issue-13560.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -12,6 +12,7 @@\n // aux-build:issue-13560-2.rs\n // aux-build:issue-13560-3.rs\n // ignore-stage1\n+// ignore-musl\n \n // Regression test for issue #13560, the test itself is all in the dependent\n // libraries. The fail which previously failed to compile is the one numbered 3."}, {"sha": "66201ff901f309ce702e706b0e312be280919d48", "filename": "src/test/run-pass/issue-12133-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Frun-pass%2Fissue-12133-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Frun-pass%2Fissue-12133-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12133-3.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -11,6 +11,7 @@\n // aux-build:issue-12133-rlib.rs\n // aux-build:issue-12133-dylib.rs\n // aux-build:issue-12133-dylib2.rs\n+// ignore-musl\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "98a7ce55540d163a46f53ec203cb1a31cef0ca40", "filename": "src/test/run-pass/linkage-visibility.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -11,6 +11,7 @@\n // aux-build:linkage-visibility.rs\n // ignore-android: FIXME(#10379)\n // ignore-windows: std::dynamic_lib does not work on Windows well\n+// ignore-musl\n \n #![feature(std_misc)]\n "}, {"sha": "2c6e55b57b066a5be9c766243ec93ffff9d5b3a0", "filename": "src/test/run-pass/out-of-stack-new-thread-no-split.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//ignore-android\n-//ignore-freebsd\n-//ignore-ios\n-//ignore-dragonfly\n-//ignore-bitrig\n+// ignore-android\n+// ignore-freebsd\n+// ignore-ios\n+// ignore-dragonfly\n+// ignore-bitrig\n+// ignore-musl\n \n #![feature(asm)]\n "}, {"sha": "f21b787dab72f052c2bee89a6d38d4fe10b7af41", "filename": "src/test/run-pass/sepcomp-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Frun-pass%2Fsepcomp-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadc67e8fd942e0a3896ed0d5375444b221e60d7/src%2Ftest%2Frun-pass%2Fsepcomp-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp-extern.rs?ref=cadc67e8fd942e0a3896ed0d5375444b221e60d7", "patch": "@@ -14,8 +14,8 @@\n \n // Test accessing external items from multiple compilation units.\n \n+extern crate sepcomp_extern_lib;\n \n-#[link(name = \"sepcomp_extern_lib\")]\n extern {\n     #[allow(ctypes)]\n     fn foo() -> usize;"}]}