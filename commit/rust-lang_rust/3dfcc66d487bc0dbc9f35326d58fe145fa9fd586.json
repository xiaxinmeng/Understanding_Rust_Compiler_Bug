{"sha": "3dfcc66d487bc0dbc9f35326d58fe145fa9fd586", "node_id": "C_kwDOAAsO6NoAKDNkZmNjNjZkNDg3YmMwZGJjOWYzNTMyNmQ1OGZlMTQ1ZmE5ZmQ1ODY", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-01-16T01:14:13Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-01-16T01:14:13Z"}, "message": "Add `log2` and `log10` to `NonZeroU*`\n\nThis version is nice in that it doesn't need to worry about zeros, and thus doesn't have any error cases.", "tree": {"sha": "9e36e01090e16cc0c3a5e7d5437038d1a699b2e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e36e01090e16cc0c3a5e7d5437038d1a699b2e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586", "html_url": "https://github.com/rust-lang/rust/commit/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "html_url": "https://github.com/rust-lang/rust/commit/89b9f7b284aacc5f8613438b80e4dd7bdd10549e"}], "stats": {"total": 338, "additions": 197, "deletions": 141}, "files": [{"sha": "cc26c04a5d42a1e1faf113a5495d91f0212288c8", "filename": "library/core/src/num/int_log10.rs", "status": "modified", "additions": 123, "deletions": 124, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs?ref=3dfcc66d487bc0dbc9f35326d58fe145fa9fd586", "patch": "@@ -1,141 +1,140 @@\n-mod unchecked {\n-    // 0 < val <= u8::MAX\n-    #[inline]\n-    pub const fn u8(val: u8) -> u32 {\n-        let val = val as u32;\n-\n-        // For better performance, avoid branches by assembling the solution\n-        // in the bits above the low 8 bits.\n-\n-        // Adding c1 to val gives 10 in the top bits for val < 10, 11 for val >= 10\n-        const C1: u32 = 0b11_00000000 - 10; // 758\n-        // Adding c2 to val gives 01 in the top bits for val < 100, 10 for val >= 100\n-        const C2: u32 = 0b10_00000000 - 100; // 412\n-\n-        // Value of top bits:\n-        //            +c1  +c2  1&2\n-        //     0..=9   10   01   00 = 0\n-        //   10..=99   11   01   01 = 1\n-        // 100..=255   11   10   10 = 2\n-        ((val + C1) & (val + C2)) >> 8\n-    }\n+/// These functions compute the integer logarithm of their type, assuming\n+/// that someone has already checked that the the value is strictly positive.\n+\n+// 0 < val <= u8::MAX\n+#[inline]\n+pub const fn u8(val: u8) -> u32 {\n+    let val = val as u32;\n+\n+    // For better performance, avoid branches by assembling the solution\n+    // in the bits above the low 8 bits.\n+\n+    // Adding c1 to val gives 10 in the top bits for val < 10, 11 for val >= 10\n+    const C1: u32 = 0b11_00000000 - 10; // 758\n+    // Adding c2 to val gives 01 in the top bits for val < 100, 10 for val >= 100\n+    const C2: u32 = 0b10_00000000 - 100; // 412\n+\n+    // Value of top bits:\n+    //            +c1  +c2  1&2\n+    //     0..=9   10   01   00 = 0\n+    //   10..=99   11   01   01 = 1\n+    // 100..=255   11   10   10 = 2\n+    ((val + C1) & (val + C2)) >> 8\n+}\n \n-    // 0 < val < 100_000\n-    #[inline]\n-    const fn less_than_5(val: u32) -> u32 {\n-        // Similar to u8, when adding one of these constants to val,\n-        // we get two possible bit patterns above the low 17 bits,\n-        // depending on whether val is below or above the threshold.\n-        const C1: u32 = 0b011_00000000000000000 - 10; // 393206\n-        const C2: u32 = 0b100_00000000000000000 - 100; // 524188\n-        const C3: u32 = 0b111_00000000000000000 - 1000; // 916504\n-        const C4: u32 = 0b100_00000000000000000 - 10000; // 514288\n-\n-        // Value of top bits:\n-        //                +c1  +c2  1&2  +c3  +c4  3&4   ^\n-        //         0..=9  010  011  010  110  011  010  000 = 0\n-        //       10..=99  011  011  011  110  011  010  001 = 1\n-        //     100..=999  011  100  000  110  011  010  010 = 2\n-        //   1000..=9999  011  100  000  111  011  011  011 = 3\n-        // 10000..=99999  011  100  000  111  100  100  100 = 4\n-        (((val + C1) & (val + C2)) ^ ((val + C3) & (val + C4))) >> 17\n-    }\n+// 0 < val < 100_000\n+#[inline]\n+const fn less_than_5(val: u32) -> u32 {\n+    // Similar to u8, when adding one of these constants to val,\n+    // we get two possible bit patterns above the low 17 bits,\n+    // depending on whether val is below or above the threshold.\n+    const C1: u32 = 0b011_00000000000000000 - 10; // 393206\n+    const C2: u32 = 0b100_00000000000000000 - 100; // 524188\n+    const C3: u32 = 0b111_00000000000000000 - 1000; // 916504\n+    const C4: u32 = 0b100_00000000000000000 - 10000; // 514288\n+\n+    // Value of top bits:\n+    //                +c1  +c2  1&2  +c3  +c4  3&4   ^\n+    //         0..=9  010  011  010  110  011  010  000 = 0\n+    //       10..=99  011  011  011  110  011  010  001 = 1\n+    //     100..=999  011  100  000  110  011  010  010 = 2\n+    //   1000..=9999  011  100  000  111  011  011  011 = 3\n+    // 10000..=99999  011  100  000  111  100  100  100 = 4\n+    (((val + C1) & (val + C2)) ^ ((val + C3) & (val + C4))) >> 17\n+}\n \n-    // 0 < val <= u16::MAX\n-    #[inline]\n-    pub const fn u16(val: u16) -> u32 {\n-        less_than_5(val as u32)\n-    }\n+// 0 < val <= u16::MAX\n+#[inline]\n+pub const fn u16(val: u16) -> u32 {\n+    less_than_5(val as u32)\n+}\n \n-    // 0 < val <= u32::MAX\n-    #[inline]\n-    pub const fn u32(mut val: u32) -> u32 {\n-        let mut log = 0;\n-        if val >= 100_000 {\n-            val /= 100_000;\n-            log += 5;\n-        }\n-        log + less_than_5(val)\n+// 0 < val <= u32::MAX\n+#[inline]\n+pub const fn u32(mut val: u32) -> u32 {\n+    let mut log = 0;\n+    if val >= 100_000 {\n+        val /= 100_000;\n+        log += 5;\n     }\n+    log + less_than_5(val)\n+}\n \n-    // 0 < val <= u64::MAX\n-    #[inline]\n-    pub const fn u64(mut val: u64) -> u32 {\n-        let mut log = 0;\n-        if val >= 10_000_000_000 {\n-            val /= 10_000_000_000;\n-            log += 10;\n-        }\n-        if val >= 100_000 {\n-            val /= 100_000;\n-            log += 5;\n-        }\n-        log + less_than_5(val as u32)\n+// 0 < val <= u64::MAX\n+#[inline]\n+pub const fn u64(mut val: u64) -> u32 {\n+    let mut log = 0;\n+    if val >= 10_000_000_000 {\n+        val /= 10_000_000_000;\n+        log += 10;\n     }\n-\n-    // 0 < val <= u128::MAX\n-    #[inline]\n-    pub const fn u128(mut val: u128) -> u32 {\n-        let mut log = 0;\n-        if val >= 100_000_000_000_000_000_000_000_000_000_000 {\n-            val /= 100_000_000_000_000_000_000_000_000_000_000;\n-            log += 32;\n-            return log + u32(val as u32);\n-        }\n-        if val >= 10_000_000_000_000_000 {\n-            val /= 10_000_000_000_000_000;\n-            log += 16;\n-        }\n-        log + u64(val as u64)\n+    if val >= 100_000 {\n+        val /= 100_000;\n+        log += 5;\n     }\n+    log + less_than_5(val as u32)\n+}\n \n-    // 0 < val <= i8::MAX\n-    #[inline]\n-    pub const fn i8(val: i8) -> u32 {\n-        u8(val as u8)\n+// 0 < val <= u128::MAX\n+#[inline]\n+pub const fn u128(mut val: u128) -> u32 {\n+    let mut log = 0;\n+    if val >= 100_000_000_000_000_000_000_000_000_000_000 {\n+        val /= 100_000_000_000_000_000_000_000_000_000_000;\n+        log += 32;\n+        return log + u32(val as u32);\n     }\n-\n-    // 0 < val <= i16::MAX\n-    #[inline]\n-    pub const fn i16(val: i16) -> u32 {\n-        u16(val as u16)\n+    if val >= 10_000_000_000_000_000 {\n+        val /= 10_000_000_000_000_000;\n+        log += 16;\n     }\n+    log + u64(val as u64)\n+}\n \n-    // 0 < val <= i32::MAX\n-    #[inline]\n-    pub const fn i32(val: i32) -> u32 {\n-        u32(val as u32)\n-    }\n+#[cfg(target_pointer_width = \"16\")]\n+#[inline]\n+pub const fn usize(val: usize) -> u32 {\n+    u16(val as _)\n+}\n \n-    // 0 < val <= i64::MAX\n-    #[inline]\n-    pub const fn i64(val: i64) -> u32 {\n-        u64(val as u64)\n-    }\n+#[cfg(target_pointer_width = \"32\")]\n+#[inline]\n+pub const fn usize(val: usize) -> u32 {\n+    u32(val as _)\n+}\n \n-    // 0 < val <= i128::MAX\n-    #[inline]\n-    pub const fn i128(val: i128) -> u32 {\n-        u128(val as u128)\n-    }\n+#[cfg(target_pointer_width = \"64\")]\n+#[inline]\n+pub const fn usize(val: usize) -> u32 {\n+    u64(val as _)\n+}\n+\n+// 0 < val <= i8::MAX\n+#[inline]\n+pub const fn i8(val: i8) -> u32 {\n+    u8(val as u8)\n }\n \n-macro_rules! impl_checked {\n-    ($T:ident) => {\n-        #[inline]\n-        pub const fn $T(val: $T) -> Option<u32> {\n-            if val > 0 { Some(unchecked::$T(val)) } else { None }\n-        }\n-    };\n+// 0 < val <= i16::MAX\n+#[inline]\n+pub const fn i16(val: i16) -> u32 {\n+    u16(val as u16)\n }\n \n-impl_checked! { u8 }\n-impl_checked! { u16 }\n-impl_checked! { u32 }\n-impl_checked! { u64 }\n-impl_checked! { u128 }\n-impl_checked! { i8 }\n-impl_checked! { i16 }\n-impl_checked! { i32 }\n-impl_checked! { i64 }\n-impl_checked! { i128 }\n+// 0 < val <= i32::MAX\n+#[inline]\n+pub const fn i32(val: i32) -> u32 {\n+    u32(val as u32)\n+}\n+\n+// 0 < val <= i64::MAX\n+#[inline]\n+pub const fn i64(val: i64) -> u32 {\n+    u64(val as u64)\n+}\n+\n+// 0 < val <= i128::MAX\n+#[inline]\n+pub const fn i128(val: i128) -> u32 {\n+    u128(val as u128)\n+}"}, {"sha": "79436c8e8ede485c5fc93fadd00c1cd6a6e8ffb0", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=3dfcc66d487bc0dbc9f35326d58fe145fa9fd586", "patch": "@@ -2362,7 +2362,11 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_log10(self) -> Option<u32> {\n-            int_log10::$ActualT(self as $ActualT)\n+            if self > 0 {\n+                Some(int_log10::$ActualT(self as $ActualT))\n+            } else {\n+                None\n+            }\n         }\n \n         /// Computes the absolute value of `self`."}, {"sha": "721c030b410aec548ecbd15e73630e8bd65ba6f5", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=3dfcc66d487bc0dbc9f35326d58fe145fa9fd586", "patch": "@@ -264,7 +264,7 @@ const ASCII_CASE_MASK: u8 = 0b0010_0000;\n \n #[lang = \"u8\"]\n impl u8 {\n-    uint_impl! { u8, u8, i8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n+    uint_impl! { u8, u8, i8, NonZeroU8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n     \"[0x12]\", \"\", \"\" }\n     widening_impl! { u8, u16, 8, unsigned }\n \n@@ -813,21 +813,21 @@ impl u8 {\n \n #[lang = \"u16\"]\n impl u16 {\n-    uint_impl! { u16, u16, i16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n+    uint_impl! { u16, u16, i16, NonZeroU16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n     widening_impl! { u16, u32, 16, unsigned }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n-    uint_impl! { u32, u32, i32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n+    uint_impl! { u32, u32, i32, NonZeroU32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n     widening_impl! { u32, u64, 32, unsigned }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n-    uint_impl! { u64, u64, i64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n+    uint_impl! { u64, u64, i64, NonZeroU64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n@@ -837,7 +837,7 @@ impl u64 {\n \n #[lang = \"u128\"]\n impl u128 {\n-    uint_impl! { u128, u128, i128, 128, 340282366920938463463374607431768211455, 16,\n+    uint_impl! { u128, u128, i128, NonZeroU128, 128, 340282366920938463463374607431768211455, 16,\n     \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n     \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n     \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n@@ -850,15 +850,15 @@ impl u128 {\n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u16, isize, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n+    uint_impl! { usize, u16, isize, NonZeroUsize, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n     widening_impl! { usize, u32, 16, unsigned }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u32, isize, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n+    uint_impl! { usize, u32, isize, NonZeroUsize, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n     widening_impl! { usize, u64, 32, unsigned }\n@@ -867,7 +867,7 @@ impl usize {\n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u64, isize, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n+    uint_impl! { usize, u64, isize, NonZeroUsize, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\","}, {"sha": "e21ae48917953530440f1e08086ff558e080b827", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=3dfcc66d487bc0dbc9f35326d58fe145fa9fd586", "patch": "@@ -302,7 +302,7 @@ nonzero_integers_div! {\n \n // A bunch of methods for unsigned nonzero types only.\n macro_rules! nonzero_unsigned_operations {\n-    ( $( $Ty: ident($Int: ty); )+ ) => {\n+    ( $( $Ty: ident($Int: ident); )+ ) => {\n         $(\n             impl $Ty {\n                 /// Add an unsigned integer to a non-zero value.\n@@ -442,6 +442,56 @@ macro_rules! nonzero_unsigned_operations {\n                         None\n                     }\n                 }\n+\n+                /// Returns the base 2 logarithm of the number, rounded down.\n+                ///\n+                /// This is the same operation as\n+                #[doc = concat!(\"[`\", stringify!($Int), \"::log2`],\")]\n+                /// except that it has no failure cases to worry about\n+                /// since this value can never be zero.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(int_log)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(7).unwrap().log2(), 2);\")]\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(8).unwrap().log2(), 3);\")]\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(9).unwrap().log2(), 3);\")]\n+                /// ```\n+                #[unstable(feature = \"int_log\", issue = \"70887\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n+                #[inline]\n+                pub const fn log2(self) -> u32 {\n+                    <$Int>::BITS - 1 - self.leading_zeros()\n+                }\n+\n+                /// Returns the base 10 logarithm of the number, rounded down.\n+                ///\n+                /// This is the same operation as\n+                #[doc = concat!(\"[`\", stringify!($Int), \"::log10`],\")]\n+                /// except that it has no failure cases to worry about\n+                /// since this value can never be zero.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(int_log)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(99).unwrap().log10(), 1);\")]\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(100).unwrap().log10(), 2);\")]\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(101).unwrap().log10(), 2);\")]\n+                /// ```\n+                #[unstable(feature = \"int_log\", issue = \"70887\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n+                #[inline]\n+                pub const fn log10(self) -> u32 {\n+                    super::int_log10::$Int(self.0)\n+                }\n             }\n         )+\n     }"}, {"sha": "0bb654977764d48c7df40eefa5730247d8580a8c", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfcc66d487bc0dbc9f35326d58fe145fa9fd586/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=3dfcc66d487bc0dbc9f35326d58fe145fa9fd586", "patch": "@@ -1,5 +1,6 @@\n macro_rules! uint_impl {\n-    ($SelfT:ty, $ActualT:ident, $SignedT:ident, $BITS:expr, $MaxV:expr,\n+    ($SelfT:ty, $ActualT:ident, $SignedT:ident, $NonZeroT:ident,\n+        $BITS:expr, $MaxV:expr,\n         $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n         $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n         $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n@@ -839,12 +840,10 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_log2(self) -> Option<u32> {\n-            if self <= 0 {\n-                None\n+            if let Some(x) = <$NonZeroT>::new(self) {\n+                Some(x.log2())\n             } else {\n-                // SAFETY: We just checked that this number is positive\n-                let log = (Self::BITS - 1) - unsafe { intrinsics::ctlz_nonzero(self) as u32 };\n-                Some(log)\n+                None\n             }\n         }\n \n@@ -863,7 +862,11 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_log10(self) -> Option<u32> {\n-            int_log10::$ActualT(self as $ActualT)\n+            if let Some(x) = <$NonZeroT>::new(self) {\n+                Some(x.log10())\n+            } else {\n+                None\n+            }\n         }\n \n         /// Checked negation. Computes `-self`, returning `None` unless `self =="}]}