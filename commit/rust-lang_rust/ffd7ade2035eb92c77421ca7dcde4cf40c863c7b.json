{"sha": "ffd7ade2035eb92c77421ca7dcde4cf40c863c7b", "node_id": "C_kwDOAAsO6NoAKGZmZDdhZGUyMDM1ZWI5MmM3NzQyMWNhN2RjZGU0Y2Y0MGM4NjNjN2I", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-07-13T21:13:27Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-09-30T19:23:30Z"}, "message": "fix issues pointed out in review", "tree": {"sha": "7eacfde60eb20827dfe052086932a7797eecd42d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eacfde60eb20827dfe052086932a7797eecd42d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffd7ade2035eb92c77421ca7dcde4cf40c863c7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd7ade2035eb92c77421ca7dcde4cf40c863c7b", "html_url": "https://github.com/rust-lang/rust/commit/ffd7ade2035eb92c77421ca7dcde4cf40c863c7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffd7ade2035eb92c77421ca7dcde4cf40c863c7b/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6654a0bbdc5040a35e2e02e7a4a49726727ff221", "url": "https://api.github.com/repos/rust-lang/rust/commits/6654a0bbdc5040a35e2e02e7a4a49726727ff221", "html_url": "https://github.com/rust-lang/rust/commit/6654a0bbdc5040a35e2e02e7a4a49726727ff221"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "8a2d254a83451a7f554e97b2f2cb647949530512", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ffd7ade2035eb92c77421ca7dcde4cf40c863c7b/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd7ade2035eb92c77421ca7dcde4cf40c863c7b/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=ffd7ade2035eb92c77421ca7dcde4cf40c863c7b", "patch": "@@ -164,18 +164,19 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     #[inline]\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n         let step_size = self.len().min(n);\n+        let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);\n         if mem::size_of::<T>() == 0 {\n             // SAFETY: due to unchecked casts of unsigned amounts to signed offsets the wraparound\n             // effectively results in unsigned pointers representing positions 0..usize::MAX,\n             // which is valid for ZSTs.\n             self.ptr = unsafe { arith_offset(self.ptr as *const i8, step_size as isize) as *mut T }\n         } else {\n-            let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);\n             // SAFETY: the min() above ensures that step_size is in bounds\n-            unsafe {\n-                self.ptr = self.ptr.add(step_size);\n-                ptr::drop_in_place(to_drop);\n-            }\n+            self.ptr = unsafe { self.ptr.add(step_size) };\n+        }\n+        // SAFETY: the min() above ensures that step_size is in bounds\n+        unsafe {\n+            ptr::drop_in_place(to_drop);\n         }\n         if step_size < n {\n             return Err(step_size);\n@@ -237,11 +238,11 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n         } else {\n             // SAFETY: same as for advance_by()\n             self.end = unsafe { self.end.offset(step_size.wrapping_neg() as isize) };\n-            let to_drop = ptr::slice_from_raw_parts_mut(self.end as *mut T, step_size);\n-            // SAFETY: same as for advance_by()\n-            unsafe {\n-                ptr::drop_in_place(to_drop);\n-            }\n+        }\n+        let to_drop = ptr::slice_from_raw_parts_mut(self.end as *mut T, step_size);\n+        // SAFETY: same as for advance_by()\n+        unsafe {\n+            ptr::drop_in_place(to_drop);\n         }\n         if step_size < n {\n             return Err(step_size);"}, {"sha": "351fd569d8acf98d99d2cfcef4ec2d4c8900ec05", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffd7ade2035eb92c77421ca7dcde4cf40c863c7b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd7ade2035eb92c77421ca7dcde4cf40c863c7b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=ffd7ade2035eb92c77421ca7dcde4cf40c863c7b", "patch": "@@ -412,8 +412,9 @@ where\n         self.frontiter = None;\n \n         if let Some(ref mut back) = self.backiter {\n-            if let Err(advanced) = back.advance_by(rem) {\n-                rem -= advanced\n+            match back.advance_by(rem) {\n+                ret @ Ok(_) => return ret,\n+                Err(advanced) => rem -= advanced,\n             }\n         }\n "}, {"sha": "9b89ca5a9479dfb201e11306ee12374709abfd47", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ffd7ade2035eb92c77421ca7dcde4cf40c863c7b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd7ade2035eb92c77421ca7dcde4cf40c863c7b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=ffd7ade2035eb92c77421ca7dcde4cf40c863c7b", "patch": "@@ -116,14 +116,35 @@ where\n     }\n \n     #[inline]\n+    #[rustc_inherit_overflow_checks]\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        if self.n >= n {\n-            self.n -= n;\n-            return Ok(());\n+        let mut rem = n;\n+\n+        let step_one = self.n.saturating_add(rem);\n+        match self.iter.advance_by(step_one) {\n+            Ok(_) => {\n+                rem -= step_one - self.n;\n+                self.n = 0;\n+            }\n+            Err(advanced) => {\n+                let advanced_without_skip = advanced.saturating_sub(self.n);\n+                self.n = self.n.saturating_sub(advanced);\n+                return Err(advanced_without_skip);\n+            }\n         }\n-        let rem = n - self.n;\n-        self.n = 0;\n-        self.iter.advance_by(rem)\n+\n+        // step_one calculation may have saturated\n+        if unlikely(rem > 0) {\n+            return match self.iter.advance_by(rem) {\n+                ret @ Ok(_) => ret,\n+                Err(advanced) => {\n+                    rem -= advanced;\n+                    Err(n - rem)\n+                }\n+            };\n+        }\n+\n+        Ok(())\n     }\n }\n "}]}