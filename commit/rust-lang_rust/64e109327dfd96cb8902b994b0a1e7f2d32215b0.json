{"sha": "64e109327dfd96cb8902b994b0a1e7f2d32215b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZTEwOTMyN2RmZDk2Y2I4OTAyYjk5NGIwYTFlN2YyZDMyMjE1YjA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-28T13:19:44Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-12-01T12:48:19Z"}, "message": "incr.comp.: Add a newtype for byte positions within the incr. comp. cache.", "tree": {"sha": "936a7b7d6437f53a34582c5887f93c0b9f9c8dac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/936a7b7d6437f53a34582c5887f93c0b9f9c8dac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64e109327dfd96cb8902b994b0a1e7f2d32215b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64e109327dfd96cb8902b994b0a1e7f2d32215b0", "html_url": "https://github.com/rust-lang/rust/commit/64e109327dfd96cb8902b994b0a1e7f2d32215b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64e109327dfd96cb8902b994b0a1e7f2d32215b0/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45439945c9cb1122c882cefbe0e38c3bb6f20514", "url": "https://api.github.com/repos/rust-lang/rust/commits/45439945c9cb1122c882cefbe0e38c3bb6f20514", "html_url": "https://github.com/rust-lang/rust/commit/45439945c9cb1122c882cefbe0e38c3bb6f20514"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "18304b7aa7d7cbbb6c1fd7dfaa7b78d25c3eade2", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/64e109327dfd96cb8902b994b0a1e7f2d32215b0/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e109327dfd96cb8902b994b0a1e7f2d32215b0/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=64e109327dfd96cb8902b994b0a1e7f2d32215b0", "patch": "@@ -73,11 +73,11 @@ pub struct OnDiskCache<'sess> {\n \n     // These two fields caches that are populated lazily during decoding.\n     file_index_to_file: RefCell<FxHashMap<FileMapIndex, Rc<FileMap>>>,\n-    synthetic_expansion_infos: RefCell<FxHashMap<usize, SyntaxContext>>,\n+    synthetic_expansion_infos: RefCell<FxHashMap<AbsoluteBytePos, SyntaxContext>>,\n \n     // A map from dep-node to the position of the cached query result in\n     // `serialized_data`.\n-    query_result_index: FxHashMap<SerializedDepNodeIndex, usize>,\n+    query_result_index: FxHashMap<SerializedDepNodeIndex, AbsoluteBytePos>,\n }\n \n // This type is used only for (de-)serialization.\n@@ -88,11 +88,25 @@ struct Header {\n }\n \n type EncodedPrevDiagnostics = Vec<(SerializedDepNodeIndex, Vec<Diagnostic>)>;\n-type EncodedQueryResultIndex = Vec<(SerializedDepNodeIndex, usize)>;\n+type EncodedQueryResultIndex = Vec<(SerializedDepNodeIndex, AbsoluteBytePos)>;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n struct FileMapIndex(u32);\n \n+#[derive(Copy, Clone, Debug, Hash, Eq, PartialEq, RustcEncodable, RustcDecodable)]\n+struct AbsoluteBytePos(u32);\n+\n+impl AbsoluteBytePos {\n+    fn new(pos: usize) -> AbsoluteBytePos {\n+        debug_assert!(pos <= ::std::u32::MAX as usize);\n+        AbsoluteBytePos(pos as u32)\n+    }\n+\n+    fn to_usize(self) -> usize {\n+        self.0 as usize\n+    }\n+}\n+\n impl<'sess> OnDiskCache<'sess> {\n     /// Create a new OnDiskCache instance from the serialized data in `data`.\n     pub fn new(sess: &'sess Session, data: Vec<u8>, start_pos: usize) -> OnDiskCache<'sess> {\n@@ -309,7 +323,7 @@ impl<'sess> OnDiskCache<'sess> {\n \n         let mut decoder = CacheDecoder {\n             tcx: Some(tcx),\n-            opaque: opaque::Decoder::new(&self.serialized_data[..], pos),\n+            opaque: opaque::Decoder::new(&self.serialized_data[..], pos.to_usize()),\n             codemap: self.codemap,\n             cnum_map: cnum_map.as_ref().unwrap(),\n             file_index_to_file: &mut file_index_to_file,\n@@ -389,7 +403,7 @@ struct CacheDecoder<'a, 'tcx: 'a, 'x> {\n     opaque: opaque::Decoder<'x>,\n     codemap: &'x CodeMap,\n     cnum_map: &'x IndexVec<CrateNum, Option<CrateNum>>,\n-    synthetic_expansion_infos: &'x mut FxHashMap<usize, SyntaxContext>,\n+    synthetic_expansion_infos: &'x mut FxHashMap<AbsoluteBytePos, SyntaxContext>,\n     file_index_to_file: &'x mut FxHashMap<FileMapIndex, Rc<FileMap>>,\n     file_index_to_stable_id: &'x FxHashMap<FileMapIndex, StableFilemapId>,\n }\n@@ -521,18 +535,18 @@ impl<'a, 'tcx, 'x> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx, 'x> {\n                 SyntaxContext::empty()\n             }\n             TAG_EXPANSION_INFO_INLINE => {\n-                let pos = self.position();\n+                let pos = AbsoluteBytePos::new(self.position());\n                 let expn_info: ExpnInfo = Decodable::decode(self)?;\n                 let ctxt = SyntaxContext::allocate_directly(expn_info);\n                 self.synthetic_expansion_infos.insert(pos, ctxt);\n                 ctxt\n             }\n             TAG_EXPANSION_INFO_SHORTHAND => {\n-                let pos = usize::decode(self)?;\n+                let pos = AbsoluteBytePos::decode(self)?;\n                 if let Some(ctxt) = self.synthetic_expansion_infos.get(&pos).cloned() {\n                     ctxt\n                 } else {\n-                    let expn_info = self.with_position(pos, |this| {\n+                    let expn_info = self.with_position(pos.to_usize(), |this| {\n                          ExpnInfo::decode(this)\n                     })?;\n                     let ctxt = SyntaxContext::allocate_directly(expn_info);\n@@ -644,7 +658,7 @@ struct CacheEncoder<'enc, 'a, 'tcx, E>\n     encoder: &'enc mut E,\n     type_shorthands: FxHashMap<ty::Ty<'tcx>, usize>,\n     predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n-    expn_info_shorthands: FxHashMap<Mark, usize>,\n+    expn_info_shorthands: FxHashMap<Mark, AbsoluteBytePos>,\n     codemap: CachingCodemapView<'tcx>,\n     file_to_file_index: FxHashMap<*const FileMap, FileMapIndex>,\n }\n@@ -725,7 +739,7 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<Span> for CacheEncoder<'enc, 'a, 'tcx\n                     pos.encode(self)\n                 } else {\n                     TAG_EXPANSION_INFO_INLINE.encode(self)?;\n-                    let pos = self.position();\n+                    let pos = AbsoluteBytePos::new(self.position());\n                     self.expn_info_shorthands.insert(mark, pos);\n                     expn_info.encode(self)\n                 }\n@@ -951,7 +965,7 @@ fn encode_query_results<'enc, 'a, 'tcx, Q, E>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n \n             // Record position of the cache entry\n-            query_result_index.push((dep_node, encoder.position()));\n+            query_result_index.push((dep_node, AbsoluteBytePos::new(encoder.position())));\n \n             // Encode the type check tables with the SerializedDepNodeIndex\n             // as tag."}]}