{"sha": "04f09c9d8548253bff2758a2b239302d574455ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZjA5YzlkODU0ODI1M2JmZjI3NThhMmIyMzkzMDJkNTc0NDU1YWQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-13T07:42:29Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-13T08:33:32Z"}, "message": "Replace '*_indent' with 'indent_style' in src", "tree": {"sha": "23a2d6d0feb963aee47d65c2475b6a11590f838b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23a2d6d0feb963aee47d65c2475b6a11590f838b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04f09c9d8548253bff2758a2b239302d574455ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04f09c9d8548253bff2758a2b239302d574455ad", "html_url": "https://github.com/rust-lang/rust/commit/04f09c9d8548253bff2758a2b239302d574455ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04f09c9d8548253bff2758a2b239302d574455ad/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4e32b1853443ae0e1369bd61ad3baa01f7c8031", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e32b1853443ae0e1369bd61ad3baa01f7c8031", "html_url": "https://github.com/rust-lang/rust/commit/a4e32b1853443ae0e1369bd61ad3baa01f7c8031"}], "stats": {"total": 151, "additions": 68, "deletions": 83}, "files": [{"sha": "1a3586cd0441081add7ab3dec4edf780ed578e58", "filename": "src/chains.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/04f09c9d8548253bff2758a2b239302d574455ad/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f09c9d8548253bff2758a2b239302d574455ad/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=04f09c9d8548253bff2758a2b239302d574455ad", "patch": "@@ -87,7 +87,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n \n     // Parent is the first item in the chain, e.g., `foo` in `foo.bar.baz()`.\n     let parent_shape = if is_block_expr(context, &parent, \"\\n\") {\n-        match context.config.chain_indent() {\n+        match context.config.indent_style() {\n             IndentStyle::Visual => shape.visual_indent(0),\n             IndentStyle::Block => shape,\n         }\n@@ -105,10 +105,10 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let (nested_shape, extend) = if !parent_rewrite_contains_newline && is_continuable(&parent) {\n         (\n             chain_indent(context, shape.add_offset(parent_rewrite.len())),\n-            context.config.chain_indent() == IndentStyle::Visual || is_small_parent,\n+            context.config.indent_style() == IndentStyle::Visual || is_small_parent,\n         )\n     } else if is_block_expr(context, &parent, &parent_rewrite) {\n-        match context.config.chain_indent() {\n+        match context.config.indent_style() {\n             // Try to put the first child on the same line with parent's last line\n             IndentStyle::Block => (parent_shape.block_indent(context.config.tab_spaces()), true),\n             // The parent is a block, so align the rest of the chain with the closing\n@@ -127,7 +127,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let first_child_shape = if extend {\n         let overhead = last_line_width(&parent_rewrite);\n         let offset = trimmed_last_line_width(&parent_rewrite) + prefix_try_num;\n-        match context.config.chain_indent() {\n+        match context.config.indent_style() {\n             IndentStyle::Visual => parent_shape.offset_left(overhead)?,\n             IndentStyle::Block => parent_shape.block().offset_left(offset)?,\n         }\n@@ -172,7 +172,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         } else {\n             other_child_shape\n         };\n-        match context.config.chain_indent() {\n+        match context.config.indent_style() {\n             IndentStyle::Visual => last_shape.sub_width(shape.rhs_overhead(context.config))?,\n             IndentStyle::Block => last_shape,\n         }\n@@ -262,7 +262,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n \n     let first_connector = if is_small_parent || fits_single_line\n         || last_line_extendable(&parent_rewrite)\n-        || context.config.chain_indent() == IndentStyle::Visual\n+        || context.config.indent_style() == IndentStyle::Visual\n     {\n         \"\"\n     } else {\n@@ -272,7 +272,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let result = if is_small_parent && rewrites.len() > 1 {\n         let second_connector = if fits_single_line || rewrites[1] == \"?\"\n             || last_line_extendable(&rewrites[0])\n-            || context.config.chain_indent() == IndentStyle::Visual\n+            || context.config.indent_style() == IndentStyle::Visual\n         {\n             \"\"\n         } else {\n@@ -295,7 +295,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         )\n     };\n     let result = format!(\"{}{}\", result, repeat_try(suffix_try_num));\n-    if context.config.chain_indent() == IndentStyle::Visual {\n+    if context.config.indent_style() == IndentStyle::Visual {\n         wrap_str(result, context.config.max_width(), shape)\n     } else {\n         Some(result)\n@@ -381,7 +381,7 @@ fn make_subexpr_list(expr: &ast::Expr, context: &RewriteContext) -> (ast::Expr,\n }\n \n fn chain_indent(context: &RewriteContext, shape: Shape) -> Shape {\n-    match context.config.chain_indent() {\n+    match context.config.indent_style() {\n         IndentStyle::Visual => shape.visual_indent(0),\n         IndentStyle::Block => shape\n             .block_indent(context.config.tab_spaces())"}, {"sha": "b946d006a0b0afa356db745349cfa633a9d37697", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/04f09c9d8548253bff2758a2b239302d574455ad/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f09c9d8548253bff2758a2b239302d574455ad/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=04f09c9d8548253bff2758a2b239302d574455ad", "patch": "@@ -40,11 +40,6 @@ macro_rules! configuration_option_enum{\n     }\n }\n \n-configuration_option_enum! { Style:\n-    Rfc, // Follow the style RFCs style.\n-    Legacy, // Follow the traditional Rustfmt style.\n-}\n-\n configuration_option_enum! { NewlineStyle:\n     Windows, // \\r\\n\n     Unix, // \\n\n@@ -521,6 +516,7 @@ pub fn get_toml_path(dir: &Path) -> Result<Option<PathBuf>, Error> {\n \n \n create_config! {\n+    indent_style: IndentStyle, IndentStyle::Block, false, \"How do we indent expressions or items.\";\n     unstable_features: bool, false, true,\n             \"Enables unstable features. Only available on nightly channel\";\n     verbose: bool, false, false, \"Use verbose output\";\n@@ -545,7 +541,6 @@ create_config! {\n     fn_brace_style: BraceStyle, BraceStyle::SameLineWhere, false, \"Brace style for functions\";\n     item_brace_style: BraceStyle, BraceStyle::SameLineWhere, false,\n         \"Brace style for structs and enums\";\n-    control_style: Style, Style::Rfc, false, \"Indent style for control flow statements\";\n     control_brace_style: ControlBraceStyle, ControlBraceStyle::AlwaysSameLine, false,\n         \"Brace style for control flow constructs\";\n     impl_empty_single_line: bool, true, false, \"Put empty-body implementations on a single line\";\n@@ -559,35 +554,25 @@ create_config! {\n         \"Location of return type in function declaration\";\n     fn_args_paren_newline: bool, false, false, \"If function argument parenthesis goes on a newline\";\n     fn_args_density: Density, Density::Tall, false, \"Argument density in functions\";\n-    fn_args_indent: IndentStyle, IndentStyle::Block, false,\n-        \"Layout of function arguments and tuple structs\";\n-    array_indent: IndentStyle, IndentStyle::Block, false, \"Indent on arrays\";\n     array_width: usize, 60, false,\n         \"Maximum width of an array literal before falling back to vertical formatting\";\n     array_horizontal_layout_threshold: usize, 0, false,\n         \"How many elements array must have before rustfmt uses horizontal layout.\";\n     type_punctuation_density: TypeDensity, TypeDensity::Wide, false,\n         \"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\";\n-    where_style: Style, Style::Rfc, false, \"Overall strategy for where clauses\";\n     // TODO:\n     // 1. Should we at least try to put the where clause on the same line as the rest of the\n     // function decl?\n     // 2. Currently options `Tall` and `Vertical` produce the same output.\n     where_density: Density, Density::Vertical, false, \"Density of a where clause\";\n     where_single_line: bool, false, false, \"To force single line where layout\";\n     where_layout: ListTactic, ListTactic::Vertical, false, \"Element layout inside a where clause\";\n-    where_pred_indent: IndentStyle, IndentStyle::Visual, false,\n-        \"Indentation style of a where predicate\";\n-    generics_indent: IndentStyle, IndentStyle::Block, false, \"Indentation of generics\";\n-    struct_lit_indent: IndentStyle, IndentStyle::Block, false, \"Style of struct definition\";\n     struct_lit_multiline_style: MultilineStyle, MultilineStyle::PreferSingle, false,\n         \"Multiline style on literal structs\";\n-    fn_call_indent: IndentStyle, IndentStyle::Block, false, \"Indentation for function calls, etc.\";\n     report_todo: ReportTactic, ReportTactic::Never, false,\n         \"Report all, none or unnumbered occurrences of TODO in source file comments\";\n     report_fixme: ReportTactic, ReportTactic::Never, false,\n         \"Report all, none or unnumbered occurrences of FIXME in source file comments\";\n-    chain_indent: IndentStyle, IndentStyle::Block, false, \"Indentation of chain\";\n     chain_width: usize, 60, false, \"Maximum length of a chain to fit on a single line\";\n     chain_split_single_child: bool, false, false, \"Split a chain with a single child if its length \\\n                                             exceeds `chain_width`\";"}, {"sha": "5aee87dbbb737725900af41ba96735ca323dde86", "filename": "src/expr.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/04f09c9d8548253bff2758a2b239302d574455ad/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f09c9d8548253bff2758a2b239302d574455ad/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=04f09c9d8548253bff2758a2b239302d574455ad", "patch": "@@ -21,7 +21,7 @@ use closures;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n               rewrite_comment, rewrite_missing_comment, FindUncommented};\n-use config::{Config, ControlBraceStyle, IndentStyle, MultilineStyle, Style};\n+use config::{Config, ControlBraceStyle, IndentStyle, MultilineStyle};\n use lists::{definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting,\n             struct_lit_shape, struct_lit_tactic, write_list, DefinitiveListTactic, ListFormatting,\n             ListItem, ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n@@ -366,11 +366,11 @@ where\n \n     // We have to use multiple lines.\n     // Re-evaluate the rhs because we have more space now:\n-    let mut rhs_shape = match context.config.control_style() {\n-        Style::Legacy => shape\n+    let mut rhs_shape = match context.config.indent_style() {\n+        IndentStyle::Visual => shape\n             .sub_width(pp.suffix.len() + pp.prefix.len())?\n             .visual_indent(pp.prefix.len()),\n-        Style::Rfc => {\n+        IndentStyle::Block => {\n             // Try to calculate the initial constraint on the right hand side.\n             let rhs_overhead = shape.rhs_overhead(context.config);\n             Shape::indented(shape.indent.block_indent(context.config), context.config)\n@@ -415,7 +415,7 @@ where\n         1 // \"[\"\n     };\n \n-    let nested_shape = match context.config.array_indent() {\n+    let nested_shape = match context.config.indent_style() {\n         IndentStyle::Block => shape\n             .block()\n             .block_indent(context.config.tab_spaces())\n@@ -450,7 +450,7 @@ where\n         .iter()\n         .any(|li| li.item.as_ref().map(|s| s.len() > 10).unwrap_or(false));\n \n-    let mut tactic = match context.config.array_indent() {\n+    let mut tactic = match context.config.indent_style() {\n         IndentStyle::Block => {\n             // FIXME wrong shape in one-line case\n             match shape.width.checked_sub(2 * bracket_size) {\n@@ -473,7 +473,7 @@ where\n             DefinitiveListTactic::Mixed\n         },\n     };\n-    let ends_with_newline = tactic.ends_with_newline(context.config.array_indent());\n+    let ends_with_newline = tactic.ends_with_newline(context.config.indent_style());\n     if context.config.array_horizontal_layout_threshold() > 0\n         && items.len() > context.config.array_horizontal_layout_threshold()\n     {\n@@ -485,7 +485,7 @@ where\n         separator: \",\",\n         trailing_separator: if trailing_comma {\n             SeparatorTactic::Always\n-        } else if context.inside_macro || context.config.array_indent() == IndentStyle::Visual {\n+        } else if context.inside_macro || context.config.indent_style() == IndentStyle::Visual {\n             SeparatorTactic::Never\n         } else {\n             SeparatorTactic::Vertical\n@@ -498,7 +498,7 @@ where\n     };\n     let list_str = write_list(&items, &fmt)?;\n \n-    let result = if context.config.array_indent() == IndentStyle::Visual\n+    let result = if context.config.indent_style() == IndentStyle::Visual\n         || tactic == DefinitiveListTactic::Horizontal\n     {\n         if context.config.spaces_within_square_brackets() && !list_str.is_empty() {\n@@ -677,9 +677,9 @@ pub fn rewrite_cond(context: &RewriteContext, expr: &ast::Expr, shape: Shape) ->\n     match expr.node {\n         ast::ExprKind::Match(ref cond, _) => {\n             // `match `cond` {`\n-            let cond_shape = match context.config.control_style() {\n-                Style::Legacy => shape.shrink_left(6).and_then(|s| s.sub_width(2))?,\n-                Style::Rfc => shape.offset_left(8)?,\n+            let cond_shape = match context.config.indent_style() {\n+                IndentStyle::Visual => shape.shrink_left(6).and_then(|s| s.sub_width(2))?,\n+                IndentStyle::Block => shape.offset_left(8)?,\n             };\n             cond.rewrite(context, cond_shape)\n         }\n@@ -922,9 +922,9 @@ impl<'a> ControlFlow<'a> {\n \n         let pat_expr_string = match self.cond {\n             Some(cond) => {\n-                let cond_shape = match context.config.control_style() {\n-                    Style::Legacy => constr_shape.shrink_left(offset)?,\n-                    Style::Rfc => constr_shape.offset_left(offset)?,\n+                let cond_shape = match context.config.indent_style() {\n+                    IndentStyle::Visual => constr_shape.shrink_left(offset)?,\n+                    IndentStyle::Block => constr_shape.offset_left(offset)?,\n                 };\n                 rewrite_pat_expr(\n                     context,\n@@ -951,7 +951,7 @@ impl<'a> ControlFlow<'a> {\n             .max_width()\n             .checked_sub(constr_shape.used_width() + offset + brace_overhead)\n             .unwrap_or(0);\n-        let force_newline_brace = context.config.control_style() == Style::Rfc\n+        let force_newline_brace = context.config.indent_style() == IndentStyle::Block\n             && (pat_expr_string.contains('\\n') || pat_expr_string.len() > one_line_budget)\n             && !last_line_extendable(&pat_expr_string);\n \n@@ -1236,9 +1236,9 @@ fn rewrite_match(\n         ..shape\n     };\n     // 6 = `match `\n-    let cond_shape = match context.config.control_style() {\n-        Style::Legacy => cond_shape.shrink_left(6)?,\n-        Style::Rfc => cond_shape.offset_left(6)?,\n+    let cond_shape = match context.config.indent_style() {\n+        IndentStyle::Visual => cond_shape.shrink_left(6)?,\n+        IndentStyle::Block => cond_shape.offset_left(6)?,\n     };\n     let cond_str = cond.rewrite(context, cond_shape)?;\n     let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n@@ -1809,7 +1809,7 @@ where\n     let used_width = extra_offset(callee_str, shape);\n     let one_line_width = shape.width.checked_sub(used_width + 2 * paren_overhead)?;\n \n-    let nested_shape = shape_from_fn_call_indent(\n+    let nested_shape = shape_from_indent_style(\n         context,\n         shape,\n         used_width + 2 * paren_overhead,\n@@ -2058,7 +2058,7 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n     match expr.node {\n         ast::ExprKind::Match(..) => {\n             (context.use_block_indent() && args_len == 1)\n-                || (context.config.fn_call_indent() == IndentStyle::Visual && args_len > 1)\n+                || (context.config.indent_style() == IndentStyle::Visual && args_len > 1)\n         }\n         ast::ExprKind::If(..) |\n         ast::ExprKind::IfLet(..) |\n@@ -2070,7 +2070,7 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n         }\n         ast::ExprKind::Block(..) | ast::ExprKind::Closure(..) => {\n             context.use_block_indent()\n-                || context.config.fn_call_indent() == IndentStyle::Visual && args_len > 1\n+                || context.config.indent_style() == IndentStyle::Visual && args_len > 1\n         }\n         ast::ExprKind::Array(..) |\n         ast::ExprKind::Call(..) |\n@@ -2319,7 +2319,7 @@ fn rewrite_struct_lit<'a>(\n     let fields_str = wrap_struct_field(context, &fields_str, shape, v_shape, one_line_width);\n     Some(format!(\"{} {{{}}}\", path_str, fields_str))\n \n-    // FIXME if context.config.struct_lit_indent() == Visual, but we run out\n+    // FIXME if context.config.indent_style() == Visual, but we run out\n     // of space, we should fall back to BlockIndent.\n }\n \n@@ -2330,7 +2330,7 @@ pub fn wrap_struct_field(\n     nested_shape: Shape,\n     one_line_width: usize,\n ) -> String {\n-    if context.config.struct_lit_indent() == IndentStyle::Block\n+    if context.config.indent_style() == IndentStyle::Block\n         && (fields_str.contains('\\n')\n             || context.config.struct_lit_multiline_style() == MultilineStyle::ForceMulti\n             || fields_str.len() > one_line_width)\n@@ -2401,7 +2401,7 @@ pub fn rewrite_field(\n     }\n }\n \n-fn shape_from_fn_call_indent(\n+fn shape_from_indent_style(\n     context: &RewriteContext,\n     shape: Shape,\n     overhead: usize,"}, {"sha": "d5e02dde6e551a33f5bc985df6a8a77d99d1a433", "filename": "src/items.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/04f09c9d8548253bff2758a2b239302d574455ad/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f09c9d8548253bff2758a2b239302d574455ad/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=04f09c9d8548253bff2758a2b239302d574455ad", "patch": "@@ -22,7 +22,7 @@ use spanned::Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n               recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented};\n-use config::{BraceStyle, Config, Density, IndentStyle, ReturnIndent, Style};\n+use config::{BraceStyle, Config, Density, IndentStyle, ReturnIndent};\n use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n            rewrite_call_inner, ExprType};\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n@@ -815,9 +815,9 @@ fn format_impl_ref_and_type(\n             result.push_str(\"for \");\n         }\n         let budget = context.budget(last_line_width(&result));\n-        let type_offset = match context.config.where_style() {\n-            Style::Legacy => new_line_offset + trait_ref_overhead,\n-            Style::Rfc => new_line_offset,\n+        let type_offset = match context.config.indent_style() {\n+            IndentStyle::Visual => new_line_offset + trait_ref_overhead,\n+            IndentStyle::Block => new_line_offset,\n         };\n         result.push_str(&*self_ty\n             .rewrite(context, Shape::legacy(budget, type_offset))?);\n@@ -974,8 +974,8 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         let has_body = !trait_items.is_empty();\n \n         let where_density = if (context.config.where_density() == Density::Compressed\n-            && (!result.contains('\\n') || context.config.fn_args_indent() == IndentStyle::Block))\n-            || (context.config.fn_args_indent() == IndentStyle::Block && result.is_empty())\n+            && (!result.contains('\\n') || context.config.indent_style() == IndentStyle::Block))\n+            || (context.config.indent_style() == IndentStyle::Block && result.is_empty())\n             || (context.config.where_density() == Density::CompressedIfEmpty && !has_body\n                 && !result.contains('\\n'))\n         {\n@@ -1880,13 +1880,13 @@ fn rewrite_fn_base(\n         } else if context.config.fn_args_paren_newline() {\n             result.push('\\n');\n             result.push_str(&arg_indent.to_string(context.config));\n-            if context.config.fn_args_indent() == IndentStyle::Visual {\n+            if context.config.indent_style() == IndentStyle::Visual {\n                 arg_indent = arg_indent + 1; // extra space for `(`\n             }\n             result.push('(');\n         } else {\n             result.push_str(\"(\");\n-            if context.config.fn_args_indent() == IndentStyle::Visual {\n+            if context.config.indent_style() == IndentStyle::Visual {\n                 result.push('\\n');\n                 result.push_str(&arg_indent.to_string(context.config));\n             }\n@@ -1933,7 +1933,7 @@ fn rewrite_fn_base(\n         generics_str.contains('\\n'),\n     )?;\n \n-    let put_args_in_block = match context.config.fn_args_indent() {\n+    let put_args_in_block = match context.config.indent_style() {\n         IndentStyle::Block => arg_str.contains('\\n') || arg_str.len() > one_line_budget,\n         _ => false,\n     } && !fd.inputs.is_empty();\n@@ -1974,7 +1974,7 @@ fn rewrite_fn_base(\n \n     // Return type.\n     if let ast::FunctionRetTy::Ty(..) = fd.output {\n-        let ret_should_indent = match context.config.fn_args_indent() {\n+        let ret_should_indent = match context.config.indent_style() {\n             // If our args are block layout then we surely must have space.\n             IndentStyle::Block if put_args_in_block || fd.inputs.is_empty() => false,\n             _ if args_last_line_contains_comment => false,\n@@ -2266,7 +2266,7 @@ fn rewrite_args(\n         .and_then(|item| item.post_comment.as_ref())\n         .map_or(false, |s| s.trim().starts_with(\"//\"));\n \n-    let (indent, trailing_comma) = match context.config.fn_args_indent() {\n+    let (indent, trailing_comma) = match context.config.indent_style() {\n         IndentStyle::Block if fits_in_one_line => {\n             (indent.block_indent(context.config), SeparatorTactic::Never)\n         }\n@@ -2303,7 +2303,7 @@ fn rewrite_args(\n         },\n         separator_place: SeparatorPlace::Back,\n         shape: Shape::legacy(budget, indent),\n-        ends_with_newline: tactic.ends_with_newline(context.config.fn_args_indent()),\n+        ends_with_newline: tactic.ends_with_newline(context.config.indent_style()),\n         preserve_newline: true,\n         config: context.config,\n     };\n@@ -2353,7 +2353,7 @@ fn compute_budgets_for_args(\n \n         if one_line_budget > 0 {\n             // 4 = \"() {\".len()\n-            let (indent, multi_line_budget) = match context.config.fn_args_indent() {\n+            let (indent, multi_line_budget) = match context.config.indent_style() {\n                 IndentStyle::Block => {\n                     let indent = indent.block_indent(context.config);\n                     (indent, context.budget(indent.width() + 1))\n@@ -2371,7 +2371,7 @@ fn compute_budgets_for_args(\n \n     // Didn't work. we must force vertical layout and put args on a newline.\n     let new_indent = indent.block_indent(context.config);\n-    let used_space = match context.config.fn_args_indent() {\n+    let used_space = match context.config.indent_style() {\n         // 1 = `,`\n         IndentStyle::Block => new_indent.width() + 1,\n         // Account for `)` and possibly ` {`.\n@@ -2464,7 +2464,7 @@ fn rewrite_generics_inner(\n }\n \n pub fn generics_shape_from_config(config: &Config, shape: Shape, offset: usize) -> Option<Shape> {\n-    match config.generics_indent() {\n+    match config.indent_style() {\n         IndentStyle::Visual => shape.visual_indent(1 + offset).sub_width(offset + 2),\n         IndentStyle::Block => {\n             // 1 = \",\"\n@@ -2497,14 +2497,14 @@ where\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n-        trailing_separator: if context.config.generics_indent() == IndentStyle::Visual {\n+        trailing_separator: if context.config.indent_style() == IndentStyle::Visual {\n             SeparatorTactic::Never\n         } else {\n             context.config.trailing_comma()\n         },\n         separator_place: SeparatorPlace::Back,\n         shape: shape,\n-        ends_with_newline: tactic.ends_with_newline(context.config.generics_indent()),\n+        ends_with_newline: tactic.ends_with_newline(context.config.indent_style()),\n         preserve_newline: true,\n         config: context.config,\n     };\n@@ -2523,7 +2523,7 @@ pub fn wrap_generics_with_angle_brackets(\n     list_str: &str,\n     list_offset: Indent,\n ) -> String {\n-    if context.config.generics_indent() == IndentStyle::Block\n+    if context.config.indent_style() == IndentStyle::Block\n         && (list_str.contains('\\n') || list_str.ends_with(','))\n     {\n         format!(\n@@ -2674,7 +2674,7 @@ fn rewrite_where_clause(\n         return Some(String::new());\n     }\n \n-    if context.config.where_style() == Style::Rfc {\n+    if context.config.indent_style() == IndentStyle::Block {\n         return rewrite_where_clause_rfc_style(\n             context,\n             where_clause,\n@@ -2689,12 +2689,12 @@ fn rewrite_where_clause(\n \n     let extra_indent = Indent::new(context.config.tab_spaces(), 0);\n \n-    let offset = match context.config.where_pred_indent() {\n+    let offset = match context.config.indent_style() {\n         IndentStyle::Block => shape.indent + extra_indent.block_indent(context.config),\n         // 6 = \"where \".len()\n         IndentStyle::Visual => shape.indent + extra_indent + 6,\n     };\n-    // FIXME: if where_pred_indent != Visual, then the budgets below might\n+    // FIXME: if indent_style != Visual, then the budgets below might\n     // be out by a char or two.\n \n     let budget = context.config.max_width() - offset.width();\n@@ -2737,7 +2737,7 @@ fn rewrite_where_clause(\n         trailing_separator: comma_tactic,\n         separator_place: SeparatorPlace::Back,\n         shape: Shape::legacy(budget, offset),\n-        ends_with_newline: tactic.ends_with_newline(context.config.where_pred_indent()),\n+        ends_with_newline: tactic.ends_with_newline(context.config.indent_style()),\n         preserve_newline: true,\n         config: context.config,\n     };"}, {"sha": "d7098d3a3974567bbb9f9f6d4525283f242ffca2", "filename": "src/lists.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04f09c9d8548253bff2758a2b239302d574455ad/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f09c9d8548253bff2758a2b239302d574455ad/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=04f09c9d8548253bff2758a2b239302d574455ad", "patch": "@@ -737,7 +737,7 @@ pub fn struct_lit_shape(\n     prefix_width: usize,\n     suffix_width: usize,\n ) -> Option<(Option<Shape>, Shape)> {\n-    let v_shape = match context.config.struct_lit_indent() {\n+    let v_shape = match context.config.indent_style() {\n         IndentStyle::Visual => shape\n             .visual_indent(0)\n             .shrink_left(prefix_width)?\n@@ -766,7 +766,7 @@ pub fn struct_lit_tactic(\n     items: &[ListItem],\n ) -> DefinitiveListTactic {\n     if let Some(h_shape) = h_shape {\n-        let prelim_tactic = match (context.config.struct_lit_indent(), items.len()) {\n+        let prelim_tactic = match (context.config.indent_style(), items.len()) {\n             (IndentStyle::Visual, 1) => ListTactic::HorizontalVertical,\n             _ => context.config.struct_lit_multiline_style().to_list_tactic(),\n         };\n@@ -797,7 +797,7 @@ pub fn struct_lit_formatting<'a>(\n     context: &'a RewriteContext,\n     force_no_trailing_comma: bool,\n ) -> ListFormatting<'a> {\n-    let ends_with_newline = context.config.struct_lit_indent() != IndentStyle::Visual\n+    let ends_with_newline = context.config.indent_style() != IndentStyle::Visual\n         && tactic == DefinitiveListTactic::Vertical;\n     ListFormatting {\n         tactic: tactic,"}, {"sha": "1307f6731ff0e30e6c2c36d8344fe3b9735d906e", "filename": "src/rewrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04f09c9d8548253bff2758a2b239302d574455ad/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f09c9d8548253bff2758a2b239302d574455ad/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=04f09c9d8548253bff2758a2b239302d574455ad", "patch": "@@ -43,7 +43,7 @@ impl<'a> RewriteContext<'a> {\n \n     /// Return true if we should use block indent style for rewriting function call.\n     pub fn use_block_indent(&self) -> bool {\n-        self.config.fn_call_indent() == IndentStyle::Block || self.use_block\n+        self.config.indent_style() == IndentStyle::Block || self.use_block\n     }\n \n     pub fn budget(&self, used_width: usize) -> usize {"}, {"sha": "d2e782db1aa71ee6bcf829a66bb9b812cc18e312", "filename": "src/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04f09c9d8548253bff2758a2b239302d574455ad/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f09c9d8548253bff2758a2b239302d574455ad/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=04f09c9d8548253bff2758a2b239302d574455ad", "patch": "@@ -18,7 +18,7 @@ use syntax::symbol::keywords;\n \n use spanned::Spanned;\n use codemap::SpanUtils;\n-use config::{IndentStyle, Style, TypeDensity};\n+use config::{IndentStyle, TypeDensity};\n use expr::{rewrite_pair, rewrite_tuple, rewrite_unary_prefix, wrap_args_with_parens, PairParts};\n use items::{format_generics_item_list, generics_shape_from_config};\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic, Separator,\n@@ -302,7 +302,7 @@ where\n     // 2 for ()\n     let budget = shape.width.checked_sub(2)?;\n     // 1 for (\n-    let offset = match context.config.fn_args_indent() {\n+    let offset = match context.config.indent_style() {\n         IndentStyle::Block => {\n             shape\n                 .block()\n@@ -357,14 +357,14 @@ where\n         },\n         separator_place: SeparatorPlace::Back,\n         shape: list_shape,\n-        ends_with_newline: tactic.ends_with_newline(context.config.fn_call_indent()),\n+        ends_with_newline: tactic.ends_with_newline(context.config.indent_style()),\n         preserve_newline: true,\n         config: context.config,\n     };\n \n     let list_str = write_list(&item_vec, &fmt)?;\n \n-    let ty_shape = match context.config.fn_args_indent() {\n+    let ty_shape = match context.config.indent_style() {\n         IndentStyle::Block => shape.block().block_indent(context.config.tab_spaces()),\n         IndentStyle::Visual => shape.block_left(4)?,\n     };\n@@ -447,9 +447,9 @@ impl Rewrite for ast::WherePredicate {\n                     }\n                 } else {\n                     let used_width = type_str.len() + colon.len();\n-                    let ty_shape = match context.config.where_style() {\n-                        Style::Legacy => shape.block_left(used_width)?,\n-                        Style::Rfc => shape,\n+                    let ty_shape = match context.config.indent_style() {\n+                        IndentStyle::Visual => shape.block_left(used_width)?,\n+                        IndentStyle::Block => shape,\n                     };\n                     let bounds = bounds\n                         .iter()"}]}