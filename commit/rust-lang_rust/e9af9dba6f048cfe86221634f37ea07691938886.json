{"sha": "e9af9dba6f048cfe86221634f37ea07691938886", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YWY5ZGJhNmYwNDhjZmU4NjIyMTYzNGYzN2VhMDc2OTE5Mzg4ODY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-27T23:36:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-27T23:36:05Z"}, "message": "Rollup merge of #67604 - christianpoveda:scalar_to_(u|i)64, r=RalfJung\n\nAdd Scalar::to_(u|i)16 methods\n\nr? @RalfJung", "tree": {"sha": "afa5aeefef46e750c10cd2af4e2a930b71ebe79a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa5aeefef46e750c10cd2af4e2a930b71ebe79a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9af9dba6f048cfe86221634f37ea07691938886", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeBpVlCRBK7hj4Ov3rIwAAdHIIAI37iFp0ekqcW/qcfnWdxFLv\nPowkse/PujVIKvkKG+urAR3/rQySUz1Itp4HXbaZorlDGhPyo30/o4Pes5Ry3bs/\nfcc5tS1sZIgsnJQCshb6TUFVgneCxnuJpNodzVLuMAAezfrXiEJvJeAHoV0GSU8R\nLR7D5eYGrccW8DfBRRyKZoQKyUfR0WC5iY+5xoy50jLoSMWGBgmPX7ngTvGYP5vv\nexBrMBo7A1dHUrSsgmXp4DXAsyTXAglbaA3y99t/AOeJlQIjUcrT2dwNVINFpqcF\n+z0wPlahVsVpz7cVzen3uhGjF3tdt+YL4/jX4nyPYDrC7/FxF+b1pIAiNqhWAsM=\n=Ytdl\n-----END PGP SIGNATURE-----\n", "payload": "tree afa5aeefef46e750c10cd2af4e2a930b71ebe79a\nparent 4cf4fc6cb19ada4ab3e2015d7fc6123025219f19\nparent dfcc44d76903fe68ceab8461cc55efe475c26b8b\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1577489765 +0100\ncommitter GitHub <noreply@github.com> 1577489765 +0100\n\nRollup merge of #67604 - christianpoveda:scalar_to_(u|i)64, r=RalfJung\n\nAdd Scalar::to_(u|i)16 methods\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9af9dba6f048cfe86221634f37ea07691938886", "html_url": "https://github.com/rust-lang/rust/commit/e9af9dba6f048cfe86221634f37ea07691938886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9af9dba6f048cfe86221634f37ea07691938886/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf4fc6cb19ada4ab3e2015d7fc6123025219f19", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf4fc6cb19ada4ab3e2015d7fc6123025219f19", "html_url": "https://github.com/rust-lang/rust/commit/4cf4fc6cb19ada4ab3e2015d7fc6123025219f19"}, {"sha": "dfcc44d76903fe68ceab8461cc55efe475c26b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfcc44d76903fe68ceab8461cc55efe475c26b8b", "html_url": "https://github.com/rust-lang/rust/commit/dfcc44d76903fe68ceab8461cc55efe475c26b8b"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "2be36ad418a5b5dfdd2785838787aaf0f725b1e2", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e9af9dba6f048cfe86221634f37ea07691938886/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9af9dba6f048cfe86221634f37ea07691938886/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=e9af9dba6f048cfe86221634f37ea07691938886", "patch": "@@ -416,48 +416,62 @@ impl<'tcx, Tag> Scalar<Tag> {\n         }\n     }\n \n+    #[inline]\n+    fn to_unsigned_with_bit_width(self, bits: u64) -> InterpResult<'static, u128> {\n+        let sz = Size::from_bits(bits);\n+        self.to_bits(sz)\n+    }\n+\n+    /// Converts the scalar to produce an `u8`. Fails if the scalar is a pointer.\n     pub fn to_u8(self) -> InterpResult<'static, u8> {\n-        let sz = Size::from_bits(8);\n-        let b = self.to_bits(sz)?;\n-        Ok(b as u8)\n+        self.to_unsigned_with_bit_width(8).map(|v| v as u8)\n+    }\n+\n+    /// Converts the scalar to produce an `u16`. Fails if the scalar is a pointer.\n+    pub fn to_u16(self) -> InterpResult<'static, u16> {\n+        self.to_unsigned_with_bit_width(16).map(|v| v as u16)\n     }\n \n+    /// Converts the scalar to produce an `u32`. Fails if the scalar is a pointer.\n     pub fn to_u32(self) -> InterpResult<'static, u32> {\n-        let sz = Size::from_bits(32);\n-        let b = self.to_bits(sz)?;\n-        Ok(b as u32)\n+        self.to_unsigned_with_bit_width(32).map(|v| v as u32)\n     }\n \n+    /// Converts the scalar to produce an `u64`. Fails if the scalar is a pointer.\n     pub fn to_u64(self) -> InterpResult<'static, u64> {\n-        let sz = Size::from_bits(64);\n-        let b = self.to_bits(sz)?;\n-        Ok(b as u64)\n+        self.to_unsigned_with_bit_width(64).map(|v| v as u64)\n     }\n \n     pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {\n         let b = self.to_bits(cx.data_layout().pointer_size)?;\n         Ok(b as u64)\n     }\n \n-    pub fn to_i8(self) -> InterpResult<'static, i8> {\n-        let sz = Size::from_bits(8);\n+    #[inline]\n+    fn to_signed_with_bit_width(self, bits: u64) -> InterpResult<'static, i128> {\n+        let sz = Size::from_bits(bits);\n         let b = self.to_bits(sz)?;\n-        let b = sign_extend(b, sz) as i128;\n-        Ok(b as i8)\n+        Ok(sign_extend(b, sz) as i128)\n+    }\n+\n+    /// Converts the scalar to produce an `i8`. Fails if the scalar is a pointer.\n+    pub fn to_i8(self) -> InterpResult<'static, i8> {\n+        self.to_signed_with_bit_width(8).map(|v| v as i8)\n+    }\n+\n+    /// Converts the scalar to produce an `i16`. Fails if the scalar is a pointer.\n+    pub fn to_i16(self) -> InterpResult<'static, i16> {\n+        self.to_signed_with_bit_width(16).map(|v| v as i16)\n     }\n \n+    /// Converts the scalar to produce an `i32`. Fails if the scalar is a pointer.\n     pub fn to_i32(self) -> InterpResult<'static, i32> {\n-        let sz = Size::from_bits(32);\n-        let b = self.to_bits(sz)?;\n-        let b = sign_extend(b, sz) as i128;\n-        Ok(b as i32)\n+        self.to_signed_with_bit_width(32).map(|v| v as i32)\n     }\n \n+    /// Converts the scalar to produce an `i64`. Fails if the scalar is a pointer.\n     pub fn to_i64(self) -> InterpResult<'static, i64> {\n-        let sz = Size::from_bits(64);\n-        let b = self.to_bits(sz)?;\n-        let b = sign_extend(b, sz) as i128;\n-        Ok(b as i64)\n+        self.to_signed_with_bit_width(64).map(|v| v as i64)\n     }\n \n     pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'static, i64> {"}]}