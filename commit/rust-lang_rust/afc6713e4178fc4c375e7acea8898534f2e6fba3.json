{"sha": "afc6713e4178fc4c375e7acea8898534f2e6fba3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYzY3MTNlNDE3OGZjNGMzNzVlN2FjZWE4ODk4NTM0ZjJlNmZiYTM=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-13T21:17:41Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-13T21:17:41Z"}, "message": "Reorganize shims::env::EnvVars", "tree": {"sha": "cb40e67e1ce2990cb959661f9db7519c6dd3dd60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb40e67e1ce2990cb959661f9db7519c6dd3dd60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afc6713e4178fc4c375e7acea8898534f2e6fba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afc6713e4178fc4c375e7acea8898534f2e6fba3", "html_url": "https://github.com/rust-lang/rust/commit/afc6713e4178fc4c375e7acea8898534f2e6fba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afc6713e4178fc4c375e7acea8898534f2e6fba3/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d13577aac2e47a0f40292c5c966469cbc610d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d13577aac2e47a0f40292c5c966469cbc610d7", "html_url": "https://github.com/rust-lang/rust/commit/67d13577aac2e47a0f40292c5c966469cbc610d7"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "936ae5b8953273d1d34fdea884af2c34f3ed88b6", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afc6713e4178fc4c375e7acea8898534f2e6fba3/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc6713e4178fc4c375e7acea8898534f2e6fba3/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=afc6713e4178fc4c375e7acea8898534f2e6fba3", "patch": "@@ -12,8 +12,8 @@ use crate::{\n     InterpResult, InterpError, InterpCx, StackPopCleanup, struct_error,\n     Scalar, Tag, Pointer, FnVal,\n     MemoryExtra, MiriMemoryKind, Evaluator, TlsEvalContextExt, HelpersEvalContextExt,\n+    ShimsEnvVars,\n };\n-use crate::shims::env::EnvVars;\n \n /// Configuration needed to spawn a Miri instance.\n #[derive(Clone)]\n@@ -40,6 +40,8 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         MemoryExtra::new(StdRng::seed_from_u64(config.seed.unwrap_or(0)), config.validate),\n     );\n \n+    ShimsEnvVars::init(config.communicate, &mut ecx, &tcx);\n+\n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);\n     let main_mir = ecx.load_mir(main_instance.def)?;\n \n@@ -164,10 +166,6 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n \n     assert!(args.next().is_none(), \"start lang item has more arguments than expected\");\n \n-    if config.communicate {\n-        EnvVars::init(&mut ecx, &tcx);\n-    }\n-\n     Ok(ecx)\n }\n "}, {"sha": "216e41d4f83860d7a6faf08bb5bea0b5798543ab", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afc6713e4178fc4c375e7acea8898534f2e6fba3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc6713e4178fc4c375e7acea8898534f2e6fba3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=afc6713e4178fc4c375e7acea8898534f2e6fba3", "patch": "@@ -33,6 +33,7 @@ pub use crate::shims::foreign_items::EvalContextExt as ForeignItemsEvalContextEx\n pub use crate::shims::intrinsics::EvalContextExt as IntrinsicsEvalContextExt;\n pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n pub use crate::shims::dlsym::{Dlsym, EvalContextExt as DlsymEvalContextExt};\n+pub use crate::shims::env::{EnvVars as ShimsEnvVars};\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};"}, {"sha": "635b46bcdb0484629f46c16db9f14f125f9784a7", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afc6713e4178fc4c375e7acea8898534f2e6fba3/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc6713e4178fc4c375e7acea8898534f2e6fba3/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=afc6713e4178fc4c375e7acea8898534f2e6fba3", "patch": "@@ -14,7 +14,6 @@ use rustc::ty::{self, layout::{Size, LayoutOf}, TyCtxt};\n use rustc::mir;\n \n use crate::*;\n-use crate::shims::env::EnvVars;\n \n // Some global facts about the emulated machine.\n pub const PAGE_SIZE: u64 = 4*1024; // FIXME: adjust to target architecture\n@@ -79,7 +78,7 @@ impl MemoryExtra {\n pub struct Evaluator<'tcx> {\n     /// Environment variables set by `setenv`.\n     /// Miri does not expose env vars from the host to the emulated program.\n-    pub(crate) env_vars: EnvVars,\n+    pub(crate) env_vars: ShimsEnvVars,\n \n     /// Program arguments (`Option` because we can only initialize them after creating the ecx).\n     /// These are *pointers* to argc/argv because macOS.\n@@ -101,7 +100,9 @@ pub struct Evaluator<'tcx> {\n impl<'tcx> Evaluator<'tcx> {\n     pub(crate) fn new(communicate: bool) -> Self {\n         Evaluator {\n-            env_vars: EnvVars::default(),\n+            // `env_vars` could be initialized properly here if `Memory` were available before\n+            // calling this method.\n+            env_vars: ShimsEnvVars::default(),\n             argc: None,\n             argv: None,\n             cmd_line: None,"}, {"sha": "4a15eb4cfb48aa575125108ce771fff83177a17c", "filename": "src/shims/env.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afc6713e4178fc4c375e7acea8898534f2e6fba3/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc6713e4178fc4c375e7acea8898534f2e6fba3/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=afc6713e4178fc4c375e7acea8898534f2e6fba3", "patch": "@@ -12,12 +12,15 @@ pub struct EnvVars {\n \n impl EnvVars {\n     pub(crate) fn init<'mir, 'tcx>(\n+        communicate: bool,\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n         tcx: &TyCtxt<'tcx>,\n     ) {\n-        for (name, value) in std::env::vars() {\n-            let value = alloc_env_value(value.as_bytes(), ecx.memory_mut(), tcx);\n-            ecx.machine.env_vars.map.insert(name.into_bytes(), value);\n+        if communicate {\n+            for (name, value) in std::env::vars() {\n+                let value = alloc_env_value(value.as_bytes(), ecx.memory_mut(), tcx);\n+                ecx.machine.env_vars.map.insert(name.into_bytes(), value);\n+            }\n         }\n     }\n "}]}