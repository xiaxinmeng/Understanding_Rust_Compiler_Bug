{"sha": "7b45a892a482f70ccb696abdcab089cce5f2d612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNDVhODkyYTQ4MmY3MGNjYjY5NmFiZGNhYjA4OWNjZTVmMmQ2MTI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-18T10:33:52Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:31Z"}, "message": "Use GenericParamCount instead of FxHashMap", "tree": {"sha": "2da5ebfd54fd43009d597869a511557b3ae875f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da5ebfd54fd43009d597869a511557b3ae875f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b45a892a482f70ccb696abdcab089cce5f2d612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b45a892a482f70ccb696abdcab089cce5f2d612", "html_url": "https://github.com/rust-lang/rust/commit/7b45a892a482f70ccb696abdcab089cce5f2d612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b45a892a482f70ccb696abdcab089cce5f2d612/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17896a3b69bfea821e4cf4c3c5c67d128cdbf47", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17896a3b69bfea821e4cf4c3c5c67d128cdbf47", "html_url": "https://github.com/rust-lang/rust/commit/a17896a3b69bfea821e4cf4c3c5c67d128cdbf47"}], "stats": {"total": 170, "additions": 81, "deletions": 89}, "files": [{"sha": "77c2dd219c4781590e6ef130b01da367d813e65b", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -46,7 +46,6 @@ use hir::HirVec;\n use hir::map::{DefKey, DefPathData, Definitions};\n use hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n use hir::def::{Def, PathResolution};\n-use ty::Kind;\n use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES};\n use middle::cstore::CrateStore;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -1462,7 +1461,7 @@ impl<'a> LoweringContext<'a> {\n                         assert!(!def_id.is_local());\n                         let item_generics =\n                             self.cstore.item_generics_cloned_untracked(def_id, self.sess);\n-                        let n = item_generics.param_counts()[&Kind::Lifetime];\n+                        let n = item_generics.param_counts().lifetimes;\n                         self.type_def_lifetime_params.insert(def_id, n);\n                         n\n                     });"}, {"sha": "d659d235cd13abd05092ffc509d171e4b6cc74ed", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -21,7 +21,7 @@ use super::elaborate_predicates;\n \n use hir::def_id::DefId;\n use traits;\n-use ty::{self, Ty, TyCtxt, Kind, TypeFoldable};\n+use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::subst::Substs;\n use ty::util::ExplicitSelf;\n use std::borrow::Cow;\n@@ -284,7 +284,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         // We can't monomorphize things like `fn foo<A>(...)`.\n-        if self.generics_of(method.def_id).param_counts()[&Kind::Type] != 0 {\n+        if self.generics_of(method.def_id).param_counts().types != 0 {\n             return Some(MethodViolationCode::Generic);\n         }\n "}, {"sha": "0cbee56487ff24b9fe4a996688bd91590143ab5d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -757,18 +757,6 @@ impl ty::EarlyBoundRegion {\n     }\n }\n \n-#[derive(PartialEq, Eq, Hash, Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub enum Kind {\n-    Lifetime,\n-    Type,\n-}\n-\n-impl Kind {\n-    pub fn iter<'a>() -> impl Iterator<Item = &'a Kind> {\n-        [Kind::Lifetime, Kind::Type].into_iter()\n-    }\n-}\n-\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum GenericParamDef {\n     Lifetime(RegionParamDef),\n@@ -791,6 +779,11 @@ impl GenericParamDef {\n     }\n }\n \n+pub struct GenericParamCount {\n+    pub lifetimes: usize,\n+    pub types: usize,\n+}\n+\n /// Information about the formal type/lifetime parameters associated\n /// with an item or method. Analogous to hir::Generics.\n ///\n@@ -814,18 +807,20 @@ impl<'a, 'gcx, 'tcx> Generics {\n         self.parent_count + self.params.len()\n     }\n \n-    pub fn param_counts(&self) -> FxHashMap<Kind, usize> {\n-        let mut param_counts: FxHashMap<_, _> = FxHashMap();\n-        Kind::iter().for_each(|kind| {\n-            param_counts.insert(*kind, 0);\n-        });\n+    pub fn param_counts(&self) -> GenericParamCount {\n+        // We could cache this as a property of `GenericParamCount`, but\n+        // the aim is to refactor this away entirely eventually and the\n+        // presence of this method will be a constant reminder.\n+        let mut param_counts = GenericParamCount {\n+            lifetimes: 0,\n+            types: 0,\n+        };\n \n         for param in self.params.iter() {\n-            let key = match param {\n-                GenericParamDef::Type(_) => Kind::Type,\n-                GenericParamDef::Lifetime(_) => Kind::Lifetime,\n+            match param {\n+                GenericParamDef::Lifetime(_) => param_counts.lifetimes += 1,\n+                GenericParamDef::Type(_) => param_counts.types += 1,\n             };\n-            *param_counts.get_mut(&key).unwrap() += 1;\n         }\n \n         param_counts\n@@ -904,7 +899,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n             // And it can be seen that in both cases, to move from a substs\n             // offset to a generics offset you just have to offset by the\n             // number of regions.\n-            let type_param_offset = self.param_counts()[&Kind::Lifetime];\n+            let type_param_offset = self.param_counts().lifetimes;\n \n             let has_self = self.has_self && self.parent.is_none();\n             let is_separated_self = type_param_offset != 0 && index == 0 && has_self;"}, {"sha": "ba8694602526cc9f2f4383a10c5113d0d4efae72", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -19,8 +19,8 @@ use ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n use ty::{TyParam, TyRawPtr, TyRef, TyNever, TyTuple};\n use ty::{TyClosure, TyGenerator, TyGeneratorWitness, TyForeign, TyProjection, TyAnon};\n use ty::{TyDynamic, TyInt, TyUint, TyInfer};\n-use ty::{self, Ty, TyCtxt, TypeFoldable, Kind};\n-use util::nodemap::{FxHashSet, FxHashMap};\n+use ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount};\n+use util::nodemap::FxHashSet;\n \n use std::cell::Cell;\n use std::fmt;\n@@ -257,10 +257,10 @@ impl PrintContext {\n         let verbose = self.is_verbose;\n         let mut num_supplied_defaults = 0;\n         let mut has_self = false;\n-        let mut param_counts = FxHashMap();\n-        Kind::iter().for_each(|kind| {\n-            param_counts.insert(*kind, 0);\n-        });\n+        let mut param_counts = GenericParamCount {\n+            lifetimes: 0,\n+            types: 0,\n+        };\n         let mut is_value_path = false;\n         let fn_trait_kind = ty::tls::with(|tcx| {\n             // Unfortunately, some kinds of items (e.g., closures) don't have\n@@ -314,7 +314,7 @@ impl PrintContext {\n             if let Some(def_id) = generics.parent {\n                 // Methods.\n                 assert!(is_value_path);\n-                child_types = child_param_counts[&Kind::Type];\n+                child_types = child_param_counts.types;\n                 generics = tcx.generics_of(def_id);\n                 param_counts = generics.param_counts();\n \n@@ -407,10 +407,10 @@ impl PrintContext {\n             Ok(())\n         };\n \n-        print_regions(f, \"<\", 0, param_counts[&Kind::Lifetime])?;\n+        print_regions(f, \"<\", 0, param_counts.lifetimes)?;\n \n         let tps = substs.types()\n-                        .take(param_counts[&Kind::Type] - num_supplied_defaults)\n+                        .take(param_counts.types - num_supplied_defaults)\n                         .skip(has_self as usize);\n \n         for ty in tps {\n@@ -442,10 +442,10 @@ impl PrintContext {\n                 write!(f, \"::{}\", item_name)?;\n             }\n \n-            print_regions(f, \"::<\", param_counts[&Kind::Lifetime], usize::MAX)?;\n+            print_regions(f, \"::<\", param_counts.lifetimes, usize::MAX)?;\n \n             // FIXME: consider being smart with defaults here too\n-            for ty in substs.types().skip(param_counts[&Kind::Type]) {\n+            for ty in substs.types().skip(param_counts.types) {\n                 start_or_continue(f, \"::<\", \", \")?;\n                 ty.print_display(f, self)?;\n             }"}, {"sha": "92b4babe8a3b2e23632bfdb8ad0c5518892491a8", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -1108,7 +1108,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         continue;\n                     }\n \n-                    if tcx.generics_of(method.def_id).param_counts()[&ty::Kind::Type] != 0 {\n+                    if tcx.generics_of(method.def_id).param_counts().types != 0 {\n                         continue;\n                     }\n "}, {"sha": "b65353e449f68aca4f112279b249e62834f56812", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n \n use rustc::ty::maps::Providers;\n-use rustc::ty::{self, TyCtxt, Kind};\n+use rustc::ty::{self, TyCtxt};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::lint::builtin::{SAFE_EXTERN_STATICS, SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n@@ -357,7 +357,7 @@ fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: D\n \n     // FIXME: when we make this a hard error, this should have its\n     // own error code.\n-    let message = if tcx.generics_of(def_id).param_counts()[&Kind::Type] != 0 {\n+    let message = if tcx.generics_of(def_id).param_counts().types != 0 {\n         format!(\"#[derive] can't be used on a #[repr(packed)] struct with \\\n                  type parameters (error E0133)\")\n     } else {"}, {"sha": "0990c1f1714c9e2d66286ec470dbc62d68eca270", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -26,7 +26,7 @@ use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArr\n use rustc::hir::TransFnAttrFlags;\n use rustc::hir::def_id::{DefId, CrateNum};\n use rustc::ty::subst::Substs;\n-use rustc::ty::{Kind, GenericParamDef};\n+use rustc::ty::GenericParamDef;\n \n use abi::Abi;\n use common::CodegenCx;\n@@ -197,6 +197,12 @@ pub fn finalize(cx: &CodegenCx) {\n     };\n }\n \n+#[derive(PartialEq, Eq, Hash)]\n+pub enum Kind {\n+    Lifetime,\n+    Type,\n+}\n+\n /// Creates the function-specific debug context.\n ///\n /// Returns the FunctionDebugContext for the function which holds state needed"}, {"sha": "11003a49316ea7f7648ca58d71bff5981dae007a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -210,7 +210,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let decl_generics = tcx.generics_of(def_id);\n         let param_counts = decl_generics.param_counts();\n         let num_types_provided = parameters.types.len();\n-        let expected_num_region_params = param_counts[&ty::Kind::Lifetime];\n+        let expected_num_region_params = param_counts.lifetimes;\n         let supplied_num_region_params = parameters.lifetimes.len();\n         if expected_num_region_params != supplied_num_region_params {\n             report_lifetime_number_error(tcx, span,\n@@ -223,7 +223,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         // Check the number of type parameters supplied by the user.\n         let type_params_offset = self_ty.is_some() as usize;\n-        let ty_param_defs = param_counts[&ty::Kind::Type] - type_params_offset;\n+        let ty_param_defs = param_counts.types - type_params_offset;\n         if !infer_types || num_types_provided > ty_param_defs {\n             check_type_argument_count(tcx,\n                 span,\n@@ -260,7 +260,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 return ty;\n             }\n \n-            let i = i - (param_counts[&ty::Kind::Lifetime] + type_params_offset);\n+            let i = i - (param_counts.lifetimes + type_params_offset);\n             if i < num_types_provided {\n                 // A provided type parameter.\n                 self.ast_ty_to_ty(&parameters.types[i])"}, {"sha": "c2c250249ad8e19c9b3a0e4b813f3dd8482edb7b", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::hir::{self, ImplItemKind, TraitItemKind};\n use rustc::infer::{self, InferOk};\n-use rustc::ty::{self, TyCtxt, Kind};\n+use rustc::ty::{self, TyCtxt};\n use rustc::ty::util::ExplicitSelf;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n@@ -357,8 +357,8 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 trait_to_skol_substs: &Substs<'tcx>)\n                                                 -> Result<(), ErrorReported> {\n     let span = tcx.sess.codemap().def_span(span);\n-    let trait_params = trait_generics.param_counts()[&Kind::Lifetime];\n-    let impl_params = impl_generics.param_counts()[&Kind::Lifetime];\n+    let trait_params = trait_generics.param_counts().lifetimes;\n+    let impl_params = impl_generics.param_counts().lifetimes;\n \n     debug!(\"check_region_bounds_on_impl_method: \\\n             trait_generics={:?} \\\n@@ -574,8 +574,8 @@ fn compare_number_of_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         -> Result<(), ErrorReported> {\n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n-    let num_impl_m_type_params = impl_m_generics.param_counts()[&Kind::Type];\n-    let num_trait_m_type_params = trait_m_generics.param_counts()[&Kind::Type];\n+    let num_impl_m_type_params = impl_m_generics.param_counts().types;\n+    let num_trait_m_type_params = trait_m_generics.param_counts().types;\n     if num_impl_m_type_params != num_trait_m_type_params {\n         let impl_m_node_id = tcx.hir.as_local_node_id(impl_m.def_id).unwrap();\n         let impl_m_item = tcx.hir.expect_impl_item(impl_m_node_id);"}, {"sha": "1817b4aba1912eaa342545530e68f09953b73f28", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -13,7 +13,7 @@\n \n use intrinsics;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n-use rustc::ty::{self, TyCtxt, Ty, Kind};\n+use rustc::ty::{self, TyCtxt, Ty};\n use rustc::util::nodemap::FxHashMap;\n use require_same_types;\n \n@@ -45,7 +45,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    let i_n_tps = tcx.generics_of(def_id).param_counts()[&Kind::Type];\n+    let i_n_tps = tcx.generics_of(def_id).param_counts().types;\n     if i_n_tps != n_tps {\n         let span = match it.node {\n             hir::ForeignItemFn(_, _, ref generics) => generics.span,\n@@ -346,7 +346,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n \n     let def_id = tcx.hir.local_def_id(it.id);\n-    let i_n_tps = tcx.generics_of(def_id).param_counts()[&Kind::Type];\n+    let i_n_tps = tcx.generics_of(def_id).param_counts().types;\n     let name = it.name.as_str();\n \n     let (n_tps, inputs, output) = match &*name {"}, {"sha": "eab26046147b576bd2713c313c99e2d4ae780a5f", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -15,7 +15,7 @@ use check::{FnCtxt, PlaceOp, callee, Needs};\n use hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::traits;\n-use rustc::ty::{self, Ty, Kind};\n+use rustc::ty::{self, Ty};\n use rustc::ty::subst::Subst;\n use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref};\n use rustc::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n@@ -333,7 +333,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             } else if let Some(ast_ty)\n                 = provided.as_ref().and_then(|p| {\n                     let idx =\n-                        i - parent_substs.len() - method_generics.param_counts()[&Kind::Lifetime];\n+                        i - parent_substs.len() - method_generics.param_counts().lifetimes;\n                     p.types.get(idx)\n                 })\n             {"}, {"sha": "3df584040ad315bb083182558f0b4daf5df018ce", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -1239,8 +1239,7 @@ pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item\n         } else {\n             for item in &m.items {\n                 let generics = tcx.generics_of(tcx.hir.local_def_id(item.id));\n-                let param_counts = generics.param_counts();\n-                if generics.params.len() - param_counts[&ty::Kind::Lifetime] != 0 {\n+                if generics.params.len() - generics.param_counts().lifetimes != 0 {\n                     let mut err = struct_span_err!(tcx.sess, item.span, E0044,\n                         \"foreign items may not have type parameters\");\n                     err.span_label(item.span, \"can't have type parameters\");\n@@ -4800,7 +4799,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             // Skip over the lifetimes in the same segment.\n             if let Some((_, generics)) = segment {\n-                i -= generics.param_counts()[&ty::Kind::Lifetime];\n+                i -= generics.param_counts().lifetimes;\n             }\n \n             if let Some(ast_ty) = types.get(i) {\n@@ -4921,15 +4920,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Check provided parameters.\n         let (ty_non_def_req_len, ty_req_len, lt_req_len) =\n             segment.map_or((0, 0, 0), |(_, generics)| {\n-                let params_count = generics.param_counts();\n+                let param_counts = generics.param_counts();\n \n                 let type_params_offset\n                     = (generics.parent.is_none() && generics.has_self) as usize;\n-                let type_params = params_count[&ty::Kind::Type] - type_params_offset;\n+                let type_params = param_counts.types - type_params_offset;\n                 let type_params_barring_defaults =\n                     generics.type_params_without_defaults() - type_params_offset;\n \n-                (type_params_barring_defaults, type_params, params_count[&ty::Kind::Lifetime])\n+                (type_params_barring_defaults, type_params, param_counts.lifetimes)\n             });\n \n         if types.len() > ty_req_len {\n@@ -5088,22 +5087,12 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if generics.ty_params().next().is_none() { return; }\n     let mut tps_used = vec![false; generics.ty_params().count()];\n \n-    let mut param_counts = FxHashMap();\n-    param_counts.insert(ty::Kind::Type, 0);\n-    param_counts.insert(ty::Kind::Lifetime, 0);\n-\n-    for param in generics.params.iter() {\n-        let key = match param {\n-            hir::GenericParam::Type(_) => ty::Kind::Type,\n-            hir::GenericParam::Lifetime(_) => ty::Kind::Lifetime,\n-        };\n-        *param_counts.get_mut(&key).unwrap() += 1;\n-    }\n+    let lifetime_count = generics.lifetimes().count();\n \n     for leaf_ty in ty.walk() {\n-        if let ty::TyParam(ty::ParamTy {idx, .. }) = leaf_ty.sty {\n+        if let ty::TyParam(ty::ParamTy {idx, ..}) = leaf_ty.sty {\n             debug!(\"Found use of ty param num {}\", idx);\n-            tps_used[idx as usize - param_counts[&ty::Kind::Lifetime]] = true;\n+            tps_used[idx as usize - lifetime_count] = true;\n         } else if let ty::TyError = leaf_ty.sty {\n             // If there already another error, do not emit an error for not using a type Parameter\n             assert!(tcx.sess.err_count() > 0);"}, {"sha": "5146a29d4e3716d644fa2b9bb87cf4047e8b00cd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b45a892a482f70ccb696abdcab089cce5f2d612/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7b45a892a482f70ccb696abdcab089cce5f2d612", "patch": "@@ -41,7 +41,7 @@ use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::def_id::DefIndexAddressSpace;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, TyCtxt, Region, RegionVid, Ty, AdtKind, Kind};\n+use rustc::ty::{self, TyCtxt, Region, RegionVid, Ty, AdtKind, GenericParamCount};\n use rustc::middle::stability;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_typeck::hir_ty_to_ty;\n@@ -2684,31 +2684,34 @@ impl Clean<Type> for hir::Ty {\n                     let mut ty_substs = FxHashMap();\n                     let mut lt_substs = FxHashMap();\n                     provided_params.with_parameters(|provided_params| {\n-                        let mut indices = FxHashMap();\n+                        let mut indices = GenericParamCount {\n+                            lifetimes: 0,\n+                            types: 0\n+                        };\n                         for param in generics.params.iter() {\n                             match param {\n+                                hir::GenericParam::Lifetime(lt_param) => {\n+                                    if let Some(lt) = provided_params.lifetimes\n+                                        .get(indices.lifetimes).cloned() {\n+                                        if !lt.is_elided() {\n+                                            let lt_def_id =\n+                                                cx.tcx.hir.local_def_id(lt_param.lifetime.id);\n+                                            lt_substs.insert(lt_def_id, lt.clean(cx));\n+                                        }\n+                                    }\n+                                    indices.lifetimes += 1;\n+                                }\n                                 hir::GenericParam::Type(ty_param) => {\n-                                    let i = indices.entry(Kind::Type).or_insert(0);\n                                     let ty_param_def =\n                                         Def::TyParam(cx.tcx.hir.local_def_id(ty_param.id));\n-                                    if let Some(ty) = provided_params.types.get(*i).cloned() {\n+                                    if let Some(ty) = provided_params.types\n+                                        .get(indices.types).cloned() {\n                                         ty_substs.insert(ty_param_def, ty.into_inner().clean(cx));\n                                     } else if let Some(default) = ty_param.default.clone() {\n                                         ty_substs.insert(ty_param_def,\n                                                          default.into_inner().clean(cx));\n                                     }\n-                                    *i += 1;\n-                                }\n-                                hir::GenericParam::Lifetime(lt_param) => {\n-                                    let i = indices.entry(Kind::Type).or_insert(0);\n-                                    if let Some(lt) = provided_params.lifetimes.get(*i).cloned() {\n-                                        if !lt.is_elided() {\n-                                            let lt_def_id =\n-                                                cx.tcx.hir.local_def_id(lt_param.lifetime.id);\n-                                            lt_substs.insert(lt_def_id, lt.clean(cx));\n-                                        }\n-                                    }\n-                                    *i += 1;\n+                                    indices.types += 1;\n                                 }\n                             }\n                         }"}]}