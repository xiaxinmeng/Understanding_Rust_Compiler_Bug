{"sha": "9fc51efe3344a32d9e522f08383f052277b6ab63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYzUxZWZlMzM0NGEzMmQ5ZTUyMmYwODM4M2YwNTIyNzdiNmFiNjM=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-03-30T22:15:27Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-03-31T18:24:38Z"}, "message": "Stabilize `std::convert` and related code\n\n* Marks `#[stable]` the contents of the `std::convert` module.\n\n* Added methods `PathBuf::as_path`, `OsString::as_os_str`,\n  `String::as_str`, `Vec::{as_slice, as_mut_slice}`.\n\n* Deprecates `OsStr::from_str` in favor of a new, stable, and more\n  general `OsStr::new`.\n\n* Adds unstable methods `OsString::from_bytes` and `OsStr::{to_bytes,\n  to_cstring}` for ergonomic FFI usage.\n\n[breaking-change]", "tree": {"sha": "29eb89ae9f4b70cc88642eb6b66cbb9398c41ae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29eb89ae9f4b70cc88642eb6b66cbb9398c41ae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fc51efe3344a32d9e522f08383f052277b6ab63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc51efe3344a32d9e522f08383f052277b6ab63", "html_url": "https://github.com/rust-lang/rust/commit/9fc51efe3344a32d9e522f08383f052277b6ab63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fc51efe3344a32d9e522f08383f052277b6ab63/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf3b0b74aadcc1fe87adbd2c74876a1f6c920b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf3b0b74aadcc1fe87adbd2c74876a1f6c920b3", "html_url": "https://github.com/rust-lang/rust/commit/6cf3b0b74aadcc1fe87adbd2c74876a1f6c920b3"}], "stats": {"total": 202, "additions": 132, "deletions": 70}, "files": [{"sha": "7fd09f9e1f5b0b9e0310b26d9efd76c346efc457", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -18,7 +18,6 @@\n #![feature(std_misc)]\n #![feature(test)]\n #![feature(path_ext)]\n-#![feature(convert)]\n #![feature(str_char)]\n \n #![deny(warnings)]"}, {"sha": "367a7b412077f7fb18ffd20c52270097905adf0d", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -38,7 +38,6 @@\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(step_by)]\n #![feature(str_char)]\n-#![feature(convert)]\n #![feature(slice_patterns)]\n #![feature(debug_builders)]\n #![cfg_attr(test, feature(rand, rustc_private, test, hash, collections))]"}, {"sha": "dff01039f7d194c0f4f099e363eeae7fb0cf58dd", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -364,6 +364,14 @@ impl String {\n         self.vec\n     }\n \n+    /// Extract a string slice containing the entire string.\n+    #[inline]\n+    #[unstable(feature = \"convert\",\n+               reason = \"waiting on RFC revision\")]\n+    pub fn as_str(&self) -> &str {\n+        self\n+    }\n+\n     /// Pushes the given string onto this string buffer.\n     ///\n     /// # Examples\n@@ -848,7 +856,6 @@ impl<'a, 'b> PartialEq<Cow<'a, str>> for &'b str {\n #[allow(deprecated)]\n impl Str for String {\n     #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_slice(&self) -> &str {\n         unsafe { mem::transmute(&*self.vec) }\n     }"}, {"sha": "6ee7b0a86c8edaa3a5073a8da8bb8f6b6178c01d", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -423,11 +423,18 @@ impl<T> Vec<T> {\n         }\n     }\n \n+    /// Extract a slice containing the entire vector.\n+    #[inline]\n+    #[unstable(feature = \"convert\",\n+               reason = \"waiting on RFC revision\")]\n+    pub fn as_slice(&self) -> &[T] {\n+        self\n+    }\n+\n     /// Deprecated: use `&mut s[..]` instead.\n     #[inline]\n-    #[unstable(feature = \"collections\",\n-               reason = \"will be replaced by slice syntax\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"use &mut s[..] instead\")]\n+    #[unstable(feature = \"convert\",\n+               reason = \"waiting on RFC revision\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         &mut self[..]\n     }\n@@ -1640,13 +1647,6 @@ impl<T> AsRef<Vec<T>> for Vec<T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Into<Vec<T>> for Vec<T> {\n-    fn into(self) -> Vec<T> {\n-        self\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> AsRef<[T]> for Vec<T> {\n     fn as_ref(&self) -> &[T] {"}, {"sha": "4a99f1a756a7c3e8ac31317a0a2eee8374fc06d3", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -14,55 +14,57 @@\n //! conversions from one type to another. They follow the standard\n //! Rust conventions of `as`/`to`/`into`/`from`.\n \n-#![unstable(feature = \"convert\",\n-            reason = \"recently added, experimental traits\")]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use marker::Sized;\n \n /// A cheap, reference-to-reference conversion.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRef<T: ?Sized> {\n     /// Perform the conversion.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_ref(&self) -> &T;\n }\n \n /// A cheap, mutable reference-to-mutable reference conversion.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsMut<T: ?Sized> {\n     /// Perform the conversion.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_mut(&mut self) -> &mut T;\n }\n \n /// A conversion that consumes `self`, which may or may not be\n /// expensive.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n     /// Perform the conversion.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into(self) -> T;\n }\n \n /// Construct `Self` via a conversion.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait From<T> {\n     /// Perform the conversion.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from(T) -> Self;\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n // GENERIC IMPLS\n ////////////////////////////////////////////////////////////////////////////////\n \n-// As implies Into\n-impl<'a, T: ?Sized, U: ?Sized> Into<&'a U> for &'a T where T: AsRef<U> {\n-    fn into(self) -> &'a U {\n-        self.as_ref()\n-    }\n-}\n-\n // As lifts over &\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a T where T: AsRef<U> {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n     }\n }\n \n // As lifts over &mut\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U> {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n@@ -77,14 +79,8 @@ impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U> {\n //     }\n // }\n \n-// AsMut implies Into\n-impl<'a, T: ?Sized, U: ?Sized> Into<&'a mut U> for &'a mut T where T: AsMut<U> {\n-    fn into(self) -> &'a mut U {\n-        (*self).as_mut()\n-    }\n-}\n-\n // AsMut lifts over &mut\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U> {\n     fn as_mut(&mut self) -> &mut U {\n         (*self).as_mut()\n@@ -100,28 +96,38 @@ impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U> {\n // }\n \n // From implies Into\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, U> Into<U> for T where U: From<T> {\n     fn into(self) -> U {\n         U::from(self)\n     }\n }\n \n+// From (and thus Into) is reflexive\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> From<T> for T {\n+    fn from(t: T) -> T { t }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // CONCRETE IMPLS\n ////////////////////////////////////////////////////////////////////////////////\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> AsRef<[T]> for [T] {\n     fn as_ref(&self) -> &[T] {\n         self\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> AsMut<[T]> for [T] {\n     fn as_mut(&mut self) -> &mut [T] {\n         self\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<str> for str {\n     fn as_ref(&self) -> &str {\n         self"}, {"sha": "6215f823142ad0cbe19c25262a40272889aa3a07", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -41,7 +41,6 @@\n #![feature(path_ext)]\n #![feature(str_words)]\n #![feature(str_char)]\n-#![feature(convert)]\n #![feature(into_cow)]\n #![feature(slice_patterns)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "5d7457da7e03201f72ef355f24166137b10273bd", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -46,7 +46,6 @@\n #![feature(path_ext)]\n #![feature(std_misc)]\n #![feature(step_by)]\n-#![feature(convert)]\n #![cfg_attr(test, feature(test, rand))]\n \n extern crate syntax;"}, {"sha": "112f1502643f33e92fd76d0cfb7295e2a1728b7b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -38,7 +38,6 @@\n #![feature(io)]\n #![feature(set_stdio)]\n #![feature(unicode)]\n-#![feature(convert)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "b0eacd1a55d4150221e924c8b3bf390f8d81d9ca", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -39,7 +39,6 @@\n #![feature(unicode)]\n #![feature(path_ext)]\n #![feature(fs)]\n-#![feature(convert)]\n #![feature(path_relative_from)]\n \n #![allow(trivial_casts)]"}, {"sha": "98598509cbc902bf33c1e751f8af02a87d252981", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -36,7 +36,6 @@\n #![feature(file_path)]\n #![feature(path_ext)]\n #![feature(path_relative_from)]\n-#![feature(convert)]\n #![feature(slice_patterns)]\n \n extern crate arena;"}, {"sha": "2e86712c9bccf66cb24f1d45c0ff3884d5e2526b", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -36,7 +36,6 @@ Core encoding and decoding interfaces.\n #![feature(std_misc)]\n #![feature(unicode)]\n #![feature(str_char)]\n-#![feature(convert)]\n #![cfg_attr(test, feature(test, old_io))]\n \n // test harness access"}, {"sha": "f9bb7e6cbd43df9eed54fe087d9cdfdaa3a0c707", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -190,7 +190,6 @@ mod dl {\n     use ffi::{CStr, OsStr};\n     use str;\n     use libc;\n-    use os::unix::prelude::*;\n     use ptr;\n \n     pub fn open(filename: Option<&OsStr>) -> Result<*mut u8, String> {"}, {"sha": "6553b40b745ec13d671d02677bbfcc6a42a4b020", "filename": "src/libstd/env.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -327,7 +327,6 @@ pub struct JoinPathsError {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(convert)]\n /// use std::env;\n /// use std::path::PathBuf;\n ///"}, {"sha": "30e96ec465fd00de0f8a29892f8d427545170b46", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 78, "deletions": 7, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -35,13 +35,15 @@\n use core::prelude::*;\n \n use borrow::{Borrow, Cow, ToOwned};\n+use ffi::CString;\n use fmt::{self, Debug};\n use mem;\n use string::String;\n use ops;\n use cmp;\n use hash::{Hash, Hasher};\n use old_path::{Path, GenericPath};\n+use vec::Vec;\n \n use sys::os_str::{Buf, Slice};\n use sys_common::{AsInner, IntoInner, FromInner};\n@@ -83,6 +85,37 @@ impl OsString {\n         OsString { inner: Buf::from_string(String::new()) }\n     }\n \n+    /// Construct an `OsString` from a byte sequence.\n+    ///\n+    /// # Platform behavior\n+    ///\n+    /// On Unix systems, any byte sequence can be successfully\n+    /// converted into an `OsString`.\n+    ///\n+    /// On Windows system, only UTF-8 byte sequences will successfully\n+    /// convert; non UTF-8 data will produce `None`.\n+    #[unstable(feature = \"convert\", reason = \"recently added\")]\n+    pub fn from_bytes<B>(bytes: B) -> Option<OsString> where B: Into<Vec<u8>> {\n+        #[cfg(unix)]\n+        fn from_bytes_inner(vec: Vec<u8>) -> Option<OsString> {\n+            use os::unix::ffi::OsStringExt;\n+            Some(OsString::from_vec(vec))\n+        }\n+\n+        #[cfg(windows)]\n+        fn from_bytes_inner(vec: Vec<u8>) -> Option<OsString> {\n+            String::from_utf8(vec).ok().map(OsString::from)\n+        }\n+\n+        from_bytes_inner(bytes.into())\n+    }\n+\n+    /// Convert to an `OsStr` slice.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn as_os_str(&self) -> &OsStr {\n+        self\n+    }\n+\n     /// Convert the `OsString` into a `String` if it contains valid Unicode data.\n     ///\n     /// On failure, ownership of the original `OsString` is returned.\n@@ -211,8 +244,16 @@ impl Hash for OsString {\n }\n \n impl OsStr {\n+    /// Coerce into an `OsStr` slice.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &OsStr {\n+        s.as_ref()\n+    }\n+\n     /// Coerce directly from a `&str` slice to a `&OsStr` slice.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[deprecated(since = \"1.0.0\",\n+                 reason = \"use `OsStr::new` instead\")]\n     pub fn from_str(s: &str) -> &OsStr {\n         unsafe { mem::transmute(Slice::from_str(s)) }\n     }\n@@ -239,6 +280,36 @@ impl OsStr {\n         OsString { inner: self.inner.to_owned() }\n     }\n \n+    /// Yield this `OsStr` as a byte slice.\n+    ///\n+    /// # Platform behavior\n+    ///\n+    /// On Unix systems, this is a no-op.\n+    ///\n+    /// On Windows systems, this returns `None` unless the `OsStr` is\n+    /// valid unicode, in which case it produces UTF-8-encoded\n+    /// data. This may entail checking validity.\n+    #[unstable(feature = \"convert\", reason = \"recently added\")]\n+    pub fn to_bytes(&self) -> Option<&[u8]> {\n+        if cfg!(windows) {\n+            self.to_str().map(|s| s.as_bytes())\n+        } else {\n+            Some(self.bytes())\n+        }\n+    }\n+\n+    /// Create a `CString` containing this `OsStr` data.\n+    ///\n+    /// Fails if the `OsStr` contains interior nulls.\n+    ///\n+    /// This is a convenience for creating a `CString` from\n+    /// `self.to_bytes()`, and inherits the platform behavior of the\n+    /// `to_bytes` method.\n+    #[unstable(feature = \"convert\", reason = \"recently added\")]\n+    pub fn to_cstring(&self) -> Option<CString> {\n+        self.to_bytes().and_then(|b| CString::new(b).ok())\n+    }\n+\n     /// Get the underlying byte representation.\n     ///\n     /// Note: it is *crucial* that this API is private, to avoid\n@@ -258,14 +329,14 @@ impl PartialEq for OsStr {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<str> for OsStr {\n     fn eq(&self, other: &str) -> bool {\n-        *self == *OsStr::from_str(other)\n+        *self == *OsStr::new(other)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<OsStr> for str {\n     fn eq(&self, other: &OsStr) -> bool {\n-        *other == *OsStr::from_str(self)\n+        *other == *OsStr::new(self)\n     }\n }\n \n@@ -292,7 +363,7 @@ impl PartialOrd for OsStr {\n impl PartialOrd<str> for OsStr {\n     #[inline]\n     fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {\n-        self.partial_cmp(OsStr::from_str(other))\n+        self.partial_cmp(OsStr::new(other))\n     }\n }\n \n@@ -359,15 +430,15 @@ impl AsOsStr for OsString {\n #[deprecated(since = \"1.0.0\", reason = \"trait is deprecated\")]\n impl AsOsStr for str {\n     fn as_os_str(&self) -> &OsStr {\n-        OsStr::from_str(self)\n+        unsafe { mem::transmute(Slice::from_str(self)) }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[deprecated(since = \"1.0.0\", reason = \"trait is deprecated\")]\n impl AsOsStr for String {\n     fn as_os_str(&self) -> &OsStr {\n-        OsStr::from_str(&self[..])\n+        unsafe { mem::transmute(Slice::from_str(self)) }\n     }\n }\n \n@@ -388,14 +459,14 @@ impl AsRef<OsStr> for OsString {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<OsStr> for str {\n     fn as_ref(&self) -> &OsStr {\n-        OsStr::from_str(self)\n+        unsafe { mem::transmute(Slice::from_str(self)) }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<OsStr> for String {\n     fn as_ref(&self) -> &OsStr {\n-        OsStr::from_str(&self[..])\n+        unsafe { mem::transmute(Slice::from_str(self)) }\n     }\n }\n "}, {"sha": "cd7fcc433a63a9d1df23fe4ed37826874d4e6dd4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -122,12 +122,11 @@\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(macro_reexport)]\n #![feature(unique)]\n-#![feature(convert)]\n #![feature(allow_internal_unstable)]\n #![feature(str_char)]\n #![feature(into_cow)]\n-#![feature(slice_patterns)]\n #![feature(std_misc)]\n+#![feature(slice_patterns)]\n #![feature(debug_builders)]\n #![cfg_attr(test, feature(test, rustc_private, std_misc))]\n "}, {"sha": "36a5d1465f0bfeb9111c8be3e69d274226886a9f", "filename": "src/libstd/path.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -35,7 +35,6 @@\n //! To build or modify paths, use `PathBuf`:\n //!\n //! ```rust\n-//! # #![feature(convert)]\n //! use std::path::PathBuf;\n //!\n //! let mut path = PathBuf::from(\"c:\\\\\");\n@@ -521,9 +520,9 @@ impl<'a> Component<'a> {\n     pub fn as_os_str(self) -> &'a OsStr {\n         match self {\n             Component::Prefix(p) => p.as_os_str(),\n-            Component::RootDir => OsStr::from_str(MAIN_SEP_STR),\n-            Component::CurDir => OsStr::from_str(\".\"),\n-            Component::ParentDir => OsStr::from_str(\"..\"),\n+            Component::RootDir => OsStr::new(MAIN_SEP_STR),\n+            Component::CurDir => OsStr::new(\".\"),\n+            Component::ParentDir => OsStr::new(\"..\"),\n             Component::Normal(path) => path,\n         }\n     }\n@@ -893,7 +892,6 @@ impl<'a> cmp::Ord for Components<'a> {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(convert)]\n /// use std::path::PathBuf;\n ///\n /// let mut path = PathBuf::from(\"c:\\\\\");\n@@ -918,6 +916,12 @@ impl PathBuf {\n         PathBuf { inner: OsString::new() }\n     }\n \n+    /// Coerce to a `Path` slice.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn as_path(&self) -> &Path {\n+        self\n+    }\n+\n     /// Extend `self` with `path`.\n     ///\n     /// If `path` is absolute, it replaces the current path.\n@@ -985,7 +989,6 @@ impl PathBuf {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(convert)]\n     /// use std::path::PathBuf;\n     ///\n     /// let mut buf = PathBuf::from(\"/\");"}, {"sha": "d197d04c0a4c483a7cb3818dd76cdf980850c9c7", "filename": "src/libstd/sys/unix/ext.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -138,7 +138,7 @@ pub mod io {\n /// Unix-specific extension to the primitives in the `std::ffi` module\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod ffi {\n-    use ffi::{CString, NulError, OsStr, OsString};\n+    use ffi::{OsStr, OsString};\n     use mem;\n     use prelude::v1::*;\n     use sys::os_str::Buf;\n@@ -175,10 +175,6 @@ pub mod ffi {\n         /// Get the underlying byte view of the `OsStr` slice.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         fn as_bytes(&self) -> &[u8];\n-\n-        /// Convert the `OsStr` slice into a `CString`.\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        fn to_cstring(&self) -> Result<CString, NulError>;\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -189,9 +185,6 @@ pub mod ffi {\n         fn as_bytes(&self) -> &[u8] {\n             &self.as_inner().inner\n         }\n-        fn to_cstring(&self) -> Result<CString, NulError> {\n-            CString::new(self.as_bytes())\n-        }\n     }\n }\n "}, {"sha": "c7bfb8604bc873a196631a70c2185a094ecf9e81", "filename": "src/libstd/sys/unix/fs2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -276,8 +276,8 @@ impl File {\n }\n \n fn cstr(path: &Path) -> io::Result<CString> {\n-    let cstring = try!(path.as_os_str().to_cstring());\n-    Ok(cstring)\n+    path.as_os_str().to_cstring().ok_or(\n+        io::Error::new(io::ErrorKind::InvalidInput, \"path contained a null\", None))\n }\n \n pub fn mkdir(p: &Path) -> io::Result<()> {"}, {"sha": "c2a8b26aef4ebb63306fa9f6b947f9c3df15e99e", "filename": "src/libstd/sys/unix/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -54,7 +54,7 @@ impl Command {\n         self.args.push(arg.to_cstring().unwrap())\n     }\n     pub fn args<'a, I: Iterator<Item = &'a OsStr>>(&mut self, args: I) {\n-        self.args.extend(args.map(|s| OsStrExt::to_cstring(s).unwrap()))\n+        self.args.extend(args.map(|s| s.to_cstring().unwrap()))\n     }\n     fn init_env_map(&mut self) {\n         if self.env.is_none() {"}, {"sha": "0980acd3433dcc427dcf3da5833b856ccdaa3f60", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -37,7 +37,6 @@\n #![feature(unicode)]\n #![feature(path_ext)]\n #![feature(str_char)]\n-#![feature(convert)]\n #![feature(into_cow)]\n #![feature(slice_patterns)]\n "}, {"sha": "38d58f042b94167fd7ff9ed5d2bd6378d3656bd8", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -62,7 +62,6 @@\n #![feature(std_misc)]\n #![feature(str_char)]\n #![feature(path_ext)]\n-#![feature(convert)]\n #![cfg_attr(windows, feature(libc))]\n \n #[macro_use] extern crate log;"}, {"sha": "a08d125c233d56963d2304c2ecf9809fb3cf493f", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -44,7 +44,6 @@\n #![feature(libc)]\n #![feature(set_stdio)]\n #![feature(os)]\n-#![feature(convert)]\n #![cfg_attr(test, feature(old_io))]\n \n extern crate getopts;"}, {"sha": "09fcd518c1e7e3998f32851738559f36840d845d", "filename": "src/rustbook/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fmain.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -15,7 +15,6 @@\n #![feature(rustdoc)]\n #![feature(rustc_private)]\n #![feature(path_relative_from)]\n-#![feature(convert)]\n \n extern crate rustdoc;\n extern crate rustc_back;"}, {"sha": "7fb96112125afaaae984810a19d6ad83bbfeff3e", "filename": "src/test/run-pass/env-home-dir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -11,7 +11,6 @@\n // pretty-expanded FIXME #23616\n \n #![feature(path)]\n-#![feature(convert)]\n \n use std::env::*;\n use std::path::PathBuf;"}, {"sha": "45d31d4a7f168ffa987e9a9cfcc65adad1adf636", "filename": "src/test/run-pass/issue-20797.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc51efe3344a32d9e522f08383f052277b6ab63/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20797.rs?ref=9fc51efe3344a32d9e522f08383f052277b6ab63", "patch": "@@ -12,8 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(convert)]\n-\n use std::default::Default;\n use std::io;\n use std::fs;"}]}