{"sha": "757292856b5d3653926e52dd4da473b062b9a832", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NzI5Mjg1NmI1ZDM2NTM5MjZlNTJkZDRkYTQ3M2IwNjJiOWE4MzI=", "commit": {"author": {"name": "Vladimir Serov", "email": "me@cab404.ru", "date": "2020-05-21T18:30:56Z"}, "committer": {"name": "Vladimir Serov", "email": "me@cab404.ru", "date": "2020-05-21T18:32:11Z"}, "message": "editors/vscode: patchelf-ing without intermediate files", "tree": {"sha": "8be754b002b88424a746a09d2784e75c40c4d1ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8be754b002b88424a746a09d2784e75c40c4d1ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/757292856b5d3653926e52dd4da473b062b9a832", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEG7loEJJvTnFd71Z+a6fCbD/fe7MFAl7GyTYACgkQa6fCbD/f\ne7NiCAv7B5xE2wiAllcv2WyqB9NdcefmiA5wf+NPkrNZ8eJ0rkJ1uiFhQ+jg7l+v\nDraUCBE4trVwkuBnG7UErtnnUE3eFTk2IK+jlNMdfa+nEW9Jebh5OXIDmrNg6zz8\ndYHbAJBgiyxMFSUetek8ZkLiev96/ZBxjs3CimfzCNC1XEUzx/ycQ6rsbwHnAl3t\nZnzLcUyEH/sRCnwggmiocBhZB8dnL+mEPAdjx8wEeWX4/LN+piKay0McVjd6OzU8\n0orBJf8e6UT2US0XbDUo09ZLLxLWfCExaJDC1T+vLj6ezEVJvRPeWok5BInjJAli\nSG/nl3zHo3UU9iXBifknPD9PJFYFK6VXFfaZy7/9Y0WEkGcc++TVXxUKwBaZQY5l\n49BhtedA4CA4zmnqgkv/hJCcmFL9MrKPbcwUrF87oqpWFElVFazkI5jITVECBcn1\nHtRdZrWP89vm2pDdHuyBap77jJR1slzKBZtgW5jf33mG79tV2/fbSeYjpXIeowVB\nua8FeymT\n=6dw1\n-----END PGP SIGNATURE-----", "payload": "tree 8be754b002b88424a746a09d2784e75c40c4d1ab\nparent 8e0d776369f807c1d3f60abb899d2fe0d83570d4\nauthor Vladimir Serov <me@cab404.ru> 1590085856 +0300\ncommitter Vladimir Serov <me@cab404.ru> 1590085931 +0300\n\neditors/vscode: patchelf-ing without intermediate files\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/757292856b5d3653926e52dd4da473b062b9a832", "html_url": "https://github.com/rust-lang/rust/commit/757292856b5d3653926e52dd4da473b062b9a832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/757292856b5d3653926e52dd4da473b062b9a832/comments", "author": {"login": "cab404", "id": 6453661, "node_id": "MDQ6VXNlcjY0NTM2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/6453661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cab404", "html_url": "https://github.com/cab404", "followers_url": "https://api.github.com/users/cab404/followers", "following_url": "https://api.github.com/users/cab404/following{/other_user}", "gists_url": "https://api.github.com/users/cab404/gists{/gist_id}", "starred_url": "https://api.github.com/users/cab404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cab404/subscriptions", "organizations_url": "https://api.github.com/users/cab404/orgs", "repos_url": "https://api.github.com/users/cab404/repos", "events_url": "https://api.github.com/users/cab404/events{/privacy}", "received_events_url": "https://api.github.com/users/cab404/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cab404", "id": 6453661, "node_id": "MDQ6VXNlcjY0NTM2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/6453661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cab404", "html_url": "https://github.com/cab404", "followers_url": "https://api.github.com/users/cab404/followers", "following_url": "https://api.github.com/users/cab404/following{/other_user}", "gists_url": "https://api.github.com/users/cab404/gists{/gist_id}", "starred_url": "https://api.github.com/users/cab404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cab404/subscriptions", "organizations_url": "https://api.github.com/users/cab404/orgs", "repos_url": "https://api.github.com/users/cab404/repos", "events_url": "https://api.github.com/users/cab404/events{/privacy}", "received_events_url": "https://api.github.com/users/cab404/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e0d776369f807c1d3f60abb899d2fe0d83570d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0d776369f807c1d3f60abb899d2fe0d83570d4", "html_url": "https://github.com/rust-lang/rust/commit/8e0d776369f807c1d3f60abb899d2fe0d83570d4"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "dbb2411921bb5d853b8d0a8df8e28e7d0b681696", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/757292856b5d3653926e52dd4da473b062b9a832/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/757292856b5d3653926e52dd4da473b062b9a832/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=757292856b5d3653926e52dd4da473b062b9a832", "patch": "@@ -196,9 +196,7 @@ async function patchelf(dest: PathLike): Promise<void> {\n             title: \"Patching rust-analysis for NixOS\"\n         },\n         async (progress, _) => {\n-            const patchPath = path.join(os.tmpdir(), \"patch-ra.nix\");\n-            progress.report({ message: \"Writing nix file\", increment: 5 });\n-            await fs.writeFile(patchPath, `\n+            const expression = `\n             {src, pkgs ? import <nixpkgs> {}}:\n                 pkgs.stdenv.mkDerivation {\n                     name = \"rust-analyzer\";\n@@ -210,19 +208,21 @@ async function patchelf(dest: PathLike): Promise<void> {\n                     patchelf --set-interpreter \"$(cat $NIX_CC/nix-support/dynamic-linker)\" $out\n                     '';\n                 }\n-            `);\n+            `;\n             const origFile = dest + \"-orig\";\n             await fs.rename(dest, origFile);\n             progress.report({ message: \"Patching executable\", increment: 20 });\n             await new Promise((resolve, reject) => {\n-                exec(`nix-build ${patchPath} --arg src '${origFile}' -o ${dest}`,\n+                const handle = exec(`nix-build -E - --arg src '${origFile}' -o ${dest}`,\n                     (err, stdout, stderr) => {\n                         if (err != null) {\n                             reject(Error(stderr));\n                         } else {\n                             resolve(stdout);\n                         }\n                     });\n+                handle.stdin?.write(expression);\n+                handle.stdin?.end();\n             });\n             await fs.unlink(origFile);\n         }"}]}