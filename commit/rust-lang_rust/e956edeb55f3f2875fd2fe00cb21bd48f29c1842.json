{"sha": "e956edeb55f3f2875fd2fe00cb21bd48f29c1842", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NTZlZGViNTVmM2YyODc1ZmQyZmUwMGNiMjFiZDQ4ZjI5YzE4NDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-26T21:54:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-26T21:55:08Z"}, "message": "libcore: De-export bool", "tree": {"sha": "c53aca1d9353c8b0f9afb5cee54e9912a988f636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c53aca1d9353c8b0f9afb5cee54e9912a988f636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e956edeb55f3f2875fd2fe00cb21bd48f29c1842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e956edeb55f3f2875fd2fe00cb21bd48f29c1842", "html_url": "https://github.com/rust-lang/rust/commit/e956edeb55f3f2875fd2fe00cb21bd48f29c1842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e956edeb55f3f2875fd2fe00cb21bd48f29c1842/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b13912a839a5e0336fa285d9b62c1337e17b165", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b13912a839a5e0336fa285d9b62c1337e17b165", "html_url": "https://github.com/rust-lang/rust/commit/8b13912a839a5e0336fa285d9b62c1337e17b165"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "9e7e257ee307ae3be31649b2427d61e1b4e28c89", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e956edeb55f3f2875fd2fe00cb21bd48f29c1842/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e956edeb55f3f2875fd2fe00cb21bd48f29c1842/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=e956edeb55f3f2875fd2fe00cb21bd48f29c1842", "patch": "@@ -8,43 +8,39 @@\n \n use cmp::Eq;\n \n-export not, and, or, xor, implies;\n-export eq, ne, is_true, is_false;\n-export from_str, to_str, all_values, to_bit;\n-\n /// Negation / inverse\n-pure fn not(v: bool) -> bool { !v }\n+pub pure fn not(v: bool) -> bool { !v }\n \n /// Conjunction\n-pure fn and(a: bool, b: bool) -> bool { a && b }\n+pub pure fn and(a: bool, b: bool) -> bool { a && b }\n \n /// Disjunction\n-pure fn or(a: bool, b: bool) -> bool { a || b }\n+pub pure fn or(a: bool, b: bool) -> bool { a || b }\n \n /**\n  * Exclusive or\n  *\n  * Identical to `or(and(a, not(b)), and(not(a), b))`\n  */\n-pure fn xor(a: bool, b: bool) -> bool { (a && !b) || (!a && b) }\n+pub pure fn xor(a: bool, b: bool) -> bool { (a && !b) || (!a && b) }\n \n /// Implication in the logic, i.e. from `a` follows `b`\n-pure fn implies(a: bool, b: bool) -> bool { !a || b }\n+pub pure fn implies(a: bool, b: bool) -> bool { !a || b }\n \n /// true if truth values `a` and `b` are indistinguishable in the logic\n-pure fn eq(a: bool, b: bool) -> bool { a == b }\n+pub pure fn eq(a: bool, b: bool) -> bool { a == b }\n \n /// true if truth values `a` and `b` are distinguishable in the logic\n-pure fn ne(a: bool, b: bool) -> bool { a != b }\n+pub pure fn ne(a: bool, b: bool) -> bool { a != b }\n \n /// true if `v` represents truth in the logic\n-pure fn is_true(v: bool) -> bool { v }\n+pub pure fn is_true(v: bool) -> bool { v }\n \n /// true if `v` represents falsehood in the logic\n-pure fn is_false(v: bool) -> bool { !v }\n+pub pure fn is_false(v: bool) -> bool { !v }\n \n /// Parse logic value from `s`\n-pure fn from_str(s: &str) -> Option<bool> {\n+pub pure fn from_str(s: &str) -> Option<bool> {\n     if s == \"true\" {\n         Some(true)\n     } else if s == \"false\" {\n@@ -55,40 +51,40 @@ pure fn from_str(s: &str) -> Option<bool> {\n }\n \n /// Convert `v` into a string\n-pure fn to_str(v: bool) -> ~str { if v { ~\"true\" } else { ~\"false\" } }\n+pub pure fn to_str(v: bool) -> ~str { if v { ~\"true\" } else { ~\"false\" } }\n \n /**\n  * Iterates over all truth values by passing them to `blk` in an unspecified\n  * order\n  */\n-fn all_values(blk: fn(v: bool)) {\n+pub fn all_values(blk: fn(v: bool)) {\n     blk(true);\n     blk(false);\n }\n \n /// converts truth value to an 8 bit byte\n-pure fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n+pub pure fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n \n impl bool : cmp::Eq {\n     pure fn eq(other: &bool) -> bool { self == (*other) }\n     pure fn ne(other: &bool) -> bool { self != (*other) }\n }\n \n #[test]\n-fn test_bool_from_str() {\n+pub fn test_bool_from_str() {\n     do all_values |v| {\n         assert Some(v) == from_str(bool::to_str(v))\n     }\n }\n \n #[test]\n-fn test_bool_to_str() {\n+pub fn test_bool_to_str() {\n     assert to_str(false) == ~\"false\";\n     assert to_str(true) == ~\"true\";\n }\n \n #[test]\n-fn test_bool_to_bit() {\n+pub fn test_bool_to_bit() {\n     do all_values |v| {\n         assert to_bit(v) == if is_true(v) { 1u8 } else { 0u8 };\n     }"}]}