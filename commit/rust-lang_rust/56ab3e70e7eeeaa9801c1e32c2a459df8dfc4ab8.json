{"sha": "56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YWIzZTcwZTdlZWVhYTk4MDFjMWUzMmMyYTQ1OWRmOGRmYzRhYjg=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-24T22:57:36Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-24T22:57:43Z"}, "message": "Add builtin impls for int and float inference vars in chalk", "tree": {"sha": "cc9c326306072864c32e0f6b5aa63d0bf534b51c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc9c326306072864c32e0f6b5aa63d0bf534b51c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8", "html_url": "https://github.com/rust-lang/rust/commit/56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c75e0890beade386ff15acdcc1028497094cd867", "url": "https://api.github.com/repos/rust-lang/rust/commits/c75e0890beade386ff15acdcc1028497094cd867", "html_url": "https://github.com/rust-lang/rust/commit/c75e0890beade386ff15acdcc1028497094cd867"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "27af8511915d1bce01d4604bbf9d997451c07ad5", "filename": "src/librustc_traits/chalk_context/program_clauses/builtin.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs?ref=56ab3e70e7eeeaa9801c1e32c2a459df8dfc4ab8", "patch": "@@ -137,6 +137,8 @@ crate fn assemble_builtin_sized_impls<'tcx>(\n         ty::Int(..) |\n         ty::Uint(..) |\n         ty::Float(..) |\n+        ty::Infer(ty::IntVar(_)) |\n+        ty::Infer(ty::FloatVar(_)) |\n         ty::Error |\n         ty::Never => push_builtin_impl(ty, &[]),\n \n@@ -188,14 +190,11 @@ crate fn assemble_builtin_sized_impls<'tcx>(\n             push_builtin_impl(adt, &sized_constraint);\n         }\n \n-        // Artificially trigger an ambiguity.\n-        ty::Infer(..) => {\n-            // Everybody can find at least two types to unify against:\n-            // general ty vars, int vars and float vars.\n+        // Artificially trigger an ambiguity by adding two possible types to\n+        // unify against.\n+        ty::Infer(ty::TyVar(_)) => {\n             push_builtin_impl(tcx.types.i32, &[]);\n-            push_builtin_impl(tcx.types.u32, &[]);\n             push_builtin_impl(tcx.types.f32, &[]);\n-            push_builtin_impl(tcx.types.f64, &[]);\n         }\n \n         ty::Projection(_projection_ty) => {\n@@ -216,7 +215,10 @@ crate fn assemble_builtin_sized_impls<'tcx>(\n         ty::Opaque(..) => (),\n \n         ty::Bound(..) |\n-        ty::GeneratorWitness(..) => bug!(\"unexpected type {:?}\", ty),\n+        ty::GeneratorWitness(..) |\n+        ty::Infer(ty::FreshTy(_)) |\n+        ty::Infer(ty::FreshIntTy(_)) |\n+        ty::Infer(ty::FreshFloatTy(_)) => bug!(\"unexpected type {:?}\", ty),\n     }\n }\n \n@@ -243,7 +245,9 @@ crate fn assemble_builtin_copy_clone_impls<'tcx>(\n         ty::Never |\n         ty::Ref(_, _, hir::MutImmutable) => (),\n \n-        // Non parametric primitive type.\n+        // Non parametric primitive types.\n+        ty::Infer(ty::IntVar(_)) |\n+        ty::Infer(ty::FloatVar(_)) |\n         ty::Error => push_builtin_impl(ty, &[]),\n \n         // These implement `Copy`/`Clone` if their element types do.\n@@ -283,13 +287,11 @@ crate fn assemble_builtin_copy_clone_impls<'tcx>(\n         // These depend on whatever user-defined impls might exist.\n         ty::Adt(_, _) => (),\n \n-        // int vars and float vars are always `Copy`.\n-        // Other vars will trigger an ambiguity.\n-        ty::Infer(..) => {\n+        // Artificially trigger an ambiguity by adding two possible types to\n+        // unify against.\n+        ty::Infer(ty::TyVar(_)) => {\n             push_builtin_impl(tcx.types.i32, &[]);\n-            push_builtin_impl(tcx.types.u32, &[]);\n             push_builtin_impl(tcx.types.f32, &[]);\n-            push_builtin_impl(tcx.types.f64, &[]);\n         }\n \n         ty::Projection(_projection_ty) => {\n@@ -312,6 +314,9 @@ crate fn assemble_builtin_copy_clone_impls<'tcx>(\n         ty::Ref(_, _, hir::MutMutable) => (),\n \n         ty::Bound(..) |\n-        ty::GeneratorWitness(..) => bug!(\"unexpected type {:?}\", ty),\n+        ty::GeneratorWitness(..) |\n+        ty::Infer(ty::FreshTy(_)) |\n+        ty::Infer(ty::FreshIntTy(_)) |\n+        ty::Infer(ty::FreshFloatTy(_)) => bug!(\"unexpected type {:?}\", ty),\n     }\n }"}]}