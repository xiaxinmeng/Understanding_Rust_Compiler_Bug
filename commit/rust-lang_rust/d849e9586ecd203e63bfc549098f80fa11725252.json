{"sha": "d849e9586ecd203e63bfc549098f80fa11725252", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NDllOTU4NmVjZDIwM2U2M2JmYzU0OTA5OGY4MGZhMTE3MjUyNTI=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-08T11:29:59Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-09T19:58:31Z"}, "message": "Metadata collection monster eating deprecated lints", "tree": {"sha": "d793fd6142fe89554d790a5c5950e417c2e5610a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d793fd6142fe89554d790a5c5950e417c2e5610a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d849e9586ecd203e63bfc549098f80fa11725252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d849e9586ecd203e63bfc549098f80fa11725252", "html_url": "https://github.com/rust-lang/rust/commit/d849e9586ecd203e63bfc549098f80fa11725252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d849e9586ecd203e63bfc549098f80fa11725252/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65951c969ff843bc3a45c470d5f366498172ebe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/65951c969ff843bc3a45c470d5f366498172ebe1", "html_url": "https://github.com/rust-lang/rust/commit/65951c969ff843bc3a45c470d5f366498172ebe1"}], "stats": {"total": 83, "additions": 62, "deletions": 21}, "files": [{"sha": "fa8add20688c90b6ee49204dd0b74a548e6cdc71", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d849e9586ecd203e63bfc549098f80fa11725252/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d849e9586ecd203e63bfc549098f80fa11725252/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=d849e9586ecd203e63bfc549098f80fa11725252", "patch": "@@ -1,6 +1,13 @@\n+/// This struct fakes the `Lint` declaration that is usually created by `declare_lint!`. This\n+/// enables the simple extraction of the metadata without changing the current depreciation\n+/// declaration.\n+pub struct ClippyDeprecatedLint;\n+\n macro_rules! declare_deprecated_lint {\n-    (pub $name: ident, $_reason: expr) => {\n-        declare_lint!(pub $name, Allow, \"deprecated lint\")\n+    { $(#[$attr:meta])* pub $name: ident, $_reason: expr} => {\n+        $(#[$attr])*\n+        #[allow(dead_code)]\n+        pub static $name: ClippyDeprecatedLint = ClippyDeprecatedLint {};\n     }\n }\n "}, {"sha": "8bdd041576fda323fc2a2270b56900322ed3cd3e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d849e9586ecd203e63bfc549098f80fa11725252/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d849e9586ecd203e63bfc549098f80fa11725252/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d849e9586ecd203e63bfc549098f80fa11725252", "patch": "@@ -162,6 +162,8 @@ macro_rules! extract_msrv_attr {\n mod consts;\n #[macro_use]\n mod utils;\n+#[cfg(feature = \"metadata-collector-lint\")]\n+mod deprecated_lints;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n mod absurd_extreme_comparisons;"}, {"sha": "af734fa5572a0f5577ef8895d0a4bd69d7528f98", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 51, "deletions": 19, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d849e9586ecd203e63bfc549098f80fa11725252/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d849e9586ecd203e63bfc549098f80fa11725252/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=d849e9586ecd203e63bfc549098f80fa11725252", "patch": "@@ -28,7 +28,7 @@ use std::path::Path;\n \n use crate::utils::internal_lints::is_lint_ref_type;\n use clippy_utils::{\n-    diagnostics::span_lint, last_path_segment, match_function_call, match_path, paths, ty::match_type,\n+    diagnostics::span_lint, last_path_segment, match_def_path, match_function_call, match_path, paths, ty::match_type,\n     ty::walk_ptrs_ty_depth,\n };\n \n@@ -41,6 +41,8 @@ const BLACK_LISTED_LINTS: [&str; 3] = [\"lint_author\", \"deep_code_inspection\", \"i\n const IGNORED_LINT_GROUPS: [&str; 1] = [\"clippy::all\"];\n /// Lints within this group will be excluded from the collection\n const EXCLUDED_LINT_GROUPS: [&str; 1] = [\"clippy::internal\"];\n+/// Collected deprecated lint will be assigned to this group in the JSON output\n+const DEPRECATED_LINT_GROUP_STR: &str = \"DEPRECATED\";\n \n const LINT_EMISSION_FUNCTIONS: [&[&str]; 7] = [\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint\"],\n@@ -66,6 +68,7 @@ const SUGGESTION_FUNCTIONS: [&[&str]; 2] = [\n     &[\"clippy_utils\", \"diagnostics\", \"multispan_sugg\"],\n     &[\"clippy_utils\", \"diagnostics\", \"multispan_sugg_with_applicability\"],\n ];\n+const DEPRECATED_LINT_TYPE: [&str; 3] = [\"clippy_lints\", \"deprecated_lints\", \"ClippyDeprecatedLint\"];\n \n /// The index of the applicability name of `paths::APPLICABILITY_VALUES`\n const APPLICABILITY_NAME_INDEX: usize = 2;\n@@ -225,23 +228,42 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n     /// }\n     /// ```\n     fn check_item(&mut self, cx: &LateContext<'hir>, item: &'hir Item<'_>) {\n-        if_chain! {\n-            // item validation\n-            if let ItemKind::Static(ref ty, Mutability::Not, _) = item.kind;\n-            if is_lint_ref_type(cx, ty);\n-            // blacklist check\n-            let lint_name = sym_to_string(item.ident.name).to_ascii_lowercase();\n-            if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n-            // metadata extraction\n-            if let Some(group) = get_lint_group_or_lint(cx, &lint_name, item);\n-            if let Some(docs) = extract_attr_docs_or_lint(cx, item);\n-            then {\n-                self.lints.push(LintMetadata::new(\n-                    lint_name,\n-                    SerializableSpan::from_item(cx, item),\n-                    group,\n-                    docs,\n-                ));\n+        if let ItemKind::Static(ref ty, Mutability::Not, _) = item.kind {\n+            // Normal lint\n+            if_chain! {\n+                // item validation\n+                if is_lint_ref_type(cx, ty);\n+                // blacklist check\n+                let lint_name = sym_to_string(item.ident.name).to_ascii_lowercase();\n+                if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n+                // metadata extraction\n+                if let Some(group) = get_lint_group_or_lint(cx, &lint_name, item);\n+                if let Some(docs) = extract_attr_docs_or_lint(cx, item);\n+                then {\n+                    self.lints.push(LintMetadata::new(\n+                        lint_name,\n+                        SerializableSpan::from_item(cx, item),\n+                        group,\n+                        docs,\n+                    ));\n+                }\n+            }\n+\n+            if_chain! {\n+                if is_deprecated_lint(cx, ty);\n+                // blacklist check\n+                let lint_name = sym_to_string(item.ident.name).to_ascii_lowercase();\n+                if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n+                // Metadata the little we can get from a deprecated lint\n+                if let Some(docs) = extract_attr_docs_or_lint(cx, item);\n+                then {\n+                    self.lints.push(LintMetadata::new(\n+                        lint_name,\n+                        SerializableSpan::from_item(cx, item),\n+                        DEPRECATED_LINT_GROUP_STR.to_string(),\n+                        docs,\n+                    ));\n+                }\n             }\n         }\n     }\n@@ -268,7 +290,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                 // - src/misc.rs:734:9\n                 // - src/methods/mod.rs:3545:13\n                 // - src/methods/mod.rs:3496:13\n-                // We are basically unable to resolve the lint name it self.\n+                // We are basically unable to resolve the lint name itself.\n                 return;\n             }\n \n@@ -347,6 +369,16 @@ fn get_lint_group(cx: &LateContext<'_>, lint_id: LintId) -> Option<String> {\n     None\n }\n \n+fn is_deprecated_lint(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n+    if let hir::TyKind::Path(ref path) = ty.kind {\n+        if let hir::def::Res::Def(DefKind::Struct, def_id) = cx.qpath_res(path, ty.hir_id) {\n+            return match_def_path(cx, def_id, &DEPRECATED_LINT_TYPE);\n+        }\n+    }\n+\n+    false\n+}\n+\n // ==================================================================\n // Lint emission\n // =================================================================="}]}