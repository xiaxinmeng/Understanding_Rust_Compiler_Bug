{"sha": "3f07303efe91442cad38f4a62ed047a7041b9f82", "node_id": "C_kwDOAAsO6NoAKDNmMDczMDNlZmU5MTQ0MmNhZDM4ZjRhNjJlZDA0N2E3MDQxYjlmODI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-05T13:43:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-05T13:43:02Z"}, "message": "Rollup merge of #95843 - GuillaumeGomez:improve-new-cyclic-doc, r=m-ou-se\n\nImprove Rc::new_cyclic and Arc::new_cyclic documentation\n\nFixes https://github.com/rust-lang/rust/issues/95672.\n\ncc `@CAD97` (since I used your explanations)", "tree": {"sha": "f3334369d4ed263d4ce5a5fbb0e294c4121dbc8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3334369d4ed263d4ce5a5fbb0e294c4121dbc8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f07303efe91442cad38f4a62ed047a7041b9f82", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJic9RmCRBK7hj4Ov3rIwAASDkIAGnDTtPhCXJWR+kLusBUpfLw\n47haN+2laN/JSElTNjLPJvaLazGHnyW+yXzj+Q0O3+hJk/Sr2y760SeV2E3xUGK3\nmSTWMk/+e9Ng/r2GV9RXeb0y5vICwIFOZCTpP76S8cr65zzyFVo6MYP2nXSPtk9S\nJ6ubp4UW1D/Vp0BRcx8hNvwFwGkIZW+54cx1Bz/+vAuvb7SNVSrLtepqNJACbVDy\nWxhcKC0PwNz7kzcrlUQgkqLo1gz/FUiE7BBKbiq8dubJbUpNMzHKKzSQhOLQhWEh\nKc3woTSQ+pJnknygWTXhramxr6QpqUXjxRHhccmQUDJlaERHOqWZK8gON2mwtvA=\n=82lJ\n-----END PGP SIGNATURE-----\n", "payload": "tree f3334369d4ed263d4ce5a5fbb0e294c4121dbc8e\nparent 47801413d941ac5f4badcd64dc82cb505c8bef1c\nparent 67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1651758182 +0200\ncommitter GitHub <noreply@github.com> 1651758182 +0200\n\nRollup merge of #95843 - GuillaumeGomez:improve-new-cyclic-doc, r=m-ou-se\n\nImprove Rc::new_cyclic and Arc::new_cyclic documentation\n\nFixes https://github.com/rust-lang/rust/issues/95672.\n\ncc `@CAD97` (since I used your explanations)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f07303efe91442cad38f4a62ed047a7041b9f82", "html_url": "https://github.com/rust-lang/rust/commit/3f07303efe91442cad38f4a62ed047a7041b9f82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f07303efe91442cad38f4a62ed047a7041b9f82/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47801413d941ac5f4badcd64dc82cb505c8bef1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/47801413d941ac5f4badcd64dc82cb505c8bef1c", "html_url": "https://github.com/rust-lang/rust/commit/47801413d941ac5f4badcd64dc82cb505c8bef1c"}, {"sha": "67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6", "html_url": "https://github.com/rust-lang/rust/commit/67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "52957456473650f0fdf26fe067a479145d83899a", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3f07303efe91442cad38f4a62ed047a7041b9f82/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f07303efe91442cad38f4a62ed047a7041b9f82/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=3f07303efe91442cad38f4a62ed047a7041b9f82", "patch": "@@ -374,19 +374,26 @@ impl<T> Rc<T> {\n         }\n     }\n \n-    /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a\n-    /// weak reference to the constructing `Rc<T>`.\n+    /// Constructs a new `Rc<T>` while giving you a `Weak<T>` to the allocation,\n+    /// to allow you to construct a `T` which holds a weak pointer to itself.\n     ///\n     /// Generally, a structure circularly referencing itself, either directly or\n-    /// indirectly, should not hold a strong reference to prevent a memory leak.\n-    /// In `data_fn`, initialization of `T` can make use of the weak reference\n-    /// by cloning and storing it inside `T` for use at a later time.\n+    /// indirectly, should not hold a strong reference to itself to prevent a memory leak.\n+    /// Using this function, you get access to the weak pointer during the\n+    /// initialization of `T`, before the `Rc<T>` is created, such that you can\n+    /// clone and store it inside the `T`.\n+    ///\n+    /// `new_cyclic` first allocates the managed allocation for the `Rc<T>`,\n+    /// then calls your closure, giving it a `Weak<T>` to this allocation,\n+    /// and only afterwards completes the construction of the `Rc<T>` by placing\n+    /// the `T` returned from your closure into the allocation.\n     ///\n     /// Since the new `Rc<T>` is not fully-constructed until `Rc<T>::new_cyclic`\n-    /// returns, calling [`upgrade`] on the weak reference inside `data_fn` will\n+    /// returns, calling [`upgrade`] on the weak reference inside your closure will\n     /// fail and result in a `None` value.\n     ///\n     /// # Panics\n+    ///\n     /// If `data_fn` panics, the panic is propagated to the caller, and the\n     /// temporary [`Weak<T>`] is dropped normally.\n     ///\n@@ -403,7 +410,12 @@ impl<T> Rc<T> {\n     /// impl Gadget {\n     ///     /// Construct a reference counted Gadget.\n     ///     fn new() -> Rc<Self> {\n-    ///         Rc::new_cyclic(|me| Gadget { me: me.clone() })\n+    ///         // `me` is a `Weak<Gadget>` pointing at the new allocation of the\n+    ///         // `Rc` we're constructing.\n+    ///         Rc::new_cyclic(|me| {\n+    ///             // Create the actual struct here.\n+    ///             Gadget { me: me.clone() }\n+    ///         })\n     ///     }\n     ///\n     ///     /// Return a reference counted pointer to Self."}, {"sha": "2bd8f418ee90ce809a1c23346c00f045b5486a4c", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3f07303efe91442cad38f4a62ed047a7041b9f82/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f07303efe91442cad38f4a62ed047a7041b9f82/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=3f07303efe91442cad38f4a62ed047a7041b9f82", "patch": "@@ -351,23 +351,31 @@ impl<T> Arc<T> {\n         unsafe { Self::from_inner(Box::leak(x).into()) }\n     }\n \n-    /// Constructs a new `Arc<T>` using a closure `data_fn` that has access to\n-    /// a weak reference to the constructing `Arc<T>`.\n+    /// Constructs a new `Arc<T>` while giving you a `Weak<T>` to the allocation,\n+    /// to allow you to construct a `T` which holds a weak pointer to itself.\n     ///\n     /// Generally, a structure circularly referencing itself, either directly or\n-    /// indirectly, should not hold a strong reference to prevent a memory leak.\n-    /// In `data_fn`, initialization of `T` can make use of the weak reference\n-    /// by cloning and storing it inside `T` for use at a later time.\n+    /// indirectly, should not hold a strong reference to itself to prevent a memory leak.\n+    /// Using this function, you get access to the weak pointer during the\n+    /// initialization of `T`, before the `Arc<T>` is created, such that you can\n+    /// clone and store it inside the `T`.\n     ///\n-    /// Since the new `Arc<T>` is not fully-constructed until\n-    /// `Arc<T>::new_cyclic` returns, calling [`upgrade`] on the weak\n-    /// reference inside `data_fn` will fail and result in a `None` value.\n+    /// `new_cyclic` first allocates the managed allocation for the `Arc<T>`,\n+    /// then calls your closure, giving it a `Weak<T>` to this allocation,\n+    /// and only afterwards completes the construction of the `Arc<T>` by placing\n+    /// the `T` returned from your closure into the allocation.\n+    ///\n+    /// Since the new `Arc<T>` is not fully-constructed until `Arc<T>::new_cyclic`\n+    /// returns, calling [`upgrade`] on the weak reference inside your closure will\n+    /// fail and result in a `None` value.\n     ///\n     /// # Panics\n+    ///\n     /// If `data_fn` panics, the panic is propagated to the caller, and the\n     /// temporary [`Weak<T>`] is dropped normally.\n     ///\n     /// # Example\n+    ///\n     /// ```\n     /// # #![allow(dead_code)]\n     /// use std::sync::{Arc, Weak};\n@@ -379,7 +387,12 @@ impl<T> Arc<T> {\n     /// impl Gadget {\n     ///     /// Construct a reference counted Gadget.\n     ///     fn new() -> Arc<Self> {\n-    ///         Arc::new_cyclic(|me| Gadget { me: me.clone() })\n+    ///         // `me` is a `Weak<Gadget>` pointing at the new allocation of the\n+    ///         // `Arc` we're constructing.\n+    ///         Arc::new_cyclic(|me| {\n+    ///             // Create the actual struct here.\n+    ///             Gadget { me: me.clone() }\n+    ///         })\n     ///     }\n     ///\n     ///     /// Return a reference counted pointer to Self."}]}