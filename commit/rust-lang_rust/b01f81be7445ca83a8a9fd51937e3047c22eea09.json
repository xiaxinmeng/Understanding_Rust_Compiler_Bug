{"sha": "b01f81be7445ca83a8a9fd51937e3047c22eea09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMWY4MWJlNzQ0NWNhODNhOGE5ZmQ1MTkzN2UzMDQ3YzIyZWVhMDk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-21T15:14:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-21T15:14:31Z"}, "message": "remark about the one place where place computation calls size_and_align_of", "tree": {"sha": "2948a116d2ed2a9b42bebe99a9d95a6c490a5de1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2948a116d2ed2a9b42bebe99a9d95a6c490a5de1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b01f81be7445ca83a8a9fd51937e3047c22eea09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b01f81be7445ca83a8a9fd51937e3047c22eea09", "html_url": "https://github.com/rust-lang/rust/commit/b01f81be7445ca83a8a9fd51937e3047c22eea09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b01f81be7445ca83a8a9fd51937e3047c22eea09/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f6d36375f76f31a5252b8b8ab5faaafb374e721", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6d36375f76f31a5252b8b8ab5faaafb374e721", "html_url": "https://github.com/rust-lang/rust/commit/0f6d36375f76f31a5252b8b8ab5faaafb374e721"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "ec701a939f225d7a657efa1ec630f1030610f7f7", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b01f81be7445ca83a8a9fd51937e3047c22eea09/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01f81be7445ca83a8a9fd51937e3047c22eea09/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=b01f81be7445ca83a8a9fd51937e3047c22eea09", "patch": "@@ -389,9 +389,11 @@ where\n         // above). In that case, all fields are equal.\n         let field_layout = base.layout.field(self, usize::try_from(field).unwrap_or(0))?;\n \n-        // Offset may need adjustment for unsized fields\n+        // Offset may need adjustment for unsized fields.\n         let (meta, offset) = if field_layout.is_unsized() {\n-            // re-use parent metadata to determine dynamic field layout\n+            // Re-use parent metadata to determine dynamic field layout.\n+            // With custom DSTS, this *will* execute user-defined code, but the same\n+            // happens at run-time so that's okay.\n             let align = match self.size_and_align_of(base.meta, field_layout)? {\n                 Some((_, align)) => align,\n                 None if offset == Size::ZERO =>"}]}