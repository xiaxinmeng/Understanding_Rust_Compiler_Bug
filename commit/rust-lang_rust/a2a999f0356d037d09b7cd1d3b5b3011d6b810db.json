{"sha": "a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYTk5OWYwMzU2ZDAzN2QwOWI3Y2QxZDNiNWIzMDExZDZiODEwZGI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-31T03:59:48Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-06-12T02:14:23Z"}, "message": "Use the new signature stuff\n\nAnd fix a couple of bugs", "tree": {"sha": "5cd8ef45dfa80e856894d38d0ac09a3add55209c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cd8ef45dfa80e856894d38d0ac09a3add55209c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "html_url": "https://github.com/rust-lang/rust/commit/a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0058fdd110bd98a8e3e8b487247bef5f4e6cb618", "url": "https://api.github.com/repos/rust-lang/rust/commits/0058fdd110bd98a8e3e8b487247bef5f4e6cb618", "html_url": "https://github.com/rust-lang/rust/commit/0058fdd110bd98a8e3e8b487247bef5f4e6cb618"}], "stats": {"total": 306, "additions": 95, "deletions": 211}, "files": [{"sha": "e15e3f6e79e26296a48b0bc798cfbfd30950f2a5", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "patch": "@@ -18,7 +18,7 @@ use rustc::hir::def_id::{CrateNum, DefId};\n use syntax::ast::{self, Attribute, NodeId};\n use syntax_pos::Span;\n \n-use rls_data::ExternalCrateData;\n+use rls_data::{ExternalCrateData, Signature};\n \n pub struct CrateData {\n     pub name: String,\n@@ -129,7 +129,7 @@ pub struct EnumData {\n     pub variants: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -165,7 +165,7 @@ pub struct FunctionData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -251,7 +251,7 @@ pub struct MethodData {\n     pub parent: Option<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -292,7 +292,7 @@ pub struct StructData {\n     pub fields: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -307,7 +307,7 @@ pub struct StructVariantData {\n     pub scope: NodeId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -322,7 +322,7 @@ pub struct TraitData {\n     pub items: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -337,7 +337,7 @@ pub struct TupleVariantData {\n     pub scope: NodeId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -419,28 +419,3 @@ pub struct VariableRefData {\n     pub scope: NodeId,\n     pub ref_id: DefId,\n }\n-\n-\n-/// Encodes information about the signature of a definition. This should have\n-/// enough information to create a nice display about a definition without\n-/// access to the source code.\n-#[derive(Clone, Debug)]\n-pub struct Signature {\n-    pub span: Span,\n-    pub text: String,\n-    // These identify the main identifier for the defintion as byte offsets into\n-    // `text`. E.g., of `foo` in `pub fn foo(...)`\n-    pub ident_start: usize,\n-    pub ident_end: usize,\n-    pub defs: Vec<SigElement>,\n-    pub refs: Vec<SigElement>,\n-}\n-\n-/// An element of a signature. `start` and `end` are byte offsets into the `text`\n-/// of the parent `Signature`.\n-#[derive(Clone, Debug)]\n-pub struct SigElement {\n-    pub id: DefId,\n-    pub start: usize,\n-    pub end: usize,\n-}"}, {"sha": "568670cbdb611690d74f9abf0c63e2c7e46f0086", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "patch": "@@ -48,12 +48,13 @@ use syntax::ptr::P;\n use syntax::codemap::Spanned;\n use syntax_pos::*;\n \n-use super::{escape, generated_code, SaveContext, PathCollector, docs_for_attrs};\n-use super::data::*;\n-use super::dump::Dump;\n-use super::external_data::{Lower, make_def_id};\n-use super::span_utils::SpanUtils;\n-use super::recorder;\n+use {escape, generated_code, SaveContext, PathCollector, docs_for_attrs};\n+use data::*;\n+use dump::Dump;\n+use external_data::{Lower, make_def_id};\n+use recorder;\n+use span_utils::SpanUtils;\n+use sig;\n \n use rls_data::ExternalCrateData;\n \n@@ -646,7 +647,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 fields: fields,\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n-                sig: self.save_ctxt.sig_base(item),\n+                sig: sig::item_signature(item, &self.save_ctxt),\n                 attributes: item.attrs.clone(),\n             }.lower(self.tcx));\n         }\n@@ -679,18 +680,6 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             qualname.push_str(\"::\");\n             qualname.push_str(&name);\n \n-            let text = self.span.signature_string_for_span(variant.span);\n-            let ident_start = text.find(&name).unwrap();\n-            let ident_end = ident_start + name.len();\n-            let sig = Signature {\n-                span: variant.span,\n-                text: text,\n-                ident_start: ident_start,\n-                ident_end: ident_end,\n-                defs: vec![],\n-                refs: vec![],\n-            };\n-\n             match variant.node.data {\n                 ast::VariantData::Struct(ref fields, _) => {\n                     let sub_span = self.span.span_for_first_ident(variant.span);\n@@ -712,7 +701,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             scope: enum_data.scope,\n                             parent: Some(make_def_id(item.id, &self.tcx.hir)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n-                            sig: sig,\n+                            // TODO\n+                            sig: None,\n                             attributes: variant.node.attrs.clone(),\n                         }.lower(self.tcx));\n                     }\n@@ -739,7 +729,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             scope: enum_data.scope,\n                             parent: Some(make_def_id(item.id, &self.tcx.hir)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n-                            sig: sig,\n+                            // TODO\n+                            sig: None,\n                             attributes: variant.node.attrs.clone(),\n                         }.lower(self.tcx));\n                     }\n@@ -811,7 +802,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 items: methods.iter().map(|i| i.id).collect(),\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n-                sig: self.save_ctxt.sig_base(item),\n+                sig: sig::item_signature(item, &self.save_ctxt),\n                 attributes: item.attrs.clone(),\n             }.lower(self.tcx));\n         }\n@@ -1369,7 +1360,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                         visibility: From::from(&item.vis),\n                         parent: None,\n                         docs: docs_for_attrs(&item.attrs),\n-                        sig: Some(self.save_ctxt.sig_base(item)),\n+                        sig: sig::item_signature(item, &self.save_ctxt),\n                         attributes: item.attrs.clone(),\n                     }.lower(self.tcx));\n                 }"}, {"sha": "245a3bcc61795bf32be467652e67ce2696839f92", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 19, "deletions": 46, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "patch": "@@ -16,9 +16,9 @@ use syntax::codemap::CodeMap;\n use syntax::print::pprust;\n use syntax_pos::Span;\n \n-use data::{self, Visibility, SigElement};\n+use data::{self, Visibility};\n \n-use rls_data::{SpanData, CratePreludeData, Attribute};\n+use rls_data::{SpanData, CratePreludeData, Attribute, Signature};\n use rls_span::{Column, Row};\n \n // FIXME: this should be pub(crate), but the current snapshot doesn't allow it yet\n@@ -103,7 +103,7 @@ pub struct EnumData {\n     pub variants: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -121,7 +121,7 @@ impl Lower for data::EnumData {\n             variants: self.variants.into_iter().map(|id| make_def_id(id, &tcx.hir)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n-            sig: self.sig.lower(tcx),\n+            sig: self.sig,\n             attributes: self.attributes.lower(tcx),\n         }\n     }\n@@ -186,7 +186,7 @@ pub struct FunctionData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -205,7 +205,7 @@ impl Lower for data::FunctionData {\n             visibility: self.visibility,\n             parent: self.parent,\n             docs: self.docs,\n-            sig: self.sig.lower(tcx),\n+            sig: self.sig,\n             attributes: self.attributes.lower(tcx),\n         }\n     }\n@@ -355,7 +355,7 @@ pub struct MethodData {\n     pub visibility: Visibility,\n     pub parent: Option<DefId>,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -374,7 +374,7 @@ impl Lower for data::MethodData {\n             visibility: self.visibility,\n             parent: self.parent,\n             docs: self.docs,\n-            sig: self.sig.lower(tcx),\n+            sig: self.sig,\n             attributes: self.attributes.lower(tcx),\n         }\n     }\n@@ -410,7 +410,7 @@ impl Lower for data::ModData {\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.hir)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n-            sig: self.sig.map(|s| s.lower(tcx)),\n+            sig: self.sig,\n             attributes: self.attributes.lower(tcx),\n         }\n     }\n@@ -450,7 +450,7 @@ pub struct StructData {\n     pub fields: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -469,7 +469,7 @@ impl Lower for data::StructData {\n             fields: self.fields.into_iter().map(|id| make_def_id(id, &tcx.hir)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n-            sig: self.sig.lower(tcx),\n+            sig: self.sig,\n             attributes: self.attributes.lower(tcx),\n         }\n     }\n@@ -486,7 +486,7 @@ pub struct StructVariantData {\n     pub scope: DefId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -504,7 +504,7 @@ impl Lower for data::StructVariantData {\n             scope: make_def_id(self.scope, &tcx.hir),\n             parent: self.parent,\n             docs: self.docs,\n-            sig: self.sig.lower(tcx),\n+            sig: self.sig,\n             attributes: self.attributes.lower(tcx),\n         }\n     }\n@@ -521,7 +521,7 @@ pub struct TraitData {\n     pub items: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -539,7 +539,7 @@ impl Lower for data::TraitData {\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.hir)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n-            sig: self.sig.lower(tcx),\n+            sig: self.sig,\n             attributes: self.attributes.lower(tcx),\n         }\n     }\n@@ -556,7 +556,7 @@ pub struct TupleVariantData {\n     pub scope: DefId,\n     pub parent: Option<DefId>,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -574,7 +574,7 @@ impl Lower for data::TupleVariantData {\n             scope: make_def_id(self.scope, &tcx.hir),\n             parent: self.parent,\n             docs: self.docs,\n-            sig: self.sig.lower(tcx),\n+            sig: self.sig,\n             attributes: self.attributes.lower(tcx),\n         }\n     }\n@@ -608,7 +608,7 @@ impl Lower for data::TypeDefData {\n             visibility: self.visibility,\n             parent: self.parent,\n             docs: self.docs,\n-            sig: self.sig.map(|s| s.lower(tcx)),\n+            sig: self.sig,\n             attributes: self.attributes.lower(tcx),\n         }\n     }\n@@ -718,7 +718,7 @@ impl Lower for data::VariableData {\n             parent: self.parent,\n             visibility: self.visibility,\n             docs: self.docs,\n-            sig: self.sig.map(|s| s.lower(tcx)),\n+            sig: self.sig,\n             attributes: self.attributes.lower(tcx),\n         }\n     }\n@@ -746,30 +746,3 @@ impl Lower for data::VariableRefData {\n         }\n     }\n }\n-\n-#[derive(Clone, Debug)]\n-pub struct Signature {\n-    pub span: SpanData,\n-    pub text: String,\n-    // These identify the main identifier for the defintion as byte offsets into\n-    // `text`. E.g., of `foo` in `pub fn foo(...)`\n-    pub ident_start: usize,\n-    pub ident_end: usize,\n-    pub defs: Vec<SigElement>,\n-    pub refs: Vec<SigElement>,\n-}\n-\n-impl Lower for data::Signature {\n-    type Target = Signature;\n-\n-    fn lower(self, tcx: TyCtxt) -> Signature {\n-        Signature {\n-            span: span_from_span(self.span, tcx.sess.codemap()),\n-            text: self.text,\n-            ident_start: self.ident_start,\n-            ident_end: self.ident_end,\n-            defs: self.defs,\n-            refs: self.refs,\n-        }\n-    }\n-}"}, {"sha": "1f65efbf9dcd077417f35f28b4806c58a0f5a533", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "patch": "@@ -133,7 +133,7 @@ impl Into<Option<Def>> for EnumData {\n                 children: self.variants.into_iter().map(|id| id_from_def_id(id)).collect(),\n                 decl_id: None,\n                 docs: self.docs,\n-                sig: Some(self.sig.into()),\n+                sig: self.sig,\n                 attributes: vec![],\n             }),\n             _ => None,\n@@ -154,7 +154,7 @@ impl Into<Option<Def>> for TupleVariantData {\n             children: vec![],\n             decl_id: None,\n             docs: self.docs,\n-            sig: Some(self.sig.into()),\n+            sig: self.sig,\n             attributes: vec![],\n         })\n     }\n@@ -172,7 +172,7 @@ impl Into<Option<Def>> for StructVariantData {\n             children: vec![],\n             decl_id: None,\n             docs: self.docs,\n-            sig: Some(self.sig.into()),\n+            sig: self.sig,\n             attributes: vec![],\n         })\n     }\n@@ -191,7 +191,7 @@ impl Into<Option<Def>> for StructData {\n             children: self.fields.into_iter().map(|id| id_from_def_id(id)).collect(),\n             decl_id: None,\n             docs: self.docs,\n-            sig: Some(self.sig.into()),\n+            sig: self.sig,\n             attributes: vec![],\n         }),\n             _ => None,\n@@ -212,7 +212,7 @@ impl Into<Option<Def>> for TraitData {\n                 parent: None,\n                 decl_id: None,\n                 docs: self.docs,\n-                sig: Some(self.sig.into()),\n+                sig: self.sig,\n                 attributes: vec![],\n             }),\n             _ => None,\n@@ -233,7 +233,7 @@ impl Into<Option<Def>> for FunctionData {\n                 parent: self.parent.map(|id| id_from_def_id(id)),\n                 decl_id: None,\n                 docs: self.docs,\n-                sig: Some(self.sig.into()),\n+                sig: self.sig,\n                 attributes: vec![],\n             }),\n             _ => None,\n@@ -254,7 +254,7 @@ impl Into<Option<Def>> for MethodData {\n                 parent: self.parent.map(|id| id_from_def_id(id)),\n                 decl_id: self.decl_id.map(|id| id_from_def_id(id)),\n                 docs: self.docs,\n-                sig: Some(self.sig.into()),\n+                sig: self.sig,\n                 attributes: vec![],\n             }),\n             _ => None,"}, {"sha": "2832eb505eca41ec178e267b83a4cf058ac54024", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 11, "deletions": 32, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "patch": "@@ -14,12 +14,11 @@ use rustc::hir::def_id::DefId;\n use rustc_serialize::json::as_json;\n \n use rls_data::{self, Id, Analysis, Import, ImportKind, Def, DefKind, Ref, RefKind, MacroRef,\n-               Relation, RelationKind, Signature, SigElement, CratePreludeData};\n+               Relation, RelationKind, CratePreludeData};\n use rls_span::{Column, Row};\n \n-use external_data;\n use external_data::*;\n-use data::{self, VariableKind};\n+use data::VariableKind;\n use dump::Dump;\n \n pub struct JsonDumper<O: DumpOutput> {\n@@ -121,7 +120,7 @@ impl<'b, O: DumpOutput + 'b> Dump for JsonDumper<O> {\n             children: data.items.into_iter().map(|id| id_from_def_id(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n-            sig: data.sig.map(|s| s.into()),\n+            sig: data.sig,\n             attributes: data.attributes.into_iter().map(|a| a.into()).collect(),\n         };\n         if def.span.file_name.to_str().unwrap() != def.value {\n@@ -220,7 +219,7 @@ impl Into<Def> for EnumData {\n             children: self.variants.into_iter().map(|id| id_from_def_id(id)).collect(),\n             decl_id: None,\n             docs: self.docs,\n-            sig: Some(self.sig.into()),\n+            sig: self.sig,\n             attributes: self.attributes,\n         }\n     }\n@@ -239,7 +238,7 @@ impl Into<Def> for TupleVariantData {\n             children: vec![],\n             decl_id: None,\n             docs: self.docs,\n-            sig: Some(self.sig.into()),\n+            sig: self.sig,\n             attributes: self.attributes,\n         }\n     }\n@@ -257,7 +256,7 @@ impl Into<Def> for StructVariantData {\n             children: vec![],\n             decl_id: None,\n             docs: self.docs,\n-            sig: Some(self.sig.into()),\n+            sig: self.sig,\n             attributes: self.attributes,\n         }\n     }\n@@ -275,7 +274,7 @@ impl Into<Def> for StructData {\n             children: self.fields.into_iter().map(|id| id_from_def_id(id)).collect(),\n             decl_id: None,\n             docs: self.docs,\n-            sig: Some(self.sig.into()),\n+            sig: self.sig,\n             attributes: self.attributes,\n         }\n     }\n@@ -293,7 +292,7 @@ impl Into<Def> for TraitData {\n             children: self.items.into_iter().map(|id| id_from_def_id(id)).collect(),\n             decl_id: None,\n             docs: self.docs,\n-            sig: Some(self.sig.into()),\n+            sig: self.sig,\n             attributes: self.attributes,\n         }\n     }\n@@ -311,7 +310,7 @@ impl Into<Def> for FunctionData {\n             children: vec![],\n             decl_id: None,\n             docs: self.docs,\n-            sig: Some(self.sig.into()),\n+            sig: self.sig,\n             attributes: self.attributes,\n         }\n     }\n@@ -329,7 +328,7 @@ impl Into<Def> for MethodData {\n             children: vec![],\n             decl_id: self.decl_id.map(|id| id_from_def_id(id)),\n             docs: self.docs,\n-            sig: Some(self.sig.into()),\n+            sig: self.sig,\n             attributes: self.attributes,\n         }\n     }\n@@ -365,7 +364,7 @@ impl Into<Def> for TypeDefData {\n             children: vec![],\n             decl_id: None,\n             docs: String::new(),\n-            sig: self.sig.map(|s| s.into()),\n+            sig: self.sig,\n             attributes: self.attributes,\n         }\n     }\n@@ -480,23 +479,3 @@ impl Into<Relation> for InheritanceData {\n         }\n     }\n }\n-\n-impl Into<Signature> for external_data::Signature {\n-    fn into(self) -> Signature {\n-        Signature {\n-            text: self.text,\n-            defs: self.defs.into_iter().map(|s| s.into()).collect(),\n-            refs: self.refs.into_iter().map(|s| s.into()).collect(),\n-        }\n-    }\n-}\n-\n-impl Into<SigElement> for data::SigElement {\n-    fn into(self) -> SigElement {\n-        SigElement {\n-            id: id_from_def_id(self.id),\n-            start: self.start,\n-            end: self.end,\n-        }\n-    }\n-}"}, {"sha": "06309a4f79e75f2e2b675f55fd1ef4f4c05e7551", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 14, "deletions": 65, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "patch": "@@ -141,7 +141,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     parent: None,\n                     docs: docs_for_attrs(&item.attrs),\n-                    sig: self.sig_base_extern(item),\n+                    // TODO\n+                    sig: None,\n                     attributes: item.attrs.clone(),\n                 }))\n             }\n@@ -161,7 +162,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     type_value: ty_to_string(ty),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n-                    sig: Some(self.sig_base_extern(item)),\n+                    // TODO\n+                    sig: None,\n                     attributes: item.attrs.clone(),\n                 }))\n             }\n@@ -187,7 +189,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     parent: None,\n                     docs: docs_for_attrs(&item.attrs),\n-                    sig: self.sig_base(item),\n+                    sig: sig::item_signature(item, self),\n                     attributes: item.attrs.clone(),\n                 }))\n             }\n@@ -216,7 +218,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n-                    sig: Some(self.sig_base(item)),\n+                    sig: sig::item_signature(item, self),\n                     attributes: item.attrs.clone(),\n                 }))\n             }\n@@ -236,7 +238,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n-                    sig: Some(self.sig_base(item)),\n+                    sig: sig::item_signature(item, self),\n                     attributes: item.attrs.clone(),\n                 }))\n             }\n@@ -259,7 +261,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     items: m.items.iter().map(|i| i.id).collect(),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n-                    sig: Some(self.sig_base(item)),\n+                    sig: sig::item_signature(item, self),\n                     attributes: item.attrs.clone(),\n                 }))\n             }\n@@ -283,7 +285,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     variants: def.variants.iter().map(|v| v.node.data.id()).collect(),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n-                    sig: self.sig_base(item),\n+                    sig: sig::item_signature(item, self),\n                     attributes: item.attrs.clone(),\n                 }))\n             }\n@@ -347,18 +349,6 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             let def_id = self.tcx.hir.local_def_id(field.id);\n             let typ = self.tcx.type_of(def_id).to_string();\n \n-            let span = field.span;\n-            let text = self.span_utils.snippet(field.span);\n-            let ident_start = text.find(&name).unwrap();\n-            let ident_end = ident_start + name.len();\n-            let sig = Signature {\n-                span: span,\n-                text: text,\n-                ident_start: ident_start,\n-                ident_end: ident_end,\n-                defs: vec![],\n-                refs: vec![],\n-            };\n             Some(VariableData {\n                 id: field.id,\n                 kind: VariableKind::Field,\n@@ -371,7 +361,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 type_value: typ,\n                 visibility: From::from(&field.vis),\n                 docs: docs_for_attrs(&field.attrs),\n-                sig: Some(sig),\n+                // TODO\n+                sig: None,\n                 attributes: field.attrs.clone(),\n             })\n         } else {\n@@ -460,22 +451,9 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         let sub_span = self.span_utils.sub_span_after_keyword(span, keywords::Fn);\n         filter!(self.span_utils, sub_span, span, None);\n \n-        let name = name.to_string();\n-        let text = self.span_utils.signature_string_for_span(span);\n-        let ident_start = text.find(&name).unwrap();\n-        let ident_end = ident_start + name.len();\n-        let sig = Signature {\n-            span: span,\n-            text: text,\n-            ident_start: ident_start,\n-            ident_end: ident_end,\n-            defs: vec![],\n-            refs: vec![],\n-        };\n-\n         Some(FunctionData {\n             id: id,\n-            name: name,\n+            name: name.to_string(),\n             qualname: qualname,\n             declaration: decl_id,\n             span: sub_span.unwrap(),\n@@ -485,7 +463,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             visibility: vis,\n             parent: parent_scope,\n             docs: docs,\n-            sig: sig,\n+            // TODO\n+            sig: None,\n             attributes: attributes,\n         })\n     }\n@@ -787,36 +766,6 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n-    fn sig_base(&self, item: &ast::Item) -> Signature {\n-        let text = self.span_utils.signature_string_for_span(item.span);\n-        let name = item.ident.to_string();\n-        let ident_start = text.find(&name).expect(\"Name not in signature?\");\n-        let ident_end = ident_start + name.len();\n-        Signature {\n-            span: Span { hi: item.span.lo + BytePos(text.len() as u32), ..item.span },\n-            text: text,\n-            ident_start: ident_start,\n-            ident_end: ident_end,\n-            defs: vec![],\n-            refs: vec![],\n-        }\n-    }\n-\n-    fn sig_base_extern(&self, item: &ast::ForeignItem) -> Signature {\n-        let text = self.span_utils.signature_string_for_span(item.span);\n-        let name = item.ident.to_string();\n-        let ident_start = text.find(&name).expect(\"Name not in signature?\");\n-        let ident_end = ident_start + name.len();\n-        Signature {\n-            span: Span { hi: item.span.lo + BytePos(text.len() as u32), ..item.span },\n-            text: text,\n-            ident_start: ident_start,\n-            ident_end: ident_end,\n-            defs: vec![],\n-            refs: vec![],\n-        }\n-    }\n-\n     #[inline]\n     pub fn enclosing_scope(&self, id: NodeId) -> NodeId {\n         self.tcx.hir.get_enclosing_scope(id).unwrap_or(CRATE_NODE_ID)"}, {"sha": "0dd0112a1b69230a1d03afeb44a02b66f027272e", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a999f0356d037d09b7cd1d3b5b3011d6b810db/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=a2a999f0356d037d09b7cd1d3b5b3011d6b810db", "patch": "@@ -22,6 +22,10 @@ use syntax::ast::{self, NodeId};\n use syntax::print::pprust;\n \n \n+pub fn item_signature(item: &ast::Item, scx: &SaveContext) -> Option<Signature> {\n+    item.make(0, None, scx).ok()\n+}\n+\n // TODO dup from json_dumper\n fn id_from_def_id(id: DefId) -> Id {\n     Id {\n@@ -246,8 +250,8 @@ impl Sig for ast::Item {\n             let name = self.ident.to_string();\n             let def = SigElement {\n                 id: id_from_node_id(self.id, scx),\n-                start: offset + 5,\n-                end: offset + 5 + name.len(),\n+                start: offset + text.len(),\n+                end: offset + text.len() + name.len(),\n             };\n             text.push_str(&name);\n             let generics: Signature = generics.make(offset + text.len(), id, scx)?;\n@@ -336,7 +340,6 @@ impl Sig for ast::Item {\n                     sig.text.push_str(\" -> \");\n                     let nested = t.make(offset + sig.text.len(), None, scx)?;\n                     sig.text.push_str(&nested.text);\n-                    sig.text.push(',');\n                     sig.defs.extend(nested.defs.into_iter());\n                     sig.refs.extend(nested.refs.into_iter());\n                 }\n@@ -473,10 +476,23 @@ impl Sig for ast::Item {\n \n impl Sig for ast::Path {\n     fn make(&self, offset: usize, id: Option<NodeId>, scx: &SaveContext) -> Result {\n+        // if generated_code(span) {\n+        //     return Err(\"Generated code\");\n+        // }\n+\n         let def = scx.get_path_def(id.ok_or(\"Missing id for Path\")?);\n-        let id = id_from_def_id(def.def_id());\n \n         let (name, start, end) = match def {\n+            Def::Label(..)  |\n+            Def::PrimTy(..) |\n+            Def::SelfTy(..) |\n+            Def::Err => {\n+                return Ok(Signature {\n+                    text: pprust::path_to_string(self),\n+                    defs: vec![],\n+                    refs: vec![],\n+                })\n+            }\n             Def::AssociatedConst(..) |\n             Def::Variant(..) |\n             Def::VariantCtor(..) => {\n@@ -499,6 +515,7 @@ impl Sig for ast::Path {\n             }\n         };\n \n+        let id = id_from_def_id(def.def_id());\n         Ok(Signature {\n             text: name,\n             defs: vec![],\n@@ -557,4 +574,4 @@ impl Sig for ast::Generics {\n     }\n }\n \n-// TODO impl items, trait items\n+// TODO impl items, trait items, fields, extern items, enum variant"}]}