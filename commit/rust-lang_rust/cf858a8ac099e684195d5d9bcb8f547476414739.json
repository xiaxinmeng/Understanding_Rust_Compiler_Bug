{"sha": "cf858a8ac099e684195d5d9bcb8f547476414739", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmODU4YThhYzA5OWU2ODQxOTVkNWQ5YmNiOGY1NDc0NzY0MTQ3Mzk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-27T09:51:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-13T12:35:14Z"}, "message": "Remove is_const_integral method from ConstMethods", "tree": {"sha": "16fd2ff5846730b46cedbbd29903f30b7430d367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16fd2ff5846730b46cedbbd29903f30b7430d367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf858a8ac099e684195d5d9bcb8f547476414739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf858a8ac099e684195d5d9bcb8f547476414739", "html_url": "https://github.com/rust-lang/rust/commit/cf858a8ac099e684195d5d9bcb8f547476414739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf858a8ac099e684195d5d9bcb8f547476414739/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d1a5ade9b8bf83c410250521f489e074fa1f929", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1a5ade9b8bf83c410250521f489e074fa1f929", "html_url": "https://github.com/rust-lang/rust/commit/4d1a5ade9b8bf83c410250521f489e074fa1f929"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "cc2f1b6776e457b002a489c0e9751206a0aa493d", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cf858a8ac099e684195d5d9bcb8f547476414739/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf858a8ac099e684195d5d9bcb8f547476414739/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=cf858a8ac099e684195d5d9bcb8f547476414739", "patch": "@@ -245,21 +245,19 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         struct_in_context(self.llcx, elts, packed)\n     }\n \n-    fn const_to_uint(&self, v: &'ll Value) -> u64 {\n-        unsafe {\n-            llvm::LLVMConstIntGetZExtValue(v)\n-        }\n-    }\n-\n-    fn is_const_integral(&self, v: &'ll Value) -> bool {\n-        unsafe {\n-            llvm::LLVMIsAConstantInt(v).is_some()\n+    fn const_to_opt_uint(&self, v: &'ll Value) -> Option<u64> {\n+        if is_const_integral(v) {\n+            unsafe {\n+                Some(llvm::LLVMConstIntGetZExtValue(v))\n+            }\n+        } else {\n+            None\n         }\n     }\n \n     fn const_to_opt_u128(&self, v: &'ll Value, sign_ext: bool) -> Option<u128> {\n         unsafe {\n-            if self.is_const_integral(v) {\n+            if is_const_integral(v) {\n                 let (mut lo, mut hi) = (0u64, 0u64);\n                 let success = llvm::LLVMRustConstInt128Get(v, sign_ext,\n                                                            &mut hi, &mut lo);\n@@ -388,3 +386,9 @@ pub fn struct_in_context(\n fn hi_lo_to_u128(lo: u64, hi: u64) -> u128 {\n     ((hi as u128) << 64) | (lo as u128)\n }\n+\n+fn is_const_integral(v: &'ll Value) -> bool {\n+    unsafe {\n+        llvm::LLVMIsAConstantInt(v).is_some()\n+    }\n+}"}, {"sha": "1d1bc2a81a2ca7459205a34391f665b92ec35a4e", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf858a8ac099e684195d5d9bcb8f547476414739/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf858a8ac099e684195d5d9bcb8f547476414739/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=cf858a8ac099e684195d5d9bcb8f547476414739", "patch": "@@ -394,8 +394,8 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         // Statically compute the offset if we can, otherwise just use the element size,\n         // as this will yield the lowest alignment.\n         let layout = self.layout.field(bx, 0);\n-        let offset = if bx.is_const_integral(llindex) {\n-            layout.size.checked_mul(bx.const_to_uint(llindex), bx).unwrap_or(layout.size)\n+        let offset = if let Some(llindex) = bx.const_to_opt_uint(llindex) {\n+            layout.size.checked_mul(llindex, bx).unwrap_or(layout.size)\n         } else {\n             layout.size\n         };"}, {"sha": "3e88c7379daf8e57182efb64873c2a31fb539d48", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf858a8ac099e684195d5d9bcb8f547476414739/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf858a8ac099e684195d5d9bcb8f547476414739/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=cf858a8ac099e684195d5d9bcb8f547476414739", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let size = bx.const_usize(dest.layout.size.bytes());\n \n                     // Use llvm.memset.p0i8.* to initialize all zero arrays\n-                    if bx.cx().is_const_integral(v) && bx.cx().const_to_uint(v) == 0 {\n+                    if bx.cx().const_to_opt_uint(v) == Some(0) {\n                         let fill = bx.cx().const_u8(0);\n                         bx.memset(start, fill, size, dest.align, MemFlags::empty());\n                         return bx;"}, {"sha": "95ada60fae08dd74ffc6f926967232489a27e50d", "filename": "src/librustc_codegen_ssa/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf858a8ac099e684195d5d9bcb8f547476414739/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf858a8ac099e684195d5d9bcb8f547476414739/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs?ref=cf858a8ac099e684195d5d9bcb8f547476414739", "patch": "@@ -21,11 +21,9 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n \n     fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n \n-    fn const_to_uint(&self, v: Self::Value) -> u64;\n+    fn const_to_opt_uint(&self, v: Self::Value) -> Option<u64>;\n     fn const_to_opt_u128(&self, v: Self::Value, sign_ext: bool) -> Option<u128>;\n \n-    fn is_const_integral(&self, v: Self::Value) -> bool;\n-\n     fn scalar_to_backend(\n         &self,\n         cv: Scalar,"}]}