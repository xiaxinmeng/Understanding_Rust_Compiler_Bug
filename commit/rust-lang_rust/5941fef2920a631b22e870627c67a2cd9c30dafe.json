{"sha": "5941fef2920a631b22e870627c67a2cd9c30dafe", "node_id": "C_kwDOAAsO6NoAKDU5NDFmZWYyOTIwYTYzMWIyMmU4NzA2MjdjNjdhMmNkOWMzMGRhZmU", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-02-22T01:39:36Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-02-22T01:39:36Z"}, "message": "Constify slice indexing", "tree": {"sha": "df57813ffacba5555eb44c27d4dd9e81afe1486b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df57813ffacba5555eb44c27d4dd9e81afe1486b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5941fef2920a631b22e870627c67a2cd9c30dafe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmIUPtgACgkQbQF6ltjm\nwvlv4BAAvN9tyNouuINGzPULpdQVIl0XMOTwUUmgn7NMZkNK/rnzWtVWCvAu9AfP\npeBKi5kYS8GKHdCPwy+LRtUEqkrwombokNjOSQzDEnsPhuwcL+IxUDMpwlmCpnXR\nnS7tyNNZ5q0SFkovzno6r4nJAPQTN+4Q2+1PQQwQnsBw80mHQW0uvrL7d9XPaLpf\nrHcOfi+ZB59eMVvN5gfKsIR6fs1jV2qGC/KfrMKGMerD54XkpecRHAHnrw/JFBRB\n2frpUBxc4ZhpAWWQ9Esj4Pg3ya89cey11Xq4+n6EMg1g+xD7/rsbSi/a03JcS+Kz\ntpLSfVTlL4K5tSq+RJsZVFjS9ipBBot0s3Gj0CB63KFTiwRzO9o6ge0LvuuzMvMD\nfA2GT8WF0Ru5iPrt8eFThRB7e/zI+d0vDzf0YOoIWssFwSDHPQnRDwnC05NK1tXC\nmvKjGa94DjRl1NkMWQmcdsl0joHMrU3afQYoFUmqqsQnaOyOLdVV3FxZH9LOkJwS\nCPZr92DZQFg/mR7asFmVU4sjDJlhXN3rTve6wEANBzdG6m08FQtpd2V/sAUOEm2u\ndbjSB7OblbAiwEJNyxBCmWoVetKJmSzmsYsyzUK6lRPOzt4swC5wghRPQgHtGyhX\nhqo5n86lQ23z4w8car1QsIzkOpL07raNxtdGEEaV2CLLgQYnos8=\n=zySr\n-----END PGP SIGNATURE-----", "payload": "tree df57813ffacba5555eb44c27d4dd9e81afe1486b\nparent 03a8cc7df1d65554a4d40825b0490c93ac0f0236\nauthor Deadbeef <ent3rm4n@gmail.com> 1645493976 +1100\ncommitter Deadbeef <ent3rm4n@gmail.com> 1645493976 +1100\n\nConstify slice indexing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5941fef2920a631b22e870627c67a2cd9c30dafe", "html_url": "https://github.com/rust-lang/rust/commit/5941fef2920a631b22e870627c67a2cd9c30dafe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5941fef2920a631b22e870627c67a2cd9c30dafe/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03a8cc7df1d65554a4d40825b0490c93ac0f0236", "url": "https://api.github.com/repos/rust-lang/rust/commits/03a8cc7df1d65554a4d40825b0490c93ac0f0236", "html_url": "https://github.com/rust-lang/rust/commit/03a8cc7df1d65554a4d40825b0490c93ac0f0236"}], "stats": {"total": 83, "additions": 66, "deletions": 17}, "files": [{"sha": "bad3fb0765c7bb84efafbaff576c6c16d1712979", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5941fef2920a631b22e870627c67a2cd9c30dafe/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5941fef2920a631b22e870627c67a2cd9c30dafe/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=5941fef2920a631b22e870627c67a2cd9c30dafe", "patch": "@@ -148,6 +148,7 @@\n #![feature(variant_count)]\n #![feature(const_array_from_ref)]\n #![feature(const_slice_from_ref)]\n+#![feature(const_slice_index_impls)]\n //\n // Language features:\n #![feature(abi_unadjusted)]"}, {"sha": "5029e0560b8929b187d5e744e0a35ec6e1e61bcd", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5941fef2920a631b22e870627c67a2cd9c30dafe/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5941fef2920a631b22e870627c67a2cd9c30dafe/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=5941fef2920a631b22e870627c67a2cd9c30dafe", "patch": "@@ -446,7 +446,7 @@ impl RangeInclusive<usize> {\n     /// Converts to an exclusive `Range` for `SliceIndex` implementations.\n     /// The caller is responsible for dealing with `end == usize::MAX`.\n     #[inline]\n-    pub(crate) fn into_slice_range(self) -> Range<usize> {\n+    pub(crate) const fn into_slice_range(self) -> Range<usize> {\n         // If we're not exhausted, we want to simply slice `start..end + 1`.\n         // If we are exhausted, then slicing with `end + 1..end + 1` gives us an\n         // empty range that is still subject to bounds-checks for that endpoint."}, {"sha": "3931c123352cebf32427e190aae34faf4c0777c4", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 64, "deletions": 16, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/5941fef2920a631b22e870627c67a2cd9c30dafe/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5941fef2920a631b22e870627c67a2cd9c30dafe/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=5941fef2920a631b22e870627c67a2cd9c30dafe", "patch": "@@ -1,12 +1,14 @@\n //! Indexing implementations for `[T]`.\n \n+use crate::intrinsics::const_eval_select;\n use crate::ops;\n use crate::ptr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, I> ops::Index<I> for [T]\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+impl<T, I> const ops::Index<I> for [T]\n where\n-    I: SliceIndex<[T]>,\n+    I: ~const SliceIndex<[T]>,\n {\n     type Output = I::Output;\n \n@@ -17,53 +19,92 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, I> ops::IndexMut<I> for [T]\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+impl<T, I> const ops::IndexMut<I> for [T]\n where\n-    I: SliceIndex<[T]>,\n+    I: ~const SliceIndex<[T]>,\n {\n     #[inline]\n     fn index_mut(&mut self, index: I) -> &mut I::Output {\n         index.index_mut(self)\n     }\n }\n \n+\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+const fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n+    // SAFETY: we are just panicking here\n+    unsafe {\n+        const_eval_select((index, len), slice_start_index_len_fail_ct, slice_start_index_len_fail_rt)\n+    }\n+}\n+\n+// FIXME const-hack\n+fn slice_start_index_len_fail_rt(index: usize, len: usize) -> ! {\n     panic!(\"range start index {} out of range for slice of length {}\", index, len);\n }\n \n+const fn slice_start_index_len_fail_ct(_: usize, _: usize) -> ! {\n+    panic!(\"slice start index is out of range for slice\");\n+}\n+\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+const fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n+    // SAFETY: we are just panicking here\n+    unsafe {\n+        const_eval_select((index, len), slice_end_index_len_fail_ct, slice_end_index_len_fail_rt)\n+    }\n+}\n+\n+// FIXME const-hack\n+fn slice_end_index_len_fail_rt(index: usize, len: usize) -> ! {\n     panic!(\"range end index {} out of range for slice of length {}\", index, len);\n }\n \n+const fn slice_end_index_len_fail_ct(_: usize, _: usize) -> ! {\n+    panic!(\"slice end index is out of range for slice\");\n+}\n+\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_index_order_fail(index: usize, end: usize) -> ! {\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+const fn slice_index_order_fail(index: usize, end: usize) -> ! {\n+    // SAFETY: we are just panicking here\n+    unsafe { const_eval_select((index, end), slice_index_order_fail_ct, slice_index_order_fail_rt) }\n+}\n+\n+// FIXME const-hack\n+fn slice_index_order_fail_rt(index: usize, end: usize) -> ! {\n     panic!(\"slice index starts at {} but ends at {}\", index, end);\n }\n \n+const fn slice_index_order_fail_ct(_: usize, _: usize) -> ! {\n+    panic!(\"slice index start is larger than end\");\n+}\n+\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_start_index_overflow_fail() -> ! {\n+const fn slice_start_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice from after maximum usize\");\n }\n \n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_end_index_overflow_fail() -> ! {\n+const fn slice_end_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice up to maximum usize\");\n }\n \n@@ -153,7 +194,8 @@ pub unsafe trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for usize {\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for usize {\n     type Output = T;\n \n     #[inline]\n@@ -197,7 +239,8 @@ unsafe impl<T> SliceIndex<[T]> for usize {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::Range<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -261,7 +304,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeTo<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeTo<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -298,7 +342,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeTo<usize> {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeFrom<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -343,7 +388,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeFull {\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeFull {\n     type Output = [T];\n \n     #[inline]\n@@ -378,7 +424,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeFull {\n }\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeInclusive<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -421,7 +468,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n }\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index_impls\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n     type Output = [T];\n \n     #[inline]"}]}