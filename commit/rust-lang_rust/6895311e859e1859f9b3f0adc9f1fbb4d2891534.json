{"sha": "6895311e859e1859f9b3f0adc9f1fbb4d2891534", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OTUzMTFlODU5ZTE4NTlmOWIzZjBhZGM5ZjFmYmI0ZDI4OTE1MzQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-10T01:15:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-17T16:06:59Z"}, "message": "std: Split the `std_misc` feature", "tree": {"sha": "abefb3b1f9caa3a3d60f86439b4e6550a54f7692", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abefb3b1f9caa3a3d60f86439b4e6550a54f7692"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6895311e859e1859f9b3f0adc9f1fbb4d2891534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6895311e859e1859f9b3f0adc9f1fbb4d2891534", "html_url": "https://github.com/rust-lang/rust/commit/6895311e859e1859f9b3f0adc9f1fbb4d2891534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6895311e859e1859f9b3f0adc9f1fbb4d2891534/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d444d0c357e85c90e73585520e2da74304c7265a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d444d0c357e85c90e73585520e2da74304c7265a", "html_url": "https://github.com/rust-lang/rust/commit/d444d0c357e85c90e73585520e2da74304c7265a"}], "stats": {"total": 209, "additions": 92, "deletions": 117}, "files": [{"sha": "95a6fe14ef60c12168d79bab8fc68de65fa3c958", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -1151,7 +1151,7 @@ impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n }\n \n impl<'a, K: Ord, V> Entry<'a, K, V> {\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"entry\",\n                reason = \"will soon be replaced by or_insert\")]\n     #[deprecated(since = \"1.0\",\n                 reason = \"replaced with more ergonomic `or_insert` and `or_insert_with`\")]"}, {"sha": "246b59098658ad563cabf7baf040b19794072d99", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -173,8 +173,10 @@\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(iter_cmp)]\n+#![feature(once_new)]\n+#![feature(rt)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n+#![feature(static_mutex)]\n \n use std::boxed;\n use std::cell::RefCell;"}, {"sha": "b557b0f5649417eb555d07c72ceb96170ecae4b9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -34,9 +34,11 @@\n #![feature(const_fn)]\n #![feature(duration)]\n #![feature(duration_span)]\n+#![feature(dynamic_lib)]\n #![feature(enumset)]\n #![feature(fs_canonicalize)]\n #![feature(hash_default)]\n+#![feature(hashmap_hasher)]\n #![feature(into_cow)]\n #![feature(iter_sum)]\n #![feature(libc)]\n@@ -53,7 +55,6 @@\n #![feature(slice_patterns)]\n #![feature(slice_position_elem)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n #![feature(str_char)]\n #![feature(str_matches)]\n #![feature(vec_push_all)]"}, {"sha": "978fa4e745b9944e22f224a5d7a6e456de9a0546", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -33,6 +33,7 @@\n #![feature(iter_sum)]\n #![feature(iter_unfold)]\n #![feature(libc)]\n+#![feature(once_new)]\n #![feature(path_ext)]\n #![feature(path_ext)]\n #![feature(path_relative_from)]\n@@ -42,7 +43,6 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n #![feature(unicode)]\n #![feature(unicode)]\n #![feature(vec_push_all)]"}, {"sha": "5951e4f823e7cf5dec8b95b41919cccf4db1db4e", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -29,15 +29,15 @@ Core encoding and decoding interfaces.\n \n #![feature(box_syntax)]\n #![feature(collections)]\n+#![feature(enumset)]\n+#![feature(hashmap_hasher)]\n #![feature(num_bits_bytes)]\n #![feature(num_wrapping)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n #![feature(str_char)]\n #![feature(unicode)]\n #![feature(vecmap)]\n-#![feature(enumset)]\n #![cfg_attr(test, feature(test))]\n \n // test harness access"}, {"sha": "9b94b7f7003ed62f521e37eae944b7848cf61f66", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -18,7 +18,7 @@ use ops::Range;\n use mem;\n \n /// Extension methods for ASCII-subset only operations on owned strings\n-#[unstable(feature = \"std_misc\",\n+#[unstable(feature = \"owned_ascii_ext\",\n            reason = \"would prefer to do this in a more general way\")]\n pub trait OwnedAsciiExt {\n     /// Converts the string to ASCII upper case:\n@@ -189,8 +189,6 @@ impl AsciiExt for str {\n     }\n }\n \n-#[unstable(feature = \"std_misc\",\n-           reason = \"would prefer to do this in a more general way\")]\n impl OwnedAsciiExt for String {\n     #[inline]\n     fn into_ascii_uppercase(self) -> String {\n@@ -244,8 +242,6 @@ impl AsciiExt for [u8] {\n     }\n }\n \n-#[unstable(feature = \"std_misc\",\n-           reason = \"would prefer to do this in a more general way\")]\n impl OwnedAsciiExt for Vec<u8> {\n     #[inline]\n     fn into_ascii_uppercase(mut self) -> Vec<u8> {"}, {"sha": "1dca3b77f3880ed9497a3560cbfa223f9bbda264", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -43,8 +43,7 @@ use super::table::BucketState::{\n use super::state::HashState;\n \n const INITIAL_LOG2_CAP: usize = 5;\n-#[unstable(feature = \"std_misc\")]\n-pub const INITIAL_CAPACITY: usize = 1 << INITIAL_LOG2_CAP; // 2^5\n+const INITIAL_CAPACITY: usize = 1 << INITIAL_LOG2_CAP; // 2^5\n \n /// The default behavior of HashMap implements a load factor of 90.9%.\n /// This behavior is characterized by the following condition:\n@@ -544,7 +543,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(hashmap_hasher)]\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -553,7 +552,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// map.insert(1, 2);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"std_misc\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n     pub fn with_hash_state(hash_state: S) -> HashMap<K, V, S> {\n         HashMap {\n             hash_state:    hash_state,\n@@ -573,7 +572,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(hashmap_hasher)]\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -582,7 +581,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// map.insert(1, 2);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"std_misc\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n     pub fn with_capacity_and_hash_state(capacity: usize, hash_state: S)\n                                         -> HashMap<K, V, S> {\n         let resize_policy = DefaultResizePolicy::new();\n@@ -980,7 +979,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(drain)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut a = HashMap::new();\n@@ -995,7 +994,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// assert!(a.is_empty());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"drain\",\n                reason = \"matches collection reform specification, waiting for dust to settle\")]\n     pub fn drain(&mut self) -> Drain<K, V> {\n         fn last_two<A, B, C>((_, b, c): (A, B, C)) -> (B, C) { (b, c) }\n@@ -1308,7 +1307,7 @@ impl<'a, K, V> Clone for Values<'a, K, V> {\n }\n \n /// HashMap drain iterator.\n-#[unstable(feature = \"std_misc\",\n+#[unstable(feature = \"drain\",\n            reason = \"matches collection reform specification, waiting for dust to settle\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n     inner: iter::Map<table::Drain<'a, K, V>, fn((SafeHash, K, V)) -> (K, V)>\n@@ -1480,7 +1479,7 @@ impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n }\n \n impl<'a, K, V> Entry<'a, K, V> {\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"entry\",\n                reason = \"will soon be replaced by or_insert\")]\n     #[deprecated(since = \"1.0\",\n                 reason = \"replaced with more ergonomic `or_insert` and `or_insert_with`\")]\n@@ -1596,14 +1595,14 @@ impl<K, V, S> Extend<(K, V)> for HashMap<K, V, S>\n /// `Hasher`, but the hashers created by two different `RandomState`\n /// instances are unlikely to produce the same result for the same values.\n #[derive(Clone)]\n-#[unstable(feature = \"std_misc\",\n+#[unstable(feature = \"hashmap_hasher\",\n            reason = \"hashing an hash maps may be altered\")]\n pub struct RandomState {\n     k0: u64,\n     k1: u64,\n }\n \n-#[unstable(feature = \"std_misc\",\n+#[unstable(feature = \"hashmap_hasher\",\n            reason = \"hashing an hash maps may be altered\")]\n impl RandomState {\n     /// Constructs a new `RandomState` that is initialized with random keys.\n@@ -1615,7 +1614,7 @@ impl RandomState {\n     }\n }\n \n-#[unstable(feature = \"std_misc\",\n+#[unstable(feature = \"hashmap_hasher\",\n            reason = \"hashing an hash maps may be altered\")]\n impl HashState for RandomState {\n     type Hasher = SipHasher;"}, {"sha": "ba50b156ab230a3f52b001e30cde2dbaf33bcacb", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -20,9 +20,11 @@ use iter::{Iterator, IntoIterator, ExactSizeIterator, FromIterator, Map, Chain,\n use ops::{BitOr, BitAnd, BitXor, Sub};\n use option::Option::{Some, None, self};\n \n-use super::map::{self, HashMap, Keys, INITIAL_CAPACITY, RandomState};\n+use super::map::{self, HashMap, Keys, RandomState};\n use super::state::HashState;\n \n+const INITIAL_CAPACITY: usize = 32;\n+\n // Future Optimization (FIXME!)\n // =============================\n //\n@@ -152,7 +154,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(hashmap_hasher)]\n     /// use std::collections::HashSet;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -161,7 +163,7 @@ impl<T, S> HashSet<T, S>\n     /// set.insert(2);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"std_misc\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n     pub fn with_hash_state(hash_state: S) -> HashSet<T, S> {\n         HashSet::with_capacity_and_hash_state(INITIAL_CAPACITY, hash_state)\n     }\n@@ -177,7 +179,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(hashmap_hasher)]\n     /// use std::collections::HashSet;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -186,7 +188,7 @@ impl<T, S> HashSet<T, S>\n     /// set.insert(1);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"std_misc\", reason = \"hasher stuff is unclear\")]\n+    #[unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n     pub fn with_capacity_and_hash_state(capacity: usize, hash_state: S)\n                                         -> HashSet<T, S> {\n         HashSet {\n@@ -406,7 +408,7 @@ impl<T, S> HashSet<T, S>\n \n     /// Clears the set, returning all elements in an iterator.\n     #[inline]\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"drain\",\n                reason = \"matches collection reform specification, waiting for dust to settle\")]\n     pub fn drain(&mut self) -> Drain<T> {\n         fn first<A, B>((a, _): (A, B)) -> A { a }"}, {"sha": "365e6268b3b0de25e3d1c6d2c136dcf1baf60985", "filename": "src/libstd/collections/hash/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![unstable(feature = \"hashmap_hasher\", reason = \"hasher stuff is unclear\")]\n+\n use clone::Clone;\n use default::Default;\n use hash;\n@@ -25,7 +27,6 @@ use marker;\n /// algorithm can implement the `Default` trait and create hash maps with the\n /// `DefaultState` structure. This state is 0-sized and will simply delegate\n /// to `Default` when asked to create a hasher.\n-#[unstable(feature = \"std_misc\", reason = \"hasher stuff is unclear\")]\n pub trait HashState {\n     /// Type of the hasher that will be created.\n     type Hasher: hash::Hasher;\n@@ -38,7 +39,6 @@ pub trait HashState {\n /// default trait.\n ///\n /// This struct has is 0-sized and does not need construction.\n-#[unstable(feature = \"std_misc\", reason = \"hasher stuff is unclear\")]\n pub struct DefaultState<H>(marker::PhantomData<H>);\n \n impl<H: Default + hash::Hasher> HashState for DefaultState<H> {"}, {"sha": "3f0b223b9977adffc430491e3fd6acfab5dc3c07", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -410,7 +410,7 @@ pub mod hash_set {\n \n /// Experimental support for providing custom hash algorithms to a HashMap and\n /// HashSet.\n-#[unstable(feature = \"std_misc\", reason = \"module was recently added\")]\n+#[unstable(feature = \"hashmap_hasher\", reason = \"module was recently added\")]\n pub mod hash_state {\n     pub use super::hash::state::*;\n }"}, {"sha": "ddafe416305e11efc7fa44527c25cc7dcabb5961", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -12,7 +12,9 @@\n //!\n //! A simple wrapper over the platform's dynamic library facilities\n \n-#![unstable(feature = \"std_misc\")]\n+#![unstable(feature = \"dynamic_lib\",\n+            reason = \"API has not been scrutinized and is highly likely to \\\n+                      either disappear or change\")]\n #![allow(missing_docs)]\n \n use prelude::v1::*;"}, {"sha": "d5df9b3aa72b238094ec83093bb8cf7e7c1068ad", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"std_misc\")]\n \n use borrow::{Cow, ToOwned};\n use boxed::{self, Box};"}, {"sha": "b43ac0daf5127d800736df7f89d61839fff55dd5", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -123,7 +123,7 @@ pub enum ErrorKind {\n     Other,\n \n     /// Any I/O error not part of this list.\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"io_error_internals\",\n                reason = \"better expressed through extensible enums that this \\\n                          enum cannot be exhaustively matched against\")]\n     #[doc(hidden)]"}, {"sha": "fb510ed678271b5b9c13d458938ef54ea402b948", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -150,7 +150,7 @@\n #![feature(wrapping)]\n #![feature(zero_one)]\n #![cfg_attr(test, feature(float_from_str_radix))]\n-#![cfg_attr(test, feature(test, rustc_private, std_misc))]\n+#![cfg_attr(test, feature(test, rustc_private))]\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "749974c7afab0f30c039a719809b6e806b18f65e", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -14,8 +14,6 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n-#![unstable(feature = \"std_misc\")]\n-\n /// The entry point for panic of Rust threads.\n ///\n /// This macro is used to inject panic into a Rust thread, causing the thread to\n@@ -165,7 +163,7 @@ macro_rules! try {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(std_misc)]\n+/// # #![feature(mpsc_select)]\n /// use std::thread;\n /// use std::sync::mpsc;\n ///\n@@ -191,7 +189,7 @@ macro_rules! try {\n ///\n /// For more information about select, see the `std::sync::mpsc::Select` structure.\n #[macro_export]\n-#[unstable(feature = \"std_misc\")]\n+#[unstable(feature = \"mpsc_select\")]\n macro_rules! select {\n     (\n         $($name:pat = $rx:ident.$meth:ident() => $code:expr),+"}, {"sha": "0c40f6c1fc8a8fb73a39b6ac769b66ecf1d2d103", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -194,7 +194,7 @@ impl f32 {\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(float_extras)]\n     /// use std::f32;\n     ///\n     /// let num = 2.0f32;\n@@ -211,9 +211,11 @@ impl f32 {\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n     /// [floating-point]: ../../../../../reference.html#machine-types\n-    #[unstable(feature = \"std_misc\", reason = \"signature is undecided\")]\n+    #[unstable(feature = \"float_extras\", reason = \"signature is undecided\")]\n     #[inline]\n-    pub fn integer_decode(self) -> (u64, i16, i8) { num::Float::integer_decode(self) }\n+    pub fn integer_decode(self) -> (u64, i16, i8) {\n+        num::Float::integer_decode(self)\n+    }\n \n     /// Returns the largest integer less than or equal to a number.\n     ///\n@@ -555,7 +557,7 @@ impl f32 {\n     /// Converts radians to degrees.\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(float_extras)]\n     /// use std::f32::{self, consts};\n     ///\n     /// let angle = consts::PI;\n@@ -564,14 +566,14 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[unstable(feature = \"std_misc\", reason = \"desirability is unclear\")]\n+    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\")]\n     #[inline]\n     pub fn to_degrees(self) -> f32 { num::Float::to_degrees(self) }\n \n     /// Converts degrees to radians.\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(float_extras)]\n     /// use std::f32::{self, consts};\n     ///\n     /// let angle = 180.0f32;\n@@ -580,21 +582,21 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[unstable(feature = \"std_misc\", reason = \"desirability is unclear\")]\n+    #[unstable(feature = \"float_extras\", reason = \"desirability is unclear\")]\n     #[inline]\n     pub fn to_radians(self) -> f32 { num::Float::to_radians(self) }\n \n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(float_extras)]\n     /// use std::f32;\n     /// // 3*2^2 - 12 == 0\n     /// let abs_difference = (f32::ldexp(3.0, 2) - 12.0).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"float_extras\",\n                reason = \"pending integer conventions\")]\n     #[inline]\n     pub fn ldexp(x: f32, exp: isize) -> f32 {\n@@ -608,7 +610,7 @@ impl f32 {\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(float_extras)]\n     /// use std::f32;\n     ///\n     /// let x = 4.0f32;\n@@ -621,7 +623,7 @@ impl f32 {\n     /// assert!(abs_difference_0 <= f32::EPSILON);\n     /// assert!(abs_difference_1 <= f32::EPSILON);\n     /// ```\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"float_extras\",\n                reason = \"pending integer conventions\")]\n     #[inline]\n     pub fn frexp(self) -> (f32, isize) {\n@@ -636,7 +638,7 @@ impl f32 {\n     /// `other`.\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(float_extras)]\n     /// use std::f32;\n     ///\n     /// let x = 1.0f32;\n@@ -645,7 +647,7 @@ impl f32 {\n     ///\n     /// assert!(abs_diff <= f32::EPSILON);\n     /// ```\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"float_extras\",\n                reason = \"unsure about its place in the world\")]\n     #[inline]\n     pub fn next_after(self, other: f32) -> f32 {"}, {"sha": "41c0fcb9797a651a2fd957fd44c3a46d7f95a0ca", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -190,7 +190,7 @@ impl f64 {\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(float_extras)]\n     /// let num = 2.0f64;\n     ///\n     /// // (8388608, -22, 1)\n@@ -205,7 +205,7 @@ impl f64 {\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n     /// [floating-point]: ../../../../../reference.html#machine-types\n-    #[unstable(feature = \"std_misc\", reason = \"signature is undecided\")]\n+    #[unstable(feature = \"float_extras\", reason = \"signature is undecided\")]\n     #[inline]\n     pub fn integer_decode(self) -> (u64, i16, i8) { num::Float::integer_decode(self) }\n \n@@ -567,13 +567,13 @@ impl f64 {\n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(float_extras)]\n     /// // 3*2^2 - 12 == 0\n     /// let abs_difference = (f64::ldexp(3.0, 2) - 12.0).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"float_extras\",\n                reason = \"pending integer conventions\")]\n     #[inline]\n     pub fn ldexp(x: f64, exp: isize) -> f64 {\n@@ -587,7 +587,7 @@ impl f64 {\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(float_extras)]\n     /// let x = 4.0_f64;\n     ///\n     /// // (1/2)*2^3 -> 1 * 8/2 -> 4.0\n@@ -598,7 +598,7 @@ impl f64 {\n     /// assert!(abs_difference_0 < 1e-10);\n     /// assert!(abs_difference_1 < 1e-10);\n     /// ```\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"float_extras\",\n                reason = \"pending integer conventions\")]\n     #[inline]\n     pub fn frexp(self) -> (f64, isize) {\n@@ -613,15 +613,15 @@ impl f64 {\n     /// `other`.\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(float_extras)]\n     ///\n     /// let x = 1.0f32;\n     ///\n     /// let abs_diff = (x.next_after(2.0) - 1.00000011920928955078125_f32).abs();\n     ///\n     /// assert!(abs_diff < 1e-10);\n     /// ```\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"float_extras\",\n                reason = \"unsure about its place in the world\")]\n     #[inline]\n     pub fn next_after(self, other: f64) -> f64 {"}, {"sha": "16ad21a07d700acb842a19973f9ff4d3b98cb3fd", "filename": "src/libstd/num/float_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat_macros.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"std_misc\")]\n #![doc(hidden)]\n \n macro_rules! assert_approx_eq {"}, {"sha": "178fad09f9881a4d4c84a0c005f4d8141b44a96e", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"std_misc\")]\n #![doc(hidden)]\n \n macro_rules! int_module { ($T:ty) => ("}, {"sha": "555a5cc3e20e9d747006a0963c6bd99944cf5679", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"std_misc\")]\n #![doc(hidden)]\n #![allow(unsigned_negation)]\n "}, {"sha": "b584658fb07e7bb9bbddcfe2dce991b4900e9b0f", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"std_misc\")]\n-\n use prelude::v1::*;\n use io::prelude::*;\n "}, {"sha": "1b8e81e2b791368873ab8d65a3f95fcd0d49e78f", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -16,7 +16,9 @@\n //! and should be considered as private implementation details for the\n //! time being.\n \n-#![unstable(feature = \"std_misc\")]\n+#![unstable(feature = \"rt\",\n+            reason = \"this public module should not exist and is highly likely \\\n+                      to disappear\")]\n #![allow(missing_docs)]\n \n use prelude::v1::*;"}, {"sha": "be674c83e221351903a0168741077c488cfbf946", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -12,8 +12,6 @@\n //! the standard library This varies per-platform, but these libraries are\n //! necessary for running libstd.\n \n-#![unstable(feature = \"std_misc\")]\n-\n // All platforms need to link to rustrt\n #[cfg(not(test))]\n #[link(name = \"rust_builtin\", kind = \"static\")]"}, {"sha": "76b07999280d0564edc9b0fd8e6e16afcbd16fa2", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -28,7 +28,7 @@\n //! ```\n \n #![allow(missing_docs)]\n-#![unstable(feature = \"std_misc\",\n+#![unstable(feature = \"future\",\n             reason = \"futures as-is have yet to be deeply reevaluated with recent \\\n                       core changes to Rust's synchronization story, and will likely \\\n                       become stable in the future but are unstable until that time\")]"}, {"sha": "f3edf0d68c759c75884e854b5356401dd2fe5c4a", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -35,8 +35,6 @@\n //! method, and see the method for more information about it. Due to this\n //! caveat, this queue may not be appropriate for all use-cases.\n \n-#![unstable(feature = \"std_misc\")]\n-\n // http://www.1024cores.net/home/lock-free-algorithms\n //                         /queues/non-intrusive-mpsc-node-based-queue\n "}, {"sha": "a67138742aeeb9cbf6e7badb4cd106b57faeba27", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -27,7 +27,7 @@\n //! # Examples\n //!\n //! ```rust\n-//! # #![feature(std_misc)]\n+//! # #![feature(mpsc_select)]\n //! use std::sync::mpsc::channel;\n //!\n //! let (tx1, rx1) = channel();\n@@ -47,7 +47,7 @@\n //! ```\n \n #![allow(dead_code)]\n-#![unstable(feature = \"std_misc\",\n+#![unstable(feature = \"mpsc_select\",\n             reason = \"This implementation, while likely sufficient, is unsafe and \\\n                       likely to be error prone. At some point in the future this \\\n                       module will likely be replaced, and it is currently \\\n@@ -124,7 +124,7 @@ impl Select {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(std_misc)]\n+    /// # #![feature(mpsc_select)]\n     /// use std::sync::mpsc::Select;\n     ///\n     /// let select = Select::new();"}, {"sha": "770068a66bec6db1a2fb9d3347377fd28cb99d12", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -33,8 +33,6 @@\n //! concurrently between two threads. This data structure is safe to use and\n //! enforces the semantics that there is one pusher and one popper.\n \n-#![unstable(feature = \"std_misc\")]\n-\n use core::prelude::*;\n \n use alloc::boxed;"}, {"sha": "5f77ee205459175e3e1ed005004f896e797338a9", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -85,7 +85,6 @@ use sys_common::poison::{self, TryLockError, TryLockResult, LockResult};\n /// To recover from a poisoned mutex:\n ///\n /// ```\n-/// # #![feature(std_misc)]\n /// use std::sync::{Arc, Mutex};\n /// use std::thread;\n ///\n@@ -139,7 +138,7 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(std_misc)]\n+/// # #![feature(static_mutex)]\n /// use std::sync::{StaticMutex, MUTEX_INIT};\n ///\n /// static LOCK: StaticMutex = MUTEX_INIT;\n@@ -150,7 +149,7 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n /// }\n /// // lock is unlocked here.\n /// ```\n-#[unstable(feature = \"std_misc\",\n+#[unstable(feature = \"static_mutex\",\n            reason = \"may be merged with Mutex in the future\")]\n pub struct StaticMutex {\n     lock: sys::Mutex,\n@@ -176,7 +175,7 @@ impl<'a, T: ?Sized> !marker::Send for MutexGuard<'a, T> {}\n \n /// Static initialization of a mutex. This constant can be used to initialize\n /// other mutex constants.\n-#[unstable(feature = \"std_misc\",\n+#[unstable(feature = \"static_mutex\",\n            reason = \"may be merged with Mutex in the future\")]\n pub const MUTEX_INIT: StaticMutex = StaticMutex::new();\n \n@@ -237,7 +236,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// time.  You should not trust a `false` value for program correctness\n     /// without additional synchronization.\n     #[inline]\n-    #[unstable(feature = \"std_misc\")]\n+    #[unstable(feature = \"sync_poison\")]\n     pub fn is_poisoned(&self) -> bool {\n         self.inner.poison.get()\n     }\n@@ -270,10 +269,10 @@ struct Dummy(UnsafeCell<()>);\n unsafe impl Sync for Dummy {}\n static DUMMY: Dummy = Dummy(UnsafeCell::new(()));\n \n+#[unstable(feature = \"static_mutex\",\n+           reason = \"may be merged with Mutex in the future\")]\n impl StaticMutex {\n     /// Creates a new mutex in an unlocked state ready for use.\n-    #[unstable(feature = \"std_misc\",\n-               reason = \"may be merged with Mutex in the future\")]\n     pub const fn new() -> StaticMutex {\n         StaticMutex {\n             lock: sys::Mutex::new(),\n@@ -283,17 +282,13 @@ impl StaticMutex {\n \n     /// Acquires this lock, see `Mutex::lock`\n     #[inline]\n-    #[unstable(feature = \"std_misc\",\n-               reason = \"may be merged with Mutex in the future\")]\n     pub fn lock(&'static self) -> LockResult<MutexGuard<()>> {\n         unsafe { self.lock.lock() }\n         MutexGuard::new(self, &DUMMY.0)\n     }\n \n     /// Attempts to grab this lock, see `Mutex::try_lock`\n     #[inline]\n-    #[unstable(feature = \"std_misc\",\n-               reason = \"may be merged with Mutex in the future\")]\n     pub fn try_lock(&'static self) -> TryLockResult<MutexGuard<()>> {\n         if unsafe { self.lock.try_lock() } {\n             Ok(try!(MutexGuard::new(self, &DUMMY.0)))\n@@ -312,8 +307,6 @@ impl StaticMutex {\n     /// *all* platforms. It may be the case that some platforms do not leak\n     /// memory if this method is not called, but this is not guaranteed to be\n     /// true on all platforms.\n-    #[unstable(feature = \"std_misc\",\n-               reason = \"may be merged with Mutex in the future\")]\n     pub unsafe fn destroy(&'static self) {\n         self.lock.destroy()\n     }"}, {"sha": "1e0aa271b4dcd9572f73173c6090f57804160115", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -48,7 +48,7 @@ pub const ONCE_INIT: Once = Once::new();\n \n impl Once {\n     /// Creates a new `Once` value.\n-    #[unstable(feature = \"std_misc\")]\n+    #[unstable(feature = \"once_new\")]\n     pub const fn new() -> Once {\n         Once {\n             mutex: StaticMutex::new(),"}, {"sha": "5a6bf987fd717341c2b1678a41f63ec99f7ac2aa", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -81,7 +81,7 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// # Examples\n ///\n /// ```\n-/// # #![feature(std_misc)]\n+/// # #![feature(static_rwlock)]\n /// use std::sync::{StaticRwLock, RW_LOCK_INIT};\n ///\n /// static LOCK: StaticRwLock = RW_LOCK_INIT;\n@@ -96,15 +96,15 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// }\n /// unsafe { LOCK.destroy() } // free all resources\n /// ```\n-#[unstable(feature = \"std_misc\",\n+#[unstable(feature = \"static_rwlock\",\n            reason = \"may be merged with RwLock in the future\")]\n pub struct StaticRwLock {\n     lock: sys::RWLock,\n     poison: poison::Flag,\n }\n \n /// Constant initialization for a statically-initialized rwlock.\n-#[unstable(feature = \"std_misc\",\n+#[unstable(feature = \"static_rwlock\",\n            reason = \"may be merged with RwLock in the future\")]\n pub const RW_LOCK_INIT: StaticRwLock = StaticRwLock::new();\n \n@@ -253,7 +253,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// time.  You should not trust a `false` value for program correctness\n     /// without additional synchronization.\n     #[inline]\n-    #[unstable(feature = \"std_misc\")]\n+    #[unstable(feature = \"sync_poison\")]\n     pub fn is_poisoned(&self) -> bool {\n         self.inner.poison.get()\n     }\n@@ -283,10 +283,10 @@ struct Dummy(UnsafeCell<()>);\n unsafe impl Sync for Dummy {}\n static DUMMY: Dummy = Dummy(UnsafeCell::new(()));\n \n+#[unstable(feature = \"static_rwlock\",\n+           reason = \"may be merged with RwLock in the future\")]\n impl StaticRwLock {\n     /// Creates a new rwlock.\n-    #[unstable(feature = \"std_misc\",\n-               reason = \"may be merged with RwLock in the future\")]\n     pub const fn new() -> StaticRwLock {\n         StaticRwLock {\n             lock: sys::RWLock::new(),\n@@ -299,8 +299,6 @@ impl StaticRwLock {\n     ///\n     /// See `RwLock::read`.\n     #[inline]\n-    #[unstable(feature = \"std_misc\",\n-               reason = \"may be merged with RwLock in the future\")]\n     pub fn read(&'static self) -> LockResult<RwLockReadGuard<'static, ()>> {\n         unsafe { self.lock.read() }\n         RwLockReadGuard::new(self, &DUMMY.0)\n@@ -310,8 +308,6 @@ impl StaticRwLock {\n     ///\n     /// See `RwLock::try_read`.\n     #[inline]\n-    #[unstable(feature = \"std_misc\",\n-               reason = \"may be merged with RwLock in the future\")]\n     pub fn try_read(&'static self)\n                     -> TryLockResult<RwLockReadGuard<'static, ()>> {\n         if unsafe { self.lock.try_read() } {\n@@ -326,8 +322,6 @@ impl StaticRwLock {\n     ///\n     /// See `RwLock::write`.\n     #[inline]\n-    #[unstable(feature = \"std_misc\",\n-               reason = \"may be merged with RwLock in the future\")]\n     pub fn write(&'static self) -> LockResult<RwLockWriteGuard<'static, ()>> {\n         unsafe { self.lock.write() }\n         RwLockWriteGuard::new(self, &DUMMY.0)\n@@ -337,8 +331,6 @@ impl StaticRwLock {\n     ///\n     /// See `RwLock::try_write`.\n     #[inline]\n-    #[unstable(feature = \"std_misc\",\n-               reason = \"may be merged with RwLock in the future\")]\n     pub fn try_write(&'static self)\n                      -> TryLockResult<RwLockWriteGuard<'static, ()>> {\n         if unsafe { self.lock.try_write() } {\n@@ -354,8 +346,6 @@ impl StaticRwLock {\n     /// active users of the lock, and this also doesn't prevent any future users\n     /// of this lock. This method is required to be called to not leak memory on\n     /// all platforms.\n-    #[unstable(feature = \"std_misc\",\n-               reason = \"may be merged with RwLock in the future\")]\n     pub unsafe fn destroy(&'static self) {\n         self.lock.destroy()\n     }"}, {"sha": "0278a6c95b9827c2f997854aeb8873a44d96c7cb", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![unstable(feature = \"std_misc\",\n+#![unstable(feature = \"semaphore\",\n             reason = \"the interaction between semaphores and the acquisition/release \\\n                       of resources is currently unclear\")]\n "}, {"sha": "75f85879fd1f4db71029cb6a84d456b4bd8403c8", "filename": "src/libstd/sys/common/poison.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -120,24 +120,24 @@ impl<T: Send + Reflect> Error for PoisonError<T> {\n \n impl<T> PoisonError<T> {\n     /// Creates a `PoisonError`.\n-    #[unstable(feature = \"std_misc\")]\n+    #[unstable(feature = \"sync_poison\")]\n     pub fn new(guard: T) -> PoisonError<T> {\n         PoisonError { guard: guard }\n     }\n \n     /// Consumes this error indicating that a lock is poisoned, returning the\n     /// underlying guard to allow access regardless.\n-    #[unstable(feature = \"std_misc\")]\n+    #[unstable(feature = \"sync_poison\")]\n     pub fn into_inner(self) -> T { self.guard }\n \n     /// Reaches into this error indicating that a lock is poisoned, returning a\n     /// reference to the underlying guard to allow access regardless.\n-    #[unstable(feature = \"std_misc\")]\n+    #[unstable(feature = \"sync_poison\")]\n     pub fn get_ref(&self) -> &T { &self.guard }\n \n     /// Reaches into this error indicating that a lock is poisoned, returning a\n     /// mutable reference to the underlying guard to allow access regardless.\n-    #[unstable(feature = \"std_misc\")]\n+    #[unstable(feature = \"sync_poi\")]\n     pub fn get_mut(&mut self) -> &mut T { &mut self.guard }\n }\n "}, {"sha": "2b5e3fb18eb16cee9861ecea71db146e598d9b1b", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -154,7 +154,7 @@ macro_rules! __thread_local_inner {\n }\n \n /// Indicator of the state of a thread local storage key.\n-#[unstable(feature = \"std_misc\",\n+#[unstable(feature = \"thread_local_state\",\n            reason = \"state querying was recently added\")]\n #[derive(Eq, PartialEq, Copy, Clone)]\n pub enum LocalKeyState {\n@@ -249,7 +249,7 @@ impl<T: 'static> LocalKey<T> {\n     /// initialization does not panic. Keys in the `Valid` state are guaranteed\n     /// to be able to be accessed. Keys in the `Destroyed` state will panic on\n     /// any call to `with`.\n-    #[unstable(feature = \"std_misc\",\n+    #[unstable(feature = \"thread_local_state\",\n                reason = \"state querying was recently added\")]\n     pub fn state(&'static self) -> LocalKeyState {\n         unsafe {"}, {"sha": "084893314a8e506406632d042a4ab2e1040494a0", "filename": "src/libstd/thunk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fthunk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibstd%2Fthunk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthunk.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -10,7 +10,7 @@\n \n // Because this module is temporary...\n #![allow(missing_docs)]\n-#![unstable(feature = \"std_misc\")]\n+#![unstable(feature = \"thunk\")]\n \n use alloc::boxed::{Box, FnBox};\n use core::marker::Send;"}, {"sha": "5131e0b34e380ebf84e378ab443333a397f4ae82", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6895311e859e1859f9b3f0adc9f1fbb4d2891534/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=6895311e859e1859f9b3f0adc9f1fbb4d2891534", "patch": "@@ -56,10 +56,10 @@\n #![deny(missing_docs)]\n \n #![feature(box_syntax)]\n+#![feature(owned_ascii_ext)]\n #![feature(path_ext)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n #![feature(str_char)]\n #![feature(vec_push_all)]\n #![cfg_attr(windows, feature(libc))]"}]}