{"sha": "d481e0818cb13bce75cb0b85c4343ed5c60862c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ODFlMDgxOGNiMTNiY2U3NWNiMGI4NWM0MzQzZWQ1YzYwODYyYzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-16T07:46:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-16T07:46:57Z"}, "message": "Auto merge of #1338 - RalfJung:test-cleanup, r=RalfJung\n\nCleanup some run-pass tests", "tree": {"sha": "27342b3d9ed41f03fda131b3acb9d0d1a09d099f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27342b3d9ed41f03fda131b3acb9d0d1a09d099f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d481e0818cb13bce75cb0b85c4343ed5c60862c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d481e0818cb13bce75cb0b85c4343ed5c60862c9", "html_url": "https://github.com/rust-lang/rust/commit/d481e0818cb13bce75cb0b85c4343ed5c60862c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d481e0818cb13bce75cb0b85c4343ed5c60862c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "html_url": "https://github.com/rust-lang/rust/commit/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521"}, {"sha": "3e3613f2e2f8ff27499d263ae3cd95565f685dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3613f2e2f8ff27499d263ae3cd95565f685dea", "html_url": "https://github.com/rust-lang/rust/commit/3e3613f2e2f8ff27499d263ae3cd95565f685dea"}], "stats": {"total": 296, "additions": 154, "deletions": 142}, "files": [{"sha": "e540a2a4b723f8604bbf19fec4b092f70b55376d", "filename": "tests/run-pass/bitop-beyond-alignment.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fbitop-beyond-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fbitop-beyond-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbitop-beyond-alignment.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n-\n use std::mem;\n \n enum Tag<A> {\n     Tag2(A)\n }\n \n+#[allow(dead_code)]\n struct Rec {\n     c8: u8,\n     t: Tag<u64>"}, {"sha": "6c827d7b3beae9a51d92233aeae74af9cd2e6596", "filename": "tests/run-pass/dst-field-align.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-field-align.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -1,5 +1,4 @@\n-#![allow(dead_code)]\n-\n+#[allow(dead_code)]\n struct Foo<T: ?Sized> {\n     a: u16,\n     b: T\n@@ -17,6 +16,7 @@ struct Baz<T: ?Sized> {\n     a: T\n }\n \n+#[allow(dead_code)]\n struct HasDrop<T: ?Sized> {\n     ptr: Box<usize>,\n     data: T"}, {"sha": "60303c7d7c7c763d7b057144fb4c5a0b5a88ec5f", "filename": "tests/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fforeign-fn-linkname.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -1,7 +1,5 @@\n //ignore-windows: Uses POSIX APIs\n-\n #![feature(rustc_private)]\n-#![allow(unused_extern_crates)] // rustc bug https://github.com/rust-lang/rust/issues/56098\n \n extern crate libc;\n "}, {"sha": "c85590bb8b4bdf79d6bab4913ea0b1dcef38ad53", "filename": "tests/run-pass/issue-15063.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fissue-15063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fissue-15063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-15063.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -1,5 +1,4 @@\n-#![allow(dead_code)]\n-\n+#[allow(dead_code)]\n enum Two { A, B }\n impl Drop for Two {\n     fn drop(&mut self) {"}, {"sha": "62b3220967eddd927ec48307f85fcca08c6bf5bc", "filename": "tests/run-pass/issue-35815.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fissue-35815.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fissue-35815.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-35815.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -1,7 +1,6 @@\n-#![allow(dead_code)]\n-\n use std::mem;\n \n+#[allow(dead_code)]\n struct Foo<T: ?Sized> {\n     a: i64,\n     b: bool,"}, {"sha": "0c858d3444fb369a691d8410573f264351b27c92", "filename": "tests/run-pass/issue-53728.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fissue-53728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fissue-53728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-53728.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -1,14 +1,16 @@\n-#![allow(dead_code)]\n-\n #[repr(u16)]\n+#[allow(dead_code)]\n enum DeviceKind {\n     Nil = 0,\n }\n+\n #[repr(packed)]\n+#[allow(dead_code)]\n struct DeviceInfo {\n     endianness: u8,\n     device_kind: DeviceKind,\n }\n+\n fn main() {\n     let _x = None::<(DeviceInfo, u8)>;\n     let _y = None::<(DeviceInfo, u16)>;"}, {"sha": "14d12de0d186d279938c7e4bb322c2ac0ca85ac2", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -2,14 +2,12 @@\n // compile-flags: -Zmiri-disable-isolation\n \n #![feature(rustc_private)]\n-#![allow(unused)] // necessary on macos due to conditional compilation\n-\n-use std::path::PathBuf;\n \n extern crate libc;\n \n-fn tmp() -> PathBuf {\n-    std::env::var(\"MIRI_TEMP\").map(PathBuf::from).unwrap_or_else(|_| std::env::temp_dir())\n+#[cfg(target_os = \"linux\")]\n+fn tmp() -> std::path::PathBuf {\n+    std::env::var(\"MIRI_TEMP\").map(std::path::PathBuf::from).unwrap_or_else(|_| std::env::temp_dir())\n }\n \n #[cfg(target_os = \"linux\")]"}, {"sha": "1fa3a369670bbc2512f063a5b158fc8394b88e27", "filename": "tests/run-pass/packed_static.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fpacked_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fpacked_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_static.rs?ref=5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "patch": "@@ -1,10 +0,0 @@\n-#[repr(packed)]\n-struct Foo {\n-    i: i32\n-}\n-\n-fn main() {\n-    assert_eq!({FOO.i}, 42);\n-}\n-\n-static FOO: Foo = Foo { i: 42 };"}, {"sha": "cb0bc9859345ab4f7ea16abbf01cc3864037d5a6", "filename": "tests/run-pass/packed_struct.rs", "status": "modified", "additions": 52, "deletions": 34, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -1,31 +1,53 @@\n-#![allow(dead_code)]\n #![feature(unsize, coerce_unsized)]\n \n-#[repr(packed)]\n-struct S {\n-    a: i32,\n-    b: i64,\n-}\n \n-#[repr(packed)]\n-struct Test1<'a> {\n-    x: u8,\n-    other: &'a u32,\n-}\n+fn test_basic() {\n+    #[repr(packed)]\n+    struct S {\n+        a: i32,\n+        b: i64,\n+    }\n \n-#[repr(packed)]\n-struct Test2<'a> {\n-    x: u8,\n-    other: &'a Test1<'a>,\n-}\n+    #[repr(packed)]\n+    #[allow(dead_code)]\n+    struct Test1<'a> {\n+        x: u8,\n+        other: &'a u32,\n+    }\n+\n+    #[repr(packed)]\n+    #[allow(dead_code)]\n+    struct Test2<'a> {\n+        x: u8,\n+        other: &'a Test1<'a>,\n+    }\n+\n+    fn test(t: Test2) {\n+        let x = *t.other.other;\n+        assert_eq!(x, 42);\n+    }\n+\n+    let mut x = S {\n+        a: 42,\n+        b: 99,\n+    };\n+    let a = x.a;\n+    let b = x.b;\n+    assert_eq!(a, 42);\n+    assert_eq!(b, 99);\n+    // can't do `assert_eq!(x.a, 42)`, because `assert_eq!` takes a reference\n+    assert_eq!({x.a}, 42);\n+    assert_eq!({x.b}, 99);\n \n-fn test(t: Test2) {\n-    let x = *t.other.other;\n-    assert_eq!(x, 42);\n+    x.b = 77;\n+    assert_eq!({x.b}, 77);\n+\n+    test(Test2 { x: 0, other: &Test1 { x: 0, other: &42 }});\n }\n \n fn test_unsizing() {\n     #[repr(packed)]\n+    #[allow(dead_code)]\n     struct UnalignedPtr<'a, T: ?Sized>\n     where T: 'a,\n     {\n@@ -81,25 +103,21 @@ fn test_inner_packed() {\n     let _o2 = o.clone();\n }\n \n-fn main() {\n-    let mut x = S {\n-        a: 42,\n-        b: 99,\n-    };\n-    let a = x.a;\n-    let b = x.b;\n-    assert_eq!(a, 42);\n-    assert_eq!(b, 99);\n-    // can't do `assert_eq!(x.a, 42)`, because `assert_eq!` takes a reference\n-    assert_eq!({x.a}, 42);\n-    assert_eq!({x.b}, 99);\n+fn test_static() {\n+    #[repr(packed)]\n+    struct Foo {\n+        i: i32\n+    }\n \n-    x.b = 77;\n-    assert_eq!({x.b}, 77);\n+    static FOO: Foo = Foo { i: 42 };\n \n-    test(Test2 { x: 0, other: &Test1 { x: 0, other: &42 }});\n+    assert_eq!({FOO.i}, 42);\n+}\n \n+fn main() {\n+    test_basic();\n     test_unsizing();\n     test_drop();\n     test_inner_packed();\n+    test_static();\n }"}, {"sha": "a6ee151e3e13bbfa2c3dfed49463f1840a4e6467", "filename": "tests/run-pass/ptr_arith_offset.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_arith_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_arith_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_arith_offset.rs?ref=5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "patch": "@@ -1,6 +0,0 @@\n-fn main() {\n-    let v = [1i16, 2];\n-    let x = &v as *const [i16] as *const i16;\n-    let x = x.wrapping_offset(1);\n-    assert_eq!(unsafe { *x }, 2);\n-}"}, {"sha": "fdd980e2177b5beed16fbc59ff6490f10392c2c5", "filename": "tests/run-pass/ptr_arith_offset_overflow.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs?ref=5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "patch": "@@ -1,12 +0,0 @@\n-use std::ptr;\n-\n-fn main() {\n-    let v = [1i16, 2];\n-    let x = &mut ptr::null(); // going through memory as there are more sanity checks along that path\n-    *x = v.as_ptr().wrapping_offset(1); // ptr to the 2nd element\n-    // Adding 2*isize::max and then 1 is like substracting 1\n-    *x = x.wrapping_offset(isize::MAX);\n-    *x = x.wrapping_offset(isize::MAX);\n-    *x = x.wrapping_offset(1);\n-    assert_eq!(unsafe { **x }, 1);\n-}"}, {"sha": "b9815126a8c7964b6109b37227d458f82794837b", "filename": "tests/run-pass/ptr_int_casts.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fptr_int_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fptr_int_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_int_casts.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -7,7 +7,7 @@ fn eq_ref<T>(x: &T, y: &T) -> bool {\n \n fn f() -> i32 { 42 }\n \n-fn main() {\n+fn ptr_int_casts() {\n     // int-ptr-int\n     assert_eq!(1 as *const i32 as usize, 1);\n     assert_eq!((1 as *const i32).wrapping_offset(4) as usize, 1 + 4*4);\n@@ -40,3 +40,29 @@ fn main() {\n     // involving types other than usize\n     assert_eq!((-1i32) as usize as *const i32 as usize, (-1i32) as usize);\n }\n+\n+fn ptr_int_ops() {\n+    let v = [1i16, 2];\n+    let x = &v[1] as *const i16 as usize;\n+    // arithmetic\n+    let _y = x + 4;\n+    let _y = 4 + x;\n+    let _y = x - 2;\n+    // bit-operations, covered by alignment\n+    assert_eq!(x & 1, 0);\n+    assert_eq!(x & 0, 0);\n+    assert_eq!(1 & (x+1), 1);\n+    let _y = !1 & x;\n+    let _y = !0 & x;\n+    let _y = x & !1;\n+    // remainder, covered by alignment\n+    assert_eq!(x % 2, 0);\n+    assert_eq!((x+1) % 2, 1);\n+    // remainder with 1 is always 0\n+    assert_eq!(x % 1, 0);\n+}\n+\n+fn main() {\n+    ptr_int_casts();\n+    ptr_int_ops();\n+}"}, {"sha": "9a29c2d30837d5bcea93399f410add26082d7b0e", "filename": "tests/run-pass/ptr_int_ops.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_int_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_int_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_int_ops.rs?ref=5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "patch": "@@ -1,20 +0,0 @@\n-fn main() {\n-    let v = [1i16, 2];\n-    let x = &v[1] as *const i16 as usize;\n-    // arithmetic\n-    let _y = x + 4;\n-    let _y = 4 + x;\n-    let _y = x - 2;\n-    // bit-operations, covered by alignment\n-    assert_eq!(x & 1, 0);\n-    assert_eq!(x & 0, 0);\n-    assert_eq!(1 & (x+1), 1);\n-    let _y = !1 & x;\n-    let _y = !0 & x;\n-    let _y = x & !1;\n-    // remainder, covered by alignment\n-    assert_eq!(x % 2, 0);\n-    assert_eq!((x+1) % 2, 1);\n-    // remainder with 1 is always 0\n-    assert_eq!(x % 1, 0);\n-}"}, {"sha": "f83720b547c02c487cd2f06779f24f3b32194664", "filename": "tests/run-pass/ptr_offset.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_offset.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -1,6 +1,58 @@\n-fn f() -> i32 { 42 }\n+#![feature(ptr_offset_from)]\n+use std::{mem, ptr};\n \n fn main() {\n+    test_offset_from();\n+    test_vec_into_iter();\n+    ptr_arith_offset();\n+    ptr_arith_offset_overflow();\n+    ptr_offset();\n+}\n+\n+fn test_offset_from() { unsafe {\n+    let buf = [0u32; 4];\n+\n+    let x = buf.as_ptr() as *const u8;\n+    let y = x.offset(12);\n+\n+    assert_eq!(y.offset_from(x), 12);\n+    assert_eq!(x.offset_from(y), -12);\n+    assert_eq!((y as *const u32).offset_from(x as *const u32), 12/4);\n+    assert_eq!((x as *const u32).offset_from(y as *const u32), -12/4);\n+    \n+    let x = (((x as usize) * 2) / 2) as *const u8;\n+    assert_eq!(y.offset_from(x), 12);\n+    assert_eq!(x.offset_from(y), -12);\n+} }\n+\n+// This also internally uses offset_from.\n+fn test_vec_into_iter() {\n+    let v = Vec::<i32>::new();\n+    let i = v.into_iter();\n+    i.size_hint();\n+}\n+\n+fn ptr_arith_offset() {\n+    let v = [1i16, 2];\n+    let x = &v as *const [i16] as *const i16;\n+    let x = x.wrapping_offset(1);\n+    assert_eq!(unsafe { *x }, 2);\n+}\n+\n+fn ptr_arith_offset_overflow() {\n+    let v = [1i16, 2];\n+    let x = &mut ptr::null(); // going through memory as there are more sanity checks along that path\n+    *x = v.as_ptr().wrapping_offset(1); // ptr to the 2nd element\n+    // Adding 2*isize::max and then 1 is like substracting 1\n+    *x = x.wrapping_offset(isize::MAX);\n+    *x = x.wrapping_offset(isize::MAX);\n+    *x = x.wrapping_offset(1);\n+    assert_eq!(unsafe { **x }, 1);\n+}\n+\n+fn ptr_offset() {\n+    fn f() -> i32 { 42 }\n+\n     let v = [1i16, 2];\n     let x = &v as *const [i16; 2] as *const i16;\n     let x = unsafe { x.offset(1) };\n@@ -10,7 +62,7 @@ fn main() {\n     unsafe {\n         let p = f as fn() -> i32 as usize;\n         let x = (p as *mut u32).offset(0) as usize;\n-        let f: fn() -> i32 = std::mem::transmute(x);\n+        let f: fn() -> i32 = mem::transmute(x);\n         assert_eq!(f(), 42);\n     }\n }"}, {"sha": "92eb3f6e46e3c825976d6d85db1c38c460a6339e", "filename": "tests/run-pass/ptr_offset_from.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_offset_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_offset_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_offset_from.rs?ref=5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "patch": "@@ -1,29 +0,0 @@\n-#![feature(ptr_offset_from)]\n-\n-fn test_raw() { unsafe {\n-    let buf = [0u32; 4];\n-\n-    let x = buf.as_ptr() as *const u8;\n-    let y = x.offset(12);\n-\n-    assert_eq!(y.offset_from(x), 12);\n-    assert_eq!(x.offset_from(y), -12);\n-    assert_eq!((y as *const u32).offset_from(x as *const u32), 12/4);\n-    assert_eq!((x as *const u32).offset_from(y as *const u32), -12/4);\n-    \n-    let x = (((x as usize) * 2) / 2) as *const u8;\n-    assert_eq!(y.offset_from(x), 12);\n-    assert_eq!(x.offset_from(y), -12);\n-} }\n-\n-// This also internally uses offset_from.\n-fn test_vec_into_iter() {\n-    let v = Vec::<i32>::new();\n-    let i = v.into_iter();\n-    i.size_hint();\n-}\n-\n-fn main() {\n-    test_raw();\n-    test_vec_into_iter();\n-}"}, {"sha": "4fbbb270957b39d6ee71ee70e18d64078d661c8c", "filename": "tests/run-pass/ptr_raw.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fptr_raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fptr_raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_raw.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "previous_filename": "tests/run-pass/raw.rs"}, {"sha": "0b2433d84fa882d2549a328f2c31a2364e86f647", "filename": "tests/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-mock-trans.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-#![allow(dead_code)]\n-\n extern crate libc;\n use std::mem;\n \n@@ -13,11 +11,13 @@ struct Bcx<'a> {\n     fcx: &'a Fcx<'a>\n }\n \n+#[allow(dead_code)]\n struct Fcx<'a> {\n     arena: &'a Arena,\n     ccx: &'a Ccx\n }\n \n+#[allow(dead_code)]\n struct Ccx {\n     x: isize\n }"}, {"sha": "76e2c01e74505e62c291514d24f472ae548a35c4", "filename": "tests/run-pass/rfc1623.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frfc1623.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code)]\n+#![allow(dead_code)] // tons of unused statics here...\n \n // very simple test for a 'static static with default lifetime\n static STATIC_STR: &str = \"&'static str\";"}, {"sha": "bb2f597444e77c58d8749e5252d0cdbb23ae9220", "filename": "tests/run-pass/small_enum_size_bug.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fsmall_enum_size_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fsmall_enum_size_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsmall_enum_size_bug.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -1,5 +1,4 @@\n-#![allow(dead_code)]\n-\n+#[allow(dead_code)]\n enum E {\n     A = 1,\n     B = 2,"}, {"sha": "0aa6a2e92b6247f659f8463f686231c0fedd2f52", "filename": "tests/run-pass/static_mut.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fstatic_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Fstatic_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstatic_mut.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -1,8 +1,7 @@\n-#![allow(dead_code)]\n-\n static mut FOO: i32 = 42;\n static BAR: Foo = Foo(unsafe { &FOO as *const _} );\n \n+#[allow(dead_code)]\n struct Foo(*const i32);\n \n unsafe impl Sync for Foo {}"}, {"sha": "8a97758fbb5943692963f37dea8adca59a51df3e", "filename": "tests/run-pass/tag-align-dyn-u64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Ftag-align-dyn-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Ftag-align-dyn-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftag-align-dyn-u64.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n-\n use std::mem;\n \n enum Tag<A> {\n     Tag2(A)\n }\n \n+#[allow(dead_code)]\n struct Rec {\n     c8: u8,\n     t: Tag<u64>"}, {"sha": "c80918ee527c2998bcec829e65cda665e14e7cd5", "filename": "tests/run-pass/union.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d481e0818cb13bce75cb0b85c4343ed5c60862c9/tests%2Frun-pass%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funion.rs?ref=d481e0818cb13bce75cb0b85c4343ed5c60862c9", "patch": "@@ -1,5 +1,4 @@\n #![feature(untagged_unions)]\n-#![allow(dead_code, unused_variables)]\n \n fn main() {\n     a();\n@@ -9,6 +8,7 @@ fn main() {\n }\n \n fn a() {\n+    #[allow(dead_code)]\n     union U {\n         f1: u32,\n         f2: f32,\n@@ -27,6 +27,7 @@ fn b() {\n         y: u32,\n     }\n \n+    #[allow(dead_code)]\n     union U {\n         s: S,\n         both: u64,\n@@ -82,7 +83,7 @@ fn d() {\n     unsafe {\n         match u {\n             MyUnion { f1: 10 } => { }\n-            MyUnion { f2 } => { panic!(\"foo\"); }\n+            MyUnion { f2: _f2 } => { panic!(\"foo\"); }\n         }\n     }\n }"}]}