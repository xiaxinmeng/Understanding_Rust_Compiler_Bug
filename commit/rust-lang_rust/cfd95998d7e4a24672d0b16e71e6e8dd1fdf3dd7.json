{"sha": "cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZDk1OTk4ZDdlNGEyNDY3MmQwYjE2ZTcxZTZlOGRkMWZkZjNkZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-20T10:21:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-20T10:21:28Z"}, "message": "Auto merge of #1009 - RalfJung:expect_none, r=RalfJung\n\nuse expect_none and unwrap_none where it makes sense", "tree": {"sha": "3f77e98ea73246af2b421acc32a0903ed32ce76e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f77e98ea73246af2b421acc32a0903ed32ce76e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "html_url": "https://github.com/rust-lang/rust/commit/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fccb2398248802a268fcda544ff3945247ef2119", "url": "https://api.github.com/repos/rust-lang/rust/commits/fccb2398248802a268fcda544ff3945247ef2119", "html_url": "https://github.com/rust-lang/rust/commit/fccb2398248802a268fcda544ff3945247ef2119"}, {"sha": "88c88530ec5788ada08bcf23d6c7b149337f0713", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c88530ec5788ada08bcf23d6c7b149337f0713", "html_url": "https://github.com/rust-lang/rust/commit/88c88530ec5788ada08bcf23d6c7b149337f0713"}], "stats": {"total": 33, "additions": 13, "deletions": 20}, "files": [{"sha": "6fb1cd25b159f4944e40bb6811b6518c3b70c47f", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "patch": "@@ -177,10 +177,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         }\n     }\n \n-    assert!(\n-        args.next().is_none(),\n-        \"start lang item has more arguments than expected\"\n-    );\n+    args.next().expect_none(\"start lang item has more arguments than expected\");\n \n     // Set the last_error to 0\n     let errno_layout = ecx.layout_of(ecx.tcx.types.u32)?;"}, {"sha": "59acff358678a817cb7065ff77859868b0c481d4", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "patch": "@@ -1,4 +1,5 @@\n #![feature(rustc_private)]\n+#![feature(option_expect_none, option_unwrap_none)]\n \n #![warn(rust_2018_idioms)]\n #![allow(clippy::cast_lossless)]"}, {"sha": "3878a0860538f7f18de97ebb5be56706f40b1421", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "patch": "@@ -244,10 +244,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         ecx.write_scalar(Scalar::from_uint(align, arg.layout.size), arg)?;\n \n         // No more arguments.\n-        assert!(\n-            args.next().is_none(),\n-            \"`exchange_malloc` lang item has more arguments than expected\"\n-        );\n+        args.next().expect_none(\"`exchange_malloc` lang item has more arguments than expected\");\n         Ok(())\n     }\n "}, {"sha": "b28e361b13779606351bbd666464ebf63e9ba555", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "patch": "@@ -349,10 +349,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let arg_dest = this.local_place(arg_local)?;\n                 this.write_scalar(data, arg_dest)?;\n \n-                assert!(\n-                    args.next().is_none(),\n-                    \"__rust_maybe_catch_panic argument has more arguments than expected\"\n-                );\n+                args.next().expect_none(\"__rust_maybe_catch_panic argument has more arguments than expected\");\n \n                 // We ourselves will return `0`, eventually (because we will not return if we paniced).\n                 this.write_null(dest)?;"}, {"sha": "ed2465cd1f9729f534d9170b07e9cfeabef978b4", "filename": "src/shims/fs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "patch": "@@ -7,6 +7,7 @@ use rustc::ty::layout::Size;\n use crate::stacked_borrows::Tag;\n use crate::*;\n \n+#[derive(Debug)]\n pub struct FileHandle {\n     file: File,\n }\n@@ -103,7 +104,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = options.open(path).map(|file| {\n             let mut fh = &mut this.machine.file_handler;\n             fh.low += 1;\n-            fh.handles.insert(fh.low, FileHandle { file });\n+            fh.handles.insert(fh.low, FileHandle { file }).unwrap_none();\n             fh.low\n         });\n \n@@ -175,7 +176,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .map(|buffer| handle.file.read(buffer))\n             });\n             // Reinsert the file handle\n-            this.machine.file_handler.handles.insert(fd, handle);\n+            this.machine.file_handler.handles.insert(fd, handle).unwrap_none();\n             this.consume_result(bytes?.map(|bytes| bytes as i64))\n         })\n     }\n@@ -204,7 +205,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .get_bytes(&*this.tcx, buf, Size::from_bytes(count))\n                     .map(|bytes| handle.file.write(bytes).map(|bytes| bytes as i64))\n             });\n-            this.machine.file_handler.handles.insert(fd, handle);\n+            this.machine.file_handler.handles.insert(fd, handle).unwrap_none();\n             this.consume_result(bytes?)\n         })\n     }"}, {"sha": "46658760cc12ac36b50b873d08bcc2687cc78265", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "patch": "@@ -356,7 +356,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         _ => {\n                             // Do it in memory\n                             let mplace = this.force_allocation(dest)?;\n-                            assert!(mplace.meta.is_none());\n+                            mplace.meta.unwrap_none();\n                             // not a zst, must be valid pointer\n                             let ptr = mplace.ptr.to_ptr()?;\n                             // we know the return place is in-bounds\n@@ -547,7 +547,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         _ => {\n                             // Do it in memory\n                             let mplace = this.force_allocation(dest)?;\n-                            assert!(mplace.meta.is_none());\n+                            mplace.meta.unwrap_none();\n                             let ptr = mplace.ptr.to_ptr()?;\n                             // We know the return place is in-bounds\n                             this.memory"}, {"sha": "b6aadd31a5be673688b3dffd825ca82e9e2db13a", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> TlsData<'tcx> {\n                 data: None,\n                 dtor,\n             },\n-        );\n+        ).unwrap_none();\n         trace!(\"New TLS key allocated: {} with dtor {:?}\", new_key, dtor);\n         new_key\n     }"}, {"sha": "2188b9d5394a310557ba0cb8a2ba67054c04f075", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=cfd95998d7e4a24672d0b16e71e6e8dd1fdf3dd7", "patch": "@@ -172,7 +172,7 @@ impl GlobalState {\n     pub fn new_call(&mut self) -> CallId {\n         let id = self.next_call_id;\n         trace!(\"new_call: Assigning ID {}\", id);\n-        self.active_calls.insert(id);\n+        assert!(self.active_calls.insert(id));\n         self.next_call_id = NonZeroU64::new(id.get() + 1).unwrap();\n         id\n     }\n@@ -189,7 +189,7 @@ impl GlobalState {\n         self.base_ptr_ids.get(&id).copied().unwrap_or_else(|| {\n             let tag = Tag::Tagged(self.new_ptr());\n             trace!(\"New allocation {:?} has base tag {:?}\", id, tag);\n-            self.base_ptr_ids.insert(id, tag);\n+            self.base_ptr_ids.insert(id, tag).unwrap_none();\n             tag\n         })\n     }"}]}