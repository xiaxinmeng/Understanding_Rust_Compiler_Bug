{"sha": "4e01ca35a08a104b5ab28e3e0c5c324264989fc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMDFjYTM1YTA4YTEwNGI1YWIyOGUzZTBjNWMzMjQyNjQ5ODlmYzY=", "commit": {"author": {"name": "Marcin Serwin", "email": "toxyxer@gmail.com", "date": "2020-04-06T07:40:53Z"}, "committer": {"name": "Marcin Serwin", "email": "toxyxer@gmail.com", "date": "2020-04-09T06:11:46Z"}, "message": "Split check_fn function", "tree": {"sha": "97d344c1ee7d7581a7cd3d6a853b987581fcddd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97d344c1ee7d7581a7cd3d6a853b987581fcddd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e01ca35a08a104b5ab28e3e0c5c324264989fc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e01ca35a08a104b5ab28e3e0c5c324264989fc6", "html_url": "https://github.com/rust-lang/rust/commit/4e01ca35a08a104b5ab28e3e0c5c324264989fc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e01ca35a08a104b5ab28e3e0c5c324264989fc6/comments", "author": {"login": "marcin-serwin", "id": 12128106, "node_id": "MDQ6VXNlcjEyMTI4MTA2", "avatar_url": "https://avatars.githubusercontent.com/u/12128106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcin-serwin", "html_url": "https://github.com/marcin-serwin", "followers_url": "https://api.github.com/users/marcin-serwin/followers", "following_url": "https://api.github.com/users/marcin-serwin/following{/other_user}", "gists_url": "https://api.github.com/users/marcin-serwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcin-serwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcin-serwin/subscriptions", "organizations_url": "https://api.github.com/users/marcin-serwin/orgs", "repos_url": "https://api.github.com/users/marcin-serwin/repos", "events_url": "https://api.github.com/users/marcin-serwin/events{/privacy}", "received_events_url": "https://api.github.com/users/marcin-serwin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcin-serwin", "id": 12128106, "node_id": "MDQ6VXNlcjEyMTI4MTA2", "avatar_url": "https://avatars.githubusercontent.com/u/12128106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcin-serwin", "html_url": "https://github.com/marcin-serwin", "followers_url": "https://api.github.com/users/marcin-serwin/followers", "following_url": "https://api.github.com/users/marcin-serwin/following{/other_user}", "gists_url": "https://api.github.com/users/marcin-serwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcin-serwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcin-serwin/subscriptions", "organizations_url": "https://api.github.com/users/marcin-serwin/orgs", "repos_url": "https://api.github.com/users/marcin-serwin/repos", "events_url": "https://api.github.com/users/marcin-serwin/events{/privacy}", "received_events_url": "https://api.github.com/users/marcin-serwin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f637c45f8b375606fc077b4a90ef4cb35758d219", "url": "https://api.github.com/repos/rust-lang/rust/commits/f637c45f8b375606fc077b4a90ef4cb35758d219", "html_url": "https://github.com/rust-lang/rust/commit/f637c45f8b375606fc077b4a90ef4cb35758d219"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "8d10c22c50301c7c73c90b6328f185c21085099d", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4e01ca35a08a104b5ab28e3e0c5c324264989fc6/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e01ca35a08a104b5ab28e3e0c5c324264989fc6/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=4e01ca35a08a104b5ab28e3e0c5c324264989fc6", "patch": "@@ -370,30 +370,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                         }\n                     }\n                     let is_comparing_arrays = is_array(cx, left) || is_array(cx, right);\n-                    let (lint, msg) = if is_named_constant(cx, left) || is_named_constant(cx, right) {\n-                        (\n-                            FLOAT_CMP_CONST,\n-                            if is_comparing_arrays {\n-                                \"strict comparison of `f32` or `f64` constant arrays\"\n-                            } else {\n-                                \"strict comparison of `f32` or `f64` constant\"\n-                            },\n-                        )\n-                    } else {\n-                        (\n-                            FLOAT_CMP,\n-                            if is_comparing_arrays {\n-                                \"strict comparison of `f32` or `f64` arrays\"\n-                            } else {\n-                                \"strict comparison of `f32` or `f64`\"\n-                            },\n-                        )\n-                    };\n+                    let (lint, msg) = get_lint_and_message(\n+                        is_named_constant(cx, left) || is_named_constant(cx, right),\n+                        is_comparing_arrays,\n+                    );\n                     span_lint_and_then(cx, lint, expr.span, msg, |db| {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n                         let rhs = Sugg::hir(cx, right, \"..\");\n \n-                        if !is_comparing_arrays {\n+                        if is_comparing_arrays {\n+                            db.note(\"`std::f32::EPSILON` and `std::f64::EPSILON` are available.\");\n+                        } else {\n                             db.span_suggestion(\n                                 expr.span,\n                                 \"consider comparing them within some error\",\n@@ -405,8 +392,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                                 Applicability::HasPlaceholders, // snippet\n                             );\n                             db.span_note(expr.span, \"`f32::EPSILON` and `f64::EPSILON` are available.\");\n-                        } else {\n-                            db.note(\"`f32::EPSILON` and `f64::EPSILON` are available.\");\n                         }\n                     });\n                 } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n@@ -459,6 +444,31 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n     }\n }\n \n+fn get_lint_and_message(\n+    is_comparing_constants: bool,\n+    is_comparing_arrays: bool,\n+) -> (&'static rustc_lint::Lint, &'static str) {\n+    if is_comparing_constants {\n+        (\n+            FLOAT_CMP_CONST,\n+            if is_comparing_arrays {\n+                \"strict comparison of `f32` or `f64` constant arrays\"\n+            } else {\n+                \"strict comparison of `f32` or `f64` constant\"\n+            },\n+        )\n+    } else {\n+        (\n+            FLOAT_CMP,\n+            if is_comparing_arrays {\n+                \"strict comparison of `f32` or `f64` arrays\"\n+            } else {\n+                \"strict comparison of `f32` or `f64`\"\n+            },\n+        )\n+    }\n+}\n+\n fn check_nan(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cmp_expr: &Expr<'_>) {\n     if_chain! {\n         if !in_constant(cx, cmp_expr.hir_id);"}]}