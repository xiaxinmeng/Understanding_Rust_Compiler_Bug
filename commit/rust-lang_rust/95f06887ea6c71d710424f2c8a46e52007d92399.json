{"sha": "95f06887ea6c71d710424f2c8a46e52007d92399", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZjA2ODg3ZWE2YzcxZDcxMDQyNGYyYzhhNDZlNTIwMDdkOTIzOTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-07T18:45:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-07T18:45:09Z"}, "message": "Sync from rust 73641cd23ba470c6b4dcd72b8d5f62d27c735254", "tree": {"sha": "5b5cf1d2a7bb67c731f4c337e3d3f172344f3b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b5cf1d2a7bb67c731f4c337e3d3f172344f3b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95f06887ea6c71d710424f2c8a46e52007d92399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95f06887ea6c71d710424f2c8a46e52007d92399", "html_url": "https://github.com/rust-lang/rust/commit/95f06887ea6c71d710424f2c8a46e52007d92399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95f06887ea6c71d710424f2c8a46e52007d92399/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddaa7459b2f6e4a8840f038003417d0b0037b859", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddaa7459b2f6e4a8840f038003417d0b0037b859", "html_url": "https://github.com/rust-lang/rust/commit/ddaa7459b2f6e4a8840f038003417d0b0037b859"}, {"sha": "0167838a18bd10d680e8eb5855ef15fb45d3e1b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0167838a18bd10d680e8eb5855ef15fb45d3e1b1", "html_url": "https://github.com/rust-lang/rust/commit/0167838a18bd10d680e8eb5855ef15fb45d3e1b1"}], "stats": {"total": 125, "additions": 40, "deletions": 85}, "files": [{"sha": "55590f2a67560173732b6b9b354f5980c41a007b", "filename": "src/archive.rs", "status": "modified", "additions": 20, "deletions": 62, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/95f06887ea6c71d710424f2c8a46e52007d92399/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f06887ea6c71d710424f2c8a46e52007d92399/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=95f06887ea6c71d710424f2c8a46e52007d92399", "patch": "@@ -6,8 +6,7 @@ use std::fs::File;\n use std::io::{self, Read, Seek};\n use std::path::{Path, PathBuf};\n \n-use rustc_codegen_ssa::back::archive::{find_library, ArchiveBuilder};\n-use rustc_codegen_ssa::METADATA_FILENAME;\n+use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n use rustc_session::Session;\n \n use object::read::archive::ArchiveFile;\n@@ -22,7 +21,6 @@ enum ArchiveEntry {\n pub(crate) struct ArArchiveBuilder<'a> {\n     sess: &'a Session,\n     dst: PathBuf,\n-    lib_search_paths: Vec<PathBuf>,\n     use_gnu_style_archive: bool,\n     no_builtin_ranlib: bool,\n \n@@ -34,8 +32,6 @@ pub(crate) struct ArArchiveBuilder<'a> {\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n     fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self {\n-        use rustc_codegen_ssa::back::link::archive_search_paths;\n-\n         let (src_archives, entries) = if let Some(input) = input {\n             let read_cache = ReadCache::new(File::open(input).unwrap());\n             let archive = ArchiveFile::parse(&read_cache).unwrap();\n@@ -57,7 +53,6 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         ArArchiveBuilder {\n             sess,\n             dst: output.to_path_buf(),\n-            lib_search_paths: archive_search_paths(sess),\n             use_gnu_style_archive: sess.target.archive_format == \"gnu\",\n             // FIXME fix builtin ranlib on macOS\n             no_builtin_ranlib: sess.target.is_like_osx,\n@@ -87,40 +82,29 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         ));\n     }\n \n-    fn add_native_library(&mut self, name: rustc_span::symbol::Symbol, verbatim: bool) {\n-        let location = find_library(name, verbatim, &self.lib_search_paths, self.sess);\n-        self.add_archive(location.clone(), |_| false).unwrap_or_else(|e| {\n-            panic!(\"failed to add native library {}: {}\", location.to_string_lossy(), e);\n-        });\n-    }\n-\n-    fn add_rlib(\n-        &mut self,\n-        rlib: &Path,\n-        name: &str,\n-        lto: bool,\n-        skip_objects: bool,\n-    ) -> io::Result<()> {\n-        self.add_archive(rlib.to_owned(), move |fname: &str| {\n-            // Ignore metadata files, no matter the name.\n-            if fname == METADATA_FILENAME {\n-                return true;\n-            }\n+    fn add_archive<F>(&mut self, archive_path: &Path, mut skip: F) -> std::io::Result<()>\n+    where\n+        F: FnMut(&str) -> bool + 'static,\n+    {\n+        let read_cache = ReadCache::new(std::fs::File::open(&archive_path)?);\n+        let archive = ArchiveFile::parse(&read_cache).unwrap();\n+        let archive_index = self.src_archives.len();\n \n-            // Don't include Rust objects if LTO is enabled\n-            if lto && fname.starts_with(name) && fname.ends_with(\".o\") {\n-                return true;\n+        for entry in archive.members() {\n+            let entry = entry.map_err(|err| io::Error::new(io::ErrorKind::InvalidData, err))?;\n+            let file_name = String::from_utf8(entry.name().to_vec())\n+                .map_err(|err| io::Error::new(io::ErrorKind::InvalidData, err))?;\n+            if !skip(&file_name) {\n+                self.entries.push((\n+                    file_name.into_bytes(),\n+                    ArchiveEntry::FromArchive { archive_index, file_range: entry.file_range() },\n+                ));\n             }\n+        }\n \n-            // Otherwise if this is *not* a rust object and we're skipping\n-            // objects then skip this file\n-            if skip_objects && (!fname.starts_with(name) || !fname.ends_with(\".o\")) {\n-                return true;\n-            }\n+        self.src_archives.push(read_cache.into_inner());\n+        Ok(())\n \n-            // ok, don't skip this\n-            false\n-        })\n     }\n \n     fn update_symbols(&mut self) {}\n@@ -265,29 +249,3 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         bug!(\"injecting dll imports is not supported\");\n     }\n }\n-\n-impl<'a> ArArchiveBuilder<'a> {\n-    fn add_archive<F>(&mut self, archive_path: PathBuf, mut skip: F) -> io::Result<()>\n-    where\n-        F: FnMut(&str) -> bool,\n-    {\n-        let read_cache = ReadCache::new(std::fs::File::open(&archive_path)?);\n-        let archive = ArchiveFile::parse(&read_cache).unwrap();\n-        let archive_index = self.src_archives.len();\n-\n-        for entry in archive.members() {\n-            let entry = entry.map_err(|err| io::Error::new(io::ErrorKind::InvalidData, err))?;\n-            let file_name = String::from_utf8(entry.name().to_vec())\n-                .map_err(|err| io::Error::new(io::ErrorKind::InvalidData, err))?;\n-            if !skip(&file_name) {\n-                self.entries.push((\n-                    file_name.into_bytes(),\n-                    ArchiveEntry::FromArchive { archive_index, file_range: entry.file_range() },\n-                ));\n-            }\n-        }\n-\n-        self.src_archives.push(read_cache.into_inner());\n-        Ok(())\n-    }\n-}"}, {"sha": "6f7ca51d038c0155233e9ad8dcea64cfa70a6b47", "filename": "src/common.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/95f06887ea6c71d710424f2c8a46e52007d92399/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f06887ea6c71d710424f2c8a46e52007d92399/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=95f06887ea6c71d710424f2c8a46e52007d92399", "patch": "@@ -1,4 +1,5 @@\n use rustc_index::vec::IndexVec;\n+use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers};\n use rustc_middle::ty::SymbolName;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n@@ -256,12 +257,12 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) inline_asm_index: u32,\n }\n \n-impl<'tcx> LayoutOf<'tcx> for FunctionCx<'_, '_, 'tcx> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = TyAndLayout<'tcx>;\n+impl<'tcx> LayoutOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n+    type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n-        RevealAllLayoutCx(self.tcx).layout_of(ty)\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        RevealAllLayoutCx(self.tcx).handle_layout_err(err, span, ty)\n     }\n }\n \n@@ -364,19 +365,16 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n \n pub(crate) struct RevealAllLayoutCx<'tcx>(pub(crate) TyCtxt<'tcx>);\n \n-impl<'tcx> LayoutOf<'tcx> for RevealAllLayoutCx<'tcx> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = TyAndLayout<'tcx>;\n+impl<'tcx> LayoutOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n+    type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n-        assert!(!ty.still_further_specializable());\n-        self.0.layout_of(ParamEnv::reveal_all().and(&ty)).unwrap_or_else(|e| {\n-            if let layout::LayoutError::SizeOverflow(_) = e {\n-                self.0.sess.fatal(&e.to_string())\n-            } else {\n-                bug!(\"failed to get layout for `{}`: {}\", ty, e)\n-            }\n-        })\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        if let layout::LayoutError::SizeOverflow(_) = err {\n+            self.0.sess.span_fatal(span, &err.to_string())\n+        } else {\n+            span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n+        }\n     }\n }\n "}, {"sha": "6d172817cb12ef129fd78aad78ec101d3fb1cf82", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95f06887ea6c71d710424f2c8a46e52007d92399/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f06887ea6c71d710424f2c8a46e52007d92399/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=95f06887ea6c71d710424f2c8a46e52007d92399", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> DebugContext<'tcx> {\n             rustc_interface::util::version_str().unwrap_or(\"unknown version\"),\n             cranelift_codegen::VERSION,\n         );\n-        let comp_dir = tcx.sess.opts.working_dir.to_string_lossy(false).into_owned();\n+        let comp_dir = tcx.sess.opts.working_dir.to_string_lossy(FileNameDisplayPreference::Remapped).into_owned();\n         let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();"}, {"sha": "8968dc0b253e9e67a22ba22817439d45f97095e4", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95f06887ea6c71d710424f2c8a46e52007d92399/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f06887ea6c71d710424f2c8a46e52007d92399/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=95f06887ea6c71d710424f2c8a46e52007d92399", "patch": "@@ -80,14 +80,13 @@ fn reuse_workproduct_for_cgu(\n     cgu: &CodegenUnit<'_>,\n     work_products: &mut FxHashMap<WorkProductId, WorkProduct>,\n ) -> CompiledModule {\n-    let incr_comp_session_dir = tcx.sess.incr_comp_session_dir();\n     let mut object = None;\n     let work_product = cgu.work_product(tcx);\n     if let Some(saved_file) = &work_product.saved_file {\n         let obj_out =\n             tcx.output_filenames(()).temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n         object = Some(obj_out.clone());\n-        let source_file = rustc_incremental::in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n+        let source_file = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, &saved_file);\n         if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n             tcx.sess.err(&format!(\n                 \"unable to copy {} to {}: {}\","}, {"sha": "e83b94ba90f73a270db0396445602cbd31c1b7aa", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95f06887ea6c71d710424f2c8a46e52007d92399/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f06887ea6c71d710424f2c8a46e52007d92399/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=95f06887ea6c71d710424f2c8a46e52007d92399", "patch": "@@ -74,17 +74,17 @@ mod vtable;\n mod prelude {\n     pub(crate) use std::convert::{TryFrom, TryInto};\n \n-    pub(crate) use rustc_span::Span;\n+    pub(crate) use rustc_span::{Span, FileNameDisplayPreference};\n \n     pub(crate) use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n     pub(crate) use rustc_middle::bug;\n     pub(crate) use rustc_middle::mir::{self, *};\n-    pub(crate) use rustc_middle::ty::layout::{self, TyAndLayout};\n+    pub(crate) use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n     pub(crate) use rustc_middle::ty::{\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n         TypeFoldable, UintTy,\n     };\n-    pub(crate) use rustc_target::abi::{Abi, LayoutOf, Scalar, Size, VariantIdx};\n+    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n "}]}