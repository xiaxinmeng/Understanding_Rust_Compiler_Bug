{"sha": "2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiOGVkMWUxYmQ5YTUxYTJjZmYwNWFkM2ExNDk5YzY3ZWNiY2ZkM2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-08T23:15:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-08T23:15:50Z"}, "message": "Rollup merge of #58233 - taiki-e:librustc_save_analysis-2018, r=Centril\n\nlibrustc_save_analysis => 2018\n\nTransitions `librustc_save_analysis` to Rust 2018; cc #58099\n\nr? @Centril", "tree": {"sha": "b5239e007c8a241e2e1bc8c25e409e7cf189054e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5239e007c8a241e2e1bc8c25e409e7cf189054e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcXg2nCRBK7hj4Ov3rIwAAdHIIAFzUY4FLgZELdk0hx5GnK4kI\nAjMiM8KU8jozy3dbRjUCQ8ZVQf++6Xy0u36d0Zh8s9ZRla0Vd0+WTG3MyGoE6aV5\nxl/p/5z66hfPuijIEJfl6wPJ6QlaDxIJUwovOMAJkRZ52ehSAmWbL5rNKV3t9LWG\ncVa8ELgaYa8Uvzil47RMQZyzZT1wiCaa4a8JRPlcAQLnAnHaMYXsdExH5Migo0sy\nZTAzrEPwKp2xRllHIB/5hYCaP6eAvVww7z8Kqp9PHeAq8W6EVrWbV+RLxjC+7VJL\nqlUCmsFt2/Mf1DuGBBCPC/WDRuKqhrzxSdZFxCJtgnzOatCtaRihOguqAiO80q0=\n=Cn21\n-----END PGP SIGNATURE-----\n", "payload": "tree b5239e007c8a241e2e1bc8c25e409e7cf189054e\nparent 5b4cf9b90d6915fceae02109dbb26077d1004602\nparent ba0fbd763d8d6b88457c0c06f1a3f583b69fcd19\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1549667750 +0100\ncommitter GitHub <noreply@github.com> 1549667750 +0100\n\nRollup merge of #58233 - taiki-e:librustc_save_analysis-2018, r=Centril\n\nlibrustc_save_analysis => 2018\n\nTransitions `librustc_save_analysis` to Rust 2018; cc #58099\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d", "html_url": "https://github.com/rust-lang/rust/commit/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b4cf9b90d6915fceae02109dbb26077d1004602", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4cf9b90d6915fceae02109dbb26077d1004602", "html_url": "https://github.com/rust-lang/rust/commit/5b4cf9b90d6915fceae02109dbb26077d1004602"}, {"sha": "ba0fbd763d8d6b88457c0c06f1a3f583b69fcd19", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0fbd763d8d6b88457c0c06f1a3f583b69fcd19", "html_url": "https://github.com/rust-lang/rust/commit/ba0fbd763d8d6b88457c0c06f1a3f583b69fcd19"}], "stats": {"total": 161, "additions": 79, "deletions": 82}, "files": [{"sha": "8bb2e722b57941d6e8cc5a4a28987c2654e58315", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_save_analysis\""}, {"sha": "1a49056bc7f2695207d83f96a69caf57824b7b7c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 39, "deletions": 34, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d", "patch": "@@ -16,6 +16,7 @@\n use rustc::hir::def::Def as HirDef;\n use rustc::hir::def_id::DefId;\n use rustc::session::config::Input;\n+use rustc::span_bug;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n \n@@ -32,16 +33,20 @@ use syntax::print::pprust::{\n };\n use syntax::ptr::P;\n use syntax::source_map::{Spanned, DUMMY_SP, respan};\n+use syntax::walk_list;\n use syntax_pos::*;\n \n-use {escape, generated_code, lower_attributes, PathCollector, SaveContext};\n-use json_dumper::{Access, DumpOutput, JsonDumper};\n-use span_utils::SpanUtils;\n-use sig;\n+use crate::{escape, generated_code, id_from_def_id, id_from_node_id, lower_attributes,\n+            PathCollector, SaveContext};\n+use crate::json_dumper::{Access, DumpOutput, JsonDumper};\n+use crate::span_utils::SpanUtils;\n+use crate::sig;\n \n use rls_data::{CompilationOptions, CratePreludeData, Def, DefKind, GlobalCrateId, Import,\n                ImportKind, Ref, RefKind, Relation, RelationKind, SpanData};\n \n+use log::{debug, error};\n+\n macro_rules! down_cast_data {\n     ($id:ident, $kind:ident, $sp:expr) => {\n         let $id = if let super::Data::$kind(data) = $id {\n@@ -68,7 +73,7 @@ macro_rules! access_from {\n     };\n }\n \n-pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> {\n+pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     dumper: &'ll mut JsonDumper<O>,\n@@ -245,7 +250,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     None => continue,\n                 };\n                 if !self.span.filter_generated(ident.span) {\n-                    let id = ::id_from_node_id(id, &self.save_ctxt);\n+                    let id = id_from_node_id(id, &self.save_ctxt);\n                     let span = self.span_from_span(ident.span);\n \n                     self.dumper.dump_def(\n@@ -286,7 +291,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         debug!(\"process_method: {}:{}\", id, ident);\n \n         if let Some(mut method_data) = self.save_ctxt.get_method_data(id, ident, span) {\n-            let sig_str = ::make_signature(&sig.decl, &generics);\n+            let sig_str = crate::make_signature(&sig.decl, &generics);\n             if body.is_some() {\n                 self.nest_tables(\n                     id,\n@@ -339,7 +344,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     // Append $id to name to make sure each one is unique.\n                     let qualname = format!(\"{}::{}${}\", prefix, name, id);\n                     if !self.span.filter_generated(param_ss) {\n-                        let id = ::id_from_node_id(param.id, &self.save_ctxt);\n+                        let id = id_from_node_id(param.id, &self.save_ctxt);\n                         let span = self.span_from_span(param_ss);\n \n                         self.dumper.dump_def(\n@@ -434,12 +439,12 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 &access_from!(self.save_ctxt, vis, id),\n                 Def {\n                     kind: DefKind::Const,\n-                    id: ::id_from_node_id(id, &self.save_ctxt),\n+                    id: id_from_node_id(id, &self.save_ctxt),\n                     span,\n                     name: ident.name.to_string(),\n                     qualname,\n                     value: ty_to_string(&typ),\n-                    parent: Some(::id_from_def_id(parent_id)),\n+                    parent: Some(id_from_def_id(parent_id)),\n                     children: vec![],\n                     decl_id: None,\n                     docs: self.save_ctxt.docs_for_attrs(attrs),\n@@ -496,7 +501,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     value,\n                     fields\n                         .iter()\n-                        .map(|f| ::id_from_node_id(f.id, &self.save_ctxt))\n+                        .map(|f| id_from_node_id(f.id, &self.save_ctxt))\n                         .collect(),\n                 )\n             }\n@@ -509,7 +514,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 &access_from!(self.save_ctxt, item),\n                 Def {\n                     kind,\n-                    id: ::id_from_node_id(item.id, &self.save_ctxt),\n+                    id: id_from_node_id(item.id, &self.save_ctxt),\n                     span,\n                     name,\n                     qualname: qualname.clone(),\n@@ -565,8 +570,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     let value = format!(\"{}::{} {{ {} }}\", enum_data.name, name, fields_str);\n                     if !self.span.filter_generated(name_span) {\n                         let span = self.span_from_span(name_span);\n-                        let id = ::id_from_node_id(variant.node.data.id(), &self.save_ctxt);\n-                        let parent = Some(::id_from_node_id(item.id, &self.save_ctxt));\n+                        let id = id_from_node_id(variant.node.data.id(), &self.save_ctxt);\n+                        let parent = Some(id_from_node_id(item.id, &self.save_ctxt));\n \n                         self.dumper.dump_def(\n                             &access,\n@@ -603,8 +608,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     }\n                     if !self.span.filter_generated(name_span) {\n                         let span = self.span_from_span(name_span);\n-                        let id = ::id_from_node_id(variant.node.data.id(), &self.save_ctxt);\n-                        let parent = Some(::id_from_node_id(item.id, &self.save_ctxt));\n+                        let id = id_from_node_id(variant.node.data.id(), &self.save_ctxt);\n+                        let parent = Some(id_from_node_id(item.id, &self.save_ctxt));\n \n                         self.dumper.dump_def(\n                             &access,\n@@ -687,11 +692,11 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             val.push_str(&bounds_to_string(trait_refs));\n         }\n         if !self.span.filter_generated(item.ident.span) {\n-            let id = ::id_from_node_id(item.id, &self.save_ctxt);\n+            let id = id_from_node_id(item.id, &self.save_ctxt);\n             let span = self.span_from_span(item.ident.span);\n             let children = methods\n                 .iter()\n-                .map(|i| ::id_from_node_id(i.id, &self.save_ctxt))\n+                .map(|i| id_from_node_id(i.id, &self.save_ctxt))\n                 .collect();\n             self.dumper.dump_def(\n                 &access_from!(self.save_ctxt, item),\n@@ -727,14 +732,14 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     self.dumper.dump_ref(Ref {\n                         kind: RefKind::Type,\n                         span: span.clone(),\n-                        ref_id: ::id_from_def_id(id),\n+                        ref_id: id_from_def_id(id),\n                     });\n \n                     self.dumper.dump_relation(Relation {\n                         kind: RelationKind::SuperTrait,\n                         span,\n-                        from: ::id_from_def_id(id),\n-                        to: ::id_from_node_id(item.id, &self.save_ctxt),\n+                        from: id_from_def_id(id),\n+                        to: id_from_node_id(item.id, &self.save_ctxt),\n                     });\n                 }\n             }\n@@ -874,7 +879,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                             self.dumper.dump_ref(Ref {\n                                 kind: RefKind::Variable,\n                                 span,\n-                                ref_id: ::id_from_def_id(variant.fields[index].did),\n+                                ref_id: id_from_def_id(variant.fields[index].did),\n                             });\n                         }\n                     }\n@@ -913,7 +918,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n                     if !self.span.filter_generated(ident.span) {\n                         let qualname = format!(\"{}${}\", ident.to_string(), id);\n-                        let id = ::id_from_node_id(id, &self.save_ctxt);\n+                        let id = id_from_node_id(id, &self.save_ctxt);\n                         let span = self.span_from_span(ident.span);\n \n                         self.dumper.dump_def(\n@@ -989,7 +994,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             // Rust uses the id of the pattern for var lookups, so we'll use it too.\n             if !self.span.filter_generated(ident.span) {\n                 let qualname = format!(\"{}${}\", ident.to_string(), id);\n-                let id = ::id_from_node_id(id, &self.save_ctxt);\n+                let id = id_from_node_id(id, &self.save_ctxt);\n                 let span = self.span_from_span(ident.span);\n \n                 self.dumper.dump_def(\n@@ -1092,7 +1097,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n                 if !self.span.filter_generated(trait_item.ident.span) {\n                     let span = self.span_from_span(trait_item.ident.span);\n-                    let id = ::id_from_node_id(trait_item.id, &self.save_ctxt);\n+                    let id = id_from_node_id(trait_item.id, &self.save_ctxt);\n \n                     self.dumper.dump_def(\n                         &Access {\n@@ -1106,7 +1111,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                             name,\n                             qualname,\n                             value: self.span.snippet(trait_item.span),\n-                            parent: Some(::id_from_def_id(trait_id)),\n+                            parent: Some(id_from_def_id(trait_id)),\n                             children: vec![],\n                             decl_id: None,\n                             docs: self.save_ctxt.docs_for_attrs(&trait_item.attrs),\n@@ -1197,7 +1202,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         // The parent def id of a given use tree is always the enclosing item.\n         let parent = self.save_ctxt.tcx.hir().opt_local_def_id(id)\n             .and_then(|id| self.save_ctxt.tcx.parent_def_id(id))\n-            .map(::id_from_def_id);\n+            .map(id_from_def_id);\n \n         match use_tree.kind {\n             ast::UseTreeKind::Simple(alias, ..) => {\n@@ -1213,7 +1218,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n                 let sub_span = path.segments.last().unwrap().ident.span;\n                 if !self.span.filter_generated(sub_span) {\n-                    let ref_id = self.lookup_def_id(id).map(|id| ::id_from_def_id(id));\n+                    let ref_id = self.lookup_def_id(id).map(|id| id_from_def_id(id));\n                     let alias_span = alias.map(|i| self.span_from_span(i.span));\n                     let span = self.span_from_span(sub_span);\n                     self.dumper.import(&access, Import {\n@@ -1299,10 +1304,10 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n \n         let cm = self.tcx.sess.source_map();\n         let filename = cm.span_to_filename(span);\n-        let data_id = ::id_from_node_id(id, &self.save_ctxt);\n+        let data_id = id_from_node_id(id, &self.save_ctxt);\n         let children = m.items\n             .iter()\n-            .map(|i| ::id_from_node_id(i.id, &self.save_ctxt))\n+            .map(|i| id_from_node_id(i.id, &self.save_ctxt))\n             .collect();\n         let span = self.span_from_span(span);\n \n@@ -1346,7 +1351,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                     let span = self.span_from_span(name_span);\n                     let parent = self.save_ctxt.tcx.hir().opt_local_def_id(item.id)\n                         .and_then(|id| self.save_ctxt.tcx.parent_def_id(id))\n-                        .map(::id_from_def_id);\n+                        .map(id_from_def_id);\n                     self.dumper.import(\n                         &Access {\n                             public: false,\n@@ -1388,7 +1393,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 let value = ty_to_string(&ty);\n                 if !self.span.filter_generated(item.ident.span) {\n                     let span = self.span_from_span(item.ident.span);\n-                    let id = ::id_from_node_id(item.id, &self.save_ctxt);\n+                    let id = id_from_node_id(item.id, &self.save_ctxt);\n \n                     self.dumper.dump_def(\n                         &access_from!(self.save_ctxt, item),\n@@ -1418,7 +1423,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 let value = String::new();\n                 if !self.span.filter_generated(item.ident.span) {\n                     let span = self.span_from_span(item.ident.span);\n-                    let id = ::id_from_node_id(item.id, &self.save_ctxt);\n+                    let id = id_from_node_id(item.id, &self.save_ctxt);\n \n                     self.dumper.dump_def(\n                         &access_from!(self.save_ctxt, item),\n@@ -1484,7 +1489,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                     self.dumper.dump_ref(Ref {\n                         kind: RefKind::Type,\n                         span,\n-                        ref_id: ::id_from_def_id(id),\n+                        ref_id: id_from_def_id(id),\n                     });\n                 }\n "}, {"sha": "1840cf652e1d5bbc4060c1eea0e8052b63e5e019", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d", "patch": "@@ -7,6 +7,8 @@ use rls_data::{self, Analysis, CompilationOptions, CratePreludeData, Def, DefKin\n                MacroRef, Ref, RefKind, Relation};\n use rls_span::{Column, Row};\n \n+use log::error;\n+\n #[derive(Debug)]\n pub struct Access {\n     pub reachable: bool,\n@@ -23,7 +25,7 @@ pub trait DumpOutput {\n     fn dump(&mut self, result: &Analysis);\n }\n \n-pub struct WriteOutput<'b, W: Write + 'b> {\n+pub struct WriteOutput<'b, W: Write> {\n     output: &'b mut W,\n }\n "}, {"sha": "c4a2ebeba652952371106595442ecb0ef219869b", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d", "patch": "@@ -1,27 +1,10 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(custom_attribute)]\n-#![feature(nll)]\n+#![deny(rust_2018_idioms)]\n #![allow(unused_attributes)]\n \n #![recursion_limit=\"256\"]\n \n-#[macro_use]\n-extern crate rustc;\n-\n-#[macro_use]\n-extern crate log;\n-extern crate rustc_data_structures;\n-extern crate rustc_codegen_utils;\n-extern crate rustc_serialize;\n-extern crate rustc_target;\n-extern crate rustc_typeck;\n-#[macro_use]\n-extern crate syntax;\n-extern crate syntax_pos;\n-\n-extern crate rls_data;\n-extern crate rls_span;\n-\n \n mod json_dumper;\n mod dump_visitor;\n@@ -37,6 +20,7 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, TyCtxt};\n+use rustc::{bug, span_bug};\n use rustc_typeck::hir_ty_to_ty;\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n use rustc_data_structures::sync::Lrc;\n@@ -64,6 +48,8 @@ use rls_data::{Def, DefKind, ExternalCrateData, GlobalCrateId, MacroRef, Ref, Re\n                RelationKind, SpanData, Impl, ImplKind};\n use rls_data::config::Config;\n \n+use log::{debug, error, info};\n+\n \n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n@@ -170,7 +156,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             ast::ForeignItemKind::Static(ref ty, _) => {\n                 filter!(self.span_utils, item.ident.span);\n \n-                let id = ::id_from_node_id(item.id, self);\n+                let id = id_from_node_id(item.id, self);\n                 let span = self.span_from_span(item.ident.span);\n \n                 Some(Data::DefData(Def {\n@@ -1034,7 +1020,7 @@ impl<'a> DumpHandler<'a> {\n         }\n     }\n \n-    fn output_file(&self, ctx: &SaveContext) -> File {\n+    fn output_file(&self, ctx: &SaveContext<'_, '_>) -> File {\n         let sess = &ctx.tcx.sess;\n         let file_name = match ctx.config.output_file {\n             Some(ref s) => PathBuf::from(s),\n@@ -1185,7 +1171,7 @@ fn id_from_def_id(id: DefId) -> rls_data::Id {\n     }\n }\n \n-fn id_from_node_id(id: NodeId, scx: &SaveContext) -> rls_data::Id {\n+fn id_from_node_id(id: NodeId, scx: &SaveContext<'_, '_>) -> rls_data::Id {\n     let def_id = scx.tcx.hir().opt_local_def_id(id);\n     def_id.map(|id| id_from_def_id(id)).unwrap_or_else(|| {\n         // Create a *fake* `DefId` out of a `NodeId` by subtracting the `NodeId`\n@@ -1205,7 +1191,7 @@ fn null_id() -> rls_data::Id {\n     }\n }\n \n-fn lower_attributes(attrs: Vec<Attribute>, scx: &SaveContext) -> Vec<rls_data::Attribute> {\n+fn lower_attributes(attrs: Vec<Attribute>, scx: &SaveContext<'_, '_>) -> Vec<rls_data::Attribute> {\n     attrs.into_iter()\n     // Only retain real attributes. Doc comments are lowered separately.\n     .filter(|attr| attr.path != \"doc\")"}, {"sha": "50a335bf908776cf26eee6351e7f6e61af868e7d", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d", "patch": "@@ -25,7 +25,7 @@\n //\n // FIXME where clauses need implementing, defs/refs in generics are mostly missing.\n \n-use {id_from_def_id, id_from_node_id, SaveContext};\n+use crate::{id_from_def_id, id_from_node_id, SaveContext};\n \n use rls_data::{SigElement, Signature};\n \n@@ -34,14 +34,17 @@ use syntax::ast::{self, NodeId};\n use syntax::print::pprust;\n \n \n-pub fn item_signature(item: &ast::Item, scx: &SaveContext) -> Option<Signature> {\n+pub fn item_signature(item: &ast::Item, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n     item.make(0, None, scx).ok()\n }\n \n-pub fn foreign_item_signature(item: &ast::ForeignItem, scx: &SaveContext) -> Option<Signature> {\n+pub fn foreign_item_signature(\n+    item: &ast::ForeignItem,\n+    scx: &SaveContext<'_, '_>\n+) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n@@ -50,15 +53,15 @@ pub fn foreign_item_signature(item: &ast::ForeignItem, scx: &SaveContext) -> Opt\n \n /// Signature for a struct or tuple field declaration.\n /// Does not include a trailing comma.\n-pub fn field_signature(field: &ast::StructField, scx: &SaveContext) -> Option<Signature> {\n+pub fn field_signature(field: &ast::StructField, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n     field.make(0, None, scx).ok()\n }\n \n /// Does not include a trailing comma.\n-pub fn variant_signature(variant: &ast::Variant, scx: &SaveContext) -> Option<Signature> {\n+pub fn variant_signature(variant: &ast::Variant, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n@@ -70,7 +73,7 @@ pub fn method_signature(\n     ident: ast::Ident,\n     generics: &ast::Generics,\n     m: &ast::MethodSig,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n@@ -83,7 +86,7 @@ pub fn assoc_const_signature(\n     ident: ast::Name,\n     ty: &ast::Ty,\n     default: Option<&ast::Expr>,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n@@ -96,18 +99,18 @@ pub fn assoc_type_signature(\n     ident: ast::Ident,\n     bounds: Option<&ast::GenericBounds>,\n     default: Option<&ast::Ty>,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n     make_assoc_type_signature(id, ident, bounds, default, scx).ok()\n }\n \n-type Result = ::std::result::Result<Signature, &'static str>;\n+type Result = std::result::Result<Signature, &'static str>;\n \n trait Sig {\n-    fn make(&self, offset: usize, id: Option<NodeId>, scx: &SaveContext) -> Result;\n+    fn make(&self, offset: usize, id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result;\n }\n \n fn extend_sig(\n@@ -155,7 +158,7 @@ fn text_sig(text: String) -> Signature {\n }\n \n impl Sig for ast::Ty {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let id = Some(self.id);\n         match self.node {\n             ast::TyKind::Slice(ref ty) => {\n@@ -227,7 +230,7 @@ impl Sig for ast::Ty {\n                 if f.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                if f.abi != ::rustc_target::spec::abi::Abi::Rust {\n+                if f.abi != rustc_target::spec::abi::Abi::Rust {\n                     text.push_str(\"extern\");\n                     text.push_str(&f.abi.to_string());\n                     text.push(' ');\n@@ -317,7 +320,7 @@ impl Sig for ast::Ty {\n }\n \n impl Sig for ast::Item {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let id = Some(self.id);\n \n         match self.node {\n@@ -381,7 +384,7 @@ impl Sig for ast::Item {\n                 if header.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                if header.abi != ::rustc_target::spec::abi::Abi::Rust {\n+                if header.abi != rustc_target::spec::abi::Abi::Rust {\n                     text.push_str(\"extern\");\n                     text.push_str(&header.abi.to_string());\n                     text.push(' ');\n@@ -571,7 +574,7 @@ impl Sig for ast::Item {\n }\n \n impl Sig for ast::Path {\n-    fn make(&self, offset: usize, id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let def = scx.get_path_def(id.ok_or(\"Missing id for Path\")?);\n \n         let (name, start, end) = match def {\n@@ -613,7 +616,7 @@ impl Sig for ast::Path {\n \n // This does not cover the where clause, which must be processed separately.\n impl Sig for ast::Generics {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         if self.params.is_empty() {\n             return Ok(text_sig(String::new()));\n         }\n@@ -673,7 +676,7 @@ impl Sig for ast::Generics {\n }\n \n impl Sig for ast::StructField {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let mut text = String::new();\n         let mut defs = None;\n         if let Some(ident) = self.ident {\n@@ -696,7 +699,7 @@ impl Sig for ast::StructField {\n \n \n impl Sig for ast::Variant_ {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let mut text = self.ident.to_string();\n         match self.data {\n             ast::VariantData::Struct(ref fields, id) => {\n@@ -754,7 +757,7 @@ impl Sig for ast::Variant_ {\n }\n \n impl Sig for ast::ForeignItem {\n-    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n+    fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let id = Some(self.id);\n         match self.node {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n@@ -838,7 +841,7 @@ fn name_and_generics(\n     generics: &ast::Generics,\n     id: NodeId,\n     name: ast::Ident,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Result {\n     let name = name.to_string();\n     let def = SigElement {\n@@ -859,7 +862,7 @@ fn make_assoc_type_signature(\n     ident: ast::Ident,\n     bounds: Option<&ast::GenericBounds>,\n     default: Option<&ast::Ty>,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Result {\n     let mut text = \"type \".to_owned();\n     let name = ident.to_string();\n@@ -893,7 +896,7 @@ fn make_assoc_const_signature(\n     ident: ast::Name,\n     ty: &ast::Ty,\n     default: Option<&ast::Expr>,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Result {\n     let mut text = \"const \".to_owned();\n     let name = ident.to_string();\n@@ -926,7 +929,7 @@ fn make_method_signature(\n     ident: ast::Ident,\n     generics: &ast::Generics,\n     m: &ast::MethodSig,\n-    scx: &SaveContext,\n+    scx: &SaveContext<'_, '_>,\n ) -> Result {\n     // FIXME code dup with function signature\n     let mut text = String::new();\n@@ -939,7 +942,7 @@ fn make_method_signature(\n     if m.header.unsafety == ast::Unsafety::Unsafe {\n         text.push_str(\"unsafe \");\n     }\n-    if m.header.abi != ::rustc_target::spec::abi::Abi::Rust {\n+    if m.header.abi != rustc_target::spec::abi::Abi::Rust {\n         text.push_str(\"extern\");\n         text.push_str(&m.header.abi.to_string());\n         text.push(' ');"}, {"sha": "e2c93b6d331586bbd7e5f33daab25af7c46c6b51", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=2b8ed1e1bd9a51a2cff05ad3a1499c67ecbcfd3d", "patch": "@@ -1,6 +1,6 @@\n use rustc::session::Session;\n \n-use generated_code;\n+use crate::generated_code;\n \n use std::cell::Cell;\n "}]}