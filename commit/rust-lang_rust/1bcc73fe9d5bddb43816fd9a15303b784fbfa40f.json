{"sha": "1bcc73fe9d5bddb43816fd9a15303b784fbfa40f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiY2M3M2ZlOWQ1YmRkYjQzODE2ZmQ5YTE1MzAzYjc4NGZiZmE0MGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-05T07:46:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-05T07:46:37Z"}, "message": "auto merge of #12023 : nick29581/rust/err_res, r=alexcrichton\n\ncloses #3512", "tree": {"sha": "b2e8d0d3ae461579163a778fc6a9314309e5b22b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2e8d0d3ae461579163a778fc6a9314309e5b22b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bcc73fe9d5bddb43816fd9a15303b784fbfa40f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bcc73fe9d5bddb43816fd9a15303b784fbfa40f", "html_url": "https://github.com/rust-lang/rust/commit/1bcc73fe9d5bddb43816fd9a15303b784fbfa40f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bcc73fe9d5bddb43816fd9a15303b784fbfa40f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4509b49451cbd2e078fa81c6adb218ff33d6d779", "url": "https://api.github.com/repos/rust-lang/rust/commits/4509b49451cbd2e078fa81c6adb218ff33d6d779", "html_url": "https://github.com/rust-lang/rust/commit/4509b49451cbd2e078fa81c6adb218ff33d6d779"}, {"sha": "8d8c7835f76ff835f1bb71481bf564c2785a32e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8c7835f76ff835f1bb71481bf564c2785a32e8", "html_url": "https://github.com/rust-lang/rust/commit/8d8c7835f76ff835f1bb71481bf564c2785a32e8"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "06776fc672eb0e2fea3ffb867bb275b060ba5161", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc73fe9d5bddb43816fd9a15303b784fbfa40f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc73fe9d5bddb43816fd9a15303b784fbfa40f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=1bcc73fe9d5bddb43816fd9a15303b784fbfa40f", "patch": "@@ -15,7 +15,7 @@\n // each trait in the system to its implementations.\n \n \n-use metadata::csearch::{each_impl, get_impl_trait};\n+use metadata::csearch::{each_impl, get_impl_trait, each_implementation_for_trait};\n use metadata::csearch;\n use middle::ty::get;\n use middle::ty::{ImplContainer, lookup_item_type, subst};\n@@ -434,7 +434,7 @@ impl CoherenceChecker {\n \n     pub fn check_implementation_coherence_of(&self, trait_def_id: DefId) {\n         // Unify pairs of polytypes.\n-        self.iter_impls_of_trait(trait_def_id, |a| {\n+        self.iter_impls_of_trait_local(trait_def_id, |a| {\n             let implementation_a = a;\n             let polytype_a =\n                 self.get_self_type_for_implementation(implementation_a);\n@@ -452,19 +452,41 @@ impl CoherenceChecker {\n                     if self.polytypes_unify(polytype_a.clone(), polytype_b) {\n                         let session = self.crate_context.tcx.sess;\n                         session.span_err(\n-                            self.span_of_impl(implementation_b),\n+                            self.span_of_impl(implementation_a),\n                             format!(\"conflicting implementations for trait `{}`\",\n                                  ty::item_path_str(self.crate_context.tcx,\n                                                    trait_def_id)));\n-                        session.span_note(self.span_of_impl(implementation_a),\n-                                          \"note conflicting implementation here\");\n+                        if implementation_b.did.crate == LOCAL_CRATE {\n+                            session.span_note(self.span_of_impl(implementation_b),\n+                                              \"note conflicting implementation here\");\n+                        } else {\n+                            let crate_store = self.crate_context.tcx.sess.cstore;\n+                            let cdata = crate_store.get_crate_data(implementation_b.did.crate);\n+                            session.note(\n+                                \"conflicting implementation in crate `\" + cdata.name + \"`\");\n+                        }\n                     }\n                 }\n             })\n         })\n     }\n \n     pub fn iter_impls_of_trait(&self, trait_def_id: DefId, f: |@Impl|) {\n+        self.iter_impls_of_trait_local(trait_def_id, |x| f(x));\n+\n+        if trait_def_id.crate == LOCAL_CRATE {\n+            return;\n+        }\n+\n+        let crate_store = self.crate_context.tcx.sess.cstore;\n+        csearch::each_implementation_for_trait(crate_store, trait_def_id, |impl_def_id| {\n+            let implementation = @csearch::get_impl(self.crate_context.tcx, impl_def_id);\n+            let _ = lookup_item_type(self.crate_context.tcx, implementation.did);\n+            f(implementation);\n+        });\n+    }\n+\n+    pub fn iter_impls_of_trait_local(&self, trait_def_id: DefId, f: |@Impl|) {\n         let trait_impls = self.crate_context.tcx.trait_impls.borrow();\n         match trait_impls.get().find(&trait_def_id) {\n             Some(impls) => {"}, {"sha": "990bc21604959366ab95ba497385fdf522085d1e", "filename": "src/test/auxiliary/trait_impl_conflict.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc73fe9d5bddb43816fd9a15303b784fbfa40f/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc73fe9d5bddb43816fd9a15303b784fbfa40f/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs?ref=1bcc73fe9d5bddb43816fd9a15303b784fbfa40f", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo {\n+}\n+\n+impl Foo for int {\n+}"}, {"sha": "e39059124a091223fd31449d1d721e6626e870ba", "filename": "src/test/compile-fail/conflicting-implementations-aux.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc73fe9d5bddb43816fd9a15303b784fbfa40f/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc73fe9d5bddb43816fd9a15303b784fbfa40f/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs?ref=1bcc73fe9d5bddb43816fd9a15303b784fbfa40f", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #3512 - conflicting trait impls in different crates should give a\n+// 'conflicting implementations' error message.\n+\n+// aux-build:trait_impl_conflict.rs\n+extern mod trait_impl_conflict;\n+use trait_impl_conflict::Foo;\n+\n+impl<A> Foo for A {\n+//~^ ERROR conflicting implementations for trait `trait_impl_conflict::Foo`\n+//~^^ ERROR cannot provide an extension implementation where both trait and type are not defined in this crate\n+}\n+\n+fn main() {\n+}"}]}