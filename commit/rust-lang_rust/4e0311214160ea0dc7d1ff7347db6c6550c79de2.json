{"sha": "4e0311214160ea0dc7d1ff7347db6c6550c79de2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMDMxMTIxNDE2MGVhMGRjN2QxZmY3MzQ3ZGI2YzY1NTBjNzlkZTI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-16T11:32:38Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-18T11:49:00Z"}, "message": "Add a pass-by-copy parameter passing convention\n\nThis is intended to solve the problem of how to pass arguments to\nconstructor functions -- you want to move in rvalues, but not have to\nexplicitly copy stuff that is not an rvalue. The by-copy passing\nconvention will ensure the callee gets its own copy of the value. For\nrvalues, it'll just pass off the value. For lvalues, it'll make a\ncopy.\n\nIssue #1177", "tree": {"sha": "c4024b2ab58c93b1441e887e0f3e93936d2dc530", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4024b2ab58c93b1441e887e0f3e93936d2dc530"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e0311214160ea0dc7d1ff7347db6c6550c79de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0311214160ea0dc7d1ff7347db6c6550c79de2", "html_url": "https://github.com/rust-lang/rust/commit/4e0311214160ea0dc7d1ff7347db6c6550c79de2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e0311214160ea0dc7d1ff7347db6c6550c79de2/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6297fc979ee715c276b5303decf2220e70629917", "url": "https://api.github.com/repos/rust-lang/rust/commits/6297fc979ee715c276b5303decf2220e70629917", "html_url": "https://github.com/rust-lang/rust/commit/6297fc979ee715c276b5303decf2220e70629917"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "8e71ff86f56744060e149a7988c8b50baa72b6f4", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=4e0311214160ea0dc7d1ff7347db6c6550c79de2", "patch": "@@ -379,8 +379,9 @@ fn parse_ty_fn(st: @pstate, sd: str_def) ->\n         let mode = alt peek(st) as char {\n           '&' { ast::by_mut_ref }\n           '-' { ast::by_move }\n+          '+' { ast::by_copy }\n           '=' { ast::by_ref }\n-          '+' { ast::by_val }\n+          '#' { ast::by_val }\n         };\n         st.pos += 1u;\n         inputs += [{mode: mode, ty: parse_ty(st, sd)}];"}, {"sha": "b5bba9d723c71b4bb1656b1517da1f9506793771", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=4e0311214160ea0dc7d1ff7347db6c6550c79de2", "patch": "@@ -202,8 +202,9 @@ fn enc_ty_fn(w: io::writer, cx: @ctxt, args: [ty::arg], out: ty::t,\n         alt arg.mode {\n           by_mut_ref. { w.write_char('&'); }\n           by_move. { w.write_char('-'); }\n+          by_copy. { w.write_char('+'); }\n           by_ref. { w.write_char('='); }\n-          by_val. { w.write_char('+'); }\n+          by_val. { w.write_char('#'); }\n         }\n         enc_ty(w, cx, arg.ty);\n     }"}, {"sha": "b4cd16d1ee9064c8272ff61f8edd04e576ab86e8", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=4e0311214160ea0dc7d1ff7347db6c6550c79de2", "patch": "@@ -255,7 +255,7 @@ fn check_call(cx: ctx, f: @ast::expr, args: [@ast::expr]) -> [binding] {\n                        local_id: 0u,\n                        unsafe_tys: unsafe_set(root.mut),\n                        mutable copied: alt arg_t.mode {\n-                         ast::by_move. { copied }\n+                         ast::by_move. | ast::by_copy. { copied }\n                          ast::by_mut_ref. { not_allowed }\n                          _ { i + 1u == by_ref ? not_allowed : not_copied }\n                        }}];\n@@ -337,6 +337,9 @@ fn check_ret_ref(cx: ctx, sc: scope, mut: bool, arg_node_id: node_id,\n                 if arg.mode == ast::by_move {\n                     bad = some(\"a move-mode parameter\");\n                 }\n+                if arg.mode == ast::by_copy {\n+                    bad = some(\"a copy-mode parameter\");\n+                }\n                 if cur_node != arg_node_id {\n                     bad = some(\"the wrong parameter\");\n                 }"}, {"sha": "b57953d20a6d404bfbe8eced4d092ebd1c0e3360", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4e0311214160ea0dc7d1ff7347db6c6550c79de2", "patch": "@@ -67,8 +67,7 @@ fn type_of_explicit_args(cx: @crate_ctxt, sp: span, inputs: [ty::arg]) ->\n         // that would obviate the need for this check\n         check non_ty_var(cx, arg_ty);\n         let llty = type_of_inner(cx, sp, arg_ty);\n-        if arg.mode == ast::by_val { atys += [llty]; }\n-        else { atys += [T_ptr(llty)]; }\n+        atys += [arg.mode == ast::by_val ? llty : T_ptr(llty)];\n     }\n     ret atys;\n }\n@@ -3636,6 +3635,15 @@ fn trans_arg_expr(cx: @block_ctxt, arg: ty::arg, lldestty0: TypeRef,\n         if arg.mode == ast::by_val && (lv.kind == owned || !imm) {\n             val = Load(bcx, val);\n         }\n+    } else if arg.mode == ast::by_copy {\n+        let {bcx: cx, val: alloc} = alloc_ty(bcx, e_ty);\n+        bcx = cx;\n+        if lv.kind == temporary { revoke_clean(bcx, val); }\n+        if lv.kind == owned || !ty::type_is_immediate(ccx.tcx, e_ty) {\n+            bcx = memmove_ty(bcx, alloc, val, e_ty);\n+        } else { Store(bcx, val, alloc); }\n+        val = alloc;\n+        if lv.kind != temporary { bcx = take_ty(bcx, val, e_ty); }\n     } else if ty::type_is_immediate(ccx.tcx, e_ty) && lv.kind != owned {\n         let r = do_spill(bcx, val, e_ty);\n         val = r.val;\n@@ -4989,7 +4997,7 @@ fn copy_args_to_allocas(fcx: @fn_ctxt, bcx: @block_ctxt, args: [ast::arg],\n         let argval = alt fcx.llargs.get(id) { local_mem(v) { v } };\n         alt arg.mode {\n           ast::by_mut_ref. { }\n-          ast::by_move. { add_clean(bcx, argval, arg.ty); }\n+          ast::by_move. | ast::by_copy. { add_clean(bcx, argval, arg.ty); }\n           ast::by_val. {\n             if !ty::type_is_immediate(bcx_tcx(bcx), arg.ty) {\n                 let {bcx: cx, val: alloc} = alloc_ty(bcx, arg.ty);"}, {"sha": "b5164b54c6cfd9cff6b63fa944a2593d32ddc01a", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=4e0311214160ea0dc7d1ff7347db6c6550c79de2", "patch": "@@ -144,7 +144,7 @@ tag unop {\n     deref; not; neg;\n }\n \n-tag mode { by_ref; by_val; by_mut_ref; by_move; mode_infer; }\n+tag mode { by_ref; by_val; by_mut_ref; by_move; by_copy; mode_infer; }\n \n type stmt = spanned<stmt_>;\n "}, {"sha": "d33bd89d5d8c21b6c791cad487b2d08bb6aad0b7", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=4e0311214160ea0dc7d1ff7347db6c6550c79de2", "patch": "@@ -573,7 +573,10 @@ fn parse_arg_mode(p: parser) -> ast::mode {\n     if eat(p, token::BINOP(token::AND)) { ast::by_mut_ref }\n     else if eat(p, token::BINOP(token::MINUS)) { ast::by_move }\n     else if eat(p, token::ANDAND) { ast::by_ref }\n-    else if eat(p, token::BINOP(token::PLUS)) { ast::by_val }\n+    else if eat(p, token::BINOP(token::PLUS)) {\n+        if eat(p, token::BINOP(token::PLUS)) { ast::by_val }\n+        else { ast::by_copy }\n+    }\n     else { ast::mode_infer }\n }\n "}, {"sha": "dc09187e062aab5982b998cdeb052707d052d86e", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=4e0311214160ea0dc7d1ff7347db6c6550c79de2", "patch": "@@ -1161,7 +1161,8 @@ fn print_arg_mode(s: ps, m: ast::mode) {\n       ast::by_mut_ref. { word(s.s, \"&\"); }\n       ast::by_move. { word(s.s, \"-\"); }\n       ast::by_ref. { word(s.s, \"&&\"); }\n-      ast::by_val. { word(s.s, \"+\"); }\n+      ast::by_val. { word(s.s, \"++\"); }\n+      ast::by_copy. { word(s.s, \"+\"); }\n       ast::mode_infer. {}\n     }\n }"}, {"sha": "efc259c979f9726e61569524ed9521bd36c7ffdc", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=4e0311214160ea0dc7d1ff7347db6c6550c79de2", "patch": "@@ -12,9 +12,10 @@ import middle::ast_map;\n fn mode_str(m: ty::mode) -> str {\n     alt m {\n       ast::by_ref. { \"&&\" }\n-      ast::by_val. { \"+\" }\n+      ast::by_val. { \"++\" }\n       ast::by_mut_ref. { \"&\" }\n       ast::by_move. { \"-\" }\n+      ast::by_copy. { \"+\" }\n       _ { \"\" }\n     }\n }"}, {"sha": "61cdd01ba211e47e29eb782664d4d9624f31ae10", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0311214160ea0dc7d1ff7347db6c6550c79de2/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=4e0311214160ea0dc7d1ff7347db6c6550c79de2", "patch": "@@ -0,0 +1,8 @@\n+fn magic(+x: {a: @int}) { log x; }\n+fn magic2(+x: @int) { log x; }\n+\n+fn main() {\n+    let a = {a: @10}, b = @10;\n+    magic(a); magic({a: @20});\n+    magic2(b); magic2(@20);\n+}"}]}