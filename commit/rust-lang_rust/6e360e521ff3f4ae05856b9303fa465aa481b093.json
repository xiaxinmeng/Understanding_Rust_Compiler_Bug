{"sha": "6e360e521ff3f4ae05856b9303fa465aa481b093", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMzYwZTUyMWZmM2Y0YWUwNTg1NmI5MzAzZmE0NjVhYTQ4MWIwOTM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-07T17:56:18Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-07T17:56:18Z"}, "message": "Rollup merge of #32731 - alexcrichton:known-bootstrap-key, r=brson\n\nmk: Hardcode the bootstrap key for each release\n\nStarting with the 1.10.0 release we would like to bootstrap all compilers from\nthe previous stable release. For example the 1.10.0 compiler should bootstrap\nfrom the literal 1.9.0 release artifacts. To do this, however, we need a way to\nenable unstable features temporarily in a stable compiler (as the released\ncompiler is stable), but it turns out we already have a way to do that!\n\nAt compile time the configure script selects a `CFG_BOOTSTRAP_KEY` variable\nvalue and then exports it into the makefiles. If the `RUSTC_BOOTSTRAP_KEY`\nenvironment variable is set to this value, then the compiler is allowed to\n\"cheat\" and use unstable features.\n\nThis method of choosing the bootstrap key, however, is problematic for the\nintention of bootstrapping from the previous release. Each time a 1.9.0 compiler\nis created, a new bootstrap key will be selected. That means that the 1.10.0\ncompiler will only compile from *our* literal release artifacts. Instead\ndistributions would like to bootstrap from their own compilers, so instead we\nsimply hardcode the bootstrap key for each release.\n\nThis patch uses the same `CFG_FILENAME_EXTRA` value (a hash of the release\nstring) as the bootstrap key. Consequently all 1.9.0 compilers, no matter where\nthey are compiled, will have the same bootstrap key. Additionally we won't need\nto keep updating this as it'll be based on the release number anyway.\n\nOnce the 1.9.0 beta has been created, we can update the 1.10.0 nightly sources\n(the `master` branch at that time) to bootstrap from that release using this\nhard-coded bootstrap key. We will likely just hardcode into the makefiles what\nthe previous bootstrap key was and we'll change that whenever the stage0\ncompiler is updated.", "tree": {"sha": "7c1956177f74ed262524652309ffb80a4c3b6b8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c1956177f74ed262524652309ffb80a4c3b6b8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e360e521ff3f4ae05856b9303fa465aa481b093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e360e521ff3f4ae05856b9303fa465aa481b093", "html_url": "https://github.com/rust-lang/rust/commit/6e360e521ff3f4ae05856b9303fa465aa481b093", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e360e521ff3f4ae05856b9303fa465aa481b093/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef8635ec82a100d46ddcb522a9b1cf204ea6b271", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8635ec82a100d46ddcb522a9b1cf204ea6b271", "html_url": "https://github.com/rust-lang/rust/commit/ef8635ec82a100d46ddcb522a9b1cf204ea6b271"}, {"sha": "c822546c9ebd79a245ca171a56f452b373ab623f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c822546c9ebd79a245ca171a56f452b373ab623f", "html_url": "https://github.com/rust-lang/rust/commit/c822546c9ebd79a245ca171a56f452b373ab623f"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "fdef550a6451aa520079776b0e26d3a58be8314e", "filename": "configure", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e360e521ff3f4ae05856b9303fa465aa481b093/configure", "raw_url": "https://github.com/rust-lang/rust/raw/6e360e521ff3f4ae05856b9303fa465aa481b093/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=6e360e521ff3f4ae05856b9303fa465aa481b093", "patch": "@@ -717,18 +717,6 @@ if [ -n \"$CFG_ENABLE_DEBUG_JEMALLOC\" ]; then putvar CFG_ENABLE_DEBUG_JEMALLOC; f\n \n if [ -n \"$CFG_ENABLE_ORBIT\" ]; then putvar CFG_ENABLE_ORBIT; fi\n \n-# A magic value that allows the compiler to use unstable features\n-# during the bootstrap even when doing so would normally be an error\n-# because of feature staging or because the build turns on\n-# warnings-as-errors and unstable features default to warnings.  The\n-# build has to match this key in an env var. Meant to be a mild\n-# deterrent from users just turning on unstable features on the stable\n-# channel.\n-# Basing CFG_BOOTSTRAP_KEY on CFG_BOOTSTRAP_KEY lets it get picked up\n-# during a Makefile reconfig.\n-CFG_BOOTSTRAP_KEY=\"${CFG_BOOTSTRAP_KEY-`date +%H:%M:%S`}\"\n-putvar CFG_BOOTSTRAP_KEY\n-\n step_msg \"looking for build programs\"\n \n probe_need CFG_CURLORWGET  curl wget"}, {"sha": "9b8080f96610f3d763acab25fe67fdf8ea82dc9c", "filename": "mk/main.mk", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e360e521ff3f4ae05856b9303fa465aa481b093/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6e360e521ff3f4ae05856b9303fa465aa481b093/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=6e360e521ff3f4ae05856b9303fa465aa481b093", "patch": "@@ -24,6 +24,17 @@ CFG_PRERELEASE_VERSION=.1\n # versions in the same place\n CFG_FILENAME_EXTRA=$(shell printf '%s' $(CFG_RELEASE)$(CFG_EXTRA_FILENAME) | $(CFG_HASH_COMMAND))\n \n+# A magic value that allows the compiler to use unstable features during the\n+# bootstrap even when doing so would normally be an error because of feature\n+# staging or because the build turns on warnings-as-errors and unstable features\n+# default to warnings. The build has to match this key in an env var.\n+#\n+# This value is keyed off the release to ensure that all compilers for one\n+# particular release have the same bootstrap key. Note that this is\n+# intentionally not \"secure\" by any definition, this is largely just a deterrent\n+# from users enabling unstable features on the stable compiler.\n+CFG_BOOTSTRAP_KEY=$(CFG_FILENAME_EXTRA)\n+\n ifeq ($(CFG_RELEASE_CHANNEL),stable)\n # This is the normal semver version string, e.g. \"0.12.0\", \"0.12.0-nightly\"\n CFG_RELEASE=$(CFG_RELEASE_NUM)"}]}