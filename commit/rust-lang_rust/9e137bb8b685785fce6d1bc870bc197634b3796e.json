{"sha": "9e137bb8b685785fce6d1bc870bc197634b3796e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMTM3YmI4YjY4NTc4NWZjZTZkMWJjODcwYmMxOTc2MzRiMzc5NmU=", "commit": {"author": {"name": "Tom Eccles", "email": "tom.eccles@codethink.co.uk", "date": "2020-05-28T16:53:29Z"}, "committer": {"name": "Tom Eccles", "email": "tom.eccles@codethink.co.uk", "date": "2020-06-02T13:00:18Z"}, "message": "tools/remote-test-server: make use of verbose option\n\nThere was an unused verbose command line argument. Add some prints if\nverbose is set.", "tree": {"sha": "6d9432688ac361eb284589865deb8cd36288bfb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d9432688ac361eb284589865deb8cd36288bfb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e137bb8b685785fce6d1bc870bc197634b3796e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e137bb8b685785fce6d1bc870bc197634b3796e", "html_url": "https://github.com/rust-lang/rust/commit/9e137bb8b685785fce6d1bc870bc197634b3796e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e137bb8b685785fce6d1bc870bc197634b3796e/comments", "author": {"login": "tblah", "id": 3716681, "node_id": "MDQ6VXNlcjM3MTY2ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3716681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tblah", "html_url": "https://github.com/tblah", "followers_url": "https://api.github.com/users/tblah/followers", "following_url": "https://api.github.com/users/tblah/following{/other_user}", "gists_url": "https://api.github.com/users/tblah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tblah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tblah/subscriptions", "organizations_url": "https://api.github.com/users/tblah/orgs", "repos_url": "https://api.github.com/users/tblah/repos", "events_url": "https://api.github.com/users/tblah/events{/privacy}", "received_events_url": "https://api.github.com/users/tblah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tblah", "id": 3716681, "node_id": "MDQ6VXNlcjM3MTY2ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3716681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tblah", "html_url": "https://github.com/tblah", "followers_url": "https://api.github.com/users/tblah/followers", "following_url": "https://api.github.com/users/tblah/following{/other_user}", "gists_url": "https://api.github.com/users/tblah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tblah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tblah/subscriptions", "organizations_url": "https://api.github.com/users/tblah/orgs", "repos_url": "https://api.github.com/users/tblah/repos", "events_url": "https://api.github.com/users/tblah/events{/privacy}", "received_events_url": "https://api.github.com/users/tblah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b7ec76c16b18b01acd07f987db488a642492049", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7ec76c16b18b01acd07f987db488a642492049", "html_url": "https://github.com/rust-lang/rust/commit/1b7ec76c16b18b01acd07f987db488a642492049"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "8c56910e2dfad701e4ec7d040ebf66b8dffcd767", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e137bb8b685785fce6d1bc870bc197634b3796e/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e137bb8b685785fce6d1bc870bc197634b3796e/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=9e137bb8b685785fce6d1bc870bc197634b3796e", "patch": "@@ -41,6 +41,7 @@ macro_rules! t {\n \n static TEST: AtomicUsize = AtomicUsize::new(0);\n \n+#[derive(Copy, Clone)]\n struct Config {\n     pub remote: bool,\n     pub verbose: bool,\n@@ -71,6 +72,12 @@ impl Config {\n     }\n }\n \n+fn print_verbose(s: &str, conf: Config) {\n+    if conf.verbose {\n+        println!(\"{}\", s);\n+    }\n+}\n+\n fn main() {\n     println!(\"starting test server\");\n \n@@ -92,7 +99,7 @@ fn main() {\n         tmp_dir.push(\"tmp\");\n         (work_dir, tmp_dir)\n     };\n-    println!(\"listening!\");\n+    println!(\"listening on {}!\", bind_addr);\n \n     t!(fs::create_dir_all(&work));\n     t!(fs::create_dir_all(&tmp));\n@@ -106,23 +113,25 @@ fn main() {\n             continue;\n         }\n         if &buf[..] == b\"ping\" {\n+            print_verbose(\"Received ping\", config);\n             t!(socket.write_all(b\"pong\"));\n         } else if &buf[..] == b\"push\" {\n-            handle_push(socket, &work);\n+            handle_push(socket, &work, config);\n         } else if &buf[..] == b\"run \" {\n             let lock = lock.clone();\n             let work = work.clone();\n             let tmp = tmp.clone();\n-            thread::spawn(move || handle_run(socket, &work, &tmp, &lock));\n+            thread::spawn(move || handle_run(socket, &work, &tmp, &lock, config));\n         } else {\n             panic!(\"unknown command {:?}\", buf);\n         }\n     }\n }\n \n-fn handle_push(socket: TcpStream, work: &Path) {\n+fn handle_push(socket: TcpStream, work: &Path, config: Config) {\n     let mut reader = BufReader::new(socket);\n-    recv(&work, &mut reader);\n+    let dst = recv(&work, &mut reader);\n+    print_verbose(&format!(\"push {:#?}\", dst), config);\n \n     let mut socket = reader.into_inner();\n     t!(socket.write_all(b\"ack \"));\n@@ -138,7 +147,7 @@ impl Drop for RemoveOnDrop<'_> {\n     }\n }\n \n-fn handle_run(socket: TcpStream, work: &Path, tmp: &Path, lock: &Mutex<()>) {\n+fn handle_run(socket: TcpStream, work: &Path, tmp: &Path, lock: &Mutex<()>, config: Config) {\n     let mut arg = Vec::new();\n     let mut reader = BufReader::new(socket);\n \n@@ -205,6 +214,7 @@ fn handle_run(socket: TcpStream, work: &Path, tmp: &Path, lock: &Mutex<()>) {\n     // binary is and then we'll download it all to the exe path we calculated\n     // earlier.\n     let exe = recv(&path, &mut reader);\n+    print_verbose(&format!(\"run {:#?}\", exe), config);\n \n     let mut cmd = Command::new(&exe);\n     cmd.args(args);"}]}