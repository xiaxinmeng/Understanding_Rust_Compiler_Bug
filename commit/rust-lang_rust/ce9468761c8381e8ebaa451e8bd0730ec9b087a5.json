{"sha": "ce9468761c8381e8ebaa451e8bd0730ec9b087a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTQ2ODc2MWM4MzgxZThlYmFhNDUxZThiZDA3MzBlYzliMDg3YTU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-04T22:36:42Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-04T22:36:42Z"}, "message": "Support new -g flag, only mangle glue names by type when it's passed.", "tree": {"sha": "cee1bf8489557e80f04566769ca3958a1db0ba08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cee1bf8489557e80f04566769ca3958a1db0ba08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce9468761c8381e8ebaa451e8bd0730ec9b087a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9468761c8381e8ebaa451e8bd0730ec9b087a5", "html_url": "https://github.com/rust-lang/rust/commit/ce9468761c8381e8ebaa451e8bd0730ec9b087a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce9468761c8381e8ebaa451e8bd0730ec9b087a5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b73a640ce070ff8059039fdffb9d667f13a716e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b73a640ce070ff8059039fdffb9d667f13a716e1", "html_url": "https://github.com/rust-lang/rust/commit/b73a640ce070ff8059039fdffb9d667f13a716e1"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "6a37dece845152d012bf13fd2817afdbeed0ed9a", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ce9468761c8381e8ebaa451e8bd0730ec9b087a5/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9468761c8381e8ebaa451e8bd0730ec9b087a5/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=ce9468761c8381e8ebaa451e8bd0730ec9b087a5", "patch": "@@ -82,6 +82,7 @@ fn compile_input(session.session sess,\n                         str input, str output,\n                         bool shared,\n                         bool optimize,\n+                        bool debuginfo,\n                         bool verify,\n                         bool save_temps,\n                         trans.output_type ot,\n@@ -115,11 +116,12 @@ fn compile_input(session.session sess,\n \n     auto llmod = time[llvm.ModuleRef](time_passes, \"translation\",\n         bind trans.trans_crate(sess, crate, ty_cx, type_cache, output,\n-                               shared));\n+                               debuginfo, shared));\n \n     time[()](time_passes, \"LLVM passes\",\n-        bind trans.run_passes(llmod, optimize, verify, save_temps, output,\n-                              ot));\n+             bind trans.run_passes(llmod, optimize, debuginfo,\n+                                   verify, save_temps, output,\n+                                   ot));\n }\n \n fn pretty_print_input(session.session sess,\n@@ -144,6 +146,7 @@ options:\n     --noverify         suppress LLVM verification step (slight speedup)\n     --depend           print dependencies, in makefile-rule form\n     --parse-only       parse only; do not compile, assemble, or link\n+    -g                 produce debug info\n     -O                 optimize\n     -S                 compile only; do not assemble or link\n     -c                 compile and assemble, but do not link\n@@ -178,7 +181,7 @@ fn main(vec[str] args) {\n     auto opts = vec(optflag(\"h\"), optflag(\"glue\"),\n                     optflag(\"pretty\"), optflag(\"ls\"), optflag(\"parse-only\"),\n                     optflag(\"O\"), optflag(\"shared\"), optmulti(\"L\"),\n-                    optflag(\"S\"), optflag(\"c\"), optopt(\"o\"),\n+                    optflag(\"S\"), optflag(\"c\"), optopt(\"o\"), optopt(\"g\"),\n                     optflag(\"save-temps\"), optflag(\"time-passes\"),\n                     optflag(\"no-typestate\"), optflag(\"noverify\"));\n     auto binary = _vec.shift[str](args);\n@@ -210,6 +213,7 @@ fn main(vec[str] args) {\n     auto save_temps = opt_present(match, \"save-temps\");\n     // FIXME: Maybe we should support -O0, -O1, -Os, etc\n     auto optimize = opt_present(match, \"O\");\n+    auto debuginfo = opt_present(match, \"g\");\n     auto time_passes = opt_present(match, \"time-passes\");\n     auto run_typestate = !opt_present(match, \"no-typestate\");\n     auto n_inputs = _vec.len[str](match.free);\n@@ -243,15 +247,15 @@ fn main(vec[str] args) {\n                 parts += vec(\"bc\");\n                 auto ofile = _str.connect(parts, \".\");\n                 compile_input(sess, env, ifile, ofile, shared,\n-                              optimize, verify, save_temps, ot,\n-                              time_passes, run_typestate,\n-                              library_search_paths);\n+                              optimize, debuginfo, verify,\n+                              save_temps, ot, time_passes,\n+                              run_typestate, library_search_paths);\n             }\n             case (some[str](?ofile)) {\n                 compile_input(sess, env, ifile, ofile, shared,\n-                              optimize, verify, save_temps, ot,\n-                              time_passes, run_typestate,\n-                              library_search_paths);\n+                              optimize, debuginfo, verify,\n+                              save_temps, ot, time_passes,\n+                              run_typestate, library_search_paths);\n             }\n         }\n     }"}, {"sha": "7e8e788efa8cca358d651e038b3d4ccf91c5e756", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ce9468761c8381e8ebaa451e8bd0730ec9b087a5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9468761c8381e8ebaa451e8bd0730ec9b087a5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ce9468761c8381e8ebaa451e8bd0730ec9b087a5", "patch": "@@ -116,7 +116,8 @@ state type crate_ctxt = rec(session.session sess,\n                             std.sha1.sha1 sha,\n                             hashmap[ty.t, str] type_sha1s,\n                             hashmap[ty.t, metadata.ty_abbrev] type_abbrevs,\n-                            ty.ctxt tcx);\n+                            ty.ctxt tcx,\n+                            bool debuginfo);\n \n type local_ctxt = rec(vec[str] path,\n                       vec[str] module_path,\n@@ -1785,8 +1786,13 @@ fn declare_generic_glue(@local_ctxt cx,\n                         ty.t t,\n                         TypeRef llfnty,\n                         str name) -> ValueRef {\n-    auto fn_nm = mangle_name_by_type_only(cx.ccx, t, \"glue_\" + name);\n-    fn_nm = sanitize(fn_nm);\n+    auto fn_nm;\n+    if (cx.ccx.debuginfo) {\n+        fn_nm = mangle_name_by_type_only(cx.ccx, t, \"glue_\" + name);\n+        fn_nm = sanitize(fn_nm);\n+    } else {\n+        fn_nm = mangle_name_by_seq(cx.ccx, cx.path,  \"glue_\" + name);\n+    }\n     auto llfn = decl_internal_fastcall_fn(cx.ccx.llmod, fn_nm, llfnty);\n     ret llfn;\n }\n@@ -7241,8 +7247,8 @@ fn is_object_or_assembly(output_type ot) -> bool {\n     ret false;\n }\n \n-fn run_passes(ModuleRef llmod, bool opt, bool verify, bool save_temps,\n-              str output, output_type ot) {\n+fn run_passes(ModuleRef llmod, bool opt, bool dbg, bool verify,\n+              bool save_temps, str output, output_type ot) {\n     auto pm = mk_pass_manager();\n \n     // TODO: run the linter here also, once there are llvm-c bindings for it.\n@@ -7733,7 +7739,7 @@ fn make_common_glue(str output, bool optimize, bool verify, bool save_temps,\n \n     trans_exit_task_glue(glues, new_str_hash[ValueRef](), tn, llmod);\n \n-    run_passes(llmod, optimize, verify, save_temps, output, ot);\n+    run_passes(llmod, optimize, false, verify, save_temps, output, ot);\n }\n \n fn create_module_map(@crate_ctxt ccx) -> ValueRef {\n@@ -7785,7 +7791,8 @@ fn create_crate_map(@crate_ctxt ccx) -> ValueRef {\n }\n \n fn trans_crate(session.session sess, @ast.crate crate, ty.ctxt tcx,\n-               ty.type_cache type_cache, str output, bool shared)\n+               ty.type_cache type_cache, str output,\n+               bool debuginfo, bool shared)\n         -> ModuleRef {\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n@@ -7835,7 +7842,8 @@ fn trans_crate(session.session sess, @ast.crate crate, ty.ctxt tcx,\n                     sha = std.sha1.mk_sha1(),\n                     type_sha1s = sha1s,\n                     type_abbrevs = abbrevs,\n-                    tcx = tcx);\n+                    tcx = tcx,\n+                    debuginfo = debuginfo);\n     auto cx = new_local_ctxt(ccx);\n \n     create_typedefs(ccx);"}]}