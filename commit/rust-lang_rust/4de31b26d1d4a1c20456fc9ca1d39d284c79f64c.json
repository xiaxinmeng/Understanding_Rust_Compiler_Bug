{"sha": "4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZTMxYjI2ZDFkNGExYzIwNDU2ZmM5Y2ExZDM5ZDI4NGM3OWY2NGM=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-10-28T01:15:02Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:37:04Z"}, "message": "Fix remaining compilation issues", "tree": {"sha": "afa2bf8b78746c9ca6bf79293012e5463a758651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa2bf8b78746c9ca6bf79293012e5463a758651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "html_url": "https://github.com/rust-lang/rust/commit/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc6b58d0a809b4994cd1a633ccb04e89234ff0b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6b58d0a809b4994cd1a633ccb04e89234ff0b8", "html_url": "https://github.com/rust-lang/rust/commit/fc6b58d0a809b4994cd1a633ccb04e89234ff0b8"}], "stats": {"total": 152, "additions": 102, "deletions": 50}, "files": [{"sha": "7a52dea787a2d5135bfbdd8dbb47159b174adfdc", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -151,6 +151,16 @@ impl BodyCache<'tcx> {\n     }\n }\n \n+#[macro_export]\n+macro_rules! read_only {\n+    ($body_cache:expr) => {\n+        {\n+            $body_cache.ensure_predecessors();\n+            $body_cache.unwrap_read_only()\n+        }\n+    };\n+}\n+\n impl BodyCache<'tcx> {\n     pub fn ensure_predecessors(&mut self) {\n         self.cache.ensure_predecessors(&self.body);\n@@ -160,12 +170,8 @@ impl BodyCache<'tcx> {\n         self.cache.predecessors(&self.body)\n     }\n \n-    pub fn read_only(&self) -> ReadOnlyBodyCache<'_, '_> {\n-        assert!(self.cache.predecessors.is_some(), \"\");\n-        ReadOnlyBodyCache {\n-            cache: &self.cache,\n-            body: &self.body,\n-        }\n+    pub fn unwrap_read_only(&self) -> ReadOnlyBodyCache<'_, 'tcx> {\n+        ReadOnlyBodyCache::new(&self.cache, &self.body)\n     }\n \n     pub fn body(&self) -> &Body<'tcx> {\n@@ -176,6 +182,8 @@ impl BodyCache<'tcx> {\n         &mut self.body\n     }\n \n+    pub fn cache(&self) -> &Cache { &self.cache }\n+\n     pub fn basic_blocks_mut(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n         self.cache.basic_blocks_mut(&mut self.body)\n     }\n@@ -223,6 +231,24 @@ pub struct ReadOnlyBodyCache<'a, 'tcx> {\n }\n \n impl ReadOnlyBodyCache<'a, 'tcx> {\n+    fn new(cache: &'a Cache, body: &'a Body<'tcx>) -> Self {\n+        assert!(\n+            cache.predecessors.is_some(),\n+            \"Cannot construct ReadOnlyBodyCache without computed predecessors\");\n+        Self {\n+            cache,\n+            body,\n+        }\n+    }\n+\n+    pub fn from_external_cache(cache: &'a mut Cache, body: &'a Body<'tcx>) -> Self {\n+        cache.ensure_predecessors(body);\n+        Self {\n+            cache,\n+            body,\n+        }\n+    }\n+\n     #[inline]\n     pub fn predecessors(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n         self.cache.predecessors.as_ref().unwrap()"}, {"sha": "fdc3adabf0c551a29e51f4aad9e130338d3ea837", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -38,7 +38,9 @@ use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n \n pub use crate::mir::interpret::AssertMessage;\n-pub use crate::mir::cache::{BodyCache, ReadOnlyBodyCache};\n+// TODO(nashenas88) Cache only exported for use in librustc_mir/transform/check_unsafety.rs\n+pub use crate::mir::cache::{BodyCache, Cache, ReadOnlyBodyCache};\n+pub use crate::read_only;\n \n pub mod cache;\n pub mod interpret;"}, {"sha": "2bf7caceb68e6c98d56f6f668d400ed6e979ceef", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -147,7 +147,13 @@ rustc_queries! {\n                         crate::mir::Promoted,\n                         crate::mir::BodyCache<'tcx>\n                     >> = tcx.queries.on_disk_cache.try_load_query_result(tcx, id);\n-                promoted.map(|p| &*tcx.arena.alloc(p))\n+                promoted.map(|p| {\n+                    let cache = tcx.arena.alloc(p);\n+                    for body_cache in cache.iter_mut() {\n+                        body_cache.ensure_predecessors();\n+                    }\n+                    &*cache\n+                })\n             }\n         }\n     }"}, {"sha": "cf9fd401e7b1bc22670627294c653de855be3ca9", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -2988,7 +2988,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> ReadOnlyBodyCache<'tcx, 'tcx> {\n         match instance {\n             ty::InstanceDef::Item(did) => {\n-                self.optimized_mir(did).read_only()\n+                self.optimized_mir(did).unwrap_read_only()\n             }\n             ty::InstanceDef::VtableShim(..) |\n             ty::InstanceDef::ReifyShim(..) |\n@@ -2998,7 +2998,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             ty::InstanceDef::ClosureOnceShim { .. } |\n             ty::InstanceDef::DropGlue(..) |\n             ty::InstanceDef::CloneShim(..) => {\n-                self.mir_shims(instance).read_only()\n+                self.mir_shims(instance).unwrap_read_only()\n             }\n         }\n     }"}, {"sha": "c163ff85563bd6901f5dcc6f13d920d434ceb2db", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -1080,25 +1080,31 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     fn get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> BodyCache<'tcx> {\n-        self.root.per_def.mir.get(self, id)\n+        let mut cache = self.root.per_def.mir.get(self, id)\n             .filter(|_| !self.is_proc_macro(id))\n             .unwrap_or_else(|| {\n                 bug!(\"get_optimized_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n             })\n-            .decode((self, tcx))\n+            .decode((self, tcx));\n+        cache.ensure_predecessors();\n+        cache\n     }\n \n     fn get_promoted_mir(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         id: DefIndex,\n     ) -> IndexVec<Promoted, BodyCache<'tcx>> {\n-        self.root.per_def.promoted_mir.get(self, id)\n+        let mut cache = self.root.per_def.promoted_mir.get(self, id)\n             .filter(|_| !self.is_proc_macro(id))\n             .unwrap_or_else(|| {\n                 bug!(\"get_promoted_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n             })\n-            .decode((self, tcx))\n+            .decode((self, tcx));\n+        for body_cache in cache.iter_mut() {\n+            body_cache.ensure_predecessors();\n+        }\n+        cache\n     }\n \n     fn mir_const_qualif(&self, id: DefIndex) -> mir::ConstQualifs {"}, {"sha": "6205638c24a01b03da6b210d743480fc1a92971e", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -10,7 +10,7 @@ use rustc::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT};\n use rustc::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc::mir::{\n     ClearCrossCrate, Local, Location, Body, BodyCache, Mutability, Operand, Place, PlaceBase,\n-    PlaceElem, PlaceRef, ReadOnlyBodyCache, Static, StaticKind\n+    PlaceElem, PlaceRef, ReadOnlyBodyCache, Static, StaticKind, read_only\n };\n use rustc::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n use rustc::mir::{Terminator, TerminatorKind};\n@@ -167,8 +167,8 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let mut body_cache = BodyCache::new(body);\n     let free_regions =\n         nll::replace_regions_in_mir(infcx, def_id, param_env, &mut body_cache, &mut promoted);\n-    let body_cache = body_cache.read_only(); // no further changes\n-    let promoted: IndexVec<_, _> = promoted.iter().map(|body_cache| body_cache.read_only()).collect();\n+    let body_cache = read_only!(body_cache); // no further changes\n+    let promoted: IndexVec<_, _> = promoted.iter_mut().map(|body_cache| read_only!(body_cache)).collect();\n \n     let location_table = &LocationTable::new(&body_cache);\n \n@@ -492,7 +492,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n     type FlowState = Flows<'cx, 'tcx>;\n \n     fn body(&self) -> &'cx Body<'tcx> {\n-        &self.body_cache\n+        self.body_cache.body()\n     }\n \n     fn visit_block_entry(&mut self, bb: BasicBlock, flow_state: &Self::FlowState) {"}, {"sha": "1eaa82ec08e270a51541f0376a423de4a679f2b8", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -302,7 +302,8 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n             }\n         }\n \n-        for &pred_block in self.cx.body_cache.predecessors_for(block).iter() {\n+        let body_cache = self.cx.body_cache;\n+        for &pred_block in body_cache.predecessors_for(block).iter() {\n             debug!(\"compute_drop_live_points_for_block: pred_block = {:?}\", pred_block,);\n \n             // Check whether the variable is (at least partially)"}, {"sha": "e1750af6693c145cd197f2ac33d98acacad781ae", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -540,7 +540,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         // checker on the promoted MIR, then transfer the constraints back to\n         // the main MIR, changing the locations to the provided location.\n \n-        let parent_body = mem::replace(&mut self.body, &promoted_body_cache);\n+        let parent_body = mem::replace(&mut self.body, promoted_body_cache.body());\n \n         // Use new sets of constraints and closure bounds so that we can\n         // modify their locations."}, {"sha": "ccd6d285a7bc7fc987abe6ce66eaa133f1d12480", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -56,7 +56,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         Prefixes {\n             next: Some(place_ref),\n             kind,\n-            body: &self.body_cache,\n+            body: self.body_cache.body(),\n             tcx: self.infcx.tcx,\n         }\n     }"}, {"sha": "044e3c4a9b3298376b65136d7b5441e809f4227c", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -303,11 +303,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n         if let Some(promoted) = promoted {\n-            return Ok(self.tcx.promoted_mir(did)[promoted].read_only());\n+            return Ok(self.tcx.promoted_mir(did)[promoted].unwrap_read_only());\n         }\n         match instance {\n             ty::InstanceDef::Item(def_id) => if self.tcx.is_mir_available(did) {\n-                Ok(self.tcx.optimized_mir(did).read_only())\n+                Ok(self.tcx.optimized_mir(did).unwrap_read_only())\n             } else {\n                 throw_unsup!(NoMirFor(self.tcx.def_path_str(def_id)))\n             },"}, {"sha": "0f91b8b28bcf01e6bc69b53ea526548fd58eb0a4", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -125,6 +125,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n \n     debug!(\"make_shim({:?}) = {:?}\", instance, result.body());\n \n+    result.ensure_predecessors();\n     tcx.arena.alloc(result)\n }\n \n@@ -928,5 +929,7 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &BodyCache<'_> {\n         |_, _| Ok(()),\n     );\n \n-    tcx.arena.alloc(BodyCache::new(body))\n+    let mut body_cache = BodyCache::new(body);\n+    body_cache.ensure_predecessors();\n+    tcx.arena.alloc(body_cache)\n }"}, {"sha": "d2d4eef1164e4a316dc12336d9afacd238f3454a", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -516,7 +516,7 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult\n \n     // N.B., this borrow is valid because all the consumers of\n     // `mir_built` force this.\n-    let body = &tcx.mir_built(def_id).borrow();\n+    let body_cache = &tcx.mir_built(def_id).borrow();\n \n     let param_env = tcx.param_env(def_id);\n \n@@ -527,8 +527,10 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult\n         hir::BodyOwnerKind::Const |\n         hir::BodyOwnerKind::Static(_) => (true, false),\n     };\n-    let mut checker = UnsafetyChecker::new(const_context, min_const_fn, body, tcx, param_env);\n-    checker.visit_body(body.read_only());\n+    let mut checker = UnsafetyChecker::new(const_context, min_const_fn, body_cache, tcx, param_env);\n+    let mut cache = body_cache.cache().clone();\n+    let read_only_cache = ReadOnlyBodyCache::from_external_cache(&mut cache, body_cache.body());\n+    checker.visit_body(read_only_cache);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);\n     UnsafetyCheckResult {"}, {"sha": "fdfbe59f078b7ec37caec4801fa86e28bdf623ba", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -10,7 +10,7 @@ use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, BodyCache, Operand, Local, UnOp,\n     Rvalue. StatementKind, Statement, LocalKind, TerminatorKind, Terminator,  ClearCrossCrate,\n     SourceInfo, BinOp, SourceScope, SourceScopeData, LocalDecl, BasicBlock, ReadOnlyBodyCache,\n-    RETURN_PLACE\n+    read_only, RETURN_PLACE\n };\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n@@ -93,7 +93,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         // That would require an uniform one-def no-mutation analysis\n         // and RPO (or recursing when needing the value of a local).\n         let mut optimization_finder = ConstPropagator::new(\n-            body_cache.read_only(),\n+            read_only!(body_cache),\n             dummy_body,\n             tcx,\n             source\n@@ -285,7 +285,7 @@ impl<'mir, 'tcx> HasTyCtxt<'tcx> for ConstPropagator<'mir, 'tcx> {\n \n impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     fn new(\n-        body_cache: ReadOnlyBodyCache<'mir, 'tcx>,\n+        body_cache: ReadOnlyBodyCache<'_, 'tcx>,\n         dummy_body: &'mir Body<'tcx>,\n         tcx: TyCtxt<'tcx>,\n         source: MirSource<'tcx>,"}, {"sha": "decd3f65c8128fba188579a5e650dc391cf8021f", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -21,7 +21,7 @@\n \n use rustc::mir::{\n     Constant, Local, LocalKind, Location, Place, Body, BodyCache, Operand, Rvalue,\n-    StatementKind\n+    StatementKind, read_only\n };\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n@@ -40,10 +40,10 @@ impl<'tcx> MirPass<'tcx> for CopyPropagation {\n \n         let mut def_use_analysis = DefUseAnalysis::new(body_cache);\n         loop {\n-            def_use_analysis.analyze(body_cache.read_only());\n+            def_use_analysis.analyze(read_only!(body_cache));\n \n             if eliminate_self_assignments(body_cache, &def_use_analysis) {\n-                def_use_analysis.analyze(body_cache.read_only());\n+                def_use_analysis.analyze(read_only!(body_cache));\n             }\n \n             let mut changed = false;"}, {"sha": "343cd8e47b28da426e80daabca7882921d0aa513", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -759,7 +759,7 @@ fn compute_layout<'tcx>(\n     // Use a liveness analysis to compute locals which are live across a suspension point\n     let LivenessInfo {\n         live_locals, live_locals_at_suspension_points, storage_conflicts, storage_liveness\n-    } = locals_live_across_suspend_points(tcx, body_cache.read_only(), source, movable);\n+    } = locals_live_across_suspend_points(tcx, read_only!(body_cache), source, movable);\n \n     // Erase regions from the types passed in from typeck so we can compare them with\n     // MIR types"}, {"sha": "f4f7584bfabd196846e3bcd522b29bbad1224906", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -514,7 +514,7 @@ impl Inliner<'tcx> {\n         &self,\n         args: Vec<Operand<'tcx>>,\n         callsite: &CallSite<'tcx>,\n-        caller_body: &mut Body<'tcx>,\n+        caller_body_cache: &mut BodyCache<'tcx>,\n     ) -> Vec<Local> {\n         let tcx = self.tcx;\n \n@@ -543,12 +543,12 @@ impl Inliner<'tcx> {\n         // and the vector is `[closure_ref, tmp0, tmp1, tmp2]`.\n         if tcx.is_closure(callsite.callee) {\n             let mut args = args.into_iter();\n-            let self_ = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body);\n-            let tuple = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body);\n+            let self_ = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body_cache);\n+            let tuple = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body_cache);\n             assert!(args.next().is_none());\n \n             let tuple = Place::from(tuple);\n-            let tuple_tys = if let ty::Tuple(s) = tuple.ty(caller_body, tcx).ty.kind {\n+            let tuple_tys = if let ty::Tuple(s) = tuple.ty(caller_body_cache.body(), tcx).ty.kind {\n                 s\n             } else {\n                 bug!(\"Closure arguments are not passed as a tuple\");\n@@ -568,13 +568,13 @@ impl Inliner<'tcx> {\n                     ));\n \n                     // Spill to a local to make e.g., `tmp0`.\n-                    self.create_temp_if_necessary(tuple_field, callsite, caller_body)\n+                    self.create_temp_if_necessary(tuple_field, callsite, caller_body_cache)\n                 });\n \n             closure_ref_arg.chain(tuple_tmp_args).collect()\n         } else {\n             args.into_iter()\n-                .map(|a| self.create_temp_if_necessary(a, callsite, caller_body))\n+                .map(|a| self.create_temp_if_necessary(a, callsite, caller_body_cache))\n                 .collect()\n         }\n     }\n@@ -585,14 +585,14 @@ impl Inliner<'tcx> {\n         &self,\n         arg: Operand<'tcx>,\n         callsite: &CallSite<'tcx>,\n-        caller_body: &mut Body<'tcx>,\n+        caller_body_cache: &mut BodyCache<'tcx>,\n     ) -> Local {\n         // FIXME: Analysis of the usage of the arguments to avoid\n         // unnecessary temporaries.\n \n         if let Operand::Move(place) = &arg {\n             if let Some(local) = place.as_local() {\n-                if caller_body.local_kind(local) == LocalKind::Temp {\n+                if caller_body_cache.local_kind(local) == LocalKind::Temp {\n                     // Reuse the operand if it's a temporary already\n                     return local;\n                 }\n@@ -603,16 +603,16 @@ impl Inliner<'tcx> {\n         // Otherwise, create a temporary for the arg\n         let arg = Rvalue::Use(arg);\n \n-        let ty = arg.ty(caller_body, self.tcx);\n+        let ty = arg.ty(caller_body_cache.body(), self.tcx);\n \n         let arg_tmp = LocalDecl::new_temp(ty, callsite.location.span);\n-        let arg_tmp = caller_body.local_decls.push(arg_tmp);\n+        let arg_tmp = caller_body_cache.local_decls.push(arg_tmp);\n \n         let stmt = Statement {\n             source_info: callsite.location,\n             kind: StatementKind::Assign(box(Place::from(arg_tmp), arg)),\n         };\n-        caller_body[callsite.bb].statements.push(stmt);\n+        caller_body_cache[callsite.bb].statements.push(stmt);\n         arg_tmp\n     }\n }"}, {"sha": "d8c5c2e0bcab4b8da3a3c55c70e9afc684d3f44d", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::mir::{\n     Constant, Location, Place, PlaceBase, PlaceRef, Body, BodyCache, Operand, ProjectionElem,\n-    Rvalue, Local\n+    Rvalue, Local, read_only\n };\n use rustc::mir::visit::{MutVisitor, Visitor};\n use rustc::ty::{self, TyCtxt};\n@@ -24,8 +24,9 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n         // read-only so that we can do global analyses on the MIR in the process (e.g.\n         // `Place::ty()`).\n         let optimizations = {\n+            let read_only_cache = read_only!(body_cache);\n             let mut optimization_finder = OptimizationFinder::new(body_cache, tcx);\n-            optimization_finder.visit_body(body_cache.read_only());\n+            optimization_finder.visit_body(read_only_cache);\n             optimization_finder.optimizations\n         };\n "}, {"sha": "6c0badff89ebc46d05f68373786be0ffa7203c82", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -334,6 +334,7 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &BodyCache<'_> {\n     let (body, _) = tcx.mir_validated(def_id);\n     let mut body_cache = body.steal();\n     run_optimization_passes(tcx, &mut body_cache, def_id, None);\n+    body_cache.ensure_predecessors();\n     tcx.arena.alloc(body_cache)\n }\n \n@@ -348,6 +349,7 @@ fn promoted_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx IndexVec<Promot\n \n     for (p, mut body_cache) in promoted.iter_enumerated_mut() {\n         run_optimization_passes(tcx, &mut body_cache, def_id, Some(p));\n+        body_cache.ensure_predecessors();\n     }\n \n     tcx.intern_promoted(promoted)"}, {"sha": "e2cf9538f1fe626b423fe658ecf01c10c9d3c726", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -296,11 +296,12 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>) {\n         trace!(\"running SimplifyLocals on {:?}\", source);\n         let locals = {\n+            let read_only_cache = read_only!(body_cache);\n             let mut marker = DeclMarker {\n                 locals: BitSet::new_empty(body_cache.local_decls.len()),\n                 body: body_cache,\n             };\n-            marker.visit_body(body_cache.read_only());\n+            marker.visit_body(read_only_cache);\n             // Return pointer and arguments are always live\n             marker.locals.insert(RETURN_PLACE);\n             for arg in body_cache.args_iter() {"}, {"sha": "784ccf5a6b68845291f43fd53fe2b80350e693c5", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "patch": "@@ -41,8 +41,9 @@ impl<'tcx> MirPass<'tcx> for UniformArrayMoveOut {\n         let mut patch = MirPatch::new(body_cache);\n         let param_env = tcx.param_env(src.def_id());\n         {\n+            let read_only_cache = read_only!(body_cache);\n             let mut visitor = UniformArrayMoveOutVisitor{ body: body_cache, patch: &mut patch, tcx, param_env};\n-            visitor.visit_body(body_cache.read_only());\n+            visitor.visit_body(read_only_cache);\n         }\n         patch.apply(body_cache);\n     }\n@@ -188,11 +189,12 @@ impl<'tcx> MirPass<'tcx> for RestoreSubsliceArrayMoveOut<'tcx> {\n         let mut patch = MirPatch::new(body_cache);\n         let param_env = tcx.param_env(src.def_id());\n         {\n+            let read_only_cache = read_only!(body_cache);\n             let mut visitor = RestoreDataCollector {\n                 locals_use: IndexVec::from_elem(LocalUse::new(), &body_cache.local_decls),\n                 candidates: vec![],\n             };\n-            visitor.visit_body(body_cache.read_only());\n+            visitor.visit_body(read_only_cache);\n \n             for candidate in &visitor.candidates {\n                 let statement = &body_cache[candidate.block].statements[candidate.statement_index];"}]}