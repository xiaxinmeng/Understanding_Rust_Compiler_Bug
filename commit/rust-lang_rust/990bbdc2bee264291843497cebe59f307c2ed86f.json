{"sha": "990bbdc2bee264291843497cebe59f307c2ed86f", "node_id": "C_kwDOAAsO6NoAKDk5MGJiZGMyYmVlMjY0MjkxODQzNDk3Y2ViZTU5ZjMwN2MyZWQ4NmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-25T20:12:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-25T20:12:00Z"}, "message": "Auto merge of #10656 - Centri3:master, r=xFrednet\n\nAdd configuration for `semicolon_block` lints\n\nDoes exactly what it says on the tin, suggests moving a block's final semicolon inside if it's multiline and outside if it's singleline.\n\nI don't really like how this is implemented so I'm not too sure if this is ready yet. Alas, it might be ok.\n\n---\n\nfixes #10654\n\nchangelog: Enhancement: [`semicolon_inside_block`]: Added `semicolon-inside-block-ignore-singleline` as a new config value.\n[#10656](https://github.com/rust-lang/rust-clippy/pull/10656)\nchangelog: Enhancement: [`semicolon_outside_block`]: Added `semicolon-outside-block-ignore-multiline` as a new config value.\n[#10656](https://github.com/rust-lang/rust-clippy/pull/10656)\n<!-- changelog_checked -->", "tree": {"sha": "e5da2a82b16b246393c784f60e18dcd1e1300b35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5da2a82b16b246393c784f60e18dcd1e1300b35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/990bbdc2bee264291843497cebe59f307c2ed86f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/990bbdc2bee264291843497cebe59f307c2ed86f", "html_url": "https://github.com/rust-lang/rust/commit/990bbdc2bee264291843497cebe59f307c2ed86f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/990bbdc2bee264291843497cebe59f307c2ed86f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7335cbf909e0046a869682e5ceac9b16d64b588", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7335cbf909e0046a869682e5ceac9b16d64b588", "html_url": "https://github.com/rust-lang/rust/commit/a7335cbf909e0046a869682e5ceac9b16d64b588"}, {"sha": "8c8cf407074b2a1d56a285a575035e1c454c3195", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8cf407074b2a1d56a285a575035e1c454c3195", "html_url": "https://github.com/rust-lang/rust/commit/8c8cf407074b2a1d56a285a575035e1c454c3195"}], "stats": {"total": 788, "additions": 744, "deletions": 44}, "files": [{"sha": "5646c9b15208f268219e05063a480a3f33be368c", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -13,6 +13,8 @@ Please use that command to update the file and do not edit it by hand.\n | [msrv](#msrv) | `None` |\n | [cognitive-complexity-threshold](#cognitive-complexity-threshold) | `25` |\n | [disallowed-names](#disallowed-names) | `[\"foo\", \"baz\", \"quux\"]` |\n+| [semicolon-inside-block-ignore-singleline](#semicolon-inside-block-ignore-singleline) | `false` |\n+| [semicolon-outside-block-ignore-multiline](#semicolon-outside-block-ignore-multiline) | `false` |\n | [doc-valid-idents](#doc-valid-idents) | `[\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"DirectX\", \"ECMAScript\", \"GPLv2\", \"GPLv3\", \"GitHub\", \"GitLab\", \"IPv4\", \"IPv6\", \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\", \"NaN\", \"NaNs\", \"OAuth\", \"GraphQL\", \"OCaml\", \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\", \"OpenDNS\", \"WebGL\", \"TensorFlow\", \"TrueType\", \"iOS\", \"macOS\", \"FreeBSD\", \"TeX\", \"LaTeX\", \"BibTeX\", \"BibLaTeX\", \"MinGW\", \"CamelCase\"]` |\n | [too-many-arguments-threshold](#too-many-arguments-threshold) | `7` |\n | [type-complexity-threshold](#type-complexity-threshold) | `250` |\n@@ -203,6 +205,22 @@ default configuration of Clippy. By default, any configuration will replace the\n * [disallowed_names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names)\n \n \n+### semicolon-inside-block-ignore-singleline\n+Whether to lint only if it's multiline.\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [semicolon_inside_block](https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_inside_block)\n+\n+\n+### semicolon-outside-block-ignore-multiline\n+Whether to lint only if it's singleline.\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [semicolon_outside_block](https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block)\n+\n+\n ### doc-valid-idents\n The list of words this lint should not consider as identifiers needing ticks. The value\n `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the"}, {"sha": "48dbecc9f6aa2dec52e09d23e52222030d4f08ff", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -933,7 +933,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(from_raw_with_void_ptr::FromRawWithVoidPtr));\n     store.register_late_pass(|_| Box::new(suspicious_xor_used_as_pow::ConfusingXorAndPow));\n     store.register_late_pass(move |_| Box::new(manual_is_ascii_check::ManualIsAsciiCheck::new(msrv())));\n-    store.register_late_pass(|_| Box::new(semicolon_block::SemicolonBlock));\n+    let semicolon_inside_block_ignore_singleline = conf.semicolon_inside_block_ignore_singleline;\n+    let semicolon_outside_block_ignore_multiline = conf.semicolon_outside_block_ignore_multiline;\n+    store.register_late_pass(move |_| {\n+        Box::new(semicolon_block::SemicolonBlock::new(\n+            semicolon_inside_block_ignore_singleline,\n+            semicolon_outside_block_ignore_multiline,\n+        ))\n+    });\n     store.register_late_pass(|_| Box::new(fn_null_check::FnNullCheck));\n     store.register_late_pass(|_| Box::new(permissions_set_readonly_false::PermissionsSetReadonlyFalse));\n     store.register_late_pass(|_| Box::new(size_of_ref::SizeOfRef));"}, {"sha": "419d7991f0ec0bfb1edbf45d36c1d728d0bbb905", "filename": "clippy_lints/src/semicolon_block.rs", "status": "modified", "additions": 82, "deletions": 43, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{multispan_sugg_with_applicability, span_lint_and\n use rustc_errors::Applicability;\n use rustc_hir::{Block, Expr, ExprKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -64,7 +64,78 @@ declare_clippy_lint! {\n     restriction,\n     \"add a semicolon outside the block\"\n }\n-declare_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK]);\n+impl_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK]);\n+\n+#[derive(Copy, Clone)]\n+pub struct SemicolonBlock {\n+    semicolon_inside_block_ignore_singleline: bool,\n+    semicolon_outside_block_ignore_multiline: bool,\n+}\n+\n+impl SemicolonBlock {\n+    pub fn new(semicolon_inside_block_ignore_singleline: bool, semicolon_outside_block_ignore_multiline: bool) -> Self {\n+        Self {\n+            semicolon_inside_block_ignore_singleline,\n+            semicolon_outside_block_ignore_multiline,\n+        }\n+    }\n+\n+    fn semicolon_inside_block(self, cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'_>, semi_span: Span) {\n+        let insert_span = tail.span.source_callsite().shrink_to_hi();\n+        let remove_span = semi_span.with_lo(block.span.hi());\n+\n+        if self.semicolon_inside_block_ignore_singleline && get_line(cx, remove_span) == get_line(cx, insert_span) {\n+            return;\n+        }\n+\n+        span_lint_and_then(\n+            cx,\n+            SEMICOLON_INSIDE_BLOCK,\n+            semi_span,\n+            \"consider moving the `;` inside the block for consistent formatting\",\n+            |diag| {\n+                multispan_sugg_with_applicability(\n+                    diag,\n+                    \"put the `;` here\",\n+                    Applicability::MachineApplicable,\n+                    [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+                );\n+            },\n+        );\n+    }\n+\n+    fn semicolon_outside_block(\n+        self,\n+        cx: &LateContext<'_>,\n+        block: &Block<'_>,\n+        tail_stmt_expr: &Expr<'_>,\n+        semi_span: Span,\n+    ) {\n+        let insert_span = block.span.with_lo(block.span.hi());\n+        // account for macro calls\n+        let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n+        let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n+\n+        if self.semicolon_outside_block_ignore_multiline && get_line(cx, remove_span) != get_line(cx, insert_span) {\n+            return;\n+        }\n+\n+        span_lint_and_then(\n+            cx,\n+            SEMICOLON_OUTSIDE_BLOCK,\n+            block.span,\n+            \"consider moving the `;` outside the block for consistent formatting\",\n+            |diag| {\n+                multispan_sugg_with_applicability(\n+                    diag,\n+                    \"put the `;` here\",\n+                    Applicability::MachineApplicable,\n+                    [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+                );\n+            },\n+        );\n+    }\n+}\n \n impl LateLintPass<'_> for SemicolonBlock {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n@@ -83,55 +154,23 @@ impl LateLintPass<'_> for SemicolonBlock {\n                     span,\n                     ..\n                 } = stmt else { return };\n-                semicolon_outside_block(cx, block, expr, span);\n+                self.semicolon_outside_block(cx, block, expr, span);\n             },\n             StmtKind::Semi(Expr {\n                 kind: ExprKind::Block(block @ Block { expr: Some(tail), .. }, _),\n                 ..\n-            }) if !block.span.from_expansion() => semicolon_inside_block(cx, block, tail, stmt.span),\n+            }) if !block.span.from_expansion() => {\n+                self.semicolon_inside_block(cx, block, tail, stmt.span);\n+            },\n             _ => (),\n         }\n     }\n }\n \n-fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'_>, semi_span: Span) {\n-    let insert_span = tail.span.source_callsite().shrink_to_hi();\n-    let remove_span = semi_span.with_lo(block.span.hi());\n-\n-    span_lint_and_then(\n-        cx,\n-        SEMICOLON_INSIDE_BLOCK,\n-        semi_span,\n-        \"consider moving the `;` inside the block for consistent formatting\",\n-        |diag| {\n-            multispan_sugg_with_applicability(\n-                diag,\n-                \"put the `;` here\",\n-                Applicability::MachineApplicable,\n-                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n-            );\n-        },\n-    );\n-}\n-\n-fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_expr: &Expr<'_>, semi_span: Span) {\n-    let insert_span = block.span.with_lo(block.span.hi());\n-    // account for macro calls\n-    let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n-    let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n+fn get_line(cx: &LateContext<'_>, span: Span) -> Option<usize> {\n+    if let Ok(line) = cx.sess().source_map().lookup_line(span.lo()) {\n+        return Some(line.line);\n+    }\n \n-    span_lint_and_then(\n-        cx,\n-        SEMICOLON_OUTSIDE_BLOCK,\n-        block.span,\n-        \"consider moving the `;` outside the block for consistent formatting\",\n-        |diag| {\n-            multispan_sugg_with_applicability(\n-                diag,\n-                \"put the `;` here\",\n-                Applicability::MachineApplicable,\n-                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n-            );\n-        },\n-    );\n+    None\n }"}, {"sha": "5f05d971fce23a5485c674b0de458d7b45594df8", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -277,6 +277,14 @@ define_Conf! {\n     /// `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n     /// default configuration of Clippy. By default, any configuration will replace the default value.\n     (disallowed_names: Vec<String> = super::DEFAULT_DISALLOWED_NAMES.iter().map(ToString::to_string).collect()),\n+    /// Lint: SEMICOLON_INSIDE_BLOCK.\n+    ///\n+    /// Whether to lint only if it's multiline.\n+    (semicolon_inside_block_ignore_singleline: bool = false),\n+    /// Lint: SEMICOLON_OUTSIDE_BLOCK.\n+    ///\n+    /// Whether to lint only if it's singleline.\n+    (semicolon_outside_block_ignore_multiline: bool = false),\n     /// Lint: DOC_MARKDOWN.\n     ///\n     /// The list of words this lint should not consider as identifiers needing ticks. The value"}, {"sha": "fc8038a090715590aa2e1d032077e4fb40cc215f", "filename": "tests/ui-toml/semicolon_block/both.fixed", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fboth.fixed?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -0,0 +1,86 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()) };\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "52ce1f0387ee1d5ad4e3b1291bac422de1990909", "filename": "tests/ui-toml/semicolon_block/both.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fboth.rs?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -0,0 +1,86 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "2f58842eab01b1933d10f8a0530058c4e3bfba56", "filename": "tests/ui-toml/semicolon_block/both.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fboth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fboth.stderr?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -0,0 +1,55 @@\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/both.rs:43:5\n+   |\n+LL |     { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::semicolon-outside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block(); }\n+LL +     { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/both.rs:44:5\n+   |\n+LL |     unsafe { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block(); }\n+LL +     unsafe { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/both.rs:49:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block()\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `-D clippy::semicolon-inside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL ~         unit_fn_block();\n+LL ~     }\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/both.rs:63:5\n+   |\n+LL |     { m!(()); }\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     { m!(()); }\n+LL +     { m!(()) };\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "4d03e88deba8a95f19109e8bdce65096a35fed74", "filename": "tests/ui-toml/semicolon_block/clippy.toml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fclippy.toml?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -0,0 +1,2 @@\n+semicolon-inside-block-ignore-singleline = true\n+semicolon-outside-block-ignore-multiline = true"}, {"sha": "23df9830177359ebdb797d0c0e5110b6ea6b11b6", "filename": "tests/ui-toml/semicolon_block/semicolon_inside_block.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.fixed?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -0,0 +1,85 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "e8516f79b20cde60d35cc611f152a4817430b2eb", "filename": "tests/ui-toml/semicolon_block/semicolon_inside_block.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.rs?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -0,0 +1,85 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_inside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "2569dc4b4e4530f1ab37a7fc21284d761f6c1b7d", "filename": "tests/ui-toml/semicolon_block/semicolon_inside_block.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_inside_block.stderr?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -0,0 +1,18 @@\n+error: consider moving the `;` inside the block for consistent formatting\n+  --> $DIR/semicolon_inside_block.rs:48:5\n+   |\n+LL | /     {\n+LL | |         unit_fn_block();\n+LL | |         unit_fn_block()\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `-D clippy::semicolon-inside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL ~         unit_fn_block();\n+LL ~     }\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "7e9055e71106aff3f8be5036359aea19210135cc", "filename": "tests/ui-toml/semicolon_block/semicolon_outside_block.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.fixed?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -0,0 +1,85 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()) };\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "4dc956d8a4b51773bad95b87afa1774ce1b2229c", "filename": "tests/ui-toml/semicolon_block/semicolon_outside_block.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.rs?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -0,0 +1,85 @@\n+//@run-rustfix\n+#![allow(\n+    unused,\n+    clippy::unused_unit,\n+    clippy::unnecessary_operation,\n+    clippy::no_effect,\n+    clippy::single_element_loop\n+)]\n+#![warn(clippy::semicolon_outside_block)]\n+\n+macro_rules! m {\n+    (()) => {\n+        ()\n+    };\n+    (0) => {{\n+        0\n+    };};\n+    (1) => {{\n+        1;\n+    }};\n+    (2) => {{\n+        2;\n+    }};\n+}\n+\n+fn unit_fn_block() {\n+    ()\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    { unit_fn_block() }\n+    unsafe { unit_fn_block() }\n+\n+    {\n+        unit_fn_block()\n+    }\n+\n+    { unit_fn_block() };\n+    unsafe { unit_fn_block() };\n+\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n+\n+    { unit_fn_block(); };\n+    unsafe { unit_fn_block(); };\n+\n+    {\n+        unit_fn_block();\n+        unit_fn_block()\n+    };\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    }\n+    {\n+        unit_fn_block();\n+        unit_fn_block();\n+    };\n+\n+    { m!(()) };\n+    { m!(()); }\n+    { m!(()); };\n+    m!(0);\n+    m!(1);\n+    m!(2);\n+\n+    for _ in [()] {\n+        unit_fn_block();\n+    }\n+    for _ in [()] {\n+        unit_fn_block()\n+    }\n+\n+    let _d = || {\n+        unit_fn_block();\n+    };\n+    let _d = || {\n+        unit_fn_block()\n+    };\n+\n+    { unit_fn_block(); };\n+\n+    unit_fn_block()\n+}"}, {"sha": "6dd3577dd09f06812829e50f1a07cba32b4a356a", "filename": "tests/ui-toml/semicolon_block/semicolon_outside_block.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsemicolon_block%2Fsemicolon_outside_block.stderr?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -0,0 +1,39 @@\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:42:5\n+   |\n+LL |     { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::semicolon-outside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block(); }\n+LL +     { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:43:5\n+   |\n+LL |     unsafe { unit_fn_block(); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block(); }\n+LL +     unsafe { unit_fn_block() };\n+   |\n+\n+error: consider moving the `;` outside the block for consistent formatting\n+  --> $DIR/semicolon_outside_block.rs:62:5\n+   |\n+LL |     { m!(()); }\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     { m!(()); }\n+LL +     { m!(()) };\n+   |\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "44710b09648eeb91accaa2d4761fc4be1410e08b", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/990bbdc2bee264291843497cebe59f307c2ed86f/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=990bbdc2bee264291843497cebe59f307c2ed86f", "patch": "@@ -37,6 +37,8 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            missing-docs-in-crate-items\n            msrv\n            pass-by-value-size-limit\n+           semicolon-inside-block-ignore-singleline\n+           semicolon-outside-block-ignore-multiline\n            single-char-binding-names-threshold\n            standard-macro-braces\n            suppress-restriction-lint-in-const"}]}